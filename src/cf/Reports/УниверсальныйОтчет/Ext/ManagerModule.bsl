#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Настройки размещения в панели отчетов.
//
// Параметры:
//   Настройки - Коллекция - Передается "как есть" из ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//       Может использоваться для получения настроек варианта этого отчета при помощи функции ВариантыОтчетов.ОписаниеВарианта().
//   НастройкиОтчета - СтрокаДереваЗначений - Настройки этого отчета,
//       уже сформированные при помощи функции ВариантыОтчетов.ОписаниеОтчета() и готовые к изменению.
//       См. "Свойства для изменения" процедуры ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Описание:
//   См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Вспомогательные методы:
//	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина/Ложь);
//
// Примеры:
//
//  1. Установка описания варианта.
//	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//	НастройкиВарианта.Описание = НСтр("ru = '<Описание>'");
//
//  2. Отключение варианта отчета.
//	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//	НастройкиВарианта.Включен = Ложь;
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;

	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
	МодульВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Ложь);
	
	НастройкиВарианта = МодульВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Основной");
	НастройкиВарианта.Описание = НСтр("ru = 'Универсальный отчет по справочникам, документам, регистрам.'");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнициализироватьОтчет(КомпоновщикНастроек,
							  ОчиститьСтруктуру,
							  АдресСхемы = Неопределено,
							  НастройкиВарианта = Неопределено,
							  НастройкиПоУмолчанию = Неопределено) Экспорт
	
	ПараметрыОтчета = Новый Структура;
	
	// Если настройки варианта не передаются, то они берутся из настроек компоновщика.
	Если НастройкиВарианта = Неопределено Тогда
		НастройкиВарианта = КомпоновщикНастроек.Настройки; 
	КонецЕсли;
	
	ЭтоЗагруженнаяСхема = НастройкиВарианта.ДополнительныеСвойства.Свойство("СхемаКомпоновкиДанных");
	
	Если ЭтоЗагруженнаяСхема Тогда

		ЗагруженнаяСхема = НастройкиВарианта.ДополнительныеСвойства.СхемаКомпоновкиДанных;
		ВременныйФайл = ПолучитьИмяВременногоФайла();
		ЗагруженнаяСхема.Записать(ВременныйФайл);
	
		Чтение = Новый ЧтениеXML;
		НовыйСXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
		Чтение.ОткрытьФайл(ВременныйФайл);
		СКД = НовыйСXDTO.ПрочитатьXML(Чтение, Тип("СхемаКомпоновкиДанных"));
		Чтение.Закрыть();
		
	Иначе
		
		СКД = Отчеты.УниверсальныйОтчет.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		ИсточникДанных = СКД.ИсточникиДанных.Добавить();
		ИсточникДанных.Имя = "ИсточникДанных1";
		ИсточникДанных.ТипИсточникаДанных = "Local";
		
		НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
		НаборДанных.Имя = "НаборДанных1";
		НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
		
		СКД.ПоляИтога.Очистить();
		
		Если НастройкиВарианта.ДополнительныеСвойства.Свойство("ОтчетИнициализирован") Тогда
		
			ПараметрыОтчета.Вставить("ТипОбъектаМетаданных", НастройкиВарианта.ПараметрыДанных.Элементы.Найти("ТипОбъектаМетаданных").Значение);
			Если ПустаяСтрока(ПараметрыОтчета.ТипОбъектаМетаданных) Тогда
				ПараметрыОтчета.ТипОбъектаМетаданных = ТипОбъектаМетаданныхПоУмолчанию();
			КонецЕсли;
			ПолноеИмяОбъектаМетаданных = НастройкиВарианта.ПараметрыДанных.Элементы.Найти("ПолноеИмяОбъектаМетаданных").Значение;
			Если ПустаяСтрока(ПолноеИмяОбъектаМетаданных) Тогда
				ПолноеИмяОбъектаМетаданных = ПолноеИмяОбъектаМетаданныхПоУмолчанию(КомпоновщикНастроек, ПараметрыОтчета.ТипОбъектаМетаданных);
			КонецЕсли;
			ПараметрыОтчета.Вставить("ПолноеИмяОбъектаМетаданных", ПолноеИмяОбъектаМетаданных);
			ИмяТаблицы = НастройкиВарианта.ПараметрыДанных.Элементы.Найти("ИмяТаблицы").Значение;
			ДоступныеТаблицы = ДоступныеТаблицы(КомпоновщикНастроек, ПараметрыОтчета.ТипОбъектаМетаданных, ПараметрыОтчета.ПолноеИмяОбъектаМетаданных);
			Если ПустаяСтрока(ИмяТаблицы) Тогда
				ИмяТаблицы = ДоступныеТаблицы[0].Значение;
			КонецЕсли;
			ПараметрыОтчета.Вставить("ИмяТаблицы", ИмяТаблицы);
		Иначе
			ПараметрыОтчета = НастройкиПоУмолчанию; 
			ДоступныеТаблицы = ДоступныеТаблицы(КомпоновщикНастроек, ПараметрыОтчета.ТипОбъектаМетаданных, ПараметрыОтчета.ПолноеИмяОбъектаМетаданных);
		КонецЕсли;
		СКД.НаборыДанных[0].Запрос = ТекстЗапросаПоМетаданным(ПараметрыОтчета);
		
		ДобавитьПоляНабораДанных(ПараметрыОтчета, СКД);
		
		// Для справочников и планов видов расчета пользовательский параметр Период не выводится.
		Если ПараметрыОтчета.ТипОбъектаМетаданных = "Справочники"
			Или ПараметрыОтчета.ТипОбъектаМетаданных = "ПланыВидовРасчета" Тогда
			СКД.Параметры.Период.ОграничениеИспользования = Истина;
		КонецЕсли;
		Если ДоступныеТаблицы.Количество() <= 1 Тогда
			СКД.Параметры.ИмяТаблицы.ОграничениеИспользования = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СКД, АдресСхемы);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Если ОчиститьСтруктуру Тогда
		
		КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
		
		Если ЭтоЗагруженнаяСхема Тогда
			КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ЗагруженнаяСхема);
		Иначе
			ДобавитьПоказатели(ПараметрыОтчета, КомпоновщикНастроек);
			ПередКомпоновкойМакета(СКД, КомпоновщикНастроек);
			
			ПараметрОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТипОбъектаМетаданных");
			ПараметрОтчета.Значение = ПараметрыОтчета.ТипОбъектаМетаданных;
			
			Для Каждого ПН Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
				Если ПН.Параметр = ПараметрОтчета.Параметр Тогда
					ПН.Значение = ПараметрыОтчета.ТипОбъектаМетаданных;
				КонецЕсли;
			КонецЦикла;
			
			ПараметрОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПолноеИмяОбъектаМетаданных");
			ПараметрОтчета.Значение = ПараметрыОтчета.ПолноеИмяОбъектаМетаданных; 
			
			Для Каждого ПН Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
				Если ПН.Параметр = ПараметрОтчета.Параметр Тогда
					ПН.Значение = ПараметрыОтчета.ПолноеИмяОбъектаМетаданных;
				КонецЕсли;
			КонецЦикла;
			
			ПараметрОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИмяТаблицы");
			ПараметрОтчета.Значение = ПараметрыОтчета.ИмяТаблицы; 
			
			Для Каждого ПН Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
				Если ПН.Параметр = ПараметрОтчета.Параметр Тогда
					ПН.Значение = ПараметрыОтчета.ИмяТаблицы;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ОтчетИнициализирован", Истина);
		
	КонецЕсли;
	
	Возврат СхемаКомпоновкиДанных;

КонецФункции

Процедура ПередКомпоновкойМакета(Схема, КомпоновщикНастроек)
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
	Структура = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
КонецПроцедуры

Функция ТекстЗапросаПоМетаданным(ПараметрыОтчета)
	
	ТекстЗапроса = " ВЫБРАТЬ РАЗРЕШЕННЫЕ " + Символы.ПС;
	
	Если ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыСведений" Тогда
		ИмяТипаДанных = "РегистрСведений";
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыНакопления" Тогда
		ИмяТипаДанных = "РегистрНакопления";
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "Справочники" Тогда
		ИмяТипаДанных = "Справочник";
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "Документы" Тогда
		ИмяТипаДанных = "Документ";
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
		ИмяТипаДанных = "РегистрБухгалтерии";
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыРасчета" Тогда
		ИмяТипаДанных = "РегистрРасчета";
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "ПланыВидовРасчета" Тогда
		ИмяТипаДанных = "ПланВидовРасчета";
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "БизнесПроцессы" Тогда
		ИмяТипаДанных = "БизнесПроцесс";
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "Задачи" Тогда
		ИмяТипаДанных = "Задача";
	КонецЕсли;

	ТекстЗапроса = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-2);
	ТекстЗапроса = ТекстЗапроса
		+ "* ИЗ " + ИмяТипаДанных + "." + ПараметрыОтчета.ПолноеИмяОбъектаМетаданных;
	
	ЭтоТабличнаяЧастьИсточника = Ложь;
	
	Если НЕ ПустаяСтрока(ПараметрыОтчета.ИмяТаблицы) Тогда
		
		Если ИмяТипаДанных = "Справочник" ИЛИ ИмяТипаДанных = "Документ" 
			Или ИмяТипаДанных = "Задача" ИЛИ ИмяТипаДанных = "БизнесПроцесс" Тогда 
			// Если это табличная часть объекта то нужно проверить ее наличие
			Если  Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ПолноеИмяОбъектаМетаданных].ТабличныеЧасти.Найти(ПараметрыОтчета.ИмяТаблицы) <> Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса + "." + ПараметрыОтчета.ИмяТаблицы;
				ЭтоТабличнаяЧастьИсточника = Истина;
			КонецЕсли;
		Иначе
			ТекстЗапроса = ТекстЗапроса + "." + ПараметрыОтчета.ИмяТаблицы;
		КонецЕсли;
		
	КонецЕсли;

	Если ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" 
		Или ПараметрыОтчета.ИмяТаблицы = "Обороты" Тогда
		ТекстЗапроса = ТекстЗапроса + "({&НачалоПериода} ,{&КонецПериода} ,Авто)";
	ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "Остатки" Тогда
		ТекстЗапроса = ТекстЗапроса + "({&КонецПериода} ,)";
	ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "СрезПервых" Тогда
		ТекстЗапроса = ТекстЗапроса + "({&НачалоПериода} ,)";
	ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "СрезПоследних" Тогда
		ТекстЗапроса = ТекстЗапроса + "({&КонецПериода} ,)";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + " КАК ИсточникДанных";

	Если ПараметрыОтчета.ТипОбъектаМетаданных = "Документы" 
		Или ПараметрыОтчета.ТипОбъектаМетаданных = "Задачи"
		Или ПараметрыОтчета.ТипОбъектаМетаданных = "БизнесПроцессы" Тогда
		Если ЭтоТабличнаяЧастьИсточника Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|{ГДЕ
				|	(ИсточникДанных.Ссылка.Дата >= &НачалоПериода),(ИсточникДанных.Ссылка.Дата <= &КонецПериода)}";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
				|{ГДЕ
				|	(ИсточникДанных.Дата >= &НачалоПериода),(ИсточникДанных.Дата <= &КонецПериода)}";
		КонецЕсли;
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыНакопления" И ПустаяСтрока(ПараметрыОтчета.ИмяТаблицы) Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|{ГДЕ
				|	(ИсточникДанных.Период >= &НачалоПериода),(ИсточникДанных.Период <= &КонецПериода)}";
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" 
		И ПустаяСтрока(ПараметрыОтчета.ИмяТаблицы) Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|{ГДЕ
			|	(ИсточникДанных.Период >= &НачалоПериода),(ИсточникДанных.Период <= &КонецПериода)}";
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыРасчета" Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	ИсточникДанных.ПериодРегистрации >= &НачалоПериода И ИсточникДанных.ПериодРегистрации <= &КонецПериода";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ДоступныеТипыОбъектовМетаданных() Экспорт
	
	ЗначенияДляВыбора = Новый СписокЗначений;
	
	Если ЕстьОбъектыТипаМетаданных(Метаданные.Документы) Тогда
		ЗначенияДляВыбора.Добавить("Документы", НСтр("ru = 'Документ'"), , БиблиотекаКартинок.Документ);
	КонецЕсли;
	Если ЕстьОбъектыТипаМетаданных(Метаданные.Справочники) Тогда
		ЗначенияДляВыбора.Добавить("Справочники", НСтр("ru = 'Справочник'"), , БиблиотекаКартинок.Справочник);
	КонецЕсли;
	Если ЕстьОбъектыТипаМетаданных(Метаданные.РегистрыНакопления) Тогда
		ЗначенияДляВыбора.Добавить("РегистрыНакопления", НСтр("ru = 'Регистр накопления'"), , БиблиотекаКартинок.РегистрНакопления);
	КонецЕсли;
	Если ЕстьОбъектыТипаМетаданных(Метаданные.РегистрыСведений) Тогда
		ЗначенияДляВыбора.Добавить("РегистрыСведений", НСтр("ru = 'Регистр сведений'"), , БиблиотекаКартинок.РегистрСведений);
	КонецЕсли;
	Если ЕстьОбъектыТипаМетаданных(Метаданные.РегистрыБухгалтерии) Тогда
		ЗначенияДляВыбора.Добавить("РегистрыБухгалтерии", НСтр("ru = 'Регистр бухгалтерии'"), , БиблиотекаКартинок.РегистрБухгалтерии);
	КонецЕсли;
	Если ЕстьОбъектыТипаМетаданных(Метаданные.РегистрыРасчета) Тогда
		ЗначенияДляВыбора.Добавить("РегистрыРасчета", НСтр("ru = 'Регистр расчета'"), , БиблиотекаКартинок.РегистрРасчета);
	КонецЕсли;
	Если ЕстьОбъектыТипаМетаданных(Метаданные.ПланыВидовРасчета) Тогда
		ЗначенияДляВыбора.Добавить("ПланыВидовРасчета", НСтр("ru = 'Планы видов расчета'"), , БиблиотекаКартинок.ПланВидовРасчета);
	КонецЕсли;
	Если ЕстьОбъектыТипаМетаданных(Метаданные.БизнесПроцессы) Тогда
		ЗначенияДляВыбора.Добавить("БизнесПроцессы", НСтр("ru = 'Бизнес-процессы'"), , БиблиотекаКартинок.БизнесПроцесс);
	КонецЕсли;
	Если ЕстьОбъектыТипаМетаданных(Метаданные.Задачи) Тогда
		ЗначенияДляВыбора.Добавить("Задачи", НСтр("ru = 'Задачи'"), , БиблиотекаКартинок.Задача);
	КонецЕсли;
	
	Возврат ЗначенияДляВыбора;
	
КонецФункции

Функция ДоступныеОбъектыМетаданных(КомпоновщикНастроек, ТипОбъектаМетаданных = "") Экспорт
	
	ЗначенияДляВыбора = Новый СписокЗначений;
	УдаляемыеОбъекты  = Новый СписокЗначений;
	
	Если ПустаяСтрока(ТипОбъектаМетаданных) Тогда
		ПараметрыОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
		ПараметрТипОбъектаМетаданных = ПараметрыОтчета.Найти("ТипОбъектаМетаданных");
		ТипОбъектаМетаданных = ПараметрТипОбъектаМетаданных.Значение;
	КонецЕсли;
	Если ТипОбъектаМетаданных <> Неопределено И Не ПустаяСтрока(ТипОбъектаМетаданных) Тогда
		Для каждого Объект Из Метаданные[ТипОбъектаМетаданных] Цикл
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Объект)
				Или Не ПравоДоступа("Чтение", Объект) Тогда
				Продолжить;
			КонецЕсли;
			Если НРег(Лев(Объект.Имя, 7)) = "удалить" Тогда
				УдаляемыеОбъекты.Добавить(Объект.Имя, Объект.Синоним);
			Иначе
				ЗначенияДляВыбора.Добавить(Объект.Имя, Объект.Синоним);
			КонецЕсли;
		КонецЦикла;
		ЗначенияДляВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		УдаляемыеОбъекты.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		
		Для Каждого УдаляемыйОбъект Из УдаляемыеОбъекты Цикл
			ЗначенияДляВыбора.Добавить(УдаляемыйОбъект.Значение, УдаляемыйОбъект.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗначенияДляВыбора;
	
КонецФункции

Функция ДоступныеТаблицы(КомпоновщикНастроек, ТипОбъектаМетаданных = "", ПолноеИмяОбъектаМетаданных = "") Экспорт
	
	ЗначенияДляВыбора = Новый СписокЗначений;
	
	ЭтоЗагруженнаяСхема = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("СхемаКомпоновкиДанных");
	
	Если ПустаяСтрока(ТипОбъектаМетаданных) Тогда
		ПараметрыОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
		ПараметрТипОбъектаМетаданных = ПараметрыОтчета.Найти("ТипОбъектаМетаданных");
		ТипОбъектаМетаданных = ПараметрТипОбъектаМетаданных.Значение;
	КонецЕсли;
	
	Если ПустаяСтрока(ПолноеИмяОбъектаМетаданных) Тогда
		ПараметрыОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
		ПараметрТипОбъектаМетаданных = ПараметрыОтчета.Найти("ПолноеИмяОбъектаМетаданных");
		ПолноеИмяОбъектаМетаданных = ПараметрТипОбъектаМетаданных.Значение;
	КонецЕсли;
	
	ПараметрыОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
	ПараметрТипОбъектаМетаданных = ПараметрыОтчета.Найти("ТипОбъектаМетаданных");
	
	ПараметрПолноеИмяОбъектаМетаданных = ПараметрыОтчета.Найти("ПолноеИмяОбъектаМетаданных");
	
	Если (НЕ ЗначениеЗаполнено(ТипОбъектаМетаданных) 
		ИЛИ НЕ ЗначениеЗаполнено(ПолноеИмяОбъектаМетаданных))
		И НЕ КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("СхемаКомпоновкиДанных") Тогда
		Возврат ЗначенияДляВыбора;
	КонецЕсли;
	
	ЗначенияДляВыбора.Добавить("", НСтр("ru = 'Основные данные'"));
	Если ТипОбъектаМетаданных = "Документы" 
		ИЛИ ТипОбъектаМетаданных = "Задачи"
		ИЛИ ТипОбъектаМетаданных = "БизнесПроцессы"
		ИЛИ ТипОбъектаМетаданных = "Справочники" Тогда
		Для каждого ТабличнаяЧасть Из Метаданные[ТипОбъектаМетаданных][ПолноеИмяОбъектаМетаданных].ТабличныеЧасти Цикл
			ЗначенияДляВыбора.Добавить(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Синоним);
		КонецЦикла;
	ИначеЕсли ТипОбъектаМетаданных = "РегистрыНакопления" Тогда
		Если Метаданные[ТипОбъектаМетаданных][ПолноеИмяОбъектаМетаданных].ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			ЗначенияДляВыбора.Добавить("ОстаткиИОбороты", НСтр("ru = 'Остатки и обороты'"));
		Иначе
			ЗначенияДляВыбора.Добавить("Обороты", НСтр("ru = 'Обороты'"));
		КонецЕсли;
	ИначеЕсли ТипОбъектаМетаданных = "РегистрыСведений" Тогда 
		Если Метаданные[ТипОбъектаМетаданных][ПолноеИмяОбъектаМетаданных].ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		Иначе
			ЗначенияДляВыбора.Добавить("СрезПоследних", НСтр("ru = 'Срез последних'"));
			ЗначенияДляВыбора.Добавить("СрезПервых",    НСтр("ru = 'Срез первых'"));
		КонецЕсли;
	ИначеЕсли ТипОбъектаМетаданных = "РегистрыРасчета" Тогда 
		Если Метаданные[ТипОбъектаМетаданных][ПолноеИмяОбъектаМетаданных].ПериодДействия Тогда
			ЗначенияДляВыбора.Добавить("ДанныеГрафика",             НСтр("ru = 'Данные графика'"));
			ЗначенияДляВыбора.Добавить("ФактическийПериодДействия", НСтр("ru = 'Фактический период действия'"));
		КонецЕсли;
	ИначеЕсли ТипОбъектаМетаданных = "ПланыВидовРасчета" Тогда
		ЗначенияДляВыбора.Добавить("БазовыеВидыРасчета",     НСтр("ru = 'Базовые виды расчета'"));
		ЗначенияДляВыбора.Добавить("ВедущиеВидыРасчета",     НСтр("ru = 'Ведущие виды расчета'"));
		ЗначенияДляВыбора.Добавить("ВытесняющиеВидыРасчета", НСтр("ru = 'Вытесняющие виды расчета'"));
	ИначеЕсли ТипОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
		ЗначенияДляВыбора.Добавить("ОстаткиИОбороты",   НСтр("ru = 'Остатки и обороты'"));
		ЗначенияДляВыбора.Добавить("Остатки",           НСтр("ru = 'Остатки'"));
		ЗначенияДляВыбора.Добавить("Обороты",           НСтр("ru = 'Обороты'"));
		ЗначенияДляВыбора.Добавить("ОборотыДтКт",       НСтр("ru = 'Обороты Дт/Кт'"));
		ЗначенияДляВыбора.Добавить("ДвиженияССубконто", НСтр("ru = 'Движения с субконто'"));
	ИначеЕсли ЭтоЗагруженнаяСхема Тогда
		ЗначенияДляВыбора.Очистить();
	КонецЕсли;
	
	Возврат ЗначенияДляВыбора;
	
КонецФункции

Функция ЕстьОбъектыТипаМетаданных(ТипМетаданных)
	
	Для каждого Объект Из ТипМетаданных Цикл
		Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Объект)
			И ПравоДоступа("Чтение", Объект) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ТипОбъектаМетаданныхПоУмолчанию() Экспорт
	
	ЗначенияДляВыбора = ДоступныеТипыОбъектовМетаданных();
	
	Если Отчеты.УниверсальныйОтчет.ДоступныеТипыОбъектовМетаданных().НайтиПоЗначению("РегистрыНакопления") <> Неопределено Тогда
		Возврат "РегистрыНакопления";
	Иначе
		Возврат ЗначенияДляВыбора[0].Значение;
	КонецЕсли;
	
КонецФункции

Функция ПолноеИмяОбъектаМетаданныхПоУмолчанию(КомпоновщикНастроек, ТипОбъектаМетаданных) Экспорт
	
	ЗначенияДляВыбора = ДоступныеОбъектыМетаданных(КомпоновщикНастроек, ТипОбъектаМетаданных);
	
	ЭтоЗагруженнаяСхема = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("СхемаКомпоновкиДанных");
	Если Не ЭтоЗагруженнаяСхема И ЗначенияДляВыбора.Количество() > 0 Тогда
		ЗначениеПоУмолчанию = ЗначенияДляВыбора[0].Значение;
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

Функция ИмяТаблицыПоУмолчанию(КомпоновщикНастроек, ТипОбъектаМетаданных, ПолноеИмяОбъектаМетаданных) Экспорт
	
	ЗначенияДляВыбора = ДоступныеТаблицы(КомпоновщикНастроек, ТипОбъектаМетаданных, ПолноеИмяОбъектаМетаданных);
	
	ЭтоЗагруженнаяСхема = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("СхемаКомпоновкиДанных");
	Если Не ЭтоЗагруженнаяСхема И ЗначенияДляВыбора.Количество() > 0 Тогда
		ЗначениеПоУмолчанию = ЗначенияДляВыбора[0].Значение;
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

Процедура ДобавитьПоляНабораДанных(ПараметрыОтчета, СхемаКомпоновкиДанных)
	
	Если ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыНакопления" 
		ИЛИ ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыСведений" 
		ИЛИ ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" 
		ИЛИ ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыРасчета" Тогда
		
		// Добавляем измерения
		Для каждого Измерение Из Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ПолноеИмяОбъектаМетаданных].Измерения Цикл
			ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Измерение.Имя, Измерение.Синоним);
		КонецЦикла;
		
		// Добавляем реквизиты
		Если ПустаяСтрока(ПараметрыОтчета.ИмяТаблицы) Тогда
			Для каждого Реквизит Из Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ПолноеИмяОбъектаМетаданных].Реквизиты Цикл
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Реквизит.Имя, Реквизит.Синоним);
			КонецЦикла;
		КонецЕсли;
		
		// Добавляем поля периода
		Если ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" 
			ИЛИ ПараметрыОтчета.ИмяТаблицы = "Обороты" 
			ИЛИ ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" И ПараметрыОтчета.ИмяТаблицы = ""Тогда
			ДобавитьПоляПериодаВНаборДанных(СхемаКомпоновкиДанных.НаборыДанных[0]);
		КонецЕсли;
		
		// Для регистров бухгалтерии важна настройка ролей
		Если ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
			
				ПолеСчет = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], "Счет", НСтр("ru = 'Счет'"));
				ПолеСчет.Роль.ВыражениеВидаСчета = "Счет.Вид";
				ПолеСчет.Роль.Счет = Истина;
				
				Для НомерСубконто = 1 По 3 Цикл
					ПолеСубконто = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], "Субконто" + НомерСубконто, НСтр("ru = 'Субконто'") + " " + НомерСубконто);
					ПолеСубконто.Роль.Измерение = Истина;
					ПолеСубконто.Роль.ИгнорироватьЗначенияNULL = Истина;
				КонецЦикла;
				
		КонецЕсли;

	// Добавляем ресурсы
		Для каждого Ресурс Из Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ПолноеИмяОбъектаМетаданных].Ресурсы Цикл
			Если ПараметрыОтчета.ИмяТаблицы = "Обороты" Тогда
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Оборот", Ресурс.Синоним);
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Оборот");
				
				Если ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Дт'"), Ресурс.Имя + "ОборотДт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотДт");
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Кт'"), Ресурс.Имя + "ОборотКт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотКт");
					
					Если НЕ Ресурс.Балансовый Тогда
						ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КорОборот", Ресурс.Синоним + " " + НСтр("ru = 'кор. оборот'"), Ресурс.Имя + "КорОборот");
						ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КорОборот");
						ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КорОборотДт", Ресурс.Синоним + " " + НСтр("ru = 'кор. оборот Дт'"), Ресурс.Имя + "КорОборотДт");
						ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КорОборотДт");
						ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КорОборотКт", Ресурс.Синоним + " " + НСтр("ru = 'кор. оборот Кт'"), Ресурс.Имя + "КорОборотКт");
						ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КорОборотКт");
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ОборотыДтКт" Тогда
				
				Если Ресурс.Балансовый Тогда
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Оборот", Ресурс.Синоним);
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Оборот");
				Иначе
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Дт'"), Ресурс.Имя + "ОборотДт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотДт");
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Кт'"), Ресурс.Имя + "ОборотКт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотКт");
				КонецЕсли;
				
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ДвиженияССубконто" Тогда
				
				Если Ресурс.Балансовый Тогда
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя, Ресурс.Синоним);
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя);
				Иначе
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Дт", Ресурс.Синоним + " " + НСтр("ru = 'Дт'"), Ресурс.Имя + "Дт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Дт");
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Кт", Ресурс.Синоним + " " + НСтр("ru = 'Кт'"), Ресурс.Имя + "Кт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Кт");
				КонецЕсли;
				
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" Тогда
				
				ПолеНабора = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "НачальныйОстаток", Ресурс.Синоним + " " + НСтр("ru = 'нач. остаток'"), Ресурс.Имя + "НачальныйОстаток");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "НачальныйОстаток");
				
				Если ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
					
					ПолеНабора.Роль.Остаток = Истина;
					ПолеНабора.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток;
					ПолеНабора.Роль.ГруппаОстатка = "Ост" + Ресурс.Имя;
					ПолеНабора.Роль.ПолеСчета = "Счет";
					
					ПолеНабора = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "НачальныйОстатокДт", Ресурс.Синоним + " " + НСтр("ru = 'нач. остаток Дт'"), Ресурс.Имя + "НачальныйОстатокДт");
					ПолеНабора.Роль.Остаток = Истина;
					ПолеНабора.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток;
					ПолеНабора.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Дебет;
					ПолеНабора.Роль.ПолеСчета = "Счет";
					ПолеНабора.Роль.ГруппаОстатка = "Ост" + Ресурс.Имя;
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "НачальныйОстатокДт");
					
					ПолеНабора = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "НачальныйОстатокКт", Ресурс.Синоним + " " + НСтр("ru = 'нач. остаток Кт'"), Ресурс.Имя + "НачальныйОстатокКт");
					ПолеНабора.Роль.Остаток = Истина;
					ПолеНабора.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток;
					ПолеНабора.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Кредит;
					ПолеНабора.Роль.ПолеСчета = "Счет";
					ПолеНабора.Роль.ГруппаОстатка = "Ост" + Ресурс.Имя;
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "НачальныйОстатокКт");
					
					ПолеНабора = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "НачальныйРазвернутыйОстатокДт", Ресурс.Синоним + " " + НСтр("ru = 'нач. развернутый остаток Дт'"), Ресурс.Имя + "НачальныйРазвернутыйОстатокДт");
					ПолеНабора.Роль.Остаток = Истина;
					ПолеНабора.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток;
					ПолеНабора.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Дебет;
					ПолеНабора.Роль.ПолеСчета = "Счет";
					ПолеНабора.Роль.ГруппаОстатка = "РазвОст" + Ресурс.Имя;
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "НачальныйРазвернутыйОстатокДт");
					
					ПолеНабора =ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "НачальныйРазвернутыйОстатокКт", Ресурс.Синоним + " " + НСтр("ru = 'нач. развернутый остаток Кт'"), Ресурс.Имя + "НачальныйРазвернутыйОстатокКт");
					ПолеНабора.Роль.Остаток = Истина;
					ПолеНабора.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток;
					ПолеНабора.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Кредит;
					ПолеНабора.Роль.ПолеСчета = "Счет";
					ПолеНабора.Роль.ГруппаОстатка = "РазвОст" + Ресурс.Имя;
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "НачальныйРазвернутыйОстатокКт");
				КонецЕсли;
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Оборот", Ресурс.Синоним + " " + НСтр("ru = 'оборот'"), Ресурс.Имя + "Оборот");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Оборот");
				
				Если ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыНакопления" Тогда
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Приход", Ресурс.Синоним + " " + НСтр("ru = 'приход'"), Ресурс.Имя + "Приход");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Приход");
					
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Расход", Ресурс.Синоним + " " + НСтр("ru = 'расход'"), Ресурс.Имя + "Расход");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Расход");
				ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Дт'"), Ресурс.Имя + "ОборотДт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотДт");
					
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Кт'"), Ресурс.Имя + "ОборотКт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотКт");
				КонецЕсли;
				
				ПолеНабора = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КонечныйОстаток", Ресурс.Синоним + " " + НСтр("ru = 'кон. остаток'"), Ресурс.Имя + "КонечныйОстаток");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КонечныйОстаток");
				
				Если ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
					
					ПолеНабора.Роль.Остаток = Истина;
					ПолеНабора.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.КонечныйОстаток;
					ПолеНабора.Роль.ПолеСчета = "Счет";
					ПолеНабора.Роль.ГруппаОстатка = "Ост" + Ресурс.Имя;
					
					ПолеНабора = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КонечныйОстатокДт", Ресурс.Синоним + " " + НСтр("ru = 'кон. остаток Дт'"), Ресурс.Имя + "КонечныйОстатокДт");
					ПолеНабора.Роль.Остаток = Истина;
					ПолеНабора.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.КонечныйОстаток;
					ПолеНабора.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Дебет;
					ПолеНабора.Роль.ПолеСчета = "Счет";
					ПолеНабора.Роль.ГруппаОстатка = "Ост" + Ресурс.Имя;
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КонечныйОстатокДт");
					
					ПолеНабора = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КонечныйОстатокКт", Ресурс.Синоним + " " + НСтр("ru = 'кон. остаток Кт'"), Ресурс.Имя + "КонечныйОстатокКт");
					ПолеНабора.Роль.Остаток = Истина;
					ПолеНабора.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.КонечныйОстаток;
					ПолеНабора.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Кредит;
					ПолеНабора.Роль.ПолеСчета = "Счет";
					ПолеНабора.Роль.ГруппаОстатка = "Ост" + Ресурс.Имя;
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КонечныйОстатокКт");
					
					ПолеНабора = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КонечныйРазвернутыйОстатокДт", Ресурс.Синоним + " " + НСтр("ru = 'кон. развернутый остаток Дт'"), Ресурс.Имя + "КонечныйРазвернутыйОстатокДт");
					ПолеНабора.Роль.Остаток = Истина;
					ПолеНабора.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.КонечныйОстаток;
					ПолеНабора.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Дебет;
					ПолеНабора.Роль.ПолеСчета = "Счет";
					ПолеНабора.Роль.ГруппаОстатка = "РазвОст" + Ресурс.Имя;
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КонечныйРазвернутыйОстатокДт");
					
					ПолеНабора = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КонечныйРазвернутыйОстатокКт", Ресурс.Синоним + " " + НСтр("ru = 'кон. развернутый остаток Кт'"), Ресурс.Имя + "КонечныйРазвернутыйОстатокКт");
					ПолеНабора.Роль.Остаток = Истина;
					ПолеНабора.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.КонечныйОстаток;
					ПолеНабора.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Кредит;
					ПолеНабора.Роль.ПолеСчета = "Счет";
					ПолеНабора.Роль.ГруппаОстатка = "РазвОст" + Ресурс.Имя;
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КонечныйРазвернутыйОстатокКт");
				КонецЕсли;
				
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "Остатки" Тогда
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Остаток", Ресурс.Синоним + " " + НСтр("ru = 'остаток'"), Ресурс.Имя + "Остаток");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Остаток");
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОстатокДт", Ресурс.Синоним + " " + НСтр("ru = 'остаток Дт'"), Ресурс.Имя + "ОстатокДт");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОстатокДт");
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОстатокКт", Ресурс.Синоним + " " + НСтр("ru = 'остаток Кт'"), Ресурс.Имя + "ОстатокКт");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОстатокКт");
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "РазвернутыйОстатокДт", Ресурс.Синоним + " " + НСтр("ru = 'развернутый остаток Дт'"), Ресурс.Имя + "РазвернутыйОстатокДт");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "РазвернутыйОстатокДт");
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "РазвернутыйОстатокКт", Ресурс.Синоним + " " + НСтр("ru = 'развернутый остаток Кт'"), Ресурс.Имя + "РазвернутыйОстатокКт");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "РазвернутыйОстатокКт");
				
			ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыСведений" Тогда
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя, Ресурс.Синоним);
				Если Ресурс.Тип.СодержитТип(Тип("Число")) Тогда
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя, Ресурс.Имя);
				КонецЕсли;
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "" Тогда
				
				Если ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
					Если Ресурс.Балансовый Тогда
						ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя, Ресурс.Синоним);
						ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя);
					Иначе
						ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Дт", Ресурс.Синоним + " " + НСтр("ru = 'Дт'"), Ресурс.Имя + "Дт");
						ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Дт");
						ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Кт", Ресурс.Синоним + " " + НСтр("ru = 'Кт'"), Ресурс.Имя + "Кт");
						ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Кт");
					КонецЕсли;
				Иначе
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя, Ресурс.Синоним);
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "Документы" 
		ИЛИ ПараметрыОтчета.ТипОбъектаМетаданных = "Справочники" Тогда
		
		Если ПараметрыОтчета.ИмяТаблицы = "" Тогда
			ОбъектМетаданных = Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ПолноеИмяОбъектаМетаданных];
		Иначе
			ОбъектМетаданных = Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ПолноеИмяОбъектаМетаданных].ТабличныеЧасти.Найти(ПараметрыОтчета.ИмяТаблицы);
			Если ОбъектМетаданных = Неопределено Тогда 
				ОбъектМетаданных = Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ПолноеИмяОбъектаМетаданных];
			КонецЕсли;
		КонецЕсли;
		
		// Добавляем реквизиты
		Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Реквизит.Имя, Реквизит.Синоним);
			Если Реквизит.Тип.СодержитТип(Тип("Число")) Тогда
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Реквизит.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьПоляПериодаВНаборДанных(НаборДанных)
	
	СписокПериодов = Новый СписокЗначений;
	СписокПериодов.Добавить("ПериодСекунда",   НСтр("ru = 'Период секунда'"));
	СписокПериодов.Добавить("ПериодМинута",    НСтр("ru = 'Период минута'"));
	СписокПериодов.Добавить("ПериодЧас",       НСтр("ru = 'Период час'"));
	СписокПериодов.Добавить("ПериодДень",      НСтр("ru = 'Период день'"));
	СписокПериодов.Добавить("ПериодНеделя",    НСтр("ru = 'Период неделя'"));
	СписокПериодов.Добавить("ПериодДекада",    НСтр("ru = 'Период декада'"));
	СписокПериодов.Добавить("ПериодМесяц",     НСтр("ru = 'Период месяц'"));
	СписокПериодов.Добавить("ПериодКвартал",   НСтр("ru = 'Период квартал'"));
	СписокПериодов.Добавить("ПериодПолугодие", НСтр("ru = 'Период полугодие'"));
	СписокПериодов.Добавить("ПериодГод",       НСтр("ru = 'Период год'"));
	
	ИмяПапки = "Периоды";
	СписокПолейНабораДанных = Новый СписокЗначений;
	ПапкаПолейНабораДанных = НаборДанных.Поля.Добавить(Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных"));
	ПапкаПолейНабораДанных.Заголовок   = ИмяПапки;
	ПапкаПолейНабораДанных.ПутьКДанным = ИмяПапки;
	
	ТипПериода = ТипПериодаКомпоновкиДанных.Основной;
	
	Для каждого Период Из СписокПериодов Цикл
		ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле        = Период.Значение;
		ПолеНабораДанных.Заголовок   = Период.Представление;
		ПолеНабораДанных.ПутьКДанным = ИмяПапки + "." + Период.Значение;
		ПолеНабораДанных.Роль.ТипПериода = ТипПериода;
		ПолеНабораДанных.Роль.НомерПериода = СписокПериодов.Индекс(Период);
		СписокПолейНабораДанных.Добавить(ПолеНабораДанных);
		ТипПериода = ТипПериодаКомпоновкиДанных.Дополнительный;
	КонецЦикла;
	
	Возврат СписокПолейНабораДанных;
	
КонецФункции

// Добавляет в набор данных поле набора данных
Функция ДобавитьПолеНабораДанных(НаборДанных, Поле, Заголовок, ПутьКДанным = Неопределено)
	
	Если ПутьКДанным = Неопределено Тогда
		ПутьКДанным = Поле;
	КонецЕсли;
	
	ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Поле        = Поле;
	ПолеНабораДанных.Заголовок   = Заголовок;
	ПолеНабораДанных.ПутьКДанным = ПутьКДанным;
	Возврат ПолеНабораДанных;
	
КонецФункции

// Функция добавляет поле итога в схему компоновки данных. Если параметр Выражение не указан, используется Сумма(ПутьКДанным).
Функция ДобавитьПолеИтога(СхемаКомпоновкиДанных, ПутьКДанным, Выражение = Неопределено)
	
	Если Выражение = Неопределено Тогда
		Выражение = "Сумма(" + ПутьКДанным + ")";
	КонецЕсли;
	
	ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = ПутьКДанным;
	ПолеИтога.Выражение = Выражение;
	Возврат ПолеИтога;
	
КонецФункции

Процедура ДобавитьПоказатели(ПараметрыОтчета, КомпоновщикНастроек)
	
	Если ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" Тогда
		ВыбранныеПоляНачальныйОстаток = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбранныеПоляНачальныйОстаток.Заголовок = НСтр("ru = 'Нач. остаток'");
		ВыбранныеПоляНачальныйОстаток.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
		Если ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыНакопления" Тогда
			ВыбранныеПоляПриход = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ВыбранныеПоляПриход.Заголовок = НСтр("ru = 'Приход'");
			ВыбранныеПоляПриход.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
			ВыбранныеПоляРасход = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ВыбранныеПоляРасход.Заголовок = НСтр("ru = 'Расход'");
			ВыбранныеПоляРасход.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
		ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
			ВыбранныеПоляОбороты = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ВыбранныеПоляОбороты.Заголовок = НСтр("ru = 'Обороты'");
			ВыбранныеПоляОбороты.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
		КонецЕсли;
		ВыбранныеПоляКонечныйОстаток = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбранныеПоляКонечныйОстаток.Заголовок = НСтр("ru = 'Кон. остаток'");
		ВыбранныеПоляКонечныйОстаток.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
	КонецЕсли;
	
	Если ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыНакопления" Тогда
		Для каждого Измерение Из Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ПолноеИмяОбъектаМетаданных].Измерения Цикл
				ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Измерение.Имя);
		КонецЦикла;
		Для каждого Ресурс Из Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ПолноеИмяОбъектаМетаданных].Ресурсы Цикл
			ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
			Если ПараметрыОтчета.ИмяТаблицы = "Обороты" Тогда
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Оборот");
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" Тогда
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляНачальныйОстаток, Ресурс.Имя + "НачальныйОстаток", Ресурс.Синоним);
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляПриход, Ресурс.Имя + "Приход", Ресурс.Синоним);
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляРасход, Ресурс.Имя + "Расход", Ресурс.Синоним);
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляКонечныйОстаток, Ресурс.Имя + "КонечныйОстаток", Ресурс.Синоним);
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "" Тогда
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыРасчета" Тогда
		Для каждого Измерение Из Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ПолноеИмяОбъектаМетаданных].Измерения Цикл
				ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Измерение.Имя);
		КонецЦикла;
		Для каждого Ресурс Из Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ПолноеИмяОбъектаМетаданных].Ресурсы Цикл
			ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
			ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя);
		КонецЦикла;
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыСведений" Тогда
		Для каждого Измерение Из Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ПолноеИмяОбъектаМетаданных].Измерения Цикл
			ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
			ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Измерение.Имя);
		КонецЦикла;
		Для каждого Ресурс Из Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ПолноеИмяОбъектаМетаданных].Ресурсы Цикл
			ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
			ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя);
		КонецЦикла;
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
		Для каждого Ресурс Из Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ПолноеИмяОбъектаМетаданных].Ресурсы Цикл
			ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
			Если ПараметрыОтчета.ИмяТаблицы = "Обороты" Тогда
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Дт'"));
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Кт'"));
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ОборотыДтКт" Тогда
				Если Ресурс.Балансовый Тогда
					ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Оборот", Ресурс.Синоним + " " + НСтр("ru = 'оборот'"));
				Иначе
					ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Дт'"));
					ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Кт'"));
				КонецЕсли;
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "Остатки" Тогда
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОстатокДт", Ресурс.Синоним + " " + НСтр("ru = 'ост. Дт'"));
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОстатокКт", Ресурс.Синоним + " " + НСтр("ru = 'ост. Кт'"));
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" Тогда
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляНачальныйОстаток, Ресурс.Имя + "НачальныйОстатокДт", Ресурс.Синоним + " " + НСтр("ru = 'нач. ост. Дт'"));
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляНачальныйОстаток, Ресурс.Имя + "НачальныйОстатокКт", Ресурс.Синоним + " " + НСтр("ru = 'нач. ост. Кт'"));
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляОбороты, Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Дт'"));
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляОбороты, Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Кт'"));
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляКонечныйОстаток, Ресурс.Имя + "КонечныйОстатокДт", " " + Ресурс.Синоним + НСтр("ru = 'кон. ост. Дт'"));
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляКонечныйОстаток, Ресурс.Имя + "КонечныйОстатокКт", " " + Ресурс.Синоним + НСтр("ru = 'кон. ост. Кт'"));
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ДвиженияССубконто" Тогда
				Если Ресурс.Балансовый Тогда
					ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя, Ресурс.Синоним);
				Иначе
					ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Дт", Ресурс.Синоним + " " + НСтр("ru = 'Дт'"));
					ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Кт", Ресурс.Синоним + " " + НСтр("ru = 'Кт'"));
				КонецЕсли;
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "" Тогда
				Если Ресурс.Балансовый Тогда
					ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя, Ресурс.Синоним);
				Иначе
					ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Дт", Ресурс.Синоним + " " + НСтр("ru = 'Дт'"));
					ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Кт", Ресурс.Синоним + " " + НСтр("ru = 'Кт'"));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "Документы" 
		ИЛИ ПараметрыОтчета.ТипОбъектаМетаданных = "Задачи"
		ИЛИ ПараметрыОтчета.ТипОбъектаМетаданных = "БизнесПроцессы"
		ИЛИ ПараметрыОтчета.ТипОбъектаМетаданных = "Справочники" Тогда
		Если ПараметрыОтчета.ИмяТаблицы = "" Тогда
			ОбъектМетаданных = Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ПолноеИмяОбъектаМетаданных];
		Иначе
			ОбъектМетаданных = Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ПолноеИмяОбъектаМетаданных].ТабличныеЧасти[ПараметрыОтчета.ИмяТаблицы];
		КонецЕсли;
		ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
		ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, "Ссылка");
		Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Реквизит.Имя);
		КонецЦикла;
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "ПланыВидовРасчета" Тогда
		Если ПараметрыОтчета.ИмяТаблицы = "" Тогда
			ОбъектМетаданных = Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ПолноеИмяОбъектаМетаданных];
			Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
				ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Реквизит.Имя);
			КонецЦикла;
		Иначе
			ОбъектМетаданных = Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ПолноеИмяОбъектаМетаданных].СтандартныеТабличныеЧасти[ПараметрыОтчета.ИмяТаблицы];
			Для каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
				ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Реквизит.Имя);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли