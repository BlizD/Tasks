&НаКлиенте
Перем ПараметрыОбработчика;

&НаКлиенте
Перем ПеременныеКлиента;

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ПрограммныйИнтерфейс

// Дает возможность выполнить контекстный вызов сервера с клиента.
//   Например, может потребоваться из клиентского события ОтчетыКлиентПереопределяемый.ОбработчикКоманды().
//
// Параметры:
//   КлючОперации      - Строка    - Идентификатор операции, которую необходимо выполнить на сервере.
//   ПараметрыОперации - Структура - Параметры выполнения операции.
//
// Возвращаемое значение:
//   Структура - Результат работы сервера.
//
&НаКлиенте
Функция ВыполнитьКонтекстныйВызовСервера(КлючОперации, ПараметрыОперации) Экспорт
	// Исключение из стандартов разработки.
	
	Возврат КонтекстныйВызовСервера(КлючОперации, ПараметрыОперации);
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ФОРМА

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыПанелиКлючТекущегоВарианта = " - ";
	
	// Параметры формы.
	РежимРасшифровки = (Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено);
	РежимВариантаОтчета = (ТипЗнч(КлючТекущегоВарианта) = Тип("Строка") И Не ПустаяСтрока(КлючТекущегоВарианта));
	ПравоВывода = ПравоДоступа("Вывод", Метаданные);
	
	ФормаПараметры = Новый Структура(
		"КлючНазначенияИспользования, КлючПользовательскихНастроек,
		|Расшифровка, СформироватьПриОткрытии, ТолькоПросмотр,
		|ФиксированныеНастройки, Раздел, Подсистема, ПодсистемаПредставление");
	ЗаполнитьЗначенияСвойств(ФормаПараметры, Параметры);
	ФормаПараметры.Вставить("Отбор", Новый Структура);
	Если ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ФормаПараметры.Отбор, Параметры.Отбор, Истина);
		Параметры.Отбор.Очистить();
	КонецЕсли;
	
	Если ФормаПараметры.Подсистема = Неопределено Тогда
		Элементы.ДругиеОтчеты.Видимость = Ложь;
	КонецЕсли;
	
	// Локальные переменные.
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	НастройкиОтчета = ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию();
	АдресСхемы = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	НастройкиОтчета.Вставить("АдресСхемы",          АдресСхемы);
	НастройкиОтчета.Вставить("СхемаМодифицирована", Ложь);
	НастройкиОтчета.Вставить("КлючСхемы",           "");
	НастройкиОтчета.Вставить("ПолноеИмя",    ОтчетМетаданные.ПолноеИмя());
	НастройкиОтчета.Вставить("Наименование", СокрЛП(ОтчетМетаданные.Представление()));
	
	Информация = ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени(НастройкиОтчета.ПолноеИмя);
	НастройкиОтчета.Вставить("ОтчетСсылка", Информация.Отчет);
	НастройкиОтчета.Вставить("Внешний",     ТипЗнч(НастройкиОтчета.ОтчетСсылка) = Тип("Строка"));
	НастройкиОтчета.Вставить("Безопасный",  БезопасныйРежим());
	ОбновитьИнформациюОВариантеОтчета();
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НастройкиОтчета, ВариантыОтчетов.ПараметрыКлиента());
	
	Если ВариантыОтчетовПовтИсп.Параметры().ОтчетыСНастройками.Найти(НастройкиОтчета.ОтчетСсылка) <> Неопределено Тогда
		ОтчетОбъект.ОпределитьНастройкиФормы(ЭтотОбъект, КлючТекущегоВарианта, НастройкиОтчета);
		СоответствиеПериодичностиПараметров = Новый Соответствие;
		Для Каждого КлючИЗначение Из НастройкиОтчета.СоответствиеПериодичностиПараметров Цикл
			ПолеКД = КлючИЗначение.Ключ;
			Если ТипЗнч(ПолеКД) = Тип("ПараметрКомпоновкиДанных") Тогда
				ПолеКД = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(ПолеКД));
			КонецЕсли;
			СоответствиеПериодичностиПараметров.Вставить(ПолеКД, КлючИЗначение.Значение);
		КонецЦикла;
		НастройкиОтчета.Вставить("СоответствиеПериодичностиПараметров", СоответствиеПериодичностиПараметров);
	КонецЕсли;
	
	НастройкиОтчета.Вставить("ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек", Истина);
	Если Параметры.Свойство("СформироватьПриОткрытии") И Параметры.СформироватьПриОткрытии = Истина Тогда
		Параметры.СформироватьПриОткрытии = Ложь;
		НастройкиОтчета.ФормироватьСразу = Истина;
		НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Ложь;
	КонецЕсли;
	
	НастройкиОтчета.Вставить("ПредопределенныеВарианты", Новый СписокЗначений);
	Если НастройкиОтчета.Внешний И ОтчетОбъект.СхемаКомпоновкиДанных <> Неопределено Тогда
		Для Каждого Вариант Из ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек Цикл
			НастройкиОтчета.ПредопределенныеВарианты.Добавить(Вариант.Имя, Вариант.Представление);
		КонецЦикла;
	КонецЕсли;
	
	// Параметры по умолчанию
	Если НастройкиОтчета.Свойство("ВыводитьСуммуВыделенныхЯчеек") И Не НастройкиОтчета.ВыводитьСуммуВыделенныхЯчеек Тогда
		Элементы.АвтоСуммаКнопка.Видимость = Ложь;
		Элементы.ОтчетТабличныйДокумент.УстановитьДействие("ПриАктивизацииОбласти", "");
	КонецЕсли;
	
	// Скрытие команд вариантов
	Если Не НастройкиОтчета.Свойство("РазрешеноМенятьВарианты") Или Параметры.Свойство("ВидимостьКомандВариантовОтчетов") Тогда
		НастройкиОтчета.Вставить("РазрешеноМенятьВарианты", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ВидимостьКомандВариантовОтчетов"));
	КонецЕсли;
	Если ТипЗнч(НастройкиОтчета.РазрешеноМенятьВарианты) <> Тип("Булево") Тогда
		НастройкиОтчета.РазрешеноМенятьВарианты = ВариантыОтчетовПовтИсп.ПравоДобавления();
		Если НастройкиОтчета.РазрешеноМенятьВарианты // Команды не отключены параметрами открытия формы.
			И ЗначениеЗаполнено(НастройкиОтчета.ВариантСсылка) // Вариант зарегистрирован.
			И ЗначениеЗаполнено(НастройкиОтчета.ПредопределенныйСсылка) Тогда // Это предопределенный.
			Отключенные = ВариантыОтчетовПовтИсп.ОтключенныеВариантыПрограммы();
			Если Отключенные.Найти(НастройкиОтчета.ПредопределенныйСсылка) <> Неопределено Тогда // Вариант отключен.
				Текст = НСтр("ru = 'Контекстный вариант ""%1"" отчета ""%2"" открыт без контекста.'");
				ВариантыОтчетов.ПредупреждениеПоВарианту(НастройкиОтчета.ВариантСсылка, Текст, НастройкиОтчета.ВариантСсылка, НастройкиОтчета.ОтчетСсылка);
				НастройкиОтчета.РазрешеноМенятьВарианты = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Регистрация команд и реквизитов формы, которые не удаляются при перезаполнении быстрых настроек.
	НаборРеквизитов = ПолучитьРеквизиты();
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		ПолноеИмяРеквизита = Реквизит.Имя + ?(ПустаяСтрока(Реквизит.Путь), "", "." + Реквизит.Путь);
		ПостоянныеРеквизиты.Добавить(ПолноеИмяРеквизита);
	КонецЦикла;
	Для Каждого Команда Из Команды Цикл
		ПостоянныеКоманды.Добавить(Команда.Имя);
	КонецЦикла;
	
	// Приведение зависимых элементов формы к кондиции.
	ВидимостьДоступностьКорректность("");
	
	// Тесная интеграция с почтой и рассылкой.
	ДоступнаОтправкаПисем = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
		ДоступнаОтправкаПисем = МодульРаботаСПочтовымиСообщениями.ДоступнаОтправкаПисем();
	КонецЕсли;
	Если ДоступнаОтправкаПисем Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
			МодульРассылкаОтчетов = ОбщегоНазначения.ОбщийМодуль("РассылкаОтчетов");
			МодульРассылкаОтчетов.ФормаОтчетаДобавитьКоманды(ЭтотОбъект, Отказ, СтандартнаяОбработка);
		Иначе // Если в подменю одна команда, то выпадающий список не отображается.
			Элементы.ОтправитьПоЭлектроннойПочте.Заголовок = Элементы.ГруппаОтправить.Заголовок + "...";
			Элементы.Переместить(Элементы.ОтправитьПоЭлектроннойПочте, Элементы.ГруппаОтправить.Родитель, Элементы.ГруппаОтправить);
		КонецЕсли;
	Иначе
		Элементы.ГруппаОтправить.Видимость = Ложь;
	КонецЕсли;
	
	// События.
	ОтчетыПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	Если НастройкиОтчета.События.ПриСозданииНаСервере Тогда
		ОтчетОбъект.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПеременныеКлиента = Новый Структура;
	ПеременныеКлиента.Вставить("УспешноСформирован", Ложь);
	ПеременныеКлиента.Вставить("ВыполнятьЗамеры", Ложь);
	// В безопасном режиме доп. отчеты формируются непосредственно,
	// т.к. они не могут подключать себя и использовать собственные методы в фоновых заданиях.
	ПеременныеКлиента.Вставить("Непосредственно", НастройкиОтчета.Внешний Или НастройкиОтчета.Безопасный);
	ПеременныеКлиента.Вставить("ФормированиеПриОткрытии", Ложь);
	ПеременныеКлиента.Вставить("ИнтервалОжидания", ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2));
	Если Не Отказ Тогда
		ФормаОткрыта = Истина;
	КонецЕсли;
	Если НастройкиОтчета.ФормироватьСразу Тогда
		ПеременныеКлиента.ФормированиеПриОткрытии = Истина;
		ПодключитьОбработчикОжидания("СФормировать", 0.1, Истина);
	КонецЕсли;
	ПоказатьРезультатЗаполненияНастроек(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(Результат, ПодчиненнаяФорма)
	РезультатОбработан = Ложь;
	
	// Приемка результата из стандартных форм.
	Если ТипЗнч(ПодчиненнаяФорма) = Тип("УправляемаяФорма") Тогда
		ИмяПодчиненнойФормы = ПодчиненнаяФорма.ИмяФормы;
		Если ИмяПодчиненнойФормы = "ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.НастройкиОтчета"
			Или ПодчиненнаяФорма.ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
			РезультатОбработан = Истина; // См. ВсеНастройкиЗавершение.
		ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
			ПозицияТочки = СтрДлина(ИмяПодчиненнойФормы);
			Пока КодСимвола(ИмяПодчиненнойФормы, ПозицияТочки) <> 46 Цикл // Не точка.
				ПозицияТочки = ПозицияТочки - 1;
			КонецЦикла;
			СуффиксФормыИсточника = ВРег(Сред(ИмяПодчиненнойФормы, ПозицияТочки + 1));
			Если СуффиксФормыИсточника = ВРег("ФормаНастроекОтчета")
				Или СуффиксФормыИсточника = ВРег("ФормаНастроек")
				Или СуффиксФормыИсточника = ВРег("ФормаВариантаОтчета")
				Или СуффиксФормыИсточника = ВРег("ФормаВарианта") Тогда
				БыстрыеНастройкиЗаполнитьКлиент(Результат);
				РезультатОбработан = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПодчиненнаяФорма) = Тип("КонструкторСхемыКомпоновкиДанных") Тогда
	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		Если Тип(Результат) = Тип("СхемаКомпоновкиДанных") Тогда
			НастройкиОтчета.АдресСхемы = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
			АдресСхемы = НастройкиОтчета.АдресСхемы;
			
			Путь = ПолучитьИмяВременногоФайла();
			
			ЗаписьXML = Новый ЗаписьXML; 
			ЗаписьXML.ОткрытьФайл(Путь, "UTF-8");
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Результат, "dataCompositionSchema", "http://v8.1c.ru/8.1/data-composition-system/schema"); 
			ЗаписьXML.Закрыть();
			
			ДвоичныеДанные = Новый ДвоичныеДанные(Путь);
			
			Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ДвоичныеДанные);
			Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ОтчетИнициализирован",  Ложь);
			
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("ИмяСобытия", "НастройкиПоУмолчанию");
			ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
			
			БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
		КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
	// Механизмы расширения.
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаОтчетовКлиент");
		МодульРассылкаОтчетовКлиент.ФормаОтчетаОбработкаВыбора(ЭтотОбъект, Результат, ПодчиненнаяФорма, РезультатОбработан);
	КонецЕсли;
	ОтчетыКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, Результат, ПодчиненнаяФорма, РезультатОбработан);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОповещениеОбработано = Ложь;
	Если ИмяСобытия = ВариантыОтчетовКлиентСервер.ИмяСобытияИзменениеВарианта() Тогда
		ОповещениеОбработано = Истина;
		ВариантыПанелиКлючТекущегоВарианта = " - ";
		ПодключитьОбработчикОжидания("ВидимостьДоступностьЕслиТребуется", 0.1, Истина);
	КонецЕсли;
	
	ОтчетыКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ОповещениеОбработано);
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойВариантаНаСервере(НовыеНастройкиКД)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НовыеНастройкиКД.ДополнительныеСвойства.Свойство("ОтчетИнициализирован") Тогда
		НастройкиПоУмолчанию = Новый Структура;
		ТипОбъектаМетаданных = Отчеты.УниверсальныйОтчет.ТипОбъектаМетаданныхПоУмолчанию();
		НастройкиПоУмолчанию.Вставить("ТипОбъектаМетаданных", ТипОбъектаМетаданных);
		НастройкиПоУмолчанию.Вставить("ПолноеИмяОбъектаМетаданных", Отчеты.УниверсальныйОтчет.ПолноеИмяОбъектаМетаданныхПоУмолчанию(Отчет.КомпоновщикНастроек, ТипОбъектаМетаданных));
		НастройкиПоУмолчанию.Вставить("ИмяТаблицы", Отчеты.УниверсальныйОтчет.ИмяТаблицыПоУмолчанию(Отчет.КомпоновщикНастроек, ТипОбъектаМетаданных, НастройкиПоУмолчанию.ПолноеИмяОбъектаМетаданных));
		Отчеты.УниверсальныйОтчет.ИнициализироватьОтчет(Отчет.КомпоновщикНастроек, Ложь, УникальныйИдентификатор,,НастройкиПоУмолчанию);
	ИначеЕсли Не НовыеНастройкиКД.ДополнительныеСвойства.Свойство("СхемаКомпоновкиДанных")
		И (Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТипОбъектаМетаданных") = Неопределено
		Или Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПолноеИмяОбъектаМетаданных") = Неопределено
		Или Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИмяТаблицы") = Неопределено) Тогда
		Отчеты.УниверсальныйОтчет.ИнициализироватьОтчет(Отчет.КомпоновщикНастроек, Ложь, УникальныйИдентификатор, НовыеНастройкиКД);
	ИначеЕсли НовыеНастройкиКД.ДополнительныеСвойства.Свойство("СхемаКомпоновкиДанных") Тогда
		Отчеты.УниверсальныйОтчет.ИнициализироватьОтчет(Отчет.КомпоновщикНастроек, Ложь, УникальныйИдентификатор, НовыеНастройкиКД);
	КонецЕсли;
	
	// Ничего не делать если отчет не на СКД и никаких настроек не загружено.
	РежимВариантаОтчета = (ТипЗнч(КлючТекущегоВарианта) = Тип("Строка") И Не ПустаяСтрока(КлючТекущегоВарианта));
	Если Не РежимВариантаОтчета И НовыеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") Тогда
		ОтчетыСервер.УстановитьФиксированныеОтборы(ФормаПараметры.Отбор, НовыеНастройкиКД, НастройкиОтчета);
	КонецЕсли;
	
	// Вызов переопределяемого модуля.
	ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	Если НастройкиОтчета.События.ПередЗагрузкойВариантаНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	КонецЕсли;
	
	// Подготовка к вызову события переинициализации.
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		Попытка
			НовыеНастройкиXML = ОбщегоНазначения.ЗначениеВСтрокуXML(НовыеНастройкиКД);
		Исключение
			НовыеНастройкиXML = Неопределено;
		КонецПопытки;
		НастройкиОтчета.Вставить("НовыеНастройкиXML", НовыеНастройкиXML);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(НовыеНастройкиКД)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Ничего не делать если отчет не на СКД и никаких настроек не загружено.
	РежимВариантаОтчета = (ТипЗнч(КлючТекущегоВарианта) = Тип("Строка") И Не ПустаяСтрока(КлючТекущегоВарианта));
	Если Не РежимВариантаОтчета И НовыеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Обновление ссылки варианта отчета.
	Если ВариантыПанелиКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
		ОбновитьИнформациюОВариантеОтчета();
	КонецЕсли;
	
	// Загрузка фиксированных настроек для режима расшифровки.
	Если РежимРасшифровки Тогда
		ОтчетНаименованиеТекущегоВарианта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеНастройкиКД.ДополнительныеСвойства, "ВариантНаименование");
		Если Параметры <> Неопределено И Параметры.Свойство("Расшифровка") Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(Параметры.Расшифровка.ПрименяемыеНастройки);
			Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
		КонецЕсли;
	Иначе
		Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВариантНаименование", ОтчетНаименованиеТекущегоВарианта);
	КонецЕсли;
	
	// Заполнение панели быстрых настроек.
	РежимВариантаОтчета = Истина;
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПриЗагрузкеВариантаНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПриЗагрузкеВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойПользовательскихНастроекНаСервере(НовыеПользовательскиеНастройкиКД)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовка к вызову события переинициализации.
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		Попытка
			НовыеПользовательскиеНастройкиXML = ОбщегоНазначения.ЗначениеВСтрокуXML(НовыеПользовательскиеНастройкиКД);
		Исключение
			НовыеПользовательскиеНастройкиXML = Неопределено;
		КонецПопытки;
		НастройкиОтчета.Вставить("НовыеПользовательскиеНастройкиXML", НовыеПользовательскиеНастройкиXML);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(НовыеПользовательскиеНастройкиКД)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	Если Не РежимВариантаОтчета Тогда
		Возврат;
	КонецЕсли;
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПриЗагрузкеПользовательскихНастроекНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, НовыеПользовательскиеНастройкиКД);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	Если Не РежимВариантаОтчета Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия", "ПриОбновленииСоставаПользовательскихНастроекНаСервере");
	ПараметрыЗаполнения.Вставить("СтандартнаяОбработкаСобытия", СтандартнаяОбработка);
	РезультатЗаполненияНастроек = БыстрыеНастройкиЗаполнить(ПараметрыЗаполнения);
	Если ПараметрыЗаполнения.СтандартнаяОбработкаСобытия <> СтандартнаяОбработка Тогда
		СтандартнаяОбработка = ПараметрыЗаполнения.СтандартнаяОбработкаСобытия;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если Не РежимВариантаОтчета Тогда
		Возврат;
	КонецЕсли;
	ПользовательскиеНастройкиКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	Для Каждого ПользовательскаяНастройкаКД Из ПользовательскиеНастройкиКД.Элементы Цикл
		Тип = ОтчетыКлиентСервер.ТипНастройкиСтрокой(ТипЗнч(ПользовательскаяНастройкаКД));
		
		Если Тип = "ЗначениеПараметраНастроек"
			И ТипЗнч(ПользовательскаяНастройкаКД.Значение) = Тип("СтандартныйПериод")
			И ПользовательскаяНастройкаКД.Использование Тогда
			
			ИдентификаторЭлемента = ОтчетыКлиентСервер.ПривестиИдентификаторКИмени(ПользовательскаяНастройкаКД.ИдентификаторПользовательскойНастройки);
			
			ПериодНачало    = Элементы.Найти(Тип + "_Начало_"    + ИдентификаторЭлемента);
			ПериодОкончание = Элементы.Найти(Тип + "_Окончание_" + ИдентификаторЭлемента);
			Если ПериодНачало = Неопределено Или ПериодОкончание = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = ПользовательскаяНастройкаКД.Значение;
			Если ПериодНачало.АвтоОтметкаНезаполненного
				И Не ЗначениеЗаполнено(Значение.ДатаНачала)
				И Не ЗначениеЗаполнено(Значение.ДатаОкончания) Тогда
				ТекстОшибки = НСтр("ru = 'Не указан период'");
				ПутьКДанным = ПериодНачало.ПутьКДанным;
			ИначеЕсли Значение.ДатаНачала > Значение.ДатаОкончания Тогда
				ТекстОшибки = НСтр("ru = 'Конец периода должен быть больше начала'");
				ПутьКДанным = ПериодОкончание.ПутьКДанным;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПутьКДанным);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииВариантаНаСервере(НастройкиКД)
	Если Не РежимВариантаОтчета Тогда
		Возврат;
	КонецЕсли;
	НовыеНастройкиКД = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НовыеНастройкиКД);
	НастройкиКД.ДополнительныеСвойства.Вставить("Адрес", ПоместитьВоВременноеХранилище(НовыеНастройкиКД)); // Для платформы.
	НастройкиКД = НовыеНастройкиКД;
	ВариантыПанелиКлючТекущегоВарианта = " - ";
	ВидимостьДоступностьКорректность("ВариантОтчета");
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(ПользовательскиеНастройкиКД)
	Если Не РежимВариантаОтчета Тогда
		Возврат;
	КонецЕсли;
	ВариантыОтчетов.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, ПользовательскиеНастройкиКД);
	ЗаполнитьКомандыВыбораВариантов();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если ФоновоеЗаданиеИдентификатор <> Неопределено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
		ФоновоеЗаданиеИдентификатор = Неопределено;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ЭЛЕМЕНТЫ

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// Табличный документ

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Для платформы
	СтандартнаяОбработка = Ложь;
	
	ОтчетыКлиентПереопределяемый.ОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
	
	ПараметрыРасшифровки = ПолучитьПараметрыРасшифровкиОтчета(Расшифровка);
	
	Если Не ЗначениеЗаполнено(ПараметрыРасшифровки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыРасшифровки.ОткрытьОбъект Тогда
		ПоказатьЗначение( , ПараметрыРасшифровки.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Для платформы
	СтандартнаяОбработка = Ложь;
	
	ОтчетыКлиентПереопределяемый.ОбработкаДополнительнойРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_ФлажокИспользование_ПриИзменении(Элемент)
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВвода_ПриИзменении(Элемент)
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Значение = ПользовательскаяНастройкаКД.Значение;
	ИначеЕсли ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Значение = ПользовательскаяНастройкаКД.ПравоеЗначение;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
	
	Если ПользовательскаяНастройкаКД.Использование Тогда // Очистка значений при изменении значения.
		Найденные = ОтключаемыеСвязи.НайтиСтроки(Новый Структура("ВедущийИдентификаторВФорме", ИдентификаторЭлемента));
		Для Каждого Связь Из Найденные Цикл
			Если Не ЗначениеЗаполнено(Связь.ПодчиненныйИдентификаторВФорме) Тогда
				Продолжить;
			КонецЕсли;
			Если Связь.ТипСвязи = "ПараметровВыбора" Тогда
				Если Связь.ПодчиненныйДействие <> РежимИзмененияСвязанногоЗначения.Очищать Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			ПодчиненныйДополнительно = НайтиДополнительныеНастройкиЭлемента(Связь.ПодчиненныйИдентификаторВФорме);
			Если ПодчиненныйДополнительно <> Неопределено Тогда
				Если ПодчиненныйДополнительно.ВыводитьФлажок Тогда
					ПодчиненныйНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(Связь.ПодчиненныйИдентификаторВФорме);
					Если ПодчиненныйНастройкаКД <> Неопределено Тогда
						ПодчиненныйНастройкаКД.Использование = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если Не ПодчиненныйДополнительно.ОграничиватьВыборУказаннымиЗначениями Тогда
					ПодчиненныйДополнительно.ЗначенияДляВыбора.Очистить();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИмяТаблицы_ПриИзменении(Элемент)
	
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	
	Параметр = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИмяТаблицы");
	Параметр.Значение = ПользовательскаяНастройкаКД.Значение;
	
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ОтчетИнициализирован = Ложь;
	
	ПараметрыЗаполнения = Новый Структура;
	
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолноеИмяОбъектаМетаданных_ПриИзменении(Элемент)
	
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	
	Параметр = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПолноеИмяОбъектаМетаданных");
	Параметр.Значение = ПользовательскаяНастройкаКД.Значение;
	
	Параметр = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИмяТаблицы");
	Параметр.Значение = "";
	
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ОтчетИнициализирован = Ложь;
	
	ПараметрыЗаполнения = Новый Структура;
	
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТипОбъектаМетаданных_ПриИзменении(Элемент)
	
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	
	Параметр = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТипОбъектаМетаданных");
	Параметр.Значение = ПользовательскаяНастройкаКД.Значение;
	
	Параметр = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПолноеИмяОбъектаМетаданных");
	Параметр.Значение = "";
	
	Параметр = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИмяТаблицы");
	Параметр.Значение = "";
	
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ОтчетИнициализирован = Ложь;
	
	ПараметрыЗаполнения = Новый Структура;
	
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФлажокЗначения_ПриИзменении(Элемент)
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	Значение = ЭтотОбъект[Элемент.Имя];
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокКомпоновщика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОтчетыКлиент.СписокКомпоновщикаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗначениеКомпоновщика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОтчетыКлиент.ЗначениеКомпоновщикаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВидСравнения_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Подключаемый_ИзменитьВидСравнения(Элемент);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые - Стандартный период.

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_НачалоПериода_ПриИзменении(Элемент)
	// Формирование сведений по элементу.
	ПериодНачалоИмя = Элемент.Имя;
	ЗначениеИмя     = СтрЗаменить(ПериодНачалоИмя, "_Начало_", "_Значение_");
	ИдентификаторЭлемента = Прав(ПериодНачалоИмя, 32);
	
	Значение = ЭтотОбъект[ЗначениеИмя];
	Заполнено = ЗначениеЗаполнено(Значение.ДатаНачала);
	Если Заполнено Тогда
		Значение.ДатаНачала = НачалоДня(Значение.ДатаНачала);
	КонецЕсли;
	
	// Запись значения в пользовательские настройки компоновки данных.
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	Если Заполнено Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_КонецПериода_ПриИзменении(Элемент)
	// Формирование сведений по элементу.
	ПериодОкончаниеИмя = Элемент.Имя;
	ЗначениеИмя        = СтрЗаменить(ПериодОкончаниеИмя, "_Окончание_", "_Значение_");
	ИдентификаторЭлемента = Прав(ПериодОкончаниеИмя, 32);
	
	Значение = ЭтотОбъект[ЗначениеИмя];
	Заполнено = ЗначениеЗаполнено(Значение.ДатаОкончания);
	Если Заполнено Тогда
		Значение.ДатаОкончания = КонецДня(Значение.ДатаОкончания);
	КонецЕсли;
	
	// Запись значения в пользовательские настройки компоновки данных.
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	Если Заполнено Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбратьПериод(Команда)
	КнопкаВыбораИмя = Команда.Имя;
	ЗначениеИмя     = СтрЗаменить(КнопкаВыбораИмя, "_КнопкаВыбора_", "_Значение_");
	ИдентификаторЭлемента = Прав(КнопкаВыбораИмя, 32);
	ОтчетыКлиент.ВыбратьПериод(ЭтотОбъект, ЗначениеИмя, ИдентификаторЭлемента);
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВсеНастройки(Команда)
	Имя = НастройкиОтчета.ПолноеИмя + ".ФормаНастроек";
	
	ПараметрыФормы = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ФормаПараметры, Истина);
	ПараметрыФормы.Вставить("КлючВарианта",              Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("Вариант",                   Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("НастройкиОтчета",     НастройкиОтчета);
	ПараметрыФормы.Вставить("ВариантНаименование", Строка(ОтчетНаименованиеТекущегоВарианта));
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Обработчик = Новый ОписаниеОповещения("ВсеНастройкиЗавершение", ЭтотОбъект);
	
	ВыполнятьЗамеры = НастройкиОтчета.ВыполнятьЗамеры И ЗначениеЗаполнено(НастройкиОтчета.КлючЗамеров);
	Если ВыполнятьЗамеры Тогда
		ИдентификаторЗамера = Новый УникальныйИдентификатор;
		МодульОценкаПроизводительностиКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиентСервер");
		МодульОценкаПроизводительностиКлиентСервер.НачатьРучнойЗамерВремени(
			НастройкиОтчета.КлючЗамеров + ".Настройки",
			ИдентификаторЗамера,
			НастройкиОтчета.ПрефиксЗамеров);
	КонецЕсли;
	
	ОткрытьФорму(Имя, ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Режим);
	
	Если ВыполнятьЗамеры Тогда
		МодульОценкаПроизводительностиКлиентСервер.ЗакончитьРучнойЗамерВремени(ИдентификаторЗамера);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВсеНастройкиЗавершение(Результат, ПараметрыВыполнения) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	БыстрыеНастройкиЗаполнитьКлиент(Результат);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантОтчета(Команда)
	ПараметрыФормы = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ФормаПараметры, Истина);
	ПараметрыФормы.Вставить("НастройкиОтчета",                       НастройкиОтчета);
	ПараметрыФормы.Вставить("Вариант",                               Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("КлючВарианта",                          Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",             Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ПредставлениеВарианта",                 Строка(ОтчетНаименованиеТекущегоВарианта));
	ПараметрыФормы.Вставить("ПредставлениеПользовательскихНастроек", "");
	
	ОткрытьФорму(НастройкиОтчета.ПолноеИмя + ".ФормаВарианта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчанию(Команда)
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия", "НастройкиПоУмолчанию");
	ПараметрыЗаполнения.Вставить("СброситьПользовательскиеНастройки", Истина);
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	
	БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	Если ОтображениеСостояния.Видимость = Истина
		И ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность Тогда
		ТекстВопроса = НСтр("ru = 'Отчет не сформирован. Сформировать?'");
		Обработчик = Новый ОписаниеОповещения("ОтправитьПоЭлектроннойПочтеПослеДиалогаСформировать", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	Иначе
		ПоказатьДиалогОтправкиПоЭлектроннойПочте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСкомпоноватьРезультат(Команда)
	ОчиститьСообщения();
	Сформировать();
КонецПроцедуры

&НаКлиенте
Процедура ВычислитьСумму(Команда)
	СтандартныеПодсистемыКлиент.ПоказатьРасчетЯчеек(ЭтотОбъект, ОтчетТабличныйДокумент);
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьСразу(Команда)
	
	ФормироватьСразу = Не НастройкиОтчета.ФормироватьСразу;
	НастройкиОтчета.ФормироватьСразу = ФормироватьСразу;
	Элементы.ФормироватьСразу.Пометка = ФормироватьСразу;
	
	СостояниеДоИзменения = Новый Структура("Видимость, ДополнительныйРежимОтображения, Картинка, Текст");
	ЗаполнитьЗначенияСвойств(СостояниеДоИзменения, Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния);
	
	Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ФормироватьСразу", ФормироватьСразу);
	ПользовательскиеНастройкиМодифицированы = Истина;
	
	ЗаполнитьЗначенияСвойств(Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния, СостояниеДоИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДругиеОтчеты(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВариантСсылка",     НастройкиОтчета.ВариантСсылка);
	ПараметрыФормы.Вставить("ОтчетСсылка",       НастройкиОтчета.ОтчетСсылка);
	ПараметрыФормы.Вставить("ПодсистемаСсылка",  ФормаПараметры.Подсистема);
	ПараметрыФормы.Вставить("ОтчетНаименование", НастройкиОтчета.Наименование);
	
	Блокировать = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.ПанельДругихОтчетов", ПараметрыФормы, ЭтотОбъект, Истина, , , , Блокировать);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСхемуИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьСхемуИзФайлаРасширениеПредложено", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСхему(Команда)
	
	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
		Конструктор = Новый КонструкторСхемыКомпоновкиДанных(СхемаКомпоновкиДанных);
		Конструктор.Редактировать(ЭтотОбъект);
		
	#Иначе
		
		ПоказатьПредупреждение(,(НСтр("ru='Для того чтобы редактировать схему компоновки, необходимо запустить приложение в режиме толстого клиента.'")));
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьСтандартнуюСхему(Команда)
	
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Очистить();
	
	ТипОбъектаМетаданных = "";
	ПолноеИмяОбъектаМетаданных = "";
	ИмяТаблицы = "";
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	
	БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	// Механизмы расширения
	Результат = Ложь;
	КомандаВПостоянных = ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя);
	Если КомандаВПостоянных <> Неопределено И ЗначениеЗаполнено(КомандаВПостоянных.Представление) Тогда
		МодульКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(КомандаВПостоянных.Представление);
		МодульКлиент.ФормаОтчетаОбработчикКоманды(ЭтотОбъект, Команда, Результат);
	Иначе
		ОтчетыКлиентПереопределяемый.ОбработчикКоманды(ЭтотОбъект, Команда, Результат);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьВариантОтчета(Команда)
	Найденные = ДобавленныеВарианты.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя));
	Если Найденные.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Вариант отчета не найден.'"));
		Возврат;
	КонецЕсли;
	ВариантФормы = Найденные[0];
	ЗагрузитьВариант(ВариантФормы.КлючВарианта);
	КлючУникальности = Лев(КлючУникальности, СтрНайти(КлючУникальности, "/")) + "КлючВарианта." + ВариантФормы.КлючВарианта;
	ПоказатьРезультатЗаполненияНастроек(Неопределено);
	Если НастройкиОтчета.ФормироватьСразу Тогда
		ПодключитьОбработчикОжидания("Сформировать", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменитьВидСравнения(Команда)
	ИдентификаторЭлемента = Прав(Команда.Имя, 32);
	Контекст = Новый Структура;
	Контекст.Вставить("ИдентификаторЭлемента", ИдентификаторЭлемента);
	Обработчик = Новый ОписаниеОповещения("ПослеВыбораВидаСравнения", ЭтотОбъект, Контекст);
	ОтчетыКлиент.ИзменитьВидСравнения(ЭтотОбъект, ИдентификаторЭлемента, Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВидаСравнения(ВидСравнения, Контекст) Экспорт
	Если ВидСравнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия", "ИзменитьВидСравнения");
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУсловияОтборов(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиОтчета", НастройкиОтчета);
	ПараметрыФормы.Вставить("КомпоновщикНастроек", Отчет.КомпоновщикНастроек);
	ПараметрыФормы.Вставить("ТолькоБыстрые", Истина);
	Обработчик = Новый ОписаниеОповещения("ИзменитьУсловияОтборовЗавершение", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.УсловияОтборовОтчета", ПараметрыФормы, ЭтотОбъект, Истина, , , Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУсловияОтборовЗавершение(ВыборПользователя, Контекст) Экспорт
	Если ВыборПользователя = Неопределено
		Или ВыборПользователя = КодВозвратаДиалога.Отмена
		Или ВыборПользователя.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия", "ИзменитьУсловияОтборов");
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	ПараметрыЗаполнения.Вставить("УсловияОтборов", ВыборПользователя);
	БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочтеПослеДиалогаСформировать(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПеременныеКлиента.Вставить("ОтправитьПослеФормирования", Истина);
		Сформировать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сформировать()
	ПередФормированиемНаКлиенте();
	СформироватьНепосредственно();
	ПослеФормированияНаКлиенте()
КонецПроцедуры

&НаКлиенте
Процедура ПередФормированиемНаКлиенте()
	ПеременныеКлиента.Вставить("ВыполнятьЗамеры", НастройкиОтчета.ВыполнятьЗамеры И ЗначениеЗаполнено(НастройкиОтчета.КлючЗамеров));
	Если ПеременныеКлиента.ВыполнятьЗамеры Тогда
		ВариантыОтчетовКлиентСервер.ДополнитьСтруктуруКлючом(ПеременныеКлиента, "МодульОценкаПроизводительностиКлиентСервер");
		ВариантыОтчетовКлиентСервер.ДополнитьСтруктуруКлючом(ПеременныеКлиента, "ИдентификаторЗамера");
		Комментарий = НастройкиОтчета.ПрефиксЗамеров + "; " + НСтр("ru = 'Непосредственно:'") + " " + Строка(ПеременныеКлиента.Непосредственно);
		ПеременныеКлиента.ИдентификаторЗамера = Новый УникальныйИдентификатор;
		ПеременныеКлиента.МодульОценкаПроизводительностиКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиентСервер");
		ПеременныеКлиента.МодульОценкаПроизводительностиКлиентСервер.НачатьРучнойЗамерВремени(
			НастройкиОтчета.КлючЗамеров + ".Формирование",
			ПеременныеКлиента.ИдентификаторЗамера,
			Комментарий);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеФормированияНаКлиенте()
	ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
	ПеременныеКлиента.ФормированиеПриОткрытии = Ложь;
	Если ПеременныеКлиента.ВыполнятьЗамеры Тогда
		ПеременныеКлиента.МодульОценкаПроизводительностиКлиентСервер.ЗакончитьРучнойЗамерВремени(ПеременныеКлиента.ИдентификаторЗамера);
	КонецЕсли;
	ОтправитьПослеФормирования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПеременныеКлиента, "ОтправитьПослеФормирования");
	Если ОтправитьПослеФормирования = Истина Тогда
		ПеременныеКлиента.ОтправитьПослеФормирования = Ложь;
		Если ПеременныеКлиента.УспешноСформирован Тогда
			ПоказатьДиалогОтправкиПоЭлектроннойПочте();
		КонецЕсли;
	КонецЕсли;
	ПоказатьРезультатЗаполненияНастроек(Неопределено);
	ОбновитьОтображениеДанных(); // Для платформы.
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоЭлектроннойПочте()
	ТабличныеДокументы = Новый СписокЗначений;
	ТабличныеДокументы.Добавить(ОтчетТабличныйДокумент, ОтчетНаименованиеТекущегоВарианта);
	
	ЗаголовокСохранения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отправка отчета ""%1"" по почте'"), ОтчетНаименованиеТекущегоВарианта);
	
	ПараметрыОтправки = Новый Структура("Тема", ОтчетНаименованиеТекущегоВарианта);
	
	МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
	МодульРаботаСПочтовымиСообщениямиКлиент.ОтправитьТабличныеДокументы(ТабличныеДокументы, ЗаголовокСохранения, ПараметрыОтправки);
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьДоступностьЕслиТребуется()
	Если ВариантыПанелиКлючТекущегоВарианта <> " - " Тогда // Изменения уже применены
		Возврат;
	КонецЕсли;
	ВидимостьДоступностьКорректность("");
КонецПроцедуры

&НаКлиенте
Функция НайтиПользовательскуюНастройкуЭлемента(ИмяИлиИдентификаторЭлемента) Экспорт
	// Для пользовательских настроек хранятся идентификаторы компоновки данных,
	//  поскольку они не могут храниться по ссылке (происходит копирование значения).
	Если СтрДлина(ИмяИлиИдентификаторЭлемента) = 32 Тогда
		ИдентификаторЭлемента = ИмяИлиИдентификаторЭлемента;
	Иначе
		ИдентификаторЭлемента = Прав(ИмяИлиИдентификаторЭлемента, 32);
	КонецЕсли;
	ИдентификаторКД = БыстрыйПоискПользовательскихНастроек.Получить(ИдентификаторЭлемента);
	Если ИдентификаторКД = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторКД);
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента) Экспорт
	// Для пользовательских настроек хранятся идентификаторы компоновки данных,
	//  поскольку они не могут храниться по ссылке (происходит копирование значения).
	ВсеДополнительныеНастройки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства, "ЭлементыФормы");
	Если ВсеДополнительныеНастройки = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ВсеДополнительныеНастройки[ИдентификаторЭлемента];
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения)
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = Новый Структура("ИмяСобытия", "ПослеИзмененияКоллекции");
	КонецЕсли;
	РезультатКлиента = БыстрыеНастройкиЗаполнить(ПараметрыЗаполнения);
	ПоказатьРезультатЗаполненияНастроек(РезультатКлиента);
	Если ПараметрыЗаполнения.Свойство("Переформировать") И ПараметрыЗаполнения.Переформировать Тогда
		ОчиститьСообщения();
		Сформировать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатЗаполненияНастроек(РезультатКлиента)
	Если РезультатКлиента = Неопределено Тогда
		РезультатКлиента = РезультатЗаполненияНастроек;
		РезультатЗаполненияНастроек = Неопределено;
	КонецЕсли;
	Если ТипЗнч(РезультатКлиента) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Для платформы (переопределение доступных значений на клиенте).
	СвоиСпискиВыбора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатКлиента, "СвоиСпискиВыбора");
	Если ТипЗнч(СвоиСпискиВыбора) = Тип("Массив") Тогда
		Для Каждого ИдентификаторЭлемента Из СвоиСпискиВыбора Цикл
			НастройкаВарианта = НайтиНастройкуВарианта(ЭтотОбъект, ИдентификаторЭлемента);
			Если НастройкаВарианта = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДополнительныеНастройки = НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента);
			Если ДополнительныеНастройки = Неопределено
				Или ТипЗнч(ДополнительныеНастройки.ЗначенияДляВыбора) <> Тип("СписокЗначений") Тогда
				Продолжить;
			КонецЕсли;
			Тип = ТипЗнч(НастройкаВарианта.ЭлементКД);
			Если Тип = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ДоступныеПараметры = НастройкаВарианта.УзелКД.ДоступныеПараметры;
				ДоступнаяНастройкаКД = ДоступныеПараметры.НайтиПараметр(НастройкаВарианта.ЭлементКД.Параметр);
			ИначеЕсли Тип = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				ДоступныеПоляОтбора = НастройкаВарианта.УзелКД.ДоступныеПоляОтбора;
				ДоступнаяНастройкаКД = ДоступныеПоляОтбора.НайтиПоле(НастройкаВарианта.ЭлементКД.ЛевоеЗначение);
			КонецЕсли;
			Если ДоступнаяНастройкаКД = Неопределено
				Или ТипЗнч(ДоступнаяНастройкаКД.ДоступныеЗначения) <> Тип("СписокЗначений") Тогда
				Продолжить;
			КонецЕсли;
			Попытка
				ДоступнаяНастройкаКД.ДоступныеЗначения.Очистить();
				Для Каждого Элемент Из ДополнительныеНастройки.ЗначенияДляВыбора Цикл
					ЗаполнитьЗначенияСвойств(ДоступнаяНастройкаКД.ДоступныеЗначения.Добавить(), Элемент);
				КонецЦикла;
			Исключение
				Продолжить; // Для платформы.
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(ЭтотОбъект, РезультатКлиента);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСхемуИзФайлаРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	Если РасширениеРаботыСФайламиПодключено Тогда
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Фильтр = "Файлы XML (*.xml) |*.xml";
		Обработчик = Новый ОписаниеОповещения("ЗагрузитьСхемуИзФайлаСРасширениемЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		НачатьПомещениеФайлов(Обработчик, , ДиалогВыбораФайла, Истина, УникальныйИдентификатор);
		
	Иначе // Если веб-клиент без подключенного расширения.
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьСхемуИзФайлаБезРасширения", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения, , ,Истина, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСхемуИзФайлаСРасширениемЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
	
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВыбранныеФайлы[0].Хранение);
		Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Очистить();
		Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ДвоичныеДанные);
		Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ОтчетИнициализирован", Ложь);
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
		
		БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСхемуИзФайлаБезРасширения(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Очистить();
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ДвоичныеДанные);
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ОтчетИнициализирован", Ложь);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	
	БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Клиент или сервер

&НаКлиентеНаСервереБезКонтекста
Функция НайтиНастройкуВарианта(ЭтотОбъект, ИдентификаторЭлемента)
	ПоискНастройкиВарианта = ЭтотОбъект.БыстрыйПоискНастроекВарианта.Получить(ИдентификаторЭлемента);
	Если ПоискНастройкиВарианта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	КорневойУзелКД = ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(ПоискНастройкиВарианта.ИдентификаторУзлаКД);
	Результат = Новый Структура("УзелКД, ЭлементКД");
	Результат.УзелКД = КорневойУзелКД[ПоискНастройкиВарианта.ИмяКоллекции];
	Результат.ЭлементКД = Результат.УзелКД.ПолучитьОбъектПоИдентификатору(ПоискНастройкиВарианта.ИдентификаторЭлементаКД);
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Процедура ВидимостьДоступностьКорректность(Изменения = "")
	ПоказыватьКомандыВариантовОтчетов = РежимВариантаОтчета И НастройкиОтчета.РазрешеноМенятьВарианты;
	
	Если Изменения = "" Тогда
		Если Не РежимВариантаОтчета Тогда
			Элементы.ИзменитьУсловияОтборов.Видимость = Ложь;
		КонецЕсли;
		
		// Вычисление параметров отображения.
		ЕстьНастройки = ЕстьБыстрыеНастройки Или ЕстьОбычныеНастройки;
		
		// Применение параметров отображения.
		Элементы.ВсеНастройки.Видимость = ПоказыватьКомандыВариантовОтчетов Или ЕстьОбычныеНастройки;
		Элементы.ГруппаВариантыОтчета.Видимость = ПоказыватьКомандыВариантовОтчетов;
		Элементы.ИзменитьВариант.Видимость      = ПоказыватьКомандыВариантовОтчетов;
		Элементы.ВыбратьВариант.Видимость       = ПоказыватьКомандыВариантовОтчетов;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"СохранитьВариант",
			"Видимость",
			ПоказыватьКомандыВариантовОтчетов); // Для платформы (кнопка исчезает если команда недоступна по правам).
		Элементы.ГруппаПользовательскиеНастройки.Видимость = ПоказыватьКомандыВариантовОтчетов И ЕстьНастройки;
		
		// Формировать сразу.
		Элементы.ФормироватьСразу.Пометка = НастройкиОтчета.ФормироватьСразу;
	КонецЕсли;
	
	// Команды выбора вариантов.
	Если ВариантыПанелиКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
		ВариантыПанелиКлючТекущегоВарианта = КлючТекущегоВарианта;
		
		Если ПоказыватьКомандыВариантовОтчетов Тогда
			ЗаполнитьКомандыВыбораВариантов();
		КонецЕсли;
		
		Если ПравоВывода Тогда
			Уникальность = НастройкиОтчета.ПолноеИмя;
			Если ЗначениеЗаполнено(КлючТекущегоВарианта) Тогда
				Уникальность = Уникальность + "/КлючВарианта." + КлючТекущегоВарианта;
			КонецЕсли;
			
			КлючСохраненияПоложенияОкна = Уникальность;
			
			НастройкиОтчета.Печать.Вставить("КлючПараметровПечати", Уникальность);
			НастройкиПечатиВосстановить();
		КонецЕсли;
	КонецЕсли;
	
	// Заголовок.
	ОтчетНаименованиеТекущегоВарианта = СокрЛП(ОтчетНаименованиеТекущегоВарианта);
	Если ЗначениеЗаполнено(ОтчетНаименованиеТекущегоВарианта) Тогда
		Заголовок = ОтчетНаименованиеТекущегоВарианта;
	Иначе
		Заголовок = НастройкиОтчета.Наименование;
	КонецЕсли;
	Если РежимРасшифровки Тогда
		Заголовок = Заголовок + " (" + НСтр("ru = 'Расшифровка'") + ")";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция БыстрыеНастройкиЗаполнить(Знач ПараметрыКлиента)
	
	// Вставка значений по умолчанию для обязательных ключей параметров заполнения.
	ПараметрыЗаполнения = БыстрыеНастройкиДозаполнитьПараметры(ПараметрыКлиента);
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПередЗаполнениемПанелиБыстрыхНастроек Тогда
		ОтчетОбъект = ОтчетыСервер.ОтчетОбъект(ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя);
		ОтчетОбъект.ПередЗаполнениемПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗаполнения);
	КонецЕсли;
	
	// Запись новых настроек варианта и пользовательских настроек в компоновщик.
	БыстрыеНастройкиЗагрузитьНастройкиВКомпоновщик(ПараметрыЗаполнения);
	
	// Получение информации из КД.
	УсловияВывода = Новый Структура;
	УсловияВывода.Вставить("ТолькоПользовательские", Истина);
	УсловияВывода.Вставить("ТолькоБыстрые",          Истина);
	УсловияВывода.Вставить("ИдентификаторТекущегоУзлаКД", Неопределено);
	Информация = ОтчетыСервер.РасширеннаяИнформацияОНастройках(
		Отчет.КомпоновщикНастроек,
		НастройкиОтчета,
		ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя,
		УсловияВывода);
	ЕстьБыстрыеНастройки = Информация.ЕстьБыстрыеНастройки;
	ЕстьОбычныеНастройки = Информация.ЕстьОбычныеНастройки;
	
	// Удаление элементов старых настроек.
	БыстрыеНастройкиУдалитьСтарыеЭлементыИКоманды(ПараметрыЗаполнения);
	
	// Добавление элементов актуальных настроек и загрузка значений.
	БыстрыеНастройкиСоздатьЭлементыУправленияИЗагрузитьЗначения(ПараметрыЗаполнения, Информация);
	
	// Связи.
	ЗарегистрироватьОтключаемыеСвязи(Информация);
	
	// Стандартные периоды.
	НастройкиОтчета.Вставить("СтандартныеПериоды", Новый Массив);
	СтандартныеПериоды = Информация.ПользовательскиеНастройки.НайтиСтроки(Новый Структура("ТипЭлементов", "СтандартныйПериод"));
	Для Каждого СвойстваНастройки Из СтандартныеПериоды Цикл
		НастройкиОтчета.СтандартныеПериоды.Добавить(СвойстваНастройки.ИдентификаторКД);
	КонецЦикла;
	
	// Обработка дополнительных настроек.
	ПослеИзмененияКлючевыхСостояний(ПараметрыЗаполнения);
	
	// Заголовок, видимость/доступность элементов, параметры печати и окна.
	ВидимостьДоступностьКорректность("");
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПослеЗаполненияПанелиБыстрыхНастроек Тогда
		ОтчетОбъект = ОтчетыСервер.ОтчетОбъект(ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя);
		ОтчетОбъект.ПослеЗаполненияПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗаполнения);
	КонецЕсли;
	
	Если НастройкиОтчета.Свойство("ОтчетОбъект") Тогда
		НастройкиОтчета.Удалить("ОтчетОбъект");
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения.Результат;
КонецФункции

&НаСервере
Функция КонтекстныйВызовСервера(КлючОперации, ПараметрыОперации)
	РезультатВызова = Новый Структура;
	Если НастройкиОтчета.События.КонтекстныйВызовСервера Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.КонтекстныйВызовСервера(ЭтотОбъект, КлючОперации, ПараметрыОперации, РезультатВызова);
	КонецЕсли;
	Возврат РезультатВызова;
КонецФункции

&НаСервере
Процедура СформироватьНепосредственно()
	ДопСвойства = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	
	// Формирование отчета.
	ДопСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	НастройкиПечатиСохранить();
	ИнформацияОбОшибке = Неопределено;
	Попытка
		СкомпоноватьРезультат(РежимКомпоновкиРезультата.Авто);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	ДопСвойства.Удалить("КлючВарианта");
	НастройкиПечатиВосстановить();
	
	Если ИнформацияОбОшибке <> Неопределено Тогда
		ПоказатьОшибкиФормирования(ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
	
	// Перезаполнение настроек.
	РезультатФормирования = Новый Структура;
	РезультатФормирования.Вставить("ВариантМодифицирован", Ложь);
	РезультатФормирования.Вставить("ПользовательскиеНастройкиМодифицированы", Ложь);
	Модифицирован = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопСвойства, "ВариантМодифицирован");
	Если Модифицирован = Истина Тогда
		РезультатФормирования.ВариантМодифицирован = Истина;
	КонецЕсли;
	Модифицированы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопСвойства, "ПользовательскиеНастройкиМодифицированы");
	Если РезультатФормирования.ВариантМодифицирован Или Модифицированы = Истина Тогда
		РезультатФормирования.ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	ДопСвойства.Удалить("ВариантМодифицирован");
	ДопСвойства.Удалить("ПользовательскиеНастройкиМодифицированы");
	
	Если РезультатФормирования.ВариантМодифицирован
		Или РезультатФормирования.ПользовательскиеНастройкиМодифицированы Тогда
		РезультатФормирования.Вставить("ИмяСобытия", "ПослеФормирования");
		РезультатФормирования.Вставить("Непосредственно", Истина);
		РезультатЗаполненияНастроек = БыстрыеНастройкиЗаполнить(РезультатФормирования);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВариант(КлючВарианта)
	// Сохранение текущих пользовательских настроек.
	ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить(
		НастройкиОтчета.ПолноеИмя + "/" + КлючТекущегоВарианта + "/ТекущиеПользовательскиеНастройки",
		"",
		Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	// Загрузка нового варианта.
	УстановитьТекущийВариант(КлючВарианта);
	// Переключение состояния.
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка  = БиблиотекаКартинок.Информация32;
	ОтображениеСостояния.Текст     = НСтр("ru = 'Выбран другой вариант отчета. Нажмите ""Сформировать"" для получения отчета.'");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура ВывестиЭлементыНастройки(Форма, Элементы, СвойстваНастройки, ГруппаВывода, Прочее) Экспорт
	ЭлементВывода = Новый Структура("Размер, ИмяЭлемента1, ИмяЭлемента2");
	ЭлементВывода.Размер = 1;
	
	ШаблонИмениЭлемента = СвойстваНастройки.Тип + "_%1_" + СвойстваНастройки.ИдентификаторЭлемента;
	
	// Группа требуется для вывода некоторых типов полей.
	Если СвойстваНастройки.ТипЭлементов = "СтандартныйПериод"
		Или СвойстваНастройки.ТипЭлементов = "СписокСПодбором" Тогда
		ГруппаИмя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "Группа");
		
		Группа = Элементы.Добавить(ГруппаИмя, Тип("ГруппаФормы"), Элементы.НеОтсортированное);
		Группа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Отображение         = ОтображениеОбычнойГруппы.Нет;
		Группа.Заголовок           = СвойстваНастройки.Представление;
		Группа.ОтображатьЗаголовок = Ложь;
	КонецЕсли;
	
	// Условие.
	ВыводитьУсловие = (СвойстваНастройки.Тип = "ЭлементОтбора"
		И СвойстваНастройки.ТипЭлементов <> "СтандартныйПериод"
		И СвойстваНастройки.ТипЭлементов <> "ТолькоФлажокЗначения");
	
	Если ВыводитьУсловие Тогда
		Прочее.ЕстьОтборыСУсловиями = Истина;
		
		КомандаВидСравненияИмя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "ВидСравнения");
		КомандаВидСравнения = Форма.Команды.Добавить(КомандаВидСравненияИмя);
		КомандаВидСравнения.Действие    = "Подключаемый_ИзменитьВидСравнения";
		КомандаВидСравнения.Заголовок   = НСтр("ru = 'Изменить условие отбора...'");
		КомандаВидСравнения.Подсказка   = КомандаВидСравнения.Заголовок; // Для платформы.
		КомандаВидСравнения.Отображение = ОтображениеКнопки.Текст;
		КомандаВидСравнения.Картинка    = БиблиотекаКартинок.ВидСравнения;
	КонецЕсли;
	
	// Флажок использования.
	Если СвойстваНастройки.ВыводитьФлажок Тогда
		ФлажокИмя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "Использование");
		
		Если СвойстваНастройки.ТипЭлементов = "СписокСПодбором" Тогда
			ГруппаДляФлажка = Группа;
			ЭлементВывода.ИмяЭлемента1 = ГруппаИмя;
		Иначе
			ГруппаДляФлажка = Элементы.НеОтсортированное;
			ЭлементВывода.ИмяЭлемента1 = ФлажокИмя;
		КонецЕсли;
		
		ЗаголовокФлажка = СвойстваНастройки.Представление;
		Если ВыводитьУсловие
			И СвойстваНастройки.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно
			И СвойстваНастройки.ВидСравнения <> ВидСравненияКомпоновкиДанных.ВСписке
			И СвойстваНастройки.ВидСравнения <> ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
			И СвойстваНастройки.ВидСравнения <> ВидСравненияКомпоновкиДанных.Содержит
			И СвойстваНастройки.ТипЭлементов <> "УсловиеВРежимеПросмотра" Тогда
			ЗаголовокФлажка = ЗаголовокФлажка + " (" + НРег(Строка(СвойстваНастройки.ВидСравнения)) + ")";
		КонецЕсли;
		Если Не СвойстваНастройки.ВыводитьТолькоФлажок Тогда
			ЗаголовокФлажка = ЗаголовокФлажка + ":";
		КонецЕсли;
		
		Флажок = Элементы.Добавить(ФлажокИмя, Тип("ПолеФормы"), ГруппаДляФлажка);
		Флажок.Вид         = ВидПоляФормы.ПолеФлажка;
		Флажок.Заголовок   = ЗаголовокФлажка;
		Флажок.ПутьКДанным = Прочее.ПутьККомпоновщику + ".ПользовательскиеНастройки[" + СвойстваНастройки.ИндексВКоллекции + "].Использование";
		Флажок.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Флажок.УстановитьДействие("ПриИзменении", "Подключаемый_ФлажокИспользование_ПриИзменении");
		
		Если ВыводитьУсловие Тогда
			КнопкаИмя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "ВидСравнения_Использование");
			КнопкаВидСравнения = Элементы.Добавить(КнопкаИмя, Тип("КнопкаФормы"), Флажок.КонтекстноеМеню);
			КнопкаВидСравнения.ИмяКоманды = КомандаВидСравненияИмя;
		КонецЕсли;
	КонецЕсли;
	
	Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек"
		Или СвойстваНастройки.Тип = "ЭлементОтбора" Тогда
		
		Если СвойстваНастройки.ВводСписком Тогда
			СвойстваНастройки.ОтмеченныеЗначения = ОтчетыКлиентСервер.ЗначенияСписком(СвойстваНастройки.Значение);
		КонецЕсли;
		
		// Сохранение параметров выбора настройки в дополнительных свойствах пользовательских настроек.
		НастройкиЭлемента = Новый Структура("Представление, ВыводитьФлажок,
		|ВводСписком, ОписаниеТипов, ПараметрыВыбора, ЗначенияДляВыбора,
		|ОграничиватьВыборУказаннымиЗначениями, ВыборГруппИЭлементов, ФормаВыбора");
		НастройкиЭлемента.ФормаВыбора = СвойстваНастройки.ДоступнаяНастройкаКД.ФормаВыбора;
		ЗаполнитьЗначенияСвойств(НастройкиЭлемента, СвойстваНастройки);
		Прочее.ДополнительныеНастройкиЭлементов.Вставить(СвойстваНастройки.ИдентификаторЭлемента, НастройкиЭлемента);
	КонецЕсли;
	
	// Поля для значений.
	Если СвойстваНастройки.ТипЭлементов <> "" Тогда
		
		ИнформацияОТипах = СвойстваНастройки.ИнформацияОТипах;
		
		////////////////////////////////////////////////////////////////////////////////
		// ВЫВОД.
		
		ЗначениеИмя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "Значение");
		
		Если СвойстваНастройки.ТипЭлементов = "ТолькоФлажокЗначения" Тогда
			
			БыстрыеНастройкиДобавитьРеквизит(Прочее.ПараметрыЗаполнения, ЗначениеИмя, СвойстваНастройки.ОписаниеТипов);
			
			ЭлементВывода.ИмяЭлемента1 = ЗначениеИмя;
			
			ПолеФлажка = Элементы.Добавить(ЗначениеИмя, Тип("ПолеФормы"), Группа);
			ПолеФлажка.Вид                = ВидПоляФормы.ПолеФлажка;
			ПолеФлажка.Заголовок          = СвойстваНастройки.Представление;
			ПолеФлажка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			ПолеФлажка.УстановитьДействие("ПриИзменении", "Подключаемый_ФлажокЗначения_ПриИзменении");
			
			Если ВыводитьУсловие Тогда
				КнопкаВидСравнения = Элементы.Добавить(КомандаВидСравненияИмя, Тип("КнопкаФормы"), ПолеФлажка.КонтекстноеМеню);
				КнопкаВидСравнения.ИмяКоманды = КомандаВидСравненияИмя;
			КонецЕсли;
			
			Прочее.ДобавленныеПоляВвода.Вставить(ЗначениеИмя, СвойстваНастройки.Значение);
			
		ИначеЕсли СвойстваНастройки.ТипЭлементов = "УсловиеВРежимеПросмотра" Тогда
			
			ЭлементВывода.ИмяЭлемента2 = ЗначениеИмя;
			
			ПолеВвода = Элементы.Добавить(ЗначениеИмя, Тип("ПолеФормы"), Группа);
			ПолеВвода.Вид                = ВидПоляФормы.ПолеВвода;
			ПолеВвода.Заголовок          = СвойстваНастройки.Представление;
			ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеВвода.ТолькоПросмотр     = Истина;
			ПолеВвода.ПутьКДанным = Прочее.ПутьККомпоновщику + ".ПользовательскиеНастройки[" + СвойстваНастройки.ИндексВКоллекции + "].ВидСравнения";
			ПолеВвода.УстановитьДействие("НачалоВыбора", "Подключаемый_ВидСравнения_НачалоВыбора");
			
			Если ВыводитьУсловие Тогда
				КнопкаВидСравнения = Элементы.Добавить(КомандаВидСравненияИмя, Тип("КнопкаФормы"), ПолеВвода.КонтекстноеМеню);
				КнопкаВидСравнения.ИмяКоманды = КомандаВидСравненияИмя;
			КонецЕсли;
			
		ИначеЕсли СвойстваНастройки.ТипЭлементов = "СвязьСКомпоновщиком" Тогда
			
			Прочее.ИменаОсновныхРеквизитовФормы.Вставить(СвойстваНастройки.ИдентификаторЭлемента, ЗначениеИмя);
			Прочее.ИменаЭлементовДляУстановкиСвязей.Вставить(СвойстваНастройки.ИдентификаторЭлемента, ЗначениеИмя);
			
			ЭлементВывода.ИмяЭлемента2 = ЗначениеИмя;
			
			ПолеВвода = Элементы.Добавить(ЗначениеИмя, Тип("ПолеФормы"), Группа);
			ПолеВвода.Вид                = ВидПоляФормы.ПолеВвода;
			ПолеВвода.Заголовок          = СвойстваНастройки.Представление;
			ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			
			ИмяПараметра = Строка(СвойстваНастройки.ПолеКД);
			Если ИмяПараметра = "ПараметрыДанных.ТипОбъектаМетаданных" Тогда
				ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_ТипОбъектаМетаданных_ПриИзменении");
			ИначеЕсли ИмяПараметра = "ПараметрыДанных.ПолноеИмяОбъектаМетаданных" Тогда
				ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_ПолноеИмяОбъектаМетаданных_ПриИзменении");
			ИначеЕсли ИмяПараметра = "ПараметрыДанных.ИмяТаблицы" Тогда
				ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_ИмяТаблицы_ПриИзменении");
			Иначе
				ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеВвода_ПриИзменении");
			КонецЕсли;
			
			// Связь с СКД.
			ПолеВвода.ПутьКДанным = Прочее.ПутьККомпоновщику + ".ПользовательскиеНастройки[" + СвойстваНастройки.ИндексВКоллекции + "].Значение";
			
			Если СвойстваНастройки.ВводСписком Тогда
				ПолеВвода.УстановитьДействие("НачалоВыбора", "Подключаемый_СписокКомпоновщика_НачалоВыбора");
			ИначеЕсли СвойстваНастройки.ДоступнаяНастройкаКД <> Неопределено
				И СвойстваНастройки.ДоступнаяНастройкаКД.БыстрыйВыбор <> Истина Тогда
				// Когда есть отключаемые связи "ПоМетаданным" или "ПараметровВыбора" от подчиненного,
				// тогда для выбора используется прикладная логика.
				Если СвойстваНастройки.НастройкаВарианта.СвязиПараметровВыбора.Количество() > 0
					Или СвойстваНастройки.НастройкаВарианта.СвязиПоМетаданным.Количество() > 0 Тогда
					ПолеВвода.УстановитьДействие("НачалоВыбора", "Подключаемый_ЗначениеКомпоновщика_НачалоВыбора");
				КонецЕсли;
			КонецЕсли;
			
			Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек"
				Или СвойстваНастройки.Тип = "ЭлементОтбора" Тогда
				
				ЗаполнитьЗначенияСвойств(ПолеВвода, СвойстваНастройки.ДоступнаяНастройкаКД, "БыстрыйВыбор, Маска, ФормаВыбора, ФорматРедактирования");
				
				Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
					ПолеВвода.АвтоОтметкаНезаполненного = СвойстваНастройки.ДоступнаяНастройкаКД.ЗапрещатьНезаполненныеЗначения;
				КонецЕсли;
				
				ПолеВвода.ВыборГруппИЭлементов = СвойстваНастройки.ВыборГруппИЭлементов;
				
				// Поля ввода следующих типов не растягиваются по горизонтали и не имеют кнопки очистки:
				//     Дата, Булево, Число, Тип.
				ПолеВвода.КнопкаОткрытия           = Ложь;
				ПолеВвода.КнопкаРегулирования      = Ложь;
				ПолеВвода.КнопкаОчистки            = ИнформацияОТипах.СодержитОбъектныеТипы;
				ПолеВвода.РастягиватьПоГоризонтали = ИнформацияОТипах.СодержитОбъектныеТипы;
				
				Если Не СвойстваНастройки.ВводСписком Тогда
					Для Каждого ЭлементСпискаВФорме Из СвойстваНастройки.ЗначенияДляВыбора Цикл
						ЗаполнитьЗначенияСвойств(ПолеВвода.СписокВыбора.Добавить(), ЭлементСпискаВФорме);
					КонецЦикла;
					Если СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
						ПолеВвода.РежимВыбораИзСписка      = Истина;
						ПолеВвода.КнопкаСоздания           = Ложь;
						ПолеВвода.КнопкаВыбора             = Ложь;
						ПолеВвода.КнопкаВыпадающегоСписка  = Истина;
						ПолеВвода.РастягиватьПоГоризонтали = Истина;
					КонецЕсли;
					// Для платформы (переопределение доступных значений на клиенте).
					Если СвойстваНастройки.НастройкаВарианта.СписокЗначенийПереопределен Тогда
						РезультатКлиента = Прочее.ПараметрыЗаполнения.Результат;
						СвоиСпискиВыбора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатКлиента, "СвоиСпискиВыбора");
						Если СвоиСпискиВыбора = Неопределено Тогда
							СвоиСпискиВыбора = Новый Массив;
							РезультатКлиента.Вставить("СвоиСпискиВыбора", СвоиСпискиВыбора);
						КонецЕсли;
						Если СвоиСпискиВыбора.Найти(СвойстваНастройки.ИдентификаторЭлемента) = Неопределено Тогда
							СвоиСпискиВыбора.Добавить(СвойстваНастройки.ИдентификаторЭлемента);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				// Условие.
				Если ВыводитьУсловие Тогда
					КнопкаВидСравнения = Элементы.Добавить(КомандаВидСравненияИмя, Тип("КнопкаФормы"), ПолеВвода.КонтекстноеМеню);
					КнопкаВидСравнения.ИмяКоманды = КомандаВидСравненияИмя;
				КонецЕсли;
				
				ИмяПараметра = Строка(СвойстваНастройки.ПолеКД);
				Если ИмяПараметра = "ПараметрыДанных.ТипОбъектаМетаданных" Тогда
					ПолеВвода.Ширина = 20;
					ПолеВвода.РастягиватьПоГоризонтали = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СвойстваНастройки.ТипЭлементов = "СтандартныйПериод" Тогда
			
			Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			
			ЭлементВывода.Размер = 1;
			ЭлементВывода.ИмяЭлемента2 = ГруппаИмя;
			
			ПериодНачалоИмя    = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "Начало");
			ПериодОкончаниеИмя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "Окончание");
			ТиреИмя            = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "Тире");
			КнопкаВыбораИмя    = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "КнопкаВыбора");
			
			// Реквизиты.
			БыстрыеНастройкиДобавитьРеквизит(Прочее.ПараметрыЗаполнения, ЗначениеИмя, "СтандартныйПериод");
			
			// Начало произвольного периода.
			ПериодНачало = Элементы.Добавить(ПериодНачалоИмя, Тип("ПолеФормы"), Группа);
			ПериодНачало.Вид    = ВидПоляФормы.ПолеВвода;
			ПериодНачало.Ширина = 9;
			ПериодНачало.РастягиватьПоГоризонтали = Ложь;
			ПериодНачало.КнопкаВыбора   = Истина;
			ПериодНачало.КнопкаОткрытия = Ложь;
			ПериодНачало.КнопкаОчистки  = Ложь;
			ПериодНачало.КнопкаРегулирования  = Ложь;
			ПериодНачало.РедактированиеТекста = Истина;
			ПериодНачало.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПериодНачало.УстановитьДействие("ПриИзменении", "Подключаемый_СтандартныйПериод_НачалоПериода_ПриИзменении");
			
			Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
				ПериодНачало.АвтоОтметкаНезаполненного = СвойстваНастройки.ДоступнаяНастройкаКД.ЗапрещатьНезаполненныеЗначения;
			КонецЕсли;
			
			Тире = Элементы.Добавить(ТиреИмя, Тип("ДекорацияФормы"), Группа);
			Тире.Вид       = ВидДекорацииФормы.Надпись;
			Тире.Заголовок = Символ(8211); // Среднее тире (en dash).
			
			// Окончание произвольного периода.
			ПериодОкончание = Элементы.Добавить(ПериодОкончаниеИмя, Тип("ПолеФормы"), Группа);
			ПериодОкончание.Вид = ВидПоляФормы.ПолеВвода;
			ЗаполнитьЗначенияСвойств(ПериодОкончание, ПериодНачало, "РастягиватьПоГоризонтали, Ширина, ПоложениеЗаголовка, 
			|РедактированиеТекста, КнопкаВыбора, КнопкаОткрытия, КнопкаОчистки, КнопкаРегулирования, АвтоОтметкаНезаполненного");
			ПериодОкончание.УстановитьДействие("ПриИзменении", "Подключаемый_СтандартныйПериод_КонецПериода_ПриИзменении");
			
			// Значения.
			НачалоПериода = СвойстваНастройки.Значение.ДатаНачала;
			КонецПериода  = СвойстваНастройки.Значение.ДатаОкончания;
			
			// Кнопка выбора.
			КомандаВыбора = Форма.Команды.Добавить(КнопкаВыбораИмя);
			КомандаВыбора.Действие    = "Подключаемый_ВыбратьПериод";
			КомандаВыбора.Заголовок   = НСтр("ru = 'Выбрать период...'");
			КомандаВыбора.Подсказка   = КомандаВыбора.Заголовок; // Для платформы.
			КомандаВыбора.Отображение = ОтображениеКнопки.Картинка;
			КомандаВыбора.Картинка    = БиблиотекаКартинок.Выбрать;
			
			КнопкаВыбора = Элементы.Добавить(КнопкаВыбораИмя, Тип("КнопкаФормы"), Группа);
			КнопкаВыбора.ИмяКоманды = КнопкаВыбораИмя;
			
			Дополнительно = Новый Структура;
			Дополнительно.Вставить("ЗначениеИмя",        ЗначениеИмя);
			Дополнительно.Вставить("ПериодНачалоИмя",    ПериодНачалоИмя);
			Дополнительно.Вставить("ПериодОкончаниеИмя", ПериодОкончаниеИмя);
			СвойстваНастройки.Дополнительно = Дополнительно;
			Прочее.ДобавленныеСтандартныеПериоды.Добавить(СвойстваНастройки);
			
		ИначеЕсли СвойстваНастройки.ТипЭлементов = "СписокСПодбором" Тогда
			
			Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			
			ЭлементВывода.Размер = 5;
			ЭлементВывода.ИмяЭлемента1 = ГруппаИмя;
			
			ГруппаЗаголовокИмя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "ГруппаЗаголовка");
			ДекорацияИмя       = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "Декорация");
			ТаблицаИмя              = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "СписокЗначений");
			ГруппаКолонокИмя        = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "ГруппаКолонок");
			КолонкаИспользованиеИмя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "Колонка_Использование");
			КолонкаЗначениеИмя      = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "Колонка_Значение");
			КоманднаяПанельИмя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "КоманднаяПанель");
			КнопкаПодборИмя    = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "Подбор");
			КнопкаВставитьИмя  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "ВставитьИзБуфера");
			
			Прочее.ИменаОсновныхРеквизитовФормы.Вставить(СвойстваНастройки.ИдентификаторЭлемента, ТаблицаИмя);
			Прочее.ИменаЭлементовДляУстановкиСвязей.Вставить(СвойстваНастройки.ИдентификаторЭлемента, КолонкаЗначениеИмя);
			
			Если Не СвойстваНастройки.ВыводитьФлажок Или Не СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
				
				// Группа-строка для заголовка и командной панели таблицы.
				ГруппаЗаголовокТаблицы = Элементы.Добавить(ГруппаЗаголовокИмя, Тип("ГруппаФормы"), Группа);
				ГруппаЗаголовокТаблицы.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаЗаголовокТаблицы.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				ГруппаЗаголовокТаблицы.Отображение         = ОтображениеОбычнойГруппы.Нет;
				ГруппаЗаголовокТаблицы.ОтображатьЗаголовок = Ложь;
				
				// Флажок уже создан.
				Если СвойстваНастройки.ВыводитьФлажок Тогда
					Элементы.Переместить(Флажок, ГруппаЗаголовокТаблицы);
				КонецЕсли;
				
				// Заголовок / Пустая декорация.
				ПустаяДекорация = Элементы.Добавить(ДекорацияИмя, Тип("ДекорацияФормы"), ГруппаЗаголовокТаблицы);
				ПустаяДекорация.Вид                      = ВидДекорацииФормы.Надпись;
				ПустаяДекорация.Заголовок                = ?(СвойстваНастройки.ВыводитьФлажок, " ", СвойстваНастройки.Представление + ":");
				ПустаяДекорация.РастягиватьПоГоризонтали = Истина;
				
				// Кнопки.
				Если Не СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
					Если ИнформацияОТипах.СодержитСсылочныеТипы Тогда
						КомандаПодбор = Форма.Команды.Добавить(КнопкаПодборИмя);
						КомандаПодбор.Действие  = "Подключаемый_СписокСПодбором_Подбор";
						КомандаПодбор.Заголовок = НСтр("ru = 'Подбор'");
					Иначе
						КомандаПодбор = Форма.Команды.Добавить(КнопкаПодборИмя);
						КомандаПодбор.Действие  = "Подключаемый_СписокСПодбором_Добавить";
						КомандаПодбор.Заголовок = НСтр("ru = 'Добавить'");
						КомандаПодбор.Картинка  = БиблиотекаКартинок.СоздатьЭлементСписка;
					КонецЕсли;
					
					КнопкаПодбор = Элементы.Добавить(КнопкаПодборИмя, Тип("КнопкаФормы"), ГруппаЗаголовокТаблицы);
					КнопкаПодбор.ИмяКоманды  = КнопкаПодборИмя;
					КнопкаПодбор.Вид         = ВидКнопкиФормы.Гиперссылка;
					КнопкаПодбор.Отображение = ОтображениеКнопки.Текст;
					
					Если СвойстваНастройки.ИнформацияОТипах.СодержитСсылочныеТипы И Прочее.ЕстьЗагрузкаДанныхИзФайла Тогда
						КомандаВставить = Форма.Команды.Добавить(КнопкаВставитьИмя);
						КомандаВставить.Действие  = "Подключаемый_СписокСПодбором_ВставитьИзБуфера";
						КомандаВставить.Заголовок = НСтр("ru = 'Вставить из буфера обмена...'");
						КомандаВставить.Подсказка = КомандаВставить.Заголовок; // Для платформы.
						КомандаВставить.Картинка  = БиблиотекаКартинок.ЗаполнитьФорму;
						
						КнопкаВставить = Элементы.Добавить(КнопкаВставитьИмя, Тип("КнопкаФормы"), ГруппаЗаголовокТаблицы);
						КнопкаВставить.ИмяКоманды  = КнопкаВставитьИмя;
						КнопкаВставить.Вид         = ВидКнопкиФормы.Гиперссылка;
						КнопкаВставить.Отображение = ОтображениеКнопки.Картинка;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			// Реквизит.
			БыстрыеНастройкиДобавитьРеквизит(Прочее.ПараметрыЗаполнения, ТаблицаИмя, "СписокЗначений");
			
			// Группа с отступом и таблицей.
			ГруппаСОтступом = Элементы.Добавить(ГруппаИмя + "Отступ", Тип("ГруппаФормы"), Группа);
			ГруппаСОтступом.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаСОтступом.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаСОтступом.Отображение         = ОтображениеОбычнойГруппы.Нет;
			ГруппаСОтступом.Заголовок           = СвойстваНастройки.Представление;
			ГруппаСОтступом.ОтображатьЗаголовок = Ложь;
			
			// Декорация отступа.
			ПустаяДекорация = Элементы.Добавить(ДекорацияИмя + "Отступ", Тип("ДекорацияФормы"), ГруппаСОтступом);
			ПустаяДекорация.Вид                      = ВидДекорацииФормы.Надпись;
			ПустаяДекорация.Заголовок                = "     ";
			ПустаяДекорация.РастягиватьПоГоризонтали = Ложь;
			
			// Таблица.
			ТаблицаФормы = Элементы.Добавить(ТаблицаИмя, Тип("ТаблицаФормы"), ГруппаСОтступом);
			ТаблицаФормы.Отображение               = ОтображениеТаблицы.Список;
			ТаблицаФормы.Заголовок                 = СвойстваНастройки.Представление;
			ТаблицаФормы.ПоложениеЗаголовка        = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ТаблицаФормы.ПоложениеКоманднойПанели  = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
			ТаблицаФормы.ВертикальныеЛинии         = Ложь;
			ТаблицаФормы.ГоризонтальныеЛинии       = Ложь;
			ТаблицаФормы.Шапка                     = Ложь;
			ТаблицаФормы.Подвал                    = Ложь;
			ТаблицаФормы.ИзменятьПорядокСтрок      = Истина;
			ТаблицаФормы.РастягиватьПоГоризонтали  = Истина;
			ТаблицаФормы.РастягиватьПоВертикали    = Истина;
			ТаблицаФормы.Высота                    = 3;
			
			Если СвойстваНастройки.ВыводитьФлажок Тогда
				Если Не СвойстваНастройки.ПользовательскаяНастройкаКД.Использование Тогда
					ТаблицаФормы.ЦветТекста = Форма.ЦветНеактивныхЗначенийТаблицы;
				КонецЕсли;
			КонецЕсли;
			
			// Группа колонок "в ячейке".
			ГруппаКолонок = Элементы.Добавить(ГруппаКолонокИмя, Тип("ГруппаФормы"), ТаблицаФормы);
			ГруппаКолонок.Вид         = ВидГруппыФормы.ГруппаКолонок;
			ГруппаКолонок.Группировка = ГруппировкаКолонок.ВЯчейке;
			
			// Колонка "Использование".
			КолонкаИспользованиеЭлемент = Элементы.Добавить(КолонкаИспользованиеИмя, Тип("ПолеФормы"), ГруппаКолонок);
			КолонкаИспользованиеЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
			
			// Колонка "Значение".
			КолонкаЗначениеЭлемент = Элементы.Добавить(КолонкаЗначениеИмя, Тип("ПолеФормы"), ГруппаКолонок);
			КолонкаЗначениеЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			
			ЗаполнитьЗначенияСвойств(КолонкаЗначениеЭлемент, СвойстваНастройки.ДоступнаяНастройкаКД, "БыстрыйВыбор, Маска, ФормаВыбора, ФорматРедактирования");
			
			КолонкаЗначениеЭлемент.ВыборГруппИЭлементов = СвойстваНастройки.ВыборГруппИЭлементов;
			
			Если СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
				КолонкаЗначениеЭлемент.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			// Заполнение имен объектов метаданных в разрезах типов и идентификаторов элементов (для предустановленных).
			// Используется при клике по кнопке "Подбор" для получения имени формы подбора.
			Если ЗначениеЗаполнено(КолонкаЗначениеЭлемент.ФормаВыбора) Тогда
				Прочее.СоответствиеИменОбъектовМетаданных.Вставить(СвойстваНастройки.ИдентификаторЭлемента, КолонкаЗначениеЭлемент.ФормаВыбора);
			КонецЕсли;
			
			// Фиксированные параметры выбора.
			Если СвойстваНастройки.ПараметрыВыбора.Количество() > 0 Тогда
				КолонкаЗначениеЭлемент.ПараметрыВыбора = Новый ФиксированныйМассив(СвойстваНастройки.ПараметрыВыбора);
			КонецЕсли;
			
			Если ВыводитьУсловие Тогда
				КнопкаВидСравнения = Элементы.Добавить(КомандаВидСравненияИмя, Тип("КнопкаФормы"), ТаблицаФормы.КонтекстноеМеню);
				КнопкаВидСравнения.ИмяКоманды  = КомандаВидСравненияИмя;
			КонецЕсли;
			
			Дополнительно = Новый Структура;
			Дополнительно.Вставить("ТаблицаИмя",              ТаблицаИмя);
			Дополнительно.Вставить("ИмяКолонкиЗначение",      КолонкаЗначениеИмя);
			Дополнительно.Вставить("ИмяКолонкиИспользование", КолонкаИспользованиеИмя);
			СвойстваНастройки.Дополнительно = Дополнительно;
			Прочее.ДобавленныеСпискиЗначений.Добавить(СвойстваНастройки);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементВывода.ИмяЭлемента1 = Неопределено Тогда
		ЗаголовокИмя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "Заголовок");
		ПолеНадписи = Элементы.Добавить(ЗаголовокИмя, Тип("ДекорацияФормы"), Элементы.НеОтсортированное);
		ПолеНадписи.Вид       = ВидДекорацииФормы.Надпись;
		ПолеНадписи.Заголовок = СвойстваНастройки.Представление + ":";
		ЭлементВывода.ИмяЭлемента1 = ЗаголовокИмя;
	КонецЕсли;
	
	ИмяПараметра = Строка(СвойстваНастройки.ПолеКД);
	Если ИмяПараметра = "ПараметрыДанных.ТипОбъектаМетаданных"
		Или ИмяПараметра = "ПараметрыДанных.ПолноеИмяОбъектаМетаданных"
		Или ИмяПараметра = "ПараметрыДанных.ИмяТаблицы" Тогда
		ПолеНадписи.Видимость = Ложь;
	КонецЕсли;
	
	Если СвойстваНастройки.ТипЭлементов = "СтандартныйПериод" Тогда
		ГруппаВывода.Порядок.Вставить(0, ЭлементВывода);
	Иначе
		ГруппаВывода.Порядок.Добавить(ЭлементВывода);
	КонецЕсли;
	ГруппаВывода.Размер = ГруппаВывода.Размер + ЭлементВывода.Размер;
	
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиДобавитьРеквизит(ПараметрыЗаполнения, РеквизитПолноеИмя, ТипРеквизита)
	Если ТипЗнч(ТипРеквизита) = Тип("ОписаниеТипов") Тогда
		ТипыДобавляемого = ТипРеквизита;
	ИначеЕсли ТипЗнч(ТипРеквизита) = Тип("Строка") Тогда
		ТипыДобавляемого = Новый ОписаниеТипов(ТипРеквизита);
	ИначеЕсли ТипЗнч(ТипРеквизита) = Тип("Массив") Тогда
		ТипыДобавляемого = Новый ОписаниеТипов(ТипРеквизита);
	ИначеЕсли ТипЗнч(ТипРеквизита) = Тип("Тип") Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипРеквизита);
		ТипыДобавляемого = Новый ОписаниеТипов(МассивТипов);
	Иначе
		Возврат;
	КонецЕсли;
	
	ТипыСуществующего = ПараметрыЗаполнения.Реквизиты.Существующие.Получить(РеквизитПолноеИмя);
	Если ОписанияТиповСовпадают(ТипыСуществующего, ТипыДобавляемого) Тогда
		ПараметрыЗаполнения.Реквизиты.Существующие.Удалить(РеквизитПолноеИмя);
	Иначе
		ПозицияТочки = СтрНайти(РеквизитПолноеИмя, ".");
		Если ПозицияТочки = 0 Тогда
			ПутьКРеквизиту = "";
			КраткоеИмяРеквизита = РеквизитПолноеИмя;
		Иначе
			ПутьКРеквизиту = Лев(РеквизитПолноеИмя, ПозицияТочки - 1);
			КраткоеИмяРеквизита = Сред(РеквизитПолноеИмя, ПозицияТочки + 1);
		КонецЕсли;
		
		ПараметрыЗаполнения.Реквизиты.Добавляемые.Добавить(Новый РеквизитФормы(КраткоеИмяРеквизита, ТипыДобавляемого, ПутьКРеквизиту));
		Если ТипыСуществующего <> Неопределено Тогда
			ПараметрыЗаполнения.Реквизиты.Удаляемые.Добавить(РеквизитПолноеИмя);
			ПараметрыЗаполнения.Реквизиты.Существующие.Удалить(РеквизитПолноеИмя);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОписанияТиповСовпадают(ОписаниеТипов1, ОписаниеТипов2)
	Если ОписаниеТипов1 = Неопределено Или ОписаниеТипов2 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОписаниеТипов1 = ОписаниеТипов2
		Или ОбщегоНазначения.ЗначениеВСтрокуXML(ОписаниеТипов1) = ОбщегоНазначения.ЗначениеВСтрокуXML(ОписаниеТипов2);
КонецФункции

&НаСервере
Функция БыстрыеНастройкиДозаполнитьПараметры(ПараметрыКлиента)
	ПараметрыЗаполнения = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыЗаполнения, ПараметрыКлиента, Истина);
	Если Не ПараметрыЗаполнения.Свойство("ИмяСобытия") Тогда
		ПараметрыЗаполнения.Вставить("ИмяСобытия", "");
	КонецЕсли;
	Если Не ПараметрыЗаполнения.Свойство("ВариантМодифицирован") Тогда
		ПараметрыЗаполнения.Вставить("ВариантМодифицирован", Ложь);
	КонецЕсли;
	Если Не ПараметрыЗаполнения.Свойство("ПользовательскиеНастройкиМодифицированы") Тогда
		ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Ложь);
	КонецЕсли;
	Если Не ПараметрыЗаполнения.Свойство("Результат") Тогда
		ПараметрыЗаполнения.Вставить("Результат", Новый Структура);
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ОтчетОбъектИлиПолноеИмя", НастройкиОтчета.ПолноеИмя);
	Если НастройкиОтчета.События.ПередЗаполнениемПанелиБыстрыхНастроек
		Или НастройкиОтчета.События.ПослеЗаполненияПанелиБыстрыхНастроек
		Или НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя = РеквизитФормыВЗначение("Отчет");
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
КонецФункции

&НаСервере
Процедура БыстрыеНастройкиЗагрузитьНастройкиВКомпоновщик(ПараметрыЗаполнения)
	
	НовыеНастройкиКД = Неопределено;
	НовыеПользовательскиеНастройкиКД = Неопределено;
	Если ПараметрыЗаполнения.Свойство("КомпоновщикНастроекКД") Тогда
		НовыеНастройкиКД = ПараметрыЗаполнения.КомпоновщикНастроекКД.Настройки;
		НовыеПользовательскиеНастройкиКД = ПараметрыЗаполнения.КомпоновщикНастроекКД.ПользовательскиеНастройки;
	Иначе
		Если ПараметрыЗаполнения.Свойство("НастройкиКД") Тогда
			НовыеНастройкиКД = ПараметрыЗаполнения.НастройкиКД;
		КонецЕсли;
		Если ПараметрыЗаполнения.Свойство("ПользовательскиеНастройкиКД") Тогда
			НовыеПользовательскиеНастройкиКД = ПараметрыЗаполнения.ПользовательскиеНастройкиКД;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		НовыеНастройкиXML = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиОтчета, "НовыеНастройкиXML");
		Если ТипЗнч(НовыеНастройкиXML) = Тип("Строка") Тогда
			Попытка
				НовыеНастройкиКД = ОбщегоНазначения.ЗначениеИзСтрокиXML(НовыеНастройкиXML);
			Исключение
				НовыеНастройкиКД = Неопределено;
			КонецПопытки;
			НастройкиОтчета.НовыеНастройкиXML = Неопределено;
		КонецЕсли;
		
		НовыеПользовательскиеНастройкиXML = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиОтчета, "НовыеПользовательскиеНастройкиXML");
		Если ТипЗнч(НовыеПользовательскиеНастройкиXML) = Тип("Строка") Тогда
			Попытка
				НовыеПользовательскиеНастройкиКД = ОбщегоНазначения.ЗначениеИзСтрокиXML(НовыеПользовательскиеНастройкиXML);
			Исключение
				НовыеПользовательскиеНастройкиКД = Неопределено;
			КонецПопытки;
			НастройкиОтчета.НовыеПользовательскиеНастройкиXML = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СброситьПользовательскиеНастройки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "СброситьПользовательскиеНастройки", Ложь);
	Если СброситьПользовательскиеНастройки Тогда
		НовыеПользовательскиеНастройкиКД = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	КонецЕсли;
	
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		ОтчетОбъект = ОтчетыСервер.ОтчетОбъект(ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя);
		ОтчетОбъект.ПередЗагрузкойНастроекВКомпоновщик(
			ЭтотОбъект,
			НастройкиОтчета.КлючСхемы,
			КлючТекущегоВарианта,
			НовыеНастройкиКД,
			НовыеПользовательскиеНастройкиКД);
	КонецЕсли;
	
	Если ТипЗнч(НовыеНастройкиКД) = Тип("НастройкиКомпоновкиДанных")
		И Отчет.КомпоновщикНастроек.Настройки <> НовыеНастройкиКД Тогда
		Если ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") Тогда
			ОтчетыСервер.УстановитьФиксированныеОтборы(ФормаПараметры.Отбор, НовыеНастройкиКД, НастройкиОтчета);
		КонецЕсли;
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НовыеНастройкиКД);
	КонецЕсли;
	Если ТипЗнч(НовыеПользовательскиеНастройкиКД) = Тип("ПользовательскиеНастройкиКомпоновкиДанных")
		И Отчет.КомпоновщикНастроек.ПользовательскиеНастройки <> НовыеПользовательскиеНастройкиКД Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(НовыеПользовательскиеНастройкиКД);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("ФормаНастроекРасширенныйРежим") Тогда
		НастройкиОтчета.Вставить("ФормаНастроекРасширенныйРежим", ПараметрыЗаполнения.ФормаНастроекРасширенныйРежим);
	КонецЕсли;
	Если ПараметрыЗаполнения.Свойство("ФормаНастроекИмяСтраницы") Тогда
		НастройкиОтчета.Вставить("ФормаНастроекИмяСтраницы", ПараметрыЗаполнения.ФормаНастроекИмяСтраницы);
	КонецЕсли;
	
	УсловияОтборов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "УсловияОтборов");
	Если УсловияОтборов <> Неопределено Тогда
		УзелКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		Для Каждого КлючИЗначение Из УсловияОтборов Цикл
			ПользовательскаяНастройкаКД = УзелКД.ПолучитьОбъектПоИдентификатору(КлючИЗначение.Ключ);
			ПользовательскаяНастройкаКД.ВидСравнения = КлючИЗначение.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ВариантМодифицирован Тогда
		ВариантМодифицирован = Истина;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПользовательскиеНастройкиМодифицированы Тогда
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
	Если НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек Тогда
		НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Ложь;
		НастройкиОтчета.ФормироватьСразу = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства,
			"ФормироватьСразу",
			НастройкиОтчета.ФормироватьСразу);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиУдалитьСтарыеЭлементыИКоманды(ПараметрыЗаполнения)
	// Удаление элементов.
	УдаляемыеЭлементы = Новый Массив;
	ДобавитьПодчиненныеЭлементы(УдаляемыеЭлементы, Элементы.БыстрыеНастройки.ПодчиненныеЭлементы);
	ДобавитьПодчиненныеЭлементы(УдаляемыеЭлементы, Элементы.ОсновныеНастройкиПараметров.ПодчиненныеЭлементы);
	Для Каждого Элемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	// Удаление команд
	УдаляемыеКоманды = Новый Массив;
	Для Каждого Команда Из Команды Цикл
		Если ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя) = Неопределено Тогда
			УдаляемыеКоманды.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Команда Из УдаляемыеКоманды Цикл
		Команды.Удалить(Команда);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодчиненныеЭлементы(Куда, Откуда)
	Для Каждого ПодчиненныйЭлемент Из Откуда Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы")
			Или ТипЗнч(ПодчиненныйЭлемент) = Тип("ТаблицаФормы") Тогда
			ДобавитьПодчиненныеЭлементы(Куда, ПодчиненныйЭлемент.ПодчиненныеЭлементы);
		КонецЕсли;
		Куда.Добавить(ПодчиненныйЭлемент);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиСоздатьЭлементыУправленияИЗагрузитьЗначения(ПараметрыЗаполнения, Информация)
	// Кэши для быстрого поиска с клиента.
	СоответствиеПользовательскихНастроек = Новый Соответствие;
	СоответствиеИменОбъектовМетаданных   = Информация.СоответствиеИменОбъектовМетаданных;
	СоответствиеОтключаемыхСвязей        = Новый Соответствие;
	СоответствиеНастроекВарианта         = Новый Соответствие;
	
	// Удаление реквизитов
	ПараметрыЗаполнения.Вставить("Реквизиты", Новый Структура);
	ПараметрыЗаполнения.Реквизиты.Вставить("Добавляемые",  Новый Массив);
	ПараметрыЗаполнения.Реквизиты.Вставить("Удаляемые",    Новый Массив);
	ПараметрыЗаполнения.Реквизиты.Вставить("Существующие", Новый Соответствие);
	ВсеРеквизиты = ПолучитьРеквизиты();
	Для Каждого Реквизит Из ВсеРеквизиты Цикл
		ПолноеИмяРеквизита = Реквизит.Имя + ?(ПустаяСтрока(Реквизит.Путь), "", "." + Реквизит.Путь);
		Если ПостоянныеРеквизиты.НайтиПоЗначению(ПолноеИмяРеквизита) = Неопределено Тогда
			ПараметрыЗаполнения.Реквизиты.Существующие.Вставить(ПолноеИмяРеквизита, Реквизит.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	
	// Локальные переменные для установки значений и свойств после создания реквизитов.
	ДобавленныеПоляВвода          = Новый Структура;
	ДобавленныеСтандартныеПериоды = Новый Массив;
	
	// Структура связей.
	Связи = Информация.Связи;
	
	ИменаОсновныхРеквизитовФормы     = Новый Соответствие;
	ИменаЭлементовДляУстановкиСвязей = Новый Соответствие;
	ИменаФлажковИспользование        = Новый Соответствие;
	НастройкиСВидомСравненияРавно    = Новый Соответствие;
	
	КомпоновщикНастроекКД       = Отчет.КомпоновщикНастроек;
	ПользовательскиеНастройкиКД = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	НастройкиКД                 = КомпоновщикНастроекКД.ПолучитьНастройки();
	
	ДополнительныеНастройкиЭлементов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПользовательскиеНастройкиКД.ДополнительныеСвойства, "ЭлементыФормы");
	Если ДополнительныеНастройкиЭлементов = Неопределено Тогда
		ДополнительныеНастройкиЭлементов = Новый Соответствие;
	КонецЕсли;
	
	Режимы = РежимОтображенияЭлементаНастройкиКомпоновкиДанных;
	
	ШаблонНастройки = Новый Структура("Тип, Подтип, Шаблон, СтрокаДерева,
		|ПользовательскаяНастройкаКД, Идентификатор, НастройкаВариантаКД, ДоступнаяНастройкаКД");
	ШаблонНастройки.Вставить("Иерархия", Ложь);
	ШаблонНастройки.Вставить("ФлажокИспользование", Ложь);
	ШаблонНастройки.Вставить("ВводСписком", Ложь);
	ШаблонНастройки.Вставить("ОграничиватьВыборУказаннымиЗначениями", Ложь);
	ШаблонНастройки = Новый ФиксированнаяСтруктура(ШаблонНастройки);
	
	ГруппыВывода = Новый Структура;
	ГруппыВывода.Вставить("Быстрые", Новый Структура("Порядок, Размер", Новый Массив, 0));
	ГруппыВывода.Вставить("Основные", Новый Структура("Порядок, Размер", Новый Массив, 0));
	
	ЕстьЗагрузкаДанныхИзФайла = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла");
	
	ВыводимыеНастройки = Информация.ПользовательскиеНастройки.Скопировать(Новый Структура("ВыводРазрешен, Быстрая", Истина, Истина));
	ВыводимыеНастройки.Сортировать("ИндексВКоллекции Возр");
	
	Прочее = Новый Структура;
	Прочее.Вставить("Связи",       Связи);
	Прочее.Вставить("ОтчетОбъект", Неопределено);
	Прочее.Вставить("ПараметрыЗаполнения",       ПараметрыЗаполнения);
	Прочее.Вставить("ПутьККомпоновщику",         "Отчет.КомпоновщикНастроек");
	Прочее.Вставить("ЕстьЗагрузкаДанныхИзФайла", ЕстьЗагрузкаДанныхИзФайла);
	Прочее.Вставить("ДополнительныеНастройкиЭлементов",   ДополнительныеНастройкиЭлементов);
	Прочее.Вставить("ИменаОсновныхРеквизитовФормы",       ИменаОсновныхРеквизитовФормы);
	Прочее.Вставить("ИменаЭлементовДляУстановкиСвязей",   ИменаЭлементовДляУстановкиСвязей);
	Прочее.Вставить("СоответствиеИменОбъектовМетаданных", СоответствиеИменОбъектовМетаданных);
	Прочее.Вставить("ДобавленныеПоляВвода",          ДобавленныеПоляВвода);
	Прочее.Вставить("ДобавленныеСтандартныеПериоды", ДобавленныеСтандартныеПериоды);
	Прочее.Вставить("ДобавленныеСпискиЗначений",     Неопределено);
	Прочее.Вставить("ЕстьОтборыСУсловиями", Ложь);
	
	ГруппаВывода = ГруппыВывода.Быстрые;
	
	Для Каждого СвойстваНастройки Из ВыводимыеНастройки Цикл
		СоответствиеПользовательскихНастроек.Вставить(СвойстваНастройки.ИдентификаторЭлемента, СвойстваНастройки.ИдентификаторКД);
		
		Если СвойстваНастройки.НастройкаВарианта <> Неопределено Тогда
			ПоискНастройкиВарианта = Новый Структура;
			ПоискНастройкиВарианта.Вставить("ИдентификаторУзлаКД",     СвойстваНастройки.СтрокаДерева.ИдентификаторКД);
			ПоискНастройкиВарианта.Вставить("ИмяКоллекции",            СвойстваНастройки.НастройкаВарианта.ИмяКоллекции);
			ПоискНастройкиВарианта.Вставить("ИдентификаторЭлементаКД", СвойстваНастройки.НастройкаВарианта.ИдентификаторКД);
			СоответствиеНастроекВарианта.Вставить(СвойстваНастройки.ИдентификаторЭлемента, ПоискНастройкиВарианта);
		КонецЕсли;
		
		
		ИмяПараметра = Строка(СвойстваНастройки.ПолеКД);
		Если СвойстваНастройки.ТипЭлементов = "СтандартныйПериод" Тогда
			ВывестиЭлементыНастройки(ЭтотОбъект, Элементы, СвойстваНастройки, ГруппыВывода.Основные, Прочее);
		ИначеЕсли ИмяПараметра = "ПараметрыДанных.ТипОбъектаМетаданных"
			Или ИмяПараметра = "ПараметрыДанных.ПолноеИмяОбъектаМетаданных"
			Или ИмяПараметра = "ПараметрыДанных.ИмяТаблицы" Тогда
			ВывестиЭлементыНастройки(ЭтотОбъект, Элементы, СвойстваНастройки, ГруппыВывода.Основные, Прочее);
		Иначе
			ВывестиЭлементыНастройки(ЭтотОбъект, Элементы, СвойстваНастройки, ГруппаВывода, Прочее);
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ИзменитьУсловияОтборов.Видимость = Прочее.ЕстьОтборыСУсловиями;
	
	ОтчетыСервер.ВывестиПоПорядку(ЭтотОбъект, ГруппаВывода, Элементы.БыстрыеНастройки, 2, Ложь);
	ОтчетыСервер.ВывестиПоПорядку(ЭтотОбъект, ГруппыВывода.Основные, Элементы.ОсновныеНастройкиПараметров, 4, Ложь);
	
	// Удаление старых и добавление новых реквизитов.
	Для Каждого КлючИЗначение Из ПараметрыЗаполнения.Реквизиты.Существующие Цикл
		ПараметрыЗаполнения.Реквизиты.Удаляемые.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	ИзменитьРеквизиты(ПараметрыЗаполнения.Реквизиты.Добавляемые, ПараметрыЗаполнения.Реквизиты.Удаляемые);
	
	// Поля ввода (установка значений и связей).
	Для Каждого КлючИЗначение Из ДобавленныеПоляВвода Цикл
		ИмяРеквизита = КлючИЗначение.Ключ;
		ЭтотОбъект[ИмяРеквизита] = КлючИЗначение.Значение;
		Элементы[ИмяРеквизита].ПутьКДанным = ИмяРеквизита;
	КонецЦикла;
	
	// Стандартные периоды (установка значений и связей).
	Для Каждого СвойстваНастройки Из ДобавленныеСтандартныеПериоды Цикл
		Дополнительно = СвойстваНастройки.Дополнительно;
		ЭтотОбъект[Дополнительно.ЗначениеИмя] = СвойстваНастройки.Значение;
		Элементы[Дополнительно.ПериодНачалоИмя].ПутьКДанным    = Дополнительно.ЗначениеИмя + ".ДатаНачала";
		Элементы[Дополнительно.ПериодОкончаниеИмя].ПутьКДанным = Дополнительно.ЗначениеИмя + ".ДатаОкончания";
	КонецЦикла;
	
	// Сохранение соответствий для быстрого поиска в данные формы.
	БыстрыйПоискПользовательскихНастроек = Новый ФиксированноеСоответствие(СоответствиеПользовательскихНастроек);
	БыстрыйПоискИменОбъектовМетаданных   = Новый ФиксированноеСоответствие(СоответствиеИменОбъектовМетаданных);
	БыстрыйПоискОтключаемыхСвязей        = Новый ФиксированноеСоответствие(СоответствиеОтключаемыхСвязей);
	БыстрыйПоискНастроекВарианта         = Новый ФиксированноеСоответствие(СоответствиеНастроекВарианта);
	
	ПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить("ЭлементыФормы", ДополнительныеНастройкиЭлементов);
КонецПроцедуры

&НаСервере
Процедура НастройкиПечатиСохранить()
	ЗаполнитьЗначенияСвойств(НастройкиОтчета.Печать, ОтчетТабличныйДокумент);
КонецПроцедуры

&НаСервере
Процедура НастройкиПечатиВосстановить()
	ЗаполнитьЗначенияСвойств(ОтчетТабличныйДокумент, НастройкиОтчета.Печать);
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиФормирования(ИнформацияОбОшибке)
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки = СтандартныеПодсистемыКлиентСервер.ИсходнаяПричинаОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = НСтр("ru = 'Ошибка при формировании:'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибки = ПодробноеПредставлениеОшибки;
		КонецЕсли;
	Иначе
		ОписаниеОшибки = ИнформацияОбОшибке;
		ПодробноеПредставлениеОшибки = "";
	КонецЕсли;
	
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = ОписаниеОшибки;
	
	Если Не ПустаяСтрока(ПодробноеПредставлениеОшибки) Тогда
		ВариантыОтчетов.ПредупреждениеПоВарианту(НастройкиОтчета.ВариантСсылка, ПодробноеПредставлениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РекурсивныйАнализНастроекКД(Коллекция, Соответствие)
	Если Коллекция = Неопределено Тогда
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы, Соответствие);
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы, Соответствие);
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы, Соответствие);
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ПараметрыДанных.Элементы, Соответствие);
	Иначе
		// Регистрация значений включенных отборов и параметров КД, не выведенных в быстрый доступ.
		Для Каждого НастройкаВарианта Из Коллекция Цикл
			// ЭлементОтбораКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных,
			// ЗначениеПараметраКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных.
			Если ТипЗнч(НастройкаВарианта) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
				Значение = НастройкаВарианта.Значение;
				Если ЗначениеИлиПолеКомпоновкиДанныхЗаполнено(Значение) Тогда
					ПолеКД = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(НастройкаВарианта.Параметр));
					Соответствие.Вставить(ПолеКД, Значение);
				КонецЕсли;
				РекурсивныйАнализНастроекКД(НастройкаВарианта.ЗначенияВложенныхПараметров, Соответствие);
				Продолжить;
			КонецЕсли;
			
			Если НастройкаВарианта.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ
				И ЗначениеЗаполнено(НастройкаВарианта.ИдентификаторПользовательскойНастройки) Тогда
				Продолжить;
			КонецЕсли;
			Если НастройкаВарианта.Использование <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(НастройкаВарианта) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				РекурсивныйАнализНастроекКД(НастройкаВарианта.Элементы, Соответствие);
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(НастройкаВарианта) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Значение = НастройкаВарианта.ПравоеЗначение;
				Если ЗначениеИлиПолеКомпоновкиДанныхЗаполнено(Значение) Тогда
					ПолеКД = НастройкаВарианта.ЛевоеЗначение;
					Соответствие.Вставить(ПолеКД, Значение);
				КонецЕсли;
			ИначеЕсли ТипЗнч(НастройкаВарианта) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
				Значение = НастройкаВарианта.ПравоеЗначение;
				Если ЗначениеИлиПолеКомпоновкиДанныхЗаполнено(Значение) Тогда
					ПолеКД = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(НастройкаВарианта.Параметр));
					Соответствие.Вставить(ПолеКД, Значение);
				КонецЕсли;
				РекурсивныйАнализНастроекКД(НастройкаВарианта.ЗначенияВложенныхПараметров, Соответствие);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеИлиПолеКомпоновкиДанныхЗаполнено(Значение)
	Если ТипЗнч(Значение) = Тип("ПолеКомпоновкиДанных") Тогда
		Возврат ЗначениеЗаполнено(Строка(Значение));
	Иначе
		Возврат ЗначениеЗаполнено(Значение);
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьКомандыВыбораВариантов()
	ВариантыФормы = РеквизитФормыВЗначение("ДобавленныеВарианты");
	ВариантыФормы.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Отчеты", ОтчетыКлиентСервер.ЗначениеВМассив(НастройкиОтчета.ОтчетСсылка));
	ПараметрыПоиска.Вставить("ПометкаУдаления", Ложь);
	ПараметрыПоиска.Вставить("ПолучатьИтоговуюТаблицу", Истина);
	РезультатПоиска = ВариантыОтчетов.НайтиСсылки(ПараметрыПоиска);
	ТаблицаВариантов = РезультатПоиска.ТаблицаЗначений;
	Если НастройкиОтчета.Внешний Тогда // Добавить предопределенные варианты внешнего отчета в таблицу вариантов.
		Для Каждого ЭлементСписка Из НастройкиОтчета.ПредопределенныеВарианты Цикл
			СтрокаТаблицы = ТаблицаВариантов.Добавить();
			СтрокаТаблицы.Наименование = ЭлементСписка.Представление;
			СтрокаТаблицы.КлючВарианта = ЭлементСписка.Значение;
		КонецЦикла;
	КонецЕсли;
	ТаблицаВариантов.Свернуть("Ссылка, КлючВарианта, Наименование");
	ТаблицаВариантов.Сортировать("Наименование Возр, КлючВарианта Возр");
	
	Группа = Элементы.ВариантыОтчета;
	КнопкиГруппы = Группа.ПодчиненныеЭлементы;
	ПоследнийИндекс = ВариантыФормы.Количество() - 1;
	Для Каждого СтрокаТаблицы Из ТаблицаВариантов Цикл
		Найденные = ВариантыФормы.НайтиСтроки(Новый Структура("КлючВарианта, Найден", СтрокаТаблицы.КлючВарианта, Ложь));
		Если Найденные.Количество() = 1 Тогда
			ВариантФормы = Найденные[0];
			ВариантФормы.Найден = Истина;
			Кнопка = Элементы.Найти(ВариантФормы.ИмяКоманды);
			Кнопка.Видимость = Истина;
			Кнопка.Заголовок = СтрокаТаблицы.Наименование;
			Элементы.Переместить(Кнопка, Группа);
		Иначе
			ПоследнийИндекс = ПоследнийИндекс + 1;
			ВариантФормы = ВариантыФормы.Добавить();
			ЗаполнитьЗначенияСвойств(ВариантФормы, СтрокаТаблицы);
			ВариантФормы.Найден = Истина;
			ВариантФормы.ИмяКоманды = "ВыбратьВариант_" + Формат(ПоследнийИндекс, "ЧН=0; ЧГ=");
			
			Команда = Команды.Добавить(ВариантФормы.ИмяКоманды);
			Команда.Действие = "Подключаемый_ЗагрузитьВариантОтчета";
			
			Кнопка = Элементы.Добавить(ВариантФормы.ИмяКоманды, Тип("КнопкаФормы"), Группа);
			Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
			Кнопка.ИмяКоманды = ВариантФормы.ИмяКоманды;
			Кнопка.Заголовок = СтрокаТаблицы.Наименование;
			
			ПостоянныеКоманды.Добавить(ВариантФормы.ИмяКоманды);
		КонецЕсли;
		Кнопка.Пометка = (КлючТекущегоВарианта = СтрокаТаблицы.КлючВарианта);
	КонецЦикла;
	
	Найденные = ВариантыФормы.НайтиСтроки(Новый Структура("Найден", Ложь));
	Для Каждого ВариантФормы Из Найденные Цикл
		Кнопка = Элементы.Найти(ВариантФормы.ИмяКоманды);
		Кнопка.Видимость = Ложь;
	КонецЦикла;
	
	ВариантыФормы.Колонки.Удалить("Найден");
	ЗначениеВРеквизитФормы(ВариантыФормы, "ДобавленныеВарианты");
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияКлючевыхСостояний(ПараметрыЗаполнения)
	Если ПараметрыЗаполнения.ИмяСобытия <> "ПослеФормирования" Тогда
		Переформировать = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "Переформировать");
		Если Переформировать = Истина Тогда
			ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
			ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет формируется...'");
		ИначеЕсли ПараметрыЗаполнения.ВариантМодифицирован
			Или ПараметрыЗаполнения.ПользовательскиеНастройкиМодифицированы Тогда
			ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
			ОтображениеСостояния.Видимость = Истина;
			ОтображениеСостояния.Текст     = НСтр("ru = 'Изменились настройки. Нажмите ""Сформировать"" для получения отчета.'");
			Если Переформировать = Неопределено Тогда
				ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			Иначе
				ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОтключаемыеСвязи(Информация)
	ОтключаемыеСвязи.Очистить();
	Для Каждого ОписаниеСвязи Из Информация.ОтключаемыеСвязи Цикл
		Связь = ОтключаемыеСвязи.Добавить();
		ЗаполнитьЗначенияСвойств(Связь, ОписаниеСвязи);
		Связь.ВедущийИдентификаторВФорме     = ОписаниеСвязи.Ведущий.ИдентификаторЭлемента;
		Связь.ПодчиненныйИдентификаторВФорме = ОписаниеСвязи.Подчиненный.ИдентификаторЭлемента;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОВариантеОтчета()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВариантыОтчетов.Ссылка КАК ВариантСсылка,
	|	ВариантыОтчетов.ПредопределенныйВариант.КлючЗамеров КАК КлючЗамеров,
	|	ВариантыОтчетов.ПредопределенныйВариант КАК ПредопределенныйСсылка,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.Пользовательский
	|				ИЛИ ВариантыОтчетов.Родитель.КлючВарианта ЕСТЬ NULL 
	|			ТОГДА ВариантыОтчетов.КлючВарианта
	|		ИНАЧЕ ВариантыОтчетов.Родитель.КлючВарианта
	|	КОНЕЦ КАК ИмяИсходногоВарианта,
	|	ВариантыОтчетов.Пользовательский КАК Пользовательский
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта";
	Запрос.УстановитьПараметр("Отчет", НастройкиОтчета.ОтчетСсылка);
	Запрос.УстановитьПараметр("КлючВарианта", КлючТекущегоВарианта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НавигационнаяСсылка = "";
	Если Выборка.Следующий() Тогда
		НастройкиОтчета.Вставить("ВариантСсылка",          Выборка.ВариантСсылка);
		НастройкиОтчета.Вставить("КлючЗамеров",            Выборка.КлючЗамеров);
		НастройкиОтчета.Вставить("ПредопределенныйСсылка", Выборка.ПредопределенныйСсылка);
		НастройкиОтчета.Вставить("ИмяИсходногоВарианта",   ?(Выборка.Пользовательский, КлючТекущегоВарианта, Выборка.ИмяИсходногоВарианта));
		НастройкиОтчета.Вставить("Пользовательский",       Выборка.Пользовательский);
		Если Не НастройкиОтчета.Внешний Тогда
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(НастройкиОтчета.ВариантСсылка);
		КонецЕсли;
	Иначе
		НастройкиОтчета.Вставить("ВариантСсылка",          Неопределено);
		НастройкиОтчета.Вставить("КлючЗамеров",            Неопределено);
		НастройкиОтчета.Вставить("ПредопределенныйСсылка", Неопределено);
		НастройкиОтчета.Вставить("ИмяИсходногоВарианта",   Неопределено);
		НастройкиОтчета.Вставить("Пользовательский",       Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыРасшифровкиОтчета(Расшифровка)
	
	ДанныеРасшифровки   = ПолучитьИзВременногоХранилища(ОтчетДанныеРасшифровки);
	ЗначениеРасшифровки = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;
	Если ЗначениеРасшифровки = NULL Тогда
		ПараметрыРасшифровки = Неопределено;
	Иначе
		ПараметрыРасшифровки = Новый Структура;
		ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
		ПараметрыРасшифровки.Вставить("Значение",      ЗначениеРасшифровки);
	КонецЕсли;
	
	Возврат ПараметрыРасшифровки;
	
КонецФункции

#КонецОбласти