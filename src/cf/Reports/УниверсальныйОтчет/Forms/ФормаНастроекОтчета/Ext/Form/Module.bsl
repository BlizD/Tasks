&НаКлиенте
Перем ПеременныеКлиента;

////////////////////////////////////////////////////////////////////////////////
// ФОРМА

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ФормаПараметры = Новый Структура(
		"КлючНазначенияИспользования, КлючПользовательскихНастроек,
		|Расшифровка, СформироватьПриОткрытии, ТолькоПросмотр,
		|ФиксированныеНастройки, Раздел, Подсистема, ПодсистемаПредставление");
	ЗаполнитьЗначенияСвойств(ФормаПараметры, Параметры);
	ФормаПараметры.Вставить("Отбор", Новый Структура);
	Если ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ФормаПараметры.Отбор, Параметры.Отбор, Истина);
		Параметры.Отбор.Очистить();
	КонецЕсли;
	
	Если Не Параметры.Свойство("НастройкиОтчета", НастройкиОтчета) Тогда
		ВызватьИсключение НСтр("ru = 'Не передан служебный параметр ""НастройкиОтчета"".'");
	КонецЕсли;
	Если Не Параметры.Свойство("ВариантНаименование", ВариантНаименование) Тогда
		ВызватьИсключение НСтр("ru = 'Не передан служебный параметр ""ВариантНаименование"".'");
	КонецЕсли;
	Параметры.Свойство("ИдентификаторТекущегоУзлаКД", ИдентификаторТекущегоУзлаКД);
	КлючСохраненияПоложенияОкна = НастройкиОтчета.ПолноеИмя;
	Если ИдентификаторТекущегоУзлаКД <> Неопределено Тогда
		РежимИзмененияУзлаВарианта = Истина;
		Высота = 0;
		КлючСохраненияПоложенияОкна = КлючСохраненияПоложенияОкна + ".Узел";
		Если Не Параметры.Свойство("Заголовок", Заголовок) Тогда
			ВызватьИсключение НСтр("ru = 'Не передан служебный параметр ""Заголовок"".'");
		КонецЕсли;
		Если Не Параметры.Свойство("ТипТекущегоУзлаКД", ТипТекущегоУзлаКД) Тогда
			ВызватьИсключение НСтр("ru = 'Не передан служебный параметр ""ТипТекущегоУзлаКД"".'");
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(ВариантНаименование) Тогда
			ВариантНаименование = НастройкиОтчета.Наименование;
		КонецЕсли;
		Заголовок = НСтр("ru = 'Настройки отчета'") + " """ + ВариантНаименование + """";
	КонецЕсли;
	КлючНазначенияИспользования = КлючСохраненияПоложенияОкна;
	
	Элементы.РасширенныйРежим.Видимость = НастройкиОтчета.РазрешеноМенятьВарианты;
	
	Если РежимИзмененияУзлаВарианта Тогда
		ИмяСтраницы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ИмяСтраницы", "СтраницаСоставГруппировки");
		РасширенныйРежим = 1;
	Иначе
		РасширенныйРежим = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиОтчета, "ФормаНастроекРасширенныйРежим", 0);
		ИмяСтраницы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиОтчета, "ФормаНастроекИмяСтраницы", "СтраницаОтборы");
	КонецЕсли;
	Страница = Элементы.Найти(ИмяСтраницы);
	Если Страница <> Неопределено Тогда
		Элементы.СтраницыНастроек.ТекущаяСтраница = Страница;
	КонецЕсли;
	
	Если НастройкиОтчета.СхемаМодифицирована Тогда
		Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(НастройкиОтчета.АдресСхемы));
	КонецЕсли;
	
	ЦветНеактивныхЗначенийТаблицы = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
	
	// Регистрация команд и реквизитов формы, которые не удаляются при перезаполнении быстрых настроек.
	НаборРеквизитов = ПолучитьРеквизиты();
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		ПостоянныеРеквизиты.Добавить(ПолноеИмяРеквизита(Реквизит));
	КонецЦикла;
	Для Каждого Команда Из Команды Цикл
		ПостоянныеКоманды.Добавить(Команда.Имя);
	КонецЦикла;
	
	ДобавитьУсловноеОформление();
	
	НеобходимоОбновитьНастройки = Истина;
	
	Отчеты.УниверсальныйОтчет.ИнициализироватьОтчет(Отчет.КомпоновщикНастроек, Ложь, УникальныйИдентификатор, Параметры.Вариант);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойВариантаНаСервере(НовыеНастройкиКД)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") Тогда
		ОтчетыСервер.УстановитьФиксированныеОтборы(ФормаПараметры.Отбор, НовыеНастройкиКД, НастройкиОтчета);
	КонецЕсли;
	
	НеобходимоОбновитьНастройки = Истина;
	
	// Подготовка к вызову события переинициализации.
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		Попытка
			НовыеНастройкиXML = ОбщегоНазначения.ЗначениеВСтрокуXML(НовыеНастройкиКД);
		Исключение
			НовыеНастройкиXML = Неопределено;
		КонецПопытки;
		НастройкиОтчета.Вставить("НовыеНастройкиXML", НовыеНастройкиXML);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойПользовательскихНастроекНаСервере(НовыеПользовательскиеНастройкиКД)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НеобходимоОбновитьНастройки = Истина;
	
	// Подготовка к вызову события переинициализации.
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		Попытка
			НовыеПользовательскиеНастройкиXML = ОбщегоНазначения.ЗначениеВСтрокуXML(НовыеПользовательскиеНастройкиКД);
		Исключение
			НовыеПользовательскиеНастройкиXML = Неопределено;
		КонецПопытки;
		НастройкиОтчета.Вставить("НовыеПользовательскиеНастройкиXML", НовыеПользовательскиеНастройкиXML);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ВариантМодифицирован = Ложь;
	
	Если НеобходимоОбновитьНастройки Тогда
		НеобходимоОбновитьНастройки = Ложь;
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ИмяСобытия", "ПриСозданииНаСервере");
		Если Не РежимИзмененияУзлаВарианта И РасширенныйРежим = 1 Тогда
			ПараметрыЗаполнения.Вставить("ОбновитьНастройкиВарианта", Истина);
		КонецЕсли;
		РезультатЗаполненияНастроек = БыстрыеНастройкиЗаполнить(ПараметрыЗаполнения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПеременныеКлиента = Новый Структура;
	ПоказатьРезультатЗаполненияНастроек(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	ВариантМодифицирован = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если Не РезультатВыбораСформирован Тогда
		Если ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, РезультатВыбора(Ложь));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ЭЛЕМЕНТЫ

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РасширенныйРежимПриИзменении(Элемент)
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия", "РасширенныйРежимПриИзменении");
	Если РасширенныйРежим = 1 Тогда
		ПараметрыЗаполнения.Вставить("ОбновитьНастройкиВарианта", Истина);
	Иначе
		ПараметрыЗаполнения.Вставить("СброситьПользовательскиеНастройки", Истина);
	КонецЕсли;
	БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаНетПользовательскихНастроекОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РасширенныйРежим = Истина;
	РасширенныйРежимПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТекущийУзелКДТипДиаграммыПриИзменении(Элемент)
	КорневойУзелКД = Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(ИдентификаторТекущегоУзлаКД);
	Если ТипЗнч(КорневойУзелКД) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		КорневойУзелКД = КорневойУзелКД.Настройки;
	КонецЕсли;
	УстановитьПараметрВывода(КорневойУзелКД, "ТипДиаграммы", ТекущийУзелКДТипДиаграммы);
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	ВариантМодифицирован = Ложь;
	Если РасширенныйРежим = 1 Тогда
		ВариантИзменен = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаЕстьВложенныеОтчетыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ФормаПараметры, Истина);
	ПараметрыФормы.Вставить("Вариант",                               Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("КлючВарианта",                          Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",             Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ПредставлениеВарианта",                 ВариантНаименование);
	ПараметрыФормы.Вставить("ПредставлениеПользовательскихНастроек", "");
	
	Обработчик = Новый ОписаниеОповещения("ФормаВариантаЗавершение", ЭтотОбъект);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(НастройкиОтчета.ПолноеИмя + ".ФормаВарианта", ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Режим);
КонецПроцедуры

&НаКлиенте
Процедура ФормаВариантаЗавершение(Результат, ПараметрыВыполнения) Экспорт
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	БыстрыеНастройкиЗаполнитьКлиент(Результат);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_ФлажокИспользование_ПриИзменении(Элемент)
	ФлажокИмя = Элемент.Имя;
	ИдентификаторЭлемента = Прав(ФлажокИмя, 32);
	Тип = Лев(ФлажокИмя, СтрНайти(ФлажокИмя, "_")-1);
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	
	Если Тип = "ЭлементОтбора" Или Тип = "ЗначениеПараметра" Тогда
		ТаблицаИмя = Тип + "_СписокЗначений_" + ИдентификаторЭлемента;
		ТаблицаФормы = Элементы.Найти(ТаблицаИмя);
		Если ТаблицаФормы <> Неопределено Тогда
			ТаблицаФормы.ЦветТекста = ?(ПользовательскаяНастройкаКД.Использование, Новый Цвет, ЦветНеактивныхЗначенийТаблицы);
		КонецЕсли;
	КонецЕсли;
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	Если РасширенныйРежим = 1 Тогда
		Найденные = НайтиНастройкуВарианта(ЭтотОбъект, ИдентификаторЭлемента);
		Если Найденные <> Неопределено Тогда
			Найденные.ЭлементКД.Использование = ПользовательскаяНастройкаКД.Использование;
			ВариантИзменен = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВвода_ПриИзменении(Элемент)
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Значение = ПользовательскаяНастройкаКД.Значение;
	ИначеЕсли ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Значение = ПользовательскаяНастройкаКД.ПравоеЗначение;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
	
	Если ПользовательскаяНастройкаКД.Использование Тогда // Очистка значений при изменении значения.
		Найденные = ОтключаемыеСвязи.НайтиСтроки(Новый Структура("ВедущийИдентификаторВФорме", ИдентификаторЭлемента));
		Для Каждого Связь Из Найденные Цикл
			Если Не ЗначениеЗаполнено(Связь.ПодчиненныйИдентификаторВФорме) Тогда
				Продолжить;
			КонецЕсли;
			Если Связь.ТипСвязи = "ПараметровВыбора" Тогда
				Если Связь.ПодчиненныйДействие <> РежимИзмененияСвязанногоЗначения.Очищать Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			ПодчиненныйДополнительно = НайтиДополнительныеНастройкиЭлемента(Связь.ПодчиненныйИдентификаторВФорме);
			Если ПодчиненныйДополнительно <> Неопределено Тогда
				Если ПодчиненныйДополнительно.ВыводитьФлажок Тогда
					ПодчиненныйНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(Связь.ПодчиненныйИдентификаторВФорме);
					Если ПодчиненныйНастройкаКД <> Неопределено Тогда
						ПодчиненныйНастройкаКД.Использование = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если Не ПодчиненныйДополнительно.ОграничиватьВыборУказаннымиЗначениями Тогда
					ПодчиненныйДополнительно.ЗначенияДляВыбора.Очистить();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПользовательскиеНастройкиМодифицированы = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФлажокЗначения_ПриИзменении(Элемент)
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	Значение = ЭтотОбъект[Элемент.Имя];
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	
	ПользовательскиеНастройкиМодифицированы = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокКомпоновщика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОтчетыКлиент.СписокКомпоновщикаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗначениеКомпоновщика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОтчетыКлиент.ЗначениеКомпоновщикаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые - Стандартный период.

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_НачалоПериода_ПриИзменении(Элемент)
	// Формирование сведений по элементу.
	ПериодНачалоИмя = Элемент.Имя;
	ЗначениеИмя     = СтрЗаменить(ПериодНачалоИмя, "_Начало_", "_Значение_");
	ИдентификаторЭлемента = Прав(ПериодНачалоИмя, 32);
	
	Значение = ЭтотОбъект[ЗначениеИмя];
	Заполнено = ЗначениеЗаполнено(Значение.ДатаНачала);
	Если Заполнено Тогда
		Значение.ДатаНачала = НачалоДня(Значение.ДатаНачала);
	КонецЕсли;
	
	// Запись значения в пользовательские настройки компоновки данных.
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	Если Заполнено Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_КонецПериода_ПриИзменении(Элемент)
	// Формирование сведений по элементу.
	ПериодОкончаниеИмя = Элемент.Имя;
	ЗначениеИмя        = СтрЗаменить(ПериодОкончаниеИмя, "_Окончание_", "_Значение_");
	ИдентификаторЭлемента = Прав(ПериодОкончаниеИмя, 32);
	
	Значение = ЭтотОбъект[ЗначениеИмя];
	Заполнено = ЗначениеЗаполнено(Значение.ДатаОкончания);
	Если Заполнено Тогда
		Значение.ДатаОкончания = КонецДня(Значение.ДатаОкончания);
	КонецЕсли;
	
	// Запись значения в пользовательские настройки компоновки данных.
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	Если Заполнено Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбратьПериод(Команда)
	КнопкаВыбораИмя = Команда.Имя;
	ЗначениеИмя     = СтрЗаменить(КнопкаВыбораИмя, "_КнопкаВыбора_", "_Значение_");
	ИдентификаторЭлемента = Прав(КнопкаВыбораИмя, 32);
	ОтчетыКлиент.ВыбратьПериод(ЭтотОбъект, ЗначениеИмя, ИдентификаторЭлемента);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые - Список значений с кнопкой "Подбор".

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_ПриИзменении(ТаблицаФормы)
	// Обновление выбранных значений в данных СКД.
	ИдентификаторЭлемента = Прав(ТаблицаФормы.Имя, 32);
	
	СписокЗначенийВФорме = ЭтотОбъект[ТаблицаФормы.Имя];
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	ДополнительныеНастройки = НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента);
	
	СписокЗначенийВСКД = Новый СписокЗначений;
	Если Не ДополнительныеНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
		ДополнительныеНастройки.ЗначенияДляВыбора = Новый СписокЗначений;
	КонецЕсли;
	Для Каждого ЭлементСпискаВФорме Из СписокЗначенийВФорме Цикл
		ЗначениеВФорме = ЭлементСпискаВФорме.Значение;
		Если Не ДополнительныеНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
			Если ДополнительныеНастройки.ЗначенияДляВыбора.НайтиПоЗначению(ЗначениеВФорме) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ДополнительныеНастройки.ЗначенияДляВыбора.Добавить(), ЭлементСпискаВФорме);
		КонецЕсли;
		Если ЭлементСпискаВФорме.Пометка Тогда
			СписокЗначенийВСКД.Добавить(ЗначениеВФорме);
		КонецЕсли;
	КонецЦикла;
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.ПравоеЗначение = СписокЗначенийВСКД;
	Иначе
		ПользовательскаяНастройкаКД.Значение = СписокЗначенийВСКД;
	КонецЕсли;
	
	// Включение флажка Использование.
	ПользовательскаяНастройкаКД.Использование = Истина;
	ТаблицаФормы.ЦветТекста = ?(ПользовательскаяНастройкаКД.Использование, Новый Цвет, ЦветНеактивныхЗначенийТаблицы);
	
	ПользовательскиеНастройкиМодифицированы = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_Значение_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	
	// Добавление динамических параметров выбора (от ведущих).
	Найденные = ОтключаемыеСвязи.НайтиСтроки(Новый Структура("ПодчиненныйИдентификаторВФорме", ИдентификаторЭлемента));
	Для Каждого Связь Из Найденные Цикл
		Если Не ЗначениеЗаполнено(Связь.ВедущийИдентификаторВФорме)
			Или Не ЗначениеЗаполнено(Связь.ПодчиненныйИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;
		ВедущийНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(Связь.ВедущийИдентификаторВФорме);
		Если Не ВедущийНастройкаКД.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ВедущийНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ВедущийЗначение = ВедущийНастройкаКД.ПравоеЗначение;
		Иначе
			ВедущийЗначение = ВедущийНастройкаКД.Значение;
		КонецЕсли;
		Если Связь.ТипСвязи = "ПараметровВыбора" Тогда
			МассивКлючей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Связь.ПодчиненныйИмяПараметра, ".", Истина, Истина);
			ВГраница = МассивКлючей.ВГраница();
			Контекст = Параметры;
			Для Индекс = 0 По ВГраница Цикл
				Ключ = МассивКлючей[Индекс];
				Если Индекс = ВГраница Тогда
					Контекст.Вставить(Ключ, ВедущийЗначение);
				Иначе
					ВложенныйКонтекст = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Контекст, Ключ);
					Если ВложенныйКонтекст = Неопределено Тогда
						ВложенныйКонтекст = Контекст.Вставить(Ключ, Новый Структура);
					ИначеЕсли ТипЗнч(ВложенныйКонтекст) <> Тип("Структура") Тогда
						Прервать;
					КонецЕсли;
					Контекст = ВложенныйКонтекст;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Связь.ТипСвязи = "ПоТипу" Тогда
			ВедущийТип = ТипЗнч(ВедущийЗначение);
			ДополнительныеНастройки = НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента);
			Если ДополнительныеНастройки <> Неопределено
				И ДополнительныеНастройки.ОписаниеТипов.СодержитТип(ВедущийТип)
				И ДополнительныеНастройки.ОписаниеТипов.Типы().Количество() > 1 Тогда
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(ВедущийТип);
				Элемент.ДоступныеТипы = Новый ОписаниеТипов(МассивТипов);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_Использование_ПриИзменении(Элемент)
	// Включение флажка Использование если пользователь включил флажок в строке таблицы.
	КолонкаИспользованиеИмя = Элемент.Имя;
	ИдентификаторЭлемента   = Прав(КолонкаИспользованиеИмя, 32);
	СвойстваНастройкиТип    = Лев(КолонкаИспользованиеИмя, СтрНайти(КолонкаИспользованиеИмя, "_Колонка_Использование_")-1);
	
	ТаблицаИмя       = СвойстваНастройкиТип + "_СписокЗначений_" + ИдентификаторЭлемента;
	
	ЭлементСпискаВФорме = Элементы[ТаблицаИмя].ТекущиеДанные;
	Если ЭлементСпискаВФорме <> Неопределено И ЭлементСпискаВФорме.Пометка Тогда
		// Включение флажка Использование.
		ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
		ПользовательскаяНастройкаКД.Использование = Истина;
		
		// Оформление строк.
		ТаблицаФормы = Элементы.Найти(ТаблицаИмя);
		ТаблицаФормы.ЦветТекста = ?(ПользовательскаяНастройкаКД.Использование, Новый Цвет, ЦветНеактивныхЗначенийТаблицы);
		
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_ПередНачаломИзменения(Элемент, Отказ)
	СтрокаИдентификатор = Элемент.ТекущаяСтрока;
	Если СтрокаИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗначенийВФорме = ЭтотОбъект[Элемент.Имя];
	ЭлементСпискаВФорме = СписокЗначенийВФорме.НайтиПоИдентификатору(СтрокаИдентификатор);
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭлементСпискаДоНачалаИзменения = Новый Структура("Идентификатор, Пометка, Значение, Представление");
	ЗаполнитьЗначенияСвойств(ЭлементСпискаДоНачалаИзменения, ЭлементСпискаВФорме);
	ЭлементСпискаДоНачалаИзменения.Идентификатор = СтрокаИдентификатор;
	ПеременныеКлиента.Вставить("ЭлементСпискаДоНачалаИзменения", ЭлементСпискаДоНачалаИзменения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаНачалаРедактирования, ОтменаЗавершенияРедактирования)
	Если ОтменаНачалаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИдентификатор = Элемент.ТекущаяСтрока;
	Если СтрокаИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	СписокЗначенийВФорме  = ЭтотОбъект[Элемент.Имя];
	ЭлементСпискаВФорме   = СписокЗначенийВФорме.НайтиПоИдентификатору(СтрокаИдентификатор);
	
	Значение = ЭлементСпискаВФорме.Значение;
	Если Значение = Неопределено
		Или Значение = Тип("Неопределено")
		Или Значение = Новый ОписаниеТипов("Неопределено")
		Или Не ЗначениеЗаполнено(Значение) Тогда
		ОтменаЗавершенияРедактирования = Истина; // Запрет пустых значений.
	Иначе
		Для Каждого ЭлементСпискаДубльВФорме Из СписокЗначенийВФорме Цикл
			Если ЭлементСпискаДубльВФорме.Значение = Значение И ЭлементСпискаДубльВФорме <> ЭлементСпискаВФорме Тогда
				Состояние(НСтр("ru = 'Обнаружены дублирующиеся записи. Редактирование отменено.'"));
				ОтменаЗавершенияРедактирования = Истина; // Запрет дублей.
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЭлементСпискаДоНачалаИзменения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПеременныеКлиента, "ЭлементСпискаДоНачалаИзменения");
	ЕстьИнформация = (ЭлементСпискаДоНачалаИзменения <> Неопределено И ЭлементСпискаДоНачалаИзменения.Идентификатор = СтрокаИдентификатор);
	Если Не ОтменаЗавершенияРедактирования И ЕстьИнформация И ЭлементСпискаДоНачалаИзменения.Значение <> Значение Тогда
		ДополнительныеНастройки = НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента);
		Если ДополнительныеНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
			ОтменаЗавершенияРедактирования = Истина;
		Иначе
			ЭлементСпискаВФорме.Представление = ""; // Автозаполнение представления.
			ЭлементСпискаВФорме.Пометка = Истина; // Включение флажка.
		КонецЕсли;
	КонецЕсли;
	
	Если ОтменаЗавершенияРедактирования Тогда
		// Откат значений.
		Если ЕстьИнформация Тогда
			ЗаполнитьЗначенияСвойств(ЭлементСпискаВФорме, ЭлементСпискаДоНачалаИзменения);
		КонецЕсли;
		// Перезапуск события "ПередОкончаниемРедактирования" с ОтменаНачалаРедактирования = Истина.
		Элемент.ЗакончитьРедактированиеСтроки(Истина);
	Иначе
		Если НоваяСтрока Тогда
			ЭлементСпискаВФорме.Пометка = Истина; // Включение флажка.
		КонецЕсли;
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_Подбор(Команда)
	КнопкаПодборИмя = Команда.Имя;
	
	ИдентификаторЭлемента  = Прав(КнопкаПодборИмя, 32);
	СвойстваНастройкиТип = Лев(КнопкаПодборИмя, СтрНайти(КнопкаПодборИмя, "_Подбор_")-1);
	
	ТаблицаИмя         = СвойстваНастройкиТип + "_СписокЗначений_"   + ИдентификаторЭлемента;
	КолонкаЗначениеИмя = СвойстваНастройкиТип + "_Колонка_Значение_" + ИдентификаторЭлемента;
	КнопкаПодборИмя    = СвойстваНастройкиТип + "_Подбор_"  + ИдентификаторЭлемента;
	
	ТаблицаЗначение = ЭтотОбъект[ТаблицаИмя];
	КолонкаЗначениеЭлемент = Элементы[КолонкаЗначениеИмя];
	
	ОписаниеТипов = ТаблицаЗначение.ТипЗначения;
	
	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("ИдентификаторЭлемента",  ИдентификаторЭлемента);
	ПараметрыЭлемента.Вставить("ВыбранныйТип",           Неопределено);
	ПараметрыЭлемента.Вставить("КолонкаЗначениеЭлемент", КолонкаЗначениеЭлемент);
	ПараметрыЭлемента.Вставить("ТаблицаЭлемент",         Элементы[ТаблицаИмя]);
	ПараметрыЭлемента.Вставить("ВыборТолькоГрупп",       КолонкаЗначениеЭлемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы);
	ПараметрыЭлемента.Вставить("ПараметрыВыбора",        Новый Массив);
	
	Найденные = ОтключаемыеСвязи.НайтиСтроки(Новый Структура("ПодчиненныйИдентификаторВФорме", ИдентификаторЭлемента));
	Для Каждого Связь Из Найденные Цикл
		Если Не ЗначениеЗаполнено(Связь.ВедущийИдентификаторВФорме)
			Или Не ЗначениеЗаполнено(Связь.ПодчиненныйИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;
		ВедущийНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(Связь.ВедущийИдентификаторВФорме);
		Если Не ВедущийНастройкаКД.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ВедущийНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ВедущийЗначение = ВедущийНастройкаКД.ПравоеЗначение;
		Иначе
			ВедущийЗначение = ВедущийНастройкаКД.Значение;
		КонецЕсли;
		Если Связь.ТипСвязи = "ПараметровВыбора" Тогда
			ПараметрыЭлемента.ПараметрыВыбора.Добавить(Новый ПараметрВыбора(Связь.ПодчиненныйИмяПараметра, ВедущийЗначение));
		ИначеЕсли Связь.ТипСвязи = "ПоТипу" Тогда
			ТипВедущего = ТипЗнч(ВедущийЗначение);
			Если ОписаниеТипов.СодержитТип(ТипВедущего) Тогда
				ПараметрыЭлемента.ВыбранныйТип = ТипВедущего;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыЭлемента.ВыбранныйТип <> Неопределено Тогда // Тип определен ведущим.
		Подключаемый_СписокСПодбором_Подбор_ОткрытьФормуВыбора(-1, ПараметрыЭлемента);
		Возврат;
	КонецЕсли;
	
	// Выбор типа из списка.
	СписокВыбора = Новый СписокЗначений;
	
	ПростыеТипы = Новый Соответствие;
	ПростыеТипы.Вставить(Тип("Строка"), Истина);
	ПростыеТипы.Вставить(Тип("Дата"),   Истина);
	ПростыеТипы.Вставить(Тип("Число"),  Истина);
	
	МассивТипов = ОписаниеТипов.Типы();
	Для Каждого Тип Из МассивТипов Цикл
		// Исключение типов, для которых нет групп.
		Если ПараметрыЭлемента.ВыборТолькоГрупп Тогда
			ИмяОбъектаМетаданных = БыстрыйПоискИменОбъектовМетаданных.Получить(Тип);
			ВидОбъектаМетаданных = ВРег(Лев(ИмяОбъектаМетаданных, СтрНайти(ИмяОбъектаМетаданных, ".")-1));
			Если ВидОбъектаМетаданных <> "СПРАВОЧНИК" И ВидОбъектаМетаданных <> "ПЛАНВИДОВХАРАКТЕРИСТИК" И ВидОбъектаМетаданных <> "ПЛАНСЧЕТОВ" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		// Исключение простых типов.
		Если ПростыеТипы[Тип] = Истина Тогда
			Продолжить;
		КонецЕсли;
		// Добавление типа в список выбора.
		СписокВыбора.Добавить(Тип, Строка(Тип));
	КонецЦикла;
	
	Если СписокВыбора.Количество() = 0 Тогда
		ПараметрыЭлемента.ТаблицаЭлемент.ДобавитьСтроку();
		Возврат;
	ИначеЕсли СписокВыбора.Количество() = 1 Тогда
		// Один тип - выбор не требуется.
		ПараметрыЭлемента.ВыбранныйТип = СписокВыбора[0].Значение;
		Подключаемый_СписокСПодбором_Подбор_ОткрытьФормуВыбора(-1, ПараметрыЭлемента);
	Иначе
		// Более одного типа.
		Обработчик = Новый ОписаниеОповещения("Подключаемый_СписокСПодбором_Подбор_ОткрытьФормуВыбора", ЭтотОбъект, ПараметрыЭлемента);
		ПоказатьВыборИзМеню(Обработчик, СписокВыбора, Элементы[КнопкаПодборИмя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_Подбор_ОткрытьФормуВыбора(ВыбранныйЭлемент, ПараметрыЭлемента) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли ВыбранныйЭлемент <> -1 Тогда
		ПараметрыЭлемента.ВыбранныйТип = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	КолонкаЗначениеЭлемент = ПараметрыЭлемента.КолонкаЗначениеЭлемент;
	
	// Полное имя формы выбора.
	// Свойство "ФормаВыбора" недоступно на клиенте даже для чтения,
	//   поэтому для хранения предустановленных имен форм выбора используется коллекция БыстрыйПоискИменОбъектовМетаданных.
	ПутьКФорме = БыстрыйПоискИменОбъектовМетаданных.Получить(ПараметрыЭлемента.ИдентификаторЭлемента);
	Если Не ЗначениеЗаполнено(ПутьКФорме) Тогда
		ИмяОбъектаМетаданных = БыстрыйПоискИменОбъектовМетаданных.Получить(ПараметрыЭлемента.ВыбранныйТип);
		Если ПараметрыЭлемента.ВыборТолькоГрупп Тогда
			ВидОбъектаМетаданных = ВРег(Лев(ИмяОбъектаМетаданных, СтрНайти(ИмяОбъектаМетаданных, ".")-1));
			Если ВидОбъектаМетаданных = "СПРАВОЧНИК" Или ВидОбъектаМетаданных = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
				ПутьКФорме = ИмяОбъектаМетаданных + ".ФормаВыбораГруппы";
			Иначе
				ПутьКФорме = ИмяОбъектаМетаданных + ".ФормаВыбора";
			КонецЕсли;
		Иначе
			ПутьКФорме = ИмяОбъектаМетаданных + ".ФормаВыбора";
		КонецЕсли;
	КонецЕсли;
	
	ВыборГруппИЭлементов = ОтчетыКлиентСервер.ПривестиЗначениеКТипуИспользованиеГруппИЭлементов(КолонкаЗначениеЭлемент.ВыборГруппИЭлементов);
	
	ПараметрыФормыВыбора = Новый Структура;
	// Стандартные параметры формы.
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе",            Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыФормыВыбора.Вставить("Отбор",                         Новый Структура);
	// Стандартные параметры формы выбора (см. Расширение управляемой формы для динамического списка).
	ПараметрыФормыВыбора.Вставить("ВыборГруппИЭлементов",          ВыборГруппИЭлементов);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор",            Истина);
	ПараметрыФормыВыбора.Вставить("РежимВыбора",                   Истина);
	// Предполагаемые реквизиты.
	ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна",             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ПараметрыФормыВыбора.Вставить("РазрешитьНачалоПеретаскивания", Ложь);
	
	// Добавление фиксированных параметров выбора.
	Для Каждого ПараметрВыбора Из КолонкаЗначениеЭлемент.ПараметрыВыбора Цикл
		Если ПустаяСтрока(ПараметрВыбора.Имя) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрВыбора.Имя) Тогда
			Если ВРег(Лев(ПараметрВыбора.Имя, 6)) = ВРег("Отбор.") Тогда
				ПараметрыФормыВыбора.Отбор.Вставить(Сред(ПараметрВыбора.Имя, 7), ПараметрВыбора.Значение);
			Иначе
				ПараметрыФормыВыбора.Вставить(ПараметрВыбора.Имя, ПараметрВыбора.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Добавление динамических параметров выбора (от ведущих). Для обратной совместимости.
	Для Каждого СвязьПараметраВыбора Из КолонкаЗначениеЭлемент.СвязиПараметровВыбора Цикл
		Если ПустаяСтрока(СвязьПараметраВыбора.Имя) Тогда
			Продолжить;
		КонецЕсли;
		ВедущийЗначение = ЭтотОбъект[СвязьПараметраВыбора.ПутьКДанным];
		Если ВРег(Лев(СвязьПараметраВыбора.Имя, 6)) = ВРег("Отбор.") Тогда
			ПараметрыФормыВыбора.Отбор.Вставить(Сред(СвязьПараметраВыбора.Имя, 7), ВедущийЗначение);
		Иначе
			ПараметрыФормыВыбора.Вставить(СвязьПараметраВыбора.Имя, ВедущийЗначение);
		КонецЕсли;
	КонецЦикла;
	
	// Добавление динамических параметров выбора (от ведущих).
	Для Каждого ПараметрВыбора Из ПараметрыЭлемента.ПараметрыВыбора Цикл
		Если ПустаяСтрока(ПараметрВыбора.Имя) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрВыбора.Имя) Тогда
			Если ВРег(Лев(ПараметрВыбора.Имя, 6)) = ВРег("Отбор.") Тогда
				ПараметрыФормыВыбора.Отбор.Вставить(Сред(ПараметрВыбора.Имя, 7), ПараметрВыбора.Значение);
			Иначе
				ПараметрыФормыВыбора.Вставить(ПараметрВыбора.Имя, ПараметрВыбора.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОткрытьФорму(ПутьКФорме, ПараметрыФормыВыбора, ПараметрыЭлемента.ТаблицаЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_ОбработкаВыбора(Элемент, РезультатВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	// Списки в данных формы.
	ТаблицаИмя = Элемент.Имя;
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	СписокЗначенийВФорме  = ЭтотОбъект[Элемент.Имя];
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		СписокЗначенийВСКД = ПользовательскаяНастройкаКД.Значение;
	Иначе
		СписокЗначенийВСКД = ПользовательскаяНастройкаКД.ПравоеЗначение;
	КонецЕсли;
	СписокЗначенийВСКД = ОтчетыКлиентСервер.ЗначенияСписком(СписокЗначенийВСКД);
	
	Выбранные = ОтчетыКлиентСервер.ЗначенияСписком(РезультатВыбора);
	Выбранные.ЗаполнитьПометки(Истина);
	
	Дополнение = ОтчетыКлиентСервер.ДополнитьСписок(СписокЗначенийВСКД, Выбранные, Ложь, Истина);
	ОтчетыКлиентСервер.ДополнитьСписок(СписокЗначенийВФорме, Выбранные, Ложь, Истина);
	
	// Включение флажка Использование.
	ПользовательскаяНастройкаКД.Использование = Истина;
	
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение       = СписокЗначенийВСКД;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = СписокЗначенийВСКД;
	КонецЕсли;
	
	// Оформление строк.
	ТаблицаФормы = Элементы.Найти(ТаблицаИмя);
	ТаблицаФормы.ЦветТекста = ?(ПользовательскаяНастройкаКД.Использование, Новый Цвет, ЦветНеактивныхЗначенийТаблицы);
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	
	Если Дополнение.Всего > 0 Тогда
		Результат = Новый Структура;
		Если Дополнение.Всего = 1 Тогда
			ЗаголовокОповещения = НСтр("ru = 'Элемент добавлен в список'");
		Иначе
			ЗаголовокОповещения = НСтр("ru = 'Элементы добавлены в список'");
		КонецЕсли;
		СтандартныеПодсистемыКлиентСервер.ВывестиОповещение(
			Результат,
			ЗаголовокОповещения,
			Строка(Выбранные),
			БиблиотекаКартинок.ВыполнитьЗадачу);
		СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(ЭтотОбъект, Результат);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_ВставитьИзБуфера(Команда)
	КнопкаВставитьИмя = Команда.Имя;
	
	ИдентификаторЭлемента    = Прав(КнопкаВставитьИмя, 32);
	СвойстваНастройкиТип = Лев(КнопкаВставитьИмя, СтрНайти(КнопкаВставитьИмя, "_")-1);
	
	ТаблицаИмя         = СвойстваНастройкиТип + "_СписокЗначений_"   + ИдентификаторЭлемента;
	КолонкаЗначениеИмя = СвойстваНастройкиТип + "_Колонка_Значение_" + ИдентификаторЭлемента;
	
	Список = ЭтотОбъект[ТаблицаИмя];
	СписокЭлемент = Элементы[ТаблицаИмя];
	КолонкаЗначениеЭлемент = Элементы[КолонкаЗначениеИмя];
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ОписаниеТипов", ОписаниеТиповУдалитьПримитивные(Список.ТипЗначения));
	ПараметрыПоиска.Вставить("ПараметрыВыбора", КолонкаЗначениеЭлемент.ПараметрыВыбора);
	ПараметрыПоиска.Вставить("ПредставлениеПоля", СписокЭлемент.Заголовок);
	ПараметрыПоиска.Вставить("Сценарий", "ВставкаИзБуфераОбмена");
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ИдентификаторЭлемента", ИдентификаторЭлемента);
	ПараметрыВыполнения.Вставить("ТаблицаИмя", ТаблицаИмя);
	Обработчик = Новый ОписаниеОповещения("Подключаемый_СписокСПодбором_ВставитьИзБуфера_Завершение", ЭтотОбъект, ПараметрыВыполнения);
	
	МодульЗагрузкаДанныхИзФайлаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЗагрузкаДанныхИзФайлаКлиент");
	МодульЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗаполненияСсылок(ПараметрыПоиска, Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_ВставитьИзБуфера_Завершение(НайденныеОбъекты, ПараметрыВыполнения) Экспорт
	Если НайденныеОбъекты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЭлемента = ПараметрыВыполнения.ИдентификаторЭлемента;
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	ДополнительныеНастройки = НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента);
	
	Список = ЭтотОбъект[ПараметрыВыполнения.ТаблицаИмя];
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Отмеченные = ПользовательскаяНастройкаКД.ПравоеЗначение;
	Иначе
		Отмеченные = ПользовательскаяНастройкаКД.Значение;
	КонецЕсли;
	Для Каждого Значение Из НайденныеОбъекты Цикл
		ОтчетыКлиентСервер.ДобавитьУникальноеЗначениеВСписок(Список, Значение, Неопределено, Истина);
		ОтчетыКлиентСервер.ДобавитьУникальноеЗначениеВСписок(Отмеченные, Значение, Неопределено, Истина);
	КонецЦикла;
	
	// Включение флажка Использование.
	ПользовательскаяНастройкаКД.Использование = Истина;
	
	// Оформление строк.
	ТаблицаФормы = Элементы.Найти(ПараметрыВыполнения.ТаблицаИмя);
	ТаблицаФормы.ЦветТекста = ?(ПользовательскаяНастройкаКД.Использование, Новый Цвет, ЦветНеактивныхЗначенийТаблицы);
	
	ПользовательскиеНастройкиМодифицированы = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_Добавить(Команда)
	
	КнопкаПодборИмя = Команда.Имя;
	
	ИдентификаторЭлемента  = Прав(КнопкаПодборИмя, 32);
	СвойстваНастройкиТип = Лев(КнопкаПодборИмя, СтрНайти(КнопкаПодборИмя, "_Подбор_") - 1);
	
	ТаблицаИмя = СвойстваНастройкиТип + "_СписокЗначений_" + ИдентификаторЭлемента;
	
	Элементы[ТаблицаИмя].ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФиксированныйСписок_ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФиксированныйСписок_ПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ТАБЛИЦА Сортировка

#Область ОбработчикиСобытийЭлементовТаблицыФормыСортировка

&НаКлиенте
Процедура СортировкаВыбор(Элемент, СтрокаИдентификатор, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаТаблицы = Элементы.Сортировка.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаТаблицы.ТипНастройки = "ЭлементПорядка" Тогда
		ИмяКолонки = Поле.Имя;
		Если ИмяКолонки = "СортировкаПредставление" Тогда // Изменение поля
			ТаблицыПолейИзменить("Сортировка", СтрокаИдентификатор, СтрокаТаблицы);
		ИначеЕсли ИмяКолонки = "СортировкаНаправление" Тогда // Изменение порядка.
			ТаблицыПолейИзменитьНаправлениеСортировки("Сортировка", СтрокаТаблицы, Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Обработчик = Новый ОписаниеОповещения("СортировкаПослеВыбораПоля", ЭтотОбъект);
	ТаблицыПолейПоказатьВыборПоля("Сортировка", Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПослеВыбораПоля(ДоступноеПолеКД, ПараметрыВыполнения) Экспорт
	Если ДоступноеПолеКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ТаблицыПолейВставить("Сортировка", Тип("ЭлементПорядкаКомпоновкиДанных"), 0, Неопределено);
	
	ЭлементКД = Результат.ЭлементКД;
	ЭлементКД.Использование     = Истина;
	ЭлементКД.Поле              = ДоступноеПолеКД.Поле;
	ЭлементКД.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	
	СтрокаТаблицы = Результат.СтрокаТаблицы;
	СтрокаТаблицы.Использование = ЭлементКД.Использование;
	СтрокаТаблицы.Представление = ДоступноеПолеКД.Заголовок;
	СтрокаТаблицы.Направление   = ЭлементКД.ТипУпорядочивания;
	
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПередУдалением(Элемент, Отказ)
	ТаблицыПолейПередУдалением(Элемент.Имя, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура СортировкаИспользованиеПриИзменении(Элемент)
	ТаблицыПолейИзменитьИспользование("Сортировка");
КонецПроцедуры

&НаКлиенте
Процедура Сортировка_ПоУбыванию(Команда)
	ТаблицыПолейИзменитьНаправлениеСортировки("Сортировка", Неопределено, НаправлениеСортировкиКомпоновкиДанных.Убыв);
КонецПроцедуры

&НаКлиенте
Процедура Сортировка_ПоВозрастанию(Команда)
	ТаблицыПолейИзменитьНаправлениеСортировки("Сортировка", Неопределено, НаправлениеСортировкиКомпоновкиДанных.Возр);
КонецПроцедуры

&НаКлиенте
Процедура Сортировка_ПереместитьВверх(Команда)
	Сценарий = Новый Структура;
	Сценарий.Вставить("Шаги", "ОпределитьВыделенныеСтроки, СдвинутьСтроки");
	Сценарий.Вставить("Действие", "Переместить");
	Сценарий.Вставить("ТаблицаИмя", "Сортировка");
	Сценарий.Вставить("Направление", -1);
	
	ЗапуститьСценарий(Сценарий);
КонецПроцедуры

&НаКлиенте
Процедура Сортировка_ПереместитьВниз(Команда)
	Сценарий = Новый Структура;
	Сценарий.Вставить("Шаги", "ОпределитьВыделенныеСтроки, СдвинутьСтроки");
	Сценарий.Вставить("Действие", "Переместить");
	Сценарий.Вставить("ТаблицаИмя", "Сортировка");
	Сценарий.Вставить("Направление", 1);
	
	ЗапуститьСценарий(Сценарий);
КонецПроцедуры

&НаКлиенте
Процедура Сортировка_УстановитьФлажки(Команда)
	УстановитьФлажкиИспользованиеВоВсемДереве("Сортировка", Истина);
КонецПроцедуры

&НаКлиенте
Процедура Сортировка_СнятьФлажки(Команда)
	УстановитьФлажкиИспользованиеВоВсемДереве("Сортировка", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СортировкаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, РазрешитьПеретаскивание)
	Если Не ЗарегистрироватьНачалоПеретаскивания("Сортировка") Тогда
		РазрешитьПеретаскивание = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ИдентификаторЦели, Поле)
	СтандартнаяОбработка = Ложь;
	ПроверитьВозможностьПеретаскивания("Сортировка", ИдентификаторЦели, ПараметрыПеретаскивания);
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ИдентификаторЦели, Поле)
	// Возникает в приемнике при окончании перетаскивания когда все проверки пройдены.
	СтандартнаяОбработка = Ложь;
	ИсточникПеретаскивания = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПеременныеКлиента, "ИсточникПеретаскивания");
	Если ИсточникПеретаскивания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ИсточникПеретаскивания.ТаблицаИмя = "Сортировка" Тогда
		ПеретаскиваниеВПределахТаблицы(ИсточникПеретаскивания, ИдентификаторЦели);
	ИначеЕсли ИсточникПеретаскивания.ТаблицаИмя = "ВыбранныеПоля" Тогда
		ПеретаскиваниеВыбранныхПолейВСортировки(ИсточникПеретаскивания, ИдентификаторЦели);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СортировкаОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоля_Сортировка_Вправо(Команда)
	ИсточникПеретаскивания = Неопределено;
	Если Не ЗарегистрироватьНачалоПеретаскивания("ВыбранныеПоля", ИсточникПеретаскивания) Тогда
		Возврат;
	КонецЕсли;
	ПеретаскиваниеВыбранныхПолейВСортировки(ИсточникПеретаскивания, Элементы.Сортировка.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоля_Сортировка_Влево(Команда)
	ИсточникПеретаскивания = Неопределено;
	Если Не ЗарегистрироватьНачалоПеретаскивания("Сортировка", ИсточникПеретаскивания) Тогда
		Возврат;
	КонецЕсли;
	ПеретаскиваниеСортировокВВыбранныеПоля(ИсточникПеретаскивания, Элементы.ВыбранныеПоля.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоля_Сортировка_ВлевоВсе(Команда)
	КорневаяСтрока = КорневаяСтрокаПоУмолчанию("Сортировка");
	ТаблицыПолейУдалить("Сортировка", КорневаяСтрока.ПолучитьЭлементы(), Истина);
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ТАБЛИЦА ВыбранныеПоля

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыбранныеПоля

&НаКлиенте
Процедура ВыбранныеПоляВыбор(Элемент, СтрокаИдентификатор, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаТаблицы = Элементы.ВыбранныеПоля.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяКолонки = Поле.Имя;
	Если ИмяКолонки = "ВыбранныеПоляПредставление" Тогда // Изменение порядка.
		Если СтрокаТаблицы.ТипНастройки = "ВыбранноеПоле" Тогда
			ТаблицыПолейИзменить("ВыбранныеПоля", СтрокаИдентификатор, СтрокаТаблицы);
		ИначеЕсли СтрокаТаблицы.ТипНастройки = "ГруппаВыбранныхПолей" Тогда
			ТаблицыПолейИзменитьГруппу("ВыбранныеПоля", СтрокаИдентификатор, СтрокаТаблицы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоляПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Обработчик = Новый ОписаниеОповещения("ВыбранныеПоляПослеВыбораПоля", ЭтотОбъект);
	ТаблицыПолейПоказатьВыборПоля("ВыбранныеПоля", Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоляПослеВыбораПоля(ДоступноеПолеКД, ПараметрыВыполнения) Экспорт
	Если ДоступноеПолеКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ТаблицыПолейВставить("ВыбранныеПоля", Тип("ВыбранноеПолеКомпоновкиДанных"), 0, Неопределено);
	
	ЭлементКД = Результат.ЭлементКД;
	ЭлементКД.Использование = Истина;
	ЭлементКД.Поле          = ДоступноеПолеКД.Поле;
	
	СтрокаТаблицы = Результат.СтрокаТаблицы;
	СтрокаТаблицы.Использование  = ЭлементКД.Использование;
	СтрокаТаблицы.Представление  = ДоступноеПолеКД.Заголовок;
	СтрокаТаблицы.ЭтоГруппа      = Ложь;
	СтрокаТаблицы.ИндексКартинки = 4;
	СтрокаТаблицы.ПолеКД         = ЭлементКД.Поле;
	
	ПослеИзмененияФлажкаИспользование("ВыбранныеПоля", СтрокаТаблицы, ЭлементКД);
	
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоляПередУдалением(Элемент, Отказ)
	ТаблицыПолейПередУдалением(Элемент.Имя, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоляИспользованиеПриИзменении(Элемент)
	ТаблицыПолейИзменитьИспользование("ВыбранныеПоля");
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоля_ПереместитьВверх(Команда)
	Сценарий = Новый Структура;
	Сценарий.Вставить("Шаги", "ОпределитьВыделенныеСтроки, СдвинутьСтроки");
	Сценарий.Вставить("Действие", "Переместить");
	Сценарий.Вставить("ТаблицаИмя", "ВыбранныеПоля");
	Сценарий.Вставить("Направление", -1);
	
	ЗапуститьСценарий(Сценарий);
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоля_ПереместитьВниз(Команда)
	Сценарий = Новый Структура;
	Сценарий.Вставить("Шаги", "ОпределитьВыделенныеСтроки, СдвинутьСтроки");
	Сценарий.Вставить("Действие", "Переместить");
	Сценарий.Вставить("ТаблицаИмя", "ВыбранныеПоля");
	Сценарий.Вставить("Направление", 1);
	
	ЗапуститьСценарий(Сценарий);
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоля_Сгруппировать(Команда)
	Сценарий = Новый Структура;
	Сценарий.Вставить("Шаги", "ОпределитьВыделенныеСтроки, ОтредактироватьГруппуПолей, СгруппироватьСтроки, ОбновитьФорму");
	Сценарий.Вставить("Действие", "Сгруппировать");
	Сценарий.Вставить("ТаблицаИмя", "ВыбранныеПоля");
	Сценарий.Вставить("ТипГруппыКД", Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	
	ЗапуститьСценарий(Сценарий);
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоля_Разгруппировать(Команда)
	ТаблицыПолейРазгруппировать("ВыбранныеПоля");
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоля_УстановитьФлажки(Команда)
	УстановитьФлажкиИспользованиеВоВсемДереве("ВыбранныеПоля", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоля_СнятьФлажки(Команда)
	УстановитьФлажкиИспользованиеВоВсемДереве("ВыбранныеПоля", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоляНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, РазрешитьПеретаскивание)
	Если Не ЗарегистрироватьНачалоПеретаскивания("ВыбранныеПоля") Тогда
		РазрешитьПеретаскивание = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоляПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ИдентификаторЦели, Поле)
	СтандартнаяОбработка = Ложь;
	ПроверитьВозможностьПеретаскивания("ВыбранныеПоля", ИдентификаторЦели, ПараметрыПеретаскивания);
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоляПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ИдентификаторЦели, Поле)
	// Возникает в приемнике при окончании перетаскивания когда все проверки пройдены.
	СтандартнаяОбработка = Ложь;
	ИсточникПеретаскивания = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПеременныеКлиента, "ИсточникПеретаскивания");
	Если ИсточникПеретаскивания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ИсточникПеретаскивания.ТаблицаИмя = "ВыбранныеПоля" Тогда
		ПеретаскиваниеВПределахТаблицы(ИсточникПеретаскивания, ИдентификаторЦели);
	ИначеЕсли ИсточникПеретаскивания.ТаблицаИмя = "Сортировка" Тогда
		ПеретаскиваниеСортировокВВыбранныеПоля(ИсточникПеретаскивания, ИдентификаторЦели);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоляОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ТАБЛИЦА Отборы

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборы

&НаКлиенте
Процедура ОтборыВыбор(Элемент, СтрокаИдентификатор, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИмяКолонки = Поле.Имя;
	Если РасширенныйРежим <> 1 Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Элементы.Отборы.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаТаблицы.ЭтоРаздел Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяКолонки = "ОтборыПредставление" Тогда // Изменение порядка.
		
		Если СтрокаТаблицы.ЭтоПараметр Тогда
			Возврат;
		КонецЕсли;
		Если СтрокаТаблицы.ЭтоГруппа Тогда
			ТаблицыПолейИзменитьГруппу("Отборы", СтрокаИдентификатор, СтрокаТаблицы);
		Иначе
			ТаблицыПолейИзменить("Отборы", СтрокаИдентификатор, СтрокаТаблицы);
		КонецЕсли;
		
	ИначеЕсли ИмяКолонки = "ОтборыИндексКартинкиДоступа" Тогда // Изменение быстрого доступа к отбору.
		
		ТаблицыПолейИзменитьУровеньДоступа("Отборы", СтрокаИдентификатор, Истина, Не СтрокаТаблицы.ЭтоПараметр);
		
	ИначеЕсли ИмяКолонки = "ОтборыЗначение"
		Или ИмяКолонки = "ОтборыПредставлениеЗначения" Тогда
		
		Если СтрокаТаблицы.ЭтоГруппа Тогда
			Возврат;
		КонецЕсли;
		Если СтрокаТаблицы.Условие = ВидСравненияКомпоновкиДанных.Заполнено
			Или СтрокаТаблицы.Условие = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
			Возврат;
		КонецЕсли;
		
		ЭтоПериод = (СтрокаТаблицы.ТипУсловия = Новый ОписаниеТипов("ПеречислениеСсылка.ДоступныеПериодыОтчета"));
		Если ЭтоПериод Тогда
			ОтборыПоказатьВыборПериода(СтрокаТаблицы);
		Иначе
			Если СтрокаТаблицы.ВводСписком Тогда
				ОтборыПоказатьСписокСФлажками(СтрокаТаблицы);
			ИначеЕсли СтрокаТаблицы.ФиксированныйСписокВыбора Тогда
				ОтборыВыбратьЗначениеИзСписка(СтрокаТаблицы);
			Иначе
				ОтборыПоказатьВыборСсылки(СтрокаТаблицы, СтандартнаяОбработка);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяКолонки = "ОтборыУсловие" Тогда
		
		Если СтрокаТаблицы.ЭтоГруппа Тогда
			Возврат;
		КонецЕсли;
		ЭтоПериод = (СтрокаТаблицы.ТипУсловия = Новый ОписаниеТипов("ПеречислениеСсылка.ДоступныеПериодыОтчета"));
		Если ЭтоПериод Тогда
			ОтборыПоказатьВыборПериода(СтрокаТаблицы);
		Иначе
			ОтборыВыбратьВидСравнения(СтрокаТаблицы);
		КонецЕсли;
		
	ИначеЕсли ИмяКолонки = "ОтборыЗаголовок" Тогда
		
		СтандартнаяОбработка = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если РасширенныйРежим = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РежимИзмененияУзлаВарианта Тогда
		ТекущаяСтрока = Элементы.Отборы.ТекущиеДанные;
		Если (ТекущаяСтрока = Неопределено)
			Или (ТекущаяСтрока.ЭтоПараметр)
			Или (ТекущаяСтрока.ЭтоРаздел И ТекущаяСтрока.ИдентификаторКД = "ПараметрыДанных") Тогда
			ТекущаяСтрока = Отборы.ПолучитьЭлементы()[1];
			Элементы.Отборы.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОтборыПослеВыбораПоля", ЭтотОбъект);
	ТаблицыПолейПоказатьВыборПоля("Отборы", Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПослеВыбораПоля(ДоступноеПолеОтбораКД, ПараметрыВыполнения) Экспорт
	Если ДоступноеПолеОтбораКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ТаблицыПолейВставить("Отборы", Тип("ЭлементОтбораКомпоновкиДанных"), 0, Неопределено);
	
	ЭлементКД = Результат.ЭлементКД;
	ЭлементКД.Использование  = Истина;
	ЭлементКД.ЛевоеЗначение  = ДоступноеПолеОтбораКД.Поле;
	ЭлементКД.ПравоеЗначение = ДоступноеПолеОтбораКД.Тип.ПривестиЗначение();
	ЭлементКД.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	ЭлементКД.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор());
	
	УстановитьМодифицированность();
	Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередУдалением(Элемент, Отказ)
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаТаблицы.ЭтоРаздел
		Или СтрокаТаблицы.ЭтоПараметр Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ТаблицыПолейПередУдалением(Элемент.Имя, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура Отборы_Сгруппировать(Команда)
	Сценарий = Новый Структура;
	Сценарий.Вставить("Шаги", "ОпределитьВыделенныеСтроки, СгруппироватьСтроки, ОбновитьФорму");
	Сценарий.Вставить("Действие", "Сгруппировать");
	Сценарий.Вставить("ТаблицаИмя", "Отборы");
	Сценарий.Вставить("ТипГруппыКД", Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ЗапуститьСценарий(Сценарий);
КонецПроцедуры

&НаКлиенте
Процедура Отборы_Разгруппировать(Команда)
	ТаблицыПолейРазгруппировать("Отборы");
КонецПроцедуры

&НаКлиенте
Процедура Отборы_ПереместитьВверх(Команда)
	Сценарий = Новый Структура;
	Сценарий.Вставить("Шаги", "ОпределитьВыделенныеСтроки, СдвинутьСтроки");
	Сценарий.Вставить("Действие", "Переместить");
	Сценарий.Вставить("ТаблицаИмя", "Отборы");
	Сценарий.Вставить("Направление", -1);
	
	ЗапуститьСценарий(Сценарий);
КонецПроцедуры

&НаКлиенте
Процедура Отборы_ПереместитьВниз(Команда)
	Сценарий = Новый Структура;
	Сценарий.Вставить("Шаги", "ОпределитьВыделенныеСтроки, СдвинутьСтроки");
	Сценарий.Вставить("Действие", "Переместить");
	Сценарий.Вставить("ТаблицаИмя", "Отборы");
	Сценарий.Вставить("Направление", 1);
	
	ЗапуститьСценарий(Сценарий);
КонецПроцедуры

&НаКлиенте
Процедура Отборы_УстановитьФлажки(Команда)
	УстановитьФлажкиИспользованиеВоВсемДереве("Отборы", Истина);
КонецПроцедуры

&НаКлиенте
Процедура Отборы_СнятьФлажки(Команда)
	УстановитьФлажкиИспользованиеВоВсемДереве("Отборы", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтборыИспользованиеПриИзменении(Элемент)
	ТаблицыПолейИзменитьИспользование("Отборы");
КонецПроцедуры

&НаКлиенте
Процедура ОтборыЗначениеПриИзменении(Элемент)
	ТаблицыПолейИзменитьЗначение("Отборы");
КонецПроцедуры

&НаКлиенте
Процедура ОтборыЗаголовокПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Отборы.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, "Отборы", СтрокаТаблицы);
	ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКД);
	Если ЭлементКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаТаблицы.Заголовок) Тогда
		СтрокаТаблицы.Заголовок = СтрокаТаблицы.Представление;
	КонецЕсли;
	СтрокаТаблицы.ЗаголовокПереопределен = (СтрокаТаблицы.Заголовок <> СтрокаТаблицы.Представление);
	
	Если Не СтрокаТаблицы.ЭтоПараметр Тогда
		Если СтрокаТаблицы.ИндексКартинкиДоступа = 1 Или СтрокаТаблицы.ИндексКартинкиДоступа = 3 Тогда
			ЭлементКД.Представление = "1";
		Иначе
			ЭлементКД.Представление = "";
		КонецЕсли;
	КонецЕсли;
	Если СтрокаТаблицы.ЗаголовокПереопределен Тогда
		ЭлементКД.ПредставлениеПользовательскойНастройки = СтрокаТаблицы.Заголовок;
	Иначе
		ЭлементКД.ПредставлениеПользовательскойНастройки = "";
	КонецЕсли;
	
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПриАктивизацииСтроки(Элемент)
	СтрокаТаблицы = Элементы.Отборы.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МожноУдалятьИПеремещать = Истина;
	Если СтрокаТаблицы.ЭтоРаздел
		Или СтрокаТаблицы.ЭтоПараметр Тогда
		МожноУдалятьИПеремещать = Ложь;
	КонецЕсли;
	
	Элементы.Отборы_Удалить.Доступность  = МожноУдалятьИПеремещать;
	Элементы.Отборы_Удалить1.Доступность = МожноУдалятьИПеремещать;
	Элементы.Отборы_Сгруппировать.Доступность  = МожноУдалятьИПеремещать;
	Элементы.Отборы_Сгруппировать1.Доступность = МожноУдалятьИПеремещать;
	Элементы.Отборы_Разгруппировать.Доступность  = МожноУдалятьИПеремещать;
	Элементы.Отборы_Разгруппировать1.Доступность = МожноУдалятьИПеремещать;
	Элементы.Отборы_ПереместитьВверх.Доступность  = МожноУдалятьИПеремещать;
	Элементы.Отборы_ПереместитьВверх1.Доступность = МожноУдалятьИПеремещать;
	Элементы.Отборы_ПереместитьВниз.Доступность  = МожноУдалятьИПеремещать;
	Элементы.Отборы_ПереместитьВниз1.Доступность = МожноУдалятьИПеремещать;
	
	Если Не СтрокаТаблицы.ЭтоРаздел И Не СтрокаТаблицы.ЭтоГруппа Тогда
		Элементы.ОтборыЗначение.ВыборГруппИЭлементов = ОтчетыКлиентСервер.ПривестиЗначениеКТипуГруппыИЭлементы(
			СтрокаТаблицы.Условие,
			СтрокаТаблицы.ВыборГруппИЭлементов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ТАБЛИЦА СтруктураВарианта

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтруктураВарианта

&НаКлиенте
Процедура СтруктураВариантаПриАктивизацииСтроки(Элемент)
	СтрокаТаблицы = Элементы.СтруктураВарианта.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МожноДобавлятьВложенные = Истина;
	МожноГруппировать = Истина;
	МожноОткрывать = Истина;
	МожноУдалятьИПеремещать = Истина;
	МожноДобавлятьТаблицыИДиаграммы = Ложь;
	
	Родитель = СтрокаТаблицы.ПолучитьРодителя();
	РодителяМожноПеремещать = (Родитель <> Неопределено
		И Родитель.Тип <> "Настройки"
		И Родитель.Тип <> "КоллекцияЭлементовСтруктурыТаблицы"
		И Родитель.Тип <> "КоллекцияЭлементовСтруктурыДиаграммы");
	ЕстьСоседние = ПолучитьЭлементы(СтруктураВарианта, Родитель).Количество() > 1;
	
	ЕстьПодчиненные = (СтрокаТаблицы.ПолучитьЭлементы().Количество() > 0);
	Если СтрокаТаблицы.Тип = "Таблица"
		Или СтрокаТаблицы.Тип = "Диаграмма"
		Или СтрокаТаблицы.Тип = "НастройкиВложенногоОбъекта" Тогда
		МожноОткрывать = Ложь;
		МожноДобавлятьВложенные = Ложь;
	ИначеЕсли СтрокаТаблицы.Тип = "Настройки"
		Или СтрокаТаблицы.Тип = "КоллекцияЭлементовСтруктурыТаблицы"
		Или СтрокаТаблицы.Тип = "КоллекцияЭлементовСтруктурыДиаграммы" Тогда
		МожноОткрывать = Ложь;
		МожноУдалятьИПеремещать = Ложь;
		МожноГруппировать = Ложь;
	ИначеЕсли СтрокаТаблицы.Тип = "НастройкиВложенногоОбъекта" Тогда
		МожноОткрывать = Ложь;
		МожноГруппировать = Ложь;
	КонецЕсли;
	
	Если СтрокаТаблицы.Тип = "Настройки" Или СтрокаТаблицы.Тип = "Группировка" Тогда
		МожноДобавлятьТаблицыИДиаграммы = Истина;
	КонецЕсли;
	
	Элементы.СтруктураВарианта_Добавить.Доступность  = МожноДобавлятьВложенные;
	Элементы.СтруктураВарианта_Добавить1.Доступность = МожноДобавлятьВложенные;
	Элементы.СтруктураВарианта_Изменить.Доступность  = МожноОткрывать;
	Элементы.СтруктураВарианта_Изменить1.Доступность = МожноОткрывать;
	Элементы.СтруктураВарианта_ДобавитьТаблицу.Доступность  = МожноДобавлятьТаблицыИДиаграммы;
	Элементы.СтруктураВарианта_ДобавитьТаблицу1.Доступность = МожноДобавлятьТаблицыИДиаграммы;
	Элементы.СтруктураВарианта_ДобавитьДиаграмму.Доступность  = МожноДобавлятьТаблицыИДиаграммы;
	Элементы.СтруктураВарианта_ДобавитьДиаграмму1.Доступность = МожноДобавлятьТаблицыИДиаграммы;
	Элементы.СтруктураВарианта_Удалить.Доступность  = МожноУдалятьИПеремещать;
	Элементы.СтруктураВарианта_Удалить1.Доступность = МожноУдалятьИПеремещать;
	Элементы.СтруктураВарианта_Сгруппировать.Доступность  = МожноГруппировать;
	Элементы.СтруктураВарианта_Сгруппировать1.Доступность = МожноГруппировать;
	Элементы.СтруктураВарианта_ПереместитьВышеИЛевее.Доступность  = МожноУдалятьИПеремещать И РодителяМожноПеремещать И МожноДобавлятьВложенные И МожноГруппировать;
	Элементы.СтруктураВарианта_ПереместитьВышеИЛевее1.Доступность = МожноУдалятьИПеремещать И РодителяМожноПеремещать И МожноДобавлятьВложенные И МожноГруппировать;
	Элементы.СтруктураВарианта_ПереместитьНижеИПравее.Доступность  = МожноУдалятьИПеремещать И ЕстьПодчиненные И МожноДобавлятьВложенные И МожноГруппировать;
	Элементы.СтруктураВарианта_ПереместитьНижеИПравее1.Доступность = МожноУдалятьИПеремещать И ЕстьПодчиненные И МожноДобавлятьВложенные И МожноГруппировать;
	Элементы.СтруктураВарианта_ПереместитьВверх.Доступность  = МожноУдалятьИПеремещать И ЕстьСоседние;
	Элементы.СтруктураВарианта_ПереместитьВверх1.Доступность = МожноУдалятьИПеремещать И ЕстьСоседние;
	Элементы.СтруктураВарианта_ПереместитьВниз.Доступность  = МожноУдалятьИПеремещать И ЕстьСоседние;
	Элементы.СтруктураВарианта_ПереместитьВниз1.Доступность = МожноУдалятьИПеремещать И ЕстьСоседние;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВариантаВыбор(Элемент, СтрокаИдентификатор, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если РасширенныйРежим <> 1 Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Элементы.СтруктураВарианта.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаТаблицы.Тип = "КоллекцияЭлементовСтруктурыТаблицы"
		Или СтрокаТаблицы.Тип = "КоллекцияЭлементовСтруктурыДиаграммы"
		Или СтрокаТаблицы.Тип = "Настройки" Тогда
		Возврат;
	КонецЕсли;
	ИмяКолонки = Поле.Имя;
	Если ИмяКолонки = "СтруктураВариантаПредставление"
		Или ИмяКолонки = "СтруктураВариантаСодержитОтборы"
		Или ИмяКолонки = "СтруктураВариантаСодержитПоляИлиСортировки"
		Или ИмяКолонки = "СтруктураВариантаСодержитУсловноеОформление" Тогда
		Если СтрокаТаблицы.Тип = "Таблица"
			Или СтрокаТаблицы.Тип = "НастройкиВложенногоОбъекта" Тогда
			Возврат;
		КонецЕсли;
		
		Если ИмяКолонки = "СтруктураВариантаСодержитОтборы" Тогда
			ИмяСтраницы = "СтраницаОтборы";
		ИначеЕсли ИмяКолонки = "СтруктураВариантаСодержитПоляИлиСортировки" Тогда
			ИмяСтраницы = "СтраницаВыбранныеПоляИСортировки";
		ИначеЕсли ИмяКолонки = "СтруктураВариантаСодержитУсловноеОформление" Тогда
			ИмяСтраницы = "СтраницаОформление";
		Иначе
			ИмяСтраницы = Неопределено;
		КонецЕсли;
		
		СтруктураВариантаИзменитьУзел("СтруктураВарианта", СтрокаИдентификатор, СтрокаТаблицы, ИмяСтраницы);
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВариантаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если РасширенныйРежим = 0 Тогда
		Возврат;
	КонецЕсли;
	Если Не Элементы.СтруктураВарианта_Добавить.Доступность Тогда
		Возврат;
	КонецЕсли;
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВариантаДобавитьГруппировку(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВарианта_Сгруппировать(Команда)
	Если Не Элементы.СтруктураВарианта_Сгруппировать.Доступность Тогда
		Возврат;
	КонецЕсли;
	СтруктураВариантаДобавитьГруппировку(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВариантаДобавитьГруппировку(ВнутрьТекущей)
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ВнутрьТекущей", ВнутрьТекущей);
	ПараметрыВыполнения.Вставить("Оборачивать", Истина);
	
	ИдентификаторУзлаНастроек = Неопределено;
	СтрокаТаблицы = Элементы.СтруктураВарианта.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		Если Не ВнутрьТекущей Тогда
			СтрокаТаблицы = СтрокаТаблицы.ПолучитьРодителя();
		КонецЕсли;
		Если ВнутрьТекущей Тогда
			Если СтрокаТаблицы.Тип = "Настройки" И Не СтрокаТаблицы.ФлажокДоступен Тогда
				ПараметрыВыполнения.Оборачивать = Ложь;
			ИначеЕсли СтрокаТаблицы.ПолучитьЭлементы().Количество() > 1 Тогда
				ПараметрыВыполнения.Оборачивать = Ложь;
			КонецЕсли;
		КонецЕсли;
		Пока СтрокаТаблицы <> Неопределено Цикл
			Если СтрокаТаблицы.Тип = "Настройки"
				Или СтрокаТаблицы.Тип = "НастройкиВложенногоОбъекта"
				Или СтрокаТаблицы.Тип = "Группировка"
				Или СтрокаТаблицы.Тип = "ГруппировкаТаблицы"
				Или СтрокаТаблицы.Тип = "ГруппировкаДиаграммы" Тогда
				ИдентификаторУзлаНастроек = СтрокаТаблицы.ИдентификаторКД;
				Прервать;
			КонецЕсли;
			СтрокаТаблицы = СтрокаТаблицы.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("СтруктураВариантаДобавитьГруппировкуПослеВыбораПоля", ЭтотОбъект, ПараметрыВыполнения);
	ТаблицыПолейПоказатьВыборПоля("СтруктураВарианта", Обработчик, Неопределено, ИдентификаторУзлаНастроек);
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВариантаДобавитьГруппировкуПослеВыбораПоля(ДоступноеПолеКД, ПараметрыВыполнения) Экспорт
	Если ДоступноеПолеКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.СтруктураВарианта.ТекущиеДанные;
	
	СтрокиПеремещаемыеВНовуюГруппировку = Новый Массив;
	Если ПараметрыВыполнения.Оборачивать Тогда
		Если ПараметрыВыполнения.ВнутрьТекущей Тогда
			Найденные = ТекущаяСтрока.ПолучитьЭлементы();
			Для Каждого ПеремещаемаяСтрока Из Найденные Цикл
				СтрокиПеремещаемыеВНовуюГруппировку.Добавить(ПеремещаемаяСтрока);
			КонецЦикла;
		Иначе
			СтрокиПеремещаемыеВНовуюГруппировку.Добавить(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	// Добавление новой группировки.
	Результат = ТаблицыПолейВставить("СтруктураВарианта", Тип("ГруппировкаКомпоновкиДанных"), ТекущаяСтрока, ПараметрыВыполнения.ВнутрьТекущей);
	
	ЭлементКД = Результат.ЭлементКД;
	ЭлементКД.Использование = Истина;
	ЭлементКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ЭлементКД.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	Если ДоступноеПолеКД = "<>" Тогда
		// Детальные записи - добавлять поле не требуется.
		Представление = НСтр("ru = '<Детальные записи>'");
	Иначе
		ПолеГруппировкиКД = ЭлементКД.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировкиКД.Использование = Истина;
		ПолеГруппировкиКД.Поле = ДоступноеПолеКД.Поле;
		Представление = Строка(ДоступноеПолеКД.Заголовок);
	КонецЕсли;
	
	СтрокаТаблицы = Результат.СтрокаТаблицы;
	СтрокаТаблицы.Использование = ЭлементКД.Использование;
	СтрокаТаблицы.Представление = Представление;
	СтрокаТаблицы.ИндексКартинки = 1;
	СтрокаТаблицы.ФлажокДоступен = Истина;
	СтрокаТаблицы.Тип = ОтчетыКлиентСервер.ТипНастройкиСтрокой(ТипЗнч(ЭлементКД));
	
	Если Не ПараметрыВыполнения.ВнутрьТекущей Тогда
		СтрокаТаблицы.Заголовок = ТекущаяСтрока.Заголовок;
		СтруктураВариантаОбновитьЗаголовокЭлементаВКомпоновщике(СтрокаТаблицы);
		ТекущаяСтрока.Заголовок = "";
		СтруктураВариантаОбновитьЗаголовокЭлементаВКомпоновщике(ТекущаяСтрока);
	КонецЕсли;
	
	// Перемещение текущей группировки в новую.
	Для Каждого ПеремещаемаяСтрока Из СтрокиПеремещаемыеВНовуюГруппировку Цикл
		Результат = ТаблицыПолейПереместить("СтруктураВарианта", ПеремещаемаяСтрока, СтрокаТаблицы, Неопределено, Ложь);
	КонецЦикла;
	
	// Бантики.
	Элементы.СтруктураВарианта.Развернуть(СтрокаТаблицы.ПолучитьИдентификатор(), Истина);
	Элементы.СтруктураВарианта.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	Если РасширенныйРежим = 1 Тогда
		ВариантИзменен = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВарианта_ДобавитьТаблицу(Команда)
	Если Не Элементы.СтруктураВарианта_ДобавитьТаблицу.Доступность Тогда
		Возврат;
	КонецЕсли;
	ДобавитьТаблицуИлиДиаграмму(Тип("ТаблицаКомпоновкиДанных"));
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВарианта_ДобавитьДиаграмму(Команда)
	Если Не Элементы.СтруктураВарианта_ДобавитьДиаграмму.Доступность Тогда
		Возврат;
	КонецЕсли;
	ДобавитьТаблицуИлиДиаграмму(Тип("ДиаграммаКомпоновкиДанных"));
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВарианта_УстановитьФлажки(Команда)
	УстановитьФлажкиИспользованиеВоВсемДереве("СтруктураВарианта", Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВарианта_СнятьФлажки(Команда)
	УстановитьФлажкиИспользованиеВоВсемДереве("СтруктураВарианта", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТаблицуИлиДиаграмму(ТипЭлемента)
	ТекущаяСтрока = Элементы.СтруктураВарианта.ТекущиеДанные;
	
	Результат = ТаблицыПолейВставить("СтруктураВарианта", ТипЭлемента, ТекущаяСтрока, Истина);
	
	Если ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных") Тогда
		ЭлементКД = Результат.ЭлементКД;
		ЭлементКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		УстановитьПараметрВывода(ЭлементКД, "ТипДиаграммы.СоединениеЗначенийПоСериям", ТипСоединенияЗначенийПоСериямДиаграммы.СоединениеКраев);
		УстановитьПараметрВывода(ЭлементКД, "ТипДиаграммы.ЛинииСоединенияЗначенийПоСериям");
		УстановитьПараметрВывода(ЭлементКД, "ТипДиаграммы.ЦветСоединенияЗначенийПоСериям", WebЦвета.СеребристоСерый);
		УстановитьПараметрВывода(ЭлементКД, "ТипДиаграммы.РежимСглаживания", РежимСглаживанияДиаграммы.ГладкаяКривая);
		УстановитьПараметрВывода(ЭлементКД, "ТипДиаграммы.РежимПолупрозрачности", РежимПолупрозрачностиДиаграммы.Использовать);
	КонецЕсли;
	
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВариантаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	// Проверка общих условий.
	Если РасширенныйРежим = 0 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	// Проверка источника.
	СтрокаТаблицы = СтруктураВарианта.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	Если СтрокаТаблицы = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	Если СтрокаТаблицы.Тип = "КоллекцияЭлементовСтруктурыДиаграммы"
		Или СтрокаТаблицы.Тип = "КоллекцияЭлементовСтруктурыТаблицы"
		Или СтрокаТаблицы.Тип = "Настройки" Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВариантаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ИдентификаторЦели, Поле)
	// Проверка общих условий.
	Если ИдентификаторЦели = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	// Проверка источника.
	СтрокаТаблицы = СтруктураВарианта.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	Если СтрокаТаблицы = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	// Проверка приемника.
	НовыйРодитель = СтруктураВарианта.НайтиПоИдентификатору(ИдентификаторЦели);
	Если НовыйРодитель = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	Если НовыйРодитель.Тип = "Таблица"
		Или НовыйРодитель.Тип = "Диаграмма" Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	// Проверка совместимости источника с приемником.
	ДопустимоТолькоНаличиеГруппировок = Ложь;
	Если НовыйРодитель.Тип = "КоллекцияЭлементовСтруктурыТаблицы"
		Или НовыйРодитель.Тип = "КоллекцияЭлементовСтруктурыДиаграммы"
		Или НовыйРодитель.Тип = "ГруппировкаТаблицы"
		Или НовыйРодитель.Тип = "ГруппировкаДиаграммы" Тогда
		ДопустимоТолькоНаличиеГруппировок = Истина;
	КонецЕсли;
	
	Если ДопустимоТолькоНаличиеГруппировок
		И СтрокаТаблицы.Тип <> "Группировка"
		И СтрокаТаблицы.Тип <> "ГруппировкаТаблицы"
		И СтрокаТаблицы.Тип <> "ГруппировкаДиаграммы" Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	КоллекцииКоллекций = Новый Массив;
	КоллекцииКоллекций.Добавить(СтрокаТаблицы.ПолучитьЭлементы());
	Количество = 1;
	Пока Количество > 0 Цикл
		Коллекция = КоллекцииКоллекций[0];
		Количество = Количество - 1;
		КоллекцииКоллекций.Удалить(0);
		Для Каждого ВложеннаяСтрокаТаблицы Из Коллекция Цикл
			Если ВложеннаяСтрокаТаблицы = НовыйРодитель Тогда
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
				Возврат;
			КонецЕсли;
			Если ДопустимоТолькоНаличиеГруппировок
				И ВложеннаяСтрокаТаблицы.Тип <> "Группировка"
				И ВложеннаяСтрокаТаблицы.Тип <> "ГруппировкаТаблицы"
				И ВложеннаяСтрокаТаблицы.Тип <> "ГруппировкаДиаграммы" Тогда
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
				Возврат;
			КонецЕсли;
			КоллекцииКоллекций.Добавить(ВложеннаяСтрокаТаблицы.ПолучитьЭлементы());
			Количество = Количество + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВариантаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ИдентификаторЦели, Поле)
	// Все проверки пройдены.
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = СтруктураВарианта.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	НовыйРодитель = СтруктураВарианта.НайтиПоИдентификатору(ИдентификаторЦели);
	
	Результат = ТаблицыПолейПереместить("СтруктураВарианта", СтрокаТаблицы, НовыйРодитель, Неопределено, Ложь);
	
	Элементы.СтруктураВарианта.Развернуть(НовыйРодитель.ПолучитьИдентификатор(), Истина);
	Элементы.СтруктураВарианта.ТекущаяСтрока = Результат.СтрокаДерева.ПолучитьИдентификатор();
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	Если РасширенныйРежим = 1 Тогда
		ВариантИзменен = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВариантаИспользованиеПриИзменении(Элемент)
	ТаблицыПолейИзменитьИспользование("СтруктураВарианта");
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВариантаЗаголовокПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.СтруктураВарианта.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВариантаОбновитьЗаголовокЭлементаВКомпоновщике(СтрокаТаблицы);
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	Если РасширенныйРежим = 1 Тогда
		ВариантИзменен = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВарианта_ПереместитьВверх(Команда)
	Сценарий = Новый Структура;
	Сценарий.Вставить("Шаги", "ОпределитьВыделенныеСтроки, СдвинутьСтроки");
	Сценарий.Вставить("Действие", "Переместить");
	Сценарий.Вставить("ТаблицаИмя", "СтруктураВарианта");
	Сценарий.Вставить("Направление", -1);
	
	ЗапуститьСценарий(Сценарий);
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВарианта_ПереместитьВниз(Команда)
	Сценарий = Новый Структура;
	Сценарий.Вставить("Шаги", "ОпределитьВыделенныеСтроки, СдвинутьСтроки");
	Сценарий.Вставить("Действие", "Переместить");
	Сценарий.Вставить("ТаблицаИмя", "СтруктураВарианта");
	Сценарий.Вставить("Направление", 1);
	
	ЗапуститьСценарий(Сценарий);
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВарианта_Изменить(Команда)
	ТаблицаЭлемент = Элементы.СтруктураВарианта;
	Поле = ТаблицаЭлемент.ТекущийЭлемент;
	СтандартнаяОбработка = Истина;
	СтрокаИдентификатор = ТаблицаЭлемент.ТекущаяСтрока;
	СтруктураВариантаВыбор(ТаблицаЭлемент, СтрокаИдентификатор, Поле, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВариантаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	Если РасширенныйРежим = 0 Или Не Элементы.СтруктураВарианта_Удалить.Доступность Тогда
		Возврат;
	КонецЕсли;
	
	Сценарий = Новый Структура;
	Сценарий.Вставить("Шаги", "ОпределитьВыделенныеСтроки, УдалитьСтроки, ОбновитьФорму");
	Сценарий.Вставить("Действие", "Удалить");
	Сценарий.Вставить("ТаблицаИмя", "СтруктураВарианта");
	
	ЗапуститьСценарий(Сценарий);
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВарианта_ПереместитьВышеИЛевее(Команда)
	Если Не Элементы.СтруктураВарианта_ПереместитьВышеИЛевее.Доступность Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицыВверх = Элементы.СтруктураВарианта.ТекущиеДанные;
	Если СтрокаТаблицыВверх = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицыВниз = СтрокаТаблицыВверх.ПолучитьРодителя();
	Если СтрокаТаблицыВниз = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Режим",              "ВверхИВлево");
	ПараметрыВыполнения.Вставить("СтрокаТаблицыВверх", СтрокаТаблицыВверх);
	ПараметрыВыполнения.Вставить("СтрокаТаблицыВниз",  СтрокаТаблицыВниз);
	СтруктураВарианта_Переместить(-1, ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВарианта_ПереместитьНижеИПравее(Команда)
	Если Не Элементы.СтруктураВарианта_ПереместитьНижеИПравее.Доступность Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицыВниз = Элементы.СтруктураВарианта.ТекущиеДанные;
	Если СтрокаТаблицыВниз = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Режим",              "ВнизИВправо");
	ПараметрыВыполнения.Вставить("СтрокаТаблицыВверх", Неопределено);
	ПараметрыВыполнения.Вставить("СтрокаТаблицыВниз",  СтрокаТаблицыВниз);
	
	ПодчиненныеСтроки = СтрокаТаблицыВниз.ПолучитьЭлементы();
	Количество = ПодчиненныеСтроки.Количество();
	Если Количество = 0 Тогда
		Возврат;
	ИначеЕсли Количество = 1 Тогда
		ПараметрыВыполнения.СтрокаТаблицыВверх = ПодчиненныеСтроки[0];
		СтруктураВарианта_Переместить(-1, ПараметрыВыполнения);
	Иначе
		Список = Новый СписокЗначений;
		Для НомерСтроки = 1 По Количество Цикл
			ПодчиненнаяСтрока = ПодчиненныеСтроки[НомерСтроки-1];
			Список.Добавить(ПодчиненнаяСтрока.ПолучитьИдентификатор(), ПодчиненнаяСтрока.Представление);
		КонецЦикла;
		Обработчик = Новый ОписаниеОповещения("СтруктураВарианта_Переместить", ЭтотОбъект, ПараметрыВыполнения);
		ПоказатьВыборИзСписка(Обработчик, Список);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВарианта_Переместить(Результат, ПараметрыВыполнения) Экспорт
	Если Результат <> -1 Тогда
		Если ТипЗнч(Результат) <> Тип("ЭлементСпискаЗначений") Тогда
			Возврат;
		КонецЕсли;
		СтрокаТаблицыВверх = СтруктураВарианта.НайтиПоИдентификатору(Результат.Значение);
	Иначе
		СтрокаТаблицыВверх = ПараметрыВыполнения.СтрокаТаблицыВверх;
	КонецЕсли;
	СтрокаТаблицыВниз = ПараметрыВыполнения.СтрокаТаблицыВниз;
	
	// 0. Запомнить перед каким элементом вставлять верхнюю строку.
	СтрокиВниз = СтрокаТаблицыВниз.ПолучитьЭлементы();
	Индекс = СтрокиВниз.Индекс(СтрокаТаблицыВверх);
	МассивИдентификаторовСтрокВниз = Новый Массив;
	Для Каждого СтрокаТаблицы Из СтрокиВниз Цикл
		Если СтрокаТаблицы = СтрокаТаблицыВверх Тогда
			Продолжить;
		КонецЕсли;
		МассивИдентификаторовСтрокВниз.Добавить(СтрокаТаблицы.ПолучитьИдентификатор());
	КонецЦикла;
	
	// 1. Переместить нижнюю строку на уровень с верхней.
	Результат1 = ТаблицыПолейПереместить("СтруктураВарианта", СтрокаТаблицыВверх, СтрокаТаблицыВниз.ПолучитьРодителя(), СтрокаТаблицыВниз, Ложь);
	СтрокаТаблицыВверх = Результат1.СтрокаДерева;
	
	// 2. Запомнить какие строки нужно переместить.
	СтрокиВверх = СтрокаТаблицыВверх.ПолучитьЭлементы();
	
	// 3. Обмен строками.
	Для Каждого СтрокаТаблицы Из СтрокиВверх Цикл
		Результат2 = ТаблицыПолейПереместить("СтруктураВарианта", СтрокаТаблицы, СтрокаТаблицыВниз, Неопределено, Ложь);
	КонецЦикла;
	Для Каждого СтрокаТаблицыИдентификатор Из МассивИдентификаторовСтрокВниз Цикл
		СтрокаТаблицы = СтруктураВарианта.НайтиПоИдентификатору(СтрокаТаблицыИдентификатор);
		Результат3 = ТаблицыПолейПереместить("СтруктураВарианта", СтрокаТаблицы, СтрокаТаблицыВверх, Неопределено, Ложь);
	КонецЦикла;
	
	// 4. Переместить верхнюю строку в нижнюю.
	СтрокиВверх = СтрокаТаблицыВверх.ПолучитьЭлементы();
	Если СтрокиВверх.Количество() - 1 < Индекс Тогда
		ПередЧемВставить = Неопределено;
	Иначе
		ПередЧемВставить = СтрокиВверх[Индекс];
	КонецЕсли;
	Результат4 = ТаблицыПолейПереместить("СтруктураВарианта", СтрокаТаблицыВниз, СтрокаТаблицыВверх, ПередЧемВставить, Ложь);
	СтрокаТаблицыВниз = Результат4.СтрокаДерева;
	
	// Бантики.
	Если ПараметрыВыполнения.Режим = "ВнизИВправо" Тогда
		ТекущаяСтрока = СтрокаТаблицыВниз;
	Иначе
		ТекущаяСтрока = СтрокаТаблицыВверх;
	КонецЕсли;
	ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
	Элементы.СтруктураВарианта.Развернуть(ТекущаяСтрокаИдентификатор, Истина);
	Элементы.СтруктураВарианта.ТекущаяСтрока = ТекущаяСтрокаИдентификатор;
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	Если РасширенныйРежим = 1 Тогда
		ВариантИзменен = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ТАБЛИЦА СоставГруппировки

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставГруппировки

&НаКлиенте
Процедура СоставГруппировкиИспользованиеПриИзменении(Элемент)
	ТаблицыПолейИзменитьИспользование("СоставГруппировки");
КонецПроцедуры

&НаКлиенте
Процедура СоставГруппировкиВыбор(Элемент, СтрокаИдентификатор, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаТаблицы = Элементы.СоставГруппировки.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяКолонки = Поле.Имя;
	Если ИмяКолонки = "СоставГруппировкиПредставление" Тогда
		Если СтрокаТаблицы.ТипНастройки = "ПолеГруппировки" Тогда
			ТаблицыПолейИзменить("СоставГруппировки", СтрокаИдентификатор, СтрокаТаблицы);
		КонецЕсли;
	ИначеЕсли ИмяКолонки = "СоставГруппировкиТипГруппировки"
		Или ИмяКолонки = "СоставГруппировкиТипДополнения" Тогда
		СтандартнаяОбработка = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставГруппировкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Обработчик = Новый ОписаниеОповещения("СоставГруппировкиПослеВыбораПоля", ЭтотОбъект);
	ТаблицыПолейПоказатьВыборПоля("СоставГруппировки", Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура СоставГруппировкиПослеВыбораПоля(ДоступноеПолеКД, ПараметрыВыполнения) Экспорт
	Если ДоступноеПолеКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ТаблицыПолейВставить("СоставГруппировки", Тип("ПолеГруппировкиКомпоновкиДанных"), 0, Ложь);
	
	ЭлементКД = Результат.ЭлементКД;
	ЭлементКД.Использование = Истина;
	ЭлементКД.Поле          = ДоступноеПолеКД.Поле;
	
	СтрокаТаблицы = Результат.СтрокаТаблицы;
	СтрокаТаблицы.Использование  = ЭлементКД.Использование;
	СтрокаТаблицы.Представление  = ДоступноеПолеКД.Заголовок;
	СтрокаТаблицы.ТипГруппировки = ЭлементКД.ТипГруппировки;
	СтрокаТаблицы.ТипДополнения  = ЭлементКД.ТипДополнения;
	СтрокаТаблицы.ПолеКД         = ЭлементКД.Поле;
	
	Если ДоступноеПолеКД.Ресурс Тогда
		СтрокаТаблицы.ИндексКартинки = 20;
	ИначеЕсли ДоступноеПолеКД.Таблица Тогда
		СтрокаТаблицы.ИндексКартинки = 21;
	ИначеЕсли ДоступноеПолеКД.Папка Тогда
		СтрокаТаблицы.ИндексКартинки = 1;
	Иначе
		СтрокаТаблицы.ИндексКартинки = 4;
	КонецЕсли;
	
	ИнформацияОТипах = ОтчетыКлиентСервер.АнализТипов(ДоступноеПолеКД.ТипЗначения, Ложь);
	Если ИнформацияОТипах.СодержитТипПериод Или ИнформацияОТипах.СодержитТипДата Тогда
		СтрокаТаблицы.ПоказыватьТипДополнения = Истина;
	КонецЕсли;
	
	ПослеИзмененияФлажкаИспользование("СоставГруппировки", СтрокаТаблицы, ЭлементКД);
	
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура СоставГруппировкиТипГруппировкиПриИзменении(Элемент)
	ТаблицыПолейИзменитьТипГруппировки("СоставГруппировки");
КонецПроцедуры

&НаКлиенте
Процедура СоставГруппировкиТипДополненияПриИзменении(Элемент)
	ТаблицыПолейИзменитьТипГруппировки("СоставГруппировки");
КонецПроцедуры

&НаКлиенте
Процедура СоставГруппировкиПередУдалением(Элемент, Отказ)
	ТаблицыПолейПередУдалением(Элемент.Имя, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура СоставГруппировки_ПереместитьВверх(Команда)
	Сценарий = Новый Структура;
	Сценарий.Вставить("Шаги", "ОпределитьВыделенныеСтроки, СдвинутьСтроки");
	Сценарий.Вставить("Действие", "Переместить");
	Сценарий.Вставить("ТаблицаИмя", "СоставГруппировки");
	Сценарий.Вставить("Направление", -1);
	
	ЗапуститьСценарий(Сценарий);
КонецПроцедуры

&НаКлиенте
Процедура СоставГруппировки_ПереместитьВниз(Команда)
	Сценарий = Новый Структура;
	Сценарий.Вставить("Шаги", "ОпределитьВыделенныеСтроки, СдвинутьСтроки");
	Сценарий.Вставить("Действие", "Переместить");
	Сценарий.Вставить("ТаблицаИмя", "СоставГруппировки");
	Сценарий.Вставить("Направление", 1);
	
	ЗапуститьСценарий(Сценарий);
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ТАБЛИЦА Оформление

#Область ОбработчикиСобытийЭлементовТаблицыФормыОформление

&НаКлиенте
Процедура ОформлениеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если РасширенныйРежим = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОформлениеИзменитьЭлемент("Оформление", Неопределено, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеВыбор(Элемент, СтрокаИдентификатор, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если РасширенныйРежим <> 1 Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Элементы.Оформление.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = Поле.Имя;
	Если ИмяКолонки = "ОформлениеЗаголовок" Тогда // Изменение порядка.
		
		ОформлениеИзменитьЭлемент("Оформление", СтрокаИдентификатор, СтрокаТаблицы);
		
	ИначеЕсли ИмяКолонки = "ОформлениеИндексКартинкиДоступа" Тогда // Изменение быстрого доступа к отбору.
		
		ТаблицыПолейИзменитьУровеньДоступа("Оформление", СтрокаИдентификатор, Истина, Ложь);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеПередУдалением(Элемент, Отказ)
	ТаблицыПолейПередУдалением(Элемент.Имя, Отказ);
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьИСформировать(Команда)
	ЗаписатьИЗакрыть(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБезФормирования(Команда)
	ЗаписатьИЗакрыть(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчанию(Команда)
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия", "НастройкиПоУмолчанию");
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	ПараметрыЗаполнения.Вставить("СброситьПользовательскиеНастройки", Истина);
	БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУсловияОтборов(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиОтчета", НастройкиОтчета);
	ПараметрыФормы.Вставить("КомпоновщикНастроек", Отчет.КомпоновщикНастроек);
	Обработчик = Новый ОписаниеОповещения("ИзменитьУсловияОтборовЗавершение", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.УсловияОтборовОтчета", ПараметрыФормы, ЭтотОбъект, Истина, , , Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУсловияОтборовЗавершение(ВыборПользователя, Контекст) Экспорт
	Если ВыборПользователя = Неопределено
		Или ВыборПользователя = КодВозвратаДиалога.Отмена
		Или ВыборПользователя.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия", "ИзменитьУсловияОтборов");
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	ПараметрыЗаполнения.Вставить("УсловияОтборов", ВыборПользователя);
	БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые команды

&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	// Механизмы расширения
	Результат = Ложь;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаОтчетовКлиент");
		МодульРассылкаОтчетовКлиент.ФормаОтчетаОбработчикКоманды(ЭтотОбъект, Команда, Результат);
	КонецЕсли;
	ОтчетыКлиентПереопределяемый.ОбработчикКоманды(ЭтотОбъект, Команда, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменитьВидСравнения(Команда)
	ИдентификаторЭлемента = Прав(Команда.Имя, 32);
	Контекст = Новый Структура;
	Контекст.Вставить("ИдентификаторЭлемента", ИдентификаторЭлемента);
	Обработчик = Новый ОписаниеОповещения("ПослеВыбораВидаСравнения", ЭтотОбъект, Контекст);
	ОтчетыКлиент.ИзменитьВидСравнения(ЭтотОбъект, ИдентификаторЭлемента, Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВидаСравнения(ВидСравнения, Контекст) Экспорт
	Если ВидСравнения <> Неопределено Тогда
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ИмяСобытия", "ИзменитьВидСравнения");
		ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
		БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Переформировать)
	ОповеститьОВыборе(РезультатВыбора(Переформировать));
КонецПроцедуры

&НаКлиенте
Функция РезультатВыбора(Переформировать)
	РезультатВыбораСформирован = Истина;
	
	Если РежимИзмененияУзлаВарианта И Не Переформировать Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатВыбора = Новый Структура;
	РезультатВыбора.Вставить("ИмяСобытия", "ФормаНастроек");
	РезультатВыбора.Вставить("Переформировать", Переформировать);
	РезультатВыбора.Вставить("ВариантМодифицирован", Ложь);
	РезультатВыбора.Вставить("ПользовательскиеНастройкиМодифицированы", Ложь);
	РезультатВыбора.Вставить("ФормаНастроекРасширенныйРежим", РасширенныйРежим);
	РезультатВыбора.Вставить("ФормаНастроекИмяСтраницы", Элементы.СтраницыНастроек.ТекущаяСтраница.Имя);
	
	Если ВариантИзменен Тогда
		РезультатВыбора.ВариантМодифицирован = Истина;
		РезультатВыбора.Вставить("НастройкиКД", Отчет.КомпоновщикНастроек.Настройки);
	КонецЕсли;
	
	Если ВариантИзменен Или ПользовательскиеНастройкиМодифицированы Тогда
		РезультатВыбора.ПользовательскиеНастройкиМодифицированы = Истина;
		РезультатВыбора.Вставить("ПользовательскиеНастройкиКД", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	КонецЕсли;
	
	Если ВариантИзменен И РасширенныйРежим = 1 Тогда
		РезультатВыбора.Вставить("СброситьПользовательскиеНастройки", Истина);
	КонецЕсли;
	
	Возврат РезультатВыбора;
КонецФункции

&НаКлиенте
Функция НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента) Экспорт
	// Для пользовательских настроек хранятся идентификаторы компоновки данных,
	//  поскольку они не могут храниться по ссылке (происходит копирование значения).
	Если ИдентификаторЭлемента = "Сортировка" Тогда
		Если РежимИзмененияУзлаВарианта Тогда
			КорневойУзел = Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(ИдентификаторТекущегоУзлаКД);
			Возврат КорневойУзел.Порядок;
		ИначеЕсли РасширенныйРежим = 1 Тогда
			Возврат Отчет.КомпоновщикНастроек.Настройки.Порядок;
		Иначе
			ИдентификаторЭлемента = ИдентификаторЭлемента;
		КонецЕсли;
	ИначеЕсли ИдентификаторЭлемента = "ВыбранныеПоля" Тогда
		Если РежимИзмененияУзлаВарианта Тогда
			КорневойУзел = Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(ИдентификаторТекущегоУзлаКД);
			Возврат КорневойУзел.Выбор;
		ИначеЕсли РасширенныйРежим = 1 Тогда
			Возврат Отчет.КомпоновщикНастроек.Настройки.Выбор;
		Иначе
			ИдентификаторЭлемента = ИдентификаторЭлемента;
		КонецЕсли;
	ИначеЕсли ИдентификаторЭлемента = "Отборы" Тогда
		Если РежимИзмененияУзлаВарианта Тогда
			КорневойУзел = Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(ИдентификаторТекущегоУзлаКД);
			Возврат КорневойУзел.Отбор;
		ИначеЕсли РасширенныйРежим = 1 Тогда
			Возврат Отчет.КомпоновщикНастроек.Настройки.Отбор;
		Иначе
			ИдентификаторЭлемента = ИдентификаторЭлемента;
		КонецЕсли;
	ИначеЕсли ИдентификаторЭлемента = "СтруктураВарианта" Тогда
		Если РасширенныйРежим = 1 Тогда
			Возврат Отчет.КомпоновщикНастроек.Настройки;
		Иначе
			Возврат Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		КонецЕсли;
	КонецЕсли;
	ИдентификаторКД = БыстрыйПоискПользовательскихНастроек.Получить(ИдентификаторЭлемента);
	Возврат Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторКД);
КонецФункции

&НаКлиенте
Функция НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента) Экспорт
	// Для пользовательских настроек хранятся идентификаторы компоновки данных,
	//  поскольку они не могут храниться по ссылке (происходит копирование значения).
	ВсеДополнительныеНастройки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства, "ЭлементыФормы");
	Если ВсеДополнительныеНастройки = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ВсеДополнительныеНастройки[ИдентификаторЭлемента];
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения)
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = Новый Структура("ИмяСобытия", "ПослеИзмененияКоллекции");
	КонецЕсли;
	РезультатКлиента = БыстрыеНастройкиЗаполнить(ПараметрыЗаполнения);
	ПоказатьРезультатЗаполненияНастроек(РезультатКлиента);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатЗаполненияНастроек(РезультатКлиента)
	Если РезультатКлиента = Неопределено Тогда
		РезультатКлиента = РезультатЗаполненияНастроек;
		РезультатЗаполненияНастроек = Неопределено;
	КонецЕсли;
	Если ТипЗнч(РезультатКлиента) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Для платформы (переопределение доступных значений на клиенте).
	СвоиСпискиВыбора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатКлиента, "СвоиСпискиВыбора");
	Если ТипЗнч(СвоиСпискиВыбора) = Тип("Массив") Тогда
		Для Каждого ИдентификаторЭлемента Из СвоиСпискиВыбора Цикл
			НастройкаВарианта = НайтиНастройкуВарианта(ЭтотОбъект, ИдентификаторЭлемента);
			Если НастройкаВарианта = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДополнительныеНастройки = НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента);
			Если ДополнительныеНастройки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Тип = ТипЗнч(НастройкаВарианта.ЭлементКД);
			Если Тип = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ДоступныеПараметры = НастройкаВарианта.УзелКД.ДоступныеПараметры;
				ДоступнаяНастройкаКД = ДоступныеПараметры.НайтиПараметр(НастройкаВарианта.ЭлементКД.Параметр);
				Если ДоступнаяНастройкаКД.ДоступныеЗначения = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ДоступнаяНастройкаКД.ДоступныеЗначения.Очистить();
				Для Каждого Элемент Из ДополнительныеНастройки.ЗначенияДляВыбора Цикл
					ЗаполнитьЗначенияСвойств(ДоступнаяНастройкаКД.ДоступныеЗначения.Добавить(), Элемент);
				КонецЦикла;
			ИначеЕсли Тип = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				ДоступныеПоляОтбора = НастройкаВарианта.УзелКД.ДоступныеПоляОтбора;
				ДоступнаяНастройкаКД = ДоступныеПоляОтбора.НайтиПоле(НастройкаВарианта.ЭлементКД.ЛевоеЗначение);
				ДоступнаяНастройкаКД.ДоступныеЗначения = ДополнительныеНастройки.ЗначенияДляВыбора;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(ЭтотОбъект, РезультатКлиента);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрВывода(ЭлементКД, Имя, Значение = Неопределено, Использование = Истина)
	ПараметрКД = ЭлементКД.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Имя));
	Если ПараметрКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Значение <> Неопределено Тогда
		ПараметрКД.Значение = Значение;
	КонецЕсли;
	Если Использование <> Неопределено Тогда
		ПараметрКД.Использование = Использование;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Клиент - Движок сценарного выполнения.

&НаКлиенте
Процедура ЗапуститьСценарий(Сценарий)
	// Плюсы сценарного выполнения:
	//   Изоляция обработчиков.
	//     Текущий шаг может ничего не знать о следующем или предыдущем шаге.
	//   Единый обработчик оповещения.
	//     Минимальный клиентский программный интерфейс формы.
	//     Избавляет от необходимости "разворачивать" стек в обратную сторону
	//     после закрытия диалога с пользователем.
	//   Удобная группировка кода.
	//     Код, вызывающий диалог и обрабатывающий ответ располагаются в одной функции.
	//   Простая последовательность шагов.
	//   Удобное отключение шагов.
	
	Если ТипЗнч(Сценарий.Шаги) = Тип("Строка") Тогда
		Сценарий.Шаги = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Сценарий.Шаги, ",", Истина, Истина);
	КонецЕсли;
	Сценарий.Вставить("ШагиВГраница", Сценарий.Шаги.ВГраница());
	Сценарий.Вставить("СледующийШагИндекс", 0);
	Сценарий.Вставить("ТекущийШаг", Неопределено);
	Сценарий.Вставить("ТекущийШагУточнение", "");
	Сценарий.Вставить("Обработчик", Новый ОписаниеОповещения("ВыполнитьСценарий", ЭтотОбъект, Сценарий));
	Сценарий.Вставить("ПричинаОтказа", "");
	
	НайтиСледующийШаг(Сценарий);
	
	ВыполнитьСценарий(Неопределено, Сценарий);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСценарий(ВыборПользователя, Сценарий) Экспорт
	Пока ВыполнитьШаг(ВыборПользователя, Сценарий) Цикл
		Если Не НайтиСледующийШаг(Сценарий) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Сценарий.ПричинаОтказа) Тогда
		ПоказатьПредупреждение(, Сценарий.ПричинаОтказа);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция НайтиСледующийШаг(Сценарий)
	Если Сценарий.СледующийШагИндекс > Сценарий.ШагиВГраница Тогда
		Возврат Ложь;
	КонецЕсли;
	Сценарий.ТекущийШаг = Сценарий.Шаги.Получить(Сценарий.СледующийШагИндекс);
	Сценарий.ТекущийШагУточнение = "";
	Сценарий.СледующийШагИндекс = Сценарий.СледующийШагИндекс + 1;
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ВыполнитьШаг(ВыборПользователя, Сценарий)
	
	Если Сценарий.ТекущийШаг = "ОпределитьВыделенныеСтроки" Тогда
		Возврат ШагОпределитьВыделенныеСтроки(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "ОтредактироватьГруппуПолей" Тогда
		Возврат ШагОтредактироватьГруппуПолей(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "СгруппироватьСтроки" Тогда
		Возврат ШагСгруппироватьСтроки(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "СдвинутьСтроки" Тогда
		Возврат ШагСдвинутьСтроки(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "УдалитьСтроки" Тогда
		Возврат ШагУдалитьСтроки(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "ОбновитьФорму" Тогда
		Возврат ШагОбновитьФорму(ВыборПользователя, Сценарий);
	
	Иначе
		Сценарий.ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка в сценарии: Неизвестный шаг ""%1"".'"), Сценарий.ТекущийШаг);
		Возврат Ложь;
	
	КонецЕсли;
	
	// Альтернативы этим веткам условий:
	//  "Вычислить()" - неприемлемо использовать только для минимизации кода;
	//  "ВыполнитьОбработкуОповещения()" - не выгодно, т.к. поддерживаются только процедуры,
	//      а следовательно следующий шаг придется запускать из предыдущего шага;
	//      Т.е. исчезает такой большой плюс как изоляция обработчиков от асинхронной логики.
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент - Шаги сценарного выполнения.

&НаКлиенте
Функция ШагОбновитьФорму(ВыборПользователя, Сценарий)
	Сценарий.Вставить("ИмяСобытия", Сценарий.ТаблицаИмя + "." + Сценарий.Действие);
	
	// Временное хранилище несериализуемых параметров.
	Хранилище = Новый Структура("Обработчик, СтрокиДерева, ТекущаяСтрока, ТекущийРодитель");
	ЗаполнитьЗначенияСвойств(Хранилище, Сценарий);
	Для Каждого КлючИЗначение Из Хранилище Цикл
		Сценарий.Удалить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	// Вызов сервера.
	БыстрыеНастройкиЗаполнитьКлиент(Сценарий);
	
	// Возвращение параметров.
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Сценарий, Хранилище, Истина);
	
	Возврат Истина; // Продолжить сценарий.
КонецФункции

&НаКлиенте
Функция ШагОпределитьВыделенныеСтроки(ВыборПользователя, Сценарий)
	// 1. Дополняет структуру сценария информацией:
	Сценарий.Вставить("СтрокиДерева", Новый Массив); // Выделенные строки (не идентификаторы).
	Сценарий.Вставить("ТекущаяСтрока", Неопределено); // Активная строка (не идентификатор).
	// 2. Осуществляет проверку выделенных строк согласно сценарию.
	// 3. Останавливает сценарий если ничего не выделено.
	ТаблицаЭлемент = Элементы[Сценарий.ТаблицаИмя];
	ТаблицаРеквизит = ЭтотОбъект[Сценарий.ТаблицаИмя];
	ТекущаяСтрокаИдентификатор = ТаблицаЭлемент.ТекущаяСтрока;
	
	Особенности = Новый Структура("МогутБытьРазделы, МогутБытьПараметры,
		|ТребоватьОдногоРодителя");
	Особенности.МогутБытьРазделы = (Сценарий.ТаблицаИмя = "Отборы" Или Сценарий.ТаблицаИмя = "ВыбранныеПоля" Или Сценарий.ТаблицаИмя = "Сортировка");
	Особенности.МогутБытьПараметры = (Сценарий.ТаблицаИмя = "Отборы");
	Особенности.ТребоватьОдногоРодителя = (Сценарий.Действие = "Переместить" Или Сценарий.Действие = "Сгруппировать");
	Если Особенности.ТребоватьОдногоРодителя Тогда
		Сценарий.Вставить("ТекущийРодитель", -1);
	КонецЕсли;
	
	ВыделенныеСтроки = МассивСортировать(ТаблицаЭлемент.ВыделенныеСтроки, НаправлениеСортировки.Возр);
	Для Каждого СтрокаИдентификатор Из ВыделенныеСтроки Цикл
		СтрокаДерева = ТаблицаРеквизит.НайтиПоИдентификатору(СтрокаИдентификатор);
		Если Не ЗарегистрироватьВыделеннуюСтроку(Сценарий, СтрокаДерева, Особенности) Тогда
			Возврат Ложь; // Завершить сценарий.
		КонецЕсли;
		Если СтрокаИдентификатор = ТекущаяСтрокаИдентификатор Тогда
			Сценарий.ТекущаяСтрока = СтрокаДерева;
		КонецЕсли;
	КонецЦикла;
	Если Сценарий.СтрокиДерева.Количество() = 0 Тогда
		Сценарий.ПричинаОтказа = НСтр("ru = 'Выберите элементы.'");
		Возврат Ложь; // Завершить сценарий.
	КонецЕсли;
	Если Сценарий.ТекущаяСтрока = Неопределено Тогда
		Если Сценарий.Действие = "ИзменитьГруппу" Тогда
			Сценарий.ПричинаОтказа = НСтр("ru = 'Выберите группу.'");
			Возврат Ложь; // Завершить сценарий.
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина; // Продолжить сценарий.
КонецФункции

&НаКлиенте
Функция ЗарегистрироватьВыделеннуюСтроку(Сценарий, СтрокаДерева, Особенности)
	Если Сценарий.СтрокиДерева.Найти(СтрокаДерева) <> Неопределено Тогда
		Возврат Истина; // Пропустить строку.
	КонецЕсли;
	Если Особенности.МогутБытьРазделы И СтрокаДерева.ЭтоРаздел Тогда
		Возврат Истина; // Пропустить строку.
	КонецЕсли;
	Если Особенности.МогутБытьПараметры И СтрокаДерева.ЭтоПараметр Тогда
		Если Сценарий.Действие = "Переместить" Тогда
			Сценарий.ПричинаОтказа = НСтр("ru = 'Параметры не могут быть перемещены.'");
		ИначеЕсли Сценарий.Действие = "Сгруппировать" Тогда
			Сценарий.ПричинаОтказа = НСтр("ru = 'Параметры не могут быть участниками групп.'");
		ИначеЕсли Сценарий.Действие = "Удалить" Тогда
			Сценарий.ПричинаОтказа = НСтр("ru = 'Параметры не могут быть удалены.'");
		КонецЕсли;
		Возврат Ложь; // Завершить сценарий.
	КонецЕсли;
	Если Особенности.ТребоватьОдногоРодителя Тогда
		Родитель = СтрокаДерева.ПолучитьРодителя();
		Если Сценарий.ТекущийРодитель = -1 Тогда
			Сценарий.ТекущийРодитель = Родитель;
		ИначеЕсли Сценарий.ТекущийРодитель <> Родитель Тогда
			Если Сценарий.Действие = "Переместить" Тогда
				Сценарий.ПричинаОтказа = НСтр("ru = 'Выбранные элементы не могут быть перемещены, поскольку они принадлежат разным родителям.'");
			ИначеЕсли Сценарий.Действие = "Сгруппировать" Тогда
				Сценарий.ПричинаОтказа = НСтр("ru = 'Выбранные элементы не могут быть сгруппированы, поскольку они принадлежат разным родителям.'");
			КонецЕсли;
			Возврат Ложь; // Завершить сценарий.
		КонецЕсли;
	КонецЕсли;
	Сценарий.СтрокиДерева.Добавить(СтрокаДерева);
	Возврат Истина; // Следующая строка.
КонецФункции

&НаКлиенте
Функция ШагОтредактироватьГруппуПолей(ВыборПользователя, Сценарий)
	// По результатам редактирования группы дополняет структуру сценария информацией:
	//   * ЗаголовокГруппы - Строка
	//   * Расположение - РасположениеПоляКомпоновкиДанных.
	
	Если Сценарий.ТекущийШагУточнение = "" Тогда // Первый вызов
		ПараметрыФормы = Новый Структура;
		Если Сценарий.Действие = "ИзменитьГруппу" Тогда
			УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, Сценарий.ТаблицаИмя, Сценарий.ТекущаяСтрока);
			ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(Сценарий.ТекущаяСтрока.ИдентификаторКД);
			ПараметрыФормы.Вставить("ЗаголовокГруппы", ЭлементКД.Заголовок);
			ПараметрыФормы.Вставить("Расположение", ЭлементКД.Расположение);
		Иначе
			ПараметрыФормы.Вставить("Расположение", РасположениеПоляКомпоновкиДанных.Авто);
		КонецЕсли;
		
		Блокировать = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		Сценарий.ТекущийШагУточнение = "ОбработкаВыбора";
		ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.ГруппаВыбранныхПолей", ПараметрыФормы, ЭтотОбъект, Истина, , , Сценарий.Обработчик, Блокировать);
		Возврат Ложь; // Приостановить сценарий.
		
	ИначеЕсли Сценарий.ТекущийШагУточнение = "ОбработкаВыбора" Тогда // После закрытия формы.
		
		Если ВыборПользователя = Неопределено Или ВыборПользователя = КодВозвратаДиалога.Отмена Тогда
			Возврат Ложь; // Отменить сценарий.
		КонецЕсли;
		
		Сценарий.Вставить("ЗаголовокГруппы", ВыборПользователя.ЗаголовокГруппы);
		Сценарий.Вставить("Расположение", ВыборПользователя.Расположение);
		Возврат Истина; // Продолжить сценарий.
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ШагСгруппироватьСтроки(ВыборПользователя, Сценарий)
	ТекущийРодитель = Сценарий.ТекущийРодитель;
	ТаблицаЭлемент = Элементы[Сценарий.ТаблицаИмя];
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, Сценарий.ТаблицаИмя, Неопределено);
	
	Если Сценарий.ТекущийРодитель = Неопределено Тогда
		ТаблицаРеквизит = ЭтотОбъект[Сценарий.ТаблицаИмя];
		Если Сценарий.ТаблицаИмя = "Отборы" И Не РежимИзмененияУзлаВарианта Тогда
			ТекущийРодитель = ТаблицаРеквизит.ПолучитьЭлементы()[1];
		Иначе
			ТекущийРодитель = ТаблицаРеквизит;
		КонецЕсли;
		ТекущийРодительКД = УзелКД;
	ИначеЕсли ТипЗнч(ТекущийРодитель.ИдентификаторКД) <> Тип("ИдентификаторКомпоновкиДанных") Тогда
		ТекущийРодительКД = УзелКД;
	Иначе
		ТекущийРодительКД = УзелКД.ПолучитьОбъектПоИдентификатору(ТекущийРодитель.ИдентификаторКД);
	КонецЕсли;
	СтрокиРодителя = ТекущийРодитель.ПолучитьЭлементы();
	СтрокиРодителяКД = ТекущийРодительКД.Элементы;
	
	// Проверки пройдены. Добавление группы в родителя родителя.
	Группы = ТаблицыПолейВставить(Сценарий.ТаблицаИмя, Сценарий.ТипГруппыКД, 0, Ложь);
	
	ЭлементКД = Группы.ЭлементКД;
	ЭлементКД.Использование = Истина;
	НоваяКоллекцияЭлементовКД = ЭлементКД.Элементы;
	
	ГруппаДерева = Группы.СтрокаТаблицы;
	ГруппаДерева.Использование = ЭлементКД.Использование;
	ГруппаДерева.ЭтоГруппа = Истина;
	НоваяКоллекцияСтрокДерева = ГруппаДерева.ПолучитьЭлементы();
	
	Если Сценарий.ТаблицаИмя = "Отборы" Тогда
		ГруппаДерева.Представление = Строка(ЭлементКД.ТипГруппы);
		ГруппаДерева.ИндексКартинки = -1;
		ГруппаДерева.ИндексКартинкиДоступа = 5;
		ГруппаДерева.Заголовок = ГруппаДерева.Представление;
	Иначе
		ЭлементКД.Заголовок = Сценарий.ЗаголовокГруппы;
		ЭлементКД.Расположение = Сценарий.Расположение;
		ГруппаДерева.ИндексКартинки = 1;
		ГруппаДерева.Представление = ЭлементКД.Заголовок;
		Если ЭлементКД.Расположение <> РасположениеПоляКомпоновкиДанных.Авто Тогда
			ГруппаДерева.Представление = ГруппаДерева.Представление + " (" + Строка(ЭлементКД.Расположение) + ")";
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтараяСтрокаДерева Из Сценарий.СтрокиДерева Цикл
		СтарыйЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтараяСтрокаДерева.ИдентификаторКД);
		ТаблицыПолейСкопироватьРекурсивно(УзелКД, СтараяСтрокаДерева, НоваяКоллекцияСтрокДерева, СтарыйЭлементКД, НоваяКоллекцияЭлементовКД);
		СтрокиРодителя.Удалить(СтараяСтрокаДерева);
		СтрокиРодителяКД.Удалить(СтарыйЭлементКД);
	КонецЦикла;
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	Если РасширенныйРежим = 1 Тогда
		ВариантИзменен = Истина;
	КонецЕсли;
	
	Возврат Истина; // Продолжить сценарий.
КонецФункции

&НаКлиенте
Функция ШагСдвинутьСтроки(ВыборПользователя, Сценарий)
	ТекущийРодитель = Сценарий.ТекущийРодитель;
	ТаблицаЭлемент = Элементы[Сценарий.ТаблицаИмя];
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, Сценарий.ТаблицаИмя, Неопределено);
	
	Если Сценарий.ТекущийРодитель = Неопределено Тогда
		ТаблицаРеквизит = ЭтотОбъект[Сценарий.ТаблицаИмя];
		Если Сценарий.ТаблицаИмя = "Отборы" И Не РежимИзмененияУзлаВарианта Тогда
			ТекущийРодитель = ТаблицаРеквизит.ПолучитьЭлементы()[1];
		Иначе
			ТекущийРодитель = ТаблицаРеквизит;
		КонецЕсли;
		ТекущийРодительКД = УзелКД;
	ИначеЕсли ТипЗнч(ТекущийРодитель.ИдентификаторКД) <> Тип("ИдентификаторКомпоновкиДанных") Тогда
		ТекущийРодительКД = УзелКД;
	Иначе
		ТекущийРодительКД = УзелКД.ПолучитьОбъектПоИдентификатору(ТекущийРодитель.ИдентификаторКД);
	КонецЕсли;
	СтрокиРодителя = ТекущийРодитель.ПолучитьЭлементы();
	СтрокиРодителяКД = ПолучитьЭлементыКД(УзелКД, ТекущийРодительКД);
	
	ВерхняяГраницаСтрок = СтрокиРодителя.Количество() - 1;
	ВыделеноСтрок = Сценарий.СтрокиДерева.Количество();
	
	// Массив выделенных строк на встречу движению:
	//  Если двигаем строки в "+", то обходим "от большего к меньшему";
	//  Если в "-", то обходим "от меньшего к большему".
	ДвигаемсяПоВозрастанию = (Сценарий.Направление < 0);
	
	Для Номер = 1 По ВыделеноСтрок Цикл
		Если ДвигаемсяПоВозрастанию Тогда 
			ИндексВМассиве = Номер - 1;
		Иначе
			ИндексВМассиве = ВыделеноСтрок - Номер;
		КонецЕсли;
		
		СтрокаДерева = Сценарий.СтрокиДерева[ИндексВМассиве];
		ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаДерева.ИдентификаторКД);
		
		ИндексВДереве = СтрокиРодителя.Индекс(СтрокаДерева);
		ГдеОкажетсяСтрока = ИндексВДереве + Сценарий.Направление;
		Если ГдеОкажетсяСтрока < 0 Тогда // Перемещаем "в конец".
			СтрокиРодителя.Сдвинуть(ИндексВДереве, ВерхняяГраницаСтрок - ИндексВДереве);
			СтрокиРодителяКД.Сдвинуть(ЭлементКД, ВерхняяГраницаСтрок - ИндексВДереве);
		ИначеЕсли ГдеОкажетсяСтрока > ВерхняяГраницаСтрок Тогда // Перемещаем "в начало".
			СтрокиРодителя.Сдвинуть(ИндексВДереве, -ИндексВДереве);
			СтрокиРодителяКД.Сдвинуть(ЭлементКД, -ИндексВДереве);
		Иначе
			СтрокиРодителя.Сдвинуть(ИндексВДереве, Сценарий.Направление);
			СтрокиРодителяКД.Сдвинуть(ЭлементКД, Сценарий.Направление);
		КонецЕсли;
	КонецЦикла;
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	Если РасширенныйРежим = 1 Тогда
		ВариантИзменен = Истина;
	КонецЕсли;
	
	Возврат Истина; // Продолжить сценарий.
КонецФункции

&НаКлиенте
Функция ШагУдалитьСтроки(ВыборПользователя, Сценарий)
	
	ТаблицаРеквизит = ЭтотОбъект[Сценарий.ТаблицаИмя];
	
	Для Каждого СтрокаТаблицы Из Сценарий.СтрокиДерева Цикл
		
		УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, Сценарий.ТаблицаИмя, СтрокаТаблицы);
		ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКД);
		
		СтрокаРодитель = СтрокаТаблицы.ПолучитьРодителя();
		РодительКД = НайтиОбъектКД(УзелКД, СтрокаРодитель);
		
		ОткудаУдалить = ПолучитьЭлементы(ТаблицаРеквизит, СтрокаРодитель);
		ОткудаУдалить.Удалить(СтрокаТаблицы);
		
		ОткудаУдалитьКД = ПолучитьЭлементыКД(УзелКД, РодительКД);
		ОткудаУдалитьКД.Удалить(ЭлементКД);
		
	КонецЦикла;
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	Если РасширенныйРежим = 1 Тогда
		ВариантИзменен = Истина;
	КонецЕсли;
	
	Возврат Истина; // Продолжить сценарий.
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент - Параметры и отборы.

&НаКлиенте
Процедура ОтборыПоказатьВыборПериода(СтрокаТаблицы)
	Контекст = Новый Структура;
	Контекст.Вставить("СтрокаИдентификатор", СтрокаТаблицы.ПолучитьИдентификатор());
	Обработчик = Новый ОписаниеОповещения("ОтборыЗавершениеВыбораПериода", ЭтотОбъект, Контекст);
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = СтрокаТаблицы.Значение;
	Диалог.Показать(Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ОтборыЗавершениеВыбораПериода(Период, Контекст) Экспорт
	Если Период = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Отборы.НайтиПоИдентификатору(Контекст.СтрокаИдентификатор);
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, "Отборы", СтрокаТаблицы);
	ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКД);
	Если ЭлементКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы.Значение = Период;
	СтрокаТаблицы.Условие = ОтчетыКлиентСервер.ПолучитьВидСтандартногоПериода(СтрокаТаблицы.Значение);
	
	Если СтрокаТаблицы.ЭтоПараметр Тогда
		ЭлементКД.Значение = СтрокаТаблицы.Значение;
	Иначе
		ЭлементКД.ПравоеЗначение = СтрокаТаблицы.Значение;
	КонецЕсли;
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	Если РасширенныйРежим = 1 Тогда
		ВариантИзменен = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПоказатьВыборСсылки(СтрокаТаблицы, СтандартнаяОбработка)
	ПараметрыФормы = ПараметрыВыбораОтбора(СтрокаТаблицы);
	Если ПараметрыФормы = Неопределено Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	Анализ = ОтчетыКлиентСервер.АнализТипов(ПараметрыФормы.ОписаниеТипов, Ложь);
	Если Не Анализ.СодержитОбъектныеТипы Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормы.Вставить("Отмеченные",         ОтчетыКлиентСервер.ЗначенияСписком(СтрокаТаблицы.Значение));
	ПараметрыФормы.Вставить("Представление",      СтрокаТаблицы.Представление);
	
	Контекст = Новый Структура;
	Контекст.Вставить("СтрокаИдентификатор", СтрокаТаблицы.ПолучитьИдентификатор());
	Контекст.Вставить("ПараметрыФормы",      ПараметрыФормы);
	
	Обработчик = Новый ОписаниеОповещения("ОтборыПоказатьВыборСсылкиПослеВыбораТипа", ЭтотОбъект, Контекст);
	
	// Полное имя формы выбора.
	// Свойство "ФормаВыбора" недоступно на клиенте даже для чтения,
	//   поэтому для хранения предустановленных имен форм выбора используется коллекция БыстрыйПоискИменОбъектовМетаданных.
	Если ЗначениеЗаполнено(ПараметрыФормы.ПутьКФорме) Тогда
		ВыполнитьОбработкуОповещения(Обработчик, ПараметрыФормы.ПутьКФорме);
	Иначе
		// Выбор типа из списка.
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.ЗагрузитьЗначения(Анализ.ОбъектныеТипы);
		
		Если СписокВыбора.Количество() = 1 Тогда // Один тип - выбор не требуется.
			ВыполнитьОбработкуОповещения(Обработчик, СписокВыбора[0]);
		Иначе
			ПоказатьВыборИзСписка(Обработчик, СписокВыбора);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПоказатьВыборСсылкиПослеВыбораТипа(ПутьКФормеИлиЭлементСписка, Контекст) Экспорт
	Если ТипЗнч(ПутьКФормеИлиЭлементСписка) = Тип("Строка") Тогда
		ПутьКФорме = ПутьКФормеИлиЭлементСписка;
	ИначеЕсли ТипЗнч(ПутьКФормеИлиЭлементСписка) = Тип("ЭлементСпискаЗначений") Тогда
		Тип = ПутьКФормеИлиЭлементСписка.Значение;
		ИмяОбъектаМетаданных = БыстрыйПоискИменОбъектовМетаданных.Получить(Тип);
		Если Контекст.ПараметрыФормы.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы Тогда
			ВидОбъектаМетаданных = ВРег(СтрРазделить(ИмяОбъектаМетаданных, ".")[0]);
			Если ВидОбъектаМетаданных = "СПРАВОЧНИК" Или ВидОбъектаМетаданных = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
				ПутьКФорме = ИмяОбъектаМетаданных + ".ФормаВыбораГруппы";
			Иначе
				ПутьКФорме = ИмяОбъектаМетаданных + ".ФормаВыбора";
			КонецЕсли;
		Иначе
			ПутьКФорме = ИмяОбъектаМетаданных + ".ФормаВыбора";
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОтборыЗавершениеВыбораСсылки", ЭтотОбъект, Контекст);
	
	Блокировать = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(ПутьКФорме, Контекст.ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Блокировать);
КонецПроцедуры

&НаКлиенте
Процедура ОтборыЗавершениеВыбораСсылки(Ссылка, Контекст) Экспорт
	Если Не Контекст.ПараметрыФормы.ОписаниеТипов.СодержитТип(ТипЗнч(Ссылка)) Или Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Отборы.НайтиПоИдентификатору(Контекст.СтрокаИдентификатор);
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, "Отборы", СтрокаТаблицы);
	ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКД);
	Если ЭлементКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы.Значение = Ссылка;
	
	Если СтрокаТаблицы.ЭтоПараметр Тогда
		ЭлементКД.Значение = Ссылка;
	Иначе
		ЭлементКД.ПравоеЗначение = Ссылка;
	КонецЕсли;
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	Если РасширенныйРежим = 1 Тогда
		ВариантИзменен = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПоказатьСписокСФлажками(СтрокаТаблицы)
	ПараметрыФормы = ПараметрыВыбораОтбора(СтрокаТаблицы);
	Если ПараметрыФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("СтрокаИдентификатор", СтрокаТаблицы.ПолучитьИдентификатор());
	Обработчик = Новый ОписаниеОповещения("ОтборыЗавершениеВводаСпискомСФлажками", ЭтотОбъект, ПараметрыОбработчика);
	
	ПараметрыФормы.Вставить("Отмеченные",    ОтчетыКлиентСервер.ЗначенияСписком(СтрокаТаблицы.Значение));
	ПараметрыФормы.Вставить("Представление", СтрокаТаблицы.Представление);
	
	Блокировать = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Блокировать);
КонецПроцедуры

&НаКлиенте
Функция ПараметрыВыбораОтбора(СтрокаТаблицы)
	ИдентификаторЭлемента = СтрокаТаблицы.ПолучитьИдентификатор();
	
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, "Отборы", СтрокаТаблицы);
	ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКД);
	Если ЭлементКД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура("ЗначенияДляВыбора, ОграничиватьВыборУказаннымиЗначениями, ОписаниеТипов");
	
	ДополнительныеНастройки = СтрокаТаблицы.Дополнительно;
	ЗаполнитьЗначенияСвойств(Результат, ДополнительныеНастройки);
	
	ВыборГруппИЭлементов = ОтчетыКлиентСервер.ПривестиЗначениеКТипуГруппыИЭлементы(
		СтрокаТаблицы.Условие,
		СтрокаТаблицы.ВыборГруппИЭлементов);
	
	// Включенный флажок ВводСписком означает что параметры готовятся для промежуточной формы ВводЗначенийСпискомСФлажками.
	Результат.Вставить("ВводСписком", СтрокаТаблицы.ВводСписком);
	
	// Стандартные параметры формы.
	Результат.Вставить("ЗакрыватьПриВыборе",            Истина);
	Результат.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	Результат.Вставить("Отбор",                         Новый Структура);
	// Стандартные параметры формы выбора (см. Расширение управляемой формы для динамического списка).
	Результат.Вставить("ВыборГруппИЭлементов",          ВыборГруппИЭлементов);
	Результат.Вставить("МножественныйВыбор",            Ложь);
	Результат.Вставить("РежимВыбора",                   Истина);
	// Предполагаемые реквизиты.
	Результат.Вставить("РежимОткрытияОкна",             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Результат.Вставить("РазрешитьНачалоПеретаскивания", Ложь);
	
	Результат.Вставить("ПутьКФорме", ДополнительныеНастройки.ФормаВыбора);
	
	Результат.Вставить("ПараметрыВыбора", Новый Массив);
	Результат.Вставить("КлючУникальности", ЭлементКД.ИдентификаторПользовательскойНастройки);
	
	// Фиксированные параметры выбора и связи от скрытых ведущих (предопределенные в текущем контексте).
	Для Каждого ПараметрВыбора Из ДополнительныеНастройки.ПараметрыВыбора Цикл
		Если ПустаяСтрока(ПараметрВыбора.Имя) Тогда
			Продолжить;
		КонецЕсли;
		Если Результат.ВводСписком Тогда
			Результат.ПараметрыВыбора.Добавить(ПараметрВыбора);
		Иначе
			Если ВРег(Лев(ПараметрВыбора.Имя, 6)) = ВРег("Отбор.") Тогда
				Результат.Отбор.Вставить(Сред(ПараметрВыбора.Имя, 7), ПараметрВыбора.Значение);
			Иначе
				Результат.Вставить(ПараметрВыбора.Имя, ПараметрВыбора.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Динамические связи от ведущих.
	Связи = ОтключаемыеСвязи.НайтиСтроки(Новый Структура("ПодчиненныйИдентификаторВФорме", ИдентификаторЭлемента));
	Для Каждого Связь Из Связи Цикл
		СтрокаВедущий = Отборы.НайтиПоИдентификатору(Связь.ВедущийИдентификаторВФорме);
		Если СтрокаВедущий = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Не СтрокаВедущий.Использование Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеВедущего = СтрокаВедущий.Значение;
		ТипЗначенияВедущего = ТипЗнч(ЗначениеВедущего);
		Если Связь.ТипСвязи = "ПоТипу" Тогда
			Если СтрокаВедущий.Условие <> ВидСравненияКомпоновкиДанных.Равно Тогда
				Продолжить;
			КонецЕсли;
			Результат.Вставить("ОграничениеТипа", ТипЗначенияВедущего);
			Если Результат.ОписаниеТипов.СодержитТип(ТипЗначенияВедущего) Тогда
				Вычитаемые = Результат.ОписаниеТипов.Типы();
				Вычитаемые.Удалить(Вычитаемые.Найти(ТипЗначенияВедущего));
				Результат.ОписаниеТипов = Новый ОписаниеТипов(Результат.ОписаниеТипов, , Вычитаемые);
			КонецЕсли;
		ИначеЕсли Связь.ТипСвязи = "ПоМетаданным" Или Связь.ТипСвязи = "ПараметровВыбора" Тогда
			Если Связь.ТипСвязи = "ПоМетаданным" И Не Связь.ВедущийТип.СодержитТип(ТипЗначенияВедущего) Тогда
				Продолжить;
			КонецЕсли;
			Если Результат.ВводСписком Тогда
				Результат.ПараметрыВыбора.Добавить(Новый ПараметрВыбора(Связь.ПодчиненныйИмяПараметра, ЗначениеВедущего));
			Иначе
				Если ВРег(Лев(Связь.ПодчиненныйИмяПараметра, 6)) = ВРег("Отбор.") Тогда
					Результат.Отбор.Вставить(Сред(Связь.ПодчиненныйИмяПараметра, 7), ЗначениеВедущего);
				Иначе
					Результат.Вставить(Связь.ПодчиненныйИмяПараметра, ЗначениеВедущего);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОтборыЗавершениеВводаСпискомСФлажками(РезультатВыбора, Контекст) Экспорт
	Если ТипЗнч(РезультатВыбора) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Отборы.НайтиПоИдентификатору(Контекст.СтрокаИдентификатор);
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, "Отборы", СтрокаТаблицы);
	ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКД);
	Если ЭлементКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеНастройки = СтрокаТаблицы.Дополнительно;
	
	// Загрузка выбранных значений в 2 списка.
	СписокЗначенийВСКД = Новый СписокЗначений;
	Если Не ДополнительныеНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
		ДополнительныеНастройки.ЗначенияДляВыбора = Новый СписокЗначений;
	КонецЕсли;
	Для Каждого ЭлементСпискаВФорме Из РезультатВыбора Цикл
		ЗначениеВФорме = ЭлементСпискаВФорме.Значение;
		Если Не ДополнительныеНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
			Если ДополнительныеНастройки.ЗначенияДляВыбора.НайтиПоЗначению(ЗначениеВФорме) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ДополнительныеНастройки.ЗначенияДляВыбора.Добавить(), ЭлементСпискаВФорме);
		КонецЕсли;
		Если ЭлементСпискаВФорме.Пометка Тогда
			ОтчетыКлиентСервер.ДобавитьУникальноеЗначениеВСписок(СписокЗначенийВСКД, ЗначениеВФорме, ЭлементСпискаВФорме.Представление, Истина);
		КонецЕсли;
	КонецЦикла;
	Если ТипЗнч(ЭлементКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		ЭлементКД.ПравоеЗначение = СписокЗначенийВСКД;
	Иначе
		ЭлементКД.Значение = СписокЗначенийВСКД;
	КонецЕсли;
	СтрокаТаблицы.Значение = СписокЗначенийВСКД;
	
	// Включение флажка Использование.
	ЭлементКД.Использование = Истина;
	СтрокаТаблицы.Использование = Истина;
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	Если РасширенныйРежим = 1 Тогда
		ВариантИзменен = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборыВыбратьВидСравнения(СтрокаТаблицы)
	Если СтрокаТаблицы.ЭтоПараметр Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("СтрокаИдентификатор", СтрокаТаблицы.ПолучитьИдентификатор());
	Обработчик = Новый ОписаниеОповещения("ОтборыЗавершениеВыбораВидаСравнения", ЭтотОбъект, Контекст);
	
	ИнформацияОТипах = ОтчетыКлиентСервер.АнализТипов(СтрокаТаблицы.ТипЗначения, Ложь);
	
	Список = Новый СписокЗначений;
	
	ФиксированныйСписок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаТаблицы.Дополнительно, "ОграничиватьВыборУказаннымиЗначениями", Ложь);
	Если ИнформацияОТипах.ОграниченнойДлины Или ФиксированныйСписок Тогда
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Равно);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеРавно);
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);
		
	КонецЕсли;
	
	Если ИнформацияОТипах.ОграниченнойДлины
		И ИнформацияОТипах.СодержитОбъектныеТипы Тогда
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии); // НСтр("ru = 'В списке включая подчиненные'")
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии); // НСтр("ru = 'Не в списке включая подчиненные'").
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.ВИерархии); // НСтр("ru = 'В группе'")
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеВИерархии); // НСтр("ru = 'Не в группе'")
		
	КонецЕсли;
	
	Если ИнформацияОТипах.ОграниченнойДлины
		И ИнформацияОТипах.КоличествоПримитивныхТипов > 0 Тогда
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Меньше);
		Список.Добавить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Больше);
		Список.Добавить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		
	КонецЕсли;
	
	Если Не ФиксированныйСписок И ИнформацияОТипах.СодержитТипСтрока Тогда
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Содержит);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеСодержит);
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Подобно);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеПодобно);
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.НачинаетсяС);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеНачинаетсяС);
		
	КонецЕсли;
	
	Если ИнформацияОТипах.ОграниченнойДлины Или ФиксированныйСписок Тогда
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Заполнено);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	КонецЕсли;
	
	ПоказатьВыборИзМеню(Обработчик, Список, Элементы.Отборы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыЗавершениеВыбораВидаСравнения(Результат, Контекст) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Отборы.НайтиПоИдентификатору(Контекст.СтрокаИдентификатор);
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, "Отборы", СтрокаТаблицы);
	ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКД);
	Если ЭлементКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы.Условие  = Результат.Значение;
	ЭлементКД.ВидСравнения = Результат.Значение;
	
	БылВводСписком = СтрокаТаблицы.ВводСписком;
	СталВводСписком = Ложь;
	Если СтрокаТаблицы.Условие = ВидСравненияКомпоновкиДанных.ВСписке
		Или СтрокаТаблицы.Условие = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
		Или СтрокаТаблицы.Условие = ВидСравненияКомпоновкиДанных.НеВСписке
		Или СтрокаТаблицы.Условие = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		Элементы.ОтборыЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		СталВводСписком = Истина;
	ИначеЕсли СтрокаТаблицы.Условие = ВидСравненияКомпоновкиДанных.ВИерархии
		Или СтрокаТаблицы.Условие = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		Элементы.ОтборыЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	Иначе
		Элементы.ОтборыЗначение.ВыборГруппИЭлементов = СтрокаТаблицы.ВыборГруппИЭлементов;
	КонецЕсли;
	
	Если БылВводСписком <> СталВводСписком Тогда
		Если БылВводСписком Тогда
			Если ТипЗнч(ЭлементКД.ПравоеЗначение) = Тип("СписокЗначений")
				И ЭлементКД.ПравоеЗначение.Количество() > 0 Тогда
				ЭлементКД.ПравоеЗначение = ЭлементКД.ПравоеЗначение[0].Значение;
			Иначе
				ЭлементКД.ПравоеЗначение = Неопределено;
			КонецЕсли;
		Иначе
			ЭлементКД.ПравоеЗначение = ОтчетыКлиентСервер.ЗначенияСписком(ЭлементКД.ПравоеЗначение);
		КонецЕсли;
		Обновить(); // Серьезные изменения, для учета всех связей и особенностей вывода следует перерисовать полностью.
	КонецЕсли;
	
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура ОтборыВыбратьЗначениеИзСписка(СтрокаТаблицы)
	Если СтрокаТаблицы.Дополнительно = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗначенияДляВыбора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаТаблицы.Дополнительно, "ЗначенияДляВыбора");
	Если ТипЗнч(ЗначенияДляВыбора) <> Тип("СписокЗначений") Или ЗначенияДляВыбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Контекст = Новый Структура;
	Контекст.Вставить("СтрокаИдентификатор", СтрокаТаблицы.ПолучитьИдентификатор());
	Обработчик = Новый ОписаниеОповещения("ОтборыЗавершениеВыбораЗначенияИзСписка", ЭтотОбъект, Контекст);
	ПоказатьВыборИзМеню(Обработчик, ЗначенияДляВыбора, Элементы.Отборы);
КонецПроцедуры

&НаКлиенте
Процедура ОтборыЗавершениеВыбораЗначенияИзСписка(Результат, Контекст) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Отборы.НайтиПоИдентификатору(Контекст.СтрокаИдентификатор);
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, "Отборы", СтрокаТаблицы);
	ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКД);
	Если ЭлементКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Отражение изменений в значении.
	Если ТипЗнч(ЭлементКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		ЭлементКД.ПравоеЗначение = Результат.Значение;
	Иначе
		ЭлементКД.Значение = Результат.Значение;
	КонецЕсли;
	СтрокаТаблицы.ПредставлениеЗначения = Результат.Представление;
	
	// Включение флажка Использование.
	ЭлементКД.Использование = Истина;
	СтрокаТаблицы.Использование = Истина;
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	Если РасширенныйРежим = 1 Тогда
		ВариантИзменен = Истина;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Клиент - Структура варианта.

&НаКлиенте
Процедура СтруктураВариантаИзменитьУзел(ТаблицаИмя, СтрокаИдентификатор, СтрокаТаблицы, ИмяСтраницы)
	Контекст = Новый Структура("ТаблицаИмя, СтрокаИдентификатор", ТаблицаИмя, СтрокаИдентификатор);
	Обработчик = Новый ОписаниеОповещения("СтруктураВариантаИзменитьУзелЗавершение", ЭтотОбъект, Контекст);
	
	ШаблонЗаголовка = НСтр("ru = 'Настройка %1 отчета ""%2""'");
	Если СтрокаТаблицы.Тип = "Диаграмма" Тогда
		ПредставлениеУзла = НСтр("ru = 'диаграммы'");
	Иначе
		ПредставлениеУзла = НСтр("ru = 'группировки'");
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТаблицы.Заголовок) Тогда
		ПредставлениеУзла = ПредставлениеУзла + " """ + СтрокаТаблицы.Заголовок + """";
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта",                Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("Вариант",                     Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",   Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("НастройкиОтчета",             НастройкиОтчета);
	ПараметрыФормы.Вставить("ВариантНаименование",         ВариантНаименование);
	ПараметрыФормы.Вставить("ИдентификаторТекущегоУзлаКД", СтрокаТаблицы.ИдентификаторКД);
	ПараметрыФормы.Вставить("ТипТекущегоУзлаКД",           СтрокаТаблицы.Тип);
	ПараметрыФормы.Вставить("Заголовок", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ПредставлениеУзла, ВариантНаименование));
	Если ИмяСтраницы <> Неопределено Тогда
		ПараметрыФормы.Вставить("ИмяСтраницы", ИмяСтраницы);
	КонецЕсли;
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ВыполнятьЗамеры = НастройкиОтчета.ВыполнятьЗамеры И ЗначениеЗаполнено(НастройкиОтчета.КлючЗамеров);
	Если ВыполнятьЗамеры Тогда
		ИдентификаторЗамера = Новый УникальныйИдентификатор;
		МодульОценкаПроизводительностиКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиентСервер");
		МодульОценкаПроизводительностиКлиентСервер.НачатьРучнойЗамерВремени(
			НастройкиОтчета.КлючЗамеров + ".Настройки",
			ИдентификаторЗамера,
			НастройкиОтчета.ПрефиксЗамеров);
	КонецЕсли;
	
	ОткрытьФорму(НастройкиОтчета.ПолноеИмя + ".ФормаНастроек", ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Режим);
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВариантаИзменитьУзелЗавершение(Результат, Контекст) Экспорт
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	РезультатКлиента = БыстрыеНастройкиЗаполнить(Результат);
	ПоказатьРезультатЗаполненияНастроек(РезультатКлиента);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Клиент - Таблицы полей (универсальные точки входа).

&НаКлиенте
Процедура ТаблицыПолейИзменитьУровеньДоступа(ТаблицаИмя, СтрокаИдентификатор, ПоказыватьРежимыВвода, ПоказыватьРежимыФлажков)
	Контекст = Новый Структура("ТаблицаИмя, СтрокаИдентификатор", ТаблицаИмя, СтрокаИдентификатор);
	Обработчик = Новый ОписаниеОповещения("ТаблицыПолейИзменитьУровеньДоступаЗавершение", ЭтотОбъект, Контекст);
	
	Список = Новый СписокЗначений;
	Если ПоказыватьРежимыВвода Тогда
		Список.Добавить(2, НСтр("ru = 'В шапке отчета'"), , БиблиотекаКартинок.БыстрыйДоступ);
	КонецЕсли;
	Если ПоказыватьРежимыФлажков Тогда
		Список.Добавить(1, НСтр("ru = 'Только флажок в шапке отчета'"), , БиблиотекаКартинок.БыстрыйДоступСФлажком);
	КонецЕсли;
	Если ПоказыватьРежимыВвода Тогда
		Список.Добавить(4, НСтр("ru = 'В настройках отчета'"), , БиблиотекаКартинок.Реквизит);
	КонецЕсли;
	Если ПоказыватьРежимыФлажков Тогда
		Список.Добавить(3, НСтр("ru = 'Только флажок в настройках отчета'"), , БиблиотекаКартинок.ОбычныйДоступСФлажком);
	КонецЕсли;
	Список.Добавить(5, НСтр("ru = 'Не показывать'"), , БиблиотекаКартинок.СкрытаяНастройкаОтчета);
	
	ПоказатьВыборИзМеню(Обработчик, Список);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицыПолейИзменитьУровеньДоступаЗавершение(Результат, Контекст) Экспорт
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	ИндексКартинкиДоступа = Результат.Значение;
	
	СтрокаТаблицы = ЭтотОбъект[Контекст.ТаблицаИмя].НайтиПоИдентификатору(Контекст.СтрокаИдентификатор);
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, Контекст.ТаблицаИмя, СтрокаТаблицы);
	ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКД);
	Если ЭлементКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицыПолейУстановитьУровеньДоступа(Контекст.ТаблицаИмя, СтрокаТаблицы, ЭлементКД, ИндексКартинкиДоступа);
	
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицыПолейУстановитьУровеньДоступа(ИмяТаблицы, СтрокаТаблицы, ЭлементКД, ИндексКартинкиДоступа)
	Если ИндексКартинкиДоступа = Неопределено Тогда
		ИндексКартинкиДоступа = СтрокаТаблицы.ИндексКартинкиДоступа;
	Иначе
		СтрокаТаблицы.ИндексКартинкиДоступа = ИндексКартинкиДоступа;
	КонецЕсли;
	
	Если ИндексКартинкиДоступа = 1 Или ИндексКартинкиДоступа = 2 Тогда
		ЭлементКД.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ИначеЕсли ИндексКартинкиДоступа = 3 Или ИндексКартинкиДоступа = 4 Тогда
		ЭлементКД.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	Иначе
		ЭлементКД.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
	Если ИмяТаблицы = "Отборы" И Не СтрокаТаблицы.ЭтоПараметр Тогда
		Если ИндексКартинкиДоступа = 1 Или ИндексКартинкиДоступа = 3 Тогда
			ЭлементКД.Представление = "1";
		Иначе
			ЭлементКД.Представление = "";
		КонецЕсли;
	ИначеЕсли ИмяТаблицы = "Оформление" Тогда
		Если СтрокаТаблицы.ЗаголовокПереопределен Тогда
			ЭлементКД.Представление = СтрокаТаблицы.Заголовок;
		Иначе
			Если ИндексКартинкиДоступа = 1 Или ИндексКартинкиДоступа = 3 Тогда
				ЭлементКД.Представление = "1";
			Иначе
				ЭлементКД.Представление = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементКД.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		ЭлементКД.ИдентификаторПользовательскойНастройки = "";
	ИначеЕсли Не ЗначениеЗаполнено(ЭлементКД.ИдентификаторПользовательскойНастройки) Тогда
		ЭлементКД.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Клиент - Оформление.

&НаКлиенте
Процедура ОформлениеИзменитьЭлемент(ТаблицаИмя, СтрокаИдентификатор, СтрокаТаблицы)
	Контекст = Новый Структура("ТаблицаИмя, СтрокаИдентификатор", ТаблицаИмя, СтрокаИдентификатор);
	Обработчик = Новый ОписаниеОповещения("ОформлениеИзменитьЭлементЗавершение", ЭтотОбъект, Контекст);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиОтчета", НастройкиОтчета);
	ПараметрыФормы.Вставить("КомпоновщикНастроек", Отчет.КомпоновщикНастроек);
	ПараметрыФормы.Вставить("ИдентификаторТекущегоУзлаКД", ИдентификаторТекущегоУзлаКД);
	Если СтрокаТаблицы = Неопределено Тогда
		ПараметрыФормы.Вставить("ИдентификаторКД", Неопределено);
		ПараметрыФормы.Вставить("Наименование", "");
	Иначе
		ПараметрыФормы.Вставить("ИдентификаторКД", СтрокаТаблицы.ИдентификаторКД);
		ПараметрыФормы.Вставить("Наименование", СтрокаТаблицы.Заголовок);
	КонецЕсли;
	ПараметрыФормы.Вставить("Заголовок", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Элемент условного оформления отчета ""%1""'"), ВариантНаименование));
	
	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.ЭлементУсловногоОформленияОтчета", ПараметрыФормы, ЭтотОбъект, , , , Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеИзменитьЭлементЗавершение(Результат, Контекст) Экспорт
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	ЭтоНовый = (Контекст.СтрокаИдентификатор = Неопределено);
	
	Таблица = ЭтотОбъект[Контекст.ТаблицаИмя];
	Если ЭтоНовый Тогда
		РезультатВставки = ТаблицыПолейВставить(Контекст.ТаблицаИмя, Тип("ЭлементУсловногоОформленияКомпоновкиДанных"), 0, Ложь);
		СтрокаТаблицы = РезультатВставки.СтрокаТаблицы;
		УзелКД        = РезультатВставки.УзелКД;
		ЭлементКД     = РезультатВставки.ЭлементКД;
		СтрокаТаблицы.ИндексКартинкиДоступа = 4;
	Иначе
		СтрокаТаблицы = Таблица.НайтиПоИдентификатору(Контекст.СтрокаИдентификатор);
		Если СтрокаТаблицы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, Контекст.ТаблицаИмя, СтрокаТаблицы);
		ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКД);
		Если ЭлементКД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЭлементКД.Отбор.Элементы.Очистить();
		ЭлементКД.Поля.Элементы.Очистить();
	КонецЕсли;
	
	ОтчетыКлиентСервер.ЗаполнитьСвойстваРекурсивно(УзелКД, ЭлементКД, Результат.ЭлементКД);
	
	СтрокаТаблицы.Использование = ЭлементКД.Использование;
	СтрокаТаблицы.Заголовок = Результат.Наименование;
	СтрокаТаблицы.ЗаголовокПереопределен = (СтрокаТаблицы.Заголовок <> СтрокаТаблицы.Представление);
	
	ТаблицыПолейУстановитьУровеньДоступа(Контекст.ТаблицаИмя, СтрокаТаблицы, ЭлементКД, Неопределено);
	
	Если СтрокаТаблицы.ЗаголовокПереопределен Тогда
		ЭлементКД.ПредставлениеПользовательскойНастройки = СтрокаТаблицы.Заголовок;
	Иначе
		ЭлементКД.ПредставлениеПользовательскойНастройки = "";
	КонецЕсли;
	
	УстановитьМодифицированность();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Клиент - Таблицы полей (функциональная часть).

&НаКлиенте
Процедура ТаблицыПолейРазгруппировать(ТаблицаИмя)
	ТаблицаЭлемент = Элементы[ТаблицаИмя];
	ТаблицаРеквизит = ЭтотОбъект[ТаблицаИмя];
	ВыделенныеСтроки = ТаблицаЭлемент.ВыделенныеСтроки;
	ВыделенныеСтроки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВыделенныеСтроки); // Для платформы.
	Если ВыделенныеСтроки.Количество() <> 1 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите одну группу.'"));
		Возврат;
	КонецЕсли;
	
	ГруппаДерева = ТаблицаРеквизит.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
	Если ГруппаДерева = Неопределено Или Не ГруппаДерева.ЭтоГруппа Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите группу.'"));
		Возврат;
	КонецЕсли;
	
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, ТаблицаИмя, Неопределено);
	ГруппаКД = УзелКД.ПолучитьОбъектПоИдентификатору(ГруппаДерева.ИдентификаторКД);
	
	Родитель = ГруппаДерева.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Родитель = ТаблицаРеквизит;
	КонецЕсли;
	НоваяКоллекцияСтрокДерева = Родитель.ПолучитьЭлементы();
	
	РодительКД = ГруппаКД.Родитель;
	Если РодительКД = Неопределено Тогда
		РодительКД = УзелКД;
	КонецЕсли;
	НоваяКоллекцияЭлементовКД = РодительКД.Элементы;
	
	Индекс = НоваяКоллекцияСтрокДерева.Индекс(ГруппаДерева);
	ИндексКД = НоваяКоллекцияЭлементовКД.Индекс(ГруппаКД);
	
	ТекущаяСтрока = Неопределено;
	
	СтрокиРодителя = ГруппаДерева.ПолучитьЭлементы();
	СтрокиРодителяКД = ГруппаКД.Элементы;
	Для Каждого СтараяСтрокаДерева Из СтрокиРодителя Цикл
		СтарыйЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтараяСтрокаДерева.ИдентификаторКД);
		ПеренесенныеСтроки = ТаблицыПолейСкопироватьРекурсивно(УзелКД, СтараяСтрокаДерева, НоваяКоллекцияСтрокДерева, СтарыйЭлементКД, НоваяКоллекцияЭлементовКД, Индекс, ИндексКД);
		Если ТекущаяСтрока = Неопределено Тогда
			ТекущаяСтрока = ПеренесенныеСтроки.СтрокаДерева;
		КонецЕсли;
	КонецЦикла;
	
	НоваяКоллекцияСтрокДерева.Удалить(ГруппаДерева);
	НоваяКоллекцияЭлементовКД.Удалить(ГруппаКД);
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ТаблицаЭлемент.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	Если РасширенныйРежим = 1 Тогда
		ВариантИзменен = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицыПолейПередУдалением(ТаблицаИмя, Отказ)
	Отказ = Истина;
	СтрокаТаблицы = Элементы[ТаблицаИмя].ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТаблицыПолейУдалить(ТаблицаИмя, СтрокаТаблицы, Ложь);
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицыПолейИзменить(ТаблицаИмя, СтрокаИдентификатор, СтрокаТаблицы)
	Контекст = Новый Структура("ТаблицаИмя, СтрокаИдентификатор", ТаблицаИмя, СтрокаИдентификатор);
	Обработчик = Новый ОписаниеОповещения("ТаблицыПолейИзменитьЗавершение", ЭтотОбъект, Контекст);
	
	Таблица = ЭтотОбъект[ТаблицаИмя];
	СтрокаТаблицы = Таблица.НайтиПоИдентификатору(СтрокаИдентификатор);
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, ТаблицаИмя, СтрокаТаблицы);
	ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКД);
	
	ТаблицыПолейПоказатьВыборПоля(ТаблицаИмя, Обработчик, ?(ТаблицаИмя = "Отборы", ЭлементКД.ЛевоеЗначение, ЭлементКД.Поле));
КонецПроцедуры

&НаКлиенте
Процедура ТаблицыПолейИзменитьЗавершение(ДоступноеПолеКД, Контекст) Экспорт
	Если ДоступноеПолеКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = ЭтотОбъект[Контекст.ТаблицаИмя].НайтиПоИдентификатору(Контекст.СтрокаИдентификатор);
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, Контекст.ТаблицаИмя, СтрокаТаблицы);
	ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКД);
	Если ЭлементКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы.Представление = ДоступноеПолеКД.Заголовок;
	Если Контекст.ТаблицаИмя = "Отборы" Тогда
		ЭлементКД.ЛевоеЗначение = ДоступноеПолеКД.Поле;
		Если ДоступноеПолеКД.ДоступныеВидыСравнения <> Неопределено
			И ДоступноеПолеКД.ДоступныеВидыСравнения.НайтиПоЗначению(ЭлементКД.ВидСравнения) = Неопределено
			И ДоступноеПолеКД.ДоступныеВидыСравнения.Количество() > 0 Тогда
			ЭлементКД.ВидСравнения = ДоступноеПолеКД.ДоступныеВидыСравнения[0].Значение;
		КонецЕсли;
		ОтчетыКлиентСервер.ПривестиЗначениеКТипу(ЭлементКД.ПравоеЗначение, ДоступноеПолеКД.ТипЗначения);
		Обновить(); // Серьезные изменения, для учета всех связей и особенностей вывода следует перерисовать полностью.
	Иначе
		ЭлементКД.Поле = ДоступноеПолеКД.Поле;
	КонецЕсли;
	
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицыПолейИзменитьИспользование(ТаблицаИмя)
	Таблица = Элементы[ТаблицаИмя];
	СтрокаТаблицы = Таблица.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыводитьФлажок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаТаблицы, "ВыводитьФлажок");
	Если ВыводитьФлажок = Ложь Тогда
		СтрокаТаблицы.Использование = Истина;
		Возврат;
	КонецЕсли;
	
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, ТаблицаИмя, СтрокаТаблицы);
	ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКД);
	Если ЭлементКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементКД.Использование = СтрокаТаблицы.Использование;
	
	ПослеИзмененияФлажкаИспользование(ТаблицаИмя, СтрокаТаблицы, ЭлементКД);
	
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияФлажкаИспользование(ТаблицаИмя, СтрокаТаблицы, ЭлементКД)
	Если ТаблицаИмя = "СоставГруппировки" Тогда
		СвязаннаяТаблицаИмя = "ВыбранныеПоля";
	ИначеЕсли ТаблицаИмя = "ВыбранныеПоля" Тогда
		СвязаннаяТаблицаИмя = "СоставГруппировки";
	Иначе
		СвязаннаяТаблицаИмя = Неопределено;
	КонецЕсли;
	
	Если СвязаннаяТаблицаИмя <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ПолеКД) Тогда
		Условие = Новый Структура("ПолеКД", СтрокаТаблицы.ПолеКД);
		УстановитьФлажокИспользованиеПоУсловию(СвязаннаяТаблицаИмя, Условие, СтрокаТаблицы.Использование);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажокИспользованиеПоУсловию(ТаблицаИмя, Условие, Использование)
	Таблица = ЭтотОбъект[ТаблицаИмя];
	Найденные = ОтчетыКлиентСервер.НайтиСтрокиТаблицы(Таблица, Условие);
	УзелКД = Неопределено;
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		Если СтрокаТаблицы.Использование = Использование Тогда
			Продолжить;
		КонецЕсли;
		Если УзелКД = Неопределено Тогда
			УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, ТаблицаИмя, СтрокаТаблицы);
		КонецЕсли;
		ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКД);
		Если ЭлементКД = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы.Использование = Использование;
		ЭлементКД.Использование     = Использование;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиИспользованиеВоВсемДереве(ТаблицаИмя, Использование, МассивСтрок = Неопределено, УзелКД = Неопределено)
	ОпределятьУзелНаЛету = Ложь;
	Если МассивСтрок = Неопределено Тогда
		МассивСтрок = ЭтотОбъект[ТаблицаИмя].ПолучитьЭлементы();
		ОпределятьУзелНаЛету = (ТаблицаИмя = "Отборы");
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из МассивСтрок Цикл
		Если УзелКД = Неопределено Или ОпределятьУзелНаЛету Тогда
			УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, ТаблицаИмя, СтрокаДерева);
		КонецЕсли;
		
		ВыводитьФлажок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаДерева, "ВыводитьФлажок");
		ЭтоРаздел = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаДерева, "ЭтоРаздел");
		Если ВыводитьФлажок <> Ложь И ЭтоРаздел <> Истина Тогда
			ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаДерева.ИдентификаторКД);
			Если ЭлементКД <> Неопределено Тогда
				СтрокаДерева.Использование = Использование;
				ЭлементКД.Использование     = Использование;
				ПослеИзмененияФлажкаИспользование(ТаблицаИмя, СтрокаДерева, ЭлементКД);
			КонецЕсли;
		КонецЕсли;
		
		УстановитьФлажкиИспользованиеВоВсемДереве(ТаблицаИмя, Использование, СтрокаДерева.ПолучитьЭлементы(), УзелКД);
	КонецЦикла;
	
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицыПолейИзменитьЗначение(ТаблицаИмя)
	СтрокаТаблицы = Элементы[ТаблицаИмя].ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, ТаблицаИмя, СтрокаТаблицы);
	ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКД);
	Если ЭлементКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицы.ЭтоПараметр Тогда
		ЭлементКД.Значение = СтрокаТаблицы.Значение;
	Иначе
		ЭлементКД.ПравоеЗначение = СтрокаТаблицы.Значение;
	КонецЕсли;
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	Если РасширенныйРежим = 1 Тогда
		ВариантИзменен = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицыПолейИзменитьТипГруппировки(ТаблицаИмя)
	СтрокаТаблицы = Элементы[ТаблицаИмя].ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, ТаблицаИмя, СтрокаТаблицы);
	ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКД);
	Если ЭлементКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицы.ПоказыватьТипДополнения Тогда
		ЭлементКД.ТипДополнения = СтрокаТаблицы.ТипДополнения;
	Иначе
		ЭлементКД.ТипГруппировки = СтрокаТаблицы.ТипГруппировки;
	КонецЕсли;
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	Если РасширенныйРежим = 1 Тогда
		ВариантИзменен = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицыПолейИзменитьГруппу(ТаблицаИмя, СтрокаИдентификатор, СтрокаТаблицы)
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, ТаблицаИмя, СтрокаТаблицы);
	ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКД);
	
	Контекст = Новый Структура("ТаблицаИмя, СтрокаИдентификатор", ТаблицаИмя, СтрокаИдентификатор);
	Обработчик = Новый ОписаниеОповещения("ТаблицыПолейИзменитьГруппуЗавершение", ЭтотОбъект, Контекст);
	
	Если ТаблицаИмя = "Отборы" Тогда
		Список = Новый СписокЗначений;
		Список.Добавить(ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		Список.Добавить(ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		Список.Добавить(ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе);
		ПоказатьВыборИзМеню(Обработчик, Список);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаголовокГруппы", ЭлементКД.Заголовок);
		ПараметрыФормы.Вставить("Расположение", ЭлементКД.Расположение);
		
		Блокировать = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.ГруппаВыбранныхПолей", ПараметрыФормы, ЭтотОбъект, Истина, , , Обработчик, Блокировать);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицыПолейИзменитьГруппуЗавершение(Результат, Контекст) Экспорт
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = ЭтотОбъект[Контекст.ТаблицаИмя].НайтиПоИдентификатору(Контекст.СтрокаИдентификатор);
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, Контекст.ТаблицаИмя, СтрокаТаблицы);
	ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКД);
	Если ЭлементКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Контекст.ТаблицаИмя = "Отборы" Тогда
		ЭлементКД.ТипГруппы = Результат.Значение;
		СтрокаТаблицы.Представление = Строка(Результат.Значение);
		Если Не СтрокаТаблицы.ЗаголовокПереопределен Тогда
			СтрокаТаблицы.Заголовок = СтрокаТаблицы.Представление;
		КонецЕсли;
	Иначе
		ЭлементКД.Заголовок = Результат.ЗаголовокГруппы;
		ЭлементКД.Расположение = Результат.Расположение;
		СтрокаТаблицы.Представление = ЭлементКД.Заголовок;
		Если ЭлементКД.Расположение <> РасположениеПоляКомпоновкиДанных.Авто Тогда
			СтрокаТаблицы.Представление = СтрокаТаблицы.Представление + " (" + Строка(ЭлементКД.Расположение) + ")";
		КонецЕсли;
	КонецЕсли;
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	Если РасширенныйРежим = 1 Тогда
		ВариантИзменен = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ТаблицыПолейВставить(ТаблицаИмя, ТипЭлемента, ТекущаяСтрока, ВнутрьСтроки)
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаЭлемент  = Элементы[ТаблицаИмя];
	ТаблицаРеквизит = ЭтотОбъект[ТаблицаИмя];
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, ТаблицаИмя);
	
	Если ТекущаяСтрока = 0 Тогда
		ТекущаяСтрока = ТаблицаЭлемент.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		
		КудаВставить = ТаблицаРеквизит.ПолучитьЭлементы();
		Индекс = Неопределено;
		ЭлементКД = Неопределено;
		КудаВставитьКД = ПолучитьЭлементыКД(УзелКД, ТекущаяСтрока);
		ИндексКД = Неопределено;
		
	Иначе
		
		ЭлементКД = НайтиОбъектКД(УзелКД, ТекущаяСтрока);
		Если ВнутрьСтроки = Неопределено Тогда
			ВнутрьСтроки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущаяСтрока, "ЭтоГруппа", Ложь);
		КонецЕсли;
		
		Если ЭлементКД = Неопределено Тогда
			ВнутрьСтроки = Истина;
		КонецЕсли;
		
		Если ВнутрьСтроки Тогда
			КудаВставить = ТекущаяСтрока.ПолучитьЭлементы();
			Индекс = Неопределено;
			КудаВставитьКД = ПолучитьЭлементыКД(УзелКД, ЭлементКД);
			ИндексКД = Неопределено
		Иначе // Вставка на один уровень со строкой.
			СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
			Если СтрокаРодитель = Неопределено Тогда
				КудаВставить = ТаблицаРеквизит.ПолучитьЭлементы();
			Иначе
				КудаВставить = СтрокаРодитель.ПолучитьЭлементы();
			КонецЕсли;
			Индекс = КудаВставить.Индекс(ТекущаяСтрока) + 1;
			РодительКД = НайтиОбъектКД(УзелКД, СтрокаРодитель);
			КудаВставитьКД = ПолучитьЭлементыКД(УзелКД, РодительКД);
			ИндексКД = КудаВставитьКД.Индекс(ЭлементКД) + 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Индекс = Неопределено Тогда
		НоваяСтрока = КудаВставить.Добавить();
	Иначе
		НоваяСтрока = КудаВставить.Вставить(Индекс);
	КонецЕсли;
	
	Если ОтчетыКлиентСервер.ПриДобавленииВКоллекциюНужноУказыватьТипЭлемента(ТипЗнч(КудаВставитьКД)) Тогда
		Если ИндексКД = Неопределено Тогда
			НовыйЭлементКД = КудаВставитьКД.Добавить(ТипЭлемента);
		Иначе
			НовыйЭлементКД = КудаВставитьКД.Вставить(ИндексКД, ТипЭлемента);
		КонецЕсли;
	Иначе
		Если ИндексКД = Неопределено Тогда
			НовыйЭлементКД = КудаВставитьКД.Добавить();
		Иначе
			НовыйЭлементКД = КудаВставитьКД.Вставить(ИндексКД);
		КонецЕсли;
	КонецЕсли;
	ТаблицаЭлемент.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	НоваяСтрока.ИдентификаторКД = УзелКД.ПолучитьИдентификаторПоОбъекту(НовыйЭлементКД);
	
	Результат = Новый Структура("СтрокаТаблицы, УзелКД, ЭлементКД");
	Результат.СтрокаТаблицы = НоваяСтрока;
	Результат.УзелКД = УзелКД;
	Результат.ЭлементКД = НовыйЭлементКД;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ТаблицыПолейПереместить(Знач ТаблицаИмя, Знач СтрокаТаблицы, Знач НовыйРодитель, Знач ПередЧемВставить, Знач ОставитьКопию)
	ТаблицаЭлемент  = Элементы[ТаблицаИмя];
	ТаблицаРеквизит = ЭтотОбъект[ТаблицаИмя];
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, ТаблицаИмя);
	ЭлементКД = НайтиОбъектКД(УзелКД, СтрокаТаблицы);
	
	Если НовыйРодитель = Неопределено Тогда
		НовыйРодитель = ПолучитьРодителя(ТаблицаИмя, ПередЧемВставить);
	КонецЕсли;
	
	Если ПередЧемВставить = Неопределено Тогда
		ЭтоРаздел = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыйРодитель, "ЭтоРаздел");
		ЭтоГруппа = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыйРодитель, "ЭтоГруппа");
		Если ТаблицаИмя = "СтруктураВарианта"
			Или НовыйРодитель = Неопределено
			Или ЭтоРаздел = Истина
			Или ЭтоГруппа = Истина Тогда
			// Внутрь родителя.
		Иначе
			// На один уровень с родителем.
			ПередЧемВставить = НовыйРодитель;
			НовыйРодитель = ПолучитьРодителя(ТаблицаИмя, НовыйРодитель);
		КонецЕсли;
	КонецЕсли;
	
	НовыйРодительКД = НайтиОбъектКД(УзелКД, НовыйРодитель);
	КудаВставить = ПолучитьЭлементы(ТаблицаРеквизит, НовыйРодитель);
	КудаВставитьКД = ПолучитьЭлементыКД(УзелКД, НовыйРодительКД);
	
	СтарыйРодитель = ПолучитьРодителя(ТаблицаИмя, СтрокаТаблицы);
	ОткудаПереместить = ПолучитьЭлементы(ТаблицаРеквизит, СтарыйРодитель);
	
	СтарыйРодительКД = НайтиОбъектКД(УзелКД, СтарыйРодитель);
	ОткудаПереместитьКД = ПолучитьЭлементыКД(УзелКД, СтарыйРодительКД);
	
	Если ПередЧемВставить = Неопределено Тогда
		Индекс   = Неопределено;
		ИндексКД = Неопределено;
	Иначе
		ПередЧемВставитьКД = НайтиОбъектКД(УзелКД, ПередЧемВставить);
		Индекс   = КудаВставить.Индекс(ПередЧемВставить);
		ИндексКД = КудаВставитьКД.Индекс(ПередЧемВставитьКД);
		Если НовыйРодитель = СтарыйРодитель
			И ОткудаПереместить.Индекс(СтрокаТаблицы) > Индекс Тогда
			Индекс = Индекс - 1;
			ИндексКД = ИндексКД - 1;
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура("СтрокаДерева, СтрокаКД");
	
	ПоискЭлементовКД = Новый Соответствие;
	Результат.СтрокаКД = ОтчетыКлиентСервер.СкопироватьРекурсивно(УзелКД, ЭлементКД, КудаВставитьКД, ИндексКД, ПоискЭлементовКД);
	
	ПоискСтрокТаблицы = Новый Соответствие;
	Результат.СтрокаДерева = ОтчетыКлиентСервер.СкопироватьРекурсивно(Неопределено, СтрокаТаблицы, КудаВставить, Индекс, ПоискСтрокТаблицы);
	
	Для Каждого КлючИЗначение Из ПоискСтрокТаблицы Цикл
		СтараяСтрока = КлючИЗначение.Ключ;
		НоваяСтрока = КлючИЗначение.Значение;
		НоваяСтрока.ИдентификаторКД = ПоискЭлементовКД.Получить(СтараяСтрока.ИдентификаторКД);
	КонецЦикла;
	
	Если Не ОставитьКопию Тогда
		ОткудаПереместить.Удалить(СтрокаТаблицы);
		ОткудаПереместитьКД.Удалить(ЭлементКД);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ТаблицыПолейУдалить(Знач ТаблицаИмя, Знач СтрокаТаблицыИлиМассивСтрок, Знач ИспользованиеАвто)
	Таблица = ЭтотОбъект[ТаблицаИмя];
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, ТаблицаИмя);
	Если ТипЗнч(СтрокаТаблицыИлиМассивСтрок) = Тип("ДанныеФормыЭлементДерева") Тогда
		ТаблицыПолейУдалитьМеханика(ТаблицаИмя, Таблица, УзелКД, СтрокаТаблицыИлиМассивСтрок, ИспользованиеАвто);
	Иначе
		Количество = СтрокаТаблицыИлиМассивСтрок.Количество();
		Для Номер = 1 По Количество Цикл
			ОбратныйИндекс = Количество - Номер;
			СтрокаТаблицы = СтрокаТаблицыИлиМассивСтрок[ОбратныйИндекс];
			ТаблицыПолейУдалитьМеханика(ТаблицаИмя, Таблица, УзелКД, СтрокаТаблицы, ИспользованиеАвто);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицыПолейУдалитьМеханика(ТаблицаИмя, Таблица, УзелКД, СтрокаТаблицы, ИспользованиеАвто)
	ЭлементКД = НайтиОбъектКД(УзелКД, СтрокаТаблицы);
	
	СвязаннаяТаблицаИмя = Неопределено;
	Если ТаблицаИмя = "ВыбранныеПоля" Тогда
		Если СтрокаТаблицы.ЭтоРаздел Тогда
			Возврат;
		ИначеЕсли СтрокаТаблицы.ТипНастройки = "АвтоВыбранноеПоле" Тогда
			Если ИспользованиеАвто <> Неопределено И ЭлементКД.Использование <> ИспользованиеАвто Тогда
				СтрокаТаблицы.Использование = ИспользованиеАвто;
				ЭлементКД.Использование     = ИспользованиеАвто;
			КонецЕсли;
			Возврат;
		КонецЕсли;
		СвязаннаяТаблицаИмя = "СоставГруппировки";
	ИначеЕсли ТаблицаИмя = "Сортировка" Тогда
		Если СтрокаТаблицы.ЭтоРаздел Тогда
			Возврат;
		ИначеЕсли СтрокаТаблицы.ТипНастройки = "АвтоЭлементПорядка" Тогда
			Если ИспользованиеАвто <> Неопределено И ЭлементКД.Использование <> ИспользованиеАвто  Тогда
				СтрокаТаблицы.Использование = ИспользованиеАвто;
				ЭлементКД.Использование     = ИспользованиеАвто;
			КонецЕсли;
			Возврат;
		КонецЕсли;
	ИначеЕсли ТаблицаИмя = "СоставГруппировки" Тогда
		Если СтрокаТаблицы.ТипНастройки = "АвтоПолеГруппировки" Тогда
			Если ИспользованиеАвто <> Неопределено И ЭлементКД.Использование <> ИспользованиеАвто  Тогда
				СтрокаТаблицы.Использование = ИспользованиеАвто;
				ЭлементКД.Использование     = ИспользованиеАвто;
			КонецЕсли;
			Возврат;
		КонецЕсли;
		СвязаннаяТаблицаИмя = "ВыбранныеПоля";
	КонецЕсли;
	Если СвязаннаяТаблицаИмя <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ПолеКД) Тогда
		Условие = Новый Структура("ПолеКД", СтрокаТаблицы.ПолеКД);
		УстановитьФлажокИспользованиеПоУсловию(СвязаннаяТаблицаИмя, Условие, Ложь);
	КонецЕсли;
	
	Родитель = ПолучитьРодителя(ТаблицаИмя, СтрокаТаблицы);
	СтрокиРодителя = ПолучитьЭлементы(Таблица, Родитель);
	
	РодительКД = НайтиОбъектКД(УзелКД, Родитель);
	СтрокиРодителяКД = ПолучитьЭлементыКД(УзелКД, РодительКД);
	
	СтрокиРодителя.Удалить(СтрокаТаблицы);
	СтрокиРодителяКД.Удалить(ЭлементКД);
	
КонецПроцедуры

&НаКлиенте
Функция НайтиОбъектКД(Знач УзелКД, Знач СтрокаТаблицы)
	Если СтрокаТаблицы = Неопределено Или ТипЗнч(СтрокаТаблицы.ИдентификаторКД) <> Тип("ИдентификаторКомпоновкиДанных") Тогда
		Возврат Неопределено;
	Иначе
		Возврат УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКД);
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьЭлементыКД(Знач УзелКД, Знач ОбъектКД)
	Если ОбъектКД = Неопределено Тогда
		ОбъектКД = УзелКД;
	КонецЕсли;
	ТипОбъекта = ТипЗнч(ОбъектКД);
	Если ТипОбъекта = Тип("НастройкиКомпоновкиДанных")
		Или ТипОбъекта = Тип("ГруппировкаКомпоновкиДанных")
		Или ТипОбъекта = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		Или ТипОбъекта = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		Возврат ОбъектКД.Структура;
	ИначеЕсли ТипОбъекта = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
		Или ТипОбъекта = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		Возврат ОбъектКД;
	Иначе
		Возврат ОбъектКД.Элементы;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьЭлементы(Знач ДеревоФормы, Знач СтрокаДерева)
	Если СтрокаДерева = Неопределено Тогда
		СтрокаДерева = ДеревоФормы;
	КонецЕсли;
	Возврат СтрокаДерева.ПолучитьЭлементы();
КонецФункции

&НаКлиенте
Функция ПолучитьРодителя(Знач ТаблицаИмя, Знач СтрокаДерева)
	Если СтрокаДерева = Неопределено Тогда
		СтрокаРодителя = Неопределено;
	Иначе
		СтрокаРодителя = СтрокаДерева.ПолучитьРодителя();
	КонецЕсли;
	
	Если СтрокаРодителя = Неопределено Тогда
		СтрокаРодителя = КорневаяСтрокаПоУмолчанию(ТаблицаИмя);
	КонецЕсли;
	
	Возврат СтрокаРодителя;
КонецФункции

&НаКлиенте
Функция КорневаяСтрокаПоУмолчанию(Знач ТаблицаИмя)
	
	Если ТаблицаИмя = "ВыбранныеПоля" Тогда
		Возврат ВыбранныеПоля.ПолучитьЭлементы()[0];
		
	ИначеЕсли ТаблицаИмя = "Сортировка" Тогда
		Возврат Сортировка.ПолучитьЭлементы()[0];
		
	ИначеЕсли ТаблицаИмя = "СтруктураВарианта" Тогда
		Возврат СтруктураВарианта.ПолучитьЭлементы()[0];
		
	ИначеЕсли ТаблицаИмя = "Отборы" Тогда
		Если РежимИзмененияУзлаВарианта Тогда
			Возврат Отборы.ПолучитьЭлементы()[0];
		Иначе
			Возврат Отборы.ПолучитьЭлементы()[1];
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция НайтиПоИдентификатору(ТаблицаРеквизит, ИдентификаторСтроки)
	Если ИдентификаторСтроки = Неопределено Тогда
		СтрокаТаблицы = Неопределено;
	Иначе
		СтрокаТаблицы = ТаблицаРеквизит.НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЕсли;
	Возврат СтрокаТаблицы;
КонецФункции

&НаКлиенте
Процедура ТаблицыПолейИзменитьНаправлениеСортировки(ТаблицаИмя, СтрокаТаблицы, Направление)
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = Элементы[ТаблицаИмя].ТекущиеДанные;
		Если СтрокаТаблицы = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, ТаблицаИмя, СтрокаТаблицы);
	ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКД);
	Если ЭлементКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение необязательных параметров.
	Если Направление = Неопределено Тогда
		Если ЭлементКД.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда
			Направление = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		Иначе
			Направление = НаправлениеСортировкиКомпоновкиДанных.Возр;
		КонецЕсли;
	КонецЕсли;
	
	// Изменение направления сортировки.
	ЭлементКД.ТипУпорядочивания = Направление;
	СтрокаТаблицы.Направление = Направление;
	
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицыПолейПоказатьВыборПоля(ТаблицаИмя, Обработчик, ПолеКД = Неопределено, ИдентификаторУзлаКД = Неопределено)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиОтчета", НастройкиОтчета);
	ПараметрыФормы.Вставить("КомпоновщикНастроек", Отчет.КомпоновщикНастроек);
	ПараметрыФормы.Вставить("Режим", ТаблицаИмя);
	ПараметрыФормы.Вставить("ПолеКД", ПолеКД);
	ПараметрыФормы.Вставить("ИдентификаторТекущегоУзлаКД", ?(ИдентификаторУзлаКД = Неопределено, ИдентификаторТекущегоУзлаКД, ИдентификаторУзлаКД));
	
	Блокировать = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.ВыборПоляОтчета", ПараметрыФормы, ЭтотОбъект, Истина, , , Обработчик, Блокировать);
КонецПроцедуры

&НаКлиенте
Функция ТаблицыПолейСкопироватьРекурсивно(УзелКД, ЧтоКопировать, КудаВставить, ЧтоКопироватьКД, КудаВставитьКД, Индекс = Неопределено, ИндексКД = Неопределено)
	Результат = Новый Структура("СтрокаДерева, СтрокаКД");
	
	ПоискЭлементовКД = Новый Соответствие;
	Результат.СтрокаКД = ОтчетыКлиентСервер.СкопироватьРекурсивно(УзелКД, ЧтоКопироватьКД, КудаВставитьКД, ИндексКД, ПоискЭлементовКД);
	
	ПоискСтрокТаблицы = Новый Соответствие;
	Результат.СтрокаДерева = ОтчетыКлиентСервер.СкопироватьРекурсивно(Неопределено, ЧтоКопировать, КудаВставить, Индекс, ПоискСтрокТаблицы);
	
	Для Каждого КлючИЗначение Из ПоискСтрокТаблицы Цикл
		СтараяСтрока = КлючИЗначение.Ключ;
		НоваяСтрока = КлючИЗначение.Значение;
		НоваяСтрока.ИдентификаторКД = ПоискЭлементовКД.Получить(СтараяСтрока.ИдентификаторКД);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СтруктураВариантаОбновитьЗаголовокЭлементаВКомпоновщике(СтрокаТаблицы)
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, "СтруктураВарианта", СтрокаТаблицы);
	ЭлементКД = УзелКД.ПолучитьОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКД);
	Если ЭлементКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокИспользование = ЗначениеЗаполнено(СтрокаТаблицы.Заголовок);
	
	ЗначениеПараметраКД = ЭлементКД.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьЗаголовок"));
	Если ЗначениеПараметраКД <> Неопределено Тогда
		ЗначениеПараметраКД.Использование = Истина;
		Если ЗаголовокИспользование Тогда
			ЗначениеПараметраКД.Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить;
		Иначе
			ЗначениеПараметраКД.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеПараметраКД = ЭлементКД.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок"));
	Если ЗначениеПараметраКД <> Неопределено Тогда
		ЗначениеПараметраКД.Использование = Истина;
		ЗначениеПараметраКД.Значение = СтрокаТаблицы.Заголовок;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Клиент или сервер

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоГруппа(ТипЭлемента)
	Если ТипЭлемента = Тип("ГруппаВыбранныхПолейКомпоновкиДанных")
		Или ТипЭлемента = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
		Или ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных")
		Или ТипЭлемента = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных")
		Или ТипЭлемента = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
		Или ТипЭлемента = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТиповУдалитьПримитивные(ИсходноеОписаниеТипов)
	ВычитаемыеТипы = Новый Массив;
	Если ИсходноеОписаниеТипов.СодержитТип(Тип("Строка")) Тогда
		ВычитаемыеТипы.Добавить(Тип("Строка"));
	КонецЕсли;
	Если ИсходноеОписаниеТипов.СодержитТип(Тип("Дата")) Тогда
		ВычитаемыеТипы.Добавить(Тип("Дата"));
	КонецЕсли;
	Если ИсходноеОписаниеТипов.СодержитТип(Тип("Число")) Тогда
		ВычитаемыеТипы.Добавить(Тип("Число"));
	КонецЕсли;
	Если ВычитаемыеТипы.Количество() = 0 Тогда
		Возврат ИсходноеОписаниеТипов;
	КонецЕсли;
	Возврат Новый ОписаниеТипов(ИсходноеОписаниеТипов, , ВычитаемыеТипы);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТаблицыПолейНайтиУзел(ЭтотОбъект, ТаблицаИмя, СтрокаТаблицы = Неопределено, ИдентификаторУзлаКД = Неопределено)
	Если ЭтотОбъект.РасширенныйРежим = 1 Тогда
		Если ИдентификаторУзлаКД = Неопределено Тогда
			ИдентификаторУзлаКД = ЭтотОбъект.ИдентификаторТекущегоУзлаКД;
		КонецЕсли;
		Если ИдентификаторУзлаКД = Неопределено Тогда
			КорневойУзел = ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки;
		Иначе
			КорневойУзел = ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(ИдентификаторУзлаКД);
			Если ТипЗнч(КорневойУзел) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				КорневойУзел = КорневойУзел.Настройки;
			КонецЕсли;
		КонецЕсли;
		Если ТаблицаИмя = "Сортировка" Тогда
			Возврат КорневойУзел.Порядок;
		ИначеЕсли ТаблицаИмя = "ВыбранныеПоля" Тогда
			Возврат КорневойУзел.Выбор;
		ИначеЕсли ТаблицаИмя = "Отборы" Тогда
			Если СтрокаТаблицы = Неопределено Или Не СтрокаТаблицы.ЭтоПараметр Тогда
				Возврат КорневойУзел.Отбор;
			Иначе
				Возврат КорневойУзел.ПараметрыДанных;
			КонецЕсли;
		ИначеЕсли ТаблицаИмя = "СоставГруппировки" Тогда
			Возврат КорневойУзел.ПоляГруппировки;
		ИначеЕсли ТаблицаИмя = "Оформление" Тогда
			Возврат КорневойУзел.УсловноеОформление;
		ИначеЕсли ТаблицаИмя = "СтруктураВарианта" Тогда
			Возврат КорневойУзел;
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Изменение узлов таблицы ""%1"" не поддерживается.'"), ТаблицаИмя);
		КонецЕсли;
	Иначе
		Если ТаблицаИмя = "СтруктураВарианта" Тогда
			Возврат ЭтотОбъект.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		КонецЕсли;
		ИдентификаторКД = ЭтотОбъект.БыстрыйПоискПользовательскихНастроек.Получить(ТаблицаИмя);
		Если ИдентификаторКД = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			Возврат ЭтотОбъект.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторКД);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивСортировать(ИсходныйМассив, НаправлениеСортировки = Неопределено)
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(ИсходныйМассив);
	Список.СортироватьПоЗначению(НаправлениеСортировки);
	Возврат Список.ВыгрузитьЗначения();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НайтиНастройкуВарианта(ЭтотОбъект, ИдентификаторЭлемента)
	ПоискНастройкиВарианта = ЭтотОбъект.БыстрыйПоискНастроекВарианта.Получить(ИдентификаторЭлемента);
	Если ПоискНастройкиВарианта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	КорневойУзелКД = ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(ПоискНастройкиВарианта.ИдентификаторУзлаКД);
	Результат = Новый Структура("УзелКД, ЭлементКД");
	Результат.УзелКД = КорневойУзелКД[ПоискНастройкиВарианта.ИмяКоллекции];
	Результат.ЭлементКД = Результат.УзелКД.ПолучитьОбъектПоИдентификатору(ПоискНастройкиВарианта.ИдентификаторЭлементаКД);
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Функция БыстрыеНастройкиЗаполнить(Знач ПараметрыКлиента)
	
	// Вставка значений по умолчанию для обязательных ключей параметров заполнения.
	ПараметрыЗаполнения = БыстрыеНастройкиДозаполнитьПараметры(ПараметрыКлиента);
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПередЗаполнениемПанелиБыстрыхНастроек Тогда
		ОтчетОбъект = ОтчетыСервер.ОтчетОбъект(ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя);
		ОтчетОбъект.ПередЗаполнениемПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗаполнения);
	КонецЕсли;
	
	// Сохранить состояние до начала изменения.
	БыстрыеНастройкиЗапомнитьСостояние(ПараметрыЗаполнения);
	
	// Запись новых настроек варианта и пользовательских настроек в компоновщик.
	БыстрыеНастройкиЗагрузитьНастройкиВКомпоновщик(ПараметрыЗаполнения);
	Если ПараметрыЗаполнения.Прервать Тогда
		Возврат ПараметрыЗаполнения.Результат;
	КонецЕсли;
	
	// Получение информации из КД.
	УсловияВывода = Новый Структура;
	УсловияВывода.Вставить("ТолькоПользовательские", РасширенныйРежим = 0);
	УсловияВывода.Вставить("ТолькоБыстрые",          Ложь);
	УсловияВывода.Вставить("ИдентификаторТекущегоУзлаКД", ИдентификаторТекущегоУзлаКД);
	Информация = ОтчетыСервер.РасширеннаяИнформацияОНастройках(
		Отчет.КомпоновщикНастроек,
		НастройкиОтчета,
		ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя,
		УсловияВывода);
	
	// Удаление элементов старых настроек.
	БыстрыеНастройкиУдалитьСтарыеЭлементыИКоманды(ПараметрыЗаполнения);
	
	// Добавление элементов актуальных настроек и загрузка значений.
	БыстрыеНастройкиСоздатьЭлементыУправленияИЗагрузитьЗначения(ПараметрыЗаполнения, Информация);
	
	// Добавление элементов актуальных настроек и загрузка значений.
	РасширенныеНастройкиЗагрузитьЗначения(ПараметрыЗаполнения, Информация);
	
	// Связи.
	ЗарегистрироватьОтключаемыеСвязи(Информация);
	
	// Сохранить состояние до начала изменения.
	БыстрыеНастройкиВосстановитьСостояние(ПараметрыЗаполнения);
	
	// Заголовок и свойства элементов.
	ВидимостьДоступностьКорректность(ПараметрыЗаполнения.ИмяСобытия);
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПослеЗаполненияПанелиБыстрыхНастроек Тогда
		ОтчетОбъект = ОтчетыСервер.ОтчетОбъект(ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя);
		ОтчетОбъект.ПослеЗаполненияПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗаполнения);
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения.Результат;
КонецФункции

&НаСервере
Процедура ВидимостьДоступностьКорректность(ИмяСобытия = "")
	
	// Видимость элементов.
	Элементы.КомандыСтруктурыВарианта_Добавление.Видимость  = (РасширенныйРежим = 1);
	Элементы.КомандыСтруктурыВарианта_Добавление1.Видимость = (РасширенныйРежим = 1);
	Элементы.КомандыСтруктурыВарианта_Изменение.Видимость  = (РасширенныйРежим = 1);
	Элементы.КомандыСтруктурыВарианта_Изменение1.Видимость = (РасширенныйРежим = 1);
	Элементы.КомандыСтруктурыВарианта_ДвижениеПоИерархии.Видимость  = (РасширенныйРежим = 1);
	Элементы.КомандыСтруктурыВарианта_ДвижениеПоИерархии1.Видимость = (РасширенныйРежим = 1);
	Элементы.КомандыСтруктурыВарианта_ДвижениеВнутриРодителя.Видимость  = (РасширенныйРежим = 1);
	Элементы.КомандыСтруктурыВарианта_ДвижениеВнутриРодителя1.Видимость = (РасширенныйРежим = 1);
	Элементы.СтруктураВарианта.ИзменятьСоставСтрок  = (РасширенныйРежим = 1);
	Элементы.СтруктураВарианта.ИзменятьПорядокСтрок = (РасширенныйРежим = 1);
	Элементы.СтруктураВарианта.РазрешитьНачалоПеретаскивания = (РасширенныйРежим = 1);
	Элементы.СтруктураВарианта.РазрешитьПеретаскивание       = (РасширенныйРежим = 1);
	Элементы.СтруктураВарианта.Шапка              = (РасширенныйРежим = 1);
	Элементы.СтруктураВариантаЗаголовок.Видимость = (РасширенныйРежим = 1);
	Элементы.СтруктураВариантаСодержитОтборы.Видимость             = (РасширенныйРежим = 1);
	Элементы.СтруктураВариантаСодержитПоляИлиСортировки.Видимость  = (РасширенныйРежим = 1);
	Элементы.СтруктураВариантаСодержитУсловноеОформление.Видимость = (РасширенныйРежим = 1);
	Элементы.КомандыВыбранныхПолей_ДобавлениеУдаление.Видимость  = (РасширенныйРежим = 1);
	Элементы.КомандыВыбранныхПолей_ДобавлениеУдаление1.Видимость = (РасширенныйРежим = 1);
	Элементы.КомандыВыбранныхПолей_Группы.Видимость  = (РасширенныйРежим = 1);
	Элементы.КомандыВыбранныхПолей_Группы1.Видимость = (РасширенныйРежим = 1);
	Элементы.КомандыСортировки_ДобавлениеУдаление.Видимость  = (РасширенныйРежим = 1);
	Элементы.КомандыСортировки_ДобавлениеУдаление1.Видимость = (РасширенныйРежим = 1);
	
	Если ИмяСобытия = "ПриСозданииНаСервере" Тогда
		Если РежимИзмененияУзлаВарианта Тогда
			Элементы.РасширенныйРежим.Видимость = Ложь;
			Элементы.ЗакрытьИСформировать.Заголовок = НСтр("ru = 'Завершить редактирование'");
			Элементы.Закрыть.Заголовок = НСтр("ru = 'Отмена'");
			Элементы.Переместить(Элементы.СтраницаОтборы, Элементы.СтраницыНастроек, Элементы.СтраницаОформление);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Функция ОтчетОбъект()
	Возврат ОбщегоНазначения.ОбъектПоПолномуИмени(НастройкиОтчета.ПолноеИмя);
КонецФункции

&НаСервере
Процедура ДобавитьУсловноеОформление()
	// Отборы.
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Отборы.Вставить("Отборы.ЗаголовокПереопределен", Ложь);
	Инструкция.Поля = "ОтборыЗаголовок";
	Инструкция.Оформление.Вставить("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
	
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Отборы.Вставить("Отборы.ВыводитьФлажок", Ложь);
	Инструкция.Поля = "ОтборыИспользование";
	Инструкция.Оформление.Вставить("Видимость", Ложь);
	Инструкция.Оформление.Вставить("Отображать", Ложь);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
	
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Отборы.Вставить("Отборы.ЭтоРаздел", Истина);
	Инструкция.Поля = "ОтборыУсловие, ОтборыЗначение, ОтборыПредставлениеЗначения, ОтборыИндексКартинкиДоступа, ОтборыЗаголовок";
	Инструкция.Оформление.Вставить("ТолькоПросмотр", Истина);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
	
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Отборы.Вставить("Отборы.ЭтоГруппа", Истина);
	Инструкция.Поля = "ОтборыУсловие, ОтборыЗначение, ОтборыПредставлениеЗначения";
	Инструкция.Оформление.Вставить("ТолькоПросмотр", Истина);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
	
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Отборы.Вставить("Отборы.ФиксированныйСписокВыбора", Ложь);
	Инструкция.Поля = "ОтборыПредставлениеЗначения";
	Инструкция.Оформление.Вставить("Видимость", Ложь);
	Инструкция.Оформление.Вставить("Отображать", Ложь);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
	
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Отборы.Вставить("Отборы.ФиксированныйСписокВыбора", Истина);
	Инструкция.Поля = "ОтборыЗначение";
	Инструкция.Оформление.Вставить("Видимость", Ложь);
	Инструкция.Оформление.Вставить("Отображать", Ложь);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
	
	// Выбранные поля.
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Отборы.Вставить("ВыбранныеПоля.ЭтоРаздел", Истина);
	Инструкция.Поля = "ВыбранныеПоляИспользование";
	Инструкция.Оформление.Вставить("Видимость", Ложь);
	Инструкция.Оформление.Вставить("Отображать", Ложь);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
	
	// Сортировки.
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Отборы.Вставить("Сортировка.ЭтоРаздел", Истина);
	Инструкция.Поля = "СортировкаИспользование, СортировкаНаправление";
	Инструкция.Оформление.Вставить("Видимость", Ложь);
	Инструкция.Оформление.Вставить("Отображать", Ложь);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
	
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Отборы.Вставить("Сортировка.ТипНастройки", "АвтоЭлементПорядка");
	Инструкция.Поля = "СортировкаНаправление";
	Инструкция.Оформление.Вставить("Видимость", Ложь);
	Инструкция.Оформление.Вставить("Отображать", Ложь);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
	
	// Состав группировки.
	Если РежимИзмененияУзлаВарианта Тогда
		Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
		Инструкция.Отборы.Вставить("СоставГруппировки.ПоказыватьТипДополнения", Истина);
		Инструкция.Поля = "СоставГруппировкиТипГруппировки";
		Инструкция.Оформление.Вставить("Видимость", Ложь);
		Инструкция.Оформление.Вставить("Отображать", Ложь);
		СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
		
		Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
		Инструкция.Отборы.Вставить("СоставГруппировки.ПоказыватьТипДополнения", Ложь);
		Инструкция.Поля = "СоставГруппировкиТипДополнения";
		Инструкция.Оформление.Вставить("Видимость", Ложь);
		Инструкция.Оформление.Вставить("Отображать", Ложь);
		СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция БыстрыеНастройкиДозаполнитьПараметры(ПараметрыКлиента)
	ПараметрыЗаполнения = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыЗаполнения, ПараметрыКлиента, Истина);
	Если Не ПараметрыЗаполнения.Свойство("ИмяСобытия") Тогда
		ПараметрыЗаполнения.Вставить("ИмяСобытия", "");
	КонецЕсли;
	Если Не ПараметрыЗаполнения.Свойство("ВариантМодифицирован") Тогда
		ПараметрыЗаполнения.Вставить("ВариантМодифицирован", Ложь);
	КонецЕсли;
	Если Не ПараметрыЗаполнения.Свойство("ПользовательскиеНастройкиМодифицированы") Тогда
		ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Ложь);
	КонецЕсли;
	Если Не ПараметрыЗаполнения.Свойство("Результат") Тогда
		ПараметрыЗаполнения.Вставить("Результат", Новый Структура);
	КонецЕсли;
	ПараметрыЗаполнения.Вставить("Прервать", Ложь);
	ПараметрыЗаполнения.Вставить("ОтчетОбъектИлиПолноеИмя", НастройкиОтчета.ПолноеИмя);
	
	Возврат ПараметрыЗаполнения;
КонецФункции

&НаСервере
Процедура БыстрыеНастройкиЗапомнитьСостояние(ПараметрыЗаполнения)
	Если ПараметрыЗаполнения.ИмяСобытия = "ПриСозданииНаСервере" Тогда
		Возврат; // Ничего восстанавливать не требуется.
	КонецЕсли;
	
	ВыделенныеСтроки = Новый Структура;
	ПараметрыЗаполнения.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	
	ИменаТаблиц = "Отборы, ВыбранныеПоля, Сортировка, " + ?(РежимИзмененияУзлаВарианта, "СтруктураВарианта", "СоставГруппировки");
	ИменаТаблиц = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаТаблиц, ",", Истина, Истина);
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		ВыделенныеСтроки.Вставить(ИмяТаблицы, ОтчетыСервер.ЗапомнитьВыделенныеСтроки(ЭтотОбъект, ИмяТаблицы, "ИдентификаторКД"));
		СтандартныеПодсистемыКлиентСервер.РазвернутьУзлыДерева(ПараметрыЗаполнения.Результат, ИмяТаблицы, "*", Истина);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиВосстановитьСостояние(ПараметрыЗаполнения)
	ВыделенныеСтроки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "ВыделенныеСтроки");
	Если ТипЗнч(ВыделенныеСтроки) = Тип("Структура") Тогда
		Для Каждого КлючИЗначение Из ВыделенныеСтроки Цикл
			ОтчетыСервер.ВосстановитьВыделенныеСтроки(ЭтотОбъект, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиЗагрузитьНастройкиВКомпоновщик(ПараметрыЗаполнения)
	НовыеНастройкиКД = Неопределено;
	НовыеПользовательскиеНастройкиКД = Неопределено;
	Если ПараметрыЗаполнения.Свойство("КомпоновщикНастроекКД") Тогда
		НовыеНастройкиКД = ПараметрыЗаполнения.КомпоновщикНастроекКД.Настройки;
		НовыеПользовательскиеНастройкиКД = ПараметрыЗаполнения.КомпоновщикНастроекКД.ПользовательскиеНастройки;
	Иначе
		Если ПараметрыЗаполнения.Свойство("НастройкиКД") Тогда
			НовыеНастройкиКД = ПараметрыЗаполнения.НастройкиКД;
		КонецЕсли;
		Если ПараметрыЗаполнения.Свойство("ПользовательскиеНастройкиКД") Тогда
			НовыеПользовательскиеНастройкиКД = ПараметрыЗаполнения.ПользовательскиеНастройкиКД;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		НовыеНастройкиXML = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиОтчета, "НовыеНастройкиXML");
		Если ТипЗнч(НовыеНастройкиXML) = Тип("Строка") Тогда
			Попытка
				НовыеНастройкиКД = ОбщегоНазначения.ЗначениеИзСтрокиXML(НовыеНастройкиXML);
			Исключение
				НовыеНастройкиКД = Неопределено;
			КонецПопытки;
			НастройкиОтчета.НовыеНастройкиXML = Неопределено;
		КонецЕсли;
		
		НовыеПользовательскиеНастройкиXML = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиОтчета, "НовыеПользовательскиеНастройкиXML");
		Если ТипЗнч(НовыеПользовательскиеНастройкиXML) = Тип("Строка") Тогда
			Попытка
				НовыеПользовательскиеНастройкиКД = ОбщегоНазначения.ЗначениеИзСтрокиXML(НовыеПользовательскиеНастройкиXML);
			Исключение
				НовыеПользовательскиеНастройкиКД = Неопределено;
			КонецПопытки;
			НастройкиОтчета.НовыеПользовательскиеНастройкиXML = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьНастройкиВарианта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "ОбновитьНастройкиВарианта", Ложь);
	Если ОбновитьНастройкиВарианта Тогда
		ИнформацияОбОшибке = Неопределено;
		Попытка
			НовыеНастройкиКД = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
		КонецПопытки;
		Если ИнформацияОбОшибке <> Неопределено Тогда
			СтандартныеПодсистемыКлиентСервер.ВывестиИнформациюОбОшибке(
				ПараметрыЗаполнения.Результат,
				НСтр("ru = 'Не удалось получить настройки отчета:'"),
				ИнформацияОбОшибке);
			ПараметрыЗаполнения.Прервать = Истина;
			Возврат;
		КонецЕсли;
		Отчет.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(Новый НастройкиКомпоновкиДанных);
	КонецЕсли;
	
	СброситьПользовательскиеНастройки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "СброситьПользовательскиеНастройки", Ложь);
	Если СброситьПользовательскиеНастройки Тогда
		НовыеПользовательскиеНастройкиКД = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	КонецЕсли;
	
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		ОтчетОбъект = ОтчетыСервер.ОтчетОбъект(ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя);
		ОтчетОбъект.ПередЗагрузкойНастроекВКомпоновщик(
			ЭтотОбъект,
			НастройкиОтчета.КлючСхемы,
			КлючТекущегоВарианта,
			НовыеНастройкиКД,
			НовыеПользовательскиеНастройкиКД);
	КонецЕсли;
	
	Если ТипЗнч(НовыеНастройкиКД) = Тип("НастройкиКомпоновкиДанных")
		И Отчет.КомпоновщикНастроек.Настройки <> НовыеНастройкиКД Тогда
		Если ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") Тогда
			ОтчетыСервер.УстановитьФиксированныеОтборы(ФормаПараметры.Отбор, НовыеНастройкиКД, НастройкиОтчета);
		КонецЕсли;
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НовыеНастройкиКД);
	КонецЕсли;
	Если ТипЗнч(НовыеПользовательскиеНастройкиКД) = Тип("ПользовательскиеНастройкиКомпоновкиДанных")
		И Отчет.КомпоновщикНастроек.ПользовательскиеНастройки <> НовыеПользовательскиеНастройкиКД Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(НовыеПользовательскиеНастройкиКД);
	КонецЕсли;
	
	УсловияОтборов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "УсловияОтборов");
	Если УсловияОтборов <> Неопределено Тогда
		УзелКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		Для Каждого КлючИЗначение Из УсловияОтборов Цикл
			ПользовательскаяНастройкаКД = УзелКД.ПолучитьОбъектПоИдентификатору(КлючИЗначение.Ключ);
			ПользовательскаяНастройкаКД.ВидСравнения = КлючИЗначение.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ВариантМодифицирован Тогда
		ВариантИзменен = Истина;
	КонецЕсли;
	Если ПараметрыЗаполнения.ПользовательскиеНастройкиМодифицированы Тогда
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиУдалитьСтарыеЭлементыИКоманды(ПараметрыЗаполнения)
	// Удаление элементов.
	УдаляемыеЭлементы = Новый Массив;
	ДобавитьПодчиненныеЭлементы(УдаляемыеЭлементы, Элементы.БыстрыеОтборы.ПодчиненныеЭлементы);
	ДобавитьПодчиненныеЭлементы(УдаляемыеЭлементы, Элементы.ОбычныеОтборы.ПодчиненныеЭлементы);
	ДобавитьПодчиненныеЭлементы(УдаляемыеЭлементы, Элементы.СтраницаДополнительноШапка.ПодчиненныеЭлементы);
	ДобавитьПодчиненныеЭлементы(УдаляемыеЭлементы, Элементы.СтраницаДополнительноГруппировки.ПодчиненныеЭлементы);
	ДобавитьПодчиненныеЭлементы(УдаляемыеЭлементы, Элементы.СтраницаДополнительноПодвал.ПодчиненныеЭлементы);
	Для Каждого Элемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	// Удаление команд
	УдаляемыеКоманды = Новый Массив;
	Для Каждого Команда Из Команды Цикл
		Если ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя) = Неопределено Тогда
			УдаляемыеКоманды.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Команда Из УдаляемыеКоманды Цикл
		Команды.Удалить(Команда);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодчиненныеЭлементы(Куда, Откуда)
	Для Каждого ПодчиненныйЭлемент Из Откуда Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы")
			Или ТипЗнч(ПодчиненныйЭлемент) = Тип("ТаблицаФормы") Тогда
			ДобавитьПодчиненныеЭлементы(Куда, ПодчиненныйЭлемент.ПодчиненныеЭлементы);
		КонецЕсли;
		Куда.Добавить(ПодчиненныйЭлемент);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиСоздатьЭлементыУправленияИЗагрузитьЗначения(ПараметрыЗаполнения, Информация)
	// Кэши для быстрого поиска с клиента.
	СоответствиеПользовательскихНастроек = Новый Соответствие;
	СоответствиеИменОбъектовМетаданных   = Информация.СоответствиеИменОбъектовМетаданных;
	СоответствиеОтключаемыхСвязей        = Новый Соответствие;
	СоответствиеНастроекВарианта         = Новый Соответствие;
	
	// Удаление реквизитов
	ПараметрыЗаполнения.Вставить("Реквизиты", Новый Структура);
	ПараметрыЗаполнения.Реквизиты.Вставить("Добавляемые",  Новый Массив);
	ПараметрыЗаполнения.Реквизиты.Вставить("Удаляемые",    Новый Массив);
	ПараметрыЗаполнения.Реквизиты.Вставить("Существующие", Новый Соответствие);
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов("ТаблицаЗначений");
	ВсеРеквизиты = ПолучитьРеквизиты();
	Для Каждого Реквизит Из ВсеРеквизиты Цикл
		РеквизитПолноеИмя = ПолноеИмяРеквизита(Реквизит);
		Если ПостоянныеРеквизиты.НайтиПоЗначению(РеквизитПолноеИмя) = Неопределено Тогда
			ПараметрыЗаполнения.Реквизиты.Существующие.Вставить(РеквизитПолноеИмя, Реквизит.ТипЗначения);
			Подчиненные = ПолучитьРеквизиты(РеквизитПолноеИмя);
			Если ОтчетыСервер.ОписанияТиповСовпадают(Реквизит.ТипЗначения, ОписаниеТиповТаблицаЗначений) Тогда
				Для Каждого Подчиненный Из Подчиненные Цикл
					ПодчиненныйПолноеИмя = ПолноеИмяРеквизита(Подчиненный);
					ПараметрыЗаполнения.Реквизиты.Существующие.Вставить(ПодчиненныйПолноеИмя, Подчиненный.ТипЗначения);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Локальные переменные для установки значений и свойств после создания реквизитов.
	ДобавленныеПоляВвода          = Новый Структура;
	ДобавленныеСпискиЗначений     = Новый Массив;
	ДобавленныеСтандартныеПериоды = Новый Массив;
	
	// Структура связей.
	Связи = Информация.Связи;
	
	ИменаОсновныхРеквизитовФормы     = Новый Соответствие;
	ИменаЭлементовДляУстановкиСвязей = Новый Соответствие;
	НастройкиСВидомСравненияРавно    = Новый Соответствие;
	
	КомпоновщикНастроекКД       = Отчет.КомпоновщикНастроек;
	ПользовательскиеНастройкиКД = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	НастройкиКД                 = КомпоновщикНастроекКД.Настройки;
	
	ДополнительныеНастройкиЭлементов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПользовательскиеНастройкиКД.ДополнительныеСвойства, "ЭлементыФормы");
	Если ДополнительныеНастройкиЭлементов = Неопределено Тогда
		ДополнительныеНастройкиЭлементов = Новый Соответствие;
	КонецЕсли;
	
	Режимы = РежимОтображенияЭлементаНастройкиКомпоновкиДанных;
	
	ГруппыВывода = Новый Структура;
	ГруппыВывода.Вставить("БыстрыеОтборы", Новый Структура("Порядок, Размер", Новый Массив, 0));
	ГруппыВывода.Вставить("ОбычныеОтборы", Новый Структура("Порядок, Размер", Новый Массив, 0));
	ГруппыВывода.Вставить("ДополнительныеШапка", Новый Структура("Порядок, Размер", Новый Массив, 0));
	ГруппыВывода.Вставить("ДополнительныеПодвал", Новый Структура("Порядок, Размер", Новый Массив, 0));
	ГруппыВывода.Вставить("ДополнительныеЗакладки", Новый СписокЗначений);
	ДополнительныеЗакладкиПоиск = Новый Соответствие;
	
	ОтчетОбъект = Неопределено;
	
	ЕстьЗагрузкаДанныхИзФайла = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла");
	
	Если РежимИзмененияУзлаВарианта Тогда
		ВыводимыеНастройки = Новый Массив;
	Иначе
		ВыводимыеНастройки = Информация.ПользовательскиеНастройки.Скопировать(Новый Структура("ВыводРазрешен", Истина));
		ВыводимыеНастройки.Сортировать("ИндексВКоллекции Возр");
	КонецЕсли;
	
	ВыводимыеТипыНастроек = Новый Массив;
	Если РасширенныйРежим <> 1 Тогда
		ВыводимыеТипыНастроек.Добавить("ЭлементОтбора");
		ВыводимыеТипыНастроек.Добавить("ГруппаЭлементовОтбора");
		ВыводимыеТипыНастроек.Добавить("ЗначениеПараметраНастроек");
		ВыводимыеТипыНастроек.Добавить("ЭлементУсловногоОформления");
	КонецЕсли;
	
	Прочее = Новый Структура;
	Прочее.Вставить("Связи",       Связи);
	Прочее.Вставить("ОтчетОбъект", Неопределено);
	Прочее.Вставить("ПараметрыЗаполнения",       ПараметрыЗаполнения);
	Прочее.Вставить("ПутьККомпоновщику",         "Отчет.КомпоновщикНастроек");
	Прочее.Вставить("ЕстьЗагрузкаДанныхИзФайла", ЕстьЗагрузкаДанныхИзФайла);
	Прочее.Вставить("ДополнительныеНастройкиЭлементов",   ДополнительныеНастройкиЭлементов);
	Прочее.Вставить("ИменаОсновныхРеквизитовФормы",       ИменаОсновныхРеквизитовФормы);
	Прочее.Вставить("ИменаЭлементовДляУстановкиСвязей",   ИменаЭлементовДляУстановкиСвязей);
	Прочее.Вставить("СоответствиеИменОбъектовМетаданных", СоответствиеИменОбъектовМетаданных);
	Прочее.Вставить("ДобавленныеПоляВвода",          ДобавленныеПоляВвода);
	Прочее.Вставить("ДобавленныеСтандартныеПериоды", ДобавленныеСтандартныеПериоды);
	Прочее.Вставить("ДобавленныеСпискиЗначений",     ДобавленныеСпискиЗначений);
	Прочее.Вставить("ЕстьОтборыСУсловиями", Ложь);
	
	Для Каждого СвойстваНастройки Из ВыводимыеНастройки Цикл
		НастройкаВарианта = СвойстваНастройки.НастройкаВарианта;
		Если НастройкаВарианта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если (СвойстваНастройки.Тип = "ВыбранныеПоля"
				Или СвойстваНастройки.Тип = "Отбор"
				Или СвойстваНастройки.Тип = "Порядок")
			И СвойстваНастройки.СтрокаДерева = Информация.ДеревоВариантаКорневаяСтрока Тогда
			// Регистрация в информации о пользовательских настройках.
			ТаблицаИмя = СвойстваНастройки.Тип;
			Если ТаблицаИмя = "Порядок" Тогда
				ТаблицаИмя = "Сортировка";
			КонецЕсли;
			СоответствиеПользовательскихНастроек.Вставить(ТаблицаИмя, СвойстваНастройки.ИдентификаторКД);
			Продолжить; // Вывод не требуется.
		КонецЕсли;
		
		Если ВыводимыеТипыНастроек.Найти(СвойстваНастройки.Тип) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СоответствиеПользовательскихНастроек.Вставить(СвойстваНастройки.ИдентификаторЭлемента, СвойстваНастройки.ИдентификаторКД);
		
		ПоискНастройкиВарианта = Новый Структура;
		ПоискНастройкиВарианта.Вставить("ИдентификаторУзлаКД",     СвойстваНастройки.СтрокаДерева.ИдентификаторКД);
		ПоискНастройкиВарианта.Вставить("ИмяКоллекции",            НастройкаВарианта.ИмяКоллекции);
		ПоискНастройкиВарианта.Вставить("ИдентификаторЭлементаКД", НастройкаВарианта.ИдентификаторКД);
		СоответствиеНастроекВарианта.Вставить(СвойстваНастройки.ИдентификаторЭлемента, ПоискНастройкиВарианта);
		
		// Определение группы для вывода.
		Если СвойстваНастройки.Тип = "ЭлементУсловногоОформления" Тогда
			// Определение раздела.
			КорневаяСтрокаДереваВарианта = Неопределено;
			ТекущаяСтрока = СвойстваНастройки.СтрокаДерева;
			Пока ТекущаяСтрока <> Неопределено Цикл
				Если ЗначениеЗаполнено(ТекущаяСтрока.Заголовок) И ТекущаяСтрока.УзелКД <> НастройкиКД Тогда
					КорневаяСтрокаДереваВарианта = ТекущаяСтрока;
				КонецЕсли;
				ТекущаяСтрока = ТекущаяСтрока.Родитель;
			КонецЦикла;
			Если КорневаяСтрокаДереваВарианта = Неопределено Тогда // Раздел не найден. Вывод в основную часть.
				ГруппаВывода = ГруппыВывода.ДополнительныеПодвал;
			Иначе // Раздел найден. Вывод в группу на закладке "Дополнительно":
				ЗаголовокЗакладки = КорневаяСтрокаДереваВарианта.Заголовок;
				ГруппаВывода = ДополнительныеЗакладкиПоиск.Получить(ЗаголовокЗакладки);
				Если ГруппаВывода = Неопределено Тогда
					ГруппаВывода = Новый Структура("Порядок, Размер", Новый Массив, 0);
					ГруппаВывода.Вставить("Заголовок", ЗаголовокЗакладки);
					ГруппаВывода.Вставить("ИмяФлажка", "");
					ГруппыВывода.ДополнительныеЗакладки.Добавить(ГруппаВывода, ЗаголовокЗакладки);
					ДополнительныеЗакладкиПоиск.Вставить(ЗаголовокЗакладки, ГруппаВывода);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если СвойстваНастройки.Быстрая Тогда
				ГруппаВывода = ГруппыВывода.БыстрыеОтборы;
			Иначе
				ГруппаВывода = ГруппыВывода.ОбычныеОтборы;
			КонецЕсли;
		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////////////////
		// Генератор
		
		ОтчетыСервер.ВывестиЭлементыНастройки(ЭтотОбъект, Элементы, СвойстваНастройки, ГруппаВывода, Прочее);
	КонецЦикла;
	
	Элементы.ИзменитьУсловияОтборов.Видимость = Прочее.ЕстьОтборыСУсловиями;
	
	ОтчетыСервер.ВывестиПоПорядку(ЭтотОбъект, ГруппыВывода.БыстрыеОтборы, Элементы.БыстрыеОтборы, 2, Ложь);
	ОтчетыСервер.ВывестиПоПорядку(ЭтотОбъект, ГруппыВывода.ОбычныеОтборы, Элементы.ОбычныеОтборы, 2, Ложь);
	ОтчетыСервер.ВывестиПоПорядку(ЭтотОбъект, ГруппыВывода.ДополнительныеШапка, Элементы.СтраницаДополнительноШапка, 1);
	ОтчетыСервер.ВывестиПоПорядку(ЭтотОбъект, ГруппыВывода.ДополнительныеПодвал, Элементы.СтраницаДополнительноПодвал, 1);
	
	НомерДополнительнойГруппы = 0;
	Для Каждого ОписаниеЗакладки Из ГруппыВывода.ДополнительныеЗакладки Цикл
		НомерДополнительнойГруппы = НомерДополнительнойГруппы + 1;
		ГруппаВывода = ОписаниеЗакладки.Значение;
		
		ГруппаИмя   = "ГруппаНастроек_" + Строка(НомерДополнительнойГруппы);
		КолонкиИмя  = "ГруппаНастроек_Колонки_" + Строка(НомерДополнительнойГруппы);
		ОтступИмя   = "ГруппаНастроек_Отступ_" + Строка(НомерДополнительнойГруппы);
		
		ТекущаяГруппа = Элементы.Добавить(ГруппаИмя, Тип("ГруппаФормы"), Элементы.СтраницаДополнительноГруппировки);
		ТекущаяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
		ТекущаяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ТекущаяГруппа.Заголовок   = ГруппаВывода.Заголовок;
		ТекущаяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
		ТекущаяГруппа.ОтображатьЗаголовок = Истина;
		ТекущаяГруппа.ШрифтЗаголовка      = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина);
		ТекущаяГруппа.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветТекстаПоля;
		
		Если ГруппаВывода.ИмяФлажка <> "" Тогда
			ТекущаяГруппа.ОтображатьЗаголовок = Ложь;
			Флажок = Элементы[ГруппаВывода.ИмяФлажка];
			Флажок.Заголовок = ГруппаВывода.Заголовок;
			Элементы.Переместить(Флажок, ТекущаяГруппа);
		КонецЕсли;
		
		Если ГруппаВывода.Размер > 0 Тогда
			Колонки = Элементы.Добавить(КолонкиИмя, Тип("ГруппаФормы"), ТекущаяГруппа);
			Колонки.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			Колонки.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			Колонки.Отображение         = ОтображениеОбычнойГруппы.Нет;
			Колонки.ОтображатьЗаголовок = Ложь;
			
			Отступ = Элементы.Добавить(ОтступИмя, Тип("ДекорацияФормы"), Колонки);
			Отступ.Вид       = ВидДекорацииФормы.Надпись;
			Отступ.Заголовок = "    ";
			
			ОтчетыСервер.ВывестиПоПорядку(ЭтотОбъект, ГруппаВывода, Колонки, 1);
		КонецЕсли;
	КонецЦикла;
	
	// Удаление старых и добавление новых реквизитов.
	Для Каждого КлючИЗначение Из ПараметрыЗаполнения.Реквизиты.Существующие Цикл
		ПараметрыЗаполнения.Реквизиты.Удаляемые.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	ИзменитьРеквизиты(ПараметрыЗаполнения.Реквизиты.Добавляемые, ПараметрыЗаполнения.Реквизиты.Удаляемые);
	
	// Поля ввода (установка значений и связей).
	Для Каждого КлючИЗначение Из ДобавленныеПоляВвода Цикл
		ИмяРеквизита = КлючИЗначение.Ключ;
		ЭтотОбъект[ИмяРеквизита] = КлючИЗначение.Значение;
		Элементы[ИмяРеквизита].ПутьКДанным = ИмяРеквизита;
	КонецЦикла;
	
	// Стандартные периоды (установка значений и связей).
	Для Каждого СвойстваНастройки Из ДобавленныеСтандартныеПериоды Цикл
		Дополнительно = СвойстваНастройки.Дополнительно;
		ЭтотОбъект[Дополнительно.ЗначениеИмя] = СвойстваНастройки.Значение;
		Элементы[Дополнительно.ПериодНачалоИмя].ПутьКДанным    = Дополнительно.ЗначениеИмя + ".ДатаНачала";
		Элементы[Дополнительно.ПериодОкончаниеИмя].ПутьКДанным = Дополнительно.ЗначениеИмя + ".ДатаОкончания";
	КонецЦикла;
	
	// Поля подбора (установка значений и связей).
	Для Каждого СвойстваНастройки Из ДобавленныеСпискиЗначений Цикл
		Дополнительно = СвойстваНастройки.Дополнительно;
		ТаблицаИмя = Дополнительно.ТаблицаИмя;
		ТаблицаФормы = Элементы[ТаблицаИмя];
		КолонкаИспользование = Элементы[Дополнительно.ИмяКолонкиИспользование];
		КолонкаЗначение = Элементы[Дополнительно.ИмяКолонкиЗначение];
		СписокСФлажками = Новый СписокЗначений;
		
		ТипНеопределено = Тип("Неопределено");
		ОписаниеТиповНеопределено = Новый ОписаниеТипов("Неопределено");
		Количество = СвойстваНастройки.ОтмеченныеЗначения.Количество();
		Для Номер = 1 По Количество Цикл
			ОбратныйИндекс = Количество - Номер;
			ЭлементСписка = СвойстваНастройки.ОтмеченныеЗначения[ОбратныйИндекс];
			Значение = ЭлементСписка.Значение;
			Если Не ЗначениеЗаполнено(ЭлементСписка.Представление)
				И (Значение = Неопределено
					Или Значение = ТипНеопределено
					Или Значение = ОписаниеТиповНеопределено
					Или Не ЗначениеЗаполнено(Значение)) Тогда
				СвойстваНастройки.ОтмеченныеЗначения.Удалить(ОбратныйИндекс);
				Продолжить; // Запрет пустых значений.
			КонецЕсли;
			Если СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями
				И СвойстваНастройки.ЗначенияДляВыбора.НайтиПоЗначению(Значение) = Неопределено Тогда
				СвойстваНастройки.ОтмеченныеЗначения.Удалить(ОбратныйИндекс);
				Продолжить; // Выбранное значение не входит в список доступных для выбора.
			КонецЕсли;
			ОтчетыКлиентСервер.ДобавитьУникальноеЗначениеВСписок(СписокСФлажками, Значение, ЭлементСписка.Представление, Истина);
		КонецЦикла;
		
		Для Каждого ЭлементСписка Из СвойстваНастройки.ЗначенияДляВыбора Цикл
			ОтчетыКлиентСервер.ДобавитьУникальноеЗначениеВСписок(СписокСФлажками, ЭлементСписка.Значение, ЭлементСписка.Представление, Ложь);
		КонецЦикла;
		
		СписокСФлажками.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		
		ЭтотОбъект[ТаблицаИмя] = СписокСФлажками;
		ЭтотОбъект[ТаблицаИмя].ТипЗначения = СвойстваНастройки.ОписаниеТипов;
		ТаблицаФормы.ПутьКДанным         = ТаблицаИмя;
		КолонкаЗначение.ПутьКДанным      = ТаблицаИмя + ".Значение";
		КолонкаИспользование.ПутьКДанным = ТаблицаИмя + ".Пометка";
		
		// Некоторые обработчики событий можно подключить только после установки связи элементов с данными.
		ТаблицаФормы.УстановитьДействие("ПередНачаломИзменения", "Подключаемый_СписокСПодбором_ПередНачаломИзменения");
		ТаблицаФормы.УстановитьДействие("ПередОкончаниемРедактирования", "Подключаемый_СписокСПодбором_ПередОкончаниемРедактирования");
		ТаблицаФормы.УстановитьДействие("ПриИзменении", "Подключаемый_СписокСПодбором_ПриИзменении");
		Если СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
			ТаблицаФормы.УстановитьДействие("ПередНачаломДобавления", "Подключаемый_ФиксированныйСписок_ПередНачаломДобавления");
			ТаблицаФормы.УстановитьДействие("ПередУдалением", "Подключаемый_ФиксированныйСписок_ПередУдалением");
		Иначе
			ТаблицаФормы.УстановитьДействие("ОбработкаВыбора", "Подключаемый_СписокСПодбором_ОбработкаВыбора");
			КолонкаЗначение.УстановитьДействие("АвтоПодбор", "Подключаемый_СписокСПодбором_Значение_АвтоПодбор");
		КонецЕсли;
		КолонкаИспользование.УстановитьДействие("ПриИзменении", "Подключаемый_СписокСПодбором_Использование_ПриИзменении");
	КонецЦикла;
	
	// Сохранение соответствий для быстрого поиска в данные формы.
	БыстрыйПоискПользовательскихНастроек = Новый ФиксированноеСоответствие(СоответствиеПользовательскихНастроек);
	БыстрыйПоискИменОбъектовМетаданных   = Новый ФиксированноеСоответствие(СоответствиеИменОбъектовМетаданных);
	БыстрыйПоискОтключаемыхСвязей        = Новый ФиксированноеСоответствие(СоответствиеОтключаемыхСвязей);
	БыстрыйПоискНастроекВарианта         = Новый ФиксированноеСоответствие(СоответствиеНастроекВарианта);
	
	ПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить("ЭлементыФормы", ДополнительныеНастройкиЭлементов);
КонецПроцедуры

&НаСервере
Функция ПолноеИмяРеквизита(Реквизит)
	Возврат ?(ПустаяСтрока(Реквизит.Путь), "", Реквизит.Путь + ".") + Реквизит.Имя;
КонецФункции

&НаСервере
Процедура РасширенныеНастройкиЗагрузитьЗначения(ПараметрыЗаполнения, Информация)
	Если РежимИзмененияУзлаВарианта Тогда
		Найденные = Информация.ДеревоВарианта.Строки.НайтиСтроки(Новый Структура("ИдентификаторКД", ИдентификаторТекущегоУзлаКД), Истина);
		КорневаяСтрока = Найденные[0];
	Иначе
		КорневаяСтрока = Информация.ДеревоВариантаКорневаяСтрока;
	КонецЕсли;
	Информация.Вставить("ТекущаяСтрокаДерева", КорневаяСтрока);
	Информация.НастройкиВарианта.Колонки.Добавить("ИдентификаторВФорме");
	
	Если РежимИзмененияУзлаВарианта И ТипТекущегоУзлаКД <> "Диаграмма" Тогда
		СоставГруппировки.ПолучитьЭлементы().Очистить();
		ЗарегистрироватьЭлементыСоставаГруппировки();
	Иначе
		Элементы.СтраницаСоставГруппировки.Видимость = Ложь;
	КонецЕсли;
	
	ВыбранныеПоля.ПолучитьЭлементы().Очистить();
	ВидимостьВыбранныхПолей = ЗарегистрироватьЭлементыВыбранныхПолей();
	Если ВидимостьВыбранныхПолей Тогда
		СтандартныеПодсистемыКлиентСервер.РазвернутьУзлыДерева(ПараметрыЗаполнения.Результат, "ВыбранныеПоля", "*", Истина);
	КонецЕсли;
	
	ВидимостьСортировок = Ложь;
	Если ВидимостьВыбранныхПолей И ТипТекущегоУзлаКД <> "Диаграмма" Тогда
		Сортировка.ПолучитьЭлементы().Очистить();
		ВидимостьСортировок = ЗарегистрироватьЭлементыСортировки();
		Если ВидимостьСортировок Тогда
			СтандартныеПодсистемыКлиентСервер.РазвернутьУзлыДерева(ПараметрыЗаполнения.Результат, "Сортировка", "*", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ВидимостьТаблицыОтборов = (РасширенныйРежим = 1 И ТипТекущегоУзлаКД <> "Диаграмма");
	Если ВидимостьТаблицыОтборов Тогда
		Отборы.ПолучитьЭлементы().Очистить();
		ЗарегистрироватьПараметры(Информация);
		ЗарегистрироватьЭлементыОтборов(Информация);
		СтандартныеПодсистемыКлиентСервер.РазвернутьУзлыДерева(ПараметрыЗаполнения.Результат, "Отборы", "*", Истина);
	КонецЕсли;
	
	ВидимостьУсловногоОформления = (РасширенныйРежим = 1);
	Если ВидимостьУсловногоОформления Тогда
		Оформление.ПолучитьЭлементы().Очистить();
		ЗарегистрироватьЭлементыОформления(Информация);
		СтандартныеПодсистемыКлиентСервер.РазвернутьУзлыДерева(ПараметрыЗаполнения.Результат, "Оформление", "*", Истина);
	КонецЕсли;
	
	Если ВидимостьВыбранныхПолей Тогда
		Элементы.СтраницаВыбранныеПоляИСортировки.Заголовок = ?(ВидимостьСортировок, НСтр("ru = 'Поля и сортировки'"), НСтр("ru = 'Поля'"));
	КонецЕсли;
	
	Если РасширенныйРежим = 1 И Не РежимИзмененияУзлаВарианта Тогда
		Элементы.ГруппаЕстьВложенныеОтчеты.Видимость = Информация.ЕстьВложенныеОтчеты;
		Элементы.ГруппаЕстьВложенныеОтборы.Видимость = Информация.ЕстьВложенныеОтборы;
		Элементы.ГруппаЕстьВложенноеОформление.Видимость = Информация.ЕстьВложенноеОформление;
		Элементы.ГруппаЕстьВложенныеПоляИлиСортировки.Видимость = Информация.ЕстьВложенныеПоля Или Информация.ЕстьВложенныеСортировки;
	Иначе
		Элементы.ГруппаЕстьВложенныеОтчеты.Видимость = Ложь;
		Элементы.ГруппаЕстьВложенныеОтборы.Видимость = Ложь;
		Элементы.ГруппаЕстьВложенноеОформление.Видимость = Ложь;
		Элементы.ГруппаЕстьВложенныеПоляИлиСортировки.Видимость = Ложь;
	КонецЕсли;
	
	Если ТипТекущегоУзлаКД = "Диаграмма" Тогда
		Элементы.ТекущийУзелКДТипДиаграммы.Видимость = Истина;
		Элементы.ТекущийУзелКДТипДиаграммы.ОграничениеТипа = Новый ОписаниеТипов("ТипДиаграммы");
		
		КорневойУзелКД = Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(ИдентификаторТекущегоУзлаКД);
		Если ТипЗнч(КорневойУзелКД) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			КорневойУзелКД = КорневойУзелКД.Настройки;
		КонецЕсли;
		ПараметрКД = КорневойУзелКД.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТипДиаграммы"));
		Если ПараметрКД = Неопределено Тогда
			Элементы.ТекущийУзелКДТипДиаграммы.Видимость = Ложь;
		Иначе
			ТекущийУзелКДТипДиаграммы = ПараметрКД.Значение;
		КонецЕсли;
	Иначе
		Элементы.ТекущийУзелКДТипДиаграммы.Видимость = Ложь;
	КонецЕсли;
	
	ВидимостьСтруктуры = Ложь;
	Если Не РежимИзмененияУзлаВарианта И КорневаяСтрока.Тип <> "НастройкиВложенногоОбъекта" Тогда
		СтрокиРодителя = СтруктураВарианта.ПолучитьЭлементы();
		СтрокиРодителя.Очистить();
		ЕстьФлажки = ЗарегистрироватьЭлементСтруктурыОтчета(КорневаяСтрока, СтрокиРодителя);
		СтандартныеПодсистемыКлиентСервер.РазвернутьУзлыДерева(ПараметрыЗаполнения.Результат, "СтруктураВарианта", "*", Истина);
		ВидимостьСтруктуры = ЕстьФлажки Или РасширенныйРежим = 1;
	КонецЕсли;
	
	Если Не Информация.ЕстьБыстрыеНастройки
		И Не Информация.ЕстьОбычныеНастройки
		И Не ВидимостьСтруктуры
		И Не ВидимостьУсловногоОформления
		И Не ВидимостьВыбранныхПолей
		И Не ВидимостьСортировок
		И Не ВидимостьТаблицыОтборов Тогда
		Элементы.СтраницаНетПользовательскихНастроек.Видимость = Истина;
		Элементы.СтраницыНастроек.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.СтраницыНастроек.ТекущаяСтраница = Элементы.СтраницаНетПользовательскихНастроек;
		Элементы.ЗакрытьИСформировать.Видимость = Ложь;
	Иначе
		Элементы.СтраницаВыбранныеПоляИСортировки.Видимость    = ВидимостьВыбранныхПолей;
		Элементы.ГруппаСортировки.Видимость                    = ВидимостьСортировок;
		Элементы.ГруппаОтборыРасширенныйРежим.Видимость        = ВидимостьТаблицыОтборов;
		Элементы.ГруппаОформлениеРасширенныйРежим.Видимость    = ВидимостьУсловногоОформления;
		Элементы.СтраницаСтруктураВарианта.Видимость           = ВидимостьСтруктуры;
		Элементы.СтраницаНетПользовательскихНастроек.Видимость = Ложь;
		Элементы.СтраницыНастроек.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.ЗакрытьИСформировать.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗарегистрироватьЭлементСтруктурыОтчета(СтрокаДерева, СтрокиРодителя)
	СтрокаФормы = СтрокиРодителя.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаФормы, СтрокаДерева, "ИдентификаторКД, Представление, Заголовок, Тип, Подтип,
		|СодержитОтборы, СодержитУсловноеОформление");
	СтрокаФормы.СодержитПоляИлиСортировки = СтрокаДерева.СодержитПоля Или СтрокаДерева.СодержитСортировки;
	
	СтрокаФормы.ФлажокДоступен = Истина;
	Если (РасширенныйРежим = 0 И СтрокаДерева.ПользовательскаяНастройка = Неопределено)
		Или СтрокаДерева.Тип = "КоллекцияЭлементовСтруктурыДиаграммы"
		Или СтрокаДерева.Тип = "КоллекцияЭлементовСтруктурыТаблицы"
		Или СтрокаДерева.Тип = "Настройки" Тогда
		СтрокаФормы.ФлажокДоступен = Ложь;
	КонецЕсли;
	
	Если РасширенныйРежим = 0 И ЗначениеЗаполнено(СтрокаФормы.Заголовок) Тогда
		СтрокаФормы.Представление = СтрокаФормы.Заголовок;
		СтрокаФормы.Подсвечивать = Истина;
	КонецЕсли;
	
	СтрокаФормы.ИндексКартинки = -1;
	Если СтрокаДерева.Тип = "Группировка"
		Или СтрокаДерева.Тип = "ГруппировкаТаблицы"
		Или СтрокаДерева.Тип = "ГруппировкаДиаграммы" Тогда
		СтрокаФормы.ИндексКартинки = 1;
	ИначеЕсли СтрокаДерева.Тип = "Таблица" Тогда
		СтрокаФормы.ИндексКартинки = 2;
	ИначеЕсли СтрокаДерева.Тип = "Диаграмма" Тогда
		СтрокаФормы.ИндексКартинки = 3;
	ИначеЕсли СтрокаДерева.Тип = "НастройкиВложенногоОбъекта" Тогда
		СтрокаФормы.ИндексКартинки = 4;
	КонецЕсли;
	
	Если СтрокаФормы.Тип = "Настройки" Тогда
		СтрокаФормы.ЭтоРаздел = Истина;
		СтрокаФормы.Заголовок     = "";
		СтрокаФормы.Представление = НСтр("ru = 'Отчет'");
		СтрокаФормы.СодержитОтборы             = Ложь;
		СтрокаФормы.СодержитПоляИлиСортировки  = Ложь;
		СтрокаФормы.СодержитУсловноеОформление = Ложь;
		СтрокаФормы.Подсвечивать               = Ложь;
	КонецЕсли;
	
	Если СтрокаФормы.ФлажокДоступен Тогда
		Если РасширенныйРежим = 0 Тогда
			СтрокаФормы.ИдентификаторКД = СтрокаДерева.ПользовательскаяНастройка.ИдентификаторКД;
			СтрокаФормы.Использование = СтрокаДерева.ПользовательскаяНастройка.ПользовательскаяНастройкаКД.Использование;
		Иначе
			СтрокаФормы.Использование = СтрокаДерева.УзелКД.Использование;
		КонецЕсли;
	КонецЕсли;
	
	ПодчиненныеСтрокиРодителя = СтрокаФормы.ПолучитьЭлементы();
	
	ЕстьВложенныеФлажки = Ложь;
	Для Каждого ПодчиненнаяСтрокаДерева Из СтрокаДерева.Строки Цикл
		Если ЗарегистрироватьЭлементСтруктурыОтчета(ПодчиненнаяСтрокаДерева, ПодчиненныеСтрокиРодителя) Тогда
			ЕстьВложенныеФлажки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаФормы.ФлажокДоступен Или ЕстьВложенныеФлажки;
КонецФункции

&НаСервере
Функция ЗарегистрироватьЭлементыСортировки()
	УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, "Сортировка", Неопределено);
	Если УзелКД = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	НаборСтрокКД = УзелКД.Элементы;
	
	СтрокаРаздел = Сортировка.ПолучитьЭлементы().Добавить();
	СтрокаРаздел.ЭтоРаздел = Истина;
	СтрокаРаздел.Представление = НСтр("ru = 'Сортировки'");
	СтрокаРаздел.ИндексКартинки = 15;
	СтрокаРаздел.ИдентификаторКД = Неопределено;
	НаборСтрок = СтрокаРаздел.ПолучитьЭлементы();
	
	ДоступныеПоля = УзелКД.ДоступныеПоляПорядка;
	Для Каждого ЭлементКД Из НаборСтрокКД Цикл
		ТипНастройки = ОтчетыКлиентСервер.ТипНастройкиСтрокой(ТипЗнч(ЭлементКД));
		Если ТипНастройки = "ЭлементПорядка" И Не ЗначениеЗаполнено(ЭлементКД.Поле) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = НаборСтрок.Добавить();
		СтрокаТаблицы.ИдентификаторКД = УзелКД.ПолучитьИдентификаторПоОбъекту(ЭлементКД);
		СтрокаТаблицы.ТипНастройки    = ТипНастройки;
		СтрокаТаблицы.Использование   = ЭлементКД.Использование;
		СтрокаТаблицы.ИндексКартинки  = -1;
		
		Если ТипНастройки = "АвтоЭлементПорядка" Тогда
			СтрокаТаблицы.Представление = НСтр("ru = 'Авто (сортировки родителя)'");
		ИначеЕсли ТипНастройки = "ЭлементПорядка" Тогда
			СтрокаТаблицы.Направление = ЭлементКД.ТипУпорядочивания;
			ДоступноеПоле = ДоступныеПоля.НайтиПоле(ЭлементКД.Поле);
			Если ДоступноеПоле = Неопределено Тогда
				СтрокаТаблицы.Представление = ОтчетыКлиентСервер.ИмяВПредставление(Строка(ЭлементКД.Поле));
			Иначе
				СтрокаТаблицы.Представление = ДоступноеПоле.Заголовок;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ЗарегистрироватьЭлементыСоставаГруппировки(УзелКД = Неопределено, НаборСтрокКД = Неопределено, НаборСтрок = Неопределено)
	Если УзелКД = Неопределено Тогда
		УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, "СоставГруппировки", Неопределено);
		Если УзелКД = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если НаборСтрокКД = Неопределено Тогда
		НаборСтрокКД = УзелКД.Элементы;
	КонецЕсли;
	Если НаборСтрок = Неопределено Тогда
		НаборСтрок = СоставГруппировки.ПолучитьЭлементы();
	КонецЕсли;
	ДоступныеПоля = УзелКД.ДоступныеПоляПолейГруппировок;
	Для Каждого ЭлементКД Из НаборСтрокКД Цикл
		ТипНастройки = ОтчетыКлиентСервер.ТипНастройкиСтрокой(ТипЗнч(ЭлементКД));
		ПолеКД = Неопределено;
		Если ТипНастройки = "ПолеГруппировки" Тогда
			Если Не ЗначениеЗаполнено(ЭлементКД.Поле) Тогда
				Продолжить;
			КонецЕсли;
			ПолеКД = ЭлементКД.Поле;
		КонецЕсли;
		
		СтрокаТаблицы = НаборСтрок.Добавить();
		СтрокаТаблицы.ИдентификаторКД = УзелКД.ПолучитьИдентификаторПоОбъекту(ЭлементКД);
		СтрокаТаблицы.ТипНастройки    = ТипНастройки;
		СтрокаТаблицы.Использование   = ЭлементКД.Использование;
		СтрокаТаблицы.ПолеКД          = ПолеКД;
		
		Если ТипНастройки = "АвтоПолеГруппировки" Тогда
			СтрокаТаблицы.Представление  = НСтр("ru = 'Авто (по всем полям)'");
			СтрокаТаблицы.ИндексКартинки = 6;
		ИначеЕсли ТипНастройки = "ПолеГруппировки" Тогда
			СтрокаТаблицы.ТипГруппировки = ЭлементКД.ТипГруппировки;
			СтрокаТаблицы.ТипДополнения  = ЭлементКД.ТипДополнения;
			ДоступноеПоле = ДоступныеПоля.НайтиПоле(ЭлементКД.Поле);
			Если ДоступноеПоле = Неопределено Тогда
				СтрокаТаблицы.Представление = ОтчетыКлиентСервер.ИмяВПредставление(Строка(ЭлементКД.Поле));
				СтрокаТаблицы.ИндексКартинки = 5;
			Иначе
				СтрокаТаблицы.Представление = ДоступноеПоле.Заголовок;
				Если ДоступноеПоле.Ресурс Тогда
					СтрокаТаблицы.ИндексКартинки = 20;
				ИначеЕсли ДоступноеПоле.Таблица Тогда
					СтрокаТаблицы.ИндексКартинки = 21;
				ИначеЕсли ДоступноеПоле.Папка Тогда
					СтрокаТаблицы.ИндексКартинки = 1;
				Иначе
					СтрокаТаблицы.ИндексКартинки = 4;
				КонецЕсли;
				ИнформацияОТипах = ОтчетыКлиентСервер.АнализТипов(ДоступноеПоле.ТипЗначения, Ложь);
				Если ИнформацияОТипах.СодержитТипПериод Или ИнформацияОТипах.СодержитТипДата Тогда
					СтрокаТаблицы.ПоказыватьТипДополнения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЗарегистрироватьЭлементыВыбранныхПолей(УзелКД = Неопределено, НаборСтрокКД = Неопределено, НаборСтрок = Неопределено, ДоступныеПоля = Неопределено)
	Если УзелКД = Неопределено Тогда
		УзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, "ВыбранныеПоля", Неопределено);
		Если УзелКД = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Если НаборСтрокКД = Неопределено Тогда
		НаборСтрокКД = УзелКД.Элементы;
	КонецЕсли;
	Если НаборСтрок = Неопределено Тогда
		СтрокаРаздел = ВыбранныеПоля.ПолучитьЭлементы().Добавить();
		СтрокаРаздел.ЭтоРаздел = Истина;
		СтрокаРаздел.Представление = НСтр("ru = 'Поля'");
		СтрокаРаздел.ИндексКартинки = 14;
		СтрокаРаздел.ИдентификаторКД = "ВыбранныеПоля";
		НаборСтрок = СтрокаРаздел.ПолучитьЭлементы();
	КонецЕсли;
	Если ДоступныеПоля = Неопределено Тогда
		ДоступныеПоля = УзелКД.ДоступныеПоляВыбора;
	КонецЕсли;
	
	Для Каждого ЭлементКД Из НаборСтрокКД Цикл
		ТипНастройки = ОтчетыКлиентСервер.ТипНастройкиСтрокой(ТипЗнч(ЭлементКД));
		ЭтоГруппа = Ложь;
		ПолеКД = Неопределено;
		Если ТипНастройки = "АвтоВыбранноеПоле" Тогда
			Представление = НСтр("ru = 'Авто (поля родителя)'");
			ИндексКартинки = 6;
		Иначе
			Если ТипНастройки = "ГруппаВыбранныхПолей" Тогда
				ЭтоГруппа = Истина;
				ИндексКартинки = 1;
			Иначе
				ИндексКартинки = 4;
			КонецЕсли;
			
			Представление = ЭлементКД.Заголовок;
			Если ЗначениеЗаполнено(ЭлементКД.Поле) Тогда
				ДоступноеПоле = ДоступныеПоля.НайтиПоле(ЭлементКД.Поле);
				ПолеКД = ЭлементКД.Поле;
			Иначе
				Если Не ЭтоГруппа Тогда
					Продолжить;
				КонецЕсли;
				ДоступноеПоле = Неопределено;
			КонецЕсли;
			Если ДоступноеПоле = Неопределено Тогда
				Если Не ЭтоГруппа Тогда
					ИндексКартинки = 5;
					Представление = ОтчетыКлиентСервер.ИмяВПредставление(Строка(ЭлементКД.Поле));
				КонецЕсли;
			ИначеЕсли Представление = "" Тогда
				Представление = ДоступноеПоле.Заголовок;
			КонецЕсли;
			Если ЭтоГруппа И ЭлементКД.Расположение <> РасположениеПоляКомпоновкиДанных.Авто Тогда
				Представление = Представление + " (" + Строка(ЭлементКД.Расположение) + ")";
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицы = НаборСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЭлементКД);
		СтрокаТаблицы.ТипНастройки    = ТипНастройки;
		СтрокаТаблицы.ИндексКартинки  = ИндексКартинки;
		СтрокаТаблицы.ЭтоГруппа       = ЭтоГруппа;
		СтрокаТаблицы.Представление   = Представление;
		СтрокаТаблицы.ИдентификаторКД = УзелКД.ПолучитьИдентификаторПоОбъекту(ЭлементКД);
		СтрокаТаблицы.ПолеКД          = ПолеКД;
		
		Если ЭтоГруппа Тогда
			ЗарегистрироватьЭлементыВыбранныхПолей(УзелКД, ЭлементКД.Элементы, СтрокаТаблицы.ПолучитьЭлементы(), ДоступныеПоля);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ЗарегистрироватьПараметры(Информация)
	Если РежимИзмененияУзлаВарианта Тогда
		Возврат;
	КонецЕсли;
	
	УсловияПоиска = Новый Структура("СтрокаДерева, ИмяКоллекции", Информация.ТекущаяСтрокаДерева, "ПараметрыДанных");
	Найденные = Информация.НастройкиВарианта.Строки.НайтиСтроки(УсловияПоиска, Ложь);
	Если Найденные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	НаборСтрокВарианта = Найденные[0].Строки;
	
	СтрокаРаздел = Отборы.ПолучитьЭлементы().Добавить();
	СтрокаРаздел.ЭтоРаздел = Истина;
	СтрокаРаздел.ЭтоПараметр = Истина;
	СтрокаРаздел.Представление = НСтр("ru = 'Параметры'");
	СтрокаРаздел.ИндексКартинки = 2;
	СтрокаРаздел.ИдентификаторКД = "ПараметрыДанных";
	НаборСтрок = СтрокаРаздел.ПолучитьЭлементы();
	
	Для Каждого НастройкаВарианта Из НаборСтрокВарианта Цикл
		Если Не НастройкаВарианта.ВыводРазрешен Тогда
			Продолжить;
		КонецЕсли;
		
		ДоступнаяНастройкаКД = НастройкаВарианта.ДоступнаяНастройкаКД;
		ЭлементКД = НастройкаВарианта.ЭлементКД;
		
		Если ЗначениеЗаполнено(НастройкаВарианта.ДоступнаяНастройкаКД.Заголовок) Тогда
			Представление = НастройкаВарианта.ДоступнаяНастройкаКД.Заголовок;
		Иначе
			Представление = Строка(ЭлементКД.Параметр);
		КонецЕсли;
		
		СтрокаТаблицы = НаборСтрок.Добавить();
		СтрокаТаблицы.Использование   = ЭлементКД.Использование;
		СтрокаТаблицы.Значение        = НастройкаВарианта.Значение;
		СтрокаТаблицы.ИдентификаторКД = НастройкаВарианта.ИдентификаторКД;
		СтрокаТаблицы.Представление   = Представление;
		СтрокаТаблицы.ЭтоПараметр     = Истина;
		СтрокаТаблицы.ИндексКартинки  = -1;
		СтрокаТаблицы.ТипЗначения     = НастройкаВарианта.ДоступнаяНастройкаКД.ТипЗначения;
		СтрокаТаблицы.ВводСписком     = НастройкаВарианта.ВводСписком;
		СтрокаТаблицы.ВыводитьФлажок  = НастройкаВарианта.ВыводитьФлажок;
		СтрокаТаблицы.ВыборГруппИЭлементов = НастройкаВарианта.ВыборГруппИЭлементов;
		
		Если НастройкаВарианта.ОграничиватьВыборУказаннымиЗначениями
			И ТипЗнч(НастройкаВарианта.ЗначенияДляВыбора) = Тип("СписокЗначений") Тогда
			Если СтрокаТаблицы.ВводСписком Тогда
				Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("СписокЗначений") Тогда
					Для Каждого ЭлементСписка Из СтрокаТаблицы.Значение Цикл
						ЭлементДляВыбора = НастройкаВарианта.ЗначенияДляВыбора.НайтиПоЗначению(ЭлементСписка.Значение);
						Если ЭлементДляВыбора <> Неопределено Тогда
							ЭлементСписка.Представление = ЭлементДляВыбора.Представление;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Иначе
				СтрокаТаблицы.ФиксированныйСписокВыбора = Истина;
				ЭлементДляВыбора = НастройкаВарианта.ЗначенияДляВыбора.НайтиПоЗначению(СтрокаТаблицы.Значение);
				Если ЭлементДляВыбора <> Неопределено Тогда
					СтрокаТаблицы.ПредставлениеЗначения = ЭлементДляВыбора.Представление;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НастройкаВарианта.ИдентификаторВФорме = СтрокаТаблицы.ПолучитьИдентификатор();
		
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("СтандартныйПериод") Тогда
			СтрокаТаблицы.Условие = ОтчетыКлиентСервер.ПолучитьВидСтандартногоПериода(СтрокаТаблицы.Значение);
			СтрокаТаблицы.ТипУсловия = Новый ОписаниеТипов("ПеречислениеСсылка.ДоступныеПериодыОтчета");
		Иначе
			СтрокаТаблицы.ТипУсловия = Новый ОписаниеТипов("Неопределено");
		КонецЕсли;
		
		СтрокаТаблицы.Заголовок = Представление;
		Если ЗначениеЗаполнено(ЭлементКД.ИдентификаторПользовательскойНастройки) Тогда
			Если ЗначениеЗаполнено(ЭлементКД.ПредставлениеПользовательскойНастройки) Тогда
				СтрокаТаблицы.Заголовок = ЭлементКД.ПредставлениеПользовательскойНастройки;
			КонецЕсли;
			Если ЭлементКД.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ Тогда
				СтрокаТаблицы.ИндексКартинкиДоступа = 2;
			ИначеЕсли ЭлементКД.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный Тогда
				СтрокаТаблицы.ИндексКартинкиДоступа = 4;
			Иначе
				СтрокаТаблицы.ИндексКартинкиДоступа = 5;
			КонецЕсли;
		Иначе
			СтрокаТаблицы.ИндексКартинкиДоступа = 5;
		КонецЕсли;
		
		Дополнительно = Новый Структура("ОписаниеТипов, ОграничиватьВыборУказаннымиЗначениями,
		|ПараметрыВыбора, ФормаВыбора, ЗначенияДляВыбора");
		ЗаполнитьЗначенияСвойств(Дополнительно, НастройкаВарианта);
		СтрокаТаблицы.Дополнительно = Дополнительно;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьЭлементыОтборов(Информация, НаборСтрокВарианта = Неопределено, НаборСтрокФормы = Неопределено)
	Если НаборСтрокВарианта = Неопределено Тогда
		УсловияПоиска = Новый Структура("СтрокаДерева, ИмяКоллекции", Информация.ТекущаяСтрокаДерева, "Отбор");
		Найденные = Информация.НастройкиВарианта.Строки.НайтиСтроки(УсловияПоиска, Ложь);
		Если Найденные.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		НаборСтрокВарианта = Найденные[0].Строки;
	КонецЕсли;
	Если НаборСтрокФормы = Неопределено Тогда
		НаборСтрокФормы = Отборы.ПолучитьЭлементы();
		СтрокаРаздел = НаборСтрокФормы.Добавить();
		СтрокаРаздел.ЭтоРаздел = Истина;
		СтрокаРаздел.Представление = НСтр("ru = 'Отборы'");
		СтрокаРаздел.ИндексКартинки = 3;
		СтрокаРаздел.ИдентификаторКД = "Отборы";
		НаборСтрокФормы = СтрокаРаздел.ПолучитьЭлементы();
	КонецЕсли;
	Для Каждого НастройкаВарианта Из НаборСтрокВарианта Цикл
		Если НастройкаВарианта.Тип = "ГруппаЭлементовОтбора" Тогда
			ЭтоГруппа = Истина;
			Представление = Строка(НастройкаВарианта.ЭлементКД.ТипГруппы);
		ИначеЕсли НастройкаВарианта.Тип = "ЭлементОтбора" Тогда
			// БыстрыйВыбор, ВыборГруппИЭлементов, ДоступныеВидыСравнения, ДоступныеЗначения, Маска, Папка
			// Поле, Ресурс, СвязьПоТипу, Таблица, ФормаВыбора, ФорматРедактирования, Элементы
			// ПолучитьПараметрыВыбора(), ПолучитьСвязиПараметровВыбора().
			Если НастройкаВарианта.ДоступнаяНастройкаКД = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ЭтоГруппа = Ложь;
			Если ЗначениеЗаполнено(НастройкаВарианта.ДоступнаяНастройкаКД.Заголовок) Тогда
				Представление = НастройкаВарианта.ДоступнаяНастройкаКД.Заголовок;
			Иначе
				Представление = Строка(НастройкаВарианта.ЭлементКД.ЛевоеЗначение);
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ЭлементКД = НастройкаВарианта.ЭлементКД;
		
		СтрокаТаблицы = НаборСтрокФормы.Добавить();
		СтрокаТаблицы.Использование   = НастройкаВарианта.ЭлементКД.Использование;
		СтрокаТаблицы.Представление   = Представление; //ОтчетыКлиентСервер.ПредставлениеОбъектаКД(Информация.ТекущаяСтрокаДерева.УзелКД.Отбор, ЭлементКД, Неопределено).Представление
		СтрокаТаблицы.Заголовок       = Представление;
		СтрокаТаблицы.ИдентификаторКД = НастройкаВарианта.ИдентификаторКД;
		СтрокаТаблицы.ЭтоПараметр     = Ложь;
		СтрокаТаблицы.ЭтоГруппа       = ЭтоГруппа;
		СтрокаТаблицы.ВводСписком     = НастройкаВарианта.ВводСписком;
		СтрокаТаблицы.ВыводитьФлажок  = НастройкаВарианта.ВыводитьФлажок;
		СтрокаТаблицы.ФормаВыбора          = НастройкаВарианта.ФормаВыбора;
		СтрокаТаблицы.ВыборГруппИЭлементов = НастройкаВарианта.ВыборГруппИЭлементов;
		
		НастройкаВарианта.ИдентификаторВФорме = СтрокаТаблицы.ПолучитьИдентификатор();
		
		ВыводитьТолькоФлажок = Ложь;
		Если ЗначениеЗаполнено(ЭлементКД.Представление) Тогда
			ВыводитьТолькоФлажок = Истина;
			Если ЭлементКД.Представление <> "1" Тогда
				СтрокаТаблицы.Заголовок = ЭлементКД.Представление;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементКД.ПредставлениеПользовательскойНастройки) Тогда
			СтрокаТаблицы.Заголовок = ЭлементКД.ПредставлениеПользовательскойНастройки;
		КонецЕсли;
		СтрокаТаблицы.ЗаголовокПереопределен = (СтрокаТаблицы.Заголовок <> СтрокаТаблицы.Представление);
		
		Если ЗначениеЗаполнено(ЭлементКД.ИдентификаторПользовательскойНастройки) Тогда
			Если ЭлементКД.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ Тогда
				СтрокаТаблицы.ИндексКартинкиДоступа = ?(ВыводитьТолькоФлажок, 1, 2);
			ИначеЕсли ЭлементКД.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный Тогда
				СтрокаТаблицы.ИндексКартинкиДоступа = ?(ВыводитьТолькоФлажок, 3, 4);
			Иначе
				СтрокаТаблицы.ИндексКартинкиДоступа = 5;
			КонецЕсли;
		Иначе
			СтрокаТаблицы.ИндексКартинкиДоступа = 5;
		КонецЕсли;
		
		Если ЭтоГруппа Тогда
			СтрокаТаблицы.ИндексКартинки = -1;
			ЗарегистрироватьЭлементыОтборов(Информация, НастройкаВарианта.Строки, СтрокаТаблицы.ПолучитьЭлементы());
		Иначе
			СтрокаТаблицы.Значение = НастройкаВарианта.Значение;
			Если НастройкаВарианта.ОграничиватьВыборУказаннымиЗначениями
				И ТипЗнч(НастройкаВарианта.ЗначенияДляВыбора) = Тип("СписокЗначений") Тогда
				Если СтрокаТаблицы.ВводСписком Тогда
					Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("СписокЗначений") Тогда
						Для Каждого ЭлементСписка Из СтрокаТаблицы.Значение Цикл
							ЭлементДляВыбора = НастройкаВарианта.ЗначенияДляВыбора.НайтиПоЗначению(ЭлементСписка.Значение);
							Если ЭлементДляВыбора <> Неопределено Тогда
								ЭлементСписка.Представление = ЭлементДляВыбора.Представление;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				Иначе
					СтрокаТаблицы.ФиксированныйСписокВыбора = Истина;
					ЭлементДляВыбора = НастройкаВарианта.ЗначенияДляВыбора.НайтиПоЗначению(СтрокаТаблицы.Значение);
					Если ЭлементДляВыбора <> Неопределено Тогда
						СтрокаТаблицы.ПредставлениеЗначения = ЭлементДляВыбора.Представление;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			СтрокаТаблицы.ТипЗначения = НастройкаВарианта.ОписаниеТипов;
			СтрокаТаблицы.ИндексКартинки = -1;
			Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("СтандартныйПериод") Тогда
				СтрокаТаблицы.Условие = ОтчетыКлиентСервер.ПолучитьВидСтандартногоПериода(СтрокаТаблицы.Значение);
				СтрокаТаблицы.ТипУсловия = Новый ОписаниеТипов("ПеречислениеСсылка.ДоступныеПериодыОтчета");
			Иначе
				СтрокаТаблицы.Условие = НастройкаВарианта.ВидСравнения;
				СтрокаТаблицы.ТипУсловия = Новый ОписаниеТипов("ВидСравненияКомпоновкиДанных");
			КонецЕсли;
		КонецЕсли;
		
		Дополнительно = Новый Структура("ОписаниеТипов, ОграничиватьВыборУказаннымиЗначениями,
		|ПараметрыВыбора, ФормаВыбора, ЗначенияДляВыбора");
		ЗаполнитьЗначенияСвойств(Дополнительно, НастройкаВарианта);
		СтрокаТаблицы.Дополнительно = Дополнительно;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОтключаемыеСвязи(Информация)
	ОтключаемыеСвязи.Очистить();
	Для Каждого ОписаниеСвязи Из Информация.ОтключаемыеСвязи Цикл
		Связь = ОтключаемыеСвязи.Добавить();
		ЗаполнитьЗначенияСвойств(Связь, ОписаниеСвязи);
		Если РасширенныйРежим = 1 Тогда
			Связь.ВедущийИдентификаторВФорме     = ОписаниеСвязи.Ведущий.ИдентификаторВФорме;
			Связь.ПодчиненныйИдентификаторВФорме = ОписаниеСвязи.Подчиненный.ИдентификаторВФорме;
		Иначе
			Связь.ВедущийИдентификаторВФорме     = ОписаниеСвязи.Ведущий.ИдентификаторЭлемента;
			Связь.ПодчиненныйИдентификаторВФорме = ОписаниеСвязи.Подчиненный.ИдентификаторЭлемента;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьЭлементыОформления(Информация, НаборСтрокВарианта = Неопределено, НаборСтрокФормы = Неопределено)
	Если НаборСтрокВарианта = Неопределено Тогда
		УсловияПоиска = Новый Структура("СтрокаДерева, ИмяКоллекции", Информация.ТекущаяСтрокаДерева, "УсловноеОформление");
		Найденные = Информация.НастройкиВарианта.Строки.НайтиСтроки(УсловияПоиска, Ложь);
		Если Найденные.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		НаборСтрокВарианта = Найденные[0].Строки;
	КонецЕсли;
	Если НаборСтрокФормы = Неопределено Тогда
		НаборСтрокФормы = Оформление.ПолучитьЭлементы();
	КонецЕсли;
	Для Каждого НастройкаВарианта Из НаборСтрокВарианта Цикл
		ЭлементКД = НастройкаВарианта.ЭлементКД;
		
		СтрокаТаблицы = НаборСтрокФормы.Добавить();
		СтрокаТаблицы.Использование   = ЭлементКД.Использование;
		СтрокаТаблицы.Представление   = НастройкаВарианта.Представление;
		СтрокаТаблицы.Заголовок       = СтрокаТаблицы.Представление;
		СтрокаТаблицы.ИдентификаторКД = НастройкаВарианта.ИдентификаторКД;
		СтрокаТаблицы.ИндексКартинки  = -1;
		
		НастройкаВарианта.ИдентификаторВФорме = СтрокаТаблицы.ПолучитьИдентификатор();
		
		ВыводитьТолькоФлажок = Ложь;
		Если ЗначениеЗаполнено(ЭлементКД.Представление) Тогда
			ВыводитьТолькоФлажок = Истина;
			Если ЭлементКД.Представление <> "1" Тогда
				СтрокаТаблицы.Заголовок = ЭлементКД.Представление;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементКД.ПредставлениеПользовательскойНастройки) Тогда
			СтрокаТаблицы.Заголовок = ЭлементКД.ПредставлениеПользовательскойНастройки;
		КонецЕсли;
		СтрокаТаблицы.ЗаголовокПереопределен = (СтрокаТаблицы.Заголовок <> СтрокаТаблицы.Представление);
		
		Если ЗначениеЗаполнено(ЭлементКД.ИдентификаторПользовательскойНастройки) Тогда
			Если ЭлементКД.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ Тогда
				СтрокаТаблицы.ИндексКартинкиДоступа = 2;
			ИначеЕсли ЭлементКД.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный Тогда
				СтрокаТаблицы.ИндексКартинкиДоступа = 4;
			Иначе
				СтрокаТаблицы.ИндексКартинкиДоступа = 5;
			КонецЕсли;
		Иначе
			СтрокаТаблицы.ИндексКартинкиДоступа = 5;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПеретаскиваниеВПределахТаблицы(ИсточникПеретаскивания, ИдентификаторЦели)
	// Определение параметров.
	ТаблицаИмя         = ИсточникПеретаскивания.ТаблицаИмя;
	ПеремещаемыеСтроки = ИсточникПеретаскивания.СтрокиДерева;
	ТекущаяСтрока      = ИсточникПеретаскивания.ТекущаяСтрока;
	
	ТаблицаРеквизит = ЭтотОбъект[ТаблицаИмя];
	СтрокаЦели = НайтиПоИдентификатору(ТаблицаРеквизит, ИдентификаторЦели);
	Родитель   = ПолучитьРодителя(ТаблицаИмя, СтрокаЦели);
	ТаблицаЭлемент = Элементы[ТаблицаИмя];
	ВыделенныеСтроки = ТаблицаЭлемент.ВыделенныеСтроки;
	ВыделенныеСтроки.Очистить();
	
	ПеремещенныеСтроки = Новый Массив; // Для платформы.
	
	Для Каждого ПеремещаемаяСтрока Из ПеремещаемыеСтроки Цикл
		ЭтоТекущая = (ПеремещаемаяСтрока = ТекущаяСтрока);
		
		// Перемещение.
		Результат = ТаблицыПолейПереместить(ТаблицаИмя, ПеремещаемаяСтрока, СтрокаЦели, Неопределено, Ложь);
		
		// Бантики (начало).
		Если ЭтоТекущая Тогда
			ТекущаяСтрока = Результат.СтрокаДерева;
		КонецЕсли;
		ПеремещенныеСтроки.Добавить(Результат.СтрокаДерева); 
	КонецЦикла;
	
	// Бантики (завершение).
	ТаблицаЭлемент.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	Для Каждого СтрокаТаблицы Из ПеремещенныеСтроки Цикл
		НоваяСтрокаИдентификатор = СтрокаТаблицы.ПолучитьИдентификатор();
		Если ВыделенныеСтроки.Найти(НоваяСтрокаИдентификатор) = Неопределено Тогда
			ВыделенныеСтроки.Добавить(НоваяСтрокаИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЭлемент.Развернуть(Родитель.ПолучитьИдентификатор(), Истина);
	
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура ПеретаскиваниеВыбранныхПолейВСортировки(ИсточникПеретаскивания, ИдентификаторЦели)
	// Определение параметров источника.
	ИсточникТаблицаИмя = ИсточникПеретаскивания.ТаблицаИмя;
	ИсточникТаблица    = ЭтотОбъект[ИсточникТаблицаИмя];
	ИсточникУзелКД     = ТаблицыПолейНайтиУзел(ЭтотОбъект, ИсточникТаблицаИмя);
	
	// Определение параметров приемника.
	ЦельТаблицаИмя = "Сортировка";
	ЦельТаблица = ЭтотОбъект[ЦельТаблицаИмя];
	ЦельУзелКД = ТаблицыПолейНайтиУзел(ЭтотОбъект, ЦельТаблицаИмя);
	
	ПередЧемВставить   = НайтиПоИдентификатору(ЦельТаблица, ИдентификаторЦели);
	ПередЧемВставитьКД = НайтиОбъектКД(ЦельУзелКД, ПередЧемВставить);
	
	ЦельРодитель   = ПолучитьРодителя(ЦельТаблицаИмя, ПередЧемВставить);
	ЦельРодительКД = НайтиОбъектКД(ЦельУзелКД, ЦельРодитель);
	
	КудаВставить   = ПолучитьЭлементы(ЦельТаблица, ЦельРодитель);
	КудаВставитьКД = ПолучитьЭлементыКД(ЦельУзелКД, ЦельРодительКД);
	
	Если ПередЧемВставитьКД = Неопределено Тогда
		Индекс   = Неопределено;
		ИндексКД = Неопределено;
	Иначе
		Индекс   = КудаВставить.Индекс(ПередЧемВставить) + 1;
		ИндексКД = КудаВставитьКД.Индекс(ПередЧемВставитьКД) + 1;
	КонецЕсли;
	
	ТипЭлемента = Тип("ЭлементПорядкаКомпоновкиДанных");
	
	// Вывод результата.
	ИсточникТекущаяСтрока = ИсточникПеретаскивания.ТекущаяСтрока;
	ЦельТекущаяСтрока     = Неопределено;
	ПоляКоторыеНеУдалосьДобавить = Новый Массив;
	
	// Обход источника.
	ПеремещенныеСтроки = Новый Массив;
	Обработанные = Новый Массив;
	
	Коллекции = Новый Массив;
	Количество = 0;
	ТекущаяКоллекция = ИсточникПеретаскивания.СтрокиДерева;
	Пока Истина Цикл
		// Обход текущей коллекции.
		Для Каждого ИсточникСтрокаТаблицы Из ТекущаяКоллекция Цикл
			Если ИсточникСтрокаТаблицы.ТипНастройки = "АвтоВыбранноеПоле" Тогда
				Продолжить;
			КонецЕсли;
			Если Обработанные.Найти(ИсточникСтрокаТаблицы) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Обработанные.Добавить(ИсточникСтрокаТаблицы);
			
			// Регистрация новой коллекции к обработке.
			Если ИсточникСтрокаТаблицы.ЭтоГруппа Тогда
				Коллекции.Добавить(ИсточникСтрокаТаблицы.ПолучитьЭлементы());
				Количество = Количество + 1;
				Продолжить;
			КонецЕсли;
			
			// Анализ строки источника.
			ЭтоТекущая = (ИсточникСтрокаТаблицы = ИсточникТекущаяСтрока);
			
			ИсточникОбъектКД = НайтиОбъектКД(ИсточникУзелКД, ИсточникСтрокаТаблицы);
			
			ДоступноеПолеКД = ЦельУзелКД.ДоступныеПоляПорядка.НайтиПоле(ИсточникОбъектКД.Поле);
			Если ДоступноеПолеКД = Неопределено Тогда
				ПоляКоторыеНеУдалосьДобавить.Добавить(ИсточникСтрокаТаблицы.Представление);
				Продолжить;
			КонецЕсли;
			
			// Добавление строки приемника.
			Если Индекс = Неопределено Тогда
				НоваяСтрока = КудаВставить.Добавить();
			Иначе
				НоваяСтрока = КудаВставить.Вставить(Индекс);
				Индекс = Индекс + 1;
			КонецЕсли;
			
			Если ИндексКД = Неопределено Тогда
				НовыйЭлементКД = КудаВставитьКД.Добавить(ТипЭлемента);
			Иначе
				НовыйЭлементКД = КудаВставитьКД.Вставить(ИндексКД, ТипЭлемента);
				ИндексКД = ИндексКД + 1;
			КонецЕсли;
			
			НовыйЭлементКД.Использование     = Истина;
			НовыйЭлементКД.Поле              = ДоступноеПолеКД.Поле;
			НовыйЭлементКД.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
			
			НоваяСтрока.ИдентификаторКД = ЦельУзелКД.ПолучитьИдентификаторПоОбъекту(НовыйЭлементКД);
			НоваяСтрока.Использование   = НовыйЭлементКД.Использование;
			НоваяСтрока.Представление   = ДоступноеПолеКД.Заголовок;
			НоваяСтрока.Направление     = НовыйЭлементКД.ТипУпорядочивания;
			НоваяСтрока.ИндексКартинки  = -1;
			
			Если ЭтоТекущая Или ЦельТекущаяСтрока = Неопределено Тогда
				ЦельТекущаяСтрока = НоваяСтрока;
			КонецЕсли;
			
			ПеремещенныеСтроки.Добавить(НоваяСтрока);
			
		КонецЦикла;
		
		// Переход к следующей коллекции.
		Если Количество = 0 Тогда
			Прервать;
		КонецЕсли;
		Количество = Количество - 1;
		ТекущаяКоллекция = Коллекции[0];
		Коллекции.Удалить(0);
	КонецЦикла;
	
	// Бантики (завершение).
	ЦельТаблицаЭлемент = Элементы[ЦельТаблицаИмя];
	ТекущийЭлемент = ЦельТаблицаЭлемент;
	ЦельТаблицаЭлемент.ВыделенныеСтроки.Очистить();
	Если ЦельТекущаяСтрока <> Неопределено Тогда
		ЦельТаблицаЭлемент.ТекущаяСтрока = ЦельТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	Для Каждого НоваяСтрока Из ПеремещенныеСтроки Цикл
		НоваяСтрокаИдентификатор = НоваяСтрока.ПолучитьИдентификатор();
		Если ЦельТаблицаЭлемент.ВыделенныеСтроки.Найти(НоваяСтрокаИдентификатор) = Неопределено Тогда
			ЦельТаблицаЭлемент.ВыделенныеСтроки.Добавить(НоваяСтрокаИдентификатор);
		КонецЕсли;
	КонецЦикла;
	// }
	
	ЦельТаблицаЭлемент.Развернуть(ЦельРодитель.ПолучитьИдентификатор(), Истина);
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	Если РасширенныйРежим = 1 Тогда
		ВариантИзменен = Истина;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Обновить", 3, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Обновить()
	БыстрыеНастройкиЗаполнитьКлиент(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПеретаскиваниеСортировокВВыбранныеПоля(ИсточникПеретаскивания, ИдентификаторЦели)
	ТаблицыПолейУдалить(ИсточникПеретаскивания.ТаблицаИмя, ИсточникПеретаскивания.СтрокиДерева, Ложь);
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Функция ЗарегистрироватьНачалоПеретаскивания(ТаблицаИмя, ИсточникПеретаскивания = Неопределено)
	Сценарий = Новый Структура;
	Сценарий.Вставить("Шаги", "ОпределитьВыделенныеСтроки");
	Сценарий.Вставить("Действие", "НачалоПеретаскивания");
	Сценарий.Вставить("ТаблицаИмя", ТаблицаИмя);
	
	ЗапуститьСценарий(Сценарий);
	
	Если ЗначениеЗаполнено(Сценарий.ПричинаОтказа) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИсточникПеретаскивания = Новый Структура("ТаблицаИмя, СтрокиДерева, ТекущаяСтрока");
	ЗаполнитьЗначенияСвойств(ИсточникПеретаскивания, Сценарий);
	ПеременныеКлиента.Вставить("ИсточникПеретаскивания", ИсточникПеретаскивания);
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПроверитьВозможностьПеретаскивания(ТаблицаИмя, ИдентификаторЦели, ПараметрыПеретаскивания)
	ИсточникПеретаскивания = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПеременныеКлиента, "ИсточникПеретаскивания");
	Если ИсточникПеретаскивания = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	ИначеЕсли ИсточникПеретаскивания.ТаблицаИмя = ТаблицаИмя Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		Если ИдентификаторЦели <> Неопределено Тогда
			СтрокаРодитель = ЭтотОбъект[ТаблицаИмя].НайтиПоИдентификатору(ИдентификаторЦели);
			Пока СтрокаРодитель <> Неопределено И Не СтрокаРодитель.ЭтоРаздел Цикл
				Если ИсточникПеретаскивания.СтрокиДерева.Найти(СтрокаРодитель) <> Неопределено Тогда
					ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
					Прервать;
				КонецЕсли;
				СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
			КонецЦикла;
		КонецЕсли;
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Выбор;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМодифицированность()
	ПользовательскиеНастройкиМодифицированы = Истина;
	Если РасширенныйРежим = 1 Тогда
		ВариантИзменен = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
		ПодключитьОбработчикОжидания("Обновить", 3, Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти