#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ПовторноеЧтение = (Кэш <> Неопределено);
	
	// Чтение хранилища значений
	Если ТекущийОбъект.ПисьмоВФорматеHTML Тогда
		СтруктураВложенийПисьмаВФорматеHTML = ТекущийОбъект.КартинкиПисьмаВФорматеHTML.Получить();
		Если СтруктураВложенийПисьмаВФорматеHTML = Неопределено Тогда
			СтруктураВложенийПисьмаВФорматеHTML = Новый Структура;
		КонецЕсли;
		ТекстПисьмаФорматированныйДокумент.УстановитьHTML(ТекущийОбъект.ТекстПисьмаВФорматеHTML, СтруктураВложенийПисьмаВФорматеHTML);
	КонецЕсли;
	
	// Перезаполнение очищаемых данных формы при повторном чтении объекта из БД.
	Если ПовторноеЧтение Тогда
		ПрочитатьПользовательскоеПредставлениеФорматов();
		ПрочитатьРасписаниеРегламентногоЗадания();
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Отчеты Цикл
		Строка.НеОтправлятьПустой = Не Строка.ОтправлятьЕслиПустой;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	УстановитьУсловноеОформление();
	
	ТекстОшибкиПриОткрытии = РассылкаОтчетовПовтИсп.ТекстОшибкиПроверкиПраваДобавления();
	Если ЗначениеЗаполнено(ТекстОшибкиПриОткрытии) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПометкаУдаления Тогда
		ЭтотОбъект.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Удаление варианта "В папку", если не используется интеграция с подсистемой "РаботаСФайлами".
	Если ТипЗнч(Объект.Папка) = Тип("Неопределено") Или ТипЗнч(Объект.Папка) = Тип("Строка") Тогда
		Элементы.ДругойСпособДоставки.СписокВыбора.Удалить(0);
	КонецЕсли;
	
	// Удаление варианта "В сетевой каталог", если режим работы в модели сервиса.
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		СпособДоставкиСетевойКаталог = Элементы.ДругойСпособДоставки.СписокВыбора.НайтиПоЗначению("ИспользоватьСетевойКаталог");
		Элементы.ДругойСпособДоставки.СписокВыбора.Удалить(СпособДоставкиСетевойКаталог);
	КонецЕсли;
	
	Если Не ПравоДоступа("ЖурналРегистрации", Метаданные) Тогда
		Элементы.КомандаСобытияРассылки.Видимость = Ложь;
		Элементы.СобытияРассылки.Видимость = Ложь;
	КонецЕсли;
	
	ЗначениеКопирования = Параметры.ЗначениеКопирования;
	
	// Используется при загрузке и записи настроек выбранного отчета.
	ИдентификаторТекущейСтрокиТаблицыОтчетов = -1;
	
	// Кэш проверки
	ЭтоНовый = Объект.Ссылка.Пустая();
	СозданКопированием = Не ЗначениеКопирования.Пустая();
	
	// Добавление отчетов в табличную часть.
	Если Параметры.Свойство("ПрисоединяемыеОтчеты") И ТипЗнч(Параметры.ПрисоединяемыеОтчеты) = Тип("Массив") Тогда
		Модифицированность = Истина;
		ДобавитьНастройкиОтчетов(Параметры.ПрисоединяемыеОтчеты);
	КонецЕсли;
	
	Кэш = ПолучитьКэш();
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	
	РассылкаБылаПерсонализирована = Объект.Персонализирована;
	
	// Чтение
	ПрочитатьПользовательскоеПредставлениеФорматов();
	ЗаполнитьПустыеШаблоныСтандартными(Объект);
	
	Если ЭтоНовый И Не СозданКопированием Тогда
		ВариантРасписания = Неопределено;
		Параметры.Свойство("ВариантРасписания", ВариантРасписания);
		ЗаполнитьРасписаниеПоВарианту(ВариантРасписания);
	Иначе
		ПрочитатьРасписаниеРегламентногоЗадания();
	КонецЕсли;
	
	// Заполнение автора рассылки
	Если ЭтоНовый Тогда
		// Автор рассылки
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		Объект.Автор = ТекущийПользователь;
		Если Не ЗначениеЗаполнено(Объект.Автор) Тогда
			Отказ = Истина;
			
			ПараметрыЖурнала = Новый Структура;
			ПараметрыЖурнала.Вставить("ИмяСобытия", НСтр("ru = 'Рассылка отчетов. Открытие формы элемента'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			ПараметрыЖурнала.Вставить("Данные", Неопределено);
			ПараметрыЖурнала.Вставить("Метаданные", Метаданные.Справочники.РассылкиОтчетов);
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка заполнения автора рассылки:
				|Пользователь ""%1"" (%2) не может быть автором.'"),
				Строка(ТекущийПользователь),
				Строка(ТипЗнч(ТекущийПользователь)));
			
			РассылкаОтчетов.ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка, Текст);
			
			Возврат;
		КонецЕсли;
		
		// Имя архива
		Объект.ИмяАрхива = Кэш.Шаблоны.ИмяАрхива;
	КонецЕсли;
	
	// Позволяет видеть и управлять некоторыми защищенными параметры рассылки.
	РассылкуРедактируетАвтор = (Объект.Автор = Пользователи.ТекущийПользователь());
	
	// Доступность кнопки добавления дополнительного отчета.
	Элементы.ОтчетыДобавитьДополнительныйОтчет.Доступность = ?(Кэш.ПустоеЗначениеОтчета = Неопределено, Истина, Ложь);
	// СКэш.ПустоеЗначениеОтчета = Неопределено" когда тип реквизита "отчет" составной, 
	//   соответственно используется интеграция с подсистемой Дополнительные отчеты и обработки.
	
	// Доступность автора рассылки.
	Элементы.Автор.Доступность = Пользователи.ЭтоПолноправныйПользователь();
	
	// Список форматов с пометками для форматов по умолчанию.
	СписокФорматовПоУмолчанию = РассылкаОтчетовПовтИсп.СписокФорматов();
	
	// Представление списка форматов по умолчанию.
	СписокФорматовПоУмолчаниюПредставление = "";
	Для Каждого ЭлементСписка Из СписокФорматовПоУмолчанию Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокФорматовПоУмолчаниюПредставление = СписокФорматовПоУмолчаниюПредставление + ?(СписокФорматовПоУмолчаниюПредставление = "", "", ", ") + Строка(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Список редактирования форматов.
	СписокФорматов = СписокФорматовПоУмолчанию.Скопировать();
	
	// Представление форматов по умолчанию в пределах рассылки.
	ФорматыПоУмолчанию = "";
	Найденные = Объект.ФорматыОтчетов.НайтиСтроки(Новый Структура("Отчет", Кэш.ПустоеЗначениеОтчета));
	Если Найденные.Количество() = 0 Тогда
		ФорматыПоУмолчанию = СписокФорматовПоУмолчаниюПредставление;
	Иначе
		Для Каждого СтрокаФормат Из Найденные Цикл
			ФорматыПоУмолчанию = ФорматыПоУмолчанию + ?(ФорматыПоУмолчанию = "", "", ", ") + Строка(СтрокаФормат.Формат);
		КонецЦикла;
	КонецЕсли;
	
	// Вложения.
	Если СтруктураВложенийПисьмаВФорматеHTML = Неопределено Тогда
		СтруктураВложенийПисьмаВФорматеHTML = Новый Структура;
	КонецЕсли;
	
	// Для списков получателей и исключенных используется одна табличная часть.
	Элементы.ПустыеНастройки.ОтборСтрок = Новый ФиксированнаяСтруктура("ИндексКартинки", 200);
	
	// Список выбора почтовых адресов автора.
	ПолучитьСписокПочтовыхАдресов(Объект.Автор, Элементы.ВидПочтовогоАдресаАвтора.СписокВыбора);
	
	// Список выбора почтовых адресов автора.
	ПодключитьКэшНастроекЭлектроннойПочты();
	
	// Чтение настроек отчетов из объекта копирования.
	Если СозданКопированием Тогда
		ПрочитатьНастройкиОтчетовОбъектаКопирования();
	КонецЕсли;
	
	// Активизация первой строки
	Если Объект.Отчеты.Количество() > 0 И ИдентификаторТекущейСтрокиТаблицыОтчетов = -1 Тогда
		СтрокаОтчеты = Объект.Отчеты[0];
		ИдентификаторСтроки = СтрокаОтчеты.ПолучитьИдентификатор();
		ТекстОшибки = ОтчетыПриАктивизацииСтрокиНаСервере(ИдентификаторСтроки);
		Если ТекстОшибки <> "" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.Отчеты[0].Представление");
		КонецЕсли;
	КонецЕсли;
	
	ВидимостьДоступностьКорректность(ЭтотОбъект);
	
	ЗафиксироватьЗначенияРеквизитовДоИзменения();
	
	СтандартныеПодсистемыСервер.УстановитьОтображениеЗаголовковГрупп(ЭтотОбъект);
	Для Каждого Строка Из Объект.Отчеты Цикл
		Строка.НеОтправлятьПустой = Не Строка.ОтправлятьЕслиПустой;
	КонецЦикла;
	
	Если Не ЭтоНовый Тогда
		УстановитьПривилегированныйРежим(Истина);
		Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка, "ПарольАрхива, FTPПароль");
		УстановитьПривилегированныйРежим(Ложь);
		ПарольАрхива = ?(ЗначениеЗаполнено(Пароли.ПарольАрхива), ЭтотОбъект.УникальныйИдентификатор, "");
		FTPПароль = ?(ЗначениеЗаполнено(Пароли.FTPПароль), ЭтотОбъект.УникальныйИдентификатор, "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ФормаБылаМодифицированаНаСервере Тогда
		Модифицированность = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстОшибкиПриОткрытии) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, ТекстОшибкиПриОткрытии);
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстВсплывающегоОповещенияПриОткрытии) Тогда
		ПоказатьОповещениеПользователя(ТекстВсплывающегоОповещенияПриОткрытии, , , БиблиотекаКартинок.ВыполнитьЗадачу)
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// Проверка данных, которые выведены через реквизиты самой формы.
	Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Не введено наименование'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Наименование");
	КонецЕсли;
	Если Объект.ИспользоватьЭлектроннуюПочту И Не Объект.Личная Тогда
		Если Не ЗначениеЗаполнено(ТипПолучателейРассылки) Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Не выбран тип получателей'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ТипПолучателейРассылки");
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Подготовлена Тогда
		Если Объект.Отчеты.Количество() = 0 Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Не выбрано ни одного отчета'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Отчеты");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ПериодичностьРасписания) Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Не выбрана периодичность запуска'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ПериодичностьРасписания");
		КонецЕсли;
		
		Если Объект.ИспользоватьFTPРесурс Тогда
			Если Не ЗначениеЗаполнено(Объект.FTPСервер)
				Или Не ЗначениеЗаполнено(Объект.FTPПорт)
				Или Не ЗначениеЗаполнено(Объект.FTPКаталог) Тогда
				Отказ = Истина;
				ТекстСообщения = НСтр("ru = 'Не введен FTP адрес'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "FTPСерверИКаталог");
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ИспользоватьСетевойКаталог Тогда
			Если Не ЗначениеЗаполнено(Объект.СетевойКаталогWindows) Тогда
				Отказ = Истина;
				ТекстСообщения = НСтр("ru = 'Не введен сетевой каталог Windows'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.СетевойКаталогWindows");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Объект.СетевойКаталогLinux) Тогда
				Отказ = Истина;
				ТекстСообщения = НСтр("ru = 'Не введен сетевой каталог Linux'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.СетевойКаталогLinux");
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ИспользоватьПапку Тогда
			Если Не ЗначениеЗаполнено(Объект.Папка) Тогда
				Отказ = Истина;
				ТекстСообщения = НСтр("ru = 'Не выбрана папка'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Папка");
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ИспользоватьЭлектроннуюПочту Тогда
			Если Объект.Личная Тогда
				Если Не ЗначениеЗаполнено(Объект.ВидПочтовогоАдресаПолучателей) Тогда
					Отказ = Истина;
					ТекстСообщения = НСтр("ru = 'Не выбран почтовый адрес'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВидПочтовогоАдресаПолучателей");
				КонецЕсли;
			Иначе
				Если Не ПолучателиУказаны(Объект.Получатели) Тогда
					Отказ = Истина;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Объект.ВидПочтовогоАдресаПолучателей) Тогда
					Отказ = Истина;
					ТекстСообщения = НСтр("ru = 'Не выбран тип почтового адреса получателей'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПолучателиРассылки");
				КонецЕсли;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
				Отказ = Истина;
				ТекстСообщения = НСтр("ru = 'Не выбрана учетная запись для отправки'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.УчетнаяЗапись");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если ПараметрыЗаписи = Неопределено Тогда
		ПараметрыЗаписи = Новый Структура;
	КонецЕсли;
	Если Не ПараметрыЗаписи.Свойство("Шаг") Тогда
		Отказ = Истина;
		ЗаписатьНаКлиенте(Неопределено, ПараметрыЗаписи);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Запись настроек текущей строки.
	Если ИдентификаторТекущейСтрокиТаблицыОтчетов <> -1 Тогда
		ЗаписатьНастройкиСтрокиОтчеты(ИдентификаторТекущейСтрокиТаблицыОтчетов);
	КонецЕсли;
	
	// Далее выполняются следующие действия:
	// [1] Сохранение настроек, сделанных пользователем.
	//     Помещение измененных настроек строк в настройки записываемого объекта (хранилище значения).
	//     Анализ выполняется для всех отчетов, если пользователь менял настройки.
	// [2] Поиск незаполненных но обязательных для заполнения настроек.
	//     Анализ выполняется для СКД отчетов, если рассылка подготовлена.
	ПроверитьОбязательные = Объект.Подготовлена;
	// [3] Поиск персонализированных полей если эта рассылка не персонализирована.
	//     Анализ выполняется для всех отчетов, если пользователь сменил вид рассылки с персонализированной на любой
	//     другой.
	ПроверитьПерсонализированные = (Не Объект.Персонализирована И РассылкаБылаПерсонализирована);
	Для Каждого СтрокаОтчеты Из Объект.Отчеты Цикл
		
		ОбъектСтрокаОтчеты = ТекущийОбъект.Отчеты.Получить(СтрокаОтчеты.НомерСтроки-1);
		
		Если СтрокаОтчеты.ВнесеныИзменения Тогда
			// [1], [2] и [3] Чтение неинициализированных настроек.
			ПользовательскиеНастройки = ПолучитьИзВременногоХранилища(СтрокаОтчеты.АдресНастроек);
			
			// [1] Запись настроек.
			ОбъектСтрокаОтчеты.Настройки = Новый ХранилищеЗначения(ПользовательскиеНастройки, Новый СжатиеДанных(9));
			
			Если Не ПроверитьОбязательные И Не ПроверитьПерсонализированные Тогда
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			Если Не ПроверитьОбязательные И Не ПроверитьПерсонализированные Тогда
				Продолжить;
			КонецЕсли;
			
			// [2] и [3] Чтение неинициализированных настроек.
			Если ЭтоАдресВременногоХранилища(СтрокаОтчеты.АдресНастроек) Тогда
				ПользовательскиеНастройки = ПолучитьИзВременногоХранилища(СтрокаОтчеты.АдресНастроек);
			Иначе
				ПользовательскиеНастройки = ОбъектСтрокаОтчеты.Настройки.Получить();
			КонецЕсли;
			
		КонецЕсли;
		
		// [2] и [3] Инициализация настроек.
		ПараметрыОтчета = ИнициализироватьОтчет(СтрокаОтчеты, Истина, ПользовательскиеНастройки, Ложь);
		НастройкиОтчета = ?(СтрокаОтчеты.СКД, ПараметрыОтчета.КомпоновщикНастроекКД, ПользовательскиеНастройки);
		
		// [3] Заполнение переменных.
		Если ПроверитьПерсонализированные Тогда
			ОтчетПерсонализирован = Ложь;
		КонецЕсли;
		
		// [2] и [3] Анализ СКД отчетов.
		Если СтрокаОтчеты.СКД Тогда
			// [2] Заполнение переменных.
			ЗаполненыВсеОбязательныеНастройки = Истина;
			
			НастройкиКД = НастройкиОтчета.Настройки;
			ПользовательскиеНастройкиКД = НастройкиОтчета.ПользовательскиеНастройки;
			
			Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройкиКД.Элементы Цикл
				Если ТипЗнч(ПользовательскаяНастройка) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					// [3] Проверка значения настроек.
					Если ПроверитьПерсонализированные
						И ПользовательскаяНастройка.ПравоеЗначение = "[Получатель]"
						И ПользовательскаяНастройка.Использование Тогда
						ОтчетПерсонализирован = Истина;
					КонецЕсли;
				ИначеЕсли ТипЗнч(ПользовательскаяНастройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					// [3] Проверка значения настроек.
					Если ПроверитьПерсонализированные
						И ПользовательскаяНастройка.Значение = "[Получатель]"
						И ПользовательскаяНастройка.Использование Тогда
						ОтчетПерсонализирован = Истина;
					КонецЕсли;
					
					// [2] Поиск и проверка доступной настройки.
					Идентификатор = ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки;
					ОбщаяНастройка = ОтчетыКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(НастройкиКД, Идентификатор);
					Если ОбщаяНастройка = Неопределено Тогда 
						Продолжить;
					КонецЕсли;
					ДоступнаяНастройка = ОтчетыКлиентСервер.НайтиДоступнуюНастройку(НастройкиКД, ОбщаяНастройка);
					Если ДоступнаяНастройка = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Если Не ДоступнаяНастройка.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда
						И Не ПользовательскаяНастройка.Использование Тогда
						Продолжить;
					КонецЕсли;
					Если ДоступнаяНастройка.ЗапрещатьНезаполненныеЗначения И Не ЗначениеЗаполнено(ПользовательскаяНастройка.Значение) Тогда
						ЗаполненыВсеОбязательныеНастройки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// [2] Вывод ошибки.
			Если Не ЗаполненыВсеОбязательныеНастройки Тогда
				Отказ = Истина;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для отчета ''%1'' заполнены не все настройки, обязательные для заполнения. Необходимо заполнить все обязательные настройки или снять флажок ''Подготовлена''.'"),
					Строка(СтрокаОтчеты.Отчет));
				Поле = "Отчеты["+ Формат(ТекущийОбъект.Отчеты.Индекс(ОбъектСтрокаОтчеты), "ЧН=0; ЧГ=0") +"].Представление";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ТекущийОбъект, Поле);
			КонецЕсли;
		КонецЕсли; // СтрокаОтчеты.СКД
		
		// [3] Анализ обычных отчетов.
		Если ПроверитьПерсонализированные Тогда
			// [3] Анализ обычных отчетов.
			Если ТипЗнч(НастройкиОтчета) = Тип("ТаблицаЗначений") Тогда
				Найденные = НастройкиОтчета.НайтиСтроки(Новый Структура("Значение, Использование", "[Получатель]", Истина));
				Если Найденные.Количество() > 0 Тогда
					ОтчетПерсонализирован = Истина;
				КонецЕсли;
			КонецЕсли;
			// [3] Вывод ошибки.
			Если ОтчетПерсонализирован Тогда
				Отказ = Истина;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для отчета ''%1'' задан отбор по получателям рассылки. Необходимо отключить отбор по получателям или изменить вид рассылки на ''Свой отчет для каждого получателя''.'"),
					Строка(СтрокаОтчеты.Отчет));
				Поле = "Отчеты["+ Формат(ТекущийОбъект.Отчеты.Индекс(ОбъектСтрокаОтчеты), "ЧН=0; ЧГ=0") +"].Представление";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ТекущийОбъект, Поле);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; // Для Каждого СтрокаОтчеты Из Объект.Отчеты Цикл
	
	ТекущийОбъект.КартинкиПисьмаВФорматеHTML = Неопределено;
	Если ТекущийОбъект.ПисьмоВФорматеHTML Тогда
		ТекущийОбъект.ТекстПисьма = СокрЛП(ТекстПисьмаФорматированныйДокумент.ПолучитьТекст());
		Если ТекущийОбъект.ТекстПисьма = "" Тогда
			ТекущийОбъект.ТекстПисьмаВФорматеHTML = "";
		Иначе
			ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекущийОбъект.ТекстПисьмаВФорматеHTML, СтруктураВложенийПисьмаВФорматеHTML);
			Если ТипЗнч(СтруктураВложенийПисьмаВФорматеHTML) = Тип("Структура")
				И СтруктураВложенийПисьмаВФорматеHTML.Количество() > 0 Тогда
				ТекущийОбъект.КартинкиПисьмаВФорматеHTML = Новый ХранилищеЗначения(СтруктураВложенийПисьмаВФорматеHTML, Новый СжатиеДанных(9));
			КонецЕсли;
			ТекущийОбъект.ТекстПисьма = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
		КонецЕсли;
	КонецЕсли;
	
	// Записываем значения
	Если ЗначениеЗаполнено(ТипПолучателейРассылки) Тогда
		Найденные = ТаблицаТиповПолучателей.НайтиСтроки(Новый Структура("ТипПолучателей", ТипПолучателейРассылки));
		Если Найденные.Количество() = 1 Тогда
			ТекущийОбъект.ТипПолучателейРассылки = Найденные[0].ИОМД;
		Иначе
			ТекущийОбъект.ТипПолучателейРассылки = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
		КонецЕсли;
	Иначе
		ТекущийОбъект.ТипПолучателейРассылки = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
	КонецЕсли;
	
	// Все операции с регламентными заданиями размещены в модуле объекта.
	Если Объект.ПериодичностьРасписания <> Перечисления.ПериодичностиРасписанийРассылокОтчетов.Произвольное Тогда
		Расписание.ВремяКонца = Расписание.ВремяНачала + 600;
	КонецЕсли;
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Расписание", Расписание);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПарольАрхиваИзменен Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, ПарольАрхива, "ПарольАрхива");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если FTPПарольИзменен Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, FTPПароль, "FTPПароль");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// Перезаполнение таблиц формы, связанных с таблицами объектов (т.к. таблицы объектов уже перезаполнились).
	ПрочитатьПользовательскоеПредставлениеФорматов();
	ОтчетыПриАктивизацииСтрокиНаСервере(ИдентификаторТекущейСтрокиТаблицыОтчетов);
	
	// Обновление изначальных значений реквизитов в кэше.
	ЗафиксироватьЗначенияРеквизитовДоИзменения();
	Для Каждого Строка Из Объект.Отчеты Цикл
		Строка.НеОтправлятьПустой = Не Строка.ОтправлятьЕслиПустой;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики ожидания

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеФоновогоЗадания()
	РассылкаОтчетовКлиент.ПроверитьВыполнениеФоновогоЗадания(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодготовленаПриИзменении(Элемент)
	ВидимостьДоступностьКорректность(ЭтотОбъект, "Подготовлена");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница "Расписание"

&НаКлиенте
Процедура ВыполнятьПоРасписаниюПриИзменении(Элемент)
	ВидимостьДоступностьКорректность(ЭтотОбъект, "ВыполнятьПоРасписанию");
КонецПроцедуры

&НаКлиенте
Процедура МесяцыПриИзменении(Элемент)
	Если Элемент <> Неопределено Тогда
		Расписание.Месяцы = ИзменитьСоставМассива(ЭтотОбъект[Элемент.Имя], Кэш.Соответствия.Месяцы[Элемент.Имя], Расписание.Месяцы);
	КонецЕсли;
	ВидимостьДоступностьКорректность(ЭтотОбъект, "Месяцы");
КонецПроцедуры

&НаКлиенте
Процедура ДниНеделиПриИзменении(Элемент)
	Если Элемент <> Неопределено Тогда
		Расписание.ДниНедели = ИзменитьСоставМассива(ЭтотОбъект[Элемент.Имя], Кэш.Соответствия.ДниНедели[Элемент.Имя], Расписание.ДниНедели);
	КонецЕсли;
	ВидимостьДоступностьКорректность(ЭтотОбъект, "ДниНедели");
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписание(Команда)
	ИзменитьРасписаниеВДиалоге();
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьРасписанияПриИзменении(Элемент)
	ВидимостьДоступностьКорректность(ЭтотОбъект, "ПериодичностьРасписания");
	Если Объект.ПериодичностьРасписания = ПредопределенноеЗначение("Перечисление.ПериодичностиРасписанийРассылокОтчетов.Произвольное") Тогда
		ИзменитьРасписаниеВДиалоге();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНачалоКонецМесяцаНажатие(Элемент)
	Если Расписание.ДеньВМесяце = 0 Тогда
		ДеньВМесяце = 1;
		Расписание.ДеньВМесяце = -1;
	Иначе
		Расписание.ДеньВМесяце = -Расписание.ДеньВМесяце;
	КонецЕсли;
	Модифицированность = Истина;
	ВидимостьДоступностьКорректность(ЭтотОбъект, "НачалоКонецМесяца");
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаПриИзменении(Элемент)
	Расписание.ВремяНачала = ВремяНачала;
	ВидимостьДоступностьКорректность(ЭтотОбъект, "ВремяНачала");
КонецПроцедуры

&НаКлиенте
Процедура ПериодПовтораДнейПриИзменении(Элемент)
	Расписание.ПериодПовтораДней = ПериодПовтораДней;
	ВидимостьДоступностьКорректность(ЭтотОбъект, "ПериодПовтораДней");
КонецПроцедуры

&НаКлиенте
Процедура ДеньМесяцаПриИзменении(Элемент)
	Расписание.ДеньВМесяце = ?(Расписание.ДеньВМесяце >= 0, ДеньВМесяце, -ДеньВМесяце);
	ВидимостьДоступностьКорректность(ЭтотОбъект, "ДеньВМесяце");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница "Доставка"

&НаКлиенте
Процедура ТипПолучателейРассылкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = ТипПолучателейРассылки Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Найденные = ТаблицаТиповПолучателей.НайтиСтроки(Новый Структура("ТипПолучателей", ВыбранноеЗначение));
	Если Найденные.Количество() <> 1 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	// Очистка получателей (если нужно).
	Если Объект.Получатели.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		
		СтрокаВопроса = НСтр("ru = 'Для продолжения необходимо очистить список получателей.'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Очистить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		Обработчик = Новый ОписаниеОповещения("ТипПолучателейРассылкиОбработкаВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(Обработчик, СтрокаВопроса, Кнопки, 60, КодВозвратаДиалога.Да);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипПолучателейРассылкиПриИзменении(Элемент)
	Найденные = ТаблицаТиповПолучателей.НайтиСтроки(Новый Структура("ТипПолучателей", ТипПолучателейРассылки));
	Если Найденные.Количество() = 1 Тогда
		СтрокаПолучатель = Найденные[0];
		Объект.ТипПолучателейРассылки = СтрокаПолучатель.ИОМД;
		Объект.ВидПочтовогоАдресаПолучателей = СтрокаПолучатель.ОсновнойВидКИ;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипПолучателейРассылкиОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВидПочтовогоАдресаАвтораОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.Автор);
КонецПроцедуры

&НаКлиенте
Процедура FTPСерверИКаталогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыПроизвольнойФормы = Новый Структура("Сервер, Каталог, Порт, Логин, ПассивноеСоединение");
	Для Каждого КлючИЗначение Из ПараметрыПроизвольнойФормы Цикл
		ПараметрыПроизвольнойФормы[КлючИЗначение.Ключ] = Объект["FTP" + КлючИЗначение.Ключ];
	КонецЦикла;
	ПараметрыПроизвольнойФормы.Вставить("Пароль", FTPПароль);
	ПараметрыПроизвольнойФормы.Вставить("Заголовок", НСтр("ru = '<Укажите получателя>'"));
	
	ОткрытьФорму("Справочник.РассылкиОтчетов.Форма.ПараметрыFTP", ПараметрыПроизвольнойФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура FTPСерверИКаталогОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Или ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	Для Каждого КлючИЗначение Из ВыбранноеЗначение Цикл
		Если КлючИЗначение.Ключ <> "Пароль" Тогда
			Объект["FTP" + КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		Иначе
			Если FTPПароль <> КлючИЗначение.Значение Тогда
				FTPПароль = КлючИЗначение.Значение;
				FTPПарольИзменен = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ВидимостьДоступностьКорректность(ЭтотОбъект, "FTPСерверИКаталог");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура FTPСерверИКаталогОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура FTPСерверИКаталогОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ПолныйАдрес = "ftp://"+ Объект.FTPСервер +":"+ Формат(Объект.FTPПорт, "ЧН=21; ЧГ=0") + Объект.FTPКаталог;
	ОбщегоНазначенияКлиент.ПерейтиПоСсылке(ПолныйАдрес);

КонецПроцедуры

&НаКлиенте
Процедура ВидРассылкиПриИзменении(Элемент)
	Объект.Личная            = (ВидРассылки = "Личная");
	Объект.Персонализирована = (ВидРассылки = "Персонализирована");
	
	ВидимостьДоступностьКорректность(ЭтотОбъект, "ВидРассылки");
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЭлектроннуюПочтуПриИзменении(Элемент)
	ВидимостьДоступностьКорректность(ЭтотОбъект, "ИспользоватьЭлектроннуюПочту");
	
	Если Не Публиковать И Не Объект.ИспользоватьЭлектроннуюПочту Тогда
		Публиковать = Истина;
		ВычислитьФлажкиДополнительныхСпособовДоставки();
		ВидимостьДоступностьКорректность(ЭтотОбъект, "Публиковать");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТолькоУведомитьПриИзменении(Элемент)
	ВидимостьДоступностьКорректность(ЭтотОбъект, "ТолькоУведомить");
КонецПроцедуры

&НаКлиенте
Процедура ДругойСпособДоставкиПриИзменении(Элемент)
	ВычислитьФлажкиДополнительныхСпособовДоставки();
	ВидимостьДоступностьКорректность(ЭтотОбъект, "ДругойСпособДоставки");
КонецПроцедуры

&НаКлиенте
Процедура ПубликоватьПриИзменении(Элемент)
	ВычислитьФлажкиДополнительныхСпособовДоставки();
	ВидимостьДоступностьКорректность(ЭтотОбъект, "Публиковать");
	
	Если Не Публиковать И Не Объект.ИспользоватьЭлектроннуюПочту Тогда
		Объект.ИспользоватьЭлектроннуюПочту = Истина;
		ВидимостьДоступностьКорректность(ЭтотОбъект, "ИспользоватьЭлектроннуюПочту");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПапкаОткрытие(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиСлужебныйКлиент");
		МодульРаботаСФайламиСлужебныйКлиент.РассылкаОтчетовПросмотрПапки(СтандартнаяОбработка, Объект.Папка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПапкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ПравоИзмененияПапкиИФайлов(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		ТекстПредупреждения = НСтр("ru = 'Недостаточно прав для изменения файлов папки ""%1"".'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, Строка(ВыбранноеЗначение));
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СетевойКаталогWindowsПриИзменении(Элемент)
	Объект.СетевойКаталогWindows = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Объект.СетевойКаталогWindows);
	Если ПустаяСтрока(Объект.СетевойКаталогLinux) Тогда
		Объект.СетевойКаталогLinux = СтрЗаменить(Объект.СетевойКаталогWindows, "\", "/");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СетевойКаталогLinuxПриИзменении(Элемент)
	Объект.СетевойКаталогLinux = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Объект.СетевойКаталогLinux);
	Если ПустаяСтрока(Объект.СетевойКаталогWindows) Тогда
		Объект.СетевойКаталогWindows = СтрЗаменить(Объект.СетевойКаталогLinux, "/", "\");
	КонецЕсли; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница "Дополнительно"

&НаКлиенте
Процедура ФорматыПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Обработчик = Новый ОписаниеОповещения("ФорматыПоУмолчаниюЗавершениеВыбора", ЭтотОбъект);
	ВыбратьФормат(Кэш.ПустоеЗначениеОтчета, Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ФорматыПоУмолчаниюОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОчиститьФормат(Кэш.ПустоеЗначениеОтчета);
	ФорматыПоУмолчанию = СписокФорматовПоУмолчаниюПредставление;
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьПриИзменении(Элемент)
	ВидимостьДоступностьКорректность(ЭтотОбъект, "Архивировать");
КонецПроцедуры

&НаКлиенте
Процедура АвторПриИзменении(Элемент)
	ТекущийСписок = Элементы.ВидПочтовогоАдресаАвтора.СписокВыбора;
	ТекущийСписок.Очистить();
	НовыйСписок = ПолучитьСписокПочтовыхАдресов(Объект.Автор);
	Для Каждого ЭлементСписка Из НовыйСписок Цикл
		ЗаполнитьЗначенияСвойств(ТекущийСписок.Добавить(), ЭлементСписка);
	КонецЦикла;
	Если НовыйСписок.НайтиПоЗначению(Объект.ВидПочтовогоАдресаПолучателей) = Неопределено Тогда
		Объект.ВидПочтовогоАдресаПолучателей = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РодительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = Кэш.ГруппаЛичныхРассылок Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, НСтр("ru = 'Выбранная группа используется только для личных рассылок по электронной почте'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПарольАрхиваПриИзменении(Элемент)
	ПарольАрхиваИзменен = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтчеты

&НаКлиенте
Процедура ОтчетыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СтруктураЗаполнения = Новый Структура("Форматы, ОтправлятьЕслиПустой, НеОтправлятьПустой", ПредставлениеФорматовПоУмолчанию(), Ложь, Истина);
	МассивНовыхСтрок = ВыборПодборПеретаскиваниеВТабличнуюЧасть(
		ВыбранноеЗначение,
		Объект.Отчеты,
		"Отчет",
		СтруктураЗаполнения,
		Истина);
	
	Шаблон = Новый ФиксированнаяСтруктура("Количество, МассивСтрок, ПредставлениеОтчетов, Текст", 0, Неопределено, "");
	СтруктураВыбора = Новый Структура;
	СтруктураВыбора.Вставить("Выбрано",   Новый Структура(Шаблон));
	СтруктураВыбора.Вставить("Успешно",   Новый Структура(Шаблон));
	СтруктураВыбора.Вставить("СОшибками", Новый Структура(Шаблон));
	СтруктураВыбора.Выбрано.МассивСтрок   = МассивНовыхСтрок;
	СтруктураВыбора.Успешно.МассивСтрок   = Новый Массив;
	СтруктураВыбора.СОшибками.МассивСтрок = Новый Массив;
	
	// Инициализация добавленных строк отчетов и заполнение структуры выбора.
	ПроверитьДобавленныеСтрокиОтчетов(СтруктураВыбора);
	
	Если СтруктураВыбора.СОшибками.Количество > 0 Тогда
		
		Если СтруктураВыбора.Выбрано.Количество = 1 Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось добавить отчет из-за ошибок'");
		ИначеЕсли СтруктураВыбора.Успешно.Количество = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось добавить отчеты из-за ошибок'");
		ИначеЕсли СтруктураВыбора.Выбрано.Количество >= 6 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Добавлено отчетов: %1 из %2,
				|Не добавлено из-за ошибок: %3'"),
				Формат(СтруктураВыбора.Успешно.Количество, "ЧН=0; ЧГ="),
				Формат(СтруктураВыбора.Выбрано.Количество, "ЧН=0; ЧГ="),
				Формат(СтруктураВыбора.СОшибками.Количество, "ЧН=0; ЧГ="));
		Иначе
			Разделитель = ", ";
			ПредставлениеОтчетовУспешно   = СтрЗаменить(Разделитель + СтруктураВыбора.Успешно.ПредставлениеОтчетов  , Разделитель, Символы.ПС + "   - ");
			ПредставлениеОтчетовСОшибками = СтрЗаменить(Разделитель + СтруктураВыбора.СОшибками.ПредставлениеОтчетов, Разделитель, Символы.ПС + "   - ");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Успешно добавлены отчеты:
					|%1
					|
					|Следующие отчеты не удалось добавить из-за ошибок:
					|%2'"),
				ПредставлениеОтчетовУспешно,
				ПредставлениеОтчетовСОшибками);
		КонецЕсли;
		
		ПараметрыПредупреждения = Новый Структура("Заголовок, Текст, Подробно");
		ПараметрыПредупреждения.Заголовок = НСтр("ru = 'Ошибки добавления отчетов в рассылку'");
		ПараметрыПредупреждения.Текст     = ТекстСообщения;
		ПараметрыПредупреждения.Подробно  = СтруктураВыбора.СОшибками.Текст;
		СтандартныеПодсистемыКлиент.ВывестиПредупреждение(ЭтотОбъект, ПараметрыПредупреждения);
		
	Иначе
		
		Если СтруктураВыбора.Успешно.Количество = 0 Тогда
			ЗаголовокОповещения = Неопределено;
			ТекстОповещения = НСтр("ru = 'Все выбранные отчеты уже включены в рассылку'");
		Иначе
			Если СтруктураВыбора.Выбрано.Количество = 1 Тогда
				ЗаголовокОповещения = НСтр("ru = 'Отчет включен в рассылку'");
			Иначе
				ЗаголовокОповещения = НСтр("ru = 'Отчеты включены в рассылку'");
			КонецЕсли;
			ТекстОповещения = СтруктураВыбора.Успешно.ПредставлениеОтчетов;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			ЗаголовокОповещения,
			,
			ТекстОповещения,
			БиблиотекаКартинок.Успешно32);
		
	КонецЕсли;
	
	ВидимостьДоступностьКорректность(ЭтотОбъект, "Отчеты");
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработчикАктивизацииСтрокиТаблицыОтчеты", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикАктивизацииСтрокиТаблицыОтчеты()
	СтрокаОтчеты = Элементы.Отчеты.ТекущиеДанные;
	Если СтрокаОтчеты = Неопределено Тогда
		Элементы.СтраницыНастроекОтчета.ТекущаяСтраница = Элементы.ПустаяСтраница;
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = СтрокаОтчеты.ПолучитьИдентификатор();
	Если ИдентификаторСтроки = ИдентификаторТекущейСтрокиТаблицыОтчетов Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = ОтчетыПриАктивизацииСтрокиНаСервере(ИдентификаторСтроки);
	Если ТекстПредупреждения <> "" Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПослеУдаления(Элемент)
	ВидимостьДоступностьКорректность(ЭтотОбъект, "Отчеты");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПользовательскиеНастройки

&НаКлиенте
Процедура ПользовательскиеНастройкиПриИзменении(Элемент)
	СтрокаОтчеты = Элементы.Отчеты.ТекущиеДанные;
	Если СтрокаОтчеты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОтчеты.ВнесеныИзменения = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПользовательскиеНастройкиПриАктивизацииСтроки(Элемент)
	Если Элементы.СтраницыНастроекОтчета.ТекущаяСтраница <> Элементы.СтраницаКомпоновщик Тогда
		Возврат;
	КонецЕсли;
	Отчет = Элементы.Отчеты.ТекущиеДанные;
	Если Отчет = Неопределено Или ТипЗнч(Отчет.Отчет) <> Тип("СправочникСсылка.ВариантыОтчетов") Тогда
		Возврат;
	КонецЕсли;
	ИдентификаторКД = Элементы.ПользовательскиеНастройки.ТекущаяСтрока;
	ТолькоПросмотрЗначения = Ложь;
	ОтчетыКлиент.ПриАктивизацииСтрокиНастройки(Отчет, КомпоновщикНастроекКД, ИдентификаторКД, ТолькоПросмотрЗначения);
	РассылкаОтчетовКлиентПереопределяемый.ПриАктивизацииСтрокиНастройки(Отчет, КомпоновщикНастроекКД, ИдентификаторКД, ТолькоПросмотрЗначения);
	Если Элементы.ПользовательскиеНастройкиЗначение.ТолькоПросмотр <> ТолькоПросмотрЗначения Тогда
		Элементы.ПользовательскиеНастройкиЗначение.ТолькоПросмотр = ТолькоПросмотрЗначения;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПользовательскиеНастройкиЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораПользовательскойНастройки(СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПользовательскиеНастройкиЗначениеОчистка(Элемент, СтандартнаяОбработка)
	Если Элементы.СтраницыНастроекОтчета.ТекущаяСтраница <> Элементы.СтраницаКомпоновщик Тогда
		Возврат;
	КонецЕсли;
	Отчет = Элементы.Отчеты.ТекущиеДанные;
	Если Отчет = Неопределено Или ТипЗнч(Отчет.Отчет) <> Тип("СправочникСсылка.ВариантыОтчетов") Тогда
		Возврат;
	КонецЕсли;
	ИдентификаторКД = Элементы.ПользовательскиеНастройки.ТекущаяСтрока;
	ОтчетыКлиент.ПриОчисткеНастройки(Отчет, КомпоновщикНастроекКД, ИдентификаторКД, СтандартнаяОбработка);
	РассылкаОтчетовКлиентПереопределяемый.ПриОчисткеНастройки(Отчет, КомпоновщикНастроекКД, ИдентификаторКД, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПользовательскиеНастройкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	НачалоВыбораПользовательскойНастройки(СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиТекущегоОтчета

&НаКлиенте
Процедура НастройкиТекущегоОтчетаЗначениеПриИзменении(Элемент)
	СтрокаНастроек = Элементы.НастройкиТекущегоОтчета.ТекущиеДанные;
	Если СтрокаНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНастроек.Использование = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиТекущегоОтчетаПриИзменении(Элемент)
	СтрокаОтчеты = Элементы.Отчеты.ТекущиеДанные;
	Если СтрокаОтчеты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОтчеты.ВнесеныИзменения = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФорматыОтчетов

&НаКлиенте
Процедура ФорматыОтчетовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ФорматыОтчетовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ФорматыОтчетовФорматыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаОтчеты = Элементы.ФорматыОтчетов.ТекущиеДанные;
	Если СтрокаОтчеты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Переменные = Новый Структура;
	Переменные.Вставить("СтрокаОтчеты", СтрокаОтчеты);
	
	Обработчик = Новый ОписаниеОповещения("ФорматыОтчетовФорматыЗавершениеВыбора", ЭтотОбъект, Переменные);
	
	ВыбратьФормат(СтрокаОтчеты.Отчет, Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ФорматыОтчетовФорматыОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаОтчеты = Элементы.ФорматыОтчетов.ТекущиеДанные;
	Если СтрокаОтчеты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьФормат(СтрокаОтчеты.Отчет);
	СтрокаОтчеты.Форматы = ПредставлениеФорматовПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура ФорматыОтчетовОтправлятьЕслиПустойПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ФорматыОтчетов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.НеОтправлятьПустой = Не ТекущиеДанные.ОтправлятьЕслиПустой;
КонецПроцедуры

&НаКлиенте
Процедура ФорматыОтчетовНеОтправлятьПустойПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ФорматыОтчетов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.ОтправлятьЕслиПустой = Не ТекущиеДанные.НеОтправлятьПустой;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// Командная панель

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИмяКоманды", "КомандаЗаписатьИЗакрыть");
	ЗаписатьНаКлиенте(Неопределено, ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиРассылкиНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ТипПолучателейРассылки) Тогда
		ТекстОшибки = НСтр("ru = 'Для ввода получателей необходимо выбрать их тип'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ТипПолучателейРассылки");
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПолучателиРассылкиНажатиеЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Получатели", Объект.Получатели);
	ПараметрыФормы.Вставить("ТипПолучателейРассылки", ТипПолучателейРассылки);
	ПараметрыФормы.Вставить("ВидПочтовогоАдресаПолучателей", Объект.ВидПочтовогоАдресаПолучателей);
	ПараметрыФормы.Вставить("НаименованиеРассылки", Объект.Наименование);
	
	ОткрытьФорму("Справочник.РассылкиОтчетов.Форма.ПолучателиРассылки", ПараметрыФормы, , , , , Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИмяКоманды", "КомандаЗаписать");
	ЗаписатьНаКлиенте(Неопределено, ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьСейчас(Команда)
	Если Не Объект.Подготовлена Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Рассылка не подготовлена'"));
		Возврат;
	КонецЕсли;
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИмяКоманды", "КомандаВыполнитьСейчас");
	ЗаписатьНаКлиенте(Неопределено, ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСобытияРассылки(Команда)
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИмяКоманды", "КомандаСобытияРассылки");
	ЗаписатьНаКлиенте(Неопределено, ПараметрыЗаписи);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница "Отчеты"

&НаКлиенте
Процедура ДобавитьОтчет(Команда)
	ВыбранныеЗначения = Новый СписокЗначений;
	Для Каждого СтрокаОтчеты Из Объект.Отчеты Цикл
		Если ТипЗнч(СтрокаОтчеты.Отчет) = Тип("СправочникСсылка.ВариантыОтчетов") Тогда
			ВыбранныеЗначения.Добавить(СтрокаОтчеты.Отчет);
		КонецЕсли;
	КонецЦикла;
	
	ОтборВыбора = Новый Структура;
	ОтборВыбора.Вставить("ТипОтчета", 1);
	ОтборВыбора.Вставить("Отчет", Новый Структура("Вид, Значение", "НеВСписке", Кэш.ИсключаемыеОтчеты));
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна",  РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ПараметрыФормыВыбора.Вставить("РежимВыбора",        Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормыВыбора.Вставить("ТолькоВарианты",     Истина);
	ПараметрыФормыВыбора.Вставить("Отбор",              ОтборВыбора);
	ПараметрыФормыВыбора.Вставить("ВыбранныеЗначения",  ВыбранныеЗначения);
	
	ОткрытьФорму("Справочник.ВариантыОтчетов.ФормаВыбора", ПараметрыФормыВыбора, Элементы.Отчеты);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйОтчет(Команда)
	// Форма подбора дополнительных отчетов.
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработкиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ДополнительныеОтчетыИОбработкиКлиент");
		МодульДополнительныеОтчетыИОбработкиКлиент.РассылкаОтчетовПодборДопОтчета(Элементы.Отчеты);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрОтчета(Команда)
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	СтрокаОтчеты = Элементы.Отчеты.ТекущиеДанные;
	Если СтрокаОтчеты = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите отчет'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Отчет",                СтрокаОтчеты.Отчет);
	ПараметрыОтчета.Вставить("Настройки",            Неопределено);
	ПараметрыОтчета.Вставить("ОтправлятьЕслиПустой", СтрокаОтчеты.ОтправлятьЕслиПустой);
	ПараметрыОтчета.Вставить("Форматы",              Новый Массив);
	ПараметрыОтчета.Вставить("Представление",        СтрокаОтчеты.Представление);
	ПараметрыОтчета.Вставить("ПолноеИмя",            СтрокаОтчеты.ПолноеИмя);
	ПараметрыОтчета.Вставить("КлючВарианта",         СтрокаОтчеты.КлючВарианта);
	
	Если СтрокаОтчеты.СКД Тогда
		ПараметрыОтчета.Настройки = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	Иначе
		ПараметрыОтчета.Настройки = Новый Массив;
		Найденные = НастройкиТекущегоОтчета.НайтиСтроки(Новый Структура("Использование", Истина));
		Для Каждого СтрокаНастройка Из Найденные Цикл
			ДобавляемаяНастройка = Новый Структура("Реквизит, Значение", СтрокаНастройка.Реквизит, СтрокаНастройка.Значение);
			ПараметрыОтчета.Настройки.Добавить(ДобавляемаяНастройка);
		КонецЦикла;
	КонецЕсли;
	
	Получатель = Неопределено;
	Если Объект.Персонализирована Тогда
		Если Не ПолучателиУказаны(Объект.Получатели) Тогда
			Возврат;
		КонецЕсли;
		Обработчик = Новый ОписаниеОповещения("ПредварительныйПросмотрОтчетаПродолжение", ЭтотОбъект, ПараметрыОтчета);
		РассылкаОтчетовКлиент.ВыбратьПолучателя(Обработчик, Объект, Ложь, Ложь);
	Иначе
		ПредварительныйПросмотрОтчетаПродолжение(Неопределено, ПараметрыОтчета);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрОтчетаПродолжение(РезультатВыбора, ПараметрыОтчета) Экспорт
	ПользовательскиеНастройкиКД = ПараметрыОтчета.Настройки;
	ПерсонализированныеНастройки = Новый Массив;
	Если Объект.Персонализирована Тогда
		Если РезультатВыбора = Неопределено Тогда
			Возврат;
		Иначе
			Получатель = РезультатВыбора.Получатель;
		КонецЕсли;
		Для Каждого ПользовательскаяНастройкаКД Из ПользовательскиеНастройкиКД.Элементы Цикл
			Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Значение = ПользовательскаяНастройкаКД.ПравоеЗначение;
				ЭтоОтбор = Истина;
			ИначеЕсли ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				Значение = ПользовательскаяНастройкаКД.Значение;
				ЭтоОтбор = Ложь;
			Иначе
				Продолжить;
			КонецЕсли;
			Если Не ПользовательскаяНастройкаКД.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(Значение) = Тип("Строка") И Значение = "[Получатель]" Тогда
				ПерсонализированныеНастройки.Добавить(ПользовательскаяНастройкаКД);
				Если ЭтоОтбор Тогда
					ПользовательскаяНастройкаКД.ПравоеЗначение = Получатель;
				Иначе
					ПользовательскаяНастройкаКД.Значение = Получатель;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройкиКД);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ВариантыОтчетовКлиент.ОткрытьФормуОтчета(ЭтотОбъект, ПараметрыОтчета.Отчет, ПараметрыФормы);
	
	Для Каждого ПользовательскаяНастройкаКД Из ПерсонализированныеНастройки Цикл
		Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПользовательскаяНастройкаКД.ПравоеЗначение = "[Получатель]";
		ИначеЕсли ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ПользовательскаяНастройкаКД.Значение = "[Получатель]";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПолучателяРассылкиВНастройкеОтчета(Команда)
	ОчиститьСообщения();
	
	// Проверка - включена ли возможность персонализации рассылки.
	Если Не Объект.Персонализирована Тогда
		ПредставлениеВида = Элементы.ВидРассылки.СписокВыбора.НайтиПоЗначению("Персонализирована").Представление;
		СообщениеТекст = НСтр("ru = 'Использовать получателя в параметрах возможно только для вида рассылки ""%1""'");
		СообщениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеТекст, ПредставлениеВида);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеТекст, , "ВидРассылки");
		Возврат;
	КонецЕсли;
	
	СКД = (Элементы.СтраницыНастроекОтчета.ТекущаяСтраница = Элементы.СтраницаКомпоновщик);
	
	// Получение основного типа получателей.
	КоличествоТипов = ТипПолучателейРассылки.Типы().Количество();
	Если КоличествоТипов <> 1 И КоличествоТипов <> 2 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Получатели"" не заполнено'"), , "ТипПолучателейРассылки");
		Возврат;
	КонецЕсли;
	
	Если СКД Тогда
		Инициатор = Элементы.ПользовательскиеНастройки;
	Иначе
		Инициатор = Элементы.НастройкиТекущегоОтчета;
	КонецЕсли;
	
	НайденныеИОМД = ТаблицаТиповПолучателей.НайтиСтроки(Новый Структура("ТипПолучателей", ТипПолучателейРассылки));
	Если НайденныеИОМД.Количество() <> 1 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Тип получателей не найден'"));
		Возврат;
	КонецЕсли;
	
	МассивТипов = НайденныеИОМД[0].ОсновнойТип.Типы();
	Если МассивТипов.Количество() <> 1 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Тип получателей не найден'"));
		Возврат;
	КонецЕсли;
	
	ОсновнойТипПолучателей = МассивТипов[0];
	
	// Получения описания типов, доступных для выбора.
	Если СКД Тогда
		
		// Идентификатор пользовательской настройки.
		ИдентификаторНастройки = Инициатор.ТекущаяСтрока;
		Если ИдентификаторНастройки = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выберите настройку отчета'"));
			Возврат;
		КонецЕсли;
		
		// Получение строки из состава настроек компоновки данных.
		СтрокаНастроек = КомпоновщикНастроекКД.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторНастройки);
		Если СтрокаНастроек = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Настройка отчета не найдена'"));
			Возврат;
		КонецЕсли;
		
		// Проверка типа настройки.
		Если ТипЗнч(СтрокаНастроек) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЭтоЭлементОтбора = Истина;
		ИначеЕсли ТипЗнч(СтрокаНастроек) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ЭтоЭлементОтбора = Ложь;
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Указывать получателя можно только для параметров и отборов отчетов'"));
			Возврат;
		КонецЕсли;
		
		// Поле компоновки данных.
		Если ЭтоЭлементОтбора Тогда
			
			Если ЗначениеЗаполнено(СтрокаНастроек.ЛевоеЗначение) Тогда
				
				ПолеКД = СтрокаНастроек.ЛевоеЗначение;
				
			Иначе
				
				ПолеКД = ОпределитьПолеИзКомпоновщика(ИдентификаторНастройки, КомпоновщикНастроекКД.Настройки.Отбор.Элементы);
				Если ПолеКД = Неопределено Тогда
					ПолеКД = ОпределитьПолеИзКомпоновщика(ИдентификаторНастройки, КомпоновщикНастроекКД.ПользовательскиеНастройки.Элементы);
				КонецЕсли;
				Если ПолеКД = Неопределено Тогда
					ПоказатьПредупреждение(, НСтр("ru = 'Для настройки отчета не найдено описание доступного поля'"));
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			ДоступноеПолеКД = КомпоновщикНастроекКД.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
			
		Иначе
			
			ДоступноеПолеКД = КомпоновщикНастроекКД.Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(СтрокаНастроек.Параметр);
			
		КонецЕсли;
		
		Если ДоступноеПолеКД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ОписаниеДоступныхТипов = ДоступноеПолеКД.ТипЗначения;
		
	Иначе
		
		// Массив типов для произвольных отчетов.
		СтрокаНастроек = Инициатор.ТекущиеДанные;
		Если СтрокаНастроек = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выберите настройку отчета'"));
			Возврат;
		КонецЕсли;
		
		ОписаниеДоступныхТипов = СтрокаНастроек.Тип;
		
	КонецЕсли;
	
	// Проверка на содержание типа получателей.
	Если Не ОписаниеДоступныхТипов.СодержитТип(ОсновнойТипПолучателей) Тогда
		ТекстПредупреждения = НСтр("ru = 'Тип ""%1"" не подходит по типу к выбранной настройке.
		|Необходимо выбрать другой тип получателей или другую настройку.'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, Строка(ОсновнойТипПолучателей));
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Инициатор.ЗакончитьРедактированиеСтроки(Ложь);
	СтрокаНастроек.Использование = Истина;
	Если СКД Тогда
		Если ЭтоЭлементОтбора Тогда
			Если СтрокаНастроек.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
				Или СтрокаНастроек.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
				Или СтрокаНастроек.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
				Или СтрокаНастроек.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
				Или СтрокаНастроек.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии
				Или СтрокаНастроек.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
				СтрокаНастроек.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
			СтрокаНастроек.ПравоеЗначение = "[Получатель]";
		Иначе
			СтрокаНастроек.Значение = "[Получатель]";
		КонецЕсли;
	Иначе
		СтрокаНастроек.Значение = "[Получатель]";
	КонецЕсли;
	
	РассылкаБылаПерсонализирована = Истина;
	Элементы.Отчеты.ТекущиеДанные.ВнесеныИзменения = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьПолеИзКомпоновщика(ИдентификаторНастройки, Коллекция)
	Для Каждого Элемент Из Коллекция Цикл
		Если Строка(Элемент.ИдентификаторПользовательскойНастройки) = Строка(ИдентификаторНастройки)
			И ЗначениеЗаполнено(Строка(Элемент.ЛевоеЗначение)) Тогда
			Возврат Элемент.ЛевоеЗначение;
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
			Или ТипЗнч(Элемент) = Тип("ОтборКомпоновкиДанных") Тогда
			Поле = ОпределитьПолеИзКомпоновщика(ИдентификаторНастройки, Элемент.Элементы);
			Если Поле <> Неопределено Тогда
				Возврат Поле;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Страница "Расписание"

&НаКлиенте
Процедура УстановитьПометки(Команда)
	ВсеМесяцы = Новый Массив;
	Для Каждого КлючИЗначение Из Кэш.Соответствия.Месяцы Цикл
		ЭтотОбъект[КлючИЗначение.Ключ] = Истина;
		ВсеМесяцы.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	Расписание.Месяцы = ВсеМесяцы;
	ВидимостьДоступностьКорректность(ЭтотОбъект, "Месяцы");
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	ВсеМесяцы = Новый Массив;
	Для Каждого КлючИЗначение Из Кэш.Соответствия.Месяцы Цикл
		ЭтотОбъект[КлючИЗначение.Ключ] = Ложь;
	КонецЦикла;
	Расписание.Месяцы = ВсеМесяцы;
	ВидимостьДоступностьКорректность(ЭтотОбъект, "Месяцы");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасписаниеПоШаблону(Команда)
	Обработчик = Новый ОписаниеОповещения("ЗаполнитьРасписаниеПоШаблонуЗавершение", ЭтотОбъект);
	
	СписокВариантов = РассылкаОтчетовКлиентСервер.СписокВариантовЗаполненияРасписаний();
	СписокВариантов.ПоказатьВыборЭлемента(Обработчик, НСтр("ru = 'Выберите шаблон расписания'"));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница "Доставка"

&НаКлиенте
Процедура ДобавитьИзменитьШаблонДатыРассылки(Команда)
	ДобавитьШаблон();
	
	Переменные = Новый Структура;
	Переменные.Вставить("Элемент",      ТекущийЭлемент);
	Переменные.Вставить("СтарыйТекст",  Переменные.Элемент.ВыделенныйТекст);
	Переменные.Вставить("Префикс",      "[ДатаВыполнения(");
	Переменные.Вставить("Постфикс",     ")]");
	Переменные.Вставить("ТекстФормата", "");
	
	ДлинаПрефикса  = СтрДлина(Переменные.Префикс);
	ДлинаПостфикса = СтрДлина(Переменные.Постфикс);
	ПозицияПрефикса  = СтрНайти(Переменные.СтарыйТекст, Переменные.Префикс);
	ПозицияПостфикса = СтрНайти(Переменные.СтарыйТекст, Переменные.Постфикс);
	
	Переменные.Вставить("СтарыйФрагментНайден", (ПозицияПрефикса > 0 И ПозицияПостфикса > ПозицияПрефикса));
	Если Переменные.СтарыйФрагментНайден Тогда
		Переменные.ТекстФормата = Сред(Переменные.СтарыйТекст, ПозицияПрефикса + ДлинаПрефикса, ПозицияПостфикса - ПозицияПрефикса - ДлинаПрефикса);
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ДобавитьИзменитьШаблонДатыРассылкиЗавершение", ЭтотОбъект, Переменные);
	
	Диалог = Новый КонструкторФорматнойСтроки;
	Диалог.ДоступныеТипы = Новый ОписаниеТипов("Дата");
	Диалог.Текст         = Переменные.ТекстФормата;
	Диалог.Показать(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонПолучателя(Команда)
	// Очистка окна сообщений
	ОчиститьСообщения();
	
	//
	Если НЕ Объект.Персонализирована Тогда
		СообщениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Использование получателя в тексте шаблона возможно только для вида рассылки ""%1""'"),
			Элементы.ВидРассылки.СписокВыбора.НайтиПоЗначению("Персонализирована").Представление);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеТекст, , "ВидРассылки");
		Возврат;
	КонецЕсли;
	
	ДобавитьШаблон("[Получатель]");
	РассылкаБылаПерсонализирована = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонСформированныхОтчетов(Команда)
	ДобавитьШаблон("[СформированныеОтчеты]", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонАвтора(Команда)
	ДобавитьШаблон("[Автор]");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонНаименованияРассылки(Команда)
	ДобавитьШаблон("[НаименованиеРассылки]");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонСистемы(Команда)
	ДобавитьШаблон("[ЗаголовокСистемы]");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонСпособаДоставки(Команда)
	ДобавитьШаблон("[СпособДоставки]");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонПоУмолчанию(Команда)
	ПерезаполняетсяТема = (ТекущийЭлемент = Элементы.ТемаПисьма);
	
	Если ПерезаполняетсяТема Тогда
		ЗначениеПредмета = Объект.ТемаПисьма;
		ШаблонПоУмолчанию = Кэш.Шаблоны.Тема;
	Иначе
		Если Объект.ПисьмоВФорматеHTML Тогда
			ЗначениеПредмета = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
		Иначе
			ЗначениеПредмета = Объект.ТекстПисьма;
		КонецЕсли;
		ЗначениеПредмета = СокрЛП(ЗначениеПредмета);
		ШаблонПоУмолчанию = Кэш.Шаблоны.Текст;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПерезаполняетсяТема", ПерезаполняетсяТема);
	ДополнительныеПараметры.Вставить("ШаблонПоУмолчанию", ШаблонПоУмолчанию);
	
	Если ЗначениеПредмета = "" Тогда
		// Предмет пуст - надо заполнить без вопросов.
		ДобавитьШаблонПоУмолчаниюЗавершение(1, ДополнительныеПараметры);
		
	ИначеЕсли ЗначениеПредмета = ШаблонПоУмолчанию Тогда
		// Предмет соответствует шаблону - заполнять не требуется.
		
		Если ПерезаполняетсяТема Тогда
			ТекстПредупреждения = НСтр("ru = 'Тема письма уже соответствует шаблону по умолчанию.'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Текст письма уже соответствует шаблону по умолчанию.'");
		КонецЕсли;
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	Иначе
		// Предмет не пуст - надо запросить замену на стандартный шаблон.
		
		Если ПерезаполняетсяТема Тогда
			ЗаголовокВопроса = НСтр("ru = 'Добавить в тему письма шаблон по умолчанию'");
			ТекстВопроса = НСтр("ru = 'Заменить тему письма на шаблон по умолчанию?'");
		Иначе
			ЗаголовокВопроса = НСтр("ru = 'Добавить в текст письма шаблон по умолчанию'");
			ТекстВопроса = НСтр("ru = 'Заменить текст письма на шаблон по умолчанию?'");
		КонецЕсли;
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, НСтр("ru = 'Заменить'"));
		Кнопки.Добавить(2, НСтр("ru = 'Добавить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		Обработчик = Новый ОписаниеОповещения("ДобавитьШаблонПоУмолчаниюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, 60, 1, ЗаголовокВопроса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредпросмотрШаблона(Команда)
	ДобавитьШаблон();
	
	Если ТекущийЭлемент = Элементы.ТекстПисьмаФорматированныйДокумент Тогда
		Шаблон = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
	ИначеЕсли ТекущийЭлемент = Элементы.ТекстПисьма Тогда
		Шаблон = Объект.ТекстПисьма;
	ИначеЕсли ТекущийЭлемент = Элементы.ТемаПисьма Тогда
		Шаблон = Объект.ТемаПисьма;
	КонецЕсли;
	
	СписокОтчетов = "";
	Для Каждого СтрокаОтчет Из Объект.Отчеты Цикл
		СписокОтчетов = СписокОтчетов
		+ Символы.ПС
		+ СтрокаОтчет.Представление
		+ " (" 
		+ ?(СтрокаОтчет.Форматы = ПредставлениеФорматовПоУмолчанию(), ФорматыПоУмолчанию, СтрокаОтчет.Форматы) 
		+ ")";
	КонецЦикла;
	СписокОтчетов = СокрЛ(СписокОтчетов);
	
	Настройки = Новый Структура;
	Настройки.Вставить("НаименованиеРассылки", Объект.Наименование);
	Настройки.Вставить("Автор", Объект.Автор);
	Настройки.Вставить("ЗаголовокСистемы", Кэш.ЗаголовокСистемы);
	Настройки.Вставить("ДатаВыполнения", ОбщегоНазначенияКлиент.ДатаСеанса());
	Настройки.Вставить("СформированныеОтчеты", Объект.Наименование);
	Настройки.Вставить("СпособДоставки", "");
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(РассылкаОтчетовКлиентСервер.ЗаполнитьШаблон(Шаблон, Настройки));
	ТекстовыйДокумент.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПубликацию(Команда)
	// Параметры доставки
	ПараметрыДоставки = Новый Структура;
	//
	ПараметрыДоставки.Вставить("ИспользоватьПапку",            Объект.ИспользоватьПапку);
	ПараметрыДоставки.Вставить("ИспользоватьСетевойКаталог",   Объект.ИспользоватьСетевойКаталог);
	ПараметрыДоставки.Вставить("ИспользоватьFTPРесурс",        Объект.ИспользоватьFTPРесурс);
	ПараметрыДоставки.Вставить("ИспользоватьЭлектроннуюПочту", Ложь);
	//
	ПроверитьРассылку(ПараметрыДоставки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЭлектроннуюПочту(Команда)
	// Параметры доставки
	ПараметрыДоставки = Новый Структура;
	//
	ПараметрыДоставки.Вставить("ИспользоватьПапку",            Ложь);
	ПараметрыДоставки.Вставить("ИспользоватьСетевойКаталог",   Ложь);
	ПараметрыДоставки.Вставить("ИспользоватьFTPРесурс",        Ложь);
	ПараметрыДоставки.Вставить("ИспользоватьЭлектроннуюПочту", Истина);
	//
	ПроверитьРассылку(ПараметрыДоставки);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТипТекстаНаHTML(Команда)
	Модифицированность = Истина;
	Объект.ПисьмоВФорматеHTML = Истина;
	ТекстПисьмаИзHTML = СокрЛП(ТекстПисьмаФорматированныйДокумент.ПолучитьТекст());
	Если ТекстПисьмаИзHTML <> Объект.ТекстПисьма Тогда
		ТекстПисьмаФорматированныйДокумент.Удалить();
		ТекстПисьмаФорматированныйДокумент.Добавить(Объект.ТекстПисьма, ТипЭлементаФорматированногоДокумента.Текст);
	КонецЕсли;
	ТекущийЭлемент = Элементы.ТекстПисьмаФорматированныйДокумент;
	ВидимостьДоступностьКорректность(ЭтотОбъект, "ПисьмоВФорматеHTML");
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТипТекстаНаОбычный(Команда)
	Модифицированность = Истина;
	Объект.ПисьмоВФорматеHTML = Ложь;
	ТекстПисьмаИзHTML = СокрЛП(ТекстПисьмаФорматированныйДокумент.ПолучитьТекст());
	Если Объект.ТекстПисьма <> ТекстПисьмаИзHTML Тогда
		Объект.ТекстПисьма = ТекстПисьмаИзHTML;
	КонецЕсли;
	ТекущийЭлемент = Элементы.ТекстПисьма;
	ВидимостьДоступностьКорректность(ЭтотОбъект, "ПисьмоВФорматеHTML");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница "Дополнительно"

&НаКлиенте
Процедура СнятьПометкиОтправлятьЕслиПустой(Команда)
	Если Объект.Отчеты.Количество() > 0 Тогда
		Модифицированность = Истина;
		Для Каждого СтрОтчет Из Объект.Отчеты Цикл
			СтрОтчет.ОтправлятьЕслиПустой = Ложь;
			СтрОтчет.НеОтправлятьПустой = Истина;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиОтправлятьЕслиПустой(Команда)
	Если Объект.Отчеты.Количество() > 0 Тогда
		Модифицированность = Истина;
		Для Каждого СтрОтчет Из Объект.Отчеты Цикл
			СтрОтчет.ОтправлятьЕслиПустой = Истина;
			СтрОтчет.НеОтправлятьПустой = Ложь;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент.

&НаКлиенте
Процедура НачалоВыбораПользовательскойНастройки(СтандартнаяОбработка)
	Если Элементы.СтраницыНастроекОтчета.ТекущаяСтраница <> Элементы.СтраницаКомпоновщик Тогда
		Возврат;
	КонецЕсли;
	Отчет = Элементы.Отчеты.ТекущиеДанные;
	Если Отчет = Неопределено Или ТипЗнч(Отчет.Отчет) <> Тип("СправочникСсылка.ВариантыОтчетов") Тогда
		Возврат;
	КонецЕсли;
	ИдентификаторКД = Элементы.ПользовательскиеНастройки.ТекущаяСтрока;
	Обработчик = Новый ОписаниеОповещения("ЗавершениеВыбораПользовательскойНастройки", ЭтотОбъект);
	ОтчетыКлиент.ПриНачалеВыбораНастройки(Отчет, КомпоновщикНастроекКД, ИдентификаторКД, СтандартнаяОбработка, Обработчик);
	РассылкаОтчетовКлиентПереопределяемый.ПриНачалеВыбораНастройки(Отчет, КомпоновщикНастроекКД, ИдентификаторКД, СтандартнаяОбработка, Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораПользовательскойНастройки(Результат, ПараметрыВыполнения) Экспорт
	Если ТипЗнч(Результат) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		КомпоновщикНастроекКД.ЗагрузитьПользовательскиеНастройки(Результат);
	Иначе
		Возврат;
	КонецЕсли;
	Отчет = Элементы.Отчеты.ТекущиеДанные;
	Если Отчет = Неопределено Или ТипЗнч(Отчет.Отчет) <> Тип("СправочникСсылка.ВариантыОтчетов") Тогда
		Возврат;
	КонецЕсли;
	Отчет.ВнесеныИзменения = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиРассылкиНажатиеЗавершение(Результат, Параметр) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ВидПочтовогоАдресаПолучателей = Результат.ВидПочтовогоАдресаПолучателей;
	Объект.Получатели.Очистить();
	Для Каждого Элемент Из Результат.Получатели Цикл 
		НоваяСтрока = Объект.Получатели.Добавить();
		НоваяСтрока.Получатель = Элемент.Получатель;
		НоваяСтрока.Исключен = Элемент.Исключен;
	КонецЦикла;
	
	ВидимостьДоступностьКорректность(ЭтотОбъект, "ПолучателиРассылки");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТипПолучателейРассылкиОбработкаВыбораЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Получатели.Очистить();
		ТипПолучателейРассылки = ДополнительныеПараметры.ВыбранноеЗначение;
		Модифицированность = Истина;
		ТипПолучателейРассылкиПриИзменении(Неопределено);
		ВидимостьДоступностьКорректность(ЭтотОбъект, "ПолучателиРассылки");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонПоУмолчаниюЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	ШаблонПоУмолчанию = ДополнительныеПараметры.ШаблонПоУмолчанию;
	Если Ответ = 1 Тогда
		Если ДополнительныеПараметры.ПерезаполняетсяТема Тогда
			Объект.ТемаПисьма = ШаблонПоУмолчанию;
		Иначе
			Если Объект.ПисьмоВФорматеHTML Тогда
				ТекстПисьмаФорматированныйДокумент.Удалить();
				ТекстПисьмаФорматированныйДокумент.Добавить(ШаблонПоУмолчанию, ТипЭлементаФорматированногоДокумента.Текст);
			Иначе
				Объект.ТекстПисьма = ШаблонПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Ответ = 2 Тогда
		ДобавитьШаблон(ШаблонПоУмолчанию);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРассылкуПослеОтветаНаВопрос(Ответ, ПараметрыДоставки) Экспорт
	Если Ответ = 1 Тогда
		Объект.Подготовлена = Истина;
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли Ответ <> -1 Тогда
		Возврат;
	КонецЕсли;
	
	// Очистка окна сообщений.
	ОчиститьСообщения();
	
	// Формирование параметров доставки.
	ПараметрыДоставки.Вставить("Рассылка", Объект.Наименование);
	
	// Папка.
	Если ПараметрыДоставки.ИспользоватьПапку Тогда
		ПараметрыДоставки.Вставить("Папка", Объект.Папка);
	КонецЕсли;
	
	// Сетевой каталог.
	Если ПараметрыДоставки.ИспользоватьСетевойКаталог Тогда
		ПараметрыДоставки.Вставить("СетевойКаталогWindows", Объект.СетевойКаталогWindows);
		ПараметрыДоставки.Вставить("СетевойКаталогLinux",   Объект.СетевойКаталогLinux);
	КонецЕсли;
	
	// FTP.
	Если ПараметрыДоставки.ИспользоватьFTPРесурс Тогда
		ПараметрыДоставки.Вставить("Владелец",            Объект.Ссылка);
		ПараметрыДоставки.Вставить("Сервер",              Объект.FTPСервер);
		ПараметрыДоставки.Вставить("Порт",                Объект.FTPПорт);
		ПараметрыДоставки.Вставить("Логин",               Объект.FTPЛогин);
		Если FTPПарольИзменен Тогда
			ПараметрыДоставки.Вставить("Пароль", FTPПароль);
		КонецЕсли;
		ПараметрыДоставки.Вставить("Каталог",             Объект.FTPКаталог);
		ПараметрыДоставки.Вставить("ПассивноеСоединение", Объект.FTPПассивноеСоединение);
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПроверитьРассылкуПослеВыбораПолучателей", ЭтотОбъект, ПараметрыДоставки);
	
	// Почта.
	Если ПараметрыДоставки.ИспользоватьЭлектроннуюПочту Тогда
		РассылкаОтчетовКлиент.ВыбратьПолучателя(Обработчик, Объект, Ложь, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Обработчик, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРассылкуПослеВыбораПолучателей(РезультатВыбора, ПараметрыДоставки) Экспорт
	// Обработчик результата работы процедуры ПроверитьРассылкуПослеОтветаНаВопрос.
	Если ПараметрыДоставки.ИспользоватьЭлектроннуюПочту Тогда
		Если РезультатВыбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыДоставки.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
		ПараметрыДоставки.Вставить("СкрытыеКопии",  Объект.СкрытыеКопии);
		ПараметрыДоставки.Вставить("ШаблонТемы",    НСтр("ru = 'Тестовое сообщение 1С:Предприятие'"));
		ПараметрыДоставки.Вставить("ШаблонТекста",  НСтр("ru = 'Это сообщение отправлено системой рассылок 1С:Предприятие.'") + Символы.ПС + Кэш.ЗаголовокСистемы);
		ПараметрыДоставки.Вставить("Получатели",    РезультатВыбора);
		ПараметрыДоставки.Вставить("ТолькоУведомить", Ложь);
		ПараметрыДоставки.Вставить("ЗаполнитьСпособДоставкиВШаблонеСообщения",       Ложь);
		ПараметрыДоставки.Вставить("ЗаполнитьСформированныеОтчетыВШаблонеСообщения", Ложь);
		ПараметрыДоставки.Вставить("ЗаполнитьПолучателяВШаблонеТемы",                Ложь);
		ПараметрыДоставки.Вставить("ЗаполнитьПолучателяВШаблонеСообщения",           Ложь);
		ПараметрыДоставки.Вставить("ПараметрыПисьма", Новый Структура);
		ПараметрыДоставки.Вставить("Соединение",      Неопределено);
		
	КонецЕсли;
	
	ПараметрыДоставки.Вставить("ДобавлятьСсылки", "");
	
	РезультатВыполнения = ПроверитьСпособДоставки(Объект.Ссылка, ПараметрыДоставки);
	СтандартныеПодсистемыКлиент.ВывестиПредупреждение(ЭтотОбъект, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасписаниеПоШаблонуЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ЗаполнитьРасписаниеПоВарианту(ВыбранныйЭлемент.Значение, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзменитьШаблонДатыРассылкиЗавершение(СтрокаРезультат, Переменные) Экспорт
	Если СтрокаРезультат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйФрагмент   = Переменные.Префикс + СтрокаРезультат + Переменные.Постфикс;
	СтарыйФрагмент  = Переменные.Префикс + Переменные.ТекстФормата + Переменные.Постфикс;
	ВыделенныйТекст = Переменные.СтарыйТекст;
	
	Если Переменные.Элемент = Элементы.ТекстПисьмаФорматированныйДокумент Тогда
		ЗаменаВыполнена = Ложь;
		Если Переменные.СтарыйФрагментНайден Тогда
			РезультатПоиска = ТекстПисьмаФорматированныйДокумент.НайтиТекст(СтарыйФрагмент);
			Если РезультатПоиска <> Неопределено Тогда
				Найденные = ТекстПисьмаФорматированныйДокумент.ПолучитьЭлементы(РезультатПоиска.ЗакладкаНачала, РезультатПоиска.ЗакладкаКонца);
				Для Каждого ТекстФД Из Найденные Цикл
					Если СтрНайти(ТекстФД.Текст, СтарыйФрагмент) > 0 Тогда
						ТекстФД.Текст = СтрЗаменить(ТекстФД.Текст, СтарыйФрагмент, НовыйФрагмент);
						ЗаменаВыполнена = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; // Переменные.СтарыйФрагментНайден
		Если Не ЗаменаВыполнена Тогда
			Если СокрЛП(Переменные.СтарыйТекст) = СтарыйФрагмент Тогда
				// Для форматированного документа свойство ВыделенныйТекст используется в тех редких случаях,
				//  когда это безопасно для редактируемого текста.
				Переменные.Элемент.ВыделенныйТекст = НовыйФрагмент;
			Иначе
				ТекстПисьмаФорматированныйДокумент.Добавить(НовыйФрагмент, ТипЭлементаФорматированногоДокумента.Текст);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Переменные.СтарыйФрагментНайден Тогда
			Если СтрокаРезультат = Переменные.ТекстФормата Тогда
				Возврат;
			КонецЕсли;
			Переменные.Элемент.ВыделенныйТекст = СтрЗаменить(Переменные.СтарыйТекст, СтарыйФрагмент, НовыйФрагмент);
		Иначе
			Переменные.Элемент.ВыделенныйТекст = Переменные.СтарыйТекст + НовыйФрагмент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФорматЗавершение(СписокФорматов, Переменные) Экспорт
	Если СписокФорматов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка изменений
	ФорматыСовпадают = Истина;
	Для Индекс = 1 По СписокФорматов.Количество() Цикл
		Если СписокФорматов[Индекс - 1].Пометка <> Переменные.СписокФорматовКопия[Индекс - 1].Пометка Тогда
			ФорматыСовпадают = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ФорматыСовпадают Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеФормата = "";
	
	// Очистка существующих записей.
	ОчиститьФормат(Переменные.СсылкаНаОтчет);
	
	// Добавление отмеченных форматов.
	Для Каждого ЭлементСписка Из СписокФорматов Цикл
		Если ЭлементСписка.Пометка Тогда
			СтрокаФормат = Объект.ФорматыОтчетов.Добавить();
			СтрокаФормат.Отчет  = Переменные.СсылкаНаОтчет;
			СтрокаФормат.Формат = ЭлементСписка.Значение;
			ПредставлениеФормата = ПредставлениеФормата + ?(ПредставлениеФормата = "", "", ", ") + Строка(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если Переменные.ЭтоФорматПоУмолчанию И ПредставлениеФормата = "" Тогда
		ПредставлениеФормата = СписокФорматовПоУмолчаниюПредставление;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Переменные.ОбработчикРезультата, ПредставлениеФормата);
КонецПроцедуры

&НаКлиенте
Процедура ФорматыОтчетовФорматыЗавершениеВыбора(ПредставлениеФормата, Переменные) Экспорт
	Если ПредставлениеФормата <> Неопределено Тогда
		Переменные.СтрокаОтчеты.Форматы = ПредставлениеФормата;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФорматыПоУмолчаниюЗавершениеВыбора(ПредставлениеФормата, Переменные) Экспорт
	Если ПредставлениеФормата <> Неопределено Тогда
		ФорматыПоУмолчанию = ПредставлениеФормата;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияРасписания(РасписаниеРезультат, ДополнительныеПараметры) Экспорт
	Если РасписаниеРезультат <> Неопределено Тогда
		Модифицированность = Истина;
		Расписание = РасписаниеРезультат;
		ВидимостьДоступностьКорректность(ЭтотОбъект, "Расписание");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ВыборПодборПеретаскиваниеЭлементаВТабличнуюЧасть(ЭлементПодбора, ТабличнаяЧасть, ИмяРеквизита, СтруктураЗаполнения, Уникальность = Истина)
	ПереданаСтруктура = (ТипЗнч(ЭлементПодбора) = Тип("Структура"));
	Если ПереданаСтруктура Или ТипЗнч(ЭлементПодбора) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		Если ЭлементПодбора.Свойство(ИмяРеквизита) Тогда
			ЗначениеРеквизита = ЭлементПодбора[ИмяРеквизита];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе // (СправочникСсылка.*) перетаскивание из формы выбора или подбора.
		ЗначениеРеквизита = ЭлементПодбора;
	КонецЕсли;
	
	// Требуется уникальность реквизита в рамках таблицы.
	Найденные = ТабличнаяЧасть.НайтиСтроки(Новый Структура(ИмяРеквизита, ЗначениеРеквизита));
	
	Если Уникальность И Найденные.Количество() > 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаТаблицы = ТабличнаяЧасть.Добавить();
	СтрокаТаблицы[ИмяРеквизита] = ЗначениеРеквизита;
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураЗаполнения);
	Если ПереданаСтруктура Тогда
		Для Каждого КлючИЗначение Из ЭлементПодбора Цикл
			Если СтруктураЗаполнения.Свойство(КлючИЗначение.Ключ) Тогда
				ЭлементПодбора.Удалить(ЭлементПодбора.Ключ);
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЭлементПодбора);
	КонецЕсли;
	
	Возврат СтрокаТаблицы;
КонецФункции

&НаКлиенте
Функция ВыборПодборПеретаскиваниеВТабличнуюЧасть(ВыбранноеЗначение, ТабличнаяЧасть, ИмяРеквизита, СтруктураЗаполнения, Идентификаторы = Ложь)
	Модифицированность = Истина;
	МассивНовыхСтрок = Новый Массив;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементПодбора Из ВыбранноеЗначение Цикл
			Результат = ВыборПодборПеретаскиваниеЭлементаВТабличнуюЧасть(ЭлементПодбора, ТабличнаяЧасть, ИмяРеквизита, СтруктураЗаполнения);
			Если Результат <> Неопределено Тогда
				МассивНовыхСтрок.Добавить(?(Идентификаторы, Результат.ПолучитьИдентификатор(), Результат));
			КонецЕсли;
		КонецЦикла;
	Иначе
		Результат = ВыборПодборПеретаскиваниеЭлементаВТабличнуюЧасть(ВыбранноеЗначение, ТабличнаяЧасть, ИмяРеквизита, СтруктураЗаполнения);
		Если Результат <> Неопределено Тогда
			МассивНовыхСтрок.Добавить(?(Идентификаторы, Результат.ПолучитьИдентификатор(), Результат));
		КонецЕсли;
	КонецЕсли;
	Возврат МассивНовыхСтрок;
КонецФункции

&НаКлиенте
Функция ВыбратьФормат(СсылкаНаОтчет, ОбработчикРезультата)
	// Для хранения всех форматов, выбранных пользователем, используется табличная часть ФорматыОтчетов.
	// При этом, для форматов "по умолчанию" используется пустое значение реквизита Отчет.
	// В зависимости от типа внедрения реквизит Отчет может принимать значение Неопределено или ПустаяСсылка.
	ЭтоФорматПоУмолчанию = Не ЗначениеЗаполнено(СсылкаНаОтчет);
	
	Найденные = Объект.ФорматыОтчетов.НайтиСтроки(Новый Структура("Отчет", СсылкаНаОтчет));
	Если Найденные.Количество() > 0 Тогда
		СписокФорматов.ЗаполнитьПометки(Ложь);
		Для Каждого СтрокаФормат Из Найденные Цикл
			СписокФорматов.НайтиПоЗначению(СтрокаФормат.Формат).Пометка = Истина;
		КонецЦикла;
	Иначе
		СписокФорматов = СписокФорматовПоУмолчанию.Скопировать();
		Если Не ЭтоФорматПоУмолчанию Тогда
			Найденные = Объект.ФорматыОтчетов.НайтиСтроки(Новый Структура("Отчет", Кэш.ПустоеЗначениеОтчета));
			Если Найденные.Количество() > 0 Тогда
				СписокФорматов.ЗаполнитьПометки(Ложь);
				Для Каждого СтрокаФормат Из Найденные Цикл
					СписокФорматов.НайтиПоЗначению(СтрокаФормат.Формат).Пометка = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоФорматПоУмолчанию Тогда
		ЗаголовокДиалога = НСтр("ru = 'Выберите форматы по умолчанию'");
	Иначе
		ЗаголовокДиалога = НСтр("ru = 'Выберите форматы для отчета ""%1""'");
		ЗаголовокДиалога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокДиалога, Строка(СсылкаНаОтчет));
	КонецЕсли;
	
	Переменные = Новый Структура;
	Переменные.Вставить("СсылкаНаОтчет",        СсылкаНаОтчет);
	Переменные.Вставить("СписокФорматовКопия",  СписокФорматов.Скопировать());
	Переменные.Вставить("ЭтоФорматПоУмолчанию", ЭтоФорматПоУмолчанию);
	Переменные.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	Обработчик = Новый ОписаниеОповещения("ВыбратьФорматЗавершение", ЭтотОбъект, Переменные);
	
	СписокФорматов.ПоказатьОтметкуЭлементов(Обработчик, ЗаголовокДиалога);
	
КонецФункции

&НаКлиенте
Процедура ОчиститьФормат(СсылкаНаОтчет)
	Модифицированность = Истина;
	Найденные = Объект.ФорматыОтчетов.НайтиСтроки(Новый Структура("Отчет", СсылкаНаОтчет));
	Для Каждого СтрокаФормат Из Найденные Цикл
		Объект.ФорматыОтчетов.Удалить(СтрокаФормат);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблон(ТекстовыйШаблон = Неопределено, ИсключитьТемуПисьма = Ложь)
	// Проверяем и устанавливаем фокус в нужный элемент.
	Если ИсключитьТемуПисьма Или Не (ТекущийЭлемент = Элементы.ТемаПисьма Или ТекущийЭлемент = Элементы.ИмяАрхива) Тогда
		Если Объект.ПисьмоВФорматеHTML Тогда
			Если ТекущийЭлемент <> Элементы.ТекстПисьмаФорматированныйДокумент Тогда
				ТекущийЭлемент = Элементы.ТекстПисьмаФорматированныйДокумент;
			КонецЕсли;
		Иначе
			Если ТекущийЭлемент <> Элементы.ТекстПисьма Тогда
				ТекущийЭлемент = Элементы.ТекстПисьма;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекстовыйШаблон = Неопределено Тогда
		// Ограничимся подготовкой к добавлению шаблона (переключением текущего элемента).
		Возврат;
	КонецЕсли;
	
	Если ТекущийЭлемент.ВыделенныйТекст = "" Тогда
		// Форматированный документ некорректно отрабатывает изменения свойства.
		//  ВыделенныйТекст, в случае, если ничего не выделено,
		//  поэтому используется альтернативный метод добавления текста.
		Если ТекущийЭлемент = Элементы.ТекстПисьмаФорматированныйДокумент Тогда
			ТекстПисьмаФорматированныйДокумент.Добавить(ТекстовыйШаблон, ТипЭлементаФорматированногоДокумента.Текст);
		Иначе
			ТекущийЭлемент.ВыделенныйТекст = ТекстовыйШаблон;
		КонецЕсли;
	Иначе
		ТекущийЭлемент.ВыделенныйТекст = ТекущийЭлемент.ВыделенныйТекст + ТекстовыйШаблон;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ИзменитьСоставМассива(Добавить, Элемент, Знач Массив)
	Индекс = Массив.Найти(Элемент);
	Если Добавить И Индекс = Неопределено Тогда
		ВГраницаПлюс1 = ?(Массив.Количество() >= Элемент, Элемент, Массив.Количество());
		Для Индекс = 1 По ВГраницаПлюс1 Цикл
			Если Массив[ВГраницаПлюс1 - Индекс] < Элемент Тогда
				Массив.Вставить(ВГраницаПлюс1 - Индекс + 1, Элемент);
				Возврат Массив;
			КонецЕсли;
		КонецЦикла;
		Массив.Вставить(0, Элемент);
	ИначеЕсли Не Добавить И Индекс <> Неопределено Тогда
		Массив.Удалить(Индекс);
	КонецЕсли;
	Возврат Массив;
КонецФункции

&НаКлиенте
Процедура ИзменитьРасписаниеВДиалоге()
	Обработчик = Новый ОписаниеОповещения("ПослеИзмененияРасписания", ЭтотОбъект);
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	ДиалогРасписания.Показать(Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ВычислитьФлажкиДополнительныхСпособовДоставки()
	Объект.ИспользоватьПапку        = Публиковать И (ДругойСпособДоставки = "ИспользоватьПапку");
	Объект.ИспользоватьСетевойКаталог = Публиковать И (ДругойСпособДоставки = "ИспользоватьСетевойКаталог");
	Объект.ИспользоватьFTPРесурс    = Публиковать И (ДругойСпособДоставки = "ИспользоватьFTPРесурс");
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРассылку(ПараметрыДоставки)
	// Очистка окна сообщений.
	ОчиститьСообщения();
	
	// Проверка подготовленности данных и необходимости записи.
	Если Не Объект.Подготовлена Или Объект.Ссылка.Пустая() Тогда
		ЗаголовокВопроса = НСтр("ru = 'Проверка способа доставки'");
		Если Не Объект.Подготовлена Тогда
			ТекстВопроса = НСтр("ru = 'Перед проверкой рассылка должна быть подготовлена.
			|Нажмите ""Продолжить"", чтобы установить флажок ""Подготовлена"" и записать рассылку.'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Перед проверкой рассылка должна быть записана.
			|Нажмите ""Продолжить"", чтобы записать рассылку.'");
		КонецЕсли;
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		Обработчик = Новый ОписаниеОповещения("ПроверитьРассылкуПослеОтветаНаВопрос", ЭтотОбъект, ПараметрыДоставки);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, 60, 1, ЗаголовокВопроса);
	Иначе
		ПроверитьРассылкуПослеОтветаНаВопрос(-1, ПараметрыДоставки);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Клиент, Сервер

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьСтраницу(Элементы, ИмяНабораСтраниц, СуффиксСтраниц)
	Элементы[ИмяНабораСтраниц].ТекущаяСтраница = Элементы[ИмяНабораСтраниц + СуффиксСтраниц];
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВидимостьДоступностьКорректность(Форма, Изменения = "")
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Изменения = "" Или Изменения = "FTPСерверИКаталог" Тогда
		Форма.FTPСерверИКаталог = "ftp://"+ Объект.FTPСервер + Объект.FTPКаталог;
	КонецЕсли;
	
	Если Изменения = ""
		Или Изменения = "Подготовлена"
		Или Изменения = "ВыполнятьПоРасписанию"
		Или Изменения = "ВидРассылки"
		Или Изменения = "Публиковать"
		Или Изменения = "ИспользоватьЭлектроннуюПочту" Тогда
		
		Элементы.Отчеты.АвтоОтметкаНезаполненного         = Объект.Подготовлена;
		Элементы.ФорматыОтчетов.АвтоОтметкаНезаполненного = Объект.Подготовлена;
		
		Элементы.ПериодичностьРасписания.АвтоОтметкаНезаполненного = Объект.Подготовлена И Объект.ВыполнятьПоРасписанию;
		
		Элементы.СетевойКаталогWindows.АвтоОтметкаНезаполненного = Объект.Подготовлена И Форма.Публиковать;
		Элементы.СетевойКаталогLinux.АвтоОтметкаНезаполненного   = Объект.Подготовлена И Форма.Публиковать;
		Элементы.FTPСерверИКаталог.АвтоОтметкаНезаполненного     = Объект.Подготовлена И Форма.Публиковать;
		Элементы.Папка.АвтоОтметкаНезаполненного                 = Объект.Подготовлена И Форма.Публиковать;
		
		Элементы.ВидПочтовогоАдресаАвтора.АвтоОтметкаНезаполненного = Объект.Подготовлена И Объект.Личная;
		Элементы.УчетнаяЗапись.АвтоОтметкаНезаполненного = Объект.Подготовлена И Объект.ИспользоватьЭлектроннуюПочту;
		
	КонецЕсли;
	
	Если Изменения = "" Или Изменения = "ВидРассылки" Тогда
		// Корректность
		Если Объект.Личная И Объект.Персонализирована Тогда
			Объект.Личная = Ложь;
		КонецЕсли;
		
		ИспользуетсяГруппаЛичныхРассылок = (Объект.Родитель = Форма.Кэш.ГруппаЛичныхРассылок);
		Если Объект.Личная <> ИспользуетсяГруппаЛичныхРассылок Тогда
			УстановитьМодифицированностьФормы(Форма, "Родитель", , 
				НСтр("ru = 'Группа установлена в соответствии с видом рассылки'"));
			Объект.Родитель = ?(Объект.Личная, Форма.Кэш.ГруппаЛичныхРассылок, Неопределено);
		КонецЕсли;
		
		Если Объект.Личная Тогда
			РассылкаОбщая = Ложь;
			Форма.ВидРассылки = "Личная";
		ИначеЕсли Объект.Персонализирована Тогда
			РассылкаОбщая = Ложь;
			Форма.ВидРассылки = "Персонализирована";
		Иначе
			РассылкаОбщая = Истина;
			Форма.ВидРассылки = "Общая";
		КонецЕсли;
		
		Если Не РассылкаОбщая Тогда
			Объект.ИспользоватьПапку            = Ложь;
			Объект.ИспользоватьСетевойКаталог   = Ложь;
			Объект.ИспользоватьFTPРесурс        = Ложь;
			Объект.ИспользоватьЭлектроннуюПочту = Истина;
		КонецЕсли;
		
		// Видимость & Доступность
		Элементы.Родитель.Доступность = Не Объект.Личная;
		ПереключитьСтраницу(Элементы, "ВидыРассылки", ?(Объект.Личная, "Личная", "ДляПолучателей"));
		Элементы.ДругиеСпособыДоставки.Видимость = РассылкаОбщая;
		Элементы.ГруппаИспользоватьЭлектроннуюПочту.Видимость = РассылкаОбщая;
		
		Если Объект.Личная Тогда
			Элементы.ПолучателиРассылки.Видимость = Ложь;
		Иначе
			Элементы.ПолучателиРассылки.Видимость = Истина;
			Если Не РассылкаОбщая Тогда
				Элементы.ПолучателиРассылки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
			Иначе
				Элементы.ПолучателиРассылки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			КонецЕсли;
		КонецЕсли;
		
		// Восстановление параметров
		Если Объект.ИспользоватьПапку Тогда
			Форма.ДругойСпособДоставки = "ИспользоватьПапку";
			Форма.Публиковать = Истина;
		ИначеЕсли Объект.ИспользоватьСетевойКаталог Тогда
			Форма.ДругойСпособДоставки = "ИспользоватьСетевойКаталог";
			Форма.Публиковать = Истина;
		ИначеЕсли Объект.ИспользоватьFTPРесурс Тогда
			Форма.ДругойСпособДоставки = "ИспользоватьFTPРесурс";
			Форма.Публиковать = Истина;
		Иначе
			Форма.ДругойСпособДоставки = Элементы.ДругойСпособДоставки.СписокВыбора[0].Значение;
			Форма.Публиковать = Ложь;
		КонецЕсли;
		
		Элементы.ИспользоватьПолучателяРассылкиВНастройкеОтчета1.Видимость = Объект.Персонализирована;
		Элементы.ИспользоватьПолучателяРассылкиВНастройкеОтчета2.Видимость = Объект.Персонализирована;
		Элементы.ИспользоватьПолучателяРассылкиВНастройкеОтчета3.Видимость = Объект.Персонализирована;
		Элементы.ИспользоватьПолучателяРассылкиВНастройкеОтчета4.Видимость = Объект.Персонализирована;
	КонецЕсли;
	
	Если Изменения = "" Или Изменения = "Отчеты" Тогда
		КоличествоОтчетов = Форма.Объект.Отчеты.Количество();
		Если КоличествоОтчетов > 0 Тогда
			Элементы.СтраницаОтчеты.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отчеты (%1)'"), 
				Формат(КоличествоОтчетов, "ЧН=0; ЧГ="));
		Иначе
			Элементы.СтраницаОтчеты.Заголовок = НСтр("ru = 'Отчеты'") ;
		КонецЕсли;
	КонецЕсли;
	
	Если Изменения = "" Или Изменения = "ДругойСпособДоставки" Или Изменения = "Публиковать" Или Изменения = "ВидРассылки" Тогда
		Элементы.ДругойСпособДоставки.Доступность  = Форма.Публиковать;
		Элементы.ПараметрыДоставки.Доступность     = Форма.Публиковать;
		Элементы.ПараметрыДоставки.ТекущаяСтраница = Элементы[Форма.ДругойСпособДоставки];
		Элементы.ПроверитьПубликацию.Доступность   = Форма.Публиковать;
	КонецЕсли;
	
	Если Изменения = "" Или Изменения = "ИспользоватьЭлектроннуюПочту" Или Изменения = "ВидРассылки" Тогда
		Элементы.ГруппаУчетнаяЗапись.Доступность = Объект.ИспользоватьЭлектроннуюПочту;
		Элементы.ПараметрыПисьма.Доступность = Объект.ИспользоватьЭлектроннуюПочту;
		Элементы.ДополнительныеПараметрыРассылкиПоЭлектроннойПочте.Доступность = Объект.ИспользоватьЭлектроннуюПочту;
		Элементы.ПолучателиРассылки.Доступность = Объект.ИспользоватьЭлектроннуюПочту;
	КонецЕсли;
	
	Если Изменения = "" Или Изменения = "ПолучателиРассылки" Тогда
		ПредставлениеПолучателей = ПредставлениеПолучателей(Форма);
		Форма.ПолучателиРассылки = ПредставлениеПолучателей.Краткое;
		Элементы.ПолучателиРассылки.Подсказка = ПредставлениеПолучателей.Полное;
	КонецЕсли;
	
	Если Изменения = ""
		Или Изменения = "ТолькоУведомить"
		Или Изменения = "ИспользоватьЭлектроннуюПочту"
		Или Изменения = "ДругойСпособДоставки"
		Или Изменения = "Публиковать"
		Или Изменения = "ВидРассылки" Тогда
		
		ВидимостьОпции = (Объект.ИспользоватьЭлектроннуюПочту И Форма.Публиковать);
		ПереключитьСтраницу(Элементы, "ТолькоУведомления", ?(ВидимостьОпции, "Показать", "Скрыть"));
		Если Не ВидимостьОпции Тогда
			Объект.ТолькоУведомить = Ложь;
		КонецЕсли;
		
		СпособыДоставки = "";
		Если Объект.ИспользоватьПапку Тогда
			СпособыДоставки = НСтр("ru = 'папка'");
		КонецЕсли;
		Если Объект.ИспользоватьСетевойКаталог Тогда
			СпособыДоставки = НСтр("ru = 'сетевой каталог'");
		КонецЕсли;
		Если Объект.ИспользоватьFTPРесурс Тогда
			СпособыДоставки = НСтр("ru = 'FTP'");
		КонецЕсли;
		Если Объект.ИспользоватьЭлектроннуюПочту И Не Объект.ТолькоУведомить Тогда
			СпособыДоставки = СпособыДоставки + ?(СпособыДоставки = "", НСтр("ru = 'эл. почта'"), " "+ НСтр("ru = 'и эл. почта'"));
		КонецЕсли;
		
		Элементы.СтраницаДоставка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Доставка (%1)'"), СпособыДоставки);
	КонецЕсли;
	
	Если Изменения = "" Или Изменения = "ПисьмоВФорматеHTML" Тогда
		ПереключитьСтраницу(Элементы, "СтраницыТекстПисьма", ?(Объект.ПисьмоВФорматеHTML, "HTML", "ОбычныйТекст"));
	КонецЕсли;
	
	Если Изменения = "" Или Изменения = "Архивировать" Тогда
		Элементы.ИмяАрхива.Доступность    = Объект.Архивировать;
		Элементы.ПарольАрхива.Доступность = Объект.Архивировать;
	КонецЕсли;
	
	Если Изменения = "" Или Изменения = "ВыполнятьПоРасписанию" Тогда
		Если Объект.ВыполнятьПоРасписанию Тогда
			Элементы.СтраницаРасписание.Заголовок = НСтр("ru = 'Расписание (активно)'");
		Иначе
			Элементы.СтраницаРасписание.Заголовок = НСтр("ru = 'Расписание (не активно)'");
		КонецЕсли;
		Элементы.ПараметрыВыполненияПоРасписанию.Доступность = Объект.ВыполнятьПоРасписанию;
		Элементы.СтраницыПериодичности.Доступность           = Объект.ВыполнятьПоРасписанию;
	КонецЕсли;
	
	Если Изменения = "" Или Изменения = "ПериодичностьРасписания" Тогда
		
		Если Объект.ПериодичностьРасписания = ПредопределенноеЗначение("Перечисление.ПериодичностиРасписанийРассылокОтчетов.Ежедневно") Тогда
			ИмяПеречисления = "Ежедневно";
		ИначеЕсли Объект.ПериодичностьРасписания = ПредопределенноеЗначение("Перечисление.ПериодичностиРасписанийРассылокОтчетов.Ежемесячно") Тогда
			ИмяПеречисления = "Ежемесячно";
		ИначеЕсли Объект.ПериодичностьРасписания = ПредопределенноеЗначение("Перечисление.ПериодичностиРасписанийРассылокОтчетов.Еженедельно") Тогда
			ИмяПеречисления = "Еженедельно";
		Иначе
			ИмяПеречисления = "Произвольное";
		КонецЕсли;
		
		Элементы.СтраницыПериодичности.ТекущаяСтраница = Элементы["Страница"+ИмяПеречисления];
		Если ИмяПеречисления = "Произвольное" Тогда
			Элементы.СтраницыВремяИлиИзменить.ТекущаяСтраница = Элементы.СтраницаИзменитьРасписание;
		Иначе
			Элементы.СтраницыВремяИлиИзменить.ТекущаяСтраница = Элементы.СтраницаВремяНачала;
		КонецЕсли;
		
		// Сброс параметров, которые не соответствуют закладкам упрощенного редактирования.
		Если Изменения = "ПериодичностьРасписания"
			И (ИмяПеречисления = "Ежедневно" 
			Или ИмяПеречисления = "Еженедельно"
			Или ИмяПеречисления = "Ежемесячно") Тогда
			
			// Общие параметры
			Форма.Расписание.ДатаНачала = '00010101';
			Форма.Расписание.ДатаКонца  = '00010101';
			Форма.Расписание.ВремяКонца = '00010101';
			Форма.Расписание.ВремяЗавершения = '00010101';
			Форма.Расписание.ДеньНеделиВМесяце = 0;
			Форма.Расписание.ДетальныеРасписанияДня = Новый Массив;
			Форма.Расписание.ИнтервалЗавершения = 0;
			Форма.Расписание.ПаузаПовтора = 0;
			Форма.Расписание.ПериодНедель = 0;
			Форма.Расписание.ПериодПовтораВТечениеДня = 0;
			
			Если ИмяПеречисления <> "Ежедневно" Тогда
				Форма.Расписание.ПериодПовтораДней = 1;
			КонецЕсли;
			
			Если ИмяПеречисления <> "Еженедельно" Тогда
				ВыбранныеДниНедели = Новый Массив;
				Для Индекс = 1 По 7 Цикл
					ВыбранныеДниНедели.Добавить(Индекс);
				КонецЦикла;
				Форма.Расписание.ДниНедели = ВыбранныеДниНедели;
			КонецЕсли;
			
			Если ИмяПеречисления <> "Ежемесячно" Тогда
				ВсеМесяцы = Новый Массив;
				Для Индекс = 1 По 12 Цикл
					ВсеМесяцы.Добавить(Индекс);
				КонецЦикла;
				Форма.Расписание.Месяцы = ВсеМесяцы;
				Форма.Расписание.ДеньВМесяце = 0;
			КонецЕсли;
		КонецЕсли;
		
		// Восстанавливаем параметры на текущей закладке в соответствии с параметрами расписания.
		Если ИмяПеречисления = "Ежедневно" Тогда
			Форма.ВремяНачала = Форма.Расписание.ВремяНачала;
			Форма.ПериодПовтораДней = Форма.Расписание.ПериодПовтораДней;
		ИначеЕсли ИмяПеречисления = "Еженедельно" Тогда
			Форма.ВремяНачала = Форма.Расписание.ВремяНачала;
			Для Каждого КлючИЗначение Из Форма.Кэш.Соответствия.ДниНедели Цикл
				Форма[КлючИЗначение.Ключ] = (Форма.Расписание.ДниНедели.Найти(КлючИЗначение.Значение) <> Неопределено);
			КонецЦикла;
		ИначеЕсли ИмяПеречисления = "Ежемесячно" Тогда
			Форма.ВремяНачала = Форма.Расписание.ВремяНачала;
			Если Форма.Расписание.ДеньВМесяце >= 0 Тогда
				Форма.ДеньВМесяце = Форма.Расписание.ДеньВМесяце;
				Элементы.ГиперссылкаНачалоКонецМесяца.Заголовок = НСтр("ru = 'начала'");
			Иначе
				Форма.ДеньВМесяце = -Форма.Расписание.ДеньВМесяце;
				Элементы.ГиперссылкаНачалоКонецМесяца.Заголовок = НСтр("ru = 'конца'");
			КонецЕсли;
			Для Каждого КлючИЗначение Из Форма.Кэш.Соответствия.Месяцы Цикл
				Форма[КлючИЗначение.Ключ] = (Форма.Расписание.Месяцы.Найти(КлючИЗначение.Значение) <> Неопределено);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли; // Изменения = "" Или Изменения = "ПериодичностьРасписания"
	
	Если Изменения = "" Или Изменения = "НачалоКонецМесяца" Тогда
		Элементы.ГиперссылкаНачалоКонецМесяца.Заголовок = ?(Форма.Расписание.ДеньВМесяце >= 0, "начала", "конца");
	КонецЕсли;
	
	Если Изменения = "" Или Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРасписание Тогда
		Форма.ПредставлениеРасписания = Строка(Форма.Расписание);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПолучателей(Форма)
	Получатели  = Форма.Объект.Получатели;
	Включенные  = Получатели.НайтиСтроки(Новый Структура("Исключен", Ложь));
	Отключенные = Получатели.НайтиСтроки(Новый Структура("Исключен", Истина));
	
	ПредставлениеОтключенных = РассылкаОтчетовКлиентСервер.ПредставлениеСписка(Отключенные, "Получатель", 0);
	Остаток       = 75 - ПредставлениеОтключенных.ДлинаКраткого;
	Представление = РассылкаОтчетовКлиентСервер.ПредставлениеСписка(Включенные, "Получатель", Остаток);
	Если Представление.Всего = 0 Тогда
		Представление.Краткое = НСтр("ru = '<Укажите получателей>'");
		Возврат Представление;
	КонецЕсли;
	
	Если ПредставлениеОтключенных.МаксимумПревышен Тогда
		ПредставлениеОтключенных.Краткое = ПредставлениеОтключенных.Краткое + ", ...";
	КонецЕсли;
	Если Представление.МаксимумПревышен Тогда
		Представление.Краткое = Представление.Краткое + ", ...";
	КонецЕсли;
	
	Если ПредставлениеОтключенных.Всего > 0 Тогда
		ШаблонРазделения = НСтр("ru = 'Кроме'")+ ": ";
		Представление.Полное = Представление.Полное + ";" + Символы.ПС + ШаблонРазделения + ПредставлениеОтключенных.Полное;
		Если Представление.ДлинаКраткого + ПредставлениеОтключенных.ДлинаКраткого <= 75 Тогда
			Представление.Краткое = Представление.Краткое + "; " + ШаблонРазделения + ПредставлениеОтключенных.Краткое;
		КонецЕсли;
	КонецЕсли;
	Если Представление.МаксимумПревышен
		Или ПредставлениеОтключенных.МаксимумПревышен Тогда
		Если ПредставлениеОтключенных.Всего > 0 Тогда
			ШаблонОкончания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '(всего %1, исключая %2)'"),
				Представление.Всего,
				ПредставлениеОтключенных.Всего);
		Иначе
			ШаблонОкончания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '(всего %1)'"),
				Представление.Всего);
		КонецЕсли;
		Представление.Краткое = Представление.Краткое + "; " + ШаблонОкончания;
	КонецЕсли;
	
	Возврат Представление;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьМодифицированностьФормы(Форма, Поле = "", ПутьКДанным = "", Текст = "")
	Если Не Форма.Модифицированность Тогда
		Форма.ФормаБылаМодифицированаНаСервере = Истина;
		Если ЗначениеЗаполнено(Текст) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , Поле, ПутьКДанным);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеФорматовПоУмолчанию()
	Возврат НСтр("ru = 'по умолчанию'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучателиУказаны(Получатели)
	Для Каждого СтрокаТаблицы Из Получатели Цикл
		Если Не СтрокаТаблицы.Исключен Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	ТекстСообщения = НСтр("ru = 'Не выбрано ни одного получателя'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПолучателиРассылки");
	Возврат Ложь;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера, Сервер

&НаСервереБезКонтекста
Функция ПолучитьСписокПочтовыхАдресов(Получатель, СписокЗначений = Неопределено)
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	тчКонтактнаяИнформация.Представление КАК Представление,
	|	тчКонтактнаяИнформация.Вид КАК Значение
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК тчКонтактнаяИнформация
	|ГДЕ
	|	тчКонтактнаяИнформация.Ссылка = &Получатель
	|	И тчКонтактнаяИнформация.Тип = &ТипКИ";
	Попытка
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Пользователи", Получатель.Метаданные().Имя);
	Исключение
		Возврат СписокЗначений;
	КонецПопытки;
	
	Если СписокЗначений = Неопределено Тогда
		СписокЗначений = Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("ТипКИ", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.Текст = ТекстЗапроса;
	
	ТЗИтог = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрИтог Из ТЗИтог Цикл
		Если ЗначениеЗаполнено(СтрИтог.Представление) Тогда
			СписокЗначений.Добавить(СтрИтог.Значение, СтрИтог.Представление +" ("+ Строка(СтрИтог.Значение) +")");
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокЗначений;
КонецФункции

&НаСервереБезКонтекста
Функция ПравоИзмененияПапкиИФайлов(Папка)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиСлужебный");
		Результат = МодульРаботаСФайламиСлужебный.ПравоДобавленияФайловВПапку(Папка);
	Иначе
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОтчетыПриАктивизацииСтрокиНаСервере(ИдентификаторСтроки, ДобавитьДежурнуюФразу = Истина, Знач ПользовательскиеНастройки = Неопределено)
	// Сохранение настроек предыдущего отчета.
	Если ИдентификаторСтроки <> ИдентификаторТекущейСтрокиТаблицыОтчетов И ИдентификаторТекущейСтрокиТаблицыОтчетов <> -1 Тогда
		ЗаписатьНастройкиСтрокиОтчеты(ИдентификаторТекущейСтрокиТаблицыОтчетов);
	КонецЕсли;
	ИдентификаторТекущейСтрокиТаблицыОтчетов = ИдентификаторСтроки;
	
	// Поиск строки
	СтрокаОтчеты = Объект.Отчеты.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаОтчеты = Неопределено Тогда
		ИдентификаторТекущейСтрокиТаблицыОтчетов = -1;
		Возврат "";
	КонецЕсли;
	
	Если ПользовательскиеНастройки = Неопределено Тогда
		// Чтение настроек текущей строки из временного хранилища или из табличной части по ссылке.
		Если ЭтоАдресВременногоХранилища(СтрокаОтчеты.АдресНастроек) Тогда
			ПользовательскиеНастройки = ПолучитьИзВременногоХранилища(СтрокаОтчеты.АдресНастроек);
		Иначе
			ИндексСтроки = Объект.Отчеты.Индекс(СтрокаОтчеты);
			ОбъектСтрокаОтчеты = РеквизитФормыВЗначение("Объект").Отчеты.Получить(ИндексСтроки);
			ПользовательскиеНастройки = ?(ОбъектСтрокаОтчеты = Неопределено, Неопределено, ОбъектСтрокаОтчеты.Настройки.Получить());
		КонецЕсли;
	КонецЕсли;
	
	// Инициализация
	ПараметрыОтчета = ИнициализироватьОтчет(СтрокаОтчеты, ДобавитьДежурнуюФразу, ПользовательскиеНастройки);
	
	Возврат ПараметрыОтчета.Ошибки;
КонецФункции

&НаСервере
Процедура ЗаполнитьРасписаниеПоВарианту(Вариант, ОбновитьВидимость = Ложь)
	// Список вариантов - см. РассылкаОтчетовКлиентСервер.СписокВариантовЗаполненияРасписаний().
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	
	// в 7:30 утра
	Расписание.ВремяНачала = '00010101073000';
	
	// каждый день
	Расписание.ПериодПовтораДней = 1;
	
	// по дням недели
	ДеньНеделиМин = 1;
	ДеньНеделиМакс = 7;
	
	// по всем месяцам
	ВсеМесяцы = Новый Массив;
	Для Индекс = 1 По 12 Цикл
		ВсеМесяцы.Добавить(Индекс);
	КонецЦикла;
	Расписание.Месяцы = ВсеМесяцы;
	
	Если Вариант = 1 Тогда // "Каждый день"
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Ежедневно;
		
	ИначеЕсли Вариант = 2 Тогда // "Каждый второй день"
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Ежедневно;
		Расписание.ПериодПовтораДней = 2;
		
	ИначеЕсли Вариант = 3 Тогда // "Каждый четвертый день"
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Ежедневно;
		Расписание.ПериодПовтораДней = 4;
		
	ИначеЕсли Вариант = 4 Тогда // "По будням"
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Еженедельно;
		ДеньНеделиМин = 1;
		ДеньНеделиМакс = 5;
		
	ИначеЕсли Вариант = 5 Тогда // "По выходным"
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Еженедельно;
		Расписание.ВремяНачала = '00010101220000'; // в 10:00 вечера
		ДеньНеделиМин = 6;
		ДеньНеделиМакс = 7;
		
	ИначеЕсли Вариант = 6 Тогда // "По понедельникам"
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Еженедельно;
		ДеньНеделиМин = 1;
		ДеньНеделиМакс = 1;
		
	ИначеЕсли Вариант = 7 Тогда // "По пятницам"
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Еженедельно;
		ДеньНеделиМин = 5;
		ДеньНеделиМакс = 5;
		
	ИначеЕсли Вариант = 8 Тогда // "По воскресеньям"
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Еженедельно;
		Расписание.ВремяНачала = '00010101220000'; // в 10:00 вечера
		ДеньНеделиМин = 7;
		ДеньНеделиМакс = 7;
		
	ИначеЕсли Вариант = 9 Тогда // "В первый день месяца"
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Ежемесячно;
		Расписание.ДеньВМесяце = 1;
		
	ИначеЕсли Вариант = 10 Тогда // "В последний день месяца"
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Ежемесячно;
		Расписание.ДеньВМесяце = -1;
		
	ИначеЕсли Вариант = 11 Тогда // СКаждый квартал десятого числа".
		ВсеМесяцы = Новый Массив;
		ВсеМесяцы.Добавить(1);
		ВсеМесяцы.Добавить(4);
		ВсеМесяцы.Добавить(7);
		ВсеМесяцы.Добавить(10);
		Расписание.Месяцы = ВсеМесяцы;
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Ежемесячно;
		Расписание.ДеньВМесяце = 10;
		
	ИначеЕсли Вариант = 12 Тогда // "Другое..."
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Произвольное;
	
	Иначе
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Ежедневно;
		
	КонецЕсли;
	
	// по дням недели
	ВыбранныеДниНедели = Новый Массив;
	Для Индекс = ДеньНеделиМин По ДеньНеделиМакс Цикл
		ВыбранныеДниНедели.Добавить(Индекс);
	КонецЦикла;
	Расписание.ДниНедели = ВыбранныеДниНедели;
	
	Если ОбновитьВидимость Тогда
		ВидимостьДоступностьКорректность(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьДобавленныеСтрокиОтчетов(СтруктураВыбора)
	// СтруктураВыбора:
	//   Выбрано   - Структура - строки, выбранные пользователем.
	//   Успешно   - Структура - строки, инициализированные и добавленные в список.
	//   СОшибками - Структура - строки, не добавленные в список из-за ошибок.
	//       * МассивСтрок - Массив.
	//       * Количество - Число
	//       * ПредставлениеОтчетов - Строка.
	//       * Текст - Строка.
	
	МассивОшибок = Новый Массив;
	
	СтруктураВыбора.Выбрано.Количество = СтруктураВыбора.Выбрано.МассивСтрок.Количество();
	Для ОбратныйИндекс = 1 По СтруктураВыбора.Выбрано.Количество Цикл
		Индекс = СтруктураВыбора.Выбрано.Количество - ОбратныйИндекс;
		ИдентификаторСтрокиОтчеты = СтруктураВыбора.Выбрано.МассивСтрок[Индекс];
		
		СтрокаОтчеты = Объект.Отчеты.НайтиПоИдентификатору(ИдентификаторСтрокиОтчеты);
		Если СтрокаОтчеты.Представление = "" Тогда
			СтрокаОтчеты.Представление = Строка(СтрокаОтчеты.Отчет);
		КонецЕсли;
		
		СтрокаПредупреждения = ОтчетыПриАктивизацииСтрокиНаСервере(ИдентификаторСтрокиОтчеты, Ложь);
		Если СтрокаПредупреждения = "" Тогда
			Ключ = "Успешно";
		Иначе
			Ключ = "СОшибками";
			МассивОшибок.Добавить(СтрокаПредупреждения);
		КонецЕсли;
		
		СтруктураВыбора[Ключ].Количество = СтруктураВыбора[Ключ].Количество + 1;
		СтруктураВыбора[Ключ].МассивСтрок.Добавить(ИдентификаторСтрокиОтчеты);
		СтруктураВыбора[Ключ].ПредставлениеОтчетов = СтруктураВыбора[Ключ].ПредставлениеОтчетов
		+ ?(СтруктураВыбора[Ключ].ПредставлениеОтчетов = "", "", ", ")
		+ СтрокаОтчеты.Представление;
	КонецЦикла;
	
	// Установка курсора на первый из добавленных элементов.
	Если СтруктураВыбора.Успешно.Количество > 0 Тогда
		Элементы.Отчеты.ТекущаяСтрока = СтруктураВыбора.Успешно.МассивСтрок[0];
		ИдентификаторТекущейСтрокиТаблицыОтчетов = Элементы.Отчеты.ТекущаяСтрока;
		ОтчетыПриАктивизацииСтрокиНаСервере(ИдентификаторСтрокиОтчеты, Ложь);
	КонецЕсли;
		
	// Сборка текста ошибок
	Если СтруктураВыбора.СОшибками.Количество > 0 Тогда
		СтруктураВыбора.СОшибками.Текст = РассылкаОтчетовКлиентСервер.СтрокаСообщенийПользователю(МассивОшибок);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьСпособДоставки(Рассылка, Знач ПараметрыДоставки)
	Если Модифицированность И Не Записать() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыДоставки.Вставить("ДатаВыполнения", ТекущаяДатаСеанса());
	
	// Инициализация параметров записи в журнал регистрации.
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("ИмяСобытия",   НСтр("ru = 'Рассылка отчетов. Проверка способа доставки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	ПараметрыЖурнала.Вставить("Данные",       Рассылка);
	ПараметрыЖурнала.Вставить("Метаданные",   Метаданные.Справочники.РассылкиОтчетов);
	ПараметрыЖурнала.Вставить("МассивОшибок", Новый Массив);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Добавление параметров доставки для записи результатов выполнения.
	ПараметрыДоставки.Вставить("БылиОшибки",                  Ложь);
	ПараметрыДоставки.Вставить("БылиПредупреждения",          Ложь);
	ПараметрыДоставки.Вставить("ВыполненаВПапку",             Ложь);
	ПараметрыДоставки.Вставить("ВыполненаВСетевойКаталог",    Ложь);
	ПараметрыДоставки.Вставить("ВыполненаНаFTP",              Ложь);
	ПараметрыДоставки.Вставить("ВыполненаПоЭлектроннойПочте", Ложь);
	
	// Запись пустого табличного документа в html 4.
	ПолноеИмяФайла = ПолучитьИмяВременногоФайла(".html");
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.HTML4);
	
	// Формирование вложений
	Файл = Новый Файл(ПолноеИмяФайла);
	
	Вложения = Новый Соответствие;
	Вложения.Вставить(Файл.Имя, Файл.ПолноеИмя);
	
	// Доставка
	Выполнена = РассылкаОтчетов.ВыполнитьДоставку(ПараметрыЖурнала, ПараметрыДоставки, Вложения);
	
	// Очистка вложений
	Для Каждого Вложение Из Вложения Цикл
		УдалитьФайлы(Вложение.Значение);
	КонецЦикла;
	
	РезультатВыполнения = Новый Структура("Текст, Подробно");
	
	Если Выполнена Тогда
		РезультатВыполнения.Текст = НСтр("ru = 'Тест способа доставки успешно пройден.'");
	Иначе
		РезультатВыполнения.Текст = НСтр("ru = 'Тест способа доставки не пройден.'");
		РезультатВыполнения.Подробно = РассылкаОтчетовКлиентСервер.СтрокаСообщенийПользователю(ПараметрыЖурнала.МассивОшибок, Ложь);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура УстановитьУсловноеОформление()
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Поля = "НастройкиТекущегоОтчета";
	Инструкция.Отборы.Вставить("НастройкиТекущегоОтчета.Обнаружен", Ложь);
	Инструкция.Оформление.Вставить("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Инструкция.Оформление.Вставить("Доступность", Ложь);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКэш()
	// Преобразование наименований в значения.
	ДниНедели = Новый Соответствие;
	ДниНедели.Вставить("Понедельник", 1);
	ДниНедели.Вставить("Вторник",     2);
	ДниНедели.Вставить("Среда",       3);
	ДниНедели.Вставить("Четверг",     4);
	ДниНедели.Вставить("Пятница",     5);
	ДниНедели.Вставить("Суббота",     6);
	ДниНедели.Вставить("Воскресенье", 7);
	ДниНедели = Новый ФиксированноеСоответствие(ДниНедели);
	
	Месяцы = Новый Соответствие;
	Месяцы.Вставить("Январь",   1);
	Месяцы.Вставить("Февраль",  2);
	Месяцы.Вставить("Март",     3);
	Месяцы.Вставить("Апрель",   4);
	Месяцы.Вставить("Май",      5);
	Месяцы.Вставить("Июнь",     6);
	Месяцы.Вставить("Июль",     7);
	Месяцы.Вставить("Август",   8);
	Месяцы.Вставить("Сентябрь", 9);
	Месяцы.Вставить("Октябрь",  10);
	Месяцы.Вставить("Ноябрь",   11);
	Месяцы.Вставить("Декабрь",  12);
	Месяцы = Новый ФиксированноеСоответствие(Месяцы);
	
	// Умолчания для полей, поддерживающих шаблоны заполнения.
	Шаблоны = Новый ФиксированнаяСтруктура("Тема, Текст, ИмяАрхива",
		РассылкаОтчетовКлиентСервер.ШаблонТемы(),
		РассылкаОтчетовКлиентСервер.ШаблонТекста(),
		РассылкаОтчетовКлиентСервер.ШаблонИмениАрхива());
	
	// Структура кэша.
	Кэш = Новый Структура;
	Кэш.Вставить("ПустоеЗначениеОтчета", РассылкаОтчетовПовтИсп.ПустоеЗначениеОтчета());
	Кэш.Вставить("ГруппаЛичныхРассылок", Справочники.РассылкиОтчетов.ЛичныеРассылки);
	Кэш.Вставить("ЗаголовокСистемы", РассылкаОтчетовПовтИсп.ИмяЭтойИнформационнойБазы());
	Кэш.Вставить("Соответствия", Новый ФиксированнаяСтруктура("ДниНедели, Месяцы", ДниНедели, Месяцы));
	Кэш.Вставить("Шаблоны", Шаблоны);
	Кэш.Вставить("ИсключаемыеОтчеты", РассылкаОтчетовПовтИсп.ИсключаемыеОтчеты());
	
	Возврат Новый ФиксированнаяСтруктура(Кэш);
КонецФункции

&НаСервере
Процедура ПрочитатьПользовательскоеПредставлениеФорматов()
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаОтчеты Из Объект.Отчеты Цикл
		СтрокаОтчеты.Представление = Строка(СтрокаОтчеты.Отчет);
		СтрокаОтчеты.Форматы = "";
		Найденные = Объект.ФорматыОтчетов.НайтиСтроки(Новый Структура("Отчет", СтрокаОтчеты.Отчет));
		Для Каждого СтрокаФормат Из Найденные Цикл
			СтрокаОтчеты.Форматы = СтрокаОтчеты.Форматы + ?(СтрокаОтчеты.Форматы = "", "", ", ") + Строка(СтрокаФормат.Формат);
		КонецЦикла;
		Если СтрокаОтчеты.Форматы = "" Тогда
			СтрокаОтчеты.Форматы = ПредставлениеФорматовПоУмолчанию();
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРасписаниеРегламентногоЗадания()
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторЗадания = ?(СозданКопированием, ЗначениеКопирования.РегламентноеЗадание, Объект.РегламентноеЗадание);
	Если ТипЗнч(ИдентификаторЗадания) = Тип("УникальныйИдентификатор") Тогда
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		Если Задание <> Неопределено Тогда
			Расписание = Задание.Расписание;
			Если Объект.ПериодичностьРасписания <> Перечисления.ПериодичностиРасписанийРассылокОтчетов.Произвольное Тогда
				Расписание.ВремяКонца = '00010101';
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиОтчетовОбъектаКопирования()
	КоличествоСтрок = Объект.Отчеты.Количество();
	Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
		Индекс = КоличествоСтрок - ОбратныйИндекс;
		СтрокаОтчеты = Объект.Отчеты.Получить(Индекс);
		СтрокаОтчетыОбъектаКопирования = ЗначениеКопирования.Отчеты.Получить(Индекс);
		
		ПользовательскиеНастройкиКД = СтрокаОтчетыОбъектаКопирования.Настройки.Получить();
		
		СтрокаОтчеты.ВнесеныИзменения = Истина;
		
		ИдентификаторСтроки = СтрокаОтчеты.ПолучитьИдентификатор();
		СтрокаПредупреждения = ОтчетыПриАктивизацииСтрокиНаСервере(ИдентификаторСтроки, Истина, ПользовательскиеНастройкиКД);
		Если СтрокаПредупреждения <> "" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаПредупреждения, , "Объект.Отчеты["+ Индекс +"].Представление");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПодключитьКэшНастроекЭлектроннойПочты()
	// Подключение кэша типов получателей.
	ТаблицаТиповПолучателей.Загрузить(РассылкаОтчетовПовтИсп.ТаблицаТиповПолучателей());
	
	// Заполнение списка выбора типов получателей.
	Для Каждого СтрокаПолучатель Из ТаблицаТиповПолучателей Цикл
		Элементы.ТипПолучателейРассылки.СписокВыбора.Добавить(СтрокаПолучатель.ТипПолучателей, СтрокаПолучатель.Представление);
		Если СтрокаПолучатель.ИОМД = Объект.ТипПолучателейРассылки Тогда
			ТипПолучателейРассылки = СтрокаПолучатель.ТипПолучателей;
			Если Объект.ВидПочтовогоАдресаПолучателей.Пустая() И ЗначениеЗаполнено(СтрокаПолучатель.ОсновнойВидКИ) Тогда
				Объект.ВидПочтовогоАдресаПолучателей = СтрокаПолучатель.ОсновнойВидКИ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеШаблоныСтандартными(ТекущийОбъект)
	// Данные объекта
	Если ПустаяСтрока(ТекущийОбъект.ТемаПисьма) Тогда
		ТекущийОбъект.ТемаПисьма = Кэш.Шаблоны.Тема;
	КонецЕсли;
	Если ПустаяСтрока(ТекущийОбъект.ТекстПисьма) Тогда
		ТекущийОбъект.ТекстПисьма = Кэш.Шаблоны.Текст;
	КонецЕсли;
	Если ПустаяСтрока(ТекущийОбъект.ИмяАрхива) Тогда
		ТекущийОбъект.ИмяАрхива = Кэш.Шаблоны.ИмяАрхива;
	КонецЕсли;
	// Данные формы
	Если ПустаяСтрока(ТекстПисьмаФорматированныйДокумент.ПолучитьТекст()) Тогда
		ТекстПисьмаФорматированныйДокумент.Добавить(Кэш.Шаблоны.Текст, ТипЭлементаФорматированногоДокумента.Текст);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиСтрокиОтчеты(ИдентификаторСтроки)
	СтрокаОтчеты = Объект.Отчеты.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаОтчеты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтрокаОтчеты.Инициализирован Тогда
		СохраняемоеЗначение = Неопределено;
	ИначеЕсли СтрокаОтчеты.СКД Тогда
		СохраняемоеЗначение = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	Иначе
		ИменаКолонок = "Реквизит, Представление, Значение, Использование";
		Отбор = Новый Структура("Обнаружен", Истина);
		СохраняемоеЗначение = НастройкиТекущегоОтчета.Выгрузить().Скопировать(Отбор, ИменаКолонок);
	КонецЕсли;
	
	Адрес = ?(ЭтоАдресВременногоХранилища(СтрокаОтчеты.АдресНастроек), СтрокаОтчеты.АдресНастроек, УникальныйИдентификатор);
	
	СтрокаОтчеты.АдресНастроек = ПоместитьВоВременноеХранилище(СохраняемоеЗначение, Адрес);
КонецПроцедуры

&НаСервере
Функция ИнициализироватьОтчет(СтрокаОтчеты, ДобавитьДежурнуюФразу, ПользовательскиеНастройки, Интерактивно = Истина)
	// Параметры журнала
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("ИмяСобытия",   НСтр("ru = 'Рассылка отчетов. Инициализация отчета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	ПараметрыЖурнала.Вставить("Данные",       Объект.Ссылка);
	ПараметрыЖурнала.Вставить("Метаданные",   Метаданные.Справочники.РассылкиОтчетов);
	ПараметрыЖурнала.Вставить("МассивОшибок", Новый Массив);
	
	// Инициализация отчета
	ПараметрыОтчета = Новый Структура("Отчет, Настройки", СтрокаОтчеты.Отчет, ПользовательскиеНастройки);
	РассылкаОтчетов.ИнициализироватьОтчет(
		ПараметрыЖурнала,
		ПараметрыОтчета,
		Объект.Персонализирована,
		ЭтотОбъект.УникальныйИдентификатор);
	
	ПараметрыОтчета.Вставить("МассивОшибок", ПараметрыЖурнала.МассивОшибок);
	ПараметрыОтчета.Ошибки = РассылкаОтчетовКлиентСервер.СтрокаСообщенийПользователю(ПараметрыОтчета.МассивОшибок, ДобавитьДежурнуюФразу);
	
	Если ПараметрыОтчета.Инициализирован Тогда
		СтрокаОтчеты.СКД             = ПараметрыОтчета.СКД;
		СтрокаОтчеты.Инициализирован = ПараметрыОтчета.Инициализирован;
		СтрокаОтчеты.ПолноеИмя       = ПараметрыОтчета.ПолноеИмя;
		СтрокаОтчеты.КлючВарианта    = ПараметрыОтчета.КлючВарианта;
		// Поддержка возможности прямого выбора ссылок дополнительных отчетов в рассылках отчетов.
		Если ЗначениеЗаполнено(ПараметрыОтчета.СсылкаВарианта) Тогда
			СтрокаОтчеты.Отчет         = ПараметрыОтчета.СсылкаВарианта;
			СтрокаОтчеты.Представление = Строка(СтрокаОтчеты.Отчет);
		КонецЕсли;
	КонецЕсли;
	
	Если Не Интерактивно Тогда
		Возврат ПараметрыОтчета;
	КонецЕсли;
	
	// Проверка результата инициализации.
	Если Не СтрокаОтчеты.Инициализирован Тогда
		ПараметрыОтчета.Ошибки = (
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отчет %1 был удален из-за ошибки инициализации'"),
				"'"+ Строка(СтрокаОтчеты.Представление) +"'")
			+ ":"
			+ Символы.ПС
			+ ПараметрыОтчета.Ошибки);
		
		// Удаление строки.
		Объект.Отчеты.Удалить(СтрокаОтчеты);
		
		// Пустая страница настроек.
		Элементы.СтраницыНастроекОтчета.ТекущаяСтраница = Элементы.ПустаяСтраница;
		
		Возврат ПараметрыОтчета;
	КонецЕсли;
	
	// Восстановление настроек
	Если СтрокаОтчеты.СКД Тогда
		
		КомпоновщикНастроекКД = ПараметрыОтчета.КомпоновщикНастроекКД;
		Элементы.СтраницыНастроекОтчета.ТекущаяСтраница = Элементы.СтраницаКомпоновщик;
		
	Иначе
		
		// Очищаем & Восстанавливаем
		Если ТипЗнч(ПользовательскиеНастройки) = Тип("ТаблицаЗначений") Тогда
			НастройкиТекущегоОтчета.Загрузить(ПользовательскиеНастройки);
		Иначе
			НастройкиТекущегоОтчета.Очистить();
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из ПараметрыОтчета.ДоступныеРеквизиты Цикл
			// Обновляем вычисляемые реквизиты.
			Найденные = НастройкиТекущегоОтчета.НайтиСтроки(Новый Структура("Реквизит", КлючИЗначение.Ключ));
			Если Найденные.Количество() = 0 Тогда
				СтрокаНастройка = НастройкиТекущегоОтчета.Добавить();
				СтрокаНастройка.Реквизит = КлючИЗначение.Ключ;
			Иначе
				СтрокаНастройка = Найденные[0];
			КонецЕсли;
			СтрокаНастройка.Представление = КлючИЗначение.Значение.Представление;
			СтрокаНастройка.Тип           = КлючИЗначение.Значение.Тип;
			СтрокаНастройка.Обнаружен     = Истина;
			СтрокаНастройка.ИндексКартинки = 3;
		КонецЦикла;
		
		// Отключаем необнаруженные строки.
		Найденные = НастройкиТекущегоОтчета.НайтиСтроки(Новый Структура("Обнаружен", Ложь));
		Для Каждого СтрокаНастройка Из Найденные Цикл
			СтрокаНастройка.Использование = Ложь;
			СтрокаНастройка.ИндексКартинки = 4;
		КонецЦикла;
		
		Элементы.СтраницыНастроекОтчета.ТекущаяСтраница = Элементы.СтраницаНастройкиТекущегоОтчета;
		
	КонецЕсли;
	
	Возврат ПараметрыОтчета;
КонецФункции

&НаСервере
Процедура ДобавитьНастройкиОтчетов(ПрисоединяемыеОтчеты)
	
	Для Каждого СтрокаОтчетыПараметры Из ПрисоединяемыеОтчеты Цикл
		Если СтрокаОтчетыПараметры.Свойство("ВариантСсылка")
			И ТипЗнч(СтрокаОтчетыПараметры.ВариантСсылка) = Тип("СправочникСсылка.ВариантыОтчетов")
			И СтрокаОтчетыПараметры.ВариантСсылка <> Справочники.ВариантыОтчетов.ПустаяСсылка() Тогда
			ВариантСсылка = СтрокаОтчетыПараметры.ВариантСсылка;
		Иначе
			ОтчетИнформация = ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени(СтрокаОтчетыПараметры.ОтчетПолноеИмя);
			ВариантСсылка = ВариантыОтчетов.ПолучитьСсылку(ОтчетИнформация.Отчет, СтрокаОтчетыПараметры.КлючВарианта);
		КонецЕсли;
		
		Если ВариантСсылка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Найденные = Объект.Отчеты.НайтиСтроки(Новый Структура("Отчет", ВариантСсылка));
		Если Найденные.Количество() > 0 Тогда
			СтрокаОтчеты = Найденные[0];
		Иначе
			СтрокаОтчеты = Объект.Отчеты.Добавить();
			СтрокаОтчеты.Отчет                = ВариантСсылка;
			СтрокаОтчеты.ОтправлятьЕслиПустой = Ложь;
			СтрокаОтчеты.НеОтправлятьПустой   = Истина;
		КонецЕсли;
		
		СтрокаОтчеты.ВнесеныИзменения = Истина;
		
		Если Не ЭтоНовый Тогда
			Если Найденные.Количество() > 0 Тогда
				ШаблонСтрокиСообщения = НСтр("ru = 'Для отчета ""%1"" загружены новые пользовательские настройки.'");
			Иначе
				ШаблонСтрокиСообщения = НСтр("ru = 'Добавлен отчет ""%1"".'");
			КонецЕсли;
			ШаблонСтрокиСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтрокиСообщения, Строка(ВариантСсылка));
			Если ТекстВсплывающегоОповещенияПриОткрытии = "" Тогда
				ТекстВсплывающегоОповещенияПриОткрытии = ШаблонСтрокиСообщения;
			Иначе
				ТекстВсплывающегоОповещенияПриОткрытии = ТекстВсплывающегоОповещенияПриОткрытии + Символы.ПС + ШаблонСтрокиСообщения;
			КонецЕсли;
			ИндексСтроки = Объект.Отчеты.Индекс(СтрокаОтчеты);
		КонецЕсли;
		
		ПользовательскиеНастройкиКД = СтрокаОтчетыПараметры.Настройки;
		
		ИдентификаторСтроки = СтрокаОтчеты.ПолучитьИдентификатор();
		Элементы.Отчеты.ТекущаяСтрока = ИдентификаторСтроки;
		СтрокаПредупреждения = ОтчетыПриАктивизацииСтрокиНаСервере(ИдентификаторСтроки, Истина, ПользовательскиеНастройкиКД);
		Если СтрокаПредупреждения <> "" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаПредупреждения, , "Объект.Отчеты["+ ИндексСтроки +"].Представление");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Запись объекта

&НаКлиенте
Процедура ЗаписатьНаКлиенте(Результат, ПараметрыЗаписи) Экспорт
	// Инициализация параметров.
	Если Не ПараметрыЗаписи.Свойство("Шаг") Тогда
		ОчиститьСообщения(); // Очистка окна сообщений.
		ПараметрыЗаписи.Вставить("Шаг", 1);
	КонецЕсли;
	
	// Разрешения на ресурсы.
	Если ПараметрыЗаписи.Шаг = 1 И ТребуютсяРазрешенияНаРесурсыСервера() Тогда
		ПараметрыЗаписи.Шаг = 2;
		// Вопрос.
		Обработчик = Новый ОписаниеОповещения("ЗаписатьНаКлиенте", ЭтотОбъект, ПараметрыЗаписи);
		Разрешения = РазрешенияНаРесурсыСервера();
		РаботаВБезопасномРежимеКлиент.ПрименитьЗапросыНаИспользованиеВнешнихРесурсов(Разрешения, ЭтотОбъект, Обработчик);
	ИначеЕсли ПараметрыЗаписи.Шаг = 1 Тогда
		// Вопрос не нужен.
		ПараметрыЗаписи.Шаг = 3;
	ИначеЕсли ПараметрыЗаписи.Шаг = 2 Тогда
		// Обработка ответа.
		Если Результат = КодВозвратаДиалога.ОК Тогда
			ПараметрыЗаписи.Шаг = 3; // Внешние ресурсы разрешены. Продолжить запись.
		Иначе
			Возврат; // Отменить запись.
		КонецЕсли;
	КонецЕсли;
	
	// Отключение архивации.
	Если ПараметрыЗаписи.Шаг = 3 И ЖелательноОтключитьАрхивацию() Тогда
		ПараметрыЗаписи.Шаг = 4;
		// Вопрос.
		ЗаголовокВопроса = НСтр("ru = 'Отключить архивацию'");
		ТекстВопроса = НСтр("ru = 'При публикации отчетов в папку рекомендуется отключать архивацию в ZIP.'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Отключить архивацию в ZIP'"));
		Кнопки.Добавить(КодВозвратаДиалога.Пропустить, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		Обработчик = Новый ОписаниеОповещения("ЗаписатьНаКлиенте", ЭтотОбъект, ПараметрыЗаписи);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, 60, КодВозвратаДиалога.Да, ЗаголовокВопроса);
	ИначеЕсли ПараметрыЗаписи.Шаг = 3 Тогда
		// Вопрос не нужен.
		ПараметрыЗаписи.Шаг = 5;
	ИначеЕсли ПараметрыЗаписи.Шаг = 4 Тогда
		// Обработка ответа.
		Если Результат = КодВозвратаДиалога.Да Тогда
			Объект.Архивировать = Ложь; // Отключить архивацию.
			ПараметрыЗаписи.Шаг = 5; // Продолжить запись.
		ИначеЕсли Результат = КодВозвратаДиалога.Пропустить Тогда
			ПараметрыЗаписи.Шаг = 5; // Продолжить запись без отключения архивации.
		Иначе
			Возврат; // Отменить запись.
		КонецЕсли;
	КонецЕсли;
	
	// Запись.
	Если ПараметрыЗаписи.Шаг = 5 Тогда
		ПараметрыЗаписи.Шаг = 6;
		Успешно = Записать(ПараметрыЗаписи);
		Если Не Успешно Тогда
			Возврат; // Отменить запись.
		КонецЕсли;
		ИмяКоманды = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаписи, "ИмяКоманды");
		Если ИмяКоманды = "КомандаВыполнитьСейчас" Тогда
			ВыполнитьСейчас();
		ИначеЕсли ИмяКоманды = "КомандаЗаписатьИЗакрыть" Тогда
			Закрыть();
		ИначеЕсли ИмяКоманды = "КомандаСобытияРассылки" Тогда
			СобытияРассылки();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ТребуютсяРазрешенияНаРесурсыСервера()
	Если Объект.ИспользоватьСетевойКаталог
		И (ЗначениеЗаполнено(Объект.СетевойКаталогWindows) Или ЗначениеЗаполнено(Объект.СетевойКаталогLinux)) Тогда
		// Публикация в сетевой каталог. Требуются разрешения.
		Если ИзменилисьЗначенияРеквизитов("ИспользоватьСетевойКаталог, СетевойКаталогWindows, СетевойКаталогLinux") Тогда
			// Пользователь менял значения проверяемых реквизитов.
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Если Объект.ИспользоватьFTPРесурс И ЗначениеЗаполнено(Объект.FTPСервер) Тогда
		// Публикация в сетевой каталог. Требуются разрешения.
		Если ИзменилисьЗначенияРеквизитов("ИспользоватьFTPРесурс, FTPСервер, FTPКаталог") Тогда
			// Пользователь менял значения проверяемых реквизитов.
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ЖелательноОтключитьАрхивацию()
	Если Объект.ИспользоватьПапку
		И Объект.Архивировать
		И (Объект.ТолькоУведомить Или Не Объект.ИспользоватьЭлектроннуюПочту) Тогда
		// Публикация в папку с рассылкой уведомлений. Желательно отключить архивацию.
		Если ИзменилисьЗначенияРеквизитов("ИспользоватьПапку, ИспользоватьЭлектроннуюПочту, ТолькоУведомить, Архивировать") Тогда
			// Пользователь менял значения проверяемых реквизитов.
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

&НаСервере
Функция РазрешенияНаРесурсыСервера()
	РазрешенияНабор = РассылкаОтчетов.РазрешенияНаРесурсыСервера(Объект);
	РазрешенияСсылка = РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(РазрешенияНабор, Объект.Ссылка);
	РазрешенияМассивСсылок = Новый Массив;
	РазрешенияМассивСсылок.Добавить(РазрешенияСсылка);
	Возврат РазрешенияМассивСсылок;
КонецФункции

&НаКлиенте
Функция ИзменилисьЗначенияРеквизитов(ИменаРеквизитов)
	ИменаРеквизитов = СтрРазделить(ИменаРеквизитов, ",", Ложь);
	Для Каждого ИмяРеквизита Из ИменаРеквизитов Цикл
		ИмяРеквизита = СокрЛП(ИмяРеквизита);
		Если Объект[ИмяРеквизита] <> ЗначенияРеквизитовДоИзменения[ИмяРеквизита] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаСервере
Функция ЗафиксироватьЗначенияРеквизитовДоИзменения()
	ИменаРеквизитов = "ИспользоватьПапку, ИспользоватьЭлектроннуюПочту, ТолькоУведомить, Архивировать";
	ИменаРеквизитов = ИменаРеквизитов + ", ИспользоватьСетевойКаталог, СетевойКаталогWindows, СетевойКаталогLinux";
	ИменаРеквизитов = ИменаРеквизитов + ", ИспользоватьFTPРесурс, FTPСервер, FTPКаталог";
	ЗначенияРеквизитовДоИзменения = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовДоИзменения, Объект);
	ЗначенияРеквизитовДоИзменения = Новый ФиксированнаяСтруктура(ЗначенияРеквизитовДоИзменения);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Копия команды "Выполнить сейчас" для поддержки асинхронности.

&НаКлиенте
Процедура ВыполнитьСейчас()
	МассивРассылок = Новый Массив;
	МассивРассылок.Добавить(Объект.Ссылка);
	
	ДополнительныеПараметры = Новый Структура("МассивРассылок, Форма, ЭтоФормаЭлемента");
	ДополнительныеПараметры.МассивРассылок = МассивРассылок;
	ДополнительныеПараметры.Форма = ЭтотОбъект;
	ДополнительныеПараметры.ЭтоФормаЭлемента = Истина;
	Обработчик = Новый ОписаниеОповещения("ВыполнитьСейчасЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Если Объект.ИспользоватьЭлектроннуюПочту Тогда
		РассылкаОтчетовКлиент.ВыбратьПолучателя(Обработчик, Объект, Истина, Истина);
	Иначе
		ВыполнитьОбработкуОповещения(Обработчик, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСейчасЗавершение(Получатели, ДополнительныеПараметры) Экспорт
	// Обработчик результата работы процедуры ВыполнитьСейчас.
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПредварительныеНастройки = Неопределено;
	
	Если ДополнительныеПараметры.ЭтоФормаЭлемента Тогда
		Если Форма.Объект.ИспользоватьЭлектроннуюПочту Тогда
			Если Получатели = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ПредварительныеНастройки = Новый Структура("Получатели", Получатели);
		КонецЕсли;
		ТекстСостояния = НСтр("ru = 'Выполняется рассылка отчетов'");
	Иначе
		ТекстСостояния = НСтр("ru = 'Выполняются рассылки отчетов'");
	КонецЕсли;
	
	Состояние(ТекстСостояния, , , );
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("МассивРассылок", ДополнительныеПараметры.МассивРассылок);
	ПараметрыВызоваСервера.Вставить("ПредварительныеНастройки", ПредварительныеНастройки);
	
	Результат = ВыполнитьРассылкиВФоновомЗадании(ПараметрыВызоваСервера, Форма.УникальныйИдентификатор);
	
	Если Результат.Статус = "ВыполненоУспешно" Тогда
		СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(Форма, Результат.Детали);
	ИначеЕсли Результат.Статус = "Исключение" Тогда
		ТекстПредупреждения = НСтр("ru = 'Не удалось выполнить рассылку отчетов.
		|Подробности см. в журнале регистрации.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	ИначеЕсли Результат.Статус = "Выполняется" Тогда
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(Форма, Результат.Детали.ИдентификаторЗадания);
		
		ПараметрыОбработчика = Неопределено;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		
		Форма.ПараметрыФоновогоЗадания.Очистить();
		Форма.ПараметрыФоновогоЗадания.Добавить(Результат.Детали.ИдентификаторЗадания);
		Форма.ПараметрыФоновогоЗадания.Добавить(Результат.Детали.АдресХранилища);
		Форма.ПараметрыФоновогоЗадания.Добавить(ПараметрыОбработчика);
		Форма.ПараметрыФоновогоЗадания.Добавить(ФормаДлительнойОперации);
		
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьРассылкиВФоновомЗадании(ПараметрыВызоваСервера, Знач УникальныйИдентификатор)
	// Запускает выполнение рассылок отчетов в фоновом задании.
	
	Результат = Новый Структура("Статус, Детали");
	
	Попытка
		РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"РассылкаОтчетов.ВыполнитьРассылкиВФоновомЗадании", 
			ПараметрыВызоваСервера,
			НСтр("ru = 'Рассылки отчетов: Выполнение рассылок в фоне'"));
		
		Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
			Результат.Статус = "ВыполненоУспешно"; // Не локализуется
			Результат.Детали = ПолучитьИзВременногоХранилища(РезультатФоновогоЗадания.АдресХранилища);
		Иначе
			Результат.Статус = "Выполняется"; // Не локализуется
			Результат.Детали = Новый Структура("ИдентификаторЗадания, АдресХранилища");
			ЗаполнитьЗначенияСвойств(Результат.Детали, РезультатФоновогоЗадания);
		КонецЕсли;
	Исключение
		Результат.Статус = "Исключение"; // Не локализуется
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Копия команды "События рассылки..." для поддержки асинхронности.

&НаКлиенте
Процедура СобытияРассылки()
	// Получение даты последнего запуска.
	Рассылка = Объект.Ссылка;
	ПоследнийЗапуск = ПоследнийЗапускРассылки(Рассылка);
	
	// Параметры формы
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Данные", Рассылка);
	Если ПоследнийЗапуск <> Неопределено Тогда
		ПараметрыФормы.Вставить("ДатаНачала", ПоследнийЗапуск);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоследнийЗапускРассылки(Рассылка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Состояния.ПоследнийЗапуск
	|ИЗ
	|	РегистрСведений.СостоянияРассылокОтчетов КАК Состояния
	|ГДЕ
	|	Состояния.Рассылка = &Рассылка";
	Запрос.УстановитьПараметр("Рассылка", Рассылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Истина);
	Результат = ?(Выборка.Следующий(), Выборка.ПоследнийЗапуск, Неопределено);
	Возврат Результат;
КонецФункции

#КонецОбласти
