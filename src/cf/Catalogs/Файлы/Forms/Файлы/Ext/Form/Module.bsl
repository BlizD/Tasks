
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УсловноеОформление.Элементы.Очистить();
	РаботаСФайламиСлужебныйВызовСервера.ЗаполнитьУсловноеОформлениеСпискаФайлов(Список);
	РаботаСФайламиСлужебныйВызовСервера.ЗаполнитьУсловноеОформлениеСпискаПапок(Папки);
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Папка") И Параметры.Папка <> Неопределено Тогда
		ПапкаПриОткрытии = Параметры.Папка;
	Иначе
		ПапкаПриОткрытии = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("Файлы", "ТекущаяПапка");
		Если ПапкаПриОткрытии = Неопределено Тогда // Попытка загрузки настроек, сохраненных в предыдущих версиях.
			ПапкаПриОткрытии = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("ХранилищеФайлов", "ТекущаяПапка");
		КонецЕсли;
	КонецЕсли;
	
	Если ПапкаПриОткрытии = Справочники.ПапкиФайлов.ПустаяСсылка() Или ПапкаПриОткрытии = Неопределено Тогда
		ПапкаПриОткрытии = Справочники.ПапкиФайлов.Шаблоны;
	КонецЕсли;
	
	Если Параметры.Свойство("ПараметрыОтправки") Тогда
		ПараметрыОтправки = Параметры.ПараметрыОтправки;
	Иначе
		ПараметрыОтправки = ФайловыеФункцииСлужебный.ПодготовитьСтруктуруПараметровОтправки();
	КонецЕсли;
	
	Элементы.Папки.ТекущаяСтрока = ПапкаПриОткрытии;
	
	Список.Параметры.УстановитьЗначениеПараметра(
		"Владелец", ПапкаПриОткрытии);
	Список.Параметры.УстановитьЗначениеПараметра(
		"ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	ПоказыватьКолонкуРазмер = РаботаСФайламиСлужебныйВызовСервера.ПолучитьПоказыватьКолонкуРазмер();
	Если ПоказыватьКолонкуРазмер = Ложь Тогда
		Элементы.СписокТекущаяВерсияРазмер.Видимость = Ложь;
	КонецЕсли;
	
	ИспользоватьИерархию = Истина;
	УстановитьИерархию(ИспользоватьИерархию);
	
	ПриИзмененияИспользованияПодписанияИлиШифрованияНаСервере();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиПравПапки(Элементы.Папки.ТекущаяСтрока));
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ФормаИзменить.Видимость = Ложь;
		Элементы.ФормаИзменить82.Видимость = Истина;
	КонецЕсли;
	
	ИспользоватьПредпросмотр = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"Файлы",
		"Предпросмотр");
	
	Если ИспользоватьПредпросмотр <> Неопределено Тогда
		Предпросмотр = ИспользоватьПредпросмотр;
		Элементы.АдресДанныхФайла.Видимость = ИспользоватьПредпросмотр;
		Элементы.Предпросмотр.Пометка = ИспользоватьПредпросмотр;
	КонецЕсли;
	
	РасширенияПоддерживающиеПредпросмотр = ФайловыеФункцииСлужебный.СписокРасширенийДляПредпросмотра();
	
	Элементы.ГруппаПояснениеОблачногоСервиса.Видимость = Ложь;
	ИспользоватьСинхронизациюФайлов = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюФайлов");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		
		Если Не МодульУправлениеДоступом.ЕстьРоль("НастройкаСинхронизацииФайлов") Тогда
			Элементы.ПапкиКонтекстноеМенюНастроитьСинхронизацию.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗапрещенныеРасширения = ФайловыеФункцииСлужебный.СписокЗапрещенныхРасширений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьФайловыхКоманд();
	
	Элементы.ФормаСоздатьСоСканера.Видимость = ФайловыеФункцииСлужебныйКлиент.ДоступнаКомандаСканировать();
	
	#Если ВебКлиент Тогда
		Элементы.Печать.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюПечать.Видимость = Ложь;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если ПапкаПриОткрытии <> Элементы.Папки.ТекущаяСтрока Тогда
		ПриЗакрытииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		"Файлы", 
		"ТекущаяПапка", 
		Элементы.Папки.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" Тогда
		Элементы.Список.Обновить();
		
		Если Параметр <> Неопределено Тогда
			Элементы.Список.ТекущаяСтрока = Параметр;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ИмпортКаталоговЗавершен" Тогда
		Элементы.Папки.Обновить();
		Элементы.Список.Обновить();
		
		Если Источник <> Неопределено Тогда
			Элементы.Папки.ТекущаяСтрока = Источник;
		КонецЕсли;
	КонецЕсли;

	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		
		Если Параметр <> Неопределено Тогда
			ВладелецФайла = Неопределено;
			Если Параметр.Свойство("Владелец", ВладелецФайла) Тогда
				Если ВладелецФайла = Элементы.Папки.ТекущаяСтрока Тогда
					Элементы.Список.Обновить();
					
					ФайлСозданный = Неопределено;
					Если Параметр.Свойство("Файл", ФайлСозданный) Тогда
						Элементы.Список.ТекущаяСтрока = ФайлСозданный;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		УстановитьДоступностьФайловыхКоманд();
	КонецЕсли;
	
	Если ВРег(ИмяСобытия) = ВРег("Запись_НаборКонстант")
	   И (    ВРег(Источник) = ВРег("ИспользоватьЭлектронныеПодписи")
		  Или ВРег(Источник) = ВРег("ИспользоватьШифрование")) Тогда
			
		ПодключитьОбработчикОжидания("ПриИзмененияИспользованияПодписанияИлиШифрования", 0.3, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.ПапкиФайлов.Форма.ФормаВыбора") Тогда
		
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
		РаботаСФайламиСлужебныйКлиент.ПеренестиФайлыВПапку(ВыделенныеСтроки, ВыбранноеЗначение);
		
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ВыделеннаяСтрока);
		КонецЦикла;
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьИерархию(Настройки["ИспользоватьИерархию"]);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоискПриИзменении(Элемент)
	НайтиФайлыИлиПапки();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	КакОткрывать = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	Если ИмяКаталога = Неопределено Или ПустаяСтрока(ИмяКаталога) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрещенныеРасширения.НайтиПоЗначению(Элементы.Список.ТекущиеДанные.Расширение) <> Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
		Оповещение = Новый ОписаниеОповещения("ВыбратьФайлПослеПодтверждения", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("Ключ", "ПередОткрытиемФайла");
		ПараметрыФормы.Вставить("ИмяФайла",
			ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(Элементы.Список.ТекущиеДанные.Наименование, Элементы.Список.ТекущиеДанные.Расширение));
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ВыбраннаяСтрока,
		УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Элементы.Папки.ТекущаяСтрока = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Если Элементы.Папки.ТекущаяСтрока.Пустая() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	ВладелецФайла = Элементы.Папки.ТекущаяСтрока;
	ФайлОснование = Элементы.Список.ТекущаяСтрока;
	
	Отказ = Истина;
	
	Если Копирование Тогда
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	Иначе
		РаботаСФайламиСлужебныйКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, ЭтотОбъект, , Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	ПеретаскиваниеВПапку(Неопределено, ПараметрыПеретаскивания.Значение, ПараметрыПеретаскивания.Действие);
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПапки

&НаКлиенте
Процедура ПапкиПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандПриИзмененииПапки();
	Если ИспользоватьСинхронизациюФайлов Тогда
		УстановитьВидимостьПоясненияСинхронизацииФайлов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	ПеретаскиваниеВПапку(Строка, ПараметрыПеретаскивания.Значение, ПараметрыПеретаскивания.Действие);
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПриИзменении(Элемент)
	Элементы.Список.Обновить();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИмпортФайловВыполнить()
	
	Обработчик = Новый ОписаниеОповещения("ИмпортФайловПослеУстановкиРасширения", ЭтотОбъект);
	
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайловПослеУстановкиРасширения(Результат, ПараметрыВыполнения) Экспорт
	Если НЕ Результат Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
		Возврат;
	КонецЕсли;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.Фильтр = НСтр("ru = 'Все файлы(*.*)|*.*'");
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файлы'");
	Если Не ДиалогОткрытияФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменФайлов = Новый Массив;
	Для Каждого ИмяФайла Из ДиалогОткрытияФайла.ВыбранныеФайлы Цикл
		МассивИменФайлов.Добавить(ИмяФайла);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПапкаДляДобавления", Элементы.Папки.ТекущаяСтрока);
	ПараметрыФормы.Вставить("МассивИменФайлов",   МассивИменФайлов);
	
	ОткрытьФорму("Справочник.Файлы.Форма.ФормаИмпортаФайлов", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ИмпортПапки(Команда)
	#Если ВебКлиент Тогда
		ТекстПредупреждения = НСтр("ru = 'В веб-клиенте импорт папок недоступен.
			                             |Используйте команду ""Создать"" в списке файлов.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	#КонецЕсли
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.Фильтр = НСтр("ru = 'Все файлы(*.*)|*.*'");
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите каталог'");
	Если Не ДиалогОткрытияФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПапкаДляДобавления", Элементы.Папки.ТекущаяСтрока);
	ПараметрыФормы.Вставить("КаталогНаДиске",     ДиалогОткрытияФайла.Каталог);
	
	ОткрытьФорму("Справочник.Файлы.Форма.ФормаИмпортаПапки", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортПапкиВыполнить()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПапкаЭкспорта", Элементы.Папки.ТекущаяСтрока);
	ОткрытьФорму("Справочник.Файлы.Форма.ФормаЭкспортаПапки", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиВыполнить()
	
	Если СтрокаПоиска = "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указан текст для поиска.'"), , "СтрокаПоиска");
		Возврат;
	КонецЕсли;
	
	НайтиФайлыИлиПапки();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиФайлыИлиПапки()
	
	Если СтрокаПоиска = "" Тогда
		Возврат;
	КонецЕсли;
	
	Результат = НайтиФайлыИлиПапкиСервер();
	
	Если Результат = "НичегоНеНайдено" Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось найти файл или папку,
			           |наименование или код которых содержит ""%1"".'"),
			СтрокаПоиска);
		ПоказатьПредупреждение(, ТекстПредупреждения);
	Иначе
		Если Результат = "НайденФайл" Тогда
			ТекущийЭлемент = Элементы.Список;
		Иначе 
			Если Результат = "НайденаПапка" Тогда
				ТекущийЭлемент = Элементы.Папки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Папки.Обновить();
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Функция СтрЗаменитьСпецСимволом(Строка, Символ, СпецСимвол)
	СтрокаНовая = СтрЗаменить(Строка, Символ, СпецСимвол + Символ);
	Возврат СтрокаНовая;
КонецФункции

&НаСервере
Функция НайтиФайлыИлиПапкиСервер()
	
	Перем НайденныйФайл;
	Перем НайденнаяПапка;
	
	Найдено = Ложь;
	
	Запрос = Новый Запрос;
	
	СтрокаПоискаНовая = СтрокаПоиска;
	
	СпецСимвол = "|";
	СтрокаПоискаНовая = СтрЗаменитьСпецСимволом(СтрокаПоискаНовая, "[", СпецСимвол);
	СтрокаПоискаНовая = СтрЗаменитьСпецСимволом(СтрокаПоискаНовая, "]", СпецСимвол);
	
	Запрос.Параметры.Вставить("Строка", "%" + СтрокаПоискаНовая + "%");
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				   |	Файлы.Ссылка
				   |ИЗ
				   |	Справочник.Файлы КАК Файлы
				   |ГДЕ
				   |	Файлы.ПолноеНаименование ПОДОБНО &Строка СПЕЦСИМВОЛ ""|""";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НайденныйФайл = Выборка.Ссылка;
		Найдено = Истина;
	КонецЕсли;
	
	Если Не Найдено Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					   |	Файлы.Ссылка
					   |ИЗ
					   |	Справочник.Файлы КАК Файлы
					   |ГДЕ
					   |	Файлы.Код ПОДОБНО &Строка";
						
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НайденныйФайл = Выборка.Ссылка;
			Найдено = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	Если Не Найдено Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					   |	ПапкиФайлов.Ссылка
					   |ИЗ
					   |	Справочник.ПапкиФайлов КАК ПапкиФайлов
					   |ГДЕ
					   |	ПапкиФайлов.Наименование ПОДОБНО &Строка";
						
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НайденнаяПапка = Выборка.Ссылка;
			Найдено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Найдено Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					   |	ПапкиФайлов.Ссылка
					   |ИЗ
					   |	Справочник.ПапкиФайлов КАК ПапкиФайлов
					   |ГДЕ
					   |	ПапкиФайлов.Код ПОДОБНО &Строка";
						
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НайденнаяПапка = Выборка.Ссылка;
			Найдено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НайденныйФайл <> Неопределено Тогда 
		Элементы.Папки.ТекущаяСтрока = НайденныйФайл.ВладелецФайла;
		Список.Параметры.УстановитьЗначениеПараметра("Владелец", Элементы.Папки.ТекущаяСтрока);
		Элементы.Список.ТекущаяСтрока = НайденныйФайл.Ссылка;
		Возврат "НайденФайл";
	КонецЕсли;
	
	Если НайденнаяПапка <> Неопределено Тогда
		Элементы.Папки.ТекущаяСтрока = НайденнаяПапка;
		Возврат "НайденаПапка";
	КонецЕсли;
	
	Возврат "НичегоНеНайдено";
КонецФункции

&НаКлиенте
Процедура СоздатьФайлВыполнить(Команда)
	
	ПараметрыДобавления = Новый Структура;
	ПараметрыДобавления.Вставить("ОбработчикРезультата", Неопределено);
	ПараметрыДобавления.Вставить("ВладелецФайла", Элементы.Папки.ТекущаяСтрока);
	ПараметрыДобавления.Вставить("ФормаВладелец", ЭтотОбъект);
	ПараметрыДобавления.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", Истина);
	Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		РаботаСФайламиСлужебныйКлиент.ДобавитьИзФайловойСистемыСРасширением(ПараметрыДобавления);
	Иначе
		РаботаСФайламиСлужебныйКлиент.ДобавитьИзФайловойСистемыБезРасширения(ПараметрыДобавления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлИзШаблонаВыполнить(Команда)
	
	ПараметрыДобавления = Новый Структура;
	ПараметрыДобавления.Вставить("ОбработчикРезультата", Неопределено);
	ПараметрыДобавления.Вставить("ВладелецФайла", Элементы.Папки.ТекущаяСтрока);
	ПараметрыДобавления.Вставить("ФормаВладелец", ЭтотОбъект);
	ПараметрыДобавления.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", Истина);
	РаботаСФайламиСлужебныйКлиент.ДобавитьНаОсновеШаблона(ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлСоСканераВыполнить(Команда)
	
	ПараметрыДобавления = Новый Структура;
	ПараметрыДобавления.Вставить("ОбработчикРезультата", Неопределено);
	ПараметрыДобавления.Вставить("ВладелецФайла", Элементы.Папки.ТекущаяСтрока);
	ПараметрыДобавления.Вставить("ФормаВладелец", ЭтотОбъект);
	ПараметрыДобавления.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", Истина);
	ПараметрыДобавления.Вставить("ЭтоФайл", Истина);
	ФайловыеФункцииСлужебныйКлиент.ДобавитьСоСканера(ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПапкуВыполнить()
	
	ПараметрыСозданияПапки = Новый Структура("Родитель", Элементы.Папки.ТекущаяСтрока);
	ОткрытьФорму("Справочник.ПапкиФайлов.ФормаОбъекта", ПараметрыСозданияПапки, Элементы.Папки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИерархию(Команда)
	
	ИспользоватьИерархию = Не ИспользоватьИерархию;
	Если ИспользоватьИерархию И (Элементы.Список.ТекущиеДанные <> Неопределено) Тогда 
		
		Если Элементы.Список.ТекущиеДанные.Свойство("ВладелецФайла") Тогда 
			Элементы.Папки.ТекущаяСтрока = Элементы.Список.ТекущиеДанные.ВладелецФайла;
		Иначе
			Элементы.Папки.ТекущаяСтрока = Неопределено;
		КонецЕсли;	
		
		Список.Параметры.УстановитьЗначениеПараметра("Владелец", Элементы.Папки.ТекущаяСтрока);
	КонецЕсли;	
	УстановитьИерархию(ИспользоватьИерархию);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗапрещенныеРасширения.НайтиПоЗначению(Элементы.Список.ТекущиеДанные.Расширение) <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьФайлПослеПодтверждения", ЭтотОбъект);
		ПараметрыФормы = Новый Структура("Ключ", "ПередОткрытиемФайла");
		ПараметрыФормы.Вставить("ИмяФайла",
			ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(Элементы.Список.ТекущиеДанные.Наименование, Элементы.Список.ТекущиеДанные.Расширение));
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(Элементы.Список.ТекущаяСтрока,
		УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
	РаботаСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗапрещенныеРасширения.НайтиПоЗначению(Элементы.Список.ТекущиеДанные.Расширение) <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("РедактироватьФайлПослеПодтверждения", ЭтотОбъект);
		ПараметрыФормы = Новый Структура("Ключ", "ПередОткрытиемФайла");
		ПараметрыФормы.Вставить("ИмяФайла",
			ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(Элементы.Список.ТекущиеДанные.Наименование, Элементы.Список.ТекущиеДанные.Расширение));
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
	РаботаСФайламиСлужебныйКлиент.РедактироватьСОповещением(Обработчик, Элементы.Список.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Функция ФайловыеКомандыДоступны(ФайлСсылка = Неопределено)
	// Доступны файловые команды - есть хотя бы одна строка в списке и выделена не группировка.
	
	Если ФайлСсылка = Неопределено Тогда 
		ФайлСсылка = Элементы.Список.ТекущаяСтрока;
	КонецЕсли;
	
	Если ФайлСсылка = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
	ПараметрыОбновленияФайла = РаботаСФайламиСлужебныйКлиент.ПараметрыОбновленияФайла(Обработчик, СтрокаТаблицы.Ссылка, УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = СтрокаТаблицы.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = СтрокаТаблицы.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = СтрокаТаблицы.Редактирует;
	ПараметрыОбновленияФайла.АвторТекущейВерсии = СтрокаТаблицы.Автор;
	ПараметрыОбновленияФайла.Кодировка = СтрокаТаблицы.Кодировка;
	РаботаСФайламиСлужебныйКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
	РаботаСФайламиСлужебныйКлиент.ЗанятьСОповещением(Обработчик, Элементы.Список.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ПараметрыОсвобожденияФайла = РаботаСФайламиСлужебныйКлиент.ПараметрыОсвобожденияФайла(Обработчик, Элементы.Список.ТекущаяСтрока);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;	
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;	
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;	
	РаботаСФайламиСлужебныйКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
	
	РаботаСФайламиСлужебныйКлиент.СохранитьИзмененияФайлаСОповещением(
		Обработчик,
		Элементы.Список.ТекущаяСтрока,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(Элементы.Список.ТекущаяСтрока,
		УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
	РаботаСФайламиКлиент.ОткрытьКаталогФайла(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляСохранения(Элементы.Список.ТекущаяСтрока, УникальныйИдентификатор);
	РаботаСФайламиСлужебныйКлиент.СохранитьКак(Неопределено, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИРабочийКаталог(Элементы.Список.ТекущаяСтрока);
	РаботаСФайламиСлужебныйКлиент.ОбновитьИзФайлаНаДискеСОповещением(Неопределено, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	
	ПараметрыОткрытияФормы = Новый Структура("Ключ", Элемент.ТекущаяСтрока);
	ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", ПараметрыОткрытияФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВПапку(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",    НСтр("ru = 'Выбор папки'"));
	ПараметрыФормы.Вставить("ТекущаяПапка", Элементы.Папки.ТекущаяСтрока);
	ПараметрыФормы.Вставить("РежимВыбора",  Истина);
	
	ОткрытьФорму("Справочник.ПапкиФайлов.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(Элементы.Список.ТекущаяСтрока);
	
	РаботаСФайламиСлужебныйКлиент.ПодписатьФайл(МассивФайлов, УникальныйИдентификатор,
		Новый ОписаниеОповещения("ПодписатьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = Элементы.Список.ТекущаяСтрока;
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("ЗашифроватьПослеШифрованияНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Зашифровать(Обработчик, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = Элементы.Список.ТекущаяСтрока;
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("РасшифроватьПослеРасшифровкиНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Расшифровать(
		Обработчик,
		ДанныеФайла.Ссылка,
		УникальныйИдентификатор,
		ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодписьИзФайла(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.ДобавитьПодписьИзФайла(
		Элементы.Список.ТекущаяСтрока,
		УникальныйИдентификатор,
		Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСПодписью(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.СохранитьФайлВместеСПодписью(
		Элементы.Список.ТекущаяСтрока, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Элементы.Папки.Обновить();
	Элементы.Список.Обновить();
	
	ПодключитьОбработчикОжидания("УстановитьДоступностьКомандПриИзмененииПапки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ФайловыеФункцииСлужебныйКлиент.ОтправитьФайлыПоПочте(
		Элементы.Список.ВыделенныеСтроки, УникальныйИдентификатор, ПараметрыОтправки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
	   И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'"));
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		ДанныеФайлов = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайловДляОткрытия(
			ВыделенныеСтроки, 
			ЭтотОбъект.УникальныйИдентификатор);
			
		РаботаСФайламиКлиент.НапечататьФайлы(ДанныеФайлов);
	Иначе
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(
			Элементы.Список.ТекущаяСтрока, 
			ЭтотОбъект.УникальныйИдентификатор, 
			Неопределено,
			ПредыдущийАдресФайла);
			
		ДанныеФайлов = Новый Массив;
		ДанныеФайлов.Добавить(ДанныеФайла);
			
		РаботаСФайламиКлиент.НапечататьФайлы(ДанныеФайлов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Предпросмотр(Команда)
	
	Предпросмотр = Не Предпросмотр;
	Элементы.Предпросмотр.Пометка = Предпросмотр;
	УстановитьВидимостьПредпросмотра(Предпросмотр);
	СохранитьВариантПредпросмотра("Файлы", Предпросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСинхронизацию(Команда)
	
	НастройкаСинхронизации = ПараметрыНастройкиСинхронизации(Элементы.Папки.ТекущиеДанные.Ссылка);
	
	Если ЗначениеЗаполнено(НастройкаСинхронизации.УчетнаяЗапись) Тогда
		ТипЗначения = Тип("РегистрСведенийКлючЗаписи.НастройкиСинхронизацииФайлов");
		ПараметрыЗаписи = Новый Массив(1);
		ПараметрыЗаписи[0] = НастройкаСинхронизации;
		
		КлючЗаписи = Новый(ТипЗначения, ПараметрыЗаписи);
	
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("Ключ", КлючЗаписи);
	Иначе
		НастройкаСинхронизации.Вставить("ЭтоФайл", Истина);
		ПараметрыЗаписи = НастройкаСинхронизации;
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.НастройкиСинхронизацииФайлов.Форма.ПростаяФормаЗаписиНастройки", ПараметрыЗаписи, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьФайлПослеПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат = "Продолжить" Тогда
	
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(Элементы.Список.ТекущаяСтрока,
			УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
		РаботаСФайламиКлиент.Открыть(ДанныеФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФайлПослеПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат = "Продолжить" Тогда
		Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
		РаботаСФайламиСлужебныйКлиент.РедактироватьСОповещением(Обработчик, Элементы.Список.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлПослеПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат = "Продолжить" Тогда
		ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ВыбраннаяСтрока,
			УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
		
		ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеретаскиваниеВПапку(ПапкаДляДобавления, ЗначениеПеретаскивания, Действие)
	Если ПапкаДляДобавления = Неопределено Тогда
		ПапкаДляДобавления = Элементы.Папки.ТекущаяСтрока;
		Если ПапкаДляДобавления = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПапкаДляДобавления.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(ЗначениеПеретаскивания);
	Если ТипЗначения = Тип("Файл") Тогда
		Если ЗначениеПеретаскивания.ЭтоФайл() Тогда
			ПараметрыДобавления = Новый Структура;
			ПараметрыДобавления.Вставить("ОбработчикРезультата", Неопределено);
			ПараметрыДобавления.Вставить("ПолноеИмяФайла", ЗначениеПеретаскивания.ПолноеИмя);
			ПараметрыДобавления.Вставить("ВладелецФайла", ПапкаДляДобавления);
			ПараметрыДобавления.Вставить("ФормаВладелец", ЭтотОбъект);
			ПараметрыДобавления.Вставить("ИмяСоздаваемогоФайла", Неопределено);
			ПараметрыДобавления.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", Истина);
			РаботаСФайламиСлужебныйКлиент.ДобавитьИзФайловойСистемыСРасширением(ПараметрыДобавления);
		Иначе
			МассивИменФайлов = Новый Массив;
			МассивИменФайлов.Добавить(ЗначениеПеретаскивания.ПолноеИмя);
			РаботаСФайламиСлужебныйКлиент.ОткрытьФормуПеретаскиванияИзвне(ПапкаДляДобавления, МассивИменФайлов);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
		ИндексПапки = ЗначениеПеретаскивания.Найти(ПапкаДляДобавления);
		Если ИндексПапки <> Неопределено Тогда
			ЗначениеПеретаскивания.Удалить(ИндексПапки);
		КонецЕсли;
		
		Если ЗначениеПеретаскивания.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТипЗначения = ТипЗнч(ЗначениеПеретаскивания[0]);
		Если ТипЗначения = Тип("Файл") Тогда
			
			МассивИменФайлов = Новый Массив;
			Для Каждого ФайлПринятый Из ЗначениеПеретаскивания Цикл
				МассивИменФайлов.Добавить(ФайлПринятый.ПолноеИмя);
			КонецЦикла;
			РаботаСФайламиСлужебныйКлиент.ОткрытьФормуПеретаскиванияИзвне(ПапкаДляДобавления, МассивИменФайлов);
			
		ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Файлы") Тогда
			
			Если Действие = ДействиеПеретаскивания.Копирование Тогда
				
				РаботаСФайламиСлужебныйВызовСервера.СкопироватьФайлы(
					ЗначениеПеретаскивания,
					ПапкаДляДобавления);
				
				Элементы.Папки.Обновить();
				Элементы.Список.Обновить();
				
				Если ЗначениеПеретаскивания.Количество() = 1 Тогда
					ОповещениеЗаголовок = НСтр("ru = 'Файл скопирован.'");
					ОповещениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Файл ""%1""
						           |скопирован в папку ""%2""'"),
						ЗначениеПеретаскивания[0],
						Строка(ПапкаДляДобавления));
				Иначе
					ОповещениеЗаголовок = НСтр("ru = 'Файлы скопированы.'");
					ОповещениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Файлы (%1 шт.) скопированы в папку ""%2""'"),
						ЗначениеПеретаскивания.Количество(),
						Строка(ПапкаДляДобавления));
				КонецЕсли;
				ПоказатьОповещениеПользователя(ОповещениеЗаголовок, , ОповещениеТекст, БиблиотекаКартинок.Информация32);
			Иначе
				
				ВладелецУстановлен = РаботаСФайламиСлужебныйВызовСервера.УстановитьВладельцаФайла(ЗначениеПеретаскивания, ПапкаДляДобавления);
				Если ВладелецУстановлен <> Истина Тогда
					Возврат;
				КонецЕсли;
				
				Элементы.Папки.Обновить();
				Элементы.Список.Обновить();
				
				Если ЗначениеПеретаскивания.Количество() = 1 Тогда
					ОповещениеЗаголовок = НСтр("ru = 'Файл перенесен.'");
					ОповещениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Файл ""%1""
						           |перенесен в папку ""%2""'"),
						Строка(ЗначениеПеретаскивания[0]),
						Строка(ПапкаДляДобавления));
				Иначе
					ОповещениеЗаголовок = НСтр("ru = 'Файлы перенесены.'");
					ОповещениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Файлы (%1 шт.) перенесены в папку ""%2""'"),
						Строка(ЗначениеПеретаскивания.Количество()),
						Строка(ПапкаДляДобавления));
				КонецЕсли;
				ПоказатьОповещениеПользователя(ОповещениеЗаголовок, , ОповещениеТекст, БиблиотекаКартинок.Информация32);
			КонецЕсли;
			
		ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ПапкиФайлов") Тогда
			НайденоЗацикливание = Ложь;
			РодительСменен = РаботаСФайламиСлужебныйВызовСервера.СменитьРодителяПапок(ЗначениеПеретаскивания, ПапкаДляДобавления, НайденоЗацикливание);
			Если РодительСменен <> Истина Тогда
				Если НайденоЗацикливание = Истина Тогда
					ПоказатьПредупреждение(, НСтр("ru = 'Зацикливание уровней.'"));
				КонецЕсли;
				Возврат;
			КонецЕсли;
			
			Элементы.Папки.Обновить();
			Элементы.Список.Обновить();
			
			Если ЗначениеПеретаскивания.Количество() = 1 Тогда
				Элементы.Папки.ТекущаяСтрока = ЗначениеПеретаскивания[0];
				ОповещениеЗаголовок = НСтр("ru = 'Папка перенесена.'");
				ОповещениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Папка ""%1""
					           |перенесена в папку ""%2""'"),
					Строка(ЗначениеПеретаскивания[0]),
					Строка(ПапкаДляДобавления));
			Иначе
				ОповещениеЗаголовок = НСтр("ru = 'Папки перенесены.'");
				ОповещениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Папки (%1 шт.) перенесены в папку ""%2""'"),
					Строка(ЗначениеПеретаскивания.Количество()),
					Строка(ПапкаДляДобавления));
			КонецЕсли;
			ПоказатьОповещениеПользователя(ОповещениеЗаголовок, , ОповещениеТекст, БиблиотекаКартинок.Информация32);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьПослеШифрованияНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРабочегоКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	ЗашифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		Результат.МассивОтпечатков,
		МассивФайловВРабочемКаталогеДляУдаления,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка);
	
	РаботаСФайламиСлужебныйКлиент.ИнформироватьОШифровании(
		МассивФайловВРабочемКаталогеДляУдаления,
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка);
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаСервере
Процедура ЗашифроватьСервер(МассивДанныхДляЗанесенияВБазу, МассивОтпечатков, 
	МассивФайловВРабочемКаталогеДляУдаления,
	ИмяРабочегоКаталога, ОбъектСсылка)
	
	Зашифровать = Истина;
	РаботаСФайламиСлужебныйВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПослеРасшифровкиНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Ложь Или Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРабочегоКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	РасшифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка);
	
	РаботаСФайламиСлужебныйКлиент.ИнформироватьОРасшифровке(
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка);
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьСервер(МассивДанныхДляЗанесенияВБазу, 
	ИмяРабочегоКаталога, ОбъектСсылка)
	
	Зашифровать = Ложь;
	МассивОтпечатков = Новый Массив;
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	РаботаСФайламиСлужебныйВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандПриИзмененииПапки()
	
	Если Элементы.Папки.ТекущаяСтрока <> ТекущаяПапка Тогда
		ТекущаяПапка = Элементы.Папки.ТекущаяСтрока;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиПравПапки(Элементы.Папки.ТекущаяСтрока));
		Элементы.ФормаСоздатьПапку.Доступность = ИзменениеПапок;
		Элементы.ПапкиКонтекстноеМенюСоздать.Доступность = ИзменениеПапок;
		Элементы.ПапкиКонтекстноеМенюСкопировать.Доступность = ИзменениеПапок;
		Элементы.ПапкиКонтекстноеМенюУстановитьПометкуУдаления.Доступность = ИзменениеПапок;
		Элементы.ПапкиКонтекстноеМенюПеренестиЭлемент.Доступность = ИзменениеПапок;
	КонецЕсли;
	
	Если Элементы.Папки.ТекущаяСтрока = Неопределено Или Элементы.Папки.ТекущаяСтрока.Пустая() Тогда
		
		Элементы.ФормаПодменюСоздать.Доступность = Ложь;
		
		Элементы.ФормаСоздатьИзФайла.Доступность = Ложь;
		Элементы.ФормаСоздатьИзШаблона.Доступность = Ложь;
		Элементы.ФормаСоздатьСоСканера.Доступность = Ложь;
		
		Элементы.ФормаСкопировать.Доступность = Ложь;
		Элементы.СписокКонтекстноеМенюСкопировать.Доступность = Ложь;
		
		Элементы.ФормаУстановитьПометкуУдаления.Доступность = Ложь;
		Элементы.СписокКонтекстноеМенюУстановитьПометкуУдаления.Доступность = Ложь;
		
		Элементы.СписокКонтекстноеМенюСоздать.Доступность = Ложь;
		
		Элементы.ФормаИмпортФайлов.Доступность = Ложь;
		Элементы.СписокКонтекстноеМенюИмпортФайлов.Доступность = Ложь;
		
		Элементы.ПапкиКонтекстноеМенюИмпортПапки.Доступность = Ложь;
	Иначе
		Элементы.ФормаПодменюСоздать.Доступность = ДобавлениеФайлов И Не ФайлыРедактируютсяВОблачномСервисе;
		Элементы.ФормаСоздатьИзФайла.Доступность = ДобавлениеФайлов И Не ФайлыРедактируютсяВОблачномСервисе;
		Элементы.ФормаСоздатьИзШаблона.Доступность = ДобавлениеФайлов И Не ФайлыРедактируютсяВОблачномСервисе;
		Элементы.ФормаСоздатьСоСканера.Доступность = ДобавлениеФайлов И Не ФайлыРедактируютсяВОблачномСервисе;
		Элементы.СписокКонтекстноеМенюСоздать.Доступность = ДобавлениеФайлов И Не ФайлыРедактируютсяВОблачномСервисе;
		
		Элементы.СписокКонтекстноеМенюСоздать.Доступность = ДобавлениеФайлов И Не ФайлыРедактируютсяВОблачномСервисе;
	
		Элементы.ФормаСкопировать.Доступность = ДобавлениеФайлов И Не ФайлыРедактируютсяВОблачномСервисе;
	
		Элементы.СписокКонтекстноеМенюУстановитьПометкуУдаления.Доступность = ДобавлениеФайлов И Не ФайлыРедактируютсяВОблачномСервисе;
		Элементы.ФормаУстановитьПометкуУдаления.Доступность = ДобавлениеФайлов И Не ФайлыРедактируютсяВОблачномСервисе;
		
		Элементы.ФормаСкопировать.Доступность = ДобавлениеФайлов И Не ФайлыРедактируютсяВОблачномСервисе;
		Элементы.СписокКонтекстноеМенюСкопировать.Доступность = ДобавлениеФайлов И Не ФайлыРедактируютсяВОблачномСервисе;
		
		Элементы.ФормаУстановитьПометкуУдаления.Доступность = ПометкаУдаленияФайлов И Не ФайлыРедактируютсяВОблачномСервисе;
		Элементы.СписокКонтекстноеМенюУстановитьПометкуУдаления.Доступность = ПометкаУдаленияФайлов И Не ФайлыРедактируютсяВОблачномСервисе;
		
		Элементы.ФормаИмпортФайлов.Доступность = ДобавлениеФайлов И Не ФайлыРедактируютсяВОблачномСервисе;
		Элементы.СписокКонтекстноеМенюИмпортФайлов.Доступность = ДобавлениеФайлов  И Не ФайлыРедактируютсяВОблачномСервисе;
		
		Элементы.ПапкиКонтекстноеМенюИмпортПапки.Доступность = ДобавлениеФайлов И Не ФайлыРедактируютсяВОблачномСервисе;
	КонецЕсли;
	
	Если Элементы.Папки.ТекущаяСтрока <> Неопределено Тогда
		ПодключитьОбработчикОжидания("ОбработкаОжиданияПапкиПриАктивизацииСтроки", 0.2, Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоясненияСинхронизацииФайлов()
	
	ФайлыРедактируютсяВОблачномСервисе = Ложь;
	
	Если Элементы.Папки.ТекущаяСтрока = Неопределено Или Элементы.Папки.ТекущаяСтрока.Пустая() Тогда
		
		Элементы.ГруппаПояснениеОблачногоСервиса.Видимость = Ложь;

	Иначе
		
		Элементы.ГруппаПояснениеОблачногоСервиса.Видимость = Элементы.Папки.ТекущиеДанные.ПапкаСинхронизируется;
		ФайлыРедактируютсяВОблачномСервисе = Элементы.Папки.ТекущиеДанные.ПапкаСинхронизируется;
		
		Если Элементы.Папки.ТекущиеДанные.ПапкаСинхронизируется Тогда
			
			АдресПапкиВОблачномСервисе = ФайловыеФункцииСлужебныйКлиентСервер.АдресВОблачномСервисе(
				Элементы.Папки.ТекущиеДанные.УчетнаяЗаписьСервис, Элементы.Папки.ТекущиеДанные.Href);
				
			ЧастиСтроки = Новый Массив;
			ЧастиСтроки.Добавить(НСтр("ru = 'Работа с файлами ведется в облачном сервисе'"));
			ЧастиСтроки.Добавить(" ");
			ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(Элементы.Папки.ТекущиеДанные.УчетнаяЗаписьНаименование, , , , АдресПапкиВОблачномСервисе));
			Элементы.ДекорацияПояснение.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжиданияПапкиПриАктивизацииСтроки()
	
	Если Элементы.Папки.ТекущаяСтрока <> Список.Параметры.Элементы.Найти("Владелец").Значение Тогда
		// Обновляется правый список и доступность команд по настройкам прав.
		// Вызов процедуры обработчика ПриАктивизацииСтроки таблицы Список выполняется платформой.
		Список.Параметры.УстановитьЗначениеПараметра("Владелец", Элементы.Папки.ТекущаяСтрока);
	Иначе
		// Вызов процедуры обработчика ПриАктивизацииСтроки таблицы Список выполняется программно.
		ПодключитьОбработчикОжидания("ОбработкаОжиданияУстановитьДоступностьФайловыхКоманд", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиПравПапки(Папка)
	
	НастройкиПрав = Новый Структура;
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Значение = ЗначениеЗаполнено(Папка);
		НастройкиПрав.Вставить("ИзменениеПапок", Истина);
		НастройкиПрав.Вставить("ИзменениеФайлов", Значение);
		НастройкиПрав.Вставить("ДобавлениеФайлов", Значение);
		НастройкиПрав.Вставить("ПометкаУдаленияФайлов", Значение);
		Возврат НастройкиПрав;
	КонецЕсли;
	
	МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
	
	НастройкиПрав.Вставить("ИзменениеПапок",
		МодульУправлениеДоступом.ЕстьПраво("ИзменениеПапок", Папка));
	
	НастройкиПрав.Вставить("ИзменениеФайлов",
		МодульУправлениеДоступом.ЕстьПраво("ИзменениеФайлов", Папка));
	
	НастройкиПрав.Вставить("ДобавлениеФайлов",
		МодульУправлениеДоступом.ЕстьПраво("ДобавлениеФайлов", Папка));
	
	НастройкиПрав.Вставить("ПометкаУдаленияФайлов",
		МодульУправлениеДоступом.ЕстьПраво("ПометкаУдаленияФайлов", Папка));
	
	Возврат НастройкиПрав;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОжиданияУстановитьДоступностьФайловыхКоманд()
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьФайловыхКоманд(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И ТипЗнч(Элементы.Список.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		УстановитьДоступностьКоманд(
			ТекущиеДанные.РедактируетТекущийПользователь,
			ТекущиеДанные.Редактирует,
			ТекущиеДанные.ПодписанЭП,
			ТекущиеДанные.Зашифрован);
	Иначе
		СделатьКомандыНедоступными();
	КонецЕсли;
	ОбновитьПредпросмотр();

КонецПроцедуры

&НаКлиенте
Процедура СделатьКомандыНедоступными()
	
	Элементы.ФормаЗакончитьРедактирование.Доступность = Ложь;
	Элементы.СписокКонтекстноеМенюЗакончитьРедактирование.Доступность = Ложь;
	
	Элементы.ФормаСохранитьИзменения.Доступность = Ложь;
	Элементы.СписокКонтекстноеМенюСохранитьИзменения.Доступность = Ложь;
	
	Элементы.ФормаОсвободить.Доступность = Ложь;
	Элементы.СписокКонтекстноеМенюОсвободить.Доступность = Ложь;
	
	Элементы.ФормаЗанять.Доступность = Ложь;
	Элементы.СписокКонтекстноеМенюЗанять.Доступность = Ложь;
	
	Элементы.ФормаРедактировать.Доступность = Ложь;
	Элементы.СписокКонтекстноеМенюРедактировать.Доступность = Ложь;
	
	Элементы.ФормаПеренестиВПапку.Доступность = Ложь;
	Элементы.СписокКонтекстноеМенюПеренестиВПапку.Доступность = Ложь;
	
	Элементы.ФормаПодписать.Доступность = Ложь;
	Элементы.СписокКонтекстноеМенюПодписать.Доступность = Ложь;
	
	Элементы.ФормаСохранитьВместеСПодписью.Доступность = Ложь;
	Элементы.СписокКонтекстноеМенюСохранитьВместеСПодписью.Доступность = Ложь;
	
	Элементы.ФормаЗашифровать.Доступность = Ложь;
	Элементы.СписокКонтекстноеМенюЗашифровать.Доступность = Ложь;
	
	Элементы.ФормаРасшифровать.Доступность = Ложь;
	Элементы.СписокКонтекстноеМенюРасшифровать.Доступность = Ложь;
	
	Элементы.ФормаДобавитьПодписьИзФайла.Доступность = Ложь;
	Элементы.СписокКонтекстноеМенюДобавитьПодписьИзФайла.Доступность = Ложь;
	
	Элементы.ФормаОбновитьИзФайлаНаДиске.Доступность = Ложь;
	Элементы.СписокКонтекстноеМенюОбновитьИзФайлаНаДиске.Доступность = Ложь;
	
	Элементы.ФормаСохранитьКак.Доступность = Ложь;
	Элементы.СписокКонтекстноеМенюСохранитьКак.Доступность = Ложь;
	
	Элементы.ФормаОткрытьКаталогФайла.Доступность = Ложь;
	Элементы.СписокКонтекстноеМенюОткрытьКаталогФайла.Доступность = Ложь;
	
	Элементы.ФормаОткрыть.Доступность = Ложь;
	Элементы.СписокКонтекстноеМенюОткрыть.Доступность = Ложь;
	
	Элементы.Печать.Доступность = Ложь;
	Элементы.СписокКонтекстноеМенюПечать.Доступность = Ложь;
	
	Элементы.Отправить.Доступность = Ложь;
	Элементы.СписокКонтекстноеМенюОтправить.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(РедактируетТекущийПользователь, Редактирует, ПодписанЭП, Зашифрован)
	
	РедактируетДругой = ЗначениеЗаполнено(Редактирует) И НЕ РедактируетТекущийПользователь;
	
	Элементы.ФормаЗакончитьРедактирование.Доступность = ИзменениеФайлов И РедактируетТекущийПользователь;
	Элементы.СписокКонтекстноеМенюЗакончитьРедактирование.Доступность = ИзменениеФайлов И РедактируетТекущийПользователь;
	
	Элементы.ФормаСохранитьИзменения.Доступность = ИзменениеФайлов И РедактируетТекущийПользователь;
	Элементы.СписокКонтекстноеМенюСохранитьИзменения.Доступность = ИзменениеФайлов И РедактируетТекущийПользователь;
	
	Элементы.ФормаОсвободить.Доступность = ИзменениеФайлов И ЗначениеЗаполнено(Редактирует);
	Элементы.СписокКонтекстноеМенюОсвободить.Доступность = ИзменениеФайлов И ЗначениеЗаполнено(Редактирует);
	
	Элементы.ФормаЗанять.Доступность = ИзменениеФайлов И Не ЗначениеЗаполнено(Редактирует) И НЕ ПодписанЭП;
	Элементы.СписокКонтекстноеМенюЗанять.Доступность = ИзменениеФайлов И Не ЗначениеЗаполнено(Редактирует) И НЕ ПодписанЭП;
	
	Элементы.ФормаРедактировать.Доступность = ИзменениеФайлов И НЕ ПодписанЭП И НЕ РедактируетДругой;
	Элементы.СписокКонтекстноеМенюРедактировать.Доступность = ИзменениеФайлов И НЕ ПодписанЭП И НЕ РедактируетДругой;
	
	Элементы.ФормаПеренестиВПапку.Доступность = ИзменениеФайлов И НЕ ПодписанЭП;
	Элементы.СписокКонтекстноеМенюПеренестиВПапку.Доступность = ИзменениеФайлов И НЕ ПодписанЭП;
	
	Элементы.ФормаПодписать.Доступность = ИзменениеФайлов И Не ЗначениеЗаполнено(Редактирует);
	Элементы.СписокКонтекстноеМенюПодписать.Доступность = ИзменениеФайлов И Не ЗначениеЗаполнено(Редактирует);
	
	Элементы.ФормаСохранитьВместеСПодписью.Доступность = ПодписанЭП;
	Элементы.СписокКонтекстноеМенюСохранитьВместеСПодписью.Доступность = ПодписанЭП;
	
	Элементы.ФормаЗашифровать.Доступность = ИзменениеФайлов И Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован;
	Элементы.СписокКонтекстноеМенюЗашифровать.Доступность = ИзменениеФайлов И Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован;
	
	Элементы.ФормаРасшифровать.Доступность = ИзменениеФайлов И Зашифрован;
	Элементы.СписокКонтекстноеМенюРасшифровать.Доступность = ИзменениеФайлов И Зашифрован;
	
	Элементы.ФормаДобавитьПодписьИзФайла.Доступность = ИзменениеФайлов И Не ЗначениеЗаполнено(Редактирует);
	Элементы.СписокКонтекстноеМенюДобавитьПодписьИзФайла.Доступность = ИзменениеФайлов И ЗначениеЗаполнено(Редактирует);
	
	Элементы.ФормаОбновитьИзФайлаНаДиске.Доступность = ИзменениеФайлов И Не ПодписанЭП И Не ФайлыРедактируютсяВОблачномСервисе;
	Элементы.СписокКонтекстноеМенюОбновитьИзФайлаНаДиске.Доступность = ИзменениеФайлов И Не ПодписанЭП И Не ФайлыРедактируютсяВОблачномСервисе;
	
	Элементы.ФормаСохранитьКак.Доступность = Истина;
	Элементы.СписокКонтекстноеМенюСохранитьКак.Доступность = Истина;
	
	Элементы.ФормаОткрытьКаталогФайла.Доступность = Истина;
	Элементы.СписокКонтекстноеМенюОткрытьКаталогФайла.Доступность = Истина;
	
	Элементы.ФормаОткрыть.Доступность = Истина;
	Элементы.СписокКонтекстноеМенюОткрыть.Доступность = Истина;
	
	Элементы.Печать.Доступность = Истина;
	Элементы.СписокКонтекстноеМенюПечать.Доступность = Истина;
	
	Элементы.Отправить.Доступность = Истина;
	Элементы.СписокКонтекстноеМенюОтправить.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИерархию(Отметка)
	
	Если Отметка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы.ФормаИспользоватьИерархию.Пометка = Отметка;
	Если Отметка = Истина Тогда 
		Элементы.Папки.Видимость = Истина;
	Иначе
		Элементы.Папки.Видимость = Ложь;
	КонецЕсли;
	Список.Параметры.УстановитьЗначениеПараметра("ИспользоватьИерархию", Отметка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРежимИРедактироватьФайл(ОбработчикРезультата, ДанныеФайла, ДоступностьКомандыРедактировать) Экспорт
	// Выбрать режим открытия файла и начать редактирование.
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОтмена = "Отмена";
	
	ПерсональныеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
	
	СпособОткрытия = ПерсональныеНастройки.ТекстовыеФайлыСпособОткрытия;
	Если СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособыОткрытияФайлаНаПросмотр.ВоВстроенномРедакторе") Тогда
		
		РасширениеВСписке = ФайловыеФункцииСлужебныйКлиентСервер.РасширениеФайлаВСписке(
			ПерсональныеНастройки.ТекстовыеФайлыРасширение,
			ДанныеФайла.Расширение);
		
		Если РасширениеВСписке Тогда
			РаботаСФайламиСлужебныйКлиент.ВернутьРезультат(ОбработчикРезультата, РезультатОткрыть);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СпособОткрытия = ПерсональныеНастройки.ГрафическиеСхемыСпособОткрытия;
	Если СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособыОткрытияФайлаНаПросмотр.ВоВстроенномРедакторе") Тогда
		
		РасширениеВСписке = ФайловыеФункцииСлужебныйКлиентСервер.РасширениеФайлаВСписке(
			ПерсональныеНастройки.ГрафическиеСхемыРасширение,
			ДанныеФайла.Расширение);
		
		Если РасширениеВСписке Тогда
			РаботаСФайламиСлужебныйКлиент.ВернутьРезультат(ОбработчикРезультата, РезультатОткрыть);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Если уже занят для редактирования, то не спрашивать - сразу открывать.
	Если Не ЗначениеЗаполнено(ДанныеФайла.Редактирует)
		И ПерсональныеНастройки.СпрашиватьРежимРедактированияПриОткрытииФайла = Истина
		И ДоступностьКомандыРедактировать Тогда
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
		Обработчик = Новый ОписаниеОповещения("ВыбратьРежимИРедактироватьФайлЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбораРежимаОткрытия", , , , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.ВернутьРезультат(ОбработчикРезультата, РезультатОткрыть);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРежимИРедактироватьФайлЗавершение(Результат, ПараметрыВыполнения) Экспорт
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОтмена = "Отмена";
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		РаботаСФайламиСлужебныйКлиент.ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, РезультатОтмена);
		Возврат;
	КонецЕсли;
	
	Если Результат.КакОткрывать = 1 Тогда
		РаботаСФайламиСлужебныйКлиент.ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, РезультатРедактировать);
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, РезультатОткрыть);
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиСлужебныйКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиСлужебныйКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	ОповеститьОбИзменении(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененияИспользованияПодписанияИлиШифрования()
	
	ПриИзмененияИспользованияПодписанияИлиШифрованияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененияИспользованияПодписанияИлиШифрованияНаСервере()
	
	ФайловыеФункцииСлужебный.КриптографияПриСозданииФормыНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьВариантПредпросмотра(ТипСправочникаСФайлами, Предпросмотр)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ТипСправочникаСФайлами, "Предпросмотр", Предпросмотр);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПредпросмотра(ИспользоватьПредпросмотр)
	
	Элементы.АдресДанныхФайла.Видимость = ИспользоватьПредпросмотр;
	Элементы.Предпросмотр.Пометка = ИспользоватьПредпросмотр;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотр()
	
	Если Не Предпросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И РасширенияПоддерживающиеПредпросмотр.НайтиПоЗначению(ТекущиеДанные.Расширение) <> Неопределено Тогда
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
		АдресДанныхФайла = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
	Иначе
		АдресДанныхФайла = Неопределено;
		Элементы.АдресДанныхФайла.ТекстНевыбраннойКартинки = НСтр("ru = 'Нет данных для предварительного просмотра'");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПараметрыНастройкиСинхронизации(ВладелецФайла)
	
	ТипВладельцаФайла = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("СправочникСсылка.Файлы"));
	
	Отбор = Новый Структура(
	"ВладелецФайла, ТипВладельцаФайла, УчетнаяЗапись",
		ВладелецФайла,
		ТипВладельцаФайла,
		Справочники.УчетныеЗаписиСинхронизацииФайлов.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСинхронизацииФайлов.ВладелецФайла,
		|	НастройкиСинхронизацииФайлов.ТипВладельцаФайла,
		|	НастройкиСинхронизацииФайлов.УчетнаяЗапись
		|ИЗ
		|	РегистрСведений.НастройкиСинхронизацииФайлов КАК НастройкиСинхронизацииФайлов
		|ГДЕ
		|	НастройкиСинхронизацииФайлов.ВладелецФайла = &ВладелецФайла
		|	И НастройкиСинхронизацииФайлов.ТипВладельцаФайла = &ТипВладельцаФайла";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Запрос.УстановитьПараметр("ТипВладельцаФайла", ТипВладельцаФайла);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Отбор.УчетнаяЗапись = ВыборкаДетальныеЗаписи.УчетнаяЗапись;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

#КонецОбласти
