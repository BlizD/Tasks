
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	КолонкиМассив = Новый Массив;
	Для Каждого ОписаниеКолонки Из РеквизитФормыВЗначение("ЭлектронныеПодписи").Колонки Цикл
		КолонкиМассив.Добавить(ОписаниеКолонки.Имя);
	КонецЦикла;
	ОписаниеКолонокТаблицыПодписей = Новый ФиксированныйМассив(КолонкиМассив);
	
	ДанныеФайлаКорректны = Ложь;
	
	Если Параметры.Свойство("РежимСоздания") Тогда 
		РежимСоздания = Параметры.РежимСоздания;
	КонецЕсли;
	
	Если Параметры.Ключ = Неопределено Или Параметры.Ключ.Пустая() Тогда
		
		НовыйФайл = Истина;
		
		Если Параметры.ЗначениеКопирования.Пустая() Тогда
			Объект.ВладелецФайла = Параметры.ВладелецФайла;
		Иначе
			Объект.ТекущаяВерсия = Справочники.ВерсииФайлов.ПустаяСсылка();
			Параметры.ФайлОснование = Параметры.ЗначениеКопирования;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокОснование = Параметры.ФайлОснование;
	Если Не ДокОснование.Пустая() Тогда
		
		Объект.ПолноеНаименование = ДокОснование.ПолноеНаименование;
		Объект.Наименование = Объект.ПолноеНаименование;
		Объект.ХранитьВерсии = ДокОснование.ХранитьВерсии;
		
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(Объект.Ссылка);
		ДанныеФайлаКорректны = Истина;
	КонецЕсли;
	
	ТипВладельца = ТипЗнч(Объект.ВладелецФайла);
	Элементы.Владелец.Заголовок = ТипВладельца;
	
	НовыйФайлЗаписан = Ложь;
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		ОбновитьПолныйПуть();
	КонецЕсли;
	
	Если Не Параметры.ФайлОснование.Пустая() Тогда
		ФайлОснованиеПодписан = Параметры.ФайлОснование.ПодписанЭП;
	КонецЕсли;
	
	ПриИзмененияИспользованияПодписанияИлиШифрованияНаСервере();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		ОбщиеНастройки = МодульЭлектроннаяПодпись.ОбщиеНастройки();
		
		Если ОбщиеНастройки.ИспользоватьЭлектронныеПодписи Тогда
			ЗаполнитьСписокПодписей();
		КонецЕсли;
		
		Если ОбщиеНастройки.ИспользоватьШифрование Тогда
			ЗаполнитьСписокШифрования();
		КонецЕсли;
	КонецЕсли;
	
	ОбщиеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами();
	
	РасширениеФайлаВСписке = ФайловыеФункцииСлужебныйКлиентСервер.РасширениеФайлаВСписке(
		ОбщиеНастройки.СписокРасширенийТекстовыхФайлов, Объект.ТекущаяВерсияРасширение);
	
	Если РасширениеФайлаВСписке Тогда
		Если ЗначениеЗаполнено(Объект.ТекущаяВерсия) Тогда
			
			КодировкаЗначение = РаботаСФайламиСлужебныйВызовСервера.ПолучитьКодировкуВерсииФайла(
				Объект.ТекущаяВерсия);
			
			СписокКодировок = РаботаСФайламиСлужебный.ПолучитьСписокКодировок();
			ЭлементСписка = СписокКодировок.НайтиПоЗначению(КодировкаЗначение);
			Если ЭлементСписка = Неопределено Тогда
				Кодировка = КодировкаЗначение;
			Иначе
				Кодировка = ЭлементСписка.Представление;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Кодировка) Тогда
			Кодировка = НСтр("ru = 'По умолчанию'");
		КонецЕсли;
		
	Иначе
		Элементы.Кодировка.Видимость = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов")
	   И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		
		Если Не МодульУправлениеДоступом.ЕстьПраво("ИзменениеФайлов", Объект.ВладелецФайла) Тогда
			ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СтандартныеПодсистемыСервер.УстановитьОтображениеЗаголовковГрупп(ЭтотОбъект, "ГруппаСведения");
	СтандартныеПодсистемыСервер.УстановитьОтображениеЗаголовковГрупп(ЭтотОбъект, "ГруппаВерсия");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюФайлов") Тогда
		ФайлРедактируетсяВОблаке = ФайловыеФункцииСлужебный.ФайлРедактируетсяВОблаке(Объект.Ссылка);
	КонецЕсли;
	
	ЗапрещенныеРасширения = ФайловыеФункцииСлужебный.СписокЗапрещенныхРасширений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьЭлементовФормы();
	
	НаименованиеДоЗаписи = Объект.Наименование;
	
	Если Не Параметры.ФайлОснование.Пустая() И ФайлОснованиеПодписан Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл ""%1"" подписан.
			           |Копирование сведений об ЭП в новый файл сделает его недоступным для изменения.
			           |
			           |Скопировать сведения об ЭП в новый файл?'"),
			Строка(Параметры.ФайлОснование));
		Обработчик = Новый ОписаниеОповещения("ПриОткрытииПослеОтветаНаВопросСкопироватьСведения", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ПриОткрытииЗавершение();
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ФайлРедактировался И Не ПолученОтветНаВопросФайлЗанят Тогда
		ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
		Если ПараметрыРаботыКлиента.АвторизованныйПользователь = Объект.Редактирует Тогда
			ТекстВопроса = НСтр("ru = 'Файл занят для редактирования.
			|
			|Закрыть карточку?'");
			ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(ЭтотОбъект, Отказ, ТекстВопроса, "ПолученОтветНаВопросФайлЗанят");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимСоздания = "ИзШаблона" И НЕ Объект.ПодписанЭП Тогда
		Если НовыйФайл И НовыйФайлЗаписан И (Не ФайлРедактировался) Тогда
			Если Не ПолученОтветНаВопросОткрытьДляРедактирования Тогда
				Отказ = Истина;
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Открыть файл ""%1"" для редактирования?'"),
					СокрЛП(Объект.ПолноеНаименование));
				Обработчик = Новый ОписаниеОповещения("ПередЗакрытиемПослеОтветаНаВопросОткрытьДляРедактирования", ЭтотОбъект);
				ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ФайлОткрыт" И Источник = Объект.Ссылка Тогда
		НовыйФайл = Ложь;
	КонецЕсли;

	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ФайлРедактировался" И Источник = Объект.Ссылка Тогда
		ФайлРедактировался = Истина;
	КонецЕсли;

	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ОбъектПодписан" И Источник = Объект.Ссылка Тогда
		Прочитать();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "АктивнаяВерсияИзменена" И Источник = Объект.Ссылка Тогда
		Прочитать();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ВерсияСохранена" И Источник = Объект.Ссылка Тогда
		Прочитать();
	КонецЕсли;
	
	Если ВРег(ИмяСобытия) = ВРег("Запись_НаборКонстант")
	   И (    ВРег(Источник) = ВРег("ИспользоватьЭлектронныеПодписи")
		  Или ВРег(Источник) = ВРег("ИспользоватьШифрование")) Тогда
			
		ПодключитьОбработчикОжидания("ПриИзмененияИспользованияПодписанияИлиШифрования", 0.3, Истина);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ)
	
	Объект.Наименование = Объект.ПолноеНаименование;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект)
	
	Если НаименованиеДоЗаписи <> ТекущийОбъект.Наименование Тогда
		Если ТекущийОбъект.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			
			РаботаСФайламиСлужебныйВызовСервера.ПереименоватьФайлВерсииНаДиске(
				ТекущийОбъект.ТекущаяВерсия,
				НаименованиеДоЗаписи,
				ТекущийОбъект.Наименование,
				УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если НовыйФайл Тогда
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(Объект.Ссылка);
		ДанныеФайлаКорректны = Истина;
	КонецЕсли;
	
	Если Не Параметры.ФайлОснование.Пустая() И Объект.ТекущаяВерсия.Пустая() Тогда
		СоздатьКопиюВерсии(Объект.Ссылка, Параметры.ФайлОснование, КопироватьПодписиЭП);
		Модифицированность = Ложь;
	КонецЕсли;
	
	ВерсияОбъекта = Объект.ТекущаяВерсия.ПолучитьОбъект();
	ФайловыеФункцииСлужебный.ПеренестиРезультатыПроверкиПодписей(ЭлектронныеПодписи, ВерсияОбъекта.ЭлектронныеПодписи);
	Если ВерсияОбъекта.Модифицированность() Тогда
		ВерсияОбъекта.Записать();
	КонецЕсли;
	
	РазблокироватьДанныеДляРедактирования(Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи()
	Если НовыйФайл Тогда 
		НовыйФайлЗаписан = Истина;
		
		ПараметрыОповещения = Новый Структура("Владелец, Файл, Событие", Объект.ВладелецФайла, Объект.Ссылка, "СозданФайл");
		Оповестить("Запись_Файл", ПараметрыОповещения);
		
	Иначе
		Если НаименованиеДоЗаписи <> Объект.Наименование Тогда
			// в кэше обновить файл
			РаботаСФайламиСлужебныйКлиент.ОбновитьИнформациюВРабочемКаталоге(
				Объект.ТекущаяВерсия, Объект.Наименование);
			
			НаименованиеДоЗаписи = Объект.Наименование;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	УстановитьДоступностьКомандСпискаЭП();
	УстановитьДоступностьКомандСпискаШифрования();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолноеНаименованиеПриИзменении(Элемент)
	Объект.ПолноеНаименование = СокрЛП(Объект.ПолноеНаименование);
	Попытка
		ФайловыеФункцииСлужебныйКлиент.КорректноеИмяФайла(Объект.ПолноеНаименование, Истина);
	Исключение
		ПоказатьПредупреждение(, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Объект.Наименование = СокрЛП(Объект.ПолноеНаименование);
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Если ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		ОбновитьПолныйПуть();
	КонецЕсли;
	
	ТипВладельца = ТипЗнч(Объект.ВладелецФайла);
	Элементы.Владелец.Заголовок = ТипВладельца;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаДополнительныеДанныеСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
		И ТекущаяСтраница.Имя = "ГруппаДополнительныеРеквизиты"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭлектронныеПодписи

&НаКлиенте
Процедура ЭлектронныеПодписиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.ОткрытьПодпись(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСертификатыШифрования

&НаКлиенте
Процедура СертификатыШифрованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьСертификатШифрованияВыполнить();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Занять(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПрочитатьИУстановитьДоступностьЭлементовФормы", ЭтотОбъект);
	
	РаботаСФайламиСлужебныйКлиент.ЗанятьСОповещением(Обработчик, Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Записать();
	КонецЕсли;
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если ЗапрещенныеРасширения.НайтиПоЗначению(Объект.ТекущаяВерсияРасширение) <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("РедактироватьФайлПослеПодтверждения", ЭтотОбъект);
		ПараметрыФормы = Новый Структура("Ключ", "ПередОткрытиемФайла");
		ПараметрыФормы.Вставить("ИмяФайла",
			ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(Объект.Наименование, Объект.ТекущаяВерсияРасширение));
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПрочитатьИУстановитьДоступностьЭлементовФормы", ЭтотОбъект);
	
	РаботаСФайламиСлужебныйКлиент.РедактироватьСОповещением(Обработчик, Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРедактирование(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ПолучитьДанныеФайлаЕслиНекорректны();
	
	Обработчик = Новый ОписаниеОповещения("ПрочитатьИУстановитьДоступностьЭлементовФормы", ЭтотОбъект);
	
	ПараметрыОсвобожденияФайла = РаботаСФайламиСлужебныйКлиент.ПараметрыОсвобожденияФайла(Обработчик, ДанныеФайла.Ссылка);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = ДанныеФайла.ХранитьВерсии;	
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ДанныеФайла.РедактируетТекущийПользователь;	
	ПараметрыОсвобожденияФайла.Редактирует = ДанныеФайла.Редактирует;	
	ПараметрыОсвобожденияФайла.УникальныйИдентификатор = УникальныйИдентификатор;	
	РаботаСФайламиСлужебныйКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ПолучитьДанныеФайлаЕслиНекорректны();
	
	Обработчик = Новый ОписаниеОповещения("ПрочитатьИУстановитьДоступностьЭлементовФормы", ЭтотОбъект);
	ПараметрыОбновленияФайла = РаботаСФайламиСлужебныйКлиент.ПараметрыОбновленияФайла(Обработчик, ДанныеФайла.Ссылка, УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ДанныеФайла.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ДанныеФайла.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ДанныеФайла.Редактирует;
	РаботаСФайламиСлужебныйКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПрочитатьИУстановитьДоступностьЭлементовФормы", ЭтотОбъект);
	
	РаботаСФайламиСлужебныйКлиент.СохранитьИзмененияФайлаСОповещением(Обработчик,
		Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла(Команда)
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(Объект.Ссылка, УникальныйИдентификатор);
	РаботаСФайламиКлиент.ОткрытьКаталогФайла(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляСохранения(Объект.Ссылка, УникальныйИдентификатор);
	РаботаСФайламиСлужебныйКлиент.СохранитьКак(Неопределено, ДанныеФайла, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(Объект.Ссылка);
	Обработчик = Новый ОписаниеОповещения("ПрочитатьИУстановитьДоступностьЭлементовФормы", ЭтотОбъект);
	РаботаСФайламиСлужебныйКлиент.ОбновитьИзФайлаНаДискеСОповещением(Обработчик, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(Объект.Ссылка);
	
	РаботаСФайламиСлужебныйКлиент.ПодписатьФайл(МассивФайлов, УникальныйИдентификатор,
		Новый ОписаниеОповещения("ПодписатьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		ТекстВопроса =
			НСтр("ru = 'Данные еще не записаны. Выполнение команды
			           |""Зашифровать"" возможно только после записи данных.
			           |
			           |Данные будут записаны.'");
		Обработчик = Новый ОписаниеОповещения("ЗашифроватьПослеОтветаНаВопросЗаписать", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ЗашифроватьПродолжение();
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(Объект.Ссылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("РасшифроватьПослеРасшифровкиНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Расшифровать(
		Обработчик,
		ДанныеФайла.Ссылка,
		УникальныйИдентификатор,
		ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодписьИзФайла(Команда)
	
	РаботаСФайламиСлужебныйКлиент.ДобавитьПодписьИзФайла(
		Объект.Ссылка,
		УникальныйИдентификатор,
		Новый ОписаниеОповещения("ДобавитьПодписьИзФайлаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСПодписью(Команда)
	
	РаботаСФайламиСлужебныйКлиент.СохранитьФайлВместеСПодписью(Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодпись(Команда)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.ОткрытьПодпись(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	Если Элементы.ЭлектронныеПодписи.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьДанныеФайлаЕслиНекорректны();
	СтруктураВозврата = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(Объект.Ссылка,, УникальныйИдентификатор);
	ФайловыеФункцииСлужебныйКлиент.ПроверитьПодписи(ЭтотОбъект,
		СтруктураВозврата.ДвоичныеДанные, Элементы.ЭлектронныеПодписи.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсе(Команда)
	
	ПолучитьДанныеФайлаЕслиНекорректны();
	СтруктураВозврата = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(Объект.Ссылка,, УникальныйИдентификатор);
	ФайловыеФункцииСлужебныйКлиент.ПроверитьПодписи(ЭтотОбъект, СтруктураВозврата.ДвоичныеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	Если Элементы.ЭлектронныеПодписи.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ЭлектронныеПодписи.ТекущиеДанные.Объект = Неопределено
	 Или Элементы.ЭлектронныеПодписи.ТекущиеДанные.Объект.Пустая() Тогда
		
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.СохранитьПодпись(Элементы.ЭлектронныеПодписи.ТекущиеДанные.АдресПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	Обработчик = Новый ОписаниеОповещения("УдалитьЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(Обработчик, НСтр("ru = 'Удалить выделенные подписи?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификатШифрования(Команда)
	ОткрытьСертификатШифрованияВыполнить();
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьФайлПослеПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат = "Продолжить" Тогда
		
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(Объект.Ссылка, УникальныйИдентификатор);
		РаботаСФайламиКлиент.Открыть(ДанныеФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФайлПослеПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат = "Продолжить" Тогда
		Обработчик = Новый ОписаниеОповещения("ПрочитатьИУстановитьДоступностьЭлементовФормы", ЭтотОбъект);
		РаботаСФайламиСлужебныйКлиент.РедактироватьСОповещением(Обработчик, Объект.Ссылка, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Редактирует.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Редактирует");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Пользователи.ПустаяСсылка();

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Редактирует.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Редактирует");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийПользователь");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ФайлЗанятыйТекущимПользователем);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПослеОтветаНаВопросОткрытьДляРедактирования(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		РаботаСФайламиСлужебныйКлиент.РедактироватьСОповещением(Неопределено, Объект.Ссылка, УникальныйИдентификатор);
	КонецЕсли;
	ПолученОтветНаВопросОткрытьДляРедактирования = Истина;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение()
	УстановитьДоступностьКомандСпискаЭП();
	УстановитьДоступностьКомандСпискаШифрования();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииПослеОтветаНаВопросСкопироватьСведения(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		КопироватьПодписиЭП = Истина;
	КонецЕсли;
	ПриОткрытииЗавершение();
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьИУстановитьДоступностьЭлементовФормы(Результат, ПараметрыВыполнения) Экспорт
	Прочитать();
	УстановитьДоступностьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	ПрочитатьИЗаполнитьПодписи();
	
	УстановитьДоступностьЭлементовФормы();
	УстановитьДоступностьКомандСпискаЭП();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьПослеОтветаНаВопросЗаписать(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Создание:'"),
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	
	ЗашифроватьПродолжение();
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьПродолжение()
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(Объект.Ссылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("ЗашифроватьПослеШифрованияНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Зашифровать(
		Обработчик,
		ДанныеФайла,
		УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьПослеШифрованияНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРабочегоКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	ЗашифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		Результат.МассивОтпечатков,
		МассивФайловВРабочемКаталогеДляУдаления,
		ИмяРабочегоКаталога);
	
	РаботаСФайламиСлужебныйКлиент.ИнформироватьОШифровании(
		МассивФайловВРабочемКаталогеДляУдаления,
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		Объект.Ссылка);
	
	УстановитьДоступностьЭлементовФормы();
	УстановитьДоступностьКомандСпискаШифрования();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПослеРасшифровкиНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	ИмяРабочегоКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	РасшифроватьСервер(Результат.МассивДанныхДляЗанесенияВБазу, ИмяРабочегоКаталога);
	
	РаботаСФайламиСлужебныйКлиент.ИнформироватьОРасшифровке(
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		Объект.Ссылка);
	
	УстановитьДоступностьЭлементовФормы();
	УстановитьДоступностьКомандСпискаШифрования();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодписьИзФайлаЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		УстановитьДоступностьЭлементовФормы();
		ЗаполнитьСписокПодписей();
		УстановитьДоступностьКомандСпискаЭП();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗавершение(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитПодписанИзменен = Ложь;
	УдалитьПодписиИОбновитьСписок(РеквизитПодписанИзменен);
	
	Если РеквизитПодписанИзменен Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
		Прочитать();
	КонецЕсли;
	
	Оповестить("Запись_Файл", Новый Структура("Событие", "ПрисоединенныйФайлПодписан"), Объект.ВладелецФайла);
	
	УстановитьДоступностьКомандСпискаЭП();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКопиюВерсии(Приемник, Источник, КопироватьПодписиЭП)
	
	Если Источник.ТекущаяВерсия.Пустая() Тогда
		Возврат;
	КонецЕсли;
		
	ХранилищеФайла = Неопределено;
	Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		ХранилищеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(Источник.ТекущаяВерсия);
	КонецЕсли;
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.ИмяБезРасширения = Объект.Наименование;
	СведенияОФайле.Размер = Источник.ТекущаяВерсия.Размер;
	СведенияОФайле.РасширениеБезТочки = Источник.ТекущаяВерсия.Расширение;
	СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
	СведенияОФайле.АдресВременногоХранилищаТекста = Источник.ТекущаяВерсия.ТекстХранилище;
	СведенияОФайле.СсылкаНаВерсиюИсточник = Источник.ТекущаяВерсия;
	Версия = РаботаСФайламиСлужебныйВызовСервера.СоздатьВерсию(Приемник, СведенияОФайле);
	
	// Обновим форму Файла (ведь запись может произойти и не при закрытии формы).
	Объект.ТекущаяВерсия = Версия.Ссылка;
	
	// Обновим запись в информационной базе.
	РаботаСФайламиСлужебныйВызовСервера.ОбновитьВерсиюВФайле(
		Приемник, Версия, Источник.ТекущаяВерсия.ТекстХранилище, УникальныйИдентификатор);
	
	Прочитать();
	
	Если КопироватьПодписиЭП Тогда
		
		ФайлОбъект = Объект.Ссылка.ПолучитьОбъект();
		ФайлОбъект.ПодписанЭП = Истина;
		ФайлОбъект.Записать();
		
		ВерсияОбъект = Объект.ТекущаяВерсия.ПолучитьОбъект();
		
		Для Каждого Строка Из Источник.ТекущаяВерсия.ЭлектронныеПодписи Цикл
			НоваяСтрока = ВерсияОбъект.ЭлектронныеПодписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
		ВерсияОбъект.ПодписанЭП = Истина;
		ВерсияОбъект.Записать();
		
		ПрочитатьИЗаполнитьПодписи();
		
	КонецЕсли;	
	
	Если Источник.Зашифрован Тогда
		
		ФайлОбъект = Объект.Ссылка.ПолучитьОбъект();
		ФайлОбъект.Зашифрован = Истина;
		
		Для Каждого Строка Из Источник.СертификатыШифрования Цикл
			НоваяСтрока = ФайлОбъект.СертификатыШифрования.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
		ФайлОбъект.Записать();
		
		ВерсияОбъект = Объект.ТекущаяВерсия.ПолучитьОбъект();
		ВерсияОбъект.Зашифрован = Истина;
		ВерсияОбъект.Записать();
		
		ПрочитатьИЗаполнитьШифрование();
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	ДоступныДействияСФайлом = Не Объект.ТекущаяВерсия.Пустая() И Не Объект.Ссылка.Пустая();
	
	Элементы.ХранитьВерсии.Доступность = ДоступныДействияСФайлом И Не Объект.ПометкаУдаления;
	
	Элементы.ФормаОтменитьРедактирование.Доступность = ЗначениеЗаполнено(Объект.Редактирует) И Не ФайлРедактируетсяВОблаке;
	Элементы.ФормаОткрытьКаталогФайла.Доступность = ДоступныДействияСФайлом;
	Элементы.ФормаСохранитьКак.Доступность = ДоступныДействияСФайлом;
	
	Элементы.ФормаРедактировать.Доступность = НЕ Объект.ПодписанЭП И Не ФайлРедактируетсяВОблаке;
	Элементы.ФормаЗакончитьРедактирование.Доступность = ЗначениеЗаполнено(Объект.Редактирует) И Не ФайлРедактируетсяВОблаке;
	
	Элементы.ПолноеНаименование.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Редактирует);
	
	Элементы.ФормаЗанять.Доступность = Не ЗначениеЗаполнено(Объект.Редактирует) И (ДоступныДействияСФайлом) И НЕ Объект.ПодписанЭП  И Не ФайлРедактируетсяВОблаке;
	Элементы.ФормаСохранитьИзменения.Доступность = ЗначениеЗаполнено(Объект.Редактирует) И Не ФайлРедактируетсяВОблаке;
	
	Элементы.ФормаОбновитьИзФайлаНаДиске.Доступность = ДоступныДействияСФайлом И НЕ Объект.ПодписанЭП  И Не ФайлРедактируетсяВОблаке;
	
	Элементы.ФормаПодписать.Доступность = (ДоступныДействияСФайлом И Не ЗначениеЗаполнено(Объект.Редактирует)) ИЛИ НЕ ДоступныДействияСФайлом;
	Элементы.ФормаЗашифровать.Доступность = (ДоступныДействияСФайлом И Не ЗначениеЗаполнено(Объект.Редактирует) И НЕ Объект.Зашифрован) ИЛИ НЕ ДоступныДействияСФайлом;
	
	Элементы.ФормаДобавитьПодписьИзФайла.Доступность = ДоступныДействияСФайлом И Не ЗначениеЗаполнено(Объект.Редактирует);
	Элементы.ФормаСохранитьВместеСПодписью.Доступность = ДоступныДействияСФайлом И Объект.ПодписанЭП;
	Элементы.ФормаРасшифровать.Доступность = ДоступныДействияСФайлом И Объект.Зашифрован;
	
	Элементы.ФормаСкопировать.Доступность = Не ФайлРедактируетсяВОблаке;
	Элементы.ФормаУстановитьПометкуУдаления.Доступность =  Не ФайлРедактируетсяВОблаке;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВыполнить()
	Записать();
	Прочитать();
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВыполнить()
	
	РаботаСФайламиКлиент.СкопироватьФайл(Объект.ВладелецФайла, Объект.Ссылка);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокШифрования()
	
	СертификатыШифрования.Очистить();
	
	Если Объект.Зашифрован Тогда
		МассивСертификатовШифрования = РаботаСФайламиСлужебныйВызовСервера.ПолучитьМассивСертификатовШифрования(Объект.Ссылка);
		Для Каждого СтруктураСертификата Из МассивСертификатовШифрования Цикл
			НоваяСтрока = СертификатыШифрования.Добавить();
			НоваяСтрока.Представление = СтруктураСертификата.Представление;
			НоваяСтрока.Отпечаток = СтруктураСертификата.Отпечаток;
			Если СтруктураСертификата.Сертификат <> Неопределено Тогда
				НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(СтруктураСертификата.Сертификат, УникальныйИдентификатор);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Разрешено расшифровывать'");
	
	Если СертификатыШифрования.Количество() <> 0 Тогда
		ТекстЗаголовка =ТекстЗаголовка + " (" + Формат(СертификатыШифрования.Количество(), "ЧГ=") + ")";
	КонецЕсли;
	
	Элементы.ГруппаСертификатыШифрования.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПодписей()
	
	ЭлектронныеПодписи.Очистить();
		
	Если Объект.ПодписанЭП Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектронныеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
		|	ЭлектронныеПодписи.ДатаПодписи КАК ДатаПодписи,
		|	ЭлектронныеПодписи.Комментарий КАК Комментарий,
		|	ЭлектронныеПодписи.Подпись КАК Подпись,
		|	ЭлектронныеПодписи.Отпечаток КАК Отпечаток,
		|	ЭлектронныеПодписи.УстановившийПодпись КАК УстановившийПодпись,
		|	ЭлектронныеПодписи.Сертификат КАК Сертификат,
		|	ЭлектронныеПодписи.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
		|	ЭлектронныеПодписи.ПодписьВерна КАК ПодписьВерна
		|ИЗ
		|	Справочник.ВерсииФайлов.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|ГДЕ
		|	ЭлектронныеПодписи.Ссылка = &ОбъектСсылка";
		
		Запрос.Параметры.Вставить("ОбъектСсылка", Объект.ТекущаяВерсия);
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			НоваяСтрока = ЭлектронныеПодписи.Добавить();
			
			НоваяСтрока.КомуВыданСертификат = ВыборкаЗапроса.КомуВыданСертификат;
			НоваяСтрока.ДатаПодписи         = ВыборкаЗапроса.ДатаПодписи;
			НоваяСтрока.Комментарий         = ВыборкаЗапроса.Комментарий;
			НоваяСтрока.Объект              = Объект.ТекущаяВерсия;
			НоваяСтрока.Отпечаток           = ВыборкаЗапроса.Отпечаток;
			НоваяСтрока.УстановившийПодпись = ВыборкаЗапроса.УстановившийПодпись;
			НоваяСтрока.ДатаПроверкиПодписи = ВыборкаЗапроса.ДатаПроверкиПодписи;
			НоваяСтрока.ПодписьВерна        = ВыборкаЗапроса.ПодписьВерна;
			НоваяСтрока.ИндексКартинки = -1;
			
			ФайловыеФункцииСлужебныйКлиентСервер.ЗаполнитьСтатусПодписи(НоваяСтрока);
			
			ДвоичныеДанные = ВыборкаЗапроса.Подпись.Получить();
			Если ДвоичныеДанные <> Неопределено Тогда 
				НоваяСтрока.АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			КонецЕсли;
			
			ДвоичныеДанныеСертификата = ВыборкаЗапроса.Сертификат.Получить();
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда 
				НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ЭлектронныеПодписи.Количество() = 0 Тогда
		ТекстЗаголовка = НСтр("ru = 'Электронные подписи'");
	Иначе
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Электронные подписи (%1)'"),
			Формат(ЭлектронныеПодписи.Количество(), "ЧГ="));
	КонецЕсли;
	Элементы.ГруппаЭлектронныеПодписи.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПолныйПуть()
	
	Если ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		
		ПапкаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ВладелецФайла");
		
		Если ЗначениеЗаполнено(ПапкаРодитель) Тогда
			
			ПолныйПуть = "";
			
			Пока ЗначениеЗаполнено(ПапкаРодитель) Цикл
				
				Если Не ПустаяСтрока(ПолныйПуть) Тогда
					ПолныйПуть = "\" + ПолныйПуть;
				КонецЕсли;
				
				ПолныйПуть = Строка(ПапкаРодитель) + ПолныйПуть;
				
				ПапкаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПапкаРодитель, "Родитель");
				Если Не ЗначениеЗаполнено(ПапкаРодитель) Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Элементы.Владелец.Подсказка = ПолныйПуть;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	Если Объект.Ссылка.Пустая() Тогда
		Записать();
	КонецЕсли;
	
	Если ЗапрещенныеРасширения.НайтиПоЗначению(Объект.ТекущаяВерсияРасширение) <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьФайлПослеПодтверждения", ЭтотОбъект);
		ПараметрыФормы = Новый Структура("Ключ", "ПередОткрытиемФайла");
		ПараметрыФормы.Вставить("ИмяФайла",
			ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(Объект.Наименование, Объект.ТекущаяВерсияРасширение));
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(Объект.Ссылка, УникальныйИдентификатор);
	РаботаСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеФайлаЕслиНекорректны()
	
	Если ДанныеФайла = Неопределено ИЛИ НЕ ДанныеФайлаКорректны Тогда
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(Объект.Ссылка);
		ДанныеФайлаКорректны = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьИЗаполнитьПодписи()
	
	Прочитать();
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(Объект.Ссылка);
	ДанныеФайлаКорректны = Истина;
	ЗаполнитьСписокПодписей();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьИЗаполнитьШифрование()
	
	Прочитать();
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(Объект.Ссылка);
	ДанныеФайлаКорректны = Истина;
	ЗаполнитьСписокШифрования();
	
КонецПроцедуры

&НаСервере
Процедура ЗашифроватьСервер(МассивДанныхДляЗанесенияВБазу,
                            МассивОтпечатков,
                            МассивФайловВРабочемКаталогеДляУдаления,
                            ИмяРабочегоКаталога)
	
	Зашифровать = Истина;
	
	РаботаСФайламиСлужебныйВызовСервера.ЗанестиИнформациюОШифровании(
		Объект.Ссылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		УникальныйИдентификатор,
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
		
	Прочитать();
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(Объект.Ссылка);
	ЗаполнитьСписокШифрования();
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьСервер(МассивДанныхДляЗанесенияВБазу,
                             ИмяРабочегоКаталога)
	
	Зашифровать = Ложь;
	МассивОтпечатков = Новый Массив;
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	РаботаСФайламиСлужебныйВызовСервера.ЗанестиИнформациюОШифровании(
		Объект.Ссылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		УникальныйИдентификатор,
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
		
	Прочитать();
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(Объект.Ссылка);
	ЗаполнитьСписокШифрования();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПодписиИОбновитьСписок(РеквизитПодписанИзменен)
	
	ИндексыСтрок = Новый Массив;
	
	Для Каждого Элемент Из Элементы.ЭлектронныеПодписи.ВыделенныеСтроки Цикл
		ДанныеСтроки = ЭлектронныеПодписи.НайтиПоИдентификатору(Элемент);
		
		Если ДанныеСтроки.Объект <> Неопределено И (НЕ ДанныеСтроки.Объект.Пустая()) Тогда
			
			ИндексыСтрок.Добавить(ЭлектронныеПодписи.Индекс(ДанныеСтроки));
		КонецЕсли;
	КонецЦикла;
	
	РаботаСФайламиСлужебныйВызовСервера.УдалитьПодписиВерсииФайла(
		Объект.ТекущаяВерсия,
		ИндексыСтрок,
		РеквизитПодписанИзменен,
		УникальныйИдентификатор);
	
	ЗаполнитьСписокПодписей();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСпискаЭП()
	
	ФайловыеФункцииСлужебныйКлиент.УстановитьДоступностьКомандСпискаЭлектронныхПодписей(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСпискаШифрования()
	
	ФайловыеФункцииСлужебныйКлиент.УстановитьДоступностьКомандСпискаСертификатовШифрования(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификатШифрованияВыполнить()
	
	ТекущиеДанные = Элементы.СертификатыШифрования.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	
	Если ПустаяСтрока(ТекущиеДанные.АдресСертификата) Тогда
		МодульЭлектроннаяПодписьКлиент.ОткрытьСертификат(ТекущиеДанные.Отпечаток);
	Иначе
		МодульЭлектроннаяПодписьКлиент.ОткрытьСертификат(ТекущиеДанные.АдресСертификата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененияИспользованияПодписанияИлиШифрования()
	
	ПриИзмененияИспользованияПодписанияИлиШифрованияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененияИспользованияПодписанияИлиШифрованияНаСервере()
	
	ФайловыеФункцииСлужебный.КриптографияПриСозданииФормыНаСервере(ЭтотОбъект, Ложь);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
