
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Заполнение вспомогательных данных.
	
	ЗапретРедактированияРолей = ПользователиСлужебный.ЗапретРедактированияРолей();
	
	// Заполнение списка выбора языка.
	Если Метаданные.Языки.Количество() < 2 Тогда
		Элементы.ПользовательИБЯзык.Видимость = Ложь;
	Иначе
		Для каждого МетаданныеЯзыка Из Метаданные.Языки Цикл
			Элементы.ПользовательИБЯзык.СписокВыбора.Добавить(
				МетаданныеЯзыка.Имя, МетаданныеЯзыка.Синоним);
		КонецЦикла;
	КонецЕсли;
	
	// Подготовка к интерактивным действиям с учетом сценариев открытия формы.
	УровеньДоступа = ПользователиСлужебный.УровеньДоступаКСвойствамПользователя(Объект);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		// Создание нового элемента.
		Если Параметры.ГруппаНовогоВнешнегоПользователя
		         <> Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
			
			ГруппаНовогоВнешнегоПользователя = Параметры.ГруппаНовогоВнешнегоПользователя;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			// Копирование элемента.
			ЗначениеКопирования = Параметры.ЗначениеКопирования;
			Объект.Наименование      = "";
			Объект.ОбъектАвторизации = Неопределено;
			Объект.УдалитьПароль     = "";
			
			Если Не ПользователиСлужебный.УровеньДоступаПользователяВыше(ЗначениеКопирования, УровеньДоступа) Тогда
				ПрочитатьПользователяИБ(ЗначениеЗаполнено(ЗначениеКопирования.ИдентификаторПользователяИБ));
			Иначе
				ПрочитатьПользователяИБ();
			КонецЕсли;
			
			Если Не УровеньДоступа.ИзменениеРазрешенияНаВход Тогда
				ВходВПрограммуРазрешен = Ложь;
				ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Ложь;
			КонецЕсли;
		Иначе
			// Добавление элемента.
			Если Параметры.Свойство("ОбъектАвторизацииНовогоВнешнегоПользователя") Тогда
				
				Объект.ОбъектАвторизации = Параметры.ОбъектАвторизацииНовогоВнешнегоПользователя;
				ОбъектАвторизацииЗаданПриОткрытии = ЗначениеЗаполнено(Объект.ОбъектАвторизации);
				ОбъектАвторизацииПриИзмененииНаКлиентеНаСервере(ЭтотОбъект, Объект);
				
			ИначеЕсли ЗначениеЗаполнено(ГруппаНовогоВнешнегоПользователя) Тогда
				
				НазначениеГруппыВнешнихПользователей = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ГруппаНовогоВнешнегоПользователя, "Назначение").Выгрузить();
				
				ОдинТипПользователей = НазначениеГруппыВнешнихПользователей.Количество() = 1;
				
				Если ОдинТипПользователей Тогда
					Объект.ОбъектАвторизации = НазначениеГруппыВнешнихПользователей[0].ТипПользователей;
				КонецЕсли;
				
				Элементы.ОбъектАвторизации.ВыбиратьТип = Не ОдинТипПользователей;
			КонецЕсли;
			
			// Чтение начальных значений свойств пользователя ИБ.
			ПрочитатьПользователяИБ();
			
			Если Не ЗначениеЗаполнено(Параметры.ИдентификаторПользователяИБ) Тогда
				ПользовательИБАутентификацияСтандартная = Истина;
				
				Если УровеньДоступа.ИзменениеРазрешенияНаВход Тогда
					ВходВПрограммуРазрешен = Истина;
					ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если УровеньДоступа.УправлениеСписком
		   И Объект.ОбъектАвторизации <> Неопределено Тогда
			
			ПользовательИБИмя = ПользователиСлужебныйКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(
				ТекущееПредставлениеОбъектаАвторизации);
			
			ПользовательИБПолноеИмя = Объект.Наименование;
		КонецЕсли;
	Иначе
		// Открытие существующего элемента.
		ПрочитатьПользователяИБ();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбработатьИнтерфейсРолей("НастроитьИнтерфейсРолейПриСозданииФормы", Истина);
	НачальноеОписаниеПользователяИБ = НачальноеОписаниеПользователяИБ();
	
	ОбщаяНастройкаФормы(Истина);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	Если Не ПользователиСлужебныйПовтИсп.Настройки().ОбщиеНастройкиВхода Тогда
		Элементы.ГруппаИзменитьОграничение.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		Элементы.ГруппаШапка.ТолькоПросмотр = Истина;
		Элементы.СтраницаДополнительныеРеквизиты.ТолькоПросмотр = Истина;
		Элементы.СтраницаКомментарий.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	
	ОбщаяНастройкаФормы();
	
	ТекущееПредставлениеОбъектаАвторизации = Строка(Объект.ОбъектАвторизации);
	
КонецПроцедуры

&НаСервере
Процедура ОбщаяНастройкаФормы(ПриСозданииНаСервере = Ложь, ПараметрыЗаписи = Неопределено)
	
	Если НачальноеОписаниеПользователяИБ = Неопределено Тогда
		Возврат; // Вызов ПриЧтенииНаСервере до вызова ПриСозданииНаСервере.
	КонецЕсли;
	
	Если Не ПриСозданииНаСервере Тогда
		ПрочитатьПользователяИБ();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПользователиСлужебный.ПрочитатьСведенияОПользователе(ЭтотОбъект);
	УстановитьПривилегированныйРежим(Ложь);
	
	УровеньДоступа = ПользователиСлужебный.УровеньДоступаКСвойствамПользователя(Объект);
	
	ОпределитьДействияВФорме();
	
	ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи);
	
	// Установка постоянной доступности свойств.
	Элементы.СвойстваПользователяИБ.Видимость =
		ЗначениеЗаполнено(ДействияВФорме.СвойстваПользователяИБ);
	
	Элементы.ОтображениеРолей.Видимость =
		ЗначениеЗаполнено(ДействияВФорме.Роли);
	
	Элементы.УстановитьРолиНепосредственно.Видимость =
		ЗначениеЗаполнено(ДействияВФорме.Роли) И НЕ ПользователиСлужебный.ЗапретРедактированияРолей();
	
	ОбновитьОтображаемыйТипПользователя();
	
	ТолькоПросмотр = ТолькоПросмотр
		ИЛИ ДействияВФорме.Роли                   <> "Редактирование"
		  И ДействияВФорме.СвойстваЭлемента       <> "Редактирование"
		  И ДействияВФорме.СвойстваПользователяИБ <> "Редактирование";
	
	Элементы.РекомендуетсяПроверитьНастройкиДляВхода.Видимость =
		УровеньДоступа.ИзменениеРазрешенияНаВход И Объект.Подготовлен И Не ПриЧтенииВходВПрограммуРазрешен;
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
	Если ДействияВФорме.Роли = "Редактирование"
	   И Объект.УстановитьРолиНепосредственно
	   И ПользовательИБРоли.Количество() = 0 Тогда
		
		Если НЕ ПараметрыЗаписи.Свойство("СПустымСпискомРолей") Тогда
			Отказ = Истина;
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ПослеОтветаНаВопросОЗаписиСПустымСпискомРолей", ЭтотОбъект, ПараметрыЗаписи),
				НСтр("ru = 'Пользователю информационной базы не установлено ни одной роли. Продолжить?'"),
				РежимДиалогаВопрос.ДаНет,
				,
				,
				НСтр("ru = 'Запись пользователя информационной базы'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗначениеКопирования", ЗначениеКопирования);
	
	ОбновитьОтображаемыйТипПользователя();
	// Автообновление наименования внешнего пользователя.
	УстановитьПривилегированныйРежим(Истина);
	ТекущееПредставлениеОбъектаАвторизации = Строка(ТекущийОбъект.ОбъектАвторизации);
	УстановитьПривилегированныйРежим(Ложь);
	Объект.Наименование        = ТекущееПредставлениеОбъектаАвторизации;
	ТекущийОбъект.Наименование = ТекущееПредставлениеОбъектаАвторизации;
	
	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		
		ОписаниеПользователяИБ = ОписаниеПользователяИБ();
		
		Если ЗначениеЗаполнено(Объект.ИдентификаторПользователяИБ) Тогда
			ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", Объект.ИдентификаторПользователяИБ);
		КонецЕсли;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
	КонецЕсли;
	
	Если ДействияВФорме.СвойстваЭлемента <> "Редактирование" Тогда
		ЗаполнитьЗначенияСвойств(ТекущийОбъект, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ТекущийОбъект.Ссылка, "ПометкаУдаления"));
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить(
		"ГруппаНовогоВнешнегоПользователя", ГруппаНовогоВнешнегоПользователя);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	ПользователиСлужебный.ЗаписатьСведенияОПользователе(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		ПараметрыЗаписи.Вставить(
			ТекущийОбъект.ДополнительныеСвойства.ОписаниеПользователяИБ.РезультатДействия);
	КонецЕсли;
	
	ОбщаяНастройкаФормы(, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ВнешниеПользователи", Новый Структура, Объект.Ссылка);
	ОповеститьОбИзменении(Объект.ОбъектАвторизации);
	
	Если ПараметрыЗаписи.Свойство("ДобавленПользовательИБ") Тогда
		Оповестить("ДобавленПользовательИБ", ПараметрыЗаписи.ДобавленПользовательИБ, ЭтотОбъект);
		
	ИначеЕсли ПараметрыЗаписи.Свойство("ИзмененПользовательИБ") Тогда
		Оповестить("ИзмененПользовательИБ", ПараметрыЗаписи.ИзмененПользовательИБ, ЭтотОбъект);
		
	ИначеЕсли ПараметрыЗаписи.Свойство("УдаленПользовательИБ") Тогда
		Оповестить("УдаленПользовательИБ", ПараметрыЗаписи.УдаленПользовательИБ, ЭтотОбъект);
		
	ИначеЕсли ПараметрыЗаписи.Свойство("ОчищеноСопоставлениеСНесуществующимПользователемИБ") Тогда
		
		Оповестить(
			"ОчищеноСопоставлениеСНесуществующимПользователемИБ",
			ПараметрыЗаписи.ОчищеноСопоставлениеСНесуществующимПользователемИБ, ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппаНовогоВнешнегоПользователя) Тогда
		ОповеститьОбИзменении(ГруппаНовогоВнешнегоПользователя);
		
		Оповестить(
			"Запись_ГруппыВнешнихПользователей",
			Новый Структура,
			ГруппаНовогоВнешнегоПользователя);
		
		ГруппаНовогоВнешнегоПользователя = Неопределено;
	КонецЕсли;
	
	УстановитьДоступностьСвойств();
	
	ПользователиСлужебныйКлиент.РазвернутьПодсистемыРолей(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТекстОшибки = "";
	Если ПользователиСлужебный.ОбъектАвторизацииИспользуется(
	         Объект.ОбъектАвторизации, Объект.Ссылка, , , ТекстОшибки) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки, , "Объект.ОбъектАвторизации", , Отказ);
	КонецЕсли;
	
	Если ВходВПрограммуРазрешен
	   И ЗначениеЗаполнено(СрокДействия)
	   И СрокДействия <= НачалоДня(ТекущаяДатаСеанса()) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Ограничение должно быть до завтра или более.'"),, "ВходВПрограммуРазрешен",, Отказ);
	КонецЕсли;
	
	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		ОписаниеПользователяИБ = ОписаниеПользователяИБ();
		ОписаниеПользователяИБ.Вставить("ИдентификаторПользователяИБ", Объект.ИдентификаторПользователяИБ);
		ПользователиСлужебный.ПроверитьОписаниеПользователяИБ(ОписаниеПользователяИБ, Отказ);
		
		ТекстСообщения = "";
		Если ПользователиСлужебный.ТребуетсяСоздатьПервогоАдминистратора(Неопределено, ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, , "ВходВПрограммуРазрешен", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Проверка наличия ролей в метаданных.
	Если Не Элементы.Роли.ТолькоПросмотр Тогда
		Ошибки = Неопределено;
		ЭлементыДерева = Роли.ПолучитьЭлементы();
		Для Каждого Строка Из ЭлементыДерева Цикл
			Если Не Строка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			Если Строка.ЭтоНесуществующаяРоль Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Роли[%1].РолиСиноним",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Роль ""%1"" не найдена в метаданных.'"), Строка.Синоним),
					"Роли",
					ЭлементыДерева.Индекс(Строка),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Роль ""%1"" в строке %%1 не найдена в метаданных.'"), Строка.Синоним));
			КонецЕсли;
			Если Строка.ЭтоНедоступнаяРоль Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Роли[%1].РолиСиноним",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Роль ""%1"" недоступна для внешних пользователей.'"), Строка.Синоним),
					"Роли",
					ЭлементыДерева.Индекс(Строка),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Роль ""%1"" в строке %%1 недоступна для внешних пользователей.'"), Строка.Синоним));
			КонецЕсли;
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбработатьИнтерфейсРолей("НастроитьИнтерфейсРолейПриЗагрузкеНастроек", Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбъектАвторизацииПриИзменении(Элемент)
	
	ОбъектАвторизацииПриИзмененииНаКлиентеНаСервере(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура НедействителенПриИзменении(Элемент)
	
	Если Объект.Недействителен Тогда
		ВходВПрограммуРазрешен = Ложь;
	Иначе
		ВходВПрограммуРазрешен = ВходВПрограммуРазрешенЗначениеПрямогоИзменения
			И (ПользовательИБАутентификацияOpenID
			   Или ПользовательИБАутентификацияСтандартная);
	КонецЕсли;
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры

&НаКлиенте
Процедура ВходВПрограммуРазрешенПриИзменении(Элемент)
	
	Если Объект.ПометкаУдаления И ВходВПрограммуРазрешен Тогда
		ВходВПрограммуРазрешен = Ложь;
		ПоказатьПредупреждение(,
			НСтр("ru = 'Чтобы разрешить вход в программу, требуется снять
			           |пометку на удаление с этого внешнего пользователя.'"));
		Возврат;
	КонецЕсли;
	
	ОбновитьИмяДляВхода(ЭтотОбъект);
	
	Если ВходВПрограммуРазрешен
	   И НЕ ПользовательИБАутентификацияOpenID
	   И НЕ ПользовательИБАутентификацияСтандартная Тогда
	
		ПользовательИБАутентификацияСтандартная = Истина;
	КонецЕсли;
	
	УстановитьДоступностьСвойств();
	
	Если Не УровеньДоступа.ИзменениеРазрешенияНаВход
	   И Не ВходВПрограммуРазрешен Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'После записи вход в программу сможет разрешить только администратор.'"));
	КонецЕсли;
	
	ВходВПрограммуРазрешенЗначениеПрямогоИзменения = ВходВПрограммуРазрешен;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОграничениеНаВходВПрограмму(Команда)
	
	ОткрытьФорму("Справочник.Пользователи.Форма.ОграничениеНаВходВПрограмму",, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ИзменитьОграничениеНаВходВПрограммуЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБИмяПриИзменении(Элемент)
	
	ПользовательИБИмяЗначениеПрямогоИзменения = ПользовательИБИмя;
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБАутентификацияСтандартнаяПриИзменении(Элемент)
	
	АутентификацияПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПотребоватьСменуПароляПриВходеПриИзменении(Элемент)
	
	Если ПотребоватьСменуПароляПриВходе Тогда
		ПользовательИБЗапрещеноИзменятьПароль = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБЗапрещеноИзменятьПарольПриИзменении(Элемент)
	
	Если ПользовательИБЗапрещеноИзменятьПароль Тогда
		ПотребоватьСменуПароляПриВходе = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБАутентификацияOpenIDПриИзменении(Элемент)
	
	АутентификацияПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРолиНепосредственноПриИзменении(Элемент)
	
	Если НЕ Объект.УстановитьРолиНепосредственно Тогда
		ПрочитатьРолиПользователяИБ();
		ПользователиСлужебныйКлиент.РазвернутьПодсистемыРолей(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыГлавноеИКомментарийПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
		И ТекущаяСтраница.Имя = "СтраницаДополнительныеРеквизиты"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРоли

////////////////////////////////////////////////////////////////////////////////
// Для работы интерфейса ролей.

&НаКлиенте
Процедура РолиПометкаПриИзменении(Элемент)
	
	Если Элементы.Роли.ТекущиеДанные <> Неопределено Тогда
		ОбработатьИнтерфейсРолей("ОбновитьСоставРолей");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поддержка дополнительных реквизитов.

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СменитьПароль(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВернутьПарольБезУстановки", Истина);
	ДополнительныеПараметры.Вставить("СтарыйПароль", ПользовательИБСтарыйПароль);
	
	ПользователиСлужебныйКлиент.ОткрытьФормуСменыПароля(Объект.Ссылка, Новый ОписаниеОповещения(
		"СменитьПарольПослеПолученияПароля", ЭтотОбъект), ДополнительныеПараметры);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для работы интерфейса ролей.

&НаКлиенте
Процедура ПоказатьТолькоВыбранныеРоли(Команда)
	
	ОбработатьИнтерфейсРолей("ТолькоВыбранныеРоли");
	ПользователиСлужебныйКлиент.РазвернутьПодсистемыРолей(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаРолейПоПодсистемам(Команда)
	
	ОбработатьИнтерфейсРолей("ГруппировкаПоПодсистемам");
	ПользователиСлужебныйКлиент.РазвернутьПодсистемыРолей(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРоли(Команда)
	
	ОбработатьИнтерфейсРолей("ОбновитьСоставРолей", "ВключитьВсе");
	
	ПользователиСлужебныйКлиент.РазвернутьПодсистемыРолей(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьРоли(Команда)
	
	ОбработатьИнтерфейсРолей("ОбновитьСоставРолей", "ИсключитьВсе");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИмяДляВхода(Форма, ПриИзмененииНаименования = Ложь)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Форма.ПользовательИБСуществует Тогда
		Возврат;
	КонецЕсли;
	
	КраткоеИмя = ПользователиСлужебныйКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(
		Форма.ТекущееПредставлениеОбъектаАвторизации);
	
	Если Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница = Элементы.ИмяБезОтметкиНезаполненного Тогда
		
		Если Не ЗначениеЗаполнено(Форма.ПользовательИБИмяЗначениеПрямогоИзменения)
		   И Форма.ПользовательИБИмя = КраткоеИмя Тогда
		
			Форма.ПользовательИБИмя = "";
		КонецЕсли;
	Иначе
		Если ПриИзмененииНаименования
		 Или Не ЗначениеЗаполнено(Форма.ПользовательИБИмя) Тогда
			
			Форма.ПользовательИБИмя = КраткоеИмя;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АутентификацияПриИзменении()
	
	УстановитьДоступностьСвойств();
	
	Если НЕ ПользовательИБАутентификацияOpenID
	   И НЕ ПользовательИБАутентификацияСтандартная Тогда
	
		ВходВПрограммуРазрешен = Ложь;
		
	ИначеЕсли Не ВходВПрограммуРазрешен Тогда
		ВходВПрограммуРазрешен = ВходВПрограммуРазрешенЗначениеПрямогоИзменения;
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры СменитьПароль.
&НаКлиенте
Процедура СменитьПарольПослеПолученияПароля(Результат, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательИБПароль       = Результат.НовыйПароль;
	ПользовательИБСтарыйПароль = Результат.СтарыйПароль;
	
	УстановитьНаличиеПароля(ЭтотОбъект, ЗначениеЗаполнено(ПользовательИБПароль));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНаличиеПароля(Форма, ПарольУстановлен)
	
	ПользователиСлужебныйКлиентСервер.УстановитьНаличиеПароля(Форма, ПарольУстановлен);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДействияВФорме()
	
	ДействияВФорме = Новый Структура;
	
	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("Роли", "");
	
	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("СвойстваПользователяИБ", "");
	
	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("СвойстваЭлемента", "Просмотр");
	
	Если УровеньДоступа.ИзменениеТекущего Или УровеньДоступа.УправлениеСписком Тогда
		ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
	КонецЕсли;
	
	Если УровеньДоступа.УправлениеСписком Тогда
		ДействияВФорме.СвойстваЭлемента = "Редактирование";
	КонецЕсли;
	
	Если УровеньДоступа.ПолныеПрава Тогда
		ДействияВФорме.Роли = "Редактирование";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
	   И НЕ ЗначениеЗаполнено(Объект.ОбъектАвторизации) Тогда
		
		ДействияВФорме.СвойстваЭлемента = "Редактирование";
	КонецЕсли;
	
	ПользователиСлужебный.ПриОпределенииДействийВФорме(Объект.Ссылка, ДействияВФорме);
	
	// Проверка имен действий в форме.
	Если СтрНайти(", Просмотр, Редактирование,", ", " + ДействияВФорме.Роли + ",") = 0 Тогда
		ДействияВФорме.Роли = "";
		
	ИначеЕсли ДействияВФорме.Роли = "Редактирование"
	        И ПользователиСлужебный.ЗапретРедактированияРолей() Тогда
		
		ДействияВФорме.Роли = "Просмотр";
	КонецЕсли;
	
	Если СтрНайти(", Просмотр, ПросмотрВсех, Редактирование, РедактированиеСвоих, РедактированиеВсех,",
	           ", " + ДействияВФорме.СвойстваПользователяИБ + ",") = 0 Тогда
		
		ДействияВФорме.СвойстваПользователяИБ = "";
		
	Иначе // Поддержка обратной совместимости.
		Если СтрНайти(ДействияВФорме.СвойстваПользователяИБ, "Просмотр") Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Просмотр";
			
		ИначеЕсли СтрНайти(ДействияВФорме.СвойстваПользователяИБ, "Редактирование") Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(", Просмотр, Редактирование,", ", " + ДействияВФорме.СвойстваЭлемента + ",") = 0 Тогда
		ДействияВФорме.СвойстваЭлемента = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеПользователяИБ()
	
	Если УровеньДоступа.УправлениеСписком
	   И ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
		
		ПользовательИБПолноеИмя = Объект.Наименование;
	КонецЕсли;
	
	Если УровеньДоступа.АдминистраторСистемы
	 Или УровеньДоступа.ПолныеПрава Тогда
		
		Результат = Пользователи.НовоеОписаниеПользователяИБ();
		Пользователи.СкопироватьСвойстваПользователяИБ(
			Результат,
			ЭтотОбъект,
			,
			"УникальныйИдентификатор,
			|Роли",
			"ПользовательИБ");
		
		Результат.Вставить("ВходВПрограммуРазрешен", ВходВПрограммуРазрешен);
		
	Иначе
		Результат = Новый Структура;
		
		Если УровеньДоступа.ИзменениеТекущего Тогда
			Результат.Вставить("Пароль", ПользовательИБПароль);
			Результат.Вставить("Язык",   ПользовательИБЯзык);
		КонецЕсли;
		
		Если УровеньДоступа.УправлениеСписком Тогда
			Результат.Вставить("ВходВПрограммуРазрешен",  ВходВПрограммуРазрешен);
			Результат.Вставить("ЗапрещеноИзменятьПароль", ПользовательИБЗапрещеноИзменятьПароль);
			Результат.Вставить("Язык",                    ПользовательИБЯзык);
			Результат.Вставить("ПолноеИмя",               ПользовательИБПолноеИмя);
		КонецЕсли;
		
		Если УровеньДоступа.НастройкиДляВхода Тогда
			Результат.Вставить("АутентификацияСтандартная", ПользовательИБАутентификацияСтандартная);
			Результат.Вставить("Пароль",                    ПользовательИБПароль);
			Результат.Вставить("Имя",                       ПользовательИБИмя);
			Результат.Вставить("АутентификацияOpenID",      ПользовательИБАутентификацияOpenID);
		КонецЕсли;
	КонецЕсли;
	
	Если УровеньДоступа.НастройкиДляВхода
	   И Не ПользователиСлужебный.ЗапретРедактированияРолей()
	   И Объект.УстановитьРолиНепосредственно Тогда
		
		ТекущиеРоли = ПользовательИБРоли.Выгрузить(, "Роль").ВыгрузитьКолонку("Роль");
		Результат.Вставить("Роли", ТекущиеРоли);
	КонецЕсли;
	
	Если УровеньДоступа.УправлениеСписком Тогда
		Результат.Вставить("ПоказыватьВСпискеВыбора", Ложь);
		Результат.Вставить("РежимЗапуска", "Авто");
	КонецЕсли;
	
	Если УровеньДоступа.ПолныеПрава Тогда
		Результат.Вставить("АутентификацияОС", Ложь);
		Результат.Вставить("ПользовательОС", "");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбъектАвторизацииПриИзмененииНаКлиентеНаСервере(Форма, Объект)
	
	Если Объект.ОбъектАвторизации = Неопределено Тогда
		Объект.ОбъектАвторизации = Форма.ТипОбъектовАвторизации;
	КонецЕсли;
	
	Если Форма.ТекущееПредставлениеОбъектаАвторизации <> Строка(Объект.ОбъектАвторизации) Тогда
		Форма.ТекущееПредставлениеОбъектаАвторизации = Строка(Объект.ОбъектАвторизации);
		ОбновитьИмяДляВхода(Форма, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображаемыйТипПользователя()
	
	Если Объект.ОбъектАвторизации <> Неопределено Тогда
		Элементы.ОбъектАвторизации.Заголовок = Метаданные.НайтиПоТипу(ТипЗнч(Объект.ОбъектАвторизации)).ПредставлениеОбъекта;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОЗаписиСПустымСпискомРолей(Ответ, ПараметрыЗаписи) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("СПустымСпискомРолей");
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поддержка дополнительных реквизитов.

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка пользователя ИБ

&НаСервере
Процедура ПрочитатьРолиПользователяИБ()
	
	СвойстваПользователяИБ = Неопределено;
	
	Пользователи.ПрочитатьПользователяИБ(
		Объект.ИдентификаторПользователяИБ, СвойстваПользователяИБ);
	
	ОбработатьИнтерфейсРолей("ЗаполнитьРоли", СвойстваПользователяИБ.Роли);
	
КонецПроцедуры

&НаСервере
Функция НачальноеОписаниеПользователяИБ()
	
	Если НачальноеОписаниеПользователяИБ <> Неопределено Тогда
		НачальноеОписаниеПользователяИБ.Роли = Новый Массив;
		Возврат НачальноеОписаниеПользователяИБ;
	КонецЕсли;
	
	ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
	ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
	ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
	ОписаниеПользователяИБ.Роли = Новый Массив;
	
	Возврат ОписаниеПользователяИБ;
	
КонецФункции

&НаСервере
Процедура ПрочитатьПользователяИБ(ПриКопированииЭлемента = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрочитанныеСвойства      = Неопределено;
	ОписаниеПользователяИБ   = НачальноеОписаниеПользователяИБ();
	ПользовательИБСуществует = Ложь;
	ПользовательИБОсновной   = Ложь;
	ВходВПрограммуРазрешен   = Ложь;
	ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Ложь;
	
	Если ПриКопированииЭлемента Тогда
		
		Если Пользователи.ПрочитатьПользователяИБ(
		         Параметры.ЗначениеКопирования.ИдентификаторПользователяИБ,
		         ПрочитанныеСвойства) Тогда
			
			// Сопоставление пользователя ИБ с пользователем в справочнике.
			Если Пользователи.ВходВПрограммуРазрешен(ПрочитанныеСвойства) Тогда
				ВходВПрограммуРазрешен = Истина;
				ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Истина;
			КонецЕсли;
			
			// Копирование свойств и ролей пользователяИБ.
			ЗаполнитьЗначенияСвойств(
				ОписаниеПользователяИБ,
				ПрочитанныеСвойства,
				"ЗапрещеноИзменятьПароль,
				|РежимЗапуска" + ?(Не Элементы.ПользовательИБЯзык.Видимость, "", ",
				|Язык") + ?(ПользователиСлужебный.ЗапретРедактированияРолей(), "", ",
				|Роли"));
		КонецЕсли;
		Объект.ИдентификаторПользователяИБ = Неопределено;
		УстановитьНаличиеПароля(ЭтотОбъект, Ложь);
	Иначе
		Если Пользователи.ПрочитатьПользователяИБ(
		       Объект.ИдентификаторПользователяИБ, ПрочитанныеСвойства) Тогда
		
			ПользовательИБСуществует = Истина;
			ПользовательИБОсновной = Истина;
			
		ИначеЕсли Параметры.Свойство("ИдентификаторПользователяИБ")
		        И ЗначениеЗаполнено(Параметры.ИдентификаторПользователяИБ) Тогда
			
			Объект.ИдентификаторПользователяИБ = Параметры.ИдентификаторПользователяИБ;
			
			Если Пользователи.ПрочитатьПользователяИБ(
			       Объект.ИдентификаторПользователяИБ, ПрочитанныеСвойства) Тогда
				
				ПользовательИБСуществует = Истина;
				Если Объект.Наименование <> ПрочитанныеСвойства.ПолноеИмя Тогда
					ПрочитанныеСвойства.ПолноеИмя = Объект.Наименование;
					Модифицированность = Истина;
				КонецЕсли;
				Если ПрочитанныеСвойства.АутентификацияОС Тогда
					ПрочитанныеСвойства.АутентификацияОС = Ложь;
					Модифицированность = Истина;
				КонецЕсли;
				Если ЗначениеЗаполнено(ПрочитанныеСвойства.ПользовательОС) Тогда
					ПрочитанныеСвойства.ПользовательОС = "";
					Модифицированность = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПользовательИБСуществует Тогда
			
			Если Не Элементы.ПользовательИБЯзык.Видимость Тогда
				ПрочитанныеСвойства.Язык = ОписаниеПользователяИБ.Язык;
			КонецЕсли;
			
			Если Пользователи.ВходВПрограммуРазрешен(ПрочитанныеСвойства) Тогда
				ВходВПрограммуРазрешен = Истина;
				ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Истина;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(
				ОписаниеПользователяИБ,
				ПрочитанныеСвойства,
				"Имя,
				|ПолноеИмя,
				|АутентификацияOpenID,
				|АутентификацияСтандартная,
				|ПоказыватьВСпискеВыбора,
				|ЗапрещеноИзменятьПароль,
				|АутентификацияОС,
				|ПользовательОС,
				|РежимЗапуска,
				|РежимЗапуска" + ?(Не Элементы.ПользовательИБЯзык.Видимость, "", ",
				|Язык") + ?(ПользователиСлужебный.ЗапретРедактированияРолей(), "", ",
				|Роли"));
		КонецЕсли;
		
		УстановитьНаличиеПароля(ЭтотОбъект, ПрочитанныеСвойства.ПарольУстановлен);
	КонецЕсли;
	
	Пользователи.СкопироватьСвойстваПользователяИБ(
		ЭтотОбъект,
		ОписаниеПользователяИБ,
		,
		"УникальныйИдентификатор,
		|Роли",
		"ПользовательИБ");
	
	Если ПользовательИБОсновной И Не ВходВПрограммуРазрешен Тогда
		ХранимыеСвойства = ПользователиСлужебный.ХранимыеСвойстваПользователяИБ(Объект.Ссылка);
		ПользовательИБАутентификацияOpenID      = ХранимыеСвойства.АутентификацияOpenID;
		ПользовательИБАутентификацияСтандартная = ХранимыеСвойства.АутентификацияСтандартная;
	КонецЕсли;
	
	ОбработатьИнтерфейсРолей("ЗаполнитьРоли", ОписаниеПользователяИБ.Роли);
	
	ПриЧтенииВходВПрограммуРазрешен = ВходВПрограммуРазрешен;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи = Неопределено)
	
	// Проверка соответствия свойства ПолноеИмя пользователяИБ и
	// реквизита Наименование внешнего пользователя. А также значений свойств по умолчанию.
	
	ПоказатьНесоответствие = Истина;
	ПоказатьКомандыУстраненияРазличий = Ложь;
	
	Если НЕ ПользовательИБСуществует Тогда
		ПоказатьНесоответствие = Ложь;
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПользовательИБПолноеИмя = Объект.Наименование;
		ПоказатьНесоответствие = Ложь;
		
	ИначеЕсли УровеньДоступа.УправлениеСписком Тогда
		
		УточнениеСвойств = Новый Массив;
		ЕстьРазличияУстранимыеБезАдминистратора = Ложь;
		
		Если ПользовательИБАутентификацияОС <> Ложь Тогда
			УточнениеСвойств.Добавить(НСтр("ru = 'Аутентификация ОС (включена)'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УточнениеСвойств) Тогда
			ПоказатьКомандыУстраненияРазличий =
				  УровеньДоступа.НастройкиДляВхода
				И ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
		КонецЕсли;
		
		Если ПользовательИБПолноеИмя <> Объект.Наименование Тогда
			ЕстьРазличияУстранимыеБезАдминистратора = Истина;
			
			УточнениеСвойств.Вставить(0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Полное имя ""%1""'"),
				ПользовательИБПолноеИмя));
		КонецЕсли;
		
		Если ПользовательИБПользовательОС <> "" Тогда
			УточнениеСвойств.Добавить(НСтр("ru = 'Пользователь ОС (указан)'"));
		КонецЕсли;
		
		Если ПользовательИБПоказыватьВСпискеВыбора Тогда
			ЕстьРазличияУстранимыеБезАдминистратора = Истина;
			УточнениеСвойств.Добавить(НСтр("ru = 'Показывать в списке выбора (включено)'"));
		КонецЕсли;
		
		Если ПользовательИБРежимЗапуска <> "Авто" Тогда
			ЕстьРазличияУстранимыеБезАдминистратора = Истина;
			УточнениеСвойств.Добавить(НСтр("ru = 'Режим запуска (не Авто)'"));
		КонецЕсли;
		
		Если УточнениеСвойств.Количество() > 0 Тогда
			СтрокаУточненияСвойств = "";
			ТекущаяСтрока = "";
			Для каждого УточнениеСвойства Из УточнениеСвойств Цикл
				Если СтрДлина(ТекущаяСтрока + УточнениеСвойства) > 90 Тогда
					СтрокаУточненияСвойств = СтрокаУточненияСвойств + СокрП(ТекущаяСтрока) + ", " + Символы.ПС;
					ТекущаяСтрока = "";
				КонецЕсли;
				ТекущаяСтрока = ТекущаяСтрока + ?(ЗначениеЗаполнено(ТекущаяСтрока), ", ", "") + УточнениеСвойства;
			КонецЦикла;
			Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
				СтрокаУточненияСвойств = СтрокаУточненияСвойств + ТекущаяСтрока;
			КонецЕсли;
			Если ПоказатьКомандыУстраненияРазличий
			 Или ЕстьРазличияУстранимыеБезАдминистратора
			   И ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
				
				Рекомендация = Символы.ПС
					+ НСтр("ru = 'Нажмите ""Записать"", чтобы устранить различия и не выводить это предупреждение.'");
			
			ИначеЕсли Не Пользователи.ЭтоПолноправныйПользователь() Тогда
				Рекомендация = Символы.ПС
					+ НСтр("ru = 'Обратитесь к администратору, чтобы устранить различия.'");
			Иначе
				Рекомендация = "";
			КонецЕсли;
			Элементы.СвойстваПояснениеНесоответствия.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Следующие свойства пользователя информационной базы отличаются от указанных в этой форме:
					           |%1.'"),
					СтрокаУточненияСвойств) + Рекомендация;
		Иначе
			ПоказатьНесоответствие = Ложь;
		КонецЕсли;
	Иначе
		ПоказатьНесоответствие = Ложь;
	КонецЕсли;
	
	Элементы.СвойстваОбработкаНесоответствия.Видимость = ПоказатьНесоответствие;
	Элементы.СвойстваПояснениеНесоответствия.ВертикальноеПоложение = ?(ЗначениеЗаполнено(Рекомендация),
		ВертикальноеПоложениеЭлемента.Верх, ВертикальноеПоложениеЭлемента.Центр);
	
	// Определение сопоставления несуществующего пользователя ИБ с пользователем в справочнике.
	ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ =
		НЕ ПользовательИБСуществует И ЗначениеЗаполнено(Объект.ИдентификаторПользователяИБ);
	
	Если ПараметрыЗаписи <> Неопределено
	   И ЕстьСопоставлениеСНесуществующимПользователемИБ
	   И НЕ ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ Тогда
		
		ПараметрыЗаписи.Вставить("ОчищеноСопоставлениеСНесуществующимПользователемИБ", Объект.Ссылка);
	КонецЕсли;
	ЕстьСопоставлениеСНесуществующимПользователемИБ = ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ;
	
	Если УровеньДоступа.УправлениеСписком Тогда
		Элементы.СопоставлениеОбработкаНесоответствия.Видимость = ЕстьСопоставлениеСНесуществующимПользователемИБ;
	Иначе
		// Сопоставление не может быть изменено.
		Элементы.СопоставлениеОбработкаНесоответствия.Видимость = Ложь;
	КонецЕсли;
	
	Если ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
		Рекомендация = Символы.ПС
			+ НСтр("ru = 'Нажмите ""Записать"", чтобы устранить проблему и не выводить это предупреждение.'");
		
	ИначеЕсли Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		Рекомендация = Символы.ПС
			+ НСтр("ru = 'Обратитесь к администратору, чтобы устранить различия.'");
	Иначе
		Рекомендация = "";
	КонецЕсли;
	
	Элементы.СопоставлениеПояснениеНесоответствия.Заголовок =
		НСтр("ru = 'Пользователь информационной базы не найден.'") + Рекомендация;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Начальное заполнение, проверка заполнения, доступность свойств.

&НаСервере
Процедура УстановитьДоступностьСвойств()
	
	// Настройка возможности изменения.
	Элементы.ОбъектАвторизации.ТолькоПросмотр
		=   ДействияВФорме.СвойстваЭлемента <> "Редактирование"
		ИЛИ ОбъектАвторизацииЗаданПриОткрытии
		ИЛИ   ЗначениеЗаполнено(Объект.Ссылка)
		    И ЗначениеЗаполнено(Объект.ОбъектАвторизации);
	
	Элементы.Недействителен.ТолькоПросмотр =
		Не (ДействияВФорме.СвойстваЭлемента = "Редактирование" И УровеньДоступа.УправлениеСписком);
	
	Элементы.ОсновныеСвойства.ТолькоПросмотр =
		Не (  ДействияВФорме.СвойстваПользователяИБ = "Редактирование"
		    И (УровеньДоступа.УправлениеСписком Или УровеньДоступа.ИзменениеТекущего));
	
	Элементы.ВходВПрограммуРазрешен.ТолькоПросмотр =
		Не (  Элементы.ОсновныеСвойства.ТолькоПросмотр = Ложь
		    И (    УровеньДоступа.ИзменениеРазрешенияНаВход
		       Или УровеньДоступа.ОтключениеРазрешенияНаВход И ПриЧтенииВходВПрограммуРазрешен));
	
	Элементы.ПользовательИБИмя1.ТолькоПросмотр                      = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБИмя2.ТолькоПросмотр                      = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБАутентификацияСтандартная.ТолькоПросмотр = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБАутентификацияOpenID.ТолькоПросмотр      = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.УстановитьРолиНепосредственно.ТолькоПросмотр           = Не УровеньДоступа.НастройкиДляВхода;
	
	Элементы.ПользовательИБЗапрещеноИзменятьПароль.ТолькоПросмотр = Не УровеньДоступа.УправлениеСписком;
	
	Элементы.СменитьПароль.Доступность =
		(    УровеньДоступа.НастройкиДляВхода
		 Или УровеньДоступа.ИзменениеТекущего
		   И Не ПользовательИБЗапрещеноИзменятьПароль);
	
	ОбработатьИнтерфейсРолей("УстановитьТолькоПросмотрРолей",
		    ЗапретРедактированияРолей
		Или ДействияВФорме.Роли <> "Редактирование"
		Или Не Объект.УстановитьРолиНепосредственно
		Или Не УровеньДоступа.НастройкиДляВхода);
	
	Элементы.Комментарий.ТолькоПросмотр =
		Не (ДействияВФорме.СвойстваЭлемента = "Редактирование" И УровеньДоступа.УправлениеСписком);
	
	// Настройка необходимости заполнения.
	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект, Ложь) Тогда
		НоваяСтраница = Элементы.ИмяСОтметкойНезаполненного;
	Иначе
		НоваяСтраница = Элементы.ИмяБезОтметкиНезаполненного;
	КонецЕсли;
	
	Если Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница <> НоваяСтраница Тогда
		Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;
	ОбновитьИмяДляВхода(ЭтотОбъект);
	
	// Настройка доступности связанных элементов.
	Элементы.ВходВПрограммуРазрешен.Доступность         = Не Объект.Недействителен;
	Элементы.ОсновныеСвойства.Доступность               = Не Объект.Недействителен;
	Элементы.РедактированиеИлиПросмотрРолей.Доступность = Не Объект.Недействителен;
	Элементы.ГруппаИзменитьОграничение.Доступность      = Не Объект.Недействителен
	                                                    И Не Элементы.Недействителен.ТолькоПросмотр;
	
	Элементы.ПараметрыАутентификации1СПредприятия.Доступность  = ПользовательИБАутентификацияСтандартная;
	
	ПользователиСлужебныйКлиентСервер.ОбновитьОграничениеСрокаДействия(ЭтотОбъект);
	
КонецПроцедуры

// Продолжение процедуры ИзменитьОграничениеНаВходВПрограмму.
&НаКлиенте
Процедура ИзменитьОграничениеНаВходВПрограммуЗавершение(Результат, Контекст) Экспорт
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяЗаписьПользователяИБ(Форма, УчитыватьСтандартноеИмя = Истина)
	
	Если Форма.ДействияВФорме.СвойстваПользователяИБ <> "Редактирование" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Шаблон = Форма.НачальноеОписаниеПользователяИБ;
	
	ТекущееИмя = "";
	Если Не УчитыватьСтандартноеИмя Тогда
		КраткоеИмя = ПользователиСлужебныйКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(
			Форма.ТекущееПредставлениеОбъектаАвторизации);
		
		Если Форма.ПользовательИБИмя = КраткоеИмя Тогда
			ТекущееИмя = КраткоеИмя;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ПользовательИБСуществует
	 ИЛИ Форма.ВходВПрограммуРазрешен
	 ИЛИ Форма.ПользовательИБИмя                       <> ТекущееИмя
	 ИЛИ Форма.ПользовательИБАутентификацияСтандартная <> Шаблон.АутентификацияСтандартная
	 ИЛИ Форма.ПользовательИБЗапрещеноИзменятьПароль   <> Шаблон.ЗапрещеноИзменятьПароль
	 ИЛИ Форма.ПользовательИБПароль                    <> Неопределено
	 ИЛИ Форма.ПользовательИБАутентификацияOpenID      <> Шаблон.АутентификацияOpenID
	 ИЛИ Форма.ПользовательИБЯзык                      <> Шаблон.Язык
	 ИЛИ Форма.ПользовательИБРоли.Количество()         <> 0 Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Для работы интерфейса ролей.

&НаСервере
Процедура ОбработатьИнтерфейсРолей(Действие, ОсновнойПараметр = Неопределено)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ОсновнойПараметр", ОсновнойПараметр);
	ПараметрыДействия.Вставить("Форма",            ЭтотОбъект);
	ПараметрыДействия.Вставить("КоллекцияРолей",   ПользовательИБРоли);
	ПараметрыДействия.Вставить("НазначениеРолей",  "ДляВнешнихПользователей");
	
	ПользователиСлужебный.ОбработатьИнтерфейсРолей(Действие, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти
