
// {[+](фрагмент ДОБАВЛЕН), milanse 07.06.2020 0:06:10
&НаКлиенте
Перем КомпонентаБуфераОбмена;
// }milanse 07.06.2020 0:06:10

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Свойство_МеткаЗадачи = Справочники.узКонстанты.ПолучитьЗначениеКонстанты(
		"Свойство_МеткаЗадачи", 
		Тип("ПланВидовХарактеристикСсылка.узДопРеквизитыЗадачМножественные"), , Истина, Истина);		
	
	//+ УрянскийД 2020-06-22 (начало)
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	//- УрянскийД 2020-06-22 (окончание)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов	
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);	
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства	
	
	// СтандартныеПодсистемы.Взаимодействие
	// Учесть возможность создания из взаимодействия.
	Взаимодействия.ПодготовитьОповещения(ЭтотОбъект,Параметры);
	// Конец СтандартныеПодсистемы.Взаимодействие
	
	Если Объект.Ссылка.Пустая() Тогда
		ЗаполнитьРеквизитыПоУмолчанию();
	КонецЕсли;
	
	КомментарииПометка = Ложь;
	Для каждого СтрокаКомментарии из Объект.Комментарии цикл
		Если СтрокаКомментарии.Выполнено Тогда
			Продолжить;
		Конецесли;
		КомментарииПометка = Истина;
	Конеццикла;
	Если Объект.ОформлениеТекста = ПредопределенноеЗначение("Перечисление.узОформлениеТекста.Markdown") Тогда
		Если ЗначениеЗаполнено(Объект.ТекстСодержания) Тогда
			Элементы.ГруппаСтраницыОформлениеСодержания.ТекущаяСтраница = Элементы.ГруппаСтраницаПросмотр;
		Иначе
			Элементы.ГруппаСтраницыОформлениеСодержания.ТекущаяСтраница = Элементы.ГруппаСтраницаТекст;
		Конецесли;
	Конецесли;	
	
	ЗаполнитьРеквизитТекущийСпринт();
	
	ЗаполнитьРеквизитИтогоЧасыФакт();
	
	ДобавитьСсылкиНаСвязанныеЗадачиНаСервере();
	
	ВыполнитьЛокализацию();
	// [+] ICUX-1347 Иванов А.Б. 07.06.22 ЗагрузитьИзмененияАксиомы
	//Элементы.КомандаПоказатьСкрытьКомментарии.Пометка = КомментарииПометка;	
	// [-] ICUX-1347 Иванов А.Б. 07.06.22 ЗагрузитьИзмененияАксиомы
	УстановитьВидимостьДоступность();
	УстановитьПараметрыИзмененныеОбъекты();
	//+ #104 Дзеса Ігор (capitoshko) 08.10.2018
	УстановитьПараметрОтбораПоУчетуЗадач();
	//- #104 Дзеса Ігор (capitoshko) 08.10.2018 
		
	ДобавитьМеткиНаФорму();
	ОбновитьОтображениеМетокЗадачи();
	
	//+ #287 Пихоцкий Юрий (pihy86) 01.06.2021
	ТабличныйДокумент = Объект.Ссылка.ТабличноеОписание.Получить();
	//- #287 Пихоцкий Юрий (pihy86) 01.06.2021
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьЗаголовокФормы();
	
	ВыполнитьДействиеДляСтраницы();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитИтогоЧасыФакт()
	ИтогоЧасыФакт = 0;
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	Конецесли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(узФактПоЗадачамОбороты.ФактОборот) КАК ФактОборот
	|ИЗ
	|	РегистрНакопления.узФактПоЗадачам.Обороты(, , , Задача = &Задача) КАК узФактПоЗадачамОбороты";
	
	Запрос.УстановитьПараметр("Задача",Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Конецесли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ИтогоЧасыФакт = Выборка.ФактОборот;  
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРеквизитТекущийСпринт()
	ТекущийСпринт = Неопределено;
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	Конецесли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	узСпринтыЗадачСрезПоследних.Спринт
	|ИЗ
	|	РегистрСведений.узСпринтыЗадач.СрезПоследних(, Задача = &Задача) КАК узСпринтыЗадачСрезПоследних";
	
	
	Запрос.УстановитьПараметр("Задача",Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Конецесли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	ТекущийСпринт = Выборка.Спринт;
	
КонецПроцедуры 

&НаСервере
Процедура ВыполнитьЛокализацию()
	МассивКодовСообщений = Новый Массив();
	МассивКодовСообщений.Добавить(18); //Добавить вопрос
	МассивКодовСообщений.Добавить(19); //Изменить версию
	МассивКодовСообщений.Добавить(20); //Только список измененных объектов
	МассивКодовСообщений.Добавить(21); //Полное имя метаданных
	МассивКодовСообщений.Добавить(37); //Содержание
	МассивКодовСообщений.Добавить(38); //Вопросы и ответы
	МассивКодовСообщений.Добавить(39); //История
	МассивКодовСообщений.Добавить(40); //История статусов
	МассивКодовСообщений.Добавить(41); //Измененные объекты
	МассивКодовСообщений.Добавить(42); //Список измененных объектов
	МассивКодовСообщений.Добавить(43); //Вы следите за задачей
	МассивКодовСообщений.Добавить(44); //Цвет задачи
	
	РегистрыСведений.узСловарь.ВыполнитьЛокализацию(Элементы,МассивКодовСообщений);
	
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	Если Объект.ОформлениеТекста = ПредопределенноеЗначение("Перечисление.узОформлениеТекста.ФорматированныйТекст") Тогда		
		ЗагрузитьИзСодержанияВФорматированныйТекст(ТекущийОбъект);
	Конецесли;
	
	ЦветЗадачиНаФорме = ТекущийОбъект.ЦветЗадачи.Получить();
	
	//+ #201 Иванов А.Б. 2020-05-23 Изменения от Дениса Урянского @d-hurricane
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	//- #201 Иванов А.Б. 2020-05-23 Изменения от Дениса Урянского @d-hurricane
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзСодержанияВФорматированныйТекст(ТекущийОбъект)
	СохраненноеСодержание = ТекущийОбъект.Содержание.Получить();
	
	ФорматированныйТекст = СохраненноеСодержание;
КонецПроцедуры 

&НаСервере
Функция ПроставитьНавигационныеСсылкиДляЗадачУказанныхВСодержании(ТекстHTML)
	ЗаменитьТекстHTML = Ложь;
	пНовыйТекстHTML = Неопределено;
	
	РезультатФункции = Новый Структура();	
	РезультатФункции.Вставить("ЗаменитьТекстHTML",ЗаменитьТекстHTML);
	РезультатФункции.Вставить("НовыйТекстHTML",пНовыйТекстHTML);
	
	ЧислоУказанныхЗадач = СтрЧислоВхождений(ТекстHTML, "#");
	Если ЧислоУказанныхЗадач = 0 Тогда
		Возврат РезультатФункции;
	Конецесли;
	
	ТЗДляЗамены = Новый ТаблицаЗначений();
	ТЗДляЗамены.Колонки.Добавить("ПодстрокаПоиска");
	ТЗДляЗамены.Колонки.Добавить("ПодстрокаЗамены");
	
	пНовыйТекстHTML = ТекстHTML;
	Для НомерВхождения = 1 По ЧислоУказанныхЗадач Цикл
		
		ПозРешетка = СтрНайти(пНовыйТекстHTML, "#",,,НомерВхождения);
		ТекстНомерЗадачи = "#";
		НомерЗадачи = "";
		
		НомерСимвола = ПозРешетка + 1;
		Символ = Сред(пНовыйТекстHTML,НомерСимвола,1);
		Пока 48<= КодСимвола(Символ)  
			И  КодСимвола(Символ) <= 57 Цикл
			
			НомерЗадачи = НомерЗадачи + Символ;
			НомерСимвола = НомерСимвола + 1;
			Символ = Сред(пНовыйТекстHTML,НомерСимвола,1);
		Конеццикла;
		ТекстНомерЗадачи = "#"+НомерЗадачи; 	
		НомерЗадачи = Число(НомерЗадачи);
		
		СсылкаНаЗадачу = Справочники.узЗадачи.НайтиПоКоду(НомерЗадачи);
		Если НЕ ЗначениеЗаполнено(СсылкаНаЗадачу) Тогда
			Продолжить;
		Конецесли;
		ЗаменитьТекстHTML = Истина;
		
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаЗадачу);
		
		ТекстСсылка = "<a href="+НавигационнаяСсылка+" style='text-decoration: underline'>"+ТекстНомерЗадачи+"</a>";
		
		СтрокаТЗДляЗамены = ТЗДляЗамены.Добавить();
		СтрокаТЗДляЗамены.ПодстрокаПоиска = ТекстНомерЗадачи;
		СтрокаТЗДляЗамены.ПодстрокаЗамены = ТекстСсылка;
	КонецЦикла;
	
	Для каждого СтрокаТЗДляЗамены из ТЗДляЗамены цикл
		пНовыйТекстHTML = СтрЗаменить(пНовыйТекстHTML, СтрокаТЗДляЗамены.ПодстрокаПоиска, СтрокаТЗДляЗамены.ПодстрокаЗамены);			
	Конеццикла;
	
	РезультатФункции.Вставить("ЗаменитьТекстHTML",ЗаменитьТекстHTML);
	РезультатФункции.Вставить("НовыйТекстHTML",пНовыйТекстHTML);
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.Взаимодействие
	ВзаимодействияКлиент.КонтактПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи, "узЗадачи");
	// Конец СтандартныеПодсистемы.Взаимодействие	
	
	Оповестить("СправочникЗадачаЗаписана");
	
	ОбновитьЗаголовокФормы();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьВидимостьДоступность();
	
	ДобавитьСсылкиНаСвязанныеЗадачиНаСервере();
	
	//+ #201 Иванов А.Б. 2020-05-23 Изменения от Дениса Урянского @d-hurricane
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	//- #201 Иванов А.Б. 2020-05-23 Изменения от Дениса Урянского @d-hurricane
	
КонецПроцедуры
 
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
	
	Если Объект.ОформлениеТекста = ПредопределенноеЗначение("Перечисление.узОформлениеТекста.ФорматированныйТекст") Тогда
		ТекущийОбъект.Содержание = Новый ХранилищеЗначения(ФорматированныйТекст, Новый СжатиеДанных(9));
		
		пТекстСодержания = ПолучитьСодержаниеТекстИзФорматированногоТекста();
		ТекущийОбъект.ТекстСодержания = пТекстСодержания;
			
	Конецесли;
	
	ТекущийОбъект.ЦветЗадачи = Новый ХранилищеЗначения(ЦветЗадачиНаФорме);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства	
	
	//+ #287 Пихоцкий Юрий (pihy86) 01.06.2021
	ТекущийОбъект.ТабличноеОписание  = Новый ХранилищеЗначения(ТабличныйДокумент);
	//- #287 Пихоцкий Юрий (pihy86) 01.06.2021
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ТребоватьЗаполнитьРодителя
		И НЕ ЗначениеЗаполнено(Объект.Родитель) Тогда
		
		пТекстСообщения = узОбщийМодульСервер.ПолучитьТекстСообщения(
			"Ошибка! необходимо указать родителя для задачи", 6);
		
		Сообщение = Новый СообщениеПользователю;		
		Сообщение.Текст = пТекстСообщения;
		Сообщение.Поле = "Объект.Родитель"; //имя реквизита 
		Сообщение.УстановитьДанные(Объект.Родитель); //Ссылка на объект ИБ
		Сообщение.Сообщить();
		Отказ = Истина;
	Конецесли;
	
	// + #295 Попов 2022-09-07 @Badya67
	// Добавлена провека заполнения реквизита формы КонсольКода_АдресМакета
	// Если пустой, значит вкладка Код не открывалась и консоль кода не подгружена
	//Если Объект.ПоказыватьКод Тогда
	Если Объект.ПоказыватьКод И ЗначениеЗаполнено(КонсольКода_АдресМакета) Тогда
	// - #295 Попов 2022-09-07 @Badya67
		Объект.ТекстСодержанияКод = Элементы.КонсольКода_ПолеHTML.Документ.defaultView.getText();
	КонецЕсли;
	
	РезультатПроверкиWIPЛимит = ПроверитьWIPЛимитНаСервере();
	Если РезультатПроверкиWIPЛимит.ПревышенWIPЛимит Тогда
		Сообщить(РезультатПроверкиWIPЛимит.ТекстОшибки);
		Отказ = Истина;
	Конецесли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьWIPЛимитНаСервере() 
	пОбъект = РеквизитФормыВЗначение("Объект"); 
	Возврат пОбъект.ПроверитьWIPЛимит();
КонецФункции 

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "узИсторияХранилища_ЗаписанЭлемент" Тогда
		Если ТолькоСписокИзмененныхОбъектов Тогда
			Элементы.ИзмененныеОбъектыСписок.Обновить();
		Иначе
			Элементы.ИзмененныеОбъекты.Обновить();
		Конецесли;
	Конецесли;
	Если ИмяСобытия = "КомандаСледитьЗаЗадачей"
		ИЛИ ИмяСобытия = "КомандаНеСледитьЗаЗадачей" Тогда
		УстановитьВидимостьДоступность();
	Конецесли;
	
	Если ИмяСобытия = "СправочникСпринтЗаписан" Тогда
		ЗаполнитьРеквизитТекущийСпринт();
	Конецесли;
	
	Если ИмяСобытия = "узВводФактаПоЗадачеЗаписан" Тогда
		ЗаполнитьРеквизитИтогоЧасыФакт();
	Конецесли;
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
	    ОбновитьЭлементыДополнительныхРеквизитов();
	    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПоказатьПодтверждениеЗакрытияФормыСФайлами(ЭтотОбъект, Отказ, ЗавершениеРаботы, Объект.Ссылка);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	КонсольКода_ЗакрытьКонсоль();
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
    УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьДоступность()	
	
	Элементы.Родитель.АвтоОтметкаНезаполненного = ТребоватьЗаполнитьРодителя;
	Элементы.Родитель.АвтоВыборНезаполненного = ТребоватьЗаполнитьРодителя;	
	Элементы.ГруппаСтраницаИзмененныеОбъектыДетали.Видимость = Ложь;
	Элементы.ГруппаСтраницаСписокИзмененныхОбъектов.Видимость = Ложь;
	Элементы.ГруппаКомментарии.Видимость = Ложь;
	Элементы.КомментарииДобавить.Видимость = Ложь;
	Элементы.КомментарииВывестиСписок.Видимость = Ложь;
	Элементы.КомментарииПереместитьВверх.Видимость = Ложь;
	Элементы.КомментарииПереместитьВниз.Видимость = Ложь; 
	//+ #104 Дзеса Ігор (capitoshko) 09.10.2018
	//Элементы.ЧасыФакт.ТолькоПросмотр = Истина;
	//- #104 Дзеса Ігор (capitoshko) 09.10.2018 
	Элементы.ГруппаСтраницаФорматированныйТекст.Видимость = Ложь;
	Элементы.ГруппаСтраницаПросмотр.Видимость = Ложь;
	Элементы.ГруппаСтраницаТекст.Видимость = Ложь;
	Элементы.ГруппаСтраницаКод.Видимость = Ложь;
	Элементы.ГруппаКоманднаяПанельMarkdown.Видимость = Ложь;
	Элементы.ГруппаСтраницаНастройкиОсновнаяЗадача.Видимость = Ложь;
	//+ #287 Пихоцкий Юрий (pihy86) 01.06.2021
	Элементы.ГруппаСтраницаТаблица.Видимость = Ложь;
	//- #287 Пихоцкий Юрий (pihy86) 01.06.2021
	// +SZ #277 16.01.2021
	Элементы.Содержание.ТолькоПросмотр = Истина;
	// -SZ #277 16.01.2021  
	Элементы.ПроектЗадачи.Видимость = Ложь;  
	Элементы.ОсновнаяЗадачаПроект.Видимость = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ОсновнаяЗадача) Тогда  
		Элементы.ОсновнаяЗадачаПроект.Видимость = Истина;
	Иначе
		Элементы.ПроектЗадачи.Видимость = Истина;
	КонецЕсли;
	
	// [+] #285 Павлюков С.Ю. 2024-04-14
	ОбновитьДоступныйСписокСменыСтатуса();
	// [-] #285 Павлюков С.Ю. 2024-04-14
	
	Если Объект.ОформлениеТекста = ПредопределенноеЗначение("Перечисление.узОформлениеТекста.ФорматированныйТекст") Тогда
		Элементы.ГруппаСтраницаФорматированныйТекст.Видимость = Истина;
	ИначеЕсли Объект.ОформлениеТекста = ПредопределенноеЗначение("Перечисление.узОформлениеТекста.Markdown") Тогда
		Элементы.ГруппаКоманднаяПанельMarkdown.Видимость = Истина;
		Элементы.ГруппаСтраницаПросмотр.Видимость = Истина;
		Элементы.ГруппаСтраницаТекст.Видимость = Истина;
	Иначе
		Элементы.ГруппаСтраницаТекст.Видимость = Истина;
	Конецесли;
	
	Если Объект.ПоказыватьКод Тогда
		Элементы.ГруппаСтраницаКод.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.ПоказыватьТаблицу Тогда
		Элементы.ГруппаСтраницаТаблица.Видимость = Истина;
	КонецЕсли;	
	
	Если ТолькоСписокИзмененныхОбъектов Тогда
		Элементы.ГруппаСтраницаСписокИзмененныхОбъектов.Видимость = Истина;	
	Иначе
	    Элементы.ГруппаСтраницаИзмененныеОбъектыДетали.Видимость = Истина;
	Конецесли;
	Элементы.ГруппаКомментарии.Видимость = Истина;	
	Элементы.КомментарииДобавить.Видимость = Истина;
	Элементы.КомментарииВывестиСписок.Видимость = Истина;		
	Элементы.КомментарииПереместитьВверх.Видимость = Истина;
	Элементы.КомментарииПереместитьВниз.Видимость = Истина;		
	
	Если Объект.ЭтоОсновнаяЗадача Тогда
		Элементы.ГруппаСтраницаНастройкиОсновнаяЗадача.Видимость = Истина;
	Конецесли;
	
	Элементы.ДекорацияИнформацияОСлежениеЗаЗадачей.Видимость = Ложь;
	пЕстьЛиСлежение = РегистрыСведений.узНаблюдателиЗаЗадачами.ЕстьЛиСлежениеЗаЗадачейУТекущегоПользователя(Объект.Ссылка);
	Если пЕстьЛиСлежение Тогда
		Элементы.ДекорацияИнформацияОСлежениеЗаЗадачей.Видимость = Истина;
	Конецесли;
	
	// +SZ #277 16.01.2021
	Если Объект.Ссылка.Пустая() Тогда
		
		Элементы.Содержание.ТолькоПросмотр = Ложь;
		
	Иначе
		
		пТолькоПросмотрДляСодержанияЗадач = Справочники.узКонстанты.ПолучитьЗначениеКонстанты(
			"ТолькоПросмотрДляСодержанияЗадач", Тип("Булево"),,, Ложь);
		
		Если пТолькоПросмотрДляСодержанияЗадач = Неопределено Тогда
			Элементы.Содержание.ТолькоПросмотр = Ложь;
		Иначе
			Элементы.Содержание.ТолькоПросмотр = пТолькоПросмотрДляСодержанияЗадач;
		КонецЕсли;
		
	КонецЕсли;
	// -SZ #277 16.01.2021
	
	ВТДопПараметры = Новый Структура();
	//+ #104 Дзеса Ігор (capitoshko) 08.10.2018
	//ВТДопПараметры.Вставить("ФактическиеЧасы_Количество",Объект.ФактическиеЧасы.Количество());		
	//ВидимостьДоступность = ПолучитьВидимостьДоступностьЭлементов(ВТДопПараметры);
	
	//Элементы.ЧасыФакт.ТолькоПросмотр = ВидимостьДоступность.ЧасыФакт_ТолькоПросмотр;
	//- #104 Дзеса Ігор (capitoshko) 08.10.2018 
		
	ОбновитьЗаголовокПоказатьСкрытьКомментарии(); 
	
	ОбновитьВидимостьКомандаМетки();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьКомандаМетки()

	Элементы.КомандаМетки.Видимость = Ложь;   
	
	МеткиЗадач = ПолучитьВыбранныеМеткиЗадачи();
	
	Если МеткиЗадач.Количество() = 0 Тогда
		
		Элементы.КомандаМетки.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьВидимостьДоступностьЭлементов(ДопПараметры) 
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("ЧасыФакт_ТолькоПросмотр",ДопПараметры.ФактическиеЧасы_Количество > 0);
	
	Возврат РезультатФункции;
КонецФункции 

&НаКлиенте
Процедура УстановитьВидимостьДоступностьНаКлиенте()
	//ВТДопПараметры = Новый Структура();
	//ВТДопПараметры.Вставить("ФактическиеЧасы_Количество",Объект.ФактическиеЧасы.Количество());
	//ВидимостьДоступность = ПолучитьВидимостьДоступностьЭлементов(ВТДопПараметры);
	//
	//Элементы.ЧасыФакт.ТолькоПросмотр = ВидимостьДоступность.ЧасыФакт_ТолькоПросмотр;
КонецПроцедуры 

&НаСервере
Процедура ОбновитьЗаголовокПоказатьСкрытьКомментарии()
	
	пТекстЗаголовок = узОбщийМодульСервер.ПолучитьТекстСообщения("Комментарии / Чеклист(%1)", 4);
	пТекстЗаголовок = СтрШаблон(пТекстЗаголовок,Объект.Комментарии.Количество());
	
	Элементы.ГруппаСтраницаКомментарии.Заголовок = пТекстЗаголовок;
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьЗаголовокПоказатьСкрытьКомментарииНаКлиенте()
	пТекстЗаголовок = узОбщийМодульСервер.ПолучитьТекстСообщения("Комментарии / Чеклист(%1)", 4);
	пТекстЗаголовок = СтрШаблон(пТекстЗаголовок,Объект.Комментарии.Количество());
	
	Элементы.ГруппаСтраницаКомментарии.Заголовок = пТекстЗаголовок;
КонецПроцедуры 

&НаСервере
Функция ПолучитьСодержаниеТекстИзФорматированногоТекста() 
	ТекстHTML = "";
	Вложения = Новый Структура;
	ФорматированныйТекст.ПолучитьHTML(ТекстHTML, Вложения);
	
	пТекстСодержания = СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(ТекстHTML);
	Если НЕ ЗначениеЗаполнено(пТекстСодержания) Тогда
		пТекстСодержания = Объект.ТекстСодержания;
	Конецесли;
	Возврат пТекстСодержания;
КонецФункции 

&НаСервере
Процедура УстановитьПараметрыИзмененныеОбъекты()
	ИзмененныеОбъекты.Параметры.УстановитьЗначениеПараметра("Задача",Объект.Ссылка);
	ИзмененныеОбъекты.Параметры.УстановитьЗначениеПараметра("ЭтоНовый",Объект.Ссылка.Пустая());
	ИзмененныеОбъекты.Параметры.УстановитьЗначениеПараметра("ИспользоватьОтборПоКонфигурации",ЗначениеЗаполнено(КонфигурацияОтбор));
	ИзмененныеОбъекты.Параметры.УстановитьЗначениеПараметра("КонфигурацияОтбор",КонфигурацияОтбор);
	
	ИзмененныеОбъектыСписок.Параметры.УстановитьЗначениеПараметра("Задача",Объект.Ссылка);
	ИзмененныеОбъектыСписок.Параметры.УстановитьЗначениеПараметра("ЭтоНовый",Объект.Ссылка.Пустая());
	ИзмененныеОбъектыСписок.Параметры.УстановитьЗначениеПараметра("ИспользоватьОтборПоКонфигурации",ЗначениеЗаполнено(КонфигурацияОтбор));
	ИзмененныеОбъектыСписок.Параметры.УстановитьЗначениеПараметра("КонфигурацияОтбор",КонфигурацияОтбор);	
КонецПроцедуры 

//+ #104 Дзеса Ігор (capitoshko) 08.10.2018
Процедура УстановитьПараметрОтбораПоУчетуЗадач()
	
	ОтборУчетаФакта = ФактическиеЧасы.Отбор;
	ЭлементОтбора = ОтборУчетаФакта.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задача");
	ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	
КонецПроцедуры
//- #104 Дзеса Ігор (capitoshko) 08.10.2018 

// {[+](фрагмент ДОБАВЛЕН), milanse 07.06.2020 0:06:35
&НаКлиенте
Процедура ВставитьКартинку(Команда)
	
	узРаботаСБуферомОбменаКлиент.НачатьПолучениеВерсииКомпоненты(Новый ОписаниеОповещения("ВставитьКартинкуПродолжение",ЭтотОбъект),КомпонентаБуфераОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуПродолжение(Версия,ДополнительныеПараметры) Экспорт
	
	узРаботаСБуферомОбменаКлиент.ВставитьКартинкуПродолжение(ЭтотОбъект, 
		Версия, ДополнительныеПараметры, КомпонентаБуфераОбмена);
		
КонецПроцедуры

&НаСервере
Процедура ВставитьКартинкуНаСервере(Знач ВыделениеНачало, Знач Картинка)
	
	Перем ТекстСсылки;
	
	ТекстСсылки = ФорматированныйТекст.Вставить(ВыделениеНачало,Картинка,Тип("КартинкаФорматированногоДокумента"));
	
КонецПроцедуры
// }milanse 07.06.2020 0:06:35

// {[+](фрагмент ДОБАВЛЕН), milanse 20.06.2020
&НаКлиенте
Процедура ОформитьТекстMD(СимволыДляДобавления)
	
	Перем чКонецКолонки, чКонецСтроки, чНачалоКолонки, чНачалоСтроки;
	
	чНачалоСтроки = 0;
	чНачалоКолонки = 0;
	чКонецСтроки = 0;
	чКонецКолонки = 0;
	
	Элементы.ТекстСодержания.ПолучитьГраницыВыделения(чНачалоСтроки,чНачалоКолонки,чКонецСтроки,чКонецКолонки);
	Элементы.ТекстСодержания.ВыделенныйТекст = СимволыДляДобавления+Элементы.ТекстСодержания.ВыделенныйТекст+СимволыДляДобавления;
	Элементы.ТекстСодержания.ПолучитьГраницыВыделения(чНачалоСтроки,чНачалоКолонки,чКонецСтроки,чКонецКолонки);
	ОбновитьОтображениеДанных(Элементы.ТекстСодержания);
	Элементы.ТекстСодержания.УстановитьГраницыВыделения(чКонецСтроки,чКонецКолонки,чКонецСтроки,чКонецКолонки);
	ОбновитьОтображениеДанных(Элементы.ТекстСодержания);

КонецПроцедуры // - #216 Иванов А.Б. 2020-06-27 @milanse 

// + #216 Иванов А.Б. 2020-06-27 @milanse 
&НаКлиенте
Процедура ДобавитьСимволыВНачалоСтрокиMD(СимволыДляДобавления)
	
	Перем чКонецКолонки, чКонецСтроки, чНачалоКолонки, чНачалоСтроки;
	
	чНачалоСтроки = 0;
	чНачалоКолонки = 0;
	чКонецСтроки = 0;
	чКонецКолонки = 0;
	
	Элементы.ТекстСодержания.ПолучитьГраницыВыделения(чНачалоСтроки,чНачалоКолонки,чКонецСтроки,чКонецКолонки);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Элементы.ТекстСодержания.ТекстРедактирования);
	Если ТекстовыйДокумент.КоличествоСтрок() = 0 Тогда
		ТекстовыйДокумент.ДобавитьСтроку(СимволыДляДобавления);
		чПозицияКонцаКолонки = СтрДлина(СимволыДляДобавления)+1;
	Иначе
		Для НомерСтроки	= чНачалоСтроки По чКонецСтроки Цикл
			ИсходнаяСтрока	= ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);	
			ТекстовыйДокумент.ЗаменитьСтроку(НомерСтроки,СимволыДляДобавления + ИсходнаяСтрока);
		КонецЦикла;
		чПозицияКонцаКолонки = СтрДлина(ТекстовыйДокумент.ПолучитьСтроку(чКонецСтроки))+1;
	КонецЕсли;
	Объект.ТекстСодержания = ТекстовыйДокумент.ПолучитьТекст(); 
	ОбновитьОтображениеДанных(Элементы.ТекстСодержания);
	Элементы.ТекстСодержания.УстановитьГраницыВыделения(чКонецСтроки,чПозицияКонцаКолонки,чКонецСтроки,чПозицияКонцаКолонки);
	ОбновитьОтображениеДанных(Элементы.ТекстСодержания);

КонецПроцедуры // - #216 Иванов А.Б. 2020-06-27 @milanse 

// + #216 Иванов А.Б. 2020-06-27 @milanse 
&НаКлиенте
Процедура ОформитьФрагментКода(СимволыНачало,СимволыОкончание)
	
	Перем чКонецКолонки, чКонецСтроки, чНачалоКолонки, чНачалоСтроки;
	
	чНачалоСтроки = 0;
	чНачалоКолонки = 0;
	чКонецСтроки = 0;
	чКонецКолонки = 0;
	
	Элементы.ТекстСодержания.ПолучитьГраницыВыделения(чНачалоСтроки,чНачалоКолонки,чКонецСтроки,чКонецКолонки);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Элементы.ТекстСодержания.ТекстРедактирования);
	
	ТекстовыйДокумент.ВставитьСтроку(чНачалоСтроки,СимволыНачало);
	ТекстовыйДокумент.ВставитьСтроку(чКонецСтроки+2,СимволыОкончание);
	чПозицияКонцаКолонки = СтрДлина(ТекстовыйДокумент.ПолучитьСтроку(чКонецСтроки+2))+1;
	
	Объект.ТекстСодержания = ТекстовыйДокумент.ПолучитьТекст(); 
	ОбновитьОтображениеДанных(Элементы.ТекстСодержания);
	Элементы.ТекстСодержания.УстановитьГраницыВыделения(чКонецСтроки+2,чПозицияКонцаКолонки,чКонецСтроки+2,чПозицияКонцаКолонки);
	ОбновитьОтображениеДанных(Элементы.ТекстСодержания);

КонецПроцедуры // - #216 Иванов А.Б. 2020-06-27 @milanse 
// }milanse 07.06.2020 0:06:35

&НаСервере
Процедура ДобавитьМеткиНаФорму()

	НомерМетки = 1;
	ДействиеКоманды = "КомандаМетки";	
	ЭлементРодитель = Элементы.ГруппаМетки;
	
	ВсеМеткиЗадач = Справочники.узМеткиЗадач.ПолучитьВсеМеткиЗадач();
	ВыбранныеМеткиЗадач = ПолучитьВыбранныеМеткиЗадачи();
	
	Для Каждого МеткаСсылка Из ВсеМеткиЗадач Цикл
		
		ИмяКоманды = "КомандаМетка" + НомерМетки;		
		
		Команда = Команды.Добавить(ИмяКоманды);
		Команда.Действие = ДействиеКоманды;
		Команда.Заголовок = "" + МеткаСсылка;
			
		КнопкаФормы = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ЭлементРодитель);
		КнопкаФормы.ИмяКоманды = ИмяКоманды;
		КнопкаФормы.Фигура = ФигураКнопки.Овал;
		КнопкаФормы.АвтоМаксимальнаяШирина = Истина;    
		КнопкаФормы.ЦветФона = МеткаСсылка.ЦветФонаМетки.Получить();
		КнопкаФормы.ЦветТекста = МеткаСсылка.ЦветТекстаМетки.Получить();
		КнопкаФормы.Шрифт = ШрифтыСтиля.узМеткиЗадачШрифт;
		КнопкаФормы.Видимость = Ложь;
		
		Если ВыбранныеМеткиЗадач.Найти(МеткаСсылка) <> Неопределено Тогда
			КнопкаФормы.Видимость = Истина; 
		КонецЕсли;
		
		НомерМетки = НомерМетки + 1;
		
	КонецЦикла;
		
КонецПроцедуры 

&НаСервере
Процедура ОбновитьОтображениеМетокЗадачи()

	ВсеМеткиЗадач = Справочники.узМеткиЗадач.ПолучитьВсеМеткиЗадач();
	ВыбранныеМеткиЗадач = ПолучитьВыбранныеМеткиЗадачи();	
	
	НомерМетки = 1;
	Для Каждого МеткаСсылка Из ВсеМеткиЗадач Цикл
		
		ИмяКоманды = "КомандаМетка" + НомерМетки;	
		
		КнопкаФормы = Элементы[ИмяКоманды];
		
		КнопкаФормы.Видимость = Ложь;
		Если ВыбранныеМеткиЗадач.Найти(МеткаСсылка) <> Неопределено Тогда
			КнопкаФормы.Видимость = Истина; 
		КонецЕсли;		
		
		НомерМетки = НомерМетки + 1;
	КонецЦикла;
	
КонецПроцедуры 

// [+] #285 Павлюков С.Ю. 2024-04-14
&НаСервере
Процедура ОбновитьДоступныйСписокСменыСтатуса()
	
	ПроектДляПроверки = Объект.Проект;
	Если ЗначениеЗаполнено(Объект.ОсновнаяЗадача) Тогда  
		ПроектДляПроверки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ОсновнаяЗадача, "Проект");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПроектДляПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	ОграничиватьСменуСтатусов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроектДляПроверки, "ОграничиватьСменуСтатусов");
	Если Не ОграничиватьСменуСтатусов = Истина Тогда
		Элементы.Статус.РежимВыбораИзСписка = Ложь;
		Возврат;
	КонецЕсли;
	
	массивСтатусов = РегистрыСведений.узДоступностьСменыСтатусовЗадач.ДоступныеДляСменыСтатусы(ПроектДляПроверки, Объект.Статус);
	Если массивСтатусов.Найти(Объект.Статус) = Неопределено Тогда
		массивСтатусов.Добавить(Объект.Статус);
	КонецЕсли;
	Элементы.Статус.РежимВыбораИзСписка = Истина;
	Элементы.Статус.СписокВыбора.ЗагрузитьЗначения(массивСтатусов);
	
КонецПроцедуры

// [+] #285 Павлюков С.Ю. 2024-04-14
&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	ОбновитьДоступныйСписокСменыСтатуса();
КонецПроцедуры 
 
// [+] #285 Павлюков С.Ю. 2024-04-14
&НаКлиенте
Процедура ПроектЗадачиПриИзменении(Элемент)
	ОбновитьДоступныйСписокСменыСтатуса();
КонецПроцедуры
// [-] #285 Павлюков С.Ю. 2024-04-14

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомментарииВКодеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Код",Объект.Код);
	ДопПараметры.Вставить("Исполнитель",Объект.Исполнитель);
	ДопПараметры.Вставить("НомерВнешнейЗаявки",Объект.НомерВнешнейЗаявки);
	
	Объект.КомментарииВКоде = ПолучитьКомментарийВКодеНаСервере(ДопПараметры);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКомментарийВКодеНаСервере(ДопПараметры)
	Возврат Справочники.узЗадачи.ПолучитьКомментарииВКоде(ДопПараметры);
КонецФункции 

&НаКлиенте
Процедура СрокИсполненияПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда
		Возврат;
	Конецесли;
	
	УказаноВремя = Объект.СрокИсполнения - НачалоДня(Объект.СрокИсполнения);
	Если НЕ УказаноВремя Тогда
		Объект.СрокИсполнения = КонецДня(Объект.СрокИсполнения);
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьВводКомментария", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЭтоДобавлениеКомментария",Истина);
	ОткрытьФорму("Справочник.узЗадачи.Форма.ФормаВводаКомментария",ПараметрыФормы,,,,,ОповещениеОЗакрытии);	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьВводКомментария(РезультатЗакрытия, ДопПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	Конецесли;
	Модифицированность = Истина;
	ЭтоДобавлениеКомментария = РезультатЗакрытия.ЭтоДобавлениеКомментария; 
	Если ЭтоДобавлениеКомментария Тогда
		СтрокаКомментарии = Объект.Комментарии.Добавить();
		СтрокаКомментарии.КлючСтроки = ПолучитьНовыйКлючСтрокиДляКомментария();
	Иначе
		ПараметрыОтбора=Новый Структура();
		ПараметрыОтбора.Вставить("КлючСтроки",РезультатЗакрытия.КлючСтроки);
		НайденныеСтроки = Объект.Комментарии.НайтиСтроки(ПараметрыОтбора);
		ВсегоНайденныеСтроки = НайденныеСтроки.Количество();
		ТекстОшибки = "";
		Если ВсегоНайденныеСтроки = 1 тогда
			СтрокаКомментарии = НайденныеСтроки[0];	
		ИначеЕсли ВсегоНайденныеСтроки > 1 Тогда
			ТекстОшибки = "Ошибка! Найдено более 1 строки";
		Иначе
			ТекстОшибки = "Ошибка! Не найдена строка";
		Конецесли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибки = ТекстОшибки  
				+" в ""Комментарии"" для ";
			Для каждого ЭлементОтбора из ПараметрыОтбора цикл
				ТекстОшибки = ТекстОшибки  
					+" "+ ЭлементОтбора.Ключ + " = "+ЭлементОтбора.Значение;				
			Конеццикла;
			ВызватьИсключение ТекстОшибки;	
		Конецесли;		
	Конецесли;	
	ЗаполнитьЗначенияСвойств(СтрокаКомментарии,РезультатЗакрытия,,"КлючСтроки");
	ОбновитьЗаголовокПоказатьСкрытьКомментарииНаКлиенте();
	//Объект.Комментарии.Сортировать("ДатаКомментария УБЫВ");
КонецПроцедуры 

&НаСервере
Функция ПолучитьНовыйКлючСтрокиДляКомментария() 
	НовыйКлючСтроки = 1;
	Если Объект.Комментарии.Количество() = 0 Тогда
		Возврат НовыйКлючСтроки;
	Конецесли;
	
	ВТКомментарии = Объект.Комментарии.Выгрузить();
	ВТКомментарии.Сортировать("КлючСтроки УБЫВ");
	СтрокаВТКомментарии = ВТКомментарии[0];
	
	ПоследнийКлючСтроки = СтрокаВТКомментарии.КлючСтроки;		
	Если ЗначениеЗаполнено(ПоследнийКлючСтроки) Тогда
		НовыйКлючСтроки = ПоследнийКлючСтроки + 1;
	Конецесли;
	
	Возврат НовыйКлючСтроки;
КонецФункции 

&НаКлиенте
Процедура КомментарииПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомментарииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Возврат;
	Конецесли;

КонецПроцедуры

&НаКлиенте
Процедура КомментарииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СтрокаКомментарии = Элементы.Комментарии.ТекущиеДанные;	
	Если СтрокаКомментарии = Неопределено тогда
		Возврат;	
	Конецесли;	
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьВводКомментария", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДатаКомментария",СтрокаКомментарии.ДатаКомментария);
	ПараметрыФормы.Вставить("Автор",СтрокаКомментарии.Автор);
	ПараметрыФормы.Вставить("Комментарий",СтрокаКомментарии.Комментарий);
	ПараметрыФормы.Вставить("Выполнено",СтрокаКомментарии.Выполнено);
	ПараметрыФормы.Вставить("КлючСтроки",СтрокаКомментарии.КлючСтроки);
	ОткрытьФорму("Справочник.узЗадачи.Форма.ФормаВводаКомментария",ПараметрыФормы,ЭтаФорма,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
	Элементы.Комментарии.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	//ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьОтветНаВопросОЗаписи", ЭтаФорма);
	//ВызватьИсключение "Надо поправить";
	//ПоказатьВопрос(ОповещениеОЗакрытии,"Перед тем как указать исполнителя, необходимо записать задачу. Продолжить?",РежимДиалогаВопрос.ДаНет,,,"Записать задачу?");	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокФормы()
	
	Если ЗначениеЗаполнено(Объект.Код) Тогда
		Заголовок = "#" + Формат(Объект.Код,"ЧГ=0") + " " + Объект.Наименование; 			
	ИначеЕсли ЗначениеЗаполнено(Объект.Наименование) Тогда
		Заголовок = "" + Объект.Наименование;	
	ИначеЕсли Объект.Ссылка.Пустая() Тогда
		Заголовок = Заголовок + "Новая задача";	
	Иначе
		Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	ОбновитьЗаголовокФормы();
КонецПроцедуры

&НаКлиенте
Процедура Удалить_ИспользоватьФорматированиеВСодержанииПриИзменении(Элемент)
	//ПриИзмененииИспользоватьФорматированиеВСодержанииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.ГруппаСтраницаИзмененныеОбъекты Тогда
		УстановитьПараметрыИзмененныеОбъекты();
	Конецесли;
	Если ТекущаяСтраница = Элементы.ГруппаСтраницаВопросыИОтветы Тогда
		//+ #29 Пахомов А.А. 2024-10-19
		// При переходе на страницу ВопросыОтветы без записанного объекта задачи выходит ошибка
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ВопросыИОтветы, "Задача", Объект.Ссылка);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ВопросыИОтветы, "ЭтоНовый", Объект.Ссылка.Пустая());
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ВопросыИОтветы,"ПометкаУдаления",Ложь);
		//- #29 Пахомов А.А. 2024-10-19
	Конецесли;	
	// СтандартныеПодсистемы.Свойства
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоСписокИзмененныхОбъектовПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура Удалить_КомандаПоказатьСкрытьКомментарии(Команда)
	
	//Элементы.КомандаПоказатьСкрытьКомментарии.Пометка = НЕ Элементы.КомандаПоказатьСкрытьКомментарии.Пометка;
	//УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзмененныеОбъектыДобавить(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Конфигурация) Тогда
		пТекстСообщения = узОбщийМодульСервер.ПолучитьТекстСообщения("Ошибка! сначала необходимо заполнить реквизит [Конфигурация]",5);
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = пТекстСообщения;		
		Сообщение.Поле = "Объект.Конфигурация";
		Сообщение.Сообщить();
		Возврат;
	Конецесли;
	Если Объект.Ссылка.Пустая() Тогда
		узОбщийМодульСервер.узСообщить("Ошибка! Необходимо записать элемент, перед добавлением информации об измененных объектах",7);
		Возврат;
	Конецесли;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДобавитьНовыйЭлемент",Истина);
	ПараметрыФормы.Вставить("Конфигурация",Объект.Конфигурация);
	ПараметрыФормы.Вставить("Задача",Объект.Ссылка);
	ОткрытьФорму("Справочник.узИсторияКонфигураций.Форма.ФормаЭлемента",ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьВерсию(Команда)
	СтрокаИзмененныеОбъекты = Элементы.ИзмененныеОбъекты.ТекущиеДанные;	
	Если СтрокаИзмененныеОбъекты = Неопределено тогда
		Возврат;	
	Конецесли;	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ",СтрокаИзмененныеОбъекты.Ссылка);
	ОткрытьФорму("Справочник.узИсторияКонфигураций.Форма.ФормаЭлемента",ПараметрыФормы);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоУмолчанию()
	Объект.История.Очистить();
	Объект.Комментарии.Очистить();
	//Объект.ФактическиеЧасы.Очистить();
	Объект.ИсторияСтатусов.Очистить();
	
	Объект.ОформлениеТекста = ПредопределенноеЗначение("Перечисление.узОформлениеТекста.ФорматированныйТекст");
	Объект.Автор = Пользователи.ТекущийПользователь();
	Объект.Важность = ПредопределенноеЗначение("Справочник.узВариантыВажностиЗадачи.Обычная");
	Если Объект.ОформлениеТекста = ПредопределенноеЗначение("Перечисление.узОформлениеТекста.ФорматированныйТекст") Тогда
		ФорматированныйТекст = Параметры.ЗначениеКопирования.Содержание.Получить();
	Конецесли;
	Если Параметры.Свойство("ПараметрыНовойЗадачи") Тогда
		ПараметрыНовойЗадачи = Параметры.ПараметрыНовойЗадачи; 	
		ЗаполнитьЗначенияСвойств(Объект,ПараметрыНовойЗадачи);
	Конецесли;
	Если Параметры.Свойство("ТребоватьЗаполнитьРодителя") Тогда
		ТребоватьЗаполнитьРодителя = Параметры.ТребоватьЗаполнитьРодителя;
	Конецесли;
	Объект.ПоказыватьВОтчетахИКанбанДоске = Истина;
	
	ЗаполнитьЗначенияИзРодителя();
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьЗначенияИзРодителя()
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("Контрагент");
	МассивРеквизитов.Добавить("Конфигурация");
	//+ #201 Иванов А.Б. 2020-05-23 Изменения от Дениса Урянского @d-hurricane
	//МассивРеквизитов.Добавить("ГруппаДоступаЗадач");//Павлюков
	МассивРеквизитов.Добавить("ГруппаДоступа");
	//- #201 Иванов А.Б. 2020-05-23 Изменения от Дениса Урянского @d-hurricane
	
	Для каждого ИмяРеквизита из МассивРеквизитов цикл
		ЗначениеРеквизита = Объект[ИмяРеквизита];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Продолжить;
		Конецесли;	
		ЗначениеРеквизитаРодителя = Объект.Родитель[ИмяРеквизита];
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизитаРодителя) Тогда
			Продолжить;
		Конецесли;		
		
		Объект[ИмяРеквизита] = ЗначениеРеквизитаРодителя;	
	Конеццикла;
КонецПроцедуры 

&НаКлиенте
Процедура КомандаОткрытьЗадачу(Команда)
	
	Если Элементы.ГруппаСтраницыОформлениеСодержания.ТекущаяСтраница = Элементы.ГруппаСтраницаФорматированныйТекст Тогда
		ТекстВыделенный = СокрЛП(Элементы.Содержание.ВыделенныйТекст);
		Если НЕ ЗначениеЗаполнено(ТекстВыделенный) Тогда
			ТекстВыделенный = ПолучитьСодержаниеТекстИзФорматированногоТекста();
		Конецесли;
	ИначеЕсли Элементы.ГруппаСтраницыОформлениеСодержания.ТекущаяСтраница = Элементы.ГруппаСтраницаТекст Тогда
		ТекстВыделенный = СокрЛП(Элементы.ТекстСодержания.ВыделенныйТекст);
		Если НЕ ЗначениеЗаполнено(ТекстВыделенный) Тогда
			ТекстВыделенный = Объект.ТекстСодержания;
		Конецесли;
	//ИначеЕсли Элементы.ГруппаСтраницыОформлениеСодержания.ТекущаяСтраница = Элементы.ГруппаСтраницаПросмотр Тогда
	//	ТекстВыделенный = Объект.ТекстСодержания;
	//Иначе
	//	ВызватьИсключение "Ошибка! нет алгоритма для выбранной страницы "+Элементы.ГруппаСтраницыОформлениеСодержания.ТекущаяСтраница; 
	Конецесли;

	
	МассивЗадач = ПолучитьМассивЗадачПоВыбранномуТексту(ТекстВыделенный);
	Если МассивЗадач.Количество() = 0 Тогда
		узОбщийМодульСервер.узСообщить("В выделенном тексте нет задач",75);
		Возврат;
	Конецесли;
	
	Для каждого СсылкаНаЗадачу из МассивЗадач цикл
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Ключ",СсылкаНаЗадачу);
		ОткрытьФорму("Справочник.узЗадачи.Форма.ФормаЭлемента",ПараметрыФормы);			
	Конеццикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивЗадачПоВыбранномуТексту(ТекстВыделенный) 
	Возврат узОбщийМодульСервер.ПолучитьМассивЗадачИзТекста(ТекстВыделенный);
КонецФункции 

&НаКлиенте
Процедура КомандаПолноэкранныйРежим(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ФорматированныйТекст",ФорматированныйТекст);
	ПараметрыФормы.Вставить("ЗаголовокФормы",Заголовок);
	ОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияПолноэкранногоРежима", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.узЗадачи.Форма.ФормаПолноэкранныйРежим",
		ПараметрыФормы,,,,,
		ОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьПослеЗакрытияПолноэкранногоРежима(РезультатЗакрытия, ДопПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	Конецесли;
	
	ФорматированныйТекст = РезультатЗакрытия.ФорматированныйТекст;
	ПерезагрузимДанныеНаСервере();
КонецПроцедуры

// [+] #289 Попов 2022-09-14 @Badya67
&НаКлиенте
Процедура КомандаТаблицаПолноэкранныйРежим(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	ПараметрыФормы.Вставить("ЗаголовокФормы", Заголовок);
	ОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияПолноэкранногоРежимаТаблица", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.узЗадачи.Форма.ФормаТаблицаПолноэкранныйРежим",
		ПараметрыФормы,,,,,
		ОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры
 
// [+] #289 Попов 2022-09-14 @Badya67 
&НаКлиенте
Процедура ВыполнитьПослеЗакрытияПолноэкранногоРежимаТаблица(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	Конецесли;
	
	ТабличныйДокумент = РезультатЗакрытия.ТабличныйДокумент;
	ПерезагрузимДанныеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПерезагрузимДанныеНаСервере()
	пОбъект = РеквизитФормыВЗначение("Объект"); 
	ЗначениеВРеквизитФормы(пОбъект,"Объект");
КонецПроцедуры 

&НаСервере
Процедура ДобавитьСсылкиНаСвязанныеЗадачиНаСервере()
	МассивНомеровСвязанныхЗадач = ПолучитьМассивНомеровСвязанныхЗадачНаСервере(Объект.Ссылка);
	Если МассивНомеровСвязанныхЗадач.Количество() = 0 Тогда
		УбратьЭлементыСвязанныеЗадачи();
		Возврат;
	Конецесли;
	
	МассивЭлементовСвязанныхЗадач = Новый Массив(); 
	Для каждого НомерСвязаннойЗадачи из МассивНомеровСвязанныхЗадач цикл
		ИмяЭлемента = "СвязаннаяЗадача"+НомерСвязаннойЗадачи;
		
		пЭлементСвязаннаяЗадача = Элементы.Найти(ИмяЭлемента);
		Если пЭлементСвязаннаяЗадача <> Неопределено Тогда
			МассивЭлементовСвязанныхЗадач.Добавить(пЭлементСвязаннаяЗадача);
			Продолжить;
		Конецесли;
		
		пЭлементСвязаннаяЗадача = Элементы.Вставить(
			ИмяЭлемента,
			Тип("ДекорацияФормы"),Элементы.ГруппаСвязанныеЗадачи);
			
		пЭлементСвязаннаяЗадача.Заголовок = "#"+Формат(НомерСвязаннойЗадачи,"ЧГ=0");
		пЭлементСвязаннаяЗадача.Гиперссылка = Истина;
		пЭлементСвязаннаяЗадача.УстановитьДействие("Нажатие","ДекорацияСвязаннаяЗадачаНажатие");

		МассивЭлементовСвязанныхЗадач.Добавить(пЭлементСвязаннаяЗадача);
	Конеццикла;

	УбратьЭлементыСвязанныеЗадачи(МассивЭлементовСвязанныхЗадач);
КонецПроцедуры

&НаСервере
Процедура УбратьЭлементыСвязанныеЗадачи(МассивЭлементовСвязанныхЗадач = Неопределено)
	
	Для каждого пЭлементСвязаннаяЗадача из Элементы.ГруппаСвязанныеЗадачи.ПодчиненныеЭлементы цикл
		
		Если МассивЭлементовСвязанныхЗадач <> Неопределено
			И МассивЭлементовСвязанныхЗадач.Найти(пЭлементСвязаннаяЗадача) <> Неопределено Тогда
			Продолжить;
		Конецесли;
		
		Элементы.Удалить(пЭлементСвязаннаяЗадача);		
	Конеццикла;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьМассивНомеровСвязанныхЗадачНаСервере(пЗадача)
	Возврат Справочники.узЗадачи.ПолучитьМассивНомеровСвязанныхЗадач(пЗадача);
КонецФункции 

&НаКлиенте
Процедура ДекорацияСвязаннаяЗадачаНажатие(Элемент)
	НомерЗадачи = Сред(Элемент.Заголовок,2);
	СсылкаНаЗадачу = ПолучитьЗадачуПоНомеруНаСервере(НомерЗадачи);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ",СсылкаНаЗадачу);
	ОткрытьФорму("Справочник.узЗадачи.Форма.ФормаЭлемента",ПараметрыФормы);
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьЗадачуПоНомеруНаСервере(НомерЗадачи)
	
	СсылкаНаЗадачу = Справочники.узЗадачи.НайтиПоКоду(НомерЗадачи);
	
	Возврат СсылкаНаЗадачу;
КонецФункции

&НаКлиенте
Процедура ПоказыватьКодПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();     
	
	Если Объект.ПоказыватьКод Тогда
		Элементы.ГруппаСтраницыОформлениеСодержания.ТекущаяСтраница = Элементы.ГруппаСтраницаКод;
		ВыполнитьДействиеДляСтраницы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТаблицуПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
	Если Объект.ПоказыватьТаблицу Тогда	
		Элементы.ГруппаСтраницыОформлениеСодержания.ТекущаяСтраница = Элементы.ГруппаСтраницаТаблица;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Учет_времени

&НаКлиенте
Процедура ФактическиеЧасыДатаНачалаПриИзменении(Элемент)
	ИзменитьЧасыФактДляСтроки(Элементы.Удалить_ФактическиеЧасы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ФактическиеЧасыДатаОкончанияПриИзменении(Элемент)
	ИзменитьЧасыФактДляСтроки(Элементы.Удалить_ФактическиеЧасы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКоличествоЧасовПоРазностиДат(ДатаНач, ДатаКон)
	Часов = 0;
	
	Если ДатаКон > ДатаНач Тогда
		Часов = (ДатаКон - ДатаНач) / 3600;
	КонецЕсли; 
	
	Возврат Часов;
КонецФункции

&НаКлиенте
Процедура ИзменитьЧасыФактДляСтроки(СтрокаТЧ)
	СтрокаТЧ.ЧасыФакт = ПолучитьКоличествоЧасовПоРазностиДат(СтрокаТЧ.ДатаНачала, СтрокаТЧ.ДатаОкончания);
	ПриИзмененииЧасыФактВТЧ();
КонецПроцедуры

&НаКлиенте
Процедура ФактическиеЧасыДатаНачалаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаФактическиеЧасы = Элементы.Удалить_ФактическиеЧасы.ТекущиеДанные;	
	Если СтрокаФактическиеЧасы = Неопределено тогда
		Возврат;	
	Конецесли;	
	
	СтрокаФактическиеЧасы.ДатаНачала = НачалоМинуты(ТекущаяДатаНаСервере());  
	Если НЕ ЗначениеЗаполнено(СтрокаФактическиеЧасы.ДатаОкончания)
		ИЛИ СтрокаФактическиеЧасы.ДатаНачала > СтрокаФактическиеЧасы.ДатаОкончания Тогда
		СтрокаФактическиеЧасы.ДатаОкончания = ПолучитьДатаОкончания(СтрокаФактическиеЧасы.ДатаНачала);
	Конецесли;
	ИзменитьЧасыФактДляСтроки(СтрокаФактическиеЧасы);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекущаяДатаНаСервере() 
	Возврат ТекущаяДатаСеанса();
КонецФункции 

&НаКлиенте
Функция ПолучитьДатаОкончания(ОтДаты) 
	пДатаОкончания = НачалоМинуты(КонецМинуты(ОтДаты)+1);		
	Возврат пДатаОкончания;
КонецФункции 

&НаКлиенте
Процедура ФактическиеЧасыДатаОкончанияОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаФактическиеЧасы = Элементы.Удалить_ФактическиеЧасы.ТекущиеДанные;	
	Если СтрокаФактическиеЧасы = Неопределено тогда
		Возврат;	
	Конецесли;	

	СтрокаФактическиеЧасы.ДатаОкончания = ПолучитьДатаОкончания(ТекущаяДатаНаСервере());  
	ИзменитьЧасыФактДляСтроки(Элементы.Удалить_ФактическиеЧасы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЧасыФактВТЧ()
	//Объект.ЧасыФакт = Объект.ФактическиеЧасы.Итог("ЧасыФакт");	
	//Объект.ЧасыКОплате = Объект.ЧасыФакт;
КонецПроцедуры 


&НаКлиенте
Процедура ФактическиеЧасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		УстановитьВидимостьДоступностьНаКлиенте();
	Конецесли;
КонецПроцедуры


&НаКлиенте
Процедура ФактическиеЧасыПослеУдаления(Элемент)
	УстановитьВидимостьДоступностьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЧасыФактПриИзменении(Элемент)
	Объект.ЧасыКОплате = Объект.ЧасыФакт;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьВопрос(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		узОбщийМодульСервер.узСообщить("Перед добавление вопроса необходимо записать эадачу",8);
		Возврат;	
	Конецесли;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Задача",Объект.Ссылка);
	ОткрытьФорму("Справочник.узВопросыОтветы.ФормаОбъекта",ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеДляСтраницы();
	
	Если Объект.ОформлениеТекста = ПредопределенноеЗначение("Перечисление.узОформлениеТекста.Markdown") Тогда
		Если Элементы.ГруппаСтраницыОформлениеСодержания.ТекущаяСтраница = Элементы.ГруппаСтраницаПросмотр Тогда
			ПолучитьMarkdown();
		КонецЕсли;
	ИначеЕсли Объект.ПоказыватьКод Тогда
		Если Элементы.ГруппаСтраницыОформлениеСодержания.ТекущаяСтраница = Элементы.ГруппаСтраницаКод Тогда
			КонсольКода_ЗагрузитьИзМакета();
			КонсольКода_ПриОткрытии();
		КонецЕсли;
	Иначе
		//Ничего не делаем	
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучитьMarkdown()
	ПолеHTML = ПолучитьHTMLMarkdownНаСервере(Объект.ТекстСодержания);
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьHTMLMarkdownНаСервере(ЗНАЧ ТекстСодержания)
	HTMLMarkdown = узОбщийМодульСервер.ПолучитьHTMLMarkdown(ТекстСодержания);	
	Возврат HTMLMarkdown;
КонецФункции

&НаКлиенте
Процедура ОформлениеТекстаПриИзменении(Элемент)
	
	Если Объект.ОформлениеТекста = ПредопределенноеЗначение("Перечисление.узОформлениеТекста.Markdown") Тогда
		Если ЗначениеЗаполнено(Объект.ТекстСодержания) Тогда
			Элементы.ГруппаСтраницыОформлениеСодержания.ТекущаяСтраница = Элементы.ГруппаСтраницаПросмотр;
		Иначе
			Элементы.ГруппаСтраницыОформлениеСодержания.ТекущаяСтраница = Элементы.ГруппаСтраницаТекст;
		Конецесли;
	Конецесли;		
	
	//Если ОформлениеТекстаПредыдущий = ПредопределенноеЗначение("Перечисление.узОформлениеТекста.Код") Тогда
	//	пТекстСодержания = Элементы.КонсольКода_ПолеHTML.Документ.defaultView.getText();
	//	Объект.ТекстСодержанияКод = пТекстСодержания;
	//Конецесли;	
	
	ОформлениеТекстаПриИзмененииНаСервере();
	ВыполнитьДействиеДляСтраницы();
	
	ОформлениеТекстаПредыдущий = Объект.ОформлениеТекста;
КонецПроцедуры

&НаСервере
Процедура ОформлениеТекстаПриИзмененииНаСервере()
		
	Если Объект.ОформлениеТекста = ПредопределенноеЗначение("Перечисление.узОформлениеТекста.ФорматированныйТекст") Тогда
		
		ФорматированныйТекст.УстановитьHTML(Объект.ТекстСодержания,Новый Структура);
		
	ИначеЕсли Объект.ОформлениеТекста = ПредопределенноеЗначение("Перечисление.узОформлениеТекста.Markdown") Тогда
		
		Если ОформлениеТекстаПредыдущий = ПредопределенноеЗначение("Перечисление.узОформлениеТекста.ФорматированныйТекст") Тогда
			пТекстСодержания = ПолучитьСодержаниеТекстИзФорматированногоТекста();
			Объект.ТекстСодержания = пТекстСодержания;	
		КонецЕсли;
		
	//ИначеЕсли Объект.ОформлениеТекста = ПредопределенноеЗначение("Перечисление.узОформлениеТекста.Код") Тогда
	//	
	//	Если ОформлениеТекстаПредыдущий = ПредопределенноеЗначение("Перечисление.узОформлениеТекста.ФорматированныйТекст") Тогда
	//		пТекстСодержания = ПолучитьСодержаниеТекстИзФорматированногоТекста();
	//		Объект.ТекстСодержания = пТекстСодержания;	
	//	КонецЕсли;		
		
	Иначе
		пТекстСодержания = ПолучитьСодержаниеТекстИзФорматированногоТекста();
		Объект.ТекстСодержания = пТекстСодержания;				
	Конецесли;
	УстановитьВидимостьДоступность();
КонецПроцедуры 

&НаКлиенте
Процедура КомандаПоказатьУбратьMarkdown(Команда)
	ПоказатьMarkdown = НЕ ПоказатьMarkdown;
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыОформлениеСодержанияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ВыполнитьДействиеДляСтраницы();
КонецПроцедуры

&НаКлиенте
Процедура КомандаMDДобавитьТаблицу(Команда)
	ТекстMD = "| Tables        | Are           | Cool  |"
	+ Символы.ПС + "| ------------- |:-------------:| -----:|"
	+ Символы.ПС + "| col 3 is      | right-aligned | $1600 |"
	+ Символы.ПС + "| col 2 is      | centered      |   $12 |"
	+ Символы.ПС + "| zebra stripes | are neat      |    $1 |";
	
	КомандаMDДобавитьШаблон(ТекстMD);
КонецПроцедуры

&НаКлиенте
Процедура КомандаMDДобавитьЗаголовки(Команда)
	
	// + #216 Иванов А.Б. 2020-06-27 @milanse
	//ТекстMD = "# This is an <h1> tag
	//|## This is an <h2> tag
	//|###### This is an <h6> tag";
	//
	//КомандаMDДобавитьШаблон(ТекстMD);	
	//milanse 20.06.2020
	ДобавитьСимволыВНачалоСтрокиMD("# ");
	// - #216 Иванов А.Б. 2020-06-27 @milanse
	
КонецПроцедуры

&НаКлиенте
Процедура MDДобавитьПереводСтроки()
	Если ЗначениеЗаполнено(Объект.ТекстСодержания) Тогда	
		Объект.ТекстСодержания = Объект.ТекстСодержания 
			+ Символы.ПС + Символы.ПС;
	Конецесли;	
КонецПроцедуры 

&НаКлиенте
Процедура КомандаMDЖирный(Команда)
	
	// + #216 Иванов А.Б. 2020-06-27 @milanse 
	//ТекстMD = "**This text will be bold**
	//|__This will also be bold__";
	//КомандаMDДобавитьШаблон(ТекстMD);
	//milanse 20.06.2020
	ОформитьТекстMD("**");
	// - #216 Иванов А.Б. 2020-06-27 @milanse 
	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаMDКурсив(Команда)
	
	// + #216 Иванов А.Б. 2020-06-27 @milanse 
	//ТекстMD = "*This text will be italic*
	//|_This will also be italic_";
	//
	//КомандаMDДобавитьШаблон(ТекстMD);	                              
	//milanse 20.06.2020
	ОформитьТекстMD("*");
	// - #216 Иванов А.Б. 2020-06-27 @milanse
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаMDНумерованныйСписок(Команда)
	
	// + #216 Иванов А.Б. 2020-06-27 @milanse 
	//ТекстMD = "1. Item 1
	//|1. Item 2
	//|1. Item 3
	//|   * Item 3a
	//|   * Item 3b";
	//
	//КомандаMDДобавитьШаблон(ТекстMD);
	//milanse 20.06.2020
	ДобавитьСимволыВНачалоСтрокиMD("1. ");	
	// - #216 Иванов А.Б. 2020-06-27 @milanse 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаMDМаркерыСписок(Команда)
	
	// + #216 Иванов А.Б. 2020-06-27 @milanse 
	//ТекстMD = "* Item 1
	//|* Item 2
	//|	* Item 2a
	//|	* Item 2b";
	//
	//КомандаMDДобавитьШаблон(ТекстMD);
	//milanse 20.06.2020
	ДобавитьСимволыВНачалоСтрокиMD("* ");	
	// - #216 Иванов А.Б. 2020-06-27 @milanse 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаMDДобавитьШаблон(ТекстMD)
	
	MDДобавитьПереводСтроки();
	
	Объект.ТекстСодержания = Объект.ТекстСодержания + ТекстMD;
	
	// + #216 Иванов А.Б. 2020-06-27 @milanse 
	ОбновитьОтображениеДанных(Элементы.ТекстСодержания);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Объект.ТекстСодержания);
	
	//milanse 20.06.2020
	чПоследняяСтрока = ТекстовыйДокумент.КоличествоСтрок();
	чПоследняяКолонка = СтрДлина(ТекстовыйДокумент.ПолучитьСтроку(ТекстовыйДокумент.КоличествоСтрок()))+1;
	Элементы.ТекстСодержания.УстановитьГраницыВыделения(чПоследняяСтрока,чПоследняяКолонка,чПоследняяСтрока,чПоследняяКолонка);
	ОбновитьОтображениеДанных(Элементы.ТекстСодержания);
	// - #216 Иванов А.Б. 2020-06-27 @milanse
	
КонецПроцедуры 

&НаКлиенте
Процедура КомандаMDЦитата(Команда)
	
	// + #216 Иванов А.Б. 2020-06-27 @milanse 
	//ТекстMD = "As Kanye West said:
	//|
	//|> We're living the future so
	//|> the present is our past.";
	//
	//КомандаMDДобавитьШаблон(ТекстMD);	 
	//milanse 20.06.2020
	ДобавитьСимволыВНачалоСтрокиMD("> ");	
	// - #216 Иванов А.Б. 2020-06-27 @milanse 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаMDЗачеркнутый(Команда)
	
	// + #216 Иванов А.Б. 2020-06-27 @milanse 
	//ТекстMD = "~~This text will be strikeout~~";
	//КомандаMDДобавитьШаблон(ТекстMD);	 
	//milanse 20.06.2020
	ОформитьТекстMD("~~");	
	// - #216 Иванов А.Б. 2020-06-27 @milanse 
	
КонецПроцедуры

//milanse 20.06.2020
&НаКлиенте
Процедура КомандаMDКод(Команда)
	чНачалоСтроки = 0;
	чНачалоКолонки = 0;
	чКонецСтроки = 0;
	чКонецКолонки = 0;
	
	Элементы.ТекстСодержания.ПолучитьГраницыВыделения(чНачалоСтроки,чНачалоКолонки,чКонецСтроки,чКонецКолонки);
	Если чНачалоСтроки <> чКонецСтроки Тогда
		ОформитьФрагментКода("```bsl","```");
	Иначе
		ОформитьТекстMD("`");
	КонецЕсли;
КонецПроцедуры // - #216 Иванов А.Б. 2020-06-27 @milanse 
			   
			   

&НаКлиенте
Процедура КонфигурацияОтборПриИзменении(Элемент)
	УстановитьПараметрыИзмененныеОбъекты();
КонецПроцедуры

//+ #104 Дзеса Ігор (capitoshko) 08.10.2018
&НаСервере
Процедура КомандаДобавитьФактРаботНаСервере()
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьФактРабот(Команда)
	
	#Если ВебКлиент Тогда
		ОкноОтображения = Неопределено;
	#Иначе
		ОкноОтображения = ВариантОткрытияОкна.ОтдельноеОкно;
	#КонецЕсли
	
	ПараметрыФормыузВводФактаПоЗадаче = Новый Структура;
	ПараметрыФормыузВводФактаПоЗадаче.Вставить("Задача", Объект.Ссылка);
	ПараметрыФормыузВводФактаПоЗадаче.Вставить("Исполнитель", Объект.Исполнитель);
	
	ОткрытьФорму("Документ.узВводФактаПоЗадаче.Форма.ФормаДокументаВводСЗадачи", 
		ПараметрыФормыузВводФактаПоЗадаче,,,ОкноОтображения,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
//- #104 Дзеса Ігор (capitoshko) 08.10.2018


&НаКлиенте
Процедура КомандаЗаполнитьНаблюдателямиИзВышестоящейОсновнойЗадачи(Команда)
	КомандаЗаполнитьНаблюдателямиИзВышестоящейОсновнойЗадачиНаСервере();
КонецПроцедуры


&НаСервере
Процедура КомандаЗаполнитьНаблюдателямиИзВышестоящейОсновнойЗадачиНаСервере()

	Если НЕ ЗначениеЗаполнено(Объект.Родитель) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбран родитель'");
		Сообщение.Поле = "Объект.Родитель";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	пОсновнаяЗадачаРодитель = НайтиОсновногоРодителя(Объект.Родитель);
	Если пОсновнаяЗадачаРодитель = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не найдена основная задача'");
		Сообщение.Поле = "Объект.Родитель";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаНаблюдателиРодитель Из пОсновнаяЗадачаРодитель.НаблюдателиЗаОсновнойЗадачей Цикл
		
		пПользователь = СтрокаНаблюдателиРодитель.Пользователь;
		Если НЕ ЗначениеЗаполнено(пПользователь) Тогда
			Продолжить;
		КонецЕсли;
		
		ВТДопПараметры = Новый Структура("Пользователь", пПользователь);
		
		НайденныеСтроки = Объект.НаблюдателиЗаОсновнойЗадачей.НайтиСтроки(ВТДопПараметры);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаНаблюдателиЗаОсновнойЗадачей = Объект.НаблюдателиЗаОсновнойЗадачей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНаблюдателиЗаОсновнойЗадачей, СтрокаНаблюдателиРодитель);
		КонецЕсли;
		
	КонецЦикла;
	
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Наблюдатели добавлены";
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаСервере
Функция НайтиОсновногоРодителя(Ссылка) 

	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Родитель, ЭтоОсновнаяЗадача");
	Если РеквизитыЗадачи.ЭтоОсновнаяЗадача Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Возврат НайтиОсновногоРодителя(РеквизитыЗадачи.Родитель);
	
КонецФункции


&НаСервере
Процедура КонсольКода_ЗагрузитьИзМакета()
	
	Макет_src = КонсольКода_ПолучитьМакет("КонсольКода_src");
	
	КонсольКода_АдресМакета = ПоместитьВоВременноеХранилище(Макет_src, Новый УникальныйИдентификатор());
	
КонецПроцедуры 

&НаКлиенте
Процедура КонсольКода_ПриОткрытии()
		
	НачатьПодключениеРасширенияРаботыСФайлами(
		Новый ОписаниеОповещения("КонсольКода_ПослеПодключенияРасширенияДляРаботыСФайлами", 
		ЭтаФорма));	
	
КонецПроцедуры 

&НаСервере
Функция КонсольКода_ПолучитьМакет(ИмяМакета)
	
	пОбъект = РеквизитФормыВЗначение("Объект");
	
	Возврат пОбъект.ПолучитьМакет(ИмяМакета);
	
КонецФункции

&НаСервере
Функция КонсольКода_ПолучитьТекстМакета(ИмяМакета)
	
	Макет = КонсольКода_ПолучитьМакет(ИмяМакета);
	Возврат СтрЗаменить(Макет.ПолучитьТекст(), Символы.ПС, " ");	
	
КонецФункции

&НаКлиенте
Процедура КонсольКода_ПослеПодключенияРасширенияДляРаботыСФайлами(Подключено, ДопПараметры) Экспорт
	
	Если Подключено Тогда
				
		КонсольКода_ИзвлечьИсходники();	
				
	Иначе
		
		#Если ВебКлиент Тогда
		Если ДопПараметры = Неопределено Тогда
			НачатьУстановкуРасширенияРаботыСФайлами(
				Новый ОписаниеОповещения("ПослеУстановкиРасширенияДляРаботыСФайлами", ЭтаФорма))	
		Иначе
			ПоказатьПредупреждение(, "К сожалению работа в веб-клиенте невозможна!");
		КонецЕсли;
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольКода_ИзвлечьИсходники()
	
	Состояние("Инициализация...");
	//#Если ВебКлиент Тогда
	//КонсольКода_HTML = "https://salexdv.github.io/bsl_console/src/index.html";
	//ИсходникиЗагружены = Истина;
	//#Иначе
	НачатьПолучениеКаталогаВременныхФайлов(
		Новый ОписаниеОповещения("КонсольКода_ПриПолученииКаталогаВременныхФайлов", ЭтаФорма));	
	//#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольКода_ПриПолученииКаталогаВременныхФайлов(ИмяКаталога, ДопПараметры) Экспорт
	
	КонсольКода_КаталогИсходников = ИмяКаталога + "bsl_console\";
	НачатьСозданиеКаталога(
		Новый ОписаниеОповещения("КонсольКода_ПослеСозданияКаталога", ЭтаФорма), 
		КонсольКода_КаталогИсходников);
		
КонецПроцедуры

&НаКлиенте
Процедура КонсольКода_ПослеСозданияКаталога(ИмяКаталога, ДопПараметры) Экспорт
	
	ФайлНаДиске = Новый Файл(КонсольКода_КаталогИсходников);
	ФайлНаДиске.НачатьПроверкуСуществования(
		Новый ОписаниеОповещения("КонсольКода_ПослеПроверкиСуществованияКаталога", 
		ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольКода_ПослеПроверкиСуществованияКаталога(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда		
		ФайлНаДиске = Новый Файл(КонсольКода_КаталогИсходников + ".ver");
		ФайлНаДиске.НачатьПроверкуСуществования(
			Новый ОписаниеОповещения("КонсольКода_ПослеПроверкиСуществованияФайлаВерсии", 
			ЭтаФорма));
	Иначе		
		КонсольКода_ВывестиОшибку("Не удалось создать каталог для исходников", Истина);		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольКода_ПослеПроверкиСуществованияФайлаВерсии(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда	
		ФайлНаДиске = Новый Файл(КонсольКода_КаталогИсходников + "index.html");
		ФайлНаДиске.НачатьПроверкуСуществования(
			Новый ОписаниеОповещения("КонсольКода_ПослеПроверкиСуществованияИндексногоФайла", 
			ЭтаФорма));
	Иначе
		КонсольКода_ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольКода_ПослеПроверкиСуществованияИндексногоФайла(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда		
		КонсольКода_ИндексныйФайл = КонсольКода_ИндексныйФайл();
		НачатьКопированиеФайла(
			Новый ОписаниеОповещения("КонсольКода_ПослеКопированияИндексногоФайла", ЭтаФорма), 
			КонсольКода_КаталогИсходников + "index.html", КонсольКода_ИндексныйФайл);
	Иначе		
		КонсольКода_ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольКода_ВывестиОшибку(Текст, ЗакрыватьКонсоль)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольКода_ПослеКопированияИндексногоФайла(СкопированныйФайл, ДопПараметры) Экспорт
	
	КонсольКода_ПолеHTML = СкопированныйФайл;
	ИсходникиЗагружены = Истина;
	
	//Элементы.ПолеHTML.Документ.defaultView.setText(Объект.ТекстСодержания);
	Позиция = 1;
	УчитыватьОтступПервойСтроки = Ложь;
	
	//Элементы.ПолеHTML.Документ.defaultView.setText(
	//	Объект.ТекстСодержания, 
	//	Позиция, 
	//	УчитыватьОтступПервойСтроки);

КонецПроцедуры

&НаКлиенте
Процедура КонсольКода_ИзвлечьИсходникиНаКлиенте()
	
	НачатьУдалениеФайлов(
		Новый ОписаниеОповещения("КонсольКода_ПослеУдаленияВременныхФайлов", ЭтаФорма), 
		КонсольКода_КаталогИсходников, 
		"*.*");
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольКода_ПослеУдаленияВременныхФайлов(ДопПараметры) Экспорт
	
	ИмяФайла = КонсольКода_КаталогИсходников + "bsl_console.zip";
	ДанныеМакета = ПолучитьИзВременногоХранилища(КонсольКода_АдресМакета);
	ДанныеМакета.НачатьЗапись(
		Новый ОписаниеОповещения("КонсольКода_ПослеЗаписиФайлаМакета", ЭтаФорма), 
		ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Функция КонсольКода_ИндексныйФайл()
	
	Возврат КонсольКода_КаталогИсходников + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".html";
	
КонецФункции

&НаКлиенте
Процедура КонсольКода_ПослеЗаписиФайлаМакета(ДопПараметры) Экспорт
	
	Попытка
		Файл = Новый ЧтениеZipФайла(КонсольКода_КаталогИсходников + "bsl_console.zip");
		Файл.ИзвлечьВсе(КонсольКода_КаталогИсходников);
		Файл = Новый ЗаписьТекста(КонсольКода_КаталогИсходников + ".ver");
		Файл.ЗаписатьСтроку(ТекущаяДата());
		Файл.Закрыть();
		КонсольКода_ИндексныйФайл = КонсольКода_ИндексныйФайл();
		НачатьКопированиеФайла(
			Новый ОписаниеОповещения("КонсольКода_ПослеКопированияИндексногоФайла", ЭтаФорма), 
			КонсольКода_КаталогИсходников + "index.html", 
			КонсольКода_ИндексныйФайл);
	Исключение
		КонсольКода_ВывестиОшибку("Не удалось извлечь исходники" + Символы.ПС + ОписаниеОшибки(), Истина);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольКода_ЗакрытьКонсоль()
	
	Если НЕ Объект.ПоказыватьКод Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонсольКода_ИндексныйФайл) Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения(
			"КонсольКода_ПослеУдаленияИндексногоФайла", ЭтаФорма), 
			КонсольКода_ИндексныйФайл);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольКода_ПослеУдаленияИндексногоФайла(ДопПараметры) Экспорт
	
	КонсольКода_ИндексныйФайл = "";
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольКода_ЗагрузитьИзТекстСодержания()
	
	Если НЕ Объект.ПоказыватьКод Тогда
		Возврат;
	КонецЕсли;
	
	Позиция = 1;
	УчитыватьОтступПервойСтроки = Ложь;
	
	Элементы.КонсольКода_ПолеHTML.Документ.defaultView.setText(
		Объект.ТекстСодержанияКод, 
		Позиция, 
		УчитыватьОтступПервойСтроки);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолеHTMLПриИзменении(Элемент)
	//Объект.ТекстСодержания = Элементы.ПолеHTML.Документ.defaultView.getText();
КонецПроцедуры

&НаКлиенте
Процедура КонсольКода_ПолеHTMLДокументСформирован(Элемент)
	КонсольКода_ЗагрузитьИзТекстСодержания();
КонецПроцедуры

// +SZ #277 16.01.2021
&НаКлиенте
Процедура КомандаРазрешитьРедактирование(Команда)
	
	Элементы.Содержание.ТолькоПросмотр = НЕ Элементы.Содержание.ТолькоПросмотр;
	
КонецПроцедуры // -SZ #277 16.01.2021

&НаКлиенте
Процедура КомандаМетки(Команда)            

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("КомандыМеткиПриЗавершении", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("МеткиЗадачи", ПолучитьВыбранныеМеткиЗадачи());

	ОткрытьФорму("Справочник.узМеткиЗадач.Форма.ФормаМетки", ПараметрыФормы, ЭтотОбъект, , , , ОповещениеОЗакрытии);
	
КонецПроцедуры     

&НаСервере
Функция ПолучитьВыбранныеМеткиЗадачи() 
	
	МеткиЗадачи = Новый Массив();

	Для Каждого СтрокаДопРеквизитыМножественные Из Объект.ДопРеквизитыМножественные Цикл
		
		Если СтрокаДопРеквизитыМножественные.Свойство <> Свойство_МеткаЗадачи Тогда
			Продолжить;
		КонецЕсли;
		
		МеткиЗадачи.Добавить(СтрокаДопРеквизитыМножественные.Значение);		
		
	КонецЦикла;
	
	Возврат МеткиЗадачи;
	
КонецФункции 

&НаКлиенте
Процедура КомандыМеткиПриЗавершении(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	Конецесли;	
	
	МеткиСписок = РезультатЗакрытия;
	
	СтрокиКУдалению = Новый Массив();
	
	Для Каждого ЭлСпискаМетки Из МеткиСписок Цикл
		
		МеткаСсылка = ЭлСпискаМетки.Значение;
		
		ЕстьМеткаВОбъекте = Ложь;
		
		Для Каждого СтрокаДопРеквизитыМножественные Из Объект.ДопРеквизитыМножественные Цикл
			
			МеткаВОбъекте = СтрокаДопРеквизитыМножественные.Значение;
			
			Если СтрокаДопРеквизитыМножественные.Свойство <> Свойство_МеткаЗадачи Тогда
				Продолжить;
			КонецЕсли;			
			
			Если МеткаВОбъекте <> МеткаСсылка Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьМеткаВОбъекте = Истина;
			
			Если НЕ ЭлСпискаМетки.Пометка Тогда
				СтрокиКУдалению.Добавить(СтрокаДопРеквизитыМножественные);	
			КонецЕсли;
				
		КонецЦикла;
		
		Если ЭлСпискаМетки.Пометка 
			И НЕ ЕстьМеткаВОбъекте Тогда
			
			СтрокаДопРеквизитыМножественные = Объект.ДопРеквизитыМножественные.Добавить();	
			СтрокаДопРеквизитыМножественные.Свойство = Свойство_МеткаЗадачи;
			СтрокаДопРеквизитыМножественные.КлючСтроки = "" + Новый УникальныйИдентификатор;
			СтрокаДопРеквизитыМножественные.Значение = МеткаСсылка;
			
		КонецЕсли;  
		
	КонецЦикла;

	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		Объект.ДопРеквизитыМножественные.Удалить(СтрокаКУдалению);		
	КонецЦикла;		
	
	ОбновитьВидимостьКомандаМетки();
	ОбновитьОтображениеМетокЗадачи();
	
	Модифицированность = Истина;
	
КонецПроцедуры 

#КонецОбласти 

