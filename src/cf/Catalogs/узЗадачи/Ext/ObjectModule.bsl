
Процедура ПередЗаписью(Отказ)
	
	//+ УрянскийД 2020-06-22 (начало)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	//- УрянскийД 2020-06-22 (окончание)
	
	Если Отказ Тогда
		Возврат;
	Конецесли;
	
	Если ДополнительныеСвойства.Свойство("узЭтоОбработка") Тогда
		Возврат;
	Конецесли;
		
	Если НЕ ЗначениеЗаполнено(ДатаСоздания) Тогда
		ДатаСоздания = ТекущаяДатаСеанса();		
	Конецесли;
	Если НЕ ЗначениеЗаполнено(ДатаНачалаРаботПоЗадаче) Тогда
		ДатаНачалаРаботПоЗадаче = ДатаСоздания;		
	Конецесли;	
	
	Если ЭтоНовый()
		И НЕ ЗначениеЗаполнено(Родитель) Тогда
		ЭтоОсновнаяЗадача = Истина;
	Конецесли;
	
	ОсновнаяЗадача = ПолучитьОсновнуюЗадачу(Родитель);  
	
	Если ЭтоОсновнаяЗадача Тогда
		Если ЗначениеЗаполнено(ОсновнаяЗадача) Тогда
			Проект = ОсновнаяЗадача.Проект;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Проект) Тогда
			Проект = Справочники.узПроекты.СоздатьПроект(Наименование);
		КонецЕсли;
	Иначе
		Проект = Неопределено;
	КонецЕсли;	
	
	ЗаполнитьСтатусЗадачиЕслиОнНеЗаполнен(Отказ);
	
	// [+] #285 Павлюков С.Ю. 2024-04-20
	ПроверитьДоступностьСменыСтатуса(Статус, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// [-] #285 Павлюков С.Ю. 2024-04-20
	
	РезультатПроверкиWIPЛимит = ПроверитьWIPЛимит();
	Если РезультатПроверкиWIPЛимит.ПревышенWIPЛимит Тогда
		Отказ = Истина;
		Сообщить(РезультатПроверкиWIPЛимит.ТекстОшибки);
		Возврат;
	Конецесли;		
	
	пЕстьПодчиненныеЗадачи = ЕстьПодчиненныеЗадачи(Ссылка);	
	
	УказаноСвойство_узЭтоЗаписьРодителя = ДополнительныеСвойства.Свойство("узЭтоЗаписьРодителя");
	
	Если НЕ УказаноСвойство_узЭтоЗаписьРодителя Тогда
		ЕстьПодчиненныеЗадачи = пЕстьПодчиненныеЗадачи;
	Конецесли;	
	
	Если пЕстьПодчиненныеЗадачи
		И НЕ УказаноСвойство_узЭтоЗаписьРодителя Тогда
		ИзменитьОсновнуюЗадачуДляВсехПодчиненныхЗадач();
	Конецесли;
	
	НовыйРодитель = Родитель;
	Если ЗначениеЗаполнено(НовыйРодитель)
		И НЕ НовыйРодитель.ЕстьПодчиненныеЗадачи Тогда
		НовыйРодительОбъект = НовыйРодитель.ПолучитьОбъект();
		НовыйРодительОбъект.ЕстьПодчиненныеЗадачи = Истина;
		НовыйРодительОбъект.ДополнительныеСвойства.Вставить("узЭтоЗаписьРодителя");
		НовыйРодительОбъект.Записать();
	Конецесли;
	Если НЕ ЭтоНовый() Тогда
		СтарыйРодитель = Ссылка.ПолучитьОбъект().Родитель;
		Если СтарыйРодитель <> НовыйРодитель Тогда
			пЕстьПодчиненныеЗадачи = ЕстьПодчиненныеЗадачи(СтарыйРодитель,Ссылка);
			Если ЗначениеЗаполнено(СтарыйРодитель)
				И пЕстьПодчиненныеЗадачи <> СтарыйРодитель.ЕстьПодчиненныеЗадачи Тогда
				СтарыйРодительОбъект = СтарыйРодитель.ПолучитьОбъект();
				СтарыйРодительОбъект.ЕстьПодчиненныеЗадачи = пЕстьПодчиненныеЗадачи;
				СтарыйРодительОбъект.ДополнительныеСвойства.Вставить("узЭтоЗаписьРодителя");
				СтарыйРодительОбъект.Записать();
			Конецесли;
		Конецесли;
	Конецесли;	
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	ДатаПоследнегоИзменения = ТекущаяДатаСеанса();
	АвторПоследнегоИзменения = ТекПользователь;

	СтарыйСтатус = Ссылка.Статус;
	
	СтарыйВидСтатуса = СтарыйСтатус.ВидСтатуса;
	НовыйВидСтатуса = Статус.ВидСтатуса;
	ВидСтатуса_Готово = ПредопределенноеЗначение("Справочник.узВидыСтатусов.Готово");
	ВидСтатуса_ВРаботе = ПредопределенноеЗначение("Справочник.узВидыСтатусов.ВРаботе");
	Если НовыйВидСтатуса = ВидСтатуса_Готово
		И СтарыйВидСтатуса <> ВидСтатуса_Готово Тогда
		ДатаВыполнения = ТекущаяДатаСеанса();	
	Конецесли;
	Если НовыйВидСтатуса <> ВидСтатуса_Готово Тогда
		Если ЗначениеЗаполнено(ДатаВыполнения) Тогда
			ДатаВыполнения = Неопределено; 
		Конецесли;			
	Конецесли;
	Если НовыйВидСтатуса = ВидСтатуса_ВРаботе
		ИЛИ НовыйВидСтатуса = ВидСтатуса_Готово Тогда
		Если НЕ ЗначениеЗаполнено(Исполнитель) Тогда
			Исполнитель = ТекПользователь; 
		Конецесли;
	Конецесли;
	
	ИзмененЦветПоУмолчанию = ПолучитьИзмененЦветПоУмолчанию();
	
	Если Удалить_ФактическиеЧасы.Количество() > 0 Тогда
		Удалить_ЧасыФакт = Удалить_ФактическиеЧасы.Итог("ЧасыФакт");
	Конецесли;
	
	СобытияВИстории = ОбновитьИсторию();
	
	ДополнительныеСвойства.Вставить("СобытияВИстории",СобытияВИстории);
	
	//+ УрянскийД 2020-06-22 (начало)
	КоличествоЗадачЧекЛиста = ЭтотОбъект.Комментарии.Количество();
	КоличествоВыполненныхЗадачЧекЛиста = ЭтотОбъект.Комментарии.Итог("Выполнено");
	//- УрянскийД 2020-06-22 (окончание)
	
	ПоследнийКомментарий = "";
	Если КоличествоЗадачЧекЛиста > 0 Тогда
		СтрокаПоследнийКомментарий = ЭтотОбъект.Комментарии[КоличествоЗадачЧекЛиста - 1];
		ПоследнийКомментарий = СтрокаПоследнийКомментарий.Комментарий;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтатусЗадачиЕслиОнНеЗаполнен(Отказ)
	Перем пНовыйСтатус;
	
	Если ЗначениеЗаполнено(Статус) Тогда
		Возврат;
	Конецесли;	
	
	пНовыйСтатус = ПредопределенноеЗначение("Справочник.узСтатусыЗадачи.Зарегистрирована");
	
	СтатусЗадачиПоУмолчанию = Справочники.узКонстанты.ПолучитьЗначениеКонстанты(
		"СтатусЗадачиПоУмолчанию",
		Тип("СправочникСсылка.узСтатусыЗадачи"),
		Ложь,Ложь);
		
	Если ЗначениеЗаполнено(СтатусЗадачиПоУмолчанию) Тогда
		пНовыйСтатус = СтатусЗадачиПоУмолчанию;		
	Конецесли;	
		
	Статус = пНовыйСтатус;
КонецПроцедуры //ЗаполнитьСтатусЗадачи(Отказ)

Функция ПолучитьИзмененЦветПоУмолчанию() Экспорт
	
	пИзмененЦветПоУмолчанию = Ложь;
	
	ЦветУЗадачи = ЦветЗадачи.Получить();
	//ЦветПоУмолчанию = ЦветаСтиля.узЦветЧерный;
	ЦветПоУмолчанию = узОбщийМодульСервер.ЦветаСтиляБезЦвета();
	
	Если ЦветУЗадачи <> ЦветПоУмолчанию Тогда
		пИзмененЦветПоУмолчанию = Истина;	
	Конецесли;
	
	Возврат пИзмененЦветПоУмолчанию;	
КонецФункции

Функция ОбновитьИсторию()
	СтарыйИсполнитель = Ссылка.Исполнитель;
	СтарыйСтатус = Ссылка.Статус;
	
	СобытияВИстории = Новый Структура();
	СобытияВИстории.Вставить("СтарыйИсполнитель",СтарыйИсполнитель);
	СобытияВИстории.Вставить("СтарыйСтатус",СтарыйСтатус);
	
	ТЗСобытияВИсторииДляУведомлений = Новый ТаблицаЗначений;
	ТЗСобытияВИсторииДляУведомлений.Колонки.Добавить("ВидСобытия",Новый ОписаниеТипов("ПеречислениеСсылка.узВидыСобытий"));
	ТЗСобытияВИсторииДляУведомлений.Колонки.Добавить("МассивИзмененнийПоКомментариям",Новый ОписаниеТипов("Массив"));
	
	ДатаСобытия = ТекущаяДатаСеанса();
	пАвтор = Пользователи.ТекущийПользователь();
	
	ПараметрыДляИстории = Новый Структура();
	ПараметрыДляИстории.Вставить("ДатаСобытия",ДатаСобытия);
	ПараметрыДляИстории.Вставить("Автор",пАвтор);
	ПараметрыДляИстории.Вставить("НовыйСтатус",Статус);
	
	Если ЭтоНовый() Тогда
		ВидСобытия = ПредопределенноеЗначение("Перечисление.узВидыСобытий.ДобавленаЗадача");
		
		Событие = узОбщийМодульСервер.ПолучитьТекстСообщения("Добавлена задача",9);
		
		ПараметрыДляИстории.Вставить("ВидСобытия",ВидСобытия);
		ПараметрыДляИстории.Вставить("Событие",Событие);
		ДобавитьВИсторию(ПараметрыДляИстории,ТЗСобытияВИсторииДляУведомлений);
		
		ДобавитьВИсториюСтатусов();
		СобытияВИстории.Вставить("ТЗСобытияВИсторииДляУведомлений",ТЗСобытияВИсторииДляУведомлений);
		Возврат СобытияВИстории;
	Конецесли;	
	
	
	Если Исполнитель <> СтарыйИсполнитель Тогда
		ВидСобытия = ПредопределенноеЗначение("Перечисление.узВидыСобытий.НовыйИсполнитель");
		Если НЕ ЗначениеЗаполнено(СтарыйИсполнитель) Тогда
			пТекстСообщения = узОбщийМодульСервер.ПолучитьТекстСообщения("Указан исполнитель [%1]",10);
			Событие = СтрШаблон(пТекстСообщения,Исполнитель);
		Иначе
			пТекстСообщения = узОбщийМодульСервер.ПолучитьТекстСообщения("Изменен исполнитель с [%1] на [%2]",11);
			Событие = СтрШаблон(пТекстСообщения,СтарыйИсполнитель,Исполнитель);
			
			Событие = "Изменен исполнитель с ["+СтарыйИсполнитель+"] на [" + Исполнитель+"]";
		Конецесли;
		
		ПараметрыДляИстории.Вставить("ВидСобытия",ВидСобытия);
		ПараметрыДляИстории.Вставить("Событие",Событие);
		ДобавитьВИсторию(ПараметрыДляИстории,ТЗСобытияВИсторииДляУведомлений);
		
		ДобавитьВИсториюСтатусов();
	Конецесли;
	
	СтарыйСтатус = Ссылка.Статус;
	Если Статус <> СтарыйСтатус Тогда
		ДобавитьВИсториюСтатусов();
		
		ВидСобытия = ПредопределенноеЗначение("Перечисление.узВидыСобытий.ИзменениеСтатуса");
		
		пТекстСообщения = узОбщийМодульСервер.ПолучитьТекстСообщения("Изменен статус с [%1] на [%2]",12);
		Событие = СтрШаблон(пТекстСообщения,СтарыйСтатус,Статус);
		
		ПараметрыДляИстории.Вставить("ВидСобытия",ВидСобытия);
		ПараметрыДляИстории.Вставить("Событие",Событие);
		ДобавитьВИсторию(ПараметрыДляИстории,ТЗСобытияВИсторииДляУведомлений);
		
		ВидСтатуса_Готово = ПредопределенноеЗначение("Справочник.узВидыСтатусов.Готово");
		Если СтарыйСтатус.ВидСтатуса <> ВидСтатуса_Готово
			И Статус.ВидСтатуса = ВидСтатуса_Готово Тогда
			
			ВидСобытия_ВыполненаЗадача = ПредопределенноеЗначение("Перечисление.узВидыСобытий.ВыполненаЗадача");
			ПараметрыДляИстории.Вставить("ВидСобытия",ВидСобытия_ВыполненаЗадача);
			ПараметрыДляИстории.Вставить("Событие","Выполнена задача");
			ДобавитьВИсторию(ПараметрыДляИстории,ТЗСобытияВИсторииДляУведомлений);
		Конецесли;		
	Конецесли;
	
	
	ОбновитьИсториюПоКомментариям(ПараметрыДляИстории,ТЗСобытияВИсторииДляУведомлений);
	
	СтароеНаименование = СокрЛП(Ссылка.Наименование);
	СтароеТекстСодержания = СокрЛП(Ссылка.ТекстСодержания);
	Если СокрЛП(Наименование) <> СтароеНаименование
		ИЛИ СокрЛП(ТекстСодержания) <> СтароеТекстСодержания Тогда
		ВидСобытия = ПредопределенноеЗначение("Перечисление.узВидыСобытий.ИзмененоОписаниеЗадачи");
		
		Событие = узОбщийМодульСервер.ПолучитьТекстСообщения("Изменено описание задачи",13);
		
		ПараметрыДляИстории.Вставить("ВидСобытия",ВидСобытия);
		ПараметрыДляИстории.Вставить("Событие",Событие);
		ДобавитьВИсторию(ПараметрыДляИстории,ТЗСобытияВИсторииДляУведомлений);
	Конецесли;
	
	История.Сортировать("ДатаСобытия УБЫВ");
	
	СобытияВИстории.Вставить("ТЗСобытияВИсторииДляУведомлений",ТЗСобытияВИсторииДляУведомлений);
	Возврат СобытияВИстории;
	
	
КонецФункции

Процедура ОбновитьИсториюПоКомментариям(ПараметрыДляИстории,ТЗСобытияВИсторииДляУведомлений) 
	МассивИзмененнийПоКомментариям = Новый Массив();
	
	РезультатЗапроса = ОбновитьИсториюПоКомментариям_ПолучитьРезультатЗапроса();	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Конецесли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ЕстьИзмененныеКомментарии = Ложь;
	ЕстьДобавленныеКомментарии = Ложь;
	Пока Выборка.Следующий() Цикл
		ТекстИзменения = "";
		Если НЕ ЗначениеЗаполнено(Выборка.КлючСтрокиСтарый) Тогда
			пТекстСообщения = узОбщийМодульСервер.ПолучитьТекстСообщения("Новый комментарий: %1",14);
			ТекстИзменения = СтрШаблон(пТекстСообщения,Выборка.КомментарийНовый);
			
			//МассивЗадач = Новый Массив;		
			//МассивЗадач.Добавить(Ссылка);
			//
			//ДопПараметры = Новый Структура();		
			//ДопПараметры.Вставить("Пользователь",Выборка.АвторНовый);		
			//ДопПараметры.Вставить("МассивЗадач", МассивЗадач);
			//РегистрыСведений.узНаблюдателиЗаЗадачами.СледитьЗаЗадачей(ДопПараметры);
			ДобавитьАвтораКомментарияВНаблюдателиЗаЗадачей(Выборка.АвторНовый);
			
			ЕстьДобавленныеКомментарии = Истина;
		ИначеЕсли СокрЛП(Выборка.КомментарийСтарый) <> СокрЛП(Выборка.КомментарийНовый) Тогда 

			пТекстСообщения = узОбщийМодульСервер.ПолучитьТекстСообщения("Изменили комментарий, новый текст: %1",15);
			ТекстИзменения = СтрШаблон(пТекстСообщения,Выборка.КомментарийНовый);
			
			ЕстьИзмененныеКомментарии = Истина;
		Конецесли;		
		
		Если НЕ ЗначениеЗаполнено(ТекстИзменения) Тогда
			Продолжить;
		Конецесли;
		
		МассивИзмененнийПоКомментариям.Добавить(ТекстИзменения);
	КонецЦикла;
	
		
	
	Если ЕстьИзмененныеКомментарии Тогда
		ВидСобытия = ПредопределенноеЗначение("Перечисление.узВидыСобытий.ИзмененКомментарий");
		
		Событие = узОбщийМодульСервер.ПолучитьТекстСообщения("Изменили комментарии",16);
		
		ПараметрыДляИстории.Вставить("ВидСобытия",ВидСобытия);
		ПараметрыДляИстории.Вставить("Событие",Событие);
		ПараметрыДляИстории.Вставить("МассивИзмененнийПоКомментариям",МассивИзмененнийПоКомментариям);
		ДобавитьВИсторию(ПараметрыДляИстории,ТЗСобытияВИсторииДляУведомлений);
		
	ИначеЕсли ЕстьДобавленныеКомментарии Тогда
		ВидСобытия = ПредопределенноеЗначение("Перечисление.узВидыСобытий.ДобавленКомментарий");

		Событие = узОбщийМодульСервер.ПолучитьТекстСообщения("Добавлен новый комментарий",17);
		
		ПараметрыДляИстории.Вставить("ВидСобытия",ВидСобытия);
		ПараметрыДляИстории.Вставить("Событие",Событие);
		ПараметрыДляИстории.Вставить("МассивИзмененнийПоКомментариям",МассивИзмененнийПоКомментариям);
		ДобавитьВИсторию(ПараметрыДляИстории,ТЗСобытияВИсторииДляУведомлений);
	Конецесли;
КонецПроцедуры

Процедура ДобавитьАвтораКомментарияВНаблюдателиЗаЗадачей(пПользователь) 
	
	Если НЕ ЗначениеЗаполнено(пПользователь) Тогда
		Возврат;
	Конецесли;
	
	Если НЕ пПользователь.узАвтоматическиСтановитсяНаблюдателемЗаЗадачейЕслиДобавилКомментарий Тогда
		Возврат;
	Конецесли;
	
	МассивЗадач = Новый Массив;		
	МассивЗадач.Добавить(Ссылка);
	
	ДопПараметры = Новый Структура();		
	ДопПараметры.Вставить("Пользователь",пПользователь);		
	ДопПараметры.Вставить("МассивЗадач", МассивЗадач);
	РегистрыСведений.узНаблюдателиЗаЗадачами.СледитьЗаЗадачей(ДопПараметры);
	
КонецПроцедуры 

Функция ОбновитьИсториюПоКомментариям_ПолучитьРезультатЗапроса() 
	ТЗСтарыеКомментарии = Ссылка.Комментарии;
	ТЗНовыеКомментарии = Комментарии;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	узЗадачиКомментарии.КлючСтроки,
	|	узЗадачиКомментарии.ДатаКомментария КАК ДатаКомментарияСтарый,
	|	узЗадачиКомментарии.Автор КАК АвторСтарый,
	|	узЗадачиКомментарии.Комментарий КАК КомментарийСтарый,
	|	узЗадачиКомментарии.Выполнено КАК ВыполненоСтарый
	|ПОМЕСТИТЬ ВТСтарыеКомментарии
	|ИЗ
	|	Справочник.узЗадачи.Комментарии КАК узЗадачиКомментарии
	|ГДЕ
	|	узЗадачиКомментарии.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗНовыеКомментарии.КлючСтроки,
	|	ТЗНовыеКомментарии.ДатаКомментария КАК ДатаКомментарияНовый,
	|	ТЗНовыеКомментарии.Автор КАК АвторНовый,
	|	ТЗНовыеКомментарии.Комментарий КАК КомментарийНовый,
	|	ТЗНовыеКомментарии.Выполнено КАК ВыполненоНовый
	|ПОМЕСТИТЬ ВТНовыеКомментарии
	|ИЗ
	|	&ТЗНовыеКомментарии КАК ТЗНовыеКомментарии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтарыеКомментарии.КлючСтроки КАК КлючСтрокиСтарый,
	|	ВТСтарыеКомментарии.ДатаКомментарияСтарый,
	|	ВТСтарыеКомментарии.АвторСтарый,
	|	ВТСтарыеКомментарии.КомментарийСтарый,
	|	ВТСтарыеКомментарии.ВыполненоСтарый,
	|	ВТСтарыеКомментарии.КлючСтроки КАК КлючСтрокиНовый,
	|	ВТНовыеКомментарии.ДатаКомментарияНовый,
	|	ВТНовыеКомментарии.АвторНовый,
	|	ВТНовыеКомментарии.КомментарийНовый,
	|	ВТНовыеКомментарии.ВыполненоНовый
	|ИЗ
	|	ВТСтарыеКомментарии КАК ВТСтарыеКомментарии
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТНовыеКомментарии КАК ВТНовыеКомментарии
	|		ПО ВТСтарыеКомментарии.КлючСтроки = ВТНовыеКомментарии.КлючСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТЗНовыеКомментарии", ТЗНовыеКомментарии);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;
КонецФункции 

Процедура ДобавитьВИсториюСтатусов() Экспорт
	
	ДобавитьНовуюСтроку = Истина;
	ВсегоСтрок = ИсторияСтатусов.Количество();
	Если ВсегоСтрок > 0 Тогда
		ПоследняяСтрокаИсторияСтатусов = ИсторияСтатусов[ВсегоСтрок-1];
		Если ПоследняяСтрокаИсторияСтатусов.Исполнитель = Исполнитель 
			И ПоследняяСтрокаИсторияСтатусов.Статус = Статус Тогда
			ДобавитьНовуюСтроку = Ложь;
		Конецесли;
	Конецесли;
	
	Если НЕ ДобавитьНовуюСтроку Тогда
		Возврат;
	Конецесли;
	
	ПроставитьДатуОкончанияДляСтарогоСтатуса();	
	
	СтрокаИсторияСтатусов = ИсторияСтатусов.Добавить();
	СтрокаИсторияСтатусов.ДатаНачала = ТекущаяДатаСеанса();
	СтрокаИсторияСтатусов.Исполнитель = Исполнитель;
	СтрокаИсторияСтатусов.Статус = Статус;
КонецПроцедуры 

Процедура ПроставитьДатуОкончанияДляСтарогоСтатуса()
	ВсегоСтрок = ИсторияСтатусов.Количество();
	Если ВсегоСтрок = 0 Тогда
		Возврат;
	Конецесли;
	
	СтрокаИсторияСтатусов = ИсторияСтатусов[ВсегоСтрок-1];
	СтрокаИсторияСтатусов.ДатаОкончания = ТекущаяДатаСеанса();
КонецПроцедуры 

Процедура ДобавитьВИсторию(ПараметрыДляИстории,ТЗСобытияВИсторииДляУведомлений)
	
	СтрокаИстория = История.Добавить();
	СтрокаИстория.ДатаСобытия = ПараметрыДляИстории.ДатаСобытия;
	СтрокаИстория.Автор = ПараметрыДляИстории.Автор;
	СтрокаИстория.ВидСобытия = ПараметрыДляИстории.ВидСобытия;
	СтрокаИстория.Событие = ПараметрыДляИстории.Событие;
	
	Если ПараметрыДляИстории.НовыйСтатус = ПредопределенноеЗначение("Справочник.узСтатусыЗадачи.Архив") Тогда
		Возврат;
	Конецесли;
	
	СтрокаТЗСобытияВИсторииДляУведомлений = ТЗСобытияВИсторииДляУведомлений.Добавить();
	СтрокаТЗСобытияВИсторииДляУведомлений.ВидСобытия = ПараметрыДляИстории.ВидСобытия;
	СтрокаТЗСобытияВИсторииДляУведомлений.МассивИзмененнийПоКомментариям = Новый Массив();
	Если ПараметрыДляИстории.Свойство("МассивИзмененнийПоКомментариям") Тогда
		СтрокаТЗСобытияВИсторииДляУведомлений.МассивИзмененнийПоКомментариям = ПараметрыДляИстории.МассивИзмененнийПоКомментариям;
	Конецесли;
КонецПроцедуры 

Процедура ОтправитьУведомлениеНаПочту(СобытияВИстории) Экспорт
	
	НастройкиСобытий = Справочники.узЗадачи.ПолучитьНастройкиСобытий();
	
	ОтправитьУведомлениеНаПочтуИсполнителю(НастройкиСобытий,СобытияВИстории);
	
	ОтправитьУведомлениеНаПочтуСтаромуИсполнителю(НастройкиСобытий,СобытияВИстории);
	
	ОтправитьУведомлениеНаПочтуНаблюдателям(НастройкиСобытий,СобытияВИстории);
	
	ОтправитьУведомлениеНаПочтуКонтрагентам(НастройкиСобытий,СобытияВИстории);
КонецПроцедуры 

Процедура ОтправитьУведомлениеНаПочтуИсполнителю(НастройкиСобытий,СобытияВИстории)
	Если НЕ ЗначениеЗаполнено(Исполнитель) Тогда
		Возврат;
	Конецесли;
	
	//+ #190 SZ 16.03.2020
	// проверка перенесена
	//Если Исполнитель.узНеОтправлятьУведомленияНаПочту Тогда
	//	Возврат;
	//Конецесли;
	//- #190 SZ 16.03.2020
	
	
	ТекПользователь = Пользователи.ТекущийПользователь(); 
	
	//+ #190 SZ 16.03.2020
	// проверяем у Текпользователя признак узОтправлятьУведомленияОДействияхПользователяЕмуНаПочту
	//
	//Если ТекПользователь = Исполнитель Тогда			
	//	Возврат;
	//Конецесли;	
	Если НЕ ЭтоВходящееПисьмо(СобытияВИстории)
		И ТекПользователь = Исполнитель 
		И НЕ ТекПользователь.узОтправлятьУведомленияОДействияхПользователяЕмуНаПочту Тогда			
		Возврат;
	Конецесли;	
	//- #190 SZ 16.03.2020
	
	ТЗСобытияВИсторииДляУведомлений = СобытияВИстории.ТЗСобытияВИсторииДляУведомлений;
	ВсегоСобытий = ТЗСобытияВИсторииДляУведомлений.Количество();
	Если ВсегоСобытий = 0 Тогда
		Возврат;
	Конецесли;
	
	ВТДопПараметры = Новый Структура();
	ВТДопПараметры.Вставить("ЭтоОтправкаИсполнителю",Истина);
	ВТДопПараметры.Вставить("НастройкиСобытий",НастройкиСобытий);
	РезультатФункции = ПолучитьТемаПисьмаСобытие(ВТДопПараметры,СобытияВИстории);
	
	Если НЕ РезультатФункции.НеобходимоОтправитьУведомление Тогда
		Возврат;
	КонецЕсли;	
	
	//+ГЕНА
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ВажностьЗадачи",Важность);
	ДопПараметры.Вставить("ПользовательКому",Исполнитель);
	ПолучитьПараметрыПисьма(РезультатФункции, ДопПараметры);
	//-ГЕНА
	
	//+ #190 SZ 16.03.2020
	// Отправлем почту если это разрешено реквизитом узНеОтправлятьУведомленияНаПочту
	//узОбщийМодульСервер.ОтправитьПисьмо(ДопПараметры);
	Если НЕ Исполнитель.узНеОтправлятьУведомленияНаПочту Тогда
		узОбщийМодульСервер.ОтправитьПисьмо(ДопПараметры);
	КонецЕсли;
	//- #190 SZ 16.03.2020
	
	//+ #240 Пиганов Г.В. 2020-09-08
	// +++ 79Vlad  20.12.2018
	//узТелеграммСервер.ВыполнитьРассылку(ДопПараметры);
	// --- 79Vlad  20.12.2018
	узТелеграмБот.ОтправитьСообщение(ДопПараметры.ТекстПисьма, Исполнитель);
	//- #240 Пиганов Г.В. 2020-09-08
	
	
КонецПроцедуры 

Функция ЭтоВходящееПисьмо(СобытияВИстории) 
	пЭтоВходящееПисьмо = Ложь;
	
	пТЗСобытияВИсторииДляУведомлений = СобытияВИстории.ТЗСобытияВИсторииДляУведомлений;
	
	ВидСобытия_ВходящееПисьмо = ПредопределенноеЗначение("Перечисление.узВидыСобытий.ВходящееПисьмо");
	
	Для каждого СтрокаТЗСобытияВИсторииДляУведомлений из пТЗСобытияВИсторииДляУведомлений Цикл
		
		Если СтрокаТЗСобытияВИсторииДляУведомлений.ВидСобытия = ВидСобытия_ВходящееПисьмо Тогда
			пЭтоВходящееПисьмо = Истина;
			Возврат пЭтоВходящееПисьмо;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат пЭтоВходящееПисьмо;
	
КонецФункции 

Процедура ОтправитьУведомлениеНаПочтуСтаромуИсполнителю(НастройкиСобытий,СобытияВИстории)
	СтарыйИсполнитель = СобытияВИстории.СтарыйИсполнитель;
	
	Если НЕ ЗначениеЗаполнено(СтарыйИсполнитель) Тогда
		Возврат;
	Конецесли;
	
	//+ #190 SZ 16.03.2020
	// признак будем проверять при отправлке почты
	//Если СтарыйИсполнитель.узНеОтправлятьУведомленияНаПочту Тогда
	//	Возврат;
	//Конецесли;
	//- #190 SZ 16.03.2020
	
	ТекПользователь = Пользователи.ТекущийПользователь(); 
	
	//+ #190 SZ 16.03.2020
	// проверяем признак узОтправлятьУведомленияОДействияхПользователяЕмуНаПочту
	//Если ТекПользователь = СтарыйИсполнитель Тогда			
	//	Возврат;
	//Конецесли;	
	
	Если ТекПользователь = СтарыйИсполнитель 
		И НЕ ТекПользователь.узОтправлятьУведомленияОДействияхПользователяЕмуНаПочту Тогда			
		Возврат;
	Конецесли;	
	//- #190 SZ 16.03.2020
	
	Если Исполнитель = СтарыйИсполнитель Тогда
		Возврат;
	КонецЕсли;
	
	ТЗСобытияВИсторииДляУведомлений = СобытияВИстории.ТЗСобытияВИсторииДляУведомлений;
	ВсегоСобытий = ТЗСобытияВИсторииДляУведомлений.Количество();
	Если ВсегоСобытий = 0 Тогда
		Возврат;
	Конецесли;
	
	ВТДопПараметры = Новый Структура();
	ВТДопПараметры.Вставить("ЭтоОтправкаСтаромуИсполнителю",Истина);
	ВТДопПараметры.Вставить("НастройкиСобытий",НастройкиСобытий);
	РезультатФункции = ПолучитьТемаПисьмаСобытие(ВТДопПараметры,СобытияВИстории);		
		
	Если НЕ РезультатФункции.НеобходимоОтправитьУведомление Тогда
		Возврат;
	КонецЕсли;	
	
	//+ГЕНА
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ВажностьЗадачи",Важность);
	ДопПараметры.Вставить("ПользовательКому",СтарыйИсполнитель);
	ПолучитьПараметрыПисьма(РезультатФункции, ДопПараметры);
	//-ГЕНА
	
	//+ #190 SZ 16.03.2020
	// Отправлем почту если это разрешено реквизитом узНеОтправлятьУведомленияНаПочту
	//
	//узОбщийМодульСервер.ОтправитьПисьмо(ДопПараметры);
	Если НЕ Исполнитель.узНеОтправлятьУведомленияНаПочту Тогда
		узОбщийМодульСервер.ОтправитьПисьмо(ДопПараметры);
	КонецЕсли;
	//- #190 SZ 16.03.2020
    
	//+ #240 Пиганов Г.В. 2020-09-08
	// +++ 79Vlad  20.12.2018
	//узТелеграммСервер.ВыполнитьРассылку(ДопПараметры);
	// --- 79Vlad  20.12.2018
	узТелеграмБот.ОтправитьСообщение(ДопПараметры.ТекстПисьма, СтарыйИсполнитель);
	//- #240 Пиганов Г.В. 2020-09-08
	
	
КонецПроцедуры 

Процедура ОтправитьУведомлениеНаПочтуНаблюдателям(НастройкиСобытий,СобытияВИстории)
	ТЗСобытияВИсторииДляУведомлений = СобытияВИстории.ТЗСобытияВИсторииДляУведомлений;
	ВсегоСобытий = ТЗСобытияВИсторииДляУведомлений.Количество();
	Если ВсегоСобытий = 0 Тогда
		Возврат;
	Конецесли;
	
	МассивНаблюдателей = ПолучитьМассивНаблюдателей();
	Если МассивНаблюдателей.Количество() = 0 Тогда
		Возврат;
	Конецесли;
	
		
	ВТДопПараметры = Новый Структура();
	ВТДопПараметры.Вставить("ЭтоОтправкаНаблюдателям",Истина);
	ВТДопПараметры.Вставить("НастройкиСобытий",НастройкиСобытий);
	РезультатФункции = ПолучитьТемаПисьмаСобытие(ВТДопПараметры,СобытияВИстории);	
		
	Если НЕ РезультатФункции.НеобходимоОтправитьУведомление Тогда		
		Возврат;
	КонецЕсли;	
	
	//+ГЕНА
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ВажностьЗадачи",Важность);
	ДопПараметры.Вставить("Статус",Статус);
	ДопПараметры.Вставить("МассивПользователейКому",МассивНаблюдателей);
	ПолучитьПараметрыПисьма(РезультатФункции, ДопПараметры);
	//-ГЕНА
	
	узОбщийМодульСервер.ОтправитьПисьмо(ДопПараметры);
	
	//+ #240 Пиганов Г.В. 2020-09-08
	//Павлюков
	//узТелеграммСервер.ВыполнитьРассылку(ДопПараметры);
	узТелеграмБот.ОтправитьСообщение(ДопПараметры.ТекстПисьма, МассивНаблюдателей);
	//- #240 Пиганов Г.В. 2020-09-08
	
КонецПроцедуры

Процедура ОтправитьУведомлениеНаПочтуКонтрагентам(НастройкиСобытий,СобытияВИстории)
	Если НЕ ЗначениеЗаполнено(Контрагент) ТОгда
		Возврат;
	Конецесли;
	
	Если Контрагент.узНеОтправлятьУведомленияНаПочту Тогда
		Возврат;
	Конецесли;	
	
	ЭтоОтправкаКонтрагентам = Истина;
	
	ТЗСобытияВИсторииДляУведомлений = СобытияВИстории.ТЗСобытияВИсторииДляУведомлений;
	ВсегоСобытий = ТЗСобытияВИсторииДляУведомлений.Количество();
	Если ВсегоСобытий = 0 Тогда
		Возврат;
	Конецесли;
	
	ВТДопПараметры = Новый Структура();
	ВТДопПараметры.Вставить("ЭтоОтправкаКонтрагентам",ЭтоОтправкаКонтрагентам);
	ВТДопПараметры.Вставить("НастройкиСобытий",НастройкиСобытий);
	РезультатФункции = ПолучитьТемаПисьмаСобытие(ВТДопПараметры,СобытияВИстории);	
		
	Если НЕ РезультатФункции.НеобходимоОтправитьУведомление Тогда		
		Возврат;
	КонецЕсли;	
	РезультатФункции.Вставить("ЭтоОтправкаКонтрагентам",ЭтоОтправкаКонтрагентам);
	
	//+ГЕНА
	// Получение индивидуального шаблона
	ШаблонСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "узШаблонСообщения");
	Если ЗначениеЗаполнено(ШаблонСообщения) Тогда
		РезультатФункции.Вставить("ШаблонСообщения", ШаблонСообщения);
	КонецЕсли;
	//-ГЕНА
	
	МассивКонтрагентов = Новый Массив();
	МассивКонтрагентов.Добавить(Контрагент);

	ТЗАдресаЭлектроннойПочты = узОбщийМодульСервер.ПолучитьТЗАдресаЭлектроннойПочтыПоМассивуКонтрагентов(
		МассивКонтрагентов);
	
	//+ГЕНА
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ВажностьЗадачи",Важность);
	ДопПараметры.Вставить("ТЗАдресаЭлектроннойПочты",ТЗАдресаЭлектроннойПочты); 
	ДопПараметры.Вставить("ЭтоОтправкаКонтрагентам",ЭтоОтправкаКонтрагентам);
	ДопПараметры.Вставить("Задача",Ссылка);
	ПолучитьПараметрыПисьма(РезультатФункции, ДопПараметры);
	//-ГЕНА
	
	пУчетнаяЗапись = ПолучитьУчетнуюЗаписьДляОтправкиУведомленийДляКонтрагентов();
	Если ЗначениеЗаполнено(пУчетнаяЗапись) Тогда
		ДопПараметры.Вставить("УчетнаяЗапись",пУчетнаяЗапись);
	Конецесли;

	узОбщийМодульСервер.ОтправитьПисьмо(ДопПараметры);			
	
КонецПроцедуры 

Функция ПолучитьУчетнуюЗаписьДляОтправкиУведомленийДляКонтрагентов() 
	Возврат узОбщийМодульСервер.ПолучитьУчетнуюЗаписьДляОтправкиУведомленийДляКонтрагентов();
КонецФункции 

Функция ПолучитьМассивНаблюдателей() 
	
	Возврат РегистрыСведений.узНаблюдателиЗаЗадачами.ПолучитьМассивНаблюдателей(Ссылка);
	
	//пЗадача = Ссылка;
	//
	//МассивНаблюдателей = Новый Массив();
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	узНаблюдателиЗаЗадачами.Пользователь
	//|ИЗ
	//|	РегистрСведений.узНаблюдателиЗаЗадачами КАК узНаблюдателиЗаЗадачами
	//|ГДЕ
	//|	узНаблюдателиЗаЗадачами.Задача = &Задача
	//|	И узНаблюдателиЗаЗадачами.Пользователь.узНеОтправлятьУведомленияНаПочту = ЛОЖЬ
	//|	И узНаблюдателиЗаЗадачами.Пользователь <> &Исполнитель";
	//
	//
	////+ #190 SZ 16.03.2020
	//// Убираем из запроса проверку на Текущего пользователя.
	//// Проверку сделаем в обработке результата запроса
	////
	////	|	И узНаблюдателиЗаЗадачами.Пользователь <> &ТекущийПользователь
	////
	////- #190 SZ 16.03.2020
	//
	//
	//ТекущийПользователь = Пользователи.ТекущийПользователь();
	////+ #190 SZ 16.03.2020
	//// Убираем из запроса проверку на Текущего пользователя.
	////
	////Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	////
	//// Проверку сделаем в обработке результата запроса
	////- #190 SZ 16.03.2020
	//
	//Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	//Запрос.УстановитьПараметр("Задача", пЗадача);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//	Выборка = РезультатЗапроса.Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		МассивНаблюдателей.Добавить(Выборка.Пользователь);
	//	КонецЦикла;	
	//Конецесли;
	//
	//Для каждого СтрокаНаблюдатели из Статус.Наблюдатели цикл
	//	Если МассивНаблюдателей.Найти(СтрокаНаблюдатели.Пользователь) <> Неопределено Тогда
	//		Продолжить;
	//	Конецесли;
	//	
	//	//+ #190 SZ 16.03.2020
	//	//Если СтрокаНаблюдатели.Пользователь = Пользователи.ТекущийПользователь() Тогда
	//	//	Продолжить;
	//	//Конецесли;
	//	Если СтрокаНаблюдатели.Пользователь = ТекущийПользователь 
	//		И НЕ СтрокаНаблюдатели.Пользователь.узОтправлятьУведомленияОДействияхПользователяЕмуНаПочту Тогда
	//		Продолжить;
	//	Конецесли;
	//	//- #190 SZ 16.03.2020
	//	
	//	//Павлюков - отсеем ненужных наблюдателей, у которых явно задано, за кем наблюдать
	//	Если Не СтрокаНаблюдатели.Контрагент.Пустая() 
	//		И Не пЗадача.Контрагент.Пустая()
	//		И Не СтрокаНаблюдатели.Контрагент = пЗадача.Контрагент Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	МассивНаблюдателей.Добавить(СтрокаНаблюдатели.Пользователь);
	//Конеццикла;
	//
	//пНаблюдателиЗаОснЗадачей = пЗадача.ОсновнаяЗадача.НаблюдателиЗаОсновнойЗадачей;
	//Для каждого СтрокапНаблюдателиЗаОснЗадачей из пНаблюдателиЗаОснЗадачей цикл
	//	пНаблюдатель = СтрокапНаблюдателиЗаОснЗадачей.Пользователь;
	//	Если МассивНаблюдателей.Найти(пНаблюдатель) <> Неопределено Тогда
	//		Продолжить;
	//	Конецесли;
	//	//+ #190 SZ 16.03.2020
	//	//Если пНаблюдатель = Пользователи.ТекущийПользователь() Тогда
	//	//	Продолжить;
	//	//Конецесли;
	//	Если пНаблюдатель = ТекущийПользователь
	//		И НЕ пНаблюдатель.узОтправлятьУведомленияОДействияхПользователяЕмуНаПочту Тогда
	//		Продолжить;
	//	Конецесли;
	//	//- #190 SZ 16.03.2020
	//	
	//	МассивНаблюдателей.Добавить(пНаблюдатель);
	//Конеццикла;	
	//
	//Возврат МассивНаблюдателей;
КонецФункции 

Функция ПолучитьТемаПисьмаСобытие(ДопПараметры,СобытияВИстории) 
	
	ТЗСобытияВИсторииДляУведомлений = СобытияВИстории.ТЗСобытияВИсторииДляУведомлений;
	РезультатФункции = Новый Структура();
	
	НастройкиСобытий = ДопПараметры.НастройкиСобытий;
	
	ЭтоОтправкаИсполнителю = Ложь;
	Если ДопПараметры.Свойство("ЭтоОтправкаИсполнителю") Тогда
		ЭтоОтправкаИсполнителю = Истина;
		МассивСобытийКоторыеПодлежатОтправки = НастройкиСобытий.МассивСобытийКоторыеПодлежатОтправки; 
	КонецЕсли;
	
	ЭтоОтправкаНаблюдателям = Ложь;
	Если ДопПараметры.Свойство("ЭтоОтправкаНаблюдателям") Тогда
		ЭтоОтправкаНаблюдателям = Истина;
		МассивСобытийКоторыеПодлежатОтправки = НастройкиСобытий.МассивСобытийДляНаблюдателяКоторыеПодлежатОтправки; 
	КонецЕсли;
	
	ЭтоОтправкаСтаромуИсполнителю = Ложь;
	Если ДопПараметры.Свойство("ЭтоОтправкаСтаромуИсполнителю") Тогда
		ЭтоОтправкаНаблюдателям = Истина;
		МассивСобытийКоторыеПодлежатОтправки = НастройкиСобытий.МассивСобытийДляСтарогоИсполнителяКоторыеПодлежатОтправки; 
	КонецЕсли;
	
	ЭтоОтправкаКонтрагентам = Ложь;
	Если ДопПараметры.Свойство("ЭтоОтправкаКонтрагентам") Тогда
		ЭтоОтправкаКонтрагентам = Истина;
		МассивСобытийКоторыеПодлежатОтправки = НастройкиСобытий.МассивСобытийДляКонтрагентовКоторыеПодлежатОтправки; 
	КонецЕсли;
	
	НеобходимоОтправитьУведомление = Ложь;	
	ТемаПисьмаСобытие = "";
	МассивИзмененнийПоКомментариям = Новый Массив();
	
	ВсегоСобытий = ТЗСобытияВИсторииДляУведомлений.Количество();
	Если ВсегоСобытий = 1 Тогда
		СтрокаТЗСобытияВИсторииДляУведомлений = ТЗСобытияВИсторииДляУведомлений[0];
		ВидСобытия = СтрокаТЗСобытияВИсторииДляУведомлений.ВидСобытия;
		Если ВидСобытия = НастройкиСобытий.ВидыСобытий_ДобавленаЗадача Тогда
			Если ЭтоОтправкаИсполнителю Тогда
				НеобходимоОтправитьУведомление = Истина;
				ТемаПисьмаСобытие = узОбщийМодульСервер.ПолучитьТекстСообщения("Вам была назначена задача:",31);
			КонецЕсли;
			Если ЭтоОтправкаНаблюдателям Тогда
				НеобходимоОтправитьУведомление = Истина;
				ТемаПисьмаСобытие = узОбщийМодульСервер.ПолучитьТекстСообщения("Добавлена новая задача:",102);
			КонецЕсли;
			Если ЭтоОтправкаКонтрагентам Тогда
				НеобходимоОтправитьУведомление = Истина;
				//ГЕНА TODO
				ТемаПисьмаСобытие = НСтр("ru = 'Ваша заявка зарегистрирована:'; en = 'Your request is registered'");
				//ГЕНА TODO
			КонецЕсли;			
		ИначеЕсли ВидСобытия = НастройкиСобытий.ВидыСобытий_НовыйИсполнитель Тогда
			Если ЭтоОтправкаИсполнителю Тогда
				НеобходимоОтправитьУведомление = Истина;
				ТемаПисьмаСобытие = узОбщийМодульСервер.ПолучитьТекстСообщения("Вам была назначена задача:",31);
			КонецЕсли;
			Если ЭтоОтправкаНаблюдателям 
				ИЛИ ЭтоОтправкаСтаромуИсполнителю
				Тогда
				НеобходимоОтправитьУведомление = Истина;
				ТемаПисьмаСобытие = узОбщийМодульСервер.ПолучитьТекстСообщения("Изменился исполнитель у задачи:",32);
			Конецесли;	
		ИначеЕсли ВидСобытия = НастройкиСобытий.ВидыСобытий_ДобавленКомментарий Тогда
			Если ЭтоОтправкаИсполнителю
				ИЛИ ЭтоОтправкаНаблюдателям Тогда
				НеобходимоОтправитьУведомление = Истина;
				ТемаПисьмаСобытие = узОбщийМодульСервер.ПолучитьТекстСообщения("Добавлен комментарий по задаче:",33); //ГЕНА ошибка в слове
				МассивИзмененнийПоКомментариям = СтрокаТЗСобытияВИсторииДляУведомлений.МассивИзмененнийПоКомментариям 
			КонецЕсли;
		ИначеЕсли ВидСобытия = НастройкиСобытий.ВидыСобытий_ИзмененКомментарий Тогда
			Если ЭтоОтправкаИсполнителю
				ИЛИ ЭтоОтправкаНаблюдателям Тогда
				НеобходимоОтправитьУведомление = Истина;
				ТемаПисьмаСобытие = узОбщийМодульСервер.ПолучитьТекстСообщения("Изменен комментарий по задаче:",34);
				МассивИзмененнийПоКомментариям = СтрокаТЗСобытияВИсторииДляУведомлений.МассивИзмененнийПоКомментариям 
			КонецЕсли;
		ИначеЕсли ВидСобытия = НастройкиСобытий.ВидыСобытий_ИзменениеСтатуса Тогда
			Если ЭтоОтправкаИсполнителю
				ИЛИ ЭтоОтправкаНаблюдателям Тогда
				НеобходимоОтправитьУведомление = Истина;
				ТемаПисьмаСобытие = узОбщийМодульСервер.ПолучитьТекстСообщения("Изменен статус у задачи:",35);
			Конецесли;
		ИначеЕсли ВидСобытия = НастройкиСобытий.ВидыСобытий_ВходящееПисьмо Тогда
			Если ЭтоОтправкаИсполнителю
				ИЛИ ЭтоОтправкаНаблюдателям Тогда
				НеобходимоОтправитьУведомление = Истина;
				ТемаПисьмаСобытие = "Входящее письмо по задаче:";
			Конецесли;	
		ИначеЕсли ВидСобытия = НастройкиСобытий.ВидыСобытий_ВыполненаЗадача Тогда
			Если ЭтоОтправкаКонтрагентам Тогда
				НеобходимоОтправитьУведомление = Истина;
				ТемаПисьмаСобытие = НСтр("ru = 'Ваша заявка выполнена:'; en = 'Your request has been completed'"); // ГЕНА
			Конецесли;				
		Конецесли;
	Иначе
		Если ЭтоОтправкаКонтрагентам
			И ТЗСобытияВИсторииДляУведомлений.Найти(НастройкиСобытий.ВидыСобытий_ВыполненаЗадача,"ВидСобытия") <> Неопределено Тогда
			НеобходимоОтправитьУведомление = Истина;
			ТемаПисьмаСобытие = НСтр("ru = 'Ваша заявка выполнена:'; en = 'Your request has been completed'"); // ГЕНА
		ИначеЕсли ТЗСобытияВИсторииДляУведомлений.Найти(НастройкиСобытий.ВидыСобытий_НовыйИсполнитель,"ВидСобытия") <> Неопределено Тогда
			Если ЭтоОтправкаИсполнителю Тогда
				НеобходимоОтправитьУведомление = Истина;
				ТемаПисьмаСобытие = узОбщийМодульСервер.ПолучитьТекстСообщения("Вам была назначена задача:",31);
			КонецЕсли;
			Если ЭтоОтправкаНаблюдателям
				ИЛИ ЭтоОтправкаСтаромуИсполнителю Тогда
				НеобходимоОтправитьУведомление = Истина;
				ТемаПисьмаСобытие = узОбщийМодульСервер.ПолучитьТекстСообщения("Изменился исполнитель у задачи:",32);
			Конецесли;				
		Иначе
			Для каждого СтрокаТЗСобытияВИсторииДляУведомлений из ТЗСобытияВИсторииДляУведомлений цикл
				ВидСобытия = СтрокаТЗСобытияВИсторииДляУведомлений.ВидСобытия;
				Если МассивСобытийКоторыеПодлежатОтправки.Найти(ВидСобытия) <> Неопределено Тогда
					НеобходимоОтправитьУведомление = Истина;
					ТемаПисьмаСобытие = узОбщийМодульСервер.ПолучитьТекстСообщения("Изменена задача: ",36);
					Прервать;
				Конецесли;
			Конеццикла;	
		Конецесли;
	Конецесли;
	РезультатФункции.Вставить("НеобходимоОтправитьУведомление",НеобходимоОтправитьУведомление);
	РезультатФункции.Вставить("ТемаПисьмаСобытие",ТемаПисьмаСобытие);
	РезультатФункции.Вставить("МассивИзмененнийПоКомментариям",МассивИзмененнийПоКомментариям);
	
	Возврат РезультатФункции;	
КонецФункции 

Процедура ПолучитьПараметрыПисьма(ДопПараметры, РезультатФункции) 
	//МассивКодовСообщений = Новый Массив();
	//МассивКодовСообщений.Добавить(22); //Добрый день
	//МассивКодовСообщений.Добавить(23); //Номер задачи
	//МассивКодовСообщений.Добавить(24); //Описание задачи
	//МассивКодовСообщений.Добавить(25); //Комментарии
	//МассивКодовСообщений.Добавить(26); //Реквизиты задачи
	//МассивКодовСообщений.Добавить(27); //Исполнитель
	//МассивКодовСообщений.Добавить(28); //Статус
	//МассивКодовСообщений.Добавить(29); //Важность
	//МассивКодовСообщений.Добавить(30); //ОсновнаяЗадача
	//
	//СтруктураСообщений = узОбщийМодульСервер.ПолучитьСтруктуруСообщений(МассивКодовСообщений);
	//
	//ТекстВПисьмеДобрыйДень = СтруктураСообщений.Текст22;
	//ТекстВПисьмеНомерЗадачи = СтруктураСообщений.Текст23;
	//ТекстВПисьмеОписаниеЗадачи = СтруктураСообщений.Текст24;
	//ТекстВПисьмеКомментарий = СтруктураСообщений.Текст25;
	//ТекстВПисьмеРеквизитыЗадачи = СтруктураСообщений.Текст26;
	//ТекстВПисьмеИсполнитель = СтруктураСообщений.Текст27;
	//ТекстВПисьмеСтатус = СтруктураСообщений.Текст28;
	//ТекстВПисьмеВажность = СтруктураСообщений.Текст29;
	//ТекстВПисьмеОсновнаяЗадача = СтруктураСообщений.Текст30;
	//
	//
	//ЭтоОтправкаКонтрагентам = Ложь;
	//Если ДопПараметры.Свойство("ЭтоОтправкаКонтрагентам")
	//	И ДопПараметры.ЭтоОтправкаКонтрагентам Тогда 
	//	ЭтоОтправкаКонтрагентам = Истина;
	//Конецесли;
	//
	//ТемаПисьмаСобытие = ДопПараметры.ТемаПисьмаСобытие;
	//МассивИзмененнийПоКомментариям = ДопПараметры.МассивИзмененнийПоКомментариям;
	//
	//РезультатФункции = Новый Структура();
	//
	//НаименованиеЗадачи = СокрЛП(Наименование);
	//НомерЗадачи = ""+Формат(Код,"ЧГ=0");
	//ТемаПисьма = "[#"+НомерЗадачи+"] "+ТемаПисьмаСобытие + НаименованиеЗадачи;		
	//ТекстПисьма = "
	//|"+ТекстВПисьмеДобрыйДень+".
	//|
	//|"+ТемаПисьмаСобытие+" "+НаименованиеЗадачи+"
	//|"+ТекстВПисьмеНомерЗадачи+": #"+НомерЗадачи+"
	//|";
	//
	//Если МассивИзмененнийПоКомментариям.Количество() = 0 Тогда
	//	Если ЗначениеЗаполнено(ТекстСодержания) Тогда
	//		ТекстПисьма = ТекстПисьма + "
	//		|
	//		|"+ТекстВПисьмеОписаниеЗадачи+": 
	//		|"+ТекстСодержания+"
	//		|";			
	//	Конецесли;	
	//Иначе
	//	ТекстПисьма = ТекстПисьма + "
	//	|
	//	|"+ТекстВПисьмеКомментарий+":"; 		
	//	Для каждого ЭлМассивИзмененнийПоКомментариям из МассивИзмененнийПоКомментариям цикл
	//		ТекстПисьма = ТекстПисьма + Символы.ПС
	//			+ " - "+ЭлМассивИзмененнийПоКомментариям;							
	//	Конеццикла;
	//Конецесли;
	//
	//Если НЕ ЭтоОтправкаКонтрагентам Тогда
	//	ТекстПисьма = ТекстПисьма + "
	//	|
	//	|"+ТекстВПисьмеРеквизитыЗадачи+":
	//	|- "+ТекстВПисьмеИсполнитель+" ["+Исполнитель+"]
	//	|- "+ТекстВПисьмеСтатус+" ["+Статус+"]
	//	|- "+ТекстВПисьмеВажность+" ["+Важность+"]
	//	|- "+ТекстВПисьмеОсновнаяЗадача+" ["+ОсновнаяЗадача+"]
	//	|";		
	//Конецесли;
	
	
	НаименованиеЗадачи = СокрЛП(Наименование);
	ТемаПисьмаСобытие = ДопПараметры.ТемаПисьмаСобытие;
	
	НомерЗадачи = ""+Формат(Код,"ЧГ=0");
	ТемаПисьма = "[#"+НомерЗадачи+"] "+ТемаПисьмаСобытие + НаименованиеЗадачи;		
	ДопПараметры.Вставить("ТемаПисьма",ТемаПисьма);
	ДопПараметры.Вставить("НомерЗадачи",НомерЗадачи);
	
	//ГЕНА
	РезультатФункции.Вставить("ТемаПисьма",ТемаПисьма);
	РезультатФункции.Вставить("ТипТекста", ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст"));
	ПолучитьТекстПисьма(ДопПараметры, РезультатФункции);
	//-ГЕНА
	
КонецПроцедуры

Процедура ПолучитьТекстПисьма(ДопПараметры, РезультатФункции) // ГЕНА
	
	ЭтоОтправкаКонтрагентам = Ложь;
	Если ДопПараметры.Свойство("ЭтоОтправкаКонтрагентам")
		И ДопПараметры.ЭтоОтправкаКонтрагентам Тогда 
		ЭтоОтправкаКонтрагентам = Истина;
	Конецесли;
	
	//+ГЕНА
	Если ЭтоОтправкаКонтрагентам Тогда
		ВидШаблона = Перечисления.узВидыШаблоновСообщений.ЗадачаКонтрагент;
	Иначе
		ВидШаблона = Перечисления.узВидыШаблоновСообщений.ЗадачаОбщий;
	КонецЕсли;
	ТекстИТемаПисьма = ПолучитьТекстПисьмаПоШаблону(ДопПараметры, ВидШаблона);
	
	Если ТекстИТемаПисьма = Неопределено Тогда
		Если ЭтоОтправкаКонтрагентам Тогда
			пТекстПисьма = ПолучитьТекстПисьма_Контрагентам(ДопПараметры);
		Иначе
			пТекстПисьма = ПолучитьТекстПисьма_Общее(ДопПараметры);
		Конецесли;
		РезультатФункции.Вставить("ТекстПисьма", пТекстПисьма);
	Иначе
		РезультатФункции.Вставить("ТипТекста", ТекстИТемаПисьма.ТипТекста);
		РезультатФункции.Вставить("ТемаПисьма", ТекстИТемаПисьма.Тема);
		РезультатФункции.Вставить("ТекстПисьма", ТекстИТемаПисьма.Текст);
		РезультатФункции.Вставить("ТекстПисьмаHTML", ТекстИТемаПисьма.ТекстHTML);
		РезультатФункции.Вставить("ВложенияКартинки", ТекстИТемаПисьма.ВложенияКартинки);
	КонецЕсли;
	//-ГЕНА
	
КонецПроцедуры

Функция ПолучитьТекстПисьма_Контрагентам(ДопПараметры)
	Перем ТекстПисьма;
	
	ТемаПисьмаСобытие = ДопПараметры.ТемаПисьмаСобытие;
	
	ТекстПисьма = "
	|	Добрый день.
	|
	|	"+ТемаПисьмаСобытие+"
	|	Номер заявки: " + ДопПараметры.НомерЗадачи + "
	|	Тема заявки: "+ ДопПараметры.ТемаПисьма + "
	|
	|	Описание задачи: 
	|	"+ТекстСодержания+"
	|";
	
	
	Возврат ТекстПисьма;
КонецФункции 

Функция ПолучитьТекстПисьма_Общее(ДопПараметры) 
	
	МассивКодовСообщений = Новый Массив();
	МассивКодовСообщений.Добавить(22); //Добрый день
	МассивКодовСообщений.Добавить(23); //Номер задачи
	МассивКодовСообщений.Добавить(24); //Описание задачи
	МассивКодовСообщений.Добавить(25); //Комментарии
	МассивКодовСообщений.Добавить(26); //Реквизиты задачи
	МассивКодовСообщений.Добавить(27); //Исполнитель
	МассивКодовСообщений.Добавить(28); //Статус
	МассивКодовСообщений.Добавить(29); //Важность
	МассивКодовСообщений.Добавить(30); //ОсновнаяЗадача
	
	СтруктураСообщений = узОбщийМодульСервер.ПолучитьСтруктуруСообщений(МассивКодовСообщений);
	
	ТекстВПисьмеДобрыйДень = СтруктураСообщений.Текст22;
	ТекстВПисьмеНомерЗадачи = СтруктураСообщений.Текст23;
	ТекстВПисьмеОписаниеЗадачи = СтруктураСообщений.Текст24;
	ТекстВПисьмеКомментарий = СтруктураСообщений.Текст25;
	ТекстВПисьмеРеквизитыЗадачи = СтруктураСообщений.Текст26;
	ТекстВПисьмеИсполнитель = СтруктураСообщений.Текст27;
	ТекстВПисьмеСтатус = СтруктураСообщений.Текст28;
	ТекстВПисьмеВажность = СтруктураСообщений.Текст29;
	ТекстВПисьмеОсновнаяЗадача = СтруктураСообщений.Текст30;
	
	ТемаПисьмаСобытие = ДопПараметры.ТемаПисьмаСобытие;
	МассивИзмененнийПоКомментариям = ДопПараметры.МассивИзмененнийПоКомментариям;
	
	РезультатФункции = Новый Структура();
	
	НаименованиеЗадачи = СокрЛП(Наименование);
	НомерЗадачи = ""+Формат(Код,"ЧГ=0");
	//ТемаПисьма = "[#"+НомерЗадачи+"] "+ТемаПисьмаСобытие + НаименованиеЗадачи;	
	ТекстПисьма = "
	|"+ТекстВПисьмеДобрыйДень+".
	|
	|"+ТемаПисьмаСобытие+" "+НаименованиеЗадачи+"
	|"+ТекстВПисьмеНомерЗадачи+": #"+НомерЗадачи+"
	|";
	
	Если МассивИзмененнийПоКомментариям.Количество() = 0 Тогда
		//Если ЗначениеЗаполнено(ТекстСодержания) Тогда
		//	ТекстПисьма = ТекстПисьма + "
		//	|
		//	|"+ТекстВПисьмеОписаниеЗадачи+": 
		//	|"+ТекстСодержания+"
		//	|";			
		//Конецесли;	
	Иначе
		ТекстПисьма = ТекстПисьма + "
		|
		|"+ТекстВПисьмеКомментарий+":"; 		
		Для каждого ЭлМассивИзмененнийПоКомментариям из МассивИзмененнийПоКомментариям цикл
			ТекстПисьма = ТекстПисьма + Символы.ПС
				+ " - "+ЭлМассивИзмененнийПоКомментариям;							
		Конеццикла;
	Конецесли;
	
	ТекстПисьма = ТекстПисьма + "
	|
	|"+ТекстВПисьмеРеквизитыЗадачи+":
	|- "+ТекстВПисьмеИсполнитель+" ["+Исполнитель+"]
	|- "+ТекстВПисьмеСтатус+" ["+Статус+"]
	|- "+ТекстВПисьмеВажность+" ["+Важность+"]
	|- "+ТекстВПисьмеОсновнаяЗадача+" ["+ОсновнаяЗадача+"]
	|";		
	
	Возврат ТекстПисьма;
КонецФункции 

Функция ЕстьПодчиненныеЗадачи(Задача,ЗадачаРебенок = Неопределено) Экспорт
	
	пЕстьПодчиненныеЗадачи = Ложь;
	
	Если ЭтоНовый() Тогда
		Возврат пЕстьПодчиненныеЗадачи;	
	Конецесли;        
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	узЗадачи.Ссылка
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|ГДЕ
	|	узЗадачи.Ссылка В ИЕРАРХИИ(&Задача)
	|	И узЗадачи.Ссылка <> &Задача
	|	И узЗадачи.Ссылка <> &ЗадачаРебенок
	|");

	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.УстановитьПараметр("ЗадачаРебенок", ЗадачаРебенок);

	РезультатЗапроса = Запрос.Выполнить(); 
	Если НЕ РезультатЗапроса.Пустой() Тогда
		пЕстьПодчиненныеЗадачи = Истина;
	Конецесли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат пЕстьПодчиненныеЗадачи;
КонецФункции

Функция ПолучитьОсновнуюЗадачу(СсылкаНаОбъект)
	РодителяОбъекта = СсылкаНаОбъект.Родитель;
	Если ЗначениеЗаполнено(РодителяОбъекта)
		И НЕ СсылкаНаОбъект.ЭтоОсновнаяЗадача Тогда
		Возврат ПолучитьОсновнуюЗадачу(РодителяОбъекта);
	Иначе
		// [+] #342 Павлюков С.Ю. 2024-04-20 
		Если СсылкаНаОбъект.ЭтоОсновнаяЗадача Тогда
			Возврат СсылкаНаОбъект;
		Иначе     
			Возврат Справочники.узЗадачи.ПустаяСсылка(); 	
		КонецЕсли;
		// [-] #342 Павлюков С.Ю. 2024-04-20
	Конецесли;	
КонецФункции 

Процедура ПриУстановкеНовогоКода(СтандартнаяОбработка, Префикс)
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	//***АиБ*** УрянскийД 2020-06-22 (начало)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	//***АиБ*** УрянскийД 2020-06-22 (окончание)
	
	Если ДополнительныеСвойства.Свойство("узЭтоОбработка") Тогда
		Возврат;
	Конецесли;
	
	СобытияВИстории = ДополнительныеСвойства.СобытияВИстории;
	
	РегистрацияАктивностиПользователя(СобытияВИстории,Отказ);
	ОтправитьУведомлениеНаПочту(СобытияВИстории);
	
	СформироватьЗаписиВРССвязанныеЗадачи(Отказ);
	
	//+ ##122 Дзеса Ігор (capitoshko) 21.01.2019
	СформироватьЗаписиВрегистрСтатусыЗадач(Отказ);
	//- ##122 Дзеса Ігор (capitoshko) 21.01.2019
	
	ДополнительныеСвойства.Удалить("СобытияВИстории");
	
КонецПроцедуры

Процедура СформироватьЗаписиВРССвязанныеЗадачи(Отказ) Экспорт
	Если Отказ Тогда 
		Возврат;
	Конецесли;
	
	пЗадача = Ссылка;
	УдалитьЗаписиИзРССвязанныеЗадачи(пЗадача, Отказ);
	
	МассивЗадач = узОбщийМодульСервер.ПолучитьМассивЗадачИзТекста(ТекстСодержания);
	Если МассивЗадач.Количество() = 0 Тогда
		Возврат;
	Конецесли;
	
	Для каждого СвязаннаяЗадача из МассивЗадач цикл

		МенеджерЗаписи = РегистрыСведений.узСвязанныеЗадачи.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Задача = пЗадача;
		МенеджерЗаписи.СвязаннаяЗадача = СвязаннаяЗадача;
		МенеджерЗаписи.Записать();
		
	Конеццикла;
	
КонецПроцедуры 

//+ ##122 Дзеса Ігор (capitoshko) 21.01.2019
Процедура  СформироватьЗаписиВрегистрСтатусыЗадач(Отказ)
	пСобытияВИстории = ДополнительныеСвойства.СобытияВИстории;
	
	Если Исполнитель = пСобытияВИстории.СтарыйИсполнитель 
		И Статус = пСобытияВИстории.СтарыйСтатус Тогда
		Возврат;
	Конецесли;
	
	ЗаписьИсторияСтатусов = РегистрыСведений.узСтатусыЗадач.СоздатьМенеджерЗаписи();
	ЗаписьИсторияСтатусов.Период = ТекущаяДатаСеанса();
	ЗаписьИсторияСтатусов.Активность = Истина;
	ЗаписьИсторияСтатусов.Задача = Ссылка;
	ЗаписьИсторияСтатусов.Исполнитель = Исполнитель;
	ЗаписьИсторияСтатусов.Статус = Статус;
	
	ЗаписьИсторияСтатусов.Записать();
	//НачатьТранзакцию();
	//Попытка
	//	ЗаписьИсторияСтатусов.Записать();
	//Исключение
	//	ОтменитьТранзакцию();
	//	ВызватьИсключение;
	//КонецПопытки;
	//ЗафиксироватьТранзакцию();

КонецПроцедуры
//- ##122 Дзеса Ігор (capitoshko) 21.01.2019 
Процедура УдалитьЗаписиИзРССвязанныеЗадачи(пЗадача,Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	Конецесли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	узСвязанныеЗадачи.Задача,
	               |	узСвязанныеЗадачи.СвязаннаяЗадача
	               |ИЗ
	               |	РегистрСведений.узСвязанныеЗадачи КАК узСвязанныеЗадачи
	               |ГДЕ
	               |	узСвязанныеЗадачи.Задача = &Задача";
	
	Запрос.УстановитьПараметр("Задача",пЗадача);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Конецесли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.узСвязанныеЗадачи.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Задача = Выборка.Задача;
		МенеджерЗаписи.СвязаннаяЗадача = Выборка.СвязаннаяЗадача;
		МенеджерЗаписи.Удалить();
		
	КонецЦикла;

КонецПроцедуры 

Процедура РегистрацияАктивностиПользователя(СобытияВИстории,Отказ)
	ВТДопПараметры = Новый Структура();
	ВТДопПараметры.Вставить("СобытияВИстории",СобытияВИстории);
	РегистрыСведений.узАктивностиПользователей.ДобавитьАктивностьПользователя(ЭтотОбъект,ВТДопПараметры,Отказ);
КонецПроцедуры 

Процедура ИзменитьОсновнуюЗадачуДляВсехПодчиненныхЗадач()
	Если ЭтоНовый() Тогда
		Возврат;	
	Конецесли;
		
	пОсновнаяЗадача = ОсновнаяЗадача;
	Если ЭтоОсновнаяЗадача Тогда
		пОсновнаяЗадача = Ссылка;
	Конецесли;

	Если НЕ ЗначениеЗаполнено(пОсновнаяЗадача) Тогда
		Возврат;
	КонецЕсли;	
	
	МассивПодчиненныхЗадач = Новый Массив();
	ЗаполнитьМассивПодчиненныхЗадач(Ссылка,пОсновнаяЗадача,МассивПодчиненныхЗадач);
	
	Для каждого пЗадача из МассивПодчиненныхЗадач цикл
		СпрОбъект = пЗадача.ПолучитьОбъект();		
		СпрОбъект.ОсновнаяЗадача = пОсновнаяЗадача;
		СпрОбъект.ДополнительныеСвойства.Вставить("узЭтоОбработка",Истина);
		СпрОбъект.Записать();
	Конеццикла;
	
КонецПроцедуры 

Процедура ЗаполнитьМассивПодчиненныхЗадач(ЗадачаРодитель,пОсновнаяЗадача,МассивПодчиненныхЗадач) 
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	узЗадачи.Ссылка
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|ГДЕ
	|	узЗадачи.Родитель = &ЗадачаРодитель
	|	И узЗадачи.Ссылка <> &ЗадачаРодитель
	|");

	Запрос.УстановитьПараметр("ЗадачаРодитель", ЗадачаРодитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Конецесли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		пЗадача = Выборка.Ссылка;
		
		МассивПодчиненныхЗадач.Добавить(пЗадача);
		
		Если пЗадача.ЭтоОсновнаяЗадача Тогда
			Продолжить;	
		Конецесли;
		
		Если пЗадача.ОсновнаяЗадача = пОсновнаяЗадача Тогда
			Продолжить;
		Конецесли;
		
		ЗаполнитьМассивПодчиненныхЗадач(пЗадача,пОсновнаяЗадача,МассивПодчиненныхЗадач);
	Конеццикла;
	
КонецПроцедуры 

Функция ПроверитьWIPЛимит() Экспорт
	ПревышенWIPЛимит = Ложь;
	ТекстОшибки = "";
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("ПревышенWIPЛимит",ПревышенWIPЛимит);
	РезультатФункции.Вставить("ТекстОшибки",ТекстОшибки);
	
	Если НЕ ЗначениеЗаполнено(Статус) Тогда
		Возврат РезультатФункции;
	Конецесли;
	
	Если НЕ Статус.ИспользоватьWIPЛимит Тогда
		Возврат РезультатФункции;
	Конецесли;
	
	пWIPЛимит = Справочники.узСтатусыЗадачи.ПолучитьWIPЛимит(Статус);
	
	пКоличествоЗадачВСтатусе = ПолучитьКоличествоЗадачВСтатусе();
	
	Если пКоличествоЗадачВСтатусе > пWIPЛимит Тогда
		
		ПревышенWIPЛимит = Истина;
			
		ТекстОшибки = узОбщийМодульСервер.ПолучитьТекстСообщения("Превышен WIP лимит. Количество задач: [%1] WIP лимит: [%2]",88);
		ТекстОшибки = СтрШаблон(ТекстОшибки,пКоличествоЗадачВСтатусе,пWIPЛимит);		
	Конецесли;
	
	РезультатФункции.Вставить("ПревышенWIPЛимит",ПревышенWIPЛимит);
	РезультатФункции.Вставить("ТекстОшибки",ТекстОшибки);
	
	Возврат РезультатФункции;
КонецФункции

Функция ПолучитьКоличествоЗадачВСтатусе() 
	пКоличествоЗадачВСтатусе = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ узЗадачи.Ссылка) КАК КоличествоЗадач
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|ГДЕ
	|	узЗадачи.Статус В(&МассивСтатусов)
	|	И ВЫБОР
	|			КОГДА &ИспользоватьWIPЛимитНаИсполнителя
	|				ТОГДА узЗадачи.Исполнитель = &Исполнитель
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И узЗадачи.ПоказыватьВОтчетахИКанбанДоске
	|	И узЗадачи.Ссылка <> &Ссылка";
	
	МассивСтатусов = Новый Массив();
	
	Если Статус.WIPЛимитУказываетсяВРодителе Тогда
		ДобавитьСтатусыСТакимЖеРодителем(МассивСтатусов);
	Иначе
		МассивСтатусов.Добавить(Статус);
	Конецесли;
	
	Запрос.УстановитьПараметр("ИспользоватьWIPЛимитНаИсполнителя", Статус.ИспользоватьWIPЛимитНаИсполнителя);
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		пКоличествоЗадачВСтатусе = Выборка.КоличествоЗадач;
	КонецЦикла;
	
	пКоличествоЗадачВСтатусе = пКоличествоЗадачВСтатусе + 1;
	
	Возврат пКоличествоЗадачВСтатусе;
КонецФункции 

Процедура ДобавитьСтатусыСТакимЖеРодителем(МассивСтатусов)
	пРодитель = Статус.Родитель;
	Если НЕ ЗначениеЗаполнено(пРодитель) Тогда
		МассивСтатусов.Добавить(Статус);	
		Возврат;
	Конецесли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	узСтатусыЗадачи.Ссылка
	|ИЗ
	|	Справочник.узСтатусыЗадачи КАК узСтатусыЗадачи
	|ГДЕ
	|	узСтатусыЗадачи.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Родитель", пРодитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Конецесли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивСтатусов.Добавить(Выборка.Ссылка);	
	КонецЦикла;
КонецПроцедуры 

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
КонецПроцедуры

//+ГЕНА
Функция ПолучитьТекстПисьмаПоШаблону(ДопПараметры, ВидШаблона)
	
	ШаблонСообщения = Неопределено;
	Если НЕ ДопПараметры.Свойство("ШаблонСообщения", ШаблонСообщения) Тогда
		// Получение текущего шаблона сообщения
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	узТекущиеШаблоныСообщений.ШаблонСообщения КАК ШаблонСообщения
		|ИЗ
		|	РегистрСведений.узТекущиеШаблоныСообщений КАК узТекущиеШаблоныСообщений
		|ГДЕ
		|	узТекущиеШаблоныСообщений.ВидШаблона = &ВидШаблона";
		Запрос.УстановитьПараметр("ВидШаблона", ВидШаблона);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ШаблонСообщения = Выборка.ШаблонСообщения;
		КонецЕсли;
	КонецЕсли;
	Если ШаблонСообщения = Неопределено Тогда
		// Письмо по шаблону не формируется
		Возврат Неопределено;
	КонецЕсли;
	
	// Заполнение динамических параметров по данным задачи
	Если ДопПараметры.МассивИзмененнийПоКомментариям.Количество() = 0 Тогда
		ТекстИзмененнийПоКомментариям = "";
	Иначе
		ТекстИзмененнийПоКомментариям = Символы.ПС + " - " + СтрСоединить(ДопПараметры.МассивИзмененнийПоКомментариям, Символы.ПС + " - ");
	КонецЕсли;
	
	//ДопПараметрыИзЗадачи = Новый Структура;
	//ДопПараметрыИзЗадачи.Вставить("узТемаПисьмаСобытие", ДопПараметры.ТемаПисьмаСобытие);
	//ДопПараметрыИзЗадачи.Вставить("узНомерЗадачи", ДопПараметры.НомерЗадачи);
	//ДопПараметрыИзЗадачи.Вставить("узИзмененияПоКомментариям", ТекстИзмененнийПоКомментариям);
	//ВнешняяНавигационнаяСсылка = узОбщийМодульСервер.ПолучитьВнешнююНавигационнуюСсылкуИБ();
	//Если ВнешняяНавигационнаяСсылка = "" Тогда
	//	СтрокаСсылки = ПолучитьНавигационнуюСсылку(Ссылка);
	//Иначе
	//	СтрокаСсылки = ВнешняяНавигационнаяСсылка+"#"+ПолучитьНавигационнуюСсылку(Ссылка);
	//КонецЕсли;
	//ДопПараметрыИзЗадачи.Вставить("узНавигационнаяСсылка", СтрокаСсылки);  
	
	ДопПараметрыИзЗадачи = Справочники.узЗадачи.ПолучитьДопПараметрыИзЗадачи(Ссылка, ДопПараметры);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыСообщения", ДопПараметрыИзЗадачи);
	
	ДанныеСообщения = ШаблоныСообщений.СформироватьСообщение(ШаблонСообщения, Ссылка, Новый УникальныйИдентификатор, ДополнительныеПараметры);
	
	ТекстИТемаПисьма = Новый Структура;
	ТекстИТемаПисьма.Вставить("Тема", ДанныеСообщения.Тема);
	
	Если ДанныеСообщения.ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML");
		
		ТекстHTML = ДанныеСообщения.Текст;
		
		// Получение простого текста из письма HTML
		СтруктураВложений = Новый Структура;
		ДокHTML = Новый ФорматированныйДокумент;
		ДокHTML.УстановитьHTML(ДанныеСообщения.Текст, СтруктураВложений);
		Текст = ДокHTML.ПолучитьТекст();
		
		// Преобразования картинок во вложения и передача для прикрепления к документу письма
		Если ТипЗнч(ДанныеСообщения.Вложения) <> Неопределено Тогда
			СписокКартинок = Новый СписокЗначений;
			Для каждого Вложение Из ДанныеСообщения.Вложения Цикл
				Если ЗначениеЗаполнено(Вложение.Идентификатор) Тогда
					ДвоичныеДанные = ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище);
					Изображение = Новый Картинка(ДвоичныеДанные);
					Если Изображение.Формат() = ФорматКартинки.PNG Тогда
						РасширениеКартинки = "png";
					ИначеЕсли Изображение.Формат() = ФорматКартинки.JPEG Тогда
						РасширениеКартинки = "jpeg";
					ИначеЕсли Изображение.Формат() = ФорматКартинки.GIF Тогда
						РасширениеКартинки = "gif";
					ИначеЕсли Изображение.Формат() = ФорматКартинки.SVG Тогда
						РасширениеКартинки = "svg";
					ИначеЕсли Изображение.Формат() = ФорматКартинки.TIFF Тогда
						РасширениеКартинки = "tiff";
					Иначе
						РасширениеКартинки = "";
					КонецЕсли;
					// Добавление расширения к представлению чтобы было понятно в каком формате сохранять файл
					ПредставлениеКартинки = Вложение.Представление + ?(ПустаяСтрока(РасширениеКартинки), "", "." + РасширениеКартинки);
					СписокКартинок.Добавить(Вложение.Идентификатор, ПредставлениеКартинки,, Изображение);
				КонецЕсли;
			КонецЦикла;
			ТекстИТемаПисьма.Вставить("ВложенияКартинки", СписокКартинок);
		КонецЕсли;
		
	Иначе
		ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст");
		ТекстHTML = "";
		Текст = ДанныеСообщения.Текст;
	КонецЕсли;
	
	ТекстИТемаПисьма.Вставить("ТекстHTML", ТекстHTML);
	ТекстИТемаПисьма.Вставить("Текст", Текст);
	ТекстИТемаПисьма.Вставить("ТипТекста", ТипТекста);
	
	Возврат ТекстИТемаПисьма;
	
КонецФункции
//-ГЕНА

// [+] #285 Павлюков С.Ю. 2024-04-20
Процедура ПроверитьДоступностьСменыСтатуса(мСтатус, Отказ)
	
	текущийСтатус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Статус");
	Если текущийСтатус = мСтатус Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗадач = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
	РегистрыСведений.узДоступностьСменыСтатусовЗадач.ОставитьЗадачиДляКоторыхДоступенНовыйСтатус(
		МассивЗадач, мСтатус);
	
	Если Не ЗначениеЗаполнено(МассивЗадач) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры
// [-] #285 Павлюков С.Ю. 2024-04-20

