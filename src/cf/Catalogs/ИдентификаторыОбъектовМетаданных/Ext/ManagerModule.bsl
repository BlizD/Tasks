#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура обновляет данные справочника по метаданным конфигурации.
//
// Параметры:
//  ЕстьИзменения - Булево (возвращаемое значение) - в этот параметр возвращается
//                  значение Истина, если производилась запись, иначе не изменяется.
//
//  ЕстьУдаленные - Булево (возвращаемое значение) - в этот параметр возвращается
//                  значение Истина, если хотя бы один элемент справочника был помечен
//                  на удаление, иначе не изменяется.
//
//  ТолькоПроверка - Булево - не производить никаких изменений, а лишь выполнить
//                   установку флажков ЕстьИзменения, ЕстьУдаленные.
//
Процедура ОбновитьДанныеСправочника(ЕстьИзменения = Ложь, ЕстьУдаленные = Ложь, ТолькоПроверка = Ложь) Экспорт
	
	ВыполнитьОбновлениеДанных(ЕстьИзменения, ЕстьУдаленные, ТолькоПроверка);
	
КонецПроцедуры

// Требуется, чтобы выгрузить все идентификаторы объектов метаданных конфигурации
// в подчиненные узлы РИБ, если ранее справочник не был включен в РИБ.
// Также может использоваться для ремонта данных справочника в РИБ-узлах.
//
Процедура ЗарегистрироватьПолноеИзменениеДляПодчиненныхУзловРИБ() Экспорт
	
	ПроверкаИспользования();
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ()
	 Или Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеСправочника = Метаданные.Справочники.ИдентификаторыОбъектовМетаданных;
	
	УзлыРИБ = Новый Массив;
	Для каждого ПланОбмена Из Метаданные.ПланыОбмена Цикл
		Если ПланОбмена.РаспределеннаяИнформационнаяБаза
		   И ПланОбмена.Состав.Содержит(МетаданныеСправочника)Тогда
		
			ПланОбменаМенеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПланОбмена.ПолноеИмя());
			Выборка = ПланОбменаМенеджер.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.Ссылка <> ПланОбменаМенеджер.ЭтотУзел() Тогда
					УзлыРИБ.Добавить(Выборка.Ссылка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если УзлыРИБ.Количество() > 0 Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзлыРИБ, МетаданныеСправочника);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает реквизиты объекта, которые разрешается редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

// Возвращает реквизиты справочника, которые образуют естественный ключ
//  для элементов справочника.
//
// Возвращаемое значение: Массив(Строка) - массив имен реквизитов, образующих
//  естественный ключ.
//
Функция ПоляЕстественногоКлюча() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ПолноеИмя");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Только для внутреннего использования.
Процедура ПроверкаИспользования(ОбъектыРасширений = Ложь) Экспорт
	
	Если СтандартныеПодсистемыПовтИсп.ОтключитьИдентификаторыОбъектовМетаданных() Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Справочник ""%1"" не используется.'"), НазваниеСправочника(ОбъектыРасширений));
	КонецЕсли;
	
	Если ОбъектыРасширений И Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		ВызватьИсключение ОписаниеОшибкиИдентификаторыОбъектовРасширенийНедоступныВНеразделенномРежиме();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено
	   И ЗначениеЗаполнено(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Константа.ГлавныйУзел").Получить()) Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Справочник ""%1"" не может использоваться
			           |в информационной базе с неподтвержденной отменой главного узла.
			           |
			           |Для восстановления связи с главным узлом запустите 1С:Предприятие и
			           |нажмите кнопку Восстановить или программно установите главный узел,
			           |сохраненный в константе Главный узел.
			           |
			           |Для подтверждения отмены связи с главным узлом запустите 1С:Предприятие и
			           |нажмите кнопку Отключить или программно очистите константу Главный узел.'"),
			НазваниеСправочника(ОбъектыРасширений));
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина, если проверка, обновление и замена дублей завершена.
//
// Параметры:
//  Сообщить - Булево - если передать Истина, тогда будет вызвано исключение
//             по ошибке обращения к необновленным параметрам работы программы.
//
Функция ДанныеОбновлены(Сообщить = Ложь, ОбъектыРасширений = Ложь) Экспорт
	
	Если Сообщить Тогда
		Отказ = Неопределено;
	Иначе
		Отказ = Ложь;
	КонецЕсли;
	
	СтандартныеПодсистемыСервер.ПроверитьОбновлениеПараметровРаботыПрограммы(
		"ПараметрыБазовойФункциональности", "ИдентификаторыОбъектовМетаданных", Отказ);
	
	Если Отказ = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбъектыРасширений
	   И ЗначениеЗаполнено(ПараметрыСеанса.УстановленныеРасширения)
	   И Не СтандартныеПодсистемыСервер.УстановленныеРасширенияНедоступны() Тогда
		
		Если Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			Если Сообщить Тогда
				ВызватьИсключение ОписаниеОшибкиИдентификаторыОбъектовРасширенийНедоступныВНеразделенномРежиме();
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВерсияРасширений", ПараметрыСеанса.ВерсияРасширений);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	РегистрСведений.ИдентификаторыОбъектовВерсийРасширений КАК ВерсииИдентификаторов
		|ГДЕ
		|	ВерсииИдентификаторов.ВерсияРасширений = &ВерсияРасширений";
		
		Если Запрос.Выполнить().Пустой() Тогда
			Справочники.ИдентификаторыОбъектовРасширений.ОбновитьДанныеСправочника();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Только для внутреннего использования.
//
// Параметры:
//  Объекты - Массив - значения типа СправочникОбъект.ИдентификаторыОбъектовМетаданных,
//            которые требуется загрузить.
//
Процедура ЗагрузитьДанныеВПодчиненныйУзел(Объекты) Экспорт
	
	ПроверкаИспользования();
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// В модели сервиса не поддерживается.
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ИдентификаторыОбъектовМетаданных");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	СнятьМонопольныйРежим = Ложь;
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		// Подготовка исходной таблицы с учетом переименования для поиска дублей.
		Выгрузка = ВыгрузкаВсехИдентификаторов();
		Выгрузка.Колонки.Добавить("ДубльОбновлен", Новый ОписаниеТипов("Булево"));
		Выгрузка.Колонки.Добавить("ПолноеИмяНижнийРегистр", Новый ОписаниеТипов("Строка"));
		
		// Отбор только тех из загружаемых объектов, которые отличаются от существующих.
		ТаблицаЗагружаемых = Новый ТаблицаЗначений;
		ТаблицаЗагружаемых.Колонки.Добавить("Объект");
		ТаблицаЗагружаемых.Колонки.Добавить("Ссылка");
		ТаблицаЗагружаемых.Колонки.Добавить("ОбъектМетаданныхПоКлючу");
		ТаблицаЗагружаемых.Колонки.Добавить("ОбъектМетаданныхПоПолномуИмени");
		ТаблицаЗагружаемых.Колонки.Добавить("Совпадает", Новый ОписаниеТипов("Булево"));
		
		Для каждого Объект Из Объекты Цикл
			СвойстваЗагружаемого = ТаблицаЗагружаемых.Добавить();
			СвойстваЗагружаемого.Объект = Объект;
			
			Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
				СвойстваЗагружаемого.Ссылка = Объект.Ссылка;
			Иначе
				СвойстваЗагружаемого.Ссылка = Объект.ПолучитьСсылкуНового();
				Если Не ЗначениеЗаполнено(СвойстваЗагружаемого.Ссылка) Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка загрузки идентификаторов объектов метаданных.
						           |Невозможно загрузить новый элемент у которого не указана ссылка нового:
						           |""%1"".'"),
						Объект.ПолноеИмя);
				КонецЕсли;
			КонецЕсли;
			
			// Предварительная обработка.
			
			Если Не ЭтоКоллекция(СвойстваЗагружаемого.Ссылка) Тогда
				СвойстваЗагружаемого.ОбъектМетаданныхПоКлючу = ОбъектМетаданныхПоКлючу(
					Объект.КлючОбъектаМетаданных.Получить());
				
				СвойстваЗагружаемого.ОбъектМетаданныхПоПолномуИмени =
					МетаданныеНайтиПоПолномуИмени(Объект.ПолноеИмя);
				
				Если СвойстваЗагружаемого.ОбъектМетаданныхПоКлючу = Неопределено
				   И СвойстваЗагружаемого.ОбъектМетаданныхПоПолномуИмени = Неопределено
				   И Объект.ПометкаУдаления <> Истина Тогда
					// Если по какой-то причине загружаемый объект не найден в метаданных,
					// его следует пометить на удаление.
					Объект.ПометкаУдаления = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Объект.ПометкаУдаления Тогда
				// Для помеченных на удаление недопустимо корректное полное имя,
				// поэтому для надежного обеспечения этого условия, процедура обновления
				// свойств помеченного дополнительно применяется перед загрузкой.
				ОбновитьСвойстваПомеченногоНаУдаление(Объект);
			КонецЕсли;
			
			Свойства = Выгрузка.Найти(СвойстваЗагружаемого.Ссылка, "Ссылка");
			Если Свойства <> Неопределено
			   И Свойства.Наименование              = Объект.Наименование
			   И Свойства.Родитель                  = Объект.Родитель
			   И Свойства.ПорядокКоллекции          = Объект.ПорядокКоллекции
			   И Свойства.Имя                       = Объект.Имя
			   И Свойства.Синоним                   = Объект.Синоним
			   И Свойства.ПолноеИмя                 = Объект.ПолноеИмя
			   И Свойства.ПолныйСиноним             = Объект.ПолныйСиноним
			   И Свойства.БезДанных                 = Объект.БезДанных
			   И Свойства.ЗначениеПустойСсылки      = Объект.ЗначениеПустойСсылки
			   И Свойства.ИмяПредопределенныхДанных = Объект.ИмяПредопределенныхДанных
			   И Свойства.ПометкаУдаления           = Объект.ПометкаУдаления
			   И КлючиОбъектовМетаданныхСовпадают(Свойства, Объект) Тогда
			
				СвойстваЗагружаемого.Совпадает = Истина;
			КонецЕсли;
			
			Если Свойства <> Неопределено Тогда
				Выгрузка.Удалить(Свойства); // Загружаемые не нужно переименовывать.
			КонецЕсли;
		КонецЦикла;
		ТаблицаЗагружаемых.Индексы.Добавить("Ссылка");
		
		// Переименование существующих элементов (без загружаемых) для поиска дублей.
		
		ПереименоватьПолныеИмена(Выгрузка);
		Для каждого Строка Из Выгрузка Цикл
			Строка.ПолноеИмяНижнийРегистр = НРег(Строка.ПолноеИмя);
		КонецЦикла;
		Выгрузка.Индексы.Добавить("КлючОбъектаМетаданных");
		Выгрузка.Индексы.Добавить("ПолноеИмяНижнийРегистр");
		
		// Подготовка загружаемых объектов и дублей в существующих.
		
		ОбъектыДляЗаписи = Новый Массив;
		ПолныеИменаЗагружаемых = Новый Соответствие;
		КлючиЗагружаемых = Новый Соответствие;
		
		Для каждого СвойстваЗагружаемого Из ТаблицаЗагружаемых Цикл
			Объект = СвойстваЗагружаемого.Объект;
			Ссылка = СвойстваЗагружаемого.Ссылка;
			
			Если СвойстваЗагружаемого.Совпадает Тогда
				Продолжить; // Точно совпадающие объекты не требуется загружать.
			КонецЕсли;
			
			Если ЭтоКоллекция(Ссылка) Тогда
				ОбъектыДляЗаписи.Добавить(Объект);
				Продолжить;
			КонецЕсли;
			
			// Проверка отсутствия дублей среди загружаемых элементов.
			
			Если ПолныеИменаЗагружаемых.Получить(НРег(Объект.ПолноеИмя)) <> Неопределено Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка загрузки идентификаторов объектов метаданных.
					           |Невозможно загрузить два элемента у которых совпадает полное имя:
					           |""%1"".'"),
					Объект.ПолноеИмя);
			КонецЕсли;
			ПолныеИменаЗагружаемых.Вставить(НРег(Объект.ПолноеИмя));
			
			КлючОбъектаМетаданных = Объект.КлючОбъектаМетаданных.Получить();
			Если ТипЗнч(КлючОбъектаМетаданных) = Тип("Тип")
			   И КлючОбъектаМетаданных <> Тип("Неопределено") Тогда
				
				Если КлючиЗагружаемых.Получить(КлючОбъектаМетаданных) <> Неопределено Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка загрузки идентификаторов объектов метаданных.
						           |Невозможно загрузить два элемента у которых совпадает ключ объекта метаданных:
						           |""%1"".'"),
						Строка(КлючОбъектаМетаданных));
				КонецЕсли;
				КлючиЗагружаемых.Вставить(КлючОбъектаМетаданных);
				
				Если СвойстваЗагружаемого.ОбъектМетаданныхПоКлючу <> СвойстваЗагружаемого.ОбъектМетаданныхПоПолномуИмени Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка загрузки идентификаторов объектов метаданных.
						           |Невозможно загрузить элемент у которого ключ объекта метаданных
						           |""%1"" не соответствует полному имени ""%2"".'"),
						Строка(КлючОбъектаМетаданных), Объект.ПолноеИмя);
				КонецЕсли;
				
				Если Не Объект.ПометкаУдаления Тогда
					// Определение дублей среди существующих объектов метаданных по ключу.
					Строки = Выгрузка.НайтиСтроки(Новый Структура("КлючОбъектаМетаданных", КлючОбъектаМетаданных));
					Для каждого Строка Из Строки Цикл
						
						Если Строка.Ссылка <> Ссылка
						   И ТаблицаЗагружаемых.Найти(Строка.Ссылка, "Ссылка") = Неопределено Тогда
							
							ОбновитьСвойстваПомеченногоНаУдаление(Строка);
							Строка.НоваяСсылка = Ссылка;
							Строка.ДубльОбновлен = Истина;
							Объект.ДополнительныеСвойства.Вставить("ЭтоЗаменаДубля");
							// Замена новых ссылок на дубль на новую ссылку заданную для дубля (если есть).
							СтарыеДубли = Выгрузка.НайтиСтроки(Новый Структура("НоваяСсылка", Строка.Ссылка));
							Для каждого СтарыйДубль Из СтарыеДубли Цикл
								ОбновитьСвойстваПомеченногоНаУдаление(СтарыйДубль);
								СтарыйДубль.НоваяСсылка = Ссылка;
								СтарыйДубль.ДубльОбновлен = Истина;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если Не Объект.ПометкаУдаления Тогда
				// Определение дублей среди существующих объектов метаданных по полному имени.
				Строки = Выгрузка.НайтиСтроки(Новый Структура("ПолноеИмяНижнийРегистр", НРег(Объект.ПолноеИмя)));
				Для каждого Строка Из Строки Цикл
					
					Если Строка.Ссылка <> Ссылка
					   И ТаблицаЗагружаемых.Найти(Строка.Ссылка, "Ссылка") = Неопределено Тогда
					
						ОбновитьСвойстваПомеченногоНаУдаление(Строка);
						Строка.НоваяСсылка = Ссылка;
						Строка.ДубльОбновлен = Истина;
						Объект.ДополнительныеСвойства.Вставить("ЭтоЗаменаДубля");
						// Замена новых ссылок на дубль на новую ссылку заданную для дубля (если есть).
						СтарыеДубли = Выгрузка.НайтиСтроки(Новый Структура("НоваяСсылка", Строка.Ссылка));
						Для каждого СтарыйДубль Из СтарыеДубли Цикл
							ОбновитьСвойстваПомеченногоНаУдаление(СтарыйДубль);
							СтарыйДубль.НоваяСсылка = Ссылка;
							СтарыйДубль.ДубльОбновлен = Истина;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ОбъектыДляЗаписи.Добавить(Объект);
		КонецЦикла;
		
		// Обновление дублей.
		Строки = Выгрузка.НайтиСтроки(Новый Структура("ДубльОбновлен", Истина));
		Для каждого Свойства Из Строки Цикл
			ОбъектДубля = Свойства.Ссылка.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ОбъектДубля, Свойства);
			ОбъектДубля.КлючОбъектаМетаданных = Новый ХранилищеЗначения(Свойства.КлючОбъектаМетаданных);
			ОбъектДубля.ОбменДанными.Загрузка = Истина;
			ОбъектДубля.Записать();
		КонецЦикла;
		
		ПодготовитьСписокНовыхПодсистемВПодчиненномУзле(ОбъектыДляЗаписи);
		
		// Загрузка объектов.
		Для каждого Объект Из ОбъектыДляЗаписи Цикл
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Процедура обновляет данные справочника по метаданным конфигурации.
//
// Параметры:
//  ЕстьИзменения - Булево (возвращаемое значение) - в этот параметр возвращается
//                  значение Истина, если производилась запись, иначе не изменяется.
//
//  ЕстьУдаленные - Булево (возвращаемое значение) - в этот параметр возвращается
//                  значение Истина, если хотя бы один элемент справочника был помечен
//                  на удаление, иначе не изменяется.
//
//  РежимОбновления - Строка - возможные значения:
//                    "Полный" - выполнить обновление,
//                    "Частичный" - выполнить обновление (когда ОбъектыРасширений = Ложь,
//                      тогда выполнить обновление, если нет критичных изменений),
//                    "ТолькоПроверка" - не производить никаких изменений, а лишь выполнить
//                      установку флажков ЕстьИзменения, ЕстьУдаленные, ЕстьКритичныеИзменения.
//                  - Булево - если Истина, то режим обновления "ТолькоПроверка",
//                             если Ложь, то режим обновления "Полный".
//
//  ЕстьКритичныеИзменения - (возвращаемое значение) - в этот параметр возвращается
//                  значение Истина, если найдены критичные изменения, иначе не изменяется.
//                    Критичные изменения (только для не помеченных на удаление):
//                    - изменении реквизита ПолноеИмя,
//                    - добавление нового элемента справочника.
//                  В общем случае, критичные изменения требуют монопольный режим.
//
//  СписокКритичныхИзменений - Строка (возвращаемое значение) - содержит полные имена
//                  объектов метаданных, которые добавлены или требуется добавить,
//                  а также объектов метаданных, полные имена которых изменены или требуется изменить.
//
Процедура ВыполнитьОбновлениеДанных(ЕстьИзменения, ЕстьУдаленные, РежимОбновления,
			ЕстьКритичныеИзменения = Ложь, СписокКритичныхИзменений = "", ОбъектыРасширений = Ложь) Экспорт
	
	Если ОбъектыРасширений
	   И ЗначениеЗаполнено(ПараметрыСеанса.УстановленныеРасширения)
	   И СтандартныеПодсистемыСервер.УстановленныеРасширенияНедоступны() Тогда
		
		ТекстОшибки =
			НСтр("ru = 'Невозможно обновить идентификаторы объектов расширений в сеансе
			           |неразделенного пользователя, т.к. расширения не подключены.'");
		
		ВызватьИсключениеПоОшибке(Истина, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ПроверкаИспользования(ОбъектыРасширений);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(РежимОбновления) = Тип("Булево") Тогда
		РежимОбновления = ?(РежимОбновления, "ТолькоПроверка", "Полный");
	КонецЕсли;
	ТолькоПроверка = (РежимОбновления = "ТолькоПроверка");
	
	СвойстваРасширений = ПолучитьИзВременногоХранилища(ПараметрыСеанса.АдресСвойствРасширений);
	Если СвойстваРасширений.ИменаОбъектов.Индексы.Количество() = 0 Тогда
		СвойстваРасширений.ИменаОбъектов.Индексы.Добавить("ПолноеИмя");
	КонецЕсли;
	
	ЕстьТекущиеИзменения = Ложь;
	Если Не ОбъектыРасширений Тогда
		ЗаменитьДублиПодчиненногоУзлаНайденныеПриЗагрузке(ТолькоПроверка, ЕстьТекущиеИзменения);
	КонецЕсли;
	
	Если Не ОбъектыРасширений
	 Или Не ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		
		ОбновитьДанные(ЕстьТекущиеИзменения, ЕстьУдаленные, РежимОбновления,
			ЕстьКритичныеИзменения, СписокКритичныхИзменений, СвойстваРасширений, ОбъектыРасширений);
		
		Если ЕстьТекущиеИзменения Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ТолькоПроверка
	   И Не (РежимОбновления <> "Полный" И ЕстьКритичныеИзменения) Тогда
	
		Если Не ОбъектыРасширений Тогда
			СтандартныеПодсистемыСервер.ПодтвердитьОбновлениеПараметраРаботыПрограммы(
				"ПараметрыБазовойФункциональности", "ИдентификаторыОбъектовМетаданных");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура УстановитьПараметрСеансаАдресСвойствРасширений(УстановленныеРасширения = Неопределено,
			ХранилищеСвойствРасширений = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если УстановленныеРасширения <> Неопределено
	   И УстановленныеРасширения <> ПараметрыСеанса.УстановленныеРасширения Тогда
		
		ТекстОшибки =
			НСтр("ru = 'Невозможно определить объекты метаданных расширений в фоновом задании
			           |без перезапуска сеанса, т.к. состав расширений был изменен.'");
		
		ВызватьИсключениеПоОшибке(Ложь, ТекстОшибки);
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.УстановленныеРасширенияНедоступны()
	   И ЗначениеЗаполнено(ПараметрыСеанса.УстановленныеРасширения) Тогда
		
		ТекстОшибки =
			НСтр("ru = 'Невозможно определить объекты метаданных расширений в сеансе
			           |неразделенного пользователя, т.к. расширения не подключены.'");
		
		ВызватьИсключениеПоОшибке(Истина, ТекстОшибки);
	КонецЕсли;
	
	Если ХранилищеСвойствРасширений = Неопределено Тогда
		СвойстваРасширений = СвойстваРасширений();
		Если СвойстваРасширений = Неопределено Тогда
			ТекстОшибки =
				НСтр("ru = 'Невозможно определить объекты метаданных расширений
				           |без перезапуска сеанса, т.к. состав расширений был изменен.'");
			ВызватьИсключениеПоОшибке(Ложь, ТекстОшибки);
		КонецЕсли;
	Иначе
		СвойстваРасширений = ХранилищеСвойствРасширений.Получить();
	КонецЕсли;
	
	ПараметрыСеанса.АдресСвойствРасширений =
		ПоместитьВоВременноеХранилище(СвойстваРасширений, Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Только для внутреннего использования.
Функция ХранилищеСвойствРасширений() Экспорт
	
	Возврат Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(ПараметрыСеанса.АдресСвойствРасширений));
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Реализация процедур, объявленных в других модулях.

// См. описание одноименной процедуры в общем модуле ОбщегоНазначения.
Функция ИдентификаторОбъектаМетаданных(ОписаниеОбъектаМетаданных) Экспорт
	
	ТипОписанияОбъектаМетаданных = ТипЗнч(ОписаниеОбъектаМетаданных);
	Если ТипОписанияОбъектаМетаданных = Тип("Тип") Тогда
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ОписаниеОбъектаМетаданных);
		Если ОбъектМетаданных = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при выполнении функции ОбщегоНазначения.ИдентификаторОбъектаМетаданных().
				           |
				           |Объект метаданных не найден по типу:
				           |""%1"".'"),
				ОписаниеОбъектаМетаданных);
		Иначе
			ПолноеИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
		КонецЕсли;
		
	ИначеЕсли ТипОписанияОбъектаМетаданных = Тип("Строка") Тогда
		ПолноеИмяОбъектаМетаданных = ОписаниеОбъектаМетаданных;
	Иначе
		ПолноеИмяОбъектаМетаданных = ОписаниеОбъектаМетаданных.ПолноеИмя();
	КонецЕсли;
	
	Возврат СтандартныеПодсистемыПовтИсп.ИдентификаторОбъектаМетаданныхПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
	
КонецФункции

// Продолжение процедуры ИдентификаторОбъектаМетаданных.
Функция ИдентификаторОбъектаМетаданныхПоПолномуИмени(ПолноеИмяОбъектаМетаданных) Экспорт
	
	СтандартныеПодсистемыПовтИсп.ИдентификаторыОбъектовМетаданныхПроверкаИспользования(Истина,
		ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДоступныИдентификаторыОбъектовРасширений =
		ЗначениеЗаполнено(ПараметрыСеанса.УстановленныеРасширения)
		И Не СтандартныеПодсистемыСервер.УстановленныеРасширенияНедоступны();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПолноеИмя", ПолноеИмяОбъектаМетаданных);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Идентификаторы.Ссылка КАК Ссылка,
	|	Идентификаторы.КлючОбъектаМетаданных,
	|	Идентификаторы.ПолноеИмя
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК Идентификаторы
	|ГДЕ
	|	Идентификаторы.ПолноеИмя = &ПолноеИмя
	|	И НЕ Идентификаторы.ПометкаУдаления";
	
	Если ДоступныИдентификаторыОбъектовРасширений Тогда
		Запрос.УстановитьПараметр("ВерсияРасширений", ПараметрыСеанса.ВерсияРасширений);
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВерсииИдентификаторов.Идентификатор КАК Ссылка,
		|	Идентификаторы.КлючОбъектаМетаданных,
		|	ВерсииИдентификаторов.ПолноеИмяОбъекта КАК ПолноеИмя
		|ИЗ
		|	РегистрСведений.ИдентификаторыОбъектовВерсийРасширений КАК ВерсииИдентификаторов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовРасширений КАК Идентификаторы
		|		ПО (Идентификаторы.Ссылка = ВерсииИдентификаторов.Идентификатор)
		|ГДЕ
		|	ВерсииИдентификаторов.ВерсияРасширений = &ВерсияРасширений
		|	И ВерсииИдентификаторов.ПолноеИмяОбъекта = &ПолноеИмя";
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|" + ТекстЗапроса;
	КонецЕсли;
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при выполнении функции ОбщегоНазначения.ИдентификаторОбъектаМетаданных().'");
	
	Если Выгрузка.Количество() = 0 Тогда
		// Если идентификатор не найден по полному имени, возможно что полное имя задано с ошибкой.
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
		Если ОбъектМетаданных = Неопределено Тогда
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Объект метаданных не найден по полному имени:
				           |""%1"".'"),
				ПолноеИмяОбъектаМетаданных);
			ВызватьИсключение ЗаголовокОшибки + Символы.ПС + Символы.ПС + ОписаниеОшибки;
		КонецЕсли;
		
		Если Не Метаданные.Роли.Содержит(ОбъектМетаданных)
		   И Не Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных)
		   И Не Метаданные.Константы.Содержит(ОбъектМетаданных)
		   И Не Метаданные.Справочники.Содержит(ОбъектМетаданных)
		   И Не Метаданные.Документы.Содержит(ОбъектМетаданных)
		   И Не Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных)
		   И Не Метаданные.Отчеты.Содержит(ОбъектМетаданных)
		   И Не Метаданные.Обработки.Содержит(ОбъектМетаданных)
		   И Не Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
		   И Не Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
		   И Не Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
		   И Не Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		   И Не Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		   И Не Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных)
		   И Не Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных)
		   И Не Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных)
		   И Не Метаданные.Задачи.Содержит(ОбъектМетаданных)
		   И Не ЭтоПодсистема(ОбъектМетаданных) Тогда
			
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Объект метаданных не поддерживается:
				           |""%1"".
				           |
				           |Допустимы только типы объектов метаданных перечисленные в комментарии к функции.'"),
				ПолноеИмяОбъектаМетаданных);
			ВызватьИсключение ЗаголовокОшибки + Символы.ПС + Символы.ПС + ОписаниеОшибки;
		КонецЕсли;
		
		ШаблонОшибки = ?(ДоступныИдентификаторыОбъектовРасширений,
			НСтр("ru = 'Для объекта метаданных ""%1""
			           |не найден идентификатор в справочнике ""Идентификаторы объектов метаданных"" и
			           |регистре сведений ""Идентификаторы объектов версий расширений"".'"),
			НСтр("ru = 'Для объекта метаданных ""%1""
			           |не найден идентификатор в справочнике ""Идентификаторы объектов метаданных"".'"));
		ВызватьИсключение ЗаголовокОшибки + Символы.ПС + Символы.ПС
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ПолноеИмяОбъектаМетаданных)
			+ СтандартныеПодсистемыСервер.УточнениеОшибкиПараметровРаботыПрограммыДляРазработчика();
		
	ИначеЕсли Выгрузка.Количество() > 1 Тогда
		ШаблонОшибки = ?(ДоступныИдентификаторыОбъектовРасширений,
			НСтр("ru = 'Для объекта метаданных ""%1""
			           |найдено несколько идентификаторов в справочнике ""Идентификаторы объектов метаданных"" и
			           |регистре сведений ""Идентификаторы объектов версий расширений"".'"),
			НСтр("ru = 'Для объекта метаданных ""%1""
			           |найдено несколько идентификаторов в справочнике ""Идентификаторы объектов метаданных"".'"));
		ВызватьИсключение ЗаголовокОшибки + Символы.ПС + Символы.ПС
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ПолноеИмяОбъектаМетаданных)
			+ СтандартныеПодсистемыСервер.УточнениеОшибкиПараметровРаботыПрограммыДляРазработчика();
	КонецЕсли;
	
	// Проверка соответствия ключа объекта метаданных полному имени объекта метаданных.
	РезультатПроверки = КлючОбъектаМетаданныхСоответствуетПолномуИмени(Выгрузка[0]);
	Если РезультатПроверки.НеСоответствует Тогда
		НазваниеСправочника = НазваниеСправочника(ЭтоОбъектРасширений(Выгрузка[0].Ссылка));
		
		Если РезультатПроверки.ОбъектМетаданных = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для объекта метаданных ""%1""
				           |найден идентификатор в справочнике ""%2"",
				           |которому соответствует удаленный объект метаданных.'"),
				ПолноеИмяОбъектаМетаданных, НазваниеСправочника);
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для объекта метаданных ""%1""
				           |найден идентификатор в справочнике ""%2"",
				           |который соответствует другому объекту метаданных ""%3"".'"),
				ПолноеИмяОбъектаМетаданных, НазваниеСправочника, РезультатПроверки.ОбъектМетаданных);
		КонецЕсли;
		
		ВызватьИсключение ЗаголовокОшибки + Символы.ПС + Символы.ПС + ТекстОшибки
			+ СтандартныеПодсистемыСервер.УточнениеОшибкиПараметровРаботыПрограммыДляРазработчика();
	КонецЕсли;
	
	Возврат Выгрузка[0].Ссылка;
	
КонецФункции

// См. описание одноименной процедуры в общем модуле ОбщегоНазначения.
Функция ОбъектМетаданныхПоИдентификатору(Идентификатор) Экспорт
	
	ОбъектыРасширений = ЭтоОбъектРасширений(Идентификатор);
	НазваниеСправочника = НазваниеСправочника(ОбъектыРасширений);
	
	СтандартныеПодсистемыПовтИсп.ИдентификаторыОбъектовМетаданныхПроверкаИспользования(Истина, ОбъектыРасширений);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Идентификатор);
	Если ОбъектыРасширений Тогда
		Запрос.УстановитьПараметр("ВерсияРасширений", ПараметрыСеанса.ВерсияРасширений);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Идентификаторы.Ссылка КАК Ссылка,
		|	Идентификаторы.КлючОбъектаМетаданных,
		|	ЕСТЬNULL(ВерсииИдентификаторов.ПолноеИмяОбъекта, """") КАК ПолноеИмя,
		|	Идентификаторы.ПометкаУдаления
		|ИЗ
		|	Справочник.ИдентификаторыОбъектовРасширений КАК Идентификаторы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыОбъектовВерсийРасширений КАК ВерсииИдентификаторов
		|		ПО (ВерсииИдентификаторов.Идентификатор = Идентификаторы.Ссылка)
		|ГДЕ
		|	ВерсииИдентификаторов.ВерсияРасширений = &ВерсияРасширений
		|	И Идентификаторы.Ссылка = &Ссылка";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Идентификаторы.Ссылка КАК Ссылка,
		|	Идентификаторы.КлючОбъектаМетаданных,
		|	Идентификаторы.ПолноеИмя,
		|	Идентификаторы.ПометкаУдаления
		|ИЗ
		|	Справочник.ИдентификаторыОбъектовМетаданных КАК Идентификаторы
		|ГДЕ
		|	Идентификаторы.Ссылка = &Ссылка";
	КонецЕсли;
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при выполнении функции ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору().'");
	
	Если Выгрузка.Количество() = 0 Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Идентификатор ""%1""
			           |не найден в справочнике ""%2"".'"),
			Строка(Идентификатор), НазваниеСправочника);
		
		ВызватьИсключение ЗаголовокОшибки + Символы.ПС + Символы.ПС + ОписаниеОшибки
			+ СтандартныеПодсистемыСервер.УточнениеОшибкиПараметровРаботыПрограммыДляРазработчика();
	КонецЕсли;
	
	// Проверка соответствия ключа объекта метаданных полному имени объекта метаданных.
	РезультатПроверки = КлючОбъектаМетаданныхСоответствуетПолномуИмени(Выгрузка[0]);
	Если РезультатПроверки.НеСоответствует Тогда
		
		Если РезультатПроверки.ОбъектМетаданных = Неопределено Тогда
			Если ОбъектыРасширений И Не Выгрузка[0].ПометкаУдаления Тогда
				
				// Возможно расширение не удалось подключить.
				Возврат Неопределено;
				
			ИначеЕсли РезультатПроверки.КлючОбъектаМетаданных = Неопределено Тогда
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Идентификатору ""%1""
					           |найденному в справочнике ""%2"",
					           |соответствует несуществующий объект метаданных
					           |""%3"".'"),
					Строка(Идентификатор), НазваниеСправочника, Выгрузка[0].ПолноеИмя);
			Иначе
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Идентификатору ""%1""
					           |найденному в справочнике ""%2"",
					           |соответствует удаленный объект метаданных.'"),
					Строка(Идентификатор), НазваниеСправочника);
			КонецЕсли;
		Иначе
			ОписаниеОшибки =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Идентификатору ""%1""
				           |найденному в справочнике ""%2"",
				           |соответствует объект метаданных ""%3"",
				           |полное имя которого отличается от заданного в идентификаторе.'"),
				Строка(Идентификатор), НазваниеСправочника, РезультатПроверки.ОбъектМетаданных.ПолноеИмя());
		КонецЕсли;
		
		ВызватьИсключение ЗаголовокОшибки + Символы.ПС + Символы.ПС + ОписаниеОшибки
			+ СтандартныеПодсистемыСервер.УточнениеОшибкиПараметровРаботыПрограммыДляРазработчика();
	КонецЕсли;
	
	Если Выгрузка[0].ПометкаУдаления Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Идентификатор ""%1""
			           |найден в справочнике ""%2"",
			           |но значение реквизита ""Пометка удаления"" установлено Истина.'"),
			Строка(Идентификатор), НазваниеСправочника);
		
		ВызватьИсключение ЗаголовокОшибки + Символы.ПС + Символы.ПС + ОписаниеОшибки
			+ СтандартныеПодсистемыСервер.УточнениеОшибкиПараметровРаботыПрограммыДляРазработчика();
	КонецЕсли;
	
	Возврат РезультатПроверки.ОбъектМетаданных;
	
КонецФункции

// См. описание одноименной процедуры в общем модуле ОбщегоНазначения.
Процедура ДобавитьПереименование(Итог, ВерсияИБ, СтароеПолноеИмя, НовоеПолноеИмя, ИдентификаторБиблиотеки = "") Экспорт
	
	СтандартныеПодсистемыПовтИсп.ИдентификаторыОбъектовМетаданныхПроверкаИспользования();
	
	СтароеИмяКоллекции = ВРег(ИмяКоллекции(СтароеПолноеИмя));
	НовоеИмяКоллекции  = ВРег(ИмяКоллекции(НовоеПолноеИмя));
	
	ЗаголовокОшибки =
		НСтр("ru = 'Ошибка в процедуре ПриДобавленииПереименованийОбъектовМетаданных общего модуля ОбщегоНазначенияПереопределяемый.'");
	
	Если СтароеИмяКоллекции <> НовоеИмяКоллекции Тогда
		ВызватьИсключение ЗаголовокОшибки + Символы.ПС + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не совпадают имена типов переименованного объекта метаданных.
			           |Прежний тип: ""%1"",
			           |новый тип: ""%2"".'"),
			СтароеПолноеИмя,
			НовоеПолноеИмя);
	КонецЕсли;
	
	Если Итог.КоллекцииБезКлюча[СтароеИмяКоллекции] = Неопределено Тогда
		
		СписокДопустимыхТипов = "";
		Для каждого КлючИЗначение Из Итог.КоллекцииБезКлюча Цикл
			СписокДопустимыхТипов = СписокДопустимыхТипов + КлючИЗначение.Значение + "," + Символы.ПС;
		КонецЦикла;
		СписокДопустимыхТипов = СокрП(СписокДопустимыхТипов);
		СписокДопустимыхТипов = ?(ЗначениеЗаполнено(СписокДопустимыхТипов),
			Лев(СписокДопустимыхТипов, СтрДлина(СписокДопустимыхТипов) - 1), "");
		
		ВызватьИсключение ЗаголовокОшибки + Символы.ПС + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для типа объекта метаданных ""%1"" не требуется описывать переименование,
			           |так как сведения об объектах метаданных этого типа обновляются автоматически.
			           |
			           |Описывать переименования требуется только для следующих типов:
			           |%2.'"),
			СтароеПолноеИмя,
			СписокДопустимыхТипов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторБиблиотеки) Тогда
		Библиотека = ВРег(ИдентификаторБиблиотеки) <> ВРег(Метаданные.Имя);
	Иначе
		ИдентификаторБиблиотеки = Метаданные.Имя;
		Библиотека = Ложь;
	КонецЕсли;
	
	ПорядокБиблиотеки = Итог.ПорядокБиблиотек[ИдентификаторБиблиотеки];
	Если ПорядокБиблиотеки = Неопределено Тогда
		ПорядокБиблиотеки = Итог.ПорядокБиблиотек.Количество();
		Итог.ПорядокБиблиотек.Вставить(ИдентификаторБиблиотеки, ПорядокБиблиотеки);
	КонецЕсли;
	
	ВерсияБиблиотеки = Итог.ВерсииБиблиотек[ИдентификаторБиблиотеки];
	Если ВерсияБиблиотеки = Неопределено Тогда
		ВерсияБиблиотеки = ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(ИдентификаторБиблиотеки);
		Итог.ВерсииБиблиотек.Вставить(ИдентификаторБиблиотеки, ВерсияБиблиотеки);
	КонецЕсли;
	
	Если ВерсияБиблиотеки = "0.0.0.0" Тогда
		// При начальном заполнении переименования не требуются.
		Возврат;
	КонецЕсли;
	
	Результат = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияИБ, ВерсияБиблиотеки);
	Если Результат > 0 Тогда
		ЧастиВерсии = СтрРазделить(ВерсияИБ, ".");
		
		ОписаниеПереименования = Итог.Таблица.Добавить();
		ОписаниеПереименования.ПорядокБиблиотеки = ПорядокБиблиотеки;
		ОписаниеПереименования.ВерсияЧасть1      = Число(ЧастиВерсии[0]);
		ОписаниеПереименования.ВерсияЧасть2      = Число(ЧастиВерсии[1]);
		ОписаниеПереименования.ВерсияЧасть3      = Число(ЧастиВерсии[2]);
		ОписаниеПереименования.ВерсияЧасть4      = Число(ЧастиВерсии[3]);
		ОписаниеПереименования.СтароеПолноеИмя   = СтароеПолноеИмя;
		ОписаниеПереименования.НовоеПолноеИмя    = НовоеПолноеИмя;
		ОписаниеПереименования.ПорядокДобавления = Итог.Таблица.Индекс(ОписаниеПереименования);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Дополнительные процедуры и функции для вызова из других модулей.

// Только для внутреннего использования.
// ПолноеИмя в объекте должно быть уже установлено и корректно.
//
Процедура ОбновитьСвойстваИдентификатора(Объект) Экспорт
	
	ОбъектыРасширений = ЭтоОбъектРасширений(Объект);
	
	Если ОбъектыРасширений
	   И Справочники.ИдентификаторыОбъектовРасширений.ОбъектРасширенияОтключен(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмя = Объект.ПолноеИмя;
	
	// Восстановление старых значений.
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтарыеЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Ссылка,
			"Наименование,
			|ПорядокКоллекции,
			|Имя,
			|ПолноеИмя,
			|Синоним,
			|ПолныйСиноним,
			|БезДанных,
			|ЗначениеПустойСсылки,
			|КлючОбъектаМетаданных");
		ЗаполнитьЗначенияСвойств(Объект, СтарыеЗначения);
	КонецЕсли;
	
	ОбъектМетаданных = МетаданныеНайтиПоПолномуИмени(ПолноеИмя);
	
	Если ОбъектМетаданных = Неопределено Тогда
		Объект.ПометкаУдаления       = Истина;
		Объект.Родитель              = ПустаяСсылкаСправочника(ОбъектыРасширений);
		Объект.Наименование          = ВставитьЗнакВопроса(Объект.Наименование);
		Объект.Имя                   = ВставитьЗнакВопроса(Объект.Имя);
		Объект.Синоним               = ВставитьЗнакВопроса(Объект.Синоним);
		Объект.ПолноеИмя             = ВставитьЗнакВопроса(Объект.ПолноеИмя);
		Объект.ПолныйСиноним         = ВставитьЗнакВопроса(Объект.ПолныйСиноним);
		Объект.ЗначениеПустойСсылки  = Неопределено;
		
		Если ОбъектыРасширений Тогда
			Объект.ИмяРасширения = ВставитьЗнакВопроса(Объект.ИмяРасширения);
		КонецЕсли;
		
		Если ТипЗнч(Объект) <> Тип("ДанныеФормыСтруктура") Тогда
			Объект.КлючОбъектаМетаданных = Неопределено;
		КонецЕсли;
	Иначе
		Объект.ПометкаУдаления = Ложь;
		
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		ПозицияТочки = СтрНайти(ПолноеИмя, ".");
		ИмяБазовогоТипа = Лев(ПолноеИмя, ПозицияТочки -1);
		
		СвойстваКоллекций = СтандартныеПодсистемыПовтИсп.СвойстваКоллекцийОбъектовМетаданных(ОбъектыРасширений);
		Отбор = Новый Структура("ИмяВЕдЧисле", ИмяБазовогоТипа);
		Строки = СвойстваКоллекций.НайтиСтроки(Отбор);
		
		СвойстваОбъектовМетаданных = СвойстваОбъектовМетаданных(ЭтоОбъектРасширений(Объект), ,
			СвойстваКоллекций.Скопировать(Строки));
		
		СвойстваОбъекта = СвойстваОбъектовМетаданных.Найти(ПолноеИмя, "ПолноеИмя");
		
		ЗаполнитьЗначенияСвойств(Объект, СвойстваОбъекта);
		
		Если ТипЗнч(Объект) <> Тип("ДанныеФормыСтруктура") Тогда
			КлючОбъектаМетаданных = Объект.КлючОбъектаМетаданных.Получить();
			Если КлючОбъектаМетаданных = Неопределено
			 ИЛИ СвойстваОбъекта.БезКлючаОбъектаМетаданных
			     И КлючОбъектаМетаданных <> Тип("Неопределено") Тогда
				
				Объект.КлючОбъектаМетаданных = Новый ХранилищеЗначения(КлючОбъектаМетаданных(СвойстваОбъекта.ПолноеИмя));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Функция ТаблицаПереименованияДляТекущейВерсии() Экспорт
	
	ТаблицаПереименования = Новый ТаблицаЗначений;
	ТаблицаПереименования.Колонки.Добавить("ПорядокБиблиотеки", Новый ОписаниеТипов("Число"));
	ТаблицаПереименования.Колонки.Добавить("ВерсияЧасть1",      Новый ОписаниеТипов("Число"));
	ТаблицаПереименования.Колонки.Добавить("ВерсияЧасть2",      Новый ОписаниеТипов("Число"));
	ТаблицаПереименования.Колонки.Добавить("ВерсияЧасть3",      Новый ОписаниеТипов("Число"));
	ТаблицаПереименования.Колонки.Добавить("ВерсияЧасть4",      Новый ОписаниеТипов("Число"));
	ТаблицаПереименования.Колонки.Добавить("ПорядокДобавления", Новый ОписаниеТипов("Число"));
	ТаблицаПереименования.Колонки.Добавить("СтароеПолноеИмя",   Новый ОписаниеТипов("Строка"));
	ТаблицаПереименования.Колонки.Добавить("НовоеПолноеИмя",    Новый ОписаниеТипов("Строка"));
	
	КоллекцииБезКлюча = Новый Соответствие;
	
	Отбор = Новый Структура("БезКлючаОбъектаМетаданных", Истина);
	
	КоллекцииБезКлючаОбъектаМетаданных =
		СтандартныеПодсистемыПовтИсп.СвойстваКоллекцийОбъектовМетаданных().НайтиСтроки(Отбор);
	
	Для каждого Строка Из КоллекцииБезКлючаОбъектаМетаданных Цикл
		КоллекцииБезКлюча.Вставить(ВРег(Строка.ИмяВЕдЧисле), Строка.ИмяВЕдЧисле);
	КонецЦикла;
	
	Итог = Новый Структура;
	Итог.Вставить("Таблица", ТаблицаПереименования);
	Итог.Вставить("КоллекцииБезКлюча", КоллекцииБезКлюча);
	Итог.Вставить("ВерсииБиблиотек",  Новый Соответствие);
	Итог.Вставить("ПорядокБиблиотек", Новый Соответствие);
	
	ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПереименованийОбъектовМетаданных");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	КонецЦикла;
	
	ТаблицаПереименования.Сортировать(
		"ПорядокБиблиотеки ВОЗР,
		|ВерсияЧасть1 ВОЗР,
		|ВерсияЧасть2 ВОЗР,
		|ВерсияЧасть3 ВОЗР,
		|ВерсияЧасть4 ВОЗР,
		|ПорядокДобавления ВОЗР");
	
	Возврат ТаблицаПереименования;
	
КонецФункции

// Только для внутреннего использования.
Функция СвойстваКоллекцийОбъектовМетаданных(ОбъектыРасширений = Ложь) Экспорт
	
	СвойстваКоллекцийОбъектовМетаданных = Новый ТаблицаЗначений;
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("Имя",                       Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("ИмяВЕдЧисле",               Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("Синоним",                   Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("СинонимВЕдЧисле",           Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("ПорядокКоллекции",          Новый ОписаниеТипов("Число"));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("БезДанных",                 Новый ОписаниеТипов("Булево"));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("БезКлючаОбъектаМетаданных", Новый ОписаниеТипов("Булево"));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("Идентификатор",             Новый ОписаниеТипов("УникальныйИдентификатор"));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("ОбъектыРасширений",         Новый ОписаниеТипов("Булево"));
	
	// Константы
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("627a6fb8-872a-11e3-bb87-005056c00008");
	Строка.Имя             = "Константы";
	Строка.Синоним         = НСтр("ru = 'Константы'");
	Строка.ИмяВЕдЧисле     = "Константа";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Константа'");
	
	// Подсистемы
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("cdf5ac50-08e8-46af-9a80-4e63fd4a88ff");
	Строка.Имя             = "Подсистемы";
	Строка.Синоним         = НСтр("ru = 'Подсистемы'");
	Строка.ИмяВЕдЧисле     = "Подсистема";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Подсистема'");
	Строка.БезДанных       = Истина;
	Строка.БезКлючаОбъектаМетаданных = Истина;
	Строка.ОбъектыРасширений = Истина;
	
	// Роли
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("115c4f55-9c20-4e86-a6d0-d0167ec053a1");
	Строка.Имя             = "Роли";
	Строка.Синоним         = НСтр("ru = 'Роли'");
	Строка.ИмяВЕдЧисле     = "Роль";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Роль'");
	Строка.БезДанных       = Истина;
	Строка.БезКлючаОбъектаМетаданных = Истина;
	
	// ПланыОбмена
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("269651e0-4b06-4f9d-aaab-a8d2b6bc6077");
	Строка.Имя             = "ПланыОбмена";
	Строка.Синоним         = НСтр("ru = 'Планы обмена'");
	Строка.ИмяВЕдЧисле     = "ПланОбмена";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'План обмена'");
	
	// Справочники
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("ede89702-30f5-4a2a-8e81-c3a823b7e161");
	Строка.Имя             = "Справочники";
	Строка.Синоним         = НСтр("ru = 'Справочники'");
	Строка.ИмяВЕдЧисле     = "Справочник";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Справочник'");
	
	// Документы
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("96c6ab56-0375-40d5-99a2-b83efa3dac8b");
	Строка.Имя             = "Документы";
	Строка.Синоним         = НСтр("ru = 'Документы'");
	Строка.ИмяВЕдЧисле     = "Документ";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Документ'");
	
	// ЖурналыДокументов
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("07938234-e29b-4cff-961a-9af07a4c6185");
	Строка.Имя             = "ЖурналыДокументов";
	Строка.Синоним         = НСтр("ru = 'Журналы документов'");
	Строка.ИмяВЕдЧисле     = "ЖурналДокументов";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Журнал документов'");
	Строка.БезДанных       = Истина;
	
	// Отчеты
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("706cf832-0ae5-45b5-8a4a-1f251d054f3b");
	Строка.Имя             = "Отчеты";
	Строка.Синоним         = НСтр("ru = 'Отчеты'");
	Строка.ИмяВЕдЧисле     = "Отчет";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Отчет'");
	Строка.БезДанных       = Истина;
	Строка.ОбъектыРасширений = Истина;
	
	// Обработки
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("ae480426-487e-40b2-98ba-d207777449f3");
	Строка.Имя             = "Обработки";
	Строка.Синоним         = НСтр("ru = 'Обработки'");
	Строка.ИмяВЕдЧисле     = "Обработка";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Обработка'");
	Строка.БезДанных       = Истина;
	Строка.ОбъектыРасширений = Истина;
	
	// ПланыВидовХарактеристик
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("8b5649b9-cdd1-4698-9aac-12ba146835c4");
	Строка.Имя             = "ПланыВидовХарактеристик";
	Строка.Синоним         = НСтр("ru = 'Планы видов характеристик'");
	Строка.ИмяВЕдЧисле     = "ПланВидовХарактеристик";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'План видов характеристик'");
	
	// ПланыСчетов
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("4295af27-543f-4373-bcfc-c0ace9b7620c");
	Строка.Имя             = "ПланыСчетов";
	Строка.Синоним         = НСтр("ru = 'Планы счетов'");
	Строка.ИмяВЕдЧисле     = "ПланСчетов";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'План счетов'");
	
	// ПланыВидовРасчета
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("fca3e7e1-1bf1-49c8-9921-aafb4e787c75");
	Строка.Имя             = "ПланыВидовРасчета";
	Строка.Синоним         = НСтр("ru = 'Планы видов расчета'");
	Строка.ИмяВЕдЧисле     = "ПланВидовРасчета";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'План видов расчета'");
	
	// РегистрыСведений
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("d7ecc1e9-c068-44dd-83c2-1323ec52dbbb");
	Строка.Имя             = "РегистрыСведений";
	Строка.Синоним         = НСтр("ru = 'Регистры сведений'");
	Строка.ИмяВЕдЧисле     = "РегистрСведений";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Регистр сведений'");
	
	// РегистрыНакопления
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("74083488-b01e-4441-84a6-c386ce88cdb5");
	Строка.Имя             = "РегистрыНакопления";
	Строка.Синоним         = НСтр("ru = 'Регистры накопления'");
	Строка.ИмяВЕдЧисле     = "РегистрНакопления";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Регистр накопления'");
	
	// РегистрыБухгалтерии
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("9a0d75ff-0eda-454e-b2b7-d2412ffdff18");
	Строка.Имя             = "РегистрыБухгалтерии";
	Строка.Синоним         = НСтр("ru = 'Регистры бухгалтерии'");
	Строка.ИмяВЕдЧисле     = "РегистрБухгалтерии";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Регистр бухгалтерии'");
	
	// РегистрыРасчета
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("f330686a-0acf-4e26-9cda-108f1404687d");
	Строка.Имя             = "РегистрыРасчета";
	Строка.Синоним         = НСтр("ru = 'Регистры расчета'");
	Строка.ИмяВЕдЧисле     = "РегистрРасчета";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Регистр расчета'");
	
	// БизнесПроцессы
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("a8cdd0e0-c27f-4bf0-9718-10ec054dc468");
	Строка.Имя             = "БизнесПроцессы";
	Строка.Синоним         = НСтр("ru = 'Бизнес-процессы'");
	Строка.ИмяВЕдЧисле     = "БизнесПроцесс";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Бизнес-процесс'");
	
	// Задачи
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("8d9153ad-7cea-4e25-9542-a557ee59fd16");
	Строка.Имя             = "Задачи";
	Строка.Синоним         = НСтр("ru = 'Задачи'");
	Строка.ИмяВЕдЧисле     = "Задача";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Задача'");
	
	Для каждого Строка Из СвойстваКоллекцийОбъектовМетаданных Цикл
		Строка.ПорядокКоллекции = СвойстваКоллекцийОбъектовМетаданных.Индекс(Строка);
	КонецЦикла;
	
	Если ОбъектыРасширений Тогда
		СвойстваКоллекцийОбъектовМетаданных = СвойстваКоллекцийОбъектовМетаданных.Скопировать(
			Новый Структура("ОбъектыРасширений", Истина));
	КонецЕсли;
	
	СвойстваКоллекцийОбъектовМетаданных.Индексы.Добавить("Идентификатор");
	
	Возврат СвойстваКоллекцийОбъектовМетаданных;
	
КонецФункции

// Предотвращает недопустимое изменение идентификаторов объектов метаданных.
// Выполняет обработку дублей подчиненного узла распределенной информационной базы.
//
Процедура ПередЗаписьюОбъекта(Объект) Экспорт
	
	ОбъектыРасширений = ЭтоОбъектРасширений(Объект);
	СтандартныеПодсистемыПовтИсп.ИдентификаторыОбъектовМетаданныхПроверкаИспользования(, ОбъектыРасширений);
	
	// Отключение механизма регистрации объектов.
	Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	
	// Регистрация объекта на всех узлах РИБ.
	Для Каждого ПланОбмена Из СтандартныеПодсистемыПовтИсп.ПланыОбменаРИБ() Цикл
		СтандартныеПодсистемыСервер.ЗарегистрироватьОбъектНаВсехУзлах(Объект, ПланОбмена);
	КонецЦикла;
	
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьОбъектПередЗаписью(Объект);
	
КонецПроцедуры

// Предотвращает удаление идентификаторов объектов метаданных не помеченных на удаление.
Процедура ПередУдалениемОбъекта(Объект) Экспорт
	
	ОбъектыРасширений = ЭтоОбъектРасширений(Объект);
	СтандартныеПодсистемыПовтИсп.ИдентификаторыОбъектовМетаданныхПроверкаИспользования(, ОбъектыРасширений);
	
	// Отключение механизма регистрации объектов.
	// Ссылки идентификаторов удаляются независимо во всех узлах
	// через механизм пометки удаления и удаления помеченных объектов.
	Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.ПометкаУдаления Тогда
		ВызватьИсключениеПоОшибке(ОбъектыРасширений,
			НСтр("ru = 'Удаление идентификаторов объектов, у которых значение
			           |реквизита ""Пометка удаления"" установлено Ложь недопустимо.'"));
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ФормаСпискаПриСозданииНаСервере(Форма) Экспорт
	
	Параметры = Форма.Параметры;
	Элементы  = Форма.Элементы;
	
	УпорядочитьИОформитьСписок(Форма);
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.РежимВыбора Тогда
		СтандартныеПодсистемыСервер.УстановитьКлючНазначенияФормы(Форма, "ВыборПодбор");
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Элементы.Список.РежимВыбора = Истина;
	КонецЕсли;
	
	Параметры.Свойство("ВыбиратьГруппыОбъектовМетаданных", Форма.ВыбиратьГруппыОбъектовМетаданных);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ФормаЭлементаПриСозданииНаСервере(Форма) Экспорт
	
	ОбъектыРасширений = ЭтоОбъектРасширений(Форма.Объект.Ссылка);
	
	Параметры = Форма.Параметры;
	Элементы  = Форма.Элементы;
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Форма.ТолькоПросмотр = Истина;
	
	Форма.ПустаяСсылкаПредставление = Строка(ТипЗнч(Форма.Объект.ЗначениеПустойСсылки));
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь(, Не ОбъектыРасширений)
	 ИЛИ ЗапрещеноИзменятьПолноеИмя(Форма.Объект)
	 ИЛИ Не ОбъектыРасширений И ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ()
	 ИЛИ ОбъектыРасширений И Справочники.ИдентификаторыОбъектовРасширений.ОбъектРасширенияОтключен(Форма.Объект.Ссылка) Тогда
		
		Элементы.ФормаВключитьВозможностьРедактирования.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

Процедура ОбновитьДанные(ЕстьИзменения, ЕстьУдаленные, РежимОбновления,
			ЕстьКритичныеИзменения, СписокКритичныхИзменений, СвойстваРасширений, ОбъектыРасширений)
	
	СвойстваОбъектовМетаданных = СвойстваОбъектовМетаданных(ОбъектыРасширений, СвойстваРасширений.ИменаОбъектов);
	СправочникМенеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяСправочника(ОбъектыРасширений));
	
	// Найден - состояние, когда для объекта метаданных найден идентификатор.
	СвойстваОбъектовМетаданных.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
	
	// Порядок обновления:
	// 1. Переименование объектов метаданных (с учетом нижестоящих подсистем).
	// 2. Обновление предопределенных идентификаторов (коллекций объектов метаданных).
	// 3. Обновление идентификаторов объектов метаданных, которые    имеют ключ  объекта метаданных.
	// 4. Обновление идентификаторов объектов метаданных, которые не имеют ключа объекта метаданных.
	// 5. В процессе 3 и 4 пометка удаления дублей идентификаторов (по полным именам).
	// 6. Добавление новых идентификаторов объектов метаданных.
	// 7. Обновление родителей идентификаторов объектов метаданных и запись обновленных.
	
	ВерсияРасширений = ПараметрыСеанса.ВерсияРасширений;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(ИмяСправочника(ОбъектыРасширений));
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Если ОбъектыРасширений Тогда
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИдентификаторыОбъектовВерсийРасширений");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ВерсияРасширений", ВерсияРасширений);
	КонецЕсли;
	
	СнятьМонопольныйРежим = Ложь;
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Выгрузка = ВыгрузкаВсехИдентификаторов(ОбъектыРасширений);
		Выгрузка.Колонки.Добавить("Обновлен", Новый ОписаниеТипов("Булево"));
		Выгрузка.Колонки.Добавить("ОбъектМетаданных");
		Выгрузка.Колонки.Удалить("НоваяСсылка");
		
		Если НЕ ОбъектыРасширений
		   И НЕ ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
			// Переименование полных имен перед обработкой (для РИБ только в главном узле).
			// Для расширений не поддерживается.
			ПереименоватьПолныеИмена(Выгрузка);
		КонецЕсли;
		
		СписокПереименованийОбъектовМетаданных = "";
		ЕстьТекущиеКритичныеИзменения = Ложь;
		
		// Обработка идентификаторов объектов метаданных.
		Для каждого Свойства Из Выгрузка Цикл
			
			// Проверка и обновление свойств идентификаторов коллекций объектов метаданных.
			Если Свойства.ЭтоКоллекция Тогда
				ПроверитьОбновитьСвойстваКоллекции(Свойства, ОбъектыРасширений);
				Продолжить;
			КонецЕсли;
			
			Если ОбъектыРасширений
			   И СвойстваРасширений.ИменаНеподключенныхРасширений[Свойства.ИмяРасширения] <> Неопределено Тогда
				// Элементы неподключенных расширений остаются неизменными для возможности
				// использования после исправления ошибок в расширениях так, чтобы обработка
				// удаления помеченных не удалила связанные данные.
				Продолжить;
			КонецЕсли;
			
			Если ОбъектыРасширений
			   И СвойстваРасширений.ИменаПодключенныхРасширений[Свойства.ИмяРасширения] = Неопределено Тогда
				
				СвойстваОбновлены = Ложь;
				ОбновитьСвойстваПомеченногоНаУдаление(Свойства, СвойстваОбновлены, ЕстьУдаленные);
				Если СвойстваОбновлены Тогда
					Свойства.Обновлен = Истина;
				КонецЕсли;
			КонецЕсли;
			
			КлючОбъектаМетаданных = Свойства.КлючОбъектаМетаданных;
			ОбъектМетаданных = ОбъектМетаданныхПоКлючу(КлючОбъектаМетаданных);
			
			Если ОбъектМетаданных = Неопределено Тогда
				// Если объект метаданных без ключа, то его можно найти только по полному имени.
				ОбъектМетаданных = МетаданныеНайтиПоПолномуИмени(Свойства.ПолноеИмя);
			Иначе
				// Если объект метаданных удалялся с целью реструктуризации, тогда
				// старый идентификатор нужно использовать для нового объекта метаданных,
				// а для старых объектов метаданных создать новые идентификаторы.
				Если ВРег(Лев(ОбъектМетаданных.Имя, СтрДлина("Удалить"))) =  ВРег("Удалить")
				   И ВРег(Лев(Свойства.Имя,         СтрДлина("Удалить"))) <> ВРег("Удалить") Тогда
					
					НовыйОбъектМетаданных = МетаданныеНайтиПоПолномуИмени(Свойства.ПолноеИмя);
					Если НовыйОбъектМетаданных <> Неопределено Тогда
						ОбъектМетаданных = НовыйОбъектМетаданных;
						КлючОбъектаМетаданных = Неопределено; // Чтобы выполнить обновление идентификатора.
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Если объект метаданных найден по ключу или полному имени,
			// тогда нужно подготовить строку свойств объекта метаданных.
			Если ОбъектМетаданных <> Неопределено Тогда
				СвойстваОбъекта = СвойстваОбъектовМетаданных.Найти(ОбъектМетаданных.ПолноеИмя(), "ПолноеИмя");
				Если СвойстваОбъекта = Неопределено Тогда
					ОбъектМетаданных = Неопределено;
				Иначе
					Свойства.ОбъектМетаданных = ОбъектМетаданных;
				КонецЕсли;
			КонецЕсли;
			
			Если ОбъектМетаданных = Неопределено ИЛИ СвойстваОбъекта.Найден Тогда
				// Если объект метаданных не найден или найден повторно
				// тогда идентификатор требуется пометить на удаление.
				СвойстваОбновлены = Ложь;
				ОбновитьСвойстваПомеченногоНаУдаление(Свойства, СвойстваОбновлены, ЕстьУдаленные);
				Если СвойстваОбновлены Тогда
					Свойства.Обновлен = Истина;
				КонецЕсли;
			Иначе
				// Обновление свойств существующих объектов метаданных, если изменились.
				СвойстваОбъекта.Найден = Истина;
				Если Свойства.Наименование              <> СвойстваОбъекта.Наименование
				 ИЛИ Свойства.ПорядокКоллекции          <> СвойстваОбъекта.ПорядокКоллекции
				 ИЛИ Свойства.Имя                       <> СвойстваОбъекта.Имя
				 ИЛИ Свойства.Синоним                   <> СвойстваОбъекта.Синоним
				 ИЛИ Свойства.ПолноеИмя                 <> СвойстваОбъекта.ПолноеИмя
				 ИЛИ Свойства.ПолныйСиноним             <> СвойстваОбъекта.ПолныйСиноним
				 ИЛИ Свойства.БезДанных                 <> СвойстваОбъекта.БезДанных
				 ИЛИ Свойства.ЗначениеПустойСсылки      <> СвойстваОбъекта.ЗначениеПустойСсылки
				 ИЛИ Свойства.ИмяРасширения             <> СвойстваОбъекта.ИмяРасширения
				 ИЛИ Свойства.ИмяПредопределенныхДанных <> ""
				 ИЛИ Свойства.ПометкаУдаления
				 ИЛИ КлючОбъектаМетаданных = Неопределено
				 ИЛИ СвойстваОбъекта.БезКлючаОбъектаМетаданных
				     И КлючОбъектаМетаданных <> Тип("Неопределено") Тогда
					
					Если ВРег(Свойства.ПолноеИмя) <> ВРег(СвойстваОбъекта.ПолноеИмя) Тогда
						ЕстьТекущиеКритичныеИзменения = Истина;
						ЕстьКритичныеИзменения = Истина;
						СписокПереименованийОбъектовМетаданных = СписокПереименованийОбъектовМетаданных
							+ ?(ЗначениеЗаполнено(СписокПереименованийОбъектовМетаданных), "," + Символы.ПС, "")
							+ Свойства.ПолноеИмя + " -> " + СвойстваОбъекта.ПолноеИмя;
					КонецЕсли;
					
					// Установка новых свойств идентификатора объекта метаданных.
					ЗаполнитьЗначенияСвойств(Свойства, СвойстваОбъекта);
					
					Свойства.ИмяПредопределенныхДанных = "";
					
					Если КлючОбъектаМетаданных = Неопределено
					 ИЛИ СвойстваОбъекта.БезКлючаОбъектаМетаданных
					     И КлючОбъектаМетаданных <> Тип("Неопределено") Тогда
						
						Свойства.КлючОбъектаМетаданных = КлючОбъектаМетаданных(СвойстваОбъекта.ПолноеИмя);
					КонецЕсли;
					
					Свойства.ПометкаУдаления = Ложь;
					Свойства.Обновлен = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СписокНовыхОбъектовМетаданных = "";
		
		// Добавление идентификаторов новых объектов метаданных.
		Для каждого СвойстваОбъекта Из СвойстваОбъектовМетаданных.НайтиСтроки(Новый Структура("Найден", Ложь)) Цикл
			Свойства = Выгрузка.Добавить();
			ЗаполнитьЗначенияСвойств(Свойства, СвойстваОбъекта);
			Свойства.ЭтоНовый = Истина;
			Свойства.Ссылка = НоваяСсылкаСправочника(ОбъектыРасширений);
			Свойства.ПометкаУдаления  = Ложь;
			Свойства.ОбъектМетаданных = СвойстваОбъекта.ОбъектМетаданных;
			Свойства.КлючОбъектаМетаданных = КлючОбъектаМетаданных(Свойства.ПолноеИмя);
			ЕстьТекущиеКритичныеИзменения = Истина;
			ЕстьКритичныеИзменения = Истина;
			СписокНовыхОбъектовМетаданных = СписокНовыхОбъектовМетаданных
				+ ?(ЗначениеЗаполнено(СписокНовыхОбъектовМетаданных), "," + Символы.ПС, "")
				+ СвойстваОбъекта.ПолноеИмя;
		КонецЦикла;
		
		СписокКритичныхИзменений = "";
		Если ЗначениеЗаполнено(СписокПереименованийОбъектовМетаданных) Тогда
			СписокКритичныхИзменений = НСтр("ru = 'Переименование идентификаторов объектов метаданных СтароеПолноеИмя -> НовоеПолноеИмя:'")
				+ Символы.ПС + СписокПереименованийОбъектовМетаданных + Символы.ПС + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(СписокНовыхОбъектовМетаданных) Тогда
			СписокКритичныхИзменений = СписокКритичныхИзменений
				+ НСтр("ru = 'Добавление новых идентификаторов объектов метаданных:'")
				+ Символы.ПС + СписокНовыхОбъектовМетаданных + Символы.ПС;
		КонецЕсли;
		
		Если РежимОбновления = "Полный"
		   И Не МонопольныйРежим()
		   И Не ОбъектыРасширений
		   И ЕстьТекущиеКритичныеИзменения Тогда
			
			ЗафиксироватьТранзакцию();
			Попытка
				УстановитьМонопольныйРежим(Истина);
			Исключение
				НачатьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			СнятьМонопольныйРежим = Истина;
			НачатьТранзакцию();
		КонецЕсли;
		
		Если ОбъектыРасширений Тогда
			НаборЗаписей = РегистрыСведений.ИдентификаторыОбъектовВерсийРасширений.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВерсияРасширений.Установить(ВерсияРасширений);
			НаборЗаписей.Прочитать();
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
			ТаблицаЗаписей.ЗаполнитьЗначения(Истина, "Удалить");
			ТаблицаЗаписей.Индексы.Добавить("Идентификатор, ПолноеИмяОбъекта, ВерсияРасширений");
			ОбновитьНаборЗаписей = Ложь;
		КонецЕсли;
		
		// Обновление родителей идентификаторов объектов метаданных.
		Для каждого Свойства Из Выгрузка Цикл
			
			Если НЕ Свойства.ЭтоКоллекция Тогда
				СвойстваОбъекта = СвойстваОбъектовМетаданных.Найти(Свойства.ПолноеИмя, "ПолноеИмя");
				НовыйРодитель = ПустаяСсылкаСправочника(ОбъектыРасширений);
				
				Если СвойстваОбъекта <> Неопределено Тогда
					Если НЕ ЗначениеЗаполнено(СвойстваОбъекта.ПолноеИмяРодителя) Тогда
						// Коллекция объектов метаданных.
						НовыйРодитель = СвойстваОбъекта.Родитель;
					Иначе
						// Не коллекция объектов метаданных, например, подсистема.
						ОписаниеРодителя = Выгрузка.Найти(СвойстваОбъекта.ПолноеИмяРодителя, "ПолноеИмя");
						Если ОписаниеРодителя <> Неопределено Тогда
							НовыйРодитель = ОписаниеРодителя.Ссылка;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если Свойства.Родитель <> НовыйРодитель Тогда
					Свойства.Родитель = НовыйРодитель;
					Свойства.Обновлен = Истина;
				КонецЕсли;
				
				Если ОбъектыРасширений
				   И Свойства.ПометкаУдаления = Ложь
				   И СвойстваРасширений.ИменаНеподключенныхРасширений[Свойства.ИмяРасширения] = Неопределено Тогда
					
					Отбор = Новый Структура;
					Отбор.Вставить("ВерсияРасширений", ВерсияРасширений);
					Отбор.Вставить("Идентификатор",    Свойства.Ссылка);
					Отбор.Вставить("ПолноеИмяОбъекта", Свойства.ПолноеИмя);
					Строки = ТаблицаЗаписей.НайтиСтроки(Отбор);
					Если Строки.Количество() = 0 Тогда
						ОбновитьНаборЗаписей = Истина;
						ЗаполнитьЗначенияСвойств(ТаблицаЗаписей.Добавить(), Отбор);
					Иначе
						Строки[0].Удалить = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Свойства.ЭтоНовый Тогда
				ТаблицаОбъект = СоздатьЭлементСправочника(ОбъектыРасширений);
				ТаблицаОбъект.УстановитьСсылкуНового(Свойства.Ссылка);
				
			ИначеЕсли Свойства.Обновлен Тогда
				ТаблицаОбъект = Свойства.Ссылка.ПолучитьОбъект();
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЕстьТекущиеИзменения = Истина;
			ЕстьИзменения = Истина;
			Если РежимОбновления = "ТолькоПроверка"
			 Или РежимОбновления <> "Полный" И ЕстьКритичныеИзменения Тогда
				ЗафиксироватьТранзакцию();
				Возврат;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ТаблицаОбъект, Свойства);
			ТаблицаОбъект.КлючОбъектаМетаданных = Новый ХранилищеЗначения(Свойства.КлючОбъектаМетаданных);
			ТаблицаОбъект.ОбменДанными.Загрузка = Истина;
			ПроверитьОбъектПередЗаписью(ТаблицаОбъект, Истина);
			ТаблицаОбъект.Записать();
		КонецЦикла;
		
		Если ОбъектыРасширений Тогда
			ТаблицаЗаписей.Индексы.Добавить("Удалить");
			Строки = ТаблицаЗаписей.НайтиСтроки(Новый Структура("Удалить", Истина));
			Если Строки.Количество() > 0 Тогда
				ОбновитьНаборЗаписей = Истина;
				Для Каждого Строка Из Строки Цикл
					ТаблицаЗаписей.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;
			Если ТаблицаЗаписей.Количество() = 0
			   И ЗначениеЗаполнено(ВерсияРасширений) Тогда
				// Добавление записи, если в расширении нет объектов метаданных,
				// чтобы при проверке наличия кэша, получить значение Истина.
				ТаблицаЗаписей.Добавить().ВерсияРасширений = ВерсияРасширений;
				ОбновитьНаборЗаписей = Истина;
			КонецЕсли;
			Если ОбновитьНаборЗаписей Тогда
				ЕстьКритичныеИзменения = Истина;
				ЕстьТекущиеИзменения = Истина;
				ЕстьИзменения = Истина;
				Если РежимОбновления = "ТолькоПроверка" Тогда
					ЗафиксироватьТранзакцию();
					Возврат;
				КонецЕсли;
				НаборЗаписей.Загрузить(ТаблицаЗаписей);
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СписокКритичныхИзменений) Тогда
			ЗаписьЖурналаРегистрации(?(ОбъектыРасширений,
					НСтр("ru = 'Идентификаторы объектов расширений.Выполнены критичные изменения'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					НСтр("ru = 'Идентификаторы объектов метаданных.Выполнены критичные изменения'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())),
				УровеньЖурналаРегистрации.Информация,
				,
				,
				СписокКритичныхИзменений,
				РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецЕсли;
		
		Если Не ОбъектыРасширений И ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
			ПодготовитьСписокНовыхПодсистемВГлавномУзле(Выгрузка);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Если СнятьМонопольныйРежим Тогда
			УстановитьМонопольныйРежим(Ложь);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Если СнятьМонопольныйРежим Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыгрузкаВсехИдентификаторов(ОбъектыРасширений = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Идентификаторы.Ссылка КАК Ссылка,
	|	Идентификаторы.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	Идентификаторы.Родитель КАК Родитель,
	|	Идентификаторы.ПометкаУдаления КАК ПометкаУдаления,
	|	Идентификаторы.Наименование КАК Наименование,
	|	Идентификаторы.ПорядокКоллекции,
	|	Идентификаторы.Имя,
	|	Идентификаторы.Синоним,
	|	Идентификаторы.ПолноеИмя,
	|	Идентификаторы.ПолныйСиноним,
	|	Идентификаторы.БезДанных,
	|	Идентификаторы.ЗначениеПустойСсылки,
	|	Идентификаторы.КлючОбъектаМетаданных КАК ХранилищеКлюча,
	|	Идентификаторы.НоваяСсылка,
	|	&ИмяРасширения КАК ИмяРасширения
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК Идентификаторы";
	УточнитьИмяСправочникаВТекстеЗапроса(Запрос.Текст, ОбъектыРасширений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяРасширения",
		?(ОбъектыРасширений, "Идентификаторы.ИмяРасширения", """"""));
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	Выгрузка.Колонки.Добавить("КлючОбъектаМетаданных");
	Выгрузка.Колонки.Добавить("БезКлючаОбъектаМетаданных", Новый ОписаниеТипов("Булево"));
	Выгрузка.Колонки.Добавить("ЭтоКоллекция",              Новый ОписаниеТипов("Булево"));
	Выгрузка.Колонки.Добавить("ЭтоНовый",                  Новый ОписаниеТипов("Булево"));
	
	// Упорядочение идентификаторов перед обработкой.
	Для каждого Строка Из Выгрузка Цикл
		Если ТипЗнч(Строка.ХранилищеКлюча) = Тип("ХранилищеЗначения") Тогда
			Строка.КлючОбъектаМетаданных = Строка.ХранилищеКлюча.Получить();
		Иначе
			Строка.КлючОбъектаМетаданных = Неопределено;
		КонецЕсли;
		
		Строка.БезКлючаОбъектаМетаданных = Строка.КлючОбъектаМетаданных = Неопределено
		                               ИЛИ Строка.КлючОбъектаМетаданных = Тип("Неопределено");
	КонецЦикла;
	
	Выгрузка.Индексы.Добавить("Ссылка");
	Выгрузка.Индексы.Добавить("ПолноеИмя");
	
	СвойстваКоллекций = СтандартныеПодсистемыПовтИсп.СвойстваКоллекцийОбъектовМетаданных(ОбъектыРасширений);
	
	Для каждого СвойстваКоллекции Из СвойстваКоллекций Цикл
		ИдентификаторКоллекции = ИдентификаторКоллекции(СвойстваКоллекции.Идентификатор, ОбъектыРасширений);
		Строка = Выгрузка.Найти(ИдентификаторКоллекции, "Ссылка");
		Если Строка = Неопределено Тогда
			Строка = Выгрузка.Добавить();
			Строка.Ссылка   = ИдентификаторКоллекции;
			Строка.ЭтоНовый = Истина;
		КонецЕсли;
		Строка.ЭтоКоллекция = Истина;
	КонецЦикла;
	
	Выгрузка.Сортировать("ЭтоКоллекция УБЫВ,
	                     |ПометкаУдаления ВОЗР,
	                     |БезКлючаОбъектаМетаданных ВОЗР");
	
	Возврат Выгрузка;
	
КонецФункции

Процедура ПереименоватьПолныеИмена(Выгрузка)
	
	ТаблицаПереименования = СтандартныеПодсистемыПовтИсп.ТаблицаПереименованияДляТекущейВерсии();
	
	Для каждого ОписаниеПереименования Из ТаблицаПереименования Цикл
		ДлинаСтарогоПолногоИмени = СтрДлина(ОписаниеПереименования.СтароеПолноеИмя);
		ЭтоПодсистема = ВРег(Лев(ОписаниеПереименования.СтароеПолноеИмя, 11)) = ВРег("Подсистема.");
		
		Для каждого Строка Из Выгрузка Цикл
			
			Если Строка.ЭтоКоллекция Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭтоПодсистема Тогда
				Если ВРег(Лев(Строка.ПолноеИмя, ДлинаСтарогоПолногоИмени))
				     = ВРег(ОписаниеПереименования.СтароеПолноеИмя) Тогда
					
					Строка.ПолноеИмя = ОписаниеПереименования.НовоеПолноеИмя
						+ Сред(Строка.ПолноеИмя, ДлинаСтарогоПолногоИмени + 1);
				КонецЕсли;
			Иначе
				Если ВРег(Строка.ПолноеИмя) = ВРег(ОписаниеПереименования.СтароеПолноеИмя) Тогда
					Строка.ПолноеИмя = ОписаниеПереименования.НовоеПолноеИмя;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСвойстваПомеченногоНаУдаление(Свойства, СвойстваОбновлены = Ложь, ЕстьУдаленные = Ложь)
	
	ОбъектыРасширений = ЭтоОбъектРасширений(Свойства.Ссылка);
	
	Если ТипЗнч(Свойства.КлючОбъектаМетаданных) = Тип("ХранилищеЗначения") Тогда
		КлючОбъектаМетаданных = Свойства.КлючОбъектаМетаданных.Получить();
	Иначе
		КлючОбъектаМетаданных = Свойства.КлючОбъектаМетаданных;
	КонецЕсли;
	
	Если НЕ Свойства.ПометкаУдаления
	 ИЛИ ЗначениеЗаполнено(Свойства.Родитель)
	 ИЛИ Лев(Свойства.Наименование, 1)  <> "?"
	 ИЛИ Лев(Свойства.Имя, 1)           <> "?"
	 ИЛИ Лев(Свойства.Синоним, 1)       <> "?"
	 ИЛИ Лев(Свойства.ПолноеИмя, 1)     <> "?"
	 ИЛИ Лев(Свойства.ПолныйСиноним, 1) <> "?"
	 ИЛИ ОбъектыРасширений
	   И Лев(Свойства.ИмяРасширения, 1) <> "?"
	 ИЛИ СтрНайти(Свойства.ПолноеИмя, "(") = 0
	 ИЛИ Свойства.ЗначениеПустойСсылки  <> Неопределено
	 ИЛИ КлючОбъектаМетаданных <> Неопределено Тогда
		
		Если НЕ Свойства.ПометкаУдаления Или Лев(Свойства.ПолноеИмя, 1) <> "?" Тогда
			ЕстьУдаленные = Истина;
		КонецЕсли;
		
		// Установка новых свойств идентификатора объекта метаданных.
		Свойства.ПометкаУдаления       = Истина;
		Свойства.Родитель              = ПустаяСсылкаСправочника(ЭтоОбъектРасширений(Свойства.Ссылка));
		Свойства.Наименование          = ВставитьЗнакВопроса(Свойства.Наименование);
		Свойства.Имя                   = ВставитьЗнакВопроса(Свойства.Имя);
		Свойства.Синоним               = ВставитьЗнакВопроса(Свойства.Синоним);
		Свойства.ПолноеИмя             = УникальноеПолноеИмя(Свойства);
		Свойства.ПолныйСиноним         = ВставитьЗнакВопроса(Свойства.ПолныйСиноним);
		Свойства.ЗначениеПустойСсылки  = Неопределено;
		
		Если ОбъектыРасширений Тогда
			Свойства.ИмяРасширения = ВставитьЗнакВопроса(Свойства.ИмяРасширения);
		КонецЕсли;
		
		Если ТипЗнч(Свойства.КлючОбъектаМетаданных) = Тип("ХранилищеЗначения") Тогда
			Свойства.КлючОбъектаМетаданных = Новый ХранилищеЗначения(Неопределено);
		Иначе
			Свойства.КлючОбъектаМетаданных = Неопределено;
		КонецЕсли;
		СвойстваОбновлены = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОбновитьСвойстваКоллекции(Знач ТекущиеСвойства, ОбъектыРасширений)
	
	СвойстваКоллекций = СтандартныеПодсистемыПовтИсп.СвойстваКоллекцийОбъектовМетаданных(ОбъектыРасширений);
	НовыеСвойства = СвойстваКоллекций.Найти(ТекущиеСвойства.Ссылка.УникальныйИдентификатор(), "Идентификатор");
	
	НаименованиеКоллекции = НовыеСвойства.Синоним;
	
	Если ТекущиеСвойства.Наименование              <> НаименованиеКоллекции
	 ИЛИ ТекущиеСвойства.ПорядокКоллекции          <> НовыеСвойства.ПорядокКоллекции
	 ИЛИ ТекущиеСвойства.Имя                       <> НовыеСвойства.Имя
	 ИЛИ ТекущиеСвойства.Синоним                   <> НовыеСвойства.Синоним
	 ИЛИ ТекущиеСвойства.ПолноеИмя                 <> НовыеСвойства.Имя
	 ИЛИ ТекущиеСвойства.ПолныйСиноним             <> НовыеСвойства.Синоним
	 ИЛИ ТекущиеСвойства.БезДанных                 <> Ложь
	 ИЛИ ТекущиеСвойства.ЗначениеПустойСсылки      <> Неопределено
	 ИЛИ ТекущиеСвойства.ИмяПредопределенныхДанных <> ""
	 ИЛИ ТекущиеСвойства.ПометкаУдаления           <> Ложь
	 ИЛИ ТекущиеСвойства.КлючОбъектаМетаданных     <> Неопределено Тогда
		
		// Установка новых свойств.
		ТекущиеСвойства.Наименование              = НаименованиеКоллекции;
		ТекущиеСвойства.ПорядокКоллекции          = НовыеСвойства.ПорядокКоллекции;
		ТекущиеСвойства.Имя                       = НовыеСвойства.Имя;
		ТекущиеСвойства.Синоним                   = НовыеСвойства.Синоним;
		ТекущиеСвойства.ПолноеИмя                 = НовыеСвойства.Имя;
		ТекущиеСвойства.ПолныйСиноним             = НовыеСвойства.Синоним;
		ТекущиеСвойства.БезДанных                 = Ложь;
		ТекущиеСвойства.ЗначениеПустойСсылки      = Неопределено;
		ТекущиеСвойства.ИмяПредопределенныхДанных = "";
		ТекущиеСвойства.ПометкаУдаления           = Ложь;
		ТекущиеСвойства.КлючОбъектаМетаданных     = Неопределено;
		
		ТекущиеСвойства.Обновлен = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция КлючОбъектаМетаданных(ПолноеИмя)
	
	ПозицияТочки = СтрНайти(ПолноеИмя, ".");
	
	КлассОМ = Лев( ПолноеИмя, ПозицияТочки-1);
	ИмяОМ   = Сред(ПолноеИмя, ПозицияТочки+1);
	
	Если ВРег(КлассОМ) = ВРег("ПланОбмена") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Константа") Тогда
		Возврат ТипЗнч(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя));
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Справочник") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Документ") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("ЖурналДокументов") Тогда
		Возврат ТипЗнч(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя));
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Отчет") Тогда
		Возврат Тип(КлассОМ + "Объект." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Обработка") Тогда
		Возврат Тип(КлассОМ + "Объект." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("ПланВидовХарактеристик") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("ПланСчетов") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("ПланВидовРасчета") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("РегистрСведений") Тогда
		Возврат Тип(КлассОМ + "КлючЗаписи." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("РегистрНакопления") Тогда
		Возврат Тип(КлассОМ + "КлючЗаписи." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("РегистрБухгалтерии") Тогда
		Возврат Тип(КлассОМ + "КлючЗаписи." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("РегистрРасчета") Тогда
		Возврат Тип(КлассОМ + "КлючЗаписи." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("БизнесПроцесс") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Задача") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
	Иначе
		// Без ключа объекта метаданных.
		Возврат Тип("Неопределено");
	КонецЕсли;
	
КонецФункции 

Функция КлючиОбъектовМетаданныхСовпадают(Свойства, Объект)
	
	Возврат Свойства.КлючОбъектаМетаданных = Объект.КлючОбъектаМетаданных.Получить();
	
КонецФункции

Функция КлючОбъектаМетаданныхСоответствуетПолномуИмени(СвойстваИдентификатора)
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("НеСоответствует", Истина);
	РезультатПроверки.Вставить("КлючОбъектаМетаданных", Неопределено);
	
	КлючОбъектаМетаданных = СвойстваИдентификатора.КлючОбъектаМетаданных.Получить();
	ОбъектыРасширений = ЭтоОбъектРасширений(СвойстваИдентификатора.Ссылка);
	
	Если КлючОбъектаМетаданных <> Неопределено
	   И КлючОбъектаМетаданных <> Тип("Неопределено") Тогда
		// Ключ задан, поиск объекта метаданных по ключу.
		РезультатПроверки.Вставить("КлючОбъектаМетаданных", КлючОбъектаМетаданных);
		ОбъектМетаданных = ОбъектМетаданныхПоКлючу(КлючОбъектаМетаданных);
		Если ОбъектМетаданных <> Неопределено Тогда
			РезультатПроверки.НеСоответствует = ОбъектМетаданных.ПолноеИмя() <> СвойстваИдентификатора.ПолноеИмя;
		КонецЕсли;
	Иначе
		// Ключ не задан, поиск объекта метаданных по полному имени.
		ОбъектМетаданных = МетаданныеНайтиПоПолномуИмени(СвойстваИдентификатора.ПолноеИмя);
		Если ОбъектМетаданных = Неопределено Тогда
			// Возможно задана коллекция
			
			Строка = СтандартныеПодсистемыПовтИсп.СвойстваКоллекцийОбъектовМетаданных(ОбъектыРасширений).Найти(
				СвойстваИдентификатора.Ссылка.УникальныйИдентификатор(), "Идентификатор");
			
			Если Строка <> Неопределено Тогда
				ОбъектМетаданных = Метаданные[Строка.Имя];
				РезультатПроверки.НеСоответствует = Строка.Имя <> СвойстваИдентификатора.ПолноеИмя;
			КонецЕсли;
		Иначе
			РезультатПроверки.НеСоответствует = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверки.Вставить("ОбъектМетаданных", ОбъектМетаданных);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ЗапрещеноИзменятьПолноеИмя(Объект)
	
	ОбъектыРасширений = ЭтоОбъектРасширений(Объект);
	Если ЭтоКоллекция(Объект.Ссылка, ОбъектыРасширений) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПозицияТочки = СтрНайти(Объект.ПолноеИмя, ".");
	ИмяБазовогоТипа = Лев(Объект.ПолноеИмя, ПозицияТочки -1);
	
	СвойстваКоллекций = СтандартныеПодсистемыПовтИсп.СвойстваКоллекцийОбъектовМетаданных(ОбъектыРасширений);
	СвойстваКоллекции = СвойстваКоллекций.Найти(ИмяБазовогоТипа, "ИмяВЕдЧисле");
	
	Если СвойстваКоллекции <> Неопределено
	   И НЕ СвойстваКоллекции.БезКлючаОбъектаМетаданных Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОбъектМетаданныхПоКлючу(КлючОбъектаМетаданных)
	
	ОбъектМетаданных = Неопределено;
	
	Если ТипЗнч(КлючОбъектаМетаданных) = Тип("Тип") Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(КлючОбъектаМетаданных);
	КонецЕсли;
	
	Возврат ОбъектМетаданных;
	
КонецФункции

Функция СвойстваОбъектовМетаданных(ОбъектыРасширений, ИменаОбъектовРасширений, СвойстваКоллекций = Неопределено)
	
	МассивТиповРодителя = Новый Массив;
	МассивТиповРодителя.Добавить(ТипЗнч(ПустаяСсылкаСправочника(ОбъектыРасширений)));
	
	СвойстваОбъектовМетаданных = Новый ТаблицаЗначений;
	СвойстваОбъектовМетаданных.Колонки.Добавить("Наименование",              Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("ПолноеИмя",                 Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(510)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("ПолноеИмяРодителя",         Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(510)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("ПорядокКоллекции",          Новый ОписаниеТипов("Число"));
	СвойстваОбъектовМетаданных.Колонки.Добавить("Родитель",                  Новый ОписаниеТипов(МассивТиповРодителя));
	СвойстваОбъектовМетаданных.Колонки.Добавить("Имя",                       Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("Синоним",                   Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("ПолныйСиноним",             Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(510)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("БезДанных",                 Новый ОписаниеТипов("Булево"));
	СвойстваОбъектовМетаданных.Колонки.Добавить("БезКлючаОбъектаМетаданных", Новый ОписаниеТипов("Булево"));
	СвойстваОбъектовМетаданных.Колонки.Добавить("ИмяРасширения",             Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(128)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("ЗначениеПустойСсылки");
	СвойстваОбъектовМетаданных.Колонки.Добавить("ОбъектМетаданных");
	
	Если СвойстваКоллекций = Неопределено Тогда
		СвойстваКоллекций = СтандартныеПодсистемыПовтИсп.СвойстваКоллекцийОбъектовМетаданных(ОбъектыРасширений);
	КонецЕсли;
	
	Для каждого СвойстваКоллекции Из СвойстваКоллекций Цикл
		ДобавитьСвойстваОбъектовМетаданных(Метаданные[СвойстваКоллекции.Имя], СвойстваКоллекции,
			СвойстваОбъектовМетаданных, ОбъектыРасширений, ИменаОбъектовРасширений);
	КонецЦикла;
	
	СвойстваОбъектовМетаданных.Индексы.Добавить("ПолноеИмя");
	
	Возврат СвойстваОбъектовМетаданных;
	
КонецФункции

Процедура ДобавитьСвойстваОбъектовМетаданных(Знач КоллекцияОбъектовМетаданных,
                                             Знач СвойстваКоллекции,
                                             Знач СвойстваОбъектовМетаданных,
                                             Знач ОбъектыРасширений,
                                             Знач ИменаОбъектовРасширений,
                                             Знач ПолноеИмяРодителя = "",
                                             Знач ПолныйСинонимРодителя = "")
	
	Для каждого ОбъектМетаданных Из КоллекцияОбъектовМетаданных Цикл
		
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		Если ИменаОбъектовРасширений <> Неопределено Тогда
			Строка = ИменаОбъектовРасширений.Найти(ПолноеИмя, "ПолноеИмя");
			ИмяРасширения = ?(Строка = Неопределено, Неопределено, Строка.ИмяРасширения);
			Если ЗначениеЗаполнено(ИмяРасширения) <> ОбъектыРасширений Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрНайти(СвойстваКоллекции.ИмяВЕдЧисле, "Подсистема") <> 0 Тогда
			МетаданныеНайтиПоПолномуИмени(ПолноеИмя);
		КонецЕсли;
		
		Если НЕ СвойстваКоллекции.БезДанных
		   И СтрНайти(СвойстваКоллекции.ИмяВЕдЧисле, "Регистр") = 0
		   И СтрНайти(СвойстваКоллекции.ИмяВЕдЧисле, "Константа") = 0 Тогда
			
			ЗначениеПустойСсылки = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя).ПустаяСсылка();
		Иначе
			ЗначениеПустойСсылки = Неопределено;
		КонецЕсли;
		
		НоваяСтрока = СвойстваОбъектовМетаданных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваКоллекции);
		НоваяСтрока.Родитель          = ИдентификаторКоллекции(СвойстваКоллекции.Идентификатор, ОбъектыРасширений);
		НоваяСтрока.Наименование      = ПредставлениеОбъектаМетаданных(ОбъектМетаданных, СвойстваКоллекции);
		НоваяСтрока.ПолноеИмя         = ПолноеИмя;
		НоваяСтрока.ПолноеИмяРодителя = ПолноеИмяРодителя;
		НоваяСтрока.Имя               = ОбъектМетаданных.Имя;
		
		НоваяСтрока.Синоним = ?(
			ЗначениеЗаполнено(ОбъектМетаданных.Синоним), ОбъектМетаданных.Синоним, ОбъектМетаданных.Имя);
		
		НоваяСтрока.ПолныйСиноним =
			ПолныйСинонимРодителя + СвойстваКоллекции.СинонимВЕдЧисле + ". " + НоваяСтрока.Синоним;
		
		НоваяСтрока.ЗначениеПустойСсылки = ЗначениеПустойСсылки;
		НоваяСтрока.ОбъектМетаданных     = ОбъектМетаданных;
		
		Если ИменаОбъектовРасширений <> Неопределено И ОбъектыРасширений Тогда
			НоваяСтрока.ИмяРасширения = ИмяРасширения;
		КонецЕсли;
		
		Если СвойстваКоллекции.Имя = "Подсистемы" Тогда
			ДобавитьСвойстваОбъектовМетаданных(
				ОбъектМетаданных.Подсистемы,
				СвойстваКоллекции,
				СвойстваОбъектовМетаданных,
				ОбъектыРасширений,
				ИменаОбъектовРасширений,
				ПолноеИмя,
				НоваяСтрока.ПолныйСиноним + ". ");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеОбъектаМетаданных(Знач ОбъектМетаданных, Знач СвойстваКоллекции)
	
	Постфикс = "(" + СвойстваКоллекции.СинонимВЕдЧисле + ")";
	
	Синоним = ?(ЗначениеЗаполнено(ОбъектМетаданных.Синоним), ОбъектМетаданных.Синоним, ОбъектМетаданных.Имя);
	
	МаксимальнаяДлинаСинонима = 150 - СтрДлина(Постфикс);
	Если СтрДлина(Синоним) > МаксимальнаяДлинаСинонима + 1 Тогда
		Возврат Лев(Синоним, МаксимальнаяДлинаСинонима - 2) + "..." + Постфикс;
	КонецЕсли;
	
	Возврат Синоним + " (" + СвойстваКоллекции.СинонимВЕдЧисле + ")";
	
КонецФункции

Функция ВставитьЗнакВопроса(Знач Строка)
	
	Если Не СтрНачинаетсяС(Строка, "?") Тогда
		Если Не СтрНачинаетсяС(Строка, " ") Тогда
			Строка = "? " + Строка;
		Иначе
			Строка = "?" + Строка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

Функция УникальноеПолноеИмя(Свойства)
	
	ПолноеИмя = ВставитьЗнакВопроса(Свойства.ПолноеИмя);
	
	Если СтрНайти(ПолноеИмя, "(") = 0 Тогда
		ПолноеИмя = ПолноеИмя + " (" + Строка(Свойства.Ссылка.УникальныйИдентификатор())+ ")";
	КонецЕсли;
	
	Возврат ПолноеИмя;
	
КонецФункции

Функция МетаданныеНайтиПоПолномуИмени(ПолноеИмя)
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВРег(ОбъектМетаданных.ПолноеИмя()) <> ВРег(ПолноеИмя) Тогда
		
		Если СтрЧислоВхождений(ВРег(ПолноеИмя), ВРег("Подсистема.")) > 1 Тогда
			Подсистема = НайтиПодсистемуПоПолномуИмени(ПолноеИмя);
			Если Подсистема = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при поиске дочерней подсистемы по полному имени (при поиске ""%1"" была найдена ""%2"").
				           |Не следует называть подсистемы одинаково, либо использовать более новую версию платформы.'"),
				ПолноеИмя,
				ОбъектМетаданных.ПолноеИмя());
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при поиске объекта метаданных по полному имени (при поиске ""%1"" был найден ""%2"").'"),
				ПолноеИмя,
				ОбъектМетаданных.ПолноеИмя());
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектМетаданных;
	
КонецФункции

Функция НайтиПодсистемуПоПолномуИмени(ПолноеИмя, КоллекцияПодсистемы = Неопределено)
	
	Если КоллекцияПодсистемы = Неопределено Тогда
		КоллекцияПодсистемы = Метаданные.Подсистемы;
	КонецЕсли;
	
	ОстатокИмени = Сред(ПолноеИмя, СтрДлина("Подсистема.") + 1);
	Позиция = СтрНайти(ВРег(ОстатокИмени), ВРег("Подсистема."));
	Если Позиция > 0 Тогда
		ИмяПодсистемы = Лев(ОстатокИмени, Позиция - 2);
		ОстатокИмени = Сред(ПолноеИмя, Позиция + СтрДлина("Подсистема."));
	Иначе
		ИмяПодсистемы = ОстатокИмени;
		ОстатокИмени = Неопределено;
	КонецЕсли;
	
	НайденнаяПодсистема = Неопределено;
	Для каждого Подсистема Из КоллекцияПодсистемы Цикл
		Если ВРег(Подсистема.Имя) = ВРег(ИмяПодсистемы) Тогда
			НайденнаяПодсистема = Подсистема;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденнаяПодсистема = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОстатокИмени = Неопределено Тогда
		Возврат НайденнаяПодсистема;
	КонецЕсли;
	
	Возврат НайтиПодсистемуПоПолномуИмени(ОстатокИмени, НайденнаяПодсистема.Подсистемы);
	
КонецФункции

Функция ПолноеИмяИспользуется(Объект, ОбъектыРасширения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПолноеИмя", Объект.ПолноеИмя);
	Запрос.УстановитьПараметр("Ссылка",    Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|ГДЕ
	|	ИдентификаторыОбъектовМетаданных.Ссылка <> &Ссылка
	|	И ИдентификаторыОбъектовМетаданных.ПолноеИмя = &ПолноеИмя";
	УточнитьИмяСправочникаВТекстеЗапроса(Запрос.Текст, ОбъектыРасширения);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЭтоКоллекция(Ссылка, ОбъектыРасширений = Ложь)
	
	СвойстваКоллекций = СтандартныеПодсистемыПовтИсп.СвойстваКоллекцийОбъектовМетаданных(ОбъектыРасширений);
	Возврат СвойстваКоллекций.Найти(Ссылка.УникальныйИдентификатор(), "Идентификатор") <> Неопределено;
	
КонецФункции

Процедура ПодготовитьСписокНовыхПодсистемВГлавномУзле(Выгрузка)
	
	НайденноеОписание = Выгрузка.Найти(Метаданные.Подсистемы.СтандартныеПодсистемы, "ОбъектМетаданных");
	Если НайденноеОписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПодсистемаСтандартныеПодсистемы = НайденноеОписание.Ссылка;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЭтоНовый", Истина);
	Отбор.Вставить("Родитель", ПодсистемаСтандартныеПодсистемы);
	
	НайденныеОписания = Выгрузка.НайтиСтроки(Отбор);
	
	НовыеПодсистемы = Новый Массив;
	Для Каждого Описание Из НайденныеОписания Цикл
		НовыеПодсистемы.Добавить(Описание.ПолноеИмя);
	КонецЦикла;
	
	ОбновитьСписокНовыхПодсистем(НовыеПодсистемы);
	
КонецПроцедуры

Процедура ПодготовитьСписокНовыхПодсистемВПодчиненномУзле(ОбъектыДляЗаписи)
	
	НовыеПодсистемы = Новый Массив;
	НачалоИмени = "Подсистема.СтандартныеПодсистемы.";
	
	Для Каждого Объект Из ОбъектыДляЗаписи Цикл
		Если Не Объект.ЭтоНовый()
		 Или Объект.ДополнительныеСвойства.Свойство("ЭтоЗаменаДубля")
		 Или ВРег(Лев(Объект.ПолноеИмя, СтрДлина(НачалоИмени))) <> ВРег(НачалоИмени) Тогда
			Продолжить;
		КонецЕсли;
		НовыеПодсистемы.Добавить(Объект.ПолноеИмя);
	КонецЦикла;
	
	ОбновитьСписокНовыхПодсистем(НовыеПодсистемы);
	
КонецПроцедуры

Процедура ОбновитьСписокНовыхПодсистем(НовыеПодсистемы)
	
	Сведения = ОбновлениеИнформационнойБазыСлужебный.СведенияОбОбновленииИнформационнойБазы();
	ЕстьИзменения = Ложь;
	
	Для Каждого ИмяПодсистемы Из НовыеПодсистемы Цикл
		Если Сведения.НовыеПодсистемы.Найти(ИмяПодсистемы) = Неопределено Тогда
			Сведения.НовыеПодсистемы.Добавить(ИмяПодсистемы);
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Удаление из списка подсистем, удаленных из метаданных.
	Индекс = Сведения.НовыеПодсистемы.Количество() - 1;
	Пока Индекс >= 0 Цикл
		ИмяПодсистемы = Сведения.НовыеПодсистемы.Получить(Индекс);
		Если Метаданные.НайтиПоПолномуИмени(ИмяПодсистемы) = Неопределено Тогда
			Сведения.НовыеПодсистемы.Удалить(Индекс);
			ЕстьИзменения = Истина;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Если Не ЕстьИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыСлужебный.ЗаписатьСведенияОбОбновленииИнформационнойБазы(Сведения);
	
КонецПроцедуры

Функция ИдентификаторКоллекции(УникальныйИдентификатор, ОбъектыРасширений)
	
	Если ОбъектыРасширений Тогда
		Возврат Справочники.ИдентификаторыОбъектовРасширений.ПолучитьСсылку(УникальныйИдентификатор);
	Иначе
		Возврат ПолучитьСсылку(УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

Функция ЭтоОбъектРасширений(ОбъектИлиСсылка)
	
	Возврат ТипЗнч(ОбъектИлиСсылка) = Тип("СправочникОбъект.ИдентификаторыОбъектовРасширений")
		Или ТипЗнч(ОбъектИлиСсылка) = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений");
	
КонецФункции

Функция СоздатьЭлементСправочника(ОбъектыРасширений)
	
	Если ОбъектыРасширений Тогда
		Возврат Справочники.ИдентификаторыОбъектовРасширений.СоздатьЭлемент();
	Иначе
		Возврат СоздатьЭлемент();
	КонецЕсли;
	
КонецФункции

Функция ПустаяСсылкаСправочника(ОбъектыРасширений)
	
	Если ОбъектыРасширений Тогда
		Возврат Справочники.ИдентификаторыОбъектовРасширений.ПустаяСсылка();
	Иначе
		Возврат ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция НоваяСсылкаСправочника(ОбъектыРасширений)
	
	Если ОбъектыРасширений Тогда
		Возврат Справочники.ИдентификаторыОбъектовРасширений.ПолучитьСсылку();
	Иначе
		Возврат ПолучитьСсылку();
	КонецЕсли;
	
КонецФункции

Функция ИмяСправочника(ОбъектыРасширений)
	
	Если ОбъектыРасширений Тогда
		Возврат "Справочник.ИдентификаторыОбъектовРасширений";
	Иначе
		Возврат "Справочник.ИдентификаторыОбъектовМетаданных";
	КонецЕсли;
	
КонецФункции

Функция НазваниеСправочника(ОбъектыРасширений)
	
	Если ОбъектыРасширений Тогда
		НазваниеСправочника = НСтр("ru = 'Идентификаторы объектов расширений'");
	Иначе
		НазваниеСправочника = НСтр("ru = 'Идентификаторы объектов метаданных'");
	КонецЕсли;
	
	Возврат НазваниеСправочника;
	
КонецФункции

Процедура УточнитьИмяСправочникаВТекстеЗапроса(ТекстЗапроса, ОбъектыРасширений)
	
	Если ОбъектыРасширений Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.ИдентификаторыОбъектовМетаданных",
			ИмяСправочника(ОбъектыРасширений));
	КонецЕсли;
	
КонецПроцедуры

Процедура ВызватьИсключениеПоОшибке(ОбъектыРасширений, ТекстОшибки)
	
	ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка при работе со справочником ""%1"".'"),
		НазваниеСправочника(ОбъектыРасширений));
	
	ВызватьИсключение ЗаголовокОшибки + Символы.ПС + Символы.ПС + ТекстОшибки;
	
КонецПроцедуры

Функция ЭтоПодсистема(ОбъектМетаданных, КоллекцияПодсистем = Неопределено)
	
	Если КоллекцияПодсистем = Неопределено Тогда
		КоллекцияПодсистем = Метаданные.Подсистемы;
	КонецЕсли;
	
	Если КоллекцияПодсистем.Содержит(ОбъектМетаданных) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого Подсистема Из КоллекцияПодсистем Цикл
		Если ЭтоПодсистема(ОбъектМетаданных, Подсистема.Подсистемы) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Для процедуры ДобавитьПереименование.
Функция ИмяКоллекции(ПолноеИмя)
	
	ПозицияТочки = СтрНайти(ПолноеИмя, ".");
	
	Если ПозицияТочки > 0 Тогда
		Возврат Лев(ПолноеИмя, ПозицияТочки - 1);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Для процедур ВыполнитьОбновлениеДанных и ПередЗаписьюОбъекта.
Процедура ПроверитьОбъектПередЗаписью(Объект, АвтоматическоеОбновление = Ложь)
	
	ОбъектыРасширений = ЭтоОбъектРасширений(Объект);
	
	Если НЕ АвтоматическоеОбновление Тогда
		
		Если Объект.ЭтоНовый() Тогда
			
			ВызватьИсключениеПоОшибке(ОбъектыРасширений,
				НСтр("ru = 'Создание нового идентификатора объекта
				           |возможно только автоматически при обновлении данных справочника.'"));
				
		ИначеЕсли ЗапрещеноИзменятьПолноеИмя(Объект) Тогда
			
			ВызватьИсключениеПоОшибке(ОбъектыРасширений, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При изменении идентификатора объекта указано
				           |полное имя ""%1"", которое может быть
				           |установлено только автоматически при обновлении данных справочника.'"),
				Объект.ПолноеИмя));
		Иначе
			Если ПолноеИмяИспользуется(Объект, Ложь) Тогда
				НазваниеСправочника = НазваниеСправочника(Ложь);
				
			ИначеЕсли ОбъектыРасширений И ПолноеИмяИспользуется(Объект, Истина) Тогда
				НазваниеСправочника = НазваниеСправочника(Истина);
			Иначе
				НазваниеСправочника = "";
			КонецЕсли;
			Если ЗначениеЗаполнено(НазваниеСправочника) Тогда
				ВызватьИсключениеПоОшибке(ОбъектыРасширений, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При изменении идентификатора объекта указано
					           |полное имя ""%1"",
					           |которое уже используется в справочнике ""%2"".'"),
					Объект.ПолноеИмя, НазваниеСправочника));
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьСвойстваИдентификатора(Объект);
	КонецЕсли;
	
	Если Не ОбъектыРасширений И ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		
		Если Объект.ЭтоНовый()
		   И Не ЭтоКоллекция(Объект.ПолучитьСсылкуНового(), ЭтоОбъектРасширений(Объект)) Тогда
			
			ВызватьИсключениеПоОшибке(ОбъектыРасширений,
				НСтр("ru = 'Добавление новых элементов может быть выполнено
				           |только в главном узле распределенной информационной базы.'"));
		КонецЕсли;
		
		Если Не Объект.ПометкаУдаления
		   И Не ЭтоКоллекция(Объект.Ссылка, ЭтоОбъектРасширений(Объект)) Тогда
			
			Если ВРег(Объект.ПолноеИмя) <> ВРег(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ПолноеИмя")) Тогда
				ВызватьИсключениеПоОшибке(ОбъектыРасширений,
					НСтр("ru = 'Изменение реквизита ""Полное имя"" может быть выполнено
					           |только в главном узле распределенной информационной базы.'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Для процедур ПроверкаИспользования и ДанныеОбновлены.
Функция ОписаниеОшибкиИдентификаторыОбъектовРасширенийНедоступныВНеразделенномРежиме()
	
	Возврат
		НСтр("ru = 'Справочник ""Идентификаторы объектов расширений""
		           |не может использоваться в неразделенном режиме.'");
	
КонецФункции

// Для процедуры ПриСозданииНаСервереФормыСписка.
Процедура УпорядочитьИОформитьСписок(Форма)
	
	// Порядок.
	Порядок = Форма.Список.КомпоновщикНастроек.Настройки.Порядок;
	Порядок.ИдентификаторПользовательскойНастройки = "ОсновнойПорядок";
	
	Порядок.Элементы.Очистить();
	
	ЭлементПорядка = Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
	ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементПорядка.Использование = Истина;
	
	ЭлементПорядка = Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ПорядокКоллекции");
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементПорядка.Использование = Истина;
	
	ЭлементПорядка = Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Родитель");
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементПорядка.Использование = Истина;
	
	ЭлементПорядка = Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Синоним");
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементПорядка.Использование = Истина;
	
	// Оформление.
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.ПометкаБудущегоУдаления");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("Синоним");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("ПолноеИмя");
	ЭлементОформляемогоПоля.Использование = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для определения принадлежности объекта метаданных расширению.

// Возвращает таблицу, по которой можно получить полные имена
// объектов метаданных расширений.
//
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//   * ПолноеИмя  - Строка - полное имя объекта метаданных.
//   * Расширение - Строка - имя расширения.
//
Функция СвойстваРасширений()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИменаОбъектов = Новый ТаблицаЗначений;
	ИменаОбъектов.Колонки.Добавить("ПолноеИмя",     Новый ОписаниеТипов("Строка"));
	ИменаОбъектов.Колонки.Добавить("ИмяРасширения", Новый ОписаниеТипов("Строка"));
	ИменаОбъектов.Индексы.Добавить("ПолноеИмя");
	
	ИменаПодключенныхРасширений   = Новый Соответствие;
	ИменаНеподключенныхРасширений = Новый Соответствие;
	
	СвойстваРасширений = Новый Структура;
	СвойстваРасширений.Вставить("ИменаОбъектов", ИменаОбъектов);
	СвойстваРасширений.Вставить("ИменаПодключенныхРасширений",   ИменаПодключенныхРасширений);
	СвойстваРасширений.Вставить("ИменаНеподключенныхРасширений", ИменаНеподключенныхРасширений);
	
	Расширения = РасширенияКонфигурации.Получить();
	Если Не ЗначениеЗаполнено(ПараметрыСеанса.УстановленныеРасширения) Тогда
		Возврат СвойстваРасширений;
	КонецЕсли;
	
	ПроверитьВозможностьЗапускаФоновогоЗадания();
	
	ИменаОбъектовКонфигурации = ИменаОбъектовУстановленныхРасширений(0);
	Если ИменаОбъектовКонфигурации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ИменаОбъектовКонфигурации.Индексы.Добавить("ПолноеИмя");
	
	Для КоличествоУстановленных = 1 По Расширения.Количество() Цикл
		ПоследнееРасширение = Расширения[КоличествоУстановленных-1];
		
		ИменаОбъектовРасширений = ИменаОбъектовУстановленныхРасширений(КоличествоУстановленных);
		Если ИменаОбъектовРасширений = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Подключено = Ложь;
		Для Каждого Строка Из ИменаОбъектовРасширений Цикл
			
			Если ИменаОбъектовКонфигурации.Найти(Строка.ПолноеИмя, "ПолноеИмя") = Неопределено
			   И ИменаОбъектов.Найти(Строка.ПолноеИмя, "ПолноеИмя") = Неопределено Тогда
				
				НоваяСтрока = ИменаОбъектов.Добавить();
				НоваяСтрока.ПолноеИмя     = Строка.ПолноеИмя;
				НоваяСтрока.ИмяРасширения = ПоследнееРасширение.Имя;
				Подключено = Истина;
			КонецЕсли;
		КонецЦикла;
		Если Подключено Тогда
			ИменаПодключенныхРасширений.Вставить(ПоследнееРасширение.Имя, Истина);
		Иначе
			ИменаНеподключенныхРасширений.Вставить(ПоследнееРасширение.Имя, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СвойстваРасширений;
	
КонецФункции

// Для функции СвойстваРасширений.
Функция ИменаОбъектовУстановленныхРасширений(КоличествоУстановленных)
	
	ИдентификаторАдреса = Новый УникальныйИдентификатор;
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторАдреса);
	
	Параметры = Новый Массив;
	Параметры.Добавить(АдресВременногоХранилища);
	
	КонтрольныеСуммы = СтандартныеПодсистемыСервер.КонтрольныеСуммыРасширений();
	Если ПараметрыСеанса.УстановленныеРасширения <> КонтрольныеСуммы Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УдаленныеРасширения = УдаленныеРасширения(КоличествоУстановленных);
	Попытка
		ФоновоеЗадание = ФоновыеЗадания.Выполнить(
			"СтандартныеПодсистемыСервер.ЗаполнитьИменаОбъектовМетаданныхФоновоеЗадание",
			Параметры);
		
		Попытка
			ФоновоеЗадание.ОжидатьЗавершения();
		Исключение
			ИнформацияОбОшибке = ФоновоеЗадание.ИнформацияОбОшибке;
		КонецПопытки;
		Отбор = Новый Структура("УникальныйИдентификатор", ФоновоеЗадание.УникальныйИдентификатор);
		ФоновоеЗадание = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор)[0];
		Если ИнформацияОбОшибке <> Неопределено Тогда
			ИнформацияОбОшибке = ФоновоеЗадание.ИнформацияОбОшибке;
		КонецЕсли;
	Исключение
		ВосстановитьРасширения(УдаленныеРасширения);
		ВызватьИсключение;
	КонецПопытки;
	ВосстановитьРасширения(УдаленныеРасширения);
	
	КонтрольныеСуммы = СтандартныеПодсистемыСервер.КонтрольныеСуммыРасширений();
	Если ПараметрыСеанса.УстановленныеРасширения <> КонтрольныеСуммы Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИнформацияОбОшибке <> Неопределено Тогда
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецЕсли;
	
	Возврат ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
КонецФункции

// Для функции СвойстваРасширений.
// Заполняет объекты метаданных подключенных расширений.
//
Процедура ЗаполнитьИменаОбъектовМетаданныхФоновоеЗадание(АдресВременногоХранилища) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ПолноеИмя",  Новый ОписаниеТипов("Строка"));
	
	СвойстваКоллекцийРасширений = СвойстваКоллекцийОбъектовМетаданных(Истина);
	
	Для Каждого СвойстваКоллекции Из СвойстваКоллекцийРасширений Цикл
		Для Каждого ОбъектМетаданных Из Метаданные[СвойстваКоллекции.Имя] Цикл
			Таблица.Добавить().ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		КонецЦикла;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Таблица, АдресВременногоХранилища);
	
КонецПроцедуры

// Для функции СвойстваРасширений.
//
// Вызывает исключение, если выполнение происходит в фоновом задании файловой ИБ,
// при котором запуск второго фонового задания невозможен.
// 
Процедура ПроверитьВозможностьЗапускаФоновогоЗадания()
	
	Если Не ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийРежимЗапуска() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого Сеанс Из Сеансы Цикл
		Если Сеанс.НомерСеанса = НомерСеансаИнформационнойБазы() Тогда
			Если Сеанс.ИмяПриложения = "BackgroundJob" Тогда
				ТекстОшибки = НСтр("ru = 'Невозможно запустить второе фоновое задание в файловой ИБ.'");
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			Если Сеанс.ИмяПриложения = "COMConnection" Тогда
				ТекстОшибки = НСтр("ru = 'Невозможно запустить фоновое задание во внешнем соединении с файловой ИБ.'");
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для функции СвойстваРасширений.
Функция УдаленныеРасширения(КоличествоУстановленных = 0)
	
	УдаленныеРасширения = Новый Структура;
	
	ВсеРасширения = РасширенияКонфигурации.Получить();
	Расширения = Новый Массив;
	ДанныеРасширений = Новый Массив;
	Индекс = ВсеРасширения.Количество()-1;
	
	НачатьТранзакцию();
	Попытка
		Пока Индекс >= КоличествоУстановленных Цикл
			Расширение = ВсеРасширения[Индекс];
			Расширения.Вставить(0, Расширение);
			ДанныеРасширений.Вставить(0, Расширение.ПолучитьДанные());
			Попытка
				Расширение.Удалить();
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При выполнении операции над расширением ""%1"" возникла ошибка:
					           |%2
					           |
					           |Убедитесь, что все расширения закрыты в конфигураторе.'"),
					Расширение.Имя,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
				ВызватьИсключение ТекстОшибки;
			КонецПопытки;
			Индекс = Индекс - 1;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Новый Структура("Расширения, ДанныеРасширений", Расширения, ДанныеРасширений);
	
КонецФункции

// Для функции СвойстваРасширений.
Процедура ВосстановитьРасширения(Удаленные)
	
	Для Каждого Расширение Из Удаленные.Расширения Цикл
		Индекс = Удаленные.Расширения.Найти(Расширение);
		Расширение.Записать(Удаленные.ДанныеРасширений[Индекс]);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции замены идентификатора в базе данных.

Процедура ЗаменитьДублиПодчиненногоУзлаНайденныеПриЗагрузке(ТолькоПроверка, ЕстьИзменения)
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// В модели сервиса не поддерживается.
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	// Замена дублей в подчиненном РИБ-узле.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Идентификаторы.Ссылка,
	|	Идентификаторы.НоваяСсылка
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК Идентификаторы
	|ГДЕ
	|	Идентификаторы.НоваяСсылка <> ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТолькоПроверка Тогда
		ЕстьИзменения = Истина;
		Возврат;
	КонецЕсли;
	
	Если МонопольныйРежим() Тогда
		СнятьМонопольныйРежим = Ложь;
	Иначе
		СнятьМонопольныйРежим = Истина;
		УстановитьМонопольныйРежим(Истина);
	КонецЕсли;
	
	Попытка
		Выборка = РезультатЗапроса.Выбрать();
		ЗаменяемыеСсылки = Новый Массив;
		СтарыеИНовыеСсылки = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ЗаменяемыеСсылки.Добавить(Выборка.Ссылка);
			СтарыеИНовыеСсылки.Вставить(Выборка.Ссылка, Выборка.НоваяСсылка);
		КонецЦикла;
		
		НайденныеДанные = НайтиПоСсылкам(ЗаменяемыеСсылки);
		НайденныеДанные.Колонки[0].Имя = "Ссылка";
		НайденныеДанные.Колонки[1].Имя = "Данные";
		НайденныеДанные.Колонки[2].Имя = "Метаданные";
		НайденныеДанные.Колонки.Добавить("Включено");
		НайденныеДанные.ЗаполнитьЗначения(Истина, "Включено");
		
		Если НайденныеДанные.Количество() > 0 Тогда
			БезОшибок = ВыполнитьЗаменуЭлементов(СтарыеИНовыеСсылки, НайденныеДанные, Истина);
			Если Не БезОшибок Тогда
				ВызватьИсключение
					НСтр("ru = 'Не удалось выполнить замену дублей идентификаторов объектов метаданных.
					           |Подробнее см. ошибки при замене идентификатора в журнале регистрации.'");
			КонецЕсли;
			
			НачатьТранзакцию();
			Попытка
				// Очистка новых ссылок у дублей идентификаторов.
				Для каждого ЗаменяемаяСсылка Из ЗаменяемыеСсылки Цикл
					ОбъектДубля = ЗаменяемаяСсылка.ПолучитьОбъект();
					ОбъектДубля.НоваяСсылка = Неопределено;
					ОбъектДубля.ОбменДанными.Загрузка = Истина;
					ОбъектДубля.Записать();
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
	Исключение
		Если СнятьМонопольныйРежим Тогда
			УстановитьМонопольныйРежим(Ложь);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Если СнятьМонопольныйРежим Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Функция из универсальной обработки ПоискИЗаменаЗначений.
// Изменения:
// - удалена работа с формой прогрессора
// - удалена процедура ОбработкаПрерыванияПользователя()
// - заменено РегистрыСведений[СтрокаТаблицы.Метаданные.Имя] на.
//   ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаТаблицы.Метаданные.ПолноеИмя()).
//
Функция ВыполнитьЗаменуЭлементов(Знач Заменяемые, Знач ТаблицаСсылок, Знач ОтключатьКонтрольЗаписи = Ложь, Знач ВыполнятьВТранзакции = Ложь, Знач ОбъектыРасширений = Ложь)
	
	Параметры = Новый Структура;
	
	Для Каждого РегистрБухгалтерии Из Метаданные.РегистрыБухгалтерии Цикл
		Параметры.Вставить(РегистрБухгалтерии.Имя + "Субконто",        РегистрБухгалтерии.ПланСчетов.МаксКоличествоСубконто);
		Параметры.Вставить(РегистрБухгалтерии.Имя + "Корреспонденция", РегистрБухгалтерии.Корреспонденция);
	КонецЦикла;
	
	Параметры.Вставить("Объект", Неопределено);
	
	ОбрабатываемаяСсылка = Неопределено;
	БылиИсключения = Ложь;
	
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		Для Каждого СтрокаТаблицы Из ТаблицаСсылок Цикл
			Если Не СтрокаТаблицы.Включено Тогда
				Продолжить;
			КонецЕсли;
			ПравильныйЭлемент = Заменяемые[СтрокаТаблицы.Ссылка];
			
			Ссылка = СтрокаТаблицы.Ссылка;
			
			Если ОбрабатываемаяСсылка <> СтрокаТаблицы.Данные Тогда
				Если ОбрабатываемаяСсылка <> Неопределено И Параметры.Объект <> Неопределено Тогда
					
					Попытка
						Параметры.Объект.ОбменДанными.Загрузка = Истина;
						Если ОтключатьКонтрольЗаписи Тогда
							Параметры.Объект.ДополнительныеСвойства.Вставить("ПропуститьЗаписьВерсииОбъекта");
							ОбновлениеИнформационнойБазы.ЗаписатьДанные(Параметры.Объект, Ложь);
						Иначе
							Параметры.Объект.Записать();
						КонецЕсли;
					Исключение
						БылиИсключения = Истина;
						ИнформацияОбОшибке = ИнформацияОбОшибке();
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'При записи объекта ""%1"" возникла ошибка:
							           |%2'"),
							ПолучитьНавигационнуюСсылку(Параметры.Объект.Ссылка),
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
						Если ВыполнятьВТранзакции Тогда
							ВызватьИсключение ТекстОшибки;
						КонецЕсли;
						СообщитьОбОшибке(ТекстОшибки, ОбъектыРасширений);
					КонецПопытки;
					Параметры.Объект = Неопределено;
				КонецЕсли;
				ОбрабатываемаяСсылка = СтрокаТаблицы.Данные;
			КонецЕсли;
			
			Если Метаданные.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
				
				Если Параметры.Объект = Неопределено Тогда
					Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
				КонецЕсли;
				
				Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
						Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
					КонецЕсли;
				КонецЦикла;
					
				Для Каждого ТабличнаяЧасть Из СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
					Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
						Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							СтрокаТабличнойЧасти = Параметры.Объект[ТабличнаяЧасть.Имя].Найти(Ссылка, Реквизит.Имя);
							Пока СтрокаТабличнойЧасти <> Неопределено Цикл
								СтрокаТабличнойЧасти[Реквизит.Имя] = ПравильныйЭлемент;
								СтрокаТабличнойЧасти = Параметры.Объект[ТабличнаяЧасть.Имя].Найти(Ссылка, Реквизит.Имя);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Для Каждого Движение Из СтрокаТаблицы.Метаданные.Движения Цикл
					
					ЭтоДвижениеРегистраБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(Движение);
					ЕстьКорреспонденция = ЭтоДвижениеРегистраБухгалтерии И Параметры[Движение.Имя + "Корреспонденция"];
					
					НаборЗаписей = Параметры.Объект.Движения[Движение.Имя];
					НаборЗаписей.Прочитать();
					НадоЗаписывать = Ложь;
					ТаблицаНабора = НаборЗаписей.Выгрузить();
					
					Если ТаблицаНабора.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ИменаКолонок = Новый Массив;
					
					// Получим имена измерений, которые могут содержать ссылку.
					Для Каждого Измерение Из Движение.Измерения Цикл
						
						Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							
							Если ЭтоДвижениеРегистраБухгалтерии Тогда
								
								Если Измерение.ПризнакУчета <> Неопределено Тогда
									
									ИменаКолонок.Добавить(Измерение.Имя + "Дт");
									ИменаКолонок.Добавить(Измерение.Имя + "Кт");
								Иначе
									ИменаКолонок.Добавить(Измерение.Имя);
								КонецЕсли;
							Иначе
								ИменаКолонок.Добавить(Измерение.Имя);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					// Получим имена ресурсов, которые могут содержать ссылку.
					Если Метаданные.РегистрыСведений.Содержит(Движение) Тогда
						Для Каждого Ресурс Из Движение.Ресурсы Цикл
							Если Ресурс.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
								ИменаКолонок.Добавить(Ресурс.Имя);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					// Получим имена ресурсов, которые могут содержать ссылку.
					Для Каждого Реквизит Из Движение.Реквизиты Цикл
						Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							ИменаКолонок.Добавить(Реквизит.Имя);
						КонецЕсли;
					КонецЦикла;
					
					// Произведем замены в таблице.
					Для Каждого ИмяКолонки Из ИменаКолонок Цикл
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, ИмяКолонки);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[ИмяКолонки] = ПравильныйЭлемент;
							НадоЗаписывать = Истина;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, ИмяКолонки);
						КонецЦикла;
					КонецЦикла;
					
					Если Метаданные.РегистрыБухгалтерии.Содержит(Движение) Тогда
						
						Для ИндексСубконто = 1 По Параметры[Движение.Имя + "Субконто"] Цикл
							Если ЕстьКорреспонденция Тогда
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
								Пока СтрокаТабЧасти <> Неопределено Цикл
									СтрокаТабЧасти["СубконтоДт"+ИндексСубконто] = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
									СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
								КонецЦикла;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
								Пока СтрокаТабЧасти <> Неопределено Цикл
									СтрокаТабЧасти["СубконтоКт"+ИндексСубконто] = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
									СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
								КонецЦикла;
							Иначе
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
								Пока СтрокаТабЧасти <> Неопределено Цикл
									СтрокаТабЧасти["Субконто"+ИндексСубконто] = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
									СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
						
						Если Ссылка.Метаданные() = Движение.ПланСчетов Тогда
							Для Каждого СтрокаТабЧасти Из ТаблицаНабора Цикл
								Если ЕстьКорреспонденция Тогда
									Если СтрокаТабЧасти.СчетДт = Ссылка Тогда
										СтрокаТабЧасти.СчетДт = ПравильныйЭлемент;
										НадоЗаписывать = Истина;
									КонецЕсли;
									Если СтрокаТабЧасти.СчетКт = Ссылка Тогда
										СтрокаТабЧасти.СчетКт = ПравильныйЭлемент;
										НадоЗаписывать = Истина;
									КонецЕсли;
								Иначе
									Если СтрокаТабЧасти.Счет = Ссылка Тогда
										СтрокаТабЧасти.Счет = ПравильныйЭлемент;
										НадоЗаписывать = Истина;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
					Если Метаданные.РегистрыРасчета.Содержит(Движение) Тогда
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "ВидРасчета");
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти["ВидРасчета"] = ПравильныйЭлемент;
							НадоЗаписывать = Истина;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "ВидРасчета");
						КонецЦикла;
					КонецЕсли;
					
					Если НадоЗаписывать Тогда
						НаборЗаписей.Загрузить(ТаблицаНабора);
						Попытка
							Если ОтключатьКонтрольЗаписи Тогда
								НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьЗаписьВерсииОбъекта");
								ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей, Ложь);
							Иначе
								НаборЗаписей.Записать();
							КонецЕсли;
						Исключение
							БылиИсключения = Истина;
							ИнформацияОбОшибке = ИнформацияОбОшибке();
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'При записи движений объекта ""%1"" в ""%2"" возникла ошибка:
								           |%3'"),
								ПолучитьНавигационнуюСсылку(Параметры.Объект.Ссылка),
								НаборЗаписей.Метаданные().ПолноеИмя(),
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
							Если ВыполнятьВТранзакции Тогда
								ВызватьИсключение ТекстОшибки;
							КонецЕсли;
							СообщитьОбОшибке(ТекстОшибки, ОбъектыРасширений);
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого Последовательность Из Метаданные.Последовательности Цикл
					Если Последовательность.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
						НадоЗаписывать = Ложь;
						НаборЗаписи = Последовательности[Последовательность.Имя].СоздатьНаборЗаписей();
						НаборЗаписи.Отбор.Регистратор.Установить(СтрокаТаблицы.Данные);
						НаборЗаписи.Прочитать();
						
						Если НаборЗаписи.Количество() > 0 Тогда
							Для Каждого Измерение Из Последовательность.Измерения Цикл
								Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) И НаборЗаписи[0][Измерение.Имя]=Ссылка Тогда
									НаборЗаписи[0][Измерение.Имя] = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
								КонецЕсли;
							КонецЦикла;
							Если НадоЗаписывать Тогда
								Попытка
									Если ОтключатьКонтрольЗаписи Тогда
										НаборЗаписи.ДополнительныеСвойства.Вставить("ПропуститьЗаписьВерсииОбъекта");
										ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписи, Ложь);
									Иначе
										НаборЗаписи.Записать();
									КонецЕсли;
								Исключение
									БылиИсключения = Истина;
									ИнформацияОбОшибке = ИнформацияОбОшибке();
									ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'При записи по регистратору ""%1"" в ""%2"" возникла ошибка:
											           |%3'"),
											ПолучитьНавигационнуюСсылку(СтрокаТаблицы.Данные),
											НаборЗаписи.Метаданные().ПолноеИмя(),
											ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
									Если ВыполнятьВТранзакции Тогда
										ВызватьИсключение ТекстОшибки;
									КонецЕсли;
									СообщитьОбОшибке(ТекстОшибки, ОбъектыРасширений);
								КонецПопытки;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли Метаданные.Справочники.Содержит(СтрокаТаблицы.Метаданные) Тогда
				
				Если Параметры.Объект = Неопределено Тогда
					Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
				КонецЕсли;
				
				Если СтрокаТаблицы.Метаданные.Владельцы.Содержит(Ссылка.Метаданные()) И Параметры.Объект.Владелец = Ссылка Тогда
					Параметры.Объект.Владелец = ПравильныйЭлемент;
				КонецЕсли;
				
				Если СтрокаТаблицы.Метаданные.Иерархический И Параметры.Объект.Родитель = Ссылка Тогда
					Параметры.Объект.Родитель = ПравильныйЭлемент;
				КонецЕсли;
				
				Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
						Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ТЧ Из СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
					Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
						Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
								СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
			ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(СтрокаТаблицы.Метаданные)
			      ИЛИ Метаданные.ПланыСчетов.Содержит            (СтрокаТаблицы.Метаданные)
			      ИЛИ Метаданные.ПланыВидовРасчета.Содержит      (СтрокаТаблицы.Метаданные)
			      ИЛИ Метаданные.Задачи.Содержит                 (СтрокаТаблицы.Метаданные)
			      ИЛИ Метаданные.БизнесПроцессы.Содержит         (СтрокаТаблицы.Метаданные) Тогда
				
				Если Параметры.Объект = Неопределено Тогда
					Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
				КонецЕсли;
				
				Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
						Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ТЧ Из СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
					Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
						Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
								СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
			ИначеЕсли Метаданные.Константы.Содержит(СтрокаТаблицы.Метаданные) Тогда
				
				ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
					СтрокаТаблицы.Метаданные.ПолноеИмя()).Установить(ПравильныйЭлемент);
				
			ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаТаблицы.Метаданные) Тогда
				
				СтруктураИзмерений = Новый Структура;
				МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаТаблицы.Метаданные.ПолноеИмя());
				НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
				Для Каждого Измерение Из СтрокаТаблицы.Метаданные.Измерения Цикл
					НаборЗаписей.Отбор[Измерение.Имя].Установить(СтрокаТаблицы.Данные[Измерение.Имя]);
					СтруктураИзмерений.Вставить(Измерение.Имя, СтрокаТаблицы.Данные[Измерение.Имя]);
				КонецЦикла;
				Если СтрокаТаблицы.Метаданные.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
					НаборЗаписей.Отбор["Период"].Установить(СтрокаТаблицы.Данные.Период);
				КонецЕсли;
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				НаборЗаписей.Очистить();
				
				Если Не ВыполнятьВТранзакции Тогда
					НачатьТранзакцию();
				КонецЕсли;
				
				ТекстОшибки = "";
				Попытка
					Попытка
						Если ОтключатьКонтрольЗаписи Тогда
							НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьЗаписьВерсииОбъекта");
							ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей, Ложь);
						Иначе
							НаборЗаписей.Записать();
						КонецЕсли;
					Исключение
						ИнформацияОбОшибке = ИнформацияОбОшибке();
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'При удалении записи ""%1"" возникла ошибка:
							           |%2'"),
							ПолучитьНавигационнуюСсылку(МенеджерРегистра.СоздатьКлючЗаписи(СтруктураИзмерений)),
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
						ВызватьИсключение;
					КонецПопытки;
					
					Для Каждого Колонка Из ТаблицаНабора.Колонки Цикл
						Если ТаблицаНабора[0][Колонка.Имя] = Ссылка Тогда
							ТаблицаНабора[0][Колонка.Имя] = ПравильныйЭлемент;
							Если СтруктураИзмерений.Свойство(Колонка.Имя) Тогда
								НаборЗаписей.Отбор[Колонка.Имя].Установить(ПравильныйЭлемент);
								СтруктураИзмерений[Колонка.Имя] = ПравильныйЭлемент;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					НаборЗаписей.Загрузить(ТаблицаНабора);
					
					Попытка
						Если ОтключатьКонтрольЗаписи Тогда
							НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьЗаписьВерсииОбъекта");
							ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей, Ложь);
						Иначе
							НаборЗаписей.Записать();
						КонецЕсли;
					Исключение
						ИнформацияОбОшибке = ИнформацияОбОшибке();
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'При добавлении записи ""%1"" возникла ошибка:
							           |%2'"),
							ПолучитьНавигационнуюСсылку(МенеджерРегистра.СоздатьКлючЗаписи(СтруктураИзмерений)),
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
						ВызватьИсключение;
					КонецПопытки;
					
					Если Не ВыполнятьВТранзакции Тогда
						ЗафиксироватьТранзакцию();
					КонецЕсли;
					
				Исключение
					БылиИсключения = Истина;
					Если Не ВыполнятьВТранзакции Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
					Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
						ВызватьИсключение;
					КонецЕсли;
					Если ВыполнятьВТранзакции Тогда
						ВызватьИсключение ТекстОшибки;
					КонецЕсли;
					СообщитьОбОшибке(ТекстОшибки, ОбъектыРасширений);
				КонецПопытки;
			Иначе
				СообщитьОбОшибке(НСтр("ru = 'Значения не заменяются в данных типа'")
					+ ": " + Строка(СтрокаТаблицы.Метаданные), ОбъектыРасширений);
			КонецЕсли;
		КонецЦикла;
	
		Если Параметры.Объект <> Неопределено Тогда
			Попытка
				Если ОтключатьКонтрольЗаписи Тогда
					Параметры.Объект.ДополнительныеСвойства.Вставить("ПропуститьЗаписьВерсииОбъекта");
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(Параметры.Объект, Ложь);
				Иначе
					Параметры.Объект.Записать();
				КонецЕсли;
			Исключение
				БылиИсключения = Истина;
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При записи объекта ""%1"" возникла ошибка:
					           |%2'"),
					ПолучитьНавигационнуюСсылку(Параметры.Объект.Ссылка),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				Если ВыполнятьВТранзакции Тогда
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				СообщитьОбОшибке(ТекстОшибки, ОбъектыРасширений);
			КонецПопытки;
		КонецЕсли;
		
		Если ВыполнятьВТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Исключение
		БылиИсключения = Истина;
		Если ВыполнятьВТранзакции Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Не БылиИсключения;
	
КонецФункции

// Процедура из универсальной обработки ПоискИЗаменаЗначений.
// Изменения:
// - заменен метод Сообщить(...) на ЗаписьЖурналаРегистрации(...).
//
Процедура СообщитьОбОшибке(Знач Описание, ОбъектыРасширений)
	
	ЗаписьЖурналаРегистрации(
		?(ОбъектыРасширений,
			НСтр("ru = 'Идентификаторы объектов расширений.Замена идентификатора'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			НСтр("ru = 'Идентификаторы объектов метаданных.Замена идентификатора'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		Описание,
		РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли