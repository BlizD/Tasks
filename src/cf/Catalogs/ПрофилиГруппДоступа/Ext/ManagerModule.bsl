#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	НеРедактируемыеРеквизиты.Добавить("ИдентификаторПоставляемыхДанных");
	НеРедактируемыеРеквизиты.Добавить("ПоставляемыйПрофильИзменен");
	НеРедактируемыеРеквизиты.Добавить("Роли.УдалитьРоль");
	НеРедактируемыеРеквизиты.Добавить("ВидыДоступа.*");
	НеРедактируемыеРеквизиты.Добавить("ЗначенияДоступа.*");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура Обновляет описание поставляемых профилей в
// параметрах ограничения доступа при изменении конфигурации.
// 
// Параметры:
//  ЕстьИзменения - Булево (возвращаемое значение) - если производилась запись,
//                  устанавливается Истина, иначе не изменяется.
//
Процедура ОбновитьОписаниеПоставляемыхПрофилей(ЕстьИзменения = Неопределено, ТолькоПроверка = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТолькоПроверка ИЛИ МонопольныйРежим() Тогда
		СнятьМонопольныйРежим = Ложь;
	Иначе
		СнятьМонопольныйРежим = Истина;
		УстановитьМонопольныйРежим(Истина);
	КонецЕсли;
	
	ПоставляемыеПрофили = ПоставляемыеПрофили();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.ПараметрыОграниченияДоступа");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Параметры = СтандартныеПодсистемыСервер.ПараметрыРаботыПрограммы(
			"ПараметрыОграниченияДоступа");
		
		Сохраненные = Неопределено;
		
		Если Параметры.Свойство("ПоставляемыеПрофилиГруппДоступа") Тогда
			Сохраненные = Параметры.ПоставляемыеПрофилиГруппДоступа;
			
			Если НЕ ОбщегоНазначения.ДанныеСовпадают(ПоставляемыеПрофили, Сохраненные) Тогда
				Сохраненные = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если Сохраненные = Неопределено Тогда
			ЕстьИзменения = Истина;
			Если ТолькоПроверка Тогда
				ЗафиксироватьТранзакцию();
				Возврат;
			КонецЕсли;
			СтандартныеПодсистемыСервер.УстановитьПараметрРаботыПрограммы(
				"ПараметрыОграниченияДоступа",
				"ПоставляемыеПрофилиГруппДоступа",
				ПоставляемыеПрофили);
		КонецЕсли;
		
		СтандартныеПодсистемыСервер.ПодтвердитьОбновлениеПараметраРаботыПрограммы(
			"ПараметрыОграниченияДоступа", "ПоставляемыеПрофилиГруппДоступа");
		
		Если НЕ ТолькоПроверка Тогда
			СтандартныеПодсистемыСервер.ДобавитьИзмененияПараметраРаботыПрограммы(
				"ПараметрыОграниченияДоступа",
				"ПоставляемыеПрофилиГруппДоступа",
				?(Сохраненные = Неопределено,
				  Новый ФиксированнаяСтруктура("ЕстьИзменения", Истина),
				  Новый ФиксированнаяСтруктура()) );
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Если СнятьМонопольныйРежим Тогда
			УстановитьМонопольныйРежим(Ложь);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Если СнятьМонопольныйРежим Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Процедура Обновляет состав предопределенных профилей в
// параметрах ограничения доступа при изменении конфигурации.
// 
// Параметры:
//  ЕстьИзменения - Булево (возвращаемое значение) - если производилась запись,
//                  устанавливается Истина, иначе не изменяется.
//
Процедура ОбновитьСоставПредопределенныхПрофилей(ЕстьИзменения = Неопределено, ТолькоПроверка = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТолькоПроверка ИЛИ МонопольныйРежим() Тогда
		СнятьМонопольныйРежим = Ложь;
	Иначе
		СнятьМонопольныйРежим = Истина;
		УстановитьМонопольныйРежим(Истина);
	КонецЕсли;
	
	ПредопределенныеПрофили = Метаданные.Справочники.ПрофилиГруппДоступа.ПолучитьИменаПредопределенных();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.ПараметрыОграниченияДоступа");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Параметры = СтандартныеПодсистемыСервер.ПараметрыРаботыПрограммы(
			"ПараметрыОграниченияДоступа");
		
		ЕстьУдаленные = Ложь;
		Сохраненные = Неопределено;
		
		Если Параметры.Свойство("ПредопределенныеПрофилиГруппДоступа") Тогда
			Сохраненные = Параметры.ПредопределенныеПрофилиГруппДоступа;
			
			Если НЕ ПредопределенныеПрофилиСовпадают(ПредопределенныеПрофили, Сохраненные, ЕстьУдаленные) Тогда
				Сохраненные = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если Сохраненные = Неопределено Тогда
			ЕстьИзменения = Истина;
			Если ТолькоПроверка Тогда
				ЗафиксироватьТранзакцию();
				Возврат;
			КонецЕсли;
			СтандартныеПодсистемыСервер.УстановитьПараметрРаботыПрограммы(
				"ПараметрыОграниченияДоступа",
				"ПредопределенныеПрофилиГруппДоступа",
				ПредопределенныеПрофили);
		КонецЕсли;
		
		СтандартныеПодсистемыСервер.ПодтвердитьОбновлениеПараметраРаботыПрограммы(
			"ПараметрыОграниченияДоступа",
			"ПредопределенныеПрофилиГруппДоступа");
		
		Если НЕ ТолькоПроверка Тогда
			СтандартныеПодсистемыСервер.ДобавитьИзмененияПараметраРаботыПрограммы(
				"ПараметрыОграниченияДоступа",
				"ПредопределенныеПрофилиГруппДоступа",
				?(ЕстьУдаленные,
				  Новый ФиксированнаяСтруктура("ЕстьУдаленные", Истина),
				  Новый ФиксированнаяСтруктура()) );
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Если СнятьМонопольныйРежим Тогда
			УстановитьМонопольныйРежим(Ложь);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Если СнятьМонопольныйРежим Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет поставляемые профили справочника по результату изменения
// описаний поставляемых профилей, сохраненных в параметрах ограничения доступа.
//
Процедура ОбновитьПоставляемыеПрофилиПоИзменениямКонфигурации() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = УправлениеДоступомСлужебныйПовтИсп.Параметры();
	
	ПоследниеИзменения = СтандартныеПодсистемыСервер.ИзмененияПараметраРаботыПрограммы(
		Параметры, "ПоставляемыеПрофилиГруппДоступа");
		
	Если ПоследниеИзменения = Неопределено Тогда
		ТребуетсяОбновление = Истина;
	Иначе
		ТребуетсяОбновление = Ложь;
		Для каждого ЧастьИзменений Из ПоследниеИзменения Цикл
			
			Если ТипЗнч(ЧастьИзменений) = Тип("ФиксированнаяСтруктура")
			   И ЧастьИзменений.Свойство("ЕстьИзменения")
			   И ТипЗнч(ЧастьИзменений.ЕстьИзменения) = Тип("Булево") Тогда
				
				Если ЧастьИзменений.ЕстьИзменения Тогда
					ТребуетсяОбновление = Истина;
					Прервать;
				КонецЕсли;
			Иначе
				ТребуетсяОбновление = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТребуетсяОбновление Тогда
		ОбновитьПоставляемыеПрофили();
	КонецЕсли;
	
КонецПроцедуры

// Обновляет поставляемые профили, и при необходимости обновляет группы доступа этих профилей.
// Создаются не найденные поставляемые профили групп доступа.
//
// Особенности обновления настраиваются в процедуре ЗаполнитьПоставляемыеПрофилиГруппДоступа
// общего модуля УправлениеДоступомПереопределяемый (см. комментарий к процедуре).
//
// Параметры:
//  ЕстьИзменения - Булево (возвращаемое значение) - если производилась запись,
//                  устанавливается Истина, иначе не изменяется.
//
Процедура ОбновитьПоставляемыеПрофили(ЕстьИзменения = Неопределено) Экспорт
	
	ПоставляемыеПрофили = УправлениеДоступомСлужебныйПовтИсп.Параметры().ПоставляемыеПрофилиГруппДоступа;
	
	ОписанияПрофилей    = ПоставляемыеПрофили.ОписанияПрофилейМассив;
	ПараметрыОбновления = ПоставляемыеПрофили.ПараметрыОбновления;
	
	ОбновленныеПрофили       = Новый Массив;
	ОбновленныеГруппыДоступа = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступа.ПоставляемыйПрофильИзменен,
	|	ПрофилиГруппДоступа.ИдентификаторПоставляемыхДанных,
	|	ПрофилиГруппДоступа.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа");
	ТекущиеПрофили = Запрос.Выполнить().Выгрузить();
	
	Для каждого СвойстваПрофиля Из ОписанияПрофилей Цикл
		
		СтрокаТекущегоПрофиля = ТекущиеПрофили.Найти(
			Новый УникальныйИдентификатор(СвойстваПрофиля.Идентификатор),
			"ИдентификаторПоставляемыхДанных");
		
		ПрофильОбновлен = Ложь;
		
		Если СтрокаТекущегоПрофиля = Неопределено Тогда
			// Создание нового поставляемого профиля.
			Если ОбновитьПрофильГруппДоступа(СвойстваПрофиля) Тогда
				ЕстьИзменения = Истина;
			КонецЕсли;
			Профиль = ПоставляемыйПрофильПоИдентификатору(СвойстваПрофиля.Идентификатор);
			
		Иначе
			Профиль = СтрокаТекущегоПрофиля.Ссылка;
			Если НЕ СтрокаТекущегоПрофиля.ПоставляемыйПрофильИзменен
			 ИЛИ ПараметрыОбновления.ОбновлятьИзмененныеПрофили Тогда
				// Обновление поставляемого профиля.
				ПрофильОбновлен = ОбновитьПрофильГруппДоступа(СвойстваПрофиля, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыОбновления.ОбновлятьГруппыДоступа Тогда
			ГруппыДоступаПрофиляОбновлены = Справочники.ГруппыДоступа.ОбновитьГруппыДоступаПрофиля(
				Профиль, ПараметрыОбновления.ОбновлятьГруппыДоступаСУстаревшимиНастройками);
			
			ПрофильОбновлен = ПрофильОбновлен ИЛИ ГруппыДоступаПрофиляОбновлены;
		КонецЕсли;
		
		Если ПрофильОбновлен Тогда
			ЕстьИзменения = Истина;
			ОбновленныеПрофили.Добавить(Профиль);
		КонецЕсли;
	КонецЦикла;
	
	// Обновление ролей пользователей.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоставыГруппПользователей.Пользователь
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ПО СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь
	|			И (ГруппыДоступаПользователи.Ссылка.Профиль В (&Профили))";
	Запрос.УстановитьПараметр("Профили", ОбновленныеПрофили);
	ПользователиДляОбновления = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	УправлениеДоступом.ОбновитьРолиПользователей(ПользователиДляОбновления);
	
КонецПроцедуры

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если Не Пользователи.ЭтоПолноправныйПользователь(, Истина)
		Или МодульТекущиеДелаСервер.ДелоОтключено("ПрофилиГруппДоступа") Тогда
		Возврат;
	КонецЕсли;
	
	// Процедура вызывается только при наличии подсистемы "Текущие дела", поэтому здесь
	// не делается проверка существования подсистемы.
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.Справочники.ПрофилиГруппДоступа.ПолноеИмя());
	
	Для Каждого Раздел Из Разделы Цикл
		
		КоличествоНесовместимыхПрофилейГруппДоступа = НесовместимыеПрофилиГруппДоступа().Количество();
		
		ИдентификаторПрофиля = "НеСовместимыСТекущейВерсией" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "");
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор = ИдентификаторПрофиля;
		Дело.ЕстьДела      = КоличествоНесовместимыхПрофилейГруппДоступа > 0;
		Дело.Представление = НСтр("ru = 'Не совместимы с текущей версией'");
		Дело.Количество    = КоличествоНесовместимыхПрофилейГруппДоступа;
		Дело.Владелец      = Раздел;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор = "ПрофилиГруппДоступа";
		Дело.ЕстьДела      = КоличествоНесовместимыхПрофилейГруппДоступа > 0;
		Дело.Важное        = Истина;
		Дело.Представление = НСтр("ru = 'Профили групп доступа'");
		Дело.Количество    = КоличествоНесовместимыхПрофилейГруппДоступа;
		Дело.Форма         = "Справочник.ПрофилиГруппДоступа.Форма.ФормаСписка";
		Дело.ПараметрыФормы= Новый Структура("ПрофилиСРолямиПомеченнымиНаУдаление", Истина);
		Дело.Владелец      = ИдентификаторПрофиля;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает строку уникального идентификатора
// поставляемого и предопределенного профиля Администратор.
//
Функция ИдентификаторПрофиляАдминистратор(Строка = Истина) Экспорт
	
	Идентификатор = "6c4b0307-43a4-4141-9c35-3dd7e9586d41";
	
	Если Строка Тогда
		Возврат Идентификатор;
	КонецЕсли;
	
	Возврат Новый УникальныйИдентификатор(Идентификатор);
	
КонецФункции

// Возвращает ссылку на поставляемый профиль по идентификатору.
//
// Параметры:
//  Идентификатор - Строка - имя или уникальный идентификатор поставляемого профиля.
//
Функция ПоставляемыйПрофильПоИдентификатору(Идентификатор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоставляемыеПрофили = УправлениеДоступомСлужебныйПовтИсп.Параметры().ПоставляемыеПрофилиГруппДоступа;
	
	СвойстваПрофиля = ПоставляемыеПрофили.ОписанияПрофилей.Получить(Идентификатор);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторПоставляемыхДанных",
		Новый УникальныйИдентификатор(СвойстваПрофиля.Идентификатор));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступа.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
	|ГДЕ
	|	ПрофилиГруппДоступа.ИдентификаторПоставляемыхДанных = &ИдентификаторПоставляемыхДанных";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает строку уникального идентификатора
// данных поставляемого профиля.
//
Функция ИдентификаторПоставляемогоПрофиля(Профиль) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Профиль);
	
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступа.ИдентификаторПоставляемыхДанных
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
	|ГДЕ
	|	ПрофилиГруппДоступа.Ссылка = &Ссылка
	|	И ПрофилиГруппДоступа.ИдентификаторПоставляемыхДанных <> &ПустойУникальныйИдентификатор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ПоставляемыеПрофили = УправлениеДоступомСлужебныйПовтИсп.Параметры().ПоставляемыеПрофилиГруппДоступа;
		
		СвойстваПрофиля = ПоставляемыеПрофили.ОписанияПрофилей.Получить(
			Строка(Выборка.ИдентификаторПоставляемыхДанных));
		
		Возврат Строка(Выборка.ИдентификаторПоставляемыхДанных);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Проверяет изменен ли поставляемый профиль по сравнению с описанием из процедуры.
// УправлениеДоступомПереопределяемый.ЗаполнитьПоставляемыеПрофилиГруппДоступа().
//
// Параметры:
//  Профиль      - СправочникСсылка.ПрофилиГруппДоступа
//                     (возвращается реквизит ПоставляемыйПрофильИзменен),
//               - СправочникОбъект.ПрофилиГруппДоступа
//                     (возвращается результат сравнения заполнения объекта
//                      с описанием в переопределяемом общем модуле).
//
// Возвращаемое значение:
//  Булево.
//
Функция ПоставляемыйПрофильИзменен(Профиль) Экспорт
	
	Если ТипЗнч(Профиль) = Тип("СправочникСсылка.ПрофилиГруппДоступа") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Профиль, "ПоставляемыйПрофильИзменен");
	КонецЕсли;
	
	ТекущиеПараметры = УправлениеДоступомСлужебныйПовтИсп.Параметры();
	ОписанияПрофилей = ТекущиеПараметры.ПоставляемыеПрофилиГруппДоступа.ОписанияПрофилей;
	СвойстваПрофиля = ОписанияПрофилей.Получить(Строка(Профиль.ИдентификаторПоставляемыхДанных));
	
	Если СвойстваПрофиля = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеРолейПрофиля = ОписаниеРолейПрофиля(СвойстваПрофиля);
	
	Если ВРег(Профиль.Наименование) <> ВРег(СвойстваПрофиля.Наименование) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Профиль.Роли.Количество()            <> ОписаниеРолейПрофиля.Количество()
	 ИЛИ Профиль.ВидыДоступа.Количество()     <> СвойстваПрофиля.ВидыДоступа.Количество()
	 ИЛИ Профиль.ЗначенияДоступа.Количество() <> СвойстваПрофиля.ЗначенияДоступа.Количество()
	 ИЛИ Профиль.Назначение.Количество()      <> СвойстваПрофиля.Назначение.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для каждого Роль Из ОписаниеРолейПрофиля Цикл
		МетаданныеРоли = Метаданные.Роли.Найти(Роль);
		Если МетаданныеРоли = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При проверке поставляемого профиля ""%1""
				           |роль ""%2"" не найдена в метаданных.'"),
				СвойстваПрофиля.Наименование,
				Роль);
		КонецЕсли;
		ИдентификаторРоли = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеРоли);
		Если Профиль.Роли.НайтиСтроки(Новый Структура("Роль", ИдентификаторРоли)).Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ОписаниеВидаДоступа Из СвойстваПрофиля.ВидыДоступа Цикл
		СвойстваВидаДоступа = УправлениеДоступомСлужебный.СвойстваВидаДоступа(ОписаниеВидаДоступа.Ключ);
		Отбор = Новый Структура;
		Отбор.Вставить("ВидДоступа",        СвойстваВидаДоступа.Ссылка);
		Отбор.Вставить("Предустановленный", ОписаниеВидаДоступа.Значение = "Предустановленный");
		Отбор.Вставить("ВсеРазрешены",      ОписаниеВидаДоступа.Значение = "ВначалеВсеРазрешены");
		Если Профиль.ВидыДоступа.НайтиСтроки(Отбор).Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ОписаниеЗначенияДоступа Из СвойстваПрофиля.ЗначенияДоступа Цикл
		Отбор = Новый Структура;
		Запрос = Новый Запрос(СтрЗаменить("ВЫБРАТЬ Значение(%1) КАК Значение", "%1", ОписаниеЗначенияДоступа.ЗначениеДоступа));
		Отбор.Вставить("ЗначениеДоступа", Запрос.Выполнить().Выгрузить()[0].Значение);
		Если Профиль.ЗначенияДоступа.НайтиСтроки(Отбор).Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТипПользователей Из СвойстваПрофиля.Назначение Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("ТипПользователей", ТипПользователей);
		Если Профиль.Назначение.НайтиСтроки(Отбор).Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Определяет наличие начального заполнения для профиля групп доступа в переопределяемом модуле.
//
// Параметры:
//  Профиль      - СправочникСсылка.ПрофилиГруппДоступа.
//  
// Возвращаемое значение:
//  Булево.
//
Функция ЕстьНачальноеЗаполнениеПрофиля(Знач Профиль) Экспорт
	
	ИдентификаторПоставляемыхДанных = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Профиль, "ИдентификаторПоставляемыхДанных"));
	
	ПоставляемыеПрофили = УправлениеДоступомСлужебныйПовтИсп.Параметры().ПоставляемыеПрофилиГруппДоступа;
	СвойстваПрофиля = ПоставляемыеПрофили.ОписанияПрофилей.Получить(ИдентификаторПоставляемыхДанных);
	
	Возврат СвойстваПрофиля <> Неопределено;
	
КонецФункции

// Определяет запрет изменения поставляемого профиля.
// Не поставляемый профиль не может иметь запрета изменения.
//
// Параметры:
//  Профиль      - СправочникОбъект.ПрофилиГруппДоступа,
//                 ДанныеФормыСтруктура созданные по объекту.
//  
// Возвращаемое значение:
//  Булево.
//
Функция ЗапретИзмененияПрофиля(Знач Профиль) Экспорт
	
	Если Профиль.ИдентификаторПоставляемыхДанных =
			Новый УникальныйИдентификатор(ИдентификаторПрофиляАдминистратор()) Тогда
		// Изменение профиля Администратор всегда запрещено.
		Возврат Истина;
	КонецЕсли;
	
	ПоставляемыеПрофили = УправлениеДоступомСлужебныйПовтИсп.Параметры().ПоставляемыеПрофилиГруппДоступа;
	
	СвойстваПрофиля = ПоставляемыеПрофили.ОписанияПрофилей.Получить(
		Строка(Профиль.ИдентификаторПоставляемыхДанных));
	
	Возврат СвойстваПрофиля <> Неопределено
	      И ПоставляемыеПрофили.ПараметрыОбновления.ЗапретитьИзменениеПрофилей;
	
КонецФункции

// Возвращает описание назначения поставляемого профиля.
//
// Параметры:
//  Профиль - СправочникСсылка.ПрофилиГруппДоступа.
//
// Возвращаемое значение:
//  Строка.
//
Функция ОписаниеПоставляемогоПрофиля(Профиль) Экспорт
	
	ИдентификаторПоставляемыхДанных = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Профиль, "ИдентификаторПоставляемыхДанных"));
	
	ПоставляемыеПрофили = УправлениеДоступомСлужебныйПовтИсп.Параметры().ПоставляемыеПрофилиГруппДоступа;
	СвойстваПрофиля = ПоставляемыеПрофили.ОписанияПрофилей.Получить(ИдентификаторПоставляемыхДанных);
	
	Текст = "";
	Если СвойстваПрофиля <> Неопределено Тогда
		Текст = СвойстваПрофиля.Описание;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Создает поставляемый профиль в справочнике ПрофилиГруппДоступа, свойственный
// прикладному решению и позволяет перезаполнить ранее созданный поставляемый профиль
// по его поставляемому описанию.
//  Поиск начального заполнения осуществляется по строке уникального идентификатора профиля.
//
// Параметры:
//  Профиль      - СправочникСсылка.ПрофилиГруппДоступа.
//                 Если для указанного профиля описание начального заполнения найдено,
//                 содержимое профиля полностью замещается.
//
// ОбновитьГруппыДоступа - Булево, если Истина, виды доступа групп доступа профиля будут обновлены.
//
Процедура ЗаполнитьПоставляемыйПрофиль(Знач Профиль, Знач ОбновитьГруппыДоступа) Экспорт
	
	ИдентификаторПоставляемыхДанных = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Профиль, "ИдентификаторПоставляемыхДанных"));
	
	ПоставляемыеПрофили = УправлениеДоступомСлужебныйПовтИсп.Параметры().ПоставляемыеПрофилиГруппДоступа;
	СвойстваПрофиля = ПоставляемыеПрофили.ОписанияПрофилей.Получить(ИдентификаторПоставляемыхДанных);
	
	Если СвойстваПрофиля <> Неопределено Тогда
		
		ОбновитьПрофильГруппДоступа(СвойстваПрофиля);
		
		Если ОбновитьГруппыДоступа Тогда
			Справочники.ГруппыДоступа.ОбновитьГруппыДоступаПрофиля(Профиль, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список ссылок на профили, содержащие недоступные роли или роли помеченные на удаление.
//
// Возвращаемое значение:
//  Массив - массив элементов СправочникСсылка.ПрофилиГруппДоступа.
//
Функция НесовместимыеПрофилиГруппДоступа() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Профили.Ссылка КАК Ссылка,
	|	Профили.Назначение.(
	|		ТипПользователей КАК ТипПользователей
	|	) КАК Назначение,
	|	Профили.Роли.(
	|		ЕСТЬNULL(Профили.Роли.Роль.Имя, """") КАК Имя,
	|		ЕСТЬNULL(Профили.Роли.Роль.ПометкаУдаления, ИСТИНА) КАК ПометкаУдаления
	|	)
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК Профили";
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	НесовместимыеПрофили = Новый Массив;
	НедоступныеРолиПоНазначению = Новый Соответствие;
	
	Для Каждого ОписаниеПрофиля Из Выгрузка Цикл
		НазначениеПрофиля = УправлениеДоступомСлужебныйКлиентСервер.НазначениеПрофиля(ОписаниеПрофиля);
		НедоступныеРоли = НедоступныеРолиПоНазначению.Получить(НазначениеПрофиля);
		Если НедоступныеРоли = Неопределено Тогда
			НедоступныеРоли = ПользователиСлужебныйПовтИсп.НедоступныеРоли(НазначениеПрофиля);
			НедоступныеРолиПоНазначению.Вставить(НазначениеПрофиля, НедоступныеРоли);
		КонецЕсли;
		
		Для Каждого Роль Из ОписаниеПрофиля.Роли Цикл
			
			Если Роль.ПометкаУдаления
			 Или НедоступныеРоли.Получить(Роль.Имя) <> Неопределено
			 Или ВРег(Лев(Роль.Имя, СтрДлина("Удалить"))) = ВРег("Удалить")
			 Или УправлениеДоступомСлужебный.ЭтоПрофильнаяРоль(Роль.Имя) Тогда
				
				НесовместимыеПрофили.Добавить(ОписаниеПрофиля.Ссылка);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат НесовместимыеПрофили;
	
КонецФункции

// Обработчики обновления информационной базы.

// Заполняет идентификаторы поставляемых данных по совпадению с идентификатором ссылки.
Процедура ЗаполнитьИдентификаторыПоставляемыхДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоставляемыеПрофили = УправлениеДоступомСлужебныйПовтИсп.Параметры().ПоставляемыеПрофилиГруппДоступа;
	
	СсылкиПоставляемыхПрофилей = Новый Массив;
	
	Для каждого ОписаниеПрофиля Из ПоставляемыеПрофили.ОписанияПрофилейМассив Цикл
		СсылкиПоставляемыхПрофилей.Добавить(
			Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(
				Новый УникальныйИдентификатор(ОписаниеПрофиля.Идентификатор)));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Запрос.УстановитьПараметр("СсылкиПоставляемыхПрофилей", СсылкиПоставляемыхПрофилей);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступа.Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
	|ГДЕ
	|	ПрофилиГруппДоступа.ИдентификаторПоставляемыхДанных = &ПустойУникальныйИдентификатор
	|	И ПрофилиГруппДоступа.Ссылка В (&СсылкиПоставляемыхПрофилей)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПрофильОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПрофильОбъект.ИдентификаторПоставляемыхДанных = Выборка.Ссылка.УникальныйИдентификатор();
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПрофильОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Заменяет ссылку на ПВХ.ВидыДоступа пустой ссылкой основного типа значений вида доступа.
Процедура ПреобразоватьИдентификаторыВидовДоступа() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступа.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
	|ГДЕ
	|	НЕ(НЕ ИСТИНА В
	|						(ВЫБРАТЬ ПЕРВЫЕ 1
	|							ИСТИНА
	|						ИЗ
	|							Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ВидыДоступа
	|						ГДЕ
	|							ВидыДоступа.Ссылка = ПрофилиГруппДоступа.Ссылка
	|							И ТИПЗНАЧЕНИЯ(ВидыДоступа.ВидДоступа) = ТИП(ПланВидовХарактеристик.УдалитьВидыДоступа))
	|				И НЕ ИСТИНА В
	|						(ВЫБРАТЬ ПЕРВЫЕ 1
	|							ИСТИНА
	|						ИЗ
	|							Справочник.ПрофилиГруппДоступа.ЗначенияДоступа КАК ЗначенияДоступа
	|						ГДЕ
	|							ЗначенияДоступа.Ссылка = ПрофилиГруппДоступа.Ссылка
	|							И ТИПЗНАЧЕНИЯ(ЗначенияДоступа.ВидДоступа) = ТИП(ПланВидовХарактеристик.УдалитьВидыДоступа)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГруппыДоступа.Ссылка
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	НЕ(НЕ ИСТИНА В
	|						(ВЫБРАТЬ ПЕРВЫЕ 1
	|							ИСТИНА
	|						ИЗ
	|							Справочник.ГруппыДоступа.ВидыДоступа КАК ВидыДоступа
	|						ГДЕ
	|							ВидыДоступа.Ссылка = ГруппыДоступа.Ссылка
	|							И ТИПЗНАЧЕНИЯ(ВидыДоступа.ВидДоступа) = ТИП(ПланВидовХарактеристик.УдалитьВидыДоступа))
	|				И НЕ ИСТИНА В
	|						(ВЫБРАТЬ ПЕРВЫЕ 1
	|							ИСТИНА
	|						ИЗ
	|							Справочник.ГруппыДоступа.ЗначенияДоступа КАК ЗначенияДоступа
	|						ГДЕ
	|							ЗначенияДоступа.Ссылка = ГруппыДоступа.Ссылка
	|							И ТИПЗНАЧЕНИЯ(ЗначенияДоступа.ВидДоступа) = ТИП(ПланВидовХарактеристик.УдалитьВидыДоступа)))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваВидовДоступа = УправлениеДоступомСлужебныйПовтИсп.Параметры().СвойстваВидовДоступа;
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Индекс = Объект.ВидыДоступа.Количество()-1;
		Пока Индекс >= 0 Цикл
			Строка = Объект.ВидыДоступа[Индекс];
			Попытка
				ИмяВидаДоступа = ПланыВидовХарактеристик.УдалитьВидыДоступа.ПолучитьИмяПредопределенного(
					Строка.ВидДоступа);
			Исключение
				ИмяВидаДоступа = "";
			КонецПопытки;
			СвойстваВидаДоступа = СвойстваВидовДоступа.ПоИменам.Получить(ИмяВидаДоступа);
			Если СвойстваВидаДоступа = Неопределено Тогда
				Объект.ВидыДоступа.Удалить(Индекс);
			Иначе
				Строка.ВидДоступа = СвойстваВидаДоступа.Ссылка;
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		
		Индекс = Объект.ЗначенияДоступа.Количество()-1;
		Пока Индекс >= 0 Цикл
			Строка = Объект.ЗначенияДоступа[Индекс];
			Попытка
				ИмяВидаДоступа = ПланыВидовХарактеристик.УдалитьВидыДоступа.ПолучитьИмяПредопределенного(
					Строка.ВидДоступа);
			Исключение
				ИмяВидаДоступа = "";
			КонецПопытки;
			СвойстваВидаДоступа = СвойстваВидовДоступа.ПоИменам.Получить(ИмяВидаДоступа);
			Если СвойстваВидаДоступа = Неопределено Тогда
				Объект.ЗначенияДоступа.Удалить(Индекс);
			Иначе
				Строка.ВидДоступа = СвойстваВидаДоступа.Ссылка;
				Если Объект.ВидыДоступа.Найти(Строка.ВидДоступа, "ВидДоступа") = Неопределено Тогда
					Объект.ЗначенияДоступа.Удалить(Индекс);
				КонецЕсли;
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

Функция ПоставляемыеПрофили()
	
	ПараметрыОбновления = Новый Структура;
	// Свойства обновления поставляемых профилей.
	ПараметрыОбновления.Вставить("ОбновлятьИзмененныеПрофили", Истина);
	ПараметрыОбновления.Вставить("ЗапретитьИзменениеПрофилей", Истина);
	// Свойства обновления групп доступа поставляемых профилей.
	ПараметрыОбновления.Вставить("ОбновлятьГруппыДоступа", Истина);
	ПараметрыОбновления.Вставить("ОбновлятьГруппыДоступаСУстаревшимиНастройками", Ложь);
	
	ОписанияПрофилей = Новый Массив;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.УправлениеДоступом\ПриЗаполненииПоставляемыхПрофилейГруппДоступа");
	Для Каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриЗаполненииПоставляемыхПрофилейГруппДоступа(ОписанияПрофилей, ПараметрыОбновления);
	КонецЦикла;
	
	УправлениеДоступомПереопределяемый.ПриЗаполненииПоставляемыхПрофилейГруппДоступа(
		ОписанияПрофилей, ПараметрыОбновления);
	
	ЗаголовокОшибки =
		НСтр("ru = 'Заданы недопустимые значения в процедуре ПриЗаполненииПоставляемыхПрофилейГруппДоступа
		           |общего модуля УправлениеДоступомПереопределяемый.
		           |
		           |'");
	
	Если ПараметрыОбновления.ЗапретитьИзменениеПрофилей
	   И НЕ ПараметрыОбновления.ОбновлятьИзмененныеПрофили Тогда
		
		ВызватьИсключение ЗаголовокОшибки
			+ НСтр("ru = 'Когда в параметре ПараметрыОбновления свойство
			             |ОбновлятьИзмененныеПрофили установлено Ложь,
			             |тогда свойство ЗапретитьИзменениеПрофилей тоже
			             |должно быть установлено Ложь.'");
	КонецЕсли;
	
	// Описание для заполнения предопределенного профиля "Администратор".
	ОписаниеПрофиляАдминистратор = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиляАдминистратор.Имя           = "Администратор";
	ОписаниеПрофиляАдминистратор.Идентификатор = ИдентификаторПрофиляАдминистратор();
	ОписаниеПрофиляАдминистратор.Наименование  = НСтр("ru = 'Администратор'");
	ОписаниеПрофиляАдминистратор.Роли.Добавить("АдминистраторСистемы");
	ОписаниеПрофиляАдминистратор.Роли.Добавить("ПолныеПрава");
	
	ОписаниеПрофиляАдминистратор.Описание =
		НСтр("ru = 'Предназначен для:
		           |- настройки параметров работы и обслуживания информационной системы,
		           |- настройки прав доступа других пользователей,
		           |- удаления помеченных объектов,
		           |- в редких случаях для внесения изменений в конфигурацию.
		           |
		           |Рекомендуется не использовать для ""обычной"" работы в информационной системе.
		           |'");
	ОписанияПрофилей.Добавить(ОписаниеПрофиляАдминистратор);
	
	ВсеРоли = ПользователиСлужебный.ВсеРоли().Соответствие;
	
	СвойстваВидовДоступа = СтандартныеПодсистемыСервер.ПараметрыРаботыПрограммы(
		"ПараметрыОграниченияДоступа").СвойстваВидовДоступа;
	
	// Преобразование описаний в соответствие идентификаторов и
	// свойств для хранения и быстрой обработки.
	СвойстваПрофилей = Новый Соответствие;
	ОписанияПрофилейМассив = Новый Массив;
	Для Каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
		// Назначение профиля.
		Если ОписаниеПрофиля.Назначение.Количество() = 0 Тогда
			ОписаниеПрофиля.Назначение.Добавить(Тип("СправочникСсылка.Пользователи"));
		КонецЕсли;
		МассивНазначений = Новый Массив;
		Для Каждого Тип Из ОписаниеПрофиля.Назначение Цикл
			Если ТипЗнч(Тип) = Тип("ОписаниеТипов") Тогда
				Типы = Тип.Типы();
			Иначе
				Типы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип);
			КонецЕсли;
			Для Каждого Тип Из Типы Цикл
				Если ТипЗнч(Тип) <> Тип("Тип")
				 Или Не Метаданные.ОпределяемыеТипы.Пользователь.Тип.СодержитТип(Тип)
				 Или Тип <> Тип("СправочникСсылка.Пользователи")
				   И Не Метаданные.ОпределяемыеТипы.ВнешнийПользователь.Тип.СодержитТип(Тип) Тогда
					ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В описании профиля ""%1""
						           |указано недопустимое назначение ""%2 (%3)"".
						           |Ожидается назначение, как значение типа ""Тип"" для ссылки,
						           |указанное в определяемом типе Пользователь и
						           |указанное в определяемом типе ВнешнийПользователь
						           |(кроме типа СправочникСсылка.Пользователи).'"),
						?(ЗначениеЗаполнено(ОписаниеПрофиля.Имя),
						  ОписаниеПрофиля.Имя,
						  ОписаниеПрофиля.Идентификатор),
						  Строка(Тип), Строка(ТипЗнч(Тип)));
				КонецЕсли;
				ОписаниеТипаСсылки = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип));
				Значение = ОписаниеТипаСсылки.ПривестиЗначение(Неопределено);
				МассивНазначений.Добавить(Значение);
			КонецЦикла;
		КонецЦикла;
		ОписаниеПрофиля.Назначение = МассивНазначений;
		
		// Проверка ролей.
		НазначениеПрофиля = УправлениеДоступомСлужебныйКлиентСервер.НазначениеПрофиля(ОписаниеПрофиля);
		НедоступныеРоли = ПользователиСлужебныйПовтИсп.НедоступныеРоли(НазначениеПрофиля, Ложь);
		
		Для Каждого Роль Из ОписаниеПрофиля.Роли Цикл
			// Проверка наличия ролей в метаданных.
			Если ВсеРоли.Получить(Роль) = Неопределено Тогда
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В описании профиля ""%1 (%2)""
					           |роль ""%3"" не найдена в метаданных.'"),
					ОписаниеПрофиля.Имя,
					ОписаниеПрофиля.Идентификатор,
					Роль);
			КонецЕсли;
			Если УправлениеДоступомСлужебный.ЭтоПрофильнаяРоль(Роль) Тогда
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В описании профиля ""%1 (%2)""
					           |указана недопустимая роль ""%3"".'"),
					ОписаниеПрофиля.Имя,
					ОписаниеПрофиля.Идентификатор,
					Роль);
			КонецЕсли;
			// Проверка соответствия назначения ролей и профиля.
			Если НедоступныеРоли.Получить(Роль) <> Неопределено Тогда
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В описании профиля ""%1 (%2)""
					           |указана роль ""%3"", 
					           |которая не соответствует назначению профиля:
					           |""%4"".'"),
					ОписаниеПрофиля.Имя,
					ОписаниеПрофиля.Идентификатор,
					Роль,
					ПредставлениеНазначенияПрофиля(НазначениеПрофиля));
			КонецЕсли;
		КонецЦикла;
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			// Заполнение списка недоступных ролей в модели сервиса
			// для определения необходимости обновления поставляемых профилей.
			ОписаниеПрофиля.Вставить("РолиНедоступныеВСервисе",
				РолиПрофиляНедоступныеВСервисе(ОписаниеПрофиля, НазначениеПрофиля));
		КонецЕсли;
		
		Если СвойстваПрофилей.Получить(ОписаниеПрофиля.Идентификатор) <> Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Профиль с идентификатором ""%1"" уже существует.'"),
				ОписаниеПрофиля.Идентификатор);
		КонецЕсли;
		СвойстваПрофилей.Вставить(ОписаниеПрофиля.Идентификатор, ОписаниеПрофиля);
		ОписанияПрофилейМассив.Добавить(ОписаниеПрофиля);
		Если ЗначениеЗаполнено(ОписаниеПрофиля.Имя) Тогда
			Если СвойстваПрофилей.Получить(ОписаниеПрофиля.Имя) <> Неопределено Тогда
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Профиль с именем ""%1"" уже существует.'"),
					ОписаниеПрофиля.Имя);
			КонецЕсли;
			СвойстваПрофилей.Вставить(ОписаниеПрофиля.Имя, ОписаниеПрофиля);
		КонецЕсли;
		// Преобразование СпискаЗначений к Соответствию для фиксации.
		ВидыДоступа = Новый Соответствие;
		Для Каждого ЭлементСписка Из ОписаниеПрофиля.ВидыДоступа Цикл
			ИмяВидаДоступа       = ЭлементСписка.Значение;
			УточнениеВидаДоступа = ЭлементСписка.Представление;
			Если СвойстваВидовДоступа.ПоИменам.Получить(ИмяВидаДоступа) = Неопределено Тогда
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В описании профиля ""%1""
					           |указан несуществующий вид доступа ""%2"".'"),
					?(ЗначениеЗаполнено(ОписаниеПрофиля.Имя),
					  ОписаниеПрофиля.Имя,
					  ОписаниеПрофиля.Идентификатор),
					ИмяВидаДоступа);
			КонецЕсли;
			
			ВидДоступаСоответствуетНазначениюПрофиля =
				УправлениеДоступомСлужебныйКлиентСервер.ВидДоступаСоответствуетНазначениюПрофиля(
					ИмяВидаДоступа, НазначениеПрофиля);
			
			Если Не ВидДоступаСоответствуетНазначениюПрофиля Тогда
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В описании профиля ""%1""
					           |указан вид доступа ""%2""
					           |который не соответствует назначению профиля:
					           |""%3"".'"),
					?(ЗначениеЗаполнено(ОписаниеПрофиля.Имя),
					  ОписаниеПрофиля.Имя,
					  ОписаниеПрофиля.Идентификатор),
					ИмяВидаДоступа,
					ПредставлениеНазначенияПрофиля(НазначениеПрофиля));
			КонецЕсли;
			Если УточнениеВидаДоступа <> ""
			   И УточнениеВидаДоступа <> "ВначалеВсеЗапрещены"
			   И УточнениеВидаДоступа <> "Предустановленный"
			   И УточнениеВидаДоступа <> "ВначалеВсеРазрешены" Тогда
				
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В описании профиля ""%1""
					           |для вида доступа ""%2"" указано неизвестное уточнение ""%3"".
					           |
					           |Допустимы только следующие уточнения:
					           |- ""ВначалеВсеЗапрещены"" или """",
					           |- ""ВначалеВсеРазрешены"",
					           |- ""Предустановленный"".'"),
					?(ЗначениеЗаполнено(ОписаниеПрофиля.Имя),
					  ОписаниеПрофиля.Имя,
					  ОписаниеПрофиля.Идентификатор),
					ИмяВидаДоступа,
					УточнениеВидаДоступа);
			КонецЕсли;
			ВидыДоступа.Вставить(ИмяВидаДоступа, УточнениеВидаДоступа);
		КонецЦикла;
		ОписаниеПрофиля.ВидыДоступа = ВидыДоступа;
		
		// Удаление повторяющихся значений.
		ЗначенияДоступа = Новый Массив;
		ТаблицаЗначенийДоступа = Новый ТаблицаЗначений;
		ТаблицаЗначенийДоступа.Колонки.Добавить("ВидДоступа",      Метаданные.ОпределяемыеТипы.ЗначениеДоступа.Тип);
		ТаблицаЗначенийДоступа.Колонки.Добавить("ЗначениеДоступа", Метаданные.ОпределяемыеТипы.ЗначениеДоступа.Тип);
		
		Для Каждого ЭлементСписка Из ОписаниеПрофиля.ЗначенияДоступа Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("ВидДоступа",      ЭлементСписка.Значение);
			Отбор.Вставить("ЗначениеДоступа", ЭлементСписка.Представление);
			ВидДоступа      = Отбор.ВидДоступа;
			ЗначениеДоступа = Отбор.ЗначениеДоступа;
			
			СвойстваВидаДоступа = СвойстваВидовДоступа.ПоИменам.Получить(ВидДоступа);
			Если СвойстваВидаДоступа = Неопределено Тогда
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В описании профиля ""%1""
					           |указан несуществующий вид доступа ""%2""
					           |для значения доступа
					           |""%3"".'"),
					?(ЗначениеЗаполнено(ОписаниеПрофиля.Имя),
					  ОписаниеПрофиля.Имя,
					  ОписаниеПрофиля.Идентификатор),
					ВидДоступа,
					ЗначениеДоступа);
			КонецЕсли;
			
			ОбъектМетаданных = Неопределено;
			ПозицияТочки = СтрНайти(ЗначениеДоступа, ".");
			Если ПозицияТочки > 0 Тогда
				ВидОбъектаМетаданных = Лев(ЗначениеДоступа, ПозицияТочки - 1);
				ОстатокСтроки = Сред(ЗначениеДоступа, ПозицияТочки + 1);
				ПозицияТочки = СтрНайти(ОстатокСтроки, ".");
				Если ПозицияТочки > 0 Тогда
					ИмяОбъектаМетаданных = Лев(ОстатокСтроки, ПозицияТочки - 1);
					ПолноеИмяОбъектаМетаданных = ВидОбъектаМетаданных + "." + ИмяОбъектаМетаданных;
					ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
				КонецЕсли;
			КонецЕсли;
			
			Если ОбъектМетаданных = Неопределено Тогда
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В описании профиля ""%1""
					           |для вида доступа ""%2""
					           |не существует тип указанного значения доступа
					           |""%3"".'"),
					?(ЗначениеЗаполнено(ОписаниеПрофиля.Имя),
					  ОписаниеПрофиля.Имя,
					  ОписаниеПрофиля.Идентификатор),
					ВидДоступа,
					ЗначениеДоступа);
			КонецЕсли;
			
			Попытка
				ПустаяСсылкаЗначенияДоступа = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
					ПолноеИмяОбъектаМетаданных).ПустаяСсылка();
			Исключение
				ПустаяСсылкаЗначенияДоступа = Неопределено;
			КонецПопытки;
			
			Если ПустаяСсылкаЗначенияДоступа = Неопределено Тогда
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В описании профиля ""%1""
					           |для вида доступа ""%2""
					           |указан не ссылочный тип значения доступа
					           |""%3"".'"),
					?(ЗначениеЗаполнено(ОписаниеПрофиля.Имя),
					  ОписаниеПрофиля.Имя,
					  ОписаниеПрофиля.Идентификатор),
					ВидДоступа,
					ЗначениеДоступа);
			КонецЕсли;
			ТипЗначенияДоступа = ТипЗнч(ПустаяСсылкаЗначенияДоступа);
			
			СвойстваВидаДоступаПоТипу = СвойстваВидовДоступа.ПоТипамЗначений.Получить(ТипЗначенияДоступа);
			Если СвойстваВидаДоступаПоТипу = Неопределено
			 ИЛИ СвойстваВидаДоступаПоТипу.Имя <> ВидДоступа Тогда
				
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В описании профиля ""%1""
					           |указано значение доступа ""%3""
					           |типа, который не указан в свойствах вида доступа ""%2"".'"),
					?(ЗначениеЗаполнено(ОписаниеПрофиля.Имя),
					  ОписаниеПрофиля.Имя,
					  ОписаниеПрофиля.Идентификатор),
					ВидДоступа,
					ЗначениеДоступа);
			КонецЕсли;
			
			Если ТаблицаЗначенийДоступа.НайтиСтроки(Отбор).Количество() > 0 Тогда
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В описании профиля ""%1""
					           |для вида доступа ""%2""
					           |повторно указано значение доступа
					           |""%3"".'"),
					?(ЗначениеЗаполнено(ОписаниеПрофиля.Имя),
					  ОписаниеПрофиля.Имя,
					  ОписаниеПрофиля.Идентификатор),
					ВидДоступа,
					ЗначениеДоступа);
			КонецЕсли;
			ЗначенияДоступа.Добавить(Отбор);
		КонецЦикла;
		ОписаниеПрофиля.ЗначенияДоступа = ЗначенияДоступа;
	КонецЦикла;
	
	ПоставляемыеПрофили = Новый Структура;
	ПоставляемыеПрофили.Вставить("ПараметрыОбновления",    ПараметрыОбновления);
	ПоставляемыеПрофили.Вставить("ОписанияПрофилей",       СвойстваПрофилей);
	ПоставляемыеПрофили.Вставить("ОписанияПрофилейМассив", ОписанияПрофилейМассив);
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(ПоставляемыеПрофили);
	
КонецФункции

// Для процедуры ПоставляемыеПрофили.
Функция ПредставлениеНазначенияПрофиля(НазначениеПрофиля)
	
	Если НазначениеПрофиля = "СовместноДляПользователейИВнешнихПользователей" Тогда
		Возврат НСтр("ru = 'Совместно для пользователей и внешних пользователей'");
		
	ИначеЕсли НазначениеПрофиля = "ДляВнешнихПользователей" Тогда
		Возврат НСтр("ru = 'Для внешних пользователей'");
	КонецЕсли;
	
	Возврат НСтр("ru = 'Для пользователей'");
	
КонецФункции

Функция ПредопределенныеПрофилиСовпадают(НовыеПрофили, СтарыеПрофили, ЕстьУдаленные)
	
	ПредопределенныеПрофилиСовпадают =
		НовыеПрофили.Количество() = СтарыеПрофили.Количество();
	
	Для каждого Профиль Из СтарыеПрофили Цикл
		Если НовыеПрофили.Найти(Профиль) = Неопределено Тогда
			ПредопределенныеПрофилиСовпадают = Ложь;
			ЕстьУдаленные = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПредопределенныеПрофилиСовпадают;
	
КонецФункции

// Замещает имеющийся или создает новый поставляемый профиль групп доступа по его описанию.
//
// Параметры:
//  СвойстваПрофиля - ФиксированнаяСтруктура - свойства профиля, как в структуре возвращаемой
//                    функцией НовоеОписаниеПрофиляГруппДоступа общего модуля УправлениеДоступом.
// 
// Возвращаемое значение:
//  Булево. Истина - профиль изменен.
//
Функция ОбновитьПрофильГруппДоступа(СвойстваПрофиля, НеОбновлятьРолиПользователей = Ложь)
	
	ПрофильИзменен = Ложь;
	
	ПрофильСсылка = ПоставляемыйПрофильПоИдентификатору(СвойстваПрофиля.Идентификатор);
	Если ПрофильСсылка = Неопределено Тогда
		
		Если ЗначениеЗаполнено(СвойстваПрофиля.Имя) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПрофилиГруппДоступа.Ссылка КАК Ссылка,
			|	ПрофилиГруппДоступа.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
			|ИЗ
			|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
			|ГДЕ
			|	ПрофилиГруппДоступа.Предопределенный = ИСТИНА";
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ИмяПредопределенного = Выборка.ИмяПредопределенныхДанных;
				Если ВРег(СвойстваПрофиля.Имя) = ВРег(ИмяПредопределенного) Тогда
					ПрофильСсылка = Выборка.Ссылка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ПрофильСсылка = Неопределено Тогда
			// Поставляемый профиль не найден, нужно создать новый.
			ПрофильОбъект = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		Иначе
			// Поставляемый профиль связан с предопределенным элементом.
			ПрофильОбъект = ПрофильСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		ПрофильОбъект.ИдентификаторПоставляемыхДанных =
			Новый УникальныйИдентификатор(СвойстваПрофиля.Идентификатор);
		
		ПрофильИзменен = Истина;
	Иначе
		ПрофильОбъект = ПрофильСсылка.ПолучитьОбъект();
		ПрофильИзменен = ПоставляемыйПрофильИзменен(ПрофильОбъект);
	КонецЕсли;
	
	Если ПрофильИзменен Тогда
		ЗаблокироватьДанныеДляРедактирования(ПрофильОбъект.Ссылка, ПрофильОбъект.ВерсияДанных);
		
		ПрофильОбъект.Наименование = СвойстваПрофиля.Наименование;
		
		ПрофильОбъект.Роли.Очистить();
		Для каждого Роль Из ОписаниеРолейПрофиля(СвойстваПрофиля) Цикл
			МетаданныеРоли = Метаданные.Роли.Найти(Роль);
			Если МетаданныеРоли = Неопределено Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При обновлении поставляемого профиля ""%1""
					           |роль ""%2"" не найдена в метаданных.'"),
					СвойстваПрофиля.Наименование,
					Роль);
			КонецЕсли;
			ПрофильОбъект.Роли.Добавить().Роль =
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеРоли);
		КонецЦикла;
		
		ПрофильОбъект.ВидыДоступа.Очистить();
		Для каждого ОписаниеВидаДоступа Из СвойстваПрофиля.ВидыДоступа Цикл
			СвойстваВидаДоступа = УправлениеДоступомСлужебный.СвойстваВидаДоступа(ОписаниеВидаДоступа.Ключ);
			Строка = ПрофильОбъект.ВидыДоступа.Добавить();
			Строка.ВидДоступа        = СвойстваВидаДоступа.Ссылка;
			Строка.Предустановленный = ОписаниеВидаДоступа.Значение = "Предустановленный";
			Строка.ВсеРазрешены      = ОписаниеВидаДоступа.Значение = "ВначалеВсеРазрешены";
		КонецЦикла;
		
		ПрофильОбъект.ЗначенияДоступа.Очистить();
		Для каждого ОписаниеЗначенияДоступа Из СвойстваПрофиля.ЗначенияДоступа Цикл
			СвойстваВидаДоступа = УправлениеДоступомСлужебный.СвойстваВидаДоступа(ОписаниеЗначенияДоступа.ВидДоступа);
			СтрокаЗначения = ПрофильОбъект.ЗначенияДоступа.Добавить();
			СтрокаЗначения.ВидДоступа = СвойстваВидаДоступа.Ссылка;
			Запрос = Новый Запрос(СтрЗаменить("ВЫБРАТЬ Значение(%1) КАК Значение", "%1", ОписаниеЗначенияДоступа.ЗначениеДоступа));
			СтрокаЗначения.ЗначениеДоступа = Запрос.Выполнить().Выгрузить()[0].Значение;
		КонецЦикла;
		
		ПрофильОбъект.Назначение.Очистить();
		Для каждого ТипНазначения Из СвойстваПрофиля.Назначение Цикл
			СтрокаНазначения = ПрофильОбъект.Назначение.Добавить();
			СтрокаНазначения.ТипПользователей = ТипНазначения;
		КонецЦикла;
		
		Если НеОбновлятьРолиПользователей Тогда
			ПрофильОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьРолиПользователей");
		КонецЕсли;
		ПрофильОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ПрофильОбъект.Ссылка);
	КонецЕсли;
	
	Возврат ПрофильИзменен;
	
КонецФункции

Функция ОписаниеРолейПрофиля(ОписаниеПрофиля)
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат ОписаниеПрофиля.Роли;
	КонецЕсли;
	
	НазначениеПрофиля = УправлениеДоступомСлужебныйКлиентСервер.НазначениеПрофиля(ОписаниеПрофиля);
	НедоступныеРоли = ПользователиСлужебныйПовтИсп.НедоступныеРоли(НазначениеПрофиля);
	
	ОписаниеРолейПрофиля = Новый Массив;
	
	Для Каждого Роль Из ОписаниеПрофиля.Роли Цикл
		Если НедоступныеРоли.Получить(Роль) = Неопределено Тогда
			ОписаниеРолейПрофиля.Добавить(Роль);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(ОписаниеРолейПрофиля);
	
КонецФункции

Функция РолиПрофиляНедоступныеВСервисе(ОписаниеПрофиля, НазначениеПрофиля)
	
	НедоступныеРоли = ПользователиСлужебныйПовтИсп.НедоступныеРоли(НазначениеПрофиля, Истина);
	НедоступныеРолиПрофиля = Новый Соответствие;
	
	Для Каждого Роль Из ОписаниеПрофиля.Роли Цикл
		Если НедоступныеРоли.Получить(Роль) <> Неопределено Тогда
			НедоступныеРолиПрофиля.Вставить(Роль, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(НедоступныеРолиПрофиля);
	
КонецФункции

#КонецОбласти

#КонецЕсли
