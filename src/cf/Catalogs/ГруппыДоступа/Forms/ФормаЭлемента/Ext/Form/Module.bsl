
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Подготовка вспомогательных данных.
	УправлениеДоступомСлужебный.ПриСозданииНаСервереФормыРедактированияРазрешенныхЗначений(ЭтотОбъект);
	
	НачальнаяНастройкаПриЧтенииИСоздании(Объект);
	
	СправочникВнешниеПользователиДоступен = ПравоДоступа(
		"Просмотр", Метаданные.Справочники.ВнешниеПользователи);
	
	СписокТиповПользователей.Добавить(Тип("СправочникСсылка.Пользователи"));
	СписокТиповПользователей.Добавить(Тип("СправочникСсылка.ВнешниеПользователи"));
	
	// Установка постоянной доступности свойств.
	
	// Определение необходимости настройки ограничений доступа.
	Если НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		Элементы.Доступ.Видимость = Ложь;
	КонецЕсли;
	
	// Установка доступности при открытии формы только для просмотра.
	Элементы.ПользователиПодобрать.Доступность                = НЕ ТолькоПросмотр;
	Элементы.КонтекстноеМенюПользователиПодобрать.Доступность = НЕ ТолькоПросмотр;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
	   И Объект.Ссылка = Справочники.ГруппыДоступа.Администраторы
	   И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		
		МодульПользователиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		ДействияСПользователемСервиса = МодульПользователиСлужебныйВМоделиСервиса.ПолучитьДействияСПользователемСервиса();
		
		Если НЕ ДействияСПользователемСервиса.ИзменениеАдминистративногоДоступа Тогда
			ВызватьИсключение
				НСтр("ru = 'Не достаточно прав доступа для изменения состава администраторов.'");
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьНазначение();
	
	ВыполненаПроцедураПриСозданииНаСервере = Истина;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ПользователиДобавить.ТолькоВоВсехДействиях = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто()
	   И Не Объект.Ссылка = Справочники.ГруппыДоступа.Администраторы Тогда
		
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОтветНаВопросПриОткрытииФормы = "УстановитьТолькоПросмотр" Тогда
		ОтветНаВопросПриОткрытииФормы = "";
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ОтветНаВопросПриОткрытииФормы = "УстановитьПрофильАдминистратор" Тогда
		ОтветНаВопросПриОткрытииФормы = Неопределено;
		Объект.Профиль = ПредопределенноеЗначение("Справочник.ПрофилиГруппДоступа.Администратор");
		Модифицированность = Истина;
		
	ИначеЕсли Объект.Ссылка = ПредопределенноеЗначение("Справочник.ГруппыДоступа.Администраторы")
		    И Объект.Профиль <> ПредопределенноеЗначение("Справочник.ПрофилиГруппДоступа.Администратор") Тогда
		
		Отказ = Истина;
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПриОткрытииПослеПодтвержденияУстановкиПрофиляАдминистратор", ЭтотОбъект),
			НСтр("ru = 'У группы доступа Администраторы должен быть профиль Администратор.
			           |
			           |Установить профиль в группе доступа (нет - открыть только для просмотра)?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет);
	Иначе
		Если ОтветНаВопросПриОткрытииФормы = "ОбновитьСоставВидовДоступа" Тогда
			ОтветНаВопросПриОткрытииФормы = "";
			ОбновитьСоставВидовДоступа();
			ИзменилсяСоставВидовДоступаПриЧтении = Ложь;
			
		ИначеЕсли НЕ ТолькоПросмотр И ИзменилсяСоставВидовДоступаПриЧтении Тогда
			
			Отказ = Истина;
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ПриОткрытииПослеПодтвержденияОбновленияВидовДоступа", ЭтотОбъект),
				НСтр("ru = 'Изменился состав видов доступа профиля этой группы доступа.
				           |
				           |Обновить виды доступа в группе доступа (нет - открыть только для просмотра)?'"),
				РежимДиалогаВопрос.ДаНет,
				,
				КодВозвратаДиалога.Нет);
		
		ИначеЕсли НЕ ТолькоПросмотр
			   И НЕ ЗначениеЗаполнено(Объект.Ссылка)
			   И ТипЗнч(ВладелецФормы) = Тип("ТаблицаФормы")
			   И ВладелецФормы.Родитель.Параметры.Свойство("Профиль") Тогда
			
			Если ЗначениеЗаполнено(ВладелецФормы.Родитель.Параметры.Профиль) Тогда
				Объект.Профиль = ВладелецФормы.Родитель.Параметры.Профиль;
				ПодключитьОбработчикОжидания("ОбработчикОжиданияПрофильПриИзменении", 0.1, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ ВыполненаПроцедураПриСозданииНаСервере Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеДоступомСлужебный.ПриПовторномЧтенииНаСервереФормыРедактированияРазрешенныхЗначений(ЭтотОбъект, ТекущийОбъект);
	
	НачальнаяНастройкаПриЧтенииИСоздании(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().РазделениеВключено
	   И Объект.Ссылка = ПредопределенноеЗначение("Справочник.ГруппыДоступа.Администраторы")
	   И ПарольПользователяСервиса = Неопределено Тогда
		
		Отказ = Истина;
		СтандартныеПодсистемыКлиент.ПриЗапросеПароляДляАутентификацииВСервисе(
			Новый ОписаниеОповещения("ПередЗаписьюПродолжение", ЭтотОбъект, ПараметрыЗаписи),
			ЭтотОбъект,
			ПарольПользователяСервиса);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		// Ответственный не может менять что-либо, кроме состава пользователей.
		// В целях предотвращения изменения группы доступа на клиенте в запрещенных
		// частях, выполняется повторное чтение объекта.
		ВосстановитьОбъектБезУчастниковГруппы(ТекущийОбъект);
	КонецЕсли;
	
	ТекущийОбъект.Пользователи.Очистить();
	
	Если ТекущийОбъект.Ссылка <> Справочники.ГруппыДоступа.Администраторы
	   И ЗначениеЗаполнено(ТекущийОбъект.Пользователь) Тогда
		
		Если ИспользованиеПерсональногоДоступа Тогда
			ТекущийОбъект.Пользователи.Добавить().Пользователь = ТекущийОбъект.Пользователь;
		КонецЕсли;
	Иначе
		Для каждого Элемент Из ПользователиГруппы.ПолучитьЭлементы() Цикл
			ТекущийОбъект.Пользователи.Добавить().Пользователь = Элемент.Пользователь;
		КонецЦикла;
	КонецЕсли;
	
	Если ТекущийОбъект.Ссылка = Справочники.ГруппыДоступа.Администраторы Тогда
		Объект.Родитель      = Неопределено;
		Объект.Ответственный = Неопределено;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И Объект.Ссылка = Справочники.ГруппыДоступа.Администраторы Тогда
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить(
			"ПарольПользователяСервиса", ПарольПользователяСервиса);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрофильПомеченНаУдаление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Профиль, "ПометкаУдаления");
	ПрофильПомеченНаУдаление = ?(ПрофильПомеченНаУдаление = Неопределено, Ложь, ПрофильПомеченНаУдаление);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ Объект.ПометкаУдаления И ПрофильПомеченНаУдаление Тогда
		ПараметрыЗаписи.Вставить("ПредупредитьЧтоПрофильПомеченНаУдаление");
	КонецЕсли;
	
	УправлениеДоступомСлужебный.ПослеЗаписиНаСервереФормыРедактированияРазрешенныхЗначений(
		ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ГруппыДоступа", Новый Структура, Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ПредупредитьЧтоПрофильПомеченНаУдаление") Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Группа доступа не влияет на права участников
			           |так как ее профиль помечен на удаление.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверенныеРеквизитыОбъекта = Новый Массив;
	Ошибки = Неопределено;
	
	// Проверка незаполненных и повторяющихся пользователей.
	ПроверенныеРеквизитыОбъекта.Добавить("Пользователи.Пользователь");
	ДеревоПользователейСтроки = РеквизитФормыВЗначение("ПользователиГруппы").Строки;
	КоличествоОшибок = ?(Ошибки = Неопределено, 0, Ошибки.Количество());
	
	// Подготовка данных для проверки соответствия типов объектов авторизации.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователи", ДеревоПользователейСтроки.ВыгрузитьКолонку("Пользователь"));
	Запрос.УстановитьПараметр("Родитель", Объект.Профиль);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступаНазначение.ТипПользователей
	|ПОМЕСТИТЬ ПрофилиГруппДоступаНазначение
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.Назначение КАК ПрофилиГруппДоступаНазначение
	|ГДЕ
	|	ПрофилиГруппДоступаНазначение.Ссылка = &Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	НЕ ЛОЖЬ В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ЛОЖЬ
	|				ИЗ
	|					ПрофилиГруппДоступаНазначение КАК ПрофилиГруппДоступаНазначение
	|				ГДЕ
	|					ТИПЗНАЧЕНИЯ(ПрофилиГруппДоступаНазначение.ТипПользователей) = ТИПЗНАЧЕНИЯ(ВнешниеПользователи.ОбъектАвторизации))
	|	И ВнешниеПользователи.Ссылка В(&Пользователи)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГруппыВнешнихПользователейНазначение.Ссылка
	|ИЗ
	|	Справочник.ГруппыВнешнихПользователей.Назначение КАК ГруппыВнешнихПользователейНазначение
	|ГДЕ
	|	НЕ ЛОЖЬ В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ЛОЖЬ
	|				ИЗ
	|					ПрофилиГруппДоступаНазначение КАК ПрофилиГруппДоступаНазначение
	|				ГДЕ
	|					ТИПЗНАЧЕНИЯ(ПрофилиГруппДоступаНазначение.ТипПользователей) = ТИПЗНАЧЕНИЯ(ГруппыВнешнихПользователейНазначение.ТипПользователей))
	|	И ГруппыВнешнихПользователейНазначение.Ссылка В(&Пользователи)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ ЛОЖЬ В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ЛОЖЬ
	|				ИЗ
	|					ПрофилиГруппДоступаНазначение КАК ПрофилиГруппДоступаНазначение
	|				ГДЕ
	|					ТИПЗНАЧЕНИЯ(ПрофилиГруппДоступаНазначение.ТипПользователей) = ТИП(Справочник.Пользователи))
	|	И Пользователи.Ссылка В(&Пользователи)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГруппыПользователей.Ссылка
	|ИЗ
	|	Справочник.ГруппыПользователей КАК ГруппыПользователей
	|ГДЕ
	|	НЕ ЛОЖЬ В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ЛОЖЬ
	|				ИЗ
	|					ПрофилиГруппДоступаНазначение КАК ПрофилиГруппДоступаНазначение
	|				ГДЕ
	|					ТИПЗНАЧЕНИЯ(ПрофилиГруппДоступаНазначение.ТипПользователей) = ТИП(Справочник.Пользователи))
	|	И ГруппыПользователей.Ссылка В(&Пользователи)";
	
	УстановитьПривилегированныйРежим(Истина);
	НедопустимыеПользователи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого ТекущаяСтрока Из ДеревоПользователейСтроки Цикл
		НомерСтроки = ДеревоПользователейСтроки.Индекс(ТекущаяСтрока);
		Участник = ТекущаяСтрока.Пользователь;
		
		// Проверка заполнения значения.
		Если НЕ ЗначениеЗаполнено(Участник) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"ПользователиГруппы[%1].Пользователь",
				УточнитьСообщение(НСтр("ru = 'Пользователь не выбран.'"), Участник),
				"ПользователиГруппы",
				НомерСтроки,
				УточнитьСообщение(НСтр("ru = 'Пользователь в строке %1 не выбран.'"), Участник));
			Продолжить;
		КонецЕсли;
		
		// Проверка наличия повторяющихся значений.
		НайденныеЗначения = ДеревоПользователейСтроки.НайтиСтроки(
			Новый Структура("Пользователь", ТекущаяСтрока.Пользователь));
		
		Если НайденныеЗначения.Количество() > 1 Тогда
			
			Если ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
				ТекстДляОднойОшибки      = НСтр("ru = 'Пользователь ""%2"" повторяется.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Пользователь ""%2"" в строке %1 повторяется.'");
				
			ИначеЕсли ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
				ТекстДляОднойОшибки      = НСтр("ru = 'Внешний пользователь ""%2"" повторяется.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Внешний пользователь ""%2"" в строке %1 повторяется.'");
				
			ИначеЕсли ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				ТекстДляОднойОшибки      = НСтр("ru = 'Группа пользователей ""%2"" повторяется.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Группа пользователей ""%2"" в строке %1 повторяется.'");
			Иначе
				ТекстДляОднойОшибки      = НСтр("ru = 'Группа внешних пользователей ""%2"" повторяется.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Группа внешних пользователей ""%2"" в строке %1 повторяется.'");
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"ПользователиГруппы[%1].Пользователь",
				УточнитьСообщение(ТекстДляОднойОшибки, Участник),
				"ПользователиГруппы",
				НомерСтроки,
				УточнитьСообщение(ТекстДляНесколькихОшибок, Участник));
		КонецЕсли;
		
		// Проверка наличия только пользователей в предопределенной группе Администраторы.
		Если Объект.Ссылка = Справочники.ГруппыДоступа.Администраторы
		   И ТипЗнч(ТекущаяСтрока.Пользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
			
			Если ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
				ТекстДляОднойОшибки      = НСтр("ru = 'Внешний пользователь ""%2"" недопустим в предопределенной группе доступа Администраторы.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Внешний пользователь ""%2"" в строке %1 недопустим в предопределенной группе доступа Администраторы.'");
				
			ИначеЕсли ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				ТекстДляОднойОшибки      = НСтр("ru = 'Группа пользователей ""%2"" недопустима в предопределенной группе доступа Администраторы.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Группа пользователей ""%2"" в строке %1 недопустима в предопределенной группе доступа Администраторы.'");
			Иначе
				ТекстДляОднойОшибки      = НСтр("ru = 'Группа внешних пользователей ""%2"" недопустима в предопределенной группе доступа Администраторы.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Группа внешних пользователей ""%2"" в строке %1 недопустима в предопределенной группе доступа Администраторы.'");
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"ПользователиГруппы[%1].Пользователь",
				УточнитьСообщение(ТекстДляОднойОшибки, Участник),
				"ПользователиГруппы",
				НомерСтроки,
				УточнитьСообщение(ТекстДляНесколькихОшибок, Участник));
		КонецЕсли;
		
		Если НедопустимыеПользователи.Найти(ТекущаяСтрока.Пользователь) <> Неопределено Тогда
			
			Если ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
				ТекстДляОднойОшибки      = НСтр("ru = 'Пользователь ""%2"" недопустим для указанного типа участников.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Пользователь ""%2"" в строке %1 недопустим для указанного типа участников.'");
			ИначеЕсли ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				ТекстДляОднойОшибки      = НСтр("ru = 'Группа пользователей ""%2"" недопустима для указанного типа участников.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Группа пользователей ""%2"" в строке %1 недопустима для указанного типа участников.'");
			ИначеЕсли ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
				ТекстДляОднойОшибки      = НСтр("ru = 'Внешний пользователь ""%2"" недопустим для указанного типа участников.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Внешний пользователь ""%2"" в строке %1 недопустим для указанного типа участников.'");
			Иначе // Группа внешних пользователей.
				ТекстДляОднойОшибки      = НСтр("ru = 'Группа внешних пользователей ""%2"" недопустима для указанного типа участников.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Группа внешних пользователей ""%2"" в строке %1 недопустима для указанного типа участников.'");
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"ПользователиГруппы[%1].Пользователь",
				УточнитьСообщение(ТекстДляОднойОшибки, Участник),
				"ПользователиГруппы",
				НомерСтроки,
				УточнитьСообщение(ТекстДляНесколькихОшибок, Участник));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И Объект.Ссылка = Справочники.ГруппыДоступа.Администраторы Тогда
		
		ОписаниеОшибки = "";
		УправлениеДоступомСлужебный.ПроверитьНаличиеПользователяИБВГруппеДоступаАдминистраторы(
			ПользователиГруппы.ПолучитьЭлементы(), ОписаниеОшибки);
		
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"ПользователиГруппы", ОписаниеОшибки, "");
		КонецЕсли;
	КонецЕсли;
	
	// Проверка незаполненных и повторяющихся значений доступа.
	ПропуститьПроверкуВидовИЗначений = Ложь;
	Если КоличествоОшибок <> ?(Ошибки = Неопределено, 0, Ошибки.Количество()) Тогда
		ПропуститьПроверкуВидовИЗначений = Истина;
		Элементы.ПользователиИДоступ.ТекущаяСтраница = Элементы.ПользователиГруппы;
	КонецЕсли;
	
	УправлениеДоступомСлужебныйКлиентСервер.ОбработкаПроверкиЗаполненияНаСервереФормыРедактированияРазрешенныхЗначений(
		ЭтотОбъект, Отказ, ПроверенныеРеквизитыОбъекта, Ошибки, ПропуститьПроверкуВидовИЗначений);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить(
		"ПроверенныеРеквизитыОбъекта", ПроверенныеРеквизитыОбъекта);
	
	Если НЕ ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПрофильПриИзменении(Элемент)
	
	ПрофильПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПользователи

&НаКлиенте
Процедура ПользователиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
			Отказ = Истина;
			
			Элементы.Пользователи.ТекущаяСтрока =
				Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор();
			
			Элементы.Пользователи.СкопироватьСтроку();
		КонецЕсли;
		
	ИначеЕсли Элементы.Пользователи.ТекущаяСтрока <> Неопределено Тогда
		Отказ = Истина;
		Элементы.Пользователи.СкопироватьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		Отказ = Истина;
		
		Элементы.Пользователи.ТекущаяСтрока =
			Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор();
		
		Элементы.Пользователи.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередУдалением(Элемент, Отказ)
	
	СтрокаРодителя = Элемент.ТекущиеДанные.ПолучитьРодителя();
	
	Если СтрокаРодителя <> Неопределено Тогда
		Отказ = Истина;
		
		Если ТипЗнч(СтрокаРодителя.Пользователь) =
		        Тип("СправочникСсылка.ГруппыПользователей") Тогда
			
			ПоказатьПредупреждение(,
				НСтр("ru = 'Пользователи групп отображаются для сведения,
				           |что они получают доступ групп пользователей.
				           |Их нельзя удалить в этом списке.'"));
		Иначе
			ПоказатьПредупреждение(,
				НСтр("ru = 'Внешние пользователи групп отображаются для сведения,
				           |что они получают доступ групп внешних пользователей.
				           |Их нельзя удалить в этом списке.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Элемент.ТекущиеДанные.Пользователь = Неопределено;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Пользователь = Неопределено Тогда
		Элемент.ТекущиеДанные.НомерКартинки = -1;
		Элемент.ТекущиеДанные.Пользователь = ПредопределенноеЗначение(
			"Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока
	   И Элемент.ТекущиеДанные <> Неопределено
	   И Элемент.ТекущиеДанные.Пользователь = ПредопределенноеЗначение(
	     	"Справочник.Пользователи.ПустаяСсылка") Тогда
		
		Элемент.ТекущиеДанные.Пользователь = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЕстьИзменения = Ложь;
	Если РежимПодбора Тогда
		ПользователиГруппы.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	ИзмененныеСтроки = Новый Массив;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для каждого Значение Из ВыбранноеЗначение Цикл
			ЗначениеНеНайдено = Истина;
			Для каждого Элемент Из ПользователиГруппы.ПолучитьЭлементы() Цикл
				Если Элемент.Пользователь = Значение Тогда
					ЗначениеНеНайдено = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеНеНайдено Тогда
				НовыйЭлемент = ПользователиГруппы.ПолучитьЭлементы().Добавить();
				НовыйЭлемент.Пользователь = Значение;
				ИзмененныеСтроки.Добавить(НовыйЭлемент.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Элемент.ТекущиеДанные.Пользователь <> ВыбранноеЗначение Тогда
		Элемент.ТекущиеДанные.Пользователь = ВыбранноеЗначение;
		ИзмененныеСтроки.Добавить(Элемент.ТекущаяСтрока);
	КонецЕсли;
	
	Если ИзмененныеСтроки.Количество() > 0 Тогда
		ОбновленныеСтроки = Неопределено;
		ОбновитьПользователейГрупп(ИзмененныеСтроки, ОбновленныеСтроки);
		Для каждого ИдентификаторСтроки Из ОбновленныеСтроки Цикл
			Элементы.Пользователи.Развернуть(ИдентификаторСтроки);
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПослеУдаления(Элемент)
	
	// Установка отображения дерева.
	ЕстьВложенные = Ложь;
	Для каждого Элемент Из ПользователиГруппы.ПолучитьЭлементы() Цикл
		Если Элемент.ПолучитьЭлементы().Количество() > 0 Тогда
			ЕстьВложенные = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Пользователи.Отображение =
		?(ЕстьВложенные, ОтображениеТаблицы.Дерево, ОтображениеТаблицы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.Пользователи.ТекущиеДанные.Пользователь) Тогда
		ОбновитьПользователейГрупп(Элементы.Пользователи.ТекущаяСтрока);
		Элементы.Пользователи.Развернуть(Элементы.Пользователи.ТекущаяСтрока);
	Иначе
		Элементы.Пользователи.ТекущиеДанные.НомерКартинки = -1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьПодобратьПользователей(Ложь);
	РежимПодбора = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.Пользователи.ТекущиеДанные.НомерКартинки = -1;
	Элементы.Пользователи.ТекущиеДанные.Пользователь  = ПредопределенноеЗначение(
		"Справочник.Пользователи.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Если Объект.Ссылка = ПредопределенноеЗначение("Справочник.ГруппыДоступа.Администраторы") Тогда
			ДанныеВыбора = УправлениеДоступомСлужебныйВызовСервера.СформироватьДанныеВыбораПользователя(
				Текст, Ложь, Ложь);
		Иначе
			ДанныеВыбора = УправлениеДоступомСлужебныйВызовСервера.СформироватьДанныеВыбораПользователя(
				Текст);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Если Объект.Ссылка = ПредопределенноеЗначение("Справочник.ГруппыДоступа.Администраторы") Тогда
			ДанныеВыбора = УправлениеДоступомСлужебныйВызовСервера.СформироватьДанныеВыбораПользователя(
				Текст, Ложь, Ложь);
		Иначе
			ДанныеВыбора = УправлениеДоступомСлужебныйВызовСервера.СформироватьДанныеВыбораПользователя(
				Текст);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыДоступа

&НаКлиенте
Процедура ВидыДоступаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ ТолькоПросмотр Тогда
		Элементы.ВидыДоступа.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриАктивизацииСтроки(Элемент)
	
	УправлениеДоступомСлужебныйКлиент.ВидыДоступаПриАктивизацииСтроки(
		ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриАктивизацииЯчейки(Элемент)
	
	УправлениеДоступомСлужебныйКлиент.ВидыДоступаПриАктивизацииЯчейки(
		ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УправлениеДоступомСлужебныйКлиент.ВидыДоступаПриНачалеРедактирования(
		ЭтотОбъект, Элемент, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеДоступомСлужебныйКлиент.ВидыДоступаПриОкончанииРедактирования(
		ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элемента ВсеРазрешеныПредставление таблицы формы ВидыДоступа.

&НаКлиенте
Процедура ВидыДоступаВсеРазрешеныПредставлениеПриИзменении(Элемент)
	
	УправлениеДоступомСлужебныйКлиент.ВидыДоступаВсеРазрешеныПредставлениеПриИзменении(
		ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаВсеРазрешеныПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеДоступомСлужебныйКлиент.ВидыДоступаВсеРазрешеныПредставлениеОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗначенияДоступа

&НаКлиенте
Процедура ЗначенияДоступаПриИзменении(Элемент)
	
	УправлениеДоступомСлужебныйКлиент.ЗначенияДоступаПриИзменении(
		ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДоступаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УправлениеДоступомСлужебныйКлиент.ЗначенияДоступаПриНачалеРедактирования(
		ЭтотОбъект, Элемент, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДоступаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеДоступомСлужебныйКлиент.ЗначенияДоступаПриОкончанииРедактирования(
		ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеДоступомСлужебныйКлиент.ЗначениеДоступаНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеДоступомСлужебныйКлиент.ЗначениеДоступаОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОчистка(Элемент, СтандартнаяОбработка)
	
	УправлениеДоступомСлужебныйКлиент.ЗначениеДоступаОчистка(
		ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УправлениеДоступомСлужебныйКлиент.ЗначениеДоступаАвтоПодбор(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеДоступомСлужебныйКлиент.ЗначениеДоступаОкончаниеВводаТекста(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подобрать(Команда)
	
	ВыбратьПодобратьПользователей(Истина);
	РежимПодбора = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНеиспользуемыеВидыДоступа(Команда)
	
	ПоказыватьНеИспользуемыеВидыДоступаНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Продолжение обработчика события ПриОткрытии.
&НаКлиенте
Процедура ПриОткрытииПослеПодтвержденияУстановкиПрофиляАдминистратор(Ответ, Неопределен) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОтветНаВопросПриОткрытииФормы = "УстановитьПрофильАдминистратор";
	Иначе
		ОтветНаВопросПриОткрытииФормы = "УстановитьТолькоПросмотр";
	КонецЕсли;
	
	Открыть();
	
КонецПроцедуры

// Продолжение обработчика события ПриОткрытии.
&НаКлиенте
Процедура ПриОткрытииПослеПодтвержденияОбновленияВидовДоступа(Ответ, Неопределен) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОтветНаВопросПриОткрытииФормы = "ОбновитьСоставВидовДоступа";
	Иначе
		ОтветНаВопросПриОткрытииФормы = "УстановитьТолькоПросмотр";
	КонецЕсли;
	
	Открыть();
	
КонецПроцедуры

// Продолжение обработчика события ПередЗаписью.
&НаКлиенте
Процедура ПередЗаписьюПродолжение(НовыйПарольПользователяСервиса, ПараметрыЗаписи) Экспорт
	
	Если НовыйПарольПользователяСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПарольПользователяСервиса = НовыйПарольПользователяСервиса;
	
	Попытка
		Записать(ПараметрыЗаписи);
	Исключение
		ПарольПользователяСервиса = Неопределено;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияПрофильПриИзменении()
	
	ПрофильПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НачальнаяНастройкаПриЧтенииИСоздании(ТекущийОбъект)
	
	Если ТекущийОбъект.Ссылка = Справочники.ГруппыДоступа.Администраторы Тогда
		Элементы.Наименование.ТолькоПросмотр                   = Истина;
		Элементы.Родитель.Видимость                            = Ложь;
		Элементы.Профиль.ТолькоПросмотр                        = Истина;
		Элементы.СвойстваПерсональнойГруппы.Видимость          = Ложь;
		Элементы.Ответственный.Видимость                       = Ложь;
		Элементы.ОтветственныйЗаПерсональнуюГруппу.Видимость   = Ложь;
		Элементы.Описание.ТолькоПросмотр                       = Истина;
		
		Если НЕ УправлениеДоступом.ЕстьРоль("ПолныеПрава") Тогда
			ТолькоПросмотр = Истина;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ТекущийОбъект.Пользователь) Тогда
			// Подготовка к режиму персональной группы доступа.
			АвтоЗаголовок = Ложь;
			Заголовок
				= ТекущийОбъект.Наименование
				+ ": "
				+ ТекущийОбъект.Пользователь
				+ " "
				+ НСтр("ru = '(Группа доступа)'");
			
			Отбор = Новый Структура("Пользователь", ТекущийОбъект.Пользователь);
			НайденныеСтроки = ТекущийОбъект.Пользователи.НайтиСтроки(Отбор);
			ИспользованиеПерсональногоДоступа = НайденныеСтроки.Количество() > 0;
		Иначе
			АвтоЗаголовок = Истина;
		КонецЕсли;
		
		ПользовательЗаполнен = ЗначениеЗаполнено(ТекущийОбъект.Пользователь);
		
		Элементы.Наименование.ТолькоПросмотр                 = ПользовательЗаполнен;
		Элементы.Родитель.ТолькоПросмотр                     = ПользовательЗаполнен;
		Элементы.Профиль.ТолькоПросмотр                      = ПользовательЗаполнен;
		Элементы.СвойстваПерсональнойГруппы.Видимость        = ПользовательЗаполнен;
		Элементы.ПользователиГруппы.Видимость                = НЕ ПользовательЗаполнен;
		Элементы.ОтветственныйЗаПерсональнуюГруппу.Видимость = ПользовательЗаполнен;
		
		Элементы.ПользователиИДоступ.ОтображениеСтраниц =
			?(ПользовательЗаполнен,
			  ОтображениеСтраницФормы.Нет,
			  ОтображениеСтраницФормы.ЗакладкиСверху);
		
		Элементы.ВидыДоступа.ПоложениеЗаголовка =
			?(ПользовательЗаполнен,
			  ПоложениеЗаголовкаЭлементаФормы.Верх,
			  ПоложениеЗаголовкаЭлементаФормы.Нет);
		
		Элементы.ПользовательВладелец.ТолькоПросмотр
			= УправлениеДоступомСлужебный.УпрощенныйИнтерфейсНастройкиПравДоступа();
		
		// Подготовка к режиму редактирования пользователей ответственным за участников.
		Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
			Элементы.Наименование.ТолькоПросмотр = Истина;
			Элементы.Родитель.ТолькоПросмотр = Истина;
			Элементы.Профиль.ТолькоПросмотр = Истина;
			Элементы.Доступ.ТолькоПросмотр = Истина;
			Элементы.Ответственный.ТолькоПросмотр = Истина;
			Элементы.ОтветственныйЗаПерсональнуюГруппу.ТолькоПросмотр = Истина;
			Элементы.Описание.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСоставВидовДоступа(Истина);
	
	// Подготовка дерева пользователей.
	ДеревоПользователей = ПользователиГруппы.ПолучитьЭлементы();
	ДеревоПользователей.Очистить();
	Для каждого СтрокаТЧ Из ТекущийОбъект.Пользователи Цикл
		ДеревоПользователей.Добавить().Пользователь = СтрокаТЧ.Пользователь;
	КонецЦикла;
	ОбновитьПользователейГрупп();
	
КонецПроцедуры

&НаСервере
Процедура ПрофильПриИзмененииНаСервере()
	
	ОбновитьНазначение();
	УдалитьНеТипичныхПользователей();
	ОбновитьСоставВидовДоступа();
	УправлениеДоступомСлужебныйКлиентСервер.ЗаполнитьСвойстваВидовДоступаВФорме(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНазначение()
	
	Назначение.Очистить();
	НазначениеПредставление = "";
	Для Каждого Участник Из Объект.Профиль.Назначение Цикл
		Если Участник.ТипПользователей <> Неопределено Тогда
			Назначение.Добавить(Участник.ТипПользователей);
			ПредставлениеТипа = Участник.ТипПользователей.Метаданные().Синоним;
			НазначениеПредставление = ?(ПустаяСтрока(НазначениеПредставление),
				ПредставлениеТипа, НазначениеПредставление + ", " + ПредставлениеТипа);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНеТипичныхПользователей()
	
	МассивТипов = Новый Массив;
	Для Каждого Элемент Из Назначение Цикл
		МассивТипов.Добавить(ТипЗнч(Элемент.Значение));
	КонецЦикла;
	
	ДеревоПользователей = ПользователиГруппы.ПолучитьЭлементы();
	
	Индекс = ДеревоПользователей.Количество() - 1;
	
	Пока Индекс >= 0 Цикл
		
		СтрокаДерева = ДеревоПользователей.Получить(Индекс);
		УдалитьСтроку = Ложь;
		
		Если (ТипЗнч(СтрокаДерева.Пользователь) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(СтрокаДерева.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей"))
			И МассивТипов.Найти(Тип("СправочникСсылка.Пользователи")) = Неопределено Тогда
			
			УдалитьСтроку = Истина;
			
		ИначеЕсли ТипЗнч(СтрокаДерева.Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи")
			И МассивТипов.Найти(ТипЗнч(СтрокаДерева.Пользователь.ОбъектАвторизации)) = Неопределено Тогда
			
			ДеревоПользователей.Удалить(Индекс);
			
		ИначеЕсли ТипЗнч(СтрокаДерева.Пользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
			
			УдалитьГруппу = Ложь;
			Для Каждого УчастникГруппы Из СтрокаДерева.ПолучитьЭлементы() Цикл
				
				Если МассивТипов.Найти(ТипЗнч(УчастникГруппы.Пользователь.ОбъектАвторизации)) = Неопределено Тогда
					УдалитьСтроку = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если УдалитьСтроку Тогда
			ДеревоПользователей.Удалить(Индекс);
		КонецЕсли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставВидовДоступа(Знач ПриЧтенииНаСервере = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыДоступаПрофиля.ВидДоступа,
	|	ВидыДоступаПрофиля.Предустановленный,
	|	ВидыДоступаПрофиля.ВсеРазрешены
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ВидыДоступаПрофиля
	|ГДЕ
	|	ВидыДоступаПрофиля.Ссылка = &Ссылка
	|	И НЕ ВидыДоступаПрофиля.Предустановленный";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Профиль);
	
	УстановитьПривилегированныйРежим(Истина);
	ВидыДоступаПрофиля = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ИзменилсяСоставВидовДоступа = Ложь;
	
	// Добавление недостающих видов доступа.
	Индекс = ВидыДоступаПрофиля.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Строка = ВидыДоступаПрофиля[Индекс];
		
		Отбор = Новый Структура("ВидДоступа", Строка.ВидДоступа);
		СвойстваВидаДоступа = УправлениеДоступомСлужебный.СвойстваВидаДоступа(Строка.ВидДоступа);
		
		Если СвойстваВидаДоступа = Неопределено Тогда
			ВидыДоступаПрофиля.Удалить(Строка);
		
		ИначеЕсли Объект.ВидыДоступа.НайтиСтроки(Отбор).Количество() = 0 Тогда
			ИзменилсяСоставВидовДоступа = Истина;
			
			Если ПриЧтенииНаСервере Тогда
				Прервать;
			Иначе
				НоваяСтрока = Объект.ВидыДоступа.Добавить();
				НоваяСтрока.ВидДоступа   = Строка.ВидДоступа;
				НоваяСтрока.ВсеРазрешены = Строка.ВсеРазрешены;
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	// Удаление лишних видов доступа.
	Индекс = Объект.ВидыДоступа.Количество() - 1;
	Пока Индекс >= 0 Цикл
		
		ВидДоступа = Объект.ВидыДоступа[Индекс].ВидДоступа;
		Отбор = Новый Структура("ВидДоступа", ВидДоступа);
		
		СвойстваВидаДоступаВПрофиле = ВидыДоступаПрофиля.НайтиСтроки(Отбор);
		СвойстваВидаДоступа = УправлениеДоступомСлужебный.СвойстваВидаДоступа(ВидДоступа);
		
		Если СвойстваВидаДоступа = Неопределено
		 ИЛИ ВидыДоступаПрофиля.НайтиСтроки(Отбор).Количество() = 0 Тогда
			
			ИзменилсяСоставВидовДоступа = Истина;
			Если ПриЧтенииНаСервере Тогда
				Прервать;
			Иначе
				Объект.ВидыДоступа.Удалить(Индекс);
				Для каждого ЭлементКоллекции Из Объект.ЗначенияДоступа.НайтиСтроки(Отбор) Цикл
					Объект.ЗначенияДоступа.Удалить(ЭлементКоллекции);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Модифицированность = Модифицированность
		ИЛИ ИзменилсяСоставВидовДоступа И НЕ ПриЧтенииНаСервере;
	
	// Установка флажка для запроса у пользователя решения обновить состав видов доступа.
	Если ПриЧтенииНаСервере
	     И НЕ Объект.Ссылка.Пустая() // Это новый.
	     И ИзменилсяСоставВидовДоступа
	     И Пользователи.ЭтоПолноправныйПользователь() // Только администратор может обновлять виды доступа.
	     И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Профиль") = Объект.Профиль Тогда
	     
		ИзменилсяСоставВидовДоступаПриЧтении = Истина;
	КонецЕсли;
	
	Элементы.Доступ.Доступность = Объект.ВидыДоступа.Количество() > 0;
	
	// Установка порядка видов доступа по профилю.
	Если НЕ ИзменилсяСоставВидовДоступаПриЧтении Тогда
		Для каждого СтрокаТЧ Из ВидыДоступаПрофиля Цикл
			Отбор = Новый Структура("ВидДоступа", СтрокаТЧ.ВидДоступа);
			Индекс = Объект.ВидыДоступа.Индекс(Объект.ВидыДоступа.НайтиСтроки(Отбор)[0]);
			Объект.ВидыДоступа.Сдвинуть(Индекс, ВидыДоступаПрофиля.Индекс(СтрокаТЧ) - Индекс);
		КонецЦикла;
	КонецЕсли;
	
	Если ИзменилсяСоставВидовДоступа Тогда
		ТекущийВидДоступа = Неопределено;
	КонецЕсли;
	
	УправлениеДоступомСлужебныйКлиентСервер.ЗаполнитьСвойстваВидовДоступаВФорме(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПоказыватьНеИспользуемыеВидыДоступаНаСервере()
	
	УправлениеДоступомСлужебный.ОбновитьОтображениеНеиспользуемыхВидовДоступа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборТипаПользователиИлиВнешниеПользователи(ОбработкаПродолжения)
	
	ВыборИПодборВнешнихПользователей = Ложь;
	
	Если Объект.Ссылка = ПредопределенноеЗначение("Справочник.ГруппыДоступа.Администраторы") Тогда
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, ВыборИПодборВнешнихПользователей);
		Возврат;
	КонецЕсли;
	
	Если Назначение.Количество() <> 0 Тогда
		
		Если Назначение.НайтиПоЗначению(ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка")) <> Неопределено Тогда
			
			Если Назначение.Количество() <> 1 Тогда
				
				Если ИспользоватьВнешнихПользователей Тогда
					
					СписокТиповПользователей.ПоказатьВыборЭлемента(
						Новый ОписаниеОповещения(
						"ПоказатьВыборТипаПользователиИлиВнешниеПользователиЗавершение",
						ЭтотОбъект,
						ОбработкаПродолжения),
						НСтр("ru = 'Выбор типа данных'"),
						СписокТиповПользователей[0]);
				Иначе
					ВыполнитьОбработкуОповещения(ОбработкаПродолжения, ВыборИПодборВнешнихПользователей);
				КонецЕсли;
				
				Возврат;
				
			КонецЕсли;
			
		Иначе // только для внешних пользователей
			
			ВыборИПодборВнешнихПользователей = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработкаПродолжения, ВыборИПодборВнешнихПользователей);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборТипаПользователиИлиВнешниеПользователиЗавершение(ВыбранныйЭлемент, ОбработкаПродолжения) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ВыборИПодборВнешнихПользователей =
			ВыбранныйЭлемент.Значение = Тип("СправочникСсылка.ВнешниеПользователи");
		
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, ВыборИПодборВнешнихПользователей);
	Иначе
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодобратьПользователей(Подобрать)
	
	ТекущийПользователь = ?(Элементы.Пользователи.ТекущиеДанные = Неопределено,
		Неопределено, Элементы.Пользователи.ТекущиеДанные.Пользователь);
	
	Если НЕ Подобрать
	   И ЗначениеЗаполнено(ТекущийПользователь)
	   И (    ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи")
	      ИЛИ ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ГруппыПользователей") ) Тогда
	
		ВыборИПодборВнешнихПользователей = Ложь;
	
	ИначеЕсли НЕ Подобрать
	        И ИспользоватьВнешнихПользователей
	        И ЗначениеЗаполнено(ТекущийПользователь)
	        И (    ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ВнешниеПользователи")
	           ИЛИ ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") ) Тогда
	
		ВыборИПодборВнешнихПользователей = Истина;
	Иначе
		ПоказатьВыборТипаПользователиИлиВнешниеПользователи(
			Новый ОписаниеОповещения("ВыбратьПодобратьПользователейЗавершение", ЭтотОбъект, Подобрать));
		Возврат;
	КонецЕсли;
	
	ВыбратьПодобратьПользователейЗавершение(ВыборИПодборВнешнихПользователей, Подобрать);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодобратьПользователейЗавершение(ВыборИПодборВнешнихПользователей, Подобрать) Экспорт
	
	Если ВыборИПодборВнешнихПользователей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ?(
		Элементы.Пользователи.ТекущиеДанные = Неопределено,
		Неопределено,
		Элементы.Пользователи.ТекущиеДанные.Пользователь));
	
	Если Подобрать Тогда
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
		ПараметрыФормы.Вставить("РасширенныйПодбор", Истина);
		ПараметрыФормы.Вставить("ПараметрыРасширеннойФормыПодбора", ПараметрыРасширеннойФормыПодбора());
	ИначеЕсли Объект.Ссылка <> ПредопределенноеЗначение("Справочник.ГруппыДоступа.Администраторы") Тогда
		Если ВыборИПодборВнешнихПользователей Тогда
			ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Истина);
		Иначе
			ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ВыборИПодборВнешнихПользователей Тогда
		
		ПараметрыФормы.Вставить("Назначение", Назначение.ВыгрузитьЗначения());
		
		Если Не ИспользоватьВнешнихПользователей Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Ведение внешних пользователей отключено в настройках программы.'"));
		ИначеЕсли СправочникВнешниеПользователиДоступен Тогда
			ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыФормы, Элементы.Пользователи);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Недостаточно прав для выбора внешних пользователей.'"));
		КонецЕсли;
	Иначе
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элементы.Пользователи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыРасширеннойФормыПодбора()
	
	ЭлементыКоллекции = ПользователиГруппы.ПолучитьЭлементы();
	
	ВыбранныеПользователи = Новый ТаблицаЗначений;
	ВыбранныеПользователи.Колонки.Добавить("Пользователь");
	ВыбранныеПользователи.Колонки.Добавить("НомерКартинки");
	
	Для каждого Элемент Из ЭлементыКоллекции Цикл
		
		СтрокаВыбранныеПользователи = ВыбранныеПользователи.Добавить();
		СтрокаВыбранныеПользователи.Пользователь = Элемент.Пользователь;
		СтрокаВыбранныеПользователи.НомерКартинки = Элемент.НомерКартинки;
		
	КонецЦикла;
	
	ЗаголовокФормыПодбора = НСтр("ru = 'Подбор участников группы доступа'");
	ПараметрыРасширеннойФормыПодбора = Новый Структура;
	ПараметрыРасширеннойФормыПодбора.Вставить("ЗаголовокФормыПодбора", ЗаголовокФормыПодбора);
	ПараметрыРасширеннойФормыПодбора.Вставить("ВыбранныеПользователи", ВыбранныеПользователи);
	Если Объект.Ссылка = ПредопределенноеЗначение("Справочник.ГруппыДоступа.Администраторы") Тогда
		ПараметрыРасширеннойФормыПодбора.Вставить("ПодборГруппНевозможен");
	КонецЕсли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ПараметрыРасширеннойФормыПодбора);
	Возврат АдресХранилища;
	
КонецФункции

&НаСервере
Процедура ОбновитьПользователейГрупп(ИдентификаторСтроки = Неопределено,
                                     ИзмененныеСтроки = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	ИзмененныеСтроки = Новый Массив;
	
	Если ИдентификаторСтроки = Неопределено Тогда
		ЭлементыКоллекции = ПользователиГруппы.ПолучитьЭлементы();
		
	ИначеЕсли ТипЗнч(ИдентификаторСтроки) = Тип("Массив") Тогда
		ЭлементыКоллекции = Новый Массив;
		Для каждого Идентификатор Из ИдентификаторСтроки Цикл
			ЭлементыКоллекции.Добавить(ПользователиГруппы.НайтиПоИдентификатору(Идентификатор));
		КонецЦикла;
	Иначе
		ЭлементыКоллекции = Новый Массив;
		ЭлементыКоллекции.Добавить(ПользователиГруппы.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЕсли;
	
	УчастникиГруппыПользователей = Новый Массив;
	Для каждого Элемент Из ЭлементыКоллекции Цикл
		
		Если ТипЗнч(Элемент.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей")
		 ИЛИ ТипЗнч(Элемент.Пользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		
			УчастникиГруппыПользователей.Добавить(Элемент.Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчастникиГруппыПользователей", УчастникиГруппыПользователей);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставыГруппПользователей.ГруппаПользователей,
	|	СоставыГруппПользователей.Пользователь
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	СоставыГруппПользователей.ГруппаПользователей В(&УчастникиГруппыПользователей)
	|	И СоставыГруппПользователей.Пользователь.Недействителен <> ИСТИНА";
	
	ПользователиГрупп = Запрос.Выполнить().Выгрузить();
	ПользователиГрупп.Индексы.Добавить("ГруппаПользователей");
	
	Для каждого Элемент Из ЭлементыКоллекции Цикл
		Элемент.Ссылка = Элемент.Пользователь;
		
		Если ТипЗнч(Элемент.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей")
		 ИЛИ ТипЗнч(Элемент.Пользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		
			// Заполнение пользователей группы.
			СтарыеПользователи = Элемент.ПолучитьЭлементы();
			Отбор = Новый Структура("ГруппаПользователей", Элемент.Пользователь);
			НовыеПользователи = ПользователиГрупп.НайтиСтроки(Отбор);
			
			ЕстьИзменения = Ложь;
			
			Если СтарыеПользователи.Количество() <> НовыеПользователи.Количество() Тогда
				СтарыеПользователи.Очистить();
				Для каждого Строка Из НовыеПользователи Цикл
					НовыйЭлемент = СтарыеПользователи.Добавить();
					НовыйЭлемент.Ссылка       = Строка.Пользователь;
					НовыйЭлемент.Пользователь = Строка.Пользователь;
				КонецЦикла;
				ЕстьИзменения = Истина;
			Иначе
				Индекс = 0;
				Для каждого Строка Из СтарыеПользователи Цикл
					
					Если Строка.Ссылка       <> НовыеПользователи[Индекс].Пользователь
					 ИЛИ Строка.Пользователь <> НовыеПользователи[Индекс].Пользователь Тогда
						
						Строка.Ссылка       = НовыеПользователи[Индекс].Пользователь;
						Строка.Пользователь = НовыеПользователи[Индекс].Пользователь;
						ЕстьИзменения = Истина;
					КонецЕсли;
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
			
			Если ЕстьИзменения Тогда
				ИзмененныеСтроки.Добавить(Элемент.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Пользователи.ЗаполнитьНомераКартинокПользователей(
		ПользователиГруппы, "Ссылка", "НомерКартинки", ИдентификаторСтроки, Истина);
	
	// Установка отображения дерева.
	ЕстьДерево = Ложь;
	Для каждого Элемент Из ПользователиГруппы.ПолучитьЭлементы() Цикл
		Если Элемент.ПолучитьЭлементы().Количество() > 0 Тогда
			ЕстьДерево = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Элементы.Пользователи.Отображение = ?(ЕстьДерево, ОтображениеТаблицы.Дерево, ОтображениеТаблицы.Список);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьОбъектБезУчастниковГруппы(ТекущийОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГруппыДоступа.ПометкаУдаления,
	|	ГруппыДоступа.Предопределенный,
	|	ГруппыДоступа.Родитель,
	|	ГруппыДоступа.ЭтоГруппа,
	|	ГруппыДоступа.Наименование,
	|	ГруппыДоступа.Профиль,
	|	ГруппыДоступа.Ответственный,
	|	ГруппыДоступа.Пользователь,
	|	ГруппыДоступа.Описание
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	ГруппыДоступа.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыДоступаВидыДоступа.ВидДоступа,
	|	ГруппыДоступаВидыДоступа.ВсеРазрешены
	|ИЗ
	|	Справочник.ГруппыДоступа.ВидыДоступа КАК ГруппыДоступаВидыДоступа
	|ГДЕ
	|	ГруппыДоступаВидыДоступа.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыДоступаЗначенияДоступа.ВидДоступа,
	|	ГруппыДоступаЗначенияДоступа.ЗначениеДоступа
	|ИЗ
	|	Справочник.ГруппыДоступа.ЗначенияДоступа КАК ГруппыДоступаЗначенияДоступа
	|ГДЕ
	|	ГруппыДоступаЗначенияДоступа.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	// Восстановление реквизитов.
	ЗаполнитьЗначенияСвойств(ТекущийОбъект, РезультатыЗапросов[0].Выгрузить()[0]);
	
	// Восстановление табличной части ВидыДоступа.
	ТекущийОбъект.ВидыДоступа.Загрузить(РезультатыЗапросов[1].Выгрузить());
	
	// Восстановление табличной части ЗначенияДоступа.
	ТекущийОбъект.ЗначенияДоступа.Загрузить(РезультатыЗапросов[2].Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция УточнитьСообщение(Строка, Значение)
	
	Возврат СтрЗаменить(Строка, "%2", Значение);
	
КонецФункции

#КонецОбласти
