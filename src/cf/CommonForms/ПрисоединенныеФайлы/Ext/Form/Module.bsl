
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ВладелецФайла = Параметры.ВладелецФайла;
	ТекущаяСсылка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ТекущаяСтрока");
	СписокОткрытИзКарточкиФайла = ЗначениеЗаполнено(ТекущаяСсылка);
	Элементы.ВладелецФайла.Видимость = СписокОткрытИзКарточкиФайла;
	Если СписокОткрытИзКарточкиФайла И ВладелецФайла = Неопределено Тогда
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСсылка, "ВладелецФайла");
		Параметры.ВладелецФайла = ВладелецФайла;
	КонецЕсли;
	Если Параметры.ВладелецФайла = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Список присоединенных файлов можно посмотреть
		                             |только в форме объекта-владельца.'");
	КонецЕсли;
	
	Если Параметры.Свойство("ПростаяФорма") Тогда
		ПростаяФорма = Параметры.ПростаяФорма;
		Элементы.ФормаРедактировать.ТолькоВоВсехДействиях = Истина;
		Элементы.ФормаОткрыть.ТолькоВоВсехДействиях = Истина;
		Элементы.ФормаЗакончитьРедактирование.ТолькоВоВсехДействиях = Истина;
		Элементы.СписокВажныеРеквизиты.Видимость = Ложь;
		Предпросмотр = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗаголовокФормы") Тогда
		Заголовок = Параметры.ЗаголовокФормы;
	ИначеЕсли СписокОткрытИзКарточкиФайла Тогда
		Заголовок = Заголовок + " (" + Строка(ТипЗнч(ВладелецФайла)) + " " + Строка(ВладелецФайла) + ")";
	КонецЕсли;
	
	Если Параметры.Свойство("ПараметрыОтправки") Тогда
		ПараметрыОтправки = Параметры.ПараметрыОтправки;
	Иначе
		ПараметрыОтправки = ФайловыеФункцииСлужебный.ПодготовитьСтруктуруПараметровОтправки();
	КонецЕсли;
	
	Если Параметры.РежимВыбора Тогда
		СтандартныеПодсистемыСервер.УстановитьКлючНазначенияФормы(ЭтотОбъект, "ВыборПодбор");
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		Заголовок = НСтр("ru = 'Выбор присоединенного файла'");
		
	Иначе
		Элементы.Список.РежимВыбора = Ложь;
	КонецЕсли;
	
	ИмяСправочникаХранилищаФайлов = Неопределено;
	НастроитьДинамическийСписок(ИмяСправочникаХранилищаФайлов);
	
	ТипСправочникаСФайлами = Тип("СправочникСсылка." + ИмяСправочникаХранилищаФайлов);
	
	МетаданныеСправочникаСФайлами = Метаданные.НайтиПоТипу(ТипСправочникаСФайлами);
	
	ЕстьПравоДобавления = Истина;
	
	Если НЕ ПравоДоступа("ИнтерактивноеДобавление", МетаданныеСправочникаСФайлами) Тогда
		СкрытьКнопкиДобавления();
		ЕстьПравоДобавления = Ложь;
	КонецЕсли;
	
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		ТолькоПросмотр = Не ПравоДоступа("Редактирование", МетаданныеСправочникаСФайлами);
	Иначе	
		ТолькоПросмотр = Параметры.ТолькоПросмотр Или НЕ ПравоДоступа("Редактирование", МетаданныеСправочникаСФайлами)
			Или НЕ ПравоДоступа("Редактирование", Параметры.ВладелецФайла.Метаданные());
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		СкрытьКнопкиИзменения();
		ЕстьПравоДобавления = Ложь;
	КонецЕсли;
	
	ИменаВсехКомандФормы = ПолучитьИменаКомандФормы();
	ИменаЭлементов = Новый Массив;
	
	Для Каждого ЭлементФормы Из Элементы Цикл
		
		Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИменаВсехКомандФормы.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено
			Или ИменаВсехКомандФормы.Найти(ЭлементФормы.Имя) <> Неопределено Тогда
				ИменаЭлементов.Добавить(ЭлементФормы.Имя);
		КонецЕсли;
			
	КонецЦикла;
	
	ИменаЭлементовКнопокФормы = Новый ФиксированныйМассив(ИменаЭлементов);
	
	ПриИзмененияИспользованияПодписанияИлиШифрованияНаСервере();
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ФормаИзменить.Видимость = Ложь;
		Элементы.ФормаИзменить82.Видимость = Истина;
		Элементы.ФормаСкопировать.ТолькоВоВсехДействиях = Ложь;
		Элементы.УстановитьПометкуУдаления.ТолькоВоВсехДействиях = Ложь;
	КонецЕсли;
	
	ИспользоватьПредпросмотр = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ТипСправочникаСФайлами, 
		"Предпросмотр");
	
	Если ИспользоватьПредпросмотр <> Неопределено Тогда
		Предпросмотр = ИспользоватьПредпросмотр;
	КонецЕсли;
	
	Элементы.АдресДанныхФайла.Видимость = Предпросмотр;
	Элементы.Предпросмотр.Пометка = Предпросмотр;
	
	РасширенияПоддерживающиеПредпросмотр = ФайловыеФункцииСлужебный.СписокРасширенийДляПредпросмотра();
	
	ОбновитьПояснениеОблачногоСервиса();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		
		Если Не МодульУправлениеДоступом.ЕстьРоль("НастройкаСинхронизацииФайлов") Тогда
			Элементы.НастроитьСинхронизацию.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗапрещенныеРасширения = ФайловыеФункцииСлужебный.СписокЗапрещенныхРасширений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЕстьПравоДобавления Тогда
		ДоступнаКомандаСканировать = ФайловыеФункцииСлужебныйКлиент.ДоступнаКомандаСканировать();
		Элементы.ПодменюДобавить.Видимость = ДоступнаКомандаСканировать;
		Элементы.Добавить.Видимость = Не ДоступнаКомандаСканировать;
		Элементы.СписокКонтекстноеМенюГруппаКомандДобавить.Видимость = ДоступнаКомандаСканировать;
		Элементы.СписокКонтекстноеМенюДобавить.Видимость = Не ДоступнаКомандаСканировать;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Элементы.Печать.Видимость = Ложь;
	#КонецЕсли
	
	УстановитьДоступностьКнопок();
	
	ДатаУниверсальная = ОбщегоНазначенияКлиент.ДатаУниверсальная();
	
	Список.Параметры.УстановитьЗначениеПараметра("СекундДоМестногоВремени",
		МестноеВремя(ДатаУниверсальная) - ДатаУниверсальная);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВРег(ИмяСобытия) = ВРег("Запись_НаборКонстант")
	   И (    ВРег(Источник) = ВРег("ИспользоватьЭлектронныеПодписи")
		  Или ВРег(Источник) = ВРег("ИспользоватьШифрование")) Тогда
			
		ПодключитьОбработчикОжидания("ПриИзмененияИспользованияПодписанияИлиШифрования", 0.3, Истина);
	КонецЕсли;
	
	Если ИмяСобытия <> "Запись_ПрисоединенныйФайл" Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
	
	Если ТипЗнч(СсылкаНаФайл) <> ТипСправочникаСФайлами Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметр.Свойство("ЭтоНовый") И Параметр.ЭтоНовый Тогда
		
		Элементы.Список.ТекущаяСтрока = СсылкаНаФайл;
		УстановитьДоступностьКнопок();
	Иначе
		Если НЕ ПроверитьДействиеРазрешено() Тогда
			Возврат;
		КонецЕсли;
		
		Если СсылкаНаФайл = Элементы.Список.ТекущиеДанные.Ссылка Тогда
			УстановитьДоступностьКнопок();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.Список.РежимВыбора Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьДоступностьКнопок", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		
		Если НЕ ПроверитьДействиеРазрешено() Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("ЗначениеКопирования", Элемент.ТекущиеДанные.Ссылка);
		
		ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыФормы);
		
	Иначе
		ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Параметры.ВладелецФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",           ТекущиеДанные.Ссылка);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыФормы, , Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	МассивИменФайлов = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл")
	   И ПараметрыПеретаскивания.Значение.ЭтоФайл() Тогда
		
		МассивИменФайлов.Добавить(ПараметрыПеретаскивания.Значение.ПолноеИмя);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1
		   И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
			Для каждого Значение Из ПараметрыПеретаскивания.Значение Цикл
				
				Если ТипЗнч(Значение) = Тип("Файл") И Значение.ЭтоФайл() Тогда
					МассивИменФайлов.Добавить(Значение.ПолноеИмя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
	КонецЕсли;
	
	Если МассивИменФайлов.Количество() > 0 Тогда
		
		ПрисоединенныеФайлыСлужебныйКлиент.ДобавитьФайлыПеретаскиванием(
			Параметры.ВладелецФайла, УникальныйИдентификатор, МассивИменФайлов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

///////////////////////////////////////////////////////////////////////////////////
// Обработчики команд файлов

&НаКлиенте
Процедура Добавить(Команда)
	
	Элементы.Список.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлСоСканера(Команда)
	
	ЗначениеПараметраКД = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВладелецФайлов"));
	Если ЗначениеПараметраКД = Неопределено Тогда
		ВладелецФайла = Неопределено;
	Иначе
		ВладелецФайла = ЗначениеПараметраКД.Значение;
	КонецЕсли;
	
	ПараметрыДобавления = Новый Структура;
	ПараметрыДобавления.Вставить("ОбработчикРезультата", Неопределено);
	ПараметрыДобавления.Вставить("ВладелецФайла", ВладелецФайла);
	ПараметрыДобавления.Вставить("ФормаВладелец", ЭтотОбъект);
	ПараметрыДобавления.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", Истина);
	ПараметрыДобавления.Вставить("ЭтоФайл", Ложь);
	ФайловыеФункцииСлужебныйКлиент.ДобавитьСоСканера(ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(Команда)
	
	ОткрытьФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если ТекущиеДанные.Зашифрован Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыСлужебныйКлиент.ОткрытьКаталогСФайлом(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Элементы.Список.Обновить();
	
	ПодключитьОбработчикОжидания("УстановитьДоступностьКнопок", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные.Зашифрован Или ТекущиеДанные.ПодписанЭП Или ТекущиеДанные.ФайлРедактируется Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ДанныеФайла(ТекущиеДанные.Ссылка, , Ложь);
	Если ДанныеФайла.Зашифрован Или ДанныеФайла.ПодписанЭП Или ДанныеФайла.ФайлРедактируется Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыСлужебныйКлиент.ОбновитьПрисоединенныйФайл(ТекущиеДанные.Ссылка, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.Зашифрован
	 ИЛИ (ТекущиеДанные.ФайлРедактируется И ТекущиеДанные.ФайлРедактируетТекущийПользователь) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если ДанныеФайла.Зашифрован
	 ИЛИ (ДанныеФайла.ФайлРедактируется И ДанныеФайла.ФайлРедактируетТекущийПользователь) Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыКлиент.СохранитьФайлКак(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	
	Элементы.Список.СкопироватьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвойстваФайла(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПрисоединенныйФайл", Элементы.Список.ТекущиеДанные.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ФайловыеФункцииСлужебныйКлиент.ОтправитьФайлыПоПочте(
		Элементы.Список.ВыделенныеСтроки, УникальныйИдентификатор, ПараметрыОтправки);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
		И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'"));
			Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		ПрисоединенныеФайлыКлиент.НапечататьФайлы(ВыделенныеСтроки, ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Предпросмотр(Команда)
	
	Предпросмотр = Не Предпросмотр;
	Элементы.Предпросмотр.Пометка = Предпросмотр;
	УстановитьВидимостьПредпросмотра(Предпросмотр);
	СохранитьВариантПредпросмотра(ТипСправочникаСФайлами, Предпросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСинхронизацию(Команда)
	
	НастройкаСинхронизации = ПараметрыНастройкиСинхронизации(ВладелецФайла);
	
	Если ЗначениеЗаполнено(НастройкаСинхронизации.УчетнаяЗапись) Тогда
		ТипЗначения = Тип("РегистрСведенийКлючЗаписи.НастройкиСинхронизацииФайлов");
		ПараметрыЗаписи = Новый Массив(1);
		ПараметрыЗаписи[0] = НастройкаСинхронизации;
		
		КлючЗаписи = Новый(ТипЗначения, ПараметрыЗаписи);
	
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("Ключ", КлючЗаписи);
	Иначе
		ПараметрыЗаписи = НастройкаСинхронизации;
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.НастройкиСинхронизацииФайлов.Форма.ПростаяФормаЗаписиНастройки", ПараметрыЗаписи, ЭтотОбъект);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Обработчики команд для поддержки ЭП и шифрования.

&НаКлиенте
Процедура Подписать(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.ФайлРедактируется
	 ИЛИ ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если ДанныеФайла.ФайлРедактируется
	 ИЛИ ДанныеФайла.Зашифрован Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	ПрисоединенныйФайл = ТекущиеДанные.Ссылка;
	ДанныеФайла = ДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор);
	
	ПрисоединенныеФайлыСлужебныйКлиент.ПодписатьФайл(ПрисоединенныйФайл, ДанныеФайла, УникальныйИдентификатор,
		Новый ОписаниеОповещения("ДобавлениеПодписейЗавершить", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭП(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если ДанныеФайла.Зашифрован Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыКлиент.СохранитьВместеСЭП(ТекущиеДанные.Ссылка, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.ФайлРедактируется
	 ИЛИ ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныйФайл = ТекущиеДанные.Ссылка;
	ДанныеФайла = ДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор);
	
	ПрисоединенныеФайлыСлужебныйКлиент.ДобавитьПодписьИзФайла(ПрисоединенныйФайл, ДанныеФайла, УникальныйИдентификатор,
		Новый ОписаниеОповещения("ДобавлениеПодписейЗавершить", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.ФайлРедактируется
	 ИЛИ ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если ДанныеФайла.ФайлРедактируется
	 ИЛИ ДанныеФайла.Зашифрован Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыСлужебныйКлиент.Зашифровать(
		ТекущиеДанные.Ссылка, ДанныеФайла, УникальныйИдентификатор);
	
	УстановитьДоступностьКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если НЕ ДанныеФайла.Зашифрован Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыСлужебныйКлиент.Расшифровать(
		ТекущиеДанные.Ссылка, ДанныеФайла, УникальныйИдентификатор);
	
	УстановитьДоступностьКнопок();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Обработчики команд для поддержки совместной работы с файлами.

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если (ТекущиеДанные.ФайлРедактируется И НЕ ТекущиеДанные.ФайлРедактируетТекущийПользователь)
	   ИЛИ ТекущиеДанные.Зашифрован
	   ИЛИ ТекущиеДанные.ПодписанЭП Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрещенныеРасширения.НайтиПоЗначению(ТекущиеДанные.Расширение) <> Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
		Оповещение = Новый ОписаниеОповещения("РедактироватьФайлПослеПодтверждения", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("Ключ", "ПередОткрытиемФайла");
		ПараметрыФормы.Вставить("ИмяФайла",
			ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ТекущиеДанные.Наименование, ТекущиеДанные.Расширение));
		ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ТекущиеДанные.Наименование, ТекущиеДанные.Расширение);
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если (ДанныеФайла.ФайлРедактируется
		И НЕ ДанныеФайла.ФайлРедактируетТекущийПользователь)
		ИЛИ ДанныеФайла.Зашифрован
		ИЛИ ДанныеФайла.ПодписанЭП Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ФайлРедактируется Тогда
		
		ЗанятьФайлДляРедактированияСервер(ТекущиеДанные.Ссылка);
		
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		УстановитьДоступностьКнопок();
	КонецЕсли;
	
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные.ФайлРедактируется
	 ИЛИ НЕ ТекущиеДанные.ФайлРедактируетТекущийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ДанныеФайла(ТекущиеДанные.Ссылка, , Ложь);
	
	Если НЕ ДанныеФайла.ФайлРедактируется
	 ИЛИ НЕ ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьРедактированиеВыполненоПомещение", ЭтотОбъект, ТекущиеДанные);
	ПрисоединенныеФайлыСлужебныйКлиент.ПоместитьРедактируемыйФайлНаДискеВХранилище(ОписаниеОповещения, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеВыполненоПомещение(ИнформацияОФайле, ТекущиеДанные) Экспорт
	
	Если ИнформацияОФайле <> Неопределено
		И ИнформацияОФайле.ФайлПомещенВХранилище Тогда
		ПоместитьФайлВХранилищеИОсвободить(ТекущиеДанные.Ссылка, ИнформацияОФайле);
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		УстановитьДоступностьКнопок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные.ФайлРедактируется
	 ИЛИ НЕ ТекущиеДанные.ФайлРедактируетТекущийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	ОсвободитьФайл(ТекущиеДанные.Ссылка);
	ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
	УстановитьДоступностьКнопок();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Оформление файла, занятого для редактирования другим пользователем.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ФайлРедактируетДругойПользователь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// Оформление файла, занятого для редактирования текущим пользователем.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ФайлРедактируетТекущийПользователь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ФайлЗанятыйТекущимПользователем);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл()
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрещенныеРасширения.НайтиПоЗначению(ТекущиеДанные.Расширение) <> Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
		Оповещение = Новый ОписаниеОповещения("ОткрытьФайлПослеПодтверждения", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("Ключ", "ПередОткрытиемФайла");
		ПараметрыФормы.Вставить("ИмяФайла",
			ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ТекущиеДанные.Наименование, ТекущиеДанные.Расширение));
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
		Возврат;
	КонецЕсли;
	
	ФайлРедактируется = ТекущиеДанные.ФайлРедактируется И ТекущиеДанные.ФайлРедактируетТекущийПользователь;
	
	ДанныеФайла = ДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если ДанныеФайла.Зашифрован Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируется);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлПослеПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат = "Продолжить" Тогда
		
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
		ФайлРедактируется = ТекущиеДанные.ФайлРедактируется И ТекущиеДанные.ФайлРедактируетТекущийПользователь;
		
		ДанныеФайла = ДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
		
		Если ДанныеФайла.Зашифрован Тогда
			// Файл может быть изменен в другом сеансе.
			ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
			Возврат;
		КонецЕсли;
		
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируется);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФайлПослеПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат = "Продолжить" Тогда
		
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		
		ДанныеФайла = ДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
		
		Если (ДанныеФайла.ФайлРедактируется
			И НЕ ДанныеФайла.ФайлРедактируетТекущийПользователь)
			ИЛИ ДанныеФайла.Зашифрован
			ИЛИ ДанныеФайла.ПодписанЭП Тогда
			// Файл может быть изменен в другом сеансе.
			ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
			Возврат;
		КонецЕсли;
		
		Если НЕ ТекущиеДанные.ФайлРедактируется Тогда
			
			ЗанятьФайлДляРедактированияСервер(ТекущиеДанные.Ссылка);
			
			ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
			УстановитьДоступностьКнопок();
		КонецЕсли;
		
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьДействиеРазрешено(Знач ТекущееДействие = "")
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ТипЗнч(Элементы.Список.ТекущаяСтрока) = ТипСправочникаСФайлами;
	
КонецФункции

&НаСервере
Процедура СкрытьКнопкиДобавления()
	
	Элементы.Добавить.Видимость = Ложь;
	Элементы.ДобавитьИзФайлаНаДиске.Видимость = Ложь;
	Элементы.ДобавитьФайлСоСканера.Видимость = Ложь;
	Элементы.СписокКонтекстноеМенюДобавить.Видимость = Ложь;
	Элементы.СписокКонтекстноеМенюГруппаКомандДобавить.Видимость = Ложь;
	
	Элементы.ФормаСкопировать.Видимость = Ложь;
	Элементы.СписокКонтекстноеМенюСкопировать.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьКнопкиИзменения()
	
	ИменаКоманд = ПолучитьИменаКомандИзмененияОбъектов();
	
	Для каждого ЭлементФормы Из Элементы Цикл
		
		Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИменаКоманд.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено Тогда
			ЭлементФормы.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопок()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ИменаКоманд = Новый Массив;
		ИменаКоманд.Добавить("Добавить");
		ИменаКоманд.Добавить("ДобавитьФайлСоСканера");
	ИначеЕсли ТипЗнч(Элементы.Список.ТекущаяСтрока) <> ТипСправочникаСФайлами Тогда
		ИменаКоманд = Новый Массив;
	Иначе
		ИменаКоманд = ПолучитьДоступныеКоманды(
			ТекущиеДанные.ФайлРедактируется,
			ТекущиеДанные.ФайлРедактируетТекущийПользователь,
			ТекущиеДанные.ПодписанЭП,
			ТекущиеДанные.Зашифрован,
			ФайлыРедактируютсяВОблачномСервисе);
	КонецЕсли;
	
	Для каждого ИмяЭлементаФормы Из ИменаЭлементовКнопокФормы Цикл
		
		ЭлементФормы = Элементы.Найти(ИмяЭлементаФормы);
		
		Если ИменаКоманд.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено
			Или ИменаКоманд.Найти(ЭлементФормы.Имя) <> Неопределено Тогда
			
			Если НЕ ЭлементФормы.Доступность Тогда
				ЭлементФормы.Доступность = Истина;
			КонецЕсли;
			
		ИначеЕсли ЭлементФормы.Доступность Тогда
			ЭлементФормы.Доступность = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьПредпросмотр();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеФайла(Знач ПрисоединенныйФайл, Знач ИдентификаторФормы = Неопределено, 
	Знач ПолучатьСсылкуНаДвоичныеДанные = Истина)
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗанятьФайлДляРедактированияСервер(Знач ПрисоединенныйФайл)
	
	ПрисоединенныеФайлыСлужебный.ЗанятьФайлДляРедактированияСервер(ПрисоединенныйФайл);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОсвободитьФайл(Знач ПрисоединенныйФайл)
	
	ПрисоединенныеФайлыСлужебный.ОсвободитьФайл(ПрисоединенныйФайл);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоместитьФайлВХранилищеИОсвободить(Знач ПрисоединенныйФайл,
                                             Знач ИнформацияОФайле)
	
	ПрисоединенныеФайлыСлужебный.ПоместитьФайлВХранилищеИОсвободить(
		ПрисоединенныйФайл, ИнформацияОФайле);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДинамическийСписок(ИмяСправочникаХранилищаФайлов)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА Файлы.ПометкаУдаления = ИСТИНА
	|			ТОГДА Файлы.ИндексКартинки + 1
	|		ИНАЧЕ Файлы.ИндексКартинки
	|	КОНЕЦ КАК ИндексКартинки,
	|	Файлы.Наименование КАК Наименование,
	|	ВЫРАЗИТЬ(Файлы.Описание КАК СТРОКА(500)) КАК Описание,
	|	Файлы.Автор,
	|	Файлы.ДатаСоздания,
	|	Файлы.Изменил КАК Отредактировал,
	|	ДОБАВИТЬКДАТЕ(Файлы.ДатаМодификацииУниверсальная, СЕКУНДА, &СекундДоМестногоВремени) КАК ДатаИзменения,
	|	ВЫРАЗИТЬ(Файлы.Размер / 1024 КАК ЧИСЛО(10, 0)) КАК Размер,
	|	Файлы.ПодписанЭП,
	|	Файлы.Зашифрован,
	|	ВЫБОР
	|		КОГДА Файлы.ПодписанЭП
	|				И Файлы.Зашифрован
	|			ТОГДА 2
	|		КОГДА Файлы.Зашифрован
	|			ТОГДА 1
	|		КОГДА Файлы.ПодписанЭП
	|			ТОГДА 0
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК НомерКартинкиПодписанЗашифрован,
	|	ВЫБОР
	|		КОГДА НЕ Файлы.Редактирует В (&ПустыеПользователи)
	|				ИЛИ СтатусыСинхронизацииФайловСОблачнымСервисом.УчетнаяЗапись <> НЕОПРЕДЕЛЕНО
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФайлРедактируется,
	|	ВЫБОР
	|		КОГДА Файлы.Редактирует = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФайлРедактируетТекущийПользователь,
	|	ВЫБОР
	|		КОГДА (НЕ Файлы.Редактирует В (&ПустыеПользователи)
	|				ИЛИ СтатусыСинхронизацииФайловСОблачнымСервисом.УчетнаяЗапись <> НЕОПРЕДЕЛЕНО)
	|				И Файлы.Редактирует <> &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФайлРедактируетДругойПользователь,
	|	Файлы.Расширение КАК Расширение,
	|	ВЫБОР
	|		КОГДА СтатусыСинхронизацииФайловСОблачнымСервисом.УчетнаяЗапись <> НЕОПРЕДЕЛЕНО
	|				И Файлы.Редактирует = НЕОПРЕДЕЛЕНО
	|			ТОГДА СтатусыСинхронизацииФайловСОблачнымСервисом.УчетнаяЗапись
	|		ИНАЧЕ Файлы.Редактирует
	|	КОНЕЦ КАК Редактирует
	|ИЗ
	|	&ИмяСправочника КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыСинхронизацииФайловСОблачнымСервисом КАК СтатусыСинхронизацииФайловСОблачнымСервисом
	|		ПО Файлы.Ссылка = СтатусыСинхронизацииФайловСОблачнымСервисом.Файл
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайлов";
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при настройке динамического списка присоединенных файлов.'");
	ОкончаниеОшибки = НСтр("ru = 'В этом случае настройка динамического списка невозможна.'");
	
	ИмяСправочникаХранилищаФайлов = ПрисоединенныеФайлыСлужебный.ИмяСправочникаХраненияФайлов(
		Параметры.ВладелецФайла, "", ЗаголовокОшибки, ОкончаниеОшибки);
	
	ПолноеИмяСправочника = "Справочник." + ИмяСправочникаХранилищаФайлов;
	Список.ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", ПолноеИмяСправочника);
	
	ПустыеПользователи = Новый Массив;
	ПустыеПользователи.Добавить(Неопределено);
	ПустыеПользователи.Добавить(Справочники.Пользователи.ПустаяСсылка());
	ПустыеПользователи.Добавить(Справочники.ВнешниеПользователи.ПустаяСсылка());
	
	Список.Параметры.УстановитьЗначениеПараметра("ВладелецФайлов",      Параметры.ВладелецФайла);
	Список.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	Список.Параметры.УстановитьЗначениеПараметра("ПустыеПользователи",  ПустыеПользователи);
	Список.Параметры.УстановитьЗначениеПараметра("СекундДоМестногоВремени", 0); // Установка на клиенте
	Список.ОсновнаяТаблица = ПолноеИмяСправочника;
	Список.ДинамическоеСчитываниеДанных = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаКомандФормы()
	
	ИменаКоманд = ПолучитьИменаКомандИзмененияОбъектов();
	Для Каждого ИмяКоманды Из ПолучитьИменаПростыхКомандОбъектов() Цикл
		ИменаКоманд.Добавить(ИмяКоманды);
	КонецЦикла;
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаКомандИзмененияОбъектов()
	
	ИменаКоманд = Новый Массив;
	
	// Команды зависимые от состояния объектов.
	ИменаКоманд.Добавить("ЗакончитьРедактирование");
	ИменаКоманд.Добавить("Освободить");
	ИменаКоманд.Добавить("Редактировать");
	ИменаКоманд.Добавить("УстановитьПометкуУдаления");
	ИменаКоманд.Добавить("КонтекстноеМенюУстановитьПометкуУдаления");
	
	ИменаКоманд.Добавить("Подписать");
	ИменаКоманд.Добавить("ДобавитьЭПИзФайла");
	ИменаКоманд.Добавить("СохранитьВместеСЭП");
	
	ИменаКоманд.Добавить("Зашифровать");
	ИменаКоманд.Добавить("Расшифровать");
	
	ИменаКоманд.Добавить("ОбновитьИзФайлаНаДиске");
	
	// Команды независимые от состояния объектов.
	ИменаКоманд.Добавить("Добавить");
	ИменаКоманд.Добавить("ДобавитьИзФайлаНаДиске");
	ИменаКоманд.Добавить("ДобавитьФайлСоСканера");
	ИменаКоманд.Добавить("ОткрытьСвойстваФайла");
	ИменаКоманд.Добавить("Скопировать");
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаПростыхКомандОбъектов()
	
	ИменаКоманд = Новый Массив;
	
	// Простые команды доступные любому пользователю, читающему файлы.
	ИменаКоманд.Добавить("ОткрытьКаталогФайла");
	ИменаКоманд.Добавить("ОткрытьФайлДляПросмотра");
	ИменаКоманд.Добавить("СохранитьКак");
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДоступныеКоманды(ФайлРедактируется,
                                 ФайлРедактируетТекущийПользователь,
                                 ФайлПодписан,
                                 ФайлЗашифрован,
                                 ФайлыРедактируютсяВОблачномСервисе)
	
	ИменаКоманд = ПолучитьИменаКомандФормы();
	
	Если ФайлРедактируется Тогда
		Если ФайлРедактируетТекущийПользователь Тогда
			УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		Иначе
			УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
			УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
			УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		КонецЕсли;
		УдалитьКомандуИзМассива(ИменаКоманд, "УстановитьПометкуУдаления");
		УдалитьКомандуИзМассива(ИменаКоманд, "КонтекстноеМенюУстановитьПометкуУдаления");
		УдалитьКомандыЭП(ИменаКоманд);
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьКак");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "Зашифровать");
		УдалитьКомандуИзМассива(ИменаКоманд, "Расшифровать");
	Иначе
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
		УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
	КонецЕсли;
	
	Если ФайлПодписан Тогда
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
		УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
		УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
	КонецЕсли;
	
	Если ФайлЗашифрован Тогда
		УдалитьКомандыЭП(ИменаКоманд);
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
		УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
		УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "Зашифровать");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьКаталогФайла");
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьФайлДляПросмотра");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьКак");
	Иначе
		УдалитьКомандуИзМассива(ИменаКоманд, "Расшифровать");
	КонецЕсли;
	
	Если ФайлыРедактируютсяВОблачномСервисе Тогда
		УдалитьКомандуИзМассива(ИменаКоманд, "Добавить");
		УдалитьКомандуИзМассива(ИменаКоманд, "ДобавитьИзФайлаНаДиске");
		УдалитьКомандуИзМассива(ИменаКоманд, "ДобавитьФайлСоСканера");
		УдалитьКомандуИзМассива(ИменаКоманд, "Скопировать");
	КонецЕсли;
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьКомандыЭП(ИменаКоманд)
	
	УдалитьКомандуИзМассива(ИменаКоманд, "Подписать");
	УдалитьКомандуИзМассива(ИменаКоманд, "ДобавитьЭПИзФайла");
	УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьВместеСЭП");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьКомандуИзМассива(Массив, ИмяКоманды)
	
	Позиция = Массив.Найти(ИмяКоманды);
	
	Если Позиция = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Массив.Удалить(Позиция);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененияИспользованияПодписанияИлиШифрования()
	
	ПриИзмененияИспользованияПодписанияИлиШифрованияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененияИспользованияПодписанияИлиШифрованияНаСервере()
	
	ФайловыеФункцииСлужебный.КриптографияПриСозданииФормыНаСервере(ЭтотОбъект);
	
КонецПроцедуры

// Продолжение процедуры Подписать, ДобавитьЭПИзФайла.
&НаКлиенте
Процедура ДобавлениеПодписейЗавершить(Успех, Неопределен) Экспорт
	
	Если Успех = Истина Тогда
		УстановитьДоступностьКнопок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьВариантПредпросмотра(ТипСправочникаСФайлами, Предпросмотр)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ТипСправочникаСФайлами, "Предпросмотр", Предпросмотр);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПредпросмотра(ИспользоватьПредпросмотр)
	
	Элементы.АдресДанныхФайла.Видимость = ИспользоватьПредпросмотр;
	Элементы.Предпросмотр.Пометка = ИспользоватьПредпросмотр;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотр()
	
	Если Не Предпросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И РасширенияПоддерживающиеПредпросмотр.НайтиПоЗначению(ТекущиеДанные.Расширение) <> Неопределено Тогда
		ДанныеФайла = ДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
		АдресДанныхФайла = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
	Иначе
		АдресДанныхФайла = Неопределено;
		Элементы.АдресДанныхФайла.ТекстНевыбраннойКартинки = НСтр("ru = 'Нет данных для предварительного просмотра'");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьПояснениеОблачногоСервиса()
	
	ВидимостьПояснения = Ложь;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюФайлов") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.Файл,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.Href,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.УчетнаяЗапись.Наименование,
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.УчетнаяЗапись.Сервис КАК Сервис
			|ИЗ
			|	РегистрСведений.СтатусыСинхронизацииФайловСОблачнымСервисом КАК СтатусыСинхронизацииФайловСОблачнымСервисом
			|ГДЕ
			|	СтатусыСинхронизацииФайловСОблачнымСервисом.Файл = &ВладелецФайла";
		
		Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ФайлыРедактируютсяВОблачномСервисе = Истина;
			ВидимостьПояснения = Истина;
			
			АдресПапкиВОблачномСервисе = ФайловыеФункцииСлужебныйКлиентСервер.АдресВОблачномСервисе(
				ВыборкаДетальныеЗаписи.Сервис, ВыборкаДетальныеЗаписи.Href);
				
			ЧастиСтроки = Новый Массив;
			ЧастиСтроки.Добавить(НСтр("ru = 'Работа с файлами ведется в облачном сервисе'"));
			ЧастиСтроки.Добавить(" ");
			ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(ВыборкаДетальныеЗаписи.УчетнаяЗаписьНаименование, , , , АдресПапкиВОблачномСервисе));
			Элементы.ДекорацияПояснение.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
			
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ГруппаПояснениеОблачногоСервиса.Видимость = ВидимостьПояснения;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыНастройкиСинхронизации(ВладелецФайла)
	
	ТипВладельцаФайла = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипСправочникаСФайлами);
	
	Отбор = Новый Структура(
	"ВладелецФайла, ТипВладельцаФайла, УчетнаяЗапись",
		ВладелецФайла,
		ТипВладельцаФайла,
		Справочники.УчетныеЗаписиСинхронизацииФайлов.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСинхронизацииФайлов.ВладелецФайла,
		|	НастройкиСинхронизацииФайлов.ТипВладельцаФайла,
		|	НастройкиСинхронизацииФайлов.УчетнаяЗапись
		|ИЗ
		|	РегистрСведений.НастройкиСинхронизацииФайлов КАК НастройкиСинхронизацииФайлов
		|ГДЕ
		|	НастройкиСинхронизацииФайлов.ВладелецФайла = &ВладелецФайла
		|	И НастройкиСинхронизацииФайлов.ТипВладельцаФайла = &ТипВладельцаФайла";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Запрос.УстановитьПараметр("ТипВладельцаФайла", ТипВладельцаФайла);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Отбор.УчетнаяЗапись = ВыборкаДетальныеЗаписи.УчетнаяЗапись;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

#КонецОбласти
