
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ФайлБылСоздан = Параметры.ЭтоНовый;
	
	КолонкиМассив = Новый Массив;
	Для Каждого ОписаниеКолонки Из РеквизитФормыВЗначение("ЭлектронныеПодписи").Колонки Цикл
		КолонкиМассив.Добавить(ОписаниеКолонки.Имя);
	КонецЦикла;
	ОписаниеКолонокТаблицыПодписей = Новый ФиксированныйМассив(КолонкиМассив);
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		КопируемыйОбъект = Параметры.ЗначениеКопирования.ПолучитьОбъект();
		ЗначениеКопирования = Параметры.ЗначениеКопирования;
		
		ОбъектЗначение = Справочники[КопируемыйОбъект.Метаданные().Имя].СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(
			ОбъектЗначение,
			КопируемыйОбъект,
			"ДатаМодификацииУниверсальная,
			|ДатаСоздания,
			|Зашифрован,
			|Описание,
			|ПодписанЭП,
			|Размер,
			|Расширение,
			|ТекстХранилище,
			|ВладелецФайла,
			|ПометкаУдаления");
		
		Для Каждого ЭлементЭП Из КопируемыйОбъект.ЭлектронныеПодписи Цикл
			НоваяСтрока = ОбъектЗначение.ЭлектронныеПодписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементЭП);
		КонецЦикла;
		
		Для Каждого ЭлементШифрования Из КопируемыйОбъект.СертификатыШифрования Цикл
			НоваяСтрока = ОбъектЗначение.СертификатыШифрования.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементШифрования);
		КонецЦикла;
		
		ОбъектЗначение.Автор = Пользователи.АвторизованныйПользователь();
		ОбъектЗначение.Заполнить(Неопределено);
	Иначе
		Если Параметры.Свойство("ПрисоединенныйФайл") Тогда
			ОбъектЗначение = Параметры.ПрисоединенныйФайл.ПолучитьОбъект();
		Иначе
			ОбъектЗначение = Параметры.Ключ.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
	
	ИмяСправочника = ОбъектЗначение.Метаданные().Имя;
	НастроитьОбъектФормы(ОбъектЗначение);
	
	ПриИзмененияИспользованияПодписанияИлиШифрованияНаСервере();
	ЗаполнитьСписокПодписей();
	ЗаполнитьСписокШифрования();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюФайлов") Тогда
		ФайлРедактируетсяВОблаке = ФайловыеФункцииСлужебный.ФайлРедактируетсяВОблаке(ЭтотОбъект.Объект.Ссылка);
	КонецЕсли;
	
	Если ТолькоПросмотр
	 ИЛИ НЕ ПравоДоступа("Изменение", ЭтотОбъект.Объект.ВладелецФайла.Метаданные()) Тогда
		
		УстановитьКнопкиИзмененияНевидимыми(Элементы);
	КонецЕсли;
	
	Если НЕ ТолькоПросмотр
	   И НЕ ЭтотОбъект.Объект.Ссылка.Пустая() Тогда
		
		ЗаблокироватьДанныеДляРедактирования(ЭтотОбъект.Объект.Ссылка, , УникальныйИдентификатор);
	КонецЕсли;
	
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы, ТекущийПользователь, ФайлРедактируетсяВОблаке);
	
	ЗапрещенныеРасширения = ФайловыеФункцииСлужебный.СписокЗапрещенныхРасширений();
	
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДатаМодификации = МестноеВремя(ЭтотОбъект.Объект.ДатаМодификацииУниверсальная);
	
	УстановитьДоступностьКомандСпискаЭП();
	УстановитьДоступностьКомандСпискаШифрования();
	
	ПрочитатьСертификатыПодписей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	РазблокироватьОбъект(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВРег(ИмяСобытия) = ВРег("Запись_НаборКонстант")
	   И (    ВРег(Источник) = ВРег("ИспользоватьЭлектронныеПодписи")
		  Или ВРег(Источник) = ВРег("ИспользоватьШифрование")) Тогда
			
		ПодключитьОбработчикОжидания("ПриИзмененияИспользованияПодписанияИлиШифрования", 0.3, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭлектронныеПодписи

&НаКлиенте
Процедура ЭлектронныеПодписиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.ОткрытьПодпись(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСертификатыШифрования

&НаКлиенте
Процедура СертификатыШифрованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьСертификатШифрования(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

///////////////////////////////////////////////////////////////////////////////////
// Обработчики команд файлов

&НаКлиенте
Процедура ПоказатьВСписке(Команда)
	СтандартныеПодсистемыКлиент.ПоказатьВСписке(ЭтотОбъект["Объект"].Ссылка, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Перем НовоеРасширение;
	
	Если ЭтоНовый()
	 ИЛИ ЭтотОбъект.Объект.Зашифрован
	 ИЛИ ЭтотОбъект.Объект.ПодписанЭП
	 ИЛИ ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, , Ложь);
	
	ИнформацияОФайле = Новый Структура;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьИзФайлаНаДискеЗавершение", ЭтотОбъект);
	ПрисоединенныеФайлыСлужебныйКлиент.ВыбратьФайлНаДискеИПоместитьВХранилище(
		ОписаниеОповещения, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяЗаписатьИЗакрыть(Команда)
	
	Если ОбработатьКомандуЗаписиФайла() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяЗаписать(Команда)
	
	ОбработатьКомандуЗаписиФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеУстановитьПометкуУдаления(Команда)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если ЭтотОбъект.Объект.ПометкаУдаления Тогда
			ТекстВопроса = НСтр(
				"ru = 'Для выполнения действия требуется записать изменения файла.
				      |Записать изменения и снять пометку на удаление с файла
				      |""%1""?'");
		Иначе
			ТекстВопроса = НСтр(
				"ru = 'Для выполнения действия требуется записать изменения файла.
				      |Записать изменения и пометить на удаление файл
				      |""%1""?'");
		КонецЕсли;
	Иначе
		Если ЭтотОбъект.Объект.ПометкаУдаления Тогда
			ТекстВопроса = НСтр("ru = 'Снять пометку на удаление с файла
			                          |""%1""?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Пометить на удаление файл
			                          |""%1""?'");
		КонецЕсли;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстВопроса, ЭтотОбъект.Объект.Ссылка);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("СтандартныеУстановитьПометкуУдаленияОтветПолучен", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеУстановитьПометкуУдаленияОтветПолучен(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЭтотОбъект.Объект.ПометкаУдаления = НЕ ЭтотОбъект.Объект.ПометкаУдаления;
		ОбработатьКомандуЗаписиФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяПеречитать(Команда)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Модифицированность Тогда
		ПеречитатьДанныеССервера();
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Данные изменены. Перечитать данные?'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СтандартнаяПеречитатьОтветПолучен", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяПеречитатьОтветПолучен(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПеречитатьДанныеССервера();
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеСкопировать(Команда)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ЗначениеКопирования", ЭтотОбъект.Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыФормы);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Обработчики команд ЭП и шифрования.

&НаКлиенте
Процедура ПодписатьФайлЭП(Команда)
	
	Если ЭтоНовый()
	 Или ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует)
	 Или ЭтотОбъект.Объект.Зашифрован Тогда
		
		Возврат;
	КонецЕсли;
	
	ПрисоединенныйФайл = ЭтотОбъект.Объект.Ссылка;
	ДанныеФайла = ПолучитьДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор);
	
	ПрисоединенныеФайлыСлужебныйКлиент.ПодписатьФайл(ПрисоединенныйФайл, ДанныеФайла, УникальныйИдентификатор,
		, Новый ОписаниеОповещения("ПриПолученииПодписи", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	Если ЭтоНовый()
	 Или ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует)
	 Или ЭтотОбъект.Объект.Зашифрован Тогда
		
		Возврат;
	КонецЕсли;
	
	ПрисоединенныйФайл = ЭтотОбъект.Объект.Ссылка;
	ДанныеФайла = ПолучитьДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор);
	
	ПрисоединенныеФайлыСлужебныйКлиент.ДобавитьПодписьИзФайла(ПрисоединенныйФайл, ДанныеФайла, УникальныйИдентификатор,
		, Новый ОписаниеОповещения("ПриПолученииПодписей", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭП(Команда)
	
	Если ЭтоНовый()
	 ИЛИ ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует)
	 ИЛИ ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
	ПрисоединенныеФайлыКлиент.СохранитьВместеСЭП(
		ЭтотОбъект.Объект.Ссылка,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	Если ЭтоНовый() Или ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует) Или ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗашифроватьДанныеПолучены", ЭтотОбъект, ДанныеФайла);
	ПрисоединенныеФайлыСлужебныйКлиент.ПолучитьЗашифрованныеДанные(ОписаниеОповещения, ЭтотОбъект.Объект.Ссылка, ДанныеФайла, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьДанныеПолучены(РезультатПолучения, ДанныеФайла) Экспорт
	Если РезультатПолучения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗашифрованныеДанные = РезультатПолучения.ЗашифрованныеДанные;
	МассивОтпечатков = РезультатПолучения.МассивОтпечатков;
	
	ЗашифроватьСервер(ЗашифрованныеДанные, МассивОтпечатков);
	
	ПрисоединенныеФайлыСлужебныйКлиент.ОповеститьОбИзмененииИУдалитьФайлВРабочемКаталоге(
		ЭтотОбъект.Объект.Ссылка, ДанныеФайла);
	
	ЗаполнитьСписокШифрования();
	ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
	Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ЭтотОбъект.Объект.Ссылка);
	
	УстановитьДоступностьКомандСпискаШифрования();
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Если ЭтоНовый() Или Не ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	ОписаниеОповещения = Новый ОписаниеОповещения("РасшифроватьДанныеПолучены", ЭтотОбъект);
	
	ПрисоединенныеФайлыСлужебныйКлиент.ПолучитьРасшифрованныеДанные(ОписаниеОповещения,
		ЭтотОбъект.Объект.Ссылка, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьДанныеПолучены(РасшифрованныеДанные, ДополнительныеПараметры) Экспорт
	
	Если РасшифрованныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасшифроватьСервер(РасшифрованныеДанные);
	ПрисоединенныеФайлыСлужебныйКлиент.ОповеститьОРасшифровкеФайла(ЭтотОбъект.Объект.Ссылка);
	ЗаполнитьСписокШифрования();
	
	УстановитьДоступностьКомандСпискаШифрования();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЭПСписокОткрытьПодпись(Команда)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.ОткрытьПодпись(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЭП(Команда)
	
	Если Элементы.ЭлектронныеПодписи.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
	ФайловыеФункцииСлужебныйКлиент.ПроверитьПодписи(ЭтотОбъект,
		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
		Элементы.ЭлектронныеПодписи.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсе(Команда)
	
	ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
	ФайловыеФункцииСлужебныйКлиент.ПроверитьПодписи(ЭтотОбъект, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПодпись(Команда)
	
	Если Элементы.ЭлектронныеПодписи.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЭлектронныеПодписи.ТекущиеДанные;
	
	Если ТекущиеДанные.Объект = Неопределено Или ТекущиеДанные.Объект.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.СохранитьПодпись(ТекущиеДанные.АдресПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭП(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьЭПОтветПолучен", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Удалить выделенные подписи?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭПОтветПолучен(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьИзСпискаПодписейИЗаписатьФайл();
	ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
	Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ЭтотОбъект.Объект.Ссылка);
	УстановитьДоступностьКомандСпискаЭП();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификатШифрования(Команда)
	
	ТекущиеДанные = Элементы.СертификатыШифрования.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	
	Если ПустаяСтрока(ТекущиеДанные.АдресСертификата) Тогда
		МодульЭлектроннаяПодписьКлиент.ОткрытьСертификат(ТекущиеДанные.Отпечаток);
	Иначе
		МодульЭлектроннаяПодписьКлиент.ОткрытьСертификат(ТекущиеДанные.АдресСертификата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСпискаЭП()
	
	ФайловыеФункцииСлужебныйКлиент.УстановитьДоступностьКомандСпискаЭлектронныхПодписей(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСпискаШифрования()
	
	ФайловыеФункцииСлужебныйКлиент.УстановитьДоступностьКомандСпискаСертификатовШифрования(ЭтотОбъект);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Обработчики команд для поддержки совместной работы с файлами.

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если ЭтоНовый()
		ИЛИ ЭтотОбъект.Объект.ПодписанЭП
		ИЛИ ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует)
		И ЭтотОбъект.Объект.Редактирует <> ТекущийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрещенныеРасширения.НайтиПоЗначению(ЭтотОбъект.Объект.Расширение) <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("РедактироватьФайлПослеПодтверждения", ЭтотОбъект);
		ПараметрыФормы = Новый Структура("Ключ", "ПередОткрытиемФайла");
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует) Тогда
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Истина);
	Иначе
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Истина);
		ЗанятьФайлДляРедактированияСервер();
		ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
		Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ЭтотОбъект.Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если ЭтоНовый()
		Или Не ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует)
		Или ЭтотОбъект.Объект.Редактирует <> ТекущийПользователь Тогда
			Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, , Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьРедактированиеВыполненоПомещение", ЭтотОбъект);
	ПрисоединенныеФайлыСлужебныйКлиент.ПоместитьРедактируемыйФайлНаДискеВХранилище(ОписаниеОповещения,ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеВыполненоПомещение(ИнформацияОФайле, ДополнительныеПараметры) Экспорт
	
	Если ИнформацияОФайле <> Неопределено Тогда
		ПоместитьФайлВХранилищеИОсвободить(ИнформацияОФайле);
		ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
		Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ЭтотОбъект.Объект.Ссылка);
	КонецЕсли;
	
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы, ТекущийПользователь, ФайлРедактируетсяВОблаке);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если ЭтоНовый()
	 ИЛИ НЕ ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует)
	 ИЛИ ЭтотОбъект.Объект.Редактирует <> ТекущийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	ОсвободитьФайл();
	ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
	Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ЭтотОбъект.Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьЗаголовок()
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Объект.Ссылка) Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (Присоединенный файл)'"), Строка(ЭтотОбъект.Объект.Ссылка));
	Иначе
		Заголовок = НСтр("ru = 'Присоединенный файл (Создание)'")
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина)
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(
		ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФайлДляПросмотра()
	
	Если ЭтоНовый()
		ИЛИ ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрещенныеРасширения.НайтиПоЗначению(ЭтотОбъект.Объект.Расширение) <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьФайлПослеПодтверждения", ЭтотОбъект);
		ПараметрыФормы = Новый Структура("Ключ", "ПередОткрытиемФайла");
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
	ФайлРедактируется = ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует)
		И ЭтотОбъект.Объект.Редактирует = ТекущийПользователь;
	
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируется);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлПослеПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат = "Продолжить" Тогда
		ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
		
		ФайлРедактируется = ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует)
			И ЭтотОбъект.Объект.Редактирует = ТекущийПользователь;
		
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируется);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФайлПослеПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат = "Продолжить" Тогда
		ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
		
		Если ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует) Тогда
			ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Истина);
		Иначе
			ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Истина);
			ЗанятьФайлДляРедактированияСервер();
			ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
			Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ЭтотОбъект.Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла()
	
	Если ЭтоНовый()
	 ИЛИ ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
	ПрисоединенныеФайлыСлужебныйКлиент.ОткрытьКаталогСФайлом(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак()
	
	Если ЭтоНовый()
	 ИЛИ ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
	ПрисоединенныеФайлыКлиент.СохранитьФайлКак(ДанныеФайла);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДвоичныеДанныеФайлаНаСервере(ИнформацияОФайле)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(ЗаписываемыйОбъект, ИнформацияОФайле);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКнопкиИзмененияНевидимыми(Элементы)
	
	ИменаКоманд = ПолучитьИменаКомандИзмененияОбъекта();
	
	Для каждого ЭлементФормы Из Элементы Цикл
	
		Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИменаКоманд.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено Тогда
			ЭлементФормы.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокШифрования()
	
	СертификатыШифрования.Очистить();
	
	Если ЭтотОбъект.Объект.Зашифрован Тогда
		Для Каждого СтруктураСертификата Из РеквизитФормыВЗначение("Объект").СертификатыШифрования Цикл
			
			НоваяСтрока = СертификатыШифрования.Добавить();
			НоваяСтрока.Представление = СтруктураСертификата.Представление;
			НоваяСтрока.Отпечаток = СтруктураСертификата.Отпечаток;
			
			ДвоичныеДанныеСертификата = СтруктураСертификата.Сертификат.Получить();
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда
				
				НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(
					ДвоичныеДанныеСертификата, УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Разрешено расшифровывать'");
	
	Если СертификатыШифрования.Количество() <> 0 Тогда
		ТекстЗаголовка =ТекстЗаголовка + " (" + Формат(СертификатыШифрования.Количество(), "ЧГ=") + ")";
	КонецЕсли;
	
	Элементы.ГруппаСертификатыШифрования.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПодписей()
	
	ЭлектронныеПодписи.Очистить();
	
	Если ЭтотОбъект.Объект.ПодписанЭП Тогда
		
		Для Каждого ЭлементЭП Из РеквизитФормыВЗначение("Объект").ЭлектронныеПодписи Цикл
			
			НоваяСтрока = ЭлектронныеПодписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементЭП);
			НоваяСтрока.Объект              = ЭтотОбъект.Объект.Ссылка;
			НоваяСтрока.АдресПодписи        = ПоместитьВоВременноеХранилище(
				ЭлементЭП.Подпись.Получить(), УникальныйИдентификатор);
			
			ФайловыеФункцииСлужебныйКлиентСервер.ЗаполнитьСтатусПодписи(НоваяСтрока);
			
			ДвоичныеДанныеСертификата = ЭлементЭП.Сертификат.Получить();
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда 
				
				НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(
					ДвоичныеДанныеСертификата, УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Электронные подписи'");
	
	Если ЭлектронныеПодписи.Количество() <> 0 Тогда
		ТекстЗаголовка = ТекстЗаголовка + " (" + Строка(ЭлектронныеПодписи.Количество()) + ")";
	КонецЕсли;
	
	Элементы.ГруппаЭлектронныеПодписи.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзСпискаПодписейИЗаписатьФайл()
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
	
	ИндексыСтрок = Новый Массив;
	
	Для Каждого НомерВыделеннойСтроки Из Элементы.ЭлектронныеПодписи.ВыделенныеСтроки Цикл
		УдаляемаяСтрока = ЭлектронныеПодписи.НайтиПоИдентификатору(НомерВыделеннойСтроки);
		ИндексыСтрок.Добавить(ЭлектронныеПодписи.Индекс(УдаляемаяСтрока));
	КонецЦикла;
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	МодульЭлектроннаяПодпись.УдалитьПодпись(ЗаписываемыйОбъект, ИндексыСтрок);
	ЗаписатьФайл(ЗаписываемыйОбъект);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
	ЗаполнитьСписокПодписей();
	
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы, ТекущийПользователь, ФайлРедактируетсяВОблаке);
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьСервер(РасшифрованныеДанные)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	ПрисоединенныеФайлыСлужебный.Расшифровать(ЗаписываемыйОбъект, РасшифрованныеДанные);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы, ТекущийПользователь, ФайлРедактируетсяВОблаке);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКнопок(Форма, Элементы, ТекущийПользователь, ФайлРедактируетсяВОблаке)
	
	ФайлРедактируется = ЗначениеЗаполнено(Форма.Объект.Редактирует) Или ФайлРедактируетсяВОблаке;
	ФайлРедактируетТекущийПользователь = Форма.Объект.Редактирует = ТекущийПользователь;
	
	ИменаВсехКоманд = ПолучитьИменаКомандФормы();
	ИменаКоманд = ПолучитьДоступныеКоманды(
		ФайлРедактируется,
		ФайлРедактируетТекущийПользователь,
		Форма.Объект.ПодписанЭП,
		Форма.Объект.Зашифрован,
		Форма.Объект.Ссылка.Пустая(),
		ФайлРедактируетсяВОблаке);
		
	Если Форма.ЭлектронныеПодписи.Количество() = 0 Тогда
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьПодпись");
	КонецЕсли;
	
	Для Каждого ЭлементФормы Из Элементы Цикл
		Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		Если ИменаВсехКоманд.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено Тогда
			ЭлементФормы.Доступность = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементФормы Из Элементы Цикл
		Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		Если ИменаКоманд.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено Тогда
			ЭлементФормы.Доступность = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаКомандФормы()
	
	ИменаКоманд = ПолучитьИменаКомандИзмененияОбъекта();
	
	Для Каждого ИмяКоманды Из ПолучитьИменаПростыхКомандОбъектов() Цикл
		ИменаКоманд.Добавить(ИмяКоманды);
	КонецЦикла;
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаПростыхКомандОбъектов()
	
	ИменаКоманд = Новый Массив;
	
	// Простые команды, которые доступны любому пользователю читающему файлы.
	ИменаКоманд.Добавить("СохранитьВместеСЭП");
	
	ИменаКоманд.Добавить("ОткрытьСертификат");
	ИменаКоманд.Добавить("ОткрытьПодпись");
	ИменаКоманд.Добавить("ПроверитьЭП");
	ИменаКоманд.Добавить("ПроверитьВсе");
	ИменаКоманд.Добавить("СохранитьПодпись");
	
	ИменаКоманд.Добавить("ОткрытьКаталогФайла");
	ИменаКоманд.Добавить("ОткрытьФайлДляПросмотра");
	ИменаКоманд.Добавить("СохранитьКак");
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаКомандИзмененияОбъекта()
	
	ИменаКоманд = Новый Массив;
	
	ИменаКоманд.Добавить("ПодписатьФайлЭП");
	ИменаКоманд.Добавить("ДобавитьЭПИзФайла");
	
	ИменаКоманд.Добавить("УдалитьЭП");
	
	ИменаКоманд.Добавить("Редактировать");
	ИменаКоманд.Добавить("ЗакончитьРедактирование");
	ИменаКоманд.Добавить("Освободить");
	
	ИменаКоманд.Добавить("Зашифровать");
	ИменаКоманд.Добавить("Расшифровать");
	
	ИменаКоманд.Добавить("СтандартныеСкопировать");
	ИменаКоманд.Добавить("ОбновитьИзФайлаНаДиске");
	
	ИменаКоманд.Добавить("СтандартнаяЗаписать");
	ИменаКоманд.Добавить("СтандартнаяЗаписатьИЗакрыть");
	ИменаКоманд.Добавить("СтандартныеУстановитьПометкуУдаления");
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДоступныеКоманды(ФайлРедактируется,
                                 ФайлРедактируетТекущийПользователь,
                                 ФайлПодписан,
                                 ФайлЗашифрован,
                                 ЭтоНовыйФайл,
                                 ФайлРедактируетсяВОблаке)
	
	Если ЭтоНовыйФайл Тогда
		ИменаКоманд = Новый Массив;
		ИменаКоманд.Добавить("СтандартнаяЗаписать");
		ИменаКоманд.Добавить("СтандартнаяЗаписатьИЗакрыть");
		Возврат ИменаКоманд;
	КонецЕсли;
	
	ИменаКоманд = ПолучитьИменаКомандФормы();
	
	Если ФайлРедактируется Тогда
		Если ФайлРедактируетТекущийПользователь Тогда
			УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		Иначе
			УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
			УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
			УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		КонецЕсли;
		УдалитьКомандыЭП(ИменаКоманд);
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьКак");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "Зашифровать");
		УдалитьКомандуИзМассива(ИменаКоманд, "Расшифровать");
	Иначе
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
		УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
	КонецЕсли;
	
	Если ФайлПодписан Тогда
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
		УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
		УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
	Иначе
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьСертификат");
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьПодпись");
		УдалитьКомандуИзМассива(ИменаКоманд, "ПроверитьЭП");
		УдалитьКомандуИзМассива(ИменаКоманд, "ПроверитьВсе");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьПодпись");
		УдалитьКомандуИзМассива(ИменаКоманд, "УдалитьЭП");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьВместеСЭП");
	КонецЕсли;
	
	Если ФайлЗашифрован Тогда
		УдалитьКомандыЭП(ИменаКоманд);
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
		УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
		УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "Зашифровать");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьКаталогФайла");
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьФайлДляПросмотра");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьКак");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ПодписатьФайлЭП");
	Иначе
		УдалитьКомандуИзМассива(ИменаКоманд, "Расшифровать");
	КонецЕсли;
	
	Если ФайлРедактируетсяВОблаке Тогда
		УдалитьКомандуИзМассива(ИменаКоманд, "СтандартныеСкопировать");
		УдалитьКомандуИзМассива(ИменаКоманд, "СтандартныеУстановитьПометкуУдаления");
	КонецЕсли;
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьКомандыЭП(Знач ИменаКоманд)
	
	УдалитьКомандуИзМассива(ИменаКоманд, "ПодписатьФайлЭП");
	УдалитьКомандуИзМассива(ИменаКоманд, "ДобавитьЭПИзФайла");
	УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьВместеСЭП");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьКомандуИзМассива(Массив, ИмяКоманды)
	
	Позиция = Массив.Найти(ИмяКоманды);
	
	Если Позиция = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Массив.Удалить(Позиция);
	
КонецПроцедуры

&НаСервере
Процедура ЗашифроватьСервер(ЗашифрованныеДанные, МассивОтпечатков)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	
	ПрисоединенныеФайлыСлужебный.Зашифровать(ЗаписываемыйОбъект, ЗашифрованныеДанные, МассивОтпечатков);
	
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы, ТекущийПользователь, ФайлРедактируетсяВОблаке);
	
КонецПроцедуры

&НаСервере
Процедура ЗанятьФайлДляРедактированияСервер()
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	ПрисоединенныеФайлыСлужебный.ЗанятьФайлДляРедактированияСервер(ЗаписываемыйОбъект);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы, ТекущийПользователь, ФайлРедактируетсяВОблаке);
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьФайлВХранилищеИОсвободить(Знач ИнформацияОФайле)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	ПрисоединенныеФайлыСлужебный.ПоместитьФайлВХранилищеИОсвободить(ЗаписываемыйОбъект, ИнформацияОФайле);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ОсвободитьФайл()
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	ПрисоединенныеФайлыСлужебный.ОсвободитьФайл(ЗаписываемыйОбъект);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьКомандуЗаписиФайла()
	
	Если ПустаяСтрока(ЭтотОбъект.Объект.Наименование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Для продолжения укажите имя файла.'"), , "Наименование", "Объект");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ФайловыеФункцииСлужебныйКлиент.КорректноеИмяФайла(ЭтотОбъект.Объект.Наименование);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ,"Наименование", "Объект");
		Возврат Ложь;
	КонецПопытки;
	
	Если НЕ ЗаписатьФайл() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Модифицированность = Ложь;
	ОтобразитьИзменениеДанных(ЭтотОбъект.Объект.Ссылка, ВидИзмененияДанных.Изменение);
	ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
	
	Оповестить("Запись_ПрисоединенныйФайл",
	           Новый Структура("ЭтоНовый", ФайлБылСоздан),
	           ЭтотОбъект.Объект.Ссылка);
	
	УстановитьДоступностьКомандСпискаЭП();
	УстановитьДоступностьКомандСпискаШифрования();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПеречитатьДанныеССервера()
	
	ФайлОбъект = ЭтотОбъект.Объект.Ссылка.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ФайлОбъект, "Объект");
	ЗаполнитьСписокПодписей();
	ЗаполнитьСписокШифрования();
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьФайл(Знач ПараметрОбъект = Неопределено)
	
	Если ПараметрОбъект = Неопределено Тогда
		ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	Иначе
		ЗаписываемыйОбъект = ПараметрОбъект;
	КонецЕсли;
	
	ТранзакцияАктивна = Ложь;
	Попытка
		Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
			ДвоичныеДанные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЗначениеКопирования);
			
			Если ФайловыеФункцииСлужебный.ТипХраненияФайлов() = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
				
				НачатьТранзакцию();
				ТранзакцияАктивна = Истина;
				СсылкаНового = Справочники[ИмяСправочника].ПолучитьСсылку();
				ЗаписываемыйОбъект.УстановитьСсылкуНового(СсылкаНового);
				ПрисоединенныеФайлыСлужебный.ЗаписатьФайлВИнформационнуюБазу(СсылкаНового, ДвоичныеДанные);
				ЗаписываемыйОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
			Иначе
				СведенияОФайле = ФайловыеФункцииСлужебный.ДобавитьФайлВТом(ДвоичныеДанные, ЗаписываемыйОбъект.ДатаМодификацииУниверсальная,
					ЗаписываемыйОбъект.Наименование, ЗаписываемыйОбъект.Расширение); 
				ЗаписываемыйОбъект.Том = СведенияОФайле.Том;
				ЗаписываемыйОбъект.ПутьКФайлу = СведенияОФайле.ПутьКФайлу;
				ЗаписываемыйОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
			КонецЕсли;
		КонецЕсли;
		
		ФайловыеФункцииСлужебный.ПеренестиРезультатыПроверкиПодписей(ЭлектронныеПодписи,
			ЗаписываемыйОбъект.ЭлектронныеПодписи);
		
		ЗаписываемыйОбъект.Записать();
		
		Если ТранзакцияАктивна Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Исключение
		Если ТранзакцияАктивна Тогда
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Файлы.Ошибка записи присоединенного файла'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) );
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Если ПараметрОбъект = Неопределено Тогда
		ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	КонецЕсли;
	
	ЗначениеКопирования = Справочники[ИмяСправочника].ПустаяСсылка();
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы, ТекущийПользователь, ФайлРедактируетсяВОблаке);
	
	ОбновитьЗаголовок();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура НастроитьОбъектФормы(Знач НовыйОбъект)
	
	ТипНовогоОбъекта = Новый Массив;
	ТипНовогоОбъекта.Добавить(ТипЗнч(НовыйОбъект));
	
	НовыйРеквизит = Новый РеквизитФормы("Объект", Новый ОписаниеТипов(ТипНовогоОбъекта));
	НовыйРеквизит.СохраняемыеДанные = Истина;
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ЗначениеВРеквизитФормы(НовыйОбъект, "Объект");
	
	Для каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПолеФормы")
		   И СтрНачинаетсяС(Элемент.ПутьКДанным, "ОбъектПрототип[0].")
		   И СтрЗаканчиваетсяНа(Элемент.Имя, "0") Тогда
			
			ИмяЭлемента = Лев(Элемент.Имя, СтрДлина(Элемент.Имя) -1);
			Если Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйЭлемент = Элементы.Вставить(ИмяЭлемента, ТипЗнч(Элемент), Элемент.Родитель, Элемент);
			НовыйЭлемент.ПутьКДанным = "Объект." + Сред(Элемент.ПутьКДанным, СтрДлина("ОбъектПрототип[0].") + 1);
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент, ,
				"Имя, ПутьКДанным, ВыделенныйТекст, СвязьПоТипу");
			
			Элемент.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Не НовыйОбъект.ЭтоНовый() Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(НовыйОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РазблокироватьОбъект(Знач Ссылка, Знач УникальныйИдентификатор)
	
	РазблокироватьДанныеДляРедактирования(Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

// Продолжение процедуры ПодписатьФайлЭП.
// Вызывается из подсистемы ЭлектроннаяПодпись после подписания данных для нестандартного
// способа добавления подписи в объект.
//
&НаКлиенте
Процедура ПриПолученииПодписи(ПараметрыВыполнения, Контекст) Экспорт
	
	ДобавитьПодписьКФайлуНаСервере(ПараметрыВыполнения.ОписаниеДанных.СвойстваПодписи);
	УстановитьДоступностьКомандСпискаЭП();
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.Оповещение, Новый Структура);
	
КонецПроцедуры

// Продолжение процедуры ПодписатьФайлЭП.
// Вызывается из подсистемы ЭлектроннаяПодпись после подготовки подписей из файлов
// для нестандартного способа добавления подписи в объект.
//
&НаКлиенте
Процедура ПриПолученииПодписей(ПараметрыВыполнения, Контекст) Экспорт
	
	ДобавитьПодписьКФайлуНаСервере(ПараметрыВыполнения.ОписаниеДанных.Подписи);
	УстановитьДоступностьКомандСпискаЭП();
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.Оповещение, Новый Структура);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодписьКФайлуНаСервере(СвойстваПодписи)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	ПрисоединенныеФайлы.ДобавитьПодписьКФайлу(ЗаписываемыйОбъект, СвойстваПодписи, УникальныйИдентификатор);
	ЗаписатьФайл(ЗаписываемыйОбъект);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	ЗаполнитьСписокПодписей();
	
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы, ТекущийПользователь, ФайлРедактируетсяВОблаке);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСертификатыПодписей()
	
	Если ЭлектронныеПодписи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("МодульЭлектроннаяПодписьКлиентСервер", 
		ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиентСервер"));
	
	ОбщиеНастройки = Контекст.МодульЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки();
	
	Если ОбщиеНастройки.ПроверятьЭлектронныеПодписиНаСервере Тогда
		Возврат;
	КонецЕсли;
	
	НачатьПодключениеРасширенияРаботыСКриптографией(Новый ОписаниеОповещения(
		"ПрочитатьСертификатыПодписейПослеПодключенияРасширения", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписей.
&НаКлиенте
Процедура ПрочитатьСертификатыПодписейПослеПодключенияРасширения(Подключено, Контекст) Экспорт
	
	Если Не Подключено Тогда
		Возврат;
	КонецЕсли;
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	
	МодульЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Новый ОписаниеОповещения(
			"ПрочитатьСертификатыПодписейПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст),
		"ПолучениеСертификатов", Ложь);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписей.
&НаКлиенте
Процедура ПрочитатьСертификатыПодписейПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("МенеджерКриптографии") Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("Индекс", -1);
	Контекст.Вставить("МенеджерКриптографии", Результат);
	ПрочитатьСертификатыПодписейЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписей.
&НаКлиенте
Процедура ПрочитатьСертификатыПодписейЦиклНачало(Контекст)
	
	Если ЭлектронныеПодписи.Количество() <= Контекст.Индекс + 1 Тогда
		Возврат;
	КонецЕсли;
	Контекст.Индекс = Контекст.Индекс + 1;
	Контекст.Вставить("СтрокаТаблицы", ЭлектронныеПодписи[Контекст.Индекс]);
	
	Если ЗначениеЗаполнено(Контекст.СтрокаТаблицы.Отпечаток) Тогда
		ПрочитатьСертификатыПодписейЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	// Подпись не была прочитана при записи объекта.
	Подпись = ПолучитьИзВременногоХранилища(Контекст.СтрокаТаблицы.АдресПодписи);
	
	Если Не ЗначениеЗаполнено(Подпись) Тогда
		ПрочитатьСертификатыПодписейЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.МенеджерКриптографии.НачатьПолучениеСертификатовИзПодписи(Новый ОписаниеОповещения(
			"ПрочитатьСертификатыПодписейЦиклПослеПолученияСертификатовИзПодписи", ЭтотОбъект, Контекст,
			"ПрочитатьСертификатыПодписейЦиклПослеОшибкиПолученияСертификатовИзПодписи", ЭтотОбъект),
		Подпись);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписей.
&НаКлиенте
Процедура ПрочитатьСертификатыПодписейЦиклПослеОшибкиПолученияСертификатовИзПодписи(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПрочитатьСертификатыПодписейЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписей.
&НаКлиенте
Процедура ПрочитатьСертификатыПодписейЦиклПослеПолученияСертификатовИзПодписи(Сертификаты, Контекст) Экспорт
	
	Если Сертификаты.Количество() = 0 Тогда
		ПрочитатьСертификатыПодписейЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("Сертификат", Сертификаты[0]);
	
	Контекст.Сертификат.НачатьВыгрузку(Новый ОписаниеОповещения(
		"ПрочитатьСертификатыПодписейЦиклПослеВыгрузкиСертификата", ЭтотОбъект, Контекст,
		"ПрочитатьСертификатыПодписейЦиклПослеОшибкиВыгрузкиСертификата", ЭтотОбъект));
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписей.
&НаКлиенте
Процедура ПрочитатьСертификатыПодписейЦиклПослеОшибкиВыгрузкиСертификата(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПрочитатьСертификатыПодписейЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписей.
&НаКлиенте
Процедура ПрочитатьСертификатыПодписейЦиклПослеВыгрузкиСертификата(ДанныеСертификата, Контекст) Экспорт
	
	СтрокаТаблицы = Контекст.СтрокаТаблицы;
	
	СтрокаТаблицы.Отпечаток = Base64Строка(Контекст.Сертификат.Отпечаток);
	СтрокаТаблицы.АдресСертификата = ПоместитьВоВременноеХранилище(ДанныеСертификата, УникальныйИдентификатор);
	СтрокаТаблицы.КомуВыданСертификат =
		Контекст.МодульЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(Контекст.Сертификат);
	
	ПрочитатьСертификатыПодписейЦиклНачало(Контекст);
	
КонецПроцедуры


&НаКлиенте
Функция ЭтоНовый()
	
	Возврат ЭтотОбъект.Объект.Ссылка.Пустая();
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИзФайлаНаДискеЗавершение(ИнформацияОФайле, ДополнительныеПараметры) Экспорт
	
	Если ИнформацияОФайле = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ОбновитьДвоичныеДанныеФайлаНаСервере(ИнформацияОФайле);
	ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
	Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ЭтотОбъект.Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененияИспользованияПодписанияИлиШифрования()
	
	ПриИзмененияИспользованияПодписанияИлиШифрованияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененияИспользованияПодписанияИлиШифрованияНаСервере()
	
	ФайловыеФункцииСлужебный.КриптографияПриСозданииФормыНаСервере(ЭтотОбъект, Ложь);
	
КонецПроцедуры

#КонецОбласти
