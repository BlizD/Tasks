
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Менеджер = ПланыОбмена[Параметры.Узел.Метаданные().Имя];
	
	Если Параметры.Узел = Менеджер.ЭтотУзел() Тогда
		ВызватьИсключение
			НСтр("ru = 'Создание начального образа для данного узла невозможно.'");
	Иначе
		ВидБазы = 0; // файловая база
		ТипСУБД = "";
		Узел = Параметры.Узел;
		МожноСоздатьФайловуюБазу = Истина;
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
			МожноСоздатьФайловуюБазу = Ложь;
		КонецЕсли;
		
		КодыЛокализации = ПолучитьДопустимыеКодыЛокализации();
		ЯзыкФайловойБазы = Элементы.Найти("ЯзыкФайловойБазы");
		ЯзыкБазыСервера = Элементы.Найти("ЯзыкБазыСервера");
		
		Для Каждого Код Из КодыЛокализации Цикл
			Представление = ПредставлениеКодаЛокализации(Код);
			ЯзыкФайловойБазы.СписокВыбора.Добавить(Код, Представление);
			ЯзыкБазыСервера.СписокВыбора.Добавить(Код, Представление);
		КонецЦикла;
		
		Язык = КодЛокализацииИнформационнойБазы();
		
	КонецЕсли;
	
	ЕстьФайлыВТомах = Ложь;
	
	Если ФайловыеФункции.ЕстьТомаХраненияФайлов() Тогда
		ЕстьФайлыВТомах = ФайловыеФункцииСлужебный.ЕстьФайлыВТомах();
	КонецЕсли;
	
	Если ЕстьФайлыВТомах Тогда
		ТипПлатформыСервера = ОбщегоНазначенияПовтИсп.ТипПлатформыСервера();
		
		Если ТипПлатформыСервера = ТипПлатформы.Windows_x86
		 ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
			
			Элементы.ПолноеИмяФайловойБазы.АвтоОтметкаНезаполненного = Истина;
			Элементы.ПутьКАрхивуСФайламиТомов.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ПолноеИмяФайловойБазыLinux.АвтоОтметкаНезаполненного = Истина;
			Элементы.ПутьКАрхивуСФайламиТомовLinux.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
	Иначе
		Элементы.ГруппаПутьКАрхивуСФайламиТомов.Видимость = Ложь;
	КонецЕсли;
	
	Если Не СтандартныеПодсистемыВызовСервера.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
		Элементы.ПутьКАрхивуСФайламиТомов.ПодсказкаВвода = НСтр("ru = '\\имя сервера\resource\files.zip'");
		Элементы.ПутьКАрхивуСФайламиТомов.КнопкаВыбора = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ИсходныеДанные;
	Элементы.СоздатьНачальныйОбраз.Видимость = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидБазыПриИзменении(Элемент)
	
	// Переключить страницу параметров.
	Страницы = Элементы.Найти("Страницы");
	Страницы.ТекущаяСтраница = Страницы.ПодчиненныеЭлементы[ВидБазы];
	
	Если ЭтотОбъект.ВидБазы = 0 Тогда
		Элементы.ПутьКАрхивуСФайламиТомов.ПодсказкаВвода = "";
		Элементы.ПутьКАрхивуСФайламиТомов.КнопкаВыбора = Истина;
	Иначе
		Элементы.ПутьКАрхивуСФайламиТомов.ПодсказкаВвода = НСтр("ru = '\\имя сервера\resource\files.zip'");
		Элементы.ПутьКАрхивуСФайламиТомов.КнопкаВыбора = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКАрхивуСФайламиТомовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработчикСохраненияФайла(
		"ПутьКАрхивуСФайламиТомовWindows",
		СтандартнаяОбработка,
		"files.zip",
		"Архивы zip(*.zip)|*.zip");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеИмяФайловойБазыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработчикСохраненияФайла(
		"ПолноеИмяФайловойБазыWindows",
		СтандартнаяОбработка,
		"1Cv8.1CD",
		"Любой файл(*.*)|*.*");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьНачальныйОбраз(Команда)
	
	ОчиститьСообщения();
	Если ВидБазы = 0 И НЕ МожноСоздатьФайловуюБазу Тогда
		ВызватьИсключение
			НСтр("ru = 'Создание начального образа файловой информационной базы
			           |на данной платформе не поддерживается.'");
	Иначе
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Узел", Узел);
		ПараметрыЗадания.Вставить("ПутьКАрхивуСФайламиТомовWindows", ПутьКАрхивуСФайламиТомовWindows);
		ПараметрыЗадания.Вставить("ПутьКАрхивуСФайламиТомовLinux", ПутьКАрхивуСФайламиТомовLinux);
		
		Если ВидБазы = 0 Тогда
			// Файловый начальный образ.
			ПараметрыЗадания.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);
			ПараметрыЗадания.Вставить("Язык", Язык);
			ПараметрыЗадания.Вставить("ПолноеИмяФайловойБазыWindows", ПолноеИмяФайловойБазыWindows);
			ПараметрыЗадания.Вставить("ПолноеИмяФайловойБазыLinux", ПолноеИмяФайловойБазыLinux);
			ПараметрыЗадания.Вставить("НаименованиеЗадания", НСтр("ru = 'Создание файлового начального образа'"));
			ПараметрыЗадания.Вставить("НаименованиеПроцедуры", "СоздатьФайловыйНачальныйОбразНаСервере");
		Иначе
			// Серверный начальный образ.
			СтрокаСоединения =
				"Srvr="""       + Сервер + """;"
				+ "Ref="""      + ИмяБазы + """;"
				+ "DBMS="""     + ТипСУБД + """;"
				+ "DBSrvr="""   + СерверБазыДанных + """;"
				+ "DB="""       + ИмяБазыДанных + """;"
				+ "DBUID="""    + ПользовательБазыДанных + """;"
				+ "DBPwd="""    + ПарольПользователя + """;"
				+ "SQLYOffs=""" + Формат(СмещениеДат, "ЧГ=") + """;"
				+ "Locale="""   + Язык + """;"
				+ "SchJobDn=""" + ?(УстановитьБлокировкуРегламентныхЗаданий, "Y", "N") + """;";
			
			ПараметрыЗадания.Вставить("СтрокаСоединения", СтрокаСоединения);
			ПараметрыЗадания.Вставить("НаименованиеЗадания", НСтр("ru = 'Создание серверного начального образа'"));
			ПараметрыЗадания.Вставить("НаименованиеПроцедуры", "СоздатьСерверныйНачальныйОбразНаСервере");
		КонецЕсли;
		Результат = ПодготовитьДанныеДляСозданияНачальногоОбраза(ПараметрыЗадания, ВидБазы);
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Если Результат.ДанныеПодготовлены Тогда
				АдресПараметровЗадания = ПоместитьВоВременноеХранилище(ПараметрыЗадания, УникальныйИдентификатор);
				ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьСозданиеНачальногоОбраза", ЭтотОбъект);
				Если Результат.ТребуетсяПодтверждение Тогда
					ПоказатьВопрос(ОписаниеОповещения, Результат.ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Иначе
					ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработчикСохраненияФайла(ИмяСвойства,
                                    СтандартнаяОбработка,
                                    ИмяФайла,
                                    Фильтр = "")
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяСвойства", ИмяСвойства);
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	ДополнительныеПараметры.Вставить("Фильтр", Фильтр);
	
	ОповещениеПодключенияРасширенияРаботыСФайлами = Новый ОписаниеОповещения(
		"ОбработчикСохраненияФайлаПослеПодключенияРасширенияРаботыСФайлами",
		ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОповещениеПодключенияРасширенияРаботыСФайлами);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСохраненияФайлаПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Не Подключено Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	Диалог.Заголовок                = НСтр("ru = 'Выберите файл для сохранения'");
	Диалог.МножественныйВыбор       = Ложь;
	Диалог.ПредварительныйПросмотр  = Ложь;
	Диалог.Фильтр                   = ДополнительныеПараметры.Фильтр;
	Диалог.ПолноеИмяФайла           =
		?(ЭтотОбъект[ДополнительныеПараметры.ИмяСвойства] = "",
		ДополнительныеПараметры.ИмяФайла,
		ЭтотОбъект[ДополнительныеПараметры.ИмяСвойства]);
	
	ОписаниеОповещенияДиалогаВыбора = Новый ОписаниеОповещения(
		"ОбработчикСохраненияФайлаПослеВыбораВДиалоге",
		ЭтотОбъект, ДополнительныеПараметры);
	Диалог.Показать(ОписаниеОповещенияДиалогаВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСохраненияФайлаПослеВыбораВДиалоге(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено
		И ВыбранныеФайлы.Количество() = 1 Тогда
		
		ЭтотОбъект[ДополнительныеПараметры.ИмяСвойства] = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьДанныеДляСозданияНачальногоОбраза(ПараметрыЗадания, ВидБазы)
	
	Если ВидБазы = 0 Тогда
		// Файловый начальный образ.
		// Функция обработки, проверки и подготовки параметров.
		Результат = ФайловыеФункцииСлужебный.ПодготовитьДанныеДляСозданияФайловогоНачальногоОбраза(ПараметрыЗадания);
	Иначе
		// Серверный начальный образ.
		// Функция обработки, проверки и подготовки параметров.
		Результат = ФайловыеФункцииСлужебный.ПодготовитьДанныеДляСозданияСерверногоНачальногоОбраза(ПараметрыЗадания);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьСозданиеНачальногоОбраза(Результат, Неопределен) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПроцентВыполнения = 0;
		ДопИнформацияВыполнение = "";
		ПодключитьОбработчикОжидания("ЗапуститьСозданиеНачальногоОбраза", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьСозданиеНачальногоОбраза()
	
	ФоновоеЗаданиеЗапуститьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеЗапуститьНаКлиенте()
	
	Результат = ФоновоеЗаданиеЗапустить();
	Если Результат.ФоновоеЗаданиеЗапущено Тогда
		ПерейтиКСтраницеОжидания();
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 2, Истина);
	ИначеЕсли Результат.Отказ Тогда
		// Ошибка, фоновое задание не запустилось.
		Возврат;
	Иначе
		// Фоновое задание выполнилось сразу же.
		ПерейтиКСтраницеОжидания();
		ПроцентВыполнения = 100;
		ДопИнформацияВыполнение = "";
		// Переход к странице с результатом с задержкой в 1 сек.
		ПодключитьОбработчикОжидания("ЗапуститьПереходРезультат", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСтраницеОжидания()
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ОжиданиеСозданияНачальногоОбраза;
	Элементы.СоздатьНачальныйОбраз.Видимость = Ложь;
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеЗапустить()
	
	Результат = Новый Структура;
	Результат.Вставить("ФоновоеЗаданиеЗапущено", Ложь);
	Результат.Вставить("Отказ", Истина);
	
	Если ЭтоАдресВременногоХранилища(АдресПараметровЗадания) Тогда
		ПараметрыЗадания = ПолучитьИзВременногоХранилища(АдресПараметровЗадания);
		Если ТипЗнч(ПараметрыЗадания) = Тип("Структура") Тогда
			// Запуск фонового задания.
			Результат.Отказ = Ложь;
			РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
				УникальныйИдентификатор,
				"ФайловыеФункцииСлужебный." + ПараметрыЗадания.НаименованиеПроцедуры,
				ПараметрыЗадания,
				ПараметрыЗадания.НаименованиеЗадания);
			
			ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
			ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
			
			Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
				ФоновоеЗаданиеЗагрузитьРезультат(Результат);
				Результат.ФоновоеЗаданиеЗапущено = Ложь;
			Иначе
				ФоновоеЗаданиеПрочитатьПромежуточныйРезультат();
				Результат.ФоновоеЗаданиеЗапущено = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	Результат = ФоновоеЗаданиеПолучитьРезультат();
	Если Результат.ФоновоеЗаданиеВыполнено Тогда
		ПроцентВыполнения = 100;
		ДопИнформацияВыполнение = "";
		// Переход дальше с задержкой на 1 секунду.
		ПодключитьОбработчикОжидания("ЗапуститьПереходРезультат", 1, Истина);
		
	Иначе
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 2, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеПрочитатьПромежуточныйРезультат()
	Прогресс = ДлительныеОперации.ПрочитатьПрогресс(ФоновоеЗаданиеИдентификатор);
	Если Прогресс <> Неопределено Тогда
		ПроцентВыполнения = Прогресс.Процент;
		ДопИнформацияВыполнение = Прогресс.Текст;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеЗагрузитьРезультат(Результат)
	РезультатВыполненияВФоне = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	Если РезультатВыполненияВФоне = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);

	ФоновоеЗаданиеАдресХранилища = Неопределено;
	ФоновоеЗаданиеИдентификатор  = Неопределено;
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеПолучитьРезультат()
	Результат = Новый Структура;
	Результат.Вставить("ФоновоеЗаданиеВыполнено", Ложь);
	Состояние = СостояниеЗадания(ФоновоеЗаданиеИдентификатор);
	
	Если Состояние = "Активно" Тогда
		ФоновоеЗаданиеПрочитатьПромежуточныйРезультат();
	ИначеЕсли Состояние = "Завершено"
		Или Состояние = "ЗавершеноАварийно" Тогда
		Результат.ФоновоеЗаданиеВыполнено = Истина;
		ФоновоеЗаданиеЗагрузитьРезультат(Результат);
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Возвращает состояние выполнения фонового задания.
// Используется для реализации логики длительных операций.
//
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания, для которого необходимо получить
//                                                   состояние.
// 
// Возвращаемое значение:
//  Строка - состояние выполнения фонового задания:
// "Активно" - задание выполняется;
// "Завершено" - задание выполнено успешно;
// "ЗавершеноАварийно" - задание завершено аварийно или отменено пользователем.
//
Функция СостояниеЗадания(Знач ИдентификаторЗадания)
	
	Попытка
		Результат = ?(ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания), "Завершено", "Активно");
	Исключение
		Результат = "ЗавершеноАварийно";
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗапуститьПереходРезультат()
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.Результат;
	Элементы.СоздатьНачальныйОбраз.Видимость = Ложь;
КонецПроцедуры

#КонецОбласти
