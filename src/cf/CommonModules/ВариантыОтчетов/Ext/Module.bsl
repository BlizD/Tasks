////////////////////////////////////////////////////////////////////////////////
// Подсистема "Варианты отчетов" (сервер).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует список разделов, в которых размещены команды вызова панели отчетов.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Информация о разделах.
//       * Ссылка        - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//       * Метаданные    - ОбъектМетаданных.
//       * Имя           - Строка.
//       * Представление - Строка.
//
Функция ИспользуемыеРазделы() Экспорт
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Ссылка",          Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	Результат.Колонки.Добавить("Метаданные",      Новый ОписаниеТипов("ОбъектМетаданных, Строка"));
	Результат.Колонки.Добавить("Имя",             ОписаниеТиповСтрока());
	Результат.Колонки.Добавить("Представление",   ОписаниеТиповСтрока());
	Результат.Колонки.Добавить("ЗаголовокПанели", ОписаниеТиповСтрока());
	
	ИдентификаторНачальнойСтраницы = ВариантыОтчетовКлиентСервер.ИдентификаторНачальнойСтраницы();
	
	СписокРазделов = Новый СписокЗначений;
	
	ВариантыОтчетовПереопределяемый.ОпределитьРазделыСВариантамиОтчетов(СписокРазделов);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульОбработкиПанельАдминистрированияБСП = ОбщегоНазначения.ОбщийМодуль("Обработки.ПанельАдминистрированияБСП");
		МодульОбработкиПанельАдминистрированияБСП.ПриОпределенииРазделовСВариантамиОтчетов(СписокРазделов);
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокРазделов Цикл
		РазделМетаданные = ЭлементСписка.Значение;
		Если ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
			ШаблонЗаголовка = ЭлементСписка.Представление;
		Иначе
			ШаблонЗаголовка = НСтр("ru = 'Отчеты раздела ""%1""'");
		КонецЕсли;
		
		Строка = Результат.Добавить();
		Строка.Ссылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(РазделМетаданные);
		Если РазделМетаданные = ИдентификаторНачальнойСтраницы Тогда
			Строка.Метаданные    = ИдентификаторНачальнойСтраницы;
			Строка.Имя           = ИдентификаторНачальнойСтраницы;
			Строка.Представление = НСтр("ru = 'Начальная страница'");
		Иначе
			Строка.Метаданные    = РазделМетаданные;
			Строка.Имя           = РазделМетаданные.Имя;
			Строка.Представление = РазделМетаданные.Представление();
		КонецЕсли;
		Строка.ЗаголовокПанели = СтрЗаменить(ШаблонЗаголовка, "%1", Строка.Представление); // Переход на СтрШаблон невозможен.
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Получает ссылку варианта отчета по набору ключевых реквизитов.
//
// Параметры:
//   Отчет        - Соответствует реквизиту справочника - Полное имя или ссылка отчета.
//   КлючВарианта - Соответствует реквизиту справочника - Имя варианта отчета.
//
// Возвращаемое значение: 
//   * СправочникСсылка.ВариантыОтчетов - Когда вариант найден.
//   * Неопределено                     - Когда вариант не найден.
//
Функция ПолучитьСсылку(Отчет, КлючВарианта) Экспорт
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Если ТипЗнч(Отчет) = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВариантыОтчетов.Вариант КАК Ссылка
		|ИЗ
		|	РегистрСведений.ПредопределенныеВариантыОтчетовВерсийРасширений КАК ВариантыОтчетов
		|ГДЕ
		|	ВариантыОтчетов.Отчет = &Отчет
		|	И ВариантыОтчетов.ВерсияРасширений = &ВерсияРасширений
		|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта";
		Запрос.УстановитьПараметр("ВерсияРасширений", ПараметрыСеанса.ВерсияРасширений);
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВариантыОтчетов.Ссылка
		|ИЗ
		|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|ГДЕ
		|	ВариантыОтчетов.Отчет = &Отчет
		|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВариантыОтчетов.ПометкаУдаления";
	КонецЕсли;
	Запрос.УстановитьПараметр("Отчет", Отчет);
	Запрос.УстановитьПараметр("КлючВарианта", КлючВарианта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Формирует массив отчетов, доступных текущему пользователю.
//
// Возвращаемое значение:
//   Массив - Ссылки отчетов, доступных текущему пользователю.
//       Типы значений соответствуют типу реквизита Отчет справочника ВариантыОтчетов.
//
// Описание:
//   Данный массив следует использовать во всех запросах к таблице
//   справочника "ВариантыОтчетов" как отбор по реквизиту "Отчет",
//   кроме случаев выборки вариантов из внешних отчетов.
//
Функция ОтчетыТекущегоПользователя() Экспорт
	
	ДоступныеОтчеты = ВариантыОтчетовПовтИсп.ДоступныеОтчеты();
	
	// Дополнить массив ссылкам дополнительных отчетов, доступных текущему пользователю.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		МодульДополнительныеОтчетыИОбработки.ПриДобавленииДополнительныхОтчетовДоступныхТекущемуПользователю(ДоступныеОтчеты);
	КонецЕсли;
	
	Возврат ДоступныеОтчеты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Поддержка переопределяемых модулей.

// Вызывает модуль менеджера отчета для заполнения его настроек.
//   Для вызова из процедуры ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Параметры:
//   Настройки - Коллекция - Передается "как есть" из процедуры НастроитьВариантыОтчетов.
//   ОтчетМетаданные - ОбъектМетаданных - Метаданные отчета.
//
// Важно:
//   Для использования в модуле менеджера отчета должна быть размещена экспортная процедура по шаблону:
//      // Настройки размещения в панели отчетов.
//      //
//      // Параметры:
//      //   Настройки - Коллекция - Передается "как есть" из ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//      //       Может использоваться для получения настроек варианта этого отчета при помощи функции ВариантыОтчетов.ОписаниеВарианта().
//      //   НастройкиОтчета - СтрокаДереваЗначений - Настройки этого отчета,
//      //       уже сформированные при помощи функции ВариантыОтчетов.ОписаниеОтчета() и готовые к изменению.
//      //       См. "Свойства для изменения" процедуры ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//      //
//      // Описание:
//      //   См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//      //
//      // Вспомогательные методы:
//      //	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//      //	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина/Ложь);
//      //
//      // Примеры:
//      //
//      //  1. Установка описания варианта.
//      //	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//      //	НастройкиВарианта.Описание = НСтр("ru = '<Описание>'");
//      //
//      //  2. Отключение варианта отчета.
//      //	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//      //	НастройкиВарианта.Включен = Ложь;
//      //
//      Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
//      	// Код процедуры.
//      КонецПроцедуры
//
Процедура НастроитьОтчетВМодулеМенеджера(Настройки, ОтчетМетаданные) Экспорт
	НастройкиОтчета = ОписаниеОтчета(Настройки, ОтчетМетаданные);
	Отчеты[ОтчетМетаданные.Имя].НастроитьВариантыОтчета(Настройки, НастройкиОтчета);
КонецПроцедуры

// Находит настройки указанного отчета. Используется для настройки размещения и общих параметров отчета.
//   Для использования в ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//   См. описание функции ДеревоПредопределенных().
//
// Параметры:
//   Настройки - Коллекция - Используется для описания настроек отчетов и вариантов.
//       Передается "как есть" из процедур НастроитьВариантыОтчетов и НастроитьВариантыОтчета.
//   ОтчетЗначениеИлиМетаданные - ОбъектМетаданных, СправочникСсылка.ИдентификаторыОбъектовМетаданных -
//       Метаданные или ссылка отчета.
//
// Возвращаемое значение:
//   СтрокаДереваЗначений - Отчет.
//       См. "Реквизиты для изменения" функции ДеревоПредопределенных().
//
Функция ОписаниеОтчета(Настройки, ОтчетЗначениеИлиМетаданные) Экспорт
	ЭтоМетаданные = (ТипЗнч(ОтчетЗначениеИлиМетаданные) = Тип("ОбъектМетаданных"));
	Если ЭтоМетаданные Тогда
		СтрокаОтчет = Настройки.Строки.Найти(ОтчетЗначениеИлиМетаданные, "Метаданные", Ложь);
	Иначе
		СтрокаОтчет = Настройки.Строки.Найти(ОтчетЗначениеИлиМетаданные, "Отчет", Ложь);
	КонецЕсли;
	
	Если СтрокаОтчет = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка получения описания отчета ""%1"": он не подключен к подсистеме ""%2"".
			|Проверьте свойство ""Хранилище вариантов"" в свойствах отчета.'"),
			Строка(ОтчетЗначениеИлиМетаданные),
			ВариантыОтчетовКлиентСервер.НаименованиеПодсистемы(""));
	КонецЕсли;
	
	Возврат СтрокаОтчет;
КонецФункции

// Находит настройки варианта отчета. Используется для настройки размещения.
//   Для использования в ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Параметры:
//   Настройки - Коллекция - Используется для описания настроек отчетов и вариантов.
//       Передается "как есть" из процедур НастроитьВариантыОтчетов и НастроитьВариантыОтчета.
//   ОтчетСтрокаДереваИлиЗначениеИлиМетаданные - СтрокаДерева, ОбъектМетаданных,
//       СправочникСсылка.ИдентификаторыОбъектовМетаданных - Описание настроек, метаданные или ссылка отчета.
//   КлючВарианта - Строка - Имя варианта отчета как оно задано в схеме компоновки данных.
//
// Возвращаемое значение: 
//   СтрокаДереваЗначений - Вариант.
//       См. "Реквизиты для изменения" функции ДеревоПредопределенных().
//
Функция ОписаниеВарианта(Настройки, ОтчетСтрокаДереваИлиЗначениеИлиМетаданные, КлючВарианта) Экспорт
	Если ТипЗнч(ОтчетСтрокаДереваИлиЗначениеИлиМетаданные) = Тип("СтрокаДереваЗначений") Тогда
		СтрокаОтчет = ОтчетСтрокаДереваИлиЗначениеИлиМетаданные;
	Иначе
		СтрокаОтчет = ОписаниеОтчета(Настройки, ОтчетСтрокаДереваИлиЗначениеИлиМетаданные);
	КонецЕсли;
	
	Если КлючВарианта = "" Тогда
		СтрокаВариант = СтрокаОтчет.ОсновнойВариант;
	Иначе
		СтрокаВариант = СтрокаОтчет.Строки.Найти(КлючВарианта, "КлючВарианта", Ложь);
	КонецЕсли;
	
	Если СтрокаВариант = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Вариант ""%1"" не найден для отчета ""%2"".'"),
			КлючВарианта,
			СтрокаОтчет.Метаданные.Имя);
	КонецЕсли;
	
	ЗаполнитьОписаниеСтрокиВарианта(СтрокаВариант, СтрокаОтчет);
	
	Возврат СтрокаВариант;
КонецФункции

// Устанавливает режим вывода Отчетов и Вариантов в панелях отчетов.
//   Для вызова из процедуры ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов() переопределяемого модуля
//   и из процедуры НастроитьВариантыОтчета() модуля объекта отчета.
//
// Параметры:
//   Настройки - Коллекция - Передается "как есть" из соответствующего параметра
//       процедур НастроитьВариантыОтчетов и НастроитьВариантыОтчета.
//   ОтчетИлиПодсистема - СтрокаДереваЗначений, ОбъектМетаданных: Отчет, ОбъектМетаданных: Подсистема -
//       Описание отчета или подсистемы, для которой устанавливается режим вывода.
//       Когда передана подсистема режим устанавливается рекурсивно для всех отчетов из ее состава.
//   ГруппироватьПоОтчетам - Булево, Строка - Режим вывода гиперссылок этого отчета в панели отчетов:
//       - Истина, "ПоОтчетам" - Варианты группируются по отчету.
//           По умолчанию в панелях отчетов выводится только основной вариант отчета,
//           а все прочие варианты этого отчета выводятся "под" основным и по умолчанию скрыты
//           (но могут быть найдены поиском или включены при помощи флажков в режиме настройки).
//           Основным вариантом считается первый предопределенный вариант в схеме отчета.
//           Этот режим появился в версии 2.2.2 и позволяет уменьшить количество гиперссылок, выводимых в панелях отчетов.
//       - Ложь, "ПоВариантам" - Все варианты отчета считаются самостоятельными,
//           по умолчанию видны и выводятся независимо в панелях отчетов.
//           Этот режим использовался в версии 2.2.1 и ранее.
//
Процедура УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОтчетИлиПодсистема, ВыводитьОтчетыВместоВариантов) Экспорт
	Если ТипЗнч(ВыводитьОтчетыВместоВариантов) <> Тип("Булево") Тогда
		ВыводитьОтчетыВместоВариантов = (ВыводитьОтчетыВместоВариантов = ВРег("ПоОтчетам"));
	КонецЕсли;
	Если ТипЗнч(ОтчетИлиПодсистема) = Тип("СтрокаДереваЗначений")
		Или Метаданные.Отчеты.Содержит(ОтчетИлиПодсистема) Тогда
		УстановитьРежимВыводаОтчетаВПанеляхОтчетов(Настройки, ОтчетИлиПодсистема, ВыводитьОтчетыВместоВариантов);
	Иначе
		Подсистемы = Новый Массив;
		Подсистемы.Добавить(ОтчетИлиПодсистема);
		Количество = 1;
		ОбработанныеОбъекты = Новый Массив;
		Пока Количество > 0 Цикл
			Количество = Количество - 1;
			Подсистема = Подсистемы[0];
			Подсистемы.Удалить(0);
			Для Каждого ВложеннаяПодсистема Из Подсистема.Подсистемы Цикл
				Количество = Количество + 1;
				Подсистемы.Добавить(ВложеннаяПодсистема);
			КонецЦикла;
			Для Каждого ОбъектМетаданных Из ОтчетИлиПодсистема.Состав Цикл
				Если ОбработанныеОбъекты.Найти(ОбъектМетаданных) = Неопределено Тогда
					ОбработанныеОбъекты.Добавить(ОбъектМетаданных);
					Если Метаданные.Отчеты.Содержит(ОбъектМетаданных) Тогда
						УстановитьРежимВыводаОтчетаВПанеляхОтчетов(Настройки, ОбъектМетаданных, ВыводитьОтчетыВместоВариантов);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для вызова из форм отчетов.

// Обновляет состав справочника ПользовательскиеНастройкиОтчетов после сохранения новой настройки.
//   Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   Настройки - ОбъектМетаданных - Передается "как есть" из процедуры ПриСохраненииПользовательскихНастроекНаСервере.
//
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Форма, Настройки) Экспорт
	
	РеквизитыФормы = Новый Структура("КлючОбъекта, ВариантСсылка");
	ЗаполнитьЗначенияСвойств(РеквизитыФормы, Форма);
	Если Не ЗначениеЗаполнено(РеквизитыФормы.КлючОбъекта)
		Или Не ЗначениеЗаполнено(РеквизитыФормы.ВариантСсылка) Тогда
		ОтчетОбъект = Форма.РеквизитФормыВЗначение("Отчет");
		ОтчетМетаданные = ОтчетОбъект.Метаданные();
		Если Не ЗначениеЗаполнено(РеквизитыФормы.КлючОбъекта) Тогда
			РеквизитыФормы.КлючОбъекта = ОтчетМетаданные.ПолноеИмя();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(РеквизитыФормы.ВариантСсылка) Тогда
			ОтчетИнформация = СформироватьИнформациюОбОтчетеПоПолномуИмени(РеквизитыФормы.КлючОбъекта);
			Если НЕ ЗначениеЗаполнено(ОтчетИнформация.ТекстОшибки) Тогда
				ОтчетСсылка = ОтчетИнформация.Отчет;
			Иначе
				ОтчетСсылка = РеквизитыФормы.КлючОбъекта;
			КонецЕсли;
			РеквизитыФормы.ВариантСсылка = ПолучитьСсылку(ОтчетСсылка, Форма.КлючТекущегоВарианта);
		КонецЕсли;
	КонецЕсли;
	
	КлючНастроек = РеквизитыФормы.КлючОбъекта + "/" + Форма.КлючТекущегоВарианта;
	СписокНастроек = ХранилищеПользовательскихНастроекОтчетов.ПолучитьСписок(КлючНастроек);
	КоличествоНастроек = СписокНастроек.Количество();
	ПользовательСсылка = Пользователи.АвторизованныйПользователь();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ИЗ
	|	Справочник.ПользовательскиеНастройкиОтчетов КАК ПользовательскиеНастройкиОтчетов
	|ГДЕ
	|	ПользовательскиеНастройкиОтчетов.Вариант = &ВариантСсылка
	|	И ПользовательскиеНастройкиОтчетов.Пользователь = &ПользовательСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПользовательскиеНастройкиОтчетов.ПометкаУдаления";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантСсылка", РеквизитыФормы.ВариантСсылка);
	Запрос.УстановитьПараметр("ПользовательСсылка", ПользовательСсылка);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЭлементСписка = СписокНастроек.НайтиПоЗначению(Выборка.КлючПользовательскойНастройки);
		
		ПометкаУдаления = (ЭлементСписка = Неопределено);
		Если ПометкаУдаления <> Выборка.ПометкаУдаления Тогда
			НастройкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		КонецЕсли;
		Если ПометкаУдаления Тогда
			Если КоличествоНастроек = 0 Тогда
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.Наименование <> ЭлементСписка.Представление Тогда
			НастройкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.Наименование = ЭлементСписка.Представление;
			НастройкаОбъект.Записать();
		КонецЕсли;
		
		СписокНастроек.Удалить(ЭлементСписка);
		КоличествоНастроек = КоличествоНастроек - 1;
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокНастроек Цикл
		НастройкаОбъект = Справочники.ПользовательскиеНастройкиОтчетов.СоздатьЭлемент();
		НастройкаОбъект.Наименование                  = ЭлементСписка.Представление;
		НастройкаОбъект.КлючПользовательскойНастройки = ЭлементСписка.Значение;
		НастройкаОбъект.Вариант                       = РеквизитыФормы.ВариантСсылка;
		НастройкаОбъект.Пользователь                  = ПользовательСсылка;
		НастройкаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для вызова из события "ПриДобавленииОбработчиковОбновления" конфигурации.

// Полное обновление индекса поиска вариантов отчетов.
//   Следует вызывать из процедуры ПриДобавленииОбработчиковОбновления конфигурации.
//   Внимание! Эта процедура должна вызываться только 1 раз - из модуля конечного прикладного решения.
//     Не предназначена для вызова из библиотек.
//
// Параметры:
//   Обработчики - Коллекция - Передается "как есть" из вызываемой процедуры.
//   Версия - Строка - Версия конфигурации, при переходе на которую
//       необходимо полностью обновить индекс поиска.
//     Рекомендуется указывать последнюю функциональную версию,
//       при обновлении на которую были внесены изменения
//       в представления объектов метаданных или их реквизитов,
//       которые могут выводиться в отчетах.
//     Поднимается при необходимости.
//
// Например:
//	ВариантыОтчетов.ДобавитьОбработчикиПолногоОбновления(Обработчики, "11.1.7.8");
//
// Места использования:
//   <МодульКонфигурации>.ПриДобавленииОбработчиковОбновления().
//
// См. также:
//   ПодсистемыКонфигурацииПереопределяемый.ПриДобавленииПодсистем().
//
Процедура ДобавитьОбработчикиПолногоОбновления(Обработчики, Версия) Экспорт
	
	Если РазрешеноИндексированиеНеразделенныхДанных() Тогда
		Обработчик = Обработчики.Добавить();
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			Обработчик.РежимВыполнения = "Оперативно";
			Обработчик.ОбщиеДанные     = Истина;
		Иначе
			Обработчик.РежимВыполнения = "Отложенно";
			Обработчик.ОбщиеДанные     = Ложь; // Для коробки без разницы, но при значении Истина механика обновления кидает исключение.
		КонецЕсли;
		Обработчик.Идентификатор = Новый УникальныйИдентификатор("38d2a135-53e0-4c68-9bd6-3d6df9b9dcfb");
		Обработчик.Версия        = Версия;
		Обработчик.Процедура     = "ВариантыОтчетов.ОтложенноеОбновлениеОбщихДанныхКонфигурацииПолное";
		Обработчик.Комментарий   = НСтр("ru = 'Полное обновление индекса поиска отчетов, предусмотренных в программе.
			|Поиск отчетов временно недоступен.'");
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("5ba93197-230b-4ac8-9abb-ab3662e5ff76");
	Обработчик.ОбщиеДанные     = Ложь;
	Обработчик.Версия    = Версия;
	Обработчик.Процедура = "ВариантыОтчетов.ОтложенноеОбновлениеРазделенныхДанныхКонфигурацииПолное";
	Обработчик.Комментарий = НСтр("ru = 'Полное обновление индекса поиска отчетов, сохраненных пользователями.
		|Поиск отчетов временно недоступен.'");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для вызова из обработчиков обновления прикладной конфигурации.

// Сбрасывает пользовательские настройки указанных отчетов.
//
// Параметры:
//   Ключ - ОбъектМетаданных: Отчет, Строка, "*" - Отчет, для которого требуется сбросить настройки.
//       * ОбъектМетаданных: Отчет - Отчет, для которого требуется сбросить настройки.
//       * СправочникСсылка.ВариантыОтчетов - Вариант отчета, для которого требуется сбросить настройки.
//       * Строка - Полное имя варианта отчета, для которого требуется сбросить настройки.
//                  Заполняется в формате "<ИмяОтчета>/<ИмяВарианта>".
//                  Если передать "*", то будут сброшены настройки всех отчетов конфигурации.
//   ТипыНастроек - Структура - Необязательный. Типы пользовательских настроек, которые требуется сбросить.
//       Ключи структуры тоже являются необязательными. Значение по умолчанию указано в скобках.
//       * ЭлементОтбора              - Булево - (Ложь) Сбрасывать настройку "ЭлементОтбораКомпоновкиДанных".
//       * ЗначениеПараметраНастроек  - Булево - (Ложь) Сбрасывать настройку "ЗначениеПараметраНастроекКомпоновкиДанных".
//       * ВыбранныеПоля              - Булево - (берется из ключа Прочие) Сбрасывать настройку "ВыбранныеПоляКомпоновкиДанных".
//       * Порядок                    - Булево - (берется из ключа Прочие) Сбрасывать настройку "ПорядокКомпоновкиДанных".
//       * ЭлементУсловногоОформления - Булево - (берется из ключа Прочие) Сбрасывать настройку "ЭлементУсловногоОформленияКомпоновкиДанных".
//       * Прочие                     - Булево - (Истина) Сбрасывать прочие настройки, не описанные в структуре явно.
//
Процедура СброситьПользовательскиеНастройки(Ключ, ТипыНастроек = Неопределено) Экспорт
	КлючиВариантов = Новый Массив;
	Запрос = Новый Запрос;
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ВариантыОтчетов.Отчет.Имя, ВариантыОтчетов.Отчет.ИмяОбъекта) КАК ИмяОтчета,
	|	ВариантыОтчетов.КлючВарианта
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	&Условие";
	Если Ключ = "*" Тогда
		Запрос.Текст = СтрЗаменить(ШаблонЗапроса, "&Условие", "ТипОтчета = ЗНАЧЕНИЕ(Перечисление.ТипыОтчетов.Внутренний)");
	ИначеЕсли ТипЗнч(Ключ) = Тип("ОбъектМетаданных") Тогда
		Запрос.Текст = СтрЗаменить(ШаблонЗапроса, "&Условие", "Отчет = &Отчет");
		Запрос.УстановитьПараметр("Отчет", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Ключ));
	ИначеЕсли ТипЗнч(Ключ) = Тип("СправочникСсылка.ВариантыОтчетов") Тогда
		Запрос.Текст = СтрЗаменить(ШаблонЗапроса, "&Условие", "Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Ключ);
	ИначеЕсли ТипЗнч(Ключ) = Тип("Строка") Тогда
		КлючиВариантов.Добавить(Ключ);
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректное значение параметра ""Отчет""'");
	КонецЕсли;
	Если Не ПустаяСтрока(Запрос.Текст) Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			КлючиВариантов.Добавить(Выборка.ИмяОтчета +"/"+ Выборка.КлючВарианта);
		КонецЦикла;
	КонецЕсли;
	
	Если ТипыНастроек = Неопределено Тогда
		ТипыНастроек = Новый Структура;
	КонецЕсли;
	ВариантыОтчетовКлиентСервер.ДополнитьСтруктуруКлючом(ТипыНастроек, "ЭлементОтбора", Истина);
	ВариантыОтчетовКлиентСервер.ДополнитьСтруктуруКлючом(ТипыНастроек, "ЗначениеПараметраНастроек", Истина);
	СбрасыватьПрочие = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТипыНастроек, "Прочие", Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ПолноеИмяВарианта Из КлючиВариантов Цикл
		КлючОбъекта = "Отчет." + ПолноеИмяВарианта + "/ТекущиеПользовательскиеНастройки";
		ВыборкаХранилища = ХранилищеСистемныхНастроек.Выбрать(Новый Структура("КлючОбъекта", КлючОбъекта));
		ОшибокЧтенияПодряд = 0;
		Пока Истина Цикл
			Попытка
				ЭлементВыборкиПолучен = ВыборкаХранилища.Следующий();
				ОшибокЧтенияПодряд = 0;
			Исключение
				ЭлементВыборкиПолучен = Неопределено;
				ОшибокЧтенияПодряд = ОшибокЧтенияПодряд + 1;
				ОшибкаПоВарианту(
					Неопределено,
					НСтр("ru = 'В процессе выборки пользовательских настроек отчетов из системного хранилища возникла ошибка:'")
					+ Символы.ПС
					+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Если ЭлементВыборкиПолучен = Ложь Тогда
				Прервать;
			ИначеЕсли ЭлементВыборкиПолучен = Неопределено Тогда
				Если ОшибокЧтенияПодряд > 100 Тогда
					Прервать;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ПользовательскиеНастройкиКД = ВыборкаХранилища.Настройки;
			Если ТипЗнч(ПользовательскиеНастройкиКД) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			ЕстьИзменения = Ложь;
			Количество = ПользовательскиеНастройкиКД.Элементы.Количество();
			Для Номер = 1 По Количество Цикл
				ОбратныйИндекс = Количество - Номер;
				ПользовательскаяНастройкаКД = ПользовательскиеНастройкиКД.Элементы[ОбратныйИндекс];
				Тип = ОтчетыКлиентСервер.ТипНастройкиСтрокой(ТипЗнч(ПользовательскаяНастройкаКД));
				Сбрасывать = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТипыНастроек, Тип, СбрасыватьПрочие);
				Если Сбрасывать Тогда
					ПользовательскиеНастройкиКД.Элементы.Удалить(ОбратныйИндекс);
					ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьИзменения Тогда
				ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить(
					ВыборкаХранилища.КлючОбъекта,
					ВыборкаХранилища.КлючНастроек,
					ПользовательскиеНастройкиКД,
					,
					ВыборкаХранилища.Пользователь);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Переносит пользовательские варианты из стандартного хранилища вариантов в хранилище подсистемы.
//   Используется при частичном внедрении - когда ХранилищеВариантовОтчетов установлено не для всей конфигурации,
//   а в свойствах конкретных отчетов, подключенных к подсистеме.
//   Рекомендуется использовать в обработчиках обновления на конкретную версию.
//
// Параметры:
//   ИменаОтчетов - Строка - Необязательный. Имена отчетов, разделенные запятыми.
//
// Пример:
//	// Перенос всех пользовательских вариантов отчетов при обновлении.
//	ВариантыОтчетов.ПеренестиВариантыОтчетовИзСтандартногоХранилища();
//	// Либо перенос пользовательских вариантов отчетов, переведенных на хранилище подсистемы "Варианты отчетов".
//	ВариантыОтчетов.ПеренестиВариантыОтчетовИзСтандартногоХранилища("АнализЖурналаРегистрации, ЗадачиИстекающиеНаДату");
//
Процедура ПеренестиПользовательскиеИзСтандартногоХранилища(ИменаОтчетов = "") Экспорт
	ПредставлениеПроцедуры = НСтр("ru = 'Прямая конвертация вариантов отчетов'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	// Результат, который будет сохранен в хранилище.
	ТаблицаВариантов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПереносВариантовОтчетов", "ТаблицаВариантов", , , "");
	Если ТипЗнч(ТаблицаВариантов) <> Тип("ТаблицаЗначений") Или ТаблицаВариантов.Количество() = 0 Тогда
		ТаблицаВариантов = Новый ТаблицаЗначений;
		ТаблицаВариантов.Колонки.Добавить("Отчет",     ОписаниеТиповСтрока());
		ТаблицаВариантов.Колонки.Добавить("Вариант",   ОписаниеТиповСтрока());
		ТаблицаВариантов.Колонки.Добавить("Автор",     ОписаниеТиповСтрока());
		ТаблицаВариантов.Колонки.Добавить("Настройка", Новый ОписаниеТипов("ХранилищеЗначения"));
		ТаблицаВариантов.Колонки.Добавить("ПредставлениеОтчета",   ОписаниеТиповСтрока());
		ТаблицаВариантов.Колонки.Добавить("ПредставлениеВарианта", ОписаниеТиповСтрока());
		ТаблицаВариантов.Колонки.Добавить("ИдентификаторАвтора",   Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	
	УдалятьВсе = (ИменаОтчетов = "" Или ИменаОтчетов = "*");
	МассивУдаляемыхКлючейОбъектов = Новый Массив;
	
	ВыборкаХранилища = ХранилищеВариантовОтчетов.Выбрать(НовыйФильтрПоКлючуОбъекта(ИменаОтчетов));
	ОшибокЧтенияПодряд = 0;
	Пока Истина Цикл
		Попытка
			ЭлементВыборкиПолучен = ВыборкаХранилища.Следующий();
			ОшибокЧтенияПодряд = 0;
		Исключение
			ЭлементВыборкиПолучен = Неопределено;
			ОшибокЧтенияПодряд = ОшибокЧтенияПодряд + 1;
			ОшибкаПоВарианту(
				Неопределено,
				НСтр("ru = 'В процессе выборки вариантов отчетов из стандартного хранилища возникла ошибка:'")
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если ЭлементВыборкиПолучен = Ложь Тогда
			Если ИменаОтчетов = "" Или ИменаОтчетов = "*" Тогда
				Прервать;
			Иначе
				ВыборкаХранилища = ХранилищеВариантовОтчетов.Выбрать(НовыйФильтрПоКлючуОбъекта(ИменаОтчетов));
				Продолжить;
			КонецЕсли;
		ИначеЕсли ЭлементВыборкиПолучен = Неопределено Тогда
			Если ОшибокЧтенияПодряд > 100 Тогда
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Пропуск не подключенных внутренних отчетов.
		ОтчетМетаданные = Метаданные.НайтиПоПолномуИмени(ВыборкаХранилища.КлючОбъекта);
		Если ОтчетМетаданные <> Неопределено Тогда
			ХранилищеМетаданные = ОтчетМетаданные.ХранилищеВариантов;
			Если ХранилищеМетаданные = Неопределено Или ХранилищеМетаданные.Имя <> "ХранилищеВариантовОтчетов" Тогда
				УдалятьВсе = Ложь;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Внешние варианты отчетов переносятся все, поскольку для них невозможно определить
		// подключены они к хранилищу подсистемы или нет.
		МассивУдаляемыхКлючейОбъектов.Добавить(ВыборкаХранилища.КлючОбъекта);
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ВыборкаХранилища.Пользователь);
		Если ПользовательИБ = Неопределено Тогда
			Пользователь = Справочники.Пользователи.НайтиПоНаименованию(ВыборкаХранилища.Пользователь, Истина);
			Если Не ЗначениеЗаполнено(Пользователь) Тогда
				Продолжить;
			КонецЕсли;
			ИдентификаторПользователя = Пользователь.ИдентификаторПользователяИБ;
		Иначе
			ИдентификаторПользователя = ПользовательИБ.УникальныйИдентификатор;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаВариантов.Добавить();
		СтрокаТаблицы.Отчет     = ВыборкаХранилища.КлючОбъекта;
		СтрокаТаблицы.Вариант   = ВыборкаХранилища.КлючНастроек;
		СтрокаТаблицы.Автор     = ВыборкаХранилища.Пользователь;
		СтрокаТаблицы.Настройка = Новый ХранилищеЗначения(ВыборкаХранилища.Настройки, Новый СжатиеДанных(9));
		СтрокаТаблицы.ПредставлениеВарианта = ВыборкаХранилища.Представление;
		СтрокаТаблицы.ИдентификаторАвтора   = ИдентификаторПользователя;
		Если ОтчетМетаданные = Неопределено Тогда
			СтрокаТаблицы.ПредставлениеОтчета = ВыборкаХранилища.КлючОбъекта;
		Иначе
			СтрокаТаблицы.ПредставлениеОтчета = ОтчетМетаданные.Представление();
		КонецЕсли;
	КонецЦикла;
	
	// Очистка стандартного хранилища.
	Если УдалятьВсе Тогда
		ХранилищеВариантовОтчетов.Удалить(Неопределено, Неопределено, Неопределено);
	Иначе
		Для Каждого КлючОбъекта Из МассивУдаляемыхКлючейОбъектов Цикл
			ХранилищеВариантовОтчетов.Удалить(КлючОбъекта, Неопределено, Неопределено);
		КонецЦикла;
	КонецЕсли;
	
	// Результат выполнения
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
	
	// Загрузка вариантов в хранилище подсистемы.
	ЗагрузитьПользовательские(ТаблицаВариантов);
КонецПроцедуры

// Загружает в хранилище подсистемы варианты отчетов, предварительно сохраненные
//   из системного хранилища вариантов в хранилище общих настроек.
//   Используется для загрузки вариантов отчетов при полном или частичном внедрении.
//   При полном внедрении может вызваться из обработки "ПереносВариантовОтчетов".
//   Рекомендуется использовать в обработчиках обновления на конкретную версию.
//
// Параметры:
//   ТаблицаВариантов - ТаблицаЗначений - Необязательный. Используется в служебных сценариях.
//       * Отчет   - Строка - Полное имя отчета в формате "Отчет.<ИмяОтчета>".
//       * Вариант - Строка - Имя варианта отчета.
//       * Автор   - Строка - Имя пользователя.
//       * Настройка - ХранилищеЗначения - ПользовательскиеНастройкиКомпоновкиДанных.
//       * ПредставлениеОтчета   - Строка - Представление отчета.
//       * ПредставлениеВарианта - Строка - Представление варианта.
//       * ИдентификаторАвтора - УникальныйИдентификатор - Идентификатор пользователя.
//
Процедура ЗагрузитьПользовательские(ТаблицаВариантов = Неопределено) Экспорт
	
	Если ТаблицаВариантов = Неопределено Тогда
		ТаблицаВариантов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПереносВариантовОтчетов", "ТаблицаВариантов", , , "");
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаВариантов) <> Тип("ТаблицаЗначений") Или ТаблицаВариантов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеПроцедуры = НСтр("ru = 'Завершить конвертацию вариантов отчетов'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	// Замена имен колонок под структуру справочника.
	ТаблицаВариантов.Колонки.Отчет.Имя = "ОтчетПолноеИмя";
	ТаблицаВариантов.Колонки.Вариант.Имя = "КлючВарианта";
	ТаблицаВариантов.Колонки.ПредставлениеВарианта.Имя = "Наименование";
	
	// Преобразование имен отчетов в ссылки справочника ИОМ.
	ТаблицаВариантов.Колонки.Добавить("Отчет", Метаданные.Справочники.ВариантыОтчетов.Реквизиты.Отчет.Тип);
	ТаблицаВариантов.Колонки.Добавить("Определен", Новый ОписаниеТипов("Булево"));
	ТаблицаВариантов.Колонки.Добавить("ТипОтчета", Метаданные.Справочники.ВариантыОтчетов.Реквизиты.ТипОтчета.Тип);
	Для Каждого СтрокаТаблицы Из ТаблицаВариантов Цикл
		ОтчетИнформация = СформироватьИнформациюОбОтчетеПоПолномуИмени(СтрокаТаблицы.ОтчетПолноеИмя);
		
		// Проверить результат
		Если ТипЗнч(ОтчетИнформация.ТекстОшибки) = Тип("Строка") Тогда
			ОшибкаПоВарианту(Неопределено, ОтчетИнформация.ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.Определен = Истина;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ОтчетИнформация, "Отчет, ТипОтчета");
	КонецЦикла;
	
	ТаблицаВариантов.Сортировать("ОтчетПолноеИмя Возр, КлючВарианта Возр");
	
	// Существующие варианты отчетов.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаВариантов.Отчет,
	|	ТаблицаВариантов.ОтчетПолноеИмя,
	|	ТаблицаВариантов.ТипОтчета,
	|	ТаблицаВариантов.КлючВарианта,
	|	ТаблицаВариантов.Автор
	|ПОМЕСТИТЬ втВарианты
	|ИЗ
	|	&ТаблицаВариантов КАК ТаблицаВариантов
	|ГДЕ
	|	ТаблицаВариантов.Определен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВарианты.Отчет,
	|	втВарианты.ОтчетПолноеИмя,
	|	втВарианты.ТипОтчета,
	|	втВарианты.КлючВарианта,
	|	ВариантыОтчетов.Ссылка,
	|	ПользователиПоИмени.Ссылка КАК ПользовательПоИмени
	|ИЗ
	|	втВарианты КАК втВарианты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК ПользователиПоИмени
	|		ПО втВарианты.Автор = ПользователиПоИмени.Наименование
	|			И (ПользователиПоИмени.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ПО втВарианты.Отчет = ВариантыОтчетов.Отчет
	|			И втВарианты.КлючВарианта = ВариантыОтчетов.КлючВарианта
	|			И втВарианты.ТипОтчета = ВариантыОтчетов.ТипОтчета";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаВариантов", ТаблицаВариантов);
	Запрос.Текст = ТекстЗапроса;
	
	ВариантыБД = Запрос.Выполнить().Выгрузить();
	
	// Авторы вариантов
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.ИдентификаторПользователяИБ КАК Идентификатор
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ В(&Идентификаторы)
	|	И Пользователи.ПометкаУдаления = ЛОЖЬ";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификаторы", ТаблицаВариантов.ВыгрузитьКолонку("ИдентификаторАвтора"));
	Запрос.Текст = ТекстЗапроса;
	
	ПользователиПоИдентификатору = Запрос.Выполнить().Выгрузить();
	
	ПодсистемыОтчетов = РазмещениеОтчетовВПодсистемах();
	
	// Загрузка вариантов в хранилище подсистемы.
	ОпределенныеВарианты = ТаблицаВариантов.НайтиСтроки(Новый Структура("Определен", Истина));
	Для Каждого СтрокаТаблицы Из ОпределенныеВарианты Цикл
		Найденные = ВариантыБД.НайтиСтроки(Новый Структура("Отчет, КлючВарианта", СтрокаТаблицы.Отчет, СтрокаТаблицы.КлючВарианта));
		ВариантБД = Найденные[0];
		
		// Если вариант уже загружен в справочник "Варианты отчетов" - не загружаем его.
		Если ЗначениеЗаполнено(ВариантБД.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		// СправочникОбъект
		ВариантОбъект = Справочники.ВариантыОтчетов.СоздатьЭлемент();
		
		// Уже подготовленные параметры.
		ЗаполнитьЗначенияСвойств(ВариантОбъект, СтрокаТаблицы, "Наименование, Отчет, ТипОтчета, КлючВарианта");
		
		// Настройки
		Настройки = СтрокаТаблицы.Настройка;
		Если ТипЗнч(Настройки) = Тип("ХранилищеЗначения") Тогда
			Настройки = Настройки.Получить();
		КонецЕсли;
		ВариантОбъект.Настройки = Новый ХранилищеЗначения(Настройки);
		
		// В стандартном хранилище хранятся только пользовательские ВО.
		ВариантОбъект.Пользовательский = Истина;
		ВариантОбъект.ТолькоДляАвтора = Истина;
		
		// Автор варианта
		ПользовательПоИД = ПользователиПоИдентификатору.Найти(СтрокаТаблицы.ИдентификаторАвтора, "Идентификатор");
		Если ПользовательПоИД <> Неопределено И ЗначениеЗаполнено(ПользовательПоИД.Пользователь) Тогда
			ВариантОбъект.Автор = ПользовательПоИД.Пользователь;
		ИначеЕсли ВариантБД <> Неопределено И ЗначениеЗаполнено(ВариантБД.ПользовательПоИмени) Тогда
			ВариантОбъект.Автор = ВариантБД.ПользовательПоИмени;
		Иначе
			ОшибкаПоВарианту(
				ВариантОбъект.Ссылка,
				НСтр("ru = 'Вариант ""%1"" отчета ""%2"": не найден автор ""%3""'"),
				ВариантОбъект.Наименование,
				СтрокаТаблицы.ПредставлениеОтчета,
				СтрокаТаблицы.Автор);
		КонецЕсли;
		
		// Поскольку переносятся пользовательские варианты отчетов,
		// то настройки размещения можно взять только из метаданных отчета.
		Найденные = ПодсистемыОтчетов.НайтиСтроки(Новый Структура("ОтчетПолноеИмя", СтрокаТаблицы.ОтчетПолноеИмя));
		Для Каждого СтрокаПодсистема Из Найденные Цикл
			СтрокаРаздел = ВариантОбъект.Размещение.Добавить();
			СтрокаРаздел.Использование = Истина;
			СтрокаРаздел.Подсистема = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(СтрокаПодсистема.ПодсистемаМетаданные);
		КонецЦикла;
		
		ВариантОбъект.Записать();
	КонецЦикла;
	
	// Очистка
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить("ПереносВариантовОтчетов", "ТаблицаВариантов", "");
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Добавление обработчиков служебных событий (подписок).

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия) Экспорт
	
	// СЕРВЕРНЫЕ СОБЫТИЯ.
	
	// Содержит настройки размещения вариантов отчетов в панели отчетов.
	//
	// Параметры:
	//   Настройки - Коллекция - Содержит настройки всех отчетов и вариантов конфигурации.
	//       Используется для передачи в параметрах вспомогательных методов.
	//
	// Описание:
	//   См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
	//
	// Вспомогательные методы:
	//   1. Функции ОписаниеОтчета и ОписаниеВарианта формируют описание настроек отчета и варианта для последующего изменения:
	//       НастройкиОтчета   = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.<ИмяОтчета>);
	//       НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
	//       Возвращаемые коллекции содержат одинаковый набор свойств.
	//       НастройкиОтчета используются как умолчания для вариантов, описания которых еще не получены.
	//       Подробнее - см. "свойства для изменения" в комментарии к ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
	//   2. Процедура УстановитьРежимВыводаВПанеляхОтчетов позволяет настроить режим группировки вариантов в панелях отчетов:
	//       ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина/Ложь);
	//       ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, Метаданные.Отчеты.<ИмяОтчета>, Истина/Ложь);
	//       ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, Метаданные.Подсистемы.<ИмяПодсистемы>, Истина/Ложь);
	//   3. Процедура НастроитьОтчетВМодулеМенеджера позволяет переопределять настройки отчета в его модуле менеджера:
	//       ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.<ИмяОтчета>);
	//
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.ВариантыОтчетов\ПриНастройкеВариантовОтчетов");
	
	// Регистрация изменений в именах вариантов отчетов.
	//   Используется в обработчиках обновления, в целях контроля ссылочной целостности
	//   и для сохранения настроек, сделанных администратором для предопределенных вариантов.
	//
	// Параметры:
	//   Изменения - ТаблицаЗначений - Изменения в именах вариантов отчетов.
	//       * Отчет - ОбъектМетаданных - Метаданные отчета, в схеме которого изменилось имя варианта.
	//       * СтароеИмяВарианта - Строка - Старое имя варианта, до изменения.
	//       * АктуальноеИмяВарианта - Строка - Текущее (последнее актуальное) имя варианта.
	//
	// Описание:
	//   См. ВариантыОтчетовПереопределяемый.ЗарегистрироватьИзмененияКлючейВариантовОтчетов().
	//
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.ВариантыОтчетов\ПриРегистрацииИзмененийИменВариантовОтчетов");
	
КонецПроцедуры

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	СерверныйМодуль = "ВариантыОтчетов";
	
	Событие = "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления";
	СерверныеОбработчики[Событие].Добавить(СерверныйМодуль);
	
	Событие = "СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииИсключенийПоискаСсылок";
	СерверныеОбработчики[Событие].Добавить(СерверныйМодуль);
	
	Событие = "СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПереименованийОбъектовМетаданных";
	СерверныеОбработчики[Событие].Добавить(СерверныйМодуль);
	
	Событие = "СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентаПриЗапуске";
	СерверныеОбработчики[Событие].Добавить(СерверныйМодуль);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ВыгрузкаЗагрузкаДанных") Тогда
		Событие = "ТехнологияСервиса.ВыгрузкаЗагрузкаДанных\ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке";
		СерверныеОбработчики[Событие].Добавить(СерверныйМодуль);
		
		Событие = "ТехнологияСервиса.ВыгрузкаЗагрузкаДанных\ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки";
		СерверныеОбработчики[Событие].Добавить(СерверныйМодуль);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий.

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - Обработчики обновления.
//       См. описание метода ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления().
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	////////////////////////////////////////////////////////////////////////////////
	// План обновления:
	
	////////////////////////////////////////////////////////////////////////////////
	// 1. Обновить общие данные.
	Обработчик = Обработчики.Добавить();
	Обработчик.ВыполнятьВГруппеОбязательных = Ложь;
	Обработчик.ОбщиеДанные                  = Истина;
	Обработчик.УправлениеОбработчиками      = Истина;
	Обработчик.РежимВыполнения              = "Оперативно";
	Обработчик.Версия    = "*";
	Обработчик.Процедура = "ВариантыОтчетов.ОперативноеОбновлениеОбщихДанныхКонфигурации";
	Обработчик.Приоритет = 90;
	
	////////////////////////////////////////////////////////////////////////////////
	// 2. Обновить разделенные данные.
	// 2.1. Перевести разделенные данные на версию 2.1.1.0.
	Обработчик = Обработчики.Добавить();
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.ОбщиеДанные                  = Ложь;
	Обработчик.УправлениеОбработчиками      = Ложь;
	Обработчик.РежимВыполнения              = "Монопольно";
	Обработчик.Версия    = "2.1.1.0";
	Обработчик.Процедура = "ВариантыОтчетов.ПерейтиКРедакции21";
	Обработчик.Приоритет = 80;
	
	// 2.2. Перевести разделенные данные на версию 2.1.3.6.
	Обработчик = Обработчики.Добавить();
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.ОбщиеДанные                  = Ложь;
	Обработчик.УправлениеОбработчиками      = Ложь;
	Обработчик.РежимВыполнения              = "Монопольно";
	Обработчик.Версия    = "2.1.3.6";
	Обработчик.Процедура = "ВариантыОтчетов.ЗаполнитьСсылкиПредопределенных";
	Обработчик.Приоритет = 80;
	
	// 2.3. Удалить устаревшие отложенные разделенные обязательные (на *) обработчики обновления.
	Обработчик = Обработчики.Добавить();
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.ОбщиеДанные                  = Ложь;
	Обработчик.УправлениеОбработчиками      = Ложь;
	Обработчик.РежимВыполнения              = "Оперативно";
	Обработчик.Версия    = "2.3.2.32";
	Обработчик.Процедура = "ВариантыОтчетов.УдалитьУстаревшиеОбработчики";
	Обработчик.Приоритет = 85;
	
	// 2.4. Обновить разделенные данные в локальном режиме.
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия    = "*";
	Обработчик.Процедура = "ВариантыОтчетов.ОперативноеОбновлениеРазделенныхДанныхКонфигурации";
	Обработчик.Приоритет = 70;
	
	////////////////////////////////////////////////////////////////////////////////
	// 3. Отложенное обновление.
	// 3.1. Заполнить информацию для поиска вариантов отчетов.
	
	Если РазрешеноИндексированиеНеразделенныхДанных() Тогда
		Обработчик = Обработчики.Добавить();
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			Обработчик.РежимВыполнения = "Оперативно";
			Обработчик.ОбщиеДанные     = Истина;
		Иначе
			Обработчик.РежимВыполнения = "Отложенно";
			Обработчик.ОбщиеДанные     = Ложь; // Для коробки без разницы, но при значении Истина механика обновления кидает исключение.
		КонецЕсли;
		Обработчик.Идентификатор = Новый УникальныйИдентификатор("0a485fd0-d72b-434f-917a-9c63a40f69cb");
		Обработчик.Версия        = "*";
		Обработчик.Процедура     = "ВариантыОтчетов.ОтложенноеОбновлениеОбщихДанныхКонфигурацииИнкрементальное";
		Обработчик.Комментарий   = НСтр("ru = 'Обновление индекса поиска отчетов, предусмотренных в программе.
			|Поиск отчетов временно недоступен.'");
	КонецЕсли;
	
	// 3.2. Заполнить информацию для поиска вариантов отчетов.
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("814d41ec-82e2-4d25-9334-8335e589fc1f");
	Обработчик.ОбщиеДанные     = Ложь;
	Обработчик.Версия    = "2.2.3.31";
	Обработчик.Процедура = "ВариантыОтчетов.СократитьКоличествоБыстрыхНастроек";
	Обработчик.Комментарий = НСтр("ru = 'Уменьшает количество быстрых настроек
		|в пользовательских отчетах до 2 шт.'");
	
КонецПроцедуры

// Возникает при получении исключений поиска ссылок.
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	
	ИсключенияПоискаСсылок.Добавить(Метаданные.Справочники.ВариантыОтчетов.ТабличныеЧасти.Размещение.Реквизиты.Подсистема);
	
КонецПроцедуры

// Заполняет переименования тех объектов метаданных, которые невозможно
// автоматически найти по типу, но ссылки на которые требуется сохранять
// в базе данных (например: подсистемы, роли).
//
// См. также:
//   ОбщегоНазначения.ДобавитьПереименование().
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	Библиотека = "СтандартныеПодсистемы";
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог, "2.1.0.2", "Роль.ЧтениеВариантовОтчетов", "Роль.ИспользованиеВариантовОтчетов", Библиотека);
	
КонецПроцедуры

// Заполняет массив типов неразделенных данных, для которых поддерживается сопоставление ссылок
// при загрузке данных в другую информационную базу.
//
// Параметры:
//   Типы - Массив из ОбъектМетаданных.
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Справочники.ПредопределенныеВариантыОтчетов);
	
КонецПроцедуры

// Заполняет параметры, которые используется клиентским кодом на запуске конфигурации.
//
// Параметры:
//   Параметры - Структура - Параметры запуска.
//
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	Параметры.Вставить("ВариантыОтчетов", Новый ФиксированнаяСтруктура(ПараметрыКлиента()));
КонецПроцедуры

// Заполняет массив типов, исключаемых из выгрузки и загрузки данных.
//
// Параметры:
//  Типы - Массив(Типы).
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Справочники.ПредопределенныеВариантыОтчетовРасширений);
	Типы.Добавить(Метаданные.РегистрыСведений.ПредопределенныеВариантыОтчетовВерсийРасширений);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов.

// Получает объект отчета по ссылке варианта отчета.
//
// Параметры:
//   Параметры - Структура - Параметры подключения и формирования отчета.
//       * СсылкаВарианта - СправочникСсылка.ВариантыОтчетов - Ссылка варианта отчета.
//       * СсылкаОтчета   - Произвольный - Ссылка отчета.
//       * КлючВарианта   - Строка - Имя предопределенного или идентификатор пользовательского варианта отчета.
//       * ИдентификаторФормы - Неопределено, УникальныйИдентификатор - Идентификатор формы, из которой подключается отчет.
//
// Возвращаемое значение:
//   Структура - Параметры отчета, в том числе Объект отчета.
//       * СсылкаОтчета - Произвольный     - Ссылка отчета.
//       * ПолноеИмя    - Строка           - Полное имя отчета.
//       * Метаданные   - ОбъектМетаданных - Метаданные отчета.
//       * Объект       - ОтчетОбъект.<Имя отчета>, ВнешнийОтчет - Объект отчета.
//           ** КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Настройки отчета.
//           ** СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема отчета.
//       * КлючВарианта - Строка           - Имя предопределенного или идентификатор пользовательского варианта отчета.
//       * АдресСхемы   - Строка           - Адрес временного хранилища по которому размещена схема отчета.
//       * Успех        - Булево           - Истина если удалось подключить отчет.
//       * ТекстОшибки  - Строка           - Текст ошибки.
//
// Места использования:
//   РассылкаОтчетов.ИнициализироватьОтчет().
//
Функция ПодключитьОтчетИЗагрузитьНастройки(Параметры) Экспорт
	Результат = Новый Структура("СсылкаВарианта, СсылкаОтчета, КлючВарианта, НастройкиФормы,
		|Объект, Метаданные, ПолноеИмя,
		|СхемаКД, АдресСхемы, СхемаМодифицирована, НастройкиКД, ПользовательскиеНастройкиКД,
		|ТекстОшибки, Успех");
	ЗаполнитьЗначенияСвойств(Результат, Параметры);
	Результат.Успех = Ложь;
	Результат.СхемаМодифицирована = Ложь;
	Результат.НастройкиФормы = ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию();
	
	// Поддержка возможности прямого выбора ссылок дополнительных отчетов в рассылках отчетов.
	Если ТипЗнч(Результат.НастройкиКД) <> Тип("НастройкиКомпоновкиДанных")
		И Результат.КлючВарианта = Неопределено
		И Результат.Объект = Неопределено
		И ТипЗнч(Результат.СсылкаВарианта) = ВариантыОтчетовКлиентСервер.ТипСсылкиДополнительногоОтчета() Тогда
		// Автоопределение ключа и ссылки варианта если передана только ссылка доп. отчета.
		Результат.СсылкаОтчета = Результат.СсылкаВарианта;
		Результат.СсылкаВарианта = Неопределено;
		ПодключениеОтчета = ПодключитьОтчетОбъект(Результат.СсылкаОтчета, Истина);
		Если Не ПодключениеОтчета.Успех Тогда
			Результат.ТекстОшибки = ПодключениеОтчета.ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Результат, ПодключениеОтчета, "Объект, Метаданные, ПолноеИмя");
		ПодключениеОтчета.Очистить();
		Если Результат.Объект.СхемаКомпоновкиДанных = Неопределено Тогда
			Результат.Успех = Истина;
			Возврат Результат;
		КонецЕсли;
		ВариантНастроекКД = Результат.Объект.СхемаКомпоновкиДанных.ВариантыНастроек.Получить(0);
		Результат.КлючВарианта = ВариантНастроекКД.Имя;
		Результат.НастройкиКД  = ВариантНастроекКД.Настройки;
		Результат.СсылкаВарианта = ПолучитьСсылку(Результат.СсылкаОтчета, Результат.КлючВарианта);
	КонецЕсли;
	
	НадоПрочитатьСсылкуОтчета = (Результат.Объект = Неопределено И Результат.СсылкаОтчета = Неопределено);
	НадоПрочитатьНастройки = (ТипЗнч(Результат.НастройкиКД) <> Тип("НастройкиКомпоновкиДанных"));
	Если НадоПрочитатьСсылкуОтчета Или НадоПрочитатьНастройки Тогда
		Если ТипЗнч(Результат.СсылкаВарианта) <> Тип("СправочникСсылка.ВариантыОтчетов")
			Или Не ЗначениеЗаполнено(Результат.СсылкаВарианта) Тогда
			Если Не НадоПрочитатьСсылкуОтчета И Результат.КлючВарианта <> Неопределено Тогда
				Результат.СсылкаВарианта = ПолучитьСсылку(Результат.СсылкаОтчета, Результат.КлючВарианта);
			КонецЕсли;
			Если Результат.СсылкаВарианта = Неопределено Тогда
				Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В методе ""%1"" не указаны параметры ""%2"".'"),
					"ПодключитьОтчетИЗагрузитьНастройки",
					"СсылкаВарианта, СсылкаОтчета, КлючВарианта");
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		ИменаСвойств = "КлючВарианта" + ?(НадоПрочитатьСсылкуОтчета, ", Отчет", "") + ?(НадоПрочитатьНастройки, ", Настройки", "");
		СвойстваВарианта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Результат.СсылкаВарианта, ИменаСвойств);
		Результат.КлючВарианта = СвойстваВарианта.КлючВарианта;
		Если НадоПрочитатьСсылкуОтчета Тогда
			Результат.СсылкаОтчета = СвойстваВарианта.Отчет;
		КонецЕсли;
		Если НадоПрочитатьНастройки Тогда
			Результат.НастройкиКД = СвойстваВарианта.Настройки.Получить();
		КонецЕсли;
	КонецЕсли;
	
	// Подключение объекта отчета.
	Если Результат.Объект = Неопределено Тогда
		ПодключениеОтчета = ПодключитьОтчетОбъект(Результат.СсылкаОтчета, Истина);
		Если Не ПодключениеОтчета.Успех Тогда
			Результат.ТекстОшибки = ПодключениеОтчета.ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Результат, ПодключениеОтчета, "Объект, Метаданные, ПолноеИмя");
		ПодключениеОтчета.Очистить();
	КонецЕсли;
	
	Если Результат.Объект.СхемаКомпоновкиДанных = Неопределено Тогда
		Результат.Успех = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ОтчетОбъект = Результат.Объект;
	
	// Чтение настроек.
	Если ТипЗнч(Результат.НастройкиКД) <> Тип("НастройкиКомпоновкиДанных") Тогда
		ВариантНастроекКД = ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек.Найти(Результат.КлючВарианта);
		Если ВариантНастроекКД = Неопределено Тогда
			Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вариант ""%1"" не найден в схеме отчета ""%2"".'"),
				Результат.КлючВарианта,
				Строка(Результат.СсылкаОтчета));
			Возврат Результат;
		КонецЕсли;
		Результат.НастройкиКД = ВариантНастроекКД.Настройки;
	КонецЕсли;
	
	// Инициализация схемы.
	КомпоновщикНастроекКД = ОтчетОбъект.КомпоновщикНастроек;
	
	ФиксированныеНастройкиКД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ФиксированныеНастройкиКД");
	Если ТипЗнч(ФиксированныеНастройкиКД) = Тип("НастройкиКомпоновкиДанных")
		И КомпоновщикНастроекКД.ФиксированныеНастройки <> ФиксированныеНастройкиКД Тогда
		КомпоновщикНастроекКД.ЗагрузитьФиксированныеНастройки(ФиксированныеНастройкиКД);
	КонецЕсли;
	
	АдресСхемыЗаполнен = (ТипЗнч(Результат.АдресСхемы) = Тип("Строка") И ЭтоАдресВременногоХранилища(Результат.АдресСхемы));
	Если АдресСхемыЗаполнен И ТипЗнч(Результат.СхемаКД) <> Тип("СхемаКомпоновкиДанных") Тогда
		Результат.СхемаКД = ПолучитьИзВременногоХранилища(Результат.АдресСхемы);
	КонецЕсли;
	
	Результат.СхемаМодифицирована = (ТипЗнч(Результат.СхемаКД) = Тип("СхемаКомпоновкиДанных"));
	Если Результат.СхемаМодифицирована Тогда
		ОтчетОбъект.СхемаКомпоновкиДанных = Результат.СхемаКД;
	КонецЕсли;
	
	Если Не АдресСхемыЗаполнен И ТипЗнч(ОтчетОбъект.СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		ИдентификаторФормы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ИдентификаторФормы");
		Если ТипЗнч(ИдентификаторФормы) = Тип("УникальныйИдентификатор") Тогда
			АдресСхемыЗаполнен = Истина;
			Результат.АдресСхемы = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, ИдентификаторФормы);
		ИначеЕсли Результат.СхемаМодифицирована Тогда
			АдресСхемыЗаполнен = Истина;
			Результат.АдресСхемы = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных);
		КонецЕсли;
	КонецЕсли;
	
	Если АдресСхемыЗаполнен Тогда
		КомпоновщикНастроекКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Результат.АдресСхемы));
	КонецЕсли;
	
	// Чтение настроек.
	ОтчетыСНастройками = ВариантыОтчетовПовтИсп.Параметры().ОтчетыСНастройками;
	Если ОтчетыСНастройками.Найти(Результат.СсылкаОтчета) <> Неопределено Тогда
		ОтчетОбъект.ОпределитьНастройкиФормы(Неопределено, Результат.КлючВарианта, Результат.НастройкиФормы);
		Если Результат.НастройкиФормы.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
			КлючСхемы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "КлючСхемы");
			ОтчетОбъект.ПередЗагрузкойНастроекВКомпоновщик(
				Результат,
				КлючСхемы,
				Результат.КлючВарианта,
				Результат.НастройкиКД,
				Результат.ПользовательскиеНастройкиКД);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Результат.НастройкиКД) = Тип("НастройкиКомпоновкиДанных")
		И КомпоновщикНастроекКД.Настройки <> Результат.НастройкиКД Тогда
		Если ТипЗнч(Результат.ПользовательскиеНастройкиКД) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
			Результат.ПользовательскиеНастройкиКД = КомпоновщикНастроекКД.ПользовательскиеНастройки;
		КонецЕсли;
		КомпоновщикНастроекКД.ЗагрузитьНастройки(Результат.НастройкиКД);
	КонецЕсли;
	Если ТипЗнч(Результат.ПользовательскиеНастройкиКД) = Тип("ПользовательскиеНастройкиКомпоновкиДанных")
		И КомпоновщикНастроекКД.ПользовательскиеНастройки <> Результат.ПользовательскиеНастройкиКД Тогда
		КомпоновщикНастроекКД.ЗагрузитьПользовательскиеНастройки(Результат.ПользовательскиеНастройкиКД);
	КонецЕсли;
	
	Результат.Успех = Истина;
	Возврат Результат;
КонецФункции

// Получает объект отчета по ссылке варианта отчета.
//
// Параметры:
//   СсылкаОтчета -
//     - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Ссылка отчета конфигурации.
//     - СправочникСсылка.ИдентификаторыОбъектовРасширений - Ссылка отчета расширения.
//     - Произвольный - Ссылка дополнительного или внешнего отчета.
//
// Возвращаемое значение:
//   Структура - Параметры отчета, в том числе Объект отчета.
//       * Объект      - ОтчетОбъект.<Имя отчета>, ВнешнийОтчет - Объект отчета.
//       * Имя         - Строка           - Имя объекта отчета.
//       * ПолноеИмя   - Строка           - Полное имя объекта отчета.
//       * Метаданные  - ОбъектМетаданных - Объект метаданных отчета.
//       * Ссылка      - Произвольный     - Ссылка отчета.
//       * Успех       - Булево           - Истина если удалось подключить отчет.
//       * ТекстОшибки - Строка           - Текст ошибки.
//
// Места использования:
//   РассылкаОтчетов.ИнициализироватьОтчет().
//
Функция ПодключитьОтчетОбъект(СсылкаОтчета, ПолучатьМетаданные)
	Результат = Новый Структура("Объект, Имя, ПолноеИмя, Метаданные, Ссылка, ТекстОшибки");
	Результат.Вставить("Успех", Ложь);
	
	Если СсылкаОтчета = Неопределено Тогда
		Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В методе ""%1"" не указан параметр ""%2"".'"),
			"ПодключитьОтчетОбъект",
			"СсылкаОтчета");
		Возврат Результат;
	Иначе
		Результат.Ссылка = СсылкаОтчета;
	КонецЕсли;
	
	Если ТипЗнч(Результат.Ссылка) = Тип("Строка") Тогда
		Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отчет ""%1"" записан как внешний и не может быть подключен из программы'"),
			Результат.Ссылка);
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(Результат.Ссылка) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных")
		Или ТипЗнч(Результат.Ссылка) = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
		Результат.Имя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.Ссылка, "Имя");
		Если ПолучатьМетаданные Тогда
			Результат.Метаданные = Метаданные.Отчеты.Найти(Результат.Имя);
			Если Результат.Метаданные = Неопределено Тогда
				Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Отчет ""%1"" не найден в программе'"),
					Результат.Имя);
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
		Результат.Объект = Отчеты[Результат.Имя].Создать();
		Результат.Успех = Истина;
	Иначе
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
			МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
			МодульДополнительныеОтчетыИОбработки.ПриПодключенииДопОтчета(Результат.Ссылка, Результат, Результат.Успех, ПолучатьМетаданные);
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.Успех И ПолучатьМетаданные Тогда
		Результат.ПолноеИмя = Результат.Метаданные.ПолноеИмя();
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Обновляет варианты дополнительного отчета при его записи.
//
// Места использования:
//   Справочник.ДополнительныеОтчетыИОбработки.ПриЗаписиГлобальногоОтчета().
//
Процедура ПриЗаписиДополнительногоОтчета(ТекущийОбъект, Отказ, ВнешнийОбъект) Экспорт
	
	Если Не ВариантыОтчетовПовтИсп.ПравоДобавления() Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недостаточно прав доступа для записи вариантов дополнительного отчета ""%1"".'"),
			ТекущийОбъект.Наименование);
		ОшибкаПоВарианту(ТекущийОбъект.Ссылка, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ПометкаУдаления = ТекущийОбъект.ПометкаУдаления;
	Если Не ТекущийОбъект.ИспользуетХранилищеВариантов Или Не ТекущийОбъект.ДополнительныеСвойства.ПубликацияИспользуется Тогда
		ПометкаУдаления = Истина;
	КонецЕсли;
	
	ПредопределенныеВарианты = Новый СписокЗначений;
	Если ТекущийОбъект.ИспользуетХранилищеВариантов Тогда
		ОтчетМетаданные = ВнешнийОбъект.Метаданные();
		СхемаКДМетаданные = ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных;
		Если СхемаКДМетаданные <> Неопределено Тогда
			СхемаКД = ВнешнийОбъект.ПолучитьМакет(СхемаКДМетаданные.Имя);
			Для Каждого ВариантНастроекКД Из СхемаКД.ВариантыНастроек Цикл
				ПредопределенныеВарианты.Добавить(ВариантНастроекКД.Имя, ВариантНастроекКД.Представление);
			КонецЦикла;
		Иначе
			ПредопределенныеВарианты.Добавить("", ОтчетМетаданные.Представление());
		КонецЕсли;
	КонецЕсли;
	
	// При снятии пометки удаления доп. отчета пометка удаления снимается только для предопределенных вариантов отчетов
	// (для пользовательских не снимается).
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.Ссылка,
	|	Таблица.КлючВарианта,
	|	Таблица.Пользовательский,
	|	Таблица.ПометкаУдаления,
	|	Таблица.Наименование
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК Таблица
	|ГДЕ
	|	Таблица.Отчет = &Отчет
	|	И Таблица.Пользовательский = ЛОЖЬ";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отчет", ТекущийОбъект.Ссылка);
	Если ПометкаУдаления = Истина Тогда
		// При установке пометки удаления доп. отчета пометка удаления устанавливается для всех вариантов отчетов - и
		// пользовательских и предопределенных.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Таблица.Пользовательский = ЛОЖЬ", "");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	// Установка пометки удаления.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПометкаУдаленияВарианта = ПометкаУдаления;
		ЭлементСписка = ПредопределенныеВарианты.НайтиПоЗначению(Выборка.КлючВарианта);
		Если Не ПометкаУдаленияВарианта И Не Выборка.Пользовательский И ЭлементСписка = Неопределено Тогда
			// Предопределенный вариант, который не найден в списке предопределенных для данного отчета.
			ПометкаУдаленияВарианта = Истина;
		КонецЕсли;
		
		Если Выборка.ПометкаУдаления <> ПометкаУдаленияВарианта Тогда
			ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных", Истина);
			Если ПометкаУдаленияВарианта Тогда
				ВариантОбъект.ДополнительныеСвойства.Вставить("ИндексироватьСхему", Ложь);
			Иначе
				ВариантОбъект.ДополнительныеСвойства.Вставить("ОтчетОбъект", ВнешнийОбъект);
			КонецЕсли;
			ВариантОбъект.УстановитьПометкуУдаления(ПометкаУдаленияВарианта);
		КонецЕсли;
		
		Если ЭлементСписка <> Неопределено Тогда
			ПредопределенныеВарианты.Удалить(ЭлементСписка);
			Если Выборка.Наименование <> ЭлементСписка.Представление Тогда
				ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ВариантОбъект.Наименование = ЭлементСписка.Представление;
				ВариантОбъект.ДополнительныеСвойства.Вставить("ОтчетОбъект", ВнешнийОбъект);
				ВариантОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПометкаУдаления Тогда
		// Зарегистрировать новые
		Для Каждого ЭлементСписка Из ПредопределенныеВарианты Цикл
			ВариантОбъект = Справочники.ВариантыОтчетов.СоздатьЭлемент();
			ВариантОбъект.Отчет                = ТекущийОбъект.Ссылка;
			ВариантОбъект.ТипОтчета            = Перечисления.ТипыОтчетов.Дополнительный;
			ВариантОбъект.КлючВарианта         = ЭлементСписка.Значение;
			ВариантОбъект.Наименование         = ЭлементСписка.Представление;
			ВариантОбъект.Пользовательский     = Ложь;
			ВариантОбъект.ВидимостьПоУмолчанию = Истина;
			ВариантОбъект.ДополнительныеСвойства.Вставить("ОтчетОбъект", ВнешнийОбъект);
			ВариантОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получает варианты переданного отчета и их представления.
//
// Места использования:
//   ПользователиСлужебный.ПриПолученииПользовательскихВариантовОтчетов().
//
Процедура ПользовательскиеВариантыОтчетов(ОтчетМетаданные, ПользовательИнформационнойБазы, ТаблицаВариантовОтчетов, СтандартнаяОбработка) Экспорт
	
	КлючОтчета = "Отчет" + "." + ОтчетМетаданные.Имя;
	ВсеВариантыОтчета = ХранилищаНастроек.ХранилищеВариантовОтчетов.ПолучитьСписок(КлючОтчета, ПользовательИнформационнойБазы);
	ВариантыОтчета = Новый СписокЗначений;
	
	Для Каждого ВариантОтчета Из ВсеВариантыОтчета Цикл
		
		ЭлементСправочника = Справочники.ВариантыОтчетов.НайтиПоНаименованию(ВариантОтчета.Представление);
		
		Если ЭлементСправочника <> Неопределено
			И ЭлементСправочника.ТолькоДляАвтора Тогда
			
			СтрокаВариантовОтчетов = ТаблицаВариантовОтчетов.Добавить();
			СтрокаВариантовОтчетов.КлючОбъекта = "Отчет." + ОтчетМетаданные.Имя;
			СтрокаВариантовОтчетов.КлючВарианта = ВариантОтчета.Значение;
			СтрокаВариантовОтчетов.Представление = ВариантОтчета.Представление;
			СтрокаВариантовОтчетов.СтандартнаяОбработка = Ложь;
			
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ЭлементСправочника <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет переданный вариант отчета из хранилища вариантов отчетов.
//
// Места использования:
//   ПользователиСлужебный.ПриУдаленииПользовательскихВариантовОтчета().
//
Процедура УдалитьПользовательскийВариантОтчета(СведенияОВариантеОтчета, ПользовательИнформационнойБазы, СтандартнаяОбработка) Экспорт
	
	Если СведенияОВариантеОтчета.СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ХранилищаНастроек.ХранилищеВариантовОтчетов.Удалить(СведенияОВариантеОтчета.КлючОбъекта,
		СведенияОВариантеОтчета.КлючВарианта, ПользовательИнформационнойБазы);
	
КонецПроцедуры

// Определить список справочников, доступных для загрузки с помощью подсистемы "Загрузка данных из файла".
//
// Параметры:
//  ЗагружаемыеСправочники - ТаблицаЗначений - список справочников, в которые возможна загрузка данных.
//      * ПолноеИмя          - Строка - полное имя справочника (как в метаданных).
//      * Представление      - Строка - представление справочника в списке выбора.
//      * ПрикладнаяЗагрузка - Булево - если Истина, значит справочник использует собственный алгоритм загрузки и
//                                      в модуле менеджера справочника определены функции.
//
Процедура ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт
	
	// Загрузка в справочник ПользовательскиеНастройкиОтчетов запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.ПользовательскиеНастройкиОтчетов.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность 
// редактирования реквизитов при групповом изменении.
//
// Параметры:
//   Объекты - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                            подключенного к подсистеме "Групповое изменение объектов". 
//                            Дополнительно в значении могут быть перечислены имена экспортных функций:
//                            "РеквизитыНеРедактируемыеВГрупповойОбработке",
//                            "РеквизитыРедактируемыеВГрупповойОбработке".
//                            Каждое имя должно начинаться с новой строки.
//                            Если указана пустая строка, значит в модуле менеджера определены обе функции.
//
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Справочники.ВариантыОтчетов.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ПользовательскиеНастройкиОтчетов.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ПредопределенныеВариантыОтчетов.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ПредопределенныеВариантыОтчетовРасширений.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
КонецПроцедуры

// См. одноименную процедуру в общем модуле ПользователиПереопределяемый.
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	// СовместноДляПользователейИВнешнихПользователей.
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(
		Метаданные.Роли.ИспользованиеВариантовОтчетов.Имя);
	
КонецПроцедуры

// Формирует параметры открытия формы отчета.
//   Используется перед вызовом ВариантыОтчетовКлиент.ОткрытьФормуОтчета().
//
// Параметры:
//   ВариантСсылка - СправочникСсылка.ВариантыОтчетов - Ссылка открываемого варианта отчета.
//
Функция ПараметрыОткрытия(ВариантСсылка) Экспорт
	ПараметрыОткрытия = Новый Структура("Ссылка, Отчет, ТипОтчета, ИмяОтчета, КлючВарианта, КлючЗамеров");
	Если ТипЗнч(ВариантСсылка) = ВариантыОтчетовКлиентСервер.ТипСсылкиДополнительногоОтчета() Тогда
		// Поддержка возможности прямого выбора ссылок дополнительных отчетов в рассылках отчетов.
		ПараметрыОткрытия.Отчет     = ВариантСсылка;
		ПараметрыОткрытия.ТипОтчета = "Дополнительный";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВариантыОтчетов.Отчет,
		|	ВариантыОтчетов.ТипОтчета,
		|	ВариантыОтчетов.Отчет.Имя КАК ИмяОтчета,
		|	ВариантыОтчетов.КлючВарианта,
		|	ВариантыОтчетов.ПредопределенныйВариант.КлючЗамеров КАК КлючЗамеров
		|ИЗ
		|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|ГДЕ
		|	ВариантыОтчетов.Ссылка = &Ссылка";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ВариантСсылка);
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Не Выборка.Следующий() Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Недостаточно прав для открытия варианта ""%1"".'"), Строка(ВариантСсылка));
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, Выборка);
		ПараметрыОткрытия.Ссылка    = ВариантСсылка;
		ПараметрыОткрытия.ТипОтчета = ВариантыОтчетовКлиентСервер.ТипОтчетаСтрокой(Выборка.ТипОтчета, Выборка.Отчет);
	КонецЕсли;
	
	ПриПодключенииОтчета(ПараметрыОткрытия);
	
	Возврат ПараметрыОткрытия;
КонецФункции

// Подключение дополнительных отчетов.
Процедура ПриПодключенииОтчета(ПараметрыОткрытия) Экспорт
	
	ПараметрыОткрытия.Вставить("Подключен", Ложь);
	
	Если ПараметрыОткрытия.ТипОтчета = "Внутренний" Тогда
		ПараметрыОткрытия.Подключен = Истина; // Отчеты конфигурации всегда подключены.
	ИначеЕсли ПараметрыОткрытия.ТипОтчета = "Расширение" Тогда
		Если Метаданные.Отчеты.Найти(ПараметрыОткрытия.ИмяОтчета) = Неопределено Тогда
			СтандартныеПодсистемыКлиентСервер.ВывестиПредупреждение(ПараметрыОткрытия,
				НСтр("ru = 'Отчет ""%1"" не найден в программе.
					|Возможно, расширение с отчетом было отключено.'"));
		Иначе
			ПараметрыОткрытия.Подключен = Истина;
		КонецЕсли;
	ИначеЕсли ПараметрыОткрытия.ТипОтчета = "Дополнительный" Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
			МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
			МодульДополнительныеОтчетыИОбработки.ПриПодключенииОтчета(ПараметрыОткрытия);
		Иначе
			СтандартныеПодсистемыКлиентСервер.ВывестиПредупреждение(ПараметрыОткрытия,
				НСтр("ru = 'Невозможно открыть вариант дополнительного отчета'"),
				НСтр("ru = 'Не внедрена обслуживающая подсистема.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// См. описание в процедуре ЗаполнитьВсеПараметрыРаботыРасширений
// общего модуля СтандартныеПодсистемыСервер.
//
Процедура ПриЗаполненииВсехПараметровРаботыРасширений() Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("Конфигурация",      Ложь);
	Настройки.Вставить("Расширения",        Истина);
	
	Настройки.Вставить("ОбщиеДанные",       Истина);
	Настройки.Вставить("РазделенныеДанные", Истина);
	Настройки.Вставить("Оперативное",       Истина);
	Настройки.Вставить("Отложенное",        Истина);
	Настройки.Вставить("Полное",            Истина);
	
	Обновить(Настройки);
	
КонецПроцедуры

// См. описание в процедуре ОчиститьВсеПараметрыРаботыРасширений
// общего модуля СтандартныеПодсистемыСервер.
//
Процедура ПриОчисткеВсехПараметровРаботыРасширений() Экспорт
	
	НаборЗаписей = РегистрыСведений.ПредопределенныеВариантыОтчетовВерсийРасширений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВерсияРасширений.Установить(ПараметрыСеанса.ВерсияРасширений);
	НаборЗаписей.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры служебного программного интерфейса.

// Актуализирует данные подсистемы с учетом режима работы программы.
//   Пример использования: после очистки хранилищ настроек.
//
// Параметры:
//   Настройки - Структура - Необязательный. Настройки обновления.
//       * Конфигурация - Булево - Необязательный. Обновлять кэши метаданных конфигурации.
//       * Расширения   - Булево - Необязательный. Обновлять кэши метаданных расширений.
//       * ОбщиеДанные       - Булево - Необязательный. Обновлять неразделенные данные.
//       * РазделенныеДанные - Булево - Необязательный. Обновлять разделенные данные.
//       * Оперативное - Булево - Необязательный. Оперативное обновление данных.
//       * Отложенное  - Булево - Необязательный. Отложенное обновление данных.
//       * Полное      - Булево - Необязательный. Не учитывать хеш-суммы при отложенном обновление данных.
//
//   На развитие:
//       * ТипОтчета - Строка - "*", "Внутренний", "Расширения" - Обязательный. Обновлять кэши метаданных конфигурации.
//       * ТипДанных - Строка - "*", "ОперативныеОбщие", "ОперативныеПользовательские", "ОтложенныеИнкрементально", "ОтложенныеПолностью" - Обязательный. Какие данные обновлять.
//           Данные обновляются с учетом текущего разделения.
//           Из разделенного сеанса - только разделенные данные, из неразделенного - только неразделенные.
//
Функция Обновить(Настройки = Неопределено) Экспорт
	
	Если Настройки = Неопределено Тогда
		Настройки = Новый Структура;
	КонецЕсли;
	
	ПоУмолчанию = Новый Структура("Конфигурация, Расширения, ОбщиеДанные, РазделенныеДанные, Оперативное, Отложенное, Полное");
	Если Настройки.Количество() < ПоУмолчанию.Количество() Тогда
		РежимРаботы = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
		Если РежимРаботы.МодельСервиса Тогда
			Если ОбщегоНазначения.ИспользованиеРазделителяСеанса() Тогда // Разделенный сеанс.
				ПоУмолчанию.ОбщиеДанные       = Ложь;
				ПоУмолчанию.РазделенныеДанные = Истина;
			Иначе // Неразделенный сеанс.
				ПоУмолчанию.ОбщиеДанные       = Истина;
				ПоУмолчанию.РазделенныеДанные = Ложь;
			КонецЕсли;
		Иначе
			Если РежимРаботы.Автономный Тогда // АРМ.
				ПоУмолчанию.ОбщиеДанные       = Ложь;
				ПоУмолчанию.РазделенныеДанные = Истина;
			Иначе // Коробка.
				ПоУмолчанию.ОбщиеДанные       = Истина;
				ПоУмолчанию.РазделенныеДанные = Истина;
			КонецЕсли;
		КонецЕсли;
		ПоУмолчанию.Конфигурация = Истина;
		ПоУмолчанию.Расширения   = ПоУмолчанию.РазделенныеДанные;
		ПоУмолчанию.Оперативное  = Истина;
		ПоУмолчанию.Отложенное   = Ложь;
		ПоУмолчанию.Полное       = Ложь;
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Настройки, ПоУмолчанию, Ложь);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьИзменения", Ложь);
	
	Если Настройки.Оперативное Тогда
		
		Если Настройки.ОбщиеДанные Тогда
			
			Если Настройки.Конфигурация Тогда
				ПромежуточныйРезультат = ОперативноеОбновлениеОбщихДанных("ОбщиеДанныеКонфигурации", Неопределено);
				Результат.Вставить("Оперативное_ОбщиеДанные_Конфигурация", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Настройки.Расширения Тогда
				ПромежуточныйРезультат = ОперативноеОбновлениеОбщихДанных("ОбщиеДанныеРасширений", Неопределено);
				Результат.Вставить("Оперативное_ОбщиеДанные_Расширения", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Настройки.РазделенныеДанные Тогда
			
			Если Настройки.Конфигурация Тогда
				ПромежуточныйРезультат = ОперативноеОбновлениеРазделенныхДанных("РазделенныеДанныеКонфигурации");
				Результат.Вставить("Оперативное_РазделенныеДанные_Конфигурация", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Настройки.Расширения Тогда
				ПромежуточныйРезультат = ОперативноеОбновлениеРазделенныхДанных("РазделенныеДанныеРасширений");
				Результат.Вставить("Оперативное_РазделенныеДанные_Расширения", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Настройки.Отложенное Тогда
		
		Если Настройки.ОбщиеДанные Тогда
			
			Если Настройки.Конфигурация Тогда
				ПромежуточныйРезультат = ОтложенноеОбновлениеДанных("ОбщиеДанныеКонфигурации", Настройки.Полное);
				Результат.Вставить("Отложенное_ОбщиеДанные_Конфигурация", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Настройки.Расширения Тогда
				ПромежуточныйРезультат = ОтложенноеОбновлениеДанных("ОбщиеДанныеРасширений", Настройки.Полное);
				Результат.Вставить("Отложенное_ОбщиеДанные_Расширения", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Настройки.РазделенныеДанные Тогда
			
			Если Настройки.Конфигурация Тогда
				ПромежуточныйРезультат = ОтложенноеОбновлениеДанных("РазделенныеДанныеКонфигурации", Настройки.Полное);
				Результат.Вставить("Отложенное_РазделенныеДанные_Конфигурация", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Настройки.Расширения Тогда
				ПромежуточныйРезультат = ОтложенноеОбновлениеДанных("РазделенныеДанныеРасширений", Настройки.Полное);
				Результат.Вставить("Отложенное_РазделенныеДанные_Расширения", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// См. описание процедуры СтандартныеПодсистемыСервер.СобратьСтатистикуКонфигурации.
Процедура СобратьСтатистикуКонфигурации() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЦентрМониторинга") Тогда
		Возврат;
	КонецЕсли;
	
	МодульЦентрМониторинга = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторинга");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(1) КАК Количество
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Пользовательский";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации("Справочник.ВариантыОтчетов.Пользовательский", Выборка.Количество());
	
КонецПроцедуры

// Формирует отчет с указанными параметрами.
//
// Параметры:
//   Параметры - Структура - Параметры подключения и формирования отчета.
//       * СсылкаВарианта - СправочникСсылка.ВариантыОтчетов - Ссылка варианта отчета.
//       * СсылкаОтчета   - Произвольный - Ссылка отчета.
//       * КлючВарианта   - Строка - Имя предопределенного или идентификатор пользовательского варианта отчета.
//       * ИдентификаторФормы - Неопределено, УникальныйИдентификатор - Идентификатор формы, из которой подключается отчет.
//   ПроверятьЗаполнение - Булево - Если Истина то перед формированием будет проведена проверка заполнения.
//   ПолучатьФлажокПустой - Булево - Если Истина то после формирования будет проведен анализ заполненности.
//
// Возвращаемое значение:
//   Структура - Результат формирования.
//
// Места использования:
//   РассылкаОтчетов.СформироватьОтчет().
//
// См. также:
//   <Метод>().
//
Функция СформироватьОтчет(Знач Параметры, Знач ПроверятьЗаполнение, Знач ПолучатьФлажокПустой) Экспорт
	Результат = Новый Структура("ТабличныйДокумент, Расшифровка,
		|СсылкаВарианта, СсылкаОтчета, КлючВарианта,
		|Объект, Метаданные, ПолноеИмя,
		|СхемаКД, АдресСхемы, СхемаМодифицирована, НастройкиФормы,
		|НастройкиКД, ВариантМодифицирован,
		|ПользовательскиеНастройкиКД, ПользовательскиеНастройкиМодифицированы,
		|ТекстОшибки, Успех, ДанныеЕщеОбновляются");
	
	Результат.Успех = Ложь;
	Результат.ТабличныйДокумент = Новый ТабличныйДокумент;
	Результат.ВариантМодифицирован = Ложь;
	Результат.ПользовательскиеНастройкиМодифицированы = Ложь;
	Результат.ДанныеЕщеОбновляются = Ложь;
	
	Подключение = ПодключитьОтчетИЗагрузитьНастройки(Параметры);
	ЗаполнитьЗначенияСвойств(Результат, Подключение); // , "Объект, Метаданные, ПолноеИмя, КлючВарианта, СхемаКД, АдресСхемы, СхемаМодифицирована, НастройкиФормы"
	Если Не Подключение.Успех Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Не удалось сформировать отчет:'") + Символы.ПС + Подключение.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ОтчетОбъект = Результат.Объект;
	КомпоновщикНастроекКД = ОтчетОбъект.КомпоновщикНастроек;
	
	ДопСвойства = КомпоновщикНастроекКД.ПользовательскиеНастройки.ДополнительныеСвойства;
	ДопСвойства.Вставить("КлючВарианта", Результат.КлючВарианта);
	
	Если ПроверятьЗаполнение Тогда
		ИсходныеСообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
		ПроверкаПройдена = ОтчетОбъект.ПроверитьЗаполнение();
		СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
		Для Каждого Сообщение Из ИсходныеСообщенияПользователю Цикл
			Сообщение.Сообщить();
		КонецЦикла;
		Если Не ПроверкаПройдена Тогда
			Результат.ТекстОшибки = НСтр("ru = 'Отчет не прошел проверку заполнения:'");
			Для Каждого Сообщение Из СообщенияПользователю Цикл
				Результат.ТекстОшибки = Результат.ТекстОшибки + Символы.ПС + Сообщение.Текст;
			КонецЦикла;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка корректности данных, по которым формируется отчет.
	
	ИспользуемыеТаблицы = Новый Массив;
	ИспользуемыеТаблицы.Добавить(Результат.ПолноеИмя);
	Если Результат.НастройкиФормы.События.ПриОпределенииИспользуемыхТаблиц Тогда
		ОтчетОбъект.ПриОпределенииИспользуемыхТаблиц(Результат.КлючВарианта, ИспользуемыеТаблицы);
	КонецЕсли;
	Для Каждого ПолноеИмя Из ИспользуемыеТаблицы Цикл
		Проверка = ОбновлениеИнформационнойБазы.ОбъектОбработан(ПолноеИмя);
		Если Не Проверка.Обработан Тогда
			Результат.ДанныеЕщеОбновляются = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Формирование и оценка скорости.
	
	ИмяКлючевойОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ИмяКлючевойОперации");
	ВыполнятьЗамеры = ТипЗнч(ИмяКлючевойОперации) = Тип("Строка") И Не ПустаяСтрока(ИмяКлючевойОперации) И ВыполнятьЗамеры();
	Если ВыполнятьЗамеры Тогда
		КомментарийКлючевойОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "КомментарийКлючевойОперации");
		ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	КонецЕсли;
	
	ОтчетОбъект.СкомпоноватьРезультат(Результат.ТабличныйДокумент, Результат.Расшифровка);
	
	Если ВыполнятьЗамеры Тогда
		МодульОценкаПроизводительностиКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительностиКлиентСервер");
		МодульОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремениТехнологический(
			ИмяКлючевойОперации,
			ВремяНачала/1000,
			КомментарийКлючевойОперации);
	КонецЕсли;
	
	Модифицирован = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопСвойства, "ВариантМодифицирован");
	Если Модифицирован = Истина Тогда
		Результат.ВариантМодифицирован = Истина;
		Результат.НастройкиКД = КомпоновщикНастроекКД.Настройки;
	КонецЕсли;
	
	Модифицированы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопСвойства, "ПользовательскиеНастройкиМодифицированы");
	Если Результат.ВариантМодифицирован Или Модифицированы = Истина Тогда
		Результат.ПользовательскиеНастройкиМодифицированы = Истина;
		Результат.ПользовательскиеНастройкиКД = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	КонецЕсли;
	
	Если ПолучатьФлажокПустой Тогда
		Если ДопСвойства.Свойство("ОтчетПустой") Тогда
			Пустой = ДопСвойства.ОтчетПустой;
		Иначе
			Пустой = ОтчетПустой(ОтчетОбъект);
		КонецЕсли;
		Результат.Вставить("Пустой", Пустой);
	КонецЕсли;
	
	ДопСвойства.Удалить("ВариантМодифицирован");
	ДопСвойства.Удалить("ПользовательскиеНастройкиМодифицированы");
	ДопСвойства.Удалить("КлючВарианта");
	ДопСвойства.Удалить("ОтчетПустой");
	
	Результат.Успех = Истина;
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Для отчета по внедрению.

// Формирует дерево настроек и размещения предопределенных вариантов отчетов.
//   Только для отчетов, подключенных к подсистеме.
//
// Возвращаемое значение:
//   ДеревоЗначений - Настройки предопределенных вариантов отчетов, подключенных к подсистеме.
//     
//     Реквизиты для изменения:
//       * Включен              - Булево - Если Ложь, то вариант отчета не регистрируется в подсистеме.
//       * ВидимостьПоУмолчанию - Булево - Если Ложь, то вариант отчета по умолчанию скрыт в панели отчетов.
//       * Наименование         - Строка - Наименование варианта отчета.
//       * Описание             - Строка - Информация о варианте отчета.
//       * Размещение           - Соответствие - Настройки размещения варианта отчета в разделах.
//           ** Ключ     - ОбъектМетаданных - Подсистема, в которой размещается отчет или вариант отчета.
//           ** Значение - Строка           - Настройки размещения в подсистеме (группе).
//               *** ""        - Вывод отчета в подсистеме без специального выделение.
//               *** "Важный"  - Вывод отчета в подсистеме с выделением жирным шрифтом.
//               *** "СмТакже" - Вывод отчета в группе "См. также".
//       * ФункциональныеОпции - Массив из Строка - Имена функциональных опций варианта отчета.
//       * НастройкиДляПоиска  - Структура - Дополнительные настройки для поиска этого варианта отчета.
//           Эти настройки необходимо задавать только если СКД не используется или используется не в полном объеме.
//           Например, СКД может использоваться только для параметризации и получения данных,
//           а вывод выполняться в фиксированный макет табличного документа.
//           ** НаименованияПолей - Строка - Имена полей варианта отчета.
//           ** НаименованияПараметровИОтборов - Строка - Имена настроек варианта отчета.
//           ** КлючевыеСлова - Строка - Дополнительная терминология (в т.ч. специализированная или устаревшая).
//           Разделитель терминов: Символы.ПС.
//           ** ИменаМакетов - Строка - Используется вместо НаименованияПолей.
//               Имена макетов табличных или текстовых документов,
//               из которых требуется извлечь информацию о наименованиях полей.
//               Имена перечисляются через запятую.
//               К сожалению, в макетах отсутствует информация о связях полей и их представлений (которая есть в СКД),
//               поэтому для более точной работы механизма поиска рекомендуется заполнять НаименованияПолей, а не
//               ИменаМакетов.
//       * ФорматНастроекСКД - Булево - Отчет использует типовой формат хранения настроек на механике СКД,
//           а его основные формы поддерживают стандартную схему взаимодействия между формами (параметры и тип возвращаемого значения).
//           Если Ложь, тогда для отчета отключаются проверки консистентности и некоторые механизмы, которые рассчитывают на типовой формат.
//       * ОпределитьНастройкиФормы - Булево - Отчет имеет программный интерфейс для тесной интеграции с формой отчета,
//           в том числе может переопределять некоторые настройки формы и подписываться на ее события.
//           Если Истина и отчет подключен к общей форме ФормаОтчета,
//           тогда в модуле объекта отчета следует определить процедуру по шаблону:
//               
//               // Настройки общей формы отчета подсистемы "Варианты отчетов".
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма, Неопределено - Форма отчета или форма настроек отчета.
//               //       Неопределено когда вызов без контекста.
//               //   КлючВарианта - Строка, Неопределено - Имя предопределенного
//               //       или уникальный идентификатор пользовательского варианта отчета.
//               //       Неопределено когда вызов без контекста.
//               //   Настройки - Структура - см. возвращаемое значение
//               //       ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//               //
//               Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
//               	// Код процедуры.
//               КонецПроцедуры
//     
//     Служебные реквизиты (только для чтения):
//       * Отчет               - <см. Справочники.ВариантыОтчетов.Реквизиты.Отчет> - Полное имя или ссылка на отчет. 
//       * Метаданные          - ОбъектМетаданных: Отчет - Метаданные отчета.
//       * КлючВарианта        - Строка - Имя варианта отчета.
//       * ОписаниеПолучено    - Булево - Флажок что описание строки уже получено.
//           Описание получается методом ОписаниеВарианта().
//       * СистемнаяИнформация - Структура - Другая служебная информация.
//
Функция ДеревоПредопределенных(ФильтрПоТипуОтчетов = "Внутренний") Экспорт
	РеквизитыСправочника = Метаданные.Справочники.ВариантыОтчетов.Реквизиты;
	
	ДеревоВариантов = Новый ДеревоЗначений;
	ДеревоВариантов.Колонки.Добавить("Отчет",                РеквизитыСправочника.Отчет.Тип);
	ДеревоВариантов.Колонки.Добавить("Метаданные",           Новый ОписаниеТипов("ОбъектМетаданных"));
	ДеревоВариантов.Колонки.Добавить("Объект");
	ДеревоВариантов.Колонки.Добавить("ИспользуетСКД",        Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("КлючВарианта",         РеквизитыСправочника.КлючВарианта.Тип);
	ДеревоВариантов.Колонки.Добавить("ОписаниеПолучено",     Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("Включен",              Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("ВидимостьПоУмолчанию", Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("Наименование",         ОписаниеТиповСтрока());
	ДеревоВариантов.Колонки.Добавить("Описание",             ОписаниеТиповСтрока());
	ДеревоВариантов.Колонки.Добавить("Размещение",           Новый ОписаниеТипов("Соответствие"));
	ДеревоВариантов.Колонки.Добавить("НастройкиДляПоиска",   Новый ОписаниеТипов("Структура"));
	ДеревоВариантов.Колонки.Добавить("СистемнаяИнформация",  Новый ОписаниеТипов("Структура"));
	ДеревоВариантов.Колонки.Добавить("Тип",                  ОписаниеТиповСтрока());
	ДеревоВариантов.Колонки.Добавить("ЭтоВариант",           Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("ФункциональныеОпции",  Новый ОписаниеТипов("Массив"));
	ДеревоВариантов.Колонки.Добавить("ГруппироватьПоОтчету", Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("КлючЗамеров",          Новый ОписаниеТипов("Строка"));
	ДеревоВариантов.Колонки.Добавить("ОсновнойВариант");
	ДеревоВариантов.Колонки.Добавить("ФорматНастроекСКД",        Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("ОпределитьНастройкиФормы", Новый ОписаниеТипов("Булево"));
	
	ВыводитьОтчетыВместоВариантов = ГлобальныеНастройки().ВыводитьОтчетыВместоВариантов;
	РазрешеноИндексирование = РазрешеноИндексированиеНеразделенныхДанных();
	
	ПодсистемыОтчетов = РазмещениеОтчетовВПодсистемах();
	КэшФлажкаХранилища = Неопределено;
	КэшФлажкаОсновнойФормы = Неопределено;
	КэшФлажкаФормыНастроек = Неопределено;
	Для Каждого ОтчетМетаданные Из Метаданные.Отчеты Цикл
		Если Не ОтчетПодключенКХранилищу(ОтчетМетаданные, КэшФлажкаХранилища) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтчетСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОтчетМетаданные);
		ОтчетТип = ВариантыОтчетовКлиентСервер.ТипОтчетаСтрокой(Неопределено, ОтчетСсылка);
		Если ФильтрПоТипуОтчетов <> Неопределено И ФильтрПоТипуОтчетов <> ОтчетТип Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьРеквизиты = (ОтчетМетаданные.Реквизиты.Количество() > 0);
		
		// Настройки.
		СтрокаОтчет = ДеревоВариантов.Строки.Добавить();
		СтрокаОтчет.Отчет                = ОтчетСсылка;
		СтрокаОтчет.Метаданные           = ОтчетМетаданные;
		СтрокаОтчет.Включен              = Истина;
		СтрокаОтчет.ВидимостьПоУмолчанию = Истина;
		СтрокаОтчет.Описание             = ОтчетМетаданные.Пояснение;
		СтрокаОтчет.Наименование         = ОтчетМетаданные.Представление();
		СтрокаОтчет.ОписаниеПолучено     = Истина;
		СтрокаОтчет.Тип                  = ОтчетТип;
		СтрокаОтчет.ЭтоВариант           = Ложь;
		СтрокаОтчет.ГруппироватьПоОтчету = ВыводитьОтчетыВместоВариантов;
		СтрокаОтчет.ИспользуетСКД        = (ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных <> Неопределено);
		СтрокаОтчет.ФорматНастроекСКД    = СтрокаОтчет.ИспользуетСКД И Не ЕстьРеквизиты;
		
		// Подсистемы.
		Найденные = ПодсистемыОтчетов.НайтиСтроки(Новый Структура("ОтчетМетаданные", ОтчетМетаданные));
		Для Каждого СтрокаПодсистема Из Найденные Цикл
			СтрокаОтчет.Размещение.Вставить(СтрокаПодсистема.ПодсистемаМетаданные, "");
		КонецЦикла;
		
		// Поиск.
		СтрокаОтчет.НастройкиДляПоиска = Новый Структура("НаименованияПолей, НаименованияПараметровИОтборов, КлючевыеСлова, ИменаМакетов");
		
		// Предопределенные варианты.
		Если СтрокаОтчет.ИспользуетСКД Тогда
			ОтчетМенеджер = Отчеты[ОтчетМетаданные.Имя];
			СхемаКД = Неопределено;
			ВариантыНастроек = Неопределено;
			Попытка
				СтрокаОтчет.Объект = ОтчетМенеджер.Создать();
				СхемаКД = СтрокаОтчет.Объект.СхемаКомпоновкиДанных;
			Исключение
				ТекстОшибки = НСтр("ru = 'Не удалось прочитать схему отчета ""%1"":'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ОтчетМетаданные.Имя);
				ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ПредупреждениеПоВарианту(Неопределено, ТекстОшибки);
			КонецПопытки;
			// Чтение настроек вариантов отчета из схемы.
			Если СхемаКД <> Неопределено Тогда
				Попытка
					ВариантыНастроек = СхемаКД.ВариантыНастроек;
				Исключение
					ТекстОшибки = НСтр("ru = 'Не удалось прочитать список вариантов отчета ""%1"" из схемы:'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ОтчетМетаданные.Имя);
					ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ПредупреждениеПоВарианту(Неопределено, ТекстОшибки);
				КонецПопытки;
			КонецЕсли;
			// Чтение настроек вариантов отчета из модуля менеджера (если не получилось из схемы).
			Если ВариантыНастроек = Неопределено Тогда
				Попытка
					ВариантыНастроек = ОтчетМенеджер.ВариантыНастроек();
				Исключение
					ТекстОшибки = НСтр("ru = 'Не удалось прочитать список вариантов отчета ""%1"" из модуля менеджера:'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ОтчетМетаданные.Имя);
					ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ОшибкаПоВарианту(Неопределено, ТекстОшибки);
				КонецПопытки;
			КонецЕсли;
			// Регистрация найденных вариантов.
			Если ВариантыНастроек <> Неопределено Тогда
				Для Каждого ВариантНастроекКД Из ВариантыНастроек Цикл
					Вариант = СтрокаОтчет.Строки.Добавить();
					Вариант.Отчет        = СтрокаОтчет.Отчет;
					Вариант.КлючВарианта = ВариантНастроекКД.Имя;
					Вариант.Наименование = ВариантНастроекКД.Представление;
					Вариант.Тип          = ОтчетТип;
					Вариант.ЭтоВариант   = Истина;
					Если СтрокаОтчет.ОсновнойВариант = Неопределено Тогда
						СтрокаОтчет.ОсновнойВариант = Вариант;
					КонецЕсли;
					Если РазрешеноИндексирование И ТипЗнч(ВариантНастроекКД) = Тип("ВариантНастроекКомпоновкиДанных") Тогда
						Попытка
							Вариант.СистемнаяИнформация.Вставить("НастройкиКД", ВариантНастроекКД.Настройки);
						Исключение
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не удалось прочитать настройки варианта ""%1"" отчета ""%2"":'"),
								Вариант.КлючВарианта,
								ОтчетМетаданные.Имя)
								+ Символы.ПС
								+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							ПредупреждениеПоВарианту(Неопределено, ТекстОшибки);
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Сам отчет.
		Если СтрокаОтчет.ОсновнойВариант = Неопределено Тогда
			Вариант = СтрокаОтчет.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(Вариант, СтрокаОтчет, "Отчет, Наименование");
			Вариант.КлючВарианта = "";
			Вариант.ЭтоВариант   = Истина;
			СтрокаОтчет.ОсновнойВариант = Вариант;
		КонецЕсли;
		
	КонецЦикла;
	
	// Механизмы расширения.
	Если ФильтрПоТипуОтчетов = Неопределено Или ФильтрПоТипуОтчетов = "Внутренний" Тогда
		НастроитьОтчетВМодулеМенеджера(ДеревоВариантов, Метаданные.Отчеты.УниверсальныйОтчет);
		// Подключаемые обработчики подсистем БСП.
		Обработчики = ОбщегоНазначения.ОбработчикиСлужебногоСобытия("СтандартныеПодсистемы.ВариантыОтчетов\ПриНастройкеВариантовОтчетов");
		Для Каждого Обработчик Из Обработчики Цикл
			Обработчик.Модуль.ПриНастройкеВариантовОтчетов(ДеревоВариантов);
		КонецЦикла;
		// Переопределяемый модуль конфигурации.
		ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов(ДеревоВариантов);
	КонецЕсли;
	
	// Определение основных вариантов.
	Для Каждого СтрокаОтчет Из ДеревоВариантов.Строки Цикл
		Если СтрокаОтчет.ГруппироватьПоОтчету = Истина Тогда
			Если СтрокаОтчет.ОсновнойВариант = Неопределено
				Или Не СтрокаОтчет.ОсновнойВариант.Включен Тогда
				Для Каждого Вариант Из СтрокаОтчет.Строки Цикл
					ЗаполнитьОписаниеСтрокиВарианта(Вариант, СтрокаОтчет);
					Если Вариант.Включен Тогда
						СтрокаОтчет.ОсновнойВариант = Вариант;
						Вариант.ВидимостьПоУмолчанию = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			СтрокаОтчет.ОсновнойВариант = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДеревоВариантов;
КонецФункции

// Определяет способ внедрения подсистемы.
Функция ПоУмолчаниюВсеПодключеныКХранилищу()
	Возврат (Метаданные.ХранилищеВариантовОтчетов <> Неопределено И Метаданные.ХранилищеВариантовОтчетов.Имя = "ХранилищеВариантовОтчетов");
КонецФункции

// Определяет подключен ли отчет к подсистеме.
Функция ОтчетПодключенКХранилищу(ОтчетМетаданные, ПоУмолчаниюВсеПодключены = Неопределено) Экспорт
	ХранилищеМетаданные = ОтчетМетаданные.ХранилищеВариантов;
	Если ХранилищеМетаданные = Неопределено Тогда
		Если ПоУмолчаниюВсеПодключены = Неопределено Тогда
			ПоУмолчаниюВсеПодключены = ПоУмолчаниюВсеПодключеныКХранилищу();
		КонецЕсли;
		ОтчетПодключен = ПоУмолчаниюВсеПодключены;
	Иначе
		ОтчетПодключен = (ХранилищеМетаданные = Метаданные.ХранилищаНастроек.ХранилищеВариантовОтчетов);
	КонецЕсли;
	Возврат ОтчетПодключен;
КонецФункции

// Определяет способ подключения общей формы отчета.
Функция ПоУмолчаниюВсеПодключеныКОсновнойФорме()
	ФормаМетаданные = Метаданные.ОсновнаяФормаОтчета;
	Возврат (ФормаМетаданные <> Неопределено И ФормаМетаданные = Метаданные.ОбщиеФормы.ФормаОтчета);
КонецФункции

// Определяет способ подключения общей формы отчета.
Функция ОтчетПодключенКОсновнойФорме(ОтчетМетаданные, ПоУмолчаниюВсеПодключены = Неопределено) Экспорт
	ФормаМетаданные = ОтчетМетаданные.ОсновнаяФорма;
	Если ФормаМетаданные = Неопределено Тогда
		Если ПоУмолчаниюВсеПодключены = Неопределено Тогда
			ПоУмолчаниюВсеПодключены = ПоУмолчаниюВсеПодключеныКОсновнойФорме();
		КонецЕсли;
		ОтчетПодключен = ПоУмолчаниюВсеПодключены;
	Иначе
		ОтчетПодключен = (ФормаМетаданные = Метаданные.ОбщиеФормы.ФормаОтчета);
	КонецЕсли;
	Возврат ОтчетПодключен;
КонецФункции

// Определяет способ подключения общей формы отчета.
Функция ПоУмолчаниюВсеПодключеныКФормеНастроек()
	ФормаМетаданные = Метаданные.ОсновнаяФормаНастроекОтчета;
	Возврат (ФормаМетаданные <> Неопределено И ФормаМетаданные = Метаданные.ОбщиеФормы.ФормаНастроекОтчета);
КонецФункции

// Определяет способ подключения общей формы отчета.
Функция ОтчетПодключенКФормеНастроек(ОтчетМетаданные, ПоУмолчаниюВсеПодключены = Неопределено) Экспорт
	ФормаМетаданные = ОтчетМетаданные.ОсновнаяФормаНастроек;
	Если ФормаМетаданные = Неопределено Тогда
		Если ПоУмолчаниюВсеПодключены = Неопределено Тогда
			ПоУмолчаниюВсеПодключены = ПоУмолчаниюВсеПодключеныКФормеНастроек();
		КонецЕсли;
		ОтчетПодключен = ПоУмолчаниюВсеПодключены;
	Иначе
		ОтчетПодключен = (ФормаМетаданные = Метаданные.ОбщиеФормы.ФормаНастроекОтчета);
	КонецЕсли;
	Возврат ОтчетПодключен;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует отчет с указанными настройками, используется в фоновых заданиях.
Процедура СформироватьОтчетВФоне(Параметры, АдресХранилища) Экспорт
	Формирование = СформироватьОтчет(Параметры, Ложь, Ложь);
	
	Результат = Новый Структура("ТабличныйДокумент, Расшифровка,
		|Успех, ТекстОшибки, ДанныеЕщеОбновляются,
		|ВариантМодифицирован, ПользовательскиеНастройкиМодифицированы");
	ЗаполнитьЗначенияСвойств(Результат, Формирование);
	
	Если Результат.ВариантМодифицирован Тогда
		Результат.Вставить("НастройкиКД", Формирование.НастройкиКД);
	КонецЕсли;
	Если Результат.ПользовательскиеНастройкиМодифицированы Тогда
		Результат.Вставить("ПользовательскиеНастройкиКД", Формирование.ПользовательскиеНастройкиКД);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
КонецПроцедуры

// Определяет что отчет пустой.
Функция ОтчетПустой(ОтчетОбъект)
	
	// Объект для создания макета компоновки данных.
	КомпоновщикМакетаКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	// Выполняет компоновку макета.
	МакетКД = КомпоновщикМакетаКД.Выполнить(ОтчетОбъект.СхемаКомпоновкиДанных, ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки());
	
	// Пропуск проверки на то, что отчет пустой.
	Если ЕстьВнешнийНаборДанных(МакетКД.НаборыДанных) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Объект, выполняющий компоновку данных.
	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	
	// Инициализировать объект.
	ПроцессорКД.Инициализировать(МакетКД, , , Истина);
	
	// Объект для вывода результата компоновки в табличный документ.
	ПроцессорВыводаРезультатаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	// Устанавливает табличный документ, в который нужно выводить результат.
	ПроцессорВыводаРезультатаКД.УстановитьДокумент(Новый ТабличныйДокумент);
	
	// Последовательный вывод
	ПроцессорВыводаРезультатаКД.НачатьВывод();
	
	// Получает следующий элемент результата компоновки.
	ЭлементРезультатаКД = ПроцессорКД.Следующий();
	Пока ЭлементРезультатаКД <> Неопределено Цикл
		
		// Вывести элемент результата компоновки отчета в документ.
		ПроцессорВыводаРезультатаКД.ВывестиЭлемент(ЭлементРезультатаКД);
		
		// Определить не пустой результат.
		Для Каждого ЗначениеПараметраМакетаКД Из ЭлементРезультатаКД.ЗначенияПараметров Цикл
			Попытка
				ЗначениеЗаполнено = ЗначениеЗаполнено(ЗначениеПараметраМакетаКД.Значение);
			Исключение
				ЗначениеЗаполнено = Ложь; // Линия, Рамка, Цвет и другие объекты КД, которые могут фигурировать при выводе.
			КонецПопытки;
			Если ЗначениеЗаполнено Тогда
				ПроцессорВыводаРезультатаКД.ЗакончитьВывод();
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		// Получает следующий элемент результата компоновки.
		ЭлементРезультатаКД = ПроцессорКД.Следующий();
	КонецЦикла;
	
	// Указание объекту о том, что вывод результата завершен.
	ПроцессорВыводаРезультатаКД.ЗакончитьВывод();
	
	Возврат Истина;
КонецФункции

// Проверяет наличие внешних наборов данных.
//
// Параметры:
//   НаборыДанных - НаборыДанныхМакетаКомпоновкиДанных - Коллекция проверяемых наборов данных.
//
// Возвращаемое значение: 
//   Булево - Истина если есть внешние наборы данных.
//
Функция ЕстьВнешнийНаборДанных(НаборыДанных)
	
	Для Каждого НаборДанных Из НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектМакетаКомпоновкиДанных") Тогда
			
			Возврат Истина;
			
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеМакетаКомпоновкиДанных") Тогда
			
			Если ЕстьВнешнийНаборДанных(НаборДанных.Элементы) Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Заполняет описание настроек для строки варианта отчета если оно еще не заполнено.
//
// Параметры:
//   СтрокаВариант - СтрокаДерева - Описание настроек варианта отчета.
//   СтрокаОтчет   - СтрокаДерева - Необязательный. Описание настроек отчета.
//
Процедура ЗаполнитьОписаниеСтрокиВарианта(СтрокаВариант, СтрокаОтчет = Неопределено) Экспорт
	Если СтрокаВариант.ОписаниеПолучено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаОтчет = Неопределено Тогда
		СтрокаОтчет = СтрокаВариант.Родитель;
	КонецЕсли;
	
	// Флажок изменения настроек
	СтрокаВариант.ОписаниеПолучено = Истина;
	
	// Копирование настроек отчета.
	ЗаполнитьЗначенияСвойств(СтрокаВариант, СтрокаОтчет, "Включен, ВидимостьПоУмолчанию, ГруппироватьПоОтчету");
	
	Если СтрокаВариант = СтрокаОтчет.ОсновнойВариант Тогда
		// Вариант "по умолчанию".
		СтрокаВариант.Описание = СтрокаОтчет.Описание;
		СтрокаВариант.ВидимостьПоУмолчанию = Истина;
	Иначе
		// Предопределенный вариант.
		Если СтрокаВариант.ГруппироватьПоОтчету Тогда
			СтрокаВариант.ВидимостьПоУмолчанию = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаВариант.Размещение = ОбщегоНазначенияКлиентСервер.СкопироватьСоответствие(СтрокаОтчет.Размещение);
	СтрокаВариант.ФункциональныеОпции = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СтрокаОтчет.ФункциональныеОпции);
	СтрокаВариант.НастройкиДляПоиска = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтрокаОтчет.НастройкиДляПоиска);
	СтрокаВариант.КлючЗамеров = СтрХеш("Отчет." + СтрокаОтчет.Метаданные.Имя + "." + СтрокаВариант.КлючВарианта, 135);
	
КонецПроцедуры

// Устанавливает режим вывода вариантов отчета в панелях отчетов.
//
// Параметры:
//   ДеревоВариантов - ДеревоЗначений - Передается "как есть" из процедуры НастроитьВариантыОтчетов.
//   Отчет - СтрокаДереваЗначений, ОбъектМетаданных: Отчет - Описание настроек или метаданные отчета.
//   ВыводитьОтчетыВместоВариантов - Булево - Режим вывода в панели отчетов:
//       - Истина - По отчетам (варианты скрыты, а отчет включен и видим).
//       - Ложь - По вариантам (варианты видимы, а отчет отключен).
//
Процедура УстановитьРежимВыводаОтчетаВПанеляхОтчетов(ДеревоВариантов, Отчет, ВыводитьОтчетыВместоВариантов)
	Если ТипЗнч(Отчет) = Тип("СтрокаДереваЗначений") Тогда
		СтрокаОтчет = Отчет;
	Иначе
		СтрокаОтчет = ДеревоВариантов.Строки.Найти(Отчет, "Метаданные", Ложь);
		Если СтрокаОтчет = Неопределено Тогда
			ПредупреждениеПоВарианту(Неопределено, НСтр("ru = 'Отчет ""%1"" не подключен к подсистеме.'"), Отчет.Имя);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	СтрокаОтчет.ГруппироватьПоОтчету = ВыводитьОтчетыВместоВариантов;
КонецПроцедуры

// Формирует таблицу замен старых ключей вариантов на актуальные.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица изменений имен вариантов. Колонки:
//       * ОтчетМетаданные - ОбъектМетаданных: Отчет - Метаданные отчета, в схеме которого изменилось имя варианта.
//       * СтароеИмяВарианта - Строка - Старое имя варианта, до изменения.
//       * АктуальноеИмяВарианта - Строка - Текущее (последнее актуальное) имя варианта.
//       * Отчет - СправочникСсылка.ИдентификаторыОбъектовМетаданных, Строка - Ссылка или имя отчета,
//           использующееся для хранения.
//
// См. также:
//   ВариантыОтчетовПереопределяемый.ЗарегистрироватьИзмененияКлючейВариантовОтчетов().
//   Служебное событие "СтандартныеПодсистемы.ВариантыОтчетов\ПриРегистрацииИзмененийИменВариантовОтчетов".
//
Функция ИзмененияКлючей()
	
	РеквизитыВариантов = Метаданные.Справочники.ВариантыОтчетов.Реквизиты;
	
	Изменения = Новый ТаблицаЗначений;
	Изменения.Колонки.Добавить("Отчет",                 Новый ОписаниеТипов("ОбъектМетаданных"));
	Изменения.Колонки.Добавить("СтароеИмяВарианта",     РеквизитыВариантов.КлючВарианта.Тип);
	Изменения.Колонки.Добавить("АктуальноеИмяВарианта", РеквизитыВариантов.КлючВарианта.Тип);
	
	// Подключаемые обработчики подсистем БСП.
	Обработчики = ОбщегоНазначения.ОбработчикиСлужебногоСобытия("СтандартныеПодсистемы.ВариантыОтчетов\ПриРегистрацииИзмененийИменВариантовОтчетов");
	Для Каждого Обработчик Из Обработчики Цикл
		Обработчик.Модуль.ПриРегистрацииИзмененийИменВариантовОтчетов(Изменения);
	КонецЦикла;
	
	// Переопределяемая часть.
	ВариантыОтчетовПереопределяемый.ЗарегистрироватьИзмененияКлючейВариантовОтчетов(Изменения);
	
	Изменения.Колонки.Отчет.Имя = "ОтчетМетаданные";
	Изменения.Колонки.Добавить("Отчет", РеквизитыВариантов.Отчет.Тип);
	
	// Проверить корректность замен.
	Для Каждого Изменение Из Изменения Цикл
		Изменение.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Изменение.ОтчетМетаданные);
		Найденные = Изменения.НайтиСтроки(Новый Структура("ОтчетМетаданные, СтароеИмяВарианта", Изменение.ОтчетМетаданные, Изменение.АктуальноеИмяВарианта));
		Если Найденные.Количество() > 0 Тогда
			Конфликт = Найденные[0];
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка регистрации изменений имени варианта отчета ""%1"":
				|Актуальное имя варианта ""%2"" (старое имя ""%3"")
				|так же числится как старое имя ""%4"" (актуальное имя ""%5"").'"),
				Строка(Изменение.Отчет),
				Изменение.АктуальноеИмяВарианта,
				Изменение.СтароеИмяВарианта,
				Конфликт.СтароеИмяВарианта,
				Конфликт.АктуальноеИмяВарианта);
		КонецЕсли;
		Найденные = Изменения.НайтиСтроки(Новый Структура("ОтчетМетаданные, СтароеИмяВарианта", Изменение.ОтчетМетаданные, Изменение.СтароеИмяВарианта));
		Если Найденные.Количество() > 2 Тогда
			Конфликт = Найденные[1];
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка регистрации изменений имени варианта отчета ""%1"":
				|Старое имя варианта ""%2"" (актуальное имя ""%3"")
				|так же числится как старое имя 
				|варианта отчета ""%4"" (актуальное имя ""%5"").'"),
				Строка(Изменение.Отчет),
				Изменение.СтароеИмяВарианта,
				Изменение.АктуальноеИмяВарианта,
				Строка(Конфликт.ОтчетМетаданные.Представление()),
				Конфликт.АктуальноеИмяВарианта);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Изменения;
КонецФункции

// Формирует ссылку и тип отчета по полному имени.
//
// Параметры:
//   ОтчетПолноеИмя - Строка - Полное имя отчета в формате
//       "Отчет.<ИмяОтчета>" или "ВнешнийОтчет.<ИмяОтчета>".
//
// Возвращаемое значение: 
//   Результат - Структура -
//       * Отчет
//       * ТипОтчета
//       * ОтчетИмя
//       * ОтчетМетаданные
//       * ТекстОшибки - Строка, Неопределено - Текст ошибки.
//
Функция СформироватьИнформациюОбОтчетеПоПолномуИмени(ОтчетПолноеИмя) Экспорт
	Результат = Новый Структура("Отчет, ТипОтчета, ОтчетПолноеИмя, ОтчетИмя, ОтчетМетаданные, ТекстОшибки");
	Результат.Отчет          = ОтчетПолноеИмя;
	Результат.ОтчетПолноеИмя = ОтчетПолноеИмя;
	
	ПозицияТочки = СтрНайти(ОтчетПолноеИмя, ".");
	Если ПозицияТочки = 0 Тогда
		Префикс = "";
		Результат.ОтчетИмя = ОтчетПолноеИмя;
	Иначе
		Префикс = Лев(ОтчетПолноеИмя, ПозицияТочки - 1);
		Результат.ОтчетИмя = Сред(ОтчетПолноеИмя, ПозицияТочки + 1);
	КонецЕсли;
	
	Если ВРег(Префикс) = "ОТЧЕТ" Тогда
		Результат.ОтчетМетаданные = Метаданные.Отчеты.Найти(Результат.ОтчетИмя);
		Если Результат.ОтчетМетаданные = Неопределено Тогда
			Результат.ОтчетПолноеИмя = "ВнешнийОтчет." + Результат.ОтчетИмя;
			ПредупреждениеПоВарианту(
				Неопределено,
				НСтр("ru = 'Отчет ""%1"" не найден в программе, он будет значиться как внешний.'"),
				ОтчетПолноеИмя);
		ИначеЕсли Не ПравоДоступа("Просмотр", Результат.ОтчетМетаданные) Тогда
			Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недостаточно прав доступа к отчету ""%1"".'"),
				ОтчетПолноеИмя);
		КонецЕсли;
	ИначеЕсли ВРег(Префикс) = "ВНЕШНИЙОТЧЕТ" Тогда
		// Получение метаданных и проверок не требуется.
	Иначе
		Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для отчета ""%1"" невозможно определить тип (не установлен префикс).'"),
			ОтчетПолноеИмя);
		Возврат Результат;
	КонецЕсли;
	
	Если Результат.ОтчетМетаданные = Неопределено Тогда
		
		Результат.Отчет = Результат.ОтчетПолноеИмя;
		Результат.ТипОтчета = Перечисления.ТипыОтчетов.Внешний;
		
		// Заменить тип и ссылку внешнего отчета для дополнительных отчетов, подключенных к хранилищу подсистемы.
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
			
			Результат.Вставить("ПоУмолчаниюВсеПодключеныКХранилищу", ПоУмолчаниюВсеПодключеныКХранилищу());
			МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
			МодульДополнительныеОтчетыИОбработки.ПриОпределенииТипаИСсылкиЕслиОтчетДополнительный(Результат);
			Результат.Удалить("ПоУмолчаниюВсеПодключеныКХранилищу");
			
			Если ТипЗнч(Результат.Отчет) <> Тип("Строка") Тогда
				Результат.ТипОтчета = Перечисления.ТипыОтчетов.Дополнительный;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Результат.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Результат.ОтчетМетаданные);
		Результат.ТипОтчета = ВариантыОтчетовКлиентСервер.ТипОтчета(Результат.Отчет);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует таблицу размещения отчетов по подсистемам конфигурации.
//
// Параметры:
//   Результат          - Неопределено - Используется для рекурсии.
//   ПодсистемаРодитель - Неопределено - Используется для рекурсии.
//
// Возвращаемое значение: 
//   Результат - ТаблицаЗначений - Настройки размещения отчетов по подсистемам.
//       * ОтчетМетаданные      - ОбъектМетаданных: Отчет.
//       * ОтчетПолноеИмя       - Строка.
//       * ПодсистемаМетаданные - ОбъектМетаданных: Подсистема.
//       * ПодсистемаПолноеИмя  - Строка.
//
Функция РазмещениеОтчетовВПодсистемах(Результат = Неопределено, ПодсистемаРодитель = Неопределено) Экспорт
	Если Результат = Неопределено Тогда
		ПолноеИмяОписаниеТипов = Метаданные.Справочники.ИдентификаторыОбъектовМетаданных.Реквизиты.ПолноеИмя.Тип;
		
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("ОтчетМетаданные",      Новый ОписаниеТипов("ОбъектМетаданных"));
		Результат.Колонки.Добавить("ОтчетПолноеИмя",       ПолноеИмяОписаниеТипов);
		Результат.Колонки.Добавить("ПодсистемаМетаданные", Новый ОписаниеТипов("ОбъектМетаданных"));
		Результат.Колонки.Добавить("ПодсистемаПолноеИмя",  ПолноеИмяОписаниеТипов);
		
		ПодсистемаРодитель = Метаданные;
	КонецЕсли;
	
	// Перебор вложенных подсистем родителя.
	Для Каждого ПодсистемаМетаданные Из ПодсистемаРодитель.Подсистемы Цикл
		Если Не ПодсистемаМетаданные.ВключатьВКомандныйИнтерфейс Тогда
			Продолжить;
		КонецЕсли;
		
		// Состав подсистемы
		Для Каждого ОтчетМетаданные Из ПодсистемаМетаданные.Состав Цикл
			Если Не Метаданные.Отчеты.Содержит(ОтчетМетаданные) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = Результат.Добавить();
			СтрокаТаблицы.ОтчетМетаданные      = ОтчетМетаданные;
			СтрокаТаблицы.ОтчетПолноеИмя       = ОтчетМетаданные.ПолноеИмя();
			СтрокаТаблицы.ПодсистемаМетаданные = ПодсистемаМетаданные;
			СтрокаТаблицы.ПодсистемаПолноеИмя  = ПодсистемаМетаданные.ПолноеИмя();
			
		КонецЦикла;
		
		РазмещениеОтчетовВПодсистемах(Результат, ПодсистемаМетаданные);;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Сброс настроек предопределенного элемента справочника "Варианты отчетов",
//   связанного с элементом справочника "Варианты отчетов".
//
// Параметры:
//   ВариантОбъект - СправочникОбъект.ВариантыОтчетов, ДанныеФормыСтруктура.
//
Функция СброситьНастройкиВариантаОтчета(ВариантОбъект) Экспорт
	Если ВариантОбъект.Пользовательский
		Или (ВариантОбъект.ТипОтчета <> Перечисления.ТипыОтчетов.Внутренний
			И ВариантОбъект.ТипОтчета <> Перечисления.ТипыОтчетов.Расширение)
		Или Не ЗначениеЗаполнено(ВариантОбъект.ПредопределенныйВариант) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВариантОбъект.Автор = Неопределено;
	ВариантОбъект.ТолькоДляАвтора = Ложь;
	ВариантОбъект.Описание = "";
	ВариантОбъект.Размещение.Очистить();
	ВариантОбъект.ВидимостьПоУмолчаниюПереопределена = Ложь;
	Предопределенный = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВариантОбъект.ПредопределенныйВариант,
		"Наименование, ВидимостьПоУмолчанию");
	ЗаполнитьЗначенияСвойств(ВариантОбъект, Предопределенный);
	
	Возврат Истина;
КонецФункции

// Формирует описание типов Строка заданной длины.
Функция ОписаниеТиповСтрока(ДлинаСтроки = 1000) Экспорт
	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки));
КонецФункции

// По составу ролей определяет полные права к данным подсистемы.
Функция ПолныеПраваНаВарианты() Экспорт
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеВариантовОтчетов");
КонецФункции

// Проверяет свободно ли наименование варианта отчета.
Функция НаименованиеЗанято(Отчет, Ссылка, Наименование) Экспорт
	Если Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Наименование") Тогда
		Возврат Ложь; // Проверка отключается т.к. наименование не изменилось.
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.Ссылка <> &Ссылка
	|	И ВариантыОтчетов.Наименование = &Наименование
	|	И ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ
	|	И НЕ ВариантыОтчетов.ПредопределенныйВариант В (&ОтключенныеВариантыПрограммы)";
	Запрос.УстановитьПараметр("Отчет",        Отчет);
	Запрос.УстановитьПараметр("Ссылка",       Ссылка);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("ОтключенныеВариантыПрограммы", ВариантыОтчетовПовтИсп.ОтключенныеВариантыПрограммы());
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Не Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
КонецФункции

// Проверяет свободен ли ключ варианта отчета.
Функция КлючВариантаЗанят(Отчет, Ссылка, КлючВарианта) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.Ссылка <> &Ссылка
	|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта
	|	И ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Отчет",        Отчет);
	Запрос.УстановитьПараметр("Ссылка",       Ссылка);
	Запрос.УстановитьПараметр("КлючВарианта", КлючВарианта);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Не Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
КонецФункции

// Создает фильтр по реквизиту КлючОбъекта для СтандартноеХранилищеНастроекМенеджер.Выбрать().
Функция НовыйФильтрПоКлючуОбъекта(ИменаОтчетов)
	Если ИменаОтчетов = "" Или ИменаОтчетов = "*" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПозицияРазделителя = СтрНайти(ИменаОтчетов, ",");
	Если ПозицияРазделителя = 0 Тогда
		КлючОбъекта = ИменаОтчетов;
		ИменаОтчетов = "";
	Иначе
		КлючОбъекта = СокрЛП(Лев(ИменаОтчетов, ПозицияРазделителя - 1));
		ИменаОтчетов = Сред(ИменаОтчетов, ПозицияРазделителя + 1);
	КонецЕсли;
	
	Если СтрНайти(КлючОбъекта, ".") = 0 Тогда
		КлючОбъекта = "Отчет." + КлючОбъекта;
	КонецЕсли;
	
	Возврат Новый Структура("КлючОбъекта", КлючОбъекта);
КонецФункции

// Глобальные настройки подсистемы.
Функция ГлобальныеНастройки() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ВыводитьОтчетыВместоВариантов", Ложь);
	Результат.Вставить("ВыводитьОписания", Истина);
	
	Результат.Вставить("Поиск", Новый Структура);
	Результат.Поиск.Вставить("ПодсказкаВвода", НСтр("ru = 'Наименование, поле или автор отчета'"));
	
	Результат.Вставить("ДругиеОтчеты", Новый Структура);
	Результат.ДругиеОтчеты.Вставить("ЗакрыватьПослеВыбора", Истина);
	Результат.ДругиеОтчеты.Вставить("ПоказыватьФлажок", Ложь);
	
	ВариантыОтчетовПереопределяемый.ОпределитьГлобальныеНастройки(Результат);
	
	Возврат Результат;
КонецФункции

// Глобальные настройки панели отчетов.
Функция ОбщиеНастройкиПанели() Экспорт
	ОбщиеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ВариантыОтчетовКлиентСервер.ПолноеИмяПодсистемы(),
		"ПанельОтчетов");
	Если ОбщиеНастройки = Неопределено Тогда
		ОбщиеНастройки = Новый Структура("ПоказыватьПодсказки, ИскатьВоВсехРазделах, ПоказатьОповещениеОПодсказках");
		ОбщиеНастройки.ПоказатьОповещениеОПодсказках = Ложь;
		ОбщиеНастройки.ПоказыватьПодсказки           = ГлобальныеНастройки().ВыводитьОписания;
		ОбщиеНастройки.ИскатьВоВсехРазделах          = Ложь;
	Иначе
		// Возможность можно считать новой для пользователя только в том случае,
		// если у пользователя есть понимание что такое "старые" возможности (т.е. если он уже работал с этой формой).
		Если Не ОбщиеНастройки.Свойство("ПоказатьОповещениеОПодсказках") Тогда
			ОбщиеНастройки.Вставить("ПоказатьОповещениеОПодсказках", Истина);
		КонецЕсли;
	КонецЕсли;
	Возврат ОбщиеНастройки;
КонецФункции

// Глобальные настройки панели отчетов.
Функция СохранитьОбщиеНастройкиПанели(ОбщиеНастройки) Экспорт
	Если ТипЗнч(ОбщиеНастройки) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ОбщиеНастройки.Количество() < 3 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ОбщиеНастройки, ОбщиеНастройкиПанели(), Ложь);
	КонецЕсли;
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ВариантыОтчетовКлиентСервер.ПолноеИмяПодсистемы(),
		"ПанельОтчетов",
		ОбщиеНастройки);
	Возврат ОбщиеНастройки;
КонецФункции

// Глобальные клиентские настройки отчетов.
Функция ПараметрыКлиента() Экспорт
	ПараметрыКлиента = Новый Структура;
	ПараметрыКлиента.Вставить("ВыполнятьЗамеры", ВыполнятьЗамеры());
	Если ПараметрыКлиента.ВыполнятьЗамеры Тогда
		УстановитьПривилегированныйРежим(Истина);
		ПараметрыКлиента.Вставить("ПрефиксЗамеров", СтрЗаменить(ПараметрыСеанса["КомментарийЗамераВремени"], ";", "; "));
	КонецЕсли;
	
	Возврат ПараметрыКлиента;
КонецФункции

// Глобальные клиентские настройки отчетов.
Функция ВыполнятьЗамеры()
	Если БезопасныйРежим() <> Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		МодульОценкаПроизводительностиВызовСервераПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительностиВызовСервераПовтИсп");
		Если МодульОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Журнал регистрации

// Запись ошибки в журнал регистрации.
Процедура ОшибкаПоВарианту(Вариант, Сообщение, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено) Экспорт
	Уровень = УровеньЖурналаРегистрации.Ошибка;
	ЗаписьЖурнала(Уровень, Вариант, Сообщение, Реквизит1, Реквизит2, Реквизит3);
КонецПроцедуры

// Запись предупреждения в журнал регистрации.
Процедура ПредупреждениеПоВарианту(Вариант, Сообщение, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено) Экспорт
	Уровень = УровеньЖурналаРегистрации.Предупреждение;
	ЗаписьЖурнала(Уровень, Вариант, Сообщение, Реквизит1, Реквизит2, Реквизит3);
КонецПроцедуры

// Запись информации в журнал регистрации.
Процедура ИнформацияПоВарианту(Вариант, Сообщение, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено)
	Уровень = УровеньЖурналаРегистрации.Информация;
	ЗаписьЖурнала(Уровень, Вариант, Сообщение, Реквизит1, Реквизит2, Реквизит3);
КонецПроцедуры

// Запись примечания в журнал регистрации.
Процедура ПримечаниеПоВарианту(Вариант, Сообщение, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено)
	Уровень = УровеньЖурналаРегистрации.Примечание;
	ЗаписьЖурнала(Уровень, Вариант, Сообщение, Реквизит1, Реквизит2, Реквизит3);
КонецПроцедуры

// Запись в журнал регистрации.
Процедура ЗаписьЖурнала(Уровень, Ссылка, Текст, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено)
	Текст = СтрЗаменить(Текст, "%1", Параметр1); // Переход на СтрШаблон невозможен.
	Текст = СтрЗаменить(Текст, "%2", Параметр2);
	Текст = СтрЗаменить(Текст, "%3", Параметр3);
	ЗаписьЖурналаРегистрации(
		ВариантыОтчетовКлиентСервер.НаименованиеПодсистемы(Неопределено),
		Уровень,
		Метаданные.Справочники.ВариантыОтчетов,
		Ссылка,
		Текст);
КонецПроцедуры

// Записывает в журнал регистрации событие запуска процедуры и открывает транзакцию.
Процедура ЗапускПроцедуры(ПредставлениеПроцедуры)
	ИнформацияПоВарианту(Неопределено, НСтр("ru = 'Запуск процедуры ""%1"".'"), ПредставлениеПроцедуры);
КонецПроцедуры

// Записывает в журнал регистрации событие завершения процедуры и фиксирует транзакцию.
Процедура ЗавершениеПроцедуры(ПредставлениеПроцедуры, Изменено = Неопределено)
	Текст = НСтр("ru = 'Завершение процедуры ""%1"".'");
	Если Изменено <> Неопределено Тогда
		Текст = Текст + " " + НСтр("ru = 'Изменено %2 объектов.'");
	КонецЕсли;
	ИнформацияПоВарианту(Неопределено, Текст, ПредставлениеПроцедуры, Изменено);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики стандартных событий.

// Удаление личных вариантов отчетов при удалении пользователя.
Процедура ПриУдаленииПользователя(ПользовательОбъект, Отказ) Экспорт
	Если ПользовательОбъект.ЭтоНовый()
		Или ПользовательОбъект.ОбменДанными.Загрузка
		Или Отказ
		Или Не ПользовательОбъект.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	// Установить пометку удаления личных вариантов пользователя.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Автор = &ПользовательСсылка
	|	И ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ
	|	И ВариантыОтчетов.ТолькоДляАвтора = ИСТИНА";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПользовательСсылка", ПользовательОбъект.Ссылка);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВариантОбъект.ДополнительныеСвойства.Вставить("ИндексироватьСхему", Ложь);
		ВариантОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
КонецПроцедуры

// Удаление ссылок подсистем перед их удалением.
Процедура ПередУдалениемИдентификатораОбъектаМетаданных(ИдентификаторОбъектаМетаданныхОбъект, Отказ) Экспорт
	Если ИдентификаторОбъектаМетаданныхОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Подсистема = ИдентификаторОбъектаМетаданныхОбъект.Ссылка;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВариантыОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Размещение.Подсистема = &Подсистема";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подсистема", Подсистема);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Найденные = ВариантОбъект.Размещение.НайтиСтроки(Новый Структура("Подсистема", Подсистема));
		Для Каждого СтрокаТаблицы Из Найденные Цикл
			ВариантОбъект.Размещение.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		ВариантОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// [*] Актуализирует кэш метаданных конфигурации: справочник ПредопределенныеВариантыОтчетов
//     и константу ПараметрыВариантовОтчетов.
Процедура ОперативноеОбновлениеОбщихДанныхКонфигурации(ПараметрыОбновления) Экспорт
	
	ОперативноеОбновлениеОбщихДанных("ОбщиеДанныеКонфигурации", ПараметрыОбновления.РазделенныеОбработчики);
	
КонецПроцедуры

// [*] Актуализирует данные справочника ВариантыОтчетов в части отчетов конфигурации.
Процедура ОперативноеОбновлениеРазделенныхДанныхКонфигурации() Экспорт
	
	ОперативноеОбновлениеРазделенныхДанных("РазделенныеДанныеКонфигурации");
	
КонецПроцедуры

// Частичное индекса поиска предопределенных вариантов отчетов - только по изменениям в настройках вариантов.
Процедура ОтложенноеОбновлениеОбщихДанныхКонфигурацииИнкрементальное(Параметры = Неопределено) Экспорт
	
	ОтложенноеОбновлениеДанных("ОбщиеДанныеКонфигурации", Ложь);
	
КонецПроцедуры

// Полное обновление индекса поиска предопределенных вариантов отчетов.
Процедура ОтложенноеОбновлениеОбщихДанныхКонфигурацииПолное(Параметры = Неопределено) Экспорт
	
	ОтложенноеОбновлениеДанных("ОбщиеДанныеКонфигурации", Истина);
	
КонецПроцедуры

// Полное обновление индекса поиска вариантов отчетов.
Процедура ОтложенноеОбновлениеРазделенныхДанныхКонфигурацииПолное(Параметры = Неопределено) Экспорт
	
	ОтложенноеОбновлениеДанных("РазделенныеДанныеКонфигурации", Истина);
	
КонецПроцедуры

// [2.1.1.1] Выполняет перенос данных справочника "Варианты отчетов" для редакции 2.1.
Процедура ПерейтиКРедакции21() Экспорт
	ПредставлениеПроцедуры = НСтр("ru = 'Перейти к редакции 2.1'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВариантыОтчетов.Ссылка,
	|	ВариантыОтчетов.УдалитьКлючОбъекта КАК ОтчетПолноеИмя
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.УдалитьКлючОбъекта <> """"";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Сформировать информацию об отчете.
		ОтчетИнформация = СформироватьИнформациюОбОтчетеПоПолномуИмени(Выборка.ОтчетПолноеИмя);
		
		// Проверить результат
		Если ТипЗнч(ОтчетИнформация.ТекстОшибки) = Тип("Строка") Тогда
			ОшибкаПоВарианту(Выборка.Ссылка, ОтчетИнформация.ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ВариантОбъект.ТипОтчета = Перечисления.ТипыОтчетов.УдалитьПользовательский
			Или ВариантОбъект.ТипОтчета = Перечисления.ТипыОтчетов.Внешний Тогда
			ВариантОбъект.Пользовательский = Истина;
		Иначе
			ВариантОбъект.Пользовательский = Ложь;
		КонецЕсли;
		
		ВариантОбъект.Отчет = ОтчетИнформация.Отчет;
		ВариантОбъект.ТипОтчета = ОтчетИнформация.ТипОтчета;
		
		Если ОтчетИнформация.ТипОтчета = Перечисления.ТипыОтчетов.Внешний Тогда
			// Установка настроек варианта внешнего отчета, характерных для всех вариантов внешних отчетов.
			// Все варианты внешних отчетов являются пользовательскими поскольку
			// предопределенные варианты внешних отчетов не регистрируются в системе,
			// а зачитываются каждый раз динамически.
			ВариантОбъект.Пользовательский = Истина;
			
			// Варианты внешних отчетов не могут открываться из панели отчетов.
			ВариантОбъект.Размещение.Очистить();
			
		Иначе
			
			// Замена полных имен подсистем на ссылки справочника "Идентификаторы объектов метаданных".
			Редакция21ПривестиНастройкиПоРазделам(ВариантОбъект);
			
			// Перенос пользовательских настроек из табличной части в регистр сведений.
			Редакция21ПеренестиПользовательскиеНастройкиВРегистр(ВариантОбъект);
			
		КонецЕсли;
		
		// Варианты поставляются без автора.
		Если Не ВариантОбъект.Пользовательский Тогда
			ВариантОбъект.Автор = Неопределено;
		КонецЕсли;
		
		ВариантОбъект.УдалитьКлючОбъекта = "";
		ВариантОбъект.УдалитьПредставлениеОбъекта = "";
		ВариантОбъект.УдалитьИсключенияБыстрогоДоступа.Очистить();
		ЗаписатьПредопределенный(ВариантОбъект);
	КонецЦикла;
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

// [2.1.3.6] Заполняет ссылки предопределенных элементов справочника "Варианты отчетов".
Процедура ЗаполнитьСсылкиПредопределенных() Экспорт
	ПредставлениеПроцедуры = НСтр("ru = 'Заполнить ссылки предопределенных вариантов отчетов'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	// Составить таблицу замен старых ключей вариантов на актуальные.
	Изменения = ИзмененияКлючей();
	
	// Получить ссылки вариантов отчетов для замены ключей,
	//   исключив из списка замен те варианты отчетов,
	//   актуальные ключи которых уже зарегистрированы,
	//   или старые ключи которых уже не заняты.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Изменения.Отчет КАК Отчет,
	|	Изменения.СтароеИмяВарианта КАК СтароеИмяВарианта,
	|	Изменения.АктуальноеИмяВарианта КАК АктуальноеИмяВарианта
	|ПОМЕСТИТЬ втИзменения
	|ИЗ
	|	&Изменения КАК Изменения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтароеИмяВарианта,
	|	АктуальноеИмяВарианта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВариантыОтчетов.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(ВариантыОтчетов.Отчет КАК Справочник.ИдентификаторыОбъектовМетаданных) КАК Отчет,
	|	ЕСТЬNULL(втИзменения.АктуальноеИмяВарианта, ВариантыОтчетов.КлючВарианта) КАК АктуальныйКлючВарианта
	|ПОМЕСТИТЬ втАктуальные
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИзменения КАК втИзменения
	|		ПО ВариантыОтчетов.Отчет = втИзменения.Отчет
	|			И ВариантыОтчетов.КлючВарианта = втИзменения.СтароеИмяВарианта
	|ГДЕ
	|	ВариантыОтчетов.Пользовательский = ЛОЖЬ
	|	И ВариантыОтчетов.ТипОтчета = &ТипОтчета
	|	И ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ
	|	И ВариантыОтчетов.ПредопределенныйВариант = &ПустойПредопределенный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АктуальныйКлючВарианта,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втАктуальные.Ссылка,
	|	ПредопределенныеВариантыОтчетов.Наименование,
	|	ПредопределенныеВариантыОтчетов.КлючВарианта,
	|	ЕСТЬNULL(ПредопределенныеВариантыОтчетов.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПредопределенныйВариант
	|ИЗ
	|	втАктуальные КАК втАктуальные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов КАК ПредопределенныеВариантыОтчетов
	|		ПО втАктуальные.Отчет = ПредопределенныеВариантыОтчетов.Отчет
	|			И втАктуальные.АктуальныйКлючВарианта = ПредопределенныеВариантыОтчетов.КлючВарианта";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Изменения", Изменения);
	Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Внутренний); // Поддержка расширений не требуется.
	Запрос.УстановитьПараметр("ПустойПредопределенный", Справочники.ПредопределенныеВариантыОтчетов.ПустаяСсылка());
	Запрос.Текст = ТекстЗапроса;
	
	// Заменить имена вариантов на ссылки.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных", Истина);
		ВариантОбъект.ДополнительныеСвойства.Вставить("ИндексироватьСхему", Ложь);
		Если ЗначениеЗаполнено(Выборка.ПредопределенныйВариант) Тогда
			ЗаполнитьЗначенияСвойств(ВариантОбъект, Выборка, "Наименование, КлючВарианта, ПредопределенныйВариант");
			Найденные = ВариантОбъект.Размещение.НайтиСтроки(Новый Структура("УдалитьПредопределенная", Истина));
			Для Каждого СтрокаТаблицы Из Найденные Цикл
				ВариантОбъект.Размещение.Удалить(СтрокаТаблицы);
			КонецЦикла;
			ВариантОбъект.Описание = "";
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВариантОбъект);
		Иначе
			ВариантОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
	
КонецПроцедуры

// [2.2.3.30] Уменьшает количество быстрых настроек в пользовательских вариантах отчетов до 2 шт.
Процедура СократитьКоличествоБыстрыхНастроек(ВходящиеПараметры = Неопределено) Экспорт
	ПредставлениеПроцедуры = НСтр("ru = 'Сокращение количества быстрых настроек в отчетах'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	// Чтение сведений от предыдущего запуска с ошибками.
	Параметры = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ВариантыОтчетовКлиентСервер.ПолноеИмяПодсистемы(),
		"СократитьКоличествоБыстрыхНастроек");
	Запрос = Новый Запрос;
	Если Параметры = Неопределено Тогда
		Запрос.Текст = "ВЫБРАТЬ Ссылка, Отчет ИЗ Справочник.ВариантыОтчетов ГДЕ Пользовательский И ТипОтчета <> &Внешний";
		Запрос.УстановитьПараметр("Внешний", Перечисления.ТипыОтчетов.Внешний);
		НомерПопытки = 1;
	Иначе
		Запрос.Текст = "ВЫБРАТЬ Ссылка, Отчет ИЗ Справочник.ВариантыОтчетов ГДЕ Ссылка В (&ВариантыСОшибками)";
		Запрос.УстановитьПараметр("ВариантыСОшибками", Параметры.ВариантыСОшибками);
		НомерПопытки = Параметры.НомерПопытки + 1;
	КонецЕсли;
	ТаблицаОтчетов = Запрос.Выполнить().Выгрузить();
	
	Записано = 0;
	Ошибок = 0;
	КэшОтчетов = Новый Соответствие;
	КэшФлажка = Неопределено;
	ВариантыСОшибками = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОтчетов Цикл
		ОтчетОбъект = КэшОтчетов.Получить(СтрокаТаблицы.Отчет); // Чтение кэша.
		Если ОтчетОбъект = Неопределено Тогда // Запись в кэш.
			Подключение = ПодключитьОтчетОбъект(СтрокаТаблицы.Отчет, Истина);
			Если Подключение.Успех Тогда
				ОтчетОбъект = Подключение.Объект;
				ОтчетМетаданные = Подключение.Метаданные;
				Если Не ОтчетПодключенКОсновнойФорме(ОтчетМетаданные, КэшФлажка) Тогда
					// Отчет не подключен к общей форме отчета.
					// Уменьшение количества быстрых настроек должно выполняться прикладным кодом.
					ОтчетОбъект = "";
				КонецЕсли;
			Иначе // Отчет не найден.
				ОшибкаПоВарианту(СтрокаТаблицы.Ссылка, Подключение.ТекстОшибки);
				ОтчетОбъект = "";
			КонецЕсли;
			КэшОтчетов.Вставить(СтрокаТаблицы.Отчет, ОтчетОбъект);
		КонецЕсли;
		Если ОтчетОбъект = "" Тогда
			Продолжить;
		КонецЕсли;
		
		ВариантОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
		
		ИнформацияОбОшибке = Неопределено;
		Попытка
			ТребуетсяЗапись = УменьшитьКоличествоБыстрыхНастроек(ВариантОбъект, ОтчетОбъект);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТребуетсяЗапись = Ложь;
		КонецПопытки;
		Если ИнформацияОбОшибке <> Неопределено Тогда // Возникла проблема.
			ТекстОшибки = НСтр("ru = 'Вариант ""%1"" отчета ""%2"":'")
			+ Символы.ПС + НСтр("ru = 'При уменьшении количества быстрых настроек пользовательского возникла ошибка:'")
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ОшибкаПоВарианту(ВариантОбъект.Ссылка, ТекстОшибки, ВариантОбъект.КлючВарианта, ВариантОбъект.Отчет);
			ВариантыСОшибками.Добавить(ВариантОбъект.Ссылка);
			Ошибок = Ошибок + 1;
		КонецЕсли;
		
		Если ТребуетсяЗапись Тогда
			ВариантОбъект.ДополнительныеСвойства.Вставить("ИндексироватьСхему", Ложь);
			ВариантОбъект.ДополнительныеСвойства.Вставить("ОтчетОбъект", ОтчетОбъект);
			ЗаписатьПредопределенный(ВариантОбъект);
			Записано = Записано + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Ошибок > 0 Тогда
		// Запись сведений для следующего запуска.
		Параметры = Новый Структура;
		Параметры.Вставить("НомерПопытки", НомерПопытки);
		Параметры.Вставить("ВариантыСОшибками", ВариантыСОшибками);
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			ВариантыОтчетовКлиентСервер.ПолноеИмяПодсистемы(),
			"СократитьКоличествоБыстрыхНастроек",
			Параметры);
	ИначеЕсли НомерПопытки > 1 Тогда
		// Удаление сведений от предыдущих запусков.
		ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(
			ВариантыОтчетовКлиентСервер.ПолноеИмяПодсистемы(),
			"СократитьКоличествоБыстрыхНастроек",
			ИмяПользователя());
	КонецЕсли;
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры, Записано);
	
	Если Ошибок > 0 И НомерПопытки <= 30 Тогда
		// Следующий запуск должен состояться.
		ТекстОшибки = ПредставлениеПроцедуры + ":"
			+ Символы.ПС + НСтр("ru = 'Не удалось уменьшить количество быстрых настроек %1 отчетов.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Ошибок);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
КонецПроцедуры

// [2.3.2.32] Удаление устаревших отложенных разделенных обработчиков обновления.
Процедура УдалитьУстаревшиеОбработчики(Параметры = Неопределено) Экспорт
	
	ОбновлениеИнформационнойБазы.УдалитьОтложенныйОбработчикИзОчереди("ВариантыОтчетов.ОтложенноеИнкрементальноеОбновлениеОбщихДанных");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы / Начальное заполнение и актуализация справочников.

// Актуализирует кэш метаданных конфигурации/подключенных расширений.
Функция ОперативноеОбновлениеОбщихДанных(Режим, РазделенныеОбработчики)
	
	////////////////////////////////////////////////////////////////////////////////
	// Выполняется только для предопределенных вариантов отчетов.
	// План обновления:
	
	Кэш = Новый Структура;
	Кэш.Вставить("Режим",                  Режим);
	Кэш.Вставить("ОбновлятьКонфигурацию",  Режим = "ОбщиеДанныеКонфигурации");
	Кэш.Вставить("ОбновлятьРасширения",    Режим = "ОбщиеДанныеРасширений");
	Кэш.Вставить("РазделенныеОбработчики", РазделенныеОбработчики);
	Кэш.Вставить("ЕстьИзменения",       Ложь);
	Кэш.Вставить("ЕстьВажныеИзменения", Ложь);
	Кэш.Вставить("ДеревоВариантов", ДеревоПредопределенных(?(Кэш.ОбновлятьКонфигурацию, "Внутренний", "Расширение")));
	Кэш.Вставить("ОбновлятьЗамеры", Кэш.ОбновлятьКонфигурацию И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности"));
	Кэш.Вставить("ТаблицаЗамеров",  ТаблицаЗамеров());
	Кэш.Вставить("МодельСервиса",   ОбщегоНазначенияПовтИсп.РазделениеВключено());
	Кэш.Вставить("Уточнение", ?(Кэш.Режим = "ОбщиеДанныеКонфигурации", НСтр("ru = 'метаданные конфигурации'"), НСтр("ru = 'метаданные расширений'")));
	
	// План обновления:
	
	////////////////////////////////////////////////////////////////////////////////
	// 1. Заменить устаревшие ключи вариантов отчетов на актуальные.
	АктуализироватьКлючиПредопределенных(Кэш);
	
	////////////////////////////////////////////////////////////////////////////////
	// 2. Актуализировать предопределенные варианты отчетов и перезаписать
	//    константу, в которой хранятся привязки к функциональным опциям.
	ОбновитьНастройкиПредопределенных(Кэш);
	
	////////////////////////////////////////////////////////////////////////////////
	// 3. Установить пометку удаления вариантов удаленных отчетов.
	ПометитьНаУдалениеВариантыУдаленныхОтчетов(Кэш);
	
	////////////////////////////////////////////////////////////////////////////////
	// 4. Зарегистрировать ключевые операции.
	Если Кэш.ОбновлятьЗамеры Тогда
		ОбновитьЗамерыВариантов(Кэш);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	// 5. Записать параметры в константу/регистр с хранилищем значения.
	ЗаписатьПараметрыВариантовОтчетов(Кэш);
	
	////////////////////////////////////////////////////////////////////////////////
	// 6. Записать срез ключей вариантов отчетов расширений в регистр.
	ЗафиксироватьТекущуюВерсиюРасширений(Кэш);
	
	////////////////////////////////////////////////////////////////////////////////
	// 7. Обновить разделенные данные в модели сервиса.
	Если Кэш.МодельСервиса И Кэш.ЕстьВажныеИзменения Тогда
		Обработчики = Кэш.РазделенныеОбработчики;
		Если Обработчики = Неопределено Тогда
			Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
			Кэш.РазделенныеОбработчики = Обработчики;
		КонецЕсли;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.РежимВыполнения = "Оперативно";
		Обработчик.Версия    = "*";
		Обработчик.Процедура = "ВариантыОтчетов.ОперативноеОбновлениеРазделенныхДанныхКонфигурации";
		Обработчик.Приоритет = 70;
	КонецЕсли;
	
	// Для платформы (очистка коллекции вручную для освобождение памяти от цикличных ссылок).
	Кэш.ДеревоВариантов.Колонки.Очистить();
	Кэш.ДеревоВариантов.Строки.Очистить();
	
	Возврат Кэш;
КонецФункции

// Актуализирует данные справочника ВариантыОтчетов.
Функция ОперативноеОбновлениеРазделенныхДанных(Режим)
	
	Кэш = Новый Структура;
	Кэш.Вставить("Режим",               Режим);
	Кэш.Вставить("ЕстьИзменения",       Ложь);
	Кэш.Вставить("ЕстьВажныеИзменения", Ложь);
	Кэш.Вставить("Уточнение", НРег(ОтчетыКлиентСервер.ИмяВПредставление(Режим)));
	
	////////////////////////////////////////////////////////////////////////////////
	// План обновления:
	
	////////////////////////////////////////////////////////////////////////////////
	// 1. Актуализировать разделенные варианты отчетов.
	АктуализироватьСоставОбласти(Кэш);
	
	////////////////////////////////////////////////////////////////////////////////
	// 2. Установить пометку удаления вариантов удаленных отчетов.
	ПометитьНаУдалениеВариантыУдаленныхОтчетов(Кэш);
	
	Возврат Кэш;
	
КонецФункции

// Обновление индекса поиска предопределенных вариантов отчетов.
Функция ОтложенноеОбновлениеДанных(Режим, Полное)
	Если Режим = "ОбщиеДанныеКонфигурации" И Не РазрешеноИндексированиеНеразделенныхДанных() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Кэш = Новый Структура;
	Кэш.Вставить("Режим",               Режим);
	Кэш.Вставить("ЕстьИзменения",       Ложь);
	Кэш.Вставить("ЕстьВажныеИзменения", Ложь);
	Кэш.Вставить("ОбщиеДанные", Режим = "ОбщиеДанныеКонфигурации" Или Режим = "ОбщиеДанныеРасширений");
	Кэш.Вставить("Полное",    Полное);
	Кэш.Вставить("Уточнение", НРег(ОтчетыКлиентСервер.ИмяВПредставление(Режим)));
	Кэш.Уточнение = Кэш.Уточнение + ", " + ?(Полное, НСтр("ru = 'полное'"), НСтр("ru = 'по изменениям'"));
	
	// План обновления:
	
	////////////////////////////////////////////////////////////////////////////////
	// 1. Обновить индекс поиска отчетов.
	ОбновитьИндексПоиска(Кэш);
	
	Возврат Кэш;
КонецФункции

// Обновление индекса поиска отчетов.
Процедура ОбновитьИндексПоиска(Кэш)
	Если Кэш.Режим = "ОбщиеДанныеКонфигурации" И Не РазрешеноИндексированиеНеразделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеПроцедуры = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Обновление индекса поиска (%1)'"), Кэш.Уточнение);
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	Запрос = Новый Запрос;
	
	Если Кэш.ОбщиеДанные Тогда
		Поиск = Новый Структура("Отчет, КлючВарианта, ЭтоВариант", , , Истина);
		Если Кэш.Режим = "ОбщиеДанныеКонфигурации" Тогда
			ДеревоВариантов = ДеревоПредопределенных("Внутренний");
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПредопределенныеВариантыОтчетов.Ссылка,
			|	ПредопределенныеВариантыОтчетов.Отчет
			|ИЗ
			|	Справочник.ПредопределенныеВариантыОтчетов КАК ПредопределенныеВариантыОтчетов
			|ГДЕ
			|	ПредопределенныеВариантыОтчетов.ПометкаУдаления = ЛОЖЬ";
		ИначеЕсли Кэш.Режим = "ОбщиеДанныеРасширений" Тогда
			ДеревоВариантов = ДеревоПредопределенных("Расширение");
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПредопределенныеВариантыОтчетовВерсийРасширений.Вариант КАК Ссылка,
			|	ПредопределенныеВариантыОтчетовВерсийРасширений.Отчет
			|ИЗ
			|	РегистрСведений.ПредопределенныеВариантыОтчетовВерсийРасширений КАК ПредопределенныеВариантыОтчетовВерсийРасширений
			|ГДЕ
			|	ПредопределенныеВариантыОтчетовВерсийРасширений.ВерсияРасширений = &ВерсияРасширений
			|	И ПредопределенныеВариантыОтчетовВерсийРасширений.Вариант <> &ПустаяСсылка";
			Запрос.УстановитьПараметр("ВерсияРасширений", ПараметрыСеанса.ВерсияРасширений);
			Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка());
		КонецЕсли;
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВариантыОтчетов.Ссылка,
		|	ВариантыОтчетов.Отчет
		|ИЗ
		|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|ГДЕ
		|	ВариантыОтчетов.Пользовательский
		|	И ВариантыОтчетов.ТипОтчета = &ТипОтчета
		|	И ВариантыОтчетов.Отчет В(&ДоступныеОтчеты)";
		Запрос.УстановитьПараметр("ДоступныеОтчеты", ВариантыОтчетовПовтИсп.ДоступныеОтчеты(Ложь));
		Если Кэш.Режим = "РазделенныеДанныеКонфигурации" Тогда
			Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Внутренний);
		ИначеЕсли Кэш.Режим = "РазделенныеДанныеРасширений" Тогда
			Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Расширение);
		КонецЕсли;
	КонецЕсли;
	
	КэшОтчетов = Новый Соответствие;
	СтарыеСведения = Новый Структура("ХешНастроек, НаименованияПолей, НаименованияПараметровИОтборов, КлючевыеСлова");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПримечаниеПоВарианту(Выборка.Ссылка, НСтр("ru = 'Индексация схемы'"));
		
		ОтчетОбъект = КэшОтчетов.Получить(Выборка.Отчет); // Чтение кэша.
		Если ОтчетОбъект = "" Тогда
			Продолжить; // Отчет не подключен, ошибка зарегистрирована ранее.
		КонецЕсли;
		
		ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Кэш.ОбщиеДанные Тогда
			ЗаполнитьЗначенияСвойств(Поиск, ВариантОбъект, "Отчет, КлючВарианта");
			Найденные = ДеревоВариантов.Строки.НайтиСтроки(Поиск, Истина);
			Если Найденные.Количество() = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Вариант ""%1"" не найден для отчета ""%2""'");
				ОшибкаПоВарианту(ВариантОбъект.Ссылка, ТекстОшибки, ВариантОбъект.КлючВарианта, ВариантОбъект.Отчет);
				Продолжить; // Возникла проблема.
			КонецЕсли;
			
			ОписаниеВарианта = Найденные[0];
			СтрокаОтчет = ОписаниеВарианта.Родитель;
			ЗаполнитьОписаниеСтрокиВарианта(ОписаниеВарианта, СтрокаОтчет);
			
			// Если вариант отключен, то и в поиске он не участвует.
			Если Не ОписаниеВарианта.Включен Тогда
				Продолжить; // Заполнение не требуется.
			КонецЕсли;
			
			НастройкиКД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеВарианта.СистемнаяИнформация, "НастройкиКД");
			ВариантОбъект.ДополнительныеСвойства.Вставить("НастройкиКД", НастройкиКД);
			ВариантОбъект.ДополнительныеСвойства.Вставить("НастройкиДляПоиска", ОписаниеВарианта.НастройкиДляПоиска);
		КонецЕсли;
		
		ВариантОбъект.ДополнительныеСвойства.Вставить("ОтчетОбъект", ОтчетОбъект);
		
		ЗаполнитьЗначенияСвойств(СтарыеСведения, ВариантОбъект);
		ВариантОбъект.НаименованияПолей = "";
		ВариантОбъект.НаименованияПараметровИОтборов = "";
		ВариантОбъект.КлючевыеСлова = "";
		Если Кэш.Полное Тогда // Переиндексировать принудительно, без проверки хеш-суммы.
			ВариантОбъект.ДополнительныеСвойства.Вставить("ИндексироватьСхему", Истина);
		КонецЕсли;
		СхемаПроиндексирована = ПроиндексироватьСодержимоеСхемы(ВариантОбъект);
		Если СхемаПроиндексирована И ИзменилисьНастройкиПоиска(ВариантОбъект, СтарыеСведения) Тогда
			Если Кэш.ОбщиеДанные Тогда
				ЗаписатьПредопределенный(ВариантОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВариантОбъект);
			КонецЕсли;
			Кэш.ЕстьИзменения = Истина;
		КонецЕсли;
		
		// Сохранение инициализированного объекта в кэш.
		Если ОтчетОбъект = Неопределено Тогда
			ОтчетОбъект = ВариантОбъект.ДополнительныеСвойства.ОтчетОбъект;
			Если ОтчетОбъект = Неопределено Тогда
				ОтчетОбъект = ""; // Отчет не был подключен, регистрация пустой строки для пропуска других вариантов.
			КонецЕсли;
			КэшОтчетов.Вставить(Выборка.Отчет, ОтчетОбъект);
		КонецЕсли;
	КонецЦикла;
	
	// Для платформы (очистка коллекции вручную для освобождение памяти от цикличных ссылок).
	Если Кэш.ОбщиеДанные Тогда
		ДеревоВариантов.Колонки.Очистить();
		ДеревоВариантов.Строки.Очистить();
	КонецЕсли;
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
	
КонецПроцедуры

// Замена старых ключей вариантов отчетов на актуальные.
Процедура АктуализироватьКлючиПредопределенных(Кэш)
	ПредставлениеПроцедуры = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Обновление ключей вариантов отчетов (%1)'"), Кэш.Уточнение);
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	// Составить таблицу замен старых ключей вариантов на актуальные.
	Изменения = ИзмененияКлючей();
	
	// Получить ссылки вариантов отчетов для замены ключей,
	//   исключив из списка замен те варианты отчетов,
	//   актуальные ключи которых уже зарегистрированы,
	//   или старые ключи которых уже не заняты.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Изменения.Отчет,
	|	Изменения.СтароеИмяВарианта,
	|	Изменения.АктуальноеИмяВарианта
	|ПОМЕСТИТЬ втИзменения
	|ИЗ
	|	&Изменения КАК Изменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втИзменения.Отчет,
	|	втИзменения.АктуальноеИмяВарианта,
	|	ВариантыОтчетовСтарые.Ссылка
	|ИЗ
	|	втИзменения КАК втИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов КАК ВариантыОтчетовАктуальные
	|		ПО втИзменения.Отчет = ВариантыОтчетовАктуальные.Отчет
	|			И втИзменения.АктуальноеИмяВарианта = ВариантыОтчетовАктуальные.КлючВарианта
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов КАК ВариантыОтчетовСтарые
	|		ПО втИзменения.Отчет = ВариантыОтчетовСтарые.Отчет
	|			И втИзменения.СтароеИмяВарианта = ВариантыОтчетовСтарые.КлючВарианта
	|ГДЕ
	|	ВариантыОтчетовАктуальные.Ссылка ЕСТЬ NULL 
	|	И НЕ ВариантыОтчетовСтарые.Ссылка ЕСТЬ NULL ";
	
	Если Кэш.Режим = "ОбщиеДанныеРасширений" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".ПредопределенныеВариантыОтчетов", ".ПредопределенныеВариантыОтчетовРасширений");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Изменения", Изменения);
	Запрос.Текст = ТекстЗапроса;
	
	// Заменить старые имена вариантов на актуальные.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Кэш.ЕстьИзменения = Истина;
		Кэш.ЕстьВажныеИзменения = Истина;
		ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВариантОбъект.КлючВарианта = Выборка.АктуальноеИмяВарианта;
		ЗаписатьПредопределенный(ВариантОбъект);
	КонецЦикла;
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

// Актуализация предопределенных вариантов отчетов.
Процедура ОбновитьНастройкиПредопределенных(Кэш)
	ПредставлениеПроцедуры = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Обновление настроек предопределенных (%1)'"), Кэш.Уточнение);
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	РеквизитыВариантов = Метаданные.Справочники.ВариантыОтчетов.Реквизиты;
	
	ТаблицаФункциональныхОпций = Новый ТаблицаЗначений;
	ТаблицаФункциональныхОпций.Колонки.Добавить("Отчет",                   РеквизитыВариантов.Отчет.Тип);
	ТаблицаФункциональныхОпций.Колонки.Добавить("ПредопределенныйВариант", РеквизитыВариантов.ПредопределенныйВариант.Тип);
	ТаблицаФункциональныхОпций.Колонки.Добавить("ИмяФункциональнойОпции",  Новый ОписаниеТипов("Строка"));
	
	Кэш.Вставить("ТаблицаФункциональныхОпций", ТаблицаФункциональныхОпций);
	
	ОтчетыСНастройкамиСписок = Новый СписокЗначений;
	Кэш.Вставить("ОтчетыСНастройкамиСписок", ОтчетыСНастройкамиСписок);
	
	Кэш.ДеревоВариантов.Колонки.Добавить("НайденВБазеДанных", Новый ОписаниеТипов("Булево"));
	Кэш.ДеревоВариантов.Колонки.Добавить("ВариантИзБазы", Новый ОписаниеТипов("СтрокаТаблицыЗначений"));
	
	Если Кэш.Режим = "ОбщиеДанныеКонфигурации" Тогда
		Кэш.ДеревоВариантов.Колонки.Добавить("ВариантРодитель", Новый ОписаниеТипов("СправочникСсылка.ПредопределенныеВариантыОтчетов"));
		ТекстЗапроса = "ВЫБРАТЬ * ИЗ Справочник.ПредопределенныеВариантыОтчетов УПОРЯДОЧИТЬ ПО ПометкаУдаления";
		ПустаяСсылка = Справочники.ПредопределенныеВариантыОтчетов.ПустаяСсылка();
	ИначеЕсли Кэш.Режим = "ОбщиеДанныеРасширений" Тогда
		Кэш.ДеревоВариантов.Колонки.Добавить("ВариантРодитель", Новый ОписаниеТипов("СправочникСсылка.ПредопределенныеВариантыОтчетовРасширений"));
		ТекстЗапроса = "ВЫБРАТЬ * ИЗ Справочник.ПредопределенныеВариантыОтчетовРасширений УПОРЯДОЧИТЬ ПО ПометкаУдаления";
		ПустаяСсылка = Справочники.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка();
	КонецЕсли;
	
	// Сопоставление информации из базы и из метаданных и пометка на удаление устаревших объектов из базы.
	ПоискВарианта = Новый Структура("Отчет, КлючВарианта, НайденВБазеДанных, ЭтоВариант");
	ПоискВарианта.НайденВБазеДанных = Ложь;
	ПоискВарианта.ЭтоВариант        = Истина;
	Запрос = Новый Запрос(ТекстЗапроса);
	ТаблицаПредопределенные = Запрос.Выполнить().Выгрузить();
	Для Каждого ВариантИзБазы Из ТаблицаПредопределенные Цикл
		ЗаполнитьЗначенияСвойств(ПоискВарианта, ВариантИзБазы, "Отчет, КлючВарианта");
		Найденные = Кэш.ДеревоВариантов.Строки.НайтиСтроки(ПоискВарианта, Истина);
		Если Найденные.Количество() = 0 Тогда
			Если ВариантИзБазы.ПометкаУдаления И ВариантИзБазы.Родитель = ПустаяСсылка Тогда
				Продолжить; // Действие не требуется.
			КонецЕсли;
			ВариантОбъект = ВариантИзБазы.Ссылка.ПолучитьОбъект();
			ВариантОбъект.ПометкаУдаления = Истина;
			ВариантОбъект.Родитель = ПустаяСсылка;
			ЗаписатьПредопределенный(ВариантОбъект);
			Кэш.ЕстьИзменения = Истина;
			Кэш.ЕстьВажныеИзменения = Истина;
		Иначе
			ОписаниеВарианта = Найденные[0];
			ЗаполнитьОписаниеСтрокиВарианта(ОписаниеВарианта);
			ОписаниеВарианта.НайденВБазеДанных = Истина;
			ОписаниеВарианта.ВариантИзБазы = ВариантИзБазы;
		КонецЕсли;
	КонецЦикла;
	
	// Добавление/обновление информации в базе данных.
	Для Каждого ОписаниеОтчета Из Кэш.ДеревоВариантов.Строки Цикл
		ОсновнойВариантСсылка = ПустаяСсылка;
		ОсновнойВариант = ОписаниеОтчета.ОсновнойВариант;
		Если ТипЗнч(ОсновнойВариант) = Тип("СтрокаДереваЗначений") Тогда
			ЗаполнитьОписаниеСтрокиВарианта(ОсновнойВариант);
			ОсновнойВариант.ВариантРодитель = ПустаяСсылка;
			ОсновнойВариантСсылка = ОбновитьПредопределенный(Кэш, ОсновнойВариант); // Вариант без родителя.
		КонецЕсли;
		Если ОписаниеОтчета.ОпределитьНастройкиФормы Тогда
			ОтчетыСНастройкамиСписок.Добавить(ОписаниеОтчета.Отчет);
		КонецЕсли;
		Для Каждого ОписаниеВарианта Из ОписаниеОтчета.Строки Цикл
			ЗаполнитьОписаниеСтрокиВарианта(ОписаниеВарианта);
			Если ОписаниеВарианта = ОсновнойВариант Тогда
				ВариантСсылка = ОсновнойВариантСсылка;
			Иначе
				ОписаниеВарианта.ВариантРодитель = ОсновнойВариантСсылка;
				ВариантСсылка = ОбновитьПредопределенный(Кэш, ОписаниеВарианта);
			КонецЕсли;
			Для Каждого ИмяФункциональнойОпции Из ОписаниеВарианта.ФункциональныеОпции Цикл
				СвязьСФункциональнойОпцией = ТаблицаФункциональныхОпций.Добавить();
				СвязьСФункциональнойОпцией.Отчет                   = ОписаниеВарианта.Отчет;
				СвязьСФункциональнойОпцией.ПредопределенныйВариант = ВариантСсылка;
				СвязьСФункциональнойОпцией.ИмяФункциональнойОпции  = ИмяФункциональнойОпции;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

// Записывает настройки варианта в данные справочника.
Функция ОбновитьПредопределенный(Кэш, ОписаниеВарианта)
	ВариантИзБазы = ОписаниеВарианта.ВариантИзБазы;
	Если Кэш.ОбновлятьЗамеры Тогда
		Ключ = ?(ОписаниеВарианта.НайденВБазеДанных, ВариантИзБазы.КлючЗамеров, "");
		ЗарегистрироватьЗамерыВариантаКОбновлению(Кэш, Ключ, ОписаниеВарианта.КлючЗамеров, ОписаниеВарианта.Наименование);
	КонецЕсли;
	Если ОписаниеВарианта.НайденВБазеДанных Тогда
		Если ИзменилисьКлючевыеНастройкиПредопределенного(ОписаниеВарианта, ВариантИзБазы) Тогда
			Кэш.ЕстьВажныеИзменения = Истина; // Перезапись ключевых настроек (потребуется обновление разделенных данных).
		ИначеЕсли ИзменилисьВторостепенныеНастройкиПредопределенного(ОписаниеВарианта, ВариантИзБазы) Тогда
			// Перезапись без обновления разделенных данных.
		Иначе
			Возврат ВариантИзБазы.Ссылка;
		КонецЕсли;
		
		ВариантОбъект = ОписаниеВарианта.ВариантИзБазы.Ссылка.ПолучитьОбъект();
		ВариантОбъект.Размещение.Очистить();
		Если ВариантОбъект.ПометкаУдаления Тогда
			ВариантОбъект.ПометкаУдаления = Ложь;
		КонецЕсли;
	Иначе
		Кэш.ЕстьВажныеИзменения = Истина; // Регистрация нового (потребуется обновление разделенных данных).
		Если Кэш.Режим = "ОбщиеДанныеКонфигурации" Тогда
			ВариантОбъект = Справочники.ПредопределенныеВариантыОтчетов.СоздатьЭлемент();
		ИначеЕсли Кэш.Режим = "ОбщиеДанныеРасширений" Тогда
			ВариантОбъект = Справочники.ПредопределенныеВариантыОтчетовРасширений.СоздатьЭлемент();
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ВариантОбъект, ОписаниеВарианта, "Отчет, КлючВарианта, Наименование, Включен, ВидимостьПоУмолчанию, Описание, ГруппироватьПоОтчету");
	
	ВариантОбъект.Родитель = ОписаниеВарианта.ВариантРодитель;
	
	Для Каждого КлючИЗначение Из ОписаниеВарианта.Размещение Цикл
		СтрокаРазмещения = ВариантОбъект.Размещение.Добавить();
		СтрокаРазмещения.Подсистема = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(КлючИЗначение.Ключ);
		СтрокаРазмещения.Важный  = (НРег(КлючИЗначение.Значение) = НРег("Важный"));
		СтрокаРазмещения.СмТакже = (НРег(КлючИЗначение.Значение) = НРег("СмТакже"));
	КонецЦикла;
	
	Если Кэш.ОбновлятьЗамеры Тогда
		ВариантОбъект.КлючЗамеров = ОписаниеВарианта.КлючЗамеров;
	КонецЕсли;
	
	Кэш.ЕстьИзменения = Истина;
	ЗаписатьПредопределенный(ВариантОбъект);
	
	Возврат ВариантОбъект.Ссылка;
КонецФункции

// Определяет изменились ли ключевые настройки предопределенного варианта отчета.
Функция ИзменилисьКлючевыеНастройкиПредопределенного(ОписаниеВарианта, ВариантИзБазы)
	Если ВариантИзБазы.ПометкаУдаления = Истина // Описание получено => требуется снять пометку удаления.
		Или ВариантИзБазы.Наименование <> ОписаниеВарианта.Наименование
		Или ВариантИзБазы.Родитель <> ОписаниеВарианта.ВариантРодитель
		Или ВариантИзБазы.ВидимостьПоУмолчанию <> ОписаниеВарианта.ВидимостьПоУмолчанию Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Определяет изменились ли второстепенные настройки предопределенного варианта отчета.
Функция ИзменилисьВторостепенныеНастройкиПредопределенного(ОписаниеВарианта, ВариантИзБазы)
	// Шапка
	Если ВариантИзБазы.Включен <> ОписаниеВарианта.Включен
		Или ВариантИзБазы.Описание <> ОписаниеВарианта.Описание
		Или ВариантИзБазы.КлючЗамеров <> ОписаниеВарианта.КлючЗамеров
		Или ВариантИзБазы.ГруппироватьПоОтчету <> ОписаниеВарианта.ГруппироватьПоОтчету Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Таблица "Размещение"
	ТаблицаРазмещения = ВариантИзБазы.Размещение;
	Если ТаблицаРазмещения.Количество() <> ОписаниеВарианта.Размещение.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ОписаниеВарианта.Размещение Цикл
		Подсистема = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(КлючИЗначение.Ключ);
		СтрокаРазмещения = ТаблицаРазмещения.Найти(Подсистема, "Подсистема");
		Если СтрокаРазмещения = Неопределено
			Или СтрокаРазмещения.Важный <> (НРег(КлючИЗначение.Значение) = НРег("Важный"))
			Или СтрокаРазмещения.СмТакже <> (НРег(КлючИЗначение.Значение) = НРег("СмТакже")) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

// Определяет изменились ли настройки поиска предопределенного варианта отчета.
Функция ИзменилисьНастройкиПоиска(ВариантИзБазы, СтарыеСведения)
	Если ВариантИзБазы.ХешНастроек <> СтарыеСведения.ХешНастроек
		Или ВариантИзБазы.НаименованияПолей <> СтарыеСведения.НаименованияПолей
		Или ВариантИзБазы.НаименованияПараметровИОтборов <> СтарыеСведения.НаименованияПараметровИОтборов
		Или ВариантИзБазы.КлючевыеСлова <> СтарыеСведения.КлючевыеСлова Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Приводит разделенные данные в соответствие с неразделенными данными.
Процедура АктуализироватьСоставОбласти(Кэш)
	ПредставлениеПроцедуры = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Обновление вариантов отчетов (%1)'"), Кэш.Уточнение);
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	// Обновление сведений предопределенных вариантов.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПредопределенныеКонфигурации.Ссылка КАК ПредопределенныйВариант,
	|	ПредопределенныеКонфигурации.Наименование КАК Наименование,
	|	ПредопределенныеКонфигурации.Отчет КАК Отчет,
	|	ПредопределенныеКонфигурации.ГруппироватьПоОтчету КАК ГруппироватьПоОтчету,
	|	ПредопределенныеКонфигурации.КлючВарианта КАК КлючВарианта,
	|	ПредопределенныеКонфигурации.ВидимостьПоУмолчанию КАК ВидимостьПоУмолчанию,
	|	ПредопределенныеКонфигурации.Родитель КАК Родитель
	|ПОМЕСТИТЬ втПредопределенные
	|ИЗ
	|	Справочник.ПредопределенныеВариантыОтчетов КАК ПредопределенныеКонфигурации
	|ГДЕ
	|	ПредопределенныеКонфигурации.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка,
	|	ВариантыОтчетов.ПометкаУдаления,
	|	ВариантыОтчетов.Отчет,
	|	ВариантыОтчетов.ТипОтчета,
	|	ВариантыОтчетов.КлючВарианта,
	|	ВариантыОтчетов.Наименование,
	|	ВариантыОтчетов.ПредопределенныйВариант,
	|	ВариантыОтчетов.ВидимостьПоУмолчанию,
	|	ВариантыОтчетов.Родитель,
	|	ВариантыОтчетов.ВидимостьПоУмолчаниюПереопределена
	|ПОМЕСТИТЬ втВариантыОтчетов
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	НЕ(НЕ ВариантыОтчетов.ТипОтчета = &ТипОтчета
	|				И НЕ ТИПЗНАЧЕНИЯ(ВариантыОтчетов.Отчет) = &ТипРеквизитаОтчет)
	|	И ВариантыОтчетов.Пользовательский = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА втПредопределенные.ПредопределенныйВариант ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УстановитьПометкуУдаления,
	|	ВЫБОР
	|		КОГДА втВариантыОтчетов.Ссылка ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СоздатьНовый,
	|	втПредопределенные.ПредопределенныйВариант КАК ПредопределенныйВариант,
	|	втПредопределенные.Наименование КАК Наименование,
	|	втПредопределенные.Отчет КАК Отчет,
	|	втПредопределенные.КлючВарианта КАК КлючВарианта,
	|	втПредопределенные.ГруппироватьПоОтчету КАК ГруппироватьПоОтчету,
	|	ВЫБОР
	|		КОГДА втПредопределенные.Родитель = &ПустаяСсылкаВарианта
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ втПредопределенные.Родитель
	|	КОНЕЦ КАК ПредопределенныйВариантРодитель,
	|	ВЫБОР
	|		КОГДА втВариантыОтчетов.ВидимостьПоУмолчаниюПереопределена
	|			ТОГДА втВариантыОтчетов.ВидимостьПоУмолчанию
	|		ИНАЧЕ втВариантыОтчетов.ВидимостьПоУмолчанию
	|	КОНЕЦ КАК ВидимостьПоУмолчанию,
	|	втВариантыОтчетов.Ссылка КАК РеквизитСсылка,
	|	втВариантыОтчетов.Родитель КАК РеквизитРодитель,
	|	втВариантыОтчетов.Отчет КАК РеквизитОтчет,
	|	втВариантыОтчетов.КлючВарианта КАК РеквизитКлючВарианта,
	|	втВариантыОтчетов.Наименование КАК РеквизитНаименование,
	|	втВариантыОтчетов.ПредопределенныйВариант КАК РеквизитПредопределенныйВариант,
	|	втВариантыОтчетов.ПометкаУдаления КАК РеквизитПометкаУдаления,
	|	втВариантыОтчетов.ВидимостьПоУмолчанию КАК РеквизитВидимостьПоУмолчанию
	|ИЗ
	|	втВариантыОтчетов КАК втВариантыОтчетов
	|		ПОЛНОЕ СОЕДИНЕНИЕ втПредопределенные КАК втПредопределенные
	|		ПО втВариантыОтчетов.ПредопределенныйВариант = втПредопределенные.ПредопределенныйВариант";
	
	Запрос = Новый Запрос;
	Если Кэш.Режим = "РазделенныеДанныеКонфигурации" Тогда
		Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Внутренний);
		Запрос.УстановитьПараметр("ТипРеквизитаОтчет", Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
		Запрос.УстановитьПараметр("ПустаяСсылкаВарианта", Справочники.ПредопределенныеВариантыОтчетов.ПустаяСсылка());
	ИначеЕсли Кэш.Режим = "РазделенныеДанныеРасширений" Тогда
		Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Расширение);
		Запрос.УстановитьПараметр("ТипРеквизитаОтчет", Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений"));
		Запрос.УстановитьПараметр("ПустаяСсылкаВарианта", Справочники.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка());
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".ПредопределенныеВариантыОтчетов", ".ПредопределенныеВариантыОтчетовРасширений");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Кэш.Вставить("ПустаяСсылка", Справочники.ВариантыОтчетов.ПустаяСсылка());
	Кэш.Вставить("ПоискРодителей", Новый Соответствие);
	Кэш.Вставить("ОбработанныеПредопределенные", Новый Массив);
	Кэш.Вставить("ОсновныеВарианты", Новый ТаблицаЗначений);
	Кэш.ОсновныеВарианты.Колонки.Добавить("Отчет", Метаданные.Справочники.ВариантыОтчетов.Реквизиты.Отчет.Тип);
	Кэш.ОсновныеВарианты.Колонки.Добавить("Вариант", Новый ОписаниеТипов("СправочникСсылка.ВариантыОтчетов"));
	
	Шаблоны = Новый Структура;
	
	Шаблоны.Вставить("УстановкаПометкиУдаления", Новый Структура);
	Шаблоны.УстановкаПометкиУдаления.Вставить("Родитель", Кэш.ПустаяСсылка);
	Шаблоны.УстановкаПометкиУдаления.Вставить("ПометкаУдаления", Истина);
	
	Шаблоны.Вставить("НовыеДанные", Новый Структура("ПометкаУдаления, Родитель,
		|Наименование, Отчет, КлючВарианта, ПредопределенныйВариант, ВидимостьПоУмолчанию"));
	
	СводнаяТаблицаПредопределенных = Запрос.Выполнить().Выгрузить();
	СводнаяТаблицаПредопределенных.Колонки.Добавить("Обработана", Новый ОписаниеТипов("Булево"));
	СводнаяТаблицаПредопределенных.Колонки.Добавить("Родитель", Новый ОписаниеТипов("СправочникСсылка.ВариантыОтчетов"));
	
	// Обновление основных предопределенных вариантов (без родителя).
	Поиск = Новый Структура("ПредопределенныйВариантРодитель, УстановитьПометкуУдаления", Неопределено, Ложь);
	Найденные = СводнаяТаблицаПредопределенных.НайтиСтроки(Поиск);
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		Если СтрокаТаблицы.Обработана Тогда
			Продолжить;
		КонецЕсли;
		Если Кэш.ОбработанныеПредопределенные.Найти(СтрокаТаблицы.ПредопределенныйВариант) <> Неопределено Тогда
			СтрокаТаблицы.УстановитьПометкуУдаления = Истина;
		КонецЕсли;
		
		СтрокаТаблицы.Родитель = Кэш.ПустаяСсылка;
		ОбновитьРазделенныйПредопределенный(Кэш, Шаблоны, СтрокаТаблицы);
		
		Если Не СтрокаТаблицы.УстановитьПометкуУдаления
			И СтрокаТаблицы.ГруппироватьПоОтчету
			И Кэш.ПоискРодителей.Получить(СтрокаТаблицы.Отчет) = Неопределено Тогда
			Кэш.ПоискРодителей.Вставить(СтрокаТаблицы.Отчет, СтрокаТаблицы.РеквизитСсылка);
			ОсновнойВариант = Кэш.ОсновныеВарианты.Добавить();
			ОсновнойВариант.Отчет   = СтрокаТаблицы.Отчет;
			ОсновнойВариант.Вариант = СтрокаТаблицы.РеквизитСсылка;
		КонецЕсли;
	КонецЦикла;
	
	// Обновление всех оставшихся предопределенных вариантов (подчиненных).
	СводнаяТаблицаПредопределенных.Сортировать("УстановитьПометкуУдаления Возр");
	Для Каждого СтрокаТаблицы Из СводнаяТаблицаПредопределенных Цикл
		Если СтрокаТаблицы.Обработана Тогда
			Продолжить;
		КонецЕсли;
		Если Кэш.ОбработанныеПредопределенные.Найти(СтрокаТаблицы.ПредопределенныйВариант) <> Неопределено Тогда
			СтрокаТаблицы.УстановитьПометкуУдаления = Истина;
		КонецЕсли;
		Если СтрокаТаблицы.УстановитьПометкуУдаления Тогда
			РодительСсылка = Кэш.ПустаяСсылка;
		Иначе
			РодительСсылка = Кэш.ПоискРодителей.Получить(СтрокаТаблицы.Отчет);
		КонецЕсли;
		
		СтрокаТаблицы.Родитель = РодительСсылка;
		ОбновитьРазделенныйПредопределенный(Кэш, Шаблоны, СтрокаТаблицы);
	КонецЦикла;
	
	// Обновление родителей пользовательских вариантов.
	ТекстЗапроса = // ОБЪЕДИНИТЬ ВСЕ используется вместо ИЛИ (требование стандартов).
	"ВЫБРАТЬ
	|	ОсновныеВариантыОтчетов.Отчет,
	|	ОсновныеВариантыОтчетов.Вариант
	|ПОМЕСТИТЬ втОсновные
	|ИЗ
	|	&ОсновныеВариантыОтчетов КАК ОсновныеВариантыОтчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка,
	|	втОсновные.Вариант КАК Родитель
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОсновные КАК втОсновные
	|		ПО ВариантыОтчетов.Отчет = втОсновные.Отчет
	|			И ВариантыОтчетов.Родитель <> втОсновные.Вариант
	|			И ВариантыОтчетов.Родитель.Родитель <> втОсновные.Вариант
	|			И ВариантыОтчетов.Ссылка <> втОсновные.Вариант
	|ГДЕ
	|	ВариантыОтчетов.Пользовательский
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка,
	|	втОсновные.Вариант
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОсновные КАК втОсновные
	|		ПО ВариантыОтчетов.Отчет = втОсновные.Отчет
	|			И ВариантыОтчетов.Родитель <> втОсновные.Вариант
	|			И ВариантыОтчетов.Родитель.Родитель <> втОсновные.Вариант
	|			И ВариантыОтчетов.Ссылка <> втОсновные.Вариант
	|ГДЕ
	|	НЕ ВариантыОтчетов.ПометкаУдаления";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсновныеВариантыОтчетов", Кэш.ОсновныеВарианты);
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Кэш.ЕстьИзменения = Истина;
		ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВариантОбъект.Родитель = Выборка.Родитель;
		ВариантОбъект.Заблокировать();
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВариантОбъект);
	КонецЦикла;
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

// Обновляет предопределенные данные в разделенном режиме.
Процедура ОбновитьРазделенныйПредопределенный(Кэш, Шаблоны, СтрокаТаблицы)
	Если СтрокаТаблицы.Обработана Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы.Обработана = Истина;
	
	Если СтрокаТаблицы.УстановитьПометкуУдаления Тогда // Пометить к удалению.
		Если СовпадаютЗначенияСвойств(Шаблоны.УстановкаПометкиУдаления, СтрокаТаблицы, "Реквизит") Тогда
			Возврат; // Уже помечен.
		КонецЕсли;
		ВариантОбъект = СтрокаТаблицы.РеквизитСсылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ВариантОбъект, Шаблоны.УстановкаПометкиУдаления);
	Иначе
		Если СтрокаТаблицы.ГруппироватьПоОтчету И Не ЗначениеЗаполнено(СтрокаТаблицы.ПредопределенныйВариантРодитель) Тогда
			СтрокаТаблицы.Родитель = Кэш.ПустаяСсылка;
		КонецЕсли;
		Кэш.ОбработанныеПредопределенные.Добавить(СтрокаТаблицы.ПредопределенныйВариант);
		ЗаполнитьЗначенияСвойств(Шаблоны.НовыеДанные, СтрокаТаблицы);
		Шаблоны.НовыеДанные.ПометкаУдаления = Ложь;
		Если СтрокаТаблицы.СоздатьНовый Тогда // Добавить.
			ВариантОбъект = Справочники.ВариантыОтчетов.СоздатьЭлемент();
			ВариантОбъект.ПредопределенныйВариант = СтрокаТаблицы.ПредопределенныйВариант;
			ВариантОбъект.Пользовательский = Ложь;
		Иначе // Обновить (если есть изменения).
			Если СовпадаютЗначенияСвойств(Шаблоны.НовыеДанные, СтрокаТаблицы, "Реквизит") Тогда
				Возврат; // Изменений нет.
			КонецЕсли;
			// Перенос пользовательских настроек.
			ЗаменитьКлючиПользовательскихНастроек(Шаблоны.НовыеДанные, СтрокаТаблицы);
			ВариантОбъект = СтрокаТаблицы.РеквизитСсылка.ПолучитьОбъект();
		КонецЕсли;
		Если ВариантОбъект.ВидимостьПоУмолчаниюПереопределена Тогда
			ИсключаяСвойства = "ВидимостьПоУмолчанию";
		Иначе
			ИсключаяСвойства = Неопределено;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ВариантОбъект, Шаблоны.НовыеДанные, , ИсключаяСвойства);
		ТипОтчетаСтрокой = ВариантыОтчетовКлиентСервер.ТипОтчетаСтрокой(Неопределено, ВариантОбъект.Отчет);
		ВариантОбъект.ТипОтчета = Перечисления.ТипыОтчетов[ТипОтчетаСтрокой];
	КонецЕсли;
	
	Кэш.ЕстьИзменения = Истина;
	ВариантОбъект.Заблокировать();
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВариантОбъект);
	
	СтрокаТаблицы.РеквизитСсылка = ВариантОбъект.Ссылка;
КонецПроцедуры

// Возвращает Истина если совпадают значения свойств Структуры и Коллекции с Префиксом.
Функция СовпадаютЗначенияСвойств(Структура, Коллекция, ПрефиксВКоллекции = "")
	Для Каждого КлючИЗначение Из Структура Цикл
		Если Коллекция[ПрефиксВКоллекции + КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

// Установка пометки удаления вариантов удаленных отчетов.
Процедура ПометитьНаУдалениеВариантыУдаленныхОтчетов(Кэш)
	ПредставлениеПроцедуры = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Удаление вариантов удаленных отчетов (%1)'"), Кэш.Уточнение);
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = // ОБЪЕДИНИТЬ ВСЕ используется вместо ИЛИ (требование стандартов).
	"ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ
	|	И ВариантыОтчетов.Отчет = НЕОПРЕДЕЛЕНО
	|	И ВариантыОтчетов.ТипОтчета = &ТипОтчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ
	|	И ВариантыОтчетов.Отчет ЕСТЬ NULL 
	|	И ВариантыОтчетов.ТипОтчета = &ТипОтчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ
	|	И ВариантыОтчетов.Отчет <> НЕОПРЕДЕЛЕНО
	|	И ВариантыОтчетов.Отчет ЕСТЬ НЕ NULL 
	|	И ВариантыОтчетов.Отчет.ПометкаУдаления = ИСТИНА
	|	И ВариантыОтчетов.ТипОтчета = &ТипОтчета";
	
	Если Кэш.Режим = "ОбщиеДанныеКонфигурации" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".ВариантыОтчетов", ".ПредопределенныеВариантыОтчетов");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ВариантыОтчетов.ТипОтчета = &ТипОтчета", "");
	ИначеЕсли Кэш.Режим = "ОбщиеДанныеРасширений" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".ВариантыОтчетов", ".ПредопределенныеВариантыОтчетовРасширений");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ВариантыОтчетов.ТипОтчета = &ТипОтчета", "");
	ИначеЕсли Кэш.Режим = "РазделенныеДанныеКонфигурации" Тогда
		Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Внутренний);
	ИначеЕсли Кэш.Режим = "РазделенныеДанныеРасширений" Тогда
		Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Расширение);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	МассивСсылокВариантов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Для Каждого ВариантСсылка Из МассивСсылокВариантов Цикл
		Кэш.ЕстьИзменения = Истина;
		Кэш.ЕстьВажныеИзменения = Истина;
		ВариантОбъект = ВариантСсылка.ПолучитьОбъект();
		ВариантОбъект.Заблокировать();
		ВариантОбъект.ПометкаУдаления = Истина;
		ЗаписатьПредопределенный(ВариантОбъект);
	КонецЦикла;
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

// Перенос пользовательских настроек варианта из соответствующего хранилища.
Процедура ЗаменитьКлючиПользовательскихНастроек(СтарыйВариант, АктуальныйВариант)
	Если СтарыйВариант.КлючВарианта = АктуальныйВариант.КлючВарианта
		Или Не ЗначениеЗаполнено(СтарыйВариант.КлючВарианта)
		Или Не ЗначениеЗаполнено(АктуальныйВариант.КлючВарианта)
		Или ТипЗнч(АктуальныйВариант.Отчет) <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетПолноеИмя = АктуальныйВариант.Отчет.ПолноеИмя;
	СтарыйКлючОбъекта = ОтчетПолноеИмя +"/"+ СтарыйВариант.КлючВарианта;
	НовыйКлючОбъекта = ОтчетПолноеИмя +"/"+ АктуальныйВариант.КлючВарианта;
	
	Отбор = Новый Структура("КлючОбъекта", СтарыйКлючОбъекта);
	ВыборкаХранилища = ХранилищеПользовательскихНастроекОтчетов.Выбрать(Отбор);
	ОшибокЧтенияПодряд = 0;
	Пока Истина Цикл
		// Чтение настроек из хранилища по старому ключу.
		Попытка
			ЭлементВыборкиПолучен = ВыборкаХранилища.Следующий();
			ОшибокЧтенияПодряд = 0;
		Исключение
			ЭлементВыборкиПолучен = Неопределено;
			ОшибокЧтенияПодряд = ОшибокЧтенияПодряд + 1;
			ОшибкаПоВарианту(
				СтарыйВариант.Ссылка,
				НСтр("ru = 'В процессе выборки вариантов отчетов из стандартного хранилища возникла ошибка:'")
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если ЭлементВыборкиПолучен = Ложь Тогда
			Прервать;
		ИначеЕсли ЭлементВыборкиПолучен = Неопределено Тогда
			Если ОшибокЧтенияПодряд > 100 Тогда
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Чтение описания настроек.
		ОписаниеНастроек = ХранилищеПользовательскихНастроекОтчетов.ПолучитьОписание(
			ВыборкаХранилища.КлючОбъекта,
			ВыборкаХранилища.КлючНастроек,
			ВыборкаХранилища.Пользователь);
		
		// Запись настроек в хранилище по новому ключу.
		ХранилищеПользовательскихНастроекОтчетов.Сохранить(
			НовыйКлючОбъекта,
			ВыборкаХранилища.КлючНастроек,
			ВыборкаХранилища.Настройки,
			ОписаниеНастроек,
			ВыборкаХранилища.Пользователь);
	КонецЦикла;
	
	// Очистка старых настроек хранилища.
	ХранилищеПользовательскихНастроекОтчетов.Удалить(СтарыйКлючОбъекта, Неопределено, Неопределено);
КонецПроцедуры

// Записывает предопределенный объект.
Процедура ЗаписатьПредопределенный(ВариантОбъект)
	ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных");
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВариантОбъект);
КонецПроцедуры

// Регистрирует изменения в таблице замеров.
Процедура ЗарегистрироватьЗамерыВариантаКОбновлению(Кэш, Знач СтарыйКлюч, Знач АктуальныйКлюч, Знач АктуальноеНаименование)
	Если ПустаяСтрока(СтарыйКлюч) Тогда
		СтарыйКлюч = АктуальныйКлюч;
	КонецЕсли;
	
	ОбновлениеЗамера = Кэш.ТаблицаЗамеров.Добавить();
	ОбновлениеЗамера.СтароеИмя     = СтарыйКлюч     + ".Открытие";
	ОбновлениеЗамера.АктуальноеИмя = АктуальныйКлюч + ".Открытие";
	ОбновлениеЗамера.АктуальноеНаименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет ""%1"" (открытие)'"), АктуальноеНаименование);
	
	ОбновлениеЗамера = Кэш.ТаблицаЗамеров.Добавить();
	ОбновлениеЗамера.СтароеИмя     = СтарыйКлюч     + ".Формирование";
	ОбновлениеЗамера.АктуальноеИмя = АктуальныйКлюч + ".Формирование";
	ОбновлениеЗамера.АктуальноеНаименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет ""%1"" (формирование)'"), АктуальноеНаименование);
	
	ОбновлениеЗамера = Кэш.ТаблицаЗамеров.Добавить();
	ОбновлениеЗамера.СтароеИмя     = СтарыйКлюч     + ".Настройки";
	ОбновлениеЗамера.АктуальноеИмя = АктуальныйКлюч + ".Настройки";
	ОбновлениеЗамера.АктуальноеНаименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет ""%1"" (настройки)'"), АктуальноеНаименование);
КонецПроцедуры

// Регистрирует изменения в таблице замеров.
Процедура ОбновитьЗамерыВариантов(Кэш)
	// Регистрация глобальных ключевых операций.
	СписокОпераций = СписокГлобальныхКлючевыхОпераций();
	Для Каждого ЭлементСписка Из СписокОпераций Цикл
		ОбновлениеЗамера = Кэш.ТаблицаЗамеров.Добавить();
		ОбновлениеЗамера.СтароеИмя     = ЭлементСписка.Значение;
		ОбновлениеЗамера.АктуальноеИмя = ЭлементСписка.Значение;
		ОбновлениеЗамера.АктуальноеНаименование = ЭлементСписка.Представление;
	КонецЦикла;
	
	ПриОбновленииКлючевыхОпераций(Кэш.ТаблицаЗамеров);
КонецПроцедуры

// Актуализирует состав указанных ключевых операций.
//
// Параметры:
//   ТаблицаОбновленияКлючевыхОпераций - ТаблицаЗначений - Состав ключевых операций.
//       * СтароеИмя - Строка - Старое имя ключевой операции.
//       * АктуальноеИмя - Строка - Актуальное имя ключевой операции.
//       * АктуальноеНаименование - Строка - Представление ключевой операции.
//
// Места использования:
//   ВариантыОтчетов.ОбновитьЗамерыВариантов().
//
Процедура ПриОбновленииКлючевыхОпераций(ТаблицаОбновленияКлючевыхОпераций)
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОбновленияКлючевыхОпераций.СтароеИмя КАК СтароеИмя,
	|	ТаблицаОбновленияКлючевыхОпераций.АктуальноеИмя КАК АктуальноеИмя,
	|	ТаблицаОбновленияКлючевыхОпераций.АктуальноеНаименование КАК АктуальноеНаименование
	|ПОМЕСТИТЬ втТаблицаОбновления
	|ИЗ
	|	&ТаблицаОбновленияКлючевыхОпераций КАК ТаблицаОбновленияКлючевыхОпераций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаОбновления.АктуальноеИмя,
	|	втТаблицаОбновления.АктуальноеНаименование,
	|	ВЫБОР
	|		КОГДА НЕ АктуальныеОперации.Ссылка ЕСТЬ NULL 
	|			ТОГДА 2
	|		КОГДА НЕ СтарыеОперации.Ссылка ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Приоритет,
	|	ЕСТЬNULL(АктуальныеОперации.Ссылка, СтарыеОперации.Ссылка) КАК Ссылка,
	|	ЕСТЬNULL(АктуальныеОперации.Имя, СтарыеОперации.Имя) КАК Имя,
	|	ЕСТЬNULL(АктуальныеОперации.Наименование, СтарыеОперации.Наименование) КАК Наименование
	|ИЗ
	|	втТаблицаОбновления КАК втТаблицаОбновления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючевыеОперации КАК АктуальныеОперации
	|		ПО втТаблицаОбновления.АктуальноеИмя = АктуальныеОперации.Имя
	|			И (АктуальныеОперации.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючевыеОперации КАК СтарыеОперации
	|		ПО втТаблицаОбновления.СтароеИмя = СтарыеОперации.Имя
	|			И (СтарыеОперации.ПометкаУдаления = ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	
	МодульОценкаПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаОбновленияКлючевыхОпераций", ТаблицаОбновленияКлючевыхОпераций);
	
	Обработанные = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		АктуальноеИмя = Выборка.АктуальноеИмя;
		Если Обработанные.Найти(АктуальноеИмя) = Неопределено Тогда
			Обработанные.Добавить(АктуальноеИмя);
		Иначе
			Продолжить; // Уже обработана операция с таким именем и более высоким приоритетом.
		КонецЕсли;
		Если Выборка.Имя = АктуальноеИмя
			И Выборка.Наименование = Выборка.АктуальноеНаименование Тогда
			Продолжить; // Обновление не требуется.
		КонецЕсли;
		Если Выборка.Приоритет = 3 Тогда
			КлючеваяОперацияСсылка = МодульОценкаПроизводительности.СоздатьКлючевуюОперацию(АктуальноеИмя);
		Иначе
			КлючеваяОперацияСсылка = Выборка.Ссылка;
		КонецЕсли;
		КлючеваяОперацияОбъект = КлючеваяОперацияСсылка.ПолучитьОбъект();
		КлючеваяОперацияОбъект.Имя = АктуальноеИмя;
		КлючеваяОперацияОбъект.Наименование = Выборка.АктуальноеНаименование;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КлючеваяОперацияОбъект);
	КонецЦикла;
КонецПроцедуры

// Шаблон таблицы для обновления замеров.
Функция ТаблицаЗамеров()
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("СтароеИмя", ОписаниеТиповСтрока(150));
	Результат.Колонки.Добавить("АктуальноеИмя", ОписаниеТиповСтрока(150));
	Результат.Колонки.Добавить("АктуальноеНаименование", ОписаниеТиповСтрока(150));
	Возврат Результат;
КонецФункции

// Возвращает список глобальных ключевых операций.
Функция СписокГлобальныхКлючевыхОпераций()
	СписокОпераций = Новый СписокЗначений;
	СписокОпераций.Добавить("ПанельОтчетов.Открытие",       НСтр("ru = 'Панель отчетов (открытие)'"));
	СписокОпераций.Добавить("ПанельОтчетов.Поиск",          НСтр("ru = 'Панель отчетов (поиск в режиме просмотра)'"));
	СписокОпераций.Добавить("ПанельОтчетов.РежимНастройки", НСтр("ru = 'Панель отчетов (режим настройки)'"));
	СписокОпераций.Добавить("СписокОтчетов.Открытие", НСтр("ru = 'Список отчетов (открытие)'"));
	СписокОпераций.Добавить("СписокОтчетов.Поиск",    НСтр("ru = 'Список отчетов (поиск)'"));
	Возврат СписокОпераций;
КонецФункции

// Запись константы ПараметрыВариантовОтчетов.
//
// Значение константы:
//   ХранилищеЗначения (Структура) - Кэшируемые параметры:
//       * ТаблицаФункциональныхОпций - ТаблицаЗначений - Имена опций и предопределенных вариантов отчетов.
//           ** Отчет - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Ссылка отчета.
//           ** ПредопределенныйВариант - СправочникСсылка.ПредопределенныеВариантыОтчетов - Ссылка варианта.
//           ** ИмяФункциональнойОпции - Строка - Имя ФО.
//       * ОтчетыСНастройками - Массив из СправочникСсылка.ИдентификаторыОбъектовМетаданных - Отчеты,
//           в модуле объекта которых размещены процедуры тесной интеграции с общей формой отчета.
//
Процедура ЗаписатьПараметрыВариантовОтчетов(Кэш)
	Если Кэш.Режим = "ОбщиеДанныеРасширений" И Не ЗначениеЗаполнено(ПараметрыСеанса.ВерсияРасширений) Тогда
		Возврат; // Обновление не требуется.
	КонецЕсли;
	ПредставлениеПроцедуры = НСтр("ru = 'Запись неразделенного кэша в константу'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	// Перезапись константы только в случае если обработчик обновления был запущен "для записи" (в монопольном режиме).
	Кэш.ТаблицаФункциональныхОпций.Сортировать("Отчет, ПредопределенныйВариант, ИмяФункциональнойОпции");
	Кэш.ОтчетыСНастройкамиСписок.СортироватьПоЗначению();
	
	НовоеЗначение = Новый Структура;
	НовоеЗначение.Вставить("ТаблицаФункциональныхОпций", Кэш.ТаблицаФункциональныхОпций);
	НовоеЗначение.Вставить("ОтчетыСНастройками", Кэш.ОтчетыСНастройкамиСписок.ВыгрузитьЗначения());
	
	Если Кэш.Режим = "ОбщиеДанныеКонфигурации" Тогда
		СтароеЗначение = Константы.ПараметрыВариантовОтчетов.Получить().Получить();
		Если ОбщегоНазначения.ЗначениеВСтрокуXML(НовоеЗначение) <> ОбщегоНазначения.ЗначениеВСтрокуXML(СтароеЗначение) Тогда
			КонстантаОбъект = Константы.ПараметрыВариантовОтчетов.СоздатьМенеджерЗначения();
			КонстантаОбъект.Значение = Новый ХранилищеЗначения(НовоеЗначение, Новый СжатиеДанных(9));
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(КонстантаОбъект, Ложь, Ложь);
		КонецЕсли;
	ИначеЕсли Кэш.Режим = "ОбщиеДанныеРасширений" Тогда
		ПолноеИмяПодсистемы = ВариантыОтчетовКлиентСервер.ПолноеИмяПодсистемы();
		ХранилищеЗначения = Новый ХранилищеЗначения(НовоеЗначение);
		СтандартныеПодсистемыСервер.УстановитьПараметрРаботыРасширения(ПолноеИмяПодсистемы, ХранилищеЗначения);
	КонецЕсли;
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

// Запись регистра ПредопределенныеВариантыОтчетовВерсийРасширений.
//
// Сохраняемое значение:
//   ХранилищеЗначения (Структура) - Кэшируемые параметры:
//       * ТаблицаФункциональныхОпций - ТаблицаЗначений - Имена опций и предопределенных вариантов отчетов.
//           ** Отчет - СправочникСсылка.ИдентификаторыОбъектовРасширений - Ссылка отчета.
//           ** ПредопределенныйВариант - СправочникСсылка.ПредопределенныеВариантыОтчетовРасширений - Ссылка варианта.
//           ** ИмяФункциональнойОпции - Строка - Имя ФО.
//       * ОтчетыСНастройками - Массив из СправочникСсылка.ИдентификаторыОбъектовРасширений - Отчеты,
//           в модуле объекта которых размещены процедуры тесной интеграции с общей формой отчета.
//
Процедура ЗафиксироватьТекущуюВерсиюРасширений(Кэш)
	Если Не ЗначениеЗаполнено(ПараметрыСеанса.ВерсияРасширений) Тогда
		Возврат; // Обновление не требуется.
	КонецЕсли;
	
	ПредставлениеПроцедуры = НСтр("ru = 'Запись регистра версий расширений'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПредопределенныеРасширений.Ссылка КАК Вариант,
	|	ПредопределенныеРасширений.Отчет,
	|	ПредопределенныеРасширений.КлючВарианта
	|ИЗ
	|	Справочник.ПредопределенныеВариантыОтчетовРасширений КАК ПредопределенныеРасширений
	|ГДЕ
	|	ПредопределенныеРасширений.ПометкаУдаления = ЛОЖЬ";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Измерения = Новый Структура("ВерсияРасширений", ПараметрыСеанса.ВерсияРасширений);
	Ресурсы = Новый Структура;
	Набор = РегистрыСведений.ПредопределенныеВариантыОтчетовВерсийРасширений.Набор(Таблица, Измерения, Ресурсы, Истина);
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор, Истина);
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы / Переход к редакции 2.1.

// Замена структуры хранения настроек по разделам, переход на ссылки справочника ИОМ.
//   Вызывается только для вариантов внутренних отчетов.
//
Процедура Редакция21ПривестиНастройкиПоРазделам(ВариантОбъект)
	
	Количество = ВариантОбъект.Размещение.Количество();
	Для Номер = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Номер;
		СтрокаТаблицы = ВариантОбъект.Размещение[ОбратныйИндекс];
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Подсистема) Тогда
			Продолжить; // Заполнение не требуется.
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.УдалитьПодсистема) Тогда
			ВариантОбъект.Размещение.Удалить(СтрокаТаблицы);
			Продолжить; // Заполнение невозможно.
		КонецЕсли;
		
		ПодсистемаПолноеИмя = "Подсистема." + СтрЗаменить(СтрокаТаблицы.УдалитьПодсистема, "\", ".Подсистема.");
		ПодсистемаМетаданные = Метаданные.НайтиПоПолномуИмени(ПодсистемаПолноеИмя);
		Если ПодсистемаМетаданные = Неопределено Тогда
			ВариантОбъект.Размещение.Удалить(СтрокаТаблицы);
			Продолжить; // Заполнение невозможно.
		КонецЕсли;
		
		ПодсистемаСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПодсистемаМетаданные);;
		Если Не ЗначениеЗаполнено(ПодсистемаСсылка) Тогда
			ВариантОбъект.Размещение.Удалить(СтрокаТаблицы);
			Продолжить; // Заполнение невозможно.
		КонецЕсли;
		
		СтрокаТаблицы.Использование = Истина;
		СтрокаТаблицы.Подсистема = ПодсистемаСсылка;
		СтрокаТаблицы.УдалитьПодсистема = "";
		СтрокаТаблицы.УдалитьНазвание = "";
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнение регистра "НастройкиВариантовОтчетов".
//   Вызывается только для вариантов внутренних отчетов.
//
Процедура Редакция21ПеренестиПользовательскиеНастройкиВРегистр(ВариантОбъект)
	ТаблицаПодсистем = ВариантОбъект.Размещение.Выгрузить(Новый Структура("Использование", Истина));
	ТаблицаПодсистем.Свернуть("Подсистема");
	
	ТаблицаПользователей = ВариантОбъект.УдалитьИсключенияБыстрогоДоступа.Выгрузить();
	ТаблицаПользователей.Колонки.УдалитьПользователь.Имя = "Пользователь";
	ТаблицаПользователей.Свернуть("Пользователь");
	
	ПакетНастроек = Новый ТаблицаЗначений;
	ПакетНастроек.Колонки.Добавить("Подсистема",   ТаблицаПодсистем.Колонки.Подсистема.Тип);
	ПакетНастроек.Колонки.Добавить("Пользователь", ТаблицаПользователей.Колонки.Пользователь.Тип);
	ПакетНастроек.Колонки.Добавить("Видимость",    Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаПодсистема Из ТаблицаПодсистем Цикл
		Для Каждого СтрокаПользователь Из ТаблицаПользователей Цикл
			Настройка = ПакетНастроек.Добавить();
			Настройка.Подсистема   = СтрокаПодсистема.РазделИлиГруппа;
			Настройка.Пользователь = СтрокаПользователь.Пользователь;
			Настройка.Видимость    = Не ВариантОбъект.ВидимостьПоУмолчанию;
		КонецЦикла;
	КонецЦикла;
	
	Измерения = Новый Структура("Вариант", ВариантОбъект.Ссылка);
	Ресурсы   = Новый Структура("БыстрыйДоступ", Ложь);
	РегистрыСведений.НастройкиВариантовОтчетов.ЗаписатьПакетНастроек(ПакетНастроек, Измерения, Ресурсы, Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с деревом подсистем из форм.

// Добавляет элементы условного оформления дерева подсистем.
Процедура ДеревоПодсистемДобавитьУсловноеОформление(Форма) Экспорт
	Форма.Элементы.ДеревоПодсистемВажность.СписокВыбора.Добавить(ВариантыОтчетовКлиентСервер.ПредставлениеВажный());
	Форма.Элементы.ДеревоПодсистемВажность.СписокВыбора.Добавить(ВариантыОтчетовКлиентСервер.ПредставлениеСмТакже());
	
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Поля = "ДеревоПодсистем";
	Инструкция.Отборы.Вставить("ДеревоПодсистем.Приоритет", "");
	Инструкция.Оформление.Вставить("ТолькоПросмотр", Истина);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(Форма, Инструкция);
	
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Поля = "ДеревоПодсистемИспользование, ДеревоПодсистемВажность";
	Инструкция.Отборы.Вставить("ДеревоПодсистем.Приоритет", "");
	Инструкция.Оформление.Вставить("Отображать", Ложь);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(Форма, Инструкция);
КонецПроцедуры

// Формирует дерево подсистем по данным варианта-основания.
Функция ДеревоПодсистемСформировать(Форма, ВариантОснование) Экспорт
	// Пустое дерево без настроек.
	Прототип = Форма.РеквизитФормыВЗначение("ДеревоПодсистем", Тип("ДеревоЗначений"));
	ДеревоПодсистем = ВариантыОтчетовПовтИсп.ПодсистемыТекущегоПользователя().Скопировать();
	Для Каждого КолонкаПрототипа Из Прототип.Колонки Цикл
		Если ДеревоПодсистем.Колонки.Найти(КолонкаПрототипа.Имя) = Неопределено Тогда
			ДеревоПодсистем.Колонки.Добавить(КолонкаПрототипа.Имя, КолонкаПрототипа.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	
	// Параметры.
	Контекст = Новый Структура("ДеревоПодсистем");
	Контекст.ДеревоПодсистем = ДеревоПодсистем;
	
	// Размещение, настроенное администратором.
	Подсистемы = Новый Массив;
	Для Каждого СтрокаРазмещения Из ВариантОснование.Размещение Цикл
		Подсистемы.Добавить(СтрокаРазмещения.Подсистема);
		ДеревоПодсистемЗарегистрироватьНастройкиПодсистемы(Контекст, СтрокаРазмещения, СтрокаРазмещения.Использование);
	КонецЦикла;
	
	// Размещение, предопределенное разработчиком.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Размещение.Ссылка,
	|	Размещение.НомерСтроки,
	|	Размещение.Подсистема,
	|	Размещение.Важный,
	|	Размещение.СмТакже
	|ИЗ
	|	Справочник.ПредопределенныеВариантыОтчетов.Размещение КАК Размещение
	|ГДЕ
	|	Размещение.Ссылка = &Ссылка
	|	И НЕ Размещение.Подсистема В (&Подсистемы)";
	
	Если ТипЗнч(ВариантОснование.ПредопределенныйВариант) = Тип("СправочникСсылка.ПредопределенныеВариантыОтчетовРасширений") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПредопределенныеВариантыОтчетов", "ПредопределенныеВариантыОтчетовРасширений");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ВариантОснование.ПредопределенныйВариант);
	// Не зачитывать настройки подсистем, переопределенные администратором.
	Запрос.УстановитьПараметр("Подсистемы", Подсистемы);
	РазмещениеПредопределенного = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаРазмещения Из РазмещениеПредопределенного Цикл
		ДеревоПодсистемЗарегистрироватьНастройкиПодсистемы(Контекст, СтрокаРазмещения, Истина);
	КонецЦикла;
	
	Возврат Контекст.ДеревоПодсистем;
КонецФункции

// Добавляет подсистему в дерево.
Процедура ДеревоПодсистемЗарегистрироватьНастройкиПодсистемы(Контекст, СтрокаРазмещения, Использование)
	Найденные = Контекст.ДеревоПодсистем.Строки.НайтиСтроки(Новый Структура("Ссылка", СтрокаРазмещения.Подсистема), Истина);
	Если Найденные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева = Найденные[0];
	
	Если СтрокаРазмещения.Важный Тогда
		СтрокаДерева.Важность = ВариантыОтчетовКлиентСервер.ПредставлениеВажный();
	ИначеЕсли СтрокаРазмещения.СмТакже Тогда
		СтрокаДерева.Важность = ВариантыОтчетовКлиентСервер.ПредставлениеСмТакже();
	Иначе
		СтрокаДерева.Важность = "";
	КонецЕсли;
	СтрокаДерева.Использование = Использование;
КонецПроцедуры

// Сохраняет настройки размещения, измененные пользователем в табличную часть варианта отчета.
//
// Параметры:
//   Форма         - УправляемаяФорма - Форма, в которой хранятся настройки размещения.
//   ВариантОбъект - СправочникОбъект.ВариантыОтчетов, ДанныеФормыСтруктура - Объект варианта отчета.
//   Кэш           - Структура - Необязательный.
//
Процедура ДеревоПодсистемЗаписать(Форма, ВариантОбъект, Кэш = Неопределено) Экспорт
	Если Кэш = Неопределено Тогда
		Кэш = Новый Структура;
	КонецЕсли;
	Если Кэш.Свойство("ИзмененияПодсистем") Тогда
		ИзмененияПодсистем = Кэш.ИзмененияПодсистем;
	Иначе
		ДеревоПриемник = Форма.РеквизитФормыВЗначение("ДеревоПодсистем", Тип("ДеревоЗначений"));
		Если ВариантОбъект.ЭтоНовый() Тогда
			ИзмененияПодсистем = ДеревоПриемник.Строки.НайтиСтроки(Новый Структура("Использование", 1), Истина);
		Иначе
			ИзмененияПодсистем = ДеревоПриемник.Строки.НайтиСтроки(Новый Структура("Модифицированность", Истина), Истина);
		КонецЕсли;
		Кэш.Вставить("ИзмененияПодсистем", ИзмененияПодсистем);
	КонецЕсли;
	
	Для Каждого Подсистема Из ИзмененияПодсистем Цикл
		СтрокаТабличнойЧасти = ВариантОбъект.Размещение.Найти(Подсистема.Ссылка, "Подсистема");
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			// Необходимо зарегистрировать настройку размещения варианта безусловно (даже флажок Использование отключен)
			// - только тогда эта настройка заменит предопределенную (из неразделенного справочника).
			СтрокаТабличнойЧасти = ВариантОбъект.Размещение.Добавить();
			СтрокаТабличнойЧасти.Подсистема = Подсистема.Ссылка;
		КонецЕсли;
		
		Если Подсистема.Использование = 0 Тогда
			СтрокаТабличнойЧасти.Использование = Ложь;
		ИначеЕсли Подсистема.Использование = 1 Тогда
			СтрокаТабличнойЧасти.Использование = Истина;
		Иначе
			// Оставить как есть
		КонецЕсли;
		
		Если Подсистема.Важность = ВариантыОтчетовКлиентСервер.ПредставлениеВажный() Тогда
			СтрокаТабличнойЧасти.Важный  = Истина;
			СтрокаТабличнойЧасти.СмТакже = Ложь;
		ИначеЕсли Подсистема.Важность = ВариантыОтчетовКлиентСервер.ПредставлениеСмТакже() Тогда
			СтрокаТабличнойЧасти.Важный  = Ложь;
			СтрокаТабличнойЧасти.СмТакже = Истина;
		Иначе
			СтрокаТабличнойЧасти.Важный  = Ложь;
			СтрокаТабличнойЧасти.СмТакже = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Формирование представлений полей, параметров и отборов для поиска.

// Вызывается из события ПриЗаписи вариантов. Часть проверок выполняется до вызова.
Функция ПроиндексироватьСодержимоеСхемы(ВариантОбъект) Экспорт
	ДополнительныеСвойства = ВариантОбъект.ДополнительныеСвойства;
	ТребуетсяЗапись = Ложь;
	
	// В некоторых случаях заранее известно что настройки уже проиндексированы.
	ИндексироватьСхему = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ИндексироватьСхему");
	Если ИндексироватьСхему = Ложь Тогда
		Возврат ТребуетсяЗапись; // Заполнение не требуется.
	КонецЕсли;
	ПроверятьХеш = Истина;
	Если ИндексироватьСхему = Истина Тогда
		ПроверятьХеш = Ложь;
	КонецЕсли;
	
	// Механика ручного индексирования из данных варианта.
	ЗаполнитьПоля = Лев(ВариантОбъект.НаименованияПолей, 1) <> "#";
	ЗаполнитьФильтры = Лев(ВариантОбъект.НаименованияПараметровИОтборов, 1) <> "#";
	Если Не ЗаполнитьПоля И Не ЗаполнитьФильтры Тогда
		Возврат ТребуетсяЗапись; // Заполнение не требуется.
	КонецЕсли;
	
	// Получение объекта отчета, настроек СКД и варианта.
	ЭтоПредопределенный = ТипЗнч(ВариантОбъект) = Тип("СправочникОбъект.ПредопределенныеВариантыОтчетов")
		Или ТипЗнч(ВариантОбъект) = Тип("СправочникОбъект.ПредопределенныеВариантыОтчетовРасширений")
		Или Не ВариантОбъект.Пользовательский;
	
	// Предустановленные настройки поиска.
	НастройкиДляПоиска = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "НастройкиДляПоиска");
	Если НастройкиДляПоиска <> Неопределено Тогда
		Если ЗаполнитьПоля И ЗначениеЗаполнено(НастройкиДляПоиска.НаименованияПолей) Тогда
			ВариантОбъект.НаименованияПолей = "#" + СокрЛП(НастройкиДляПоиска.НаименованияПолей);
			ЗаполнитьПоля = Ложь;
			ТребуетсяЗапись = Истина;
		КонецЕсли;
		Если ЗаполнитьФильтры И ЗначениеЗаполнено(НастройкиДляПоиска.НаименованияПараметровИОтборов) Тогда
			ВариантОбъект.НаименованияПараметровИОтборов = "#" + СокрЛП(НастройкиДляПоиска.НаименованияПараметровИОтборов);
			ЗаполнитьФильтры = Ложь;
			ТребуетсяЗапись = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(НастройкиДляПоиска.КлючевыеСлова) Тогда
			ВариантОбъект.КлючевыеСлова = "#" + СокрЛП(НастройкиДляПоиска.КлючевыеСлова);
			ТребуетсяЗапись = Истина;
		КонецЕсли;
		Если Не ЗаполнитьПоля И Не ЗаполнитьФильтры Тогда
			Возврат ТребуетсяЗапись; // Заполнение выполнено - объект надо записать.
		КонецЕсли;
	КонецЕсли;
	
	// В некоторых сценариях объект может быть уже закэширован в дополнительных свойствах.
	ОтчетОбъект = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ОтчетОбъект");
	
	// Когда объект отчета не закэширован - подключение отчета штатным способом.
	Если ОтчетОбъект = Неопределено Тогда
		Подключение = ПодключитьОтчетОбъект(ВариантОбъект.Отчет, Ложь);
		Если Подключение.Успех Тогда
			ОтчетОбъект = Подключение.Объект;
		Иначе
			ОтчетОбъект = "";
			ОшибкаПоВарианту(ВариантОбъект.Ссылка, Подключение.ТекстОшибки);
		КонецЕсли;
		ДополнительныеСвойства.Вставить("ОтчетОбъект", ОтчетОбъект);
	КонецЕсли;
	Если ОтчетОбъект = "" Тогда
		Возврат ТребуетсяЗапись; // Возникла проблема при подключении отчета.
	КонецЕсли;
	
	// Извлечение текстов макетов возможно только после получения объекта отчета.
	Если ЗаполнитьПоля И НастройкиДляПоиска <> Неопределено И ЗначениеЗаполнено(НастройкиДляПоиска.ИменаМакетов) Тогда
		ВариантОбъект.НаименованияПолей = "#" + ИзвлечьТекстМакета(ОтчетОбъект, НастройкиДляПоиска.ИменаМакетов);
		ТребуетсяЗапись = истина;
		ЗаполнитьПоля = Ложь;
		Если Не ЗаполнитьПоля И Не ЗаполнитьФильтры Тогда
			Возврат ТребуетсяЗапись; // Заполнение выполнено - объект надо записать.
		КонецЕсли;
	КонецЕсли;
	
	// Схема компоновки, на основании которой будет выполняться отчет.
	СхемаКД = ОтчетОбъект.СхемаКомпоновкиДанных;
	
	// Если отчет не на СКД, следовательно представления не заполняются или заполняются прикладными механизмами.
	Если СхемаКД = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для варианта ""%1"" отчета ""%2"" не заполнены настройки поиска:
			|Наименования полей или Наименования параметров и отборов.'"),
			ВариантОбъект.КлючВарианта,
			ВариантОбъект.Отчет);
		Если ЭтоПредопределенный Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС
				+ НСтр("ru = 'Подробнее - см. процедуру ""НастроитьВариантыОтчетов"" модуля ""ВариантыОтчетовПереопределяемый"".'");
			Если ВариантОбъект.Размещение.Количество() > 0 Тогда
				ОшибкаПоВарианту(ВариантОбъект.Ссылка, ТекстОшибки);
			Иначе
				ИнформацияПоВарианту(ВариантОбъект.Ссылка, ТекстОшибки);
			КонецЕсли;
		Иначе
			ИнформацияПоВарианту(ВариантОбъект.Ссылка, ТекстОшибки);
		КонецЕсли;
		Возврат ТребуетсяЗапись; // Возникла проблема.
	КонецЕсли;
	
	// Чтение настроек из переданных параметров.
	НастройкиКД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "НастройкиКД");
	
	// Чтение настроек из схемы.
	Если ТипЗнч(НастройкиКД) <> Тип("НастройкиКомпоновкиДанных") Тогда
		ВариантНастроекКД = СхемаКД.ВариантыНастроек.Найти(ВариантОбъект.КлючВарианта);
		Если ВариантНастроекКД <> Неопределено Тогда
			НастройкиКД = ВариантНастроекКД.Настройки;
		КонецЕсли;
	КонецЕсли;
	
	// Чтение настроек из данных варианта.
	Если ТипЗнч(НастройкиКД) <> Тип("НастройкиКомпоновкиДанных")
		И ТипЗнч(ВариантОбъект) = Тип("СправочникОбъект.ВариантыОтчетов") Тогда
		НастройкиКД = ВариантОбъект.Настройки.Получить();
	КонецЕсли;
	
	// Последняя проверка.
	Если ТипЗнч(НастройкиКД) <> Тип("НастройкиКомпоновкиДанных") Тогда
		Если ТипЗнч(ВариантОбъект) = Тип("СправочникОбъект.ПредопределенныеВариантыОтчетов")
			Или ТипЗнч(ВариантОбъект) = Тип("СправочникОбъект.ПредопределенныеВариантыОтчетовРасширений") Тогда
			Текст = НСтр("ru = 'Не удалось прочитать настройки предопределенного варианта отчета ""%1"".'");
			ОшибкаПоВарианту(ВариантОбъект.Ссылка, Текст, ВариантОбъект.КлючЗамеров);
		КонецЕсли;
		Возврат ТребуетсяЗапись; // Возникла проблема.
	КонецЕсли;
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(ОбщегоНазначения.ЗначениеВСтрокуXML(НастройкиКД));
	ХешЭтихНастроек = СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	Если ПроверятьХеш И ВариантОбъект.ХешНастроек = ХешЭтихНастроек Тогда
		Возврат ТребуетсяЗапись; // Настройки не изменились.
	КонецЕсли;
	ТребуетсяЗапись = истина;
	ВариантОбъект.ХешНастроек = ХешЭтихНастроек;
	
	// Описывает связь настроек компоновки данных и схемы компоновки данных.
	КомпоновщикНастроекКД = ОтчетОбъект.КомпоновщикНастроек;
	
	// Выполняет инициализацию компоновщика и его настроек (Настройки) источником доступных настроек.
	КомпоновщикНастроекКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
	
	// Загружает настройки в компоновщик.
	КомпоновщикНастроекКД.ЗагрузитьНастройки(НастройкиКД);
	
	Если ЗаполнитьПоля Тогда
		// Преобразование всех настроек автоматической группировки в наборы полей.
		//   См. "АвтоВыбранноеПолеКомпоновкиДанных", "АвтоПолеГруппировкиКомпоновкиДанных",
		//   "АвтоЭлементПорядкаКомпоновкиДанных" в синтакс-помощнике.
		КомпоновщикНастроекКД.РазвернутьАвтоПоля();
		
		ВариантОбъект.НаименованияПолей = СформироватьПредставленияПолей(КомпоновщикНастроекКД);
	КонецЕсли;
	
	Если ЗаполнитьФильтры Тогда
		ВариантОбъект.НаименованияПараметровИОтборов = СформироватьПредставленияПараметровИОтборов(КомпоновщикНастроекКД);
	КонецЕсли;
	
	Возврат ТребуетсяЗапись;
КонецФункции

// Представления группировок и полей из СКД.
Функция СформироватьПредставленияПолей(КомпоновщикНастроекКД)
	Результат = Новый Массив;
	
	ДополнитьМассивИзСтрокиСРазделителями(Результат, Строка(КомпоновщикНастроекКД.Настройки.Выбор));
	
	МассивКоллекций = Новый Массив;
	МассивКоллекций.Добавить(КомпоновщикНастроекКД.Настройки.Структура);
	Пока МассивКоллекций.Количество() > 0 Цикл
		Коллекция = МассивКоллекций[0];
		МассивКоллекций.Удалить(0);
		
		Для Каждого Настройка Из Коллекция Цикл
			
			Если ТипЗнч(Настройка) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				Настройка = Настройка.Настройки;
			КонецЕсли;
			
			ДополнитьМассивИзСтрокиСРазделителями(Результат, Строка(Настройка.Выбор));
			
			Если ТипЗнч(Настройка) = Тип("НастройкиКомпоновкиДанных") Тогда
				МассивКоллекций.Добавить(Настройка.Структура);
			ИначеЕсли ТипЗнч(Настройка) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				МассивКоллекций.Добавить(Настройка.Структура);
			ИначеЕсли ТипЗнч(Настройка) = Тип("ТаблицаКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				МассивКоллекций.Добавить(Настройка.Строки);
			ИначеЕсли ТипЗнч(Настройка) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				МассивКоллекций.Добавить(Настройка.Структура);
			ИначеЕсли ТипЗнч(Настройка) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				МассивКоллекций.Добавить(Настройка.Серии);
				МассивКоллекций.Добавить(Настройка.Точки);
			ИначеЕсли ТипЗнч(Настройка) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				МассивКоллекций.Добавить(Настройка.Структура);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	РазделительХранения = ВариантыОтчетовКлиентСервер.РазделительХранения();
	Возврат СтрСоединить(Результат, РазделительХранения);
КонецФункции

// Представления параметров и отборов из СКД.
Функция СформироватьПредставленияПараметровИОтборов(КомпоновщикНастроекКД)
	Результат = Новый Массив;
	
	НастройкиКД = КомпоновщикНастроекКД.Настройки;
	
	Режимы = РежимОтображенияЭлементаНастройкиКомпоновкиДанных;
	
	Для Каждого ПользовательскаяНастройка Из КомпоновщикНастроекКД.ПользовательскиеНастройки.Элементы Цикл
		ТипНастройки = ТипЗнч(ПользовательскаяНастройка);
		Если ТипНастройки = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ЭтоОтбор = Ложь;
		ИначеЕсли ТипНастройки = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЭтоОтбор = Истина;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ПользовательскаяНастройка.РежимОтображения = Режимы.Недоступный Тогда
			Продолжить;
		КонецЕсли;
		
		Идентификатор = ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки;
		
		ОбщаяНастройка = ОтчетыКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(НастройкиКД, Идентификатор);
		Если ОбщаяНастройка = Неопределено Тогда
			Продолжить;
		ИначеЕсли ПользовательскаяНастройка.РежимОтображения = Режимы.Авто
			И ОбщаяНастройка.РежимОтображения <> Режимы.БыстрыйДоступ Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПредставлений = Новый Структура("Представление, ПредставлениеПользовательскойНастройки", "", "");
		ЗаполнитьЗначенияСвойств(СтруктураПредставлений, ОбщаяНастройка);
		Если ЗначениеЗаполнено(СтруктураПредставлений.ПредставлениеПользовательскойНастройки) Тогда
			ЭлементЗаголовок = СтруктураПредставлений.ПредставлениеПользовательскойНастройки;
		ИначеЕсли ЗначениеЗаполнено(СтруктураПредставлений.Представление) Тогда
			ЭлементЗаголовок = СтруктураПредставлений.Представление;
		Иначе
			ДоступнаяНастройка = ОтчетыКлиентСервер.НайтиДоступнуюНастройку(НастройкиКД, ОбщаяНастройка);
			Если ДоступнаяНастройка <> Неопределено И ЗначениеЗаполнено(ДоступнаяНастройка.Заголовок) Тогда
				ЭлементЗаголовок = ДоступнаяНастройка.Заголовок;
			Иначе
				ЭлементЗаголовок = Строка(?(ЭтоОтбор, ОбщаяНастройка.ЛевоеЗначение, ОбщаяНастройка.Параметр));
			КонецЕсли;
		КонецЕсли;
		
		ЭлементЗаголовок = СокрЛП(ЭлементЗаголовок);
		Если ЭлементЗаголовок <> "" И Результат.Найти(ЭлементЗаголовок) = Неопределено Тогда
			Результат.Добавить(ЭлементЗаголовок);
		КонецЕсли;
		
	КонецЦикла;
	
	РазделительХранения = ВариантыОтчетовКлиентСервер.РазделительХранения();
	Возврат СтрСоединить(Результат, РазделительХранения);
КонецФункции

// Извлекает текстовую информацию из макета.
Функция ИзвлечьТекстМакета(ОтчетОбъект, ИменаМакетов)
	ИзвлеченныйТекст = "";
	Если ТипЗнч(ИменаМакетов) = Тип("Строка") Тогда
		ИменаМакетов = СтрРазделить(ИменаМакетов, ",", Ложь);
	КонецЕсли;
	Для Каждого ИмяМакета Из ИменаМакетов Цикл
		Макет = ОтчетОбъект.ПолучитьМакет(СокрЛП(ИмяМакета));
		Если ТипЗнч(Макет) = Тип("ТабличныйДокумент") Тогда
			Низ = Макет.ВысотаТаблицы;
			Право = Макет.ШиринаТаблицы;
			ПроверенныеЯчейки = Новый Соответствие;
			Для НомерКолонки = 1 По Право Цикл
				Для НомерСтроки = 1 По Низ Цикл
					Ячейка = Макет.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
					Если ПроверенныеЯчейки.Получить(Ячейка.Имя) = Неопределено Тогда
						ПроверенныеЯчейки.Вставить(Ячейка.Имя, Истина);
						Если ТипЗнч(Ячейка) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
							ТекстОбласти = СокрЛП(Ячейка.Текст);
							Если ТекстОбласти <> "" Тогда
								ИзвлеченныйТекст = ИзвлеченныйТекст + Символы.ПС + ТекстОбласти;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Макет) = Тип("ТекстовыйДокумент") Тогда
			ИзвлеченныйТекст = ИзвлеченныйТекст + Символы.ПС + СокрЛП(Макет.ПолучитьТекст());
		КонецЕсли;
	КонецЦикла;
	ИзвлеченныйТекст = СокрЛ(ИзвлеченныйТекст);
	Возврат ИзвлеченныйТекст;
КонецФункции

// Добавляет в Массив элементы из СтрокаСРазделителями, если их там нет.
Процедура ДополнитьМассивИзСтрокиСРазделителями(Массив, СтрокаСРазделителями)
	СтрокаСРазделителями = СокрЛП(СтрокаСРазделителями);
	Если СтрокаСРазделителями = "" Тогда
		Возврат;
	КонецЕсли;
	Позиция = СтрНайти(СтрокаСРазделителями, ",");
	Пока Позиция > 0 Цикл
		Подстрока = СокрП(Лев(СтрокаСРазделителями, Позиция - 1));
		Если Подстрока <> "" И Массив.Найти(Подстрока) = Неопределено Тогда
			Массив.Добавить(Подстрока);
		КонецЕсли;
		СтрокаСРазделителями = СокрЛ(Сред(СтрокаСРазделителями, Позиция + 1));
		Позиция = СтрНайти(СтрокаСРазделителями, ",");
	КонецЦикла;
	Если СтрокаСРазделителями <> "" И Массив.Найти(СтрокаСРазделителями) = Неопределено Тогда
		Массив.Добавить(СтрокаСРазделителями);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Уменьшение количества пользовательских настроек.

// Вызывается из события ПриЗаписи вариантов. Часть проверок выполняется до вызова.
Функция УменьшитьКоличествоБыстрыхНастроек(ВариантОбъект, ОтчетОбъект)
	Перем НастройкиКД, ЭтоПредопределенный;
	
	Если ВариантОбъект = Неопределено Тогда
		Возврат Ложь; // Варианта нет в базе. Заполнение не требуется.
	КонецЕсли;
	
	// Схема компоновки, на основании которой будет выполняться отчет.
	СхемаКД = ОтчетОбъект.СхемаКомпоновкиДанных;
	Если СхемаКД = Неопределено Тогда
		Возврат Ложь; // Отчет не на СКД. Заполнение не требуется.
	КонецЕсли;
	
	// Чтение настроек из данных варианта.
	НастройкиКД = ВариантОбъект.Настройки.Получить();
	Если ТипЗнч(НастройкиКД) <> Тип("НастройкиКомпоновкиДанных") Тогда
		ТекстОшибки = НСтр("ru = 'Обнаружены пустые настройки пользовательского варианта ""%1"" отчета ""%2"".'");
		ОшибкаПоВарианту(ВариантОбъект.Ссылка, ТекстОшибки, ВариантОбъект.КлючВарианта, ВариантОбъект.Отчет);
		Возврат Ложь; // Возникла проблема.
	КонецЕсли;
	
	// Описывает связь настроек компоновки данных и схемы компоновки данных.
	КомпоновщикНастроекКД = ОтчетОбъект.КомпоновщикНастроек;
	
	// Выполняет инициализацию компоновщика и его настроек (Настройки) источником доступных настроек.
	КомпоновщикНастроекКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
	
	// Загружает настройки в компоновщик.
	КомпоновщикНастроекКД.ЗагрузитьНастройки(НастройкиКД);
	
	УсловияВывода = Новый Структура;
	УсловияВывода.Вставить("ТолькоПользовательские", Истина);
	УсловияВывода.Вставить("ТолькоБыстрые",          Истина);
	УсловияВывода.Вставить("ИдентификаторТекущегоУзлаКД", Неопределено);
	
	НастройкиОтчета = НастройкиФормыОтчета(ВариантОбъект.Отчет, ВариантОбъект.КлючВарианта, ОтчетОбъект);
	
	Информация = ОтчетыСервер.РасширеннаяИнформацияОНастройках(КомпоновщикНастроекКД, НастройкиОтчета, ОтчетОбъект, УсловияВывода);
	БыстрыеНастройки = Информация.ПользовательскиеНастройки.Скопировать(Новый Структура("ВыводРазрешен, Быстрая", Истина, Истина));
	Если БыстрыеНастройки.Количество() <= 2 Тогда
		Возврат Ложь; // Уменьшение количества не требуется.
	КонецЕсли;
	
	Исключаемые = БыстрыеНастройки.НайтиСтроки(Новый Структура("ТипЭлементов", "СтандартныйПериод"));
	Для Каждого СтрокаТаблицы Из Исключаемые Цикл
		БыстрыеНастройки.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Потрачено = Исключаемые.Количество();
	Для Каждого СтрокаТаблицы Из БыстрыеНастройки Цикл
		Если Потрачено < 2 Тогда
			Потрачено = Потрачено + 1;
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы.НастройкаВариантаКД.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	КонецЦикла;
	
	ВариантОбъект.Настройки = Новый ХранилищеЗначения(КомпоновщикНастроекКД.Настройки);
	
	Возврат Истина;
КонецФункции

Функция НастройкиФормыОтчета(ОтчетСсылка, КлючВарианта, ОтчетОбъект) Экспорт
	НастройкиОтчета = ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию();
	ОтчетыСНастройками = ВариантыОтчетовПовтИсп.Параметры().ОтчетыСНастройками;
	Если ОтчетыСНастройками.Найти(ОтчетСсылка) <> Неопределено Тогда
		Если ОтчетОбъект = Неопределено Тогда
			Подключение = ПодключитьОтчетОбъект(ОтчетСсылка, Ложь);
			Если Подключение.Успех Тогда
				ОтчетОбъект = Подключение.Объект;
			Иначе
				Текст = НСтр("ru = 'Не удалось получить настройки отчета ""%1"":'") + Символы.ПС + Подключение.ТекстОшибки;
				ИнформацияПоВарианту(ОтчетСсылка, Текст, ОтчетСсылка);
				Возврат НастройкиОтчета;
			КонецЕсли;
		КонецЕсли;
		ОтчетОбъект.ОпределитьНастройкиФормы(Неопределено, КлючВарианта, НастройкиОтчета);
		СоответствиеПериодичностиПараметров = Новый Соответствие;
		Для Каждого КлючИЗначение Из НастройкиОтчета.СоответствиеПериодичностиПараметров Цикл
			ПолеКД = КлючИЗначение.Ключ;
			Если ТипЗнч(ПолеКД) = Тип("ПараметрКомпоновкиДанных") Тогда
				ПолеКД = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(ПолеКД));
			КонецЕсли;
			СоответствиеПериодичностиПараметров.Вставить(ПолеКД, КлючИЗначение.Значение);
		КонецЦикла;
		НастройкиОтчета.Вставить("СоответствиеПериодичностиПараметров", СоответствиеПериодичностиПараметров);
	КонецЕсли;
	Возврат НастройкиОтчета;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Поиск.

// Можно ли индексировать содержимое схемы отчета.
Функция РазрешеноИндексированиеНеразделенныхДанных()
	Возврат Не ОбщегоНазначенияПовтИсп.РазделениеВключено();
КонецФункции

// Находит ссылки по параметрам поиска.
//   Подсвечивает найденные места.
//
// Параметры:
//   ПараметрыПоиска - Структура - Условия поиска.
//       * СтрокаПоиска - Строка - Необязательный.
//       * Автор - СправочникСсылка.Пользователи - Необязательный.
//       * Подсистемы - Массив из СправочникСсылка.ИдентификаторыОбъектовМетаданных - Необязательный.
//
// Возвращаемое значение: 
//   Структура - Когда выполняется поиск по строке.
//       * Ссылки - Массив из СправочникСсылка.ВариантыОтчетов -
//           Заполняется вариантами отчетов, в данных которых найдены все искомые слова.
//       * ПодсветкаВариантов - Соответствие - Подсветка найденных слов (если задана СтрокаПоиска).
//           ** Ключ - СправочникСсылка.ВариантыОтчетов.
//           ** Значение - Структура.
//               *** Ссылка - СправочникСсылка.ВариантыОтчетов.
//               *** НаименованияПолей                    - Строка.
//               *** НаименованияПараметровИОтборов       - Строка.
//               *** КлючевыеСлова                        - Строка.
//               *** Описание                             - Строка.
//               *** НаименованияПользовательскихНастроек - Строка.
//               *** ГдеНайдены                           - Структура.
//                   **** НаименованияПолей                    - Число.
//                   **** НаименованияПараметровИОтборов       - Число.
//                   **** КлючевыеСлова                        - Число.
//                   **** Описание                             - Число.
//                   **** НаименованияПользовательскихНастроек - Число.
//       * Подсистемы - Массив из СправочникСсылка.ИдентификаторыОбъектовМетаданных - 
//           Заполняется подсистемами, в наименованиях которых найдены все искомые слова.
//           Для таких подсистем должны выводиться все вложенные варианты отчетов.
//       * ПодсветкаПодсистем - Соответствие - Подсветка найденных слов (если задана СтрокаПоиска).
//           ** Ключ - СправочникСсылка.ВариантыОтчетов.
//           ** Значение - Структура.
//               *** Ссылка - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//               *** НаименованиеПодсистемы - Строка.
//               *** ВсеСловаНайдены - Булево.
//               *** НайденныеСлова - Массив.
//       * ВариантыСвязанныеСПодсистемами - Соответствие - Варианты отчетов и их подсистемы.
//           Заполняется когда часть слов найдена в данных варианта, а другая часть - в наименованиях его подсистем.
//           В этом случае вариант должен выводиться только в найденных подсистемах (а в других - не должен выводиться).
//           Применяется в панели отчетов.
//           ** Ключ - СправочникСсылка.ВариантыОтчетов - Вариант.
//           ** Значение - Массив Из СправочникСсылка.ИдентификаторыОбъектовМетаданных - Подсистемы.
//
Функция НайтиСсылки(ПараметрыПоиска) Экспорт
	ПараметрыПоиска.Вставить("ОтчетыПользователя", ОтчетыТекущегоПользователя());
	ПараметрыПоиска.Вставить("ОтключенныеВариантыПрограммы", ВариантыОтчетовПовтИсп.ОтключенныеВариантыПрограммы());
	
	Если ПараметрыПоиска.Свойство("СтрокаПоиска") И ЗначениеЗаполнено(ПараметрыПоиска.СтрокаПоиска) Тогда
		ЕстьСтрокаПоиска = Истина;
	Иначе
		ЕстьСтрокаПоиска = Ложь;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("Отчеты") И ЗначениеЗаполнено(ПараметрыПоиска.Отчеты) Тогда
		ЕстьОтборПоОтчетам = Истина;
	Иначе
		ЕстьОтборПоОтчетам = Ложь;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("Подсистемы") И ЗначениеЗаполнено(ПараметрыПоиска.Подсистемы) Тогда
		ЕстьОтборПоПодсистемам = Истина;
	Иначе
		ЕстьОтборПоПодсистемам = Ложь;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ТипыОтчетов") И ЗначениеЗаполнено(ПараметрыПоиска.ТипыОтчетов) Тогда
		ЕстьОтборПоТипамОтчетов = Истина;
	Иначе
		ЕстьОтборПоТипамОтчетов = Ложь;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ТолькоВидимыеВПанелиОтчетов") И ПараметрыПоиска.ТолькоВидимыеВПанелиОтчетов = Истина Тогда
		ЕстьОтборПоВидимости = ЕстьОтборПоПодсистемам; // Поддерживается только когда задан отбор по подсистемам.
	Иначе
		ЕстьОтборПоВидимости = Ложь;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ПолучатьИтоговуюТаблицу") И ПараметрыПоиска.ПолучатьИтоговуюТаблицу = Истина Тогда
		ПолучатьИтоговуюТаблицу = Истина;
	Иначе
		ПолучатьИтоговуюТаблицу = Ложь;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ПометкаУдаления") Тогда
		ЕстьОтборПоПометкеУдаления = Истина;
	Иначе
		ЕстьОтборПоПометкеУдаления = Ложь;
	КонецЕсли;
	
	Если Не ЕстьОтборПоПодсистемам И Не ЕстьСтрокаПоиска И Не ЕстьОтборПоТипамОтчетов И Не ЕстьОтборПоОтчетам Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ПравоЧтенияАвторов = ПравоДоступа("Чтение", Метаданные.Справочники.Пользователи);
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	Если ЕстьОтборПоОтчетам Тогда
		ОтборПоОтчетам = Новый Массив;
		Для Каждого ОтчетСсылка Из ПараметрыПоиска.Отчеты Цикл
			Если ПараметрыПоиска.ОтчетыПользователя.Найти(ОтчетСсылка) <> Неопределено Тогда
				ОтборПоОтчетам.Добавить(ОтчетСсылка);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОтборПоОтчетам = ПараметрыПоиска.ОтчетыПользователя;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущийПользователь",          ТекущийПользователь);
	Запрос.УстановитьПараметр("ОтчетыПользователя",           ОтборПоОтчетам);
	Запрос.УстановитьПараметр("ОтключенныеВариантыПрограммы", ПараметрыПоиска.ОтключенныеВариантыПрограммы);
	
	Если ЕстьОтборПоПодсистемам Или ЕстьСтрокаПоиска Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВариантыОтчетов.Ссылка,
		|	ВариантыОтчетов.Родитель КАК Родитель,
		|	ВариантыОтчетов.Наименование КАК НаименованиеВарианта,
		|	ВариантыОтчетов.Автор КАК Автор,
		|	ВариантыОтчетов.ТолькоДляАвтора КАК ТолькоДляАвтора,
		|	ВЫРАЗИТЬ(ВариантыОтчетов.Автор.Наименование КАК СТРОКА(1000)) КАК АвторПредставление,
		|	ВариантыОтчетов.Отчет КАК Отчет,
		|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
		|	ВариантыОтчетов.ТипОтчета КАК ТипОтчета,
		|	ВариантыОтчетов.Пользовательский КАК Пользовательский,
		|	ВариантыОтчетов.ПредопределенныйВариант КАК ПредопределенныйВариант,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ВариантыОтчетов.НаименованияПолей, 1, 1) = """"
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыКонфигурации.НаименованияПолей, ВариантыРасширений.НаименованияПолей) КАК СТРОКА(1000))
		|		ИНАЧЕ ВЫРАЗИТЬ(ВариантыОтчетов.НаименованияПолей КАК СТРОКА(1000))
		|	КОНЕЦ КАК НаименованияПолей,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ВариантыОтчетов.НаименованияПараметровИОтборов, 1, 1) = """"
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыКонфигурации.НаименованияПараметровИОтборов, ВариантыРасширений.НаименованияПараметровИОтборов) КАК СТРОКА(1000))
		|		ИНАЧЕ ВЫРАЗИТЬ(ВариантыОтчетов.НаименованияПараметровИОтборов КАК СТРОКА(1000))
		|	КОНЕЦ КАК НаименованияПараметровИОтборов,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ВариантыОтчетов.КлючевыеСлова, 1, 1) = """"
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыКонфигурации.КлючевыеСлова, ВариантыРасширений.КлючевыеСлова) КАК СТРОКА(1000))
		|		ИНАЧЕ ВЫРАЗИТЬ(ВариантыОтчетов.КлючевыеСлова КАК СТРОКА(1000))
		|	КОНЕЦ КАК КлючевыеСлова,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ВариантыОтчетов.Описание, 1, 1) = """"
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыКонфигурации.Описание, ВариантыРасширений.Описание) КАК СТРОКА(1000))
		|		ИНАЧЕ ВЫРАЗИТЬ(ВариантыОтчетов.Описание КАК СТРОКА(1000))
		|	КОНЕЦ КАК Описание,
		|	ВариантыОтчетов.ВидимостьПоУмолчанию КАК ВидимостьПоУмолчанию
		|ПОМЕСТИТЬ Варианты
		|ИЗ
		|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов КАК ВариантыКонфигурации
		|		ПО ВариантыОтчетов.ПредопределенныйВариант = ВариантыКонфигурации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетовРасширений КАК ВариантыРасширений
		|		ПО ВариантыОтчетов.ПредопределенныйВариант = ВариантыРасширений.Ссылка
		|ГДЕ
		|	ВариантыОтчетов.ТипОтчета В(&ТипыОтчетов)
		|	И ВариантыОтчетов.Отчет В(&ОтчетыПользователя)
		|	И НЕ ВариантыОтчетов.ПредопределенныйВариант В (&ОтключенныеВариантыПрограммы)
		|	И ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ
		|	И НЕ ЕСТЬNULL(ВариантыКонфигурации.ПометкаУдаления, ЕСТЬNULL(ВариантыРасширений.ПометкаУдаления, ЛОЖЬ))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(РазмещениеВариантов.Ссылка, РазмещениеПредопределенных.Ссылка) КАК Ссылка,
		|	ЕСТЬNULL(РазмещениеВариантов.Подсистема, РазмещениеПредопределенных.Подсистема) КАК Подсистема,
		|	ЕСТЬNULL(РазмещениеВариантов.НаименованиеПодсистемы, РазмещениеПредопределенных.НаименованиеПодсистемы) КАК НаименованиеПодсистемы,
		|	ЕСТЬNULL(РазмещениеВариантов.Использование, ИСТИНА) КАК Использование,
		|	ВЫБОР
		|		КОГДА РазмещениеВариантов.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоНастройкаРазработчика
		|ПОМЕСТИТЬ РазмещениеВсех
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВариантыОтчетов.Ссылка КАК Ссылка,
		|		ВариантыРазмещение.Использование КАК Использование,
		|		ВариантыРазмещение.Подсистема КАК Подсистема,
		|		ВЫБОР
		|			КОГДА ВариантыРазмещение.Подсистема.ПолноеИмя = ""Подсистемы""
		|				ТОГДА &НаименованиеРабочегоСтола
		|			ИНАЧЕ ВариантыРазмещение.Подсистема.Синоним
		|		КОНЕЦ КАК НаименованиеПодсистемы
		|	ИЗ
		|		Варианты КАК ВариантыОтчетов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов.Размещение КАК ВариантыРазмещение
		|			ПО ВариантыОтчетов.Ссылка = ВариантыРазмещение.Ссылка
		|				И (ВариантыРазмещение.Подсистема В (&МассивПодсистем))) КАК РазмещениеВариантов
		|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВариантыОтчетов.Ссылка КАК Ссылка,
		|			РазмещениеКонфигурации.Подсистема КАК Подсистема,
		|			ВЫБОР
		|				КОГДА РазмещениеКонфигурации.Подсистема.ПолноеИмя = ""Подсистемы""
		|					ТОГДА &НаименованиеРабочегоСтола
		|				ИНАЧЕ РазмещениеКонфигурации.Подсистема.Синоним
		|			КОНЕЦ КАК НаименованиеПодсистемы
		|		ИЗ
		|			Варианты КАК ВариантыОтчетов
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов.Размещение КАК РазмещениеКонфигурации
		|				ПО (ВариантыОтчетов.Пользовательский = ЛОЖЬ)
		|					И ВариантыОтчетов.ПредопределенныйВариант = РазмещениеКонфигурации.Ссылка
		|					И (РазмещениеКонфигурации.Подсистема В (&МассивПодсистем))
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ВариантыОтчетов.Ссылка,
		|			РазмещениеРасширений.Подсистема,
		|			ВЫБОР
		|				КОГДА РазмещениеРасширений.Подсистема.ПолноеИмя = ""Подсистемы""
		|					ТОГДА &НаименованиеРабочегоСтола
		|				ИНАЧЕ РазмещениеРасширений.Подсистема.Синоним
		|			КОНЕЦ
		|		ИЗ
		|			Варианты КАК ВариантыОтчетов
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетовРасширений.Размещение КАК РазмещениеРасширений
		|				ПО (ВариантыОтчетов.Пользовательский = ЛОЖЬ)
		|					И ВариантыОтчетов.ПредопределенныйВариант = РазмещениеРасширений.Ссылка
		|					И (РазмещениеРасширений.Подсистема В (&МассивПодсистем))) КАК РазмещениеПредопределенных
		|		ПО РазмещениеВариантов.Ссылка = РазмещениеПредопределенных.Ссылка
		|			И РазмещениеВариантов.Подсистема = РазмещениеПредопределенных.Подсистема
		|ГДЕ
		|	ЕСТЬNULL(РазмещениеВариантов.Использование, ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РазмещениеВсех.Ссылка КАК Ссылка,
		|	РазмещениеВсех.Подсистема КАК Подсистема,
		|	РазмещениеВсех.НаименованиеПодсистемы КАК НаименованиеПодсистемы
		|ПОМЕСТИТЬ РазмещениеВидимых
		|ИЗ
		|	РазмещениеВсех КАК РазмещениеВсех
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетов КАК ЛичныеНастройки
		|		ПО РазмещениеВсех.Подсистема = ЛичныеНастройки.Подсистема
		|			И РазмещениеВсех.Ссылка = ЛичныеНастройки.Вариант
		|			И (ЛичныеНастройки.Пользователь = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Варианты КАК Варианты
		|		ПО РазмещениеВсех.Ссылка = Варианты.Ссылка
		|ГДЕ
		|	ЕСТЬNULL(ЛичныеНастройки.Видимость, Варианты.ВидимостьПоУмолчанию)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВариантыОтчетов.Ссылка КАК Ссылка,
		|	ВариантыОтчетов.Родитель КАК Родитель,
		|	ВариантыОтчетов.НаименованиеВарианта КАК НаименованиеВарианта,
		|	ВариантыОтчетов.ТолькоДляАвтора КАК ТолькоДляАвтора,
		|	ВариантыОтчетов.Автор КАК Автор,
		|	ВариантыОтчетов.АвторПредставление КАК АвторПредставление,
		|	ВариантыОтчетов.Отчет КАК Отчет,
		|	ВариантыОтчетов.Отчет.Имя КАК ИмяОтчета,
		|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
		|	ВариантыОтчетов.ТипОтчета КАК ТипОтчета,
		|	ВариантыОтчетов.Пользовательский КАК Пользовательский,
		|	ВариантыОтчетов.ПредопределенныйВариант КАК ПредопределенныйВариант,
		|	ВариантыОтчетов.НаименованияПараметровИОтборов КАК НаименованияПараметровИОтборов,
		|	ВариантыОтчетов.НаименованияПолей КАК НаименованияПолей,
		|	ВариантыОтчетов.КлючевыеСлова КАК КлючевыеСлова,
		|	ВариантыОтчетов.Описание КАК Описание,
		|	Размещение.Подсистема КАК Подсистема,
		|	Размещение.НаименованиеПодсистемы КАК НаименованиеПодсистемы,
		|	НЕОПРЕДЕЛЕНО КАК КлючПользовательскойНастройки,
		|	НЕОПРЕДЕЛЕНО КАК ПредставлениеПользовательскойНастройки
		|ИЗ
		|	Варианты КАК ВариантыОтчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазмещениеВидимых КАК Размещение
		|		ПО ВариантыОтчетов.Ссылка = Размещение.Ссылка
		|ГДЕ
		|	&ПоискВариантовИПодсистем
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Пользовательские.Вариант,
		|	Варианты.Родитель,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	Пользовательские.КлючПользовательскойНастройки,
		|	Пользовательские.Наименование
		|ИЗ
		|	Варианты КАК Варианты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПользовательскиеНастройкиОтчетов КАК Пользовательские
		|		ПО Варианты.Ссылка = Пользовательские.Вариант
		|ГДЕ
		|	Пользовательские.Пользователь = &ТекущийПользователь
		|	И &ПоискПользовательскихНастроек
		|	И Пользовательские.ПометкаУдаления = ЛОЖЬ";
		
		Если Не ПравоЧтенияАвторов Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВариантыОтчетов.Автор КАК Автор", "НЕОПРЕДЕЛЕНО КАК Автор");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫРАЗИТЬ(ВариантыОтчетов.Автор.Наименование КАК СТРОКА(1000)) КАК АвторПредставление", "НЕОПРЕДЕЛЕНО КАК АвторПредставление");
		КонецЕсли;
		
		Если ЕстьОтборПоВидимости Тогда
			// Действие не требуется.
		Иначе
			// Удаление временной таблицы для фильтра по видимости.
			УдалитьВременнуюТаблицу(ТекстЗапроса, "РазмещениеВидимых");
			// Подмена имени временной таблицы, из которой нужно делать выборку.
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РазмещениеВидимых", "РазмещениеВсех");
		КонецЕсли;
		
		Если ЕстьОтборПоТипамОтчетов Тогда
			Запрос.УстановитьПараметр("ТипыОтчетов", ПараметрыПоиска.ТипыОтчетов);
		Иначе
			// Удаление отбора по типу отчета.
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса,
				"ВариантыОтчетов.ТипОтчета В(&ТипыОтчетов)
				|	И ",
				"");
		КонецЕсли;
		
		Если ЕстьОтборПоПодсистемам Тогда
			Если ТипЗнч(ПараметрыПоиска.Подсистемы) = Тип("Массив") Тогда
				Запрос.УстановитьПараметр("МассивПодсистем", ПараметрыПоиска.Подсистемы);
			Иначе
				МассивПодсистем = Новый Массив;
				МассивПодсистем.Добавить(ПараметрыПоиска.Подсистемы);
				Запрос.УстановитьПараметр("МассивПодсистем", МассивПодсистем);
			КонецЕсли;
		Иначе
			// Удаление отбора по подсистемам.
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (ВариантыРазмещение.Подсистема В (&МассивПодсистем))", "");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (РазмещениеКонфигурации.Подсистема В (&МассивПодсистем))", "");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (РазмещениеРасширений.Подсистема В (&МассивПодсистем))", "");
		КонецЕсли;
		
		Если ЕстьСтрокаПоиска И Не ЕстьОтборПоПодсистемам Тогда
			// Для поиска информация о размещении является дополнительной, а не ключевой.
			Если ЕстьОтборПоВидимости Тогда
				ТекстЗапроса = СтрЗаменить(
					ТекстЗапроса,
					"ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазмещениеВидимых КАК Размещение",
					"ЛЕВОЕ СОЕДИНЕНИЕ РазмещениеВидимых КАК Размещение");
			Иначе
				ТекстЗапроса = СтрЗаменить(
					ТекстЗапроса,
					"ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазмещениеВсех КАК Размещение",
					"ЛЕВОЕ СОЕДИНЕНИЕ РазмещениеВсех КАК Размещение");
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьОтборПоПометкеУдаления Тогда
			Если ПараметрыПоиска.ПометкаУдаления <> Ложь Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".ПометкаУдаления = ЛОЖЬ", ".ПометкаУдаления = ИСТИНА");
			КонецЕсли;
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ", "");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И НЕ ЕСТЬNULL(ВариантыКонфигурации.ПометкаУдаления, ЕСТЬNULL(ВариантыРасширений.ПометкаУдаления, ЛОЖЬ))", "");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Пользовательские.ПометкаУдаления = ЛОЖЬ", "");
		КонецЕсли;
		
		Если ЕстьСтрокаПоиска Тогда
			СтрокаПоиска = ВРег(СокрЛП(ПараметрыПоиска.СтрокаПоиска));
			ШаблонПоиска = "";
			МассивСлов = ВариантыОтчетовКлиентСервер.РазложитьСтрокуПоискаВМассивСлов(СтрокаПоиска);
			Для НомерСлова = 1 По МассивСлов.Количество() Цикл
				Слово = МассивСлов[НомерСлова-1];
				ИмяСлова = "Слово" + Формат(НомерСлова, "ЧГ=");
				Запрос.УстановитьПараметр(ИмяСлова, "%" + Слово + "%");
				Шаблон = "<ИмяТаблицы.ИмяПоля> ПОДОБНО &" + ИмяСлова;
				Если НомерСлова = 1 Тогда
					ШаблонПоиска = Шаблон;
				Иначе
					ШаблонПоиска = ШаблонПоиска + Символы.ПС + "				Или " + Шаблон;
				КонецЕсли;
			КонецЦикла;
			
			// Условие для поиска вариантов.
			ПоискВариантовИПодсистем = "("
				+ СтрЗаменить(ШаблонПоиска, "<ИмяТаблицы.ИмяПоля>", "ВариантыОтчетов.НаименованиеВарианта")
				+ Символы.ПС
				+ "				Или "
				+ СтрЗаменить(ШаблонПоиска, "<ИмяТаблицы.ИмяПоля>", "Размещение.НаименованиеПодсистемы")
				+ Символы.ПС
				+ "				Или "
				+ СтрЗаменить(ШаблонПоиска, "<ИмяТаблицы.ИмяПоля>", "ВариантыОтчетов.НаименованияПолей")
				+ Символы.ПС
				+ "				Или "
				+ СтрЗаменить(ШаблонПоиска, "<ИмяТаблицы.ИмяПоля>", "ВариантыОтчетов.НаименованияПараметровИОтборов")
				+ Символы.ПС
				+ "				Или "
				+ СтрЗаменить(ШаблонПоиска, "<ИмяТаблицы.ИмяПоля>", "ВариантыОтчетов.Описание")
				+ Символы.ПС
				+ "				Или "
				+ СтрЗаменить(ШаблонПоиска, "<ИмяТаблицы.ИмяПоля>", "ВариантыОтчетов.КлючевыеСлова");
			Если ПравоЧтенияАвторов Тогда
				ПоискВариантовИПодсистем = ПоискВариантовИПодсистем
				+ Символы.ПС
				+ "				Или "
				+ СтрЗаменить(ШаблонПоиска, "<ИмяТаблицы.ИмяПоля>", "ВариантыОтчетов.АвторПредставление");
			КонецЕсли;
			ПоискВариантовИПодсистем = ПоискВариантовИПодсистем + ")";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоискВариантовИПодсистем", ПоискВариантовИПодсистем);
			
			ПоискПользовательскихНастроек = (
				"("
				+ СтрЗаменить(ШаблонПоиска, "<ИмяТаблицы.ИмяПоля>", "Пользовательские.Наименование")
				+ ")");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоискПользовательскихНастроек", ПоискПользовательскихНастроек);
			
		Иначе
			// Удаление отбора для поиска в данных вариантов и подсистем.
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса,
				"ГДЕ
				|	&ПоискВариантовИПодсистем",
				"");
			// Удаление таблицы для поиска среди пользовательских настроек.
			НачалоВыборкиИзТаблицы = (
				"ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Пользовательские.Вариант,");
			ТекстЗапроса = СокрП(Лев(ТекстЗапроса, СтрНайти(ТекстЗапроса, НачалоВыборкиИзТаблицы) - 1));
		КонецЕсли;
		
		// Удаление лишних полей когда они не нужны ни для поиска ни для итоговой таблицы.
		Если Не ЕстьСтрокаПоиска И Не ПолучатьИтоговуюТаблицу Тогда
			// НаименованиеВарианта
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВариантыОтчетов.Наименование КАК", "НЕОПРЕДЕЛЕНО КАК");
			// НаименованияПолей
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса,
				"ВЫБОР
				|		КОГДА ПОДСТРОКА(ВариантыОтчетов.НаименованияПолей, 1, 1) = """"
				|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыКонфигурации.НаименованияПолей, ВариантыРасширений.НаименованияПолей) КАК СТРОКА(1000))
				|		ИНАЧЕ ВЫРАЗИТЬ(ВариантыОтчетов.НаименованияПолей КАК СТРОКА(1000))
				|	КОНЕЦ КАК",
				"НЕОПРЕДЕЛЕНО КАК");
			// НаименованияПараметровИОтборов
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса,
				"ВЫБОР
				|		КОГДА ПОДСТРОКА(ВариантыОтчетов.НаименованияПараметровИОтборов, 1, 1) = """"
				|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыКонфигурации.НаименованияПараметровИОтборов, ВариантыРасширений.НаименованияПараметровИОтборов) КАК СТРОКА(1000))
				|		ИНАЧЕ ВЫРАЗИТЬ(ВариантыОтчетов.НаименованияПараметровИОтборов КАК СТРОКА(1000))
				|	КОНЕЦ КАК",
				"НЕОПРЕДЕЛЕНО КАК");
			// КлючевыеСлова
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса,
				"ВЫБОР
				|		КОГДА ПОДСТРОКА(ВариантыОтчетов.КлючевыеСлова, 1, 1) = """"
				|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыКонфигурации.КлючевыеСлова, ВариантыРасширений.КлючевыеСлова) КАК СТРОКА(1000))
				|		ИНАЧЕ ВЫРАЗИТЬ(ВариантыОтчетов.КлючевыеСлова КАК СТРОКА(1000))
				|	КОНЕЦ КАК",
				"НЕОПРЕДЕЛЕНО КАК");
			// Описание
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса,
				"ВЫБОР
				|		КОГДА ПОДСТРОКА(ВариантыОтчетов.Описание, 1, 1) = """"
				|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыКонфигурации.Описание, ВариантыРасширений.Описание) КАК СТРОКА(1000))
				|		ИНАЧЕ ВЫРАЗИТЬ(ВариантыОтчетов.Описание КАК СТРОКА(1000))
				|	КОНЕЦ КАК",
				"НЕОПРЕДЕЛЕНО КАК");
			// НаименованиеПодсистемы
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса,
				"ВЫБОР
				|			КОГДА ВариантыРазмещение.Подсистема.ПолноеИмя = ""Подсистемы""
				|				ТОГДА &НаименованиеРабочегоСтола
				|			ИНАЧЕ ВариантыРазмещение.Подсистема.Синоним
				|		КОНЕЦ КАК",
				"НЕОПРЕДЕЛЕНО");
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса,
				"ВЫБОР
				|				КОГДА РазмещениеКонфигурации.Подсистема.ПолноеИмя = ""Подсистемы""
				|					ТОГДА &НаименованиеРабочегоСтола
				|				ИНАЧЕ РазмещениеКонфигурации.Подсистема.Синоним
				|			КОНЕЦ",
				"НЕОПРЕДЕЛЕНО");
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса,
				"ВЫБОР
				|				КОГДА РазмещениеРасширений.Подсистема.ПолноеИмя = ""Подсистемы""
				|					ТОГДА &НаименованиеРабочегоСтола
				|				ИНАЧЕ РазмещениеРасширений.Подсистема.Синоним
				|			КОНЕЦ",
				"НЕОПРЕДЕЛЕНО");
		Иначе
			Запрос.УстановитьПараметр("НаименованиеРабочегоСтола", НСтр("ru = 'Начальная страница'"));
		КонецЕсли;
		
		// Удаление лишних полей когда они не нужны для итоговой таблицы.
		Если Не ПолучатьИтоговуюТаблицу Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВариантыОтчетов.Автор КАК", "НЕОПРЕДЕЛЕНО КАК");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВариантыОтчетов.Отчет КАК", "НЕОПРЕДЕЛЕНО КАК");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВариантыОтчетов.Отчет.Имя КАК", "НЕОПРЕДЕЛЕНО КАК");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВариантыОтчетов.КлючВарианта КАК", "НЕОПРЕДЕЛЕНО КАК");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВариантыОтчетов.ТипОтчета КАК", "НЕОПРЕДЕЛЕНО КАК");
		КонецЕсли;
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВариантыОтчетов.Ссылка КАК Ссылка,
		|	ВариантыОтчетов.КлючВарианта,
		|	ВариантыОтчетов.Родитель,
		|	ВариантыОтчетов.Наименование,
		|	ВариантыОтчетов.Описание,
		|	ВариантыОтчетов.ТолькоДляАвтора,
		|	ВариантыОтчетов.Автор
		|ИЗ
		|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|ГДЕ
		|	ВариантыОтчетов.ТипОтчета В(&ТипыОтчетов)
		|	И ВариантыОтчетов.Отчет В(&ОтчетыПользователя)
		|	И НЕ ВариантыОтчетов.ПредопределенныйВариант В (&ОтключенныеВариантыПрограммы)
		|	И ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ";
		
		Если ЕстьОтборПоТипамОтчетов Тогда
			Запрос.УстановитьПараметр("ТипыОтчетов", ПараметрыПоиска.ТипыОтчетов);
		Иначе
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса,
				"ВариантыОтчетов.ТипОтчета В(&ТипыОтчетов)
				|	И ",
				"");
		КонецЕсли;
		
		Если ЕстьОтборПоПометкеУдаления Тогда
			Если ПараметрыПоиска.ПометкаУдаления <> Ложь Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".ПометкаУдаления = ЛОЖЬ", ".ПометкаУдаления = ИСТИНА");
			КонецЕсли;
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|	И ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ", "");
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылки", Новый Массив);
	Результат.Вставить("ПодсветкаВариантов", Новый Соответствие);
	Результат.Вставить("Подсистемы", Новый Массив);
	Результат.Вставить("ПодсветкаПодсистем", Новый Соответствие);
	Результат.Вставить("ВариантыСвязанныеСПодсистемами", Новый Соответствие);
	Результат.Вставить("РодителиСвязанныеСВариантами", Новый Массив);
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	Если ПолучатьИтоговуюТаблицу Тогда
		Результат.Вставить("ТаблицаЗначений", ТаблицаЗначений);
	КонецЕсли;
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ЕстьСтрокаПоиска Тогда
		ТаблицаВариантов = ТаблицаЗначений.Скопировать(, "Ссылка, Родитель");
		ТаблицаВариантов.Свернуть("Ссылка, Родитель");
		Для Каждого СтрокаТаблицы Из ТаблицаВариантов Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Ссылка) И Результат.Ссылки.Найти(СтрокаТаблицы.Ссылка) = Неопределено Тогда
				Результат.Ссылки.Добавить(СтрокаТаблицы.Ссылка);
				Если ЗначениеЗаполнено(СтрокаТаблицы.Родитель) И Результат.Ссылки.Найти(СтрокаТаблицы.Родитель) = Неопределено Тогда
					Результат.Ссылки.Добавить(СтрокаТаблицы.Родитель);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаЗначений.Сортировать("Ссылка");
	
	ШаблонОбластиПоиска = Новый ФиксированнаяСтруктура("Значение, КоличествоНайденныхСлов, ПодсветкаСлов", "", 0, Новый СписокЗначений);
	
	СтрокаТаблицы = ТаблицаЗначений[0];
	Вариант = Новый Структура;
	Вариант.Вставить("Ссылка", СтрокаТаблицы.Ссылка);
	Вариант.Вставить("Родитель", СтрокаТаблицы.Родитель);
	Вариант.Вставить("НаименованиеВарианта",                 Новый Структура(ШаблонОбластиПоиска));
	Вариант.Вставить("Описание",                             Новый Структура(ШаблонОбластиПоиска));
	Вариант.Вставить("НаименованияПолей",                    Новый Структура(ШаблонОбластиПоиска));
	Вариант.Вставить("НаименованияПараметровИОтборов",       Новый Структура(ШаблонОбластиПоиска));
	Вариант.Вставить("КлючевыеСлова",                        Новый Структура(ШаблонОбластиПоиска));
	Вариант.Вставить("НаименованияПользовательскихНастроек", Новый Структура(ШаблонОбластиПоиска));
	Вариант.Вставить("НаименованияПодсистем",                Новый Структура(ШаблонОбластиПоиска));
	Вариант.Вставить("Подсистемы",                           Новый Массив);
	Вариант.Вставить("ПредставлениеАвтора",                  Новый Структура(ШаблонОбластиПоиска));
	
	РазделительХранения = ВариантыОтчетовКлиентСервер.РазделительХранения();
	РазделительПредставления = ВариантыОтчетовКлиентСервер.РазделительПредставления();
	
	Количество = ТаблицаЗначений.Количество();
	Для Индекс = 1 По Количество Цикл
		// Заполнение переменных.
		Если Не ЗначениеЗаполнено(Вариант.НаименованиеВарианта.Значение) И ЗначениеЗаполнено(СтрокаТаблицы.НаименованиеВарианта) Тогда
			Вариант.НаименованиеВарианта.Значение = СтрокаТаблицы.НаименованиеВарианта;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Вариант.Описание.Значение) И ЗначениеЗаполнено(СтрокаТаблицы.Описание) Тогда
			Вариант.Описание.Значение = СтрокаТаблицы.Описание;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Вариант.НаименованияПолей.Значение) И ЗначениеЗаполнено(СтрокаТаблицы.НаименованияПолей) Тогда
			Вариант.НаименованияПолей.Значение = СтрокаТаблицы.НаименованияПолей;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Вариант.НаименованияПараметровИОтборов.Значение) И ЗначениеЗаполнено(СтрокаТаблицы.НаименованияПараметровИОтборов) Тогда
			Вариант.НаименованияПараметровИОтборов.Значение = СтрокаТаблицы.НаименованияПараметровИОтборов;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Вариант.КлючевыеСлова.Значение) И ЗначениеЗаполнено(СтрокаТаблицы.КлючевыеСлова) Тогда
			Вариант.КлючевыеСлова.Значение = СтрокаТаблицы.КлючевыеСлова;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Вариант.ПредставлениеАвтора.Значение) И ЗначениеЗаполнено(СтрокаТаблицы.АвторПредставление) Тогда
			Вариант.ПредставлениеАвтора.Значение = СтрокаТаблицы.АвторПредставление;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПредставлениеПользовательскойНастройки) Тогда
			Если Вариант.НаименованияПользовательскихНастроек.Значение = "" Тогда
				Вариант.НаименованияПользовательскихНастроек.Значение = СтрокаТаблицы.ПредставлениеПользовательскойНастройки;
			Иначе
				Вариант.НаименованияПользовательскихНастроек.Значение = Вариант.НаименованияПользовательскихНастроек.Значение
					+ РазделительПредставления
					+ СтрокаТаблицы.ПредставлениеПользовательскойНастройки;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.НаименованиеПодсистемы)
			И Вариант.Подсистемы.Найти(СтрокаТаблицы.Подсистема) = Неопределено Тогда
			Вариант.Подсистемы.Добавить(СтрокаТаблицы.Подсистема);
			Подсистема = Результат.ПодсветкаПодсистем.Получить(СтрокаТаблицы.Подсистема);
			Если Подсистема = Неопределено Тогда
				Подсистема = Новый Структура;
				Подсистема.Вставить("Ссылка", СтрокаТаблицы.Подсистема);
				Подсистема.Вставить("НаименованиеПодсистемы", Новый Структура(ШаблонОбластиПоиска));
				Подсистема.НаименованиеПодсистемы.Значение = СтрокаТаблицы.НаименованиеПодсистемы;
				Подсистема.Вставить("ВсеСловаНайдены", Истина);
				Подсистема.Вставить("НайденныеСлова", Новый Массив);
				Для Каждого Слово Из МассивСлов Цикл
					Если ОтметитьСлово(Подсистема.НаименованиеПодсистемы, Слово) Тогда
						Подсистема.НайденныеСлова.Добавить(Слово);
					Иначе
						Подсистема.ВсеСловаНайдены = Ложь;
					КонецЕсли;
				КонецЦикла;
				Если Подсистема.ВсеСловаНайдены Тогда
					Результат.Подсистемы.Добавить(Подсистема.Ссылка);
				КонецЕсли;
				Результат.ПодсветкаПодсистем.Вставить(Подсистема.Ссылка, Подсистема);
			КонецЕсли;
			Если Вариант.НаименованияПодсистем.Значение = "" Тогда
				Вариант.НаименованияПодсистем.Значение = СтрокаТаблицы.НаименованиеПодсистемы;
			Иначе
				Вариант.НаименованияПодсистем.Значение = Вариант.НаименованияПодсистем.Значение
					+ РазделительПредставления
					+ СтрокаТаблицы.НаименованиеПодсистемы;
			КонецЕсли;
		КонецЕсли;
		
		Если Индекс < Количество Тогда
			СтрокаТаблицы = ТаблицаЗначений[Индекс];
		КонецЕсли;
		
		Если Индекс = Количество Или СтрокаТаблицы.Ссылка <> Вариант.Ссылка Тогда
			// Анализ собранной информации о варианте.
			ВсеСловаНайдены = Истина;
			СвязанныеПодсистемы = Новый Массив;
			Для Каждого Слово Из МассивСлов Цикл
				СловоНайдено = Ложь;
				
				Если ОтметитьСлово(Вариант.НаименованиеВарианта, Слово) Тогда
					СловоНайдено = Истина;
				КонецЕсли;
				
				Если ОтметитьСлово(Вариант.Описание, Слово) Тогда
					СловоНайдено = Истина;
				КонецЕсли;
				
				Если ОтметитьСлово(Вариант.НаименованияПолей, Слово, Истина) Тогда
					СловоНайдено = Истина;
				КонецЕсли;
				
				Если ОтметитьСлово(Вариант.ПредставлениеАвтора, Слово, Истина) Тогда
					СловоНайдено = Истина;
				КонецЕсли;
				
				Если ОтметитьСлово(Вариант.НаименованияПараметровИОтборов, Слово, Истина) Тогда
					СловоНайдено = Истина;
				КонецЕсли;
				
				Если ОтметитьСлово(Вариант.КлючевыеСлова, Слово, Истина) Тогда
					СловоНайдено = Истина;
				КонецЕсли;
				
				Если ОтметитьСлово(Вариант.НаименованияПользовательскихНастроек, Слово, Истина) Тогда
					СловоНайдено = Истина;
				КонецЕсли;
				
				Если Не СловоНайдено Тогда
					Для Каждого ПодсистемаСсылка Из Вариант.Подсистемы Цикл
						Подсистема = Результат.ПодсветкаПодсистем.Получить(ПодсистемаСсылка);
						Если Подсистема.НайденныеСлова.Найти(Слово) <> Неопределено Тогда
							СловоНайдено = Истина;
							СвязанныеПодсистемы.Добавить(ПодсистемаСсылка);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если Не СловоНайдено Тогда
					ВсеСловаНайдены = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ВсеСловаНайдены Тогда // Регистрация результата.
				Результат.Ссылки.Добавить(Вариант.Ссылка);
				Результат.ПодсветкаВариантов.Вставить(Вариант.Ссылка, Вариант);
				Если СвязанныеПодсистемы.Количество() > 0 Тогда
					Результат.ВариантыСвязанныеСПодсистемами.Вставить(Вариант.Ссылка, СвязанныеПодсистемы);
				КонецЕсли;
				// Удаление связи "от подчиненного", если родитель найден самостоятельно.
				ИндексРодителя = Результат.РодителиСвязанныеСВариантами.Найти(Вариант.Ссылка);
				Если ИндексРодителя <> Неопределено Тогда
					Результат.РодителиСвязанныеСВариантами.Удалить(ИндексРодителя);
				КонецЕсли;
				Если ЗначениеЗаполнено(Вариант.Родитель) И Результат.Ссылки.Найти(Вариант.Родитель) = Неопределено Тогда
					Результат.Ссылки.Добавить(Вариант.Родитель);
					Результат.РодителиСвязанныеСВариантами.Добавить(Вариант.Родитель);
				КонецЕсли;
			КонецЕсли;
			
			Если Индекс = Количество Тогда
				Прервать;
			КонецЕсли;
			
			// Обнуление переменных.
			Вариант = Новый Структура;
			Вариант.Вставить("Ссылка", СтрокаТаблицы.Ссылка);
			Вариант.Вставить("Родитель", СтрокаТаблицы.Родитель);
			Вариант.Вставить("НаименованиеВарианта",                 Новый Структура(ШаблонОбластиПоиска));
			Вариант.Вставить("Описание",                             Новый Структура(ШаблонОбластиПоиска));
			Вариант.Вставить("НаименованияПолей",                    Новый Структура(ШаблонОбластиПоиска));
			Вариант.Вставить("НаименованияПараметровИОтборов",       Новый Структура(ШаблонОбластиПоиска));
			Вариант.Вставить("КлючевыеСлова",                        Новый Структура(ШаблонОбластиПоиска));
			Вариант.Вставить("НаименованияПользовательскихНастроек", Новый Структура(ШаблонОбластиПоиска));
			Вариант.Вставить("НаименованияПодсистем",                Новый Структура(ШаблонОбластиПоиска));
			Вариант.Вставить("Подсистемы",                           Новый Массив);
			Вариант.Вставить("ПредставлениеАвтора",                  Новый Структура(ШаблонОбластиПоиска));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Находит слово и отмечает место, где оно найдено. Возвращает Истина если слово найдено.
Функция ОтметитьСлово(СтруктураГде, Слово, ИспользоватьРазделитель = Ложь) Экспорт
	Если СтрНачинаетсяС(СтруктураГде.Значение, "#") Тогда
		СтруктураГде.Значение = Сред(СтруктураГде.Значение, 2);
	КонецЕсли;
	Результат = "";
	ОстатокВРег = ВРег(СтруктураГде.Значение);
	Позиция = СтрНайти(ОстатокВРег, Слово);
	Если Позиция = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Если СтруктураГде.КоличествоНайденныхСлов = 0 Тогда
		// Инициализация переменной, содержащей директивы для подсветки слов.
		СтруктураГде.ПодсветкаСлов = Новый СписокЗначений;
		// Прокрутка фокуса до значащего слова (обнаруженной информации).
		Если ИспользоватьРазделитель Тогда
			РазделительХранения = ВариантыОтчетовКлиентСервер.РазделительХранения();
			РазделительПредставления = ВариантыОтчетовКлиентСервер.РазделительПредставления();
			ДлинаРазделителя = СтрДлина(РазделительХранения);
			Пока Позиция > 10 Цикл
				ПозицияРазделителя = СтрНайти(ОстатокВРег, РазделительХранения);
				Если ПозицияРазделителя = 0 Тогда
					Прервать;
				КонецЕсли;
				Если ПозицияРазделителя < Позиция Тогда
					// Перенос фрагмента до разделителя в конец области.
					СтруктураГде.Значение = (
						Сред(СтруктураГде.Значение, ПозицияРазделителя + ДлинаРазделителя)
						+ РазделительХранения
						+ Лев(СтруктураГде.Значение, ПозицияРазделителя - 1));
					ОстатокВРег = (
						Сред(ОстатокВРег, ПозицияРазделителя + ДлинаРазделителя)
						+ РазделительХранения
						+ Лев(ОстатокВРег, ПозицияРазделителя - 1));
					// Обновление информации о расположении слова.
					Позиция = Позиция - ПозицияРазделителя - ДлинаРазделителя + 1;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			СтруктураГде.Значение = СтрЗаменить(СтруктураГде.Значение, РазделительХранения, РазделительПредставления);
			ОстатокВРег = СтрЗаменить(ОстатокВРег, РазделительХранения, РазделительПредставления);
			Позиция = СтрНайти(ОстатокВРег, Слово);
		КонецЕсли;
	КонецЕсли;
	// Регистрация найденного слова.
	СтруктураГде.КоличествоНайденныхСлов = СтруктураГде.КоличествоНайденныхСлов + 1;
	// Отметка слов.
	ДлинаЛевойЧасти = 0;
	ДлинаСлова = СтрДлина(Слово);
	Пока Позиция > 0 Цикл
		СтруктураГде.ПодсветкаСлов.Добавить(ДлинаЛевойЧасти + Позиция, "+");
		СтруктураГде.ПодсветкаСлов.Добавить(ДлинаЛевойЧасти + Позиция + ДлинаСлова, "-");
		ОстатокВРег = Сред(ОстатокВРег, Позиция + ДлинаСлова);
		ДлинаЛевойЧасти = ДлинаЛевойЧасти + Позиция + ДлинаСлова - 1;
		Позиция = СтрНайти(ОстатокВРег, Слово);
	КонецЦикла;
	Возврат Истина;
КонецФункции

// Удаляет временную таблицу из текста запроса.
Процедура УдалитьВременнуюТаблицу(ТекстЗапроса, ИмяВременнойТаблицы)
	ПозицияВременнойТаблицы = СтрНайти(ТекстЗапроса, "ПОМЕСТИТЬ " + ИмяВременнойТаблицы);
	ЛеваяЧасть = "";
	ПраваяЧасть = ТекстЗапроса;
	Пока Истина Цикл
		ПозицияТочкиСЗапятой = СтрНайти(ПраваяЧасть, Символы.ПС + ";");
		Если ПозицияТочкиСЗапятой = 0 Тогда
			Прервать;
		ИначеЕсли ПозицияТочкиСЗапятой > ПозицияВременнойТаблицы Тогда
			ПраваяЧасть = Сред(ПраваяЧасть, ПозицияТочкиСЗапятой + 2);
			Прервать;
		Иначе
			ЛеваяЧасть = ЛеваяЧасть + Лев(ПраваяЧасть, ПозицияТочкиСЗапятой + 1);
			ПраваяЧасть = Сред(ПраваяЧасть, ПозицияТочкиСЗапятой + 2);
			ПозицияВременнойТаблицы = ПозицияВременнойТаблицы - ПозицияТочкиСЗапятой - 1;
		КонецЕсли;
	КонецЦикла;
	ТекстЗапроса = ЛеваяЧасть + ПраваяЧасть;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее.

// Возвращает строку ключа настроек, не превышающую допустимую длину.
//   Если строка превышает допустимую длину, то лишние символы справа вырезаются
//   и вместо них вставляется MD5 хеш-сумма строки.
//
// Параметры:
//   Строка - Строка - Строковый идентификатор произвольной длины.
//   ДопустимаяДлина - Число - Максимальная длина строки.
//
Функция СтрХеш(Знач Строка, ДопустимаяДлина)
	Если СтрДлина(Строка) <= ДопустимаяДлина Тогда
		Возврат Строка;
	Иначе
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
		ХешированиеДанных.Добавить(Строка);
		Возврат Лев(Строка, ДопустимаяДлина-32) + СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	КонецЕсли;
КонецФункции

// Устарела. Следует удалить из всех мест использования.
// Добавляет оповещение для открытых форм подсистемы если изменилось значение функциональной опции.
//
// Параметры:
//   Результат - Структура - Результат работы сервера, который возвращается на клиент.
//       См. СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения().
//   КонстантаМенеджер - КонстантаМенеджер.<Имя константы> - Менеджер константы, значение которой изменилось.
//
// Описание:
//   Данную процедуру следует использовать при изменении значений констант,
//   связанных с функциональными опциями для последующего обновления открытых форм.
//
// Места использования:
//   Обработка.ПанельАдминистрированияБСП.Форма.*.
//
Процедура ДобавитьОповещениеПриИзмененииЗначенияКонстанты(Результат, КонстантаМенеджер) Экспорт
	// Все формы отчетов теперь обновляются всегда (при изменении любой константы).
КонецПроцедуры

#КонецОбласти
