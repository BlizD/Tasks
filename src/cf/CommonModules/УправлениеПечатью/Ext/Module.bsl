////////////////////////////////////////////////////////////////////////////////
// Подсистема "Печать".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает описание найденной в коллекции печатной формы.
// Если описание не найдено, возвращает Неопределено.
//
// Параметры:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - см. ПодготовитьКоллекциюПечатныхФорм();
//  ИмяМакета             - Строка          - имя проверяемого макета.
//
// ВозвращаемоеЗначение:
//  СтрокаТаблицыЗначений - найденное описание печатной формы.
Функция СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Идентификатор) Экспорт
	Возврат КоллекцияПечатныхФорм.Найти(ВРег(Идентификатор), "ИмяВРЕГ");
КонецФункции

// Проверить, нужно ли печатать макет.
//
// Параметры:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - см. ПодготовитьКоллекциюПечатныхФорм();
//  ИмяМакета             - Строка          - имя проверяемого макета.
//
// Возвращаемое значение:
//  Булево - Истина, если макет надо печатать.
Функция НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяМакета) Экспорт
	
	Возврат КоллекцияПечатныхФорм.Найти(ВРег(ИмяМакета), "ИмяВРЕГ") <> Неопределено;
	
КонецФункции

// Добавляет табличный документ в коллекцию печатных форм.
//
// Параметры:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - см. ПодготовитьКоллекциюПечатныхФорм();
//  ИмяМакета             - Строка - имя макета;
//  СинонимМакета         - Строка - представление макета;
//  ТабличныйДокумент     - ТабличныйДокумент - печатная форма документа;
//  Картинка              - Картинка;
//  ПолныйПутьКМакету     - Строка - путь к макету в дереве метаданных, например:
//                                   "Документ.СчетНаОплатуПокупателю.ПФ_MXL_СчетЗаказ".
//                                   Если не указывать этот параметр, то редактирование макета пользователем будет
//                                   недоступно в форме ПечатьДокументов.
//  ИмяФайлаПечатнойФормы - Строка - имя, используемое при сохранении печатной формы в файл;
//                        - Соответствие:
//                           * Ключ     - ЛюбаяСсылка - ссылка на объект печати;
//                           * Значение - Строка - имя файла.
Процедура ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, СинонимМакета, ТабличныйДокумент,
	Картинка = Неопределено, ПолныйПутьКМакету = "", ИмяФайлаПечатнойФормы = Неопределено) Экспорт
	
	ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег(ИмяМакета), "ИмяВРЕГ");
	Если ОписаниеПечатнойФормы <> Неопределено Тогда
		ОписаниеПечатнойФормы.ТабличныйДокумент = ТабличныйДокумент;
		ОписаниеПечатнойФормы.СинонимМакета = СинонимМакета;
		ОписаниеПечатнойФормы.Картинка = Картинка;
		ОписаниеПечатнойФормы.ПолныйПутьКМакету = ПолныйПутьКМакету;
		ОписаниеПечатнойФормы.ИмяФайлаПечатнойФормы = ИмяФайлаПечатнойФормы;
	КонецЕсли;
	
КонецПроцедуры

// Задает область печати объекта в табличном документе.
// Применяется для связывания области в табличном документе, с объектом печати (ссылка).
// Необходимо вызывать при формировании очередной области печатной формы в табличном
// документе.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - печатная форма;
//  НомерСтрокиНачало - Число - позиция начала очередной области в документе;
//  ОбъектыПечати - СписокЗначений - список объектов печати;
//  Ссылка - ЛюбаяСсылка - объект печати.
Процедура ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка) Экспорт
	
	Элемент = ОбъектыПечати.НайтиПоЗначению(Ссылка);
	Если Элемент = Неопределено Тогда
		ИмяОбласти = "Документ_" + Формат(ОбъектыПечати.Количество() + 1, "ЧН=; ЧГ=");
		ОбъектыПечати.Добавить(Ссылка, ИмяОбласти);
	Иначе
		ИмяОбласти = Элемент.Представление;
	КонецЕсли;
	
	НомерСтрокиОкончание = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(НомерСтрокиНачало, , НомерСтрокиОкончание, ).Имя = ИмяОбласти;

КонецПроцедуры

// Возвращает список внешних печатных форм.
//
// Параметры:
//  ПолноеИмяОбъектаМетаданных - Строка - полное имя объекта метаданных, для которого необходимо получить список
//                                        печатных форм.
//
// Возвращаемое значение:
//  Список:
//   * Значение      - Строка - идентификатор печатной формы;
//   * Представление - Строка - представление печатной формы.
Функция СписокПечатныхФормИзВнешнихИсточников(ПолноеИмяОбъектаМетаданных) Экспорт
	
	ВнешниеПечатныеФормы = Новый СписокЗначений;
	Если Не ПустаяСтрока(ПолноеИмяОбъектаМетаданных) Тогда
		ПриПолученииСпискаВнешнихПечатныхФорм(ВнешниеПечатныеФормы, ПолноеИмяОбъектаМетаданных);
	КонецЕсли;
	
	Возврат ВнешниеПечатныеФормы;
	
КонецФункции

// Размещает команды печати на форме.
//
// Параметры:
//   Форма                            - УправляемаяФорма - форма, в которой необходимо разместить подменю Печать.
//   МестоРазмещенияКомандПоУмолчанию - ЭлементФормы - группа, в которую необходимо разместить подменю Печать,
//                                                     по умолчанию размещается в командную панель формы.
//   ОбъектыПечати                    - Массив - список объектов метаданных, для которых необходимо сформировать
//                                               объединенное подменю Печать.
Процедура ПриСозданииНаСервере(Форма, МестоРазмещенияКомандПоУмолчанию = Неопределено, ОбъектыПечати = Неопределено) Экспорт
	
	ИмяФормы = Форма.ИмяФормы;
	
	Если ОбъектыПечати = Неопределено Тогда
		КомандыПечати = УправлениеПечатьюПовтИсп.КомандыПечатиФормы(ИмяФормы, ОбъектыПечати).Скопировать();
		ОпределитьВидимостьКомандПечатиПоФункциональнымОпциям(КомандыПечати, Форма);
	Иначе
		КомандыПечати = КомандыПечатиФормы(Форма, ОбъектыПечати).Скопировать();
	КонецЕсли;
	
	Если МестоРазмещенияКомандПоУмолчанию <> Неопределено Тогда
		Для Каждого КомандаПечати Из КомандыПечати Цикл
			Если ПустаяСтрока(КомандаПечати.МестоРазмещения) Тогда
				КомандаПечати.МестоРазмещения = МестоРазмещенияКомандПоУмолчанию.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КомандыПечати.Колонки.Добавить("ИмяКомандыНаФорме", Новый ОписаниеТипов("Строка"));
	
	ТаблицаКоманд = КомандыПечати.Скопировать(,"МестоРазмещения");
	ТаблицаКоманд.Свернуть("МестоРазмещения");
	МестаРазмещения = ТаблицаКоманд.ВыгрузитьКолонку("МестоРазмещения");
	
	Для Каждого МестоРазмещения Из МестаРазмещения Цикл
		НайденныеКоманды = КомандыПечати.НайтиСтроки(Новый Структура("МестоРазмещения,СкрытаФункциональнымиОпциями,Отключена", МестоРазмещения, Ложь, Ложь));
		ЭлементФормыДляРазмещения = Форма.Элементы.Найти(МестоРазмещения);
		Если ЭлементФормыДляРазмещения = Неопределено Тогда
			ЭлементФормыДляРазмещения = МестоРазмещенияКомандПоУмолчанию;
		КонецЕсли;
		
		Если НайденныеКоманды.Количество() > 0 Тогда
			ДобавитьКомандыПечати(Форма, НайденныеКоманды, ЭлементФормыДляРазмещения);
		КонецЕсли;
	КонецЦикла;
	
	АдресКомандПечатиВоВременномХранилище = "АдресКомандПечатиВоВременномХранилище";
	КомандаФормы = Форма.Команды.Найти(АдресКомандПечатиВоВременномХранилище);
	Если КомандаФормы = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(АдресКомандПечатиВоВременномХранилище);
		КомандаФормы.Действие = ПоместитьВоВременноеХранилище(КомандыПечати, Форма.УникальныйИдентификатор);
	Иначе
		ОбщийСписокКомандПечатиФормы = ПолучитьИзВременногоХранилища(КомандаФормы.Действие);
		Для Каждого КомандаПечати Из КомандыПечати Цикл
			ЗаполнитьЗначенияСвойств(ОбщийСписокКомандПечатиФормы.Добавить(), КомандаПечати);
		КонецЦикла;
		КомандаФормы.Действие = ПоместитьВоВременноеХранилище(ОбщийСписокКомандПечатиФормы, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список команд печати для указанной формы.
//
// Параметры:
//  Форма - УправляемаяФорма, Строка - форма или полное имя формы, для которой необходимо получить список команд печати.
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание см. в СоздатьКоллекциюКомандПечати().
Функция КомандыПечатиФормы(Форма, СписокОбъектов = Неопределено) Экспорт
	
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		ИмяФормы = Форма.ИмяФормы;
	Иначе
		ИмяФормы = Форма;
	КонецЕсли;
	
	КомандыПечати = СоздатьКоллекциюКомандПечати();
	
	СтандартнаяОбработка = Истина;
	УправлениеПечатьюПереопределяемый.ПередДобавлениемКомандПечати(ИмяФормы, КомандыПечати, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяФормы);
		Если ОбъектМетаданных <> Неопределено Тогда
			ОбъектМетаданных = ОбъектМетаданных.Родитель();
		КонецЕсли;
		
		Если СписокОбъектов <> Неопределено Тогда
			ЗаполнитьКомандыПечатиДляСпискаОбъектов(СписокОбъектов, КомандыПечати);
		ИначеЕсли ОбъектМетаданных = Неопределено Тогда
			Возврат КомандыПечати;
		Иначе
			ЭтоЖурналДокументов = ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектМетаданных);
			НастройкиСписка = Новый Структура;
			НастройкиСписка.Вставить("МенеджерКомандПечати", ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя()));
			НастройкиСписка.Вставить("АвтоматическоеЗаполнение", ЭтоЖурналДокументов);
			Если ЭтоЖурналДокументов Тогда
				УправлениеПечатьюПереопределяемый.ПриПолученииНастроекСпискаКомандПечати(НастройкиСписка);
			КонецЕсли;
			
			Если НастройкиСписка.АвтоматическоеЗаполнение Тогда
				Если ЭтоЖурналДокументов Тогда
					ЗаполнитьКомандыПечатиДляСпискаОбъектов(ОбъектМетаданных.РегистрируемыеДокументы, КомандыПечати);
				КонецЕсли;
			Иначе
				МенеджерПечати = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
				ДобавляемыеКомандыПечати = СоздатьКоллекциюКомандПечати();
				МенеджерПечати.ДобавитьКомандыПечати(ДобавляемыеКомандыПечати);
				
				Для Каждого КомандаПечати Из ДобавляемыеКомандыПечати Цикл
					Если ПустаяСтрока(КомандаПечати.МенеджерПечати) Тогда
						КомандаПечати.МенеджерПечати = ОбъектМетаданных.ПолноеИмя();
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(КомандыПечати.Добавить(), КомандаПечати);
				КонецЦикла;
				
				Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
					МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
					МодульДополнительныеОтчетыИОбработки.ПриПолученииКомандПечати(КомандыПечати, ОбъектМетаданных.ПолноеИмя());
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		Если КомандаПечати.Порядок = 0 Тогда
			КомандаПечати.Порядок = 50;
		КонецЕсли;
		КомандаПечати.ДополнительныеПараметры.Вставить("ДополнитьКомплектВнешнимиПечатнымиФормами", КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами);
	КонецЦикла;
	
	Если ОбъектМетаданных <> Неопределено Тогда
		УстановитьНастройкиКомандПечати(КомандыПечати, ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных));
	КонецЕсли;
	
	КомандыПечати.Сортировать("Порядок Возр, Представление Возр");
	
	ЧастиИмени = СтрРазделить(ИмяФормы, ".");
	КраткоеИмяФормы = ЧастиИмени[ЧастиИмени.Количество()-1];
	
	// фильтр по именам форм
	Для НомерСтроки = -КомандыПечати.Количество() + 1 По 0 Цикл
		КомандаПечати = КомандыПечати[-НомерСтроки];
		СписокФорм = СтрРазделить(КомандаПечати.СписокФорм, ",", Ложь);
		Если СписокФорм.Количество() > 0 И СписокФорм.Найти(КраткоеИмяФормы) = Неопределено Тогда
			КомандыПечати.Удалить(КомандаПечати);
		КонецЕсли;
	КонецЦикла;
	
	ОпределитьВидимостьКомандПечатиПоФункциональнымОпциям(КомандыПечати, Форма);
	
	Возврат КомандыПечати;
	
КонецФункции

// Создает пустую таблицу для размещения в нее команд печати.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - описание команд печати:
//
//  * Идентификатор - Строка - Идентификатор команды печати, по которому менеджер печати определяет печатную
//                             форму, которую необходимо сформировать.
//                             Пример: "СчетЗаказ".
//
//                                        Для печати нескольких печатных форм можно указывать одновременно несколько их
//                                        идентификаторов (строкой, через запятую, либо массивом строк), например:
//                                         "СчетЗаказ,ГарантийноеПисьмо".
//
//                                        Если необходимо задать количество копий печати для печатной формы, то ее
//                                        идентификатор нужно продублировать столько раз, сколько копий необходимо
//                                        сформировать. При этом следует учитывать, что порядок следования печатных
//                                        форм в комплекте будет соответствовать порядку идентификаторов печатных форм,
//                                        указанных в этом параметре. Пример (2 счета на оплату + 1 гарантийное письмо):
//                                        "СчетЗаказ,СчетЗаказ,ГарантийноеПисьмо".
//
//                                        Идентификатор печатной формы может содержать в себе и альтернативный менеджер
//                                        печати, если он отличается от указанного в параметре МенеджерПечати,
//                                         например: "СчетЗаказ,Обработка.ПечатнаяФорма.ГарантийноеПисьмо".
//
//                                        В этом примере ГарантийноеПисьмо формируется в менеджере печати.
//                                        Обработка.ПечатнаяФорма, а СчетЗаказ - в менеджере печати, указанном в
//                                        параметре МенеджерПечати.
//
//                  - Массив - список идентификаторов команд печати.
//
//  * Представление - Строка            - Представление команды в меню Печать. 
//                                         Пример: "Счет на оплату".
//
//  * МенеджерПечати - Строка           - (необязательный) Имя объекта, в модуле менеджера которого располагается
//                                        процедура Печать, формирующая табличные документы для этой команды.
//                                        Значение по умолчанию: имя модуля менеджера объекта.
//                                         Пример: "Документ.СчетНаОплатуПокупателю".
//  * ТипыОбъектовПечати - Массив       - (необязательный) список типов объектов, для которых предназначена команда
//                                        печати. Параметр предназначен для команд печати в журналах документов, где
//                                        требуется проверка передаваемого типа объекта перед вызовом менеджера печати.
//                                        Если список не заполнен, то при автоматическом создании списка команд печати
//                                        в журнале документов он заполняется типом объекта, из которого была
//                                        импортирована команда печати.
//
//  * Обработчик    - Строка            - (необязательный) Клиентский обработчик команды, в который необходимо передать
//                                        управление вместо стандартного обработчика команды печать. Используется,
//                                        например, когда печатная форма формируется на клиенте.
//                                         Пример: "ОбработчикиПечатиКлиент.ПечатьСчетовНаОплатуПокупателю".
//
//  * Порядок       - Число             - (необязательный) Значение от 1 до 100, указывающее порядок размещения команды
//                                        по отношению к другим командам. Сортировка команд меню Печать осуществляется
//                                        сначала по полю Порядок, затем по представлению.
//                                        Значение по умолчанию: 50.
//
//  * Картинка      - Картинка          - (необязательный) Картинка, которая отображается возле команды в меню Печать.
//                                         Пример: БиблиотекаКартинок.ФорматPDF.
//
//  * СписокФорм    - Строка            - (необязательный) Имена форм через запятую, в которых должна отображаться
//                                        команда. Если параметр не указан, то команда печати будет отображаться во
//                                        всех формах объекта, где встроена подсистема Печать.
//                                         Пример: "ФормаДокумента".
//
//  * МестоРазмещения - Строка          - (необязательный) Имя командной панели формы, в которую необходимо разместить
//                                        команду печати. Параметр необходимо использовать только в случае, когда на
//                                        форме размещается более одного подменю "Печать". В остальных случаях место
//                                        размещения необходимо задавать в модуле формы при вызове метода.
//                                        УправлениеПечатью.ПриСозданииНаСервере.
//                                        
//  * ЗаголовокФормы  - Строка          - (необязательный) Произвольная строка, переопределяющая стандартных заголовок
//                                        формы «Печать документов».
//                                         Пример: "Настраиваемый комплект".
//
//  * ФункциональныеОпции - Строка      - (необязательный) Имена функциональных опций через запятую, от которых зависит
//                                        доступность команды печати.
//
//  * ПроверкаПроведенияПередПечатью - Булево - (необязательный) Признак необходимости проверки проведенности
//                                        документов перед печатью. Если параметр не указан, то проверка проведенности
//                                        не выполняется.
//
//  * СразуНаПринтер - Булево           - (необязательный) Признак необходимости печати документов без предварительного
//                                        просмотра, сразу на принтер. Если параметр не указан, то при выборе команды
//                                        печати открывается форма предварительного просмотра «Печать документов».
//
//  * ФорматСохранения - ТипФайлаТабличногоДокумента - (необязательный) Применяется для быстрого сохранения печатной
//                                        формы (без дополнительных действий) в различные форматы, отличные от mxl.
//                                        Если параметр не указан, то формируется обычный mxl.
//                                         Пример: ТипФайлаТабличногоДокумента.PDF.
//
//                                        При выборе команды печати сразу открывается сформированный в формате pdf
//                                        документ.
//
//  * ПереопределитьПользовательскиеНастройкиКоличества - Булево - (необязательный) Признак необходимости отключения в
//                                        форме ПечатьДокументов механизма сохранения/восстановления выбранного
//                                        пользователем количества экземпляров на печать. Если параметр не указан, то
//                                        механизм сохранения/восстановления настроек будет работать при открытии формы.
//                                        ПечатьДокументов.
//
//  * ДополнитьКомплектВнешнимиПечатнымиФормами - Булево - (необязательный) Признак необходимости дополнить комплект
//                                        документов всеми подключенными к объекту внешними печатными формами
//                                        (подсистема ДополнительныеОтчетыИОбработки). Если параметр не указан, внешние
//                                        печатные формы не добавляются в комплект.
//
//  * ФиксированныйКомплект - Булево    - (необязательный) Признак необходимости блокировки от изменения пользователем
//                                        состава комплекта документов. Если параметр не указан, то пользователь сможет
//                                        исключать отдельные печатные формы из комплекта в форме ПечатьДокументов, а
//                                        также изменять их количество.
//
//  * ДополнительныеПараметры - Структура - (необязательный) - произвольные параметры для передачи в менеджер печати.
//
//  * НеВыполнятьЗаписьВФорме - Булево  - (необязательный) Признак необходимости отключения механизма записи объекта
//                                        перед выполнением команды печати. Используется в исключительных случаях. Если
//                                        параметр не указан, производится запись объекта в случае, если в форме
//                                        объекта установлен признак модифицированности.
//
//  * ТребуетсяРасширениеРаботыСФайлами - Булево - (необязательный) Признак необходимости подключения расширения работы
//                                        с файлами перед выполнением команды. Если параметр не указан, подключение
//                                        расширения работы с файлами выполняться не будет.
//
Функция СоздатьКоллекциюКомандПечати() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	// описание
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//////////
	// Опции (необязательные параметры).
	
	// менеджер печати
	Результат.Колонки.Добавить("МенеджерПечати", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ТипыОбъектовПечати", Новый ОписаниеТипов("Массив"));
	
	// Альтернативный обработчик команды.
	Результат.Колонки.Добавить("Обработчик", Новый ОписаниеТипов("Строка"));
	
	// представление
	Результат.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
	// Имена форм для размещения команд, разделитель - запятая.
	Результат.Колонки.Добавить("СписокФорм", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("МестоРазмещения", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЗаголовокФормы", Новый ОписаниеТипов("Строка"));
	// Имена функциональных опций, влияющих на видимость команды, разделитель - запятая.
	Результат.Колонки.Добавить("ФункциональныеОпции", Новый ОписаниеТипов("Строка"));
	
	// проверка проведения
	Результат.Колонки.Добавить("ПроверкаПроведенияПередПечатью", Новый ОписаниеТипов("Булево"));
	
	// вывод
	Результат.Колонки.Добавить("СразуНаПринтер", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ФорматСохранения"); // ТипФайлаТабличногоДокумента
	
	// настройки комплектов
	Результат.Колонки.Добавить("ПереопределитьПользовательскиеНастройкиКоличества", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ДополнитьКомплектВнешнимиПечатнымиФормами", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ФиксированныйКомплект", Новый ОписаниеТипов("Булево")); // запрет изменения комплекта
	
	// дополнительные параметры
	Результат.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
	
	// Специальный режим выполнения команды
	// по умолчанию выполняется запись модифицированного объекта перед выполнением команды.
	Результат.Колонки.Добавить("НеВыполнятьЗаписьВФорме", Новый ОписаниеТипов("Булево"));
	
	// Для использования макетов офисных документов в веб-клиенте.
	Результат.Колонки.Добавить("ТребуетсяРасширениеРаботыСФайлами", Новый ОписаниеТипов("Булево"));
	
	// Для служебного использования.
	Результат.Колонки.Добавить("СкрытаФункциональнымиОпциями", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Отключена", Новый ОписаниеТипов("Булево"));
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с шаблонами офисных документов.

// Добавляет к параметру НаборОбластей новую запись об области.
//
// Параметры:
//   МакетаОфисногоДокумента - Массив - набор областей (массив структур) макета офисного документа.
//   ИмяОбласти              - Строка - имя добавляемой области.
//   ТипОбласти              - Строка - тип области:
//			ВерхнийКолонтитул
//			НижнийКолонтитул
//			Общая
//			СтрокаТаблицы
//			Список
//
// Пример:
//	Функция ОбластиМакетаОфисногоДокумента()
//	
//		Области = Новый Структура;
//	
//		УправлениеПечатью.ДобавитьОписаниеОбласти(Области, "ВерхнийКолонтитул",	"ВерхнийКолонтитул");
//		УправлениеПечатью.ДобавитьОписаниеОбласти(Области, "НижнийКолонтитул",	"НижнийКолонтитул");
//		УправлениеПечатью.ДобавитьОписаниеОбласти(Области, "Заголовок",			"Общая");
//	
//		Возврат Области;
//	
//	КонецФункции
//
Процедура ДобавитьОписаниеОбласти(ОбластиМакетаОфисногоДокумента, Знач ИмяОбласти, Знач ТипОбласти) Экспорт
	
	НоваяОбласть = Новый Структура;
	
	НоваяОбласть.Вставить("ИмяОбласти", ИмяОбласти);
	НоваяОбласть.Вставить("ТипОбласти", ТипОбласти);
	
	ОбластиМакетаОфисногоДокумента.Вставить(ИмяОбласти, НоваяОбласть);
	
КонецПроцедуры

// Получает за один вызов всю необходимую информацию для печати: данные объектов по макетам, двоичные
// данные макетов, описание областей макетов.
// Для вызова из клиентских модулей печати форм по макетам офисных документов.
//
// Параметры:
//   ИмяМенеджераПечати - Строка - имя для обращения к менеджеру объекта, например "Документ.<Имя документа>".
//   ИменаМакетов       - Строка - имена макетов, по которым будут формироваться печатные формы.
//   СоставДокументов   - Массив - ссылки на объекты информационной базы (должны быть одного типа).
//
Функция МакетыИДанныеОбъектовДляПечати(Знач ИмяМенеджераПечати, Знач ИменаМакетов, Знач СоставДокументов) Экспорт
	
	МассивИменМакетов = СтрРазделить(ИменаМакетов, ", ", Ложь);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМенеджераПечати);
	МакетыИДанные = МенеджерОбъекта.ПолучитьДанныеПечати(СоставДокументов, МассивИменМакетов);
	МакетыИДанные.Вставить("ЛокальныйКаталогФайловПечати", Неопределено); // Для обратной совместимости.
	
	Возврат МакетыИДанные;
	
КонецФункции

// Возвращает макет печатной формы по полному пути к макету.
//
// Параметры:
//  ПолныйПутьКМакету - Строка - полный путь к макету в формате:
//								"Документ.<ИмяДокумента>.<ИмяМакета>"
//								"Обработка.<ИмяОбработки>.<ИмяМакета>"
//								"ОбщийМакет.<ИмяМакета>".
// Возвращаемое значение:
//   ТабличныйДокумент - для макета типа MXL.
//	 ДвоичныеДанные    - для макетов DOC и ODT.
//
Функция МакетПечатнойФормы(ПолныйПутьКМакету) Экспорт
	
	ЧастиПути = СтрЗаменить(ПолныйПутьКМакету, ".", Символы.ПС);
	
	Если СтрЧислоСтрок(ЧастиПути) = 3 Тогда
		ПутьКМетаданным = СтрПолучитьСтроку(ЧастиПути, 1) + "." + СтрПолучитьСтроку(ЧастиПути, 2);
		ПутьКОбъектуМетаданных = СтрПолучитьСтроку(ЧастиПути, 3);
	ИначеЕсли СтрЧислоСтрок(ЧастиПути) = 2 Тогда
		ПутьКМетаданным = СтрПолучитьСтроку(ЧастиПути, 1);
		ПутьКОбъектуМетаданных = СтрПолучитьСтроку(ЧастиПути, 2);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Макет ""%1"" не найден. Операция прервана.'"), ПолныйПутьКМакету);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ Макет КАК Макет, Использование КАК Использование
					|ИЗ
					|	РегистрСведений.ПользовательскиеМакетыПечати
					|ГДЕ
					|	Объект=&Объект
					|	И	ИмяМакета=&ИмяМакета
					|	И	Использование";
	
	Запрос.Параметры.Вставить("Объект", ПутьКМетаданным);
	Запрос.Параметры.Вставить("ИмяМакета", ПутьКОбъектуМетаданных);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Неопределено;
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Макет.Получить();
	Иначе
		Если СтрЧислоСтрок(ЧастиПути) = 3 Тогда
			Результат = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПутьКМетаданным).ПолучитьМакет(ПутьКОбъектуМетаданных);
		Иначе
			Результат = ПолучитьОбщийМакет(ПутьКОбъектуМетаданных);
		КонецЕсли;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Макет ""%1"" не найден. Операция прервана.'"), ПолныйПутьКМакету);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Возвращает табличный документ по двоичным данным табличного документа.
//
// Параметры:
//  ДвоичныеДанныеДокумента - ДвоичныеДанные - двоичные данные табличного документа.
//
// Возвращаемое значение:
//  ТабличныйДокумент.
//
Функция ТабличныйДокументПоДвоичнымДанным(ДвоичныеДанныеДокумента) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеДокумента.Записать(ИмяВременногоФайла);
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяВременногоФайла);
	
	УстановленБезопасныйРежим = БезопасныйРежим();
	Если ТипЗнч(УстановленБезопасныйРежим) = Тип("Строка") Тогда
		УстановленБезопасныйРежим = Истина;
	КонецЕсли;
	
	Если Не УстановленБезопасныйРежим Тогда
		УдалитьФайлы(ИмяВременногоФайла);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Возвращает двоичные данные для формирования QR кода.
//
// Параметры:
//  QRСтрока         - Строка - данные, которые необходимо разместить в QR-коде.
//
//  УровеньКоррекции - Число - уровень погрешности изображения при котором данный QR-код все еще возможно 100%
//                             распознать.
//                     Параметр должен иметь тип целого и принимать одно из 4 допустимых значений:
//                     0(7% погрешности), 1(15% погрешности), 2(25% погрешности), 3(35% погрешности).
//
//  Размер           - Число - определяет длину стороны выходного изображения в пикселях.
//                     Если минимально возможный размер изображения больше этого параметра - код сформирован не будет.
//
//  ТекстОшибки      - Строка - в этот параметр помещается описание возникшей ошибки (если возникла).
//
// Возвращаемое значение:
//  ДвоичныеДанные  - буфер, содержащий байты PNG-изображения QR-кода.
// 
// Пример:
//  
//  // Выводим на печать QR-код, содержащий в себе информацию зашифрованную по УФЭБС.
//
//  QRСтрока = УправлениеПечатью.ФорматнаяСтрокаУФЭБС(РеквизитыПлатежа);
//  ТекстОшибки = "";
//  ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRСтрока, 0, 190, ТекстОшибки);
//  Если Не ПустаяСтрока(ТекстОшибки)
//      ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
//  КонецЕсли;
//
//  КартинкаQRКода = Новый Картинка(ДанныеQRКода);
//  ОбластьМакета.Рисунки.QRКод.Картинка = КартинкаQRКода;
//
Функция ДанныеQRКода(QRСтрока, УровеньКоррекции, Размер) Экспорт
	
	Отказ = Ложь;
	
	ГенераторQRКода = КомпонентаФормированияQRКода(Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанныеКартинки = ГенераторQRКода.GenerateQRCode(QRСтрока, УровеньКоррекции, Размер);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование QR-кода'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ДвоичныеДанныеКартинки;
	
КонецФункции

// Формирует форматную строку согласно "Унифицированному формату электронных банковских сообщений" для ее отображения в
// виде QR-кода.
//
// Параметры:
// ДанныеДокумента  - Структура - содержит значения полей документа.
//					- Данные документа будут закодированы согласно стандарту 
//						"СТАНДАРТЫ ФИНАНСОВЫХ ОПЕРАЦИЙ Символы двумерного штрихового кода для осуществления платежей физических лиц".
//					- ДанныеДокумента должны содержать информацию в полях, описанных ниже.
//
//					- Обязательные поля структуры.
//		* ТекстПолучателя             - Наименование получателя платежа         - Макс. 160 символов;
//		* НомерСчетаПолучателя        - Номер счета получателя платежа          - Макс. 20 символов;
//		* НаименованиеБанкаПолучателя - Наименование банка получателя платежа   - Макс. 45 символов;
//		* БИКБанкаПолучателя          - БИК                                     - Макс. 9 символов;
//		* СчетБанкаПолучателя         - Номер к/с банка получателя платежа - Макс. 20 символов;
//					- Дополнительные поля структуры.
//		* СуммаЧислом         - Сумма платежа, в рублях                 - Макс. 16 символов.
//		* НазначениеПлатежа   - Наименование платежа (назначение)       - Макс. 210 символов;
//		* ИННПолучателя       - ИНН получателя платежа                  - Макс. 12 символов;
//		* ИННПлательщика      - ИНН плательщика                         - Макс. 12 символов;
//		* СтатусСоставителя   - Статус составителя платежного документа - Макс. 2 символа;
//		* КПППолучателя       - КПП получателя платежа                  - Макс. 9 символов.
//		* КодБК               - КБК                                     - Макс. 20 символов;
//		* КодОКТМО            - Код КодОКТМО                            - Макс. 11 символов;
//		* ПоказательОснования - Основание налогового платежа            - Макс. 2 символа;
//		* ПоказательПериода   - Налоговый период                        - Макс. 10 символов;
//		* ПоказательНомера    - Номер документа                         - Макс. 15 символов;
//		* ПоказательДаты      - Дата документа                          - Макс. 10 символ.
//		* ПоказательТипа      - Тип платежа                             - Макс. 2 символа.
//					- Прочие дополнительные  поля.
//		* ФамилияПлательщика               - Фамилия плательщика.
//		* ИмяПлательщика                   - Имя плательщика.
//		* ОтчествоПлательщика              - Отчество плательщика.
//		* АдресПлательщика                 - Адрес плательщика.
//		* ЛицевойСчетБюджетногоПолучателя  - Лицевой счет бюджетного получателя.
//		* ИндексПлатежногоДокумента        - Индекс платежного документа.
//		* СНИЛС                            - № лицевого счета в системе персонифицированного учета в ПФР - СНИЛС.
//		* НомерДоговора                    - Номер договора.
//		* НомерЛицевогоСчетаПлательщика    - Номер лицевого счета плательщика в организации (в системе учета ПУ).
//		* НомерКвартиры                    - Номер квартиры.
//		* НомерТелефона                    - Номер телефона.
//		* ВидПлательщика                   - Вид ДУЛ плательщика.
//		* НомерПлательщик                  - Номер ДУЛ плательщика.
//		* ФИОРебенка                       - Ф.И.О. ребенка/учащегося.
//		* ДатаРождения                     - Дата рождения.
//		* СрокПлатежа                      - Срок платежа/дата выставления счета.
//		* ПериодОплаты                     - Период оплаты.
//		* ВидПлатежа                       - Вид платежа.
//		* КодУслуги                        - Код услуги/название прибора учета.
//		* НомерПрибораУчета                - Номер прибора учета.
//		* ПоказаниеПрибораУчета            - Показание прибора учета.
//		* НомерИзвещения                   - Номер извещения, начисления, счета.
//		* ДатаИзвещения                    - Дата извещения/начисления/счета/постановления (для ГИБДД).
//		* НомерУчреждения                  - Номер учреждения (образовательного, медицинского).
//		* НомерГруппы                      - Номер группы детсада/класса школы.
//		* ФИОПреподавателя                 - ФИО преподавателя, специалиста, оказывающего услугу.
//		* СуммаСтраховки                   - Сумма страховки/дополнительной услуги/Сумма пени (в копейках).
//		* НомерПостановления               - Номер постановления (для ГИБДД).
//		* НомерИсполнительногоПроизводства - Номер исполнительного производства.
//		* КодВидаПлатежа                   - Код вида платежа (например, для платежей в адрес Росреестра).
//		* ИдентификаторНачисления          - Уникальный идентификатор начисления.
//		* ТехническийКод                   - Технический код, рекомендуемый для заполнения поставщиком услуг.
//                                           Может использоваться принимающей организацией для вызова соответствующей
//                                           обрабатывающей ИТ-системы.
//                                           Перечень значений кода представлен ниже.
//
//	Код назначения			Наименование назначения платежа
//		платежа.
//	
//			01				Мобильная связь, стационарный телефон.
//			02				Коммунальные услуги, ЖКХ.
//			03				ГИБДД, налоги, пошлины, бюджетные платежи.
//			04				Охранные услуги
//			05				Услуги, оказываемые УФМС.
//			06				ПФР
//			07				Погашение кредитов
//			08				Образовательные учреждения.
//			09				Интернет и ТВ
//			10				Электронные деньги
//			11				Отдых и путешествия.
//			12				Инвестиции и страхование.
//			13				Спорт и здоровье
//			14				Благотворительные и общественные организации.
//			15				Прочие услуги.
//
// Возвращаемое значение:
//   Строка - строка данных в формате УФЭБС.
//
Функция ФорматнаяСтрокаУФЭБС(ДанныеДокумента) Экспорт
	
	ТекстОшибки = "";
	СтрокаОбязательныхРеквизитов = СтрокаОбязательныхРеквизитов(ДанныеДокумента, ТекстОшибки);
	
	Если ПустаяСтрока(СтрокаОбязательныхРеквизитов) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , ,);
		Возврат "";
	КонецЕсли;
	
	СтруктураПредставленийИРеквизитов = СтруктураПредставленийИРеквизитов();
	СтрокаДополнительныхРеквизитов = "";
	ДополнительныеРеквизиты = Новый Структура;
	ДобавитьДополнительныеРеквизиты(ДополнительныеРеквизиты);
	
	Для Каждого Элемент Из ДополнительныеРеквизиты Цикл
		
		Если Не ДанныеДокумента.Свойство(Элемент.Ключ) Тогда
			ДанныеДокумента.Вставить(Элемент.Ключ, "");
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДокумента[Элемент.Ключ]) Тогда
			Если Элемент.Ключ = "СуммаЧислом" Тогда
				ЗначениеСтрокой = Формат(ДанныеДокумента.СуммаЧислом * 100, "ЧГ=");
			Иначе
				ЗначениеСтрокой = СтрЗаменить(СокрЛП(Строка(ДанныеДокумента[Элемент.Ключ])), "|", "");
			КонецЕсли;
			СтрокаДополнительныхРеквизитов = СтрокаДополнительныхРеквизитов + СтруктураПредставленийИРеквизитов[Элемент.Ключ]
			                                 + "=" + ЗначениеСтрокой + "|";
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаДополнительныхРеквизитов) Тогда
		ДлинаСтроки = СтрДлина(СтрокаДополнительныхРеквизитов);
		СтрокаДополнительныхРеквизитов = Сред(СтрокаДополнительныхРеквизитов, 1, ДлинаСтроки - 1);
	КонецЕсли;

	ПрочиеДополнительныеРеквизиты = Новый Структура;
	ДобавитьПрочиеДополнительныеРеквизиты(ПрочиеДополнительныеРеквизиты);
	СтрокаПрочихДополнительныхРеквизитов = "";
	
	Для Каждого Элемент Из ПрочиеДополнительныеРеквизиты Цикл
		
		Если Не ДанныеДокумента.Свойство(Элемент.Ключ) Тогда
			ДанныеДокумента.Вставить(Элемент.Ключ, "");
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДокумента[Элемент.Ключ]) Тогда
			ЗначениеСтрокой = СтрЗаменить(СокрЛП(Строка(ДанныеДокумента[Элемент.Ключ])), "|", "");
			СтрокаПрочихДополнительныхРеквизитов = СтрокаПрочихДополнительныхРеквизитов
			                                       + СтруктураПредставленийИРеквизитов[Элемент.Ключ] + "=" + ЗначениеСтрокой
			                                       + "|";
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаПрочихДополнительныхРеквизитов) Тогда
		ДлинаСтроки = СтрДлина(СтрокаПрочихДополнительныхРеквизитов);
		СтрокаПрочихДополнительныхРеквизитов = Сред(СтрокаПрочихДополнительныхРеквизитов, 1, ДлинаСтроки - 1);
	КонецЕсли;
	
	ИтоговаяСтрока = СтрокаОбязательныхРеквизитов
	                 + ?(ПустаяСтрока(СтрокаДополнительныхРеквизитов), "", "|" + СтрокаДополнительныхРеквизитов)
	                 + ?(ПустаяСтрока(СтрокаПрочихДополнительныхРеквизитов), "", "|" + СтрокаПрочихДополнительныхРеквизитов);
	
	Возврат ИтоговаяСтрока;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Объявляет события подсистемы Печать.
//
// Серверные события:
//   ПриОпределенииОбъектовСКомандамиПечати.
//
// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия) Экспорт
	
	// СЕРВЕРНЫЕ СОБЫТИЯ.
	
	// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
	// 
	// Параметры:
	//  СписокОбъектов - Массив - список менеджеров объектов.
	//
	// Синтаксис:
	// Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	//
	// (То же, что
	// УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати).
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.Печать\ПриОпределенииОбъектовСКомандамиПечати");
	
КонецПроцедуры

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"УправлениеПечатью");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам"].Добавить(
		"УправлениеПечатью");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.ТекущиеДела\ПриЗаполненииСпискаТекущихДел"].Добавить(
			"УправлениеПечатью");
	КонецЕсли;
	
КонецПроцедуры

// Скрывает команды печати из подменю "Печать".
Процедура ОтключитьКомандыПечати(СписокОбъектов, СписокКоманд) Экспорт
	НаборЗаписей = РегистрыСведений.НастройкиКомандПечати.СоздатьНаборЗаписей();
	Для Каждого Объект Из СписокОбъектов Цикл
		КомандыПечатиОбъекта = СтандартныеКомандыПечатиОбъекта(Объект);
		Для Каждого ИдентификаторЗаменяемойКоманды Из СписокКоманд Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("Идентификатор", ИдентификаторЗаменяемойКоманды);
			Отбор.Вставить("ФорматСохранения");
			Отбор.Вставить("СразуНаПринтер", Ложь);
			Отбор.Вставить("Отключена", Ложь);
			
			СписокЗаменяемыхКоманд = КомандыПечатиОбъекта.НайтиСтроки(Отбор);
			Для Каждого ЗаменяемаяКоманда Из СписокЗаменяемыхКоманд Цикл
				НаборЗаписей.Отбор.Владелец.Установить(Объект);
				НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(ЗаменяемаяКоманда.УникальныйИдентификатор);
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				Если НаборЗаписей.Количество() = 0 Тогда
					Запись = НаборЗаписей.Добавить();
				Иначе
					Запись = НаборЗаписей[0];
				КонецЕсли;
				Запись.Владелец = Объект;
				Запись.УникальныйИдентификатор = ЗаменяемаяКоманда.УникальныйИдентификатор;
				Запись.Видимость = Ложь;
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Возвращает список поставляемых команд печати объекта.
//
// Параметры:
//  Объект - СправочникСсылка.ИдентификаторыОбъектовМетаданных;
Функция СтандартныеКомандыПечатиОбъекта(Объект) Экспорт
	КомандыПечатиОбъекта = КомандыПечатиОбъекта(
		ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Объект));
		
	ВнешниеКомандыПечати = КомандыПечатиОбъекта.НайтиСтроки(Новый Структура("МенеджерПечати", "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки"));
	Для Каждого КомандаПечати Из ВнешниеКомандыПечати Цикл
		КомандыПечатиОбъекта.Удалить(КомандаПечати);
	КонецЦикла;
	
	Возврат КомандыПечатиОбъекта;
КонецФункции

// Возвращает список объектов метаданных, в которых внедрена подсистема Печать.
//
// Возвращаемое значение:
//  Массив - список из элементов типа ОбъектМетаданных.
Функция ИсточникиКомандПечати() Экспорт
	ОбъектыСКомандамиПечати = Новый Массив;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.Печать\ПриОпределенииОбъектовСКомандамиПечати");
		
	Для Каждого Обработчик Из ОбработчикиСобытия Цикл
		СписокОбъектов = Новый Массив;
		Обработчик.Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыСКомандамиПечати, СписокОбъектов, Истина);
	КонецЦикла;
	
	СписокОбъектов = Новый Массив;
	УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыСКомандамиПечати, СписокОбъектов, Истина);
	
	Результат = Новый Массив;
	Для Каждого ОбъектМенеджер Из ОбъектыСКомандамиПечати Цикл
		Результат.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(ОбъектМенеджер)));
	КонецЦикла;
		
	Возврат Результат;
КонецФункции

// Подготовить коллекцию печатных форм - таблицу значений используемые при формировании печатных форм.
//
Функция ПодготовитьКоллекциюПечатныхФорм(Знач ИменаМакетов) Экспорт
	
	Макеты = Новый ТаблицаЗначений;
	Макеты.Колонки.Добавить("ИмяМакета");
	Макеты.Колонки.Добавить("ИмяВРЕГ");
	Макеты.Колонки.Добавить("СинонимМакета");
	Макеты.Колонки.Добавить("ТабличныйДокумент");
	Макеты.Колонки.Добавить("Экземпляров");
	Макеты.Колонки.Добавить("Картинка");
	Макеты.Колонки.Добавить("ПолныйПутьКМакету");
	Макеты.Колонки.Добавить("ИмяФайлаПечатнойФормы");
	
	Если ТипЗнч(ИменаМакетов) = Тип("Строка") Тогда
		ИменаМакетов = СтрРазделить(ИменаМакетов, ",");
	КонецЕсли;
	
	Для Каждого ИмяМакета Из ИменаМакетов Цикл
		Макет = Макеты.Найти(ИмяМакета, "ИмяМакета");
		Если Макет = Неопределено Тогда
			Макет = Макеты.Добавить();
			Макет.ИмяМакета = ИмяМакета;
			Макет.ИмяВРЕГ = ВРег(ИмяМакета);
			Макет.Экземпляров = 1;
		Иначе
			Макет.Экземпляров = Макет.Экземпляров + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Макеты;
	
КонецФункции

// Подготовить структуру параметров вывода для менеджера объекта формирующего печатные формы.
//
Функция ПодготовитьСтруктуруПараметровВывода() Экспорт
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ДоступнаПечатьПоКомплектно", Ложь); // не используется
	
	СтруктураПараметровПисьма = Новый Структура("Получатель,Тема,Текст", Неопределено, "", "");
	ПараметрыВывода.Вставить("ПараметрыОтправки", СтруктураПараметровПисьма);
	
	Возврат ПараметрыВывода;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.5";
	Обработчик.Процедура = "УправлениеПечатью.СброситьПользовательскиеНастройкиФормыПечатьДокументов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.3.22";
	Обработчик.Процедура = "УправлениеПечатью.ПреобразоватьДвоичныеДанныеПользовательскихМакетовMXLВТабличныеДокументы";
	
КонецПроцедуры

// Заполняет перечень запросов внешних разрешений, которые обязательно должны быть предоставлены
// при создании информационной базы или обновлении программы.
//
// Параметры:
//  ЗапросыРазрешений - Массив - список значений, возвращенных функцией.
//                      РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов().
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	ЗапросыРазрешений.Добавить(
		РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения()));
	
КонецПроцедуры

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если Не ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.ПользовательскиеМакетыПечати)
		Или МодульТекущиеДелаСервер.ДелоОтключено("МакетыПечатныхФорм") Тогда
		Возврат;
	КонецЕсли;
	
	// Если нет раздела администрирование, дело не добавляется.
	Подсистема = Метаданные.Подсистемы.Найти("Администрирование");
	Если Подсистема <> Неопределено
		И Не ПравоДоступа("Просмотр", Подсистема)
		И Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Подсистема) Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиДело = Истина;
	ПровереноНаВерсию = ХранилищеОбщихНастроек.Загрузить("ТекущиеДела", "ПечатныеФормы");
	Если ПровереноНаВерсию <> Неопределено Тогда
		ВерсияМассив  = СтрРазделить(Метаданные.Версия, ".");
		ТекущаяВерсия = ВерсияМассив[0] + ВерсияМассив[1] + ВерсияМассив[2];
		Если ПровереноНаВерсию = ТекущаяВерсия Тогда
			ВывестиДело = Ложь; // Печатные формы проверены на текущей версии.
		КонецЕсли;
	КонецЕсли;
	
	КоличествоПользовательскихМакетов = КоличествоИспользуемыхПользовательскихМакетов();
	
	// Добавление дела.
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор = "МакетыПечатныхФорм";
	Дело.ЕстьДела      = ВывестиДело И КоличествоПользовательскихМакетов > 0;
	Дело.Представление = НСтр("ru = 'Макеты печатных форм'");
	Дело.Количество    = КоличествоПользовательскихМакетов;
	Дело.Форма         = "РегистрСведений.ПользовательскиеМакетыПечати.Форма.ПроверкаПечатныхФорм";
	Дело.Владелец      = "ПроверитьСовместимостьСТекущейВерсией";
	
	// Проверка наличия группы дела. Если группа отсутствует - добавляем.
	ГруппаДела = ТекущиеДела.Найти("ПроверитьСовместимостьСТекущейВерсией", "Идентификатор");
	Если ГруппаДела = Неопределено Тогда
		ГруппаДела = ТекущиеДела.Добавить();
		ГруппаДела.Идентификатор = "ПроверитьСовместимостьСТекущейВерсией";
		ГруппаДела.ЕстьДела      = Дело.ЕстьДела;
		ГруппаДела.Представление = НСтр("ru = 'Проверить совместимость'");
		Если Дело.ЕстьДела Тогда
			ГруппаДела.Количество = Дело.Количество;
		КонецЕсли;
		ГруппаДела.Владелец = Подсистема;
	Иначе
		Если Не ГруппаДела.ЕстьДела Тогда
			ГруппаДела.ЕстьДела = Дело.ЕстьДела;
		КонецЕсли;
		
		Если Дело.ЕстьДела Тогда
			ГруппаДела.Количество = ГруппаДела.Количество + Дело.Количество;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список разрешений для загрузки классификатора банков с сайта РБК.
//
// Возвращаемое значение:
//  Массив.
//
Функция Разрешения()
	
	Разрешения = Новый Массив;
	Разрешения.Добавить(РаботаВБезопасномРежиме.РазрешениеНаИспользованиеВнешнейКомпоненты(
		"ОбщийМакет.КомпонентаПечатиQRКода", НСтр("ru = 'Печать QR кодов.'")));
	
	Возврат Разрешения;
	
КонецФункции

// Сбрасывает пользовательские настройки количества печатных форм и порядка.
Процедура СброситьПользовательскиеНастройкиФормыПечатьДокументов() Экспорт
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить("НастройкиПечатныхФорм", Неопределено, Неопределено);
КонецПроцедуры

// Преобразует пользовательские макеты MXL, хранящиеся в виде двоичных данных в табличные документы.
Процедура ПреобразоватьДвоичныеДанныеПользовательскихМакетовMXLВТабличныеДокументы() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПользовательскиеМакетыПечати.ИмяМакета,
	|	ПользовательскиеМакетыПечати.Объект,
	|	ПользовательскиеМакетыПечати.Макет,
	|	ПользовательскиеМакетыПечати.Использование
	|ИЗ
	|	РегистрСведений.ПользовательскиеМакетыПечати КАК ПользовательскиеМакетыПечати";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ВыборкаМакетов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаМакетов.Следующий() Цикл
		Если СтрНачинаетсяС(ВыборкаМакетов.ИмяМакета, "ПФ_MXL") Тогда
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			
			ДвоичныеДанныеМакета = ВыборкаМакетов.Макет.Получить();
			Если ТипЗнч(ДвоичныеДанныеМакета) <> Тип("ДвоичныеДанные") Тогда
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеМакета.Записать(ИмяВременногоФайла);
			
			ТабличныйДокументПрочитан = Истина;
			ТабличныйДокумент = Новый ТабличныйДокумент;
			Попытка
				ТабличныйДокумент.Прочитать(ИмяВременногоФайла);
			Исключение
				ТабличныйДокументПрочитан = Ложь; // Файл оказался не табличным документом, удаляем.
			КонецПопытки;
			
			Запись = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаМакетов, , "Макет");
			
			Если ТабличныйДокументПрочитан Тогда
				Запись.Макет = Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9));
				Запись.Записать();
			Иначе
				Запись.Удалить();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает ссылку на объект-источник внешней печатной формы.
//
// Параметры:
//  Идентификатор              - Строка - идентификатор формы;
//  ПолноеИмяОбъектаМетаданных - Строка - полное имя объекта метаданных, для которого требуется получить ссылку
//                                        на источник внешней печатной формы.
//
// Возвращаемое значение:
//  Ссылка.
Функция ВнешняяПечатнаяФорма(Идентификатор, ПолноеИмяОбъектаМетаданных)
	ВнешняяПечатнаяФормаСсылка = Неопределено;
	
	ПриПолученииВнешнейПечатнойФормы(Идентификатор, ПолноеИмяОбъектаМетаданных, ВнешняяПечатнаяФормаСсылка);
	
	Возврат ВнешняяПечатнаяФормаСсылка;
КонецФункции

// Сформировать печатные формы.
Функция СформироватьПечатныеФормы(Знач ИмяМенеджераПечати, Знач ИменаМакетов, Знач МассивОбъектов, Знач ПараметрыПечати, 
	ДопустимыеТипыОбъектовПечати = Неопределено) Экспорт
	
	КоллекцияПечатныхФорм = ПодготовитьКоллекциюПечатныхФорм(Новый Массив);
	ОбъектыПечати = Новый СписокЗначений;
	ПараметрыВывода = ПодготовитьСтруктуруПараметровВывода();
	
	Если ТипЗнч(ИменаМакетов) = Тип("Строка") Тогда
		ИменаМакетов = СтрРазделить(ИменаМакетов, ",");
	Иначе // Тип("Массив")
		ИменаМакетов = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИменаМакетов);
	КонецЕсли;
	
	ПрефиксВнешнихПечатныхФорм = "ВнешняяПечатнаяФорма.";
	
	ИсточникВнешнихПечатныхФорм = ИмяМенеджераПечати;
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(МассивОбъектов)) Тогда
		ИсточникВнешнихПечатныхФорм = МассивОбъектов.Метаданные().ПолноеИмя();
	Иначе
		Если МассивОбъектов.Количество() > 0 Тогда
			ИсточникВнешнихПечатныхФорм = МассивОбъектов[0].Метаданные().ПолноеИмя();
		КонецЕсли;
	КонецЕсли;
	ВнешниеПечатныеФормы = СписокПечатныхФормИзВнешнихИсточников(ИсточникВнешнихПечатныхФорм);
	
	// Добавление внешних печатных форм в комплект.
	ДобавленныеВнешниеПечатныеФормы = Новый Массив;
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") 
		И ПараметрыПечати.Свойство("ДополнитьКомплектВнешнимиПечатнымиФормами") 
		И ПараметрыПечати.ДополнитьКомплектВнешнимиПечатнымиФормами Тогда 
		
		ИдентификаторыВнешнихПечатныхФорм = ВнешниеПечатныеФормы.ВыгрузитьЗначения();
		Для Каждого Идентификатор Из ИдентификаторыВнешнихПечатныхФорм Цикл
			ИменаМакетов.Добавить(ПрефиксВнешнихПечатныхФорм + Идентификатор);
			ДобавленныеВнешниеПечатныеФормы.Добавить(ПрефиксВнешнихПечатныхФорм + Идентификатор);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ИмяМакета Из ИменаМакетов Цикл
		// Проверка наличия уже напечатанной формы.
		НайденнаяПечатнаяФорма = КоллекцияПечатныхФорм.Найти(ИмяМакета, "ИмяМакета");
		Если НайденнаяПечатнаяФорма <> Неопределено Тогда
			ПоследняяДобавленнаяПечатнаяФорма = КоллекцияПечатныхФорм[КоллекцияПечатныхФорм.Количество() - 1];
			Если ПоследняяДобавленнаяПечатнаяФорма.ИмяМакета = НайденнаяПечатнаяФорма.ИмяМакета Тогда
				ПоследняяДобавленнаяПечатнаяФорма.Экземпляров = ПоследняяДобавленнаяПечатнаяФорма.Экземпляров + 1;
			Иначе
				КопияПечатнойФормы = КоллекцияПечатныхФорм.Добавить();
				ЗаполнитьЗначенияСвойств(КопияПечатнойФормы, НайденнаяПечатнаяФорма);
				КопияПечатнойФормы.Экземпляров = 1;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// Поиск указания дополнительного менеджера печати в имени печатной формы.
		ИмяДополнительногоМенеджераПечати = "";
		Идентификатор = ИмяМакета;
		ВнешняяПечатнаяФорма = Неопределено;
		Если СтрНайти(Идентификатор, ПрефиксВнешнихПечатныхФорм) > 0 Тогда // это внешняя печатная форма
			Идентификатор = Сред(Идентификатор, СтрДлина(ПрефиксВнешнихПечатныхФорм) + 1);
			ВнешняяПечатнаяФорма = ВнешниеПечатныеФормы.НайтиПоЗначению(Идентификатор);
		ИначеЕсли СтрНайти(Идентификатор, ".") > 0 Тогда // Указан дополнительный менеджер печати.
			Позиция = СтрНайти(Идентификатор, ".", НаправлениеПоиска.СКонца);
			ИмяДополнительногоМенеджераПечати = Лев(Идентификатор, Позиция - 1);
			Идентификатор = Сред(Идентификатор, Позиция + 1);
		КонецЕсли;
		
		// Определение внутреннего менеджера печати.
		ИспользуемыйМенеджерПечати = ИмяДополнительногоМенеджераПечати;
		Если ПустаяСтрока(ИспользуемыйМенеджерПечати) Тогда
			ИспользуемыйМенеджерПечати = ИмяМенеджераПечати;
		КонецЕсли;
		
		// Проверка соответствия печатаемых объектов выбранной печатной форме.
		ОжидаемыйТипОбъекта = Неопределено;
		
		ОбъектыСоответствующиеПечатнойФорме = МассивОбъектов;
		Если ДопустимыеТипыОбъектовПечати <> Неопределено И ДопустимыеТипыОбъектовПечати.Количество() > 0 Тогда
			Если ТипЗнч(МассивОбъектов) = Тип("Массив") Тогда
				ОбъектыСоответствующиеПечатнойФорме = Новый Массив;
				Для Каждого Объект Из МассивОбъектов Цикл
					Если ДопустимыеТипыОбъектовПечати.Найти(ТипЗнч(Объект)) = Неопределено Тогда
						СообщитьПечатнаяФормаНедоступна(Объект);
					Иначе
						ОбъектыСоответствующиеПечатнойФорме.Добавить(Объект);
					КонецЕсли;
				КонецЦикла;
				Если ОбъектыСоответствующиеПечатнойФорме.Количество() = 0 Тогда
					ОбъектыСоответствующиеПечатнойФорме = Неопределено;
				КонецЕсли;
			ИначеЕсли ОбщегоНазначения.ЗначениеСсылочногоТипа(МассивОбъектов) Тогда // передан не массив
				Если ДопустимыеТипыОбъектовПечати.Найти(ТипЗнч(МассивОбъектов)) = Неопределено Тогда
					СообщитьПечатнаяФормаНедоступна(МассивОбъектов);
					ОбъектыСоответствующиеПечатнойФорме = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ВременнаяКоллекцияДляОднойПечатнойФормы = ПодготовитьКоллекциюПечатныхФорм(Идентификатор);
		
		// Вызов процедуры Печать из менеджера печати.
		Если ВнешняяПечатнаяФорма <> Неопределено Тогда
			// Менеджер печати во внешней печатной форме.
			МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
			МодульДополнительныеОтчетыИОбработки.ПечатьПоВнешнемуИсточнику(
				ВнешняяПечатнаяФорма(ВнешняяПечатнаяФорма.Значение, ИсточникВнешнихПечатныхФорм),
				Новый Структура("ИдентификаторКоманды, ОбъектыНазначения", ВнешняяПечатнаяФорма.Значение, ОбъектыСоответствующиеПечатнойФорме),
				ВременнаяКоллекцияДляОднойПечатнойФормы,
				ОбъектыПечати,
				ПараметрыВывода);
		Иначе
			Если Не ПустаяСтрока(ИспользуемыйМенеджерПечати) Тогда
				МенеджерПечати = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИспользуемыйМенеджерПечати);
				// Печать внутренней печатной формы.
				Если ОбъектыСоответствующиеПечатнойФорме <> Неопределено Тогда
					МенеджерПечати.Печать(ОбъектыСоответствующиеПечатнойФорме, ПараметрыПечати, ВременнаяКоллекцияДляОднойПечатнойФормы, 
						ОбъектыПечати, ПараметрыВывода);
				Иначе
					ВременнаяКоллекцияДляОднойПечатнойФормы[0].ТабличныйДокумент = Новый ТабличныйДокумент;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Проверка корректности заполнения коллекции печатных форм, полученной из менеджера печати.
		Для Каждого ОписаниеПечатнойФормы Из ВременнаяКоллекцияДляОднойПечатнойФормы Цикл
			ОбщегоНазначенияКлиентСервер.Проверить(
				ТипЗнч(ОписаниеПечатнойФормы.Экземпляров) = Тип("Число") И ОписаниеПечатнойФормы.Экземпляров > 0,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не задано количество экземпляров для печатной формы ""%1"".'"),
				?(ПустаяСтрока(ОписаниеПечатнойФормы.СинонимМакета), ОписаниеПечатнойФормы.ИмяМакета, ОписаниеПечатнойФормы.СинонимМакета)));
		КонецЦикла;
				
		// обновление коллекции
		Отказ = ВременнаяКоллекцияДляОднойПечатнойФормы.Количество() = 0;
		// Предполагается одна печатная форма, но для обратной совместимости принимается вся коллекция.
		Для Каждого ВременнаяПечатнаяФорма Из ВременнаяКоллекцияДляОднойПечатнойФормы Цикл 
			Если ВременнаяПечатнаяФорма.ТабличныйДокумент <> Неопределено Тогда
				ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
				ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ВременнаяПечатнаяФорма);
				Если ВременнаяКоллекцияДляОднойПечатнойФормы.Количество() = 1 Тогда
					ПечатнаяФорма.ИмяМакета = ИмяМакета;
					ПечатнаяФорма.ИмяВРЕГ = ВРег(ИмяМакета);
				КонецЕсли;
			Иначе
				// Возникла ошибка при формировании печатной формы.
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Вызов исключения при возникновении ошибки.
		Если Отказ Тогда
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'При формировании печатной формы ""%1"" возникла ошибка. Обратитесь к администратору.'"), ИмяМакета);
			ВызватьИсключение ТекстСообщенияОбОшибке;
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеПечатьюПереопределяемый.ПриПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
	// Установка количества экземпляров табличным документам.
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		Если ДобавленныеВнешниеПечатныеФормы.Найти(ПечатнаяФорма.ИмяМакета) <> Неопределено Тогда
			ПечатнаяФорма.Экземпляров = 0; // Для автоматически добавленных форм.
		КонецЕсли;
		Если ПечатнаяФорма.ТабличныйДокумент <> Неопределено Тогда
			ПечатнаяФорма.ТабличныйДокумент.КоличествоЭкземпляров = ПечатнаяФорма.Экземпляров;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("КоллекцияПечатныхФорм", КоллекцияПечатныхФорм);
	Результат.Вставить("ОбъектыПечати", ОбъектыПечати);
	Результат.Вставить("ПараметрыВывода", ПараметрыВывода);
	Возврат Результат;
	
КонецФункции

// Сформировать печатные формы для непосредственного вывода на принтер.
//
Функция СформироватьПечатныеФормыДляБыстройПечати(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТабличныеДокументы");
	Результат.Вставить("ОбъектыПечати");
	Результат.Вставить("ПараметрыВывода");
	Результат.Вставить("Отказ", Ложь);
		
	Если НЕ ПравоДоступа("Вывод", Метаданные) Тогда
		Результат.Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ПечатныеФормы = СформироватьПечатныеФормы(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати);
		
	ТабличныеДокументы = Новый СписокЗначений;
	Для Каждого ПечатнаяФорма Из ПечатныеФормы.КоллекцияПечатныхФорм Цикл
		Если (ТипЗнч(ПечатнаяФорма.ТабличныйДокумент) = Тип("ТабличныйДокумент")) И (ПечатнаяФорма.ТабличныйДокумент.ВысотаТаблицы <> 0) Тогда
			ТабличныеДокументы.Добавить(ПечатнаяФорма.ТабличныйДокумент, ПечатнаяФорма.СинонимМакета);
		КонецЕсли;
	КонецЦикла;
	
	Результат.ТабличныеДокументы = ТабличныеДокументы;
	Результат.ОбъектыПечати      = ПечатныеФормы.ОбъектыПечати;
	Результат.ПараметрыВывода    = ПечатныеФормы.ПараметрыВывода;
	Возврат Результат;
	
КонецФункции

// Сформировать печатные формы для непосредственного вывода на принтер
// в серверном режиме в обычном приложении.
//
Функция СформироватьПечатныеФормыДляБыстройПечатиОбычноеПриложение(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Адрес");
	Результат.Вставить("ОбъектыПечати");
	Результат.Вставить("ПараметрыВывода");
	Результат.Вставить("Отказ", Ложь);
	
	ПечатныеФормы = СформироватьПечатныеФормыДляБыстройПечати(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати);
	
	Если ПечатныеФормы.Отказ Тогда
		Результат.Отказ = ПечатныеФормы.Отказ;
		Возврат Результат;
	КонецЕсли;
	
	Результат.ОбъектыПечати = Новый Соответствие;
	
	Для Каждого ОбъектПечати Из ПечатныеФормы.ОбъектыПечати Цикл
		Результат.ОбъектыПечати.Вставить(ОбъектПечати.Представление, ОбъектПечати.Значение);
	КонецЦикла;
	
	Результат.Адрес = ПоместитьВоВременноеХранилище(ПечатныеФормы.ТабличныеДокументы);
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу возможных форматов для сохранения табличного документа.
//
// Возвращаемое значение
//  ТаблицаЗначений:
//                   ТипФайлаТабличногоДокумента - ТипФайлаТабличногоДокумента                 - значение в платформе,
//                                                                                               соответствующее
//                                                                                               формату;
//                   Ссылка                      - ПеречислениеСсылка.ФорматыСохраненияОтчетов - ссылка на метаданные,
//                                                                                               где хранится
//                                                                                               представление;
//                   Представление               - Строка -                                    - представление типа
//                                                          файла (заполняется из перечисления);
//                   Расширение                  - Строка -                                    - тип файла для
//                                                          операционной системы;
//                   Картинка                    - Картинка                                    - значок формата.
//
// Примечание: таблица форматов может быть переопределена в процедуре
// УправлениеПечатьюПереопределяемый.ПриЗаполненииНастроекФорматовСохранения().
//
Функция НастройкиФорматовСохраненияТабличногоДокумента() Экспорт
	
	ТаблицаФорматов = Новый ТаблицаЗначений;
	
	ТаблицаФорматов.Колонки.Добавить("ТипФайлаТабличногоДокумента", Новый ОписаниеТипов("ТипФайлаТабличногоДокумента"));
	ТаблицаФорматов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ПеречислениеСсылка.ФорматыСохраненияОтчетов"));
	ТаблицаФорматов.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаФорматов.Колонки.Добавить("Расширение", Новый ОписаниеТипов("Строка"));
	ТаблицаФорматов.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));

	// Документ PDF (.pdf)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.PDF;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.PDF;
	НовыйФормат.Расширение = "pdf";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматPDF;
	
	// Лист Microsoft Excel 2007 (.xlsx)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.XLSX;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.XLSX;
	НовыйФормат.Расширение = "xlsx";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматExcel2007;

	// Лист Microsoft Excel 97-2003 (.xls)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.XLS;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.XLS;
	НовыйФормат.Расширение = "xls";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматExcel;

	// Электронная таблица OpenDocument (.ods).
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.ODS;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.ODS;
	НовыйФормат.Расширение = "ods";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматOpenOfficeCalc;
	
	// Табличный документ (.mxl)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.MXL;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.MXL;
	НовыйФормат.Расширение = "mxl";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматMXL;

	// Документ Word 2007 (.docx)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.DOCX;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.DOCX;
	НовыйФормат.Расширение = "docx";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматWord2007;
	
	// Веб-страница (.html)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.HTML5;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.HTML;
	НовыйФормат.Расширение = "html";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматHTML;
	
	// Текстовый документ UTF-8 (.txt).
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.TXT;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.TXT;
	НовыйФормат.Расширение = "txt";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматTXT;
	
	// Текстовый документ ANSI (.txt).
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.ANSITXT;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.ANSITXT;
	НовыйФормат.Расширение = "txt";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматTXT;

	// Дополнительные форматы / изменение списка текущих.
	УправлениеПечатьюПереопределяемый.ПриЗаполненииНастроекФорматовСохраненияТабличногоДокумента(ТаблицаФорматов);
	
	Для Каждого ФорматСохранения Из ТаблицаФорматов Цикл
		ФорматСохранения.Представление = Строка(ФорматСохранения.Ссылка);
	КонецЦикла;
		
	Возврат ТаблицаФорматов;
	
КонецФункции

// Создает подменю "Печать" на форме и добавляет в него команды печати.
// Если команда печати одна, то вместо подменю добавляется кнопка с названием печатной формы.
Процедура ДобавитьКомандыПечати(Форма, КомандыПечати, Знач МестоРазмещенияКоманд = Неопределено)
	
	Если МестоРазмещенияКоманд = Неопределено Тогда
		МестоРазмещенияКоманд = Форма.КоманднаяПанель;
	КонецЕсли;
	
	ОднаКомандаПечати = КомандыПечати.Количество() = 1;
	Если МестоРазмещенияКоманд.Вид = ВидГруппыФормы.Подменю Тогда
		Если ОднаКомандаПечати Тогда
			МестоРазмещенияКоманд.Вид = ВидГруппыФормы.ГруппаКнопок;
		КонецЕсли;
	Иначе
		Если Не ОднаКомандаПечати Тогда
			ПодменюПечать = Форма.Элементы.Добавить(МестоРазмещенияКоманд.Имя + "ПодменюПечать", Тип("ГруппаФормы"), МестоРазмещенияКоманд);
			ПодменюПечать.Вид = ВидГруппыФормы.Подменю;
			ПодменюПечать.Заголовок = НСтр("ru = 'Печать'");
			ПодменюПечать.Картинка = БиблиотекаКартинок.Печать;
			
			МестоРазмещенияКоманд = ПодменюПечать;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ОписаниеКомандыПечати Из КомандыПечати Цикл
		НомерКоманды = ОписаниеКомандыПечати.Владелец().Индекс(ОписаниеКомандыПечати);
		ИмяКоманды = МестоРазмещенияКоманд.Имя + "КомандаПечати" + НомерКоманды;
		
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуПечати";
		КомандаФормы.Заголовок = ОписаниеКомандыПечати.Представление;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		
		Если ЗначениеЗаполнено(ОписаниеКомандыПечати.Картинка) Тогда
			КомандаФормы.Картинка = ОписаниеКомандыПечати.Картинка;
		ИначеЕсли ОднаКомандаПечати Тогда
			КомандаФормы.Картинка = БиблиотекаКартинок.Печать;
		КонецЕсли;
		
		ОписаниеКомандыПечати.ИмяКомандыНаФорме = ИмяКоманды;
		
		НовыйЭлемент = Форма.Элементы.Добавить(МестоРазмещенияКоманд.Имя + ИмяКоманды, Тип("КнопкаФормы"), МестоРазмещенияКоманд);
		НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает описание команды по имени элемента формы.
// 
// Возвращаемое значение
//  Структура - строка таблицы из функции КомандыПечатиФормы, преобразованная в структуру.
Функция ОписаниеКомандыПечати(ИмяКоманды, АдресКомандПечатиВоВременномХранилище) Экспорт
	
	КомандыПечати = ПолучитьИзВременногоХранилища(АдресКомандПечатиВоВременномХранилище);
	Для Каждого КомандаПечати Из КомандыПечати.НайтиСтроки(Новый Структура("ИмяКомандыНаФорме", ИмяКоманды)) Цикл
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(КомандаПечати);
	КонецЦикла;
	
КонецФункции

// Фильтрует список команд печати в соответствии с установленными функциональными опциями.
Процедура ОпределитьВидимостьКомандПечатиПоФункциональнымОпциям(КомандыПечати, Форма = Неопределено)
	Для НомерКоманды = -КомандыПечати.Количество() + 1 По 0 Цикл
		ОписаниеКомандыПечати = КомандыПечати[-НомерКоманды];
		ФункциональныеОпцииКомандыПечати = СтрРазделить(ОписаниеКомандыПечати.ФункциональныеОпции, ", ", Ложь);
		ВидимостьКоманды = ФункциональныеОпцииКомандыПечати.Количество() = 0;
		Для Каждого ФункциональнаяОпция Из ФункциональныеОпцииКомандыПечати Цикл
			Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
				ВидимостьКоманды = ВидимостьКоманды Или Форма.ПолучитьФункциональнуюОпциюФормы(ФункциональнаяОпция);
			Иначе
				ВидимостьКоманды = ВидимостьКоманды Или ПолучитьФункциональнуюОпцию(ФункциональнаяОпция);
			КонецЕсли;
			
			Если ВидимостьКоманды Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ОписаниеКомандыПечати.СкрытаФункциональнымиОпциями = Не ВидимостьКоманды;
	КонецЦикла;
КонецПроцедуры

// Сохраняет пользовательский макет печати в информационной базе.
Процедура ЗаписатьМакет(ИмяОбъектаМетаданныхМакета, АдресМакетаВоВременномХранилище) Экспорт
	Макет = ПолучитьИзВременногоХранилища(АдресМакетаВоВременномХранилище);
	
	ЧастиИмени = СтрРазделить(ИмяОбъектаМетаданныхМакета, ".");
	ИмяМакета = ЧастиИмени[ЧастиИмени.ВГраница()];
	
	ИмяВладельца = "";
	Для НомерЧасти = 0 По ЧастиИмени.ВГраница()-1 Цикл
		Если Не ПустаяСтрока(ИмяВладельца) Тогда
			ИмяВладельца = ИмяВладельца + ".";
		КонецЕсли;
		ИмяВладельца = ИмяВладельца + ЧастиИмени[НомерЧасти];
	КонецЦикла;
	
	Запись = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьМенеджерЗаписи();
	Запись.Объект = ИмяВладельца;
	Запись.ИмяМакета = ИмяМакета;
	Запись.Использование = Истина;
	Запись.Макет = Новый ХранилищеЗначения(Макет, Новый СжатиеДанных(9));
	Запись.Записать();
КонецПроцедуры

Функция СтрокаОбязательныхРеквизитов(ДанныеДокумента, ТекстСообщения)
	
	ОбязательныеРеквизиты = Новый Структура();
	СтруктураПредставленийИРеквизитов = СтруктураПредставленийИРеквизитов();
	ДобавитьОбязательныеРеквизиты(ОбязательныеРеквизиты);
	
	Если Не ЗначениеЗаполнено(ДанныеДокумента.СчетБанкаПолучателя) Тогда
		ДанныеДокумента.СчетБанкаПолучателя = "0";
	КонецЕсли;
	
	СлужебныеДанные = "ST00012";
	ОбязательныеДанные = "";
	
	Для Каждого Элемент Из ОбязательныеРеквизиты Цикл
		Если Не ЗначениеЗаполнено(ДанныеДокумента[Элемент.Ключ]) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен обязательный реквизит: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Элемент.Ключ);
			Возврат "";
		КонецЕсли;
		
		ЗначениеСтрокой = СтрЗаменить(СокрЛП(Строка(ДанныеДокумента[Элемент.Ключ])), "|", "");
		
		ОбязательныеДанные = ОбязательныеДанные + "|" + СтруктураПредставленийИРеквизитов[Элемент.Ключ] + "="
		                     + ЗначениеСтрокой;
		
	КонецЦикла;
	
	Если СтрДлина(ОбязательныеДанные) > 300 Тогда
		Шаблон = НСтр("ru = 'Невозможно создать QR-код для документа %1
			|Строка обязательных реквизитов должна быть меньше 300 символов:
			|""%2""'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ДанныеДокумента.Ссылка, ОбязательныеДанные);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат "";
	КонецЕсли;
	
	Возврат СлужебныеДанные + ОбязательныеДанные;
	
КонецФункции

Функция СтруктураПредставленийИРеквизитов()
	
	СтруктураВозврата = Новый Структура();
	
	СтруктураВозврата.Вставить("ТекстПолучателя",             "Name");
	СтруктураВозврата.Вставить("НомерСчетаПолучателя",        "PersonalAcc");
	СтруктураВозврата.Вставить("НаименованиеБанкаПолучателя", "BankName");
	СтруктураВозврата.Вставить("БИКБанкаПолучателя",          "BIC");
	СтруктураВозврата.Вставить("СчетБанкаПолучателя",         "CorrespAcc");
	
	СтруктураВозврата.Вставить("СуммаЧислом",         "Sum");
	СтруктураВозврата.Вставить("НазначениеПлатежа",   "Purpose");
	СтруктураВозврата.Вставить("ИННПолучателя",       "PayeeINN");
	СтруктураВозврата.Вставить("ИННПлательщика",      "PayerINN");
	СтруктураВозврата.Вставить("СтатусСоставителя",   "DrawerStatus");
	СтруктураВозврата.Вставить("КПППолучателя",       "KPP");
	СтруктураВозврата.Вставить("КодБК",               "CBC");
	СтруктураВозврата.Вставить("КодОКТМО",            "OKTMO");
	СтруктураВозврата.Вставить("ПоказательОснования", "PaytReason");
	СтруктураВозврата.Вставить("ПоказательПериода",   "TaxPeriod");
	СтруктураВозврата.Вставить("ПоказательНомера",    "DocNo");
	СтруктураВозврата.Вставить("ПоказательДаты",      "DocDate");
	СтруктураВозврата.Вставить("ПоказательТипа",      "TaxPaytKind");
	
	СтруктураВозврата.Вставить("ФамилияПлательщика",               "lastName");
	СтруктураВозврата.Вставить("ИмяПлательщика",                   "firstName");
	СтруктураВозврата.Вставить("ОтчествоПлательщика",              "middleName");
	СтруктураВозврата.Вставить("АдресПлательщика",                 "payerAddress");
	СтруктураВозврата.Вставить("ЛицевойСчетБюджетногоПолучателя",  "personalAccount");
	СтруктураВозврата.Вставить("ИндексПлатежногоДокумента",        "docIdx");
	СтруктураВозврата.Вставить("СНИЛС",                            "pensAcc");
	СтруктураВозврата.Вставить("НомерДоговора",                    "contract");
	СтруктураВозврата.Вставить("НомерЛицевогоСчетаПлательщика",    "persAcc");
	СтруктураВозврата.Вставить("НомерКвартиры",                    "flat");
	СтруктураВозврата.Вставить("НомерТелефона",                    "phone");
	СтруктураВозврата.Вставить("ВидПлательщика",                   "payerIdType");
	СтруктураВозврата.Вставить("НомерПлательщика",                 "payerIdNum");
	СтруктураВозврата.Вставить("ФИОРебенка",                       "childFio");
	СтруктураВозврата.Вставить("ДатаРождения",                     "birthDate");
	СтруктураВозврата.Вставить("СрокПлатежа",                      "paymTerm");
	СтруктураВозврата.Вставить("ПериодОплаты",                     "paymPeriod");
	СтруктураВозврата.Вставить("ВидПлатежа",                       "category");
	СтруктураВозврата.Вставить("КодУслуги",                        "serviceName");
	СтруктураВозврата.Вставить("НомерПрибораУчета",                "counterId");
	СтруктураВозврата.Вставить("ПоказаниеПрибораУчета",            "counterVal");
	СтруктураВозврата.Вставить("НомерИзвещения",                   "quittId");
	СтруктураВозврата.Вставить("ДатаИзвещения",                    "quittDate");
	СтруктураВозврата.Вставить("НомерУчреждения",                  "instNum");
	СтруктураВозврата.Вставить("НомерГруппы",                      "classNum");
	СтруктураВозврата.Вставить("ФИОПреподавателя",                 "specFio");
	СтруктураВозврата.Вставить("СуммаСтраховки",                   "addAmount");
	СтруктураВозврата.Вставить("НомерПостановления",               "ruleId");
	СтруктураВозврата.Вставить("НомерИсполнительногоПроизводства", "execId");
	СтруктураВозврата.Вставить("КодВидаПлатежа",                   "regType");
	СтруктураВозврата.Вставить("ИдентификаторНачисления",          "uin");
	СтруктураВозврата.Вставить("ТехническийКод",                   "TechCode");
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция КомпонентаФормированияQRКода(Отказ)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Платформа = СистемнаяИнформация.ТипПлатформы;
	
	ТекстОшибки = НСтр("ru = 'Не удалось подключить внешнюю компоненту для генерации QR-кода'");
	
	Попытка
		Если ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиQRКода", "QR") Тогда
			QRCodeGenerator = Новый("AddIn.QR.QRCodeExtension");
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , Отказ);
		КонецЕсли
	Исключение
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки, , , , Отказ);
	КонецПопытки;
	
	Возврат QRCodeGenerator;
	
КонецФункции

Процедура ДобавитьОбязательныеРеквизиты(СтруктураДанных)
	
	СтруктураДанных.Вставить("ТекстПолучателя");
	СтруктураДанных.Вставить("НомерСчетаПолучателя");
	СтруктураДанных.Вставить("НаименованиеБанкаПолучателя");
	СтруктураДанных.Вставить("БИКБанкаПолучателя");
	СтруктураДанных.Вставить("СчетБанкаПолучателя");
	
КонецПроцедуры

Процедура ДобавитьДополнительныеРеквизиты(СтруктураДанных)
	
	СтруктураДанных.Вставить("СуммаЧислом");
	СтруктураДанных.Вставить("НазначениеПлатежа");
	СтруктураДанных.Вставить("ИННПолучателя");
	СтруктураДанных.Вставить("ИННПлательщика");
	СтруктураДанных.Вставить("СтатусСоставителя");
	СтруктураДанных.Вставить("КПППолучателя");
	СтруктураДанных.Вставить("КодБК");
	СтруктураДанных.Вставить("КодОКТМО");
	СтруктураДанных.Вставить("ПоказательОснования");
	СтруктураДанных.Вставить("ПоказательПериода");
	СтруктураДанных.Вставить("ПоказательНомера");
	СтруктураДанных.Вставить("ПоказательДаты");
	СтруктураДанных.Вставить("ПоказательТипа");
	
КонецПроцедуры

Процедура ДобавитьПрочиеДополнительныеРеквизиты(СтруктураДанных)
	
	СтруктураДанных.Вставить("ФамилияПлательщика");
	СтруктураДанных.Вставить("ИмяПлательщика");
	СтруктураДанных.Вставить("ОтчествоПлательщика");
	СтруктураДанных.Вставить("АдресПлательщика");
	СтруктураДанных.Вставить("ЛицевойСчетБюджетногоПолучателя");
	СтруктураДанных.Вставить("ИндексПлатежногоДокумента");
	СтруктураДанных.Вставить("СНИЛС");
	СтруктураДанных.Вставить("НомерДоговора");
	СтруктураДанных.Вставить("НомерЛицевогоСчетаПлательщика");
	СтруктураДанных.Вставить("НомерКвартиры");
	СтруктураДанных.Вставить("НомерТелефона");
	СтруктураДанных.Вставить("ВидПлательщика");
	СтруктураДанных.Вставить("НомерПлательщика");
	СтруктураДанных.Вставить("ФИОРебенка");
	СтруктураДанных.Вставить("ДатаРождения");
	СтруктураДанных.Вставить("СрокПлатежа");
	СтруктураДанных.Вставить("ПериодОплаты");
	СтруктураДанных.Вставить("ВидПлатежа");
	СтруктураДанных.Вставить("КодУслуги");
	СтруктураДанных.Вставить("НомерПрибораУчета");
	СтруктураДанных.Вставить("ПоказаниеПрибораУчета");
	СтруктураДанных.Вставить("НомерИзвещения");
	СтруктураДанных.Вставить("ДатаИзвещения");
	СтруктураДанных.Вставить("НомерУчреждения");
	СтруктураДанных.Вставить("НомерГруппы");
	СтруктураДанных.Вставить("ФИОПреподавателя");
	СтруктураДанных.Вставить("СуммаСтраховки");
	СтруктураДанных.Вставить("НомерПостановления");
	СтруктураДанных.Вставить("НомерИсполнительногоПроизводства");
	СтруктураДанных.Вставить("КодВидаПлатежа");
	СтруктураДанных.Вставить("ИдентификаторНачисления");
	СтруктураДанных.Вставить("ТехническийКод");
	
КонецПроцедуры

// Возвращает истину, если есть право проведения хотя бы для одного документа.
Функция ДоступноПравоПроведения(СписокДокументов) Экспорт
	ТипыДокументов = Новый Массив;
	Для Каждого Документ Из СписокДокументов Цикл
		ТипДокумента = ТипЗнч(Документ);
		Если ТипыДокументов.Найти(ТипДокумента) <> Неопределено Тогда
			Продолжить;
		Иначе
			ТипыДокументов.Добавить(ТипДокумента);
		КонецЕсли;
		Если ПравоДоступа("Проведение", Метаданные.НайтиПоТипу(ТипДокумента)) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Процедура СообщитьПечатнаяФормаНедоступна(Объект)
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Печать %1 не выполнена: выбранная печатная форма недоступна.'"), Объект);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект);
КонецПроцедуры

// Формирует пакет документов для отправки на принтер.
Функция ПакетДокументов(ТабличныеДокументы, ОбъектыПечати, ПечататьКомплектами, КоличествоЭкземпляров = 1) Экспорт
	
	ПакетОтображаемыхДокументов = Новый ПакетОтображаемыхДокументов;
	КоллекцияПечатныхФорм = ТабличныеДокументы.ВыгрузитьЗначения();
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		ПечататьКомплектами = ПечататьКомплектами Или ПечатнаяФорма.ДвусторонняяПечать <> ТипДвустороннейПечати.Нет;
	КонецЦикла;
	
	Если ПечататьКомплектами И ОбъектыПечати.Количество() > 0 Тогда 
		Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
			ИмяОбласти = ОбъектПечати.Представление;
			Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
				Область = ПечатнаяФорма.Области.Найти(ИмяОбласти);
				Если Область = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТабличныйДокумент = ПечатнаяФорма.ПолучитьОбласть(Область.Верх, , Область.Низ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ПечатнаяФорма, "АвтоМасштаб,Вывод,ВысотаСтраницы,ДвусторонняяПечать,Защита,ИмяПринтера,КодЯзыкаМакета,КоличествоЭкземпляров,МасштабПечати,ОриентацияСтраницы,ПолеСверху,ПолеСлева,ПолеСнизу,ПолеСправа,РазборПоКопиям,РазмерКолонтитулаСверху,РазмерКолонтитулаСнизу,РазмерСтраницы,ТочностьПечати,ЧерноБелаяПечать,ШиринаСтраницы,ЭкземпляровНаСтранице");
				
				ПакетОтображаемыхДокументов.Состав.Добавить().Данные = ПакетСОднимТабличнымДокументом(ТабличныйДокумент);
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
			ТабличныйДокумент = Новый ТабличныйДокумент;
			ТабличныйДокумент.Вывести(ПечатнаяФорма);
			ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ПечатнаяФорма, "АвтоМасштаб,Вывод,ВысотаСтраницы,ДвусторонняяПечать,Защита,ИмяПринтера,КодЯзыкаМакета,КоличествоЭкземпляров,МасштабПечати,ОриентацияСтраницы,ПолеСверху,ПолеСлева,ПолеСнизу,ПолеСправа,РазборПоКопиям,РазмерКолонтитулаСверху,РазмерКолонтитулаСнизу,РазмерСтраницы,ТочностьПечати,ЧерноБелаяПечать,ШиринаСтраницы,ЭкземпляровНаСтранице");
			ПакетОтображаемыхДокументов.Состав.Добавить().Данные = ПакетСОднимТабличнымДокументом(ТабличныйДокумент);
		КонецЦикла;
	КонецЕсли;
	
	ПакетКомплектов = Новый ПакетОтображаемыхДокументов;
	Для Номер = 1 По КоличествоЭкземпляров Цикл
		ПакетКомплектов.Состав.Добавить().Данные = ПакетОтображаемыхДокументов;
	КонецЦикла;
	
	Возврат ПакетКомплектов;
	
КонецФункции

// Заворачивает табличный документ в пакет отображаемых документов.
Функция ПакетСОднимТабличнымДокументом(ТабличныйДокумент)
	АдресТабличногоДокументаВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабличныйДокумент);
	ПакетСОднимДокументом = Новый ПакетОтображаемыхДокументов;
	ПакетСОднимДокументом.Состав.Добавить(АдресТабличногоДокументаВоВременномХранилище);
	ЗаполнитьЗначенияСвойств(ПакетСОднимДокументом, ТабличныйДокумент, "Вывод, ДвусторонняяПечать, ИмяПринтера, КоличествоЭкземпляров, ТочностьПечати");
	Если ТабличныйДокумент.РазборПоКопиям <> Неопределено Тогда
		ПакетСОднимДокументом.РазборПоКопиям = ТабличныйДокумент.РазборПоКопиям;
	КонецЕсли;
	Возврат ПакетСОднимДокументом;
КонецФункции

// Собирает список команд печати из нескольких объектов.
Процедура ЗаполнитьКомандыПечатиДляСпискаОбъектов(СписокОбъектов, КомандыПечати)
	Для Каждого ОбъектМетаданных Из СписокОбъектов Цикл
		ИсточникиКомандПечати = ИсточникиКомандПечати();
		Если ИсточникиКомандПечати.Найти(ОбъектМетаданных) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КомандыПечатиФормы = КомандыПечатиОбъекта(ОбъектМетаданных);
		
		Для Каждого ДобавляемаяКомандаПечати Из КомандыПечатиФормы Цикл
			// Поиск аналогичной ранее добавленной команды печати.
			НайденныеКоманды = Новый Массив;
			Для Каждого ИмеющаясяКомандаПечати Из КомандыПечати Цикл
				Если УникальныйИдентификаторКомандыПечати(ИмеющаясяКомандаПечати) = ДобавляемаяКомандаПечати.УникальныйИдентификатор Тогда
					НайденныеКоманды.Добавить(ИмеющаясяКомандаПечати);
				КонецЕсли;
			КонецЦикла;
			
			Если НайденныеКоманды.Количество() > 0 Тогда
				Для Каждого ИмеющаясяКомандаПечати Из НайденныеКоманды Цикл
					// Если уже есть такая команда, дополняем список типов объектов, для которых она предназначена.
					ТипОбъекта = Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".", "Ссылка."));
					Если ИмеющаясяКомандаПечати.ТипыОбъектовПечати.Найти(ТипОбъекта) = Неопределено Тогда
						ИмеющаясяКомандаПечати.ТипыОбъектовПечати.Добавить(ТипОбъекта);
					КонецЕсли;
					// Очистим МенеджерПечати в случае, если у имеющейся команды он отличается.
					Если ИмеющаясяКомандаПечати.МенеджерПечати <> ДобавляемаяКомандаПечати.МенеджерПечати Тогда
						ИмеющаясяКомандаПечати.МенеджерПечати = "";
					КонецЕсли;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			Если ДобавляемаяКомандаПечати.ТипыОбъектовПечати.Количество() = 0 Тогда
				ДобавляемаяКомандаПечати.ТипыОбъектовПечати.Добавить(Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".", "Ссылка.")));
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(КомандыПечати.Добавить(), ДобавляемаяКомандаПечати, , "СписокФорм,МестоРазмещения");
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Только для внутреннего использования.
//
Функция КоличествоИспользуемыхПользовательскихМакетов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПользовательскиеМакетыПечати.ИмяМакета
	|ИЗ
	|	РегистрСведений.ПользовательскиеМакетыПечати КАК ПользовательскиеМакетыПечати
	|ГДЕ
	|	ПользовательскиеМакетыПечати.Использование = ИСТИНА";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.Количество();
	
КонецФункции

Процедура УстановитьНастройкиКомандПечати(КомандыПечати, Владелец)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НастройкиКомандПечати.УникальныйИдентификатор
	|ИЗ
	|	РегистрСведений.НастройкиКомандПечати КАК НастройкиКомандПечати
	|ГДЕ
	|	НастройкиКомандПечати.Владелец = &Владелец
	|	И НастройкиКомандПечати.Видимость = ЛОЖЬ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	СписокОтключенных = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УникальныйИдентификатор");
	
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		КомандаПечати.УникальныйИдентификатор = УникальныйИдентификаторКомандыПечати(КомандаПечати);
		Если СписокОтключенных.Найти(КомандаПечати.УникальныйИдентификатор) <> Неопределено Тогда
			КомандаПечати.Отключена = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ХешСумма(Ключ)
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(Ключ);
	Возврат СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
КонецФункции

Функция УникальныйИдентификаторКомандыПечати(КомандаПечати)
	
	Параметры = Новый Массив;
	Параметры.Добавить("Идентификатор");
	Параметры.Добавить("МенеджерПечати");
	Параметры.Добавить("Обработчик");
	Параметры.Добавить("СразуНаПринтер");
	Параметры.Добавить("ФорматСохранения");
	Параметры.Добавить("ФиксированныйКомплект");
	Параметры.Добавить("ДополнительныеПараметры");
	
	СтруктураПараметров = Новый Структура(СтрСоединить(Параметры, ","));
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, КомандаПечати);
	
	Возврат ХешСумма(ОбщегоНазначения.ЗначениеВСтрокуXML(СтруктураПараметров));
	
КонецФункции

Функция КомандыПечатиОбъекта(ОбъектМетаданных) Экспорт
	
	КомандыПечати = СоздатьКоллекциюКомандПечати();
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	
	МенеджерПечати = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяОбъекта);
	ДобавляемыеКомандыПечати = СоздатьКоллекциюКомандПечати();
	МенеджерПечати.ДобавитьКомандыПечати(ДобавляемыеКомандыПечати);
	
	Для Каждого КомандаПечати Из ДобавляемыеКомандыПечати Цикл
		Если ПустаяСтрока(КомандаПечати.МенеджерПечати) Тогда
			КомандаПечати.МенеджерПечати = ИмяОбъекта;
		КонецЕсли;
		Если КомандаПечати.Порядок = 0 Тогда
			КомандаПечати.Порядок = 50;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(КомандыПечати.Добавить(), КомандаПечати);
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		МодульДополнительныеОтчетыИОбработки.ПриПолученииКомандПечати(КомандыПечати, ИмяОбъекта);
	КонецЕсли;
	
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		КомандаПечати.ДополнительныеПараметры.Вставить("ДополнитьКомплектВнешнимиПечатнымиФормами", КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами);
	КонецЦикла;
	
	КомандыПечати.Сортировать("Порядок Возр, Представление Возр");
	УстановитьНастройкиКомандПечати(КомандыПечати, ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных));
	ОпределитьВидимостьКомандПечатиПоФункциональнымОпциям(КомандыПечати);
	
	Возврат КомандыПечати;
	
КонецФункции

// Устарела. Настройка ЛокальныйКаталогФайловПечати больше не используется.
// Возвращает путь к каталогу, используемому при печати.
Функция ПолучитьЛокальныйКаталогФайловПечати() Экспорт
	Возврат "";
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы.

// Определяет возможность сохранения печатной формы при объекте.
// Вызывается из общей формы СохранениеПечатнойФормы.
//
// Параметры:
//  СсылкаНаОбъект    - ЛюбаяСсылка - объект, к которому надо присоединить файл печатной формы;
//  МожноПрисоединять - Булево - (возвращаемый) признак возможности присоединения файлов к объекту.
//
Процедура ПриПроверкеВозможностиПрисоединенияФайловКОбъекту(СсылкаНаОбъект, МожноПрисоединять) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		МодульПрисоединенныеФайлы = ОбщегоНазначения.ОбщийМодуль("ПрисоединенныеФайлы");
		МожноПрисоединять = МодульПрисоединенныеФайлы.КОбъектуМожноПрисоединятьФайлы(СсылкаНаОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список печатных форм из внешних источников.
//
// Параметры:
//  ВнешниеПечатныеФормы - СписокЗначений:
//                                         Значение      - Строка - идентификатор печатной формы;
//                                         Представление - Строка - название печатной формы.
//  ПолноеИмяОбъектаМетаданных - Строка - полное имя объекта метаданных, для которого требуется получить список
//                                        печатных форм.
//
Процедура ПриПолученииСпискаВнешнихПечатныхФорм(ВнешниеПечатныеФормы, ПолноеИмяОбъектаМетаданных)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		МодульДополнительныеОтчетыИОбработки.ПриПолученииСпискаВнешнихПечатныхФорм(ВнешниеПечатныеФормы, ПолноеИмяОбъектаМетаданных);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку на объект внешней печатной формы.
//
Процедура ПриПолученииВнешнейПечатнойФормы(Идентификатор, ПолноеИмяОбъектаМетаданных, ВнешняяПечатнаяФормаСсылка)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		МодульДополнительныеОтчетыИОбработки.ПриПолученииВнешнейПечатнойФормы(Идентификатор, ПолноеИмяОбъектаМетаданных, ВнешняяПечатнаяФормаСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
