////////////////////////////////////////////////////////////////////////////////
// Подсистема "Взаимодействия"
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Вызывается из обработчиков заполнения документов - взаимодействий и предметов заполнения.
// Выполняет необходимые действия по заполнению реквизитов по умолчанию.
//
// Параметры:
//  Объект - ДокументОбъект - документ, для которого выполняется заполнение.
//  ДанныеЗаполнения  - Произвольный - значение,которое используется как основание для заполнения.
//
Процедура ЗаполнитьРеквизитыПоУмолчанию(Объект, ДанныеЗаполнения) Экспорт
	
	ЭтоВзаимодействие = ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Объект.Ссылка);
	
	// Текущий пользователь является автором и ответственным по создаваемому взаимодействию.
	Если ЭтоВзаимодействие Тогда
		Объект.Автор = Пользователи.ТекущийПользователь();
		Объект.Ответственный = Объект.Автор;
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контакты = Неопределено;
	
	Если ВзаимодействияКлиентСервер.ЯвляетсяКонтактом(ДанныеЗаполнения)
		И Не ДанныеЗаполнения.ЭтоГруппа Тогда
		// На основании контакта
		Контакты = Новый Массив;
		Контакты.Добавить(ДанныеЗаполнения);
		
	ИначеЕсли ВзаимодействияКлиентСервер.ЯвляетсяПредметом(ДанныеЗаполнения) Тогда
		// На основании предмета
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДанныеЗаполнения);
		Контакты = МенеджерОбъекта.ПолучитьКонтакты(ДанныеЗаполнения);
		
	ИначеЕсли ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(ДанныеЗаполнения) Тогда
		// На основании взаимодействия.
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДанныеЗаполнения);
		Контакты = МенеджерОбъекта.ПолучитьКонтакты(ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		// Заполним контакт
		Если ДанныеЗаполнения.Свойство("Контакт") И ЗначениеЗаполнено(ДанныеЗаполнения.Контакт) Тогда
			Контакты = Новый Массив;
			Контакты.Добавить(ДанныеЗаполнения.Контакт);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("Предмет") И ЗначениеЗаполнено(ДанныеЗаполнения.Предмет) Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДанныеЗаполнения.Предмет);
			Если НЕ (ДанныеЗаполнения.Свойство("Контакт") И ЗначениеЗаполнено(ДанныеЗаполнения.Контакт)) Тогда
				Контакты = МенеджерОбъекта.ПолучитьКонтакты(ДанныеЗаполнения.Предмет);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним участников
	Если ЗначениеЗаполнено(Контакты) И (Контакты.Количество() > 0) Тогда
		Объект.ЗаполнитьКонтакты(Контакты);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает во всей цепочке взаимодействий в качестве предмета созданный объект.
// Параметры:
//  Предмет        - созданный предмет взаимодействий,
//  Взаимодействие - взаимодействие, по которому создан предмет,
//  Отказ          - флаг отказа от операции.
//
Процедура ПриЗаписиПредметаИзФормы(Предмет, Взаимодействие, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(Взаимодействие)
		Или Не ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Взаимодействие) Тогда
		Возврат;
	КонецЕсли;
	
	СтарыйПредмет = ПолучитьЗначениеПредмета(Взаимодействие);
	Если Предмет = СтарыйПредмет Тогда
		// Предмет уже был установлен
		Возврат;
	КонецЕсли;
	
	// Получим список взаимодействий у которых нужно изменить предмет.
	Если ЗначениеЗаполнено(СтарыйПредмет)
		И ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(СтарыйПредмет) Тогда
		МассивЗаменить = ПолучитьВзаимодействияИзЦепочки(СтарыйПредмет, Взаимодействие);
	Иначе
		МассивЗаменить = Новый Массив;
	КонецЕсли;
	МассивЗаменить.Вставить(0, Взаимодействие);
	
	// Заменим предмет во всех взаимодействиях.
	
	Для Каждого Элемент Из МассивЗаменить Цикл
		Попытка
			УстановитьПредмет(Элемент, Предмет);
		Исключение
			ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при замене предмета у %1: %2'"), Элемент, ПредставлениеОшибки), , , , Отказ);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает оповещение при создании на сервере документа взаимодействий.
Процедура ПодготовитьОповещения(Форма,Параметры,ИспользоватьВзаимодействиеОснование = Истина) Экспорт
	
	Если Параметры.Свойство("Основание") И Параметры.Основание <> Неопределено Тогда
		
		Если ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Параметры.Основание) Тогда
			
			Форма.НеобходимоОповещение = Истина;
			Если ИспользоватьВзаимодействиеОснование  Тогда
				Форма.ВзаимодействиеОснование = Параметры.Основание;
			Иначе
				Форма.ОбъектОснование = Параметры.Основание;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Параметры.Основание) = Тип("Структура") 
			И Параметры.Основание.Свойство("Объект") 
			И ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Параметры.Основание.Объект) Тогда
			
			Форма.НеобходимоОповещение = Истина;
			Если ИспользоватьВзаимодействиеОснование  Тогда
				Форма.ВзаимодействиеОснование = Параметры.Основание.Объект;
			Иначе
				Форма.ОбъектОснование = Параметры.Основание.Объект;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Параметры.Основание) = Тип("Структура") 
			И (Параметры.Основание.Свойство("Основание") 
			И ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Параметры.Основание.Основание)) Тогда

			Форма.НеобходимоОповещение = Истина;
			Если ИспользоватьВзаимодействиеОснование  Тогда
				Форма.ВзаимодействиеОснование = Параметры.Основание.Основание;
			Иначе
				Форма.ОбъектОснование = Параметры.Основание.Основание;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("Предмет") Тогда
		Форма.НеобходимоОповещение = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"Взаимодействия");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УдалениеПомеченныхОбъектов") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.УдалениеПомеченныхОбъектов\ПослеУдаленияПомеченных"].Добавить(
			"Взаимодействия");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.УправлениеДоступом\ПриЗаполненииВидовОграниченийПравОбъектовМетаданных"].Добавить(
			"Взаимодействия");
	КонецЕсли;
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиента"].Добавить(
		"Взаимодействия");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.ТекущиеДела\ПриЗаполненииСпискаТекущихДел"].Добавить(
			"Взаимодействия");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ВыгрузкаЗагрузкаДанных") Тогда
		СерверныеОбработчики[
			"ТехнологияСервиса.ВыгрузкаЗагрузкаДанных\ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки"
		].Добавить("Взаимодействия");
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после удаления помеченных объектов.
//
// Параметры:
//   ПараметрыВыполнения - Структура - Контекст удаления помеченных объектов.
//       * Удаленные - Массив - Ссылки удаленных объектов.
//       * НеУдаленные - Массив - Ссылки объектов, которые не получилось удалить.
//
Процедура ПослеУдаленияПомеченных(Знач ПараметрыВыполнения) Экспорт
	
	ТребуетсяПересчетСостояний = Ложь;
	
	Для Каждого УдаленнаяСсылка Из ПараметрыВыполнения.Удаленные Цикл
		
		Если ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(УдаленнаяСсылка) Тогда
			ТребуетсяПересчетСостояний = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТребуетсяПересчетСостояний Тогда
		
		ВыполнитьПолныйПерерасчетСостояний();
		
	КонецЕсли;
	
КонецПроцедуры

// Определить список справочников, доступных для загрузки с помощью подсистемы "Загрузка данных из файла".
//
// Параметры:
//  ЗагружаемыеСправочники - ТаблицаЗначений - список справочников, в которые возможна загрузка данных.
//      * ПолноеИмя          - Строка - полное имя справочника (как в метаданных).
//      * Представление      - Строка - представление справочника в списке выбора.
//      * ПрикладнаяЗагрузка - Булево - если Истина, значит справочник использует собственный алгоритм загрузки и
//                                      в модуле менеджера справочника определены функции.
//
Процедура ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт
	
	// Загрузка в справочник СтроковыеКонтактыВзаимодействий запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.СтроковыеКонтактыВзаимодействий.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность 
// редактирования реквизитов при групповом изменении.
//
// Параметры:
//   Объекты - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                            подключенного к подсистеме "Групповое изменение объектов". 
//                            Дополнительно в значении могут быть перечислены имена экспортных функций:
//                            "РеквизитыНеРедактируемыеВГрупповойОбработке",
//                            "РеквизитыРедактируемыеВГрупповойОбработке".
//                            Каждое имя должно начинаться с новой строки.
//                            Если указана пустая строка, значит в модуле менеджера определены обе функции.
//
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Документы.Встреча.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Документы.ТелефонныйЗвонок.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Документы.ЗапланированноеВзаимодействие.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Документы.ЭлектронноеПисьмоВходящее.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Документы.ЭлектронноеПисьмоИсходящее.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Документы.СообщениеSMS.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ВстречаПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ЗакладкиВзаимодействий.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ЗапланированноеВзаимодействиеПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ПапкиЭлектронныхПисем.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ПравилаОбработкиЭлектроннойПочты.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.СообщениеSMSПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.СтроковыеКонтактыВзаимодействий.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ТелефонныйЗвонокПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в эту подсистему.

// См. описание одноименной процедуры в общем модуле РегламентныеЗаданияПереопределяемый.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Зависимости) Экспорт
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСтатусовДоставкиSMS;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьПочтовыйКлиент;
	Зависимость.ДоступноВМоделиСервиса = Ложь;
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОтправкаSMS;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьПочтовыйКлиент;
	Зависимость.ДоступноВМоделиСервиса = Ложь;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПолучениеИОтправкаЭлектронныхПисем;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьПочтовыйКлиент;
	Зависимость.ДоступноВМоделиСервиса = Ложь;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий подсистем БСП.

// Заполняет состав видов доступа, используемых при ограничении прав объектов метаданных.
// Если состав видов доступа не заполнен, отчет "Права доступа" покажет некорректные сведения.
//
// Обязательно требуется заполнить только виды доступа, используемые
// в шаблонах ограничения доступа явно, а виды доступа, используемые
// в наборах значений доступа могут быть получены из текущего состояния
// регистра сведений НаборыЗначенийДоступа.
//
//  Для автоматической подготовки содержимого процедуры следует
// воспользоваться инструментами разработчика для подсистемы.
// Управление доступом.
//
// Параметры:
//  Описание     - Строка, многострочная строка формата <Таблица>.<Право>.<ВидДоступа>[.Таблица объекта].
//                 Например, Документ.ПриходнаяНакладная.Чтение.Организации
//                           Документ.ПриходнаяНакладная.Чтение.Контрагенты
//                           Документ.ПриходнаяНакладная.Изменение.Организации
//                           Документ.ПриходнаяНакладная.Изменение.Контрагенты
//                           Документ.ЭлектронныеПисьма.Чтение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.ЭлектронныеПисьма.Изменение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.Файлы.Чтение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Чтение.Объект.Документ.ЭлектронноеПисьмо
//                           Документ.Файлы.Изменение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Изменение.Объект.Документ.ЭлектронноеПисьмо
//                 Вид доступа Объект предопределен, как литерал, его нет в предопределенных элементах.
//                 ПланыВидовХарактеристик.ВидыДоступа. Этот вид доступа используется в шаблонах ограничений доступа,
//                 как "ссылка" на другой объект, по которому ограничивается таблица.
//                 Когда вид доступа "Объект" задан, также требуется задать типы таблиц, которые используются
//                 для этого вида доступа. Т.е. перечислить типы, которые соответствующие полю,
//                 использованному в шаблоне ограничения доступа в паре с видом доступа "Объект".
//                 При перечислении типов по виду доступа "Объект" нужно перечислить только те типы поля,
//                 которые есть у поля РегистрыСведений.НаборыЗначенийДоступа.Объект, остальные типы лишние.
// 
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
	
	Если МодульУправлениеДоступомСлужебный.ВидДоступаСуществует("УчетныеЗаписиЭлектроннойПочты") Тогда
		
		Описание = Описание + "
		|Справочник.ПапкиЭлектронныхПисем.Чтение.УчетныеЗаписиЭлектроннойПочты
		|Справочник.ПапкиЭлектронныхПисем.Изменение.УчетныеЗаписиЭлектроннойПочты
		|Справочник.ПравилаОбработкиЭлектроннойПочты.Чтение.УчетныеЗаписиЭлектроннойПочты
		|Справочник.ПравилаОбработкиЭлектроннойПочты.Изменение.УчетныеЗаписиЭлектроннойПочты
		|";
		
	КонецЕсли;
	
	Описание = Описание + "
	|Документ.Встреча.Чтение.Объект.Документ.Встреча
	|Документ.Встреча.Изменение.Объект.Документ.Встреча
	|Документ.ЗапланированноеВзаимодействие.Чтение.Объект.Документ.ЗапланированноеВзаимодействие
	|Документ.ЗапланированноеВзаимодействие.Изменение.Объект.Документ.ЗапланированноеВзаимодействие
	|Документ.СообщениеSMS.Чтение.Объект.Документ.СообщениеSMS
	|Документ.СообщениеSMS.Изменение.Объект.Документ.СообщениеSMS
	|Документ.ТелефонныйЗвонок.Чтение.Объект.Документ.ТелефонныйЗвонок
	|Документ.ТелефонныйЗвонок.Изменение.Объект.Документ.ТелефонныйЗвонок
	|Документ.ЭлектронноеПисьмоВходящее.Чтение.Объект.Документ.ЭлектронноеПисьмоВходящее
	|Документ.ЭлектронноеПисьмоВходящее.Изменение.Объект.Документ.ЭлектронноеПисьмоВходящее
	|Документ.ЭлектронноеПисьмоИсходящее.Чтение.Объект.Документ.ЭлектронноеПисьмоИсходящее
	|Документ.ЭлектронноеПисьмоИсходящее.Изменение.Объект.Документ.ЭлектронноеПисьмоИсходящее
	|ЖурналДокументов.Взаимодействия.Чтение.Объект.Документ.Встреча
	|ЖурналДокументов.Взаимодействия.Чтение.Объект.Документ.ЗапланированноеВзаимодействие
	|ЖурналДокументов.Взаимодействия.Чтение.Объект.Документ.СообщениеSMS
	|ЖурналДокументов.Взаимодействия.Чтение.Объект.Документ.ТелефонныйЗвонок
	|ЖурналДокументов.Взаимодействия.Чтение.Объект.Документ.ЭлектронноеПисьмоВходящее
	|ЖурналДокументов.Взаимодействия.Чтение.Объект.Документ.ЭлектронноеПисьмоИсходящее
	|РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты.Чтение.УчетныеЗаписиЭлектроннойПочты
	|РегистрСведений.ПредметыПапкиВзаимодействий.Изменение.Объект.Документ.Встреча
	|РегистрСведений.ПредметыПапкиВзаимодействий.Изменение.Объект.Документ.ЗапланированноеВзаимодействие
	|РегистрСведений.ПредметыПапкиВзаимодействий.Изменение.Объект.Документ.СообщениеSMS
	|РегистрСведений.ПредметыПапкиВзаимодействий.Изменение.Объект.Документ.ТелефонныйЗвонок
	|РегистрСведений.ПредметыПапкиВзаимодействий.Изменение.Объект.Документ.ЭлектронноеПисьмоВходящее
	|РегистрСведений.ПредметыПапкиВзаимодействий.Изменение.Объект.Документ.ЭлектронноеПисьмоИсходящее
	|";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		Описание = Описание + "
		|Справочник.ВстречаПрисоединенныеФайлы.Чтение.Объект.Документ.Встреча
		|Справочник.ВстречаПрисоединенныеФайлы.Изменение.Объект.Документ.Встреча
		|Справочник.ЗапланированноеВзаимодействиеПрисоединенныеФайлы.Чтение.Объект.Документ.ЗапланированноеВзаимодействие
		|Справочник.ЗапланированноеВзаимодействиеПрисоединенныеФайлы.Изменение.Объект.Документ.ЗапланированноеВзаимодействие
		|Справочник.СообщениеSMSПрисоединенныеФайлы.Чтение.Объект.Документ.СообщениеSMS
		|Справочник.СообщениеSMSПрисоединенныеФайлы.Изменение.Объект.Документ.СообщениеSMS
		|Справочник.ТелефонныйЗвонокПрисоединенныеФайлы.Чтение.Объект.Документ.ТелефонныйЗвонок
		|Справочник.ТелефонныйЗвонокПрисоединенныеФайлы.Изменение.Объект.Документ.ТелефонныйЗвонок
		|Справочник.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы.Чтение.Объект.Документ.ЭлектронноеПисьмоВходящее
		|Справочник.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы.Изменение.Объект.Документ.ЭлектронноеПисьмоВходящее
		|Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.Чтение.Объект.Документ.ЭлектронноеПисьмоИсходящее
		|Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.Изменение.Объект.Документ.ЭлектронноеПисьмоИсходящее
		|";
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	ИспользоватьПочтовыйКлиент = ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент");
	ЕстьПравоСозданиеИсходящихПисем = ПравоДоступа("Добавление", Метаданные.Документы.ЭлектронноеПисьмоИсходящее);
	
	Параметры.Вставить("ИспользоватьПочтовыйКлиент", ИспользоватьПочтовыйКлиент);
	Параметры.Вставить("ИспользоватьПрочиеВзаимодействия", ПолучитьФункциональнуюОпцию("ИспользоватьПрочиеВзаимодействия"));
	Параметры.Вставить("СозданиеИсходящихПисемДоступно", ИспользоватьПочтовыйКлиент И ЕстьПравоСозданиеИсходящихПисем);
	
КонецПроцедуры

// Заполняет массив типов, исключаемых из выгрузки и загрузки данных.
//
// Параметры:
//  Типы - Массив(Типы).
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Константы.АдресПубликацииИнформационнойБазыВИнтернете);
	Типы.Добавить(Метаданные.Константы.ИспользоватьПочтовыйКлиент);
	Типы.Добавить(Метаданные.Константы.ИспользоватьПризнакРассмотрено);
	Типы.Добавить(Метаданные.Константы.ИспользоватьПрочиеВзаимодействия);
	Типы.Добавить(Метаданные.Константы.ОтправлятьПисьмаВФорматеHTML);
	
	Типы.Добавить(Метаданные.Справочники.ВстречаПрисоединенныеФайлы);
	Типы.Добавить(Метаданные.Справочники.ЗакладкиВзаимодействий);
	Типы.Добавить(Метаданные.Справочники.ЗапланированноеВзаимодействиеПрисоединенныеФайлы);
	Типы.Добавить(Метаданные.Справочники.ПапкиЭлектронныхПисем);
	Типы.Добавить(Метаданные.Справочники.ПравилаОбработкиЭлектроннойПочты);
	Типы.Добавить(Метаданные.Справочники.СообщениеSMSПрисоединенныеФайлы);
	Типы.Добавить(Метаданные.Справочники.СтроковыеКонтактыВзаимодействий);
	Типы.Добавить(Метаданные.Справочники.ТелефонныйЗвонокПрисоединенныеФайлы);
	Типы.Добавить(Метаданные.Справочники.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы);
	Типы.Добавить(Метаданные.Справочники.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы);
	
	Типы.Добавить(Метаданные.Документы.Встреча);
	Типы.Добавить(Метаданные.Документы.ЗапланированноеВзаимодействие);
	Типы.Добавить(Метаданные.Документы.СообщениеSMS);
	Типы.Добавить(Метаданные.Документы.ТелефонныйЗвонок);
	Типы.Добавить(Метаданные.Документы.ЭлектронноеПисьмоВходящее);
	Типы.Добавить(Метаданные.Документы.ЭлектронноеПисьмоИсходящее);
	
	Типы.Добавить(Метаданные.ЖурналыДокументов.Взаимодействия);
	
	Типы.Добавить(Метаданные.РегистрыСведений.ИдентификаторыПолученныхЭлектронныхПисем);
	Типы.Добавить(Метаданные.РегистрыСведений.КонтактыВзаимодействий);
	Типы.Добавить(Метаданные.РегистрыСведений.НастройкиУчетныхЗаписейЭлектроннойПочты);
	Типы.Добавить(Метаданные.РегистрыСведений.ПредметыПапкиВзаимодействий);
	Типы.Добавить(Метаданные.РегистрыСведений.СостоянияКонтактовВзаимодействий);
	Типы.Добавить(Метаданные.РегистрыСведений.СостоянияПапокПисем);
	Типы.Добавить(Метаданные.РегистрыСведений.СостоянияПредметовВзаимодействий);
	Типы.Добавить(Метаданные.РегистрыСведений.УведомленияОПрочтении);
	Типы.Добавить(Метаданные.РегистрыСведений.Удалить_АктивныеПредметыВзаимодействий);
	
КонецПроцедуры

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если (Не Пользователи.ЭтоПолноправныйПользователь()
		И Не Пользователи.РолиДоступны("ДобавлениеИзменениеВзаимодействий"))
		Или МодульТекущиеДелаСервер.ДелоОтключено("ВзаимодействияПочта") Тогда
		Возврат;
	КонецЕсли;
	
	НовыхПисемПоУчетнымЗаписям = НовыхПисемПоУчетнымЗаписям();
	
	// Процедура вызывается только при наличии подсистемы "Текущие дела", поэтому здесь
	// не делается проверка существования подсистемы.
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.ЖурналыДокументов.Взаимодействия.ПолноеИмя());
	
	Для Каждого Раздел Из Разделы Цикл
		
		ИдентификаторВзаимодействия = "Взаимодействия" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "");
		ДелоРодитель = ТекущиеДела.Добавить();
		ДелоРодитель.Идентификатор  = ИдентификаторВзаимодействия;
		ДелоРодитель.Представление  = НСтр("ru = 'Почта'");
		ДелоРодитель.Форма          = "ЖурналДокументов.Взаимодействия.Форма.ФормаСписка";
		ДелоРодитель.Владелец       = Раздел;
		
		Индекс = 1;
		КоличествоПисем = 0;
		Для Каждого НовыхПисемПоУчетнойЗаписи Из НовыхПисемПоУчетнымЗаписям Цикл
		
			ИдентификаторПисемПоУчетнойЗаписи = ИдентификаторВзаимодействия + "УчетнаяЗапись" + Индекс;
			Дело = ТекущиеДела.Добавить();
			Дело.Идентификатор  = ИдентификаторПисемПоУчетнойЗаписи;
			Дело.ЕстьДела       = НовыхПисемПоУчетнойЗаписи.КоличествоПисем > 0;
			Дело.Количество     = НовыхПисемПоУчетнойЗаписи.КоличествоПисем;
			Дело.Представление  = НовыхПисемПоУчетнойЗаписи.УчетнаяЗапись;
			Дело.Владелец       = ИдентификаторВзаимодействия;
			
			Индекс = Индекс + 1;
			КоличествоПисем = КоличествоПисем + НовыхПисемПоУчетнойЗаписи.КоличествоПисем;
		КонецЦикла;
		
		ДелоРодитель.Количество = КоличествоПисем;
		ДелоРодитель.ЕстьДела   = КоличествоПисем > 0;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает поля для получения наименования владельца, если такой имеется.
//
// Параметры:
//  ИмяТаблицы - Строка - Имя основной таблицы, для которой формируется запрос.
//
// Возвращаемое значение:
//  Строка - строка, которая будет вставлена в запрос.
//
Функция ПолучитьИмяПоляДляНаименованияВладельца(ИмяТаблицы) Экспорт
	
	МассивОписанияКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	Для каждого ЭлементОписанияМассива Из МассивОписанияКонтактов Цикл
		Если ЭлементОписанияМассива.Имя = ИмяТаблицы И ЭлементОписанияМассива.ЕстьВладелец Тогда
			Возврат "Таблица.Владелец.Наименование";
		КонецЕсли;
	КонецЦикла;
	
	Возврат """""";
	
КонецФункции

// Получает взаимодействия из цепочки по предмету взаимодействия.
//
// Параметры:
//  Цепочка	  - Ссылка - предмет взаимодействия для которого получаются взаимодействия.
//  Исключать - Ссылка - взаимодействие, которое не должно попасть в результирующий массив.
//
// Возвращаемое значение:
//  Массив - найденные взаимодействия.
//
Функция ПолучитьВзаимодействияИзЦепочки(Цепочка, Исключать) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПредметыВзаимодействий.Взаимодействие КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыВзаимодействий
	|ГДЕ
	|	ПредметыВзаимодействий.Предмет = &Предмет
	|	" + ?(Исключать = Неопределено,"","  И ПредметыВзаимодействий.Взаимодействие <> &Исключать ");
	
	Запрос.УстановитьПараметр("Предмет", Цепочка);
	Запрос.УстановитьПараметр("Исключать", Исключать);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции отвечающие за поиск контактов.

// Возвращает список доступных видов поиска контактов.
//
// Параметры:
//  ППДВключен        - Булево - признак доступности полнотекстового поиска.
//  Параметры         - Структура - параметры содержащие Представление и Адрес контакта.
//  ЭлементыФормы     - ЭлементыФормы 
//  ДляАдреснойКниги  - Булево - истина если список формируется для адресной книги.
//
// Возвращаемое значение:
//   Структура        - структура содержащая виды поиска и значения поиска в них.
//
Функция ПолучитьСписокДоступныхПоисков(ППДВключен, Параметры, ЭлементыФормы, ДляАдреснойКниги) Экспорт
	
	ВсеСпискиПоиска = Новый Структура;
	
	Если ДляАдреснойКниги Тогда
		Адрес = "";
		ДоменныйАдрес = "";
		ВариантыПоискаПоСтроке = "";
		Представление = "";
	Иначе
		Адрес = Параметры.Адрес;
		ДоменныйАдрес = ПолучитьДоменныйАдресДляПоиска(Параметры.Адрес);
		ВариантыПоискаПоСтроке = ПолучитьВариантыПоискаПоСтроке(Параметры.Представление, Параметры.Адрес);
		Представление = Параметры.Представление;
	КонецЕсли;
	
	ДобавитьВариантПоиска(ВсеСпискиПоиска, ЭлементыФормы, "ПоEmail", НСтр("ru = 'По email'"), Адрес);
	ДобавитьВариантПоиска(ВсеСпискиПоиска, ЭлементыФормы, "ПоДомену", НСтр("ru = 'По доменному имени'"), ДоменныйАдрес);
	Если Не ДляАдреснойКниги Тогда
		ДобавитьВариантПоиска(ВсеСпискиПоиска, ЭлементыФормы, "ПоТелефону", НСтр("ru = 'По телефону'"), Адрес);
	КонецЕсли;
	
	Если НЕ ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Запретить Тогда
		ППДВключен = Истина;
	КонецЕсли;
	
	Если ППДВключен Тогда
		ДобавитьВариантПоиска(ВсеСпискиПоиска, ЭлементыФормы, "ПоСтроке",
			НСтр("ru = 'По строке'"), ВариантыПоискаПоСтроке);
	КонецЕсли;
	
	ДобавитьВариантПоиска(ВсеСпискиПоиска, ЭлементыФормы, "НачинаетсяС", НСтр("ru = 'Начинается с'"), Представление);
	
	Возврат ВсеСпискиПоиска;
	
КонецФункции

// Добавляет вариант поиска в список доступных поисков.
//
// Параметры:
//  ВсеСпискиПоиска - Структура - в нее происходит добавление варианта поиска и значения в этом варианте.
//  ЭлементыФормы   - ЭлементыФормы 
//  ИмяВарианта     - Строка - Имя варианта поиска.
//  Представление   - Строка - Представление варианта поиска.
//  Значение        - Строка - Значение для поиска в данном варианте поиска.
//
Процедура ДобавитьВариантПоиска(ВсеСпискиПоиска, ЭлементыФормы, ИмяВарианта, Представление, Значение)
	
	ЭлементыФормы.ВариантыПоиска.СписокВыбора.Добавить(ИмяВарианта, Представление);
	ВсеСпискиПоиска.Вставить(ИмяВарианта, Значение);
	
КонецПроцедуры

// Устанавливает текущим контакт в форме "Адресной книге" и "Выборе контактов".
//
// Параметры:
//  Контакт - СправочникСсылка - контакт на котором необходимо спозиционироваться в форме.
//  Форма   - УправляемаяФорма - форма для которой выполняются действия.
//
Процедура УстановитьТекущимКонтакт(Контакт, Форма) Экспорт
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Форма.Элементы.СтраницыСписки.ТекущаяСтраница = Форма.Элементы.СтраницаПользователей;
		Форма.Элементы.СписокПользователей.ТекущаяСтрока = Контакт;
		
	Иначе
		
		МассивОписанийКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
		ИмяМетаданныхКонтакта = Контакт.Метаданные().Имя;
		
		Для каждого ЭлементМассиваОписания Из МассивОписанийКонтактов Цикл
			Если ЭлементМассиваОписания.Имя = ИмяМетаданныхКонтакта Тогда
				Форма.Элементы.СтраницыСписки.ТекущаяСтраница = 
					Форма.Элементы["Страница_" + ?(ЭлементМассиваОписания.ЕстьВладелец,
					                               ЭлементМассиваОписания.ИмяВладельца,
					                               ЭлементМассиваОписания.Имя)];
				Форма.Элементы["Таблица_" + ЭлементМассиваОписания.Имя].ТекущаяСтрока = Контакт;
				Если ЭлементМассиваОписания.ЕстьВладелец Тогда
					Форма.Элементы["Таблица_" + ЭлементМассиваОписания.ИмяВладельца].ТекущаяСтрока = Контакт.Владелец;
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
						Форма["Список_" + ЭлементМассиваОписания.Имя],"Владелец",Контакт.Владелец,,,Истина);
				КонецЕсли;
			ИначеЕсли ЭлементМассиваОписания.ИмяВладельца = ИмяМетаданныхКонтакта Тогда
				Форма.Элементы.СтраницыСписки.ТекущаяСтраница = 
					Форма.Элементы["Страница_" + ЭлементМассиваОписания.ИмяВладельца];
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
					Форма["Список_" + ЭлементМассиваОписания.Имя],"Владелец",Контакт,,,Истина);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает доменный адрес из адреса электронной почты.
//
// Параметры:
//  Адрес  - Строка - содержит адрес электронной почты из которого извлекается доменный адрес.
//
// Возвращаемое значение:
//   Строка   - полученный доменный адрес.
//
Функция ПолучитьДоменныйАдресДляПоиска(Адрес)
	
	Строка = Адрес;
	Позиция = СтрНайти(Строка, "@");
	Возврат ?(Позиция = 0, "", Сред(Строка, Позиция+1));
	
КонецФункции

// Формирует варианты поиска по строке.
//
// Параметры:
//  Представление - Строка - представление контакта.
//  Адрес         - Строка - адрес контакта.
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьВариантыПоискаПоСтроке(Представление, Адрес)
	
	Если ПустаяСтрока(Представление) Тогда
		Возврат Адрес;
	ИначеЕсли  ПустаяСтрока(Адрес) Тогда
		Возврат Представление;
	КонецЕсли;
	
	ВариантыПоиска = Новый СписокЗначений;
	Представление = ДобавитьКавычкиКСтроке(Представление);
	Адрес         = ДобавитьКавычкиКСтроке(Адрес);
	ВариантыПоиска.Добавить(Представление + " ИЛИ " + Адрес);
	ВариантыПоиска.Добавить(Представление + " И " + Адрес);
	
	Возврат ВариантыПоиска;
	
КонецФункции

Функция ДобавитьКавычкиКСтроке(ИсходнаяСтрока)
	
	
	СтрокаКВозврату = СокрЛП(ИсходнаяСтрока);
	
	Если КодСимвола(Лев(СокрЛП(СтрокаКВозврату), 1)) <> 34 Тогда
		СтрокаКВозврату = """" + СтрокаКВозврату;
	КонецЕсли;
	
	Если КодСимвола(Прав(СокрЛП(СтрокаКВозврату), 1)) <> 34 Тогда
		СтрокаКВозврату = СтрокаКВозврату + """";
	КонецЕсли;
	
	Возврат СтрокаКВозврату;
	
КонецФункции

// Возвращает массив, содержащий структуры с информацией о контактах взаимодействия
// или участниках предмета взаимодействия.
//
// Параметры:
//  ТаблицаКонтактов - Документ.ТабличнаяЧасть - содержащая описания и ссылки на контакты взаимодействия
//                     или участников предмета взаимодействия.
//
Функция ПреобразоватьТаблицуКонтактовВМассив(ТаблицаКонтактов) Экспорт
	
	Результат = Новый Массив;
	Для Каждого ЭлементМассива Из ТаблицаКонтактов Цикл
		Контакт = ?(ТипЗнч(ЭлементМассива.Контакт) = Тип("Строка"), Неопределено, ЭлементМассива.Контакт);
		Запись = Новый Структура(
		"Адрес, Представление, Контакт", ЭлементМассива.Адрес, ЭлементМассива.Представление, Контакт);
		Результат.Добавить(Запись);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заполняет таблицу значений "Найденные контакты" общих форм "Адресная книга" и "Выбора контактов"
// на основании переданной таблицы значений.
//
// Параметры:
//  ТаблицаКонтакты       - ТаблицаЗначений - таблица значений источник.
//  НайденныеКонтакты - ТаблицаЗначений - таблица значений приемник.
//
Процедура ЗаполнитьНайденныеКонтакты(ТаблицаКонтакты,НайденныеКонтакты) Экспорт
	
	Для Каждого Стр Из ТаблицаКонтакты Цикл
		НоваяСтрока = НайденныеКонтакты.Добавить();
		НоваяСтрока.Ссылка               = Стр.Контакт;
		НоваяСтрока.Представление        = Стр.Представление;
		НоваяСтрока.НаименованиеКонтакта = Стр.Наименование + ?(ПустаяСтрока(Стр.НаименованиеВладельца), "", " (" + Стр.НаименованиеВладельца + ")");
		НоваяСтрока.ИмяСправочника       = Стр.Контакт.Метаданные().Имя;
	КонецЦикла;
	
КонецПроцедуры

// Формирует массив метаданных возможных типов контактов.
//
// Возвращаемое значение:
//   Массив   - массив содержащий метаданные возможных типов контактов.
//
Функция ПолучитьМассивМетаданныхКонтакты()
	
	МассивОписанияКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	МассивМетаданных = Новый Массив;
	Для каждого ЭлементМассиваОписания Из МассивОписанияКонтактов Цикл
	
		МассивМетаданных.Добавить(Метаданные.Справочники[ЭлементМассиваОписания.Имя]);
	
	КонецЦикла;
	
	Возврат МассивМетаданных;
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
//  Основные процедуры и функции поиска контактов.

// Возвращает таблицу всех контактов, связанных с предметом взаимодействия.
// Параметры:
// Предмет - предмет взаимодействия,
// ВключатьEmail - вернуть e-mail адреса даже если контакт не определен.
//
// Возвращаемое значение:
//   ТаблицаЗначений  - таблица значений содержащая информацию о контактах.
//
Функция ПолучитьВсеКонтактыПоПредметуИлиЦепочке(Предмет, ВключатьEmail)
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Предмет) Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаПоискКонтактовПоЦепочкеВзаимодействий(Истина);
	Иначе
		ТекстЗапроса = ПолучитьТекстЗапросаПоискКонтактовПоЦепочкеВзаимодействий(Истина);
		ИмяМетаданных = Предмет.Метаданные().ПолноеИмя();
		ТекстЗапроса = ТекстЗапроса 
		         + ВзаимодействияПереопределяемый.ПолучитьТекстЗапросаПоискКонтактовПоПредмету(Ложь, ИмяМетаданных, Истина);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьТекстЗапросаНаПолучениеИнформацииОКонтактах(ВключатьEmail);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Предмет", Предмет);
	ТаблицаКонтакты = Запрос.Выполнить().Выгрузить();
	
	ТаблицаКонтакты.Колонки.Добавить("ПредставлениеНаименования");
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтакты Цикл
		СтрокаТаблицы.ПредставлениеНаименования = СтрокаТаблицы.Наименование 
		    + ?(ПустаяСтрока(СтрокаТаблицы.НаименованиеВладельца),
		        "",
		        " (" + СтрокаТаблицы.НаименованиеВладельца + ")");
	КонецЦикла;
	
	Возврат ТаблицаКонтакты;
	
КонецФункции

// Возвращает текст запроса, отбирающего все контакты по цепочке взаимодействий.
// Параметры:
//  ПомещатьВоВременнуюТаблицу - флаг помещения промежуточных результатов во временную таблицу.
//
Функция ПолучитьТекстЗапросаПоискКонтактовПоЦепочкеВзаимодействий(ПомещатьВоВременнуюТаблицу)
	
	СписокПоиска = Новый СписокЗначений;
	СписокПоиска.Добавить("Встреча.Участники",                                 "Контакт");
	СписокПоиска.Добавить("ЗапланированноеВзаимодействие.Участники",           "Контакт");
	СписокПоиска.Добавить("ТелефонныйЗвонок",                                  "АбонентКонтакт");
	СписокПоиска.Добавить("ЭлектронноеПисьмоВходящее",                         "ОтправительКонтакт");
	СписокПоиска.Добавить("ЭлектронноеПисьмоВходящее.ПолучателиПисьма",        "Контакт");
	СписокПоиска.Добавить("ЭлектронноеПисьмоВходящее.ПолучателиКопий",         "Контакт");
	СписокПоиска.Добавить("ЭлектронноеПисьмоВходящее.ПолучателиОтвета",        "Контакт");
	СписокПоиска.Добавить("ЭлектронноеПисьмоИсходящее.ПолучателиПисьма",       "Контакт");
	СписокПоиска.Добавить("ЭлектронноеПисьмоИсходящее.ПолучателиКопий",        "Контакт");
	СписокПоиска.Добавить("ЭлектронноеПисьмоИсходящее.ПолучателиОтвета",       "Контакт");
	СписокПоиска.Добавить("ЭлектронноеПисьмоИсходящее.ПолучателиСкрытыхКопий", "Контакт");
	
	ТекстЗапроса = "";
	ТекстПроРазрешенные = " РАЗРЕШЕННЫЕ";
	ТекстВременнаяТаблица = ?(
	ПомещатьВоВременнуюТаблицу,
	"ПОМЕСТИТЬ ТаблицаКонтакты
	|",
	"");
	ТекстОбъединить = "";
	ШаблонУсловияНаСсылки = ПолучитьШаблонУсловияНаСсылкиКонтактовДляЗапроса();
	
	Для Каждого ЭлементСписка Из СписокПоиска Цикл
		ИмяТаблицы = ЭлементСписка.Значение;
		ИмяПоля    = ЭлементСписка.Представление;
		УсловиеНаСсылки = СтрЗаменить(ШаблонУсловияНаСсылки, "%ИмяПоля%", ИмяПоля);
		
		ТекстЗапроса = ТекстЗапроса + (ТекстОбъединить 
		+ "ВЫБРАТЬ" + ТекстПроРазрешенные + " РАЗЛИЧНЫЕ
		|	Таблица." + ИмяПоля + "
		|" + ТекстВременнаяТаблица + "ИЗ
		|	Документ." + ИмяТаблицы + " КАК Таблица
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыВзаимодействий
		|	ПО Таблица.Ссылка = ПредметыВзаимодействий.Взаимодействие
		|	ГДЕ
		|		ПредметыВзаимодействий.Предмет = &Предмет
		|	И (" + УсловиеНаСсылки + ")");
		
		ТекстПроРазрешенные = "";
		ТекстВременнаяТаблица = "";
		ТекстОбъединить = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает таблицу всех контактов, связанных с EMail.
//
// Параметры:
//  Адрес - Строка - адрес электронной почты для поиска.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений, которая содержит информацию о контактах.
//
Функция ПолучитьВсеКонтактыПоEmail(Адрес)
	
	Если ПустаяСтрока(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаДляПоискаПоEmail(Ложь);
	
	Запрос.УстановитьПараметр("Адрес", Адрес);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает таблицу всех контактов, связанных со списком EMail.
//
// Параметры:
//  Адрес - Строка - адрес электронной почты для поиска.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса  - выборка из результата запроса содержащая информацию о контактах.
//
Функция ПолучитьВсеКонтактыПоСпискуEmail(СписокАдресов) Экспорт
	
	Если СписокАдресов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = СформироватьТекстЗапросаДляПоискаПоEmail(Истина,Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Адрес", СписокАдресов);
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

// Формирует строку соединения для запроса о получении информации о контакте.
//
// Параметры:
//  ВключатьEmail  - Булево - признак включения в результат запроса информации о EMail.
//  ИмяСправочника - Строка - имя справочника для которого формируется запрос.
//
// Возвращаемое значение:
//  Строка - дополнение запроса.
//
Функция ПолучитьСтрокуСоединенияДляЗапросаИнформацииОКонтактах(ВключатьEmail,ИмяСправочника)
	
	Если (Не ВключатьEmail) ИЛИ (НЕ ОбщегоНазначения.НаличиеТабличнойЧастиУСправочника(ИмяСправочника,"КонтактнаяИнформация")) Тогда
		
		Возврат "";
		
	Иначе
		
		Возврат "
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник."  + ИмяСправочника + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
		|			ПО Таблица.Ссылка = ТаблицаКонтактнаяИнформация.Ссылка
		|				И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))";
		
	КонецЕсли;
	
КонецФункции

// Формирует строку выборки поля, для получения в запросе адреса электронной почты.
//
// Параметры:
//  ВключатьEmail  - Булево - признак необходимости получения в данном запросе
//                            адреса электронной почты.
//  ИмяСправочника - Булево - имя справочника, для которого выполняется запрос.
//  ИменоватьПоле  - Булево - признак того, что поле в запросе необходимо именовать.
//
// Возвращаемое значение:
//  Строка - строка, дополняющая запрос.
//
Функция ПолучитьСтрокуПроАдресДляЗапросаИнформацииОКонтактах(ВключатьEmail,ИмяСправочника,ИменоватьПоле = Ложь)
	
	Если Не ВключатьEmail Тогда
		
		Возврат "";
		
	Иначе
		
		Если ОбщегоНазначения.НаличиеТабличнойЧастиУСправочника(ИмяСправочника,"КонтактнаяИнформация")Тогда
			Возврат ",
			|	ТаблицаКонтактнаяИнформация.АдресЭП";
		Иначе
			
			Возврат ",
			|	""""" + ?(ИменоватьПоле," КАК АдресЭП","");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Формирует текст запроса на получение информации о контактах.
//
// Параметры:
//  ВключатьEmail - Булево - признак необходимости получения информации о Email.
//
// Возвращаемое значение:
//   Строка - текст запроса.
//
Функция ПолучитьТекстЗапросаНаПолучениеИнформацииОКонтактах(ВключатьEmail)
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Таблица.Ссылка,
	|	Таблица.Наименование КАК Наименование,
	|	"""" КАК НаименованиеВладельца " + ПолучитьСтрокуПроАдресДляЗапросаИнформацииОКонтактах(ВключатьEmail,"Пользователи") + "
	|ИЗ
	|	ТаблицаКонтакты КАК ТаблицаКонтакты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Таблица" + ПолучитьСтрокуСоединенияДляЗапросаИнформацииОКонтактах(ВключатьEmail,"Пользователи") + "
	|		ПО ТаблицаКонтакты.Контакт = Таблица.Ссылка
	|ГДЕ
	|	(НЕ Таблица.ПометкаУдаления)
	|";
		
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Таблица.Ссылка,
			|	Таблица.Наименование,
			|	""""" + ПолучитьСтрокуПроАдресДляЗапросаИнформацииОКонтактах(ВключатьEmail,ЭлементМассиваОписания.Имя) + "
			|ИЗ
			|	ТаблицаКонтакты КАК ТаблицаКонтакты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник." + ЭлементМассиваОписания.Имя + " КАК Таблица"  + ПолучитьСтрокуСоединенияДляЗапросаИнформацииОКонтактах(ВключатьEmail,ЭлементМассиваОписания.Имя) + "
			|		ПО ТаблицаКонтакты.Контакт = Таблица.Ссылка
			|ГДЕ
			|	(НЕ Таблица.ПометкаУдаления)
			|	"+?(ЭлементМассиваОписания.Иерархический," И (НЕ Таблица.Ссылка.ЭтоГруппа)","");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстУпорядочитьПо = "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	ТекстЗапроса = ТекстЗапроса + ТекстУпорядочитьПо;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для поиска контактов по Email.
//
// Параметры:
//  ПоискПоСписку  - Булево - признак того, что в качестве параметра передается массив значений.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция СформироватьТекстЗапросаДляПоискаПоEmail(ПоискПоСписку,ИтогиПоEmail = Ложь)
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаКонтактнойИнформации.Ссылка КАК Контакт,
	|	ТаблицаКонтактнойИнформации.Представление,
	|	"""" КАК НаименованиеВладельца,
	|	ТаблицаКонтактнойИнформации.Ссылка.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
	|ГДЕ
	|	ТаблицаКонтактнойИнформации.АдресЭП = &Адрес
	|	И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ПометкаУдаления)
	|	И ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаКонтактнойИнформации.Ссылка,
			|	ТаблицаКонтактнойИнформации.Представление,
			|	" + ?(ЭлементМассиваОписания.ЕстьВладелец," ТаблицаКонтактнойИнформации.Ссылка.Владелец.Наименование","""""") + ",
			|	ТаблицаКонтактнойИнформации.Ссылка." + ЭлементМассиваОписания.ИмяРеквизитаПредставлениеКонтакта + " КАК Наименование
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
			|ГДЕ
			|	ТаблицаКонтактнойИнформации.АдресЭП = &Адрес
			|  И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ПометкаУдаления)
			|	И ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			|  "+?(ЭлементМассиваОписания.Иерархический," И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ЭтоГруппа)","");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Если ИтогиПоEmail Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ИТОГИ ПО
		|	Представление";
	КонецЕсли;
	
	Если ПоискПоСписку Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "= &Адрес", "В (&Адрес)");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для поиска контактов по телефону и выполняет его.
//
// Параметры:
//  Телефон - Строка - строка, содержащая телефон.
//  Форма   - УправляемаяФорма - Форма, для которой выполняется операция.
//
// Возвращаемое значение:
//  Булево - Истина, если найден хотя бы один контакт.
//
Функция ПолучитьВсеКонтактыПоТелефону(Телефон,Форма) Экспорт
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаКонтактнойИнформации.Ссылка КАК Контакт,
	|	ПОДСТРОКА(ТаблицаКонтактнойИнформации.Представление, 1, 1000)КАК Представление,
	|	ТаблицаКонтактнойИнформации.Ссылка.Наименование КАК Наименование,
	|	"""" КАК НаименованиеВладельца
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
	|ГДЕ
	|	ПОДСТРОКА(ТаблицаКонтактнойИнформации.Представление, 1, 100) = &Телефон
	|	И (ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс))
	|  И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ПометкаУдаления)
	|";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			ТекстЗапроса =ТекстЗапроса +  "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаКонтактнойИнформации.Ссылка,
			|	ПОДСТРОКА(ТаблицаКонтактнойИнформации.Представление, 1, 1000),
			|	ТаблицаКонтактнойИнформации.Ссылка." + ЭлементМассиваОписания.ИмяРеквизитаПредставлениеКонтакта + " КАК Наименование,
			|	" + ?(ЭлементМассиваОписания.ЕстьВладелец," ТаблицаКонтактнойИнформации.Ссылка.Владелец.Наименование","""""") + "
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
			|ГДЕ
			|	ПОДСТРОКА(ТаблицаКонтактнойИнформации.Представление, 1, 100) = &Телефон
			|	И (ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
			|			ИЛИ ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс))
			|  И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ПометкаУдаления)
			|  "+?(ЭлементМассиваОписания.Иерархический," И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ЭтоГруппа)","");
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Телефон", Телефон);
	ТаблицаКонтакты = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаКонтакты = Неопределено ИЛИ ТаблицаКонтакты.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьНайденныеКонтакты(ТаблицаКонтакты,Форма.НайденныеКонтакты);
	
	Возврат Истина;
	
КонецФункции

// Формирует текст запроса для поиска контактов по началу наименования и выполняет его.
//
// Параметры:
//  Наименование - Строка - строка, содержащая начало наименования контакта.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Результат выполненного запроса выгруженный в таблицу значений.
//
Функция ПолучитьВсеКонтактыПоНачалуНаименования(Наименование) Экспорт
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Контакт,
	|	Таблица.Наименование КАК Наименование,
	|	"""" КАК НаименованиеВладельца,
	|	"""" КАК Представление
	|ИЗ
	|	Справочник.Пользователи КАК Таблица
	|ГДЕ
	|	Таблица.Наименование ПОДОБНО &Наименование
	|	И (НЕ Таблица.ПометкаУдаления)
	|";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			ТекстЗапроса =ТекстЗапроса +  "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаСправочника.Ссылка,
			|	ТаблицаСправочника." + ЭлементМассиваОписания.ИмяРеквизитаПредставлениеКонтакта + " КАК Наименование,
			|	" + ?(ЭлементМассиваОписания.ЕстьВладелец," ТаблицаСправочника.Владелец.Наименование","""""") + ",
			|	""""
			|ИЗ
			|	Справочник." +ЭлементМассиваОписания.Имя +" КАК ТаблицаСправочника
			|ГДЕ
			|	ТаблицаСправочника.Наименование ПОДОБНО &Наименование "+?(ЭлементМассиваОписания.Иерархический, " И (НЕ ТаблицаСправочника.ЭтоГруппа)","")+"
			|	И (НЕ ТаблицаСправочника.ПометкаУдаления)";
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Наименование", Наименование + "%");
	Возврат Запрос.Выполнить().Выгрузить(); 
	
КонецФункции

// Формирует текст запроса для поиска контактов по началу наименования с адресами электронной почты 
// и выполняет его.
//
// Параметры:
//  Наименование - Строка - строка, содержащая начало наименования контакта.
//  Форма        - УправляемаяФорма - Форма, для которой выполняется операция.
//
// Возвращаемое значение:
//  Булево - Истина, если найден хотя бы один контакт.
//
Функция ПолучитьВсеКонтактыПоНачалуНаименованияСАдресамиЭлектроннойПочты(Наименование,Форма) Экспорт
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =
	" ВЫБРАТЬ
	|	Таблица.Ссылка КАК Контакт,
	|	Таблица.Наименование КАК Наименование,
	|	"""" КАК НаименованиеВладельца,
	|	ТаблицаКонтактнаяИнформация.АдресЭП КАК Представление
	|ИЗ
	|	Справочник.Пользователи КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
	|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = Таблица.Ссылка)
	|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	Таблица.Наименование ПОДОБНО &Наименование
	|	И (НЕ Таблица.ПометкаУдаления)";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			ТекстЗапроса =ТекстЗапроса +  "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаСправочника.Ссылка,
			|	ТаблицаСправочника." + ЭлементМассиваОписания.ИмяРеквизитаПредставлениеКонтакта + " КАК Наименование,
			|	" + ?(ЭлементМассиваОписания.ЕстьВладелец," ТаблицаСправочника.Владелец.Наименование","""""") + ",
			|	ТаблицаКонтактнаяИнформация.АдресЭП
			|ИЗ
			|	Справочник." +ЭлементМассиваОписания.Имя +" КАК ТаблицаСправочника
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
			|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = ТаблицаСправочника.Ссылка)
			|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
			|ГДЕ
			|	ТаблицаСправочника.Наименование ПОДОБНО &Наименование "+?(ЭлементМассиваОписания.Иерархический," И (НЕ ТаблицаСправочника.ЭтоГруппа)","")+"
			|	И (НЕ ТаблицаСправочника.ПометкаУдаления)";
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Наименование", Наименование + "%");
	ТаблицаКонтакты = Запрос.Выполнить().Выгрузить(); 
	
	Если ТаблицаКонтакты = Неопределено ИЛИ ТаблицаКонтакты.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьНайденныеКонтакты(ТаблицаКонтакты,Форма.НайденныеКонтакты);
	Возврат Истина;
	
КонецФункции

// Формирует шаблон условия для запроса, на соответствие получаемого поля в запросе типу возможного контакта.
//
// Возвращаемое значение:
//  Строка   - сформированный текст шаблона условия.
//
Функция ПолучитьШаблонУсловияНаСсылкиКонтактовДляЗапроса()
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстКВозврату =  "Таблица.%ИмяПоля% ССЫЛКА Справочник.Пользователи";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
	
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			ТекстКВозврату = ТекстКВозврату + "
			|ИЛИ Таблица.%ИмяПоля% ССЫЛКА Справочник." + ЭлементМассиваОписания.Имя;
		КонецЕсли;
	
	КонецЦикла;
		
	Возврат ТекстКВозврату;
	
КонецФункции

// Осуществляет поиск контактов по Email или по домену Email.
//
// Параметры:
//  СтрокаПоиска - Строка - служит основой для поиска.
//  ПоДомену     - Булево - признак того, что поиск необходимо осуществлять по домену.
//  Форма        - УправляемаяФорма - Форма, для которой выполняется операция.	
//
// Возвращаемое значение:
//  Булево - Истина, если найден хотя бы один контакт.
//
Функция НайтиПоEmail(СтрокаПоиска,ПоДомену,Форма) Экспорт
	
	Если ПоДомену Тогда
		ТаблицаКонтакты = ПолучитьКонтактыПоДоменномуАдресу(СтрокаПоиска);
	Иначе
		ТаблицаКонтакты = ПолучитьВсеКонтактыПоEmail(СтрокаПоиска);
	КонецЕсли;
	
	Если ТаблицаКонтакты = Неопределено ИЛИ ТаблицаКонтакты.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьНайденныеКонтакты(ТаблицаКонтакты, Форма.НайденныеКонтакты);
	
	Возврат Истина;
	
КонецФункции

// Возвращает контакты по доменному адресу.
//
// Параметры:
//  ИмяДомена - Строка - имя домена, по которому осуществляется поиск.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица, содержащая информацию о найденных контактах.
//
Функция ПолучитьКонтактыПоДоменномуАдресу(ИмяДомена)
	
	Если ПустаяСтрока(ИмяДомена) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПерваяТаблица = Истина;
	ТекстЗапроса = "";
	
	МассивОписанияКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	Для каждого ЭлементМассиваОписания Из МассивОписанияКонтактов Цикл
		
		Если ЭлементМассиваОписания.ИскатьПоДомену Тогда
			
			Если ПерваяТаблица Тогда
				
				ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ ";
				
			Иначе
				
				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ";
				
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|	ТаблицаКонтактнаяИнформация.Ссылка КАК Контакт,
			|	ТаблицаКонтактнаяИнформация.Ссылка." + ЭлементМассиваОписания.ИмяРеквизитаПредставлениеКонтакта + " КАК Наименование,
			|	ТаблицаКонтактнаяИнформация.АдресЭП КАК Представление,
			|	" + ?(ЭлементМассиваОписания.ЕстьВладелец,"ТаблицаКонтактнаяИнформация.Ссылка.Владелец.Наименование ","""""") + ?(ПерваяТаблица," КАК НаименованиеВладельца ","") +" 
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
			|ГДЕ
			|	ТаблицаКонтактнаяИнформация.АдресЭП ПОДОБНО &СтрокаПоиска";
			
			ПерваяТаблица = Ложь;
		КонецЕсли;	
	КонецЦикла;
	
	Если НЕ ПерваяТаблица Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	АдресЭП";
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СтрокаПоиска", "%@" + ИмяДомена);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Выполняет поиск контактов по строке.
//
// Параметры:
//  Форма            - УправляемаяФорма - форма для которой осуществляется поиск.
//  ДляАдреснойКниги - Булево - признак того, что поиск осуществляется для адресной книги.
//
// Возвращаемое значение:
//  Строка           - сообщение пользователю по результатам поиска, если такое необходимо.
//
Функция ОсуществитьПоискКонтактовПоСтроке(Форма,ДляАдреснойКниги = Ложь) Экспорт
	
	Форма.НайденныеКонтакты.Очистить();
	
	Если ПустаяСтрока(Форма.СтрокаПоиска) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Запретить
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПолнотекстовыйПоиск") Тогда
		Возврат НСтр("ru = 'Использование индекса полнотекстового поиска данных запрещено!'");
	КонецЕсли;
	
	МассивМетаданных = ПолучитьМассивМетаданныхКонтакты();
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(Форма.СтрокаПоиска, 101);
	СписокПоиска.ОбластьПоиска = МассивМетаданных;

	Попытка
		СписокПоиска.ПерваяЧасть();
	Исключение
		Возврат НСтр("ru = 'При выполнении поиска произошла ошибка, попробуйте изменить выражение поиска.'");
	КонецПопытки;
	
	КоличествоНайденныхЭлементов = СписокПоиска.Количество();
	Если КоличествоНайденныхЭлементов = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	СоответствиеОписаний = Новый Соответствие;
	Для Инд = 0 По Мин(КоличествоНайденныхЭлементов, 100)-1 Цикл
		ЭлементСписка = СписокПоиска.Получить(Инд);
		МассивСсылок.Добавить(ЭлементСписка.Значение);
		СоответствиеОписаний.Вставить(ЭлементСписка.Значение, ЭлементСписка.Описание);
	КонецЦикла;
	
	Если ДляАдреснойКниги Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаПоискКонтактовПоСтрокеСEmail();
	Иначе	
		ТекстЗапроса = ПолучитьТекстЗапросаПоискКонтактовПоСтроке();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Форма.НайденныеКонтакты.Добавить();
		НоваяСтрока.Ссылка = Выборка.Контакт;
		НоваяСтрока.Представление = ?(ДляАдреснойКниги ,Выборка.Представление,СоответствиеОписаний.Получить(Выборка.Контакт));
		НоваяСтрока.НаименованиеКонтакта = Выборка.Наименование 
		          + ?(ПустаяСтрока(Выборка.НаименованиеВладельца),
		              "",
		              " (" + Выборка.НаименованиеВладельца + ")");
	КонецЦикла;
	
	Возврат ?(КоличествоНайденныхЭлементов < 101, "", НСтр("ru = 'Уточните параметры поиска. В списке отображены не все найденные контакты!'"));
	
КонецФункции

// Формирует текст запроса для поиска контактов по строке.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ПолучитьТекстЗапросаПоискКонтактовПоСтроке()
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ТаблицаСправочника.Ссылка КАК Контакт,
	|	ТаблицаСправочника.Наименование КАК Наименование,
	|	"""" КАК НаименованиеВладельца,
	|	"""" КАК Представление
	|ИЗ
	|	Справочник.Пользователи КАК ТаблицаСправочника
	|ГДЕ
	|	ТаблицаСправочника.Ссылка В(&МассивСсылок)
	|	И (НЕ ТаблицаСправочника.ПометкаУдаления)";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса =ТекстЗапроса +  "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСправочника.Ссылка,
		|	ТаблицаСправочника." + ЭлементМассиваОписания.ИмяРеквизитаПредставлениеКонтакта + " КАК Наименование,
		|	" + ?(ЭлементМассиваОписания.ЕстьВладелец," ТаблицаСправочника.Владелец.Наименование","""""") + ",
		|	""""
		|ИЗ
		|	Справочник." +ЭлементМассиваОписания.Имя +" КАК ТаблицаСправочника
		|ГДЕ
		|	ТаблицаСправочника.Ссылка В(&МассивСсылок) "+?(ЭлементМассиваОписания.Иерархический," И (НЕ ТаблицаСправочника.ЭтоГруппа)","")+"
		|	И (НЕ ТаблицаСправочника.ПометкаУдаления)";
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для поиска контактов по строке с получением информации о адресах EMail.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ПолучитьТекстЗапросаПоискКонтактовПоСтрокеСEmail()
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ТаблицаСправочника.Ссылка КАК Контакт,
	|	ТаблицаСправочника.Наименование КАК Наименование,
	|	"""" КАК НаименованиеВладельца,
	|	ТаблицаКонтактнаяИнформация.АдресЭП КАК Представление
	|ИЗ
	|	Справочник.Пользователи КАК ТаблицаСправочника
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
	|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = ТаблицаСправочника.Ссылка)
	|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	ТаблицаСправочника.Ссылка В(&МассивСсылок)
	|	И (НЕ ТаблицаСправочника.ПометкаУдаления)";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса =ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСправочника.Ссылка,
		|	ТаблицаСправочника." + ЭлементМассиваОписания.ИмяРеквизитаПредставлениеКонтакта + " КАК Наименование,
		|	" + ?(ЭлементМассиваОписания.ЕстьВладелец," ТаблицаСправочника.Владелец.Наименование","""""") + ",
		|	ТаблицаКонтактнаяИнформация.АдресЭП
		|ИЗ
		|	Справочник." +ЭлементМассиваОписания.Имя +" КАК ТаблицаСправочника
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
		|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = ТаблицаСправочника.Ссылка)
		|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|ГДЕ
		|	ТаблицаСправочника.Ссылка В(&МассивСсылок) "+?(ЭлементМассиваОписания.Иерархический," И (НЕ ТаблицаСправочника.ЭтоГруппа)","")+"
		|	И (НЕ ТаблицаСправочника.ПометкаУдаления)";
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Получает контакты по предмету взаимодействия, устанавливает текущей страницей формы поиска страницу
// поиска контактов по предмету.
//
// Параметры:
//  ЭлементыФормы      - КоллекцияЭлементовУправляемойФормы - предоставляет доступ к элементам формы.
//  Предмет            - СправочникСсылка, ДокументСсылка - предмет взаимодействия.
//  КонтактыПоПредмету - ТаблицаЗначений - реквизит формы, в который помещаются найденные контакты.
//  ВключатьEmail      - Булево - признак необходимости получения данных о электронном адресе контакта.
//
Процедура ЗаполнитьКонтактыПоПредмету(ЭлементыФормы, Предмет, КонтактыПоПредмету, ВключатьEmail) Экспорт
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		ЭлементыФормы.СтраницаВсеКонтактыПоПредмету.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ТаблицаКонтакты = ПолучитьВсеКонтактыПоПредметуИлиЦепочке(Предмет, ВключатьEmail);
	Если (ТаблицаКонтакты = Неопределено) ИЛИ (ТаблицаКонтакты.Количество() = 0) Тогда
		ЭлементыФормы.СтраницаВсеКонтактыПоПредмету.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтакты Цикл
		НоваяСтрока = КонтактыПоПредмету.Добавить();
		НоваяСтрока.Ссылка = СтрокаТаблицы.Ссылка;
		НоваяСтрока.Наименование = СтрокаТаблицы.Наименование;
		НоваяСтрока.ИмяСправочника = СтрокаТаблицы.Ссылка.Метаданные().Имя;
		НоваяСтрока.ПредставлениеНаименования = СтрокаТаблицы.ПредставлениеНаименования;
		Если ВключатьEmail Тогда
			НоваяСтрока.Адрес = СтрокаТаблицы.АдресЭП;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыФормы.СтраницыСписки.ТекущаяСтраница = ЭлементыФормы.СтраницаВсеКонтактыПоПредмету;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////
//  Процедуры и функции получения данных контактов, взаимодействий и предметов взаимодействий.

// Возвращает ссылку на текущий предмет взаимодействия.
// Параметры:
//  Ссылка - ссылка на взаимодействие.
//
// Возвращаемое значение:
//  СправочникОбъект, ДокументОбъект   - предмет взаимодействия.
//
Функция ПолучитьЗначениеПредмета(Ссылка) Экспорт

	Реквизиты = СтруктураРеквизитовВзаимодействия(Ссылка);
	Возврат ?(Реквизиты = Неопределено, Неопределено, Реквизиты.Предмет);
	
КонецФункции

// Возвращает структуру доп. реквизитов взаимодействия, хранящихся в регистре Предметы и папки взаимодействий.
// Параметры:
//  Ссылка - ссылка на взаимодействие.
//
// Возвращаемое значение:
//  Структура   - структура содержащая доп реквизиты.
//
Функция СтруктураРеквизитовВзаимодействия(Ссылка) Экспорт
	
	СтруктураВозврата = ВзаимодействияКлиентСервер.ПустаяСтруктураРеквизитыВзаимодействия();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПредметыПапкиВзаимодействий.Предмет,
	|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма КАК Папка,
	|	ПредметыПапкиВзаимодействий.Рассмотрено,
	|	ПредметыПапкиВзаимодействий.РассмотретьПосле
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Взаимодействие = &Взаимодействие";
	
	Запрос.УстановитьПараметр("Взаимодействие", Ссылка);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает ссылку на текущую папку электронного письма.
// Параметры:
//  Ссылка - ссылка на взаимодействие.
//
// Возвращаемое значение:
//  СправочникОбъект, ДокументОбъект   - предмет взаимодействия.
//
Функция ПолучитьПапкуЭлектронногоПисьма(Письмо) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПредметыВзаимодействий.ПапкаЭлектронногоПисьма
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыВзаимодействий
	|ГДЕ
	|	ПредметыВзаимодействий.Взаимодействие = &Взаимодействие";
	
	Запрос.УстановитьПараметр("Взаимодействие",Письмо);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.ПапкиЭлектронныхПисем.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ПапкаЭлектронногоПисьма;
	КонецЕсли;
	
КонецФункции

// Получает значения реквизитов документа взаимодействия, хранящиеся в регистре и 
//  устанавливает их в соответствующие реквизиты формы.
// Параметры:
//  Форма - УправляемаяФорма - форма документа взаимодействия.
//
Процедура УстановитьРеквизитыФормыВзаимодействияПоДаннымРегистра(Форма) Экспорт
	
	СтруктураРеквизитов = СтруктураРеквизитовВзаимодействия(Форма.Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(Форма, СтруктураРеквизитов, "Предмет, Рассмотрено, РассмотретьПосле");
	
КонецПроцедуры
///////////////////////////////////////////////////////////////////////////////////
//  Процедуры и функции работы с взаимодействиями.

// Получает массив описания возможных контактов и формирует из него список значений
// контактов, которые можно создать интерактивно.
//
// Возвращаемое значение:
//  СписокЗначений - список значений, который содержит контакты, которые можно создать интерактивно.
//
Функция СоздатьСписокЗначенийИнтерактивноСоздаваемыхКонтактов() Экспорт
	
	МассивОписанияВозможныхТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	СписокКонтактовКоторыеМожноСоздать = Новый СписокЗначений;
	
	Для каждого ЭлементМассива Из МассивОписанияВозможныхТиповКонтактов Цикл
		
		Если ЭлементМассива.ВозможностьИнтерактивногоСоздания И ПравоДоступа("Добавление", Метаданные.Справочники[ЭлементМассива.Имя])Тогда
			
			СписокКонтактовКоторыеМожноСоздать.Добавить(ЭлементМассива.Имя, ЭлементМассива.Представление);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокКонтактовКоторыеМожноСоздать;
	
КонецФункции

// Устанавливает предмет взаимодействия по данным заполнения документа взаимодействия.
//
// Параметры:
//  Параметры  - Структура - параметры, переданные при создании документа взаимодействия.
//  Предмет    - ДокументСсылка, СправочникСсылка - в данную процедуру устанавливается предмет
//              взаимодействия согласно данным заполнения.
//
Процедура УстановитьПредметПоДаннымЗаполнения(Параметры,Предмет) Экспорт
	
	Если ВзаимодействияКлиентСервер.ЯвляетсяПредметом(Параметры.Основание) Тогда
		
		Предмет = Параметры.Основание;
		
	ИначеЕсли ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Параметры.Основание) Тогда
		
		Предмет = ПолучитьЗначениеПредмета(Параметры.Основание);
		
	ИначеЕсли ТипЗнч(Параметры.Основание) = Тип("Структура") И Параметры.Основание.Свойство("Основание") 
		И ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Параметры.Основание.Основание) Тогда
		
		Предмет = ПолучитьЗначениеПредмета(Параметры.Основание.Основание);
		
	ИначеЕсли Параметры.ЗначенияЗаполнения.Свойство("Предмет") Тогда
		
		Предмет = Параметры.ЗначенияЗаполнения.Предмет;
		
	ИначеЕсли Не Параметры.ЗначениеКопирования.Пустая() Тогда
		
		Предмет = ПолучитьЗначениеПредмета(Параметры.ЗначениеКопирования);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует массив участников документов взаимодействий  по табличной части документов.
//
// Параметры:
//  Ссылка - ДокументСсылка - ссылка на документ взаимодействия.
//
// Возвращаемое значение:
//  Массив - массив структур, содержащих информацию о контактах.
//
Функция ПолучитьУчастниковПоТаблице(Ссылка) Экспорт
	
	ПолноеИмяОбъекта = Ссылка.Метаданные().ПолноеИмя();
	ИмяТаблицы = ?(ТипЗнч(Ссылка) = Тип("ДокументСсылка.СообщениеSMS"), "Адресаты", "Участники");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Участники.Контакт,
	|	Участники.ПредставлениеКонтакта КАК Представление,
	|	Участники.КакСвязаться КАК Адрес
	|ИЗ
	|	" + ПолноеИмяОбъекта + "." + ИмяТаблицы + " КАК Участники
	|ГДЕ
	|	Участники.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат ПреобразоватьТаблицуКонтактовВМассив(Запрос.Выполнить().Выгрузить());
	
КонецФункции

// Формирует массив участника взаимодействия, содержащий одну структуру по переданным полям.
//
// Параметры:
//  Ссылка - ДокументСсылка - ссылка на документ взаимодействия.
//
// Возвращаемое значение:
//  Массив - массив структур, содержащих информацию о контактах.
//
Функция ПолучитьУчастникаПоПолям(Контакт, Адрес, Представление) Экспорт
	
	СтруктураКонтакта = Новый Структура("Контакт, Адрес, Представление", Контакт, Адрес, Представление);
	ФормируемыйМассив = Новый Массив;
	ФормируемыйМассив.Добавить(СтруктураКонтакта);
	Возврат ФормируемыйМассив;
	
КонецФункции

// Проверяет содержит ли входящий массив хотя бы один элемент.
//
// Параметры:
//  Контакты - Массив 
//
// Возвращаемое значение:
//  Булево - Истина, если содержит, и ложь в обратном случае.
//
Функция КонтактыЗаполнены(Контакты) Экспорт
	
	Возврат (ЗначениеЗаполнено(Контакты) И (Контакты.Количество() > 0));
	
КонецФункции

// Заполняет табличную часть участники у документов Встреча и Запланированное взаимодействие.
//
// Параметры:
//  Контакты  - Массив - массив, содержащий участников взаимодействия.
//  Участники - ТабличнаяЧастьДокумента - табличная часть документа, которая будет заполнена
//                                        на основании массива.
//
Процедура ЗаполнитьКонтактыДляВстречи(Контакты, Участники, ТипКонтактнойИнформации = Неопределено) Экспорт
	
	Если Не КонтактыЗаполнены(Контакты) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из Контакты Цикл
		
		НоваяСтрока = Участники.Добавить();
		Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
			НоваяСтрока.Контакт = ЭлементМассива.Контакт;
			НоваяСтрока.ПредставлениеКонтакта = ЭлементМассива.Представление;
			НоваяСтрока.КакСвязаться = ПреобразоватьАдресПоТипуИнформации(ЭлементМассива.Адрес, ТипКонтактнойИнформации);
		Иначе
			НоваяСтрока.Контакт = ЭлементМассива;
		КонецЕсли;
		
		ДозаполнитьПоляКонтактов(НоваяСтрока.Контакт, НоваяСтрока.ПредставлениеКонтакта, НоваяСтрока.КакСвязаться, ТипКонтактнойИнформации);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПреобразоватьАдресПоТипуИнформации(Адрес, ТипКонтактнойИнформации = Неопределено)
	
	Если ТипКонтактнойИнформации = Неопределено Или ПустаяСтрока(Адрес) Тогда
		Возврат Адрес;
	КонецЕсли;
	
	Если ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		
		МассивСтрокСТелефонами = Новый Массив;
		Для Каждого ЭлементМассива Из СтрРазделить(Адрес, ";", Ложь) Цикл
			СтруктураПолей = ВзаимодействияКлиентСервер.СтруктураПолейПоПредставлениюТелефона(ЭлементМассива);
				Если  ВзаимодействияКлиентСервер.КорректноВведенНомерТелефона(СтруктураПолей) Тогда
					МассивСтрокСТелефонами.Добавить(ЭлементМассива);
				КонецЕсли;
		КонецЦикла;
		
		Если МассивСтрокСТелефонами.Количество() > 0 Тогда
			Возврат СтрСоединить(МассивСтрокСТелефонами, ";");
		КонецЕсли;
		
	Иначе
		
		Возврат Адрес
		
	КонецЕсли;
	
КонецФункции

// Заполняет значения прочих полей в строках табличной части Участники документов взаимодействий.
//
// Параметры:
//  Контакт                 - СправочникСсылка - контакт, на основании данных которого будут заполнены прочие поля.
//  Представление           - Строка - представление контакта.
//  Адрес                   - Строка - контактная информация контакта.
//  ТипКонтактнойИнформации - Перечисления.ТипыКонтактнойИнформации - контактная информация контакта.
//
Процедура ДозаполнитьПоляКонтактов(Контакт, Представление, Адрес, ТипКонтактнойИнформации = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		Возврат;
	ИначеЕсли Не ПустаяСтрока(Представление) И Не ПустаяСтрока(Адрес) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним поле представление.
	Если ПустаяСтрока(Представление) Тогда
		Представление = ?(ЗначениеЗаполнено(Контакт), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контакт,"Наименование"),"");
	КонецЕсли;
	
	// Для всех типов кроме электронной почты.
	Если ТипКонтактнойИнформации <> Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		
		Если ПустаяСтрока(Адрес) Тогда
			ВзаимодействияВызовСервера.ПолучитьПредставлениеИВсюКонтактнуюИнформациюКонтакта(
				Контакт, "", Адрес, ТипКонтактнойИнформации);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	// Для адреса электронной почты проверим, введен он или нет.
	Если СтрНайти(Адрес, "@") <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Адреса = ВзаимодействияВызовСервера.ПолучитьНаименованиеИАдресаЭлектроннойПочтыКонтакта(Контакт);
	Если Адреса <> Неопределено И Адреса.Адреса.Количество() > 0 Тогда
		Элемент = Адреса.Адреса.Получить(0);
		Адрес = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

// Формирует строку-представление списка участников взаимодействия.
//
// Параметры:
//  Объект - ДокументОбъект - документ, на основании табличной части участники которого формируется строка.
//
Процедура СформироватьСписокУчастников(Объект) Экспорт
	
	Если  ТипЗнч(Объект) = Тип("ДокументОбъект.СообщениеSMS") Тогда
		ИмяТаблицы = "Адресаты";
	Иначе 
		ИмяТаблицы = "Участники";
	КонецЕсли;
	
	Объект.СписокУчастников = "";
	Для Каждого Участник Из Объект[ИмяТаблицы] Цикл
		Объект.СписокУчастников = Объект.СписокУчастников + ?(Объект.СписокУчастников = "", "", "; ") + Участник.ПредставлениеКонтакта;
	КонецЦикла;
	
КонецПроцедуры

// Формирует список выбора для быстрого отбора по типу взаимодействий при использовании только почтового клиента.
//
// Параметры:
//  Элемент - ЭлементФормы - элемент, для которого формируется список выбора.
//
Процедура СформироватьСписокВыбораТипВзаимодействияТолькоПочта(Элемент)
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить("ВсеПисьма", НСтр("ru = 'Все письма'"));
	Элемент.СписокВыбора.Добавить("ВходящиеПисьма", НСтр("ru = 'Входящие'"));
	Элемент.СписокВыбора.Добавить("ПисьмаЧерновики", НСтр("ru = 'Черновики'"));
	Элемент.СписокВыбора.Добавить("ИсходящиеПисьма", НСтр("ru = 'Исходящие'"));
	Элемент.СписокВыбора.Добавить("Отправленные", НСтр("ru = 'Отправленные'"));
	Элемент.СписокВыбора.Добавить("УдаленныеПисьма", НСтр("ru = 'Удаленные'"));
	
КонецПроцедуры

// Получает адреса электронной почты для массива контактов.
//
// Параметры:
//  МассивКонтактов - Массив - массив ссылок на контакты.
//  Группа - Строка - имя группы в письме для которой ищутся адреса, например "Получатели", "Получатели копий".
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица содержащая контакты и адреса их электронной почты.
//
Функция ПолучитьАдресаЭлектроннойПочтыДляМассиваКонтактов(МассивКонтактов,Группа = "") Экспорт
	
	Если МассивКонтактов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаКонтактнаяИнформация.АдресЭП КАК Адрес,
	|	ТаблицаКонтакт.Ссылка КАК Контакт
	|ПОМЕСТИТЬ КонтактыАдреса
	|ИЗ
	|	Справочник.Пользователи КАК ТаблицаКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
	|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = ТаблицаКонтакт.Ссылка)
	|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	(ТаблицаКонтакт.Ссылка В (&МассивКонтактов)
	|			ИЛИ ИСТИНА В
	|				(ВЫБРАТЬ
	|					ИСТИНА
	|				ИЗ
	|					РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|				ГДЕ
	|					СоставыГруппПользователей.Пользователь = ТаблицаКонтакт.Ссылка
	|					И СоставыГруппПользователей.ГруппаПользователей В (&МассивКонтактов)))";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаКонтактнаяИнформация.АдресЭП,
			|	ТаблицаКонтакт.Ссылка
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + " КАК ТаблицаКонтакт
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
			|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = ТаблицаКонтакт.Ссылка)
			|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
			|ГДЕ
			|	ТаблицаКонтакт.Ссылка В(&МассивКонтактов) " + ?(ЭлементМассиваОписания.Иерархический," И НЕ ТаблицаКонтакт.ЭтоГруппа","");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтактыАдреса.Контакт,
	|	ПРЕДСТАВЛЕНИЕ(КонтактыАдреса.Контакт) КАК Представление,
	|	&Группа
	|ИЗ
	|	КонтактыАдреса КАК КонтактыАдреса
	|УПОРЯДОЧИТЬ ПО
	|	Контакт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактыАдреса.Контакт КАК Контакт,
	|	КонтактыАдреса.Адрес КАК Адрес
	|ИЗ
	|	КонтактыАдреса КАК КонтактыАдреса
	|УПОРЯДОЧИТЬ ПО
	|	Контакт
	|ИТОГИ
	|ПО
	|	Контакт
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивКонтактов",МассивКонтактов);
	Запрос.УстановитьПараметр("Группа",Группа);
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаРезультат = Результат[1].Выгрузить();
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	
	ТаблицаРезультат.Колонки.Добавить("Адрес", Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100)));
	ТаблицаРезультат.Колонки.Добавить("СписокАдресов",Новый ОписаниеТипов(МассивТипов));
	ВыборкаКонтакты = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
		ВыборкаКонтакты.Следующий();
		ВыборкаАдреса = ВыборкаКонтакты.Выбрать();
		Пока ВыборкаАдреса.Следующий() Цикл
			Если ПустаяСтрока(СтрокаТаблицы.Адрес) Тогда
				СтрокаТаблицы.Адрес = ВыборкаАдреса.Адрес;
			КонецЕсли;
			СтрокаТаблицы.СписокАдресов = СтрокаТаблицы.СписокАдресов + ?(ПустаяСтрока(СтрокаТаблицы.СписокАдресов), "", ";") + ВыборкаАдреса.Адрес;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// Получает параметры работы пользователя для исходящего электронного письма.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись, с которой будет отправлено письмо.
//  ФорматСообщения - ПеречислениеСсылка.СпособыРедактированияЭлектронныхПисем - формат письма.
//  ДляНового - Булево - признак того, что исходящее письмо создается.
//
// Возвращаемое значение:
//   Структура   - структура содержащая параметры работы пользователя для исходящего письма.
//
Функция ПолучитьПараметрыРаботыПользователяДляИсходящегоЭлектронногоПисьма(УчетнаяЗаписьЭлектроннойПочты,ФорматСообщения,ДляНового) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Подпись", Неопределено);
	СтруктураВозврата.Вставить("УведомитьОДоставке", Ложь);
	СтруктураВозврата.Вставить("УведомитьОПрочтении", Ложь);
	СтруктураВозврата.Вставить("ОтображатьТелоИсходногоПисьма", Ложь);
	СтруктураВозврата.Вставить("ВключатьТелоИсходногоПисьма", Ложь);
	
	НастройкиРаботыСПочтой = ПолучитьНастройкуРаботаСПочтой();
	ВключатьПодпись = Ложь;

	Если ДляНового Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПодписиУчетныхЗаписейЭлектроннойПочты.ВключатьПодписьДляНовыхСообщений,
		|	ПодписиУчетныхЗаписейЭлектроннойПочты.ФорматПодписиДляНовыхСообщений,
		|	ПодписиУчетныхЗаписейЭлектроннойПочты.ПодписьДляНовыхСообщенийФорматированныйДокумент,
		|	ПодписиУчетныхЗаписейЭлектроннойПочты.ПодписьДляНовыхСообщенийПростойТекст
		|ИЗ
		|	РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК ПодписиУчетныхЗаписейЭлектроннойПочты
		|ГДЕ
		|	ПодписиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = &УчетнаяЗаписьЭлектроннойПочты";
		
		Запрос.УстановитьПараметр("УчетнаяЗаписьЭлектроннойПочты",УчетнаяЗаписьЭлектроннойПочты);
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			ВключатьПодпись = Выборка.ВключатьПодписьДляНовыхСообщений;
			Если ВключатьПодпись Тогда
				ФорматПодписи                  = Выборка.ФорматПодписиДляНовыхСообщений;
				ПодписьПростойТекст            = Выборка.ПодписьДляНовыхСообщенийПростойТекст;
				ПодписьФорматированныйДокумент = Выборка.ПодписьДляНовыхСообщенийФорматированныйДокумент.Получить();
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ВключатьПодпись Тогда
			ВключатьПодпись = ?(НастройкиРаботыСПочтой.Свойство("ВключатьПодписьДляНовыхСообщений"),
			                    НастройкиРаботыСПочтой.ВключатьПодписьДляНовыхСообщений,
			                    Ложь);
			
			Если ВключатьПодпись Тогда
			
				ФорматПодписи                  = НастройкиРаботыСПочтой.ФорматПодписиДляНовыхСообщений;
				ПодписьПростойТекст            = НастройкиРаботыСПочтой.ПодписьДляНовыхСообщенийПростойТекст;
				ПодписьФорматированныйДокумент = НастройкиРаботыСПочтой.НовоеСообщениеФорматированныйДокумент;
			
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПодписиУчетныхЗаписейЭлектроннойПочты.ВключатьПодписьПриОтветеПересылке,
		|	ПодписиУчетныхЗаписейЭлектроннойПочты.ФорматПодписиПриОтветеПересылке,
		|	ПодписиУчетныхЗаписейЭлектроннойПочты.ПодписьПриОтветеПересылкеПростойТекст,
		|	ПодписиУчетныхЗаписейЭлектроннойПочты.ПодписьПриОтветеПересылкеФорматированныйДокумент
		|ИЗ
		|	РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК ПодписиУчетныхЗаписейЭлектроннойПочты
		|ГДЕ
		|	ПодписиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = &УчетнаяЗаписьЭлектроннойПочты";
		
		Запрос.УстановитьПараметр("УчетнаяЗаписьЭлектроннойПочты",УчетнаяЗаписьЭлектроннойПочты);
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			ВключатьПодпись = Выборка.ВключатьПодписьПриОтветеПересылке;
			Если ВключатьПодпись Тогда
				ФорматПодписи                  = Выборка.ФорматПодписиПриОтветеПересылке;
				ПодписьПростойТекст            = Выборка.ПодписьПриОтветеПересылкеПростойТекст;
				ПодписьФорматированныйДокумент = Выборка.ПодписьПриОтветеПересылкеФорматированныйДокумент.Получить();
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ВключатьПодпись Тогда
			
			ВключатьПодпись = ?(НастройкиРаботыСПочтой.Свойство("ВключатьПодписьПриОтветеПересылке"),
			                    НастройкиРаботыСПочтой.ВключатьПодписьПриОтветеПересылке,
			                    Ложь);
			
			Если ВключатьПодпись Тогда
				ФорматПодписи                  = НастройкиРаботыСПочтой.ФорматПодписиПриОтветеПересылке;
				ПодписьПростойТекст            = НастройкиРаботыСПочтой.ПодписьПриОтветеПересылкеПростойТекст;
				ПодписьФорматированныйДокумент = НастройкиРаботыСПочтой.ПриОтветеПересылкеФорматированныйДокумент;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураВозврата.УведомитьОДоставке = 
		?(НастройкиРаботыСПочтой.Свойство("ВсегдаЗапрашиватьУведомленияОДоставке"),
	                                       НастройкиРаботыСПочтой.ВсегдаЗапрашиватьУведомленияОДоставке, Ложь);
	СтруктураВозврата.УведомитьОПрочтении = 
		?(НастройкиРаботыСПочтой.Свойство("ВсегдаЗапрашиватьУведомлениеОПрочтении"),
	                                        НастройкиРаботыСПочтой.ВсегдаЗапрашиватьУведомлениеОПрочтении, Ложь);
	СтруктураВозврата.ОтображатьТелоИсходногоПисьма = 
		?(НастройкиРаботыСПочтой.Свойство("ОтображатьТелоИсходногоПисьма"),
	                                       НастройкиРаботыСПочтой.ОтображатьТелоИсходногоПисьма, Ложь);
	СтруктураВозврата.ВключатьТелоИсходногоПисьма = 
		?(НастройкиРаботыСПочтой.Свойство("ВключатьТелоИсходногоПисьма"),
	                                       НастройкиРаботыСПочтой.ВключатьТелоИсходногоПисьма, Ложь);
	
	Если ВключатьПодпись Тогда
		
		Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст Тогда
			
			СтруктураВозврата.Подпись = Символы.ПС + Символы.ПС + ПодписьПростойТекст;
			
		Иначе
			
			Если ФорматПодписи = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст Тогда
				
				ФорматированныйДокумент = Новый ФорматированныйДокумент;
				ФорматированныйДокумент.Добавить(Символы.ПС + Символы.ПС + ПодписьПростойТекст);
				СтруктураВозврата.Подпись = ФорматированныйДокумент;
				
			Иначе
				
				ФорматированныйДокумент = ПодписьФорматированныйДокумент;
				ФорматированныйДокумент.Вставить(ФорматированныйДокумент.ПолучитьЗакладкуНачала(),,
				                                 ТипЭлементаФорматированногоДокумента.ПереводСтроки);
				ФорматированныйДокумент.Вставить(ФорматированныйДокумент.ПолучитьЗакладкуНачала(),,
				                                 ТипЭлементаФорматированногоДокумента.ПереводСтроки);
				СтруктураВозврата.Подпись = ФорматированныйДокумент;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Получает параметры работы пользователя для входящего электронного письма.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ПорядокОтветовНаЗапросыУведомленийОПрочтении   - порядок ответов на уведомления о прочтении.
//
Функция ПолучитьПараметрыРаботыПользователяДляВходящегоЭлектронногоПисьма() Экспорт

	НастройкиРаботыСПочтой = ПолучитьНастройкуРаботаСПочтой();
	
	Возврат ?(НастройкиРаботыСПочтой.Свойство("ПорядокОтветовНаЗапросыУведомленийОПрочтении"),
	          НастройкиРаботыСПочтой.ПорядокОтветовНаЗапросыУведомленийОПрочтении,
	          Перечисления.ПорядокОтветовНаЗапросыУведомленийОПрочтении.ЗапрашиватьПередТемКакОтправитьУведомление);

КонецФункции

// Выполняет отправку электронного письма.
//
// Параметры:
//  Объект - ДокументОбъект.ЭлектронноеПисьмоИсходящее - отправляемое письмо.
//
// Возвращаемое значение:
//   Строка   - идентификатор почтового сообщения.
//
Процедура ДобавитьВПараметрАдресатов(Источник, ПараметрыПисьма, ИмяПараметра, ИмяТаблицы) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее")
		ИЛИ ТипЗнч(Источник) = Тип("СтрокаТаблицыЗначений") Тогда
		Таблица = Источник[ИмяТаблицы];
	ИначеЕсли ТипЗнч(Источник) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		Таблица = Источник[ИмяТаблицы].Выгрузить();
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Адресаты = Новый Массив;
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Адресаты.Добавить(Новый Структура("Адрес,Представление", СтрокаТаблицы.Адрес, СтрокаТаблицы.Представление));
	КонецЦикла;
	
	ПараметрыПисьма.Вставить(ИмяПараметра, Адресаты);
	
КонецПроцедуры

// Выполняет отправку электронного письма.
//
// Параметры:
//  Объект - ДокументОбъект.ЭлектронноеПисьмоИсходящее - отправляемое письмо.
//
// Возвращаемое значение:
//   Строка   - идентификатор почтового сообщения.
//
Функция ВыполнитьОтправкуПисьма(Объект, Соединение = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодписьКлиентСервер =
			ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьКлиентСервер");
		
		РасширениеДляФайловПодписи = 
		        МодульЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки().РасширениеДляФайловПодписи;
	Иначе
		РасширениеДляФайловПодписи = "p7s";
	КонецЕсли;
	
	ПараметрыПисьма = Новый Структура;

	ДобавитьВПараметрАдресатов(Объект,ПараметрыПисьма,"Кому", "ПолучателиПисьма");
	ДобавитьВПараметрАдресатов(Объект,ПараметрыПисьма,"Копии", "ПолучателиКопий");
	ДобавитьВПараметрАдресатов(Объект,ПараметрыПисьма,"СлепыеКопии", "ПолучателиСкрытыхКопий");
	ПараметрыПисьма.Вставить("Тема", Объект.Тема);
	ПараметрыПисьма.Вставить("Тело", ?(Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст,
	                                   Объект.Текст,Объект.ТекстHTML));
	ПараметрыПисьма.Вставить("Кодировка", Объект.Кодировка);
	ПараметрыПисьма.Вставить("Важность",  УправлениеЭлектроннойПочтой.ПолучитьВажность(Объект.Важность));
	ПараметрыПисьма.Вставить("ТипТекста", Объект.ТипТекста);
	
	Если Не ПустаяСтрока(Объект.ИдентификаторыОснований) Тогда
		ПараметрыПисьма.Вставить("ИдентификаторыОснований", Объект.ИдентификаторыОснований);
	КонецЕсли;
	
	СоотвВложения = Новый Соответствие;

	ДанныеПрисоединенныхФайловПисьма = ВзаимодействияПереопределяемый.ПолучитьДанныеОбъектаМетаданныхПрисоединенныхФайловПисьма(Объект);
	Если ДанныеПрисоединенныхФайловПисьма = Неопределено Тогда
		ИмяОбъектаМетаданных = УправлениеЭлектроннойПочтой.ПолучитьИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Объект.Ссылка);
		ВладелецФайлов       = Объект.Ссылка;
	Иначе
		ИмяОбъектаМетаданных = ДанныеПрисоединенныхФайловПисьма.ИмяСправочникаПрисоединенныеФайлы;
		ВладелецФайлов       = ДанныеПрисоединенныхФайловПисьма.Владелец;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Наименование КАК ПолноеНаименование,
	|	Файлы.Расширение КАК Расширение,
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ЭлектронныеПодписи.(
	|		НомерСтроки,
	|		Подпись
	|	),
	|	Файлы.ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайлов);
	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		ИмяФайла = Выборка.ПолноеНаименование + ?(Выборка.Расширение = "", "", "." + Выборка.Расширение);
		Если ПустаяСтрока(Выборка.ИДФайлаЭлектронногоПисьма) Тогда
			СоотвВложения.Вставить(ИмяФайла, ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Выборка.Ссылка));
		Иначе
			СтруктураДанныеВложения = Новый Структура;
			СтруктураДанныеВложения.Вставить("ДвоичныеДанные", ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Выборка.Ссылка));
			СтруктураДанныеВложения.Вставить("Идентификатор", Выборка.ИДФайлаЭлектронногоПисьма);
			СоотвВложения.Вставить(ИмяФайла, СтруктураДанныеВложения);
		КонецЕсли;
		Для каждого ЭП Из Выборка.ЭлектронныеПодписи.Выгрузить() Цикл
		
			СоотвВложения.Вставить(Выборка.ПолноеНаименование + "-DS("+ ЭП.НомерСтроки + ")." 
			                       + РасширениеДляФайловПодписи,ЭП.Подпись.Получить());
		
		КонецЦикла;
	КонецЦикла;
	ПараметрыПисьма.Вставить("Вложения", СоотвВложения);
	ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
	
	Если Объект.УведомитьОДоставке Тогда
		ПараметрыПисьма.Вставить("УведомитьОДоставке", Истина);
	КонецЕсли;
	
	Если Объект.УведомитьОПрочтении Тогда
		ПараметрыПисьма.Вставить("УведомитьОПрочтении", Истина);
	КонецЕсли;
	
	Возврат РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(Объект.УчетнаяЗапись, ПараметрыПисьма,Соединение);
	
КонецФункции

// Устанавливает заголовок формы электронного письма.
//
// Параметры:
//  Форма - УправляемаяФорма - форма для которой выполняется процедура.
//
Процедура УстановитьЗаголовокФормыЭлектронногоПисьма(Форма) Экспорт

	ОбъектПисьмо = Форма.Объект;
	Если НЕ ОбъектПисьмо.Ссылка.Пустая() Тогда
		Форма.Автозаголовок = Ложь;
		ЗаголовокФормы = ?(ПустаяСтрока(ОбъектПисьмо.Тема), НСтр("ru = 'Письмо без темы'"), ОбъектПисьмо.Тема);
		ЗаголовокФормы = ЗаголовокФормы 
		         + ?(ТипЗнч(ОбъектПисьмо.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"), " (Входящее)", " (Исходящее)");
		Форма.Заголовок = ЗаголовокФормы;
	Иначе
		Если ТипЗнч(ОбъектПисьмо.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			Форма.Автозаголовок = Ложь;
			Форма.Заголовок = НСтр("ru = 'Исходящее письмо (создание)'");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Взаимодействия.ОтключитьПодсистемуВМоделиСервиса";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.4";
	Обработчик.Процедура = "Взаимодействия.ОбновитьХранениеПредмета_1_2_1_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.4";
	Обработчик.Процедура = "Взаимодействия.ОбновитьХранениеОтветственныйУчетнаяЗапись_1_2_1_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.4";
	Обработчик.Процедура = "Взаимодействия.СоздатьПапкиЭлектронныхПисем_1_2_1_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.4";
	Обработчик.Процедура = "Взаимодействия.ПереместитьПисьмаВПредопределенныеПапки_1_2_1_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.4";
	Обработчик.Процедура = "Взаимодействия.ПреобразоватьОписаниеВТему_1_2_1_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.4";
	Обработчик.Процедура = "Взаимодействия.ЗаполнитьРазмерДляИсходящихЭлектронныхПисем_1_2_1_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.2";
	Обработчик.Процедура = "Взаимодействия.ВыполнитьПерекодировкуПапокЭлектроннойПочты_2_0_1_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.3.22";
	Обработчик.Процедура = "Взаимодействия.ОбновитьХранениеВключатьВПредставлениеИмяПользователя_2_1_3_22";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.12";
	Обработчик.Процедура = "РегистрыСведений.ПредметыПапкиВзаимодействий.ОбновитьХранениеРассмотреноРассмотретьПосле_2_2_0_0";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c12dc82c-2358-4abd-9622-656a6a188062");
	Обработчик.Комментарий = НСтр("ru = 'Переносится хранение реквизитов ""Рассмотрено"" и ""РассмотретьПосле"" в регистр сведений ""ПредметыПапкиВзаимодействий"". Без выполнения обработчика значения данных реквизитов будут отображаться некорректно.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.12";
	Обработчик.Процедура = "РегистрыСведений.КонтактыВзаимодействий.ЗаполнитьКонтактыВзаимодействий_2_2_0_0";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("bfe0bff5-6d5c-4359-a994-6e76bf824454");
	Обработчик.Комментарий = НСтр("ru = 'Заполняется вспомогательный регистр сведений ""КонтактыВзаимодействий"". Без выполнения обработчика не будут корректно работать отборы по контактам взаимодействий.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.12";
	Обработчик.Процедура = "РегистрыСведений.СостоянияПапокПисем.РассчитатьСостоянияПапокЭлектронныхПисем_2_2_0_0";
		Обработчик.РежимВыполнения = "Отложенно";
		Обработчик.Идентификатор = Новый УникальныйИдентификатор("48cc6281-e934-45d6-b673-819c68016d11");
	Обработчик.Комментарий = НСтр("ru = 'Выполняется первоначальный расчет количества нерассмотренных писем по папкам. Без выполнения обработчика не будет корректно выводится информация о количестве нерассмотренных писем по папкам.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.12";
	Обработчик.Процедура = "РегистрыСведений.СостоянияПредметовВзаимодействий.РассчитатьСостоянияПредметовВзаимодействий_2_2_0_0";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0eec6511-cb6c-443b-b27b-6b888aad99ef");
	Обработчик.Комментарий = НСтр("ru = 'Выполняется первоначальный расчет количества состояний предметов взаимодействий. Без выполнения обработчика не будет корректно выводится информация в панель навигации журнала взаимодействий по предметам.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.12";
	Обработчик.Процедура = "РегистрыСведений.СостоянияКонтактовВзаимодействий.РассчитатьСостоянияКонтактовВзаимодействий_2_2_0_0";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4ec55cf6-e322-49f2-b977-77b718a4e7ca");
	Обработчик.Комментарий = НСтр("ru = 'Выполняется первоначальный расчет количества состояний контактов взаимодействий. Без выполнения обработчика не будет корректно выводится информация в панель навигации журнала взаимодействий по контактам.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.29";
	Обработчик.Процедура = "Взаимодействия.ОтключитьПодсистемуВМоделиСервиса";
	
КонецПроцедуры

Процедура ОтключитьПодсистемуВМоделиСервиса() Экспорт

	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Константы.ИспользоватьПочтовыйКлиент.Установить(Ложь);
		Константы.ИспользоватьПризнакРассмотрено.Установить(Ложь);
		Константы.ИспользоватьПрочиеВзаимодействия.Установить(Ложь);
		Константы.ОтправлятьПисьмаВФорматеHTML.Установить(Ложь);
		
	КонецЕсли;

КонецПроцедуры

// Процедура обновления ИБ для версии БСП 1.2.1.4.
// Перемещает письма в предопределенные папки.
//
Процедура ПереместитьПисьмаВПредопределенныеПапки_1_2_1_4() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка КАК Письмо,
	|	ПапкиЭлектронныхПисем.Ссылка КАК Папка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|		ПО ЭлектронноеПисьмоВходящее.УчетнаяЗапись = ПапкиЭлектронныхПисем.Владелец
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Наименование = &Входящие
	|	И ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|	И (НЕ ЭлектронноеПисьмоВходящее.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ПапкиЭлектронныхПисем.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = ПапкиЭлектронныхПисем.Владелец
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	|	И ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|	И ПапкиЭлектронныхПисем.Наименование = &Отправленные
	|	И (НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ПапкиЭлектронныхПисем.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = ПапкиЭлектронныхПисем.Владелец
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик)
	|	И ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|	И ПапкиЭлектронныхПисем.Наименование = &Черновики
	|	И (НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ПапкиЭлектронныхПисем.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = ПапкиЭлектронныхПисем.Владелец
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
	|	И ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|	И ПапкиЭлектронныхПисем.Наименование = &Исходящие
	|	И (НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ПапкиЭлектронныхПисем.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|		ПО ЭлектронноеПисьмоВходящее.УчетнаяЗапись = ПапкиЭлектронныхПисем.Владелец
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.ПометкаУдаления
	|	И ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|	И ПапкиЭлектронныхПисем.Наименование = &Удаленные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ПапкиЭлектронныхПисем.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = ПапкиЭлектронныхПисем.Владелец
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.ПометкаУдаления
	|	И ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|	И ПапкиЭлектронныхПисем.Наименование = &Удаленные";
	
	УстановитьПараметрыЗапросаИменаПредопределенныеПапки(Запрос);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(Выборка.Письмо, Выборка.Папка);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновления ИБ для версии БСП 1.2.1.4.
// Переносит предмет взаимодействий из реквизита документа в регистр сведений ПредметыПапкиВзаимодействий.
//
Процедура СоздатьПапкиЭлектронныхПисем_1_2_1_4() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		УправлениеЭлектроннойПочтой.СоздатьПредопределенныеПапкиЭлектронныхПисемДляУчетнойЗаписи(Выборка.Ссылка);
	
	КонецЦикла;

КонецПроцедуры

// Процедура обновления ИБ для версии БСП 1.2.1.4.
// Переносит данные из реквизита ОтветственныйЗаОбработкуПисем справочника УчетныеЗаписиЭлектроннойПочты в 
// реквизиты ОтветственныйЗаОбработкуПисем и ОтветственныйЗаВедениеПапок регистра сведений
// НастройкиУчетныхЗаписейЭлектроннойПочты.
//
Процедура ОбновитьХранениеОтветственныйУчетнаяЗапись_1_2_1_4() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка,
	|	УчетныеЗаписиЭлектроннойПочты.УдалитьОтветственныйЗаОбработкуПисем
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.УдалитьОтветственныйЗаОбработкуПисем <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.НастройкиУчетныхЗаписейЭлектроннойПочты.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.УчетнаяЗаписьЭлектроннойПочты = Выборка.Ссылка;
		МенеджерЗаписи.ПерсональнаяУчетнаяЗапись         = Ложь;
		МенеджерЗаписи.ВключатьПодписьДляНовыхСообщений  = Ложь;
		МенеджерЗаписи.ВключатьПодписьПриОтветеПересылке = Ложь;
		МенеджерЗаписи.ОтветственныйЗаОбработкуПисем     = Выборка.УдалитьОтветственныйЗаОбработкуПисем;
		МенеджерЗаписи.ОтветственныйЗаВедениеПапок       = Выборка.УдалитьОтветственныйЗаОбработкуПисем;
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновления ИБ для версии БСП 2.1.3.22.
// Переносит данные из реквизита ВключатьВПредставлениеИмяПользователя справочника УчетныеЗаписиЭлектроннойПочты в 
// реквизит ВключатьВПредставлениеИмяПользователя регистра сведений НастройкиУчетныхЗаписейЭлектроннойПочты.
//
Процедура ОбновитьХранениеВключатьВПредставлениеИмяПользователя_2_1_3_22() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ИЗ
	|	РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ПО НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.УдалитьВПредставлениеВключатьИмяПользователя
	|	И НЕ НастройкиУчетныхЗаписейЭлектроннойПочты.ВПредставлениеВключатьИмяПользователя";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.НастройкиУчетныхЗаписейЭлектроннойПочты.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УчетнаяЗаписьЭлектроннойПочты.Установить(Выборка.Ссылка);
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			 Запись.ВПредставлениеВключатьИмяПользователя = Истина;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновления ИБ для версии БСП 1.2.1.4.
// Переносит предмет взаимодействий из реквизита документа в регистр сведений ПредметыПапкиВзаимодействий.
//
Процедура ОбновитьХранениеПредмета_1_2_1_4() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Встреча.Ссылка,
	|	Встреча.Предмет
	|ИЗ
	|	Документ.Встреча КАК Встреча
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапланированноеВзаимодействие.Ссылка,
	|	ЗапланированноеВзаимодействие.Предмет
	|ИЗ
	|	Документ.ЗапланированноеВзаимодействие КАК ЗапланированноеВзаимодействие
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТелефонныйЗвонок.Ссылка,
	|	ТелефонныйЗвонок.Предмет
	|ИЗ
	|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ЭлектронноеПисьмоВходящее.Предмет
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ЭлектронноеПисьмоИсходящее.Предмет
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		УстановитьПредмет(Выборка.Ссылка, ?(ЗначениеЗаполнено(Выборка.Предмет), Выборка.Предмет, Выборка.Ссылка));
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновления ИБ для версии БСП 1.2.1.4.
// Преобразовывает начало описания документов "Встреча", "Телефонный звонок" и "Запланированное взаимодействие" в
// реквизит Тема.
//
Процедура ПреобразоватьОписаниеВТему_1_2_1_4() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Встреча.Ссылка,
	|	ПОДСТРОКА(Встреча.Описание, 1, 1024) КАК Описание
	|ИЗ
	|	Документ.Встреча КАК Встреча
	|ГДЕ
	|	Встреча.Тема <> """"""""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапланированноеВзаимодействие.Ссылка,
	|	ПОДСТРОКА(ЗапланированноеВзаимодействие.Описание, 1, 1024)
	|ИЗ
	|	Документ.ЗапланированноеВзаимодействие КАК ЗапланированноеВзаимодействие
	|ГДЕ
	|	ЗапланированноеВзаимодействие.Тема <> """"""""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТелефонныйЗвонок.Ссылка,
	|	ПОДСТРОКА(ТелефонныйЗвонок.Описание, 1, 1024)
	|ИЗ
	|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
	|ГДЕ
	|	ТелефонныйЗвонок.Тема <> """"""""";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ПустаяСтрока(Выборка.Описание) Тогда
			ВзаимодействиеОбъект       = Выборка.Ссылка.ПолучитьОбъект();
			ВзаимодействиеОбъект.Тема  = Выборка.Описание;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВзаимодействиеОбъект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновления ИБ для версии БСП 1.2.1.4.
// Определяет оценочный размер исходящих писем.
//
Процедура ЗаполнитьРазмерДляИсходящихЭлектронныхПисем_1_2_1_4() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ПисьмоОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПисьмоОбъект.Размер = ОценитьРазмерИсходящегоЭлектронногоПисьма(Выборка.Ссылка);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПисьмоОбъект);
	
	КонецЦикла;

КонецПроцедуры

// Заполняет коды у предопределенных папок и выполняет перекодировку справочника
// если это необходимо.
//
Процедура ВыполнитьПерекодировкуПапокЭлектроннойПочты_2_0_1_2() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПапкиЭлектронныхПисем.Владелец КАК Владелец
	|ПОМЕСТИТЬ ПапкиСПроблемами
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Код = """"
	|	И ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПапкиЭлектронныхПисем.Ссылка
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Владелец В
	|			(ВЫБРАТЬ
	|				ПапкиСПроблемами.Владелец
	|			ИЗ
	|				ПапкиСПроблемами КАК ПапкиСПроблемами)
	|	И ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПапкиЭлектронныхПисем.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Владелец В
	|			(ВЫБРАТЬ
	|				ПапкиСПроблемами.Владелец
	|			ИЗ
	|				ПапкиСПроблемами КАК ПапкиСПроблемами)
	|	И (НЕ ПапкиЭлектронныхПисем.ПредопределеннаяПапка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПапкиЭлектронныхПисем.Код";
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаПредопределенные = Результат[1].Выбрать();
	
	Пока ВыборкаПредопределенные.Следующий() Цикл
	
		ПапкаОбъект = ВыборкаПредопределенные.Ссылка.ПолучитьОбъект();
		ПапкаОбъект.УстановитьНовыйКод();
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПапкаОбъект);
	
	КонецЦикла;
	
	ВыборкаПользовательские = Результат[2].Выбрать();
	
	Пока ВыборкаПользовательские.Следующий() Цикл
	
		ПапкаОбъект = ВыборкаПользовательские.Ссылка.ПолучитьОбъект();
		ПапкаОбъект.УстановитьНовыйКод();
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПапкаОбъект);
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие обработчики событий документов взаимодействий.

// Заполняет список выбора для поля "Рассмотреть после".
//
// Параметры:
//  СписокВыбора - СписокЗначений - список, который будет заполнен значения выбора.
//
Процедура ЗаполнитьСписокВыбораДляРассмотретьПосле(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(15*60,    НСтр("ru='Через 15 мин.'"));
	СписокВыбора.Добавить(30*60,    НСтр("ru='Через 30 мин.'"));
	СписокВыбора.Добавить(60*60,    НСтр("ru='Через 1 час'"));
	СписокВыбора.Добавить(3*60*60,  НСтр("ru='Через 3 часа'"));
	СписокВыбора.Добавить(24*60*60, НСтр("ru='Завтра'"));
	
КонецПроцедуры

// Обработчик события при записи, возникающих в формах документов взаимодействий.
//
// Параметры:
//  ТекущийОбъект - ДокументОбъект - документ, в котором возникло событие.
//
Процедура ПриЗаписиВзаимодействияИзФормы(ТекущийОбъект,Форма) Экспорт
	
	Ссылка = ТекущийОбъект.Ссылка;
	
	СтарыеЗначенияРеквизитов = СтруктураРеквизитовВзаимодействия(Ссылка);
	
	Если СтарыеЗначенияРеквизитов.Предмет           = Форма.Предмет И ЗначениеЗаполнено(Форма.Предмет)
		И СтарыеЗначенияРеквизитов.Рассмотрено      = Форма.Рассмотрено
		И СтарыеЗначенияРеквизитов.РассмотретьПосле = Форма.РассмотретьПосле Тогда
		Возврат;
	КонецЕсли;
	
	РассчитыватьРассмотрено = (СтарыеЗначенияРеквизитов.Рассмотрено <> Форма.Рассмотрено)
	                        ИЛИ (СтарыеЗначенияРеквизитов.Предмет <> Форма.Предмет И ЗначениеЗаполнено(Форма.Предмет));
	СтруктураДляЗаписи = ВзаимодействияКлиентСервер.СтруктураРеквизитовВзаимодействияДляЗаписи(
	                      , Форма.Предмет, Форма.Рассмотрено, Форма.РассмотретьПосле, РассчитыватьРассмотрено);
	
	// Если в качестве предмета устанавливается само взаимодействие то делать ничего не нужно.
	Если Форма.Предмет = Ссылка Тогда
		ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(Ссылка, СтруктураДляЗаписи);
		РассчитатьРассмотреноПоКонтактамПриЗаписиИзФормы(ТекущийОбъект, Форма, СтарыеЗначенияРеквизитов);
		Возврат;
	КонецЕсли;
	
	// Если в качестве нового предмета установлено взаимодействие, то надо проверить предмет у нового предмета.
	Если ЗначениеЗаполнено(Форма.Предмет) Тогда
		
		Если ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Форма.Предмет) Тогда
			
			ПредметПредмета = ПолучитьЗначениеПредмета(Форма.Предмет);
			Если Не ЗначениеЗаполнено(ПредметПредмета) Тогда
				// У предмета установим в качестве предмета ссылку на самого себя.
				СтруктураДляЗаписи.Предмет                 = Форма.Предмет;
				СтруктураДляЗаписи.РассчитыватьРассмотрено = Истина;
				ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(Ссылка, СтруктураДляЗаписи);
			Иначе
				СтруктураДляЗаписи.Предмет                 = ПредметПредмета;
				СтруктураДляЗаписи.РассчитыватьРассмотрено = Истина;
				Форма.Предмет = ПредметПредмета;
				ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(Ссылка, СтруктураДляЗаписи);
			КонецЕсли;
			
		Иначе
			
			ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(Ссылка, СтруктураДляЗаписи);
			
		КонецЕсли;
		
	Иначе
		
		СтруктураДляЗаписи.Предмет                 = Ссылка;
		СтруктураДляЗаписи.РассчитыватьРассмотрено = Истина;
		Форма.Предмет                              = Ссылка;
		ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(Ссылка, СтруктураДляЗаписи);
		
	КонецЕсли;
	
	// Если предыдущим предметом было взаимодействие, то возможно нужно поменять предмет у всей цепочки.
	Если ЗначениеЗаполнено(СтарыеЗначенияРеквизитов.Предмет) И ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(СтарыеЗначенияРеквизитов.Предмет) Тогда
		
		Если НЕ (Ссылка <> СтарыеЗначенияРеквизитов.Предмет 
			И (Не ЗначениеЗаполнено(Форма.Предмет) 
			ИЛИ ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Форма.Предмет))) Тогда
			
			ВзаимодействияВызовСервера.ЗаменитьПредметВЦепочкеВзаимодействий(СтарыеЗначенияРеквизитов.Предмет, Форма.Предмет, Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	РассчитатьРассмотреноПоКонтактамПриЗаписиИзФормы(ТекущийОбъект, Форма, СтарыеЗначенияРеквизитов);
	
КонецПроцедуры

Процедура РассчитатьРассмотреноПоКонтактамПриЗаписиИзФормы(ТекущийОбъект, Форма, СтарыеЗначенияРеквизитов)
	
	Если (НеЗаписыватьКонтакты(ТекущийОбъект.ДополнительныеСвойства) 
		И СтарыеЗначенияРеквизитов.Рассмотрено      <> Форма.Рассмотрено)
		ИЛИ Форма.Объект.Ссылка.Пустая() Тогда
		
		МассивВзаимодействий = Новый Массив;
		МассивВзаимодействий.Добавить(ТекущийОбъект.Ссылка);
		РассчитатьРассмотреноПоКонтактам(МассивВзаимодействий);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события перед записью, возникающих в формах документов взаимодействий.
//
// Параметры:
//  Форма         - УправляемаяФорма - форма в которой произошло событие.
//  ТекущийОбъект - ДокументОбъект - документ, в котором возникло событие.
//
Процедура ПередЗаписьюВзаимодействияИзФормы(Форма,ТекущийОбъект, ИзменилисьКонтакты = Ложь) Экспорт
	
	Если НЕ ИзменилисьКонтакты Тогда
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("НеЗаписыватьКонтакты", Истина);
		
	КонецЕсли;
	
	Если ТекущийОбъект.Ссылка.Пустая() Тогда
		ТекущийОбъект.ВзаимодействиеОснование = Форма.ВзаимодействиеОснование;
	КонецЕсли;

КонецПроцедуры

// Заполняет список доступных для создания взаимодействий.
//
// Параметры:
//  ДокументыДоступныеДляСоздания - СписокЗначений - заполняемый список значений.
//
Процедура ЗаполнитьСписокДоступныхДляСозданияДокументов(ДокументыДоступныеДляСоздания) Экспорт
	
	Для каждого РегистрируемыйДокумент Из Метаданные.ЖурналыДокументов.Взаимодействия.РегистрируемыеДокументы Цикл
		
		Если Не РегистрируемыйДокумент.Имя = "ЭлектронноеПисьмоВходящее" Тогда
			
			ДокументыДоступныеДляСоздания.Добавить(РегистрируемыйДокумент.Имя,РегистрируемыйДокумент.Синоним);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняется при загрузке сохраненных пользовательских настроек быстрого отбора ТипВзаимодействия 
// в формах списков документов взаимодействий.
//
// Параметры:
//  Форма - УправляемаяФорма - форма для которой выполняется процедура.
//  Настройки - Соответствие - загружаемые настройки.
//
Процедура ПриЗагрузкеТипаВзаимодействийИзНастроек(Форма,Настройки) Экспорт

	ТипВзаимодействия = Настройки.Получить("ТипВзаимодействия");
	Если ТипВзаимодействия <> Неопределено Тогда
		Настройки.Удалить("ТипВзаимодействия");
	КонецЕсли;
	
	Если Форма.ТолькоПочта Тогда
		Если ТипВзаимодействия = Неопределено 
			ИЛИ Форма.Элементы.ТипВзаимодействия.СписокВыбора.НайтиПоЗначению(ТипВзаимодействия) = Неопределено Тогда
			ТипВзаимодействия = "ВсеПисьма";
			Настройки.Удалить("ТипВзаимодействия");
		КонецЕсли;
	Иначе
		Если ТипВзаимодействия = Неопределено Тогда
			ТипВзаимодействия = "Все";
			Настройки.Удалить("ТипВзаимодействия");
		КонецЕсли;
	КонецЕсли;
	
	Форма.ТипВзаимодействия = ТипВзаимодействия;

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//   Работа с элементами и реквизитами форм списков и документов.

// Динамически формирует общие формы "Адресная книга" и "Подбор контактов" согласно возможным типам контактов.
//
Процедура ДобавитьСтраницыФормыПодбораКонтактов(Форма) Экспорт
	
	ОписаниеТипаДинамическийСписок = Новый ОписаниеТипов("ДинамическийСписок");
	
	ДобавляемыеРеквизиты = Новый Массив;
	МассивОписанийВозможныхКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	// Создадим динамические списки.
	Для каждого ЭлементМассиваОписания Из МассивОписанийВозможныхКонтактов Цикл
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы("Список_" + ЭлементМассиваОписания.Имя ,ОписаниеТипаДинамическийСписок));
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Установим в динамические списки основные таблицы и обязательное использование реквизита ЭтоГруппа.
	Для каждого ЭлементМассиваОписания Из МассивОписанийВозможныхКонтактов Цикл
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		Форма["Список_" + ЭлементМассиваОписания.Имя].ОсновнаяТаблица = "Справочник." + ЭлементМассиваОписания.Имя;
		
	КонецЦикла;
	
	Для каждого ЭлементМассиваОписания Из МассивОписанийВозможныхКонтактов Цикл
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЭлементМассиваОписания.ЕстьВладелец  Тогда
			
			ЭлементСтраница = Форма.Элементы.Добавить(
				"Страница_" + ЭлементМассиваОписания.Имя,Тип("ГруппаФормы"),Форма.Элементы.СтраницыСписки);
			ЭлементСтраница.Вид                  = ВидГруппыФормы.Страница;
			ЭлементСтраница.ОтображатьЗаголовок  = Истина;
			ЭлементСтраница.Заголовок            = ЭлементМассиваОписания.Представление;
			ЭлементСтраница.Группировка          = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			
		КонецЕсли;
		
		ЭлементТаблица = Форма.Элементы.Добавить("Таблица_" + ЭлементМассиваОписания.Имя,
			Тип("ТаблицаФормы"),
			Форма.Элементы[?(ЭлементМассиваОписания.ЕстьВладелец,
			"Страница_" + ЭлементМассиваОписания.ИмяВладельца,
			"Страница_" + ЭлементМассиваОписания.Имя)]);
		ЭлементТаблица.ПутьКДанным = "Список_" + ЭлементМассиваОписания.Имя;
		ЭлементТаблица.УстановитьДействие("Выбор","СписокСправочникаВыбор");
		ЭлементТаблица.Высота = 10;
		Если Форма.ИмяФормы = "ОбщаяФорма.ВыборКонтакта" Тогда
			ЭлементТаблица.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
			ЭлементТаблица.УстановитьДействие("ПриАктивизацииСтроки","Подключаемый_СписокКонтактыПриАктивизацииСтроки");
		КонецЕсли;
		Если ЭлементМассиваОписания.ЕстьВладелец Тогда
			Форма.Элементы["Таблица_" + ЭлементМассиваОписания.ИмяВладельца].УстановитьДействие(
				"ПриАктивизацииСтроки","Подключаемый_СписокВладелецПриАктивизацииСтроки");
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Форма["Список_" + ЭлементМассиваОписания.Имя], "Владелец", Неопределено, , , Истина);
		КонецЕсли;
		
		КолонкаСсылка = Форма.Элементы.Добавить(
			"Колонка_" + ЭлементМассиваОписания.Имя + "_Ссылка",Тип("ПолеФормы"),ЭлементТаблица);
		КолонкаСсылка.Вид = ВидПоляФормы.ПолеВвода;
		КолонкаСсылка.ПутьКДанным = "Список_" + ЭлементМассиваОписания.Имя + ".Ссылка";
		КолонкаСсылка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает отбор динамического списка документов взаимодействий, исключая документы не относящиеся к почте.
//
// Параметры:
//  Список  - ДинамическийСписок - динамический список, для которого устанавливается отбор.
//
Процедура СоздатьОтборПоТипуСогласноФО(Список)
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ВзаимодействияКлиентСервер.ОтборДинамическогоСписка(Список).Элементы, "ОтборПоТипуСогласноФО",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ИмяПоля                    = "Тип";
	ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Тип("ДокументСсылка.Встреча"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ЗапланированноеВзаимодействие"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ТелефонныйЗвонок"));
	СписокТипов.Добавить(Тип("ДокументСсылка.СообщениеSMS"));
	ПравоеЗначение             = СписокТипов;
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора, ИмяПоля, ВидСравненияЭлементаОтбора, ПравоеЗначение);

КонецПроцедуры

// Инициализирует переданную форму списка взаимодействий Форма согласно значениям
// функциональных опций.
//
Процедура ИнициализироватьФормуСпискаВзаимодействий(Форма) Экспорт

	Форма.ТолькоПочта = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПрочиеВзаимодействия");
	Форма.Элементы.СписокСоздатьЭлектронноеПисьмоОтдельнаяКнопка.Видимость = Форма.ТолькоПочта;
	Форма.Элементы.ГруппаСоздать.Видимость = НЕ Форма.ТолькоПочта;
	Если Форма.ТолькоПочта Тогда
		Форма.Заголовок = НСтр("ru = 'Электронная почта'");
		Форма.Элементы.ТипВзаимодействия.ВысотаСпискаВыбора = 6;
		СоздатьОтборПоТипуСогласноФО(Форма.Список);
		СформироватьСписокВыбораТипВзаимодействияТолькоПочта(Форма.Элементы.ТипВзаимодействия);
		Форма.Команды.Предмет.Заголовок = НСтр("ru = 'Установить предмет переписки'");
		Форма.Команды.Предмет.Подсказка = НСтр("ru = 'Установить предмет переписки'");
		Форма.Элементы.Скопировать.Видимость = Ложь;
		Если Форма.Элементы.Найти("ДеревоВзаимодействийСкопировать") <> Неопределено Тогда
			Форма.Элементы.ДеревоВзаимодействийСкопировать.Видимость = Ложь;
		КонецЕсли;
		Если Форма.Команды.Найти("ПредметСписок") <> Неопределено Тогда
			Форма.Команды.ПредметСписок.Заголовок = НСтр("ru = 'Установить предмет переписки'");
			Форма.Команды.ПредметСписок.Подсказка = НСтр("ru = 'Установить предмет переписки'");
		КонецЕсли;
	КонецЕсли;
	Форма.ИспользоватьПризнакРассмотрено = ПолучитьФункциональнуюОпцию("ИспользоватьПризнакРассмотрено");

КонецПроцедуры

// Определяет необходимость отображения для адресной книги и форм выбора контакта групп пользователей.
//
// Параметры:
//  Форма  - УправляемаяФорма - форма для которой будет выполняться процедура.
//
Процедура ОбработатьНеобходимостьОтображенияГруппПользователей(Форма) Экспорт
	
	Форма.ИспользоватьГруппыПользователей = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
	Если Не Форма.ИспользоватьГруппыПользователей Тогда
		Форма.СписокПользователей.ПроизвольныйЗапрос = Ложь;
	Иначе
		Форма.СписокПользователей.Параметры.УстановитьЗначениеПараметра("ГруппаПользователей", Справочники.ГруппыПользователей.ПустаяСсылка());
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//   Работа с предметами взаимодействий.

// Устанавливает предмет для документа взаимодействия.
//
// Параметры:
//  Ссылка  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее,
//            ДокументСсылка.Встреча,
//            ДокументСсылка.ЗапланированноеВзаимодействие,
//            ДокументСсылка.ТелефонныйЗвонок - взаимодействие для которого будет установлен предмет.
//  Предмет  - ПроизвольнаяСсылка - ссылка на устанавливаемый предмет.
//
Процедура УстановитьПредмет(Ссылка, Предмет, РассчитыватьРассмотрено = Истина) Экспорт
	
	Реквизиты = ВзаимодействияКлиентСервер.СтруктураРеквизитовВзаимодействияДляЗаписи(, Предмет,,, РассчитыватьРассмотрено);
	ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(Ссылка, Реквизиты);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////
//      Формирование письма

// Формирует текст HTML для входящего электронного письма.
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее
//  ДляПечати  - Булево - признак того, что текст HTML формируется для печатной формы письма.
//  ОбработатьКартинки - Булево - признак того что картинки будут вложены в HTML.
//
// Возвращаемое значение:
//   Строка   - сформированный текст HTML для входящего электронного письма.
//
Функция СформироватьТекстHTMLДляВходящегоПисьма(Письмо, ДляПечати = Истина, ОбработатьКартинки = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	ЭлектронноеПисьмоВходящее.Дата,
	|	ЭлектронноеПисьмоВходящее.ДатаПолучения,
	|	ЭлектронноеПисьмоВходящее.ОтправительАдрес,
	|	ЭлектронноеПисьмоВходящее.ОтправительПредставление,
	|	ЭлектронноеПисьмоВходящее.Текст,
	|	ЭлектронноеПисьмоВходящее.ТекстHTML,
	|	ЭлектронноеПисьмоВходящее.Тема,
	|	ЭлектронноеПисьмоВходящее.ТипТекста,
	|	ЭлектронноеПисьмоВходящее.ПолучателиПисьма.(
	|		Ссылка,
	|		НомерСтроки,
	|		Адрес,
	|		Представление,
	|		Контакт
	|	),
	|	ЭлектронноеПисьмоВходящее.ПолучателиКопий.(
	|		Ссылка,
	|		НомерСтроки,
	|		Адрес,
	|		Представление,
	|		Контакт
	|	),
	|	ЕСТЬNULL(УчетныеЗаписиЭлектроннойПочты.ИмяПользователя, """") КАК ИмяПользователяУчетнойЗаписи,
	|	ЭлектронноеПисьмоВходящее.Кодировка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ПО ЭлектронноеПисьмоВходящее.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.Ссылка = &Письмо";
	
	Запрос.УстановитьПараметр("Письмо",Письмо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДокументHTML = СформироватьДокументHTMLНаОснованииПисьма(
		Письмо, Выборка.ТипТекста, Выборка.Текст,Выборка.ТекстHTML, Выборка.ТипТекста, Выборка.Кодировка, ОбработатьКартинки);
	
	Если ДляПечати Тогда
		ДополнитьТелоПисьмаШапкойПечатнойФормы(ДокументHTML, Выборка, Ложь);
	КонецЕсли;
	
	Возврат ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
КонецФункции

// Формирует текст HTML для исходящего электронного письма.
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоИсходящее
//  ДляПечати  - Булево - признак того, что текст HTML формируется для печатной формы письма.
//  ОбработатьКартинки - Булево - признак того что картинки будут вложены в HTML.
//
// Возвращаемое значение:
//   Строка   - сформированный текст HTML для исходящего электронного письма.
//
Функция СформироватьТекстHTMLДляИсходящегоПисьма(Письмо, ДляПечати = Истина, ОбработатьКартинки = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Дата,
	|	ЭлектронноеПисьмоИсходящее.СтатусПисьма,
	|	ЭлектронноеПисьмоИсходящее.ОтправительПредставление,
	|	ЭлектронноеПисьмоИсходящее.Текст,
	|	ЭлектронноеПисьмоИсходящее.ТекстHTML,
	|	ЭлектронноеПисьмоИсходящее.Тема,
	|	ЭлектронноеПисьмоИсходящее.ТипТекста,
	|	ЭлектронноеПисьмоИсходящее.ВзаимодействиеОснование,
	|	ЭлектронноеПисьмоИсходящее.ВключатьТелоИсходногоПисьма,
	|	ЭлектронноеПисьмоИсходящее.ПолучателиПисьма.(
	|		Ссылка,
	|		НомерСтроки,
	|		Адрес,
	|		Представление,
	|		Контакт
	|	),
	|	ЭлектронноеПисьмоИсходящее.ПолучателиКопий.(
	|		Ссылка,
	|		НомерСтроки,
	|		Адрес,
	|		Представление,
	|		Контакт
	|	),
	|	ЕСТЬNULL(УчетныеЗаписиЭлектроннойПочты.ИмяПользователя, """") КАК ИмяПользователяУчетнойЗаписи
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.Ссылка = &Письмо";
	
	Запрос.УстановитьПараметр("Письмо",Письмо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДокументHTML = СформироватьДокументHTMLНаОснованииПисьма(
		Письмо,Выборка.ТипТекста,Выборка.Текст,Выборка.ТекстHTML,Выборка.ТипТекста,,ОбработатьКартинки);
	
	Если Выборка.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик 
		И Выборка.ВключатьТелоИсходногоПисьма 
		И Выборка.ВзаимодействиеОснование <> Неопределено 
		И (ТипЗнч(Выборка.ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") 
		ИЛИ ТипЗнч(Выборка.ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")) Тогда
		
		ВыборкаОснование = ПолучитьДанныеПисьмаОснования(Выборка.ВзаимодействиеОснование);
		
		ДокументОснованиеHTML = СформироватьДокументHTMLНаОснованииПисьма(
			Выборка.ВзаимодействиеОснование,
			ВыборкаОснование.ТипТекста,
			ВыборкаОснование.Текст,
			ВыборкаОснование.ТекстHTML,
			Выборка.ТипТекста);
		
		ЭлементТелоОснованиеHTML = ДокументОснованиеHTML.Тело;
		МассивДочернихУзловТелаОснование = ПолучитьМассивДочернихУзловСодержащихHTML(ЭлементТелоОснованиеHTML);
		
		ЭлементDIV = ДобавитьЭлементСАтрибутами(ЭлементТелоОснованиеHTML,
			"div",Новый Структура("style","border:none;border-left:solid blue 1.5pt;padding:0cm 0cm 0cm 4.0pt"));
		
		Для каждого ДочернийУзел Из МассивДочернихУзловТелаОснование Цикл
			
			ЭлементDIV.ДобавитьДочерний(ДочернийУзел);
			
		КонецЦикла;
		
		СтруктураАтрибутов = Новый Структура;
		СтруктураАтрибутов.Вставить("size", "2");
		СтруктураАтрибутов.Вставить("width", "100%");
		СтруктураАтрибутов.Вставить("align", "center");
		СтруктураАтрибутов.Вставить("tabindex", "-1");
		
		ЭлементHR = ДобавитьЭлементСАтрибутами(ЭлементDIV, "hr", СтруктураАтрибутов);
		ВставитьЭлементHTMLПервымДочернимЭлементом(ЭлементDIV,ЭлементHR,МассивДочернихУзловТелаОснование);
		
		СтруктураДанныеШапкиПисьмаОснования = Новый Структура;
		СтруктураДанныеШапкиПисьмаОснования.Вставить("ОтправительПредставление", ВыборкаОснование.ОтправительПредставление);
		СтруктураДанныеШапкиПисьмаОснования.Вставить("ОтправительАдрес", ВыборкаОснование.ОтправительАдрес);
		СтруктураДанныеШапкиПисьмаОснования.Вставить("Дата", ВыборкаОснование.Дата);
		СтруктураДанныеШапкиПисьмаОснования.Вставить("Тема", ВыборкаОснование.Тема);
		СтруктураДанныеШапкиПисьмаОснования.Вставить("ПолучателиПисьма", ВыборкаОснование.ПолучателиПисьма);
		СтруктураДанныеШапкиПисьмаОснования.Вставить("ПолучателиКопий", ВыборкаОснование.ПолучателиКопий);
		
		ЭлементШрифт = СформироватьЭлементДанныхШапкиПисьма(ЭлементDIV,
		СтруктураДанныеШапкиПисьмаОснования,
		ВыборкаОснование.ИмяОбъектаМетаданных = "ЭлектронноеПисьмоИсходящее");
		ВставитьЭлементHTMLПервымДочернимЭлементом(ЭлементDIV,ЭлементШрифт,МассивДочернихУзловТелаОснование);
		
		МассивДочернихУзловТелаТекущее = ПолучитьМассивДочернихУзловСодержащихHTML(ДокументHTML.Тело);
		Для Каждого ДочернийУзел Из МассивДочернихУзловТелаТекущее Цикл
			
			ЭлементТелоОснованиеHTML.ВставитьПеред(ДокументОснованиеHTML.ИмпортироватьУзел(ДочернийУзел,Истина),ЭлементDIV);
			
		КонецЦикла;
		
		ДокументHTML = ДокументОснованиеHTML;
		
	КонецЕсли;
	
	Если ДляПечати Тогда
		ДополнитьТелоПисьмаШапкойПечатнойФормы(ДокументHTML,Выборка,Истина);
	КонецЕсли;
	
	Возврат ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
КонецФункции

// Формирует документ HTML на основании электронного письма.
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого будет проведена оценка.
//  ТипТекста  - ПеречислениеСсылка.ТипыТекстовЭлектронныхПисем - тип текста письма.
//  Текст  - Строка - текста письма.
//  ТекстHTML  - Строка - текста письма в формате HTML.
//  ТипТекстаПреобразование  - ПеречислениеСсылка.ТипыТекстовЭлектронныхПисем - тип текста в который преобразуется
//                                                                              письмо.
//  Кодировка  - Строка - кодировка письма.
//  ОбработатьКартинки - Булево - признак того что картинки будут вложены в HTML.
//
// Возвращаемое значение:
//   Строка   - обработанный текст электронного письма.
//
Функция СформироватьДокументHTMLНаОснованииПисьма(Письмо,
	ТипТекста,
	Текст,
	ТекстHTML,
	ТипТекстаПреобразование,
	Кодировка = "",
	ОбработатьКартинки = Ложь)
	
	Если ТипТекста <> ТипТекстаПреобразование 
		И ТипТекста <> Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
		
		ТекстВходящегоПисьма = ПолучитьОбычныйТекстИзHTML(ТекстHTML);
		
		ДокументHTML = ПолучитьДокументHTMLИзОбычногоТекста(ТекстВходящегоПисьма);
		
	ИначеЕсли ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст 
		ИЛИ (ТипТекста.Пустая() И СокрЛП(ТекстHTML) = "") Тогда
		
		ДокументHTML = ПолучитьДокументHTMLИзОбычногоТекста(Текст);
		
	Иначе
		
		КодировкаПисьма = Кодировка;
		
		Если ПустаяСтрока(КодировкаПисьма) Тогда
			ПозицияАтрибутаКодировки = СтрНайти(ТекстHTML,"charset");
			Если ПозицияАтрибутаКодировки <> 0 Тогда
			Инд = 0;
			Пока КодСимвола(Сред(ТекстHTML,ПозицияАтрибутаКодировки + 8 + Инд,1)) <> 34 Цикл
				КодировкаПисьма = КодировкаПисьма + Сред(ТекстHTML,ПозицияАтрибутаКодировки + 8 + Инд,1);
				Инд = Инд + 1;
			КонецЦикла
		Иначе
				КодировкаПисьма = "utf8";
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаФайлов = ПолучитьВложенияПисьмаСНеПустымИД(Письмо);
		
		Если ТаблицаФайлов.Количество() Тогда
			
				ДокументHTML = ЗаменитьИдентификаторыКартинокНаПутьКФайлам(ТекстHTML, ТаблицаФайлов, КодировкаПисьма, ОбработатьКартинки);
			
		Иначе
			ДокументHTML = ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML, КодировкаПисьма);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДокументHTML;
	
КонецФункции

// Обрабатывает текст HTML электронного письма.
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого будет проведена оценка.
//
// Возвращаемое значение:
//   Строка   - обработанный текст электронного письма.
//
Функция ОбработатьТекстHTML(Письмо) Экспорт
	
	СтруктураРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Письмо,"ТекстHTML,Кодировка");
	ТекстHTML = СтруктураРеквизиты.ТекстHTML;
	Кодировка = СтруктураРеквизиты.Кодировка;
	
	Если Не ПустаяСтрока(ТекстHTML) Тогда
		
		// Добавим тег HTML если он отсутствует. Такие письма могут приходить к примеру с Gmail. 
		// Необходимо для корректного отображения в элементе формы.
		Если СтрЧислоВхождений(ТекстHTML,"<html") = 0 Тогда
			ТекстHTML = "<html>" + ТекстHTML + "</html>"
		КонецЕсли;
		
		ТаблицаФайлов = ПолучитьВложенияПисьмаСНеПустымИД(Письмо);
		
		Если ТаблицаФайлов.Количество() Тогда
			
			ДокументHTML = ЗаменитьИдентификаторыКартинокНаПутьКФайлам(ТекстHTML, ТаблицаФайлов, Кодировка);
			
			Возврат ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			
		Иначе
			
			Возврат ТекстHTML;
			
		КонецЕсли;
		
	Иначе
		
		Возврат ТекстHTML;
		
	КонецЕсли;
	
КонецФункции

// Возвращает формат исходящих писем по умолчанию для пользователя, 
// исходя из настроек системы и формата последнего письма, отправленного пользователем.
// 
// Параметры:
//   Пользователь - СправочникСсылка.Пользователи - пользователь.
//
// Возвращаемое значение
//   ПеречислениеСсылка.СпособыРедактированияЭлектронныхПисем.
// 
Функция ФорматСообщенияПоУмолчанию(Пользователь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ОтправлятьПисьмаВФорматеHTML") Тогда
		Возврат Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА ЭлектронноеПисьмоИсходящее.ТипТекста = ЗНАЧЕНИЕ(Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРедактированияЭлектронныхПисем.HTML)
	|	КОНЕЦ КАК ФорматСообщения,
	|	ЭлектронноеПисьмоИсходящее.Дата
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.Автор = &Пользователь
	|	И (НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронноеПисьмоИсходящее.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Пользователь",Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ФорматСообщения;
	КонецЕсли;
	
КонецФункции

// Заменяет в тексте HTML ИД картинок вложений на путь к файлам и создает объект документ HTML.
//
// Параметры:
//  ТекстHTML - Строка - обрабатываемый текст HTML.
//  Атрибут - ТаблицаЗначений - таблица, содержащая информацию о присоединенных файлов.
//  Кодировка - Строка - кодировка текста HTML.
//
// Возвращаемое значение:
//  ДокументHTML   - созданный документ HTML.
//
Функция ЗаменитьИдентификаторыКартинокНаПутьКФайлам(ТекстHTML,ТаблицаФайлов,Кодировка = Неопределено, ОбработатьКартинки = Ложь)
	
	ДокументHTML = ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML,Кодировка);
	
	Для каждого ПрисоединенныйФайл Из ТаблицаФайлов Цикл
		
		Для каждого Картинка Из ДокументHTML.Картинки Цикл
			
			АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
			Если АтрибутИсточникКартинки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрЧислоВхождений(АтрибутИсточникКартинки.Значение, ПрисоединенныйФайл.ИДФайлаЭлектронногоПисьма) > 0 Тогда
				
				НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
				Если ОбработатьКартинки Тогда
					ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл.Ссылка);
					ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
					ТекстовоеСодержимое = Base64Строка(ДвоичныеДанные);
					ТекстовоеСодержимое = "data:image/" + Сред(ДанныеФайла.Расширение,2) + ";base64," + Символы.ПС + ТекстовоеСодержимое;
				Иначе
					// Если данные картинки получить не удалось, то картинку не выводим. Пользователю при этом ничего не сообщаем.
					Попытка
						ТекстовоеСодержимое = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл.Ссылка).СсылкаНаДвоичныеДанныеФайла;
					Исключение
						ТекстовоеСодержимое = "";
					КонецПопытки;
				КонецЕсли;
				
				НовыйАтрибутКартинки.ТекстовоеСодержимое = ТекстовоеСодержимое;
				Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДокументHTML;
	
КонецФункции

// Получает вложения письма с непустым ИД.
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого будет проведена оценка.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица с информацией о вложениях электронного письма с непустым ИД.
//
Функция ПолучитьВложенияПисьмаСНеПустымИД(Письмо) Экспорт
	
	ДанныеПрисоединенныхФайловПисьма = ВзаимодействияПереопределяемый.ПолучитьДанныеОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо);
	
	Если ДанныеПрисоединенныхФайловПисьма = Неопределено Тогда
		ИмяОбъектаМетаданных = УправлениеЭлектроннойПочтой.ПолучитьИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо);
		ВладелецФайлов       = Письмо;
	Иначе
		ИмяОбъектаМетаданных = ДанныеПрисоединенныхФайловПисьма.ИмяСправочникаПрисоединенныеФайлы;
		ВладелецФайлов       = ДанныеПрисоединенныхФайловПисьма.Владелец;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПрисоединенныеФайлыПисьма.Ссылка,
	|	ПрисоединенныеФайлыПисьма.Наименование,
	|	ПрисоединенныеФайлыПисьма.Размер,
	|	ПрисоединенныеФайлыПисьма.ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК ПрисоединенныеФайлыПисьма
	|ГДЕ
	|	ПрисоединенныеФайлыПисьма.ВладелецФайла = &ВладелецФайлов
	|	И (НЕ ПрисоединенныеФайлыПисьма.ПометкаУдаления)
	|	И ПрисоединенныеФайлыПисьма.ИДФайлаЭлектронногоПисьма <> &ПустаяСтрока";
	
	Запрос.УстановитьПараметр("ПустаяСтрока","");
	Запрос.УстановитьПараметр("ВладелецФайлов",ВладелецФайлов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

// Получает данные письма основания.
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого будет проведена оценка.
//
// Возвращаемое значение:
//   ВыборкаИзРезультатовЗапроса   - оценка размера письма в байтах.
//
Функция ПолучитьДанныеПисьмаОснования(Письмо) Экспорт
	
	ИмяОбъектаМетаданных = Письмо.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ЭлектронноеПисьмоОснование.ТипТекста КАК ТипТекста,
	|	ЭлектронноеПисьмоОснование.Тема КАК Тема,
	|	ЭлектронноеПисьмоОснование.ТекстHTML КАК ТекстHTML,
	|	ЭлектронноеПисьмоОснование.Текст КАК Текст,
	|" + ?(ИмяОбъектаМетаданных = "ЭлектронноеПисьмоВходящее","ЭлектронноеПисьмоОснование.ОтправительАдрес","&ПустаяСтрока")+" КАК ОтправительАдрес,
	|	ЭлектронноеПисьмоОснование.ОтправительПредставление КАК ОтправительПредставление,
	|	ЭлектронноеПисьмоОснование.Дата КАК Дата,
	|	&ИмяОбъектаМетаданных КАК ИмяОбъектаМетаданных,
	|	ЭлектронноеПисьмоОснование.ПолучателиКопий.(
	|		Ссылка,
	|		НомерСтроки,
	|		Адрес,
	|		Представление,
	|		Контакт
	|	) КАК ПолучателиКопий,
	|	ЭлектронноеПисьмоОснование.ПолучателиПисьма.(
	|		Ссылка,
	|		НомерСтроки,
	|		Адрес,
	|		Представление,
	|		Контакт
	|	) КАК ПолучателиПисьма
	|ИЗ Документ." + ИмяОбъектаМетаданных + " КАК ЭлектронноеПисьмоОснование
	|ГДЕ
	|	ЭлектронноеПисьмоОснование.Ссылка = &Письмо";
	
	Запрос.УстановитьПараметр("Письмо",Письмо);
	Запрос.УстановитьПараметр("ПустаяСтрока","");
	Запрос.УстановитьПараметр("ИмяОбъектаМетаданных",ИмяОбъектаМетаданных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

// Обрабатывает текст HTML для помещения в форматированный документ.
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого будет проведена оценка.
//  ТекстHTML - Строка - обрабатываемый текст HTML.
//  СтруктураВложений - Структура - структура в которую помещаются картинки - вложения письма.
//
// Возвращаемое значение:
//   Число   - оценка размера письма в байтах.
//
Функция ОбработатьТекстHTMLДляФорматированногоДокумента(Письмо,ТекстHTML,СтруктураВложений) Экспорт
	
	Если Не ПустаяСтрока(ТекстHTML) Тогда
		
		ДокументHTML = ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
		
		ТаблицаФайлов = ПолучитьВложенияПисьмаСНеПустымИД(Письмо);
		
		Если ТаблицаФайлов.Количество() Тогда
			
			Для каждого ПрисоединенныйФайл Из ТаблицаФайлов Цикл
				
				Для каждого Картинка Из ДокументHTML.Картинки Цикл
					
					АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
					
					Если СтрЧислоВхождений(АтрибутИсточникКартинки.Значение, ПрисоединенныйФайл.ИДФайлаЭлектронногоПисьма) > 0 Тогда
						
						НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
						НовыйАтрибутКартинки.ТекстовоеСодержимое = ПрисоединенныйФайл.Наименование;
						Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
						
						СтруктураВложений.Вставить(
							ПрисоединенныйФайл.Наименование,
							Новый Картинка(ПолучитьИзВременногоХранилища(
								ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл.Ссылка).СсылкаНаДвоичныеДанныеФайла)));
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Возврат ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			
		Иначе
			
			Возврат ТекстHTML;
			
		КонецЕсли;
		
	Иначе
		
		Возврат ТекстHTML;
		
	КонецЕсли;
	
КонецФункции

// Добавляет строку с данными исходного письма.
// Параметры:
//  ЭлементРодитель - ЭлементHTML - родительский элемент HTML, для которого будет добавлены данные исходного письма.
//  Атрибут - Строка - наименование данных.
//  Значение - Строка - строка с данными.
//
Процедура ДобавитьСтрокуДанныхИсходногоПисьма(ЭлементРодитель,Атрибут,Значение)

	ДобавитьТекстовыйУзел(ЭлементРодитель,Атрибут + ": ",Истина);
	ДобавитьТекстовыйУзел(ЭлементРодитель,Значение,,Истина);

КонецПроцедуры

// Получает представление получателей входящего письма.
//
// Параметры:
//  ТаблицаПолучателей  - ТабличнаяЧасть - табличная часть для которой выполняется функция.
//
// Возвращаемое значение:
//   СтрокаКВозврату   - строка с представление всех получателей табличной части.
//
Функция ПолучитьПредставленияПолучателейВходящегоПисьма(ТаблицаПолучателей) Экспорт

	СтрокаКВозврату = "";
	
	Для Каждого Получатель Из ТаблицаПолучателей Цикл
		
		СтрокаКВозврату = СтрокаКВозврату + "'" 
		         + ?(ПустаяСтрока(Получатель.Представление), Получатель.Адрес, Получатель.Представление + "<"+ Получатель.Адрес+">") + "'"+ ", ";
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаКВозврату) Тогда
		
		СтрокаКВозврату = Лев(СтрокаКВозврату,СтрДлина(СтрокаКВозврату) - 2);
		
	КонецЕсли;
	
	Возврат СтрокаКВозврату;

КонецФункции

// Формирует элемент HTML шапки исходящего электронного письма.
// Параметры:
//  ЭлементРодитель - ЭлементHTML - родительский элемент HTML, для которого будет добавлен элемент данных шапки.
//  Выборка - ВыборкаИзРезультатаЗапроса - выборка по данным письма.
//  ТолькоПоПредставлениюОтправителя - Булево - определяет необходимо ли включать адрес отправителя или только
//                                              представление.
//
Функция СформироватьЭлементДанныхШапкиПисьма(ЭлементРодитель,Выборка,ТолькоПоПредставлениюОтправителя = Ложь) Экспорт
	
	ЭлементШрифт = ДобавитьЭлементСАтрибутами(ЭлементРодитель, "Font", Новый Структура("size,face","2","Tahoma"));
	ДобавитьСтрокуДанныхИсходногоПисьма(ЭлементШрифт, "From", 
		Выборка.ОтправительПредставление + ?(ТолькоПоПредставлениюОтправителя Или ПустаяСтрока(Выборка.ОтправительАдрес),
		                                     "",
		                                     "[" + Выборка.ОтправительАдрес +"]"));
	ДобавитьСтрокуДанныхИсходногоПисьма(ЭлементШрифт, "Sent", Формат(Выборка.Дата,"ДЛФ=D'"));
	ДобавитьСтрокуДанныхИсходногоПисьма(ЭлементШрифт, "To", 
		ПолучитьПредставленияПолучателейВходящегоПисьма(Выборка.ПолучателиПисьма.Выгрузить()));
	ТаблицаПолучателейКопий = Выборка.ПолучателиКопий.Выгрузить();
	Если ТаблицаПолучателейКопий.Количество() > 0 Тогда
		ДобавитьСтрокуДанныхИсходногоПисьма(ЭлементШрифт, "cc", 
			ПолучитьПредставленияПолучателейВходящегоПисьма(ТаблицаПолучателейКопий));
	КонецЕсли;
	ДобавитьСтрокуДанныхИсходногоПисьма(ЭлементШрифт,"Subject",Выборка.Тема);
	
	Возврат ЭлементШрифт;
	
КонецФункции

// Дополняет тело письма шапкой печатной формы.
// Параметры:
//  ДокументHTML - ДокументHTML - документ HTML для которого будет дополнена шапка.
//  Выборка - ВыборкаИзРезультатаЗапроса - выборка по данным письма.
//  ЭтоИсходящее - Булево - Истина если письмо исходящее, Ложь если исходящее.
//
Процедура ДополнитьТелоПисьмаШапкойПечатнойФормы(ДокументHTML,Выборка,ЭтоИсходящее)
	
	Если ДокументHTML.Тело = Неопределено Тогда
		ЭлементТелоПисьма = ДокументHTML.СоздатьЭлемент("body");
		ДокументHTML.Тело = ЭлементТелоПисьма;
	Иначе
		ЭлементТелоПисьма = ДокументHTML.Тело;
	КонецЕсли;
	
	МассивДочернихУзловТела = ПолучитьМассивДочернихУзловСодержащихHTML(ЭлементТелоПисьма);
	
	// Имя пользователя учетной записи.
	ЭлементПользователь = СформироватьЭлементИмяПользователяУчетнойЗаписи(ЭлементТелоПисьма, Выборка);
	ВставитьЭлементHTMLПервымДочернимЭлементом(ЭлементТелоПисьма,ЭлементПользователь, МассивДочернихУзловТела);
	
	// Горизонтальный разделитель
	СтруктураАтрибутов = Новый Структура;
	СтруктураАтрибутов.Вставить("size", "2");
	СтруктураАтрибутов.Вставить("width", "100%");
	СтруктураАтрибутов.Вставить("align", "center");
	СтруктураАтрибутов.Вставить("tabindex", "-1");
	
	ЭлементHR = ДобавитьЭлементСАтрибутами(ЭлементТелоПисьма, "hr", СтруктураАтрибутов);
	ВставитьЭлементHTMLПервымДочернимЭлементом(ЭлементТелоПисьма,ЭлементHR,МассивДочернихУзловТела);
	
	// Шапка письма
	ЭлементДанныеШапкиПисьма = СформироватьЭлементДанныхШапкиПисьма(ЭлементТелоПисьма,Выборка,ЭтоИсходящее);
	ВставитьЭлементHTMLПервымДочернимЭлементом(ЭлементТелоПисьма,ЭлементДанныеШапкиПисьма,МассивДочернихУзловТела);
	
КонецПроцедуры

// Заменяет имена картинок в документ HTML на идентификаторы почтовых вложений.
// Параметры:
//  ДокументHTML - ДокументHTML - документ HTML в котором будет выполняться замена.
//  ТаблицаСоответствий - ТаблицаЗначений - таблица соответствий имен файлов и идентификаторов.
//
Процедура ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(ДокументHTML,ТаблицаСоответствий) Экспорт
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		НайденнаяСтрока = ТаблицаСоответствий.Найти(АтрибутИсточникКартинки.ТекстовоеСодержимое,"ИмяФайла");
		Если НайденнаяСтрока <> Неопределено Тогда
			
			НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
			НовыйАтрибутКартинки.ТекстовоеСодержимое = Строка("cid:"+НайденнаяСтрока.ИдентификаторФайлаДляHTML);
			Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьЭлементИмяПользователяУчетнойЗаписи(ЭлементРодитель,Выборка)
	
	ЭлементШрифт = ДобавитьЭлементСАтрибутами(ЭлементРодитель, "Font", Новый Структура("size,face", "3", "Tahoma"));
	ДобавитьТекстовыйУзел(ЭлементШрифт,Выборка.ИмяПользователяУчетнойЗаписи, Истина);
	
	Возврат ЭлементШрифт;
	
КонецФункции

// Оценивает размер электронного письма.
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого будет проведена оценка.
//
// Возвращаемое значение:
//   Число   - оценка размера письма в байтах.
//
Функция ОценитьРазмерИсходящегоЭлектронногоПисьма(Письмо) Экспорт
	
	Размер = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.Размер, 0) * 1.5) КАК Размер
	|ИЗ
	|	Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы КАК ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.ВладелецФайла = &Письмо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЭлектронноеПисьмоИсходящее.ТипТекста = ЗНАЧЕНИЕ(Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст)
	|			ТОГДА ЭлектронноеПисьмоИсходящее.Текст
	|		ИНАЧЕ ЭлектронноеПисьмоИсходящее.ТекстHTML
	|	КОНЕЦ КАК Текст,
	|	ЭлектронноеПисьмоИсходящее.Тема
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.Ссылка = &Письмо";
	
	Запрос.УстановитьПараметр("Письмо",Письмо);
	
	Результат = Запрос.ВыполнитьПакет();
	Если НЕ Результат[0].Пустой() Тогда
		Выборка = Результат[0].Выбрать();
		Выборка.Следующий();
		Размер = Размер + ?(Выборка.Размер = Null, 0, Выборка.Размер);
	КонецЕсли;
	
	Если НЕ Результат[1].Пустой() Тогда
		Выборка = Результат[1].Выбрать();
		Выборка.Следующий();
		Размер = Размер + СтрДлина(Выборка.Текст) + СтрДлина(Выборка.Тема);
		
	КонецЕсли;;
	
	Возврат Размер;

КонецФункции

////////////////////////////////////////////////////////////////////////////////////
//        Работа с объектом Документ HTML.

// Получает массив дочерних узлов элемента HTML, содержащих HTML.
//
// Параметры:
//  Элемент  - ЭлементHTML
//
// Возвращаемое значение:
//   Массив   - массив дочерних узлов содержащих HTML.
//
Функция ПолучитьМассивДочернихУзловСодержащихHTML(Элемент) Экспорт

	МассивДочернихУзлов = Новый Массив;
	
	Для каждого ДочернийУзел Из Элемент.ДочерниеУзлы Цикл
		
		Если ТипЗнч(ДочернийУзел) = Тип("ЭлементБлокHTML")
			ИЛИ ТипЗнч(ДочернийУзел) = Тип("ЭлементHTML")
			ИЛИ ТипЗнч(ДочернийУзел) = Тип("ТекстDOM")
			ИЛИ ТипЗнч(ДочернийУзел) = Тип("КомментарийDOM")
			ИЛИ ТипЗнч(ДочернийУзел) = Тип("ЭлементТаблицаHTML") Тогда
			
			МассивДочернихУзлов.Добавить(ДочернийУзел);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДочернихУзлов;

КонецФункции

// Получает объект ДокументHTML из текста HTML.
//
// Параметры:
//  ТекстHTML  - Строка - 
//
// Возвращаемое значение:
//   ДокументHTML   - созданный документ HTML.
Функция ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML,Кодировка = Неопределено) Экспорт
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	
	НовыйТекстHTML = ТекстHTML;
	ПозицияОткрытиеXML = СтрНайти(НовыйТекстHTML,"<?xml");
	
	Если ПозицияОткрытиеXML > 0 Тогда
		
		ПозицияЗакрытиеXML = СтрНайти(НовыйТекстHTML,"?>");
		Если ПозицияЗакрытиеXML > 0 Тогда
			
			НовыйТекстHTML = ЛЕВ(НовыйТекстHTML,ПозицияОткрытиеXML - 1) + ПРАВ(НовыйТекстHTML,СтрДлина(НовыйТекстHTML) - ПозицияЗакрытиеXML -1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Кодировка = Неопределено Тогда
		ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	Иначе
		ЧтениеHTML.УстановитьСтроку(ТекстHTML, Кодировка);
	КонецЕсли;
	Возврат Построитель.Прочитать(ЧтениеHTML);
	
КонецФункции

// Получает объект ДокументHTML из обычного текста.
//
// Параметры:
//  Текст  - Строка - текст из которого будет создан документ HTML.
//
// Возвращаемое значение:
//   ДокументHTML   - созданный документ HTML.
Функция ПолучитьДокументHTMLИзОбычногоТекста(Текст) Экспорт
	
	ДокументHTML = Новый ДокументHTML;
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	ЭлементТело.ДобавитьДочерний(ЭлементБлок);
	
	КоличествоСтрок = СтрЧислоСтрок(Текст);
	Для Инд = 1 По КоличествоСтрок Цикл
		ДобавитьТекстовыйУзел(ЭлементБлок, СтрПолучитьСтроку(Текст, Инд), Ложь, ?(Инд = КоличествоСтрок, Ложь, Истина));
	КонецЦикла;
	
	Возврат ДокументHTML;
	
КонецФункции

// Получает текст HTML из объекта ДокументHTML.
//
// Параметры:
//  ДокументHTML  - ДокументHTML - документ, из которого будет извлекаться текст.
//
// Возвращаемое значение:
//   Строка   - текст HTML
//
Функция ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML) Экспорт
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML,ЗаписьHTML);
	Возврат ЗаписьHTML.Закрыть();
	
КонецФункции

// Создает атрибут элемента HTML и устанавливает его текстовое содержимое.
//
// Параметры:
//  ЭлементHTML  - ЭлементHTML - элемент для которого устанавливается атрибут.
//  Имя  - Строка - имя атрибута HTML.
//  ТекстовоеСодержимое  - Строка - текстовое содержимое атрибута.
//
Процедура УстановитьАтрибутЭлементаHTML(ЭлементHTML,Имя,ТекстовоеСодержимое)
	
	АтрибутHTML = ЭлементHTML.ДокументВладелец.СоздатьАтрибут(Имя);
	АтрибутHTML.ТекстовоеСодержимое = ТекстовоеСодержимое;
	ЭлементHTML.Атрибуты.УстановитьИменованныйЭлемент(АтрибутHTML);
	
КонецПроцедуры

// Добавляет дочерний элемент с атрибутами.
//
// Параметры:
//  ЭлементРодитель  - ЭлементHTML - элемент,к которому будет добавлен дочерний элемент.
//  Имя  - Строка - имя элемента HTML.
//  Атрибуты  - Соответствие - ключ содержит имя атрибута, значение текстовое содержимое.
//
// Возвращаемое значение:
//   ЭлементHTML   - добавленный элемент.
//
Функция ДобавитьЭлементСАтрибутами(ЭлементРодитель,Имя,Атрибуты) Экспорт
	
	ЭлементHTML = ЭлементРодитель.ДокументВладелец.СоздатьЭлемент(Имя);
	
	Для Каждого Атрибут Из Атрибуты Цикл
		
		УстановитьАтрибутЭлементаHTML(ЭлементHTML, Атрибут.Ключ, Атрибут.Значение);
		
	КонецЦикла;
	
	ЭлементРодитель.ДобавитьДочерний(ЭлементHTML);
	
	Возврат ЭлементHTML;
	
КонецФункции

// Получает обычный текст из текста HTML.
//
// Параметры:
//  ТекстHTML  - Строка - текст HTML.
//
// Возвращаемое значение:
//   Строка   - обычный текст
//
Функция ПолучитьОбычныйТекстИзHTML(ТекстHTML) Экспорт
	
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьHTML(ТекстHTML, Новый Структура);
	Возврат ФорматированныйДокумент.ПолучитьТекст();
	
КонецФункции

// Добавляет текстовый узел в ДокументHTML.
//
// Параметры:
//  ЭлементРодитель  - ЭлементHTML - элемент,к которому будет добавлен дочерний элемент.
//  Текст  - Строка - содержимое текстового узла.
//  Атрибуты  - Соответствие - ключ содержит имя атрибута, значение текстовое содержимое.
//
// Возвращаемое значение:
//   ЭлементHTML   - добавленный элемент.
//
Процедура ДобавитьТекстовыйУзел(ЭлементРодитель, Текст, ВыделятьЖирным = Ложь,ДобавлятьПереносСтроки = Ложь)
	
	ДокументВладелец = ЭлементРодитель.ДокументВладелец;
	
	ТекстовыйУзел = ДокументВладелец.СоздатьТекстовыйУзел(Текст);
	
	Если ВыделятьЖирным Тогда
		ЭлементЖирный = ДокументВладелец.СоздатьЭлемент("b");
		ЭлементЖирный.ДобавитьДочерний(ТекстовыйУзел);
		ЭлементРодитель.ДобавитьДочерний(ЭлементЖирный);
	Иначе
		
		ЭлементРодитель.ДобавитьДочерний(ТекстовыйУзел);
		
	КонецЕсли;
	
	Если ДобавлятьПереносСтроки Тогда
		ЭлементРодитель.ДобавитьДочерний(ДокументВладелец.СоздатьЭлемент("br"));
	КонецЕсли;
	
КонецПроцедуры

// Вставляет элемент HTML перед первым дочерним узлом элемента родителя.
//
// Параметры:
//  ЭлементРодитель  - ЭлементHTML - элемент,к которому будет добавлен дочерний элемент.
//  ВставляемыйЭлемент  - ЭлементHTML - вставляемый элемент HTML.
//  МассивДочернихЭлементовРодителя  - Массив - массив дочерних элементов родительского элемента.
//
Процедура ВставитьЭлементHTMLПервымДочернимЭлементом(ЭлементРодитель,
		ВставляемыйЭлемент,
		МассивДочернихЭлементовРодителя) Экспорт
	
	Если МассивДочернихЭлементовРодителя.Количество() > 0 Тогда
		ЭлементРодитель.ВставитьПеред(ВставляемыйЭлемент, МассивДочернихЭлементовРодителя[0]);
	Иначе
		ЭлементРодитель.ДобавитьДочерний(ВставляемыйЭлемент);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////
// Работа с настройками

// Возвращает настройку текущего пользователя.
// Если настройка не задана и передав параметр ЗначениеЕслиНеЗадана,
// то возвращает его.
//
Функция ПолучитьНастройкуТекущегоПользователя(КлючОбъекта,
	КлючНастроек = Неопределено,
	ЗначениеЕслиНеЗадана = Неопределено)
	
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючОбъекта,
		КлючНастроек,
		ЗначениеЕслиНеЗадана);
	
	Возврат Результат;
	
КонецФункции

// Сохраняет настройку текущего пользователя.
Процедура СохранитьНастройкуТекущегоПользователя(КлючОбъекта, Значение, КлючНастроек = Неопределено)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючОбъекта,
		КлючНастроек,
		Значение);
		
КонецПроцедуры

// Получает настройку пользователя работы с почтой.
//
Функция ПолучитьНастройкуРаботаСПочтой() Экспорт
	
	Настройка = ПолучитьНастройкуТекущегоПользователя("РаботаСПочтой", "НастройкиПользователя", Новый Структура);
	Если ТипЗнч(Настройка) <> Тип("Структура") Тогда
		Настройка = Новый Структура;
	КонецЕсли;
	Возврат Настройка;
	
КонецФункции

// Сохраняет настройку пользователя работы с почтой.
//
Процедура СохранитьНастройкуРаботаСПочтой(Значение) Экспорт
	
	СохранитьНастройкуТекущегоПользователя("РаботаСПочтой", Значение, "НастройкиПользователя");
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////
// Сообщения SMS

// Проверяет статусы доставки для отправленных SMS. 
//
// Параметры:
//  СообщениеSMS  - ДокументОбъект.СообщениеSMS - документ, для которого проверяется статус доставки SMS.
//  Модифицированность  - Булево - признак модифицированности документа.
//
Процедура ПроверитьСтатусыДоставкиSMS(СообщениеSMS, Модифицированность) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СообщениеSMSАдресаты.НомерСтроки,
	|	СообщениеSMSАдресаты.ИдентификаторСообщения,
	|	СообщениеSMSАдресаты.СостояниеСообщения
	|ИЗ
	|	Документ.СообщениеSMS.Адресаты КАК СообщениеSMSАдресаты
	|ГДЕ
	|	СообщениеSMSАдресаты.Ссылка = &СообщениеSMS
	|	И СообщениеSMSАдресаты.ИдентификаторСообщения <> """"
	|	И (СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОтправляетсяПровайдером)
	|			ИЛИ СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОтправленоПровайдером)
	|			ИЛИ СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОшибкаПолученияСтатусаУПровайдера))";
	
	Запрос.УстановитьПараметр("СообщениеSMS", СообщениеSMS.Ссылка);
	
	ЕстьИзменения = Ложь;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СостояниеСообщения = СостояниеСообщенияSMSСогласноСтатусуДоставки(ОтправкаSMS.СтатусДоставки(Выборка.ИдентификаторСообщения));
		
		Если СостояниеСообщения <> Выборка.СостояниеСообщения Тогда
			СообщениеSMS.Адресаты[Выборка.НомерСтроки - 1].СостояниеСообщения = СостояниеСообщения;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		СообщениеSMS.Состояние = СостояниеДокументаСообщениеSMS(СообщениеSMS);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определяет статус документа "Сообщение SMS" по состоянию входящих в него сообщений SMS.
//
// Параметры:
//  СообщениеSMS  - ДокументОбъект.СообщениеSMS - документ, для которого необходимо определить
//                                                статус.
//
// Возвращаемое значение:
//   Перечисления.СостоянияДокументаСообщениеSMS   - рассчитанный статус документа.
//
Функция СостояниеДокументаСообщениеSMS(СообщениеSMS)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Адресаты.СостояниеСообщения КАК Состояние
	|ПОМЕСТИТЬ Состояния
	|ИЗ
	|	&Адресаты КАК Адресаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Состояния.Состояние
	|ИЗ
	|	Состояния КАК Состояния";
	
	Запрос.УстановитьПараметр("Адресаты", СообщениеSMS.Адресаты.Выгрузить());
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Перечисления.СостоянияДокументаСообщениеSMS.Черновик;
	КонецЕсли;
	
	ТекущийСтатус = Неопределено;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.Исходящее Тогда
			
			Возврат  Перечисления.СостоянияДокументаСообщениеSMS.Исходящее;
			
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.Черновик Тогда
			
			Возврат Перечисления.СостоянияСообщенияSMS.Черновик;
			
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.НеУдалосьПередатьПровайдеру Тогда
			
			Если ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено Тогда
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено;
			Иначе
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.НеДоставлено;
			КонецЕсли;
			
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.ОтправляетсяПровайдером 
			      ИЛИ Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.ОтправленоПровайдером
			      ИЛИ Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.ОшибкаПолученияСтатусаУПровайдера
			      ИЛИ Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.НеОтправленоПровайдером Тогда
			Возврат Перечисления.СостоянияДокументаСообщениеSMS.Доставляется;
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.Доставлено Тогда
			Если ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено
				 ИЛИ ТекущийСтатус = Неопределено Тогда
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено;
			Иначе
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено;
			КонецЕсли;
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.НеДоставлено Тогда
			Если ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено Тогда
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено;
			Иначе
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.НеДоставлено;
			КонецЕсли;
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.НеОпознаноПровайдером Тогда
			Если ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено Тогда
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено;
			Иначе
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.НеДоставлено;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТекущийСтатус;

КонецФункции

// Преобразует статусы доставки SMS подсистемы ОтправкаSMS в 
//   состояния сообщения SMS подсистемы Взаимодействия.
//
// Параметры:
//  СтатусДоставки  - Перечисления.СтатусыДоставкиSMS - значение, которое необходимо преобразовать.
//
// Возвращаемое значение:
//   Перечисления.СостоянияСообщенияSMS - преобразованное значение.
//
Функция СостояниеСообщенияSMSСогласноСтатусуДоставки(СтатусДоставки);
	
	Если СтатусДоставки = "НеОтправлялось" Тогда
		Возврат Перечисления.СостоянияСообщенияSMS.НеОтправленоПровайдером;
	ИначеЕсли СтатусДоставки = "Отправляется" Тогда
		Возврат Перечисления.СостоянияСообщенияSMS.ОтправляетсяПровайдером;
	ИначеЕсли СтатусДоставки = "Отправлено" Тогда
		Возврат Перечисления.СостоянияСообщенияSMS.ОтправленоПровайдером;
	ИначеЕсли СтатусДоставки = "НеДоставлено" Тогда
		Возврат Перечисления.СостоянияСообщенияSMS.НеДоставлено;
	ИначеЕсли СтатусДоставки = "Доставлено" Тогда
		Возврат Перечисления.СостоянияСообщенияSMS.Доставлено;
	ИначеЕсли СтатусДоставки = "НеОтправлялось" Тогда
		Возврат Перечисления.СостоянияСообщенияSMS.НеОпознаноПровайдером;
	ИначеЕсли СтатусДоставки = "Ошибка" Тогда
		Возврат Перечисления.СостоянияСообщенияSMS.ОшибкаПолученияСтатусаУПровайдера;
	Иначе
		Возврат Перечисления.СостоянияСообщенияSMS.ОшибкаПолученияСтатусаУПровайдера;
	КонецЕсли;
	
КонецФункции

// Выполняет отправку сообщений SMS по переданному документу Сообщение SMS.
Функция ОтправкаSMSПоДокументу(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выполнены настройки отправки SMS.'"),,"Объект");
		ВзаимодействияКлиентСервер.УстановитьСостояниеИсходящееДокументСообщениеSMS(Документ);
		Возврат 0;
	КонецЕсли;
	
	МассивНомеров     = Документ.Адресаты.Выгрузить(,"НомерДляОтправки").ВыгрузитьКолонку("НомерДляОтправки");
	РезультатОтправки = ОтправкаSMS.ОтправитьSMS(МассивНомеров, Документ.ТекстСообщения," " , Документ.ОтправлятьВТранслите);
	
	ОтразитьРезультатыОтправкиSMSВДокументе(Документ, РезультатОтправки);
		
	Если Не ПустаяСтрока(РезультатОтправки.ОписаниеОшибки) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатОтправки.ОписаниеОшибки,,"Документ");
	КонецЕсли;

	Возврат РезультатОтправки.ОтправленныеСообщения.Количество();
	
КонецФункции

// Выполняет процедуру отправки сообщений SMS.
Процедура ОтправкаSMS() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаSMS);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начата регламентная отправка сообщений SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	Если Не ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
			ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru = 'Не выполнены настройки отправки SMS.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	Если Не ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выполнены настройки отправки SMS.'"),,"Объект");
		Возврат;
	КонецЕсли;
	
	ТаблицаАдресатовСообщения = Новый ТаблицаЗначений;
	ТаблицаАдресатовСообщения.Колонки.Добавить("НомерСтроки");
	ТаблицаАдресатовСообщения.Колонки.Добавить("НомерДляОтправки");
	ТаблицаАдресатовСообщения.Колонки.Добавить("КакСвязаться");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СообщениеSMS.Ссылка КАК Ссылка,
	|	СообщениеSMS.ТекстСообщения,
	|	СообщениеSMS.ОтправлятьВТранслите,
	|	СообщениеSMSАдресаты.НомерСтроки,
	|	СообщениеSMSАдресаты.НомерДляОтправки,
	|	СообщениеSMSАдресаты.КакСвязаться
	|ИЗ
	|	Документ.СообщениеSMS.Адресаты КАК СообщениеSMSАдресаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеSMS КАК СообщениеSMS
	|		ПО СообщениеSMSАдресаты.Ссылка = СообщениеSMS.Ссылка
	|ГДЕ
	|	СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.Исходящее)
	|	И НЕ СообщениеSMS.ПометкаУдаления
	|	И СообщениеSMSАдресаты.ИдентификаторСообщения = """"
	|	И ВЫБОР
	|			КОГДА СообщениеSMS.ДатаКогдаОтправить <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СообщениеSMS.ДатаКогдаОтправить < &ТекущаяДата
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА СообщениеSMS.ДатаАктуальностиОтправки = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СообщениеSMS.ДатаАктуальностиОтправки > &ТекущаяДата
	|		КОНЕЦ
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	ВыборкаДокументы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаДокументы.Следующий() Цикл
		
		ТаблицаАдресатовСообщения.Очистить();
		
		ВыборкаАдресаты = ВыборкаДокументы.Выбрать();
		Пока ВыборкаАдресаты.Следующий() Цикл
			
			ТекстСообщения       = ВыборкаАдресаты.ТекстСообщения;
			ОтправлятьВТранслите = ВыборкаАдресаты.ОтправлятьВТранслите;
			
			НоваяСтрока = ТаблицаАдресатовСообщения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаАдресаты);
			
		КонецЦикла;
		
		Если ТаблицаАдресатовСообщения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МассивНомеров = ТаблицаАдресатовСообщения.ВыгрузитьКолонку("НомерДляОтправки");
		РезультатОтправки = ОтправкаSMS.ОтправитьSMS(МассивНомеров, ТекстСообщения, "", ОтправлятьВТранслите);
		
		Если РезультатОтправки.ОтправленныеСообщения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = ВыборкаДокументы.Ссылка.ПолучитьОбъект();
		ОтразитьРезультатыОтправкиSMSВДокументе(ДокументОбъект, РезультатОтправки);
		ДокументОбъект.ДополнительныеСвойства.Вставить("НеЗаписыватьКонтакты", Истина);
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Закончена регламентная отправка сообщений SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));

КонецПроцедуры

// Обработчик регламентного задания.
// Выполняет процедуру обновления статусов доставки SMS по расписанию.
//
Процедура ОбновлениеСтатусовДоставкиSMS() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеСтатусовДоставкиSMS);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начато регламентное обновление состояний сообщений SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	Если Не ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
			ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru = 'Не выполнены настройки отправки SMS.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	ТаблицаИзменившихсяСтатусов = Новый ТаблицаЗначений;
	ТаблицаИзменившихсяСтатусов.Колонки.Добавить("НомерСтроки");
	ТаблицаИзменившихсяСтатусов.Колонки.Добавить("СостояниеСообщения");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СообщениеSMSАдресаты.Ссылка КАК Ссылка,
	|	СообщениеSMSАдресаты.НомерСтроки,
	|	СообщениеSMSАдресаты.ИдентификаторСообщения,
	|	СообщениеSMSАдресаты.СостояниеСообщения
	|ИЗ
	|	Документ.СообщениеSMS.Адресаты КАК СообщениеSMSАдресаты
	|ГДЕ
	|	СообщениеSMSАдресаты.ИдентификаторСообщения <> """"
	|	И (СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОтправляетсяПровайдером)
	|			ИЛИ СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОтправленоПровайдером)
	|			ИЛИ СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОшибкаПолученияСтатусаУПровайдера))
	|	И НЕ СообщениеSMSАдресаты.Ссылка.ПометкаУдаления
	|ИТОГИ ПО
	|	Ссылка";
	
	ВыборкаДокументы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаДокументы.Следующий() Цикл
		
		ТаблицаИзменившихсяСтатусов.Очистить();
		
		ВыборкаИдентификаторы = ВыборкаДокументы.Выбрать();
		Пока ВыборкаИдентификаторы.Следующий() Цикл
			
			СостояниеСообщения = СостояниеСообщенияSMSСогласноСтатусуДоставки(ОтправкаSMS.СтатусДоставки(ВыборкаИдентификаторы.ИдентификаторСообщения));
			
			Если СостояниеСообщения <> ВыборкаИдентификаторы.СостояниеСообщения Тогда
				НоваяСтрока = ТаблицаИзменившихсяСтатусов.Добавить();
				НоваяСтрока.НомерСтроки        = ВыборкаИдентификаторы.НомерСтроки;
				НоваяСтрока.СостояниеСообщения = СостояниеСообщения;
			КонецЕсли;
			
			Если ТаблицаИзменившихсяСтатусов.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ИзменившийсяСтатус Из ТаблицаИзменившихсяСтатусов Цикл
				ДокументОбъект = ВыборкаДокументы.Ссылка.ПолучитьОбъект();
				ДокументОбъект.Адресаты[ИзменившийсяСтатус.НомерСтроки - 1].СостояниеСообщения = ИзменившийсяСтатус.СостояниеСообщения;
			КонецЦикла;
			
			ДокументОбъект.Состояние = СостояниеДокументаСообщениеSMS(ДокументОбъект);
			ДокументОбъект.ДополнительныеСвойства.Вставить("НеЗаписыватьКонтакты", Истина);
			ДокументОбъект.Записать();
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Закончено регламентное обновление состояний сообщений SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры

// Устанавливает состояние документа "Сообщение SMS" в зависимости от состояний отдельных сообщений различным контактам.
//
// Параметры:
//  ДокументОбъект     - ДокументОбъект.СообщениеSMS - документ, для которого определяется состояние.
//  РезультатОтправки  - Структура - результат отправки сообщения SMS.
//
Процедура ОтразитьРезультатыОтправкиSMSВДокументе(ДокументОбъект, РезультатОтправки)
	
	Для Каждого ОтправленноеСообщение Из РезультатОтправки.ОтправленныеСообщения Цикл
		Для Каждого НайденнаяСтрока Из ДокументОбъект.Адресаты.НайтиСтроки(Новый Структура("НомерДляОтправки",ОтправленноеСообщение.НомерПолучателя)) Цикл
			НайденнаяСтрока.ИдентификаторСообщения = ОтправленноеСообщение.ИдентификаторСообщения;
			НайденнаяСтрока.СостояниеСообщения     = Перечисления.СостоянияСообщенияSMS.ОтправляетсяПровайдером;
		КонецЦикла;
	КонецЦикла;
	
	ДокументОбъект.Состояние = СостояниеДокументаСообщениеSMS(ДокументОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////
// Работа с папками электронных писем.

// Проверяет, является ли текущий пользователь ответственным за ведение папок для учетной записи.
//
// Параметры:
//  УчетнаяЗапись  - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись для которой выполняется проверка.
//
// Возвращаемое значение:
//   Булево   - Истина, если является, Ложь в обратном случае.
//
Функция ПользовательЯвляетсяОтветственнымЗаВедениеПапок(УчетнаяЗапись) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиУчетныхЗаписейЭлектроннойПочты.ОтветственныйЗаВедениеПапок
	|ИЗ
	|	РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|ГДЕ
	|	НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = &УчетнаяЗаписьЭлектроннойПочты
	|	И НастройкиУчетныхЗаписейЭлектроннойПочты.ОтветственныйЗаВедениеПапок = &ОтветственныйЗаВедениеПапок";
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьЭлектроннойПочты", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ОтветственныйЗаВедениеПапок", Пользователи.АвторизованныйПользователь());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции 

// Устанавливает родителя у папки электронных писем.
//
// Параметры:
//  Папка  - СправочникСсылка.ПапкиЭлектронныхПисем - папка для которой устанавливается родитель.
//  НовыйРодитель  - СправочникСсылка.ПапкиЭлектронныхПисем - папка, которая будет установлена в качестве родителя.
//  НеЗаписыватьПапку  - Булево - признак который определяет необходимость записывать папку в данной процедуре.
//
Процедура УстановитьРодителяУПапки(Папка, НовыйРодитель, НеЗаписыватьПапку = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПапкиЭлектронныхПисем.Ссылка
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Ссылка В ИЕРАРХИИ(&ПеремещаемаяПапка)
	|	И ПапкиЭлектронныхПисем.Ссылка = &НовыйРодитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПапкиЭлектронныхПисем.Ссылка) КАК Ссылка
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				ПапкиЭлектронныхПисем.Ссылка
	|			ИЗ
	|				Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|			ГДЕ
	|				ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|				И ПапкиЭлектронныхПисем.Наименование = &Удаленные)
	|	И ПапкиЭлектронныхПисем.Ссылка = &НовыйРодитель";
	
	Запрос.УстановитьПараметр("Удаленные", НСтр("ru = 'Удаленные'"));
	Запрос.УстановитьПараметр("ПеремещаемаяПапка", Папка);
	Запрос.УстановитьПараметр("НовыйРодитель", НовыйРодитель);
	
	Результат = Запрос.ВыполнитьПакет();
	Если Не Результат[0].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат[1].Пустой() Тогда
		ПеремещениеВПапкуУдаленные = Ложь;
	Иначе
		ПеремещениеВПапкуУдаленные = Истина;
	КонецЕсли;
	
	ПапкаОбъект          = Папка.ПолучитьОбъект();
	ПапкаОбъект.ДополнительныеСвойства.Вставить("ОбработаноИзменениеРодителя", Истина);
	
	Если Не НеЗаписыватьПапку Тогда
		ПапкаОбъект.Родитель = НовыйРодитель;
		ПапкаОбъект.Записать();
	КонецЕсли;
	
	ПеремещениеВПапкуУдаленные = Ложь;
	
	Если НЕ НовыйРодитель.Пустая()Тогда
		ЗначенияРеквизитовПапки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			НовыйРодитель,"ПредопределеннаяПапка,Наименование");
			Если ЗначенияРеквизитовПапки <> Неопределено 
				И ЗначенияРеквизитовПапки.ПредопределеннаяПапка 
				И ЗначенияРеквизитовПапки.Наименование = НСтр("ru = 'Удаленные'") Тогда
				
				ПеремещениеВПапкуУдаленные = Истина;
				
		КонецЕсли;
	КонецЕсли;
	
	Если ПеремещениеВПапкуУдаленные И НЕ ПапкаОбъект.ПометкаУдаления Тогда
		ПапкаОбъект.УстановитьПометкуУдаления(Истина);
		УстановитьПометкуУдаленияДляПисемПапки(Папка);
	ИначеЕсли ПапкаОбъект.ПометкаУдаления И НЕ ПеремещениеВПапкуУдаленные Тогда
		ПапкаОбъект.УстановитьПометкуУдаления(Ложь);
		УстановитьПометкуУдаленияДляПисемПапки(Папка);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает пометку удаления для писем папки.
//
// Параметры:
//  Папка  - СправочникСсылка.ПапкиЭлектронныхПисем - папка, письма которой будут помечены на удаление.
//
Процедура УстановитьПометкуУдаленияДляПисемПапки(Папка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоВходящее.Ссылка)
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма В ИЕРАРХИИ(&Папка)
	|	И ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма.ПометкаУдаления <> ЭлектронноеПисьмоВходящее.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма.ПометкаУдаления
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка)
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма В ИЕРАРХИИ(&Папка)
	|	И ЭлектронноеПисьмоИсходящее.ПометкаУдаления <> ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Папка",Папка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПисьмоОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПисьмоОбъект.ДополнительныеСвойства.Вставить("ОбработаноИзменениеПометкиУдаления",Истина);
		ПисьмоОбъект.УстановитьПометкуУдаления(Выборка.ПометкаУдаления);
		
	КонецЦикла;

КонецПроцедуры

// Устанавливает пометку удаления для писем папки.
//
// Параметры:
//  МассивПисем  - Массив - массив писем для которых будет установлена папка.
//  Папка  - СправочникСсылка.ПапкиЭлектронныхПисем - папка, письма которой будут помечены на удаление.
//
Процедура УстановитьПапкуДляМассиваПисем(МассивПисем,Папка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ЭлектронноеПисьмоВходящее.ПометкаУдаления,
	|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма КАК Папка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО ЭлектронноеПисьмоВходящее.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.Ссылка В(&МассивПисем)
	|	И ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма <> &Папка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ЭлектронноеПисьмоИсходящее.ПометкаУдаления,
	|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка)
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.Ссылка В(&МассивПисем)
	|	И ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма <> &Папка";
	
	Запрос.УстановитьПараметр("МассивПисем",МассивПисем);
	Запрос.УстановитьПараметр("Папка",Папка);
	
	ЗначенияРеквизитовПапки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Папка, "ПредопределеннаяПапка,Наименование");
	Если ЗначенияРеквизитовПапки <> Неопределено 
		И ЗначенияРеквизитовПапки.ПредопределеннаяПапка 
		И ЗначенияРеквизитовПапки.Наименование = НСтр("ru = 'Удаленные'") Тогда
		
		ПеремещениеВПапкуУдаленные = Истина;
		
	Иначе
		
		ПеремещениеВПапкуУдаленные = Ложь;
		
	КонецЕсли;
		
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(Выборка.Ссылка, Папка, Ложь);
		Если ПеремещениеВПапкуУдаленные И НЕ Выборка.ПометкаУдаления Тогда
			ПисьмоОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПисьмоОбъект.ДополнительныеСвойства.Вставить("ОбработаноИзменениеПометкиУдаления", Истина);
			ПисьмоОбъект.УстановитьПометкуУдаления(Истина);
		ИначеЕсли НЕ ПеремещениеВПапкуУдаленные И Выборка.ПометкаУдаления Тогда
			ПисьмоОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПисьмоОбъект.ДополнительныеСвойства.Вставить("ОбработаноИзменениеПометкиУдаления", Истина);
			ПисьмоОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Выборка.Сбросить();
	ТаблицаДляРасчета = ТаблицаДанныхДляРасчетаРассмотрено(Выборка, "Папка");
	Если ТаблицаДляРасчета.Найти(Папка, "ПоЧемуРассчитывать") = Неопределено Тогда
		НоваяСтрока = ТаблицаДляРасчета.Добавить();
		НоваяСтрока.ПоЧемуРассчитывать = Папка;
	КонецЕсли;
	РассчитатьРассмотреноПоПапкам(ТаблицаДляРасчета);
	
КонецПроцедуры

// Устанавливает пометку удаления для папки и входящих в нее писем.
//
// Параметры:
//  Папка  - СправочникСсылка.ПапкиЭлектронныхПисем - папка, письма которой будут помечены на удаление.
//  ОписаниеОшибки  - Строка - описание возникшей ошибки.
//
Процедура ВыполнитьУдалениеПапкиЭлектронныхПисем(Папка, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПапкиЭлектронныхПисем.Ссылка
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|	И ПапкиЭлектронныхПисем.Наименование = &Удаленные
	|	И ПапкиЭлектронныхПисем.Владелец В
	|			(ВЫБРАТЬ
	|				ПапкиЭлектронныхПисем.Владелец
	|			ИЗ
	|				Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|			ГДЕ
	|				ПапкиЭлектронныхПисем.Ссылка = &Папка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПапкиЭлектронныхПисем.Ссылка КАК Папка
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Ссылка В ИЕРАРХИИ(&Папка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ЭлектронноеПисьмоВходящее.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоВходящее.Ссылка
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма В ИЕРАРХИИ(&Папка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ЭлектронноеПисьмоИсходящее.ПометкаУдаления
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма В ИЕРАРХИИ(&Папка)";
	
	Запрос.УстановитьПараметр("Папка", Папка);
	Запрос.УстановитьПараметр("Удаленные", НСтр("ru = 'Удаленные'"));
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	Если МассивРезультатовЗапроса[0].Пустой() Или МассивРезультатовЗапроса[2].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПапкаУдаленные = МассивРезультатовЗапроса[0].Выбрать();
	ВыборкаПапкаУдаленные.Следующий();
	ПапкаУдаленные = ВыборкаПапкаУдаленные.Ссылка;
	
	ВыборкаПисьма = МассивРезультатовЗапроса[2].Выбрать();
	ВыборкаПапки  = МассивРезультатовЗапроса[1].Выбрать();
	
	НачатьТранзакцию();
	
	Попытка
		
		Пока ВыборкаПисьма.Следующий() Цикл
			
			ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(ВыборкаПисьма.Ссылка, ПапкаУдаленные, Ложь);
			
			Если НЕ ВыборкаПисьма.ПометкаУдаления Тогда
				ПисьмоОбъект = ВыборкаПисьма.Ссылка.ПолучитьОбъект();
				ПисьмоОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
			
		КонецЦикла;
		
		Пока ВыборкаПапки.Следующий() Цикл
			
			ПапкаОбъект =  ВыборкаПапки.Папка.ПолучитьОбъект();
			ПапкаОбъект.УстановитьПометкуУдаления(Истина);
			
		КонецЦикла;
		
		ВыборкаПапки.Сбросить();
		ТаблицаДляРасчета = ТаблицаДанныхДляРасчетаРассмотрено(ВыборкаПапки, "Папка");
		Если ТаблицаДляРасчета.Найти(ПапкаУдаленные, "ПоЧемуРассчитывать") = Неопределено Тогда
			НоваяСтрока = ТаблицаДляРасчета.Добавить();
			НоваяСтрока.ПоЧемуРассчитывать = ПапкаУдаленные;
		КонецЕсли;
		РассчитатьРассмотреноПоПапкам(ТаблицаДляРасчета);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = НСтр("ru = 'При удалении папки произошла ошибка.
		                      |Удаление папки не выполнено.
		                      |Дополнительное описание:
		                      |%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);

		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

// Определяет папку для электронного письма.
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого определяется папка.
//
// Возвращаемое значение:
//   СправочникСсылка.ПапкиЭлектронныхПисем - папка, определенная для письма.
//
Функция ОпределитьПапкуДляПисьма(Письмо) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Папка = ОпределитьПапкуДляПисьмаПоУмолчанию(Письмо ,Истина);
	Если ЗначениеЗаполнено(Папка) И (НЕ Папка.ПредопределеннаяПапка) Тогда
		Возврат Папка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПравилаОбработкиЭлектроннойПочты.КомпоновщикНастроек,
	|	ПравилаОбработкиЭлектроннойПочты.ПомещатьВПапку
	|ИЗ
	|	Справочник.ПравилаОбработкиЭлектроннойПочты КАК ПравилаОбработкиЭлектроннойПочты
	|ГДЕ
	|	ПравилаОбработкиЭлектроннойПочты.Владелец В
	|			(ВЫБРАТЬ
	|				Взаимодействия.УчетнаяЗапись
	|			ИЗ
	|				ЖурналДокументов.Взаимодействия КАК Взаимодействия
	|			ГДЕ
	|				Взаимодействия.Ссылка = &Письмо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПравилаОбработкиЭлектроннойПочты.РеквизитДопУпорядочивания";
	
	Запрос.УстановитьПараметр("Письмо", Письмо);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СхемаПравилаОбработки = 
				Справочники.ПравилаОбработкиЭлектроннойПочты.ПолучитьМакет("СхемаПравилаОбработкиЭлектроннойПочты");
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПравилаОбработки));
			КомпоновщикНастроек.ЗагрузитьНастройки(Выборка.КомпоновщикНастроек.Получить());
			КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				КомпоновщикНастроек.Настройки.Отбор,"Ссылка",Письмо,ВидСравненияКомпоновкиДанных.Равно);
			
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
				СхемаПравилаОбработки, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			Если МакетКомпоновкиДанных.ЗначенияПараметров.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
			ЗапросПравило = Новый Запрос(ТекстЗапроса);
			Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
				ЗапросПравило.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
			КонецЦикла;
			
			Результат = ЗапросПравило.Выполнить();
			Если Не Результат.Пустой() Тогда
				Возврат Выборка.ПомещатьВПапку;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Папка;
	
КонецФункции

// Определяет папку для электронного письма по умолчанию.
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого определяется папка.
//  ВключаяПроверкиПисьмаОснования  - Булево - признак необходимости проверки на определение папки в папку письма
//                                             основания.
//
// Возвращаемое значение:
//   СправочникСсылка.ПапкиЭлектронныхПисем - папка, определенная для письма.
//
Функция ОпределитьПапкуДляПисьмаПоУмолчанию(Письмо, ВключаяПроверкиПисьмаОснования = ЛОЖЬ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Если ВключаяПроверкиПисьмаОснования Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПапкиЭлектронныхПисем.Ссылка КАК Папка,
		|	Взаимодействия.Ссылка КАК Письмо
		|ПОМЕСТИТЬ ПапкиПоОснованию
		|ИЗ
		|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|			ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка
		|				И ((НЕ ПапкиЭлектронныхПисем.ПредопределеннаяПапка))
		|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = Взаимодействия.ВзаимодействиеОснование)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
		|			ПО УчетныеЗаписиЭлектроннойПочты.Ссылка = НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты
		|		ПО Взаимодействия.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
		|ГДЕ
		|	Взаимодействия.Ссылка = &Письмо
		|	И ТИПЗНАЧЕНИЯ(Взаимодействия.ВзаимодействиеОснование) В (ТИП(Документ.ЭлектронноеПисьмоИсходящее), ТИП(Документ.ЭлектронноеПисьмоВходящее))
		|	И ПапкиЭлектронныхПисем.Владелец = Взаимодействия.УчетнаяЗапись
		|	И НастройкиУчетныхЗаписейЭлектроннойПочты.ПомещатьПисьмоВПапкуПисьмаОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПапкиЭлектронныхПисем.Ссылка,
		|	ПапкиЭлектронныхПисем.Наименование
		|ПОМЕСТИТЬ ПапкиПисем
		|ИЗ
		|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|ГДЕ
		|	ПапкиЭлектронныхПисем.ПредопределеннаяПапка
		|	И ПапкиЭлектронныхПисем.Владелец В
		|			(ВЫБРАТЬ
		|				Взаимодействия.УчетнаяЗапись
		|			ИЗ
		|				ЖурналДокументов.Взаимодействия КАК Взаимодействия
		|			ГДЕ
		|				Взаимодействия.Ссылка = &Письмо)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Взаимодействия.Ссылка,
		|	ВЫБОР
		|		КОГДА Взаимодействия.ПометкаУдаления
		|			ТОГДА &Удаленные
		|		КОГДА Взаимодействия.Тип = ТИП(Документ.ЭлектронноеПисьмоВходящее)
		|			ТОГДА &Входящие
		|		КОГДА Взаимодействия.Тип = ТИП(Документ.ЭлектронноеПисьмоИсходящее)
		|			ТОГДА ВЫБОР
		|					КОГДА Взаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик)
		|						ТОГДА &Черновики
		|					КОГДА Взаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
		|						ТОГДА &Отправленные
		|					КОГДА Взаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
		|						ТОГДА &Исходящие
		|				КОНЕЦ
		|		ИНАЧЕ &НежелательнаяПочта
		|	КОНЕЦ КАК НаименованиеПапки
		|ПОМЕСТИТЬ НаименованиеПапкиНазначения
		|ИЗ
		|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
		|ГДЕ
		|	Взаимодействия.Ссылка = &Письмо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НаименованиеПапкиНазначения.Ссылка КАК Письмо,
		|	ВЫБОР
		|		КОГДА ПапкиПоОснованию.Папка ЕСТЬ NULL 
		|			ТОГДА ПапкиПисем.Ссылка
		|		ИНАЧЕ ПапкиПоОснованию.Папка
		|	КОНЕЦ КАК Папка
		|ИЗ
		|	НаименованиеПапкиНазначения КАК НаименованиеПапкиНазначения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПапкиПисем КАК ПапкиПисем
		|		ПО НаименованиеПапкиНазначения.НаименованиеПапки = ПапкиПисем.Наименование
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПапкиПоОснованию КАК ПапкиПоОснованию
		|		ПО НаименованиеПапкиНазначения.Ссылка = ПапкиПоОснованию.Письмо";
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПапкиЭлектронныхПисем.Ссылка,
		|	ПапкиЭлектронныхПисем.Наименование
		|ПОМЕСТИТЬ ПапкиПисем
		|ИЗ
		|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|ГДЕ
		|	ПапкиЭлектронныхПисем.ПредопределеннаяПапка
		|	И ПапкиЭлектронныхПисем.Владелец В
		|			(ВЫБРАТЬ
		|				Взаимодействия.УчетнаяЗапись
		|			ИЗ
		|				ЖурналДокументов.Взаимодействия КАК Взаимодействия
		|			ГДЕ
		|				Взаимодействия.Ссылка = &Письмо)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Взаимодействия.Ссылка,
		|	ВЫБОР
		|		КОГДА Взаимодействия.ПометкаУдаления
		|			ТОГДА &Удаленные
		|		КОГДА Взаимодействия.Тип = ТИП(Документ.ЭлектронноеПисьмоВходящее)
		|			ТОГДА &Входящие
		|		КОГДА Взаимодействия.Тип = ТИП(Документ.ЭлектронноеПисьмоИсходящее)
		|			ТОГДА ВЫБОР
		|					КОГДА Взаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик)
		|						ТОГДА &Черновики
		|					КОГДА Взаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
		|						ТОГДА &Отправленные
		|					КОГДА Взаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
		|						ТОГДА &Исходящие
		|				КОНЕЦ
		|		ИНАЧЕ &НежелательнаяПочта
		|	КОНЕЦ КАК НаименованиеПапки
		|ПОМЕСТИТЬ НаименованиеПапкиНазначения
		|ИЗ
		|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
		|ГДЕ
		|	Взаимодействия.Ссылка = &Письмо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НаименованиеПапкиНазначения.Ссылка КАК Письмо,
		|	ПапкиПисем.Ссылка КАК Папка
		|ИЗ
		|	НаименованиеПапкиНазначения КАК НаименованиеПапкиНазначения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПапкиПисем КАК ПапкиПисем
		|		ПО НаименованиеПапкиНазначения.НаименованиеПапки = ПапкиПисем.Наименование";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Письмо",Письмо);
	УстановитьПараметрыЗапросаИменаПредопределенныеПапки(Запрос);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Папка;
		
	КонецЕсли;
	
КонецФункции

// Устанавливает имена предопределенных папок в качестве параметров запроса.
//
// Параметры:
//  Запрос  - Запрос - для которого будут установлены параметры.
//
Процедура УстановитьПараметрыЗапросаИменаПредопределенныеПапки(Запрос) Экспорт

	Запрос.УстановитьПараметр("Удаленные", НСтр("ru = 'Удаленные'"));
	Запрос.УстановитьПараметр("Входящие", НСтр("ru = 'Входящие'"));
	Запрос.УстановитьПараметр("Черновики", НСтр("ru = 'Черновики'"));
	Запрос.УстановитьПараметр("Отправленные", НСтр("ru = 'Отправленные'"));
	Запрос.УстановитьПараметр("Исходящие", НСтр("ru = 'Исходящие'"));
	Запрос.УстановитьПараметр("НежелательнаяПочта", НСтр("ru = 'Нежелательная почта'"));

КонецПроцедуры

// Устанавливает папки для массива писем.
//
// Параметры:
//  МассивПисем  - Массив - массив писем для которого будут установлены папки.
//
Процедура УстановитьПапкиДляМассиваПисем(МассивПисем) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма КАК Папка
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Взаимодействие В(&МассивПисем)";
	
	Запрос.УстановитьПараметр("МассивПисем", МассивПисем);
	
	МассивПапокДляРасчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Папка");
	
	ТаблицаПапок = ОпределитьПапкиДляМассиваПисем(МассивПисем);
	Для каждого СтрокаТаблицы Из ТаблицаПапок Цикл
		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(СтрокаТаблицы.Письмо, СтрокаТаблицы.Папка, Ложь);
		Если ЗначениеЗаполнено(СтрокаТаблицы.Папка) И МассивПапокДляРасчета.Найти(СтрокаТаблицы.Папка) = Неопределено Тогда
			МассивПапокДляРасчета.Добавить(СтрокаТаблицы.Папка);
		КонецЕсли;
	КонецЦикла;
		
	РассчитатьРассмотреноПоПапкам(ТаблицаДанныхДляРасчетаРассмотрено(МассивПапокДляРасчета, "Папка"));
	
КонецПроцедуры

// Определяет папки для массива писем.
//
// Параметры:
//  МассивПисем  - Массив - массив писем для которого будут определены папки.
//
// Возвращаемое значение:
//   ТаблицаЗначений - содержит соответствие писем и определенных для них папок.
//
Функция ОпределитьПапкиДляМассиваПисем(МассивПисем)
	
	ТаблицаСоответствий = Новый ТаблицаЗначений;
	ТаблицаСоответствий.Колонки.Добавить("Папка");
	ТаблицаСоответствий.Колонки.Добавить("Письмо");
	
	Если МассивПисем.Количество() = 0 Тогда
		Возврат ТаблицаСоответствий;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПравилаОбработкиЭлектроннойПочты.Владелец КАК УчетнаяЗапись,
	|	ПравилаОбработкиЭлектроннойПочты.КомпоновщикНастроек,
	|	ПравилаОбработкиЭлектроннойПочты.ПомещатьВПапку
	|ИЗ
	|	Справочник.ПравилаОбработкиЭлектроннойПочты КАК ПравилаОбработкиЭлектроннойПочты
	|ГДЕ
	|	ПравилаОбработкиЭлектроннойПочты.Владелец В
	|			(ВЫБРАТЬ
	|				Взаимодействия.УчетнаяЗапись
	|			ИЗ
	|				ЖурналДокументов.Взаимодействия КАК Взаимодействия
	|			ГДЕ
	|				Взаимодействия.Ссылка В (&МассивПисем))
	|	И (НЕ ПравилаОбработкиЭлектроннойПочты.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПравилаОбработкиЭлектроннойПочты.РеквизитДопУпорядочивания
	|ИТОГИ ПО
	|	УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("МассивПисем", МассивПисем);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ВыборкаУчетнаяЗапись = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаУчетнаяЗапись.Следующий() Цикл
			Выборка = ВыборкаУчетнаяЗапись.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СхемаПравилаОбработки = 
					Справочники.ПравилаОбработкиЭлектроннойПочты.ПолучитьМакет("СхемаПравилаОбработкиЭлектроннойПочты");
				
				КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
				КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
				КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПравилаОбработки));
				КомпоновщикНастроек.ЗагрузитьНастройки(Выборка.КомпоновщикНастроек.Получить());
				КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					КомпоновщикНастроек.Настройки.Отбор, "Ссылка", МассивПисем, ВидСравненияКомпоновкиДанных.ВСписке);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					КомпоновщикНастроек.Настройки.Отбор,
					"Ссылка.УчетнаяЗапись",
					ВыборкаУчетнаяЗапись.УчетнаяЗапись,
					ВидСравненияКомпоновкиДанных.Равно);
				
				МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
					СхемаПравилаОбработки,
					КомпоновщикНастроек.ПолучитьНастройки(),
					,,
					Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
				
				ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
				ЗапросПравило = Новый Запрос(ТекстЗапроса);
				Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
					ЗапросПравило.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
				КонецЦикла;
				
				РезультатПисьма = ЗапросПравило.Выполнить();
				Если Не РезультатПисьма.Пустой() Тогда
					ВыборкаПисьма = РезультатПисьма.Выбрать();
					Пока ВыборкаПисьма.Следующий() Цикл
						
						НоваяСтрокаТаблицы = ТаблицаСоответствий.Добавить();
						НоваяСтрокаТаблицы.Папка = Выборка.ПомещатьВПапку;
						НоваяСтрокаТаблицы.Письмо = ВыборкаПисьма.Ссылка;
						
						ИндексЭлементаМассиваКУдалению = МассивПисем.Найти(ВыборкаПисьма.Ссылка);
						Если ИндексЭлементаМассиваКУдалению <> Неопределено Тогда
							МассивПисем.Удалить(ИндексЭлементаМассиваКУдалению);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если МассивПисем.Количество() = 0 Тогда
					Возврат ТаблицаСоответствий;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	ОпределитьПапкиДляМассиваПисемПоУмолчанию(МассивПисем, ТаблицаСоответствий);
	Возврат ТаблицаСоответствий;
	
КонецФункции

// Определяет папки по умолчанию для массива писем.
//
// Параметры:
//  МассивПисем  - Массив - массив писем для которого будут определены папки.
//  ТаблицаПисем  - ТаблицаЗначений - в которую помещается соответствие писем и определенных для них папок.
//
Процедура ОпределитьПапкиДляМассиваПисемПоУмолчанию(МассивПисем,ТаблицаПисем)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПапкиЭлектронныхПисем.Ссылка,
	|	ПапкиЭлектронныхПисем.Наименование,
	|	ПапкиЭлектронныхПисем.Владелец КАК УчетнаяЗапись
	|ПОМЕСТИТЬ ПапкиПисем
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|	И ПапкиЭлектронныхПисем.Владелец В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Взаимодействия.УчетнаяЗапись
	|			ИЗ
	|				ЖурналДокументов.Взаимодействия КАК Взаимодействия
	|			ГДЕ
	|				Взаимодействия.Ссылка В (&МассивПисем))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Взаимодействия.Ссылка,
	|	ВЫБОР
	|		КОГДА Взаимодействия.ПометкаУдаления
	|			ТОГДА &Удаленные
	|		КОГДА Взаимодействия.Тип = ТИП(Документ.ЭлектронноеПисьмоВходящее)
	|			ТОГДА &Входящие
	|		КОГДА Взаимодействия.Тип = ТИП(Документ.ЭлектронноеПисьмоИсходящее)
	|			ТОГДА ВЫБОР
	|					КОГДА Взаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик)
	|						ТОГДА &Черновики
	|					КОГДА Взаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	|						ТОГДА &Отправленные
	|					КОГДА Взаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
	|						ТОГДА &Исходящие
	|				КОНЕЦ
	|		ИНАЧЕ &НежелательнаяПочта
	|	КОНЕЦ КАК НаименованиеПапки,
	|	Взаимодействия.УчетнаяЗапись
	|ПОМЕСТИТЬ НаименованиеПапкиНазначения
	|ИЗ
	|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
	|ГДЕ
	|	Взаимодействия.Ссылка В(&МассивПисем)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПапкиПисем.Ссылка КАК Папка,
	|	НаименованиеПапкиНазначения.Ссылка КАК Письмо
	|ИЗ
	|	НаименованиеПапкиНазначения КАК НаименованиеПапкиНазначения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПапкиПисем КАК ПапкиПисем
	|		ПО НаименованиеПапкиНазначения.НаименованиеПапки = ПапкиПисем.Наименование
	|			И НаименованиеПапкиНазначения.УчетнаяЗапись = ПапкиПисем.УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("МассивПисем",МассивПисем);
	УстановитьПараметрыЗапросаИменаПредопределенныеПапки(Запрос);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Выгрузить(), ТаблицаПисем);
	КонецЕсли;
	
КонецПроцедуры

// Определяет признак изменения пометки удаления при записи письма.
//
// Параметры:
//  ПисьмоОбъект  - ДокументОбъект.ЭлектронноеПисьмоИсходящее,
//                  ДокументОбъект.ЭлектронноеПисьмоВходящее - письмо для которого выполняется процедура.
Процедура ОтработатьПризнакИзмененияПометкиУдаленияПриЗаписиПисьма(ПисьмоОбъект) Экспорт
	
	Если ПисьмоОбъект.ПометкаУдаления <> ПисьмоОбъект.ДополнительныеСвойства.ПометкаУдаления Тогда
		Если НЕ ПисьмоОбъект.ДополнительныеСвойства.Свойство("ОбработаноИзменениеПометкиУдаления") Тогда
			Если ПисьмоОбъект.ПометкаУдаления = Истина Тогда
				Папка = ОпределитьПапкуДляПисьмаПоУмолчанию(ПисьмоОбъект.Ссылка);
			Иначе
				Папка = ОпределитьПапкуДляПисьма(ПисьмоОбъект.Ссылка);
			КонецЕсли;
			ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(ПисьмоОбъект.Ссылка, Папка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
//  Расчет состояний

// Выполняет полный перерасчет состояний по папкам, контактам и предметам.
//
Процедура ВыполнитьПолныйПерерасчетСостояний() Экспорт
	
	РассчитатьРассмотреноПоПапкам(Неопределено);
	РассчитатьРассмотреноПоКонтактам(Неопределено);
	РассчитатьРассмотреноПоПредметам(Неопределено);
	
КонецПроцедуры

// Рассчитывает состояния предметов взаимодействий.
//
// Параметры:
//  ТаблицаПапок  - ТаблицаЗначений, Неопределено - таблица папок, которые необходимо рассчитать.
//             Если Неопределено, то рассчитываются состояния всех папок.
//
Процедура РассчитатьРассмотреноПоПапкам(ТаблицаПапок) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	
	Если ТаблицаПапок = Неопределено Тогда
		
		РегистрыСведений.СостоянияПапокПисем.УдалитьЗаписьИзРегистра(Неопределено);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма КАК ПапкаЭлектронногоПисьма,
		|	СУММА(ВЫБОР
		|			КОГДА ПредметыПапкиВзаимодействий.Рассмотрено
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК КоличествоНеРассмотрено
		|ПОМЕСТИТЬ ИспользуемыеПапки
		|ИЗ
		|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|ГДЕ
		|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма <> ЗНАЧЕНИЕ(Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПапкаЭлектронногоПисьма
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПапкиЭлектронныхПисем.Ссылка КАК Папка,
		|	ЕСТЬNULL(ИспользуемыеПапки.КоличествоНеРассмотрено, 0) КАК НеРассмотрено
		|ИЗ
		|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИспользуемыеПапки КАК ИспользуемыеПапки
		|		ПО (ИспользуемыеПапки.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка)";
		
	Иначе
		
		Если ТаблицаПапок.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПапкиДляРасчета.ПоЧемуРассчитывать КАК Папка
		|ПОМЕСТИТЬ ПапкиДляРасчета
		|ИЗ
		|	&ПапкиДляРасчета КАК ПапкиДляРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ПредметыПапкиВзаимодействий.Рассмотрено
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК КоличествоНеРассмотрено,
		|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма КАК Папка
		|ПОМЕСТИТЬ РассчитанныеПапки
		|ИЗ
		|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|ГДЕ
		|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма В
		|			(ВЫБРАТЬ
		|				ПапкиДляРасчета.Папка
		|			ИЗ
		|				ПапкиДляРасчета КАК ПапкиДляРасчета)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПапкиДляРасчета.Папка,
		|	ЕСТЬNULL(РассчитанныеПапки.КоличествоНеРассмотрено, 0) КАК НеРассмотрено
		|ИЗ
		|	ПапкиДляРасчета КАК ПапкиДляРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РассчитанныеПапки КАК РассчитанныеПапки
		|		ПО ПапкиДляРасчета.Папка = РассчитанныеПапки.Папка";
		
		Запрос.УстановитьПараметр("ПапкиДляРасчета", ТаблицаПапок);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
	
		РегистрыСведений.СостоянияПапокПисем.ВыполнитьЗаписьВРегистр(Выборка.Папка, Выборка.НеРассмотрено);
	
	КонецЦикла;

КонецПроцедуры

// Рассчитывает состояния контактов взаимодействий.
//
// Параметры:
//  ТаблицаПредметов  - ТаблицаЗначений, Неопределено - таблица контактов, которые необходимо рассчитать.
//             Если Неопределено, то рассчитываются состояния всех контактов.
//
Процедура РассчитатьРассмотреноПоКонтактам(ДанныеДляРасчета) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если ДанныеДляРасчета = Неопределено Тогда
		
		РегистрыСведений.СостоянияКонтактовВзаимодействий.УдалитьЗаписьИзРегистра(Неопределено);
		
		Пока Истина Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
		|	КонтактыВзаимодействий.Контакт
		|ПОМЕСТИТЬ КонтактыДляРасчета
		|ИЗ
		|	РегистрСведений.КонтактыВзаимодействий КАК КонтактыВзаимодействий
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтактовВзаимодействий КАК СостоянияКонтактовВзаимодействий
		|		ПО КонтактыВзаимодействий.Контакт = СостоянияКонтактовВзаимодействий.Контакт
		|ГДЕ
		|	СостоянияКонтактовВзаимодействий.Контакт ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтактыВзаимодействий.Контакт,
		|	МАКСИМУМ(Взаимодействия.Дата) КАК ДатаПоследнегоВзаимодействия,
		|	СУММА(ВЫБОР
		|			КОГДА ПредметыПапкиВзаимодействий.Рассмотрено
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК КоличествоНеРассмотрено
		|ИЗ
		|	КонтактыДляРасчета КАК КонтактыДляРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактыВзаимодействий КАК КонтактыВзаимодействий
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЖурналДокументов.Взаимодействия КАК Взаимодействия
		|			ПО КонтактыВзаимодействий.Взаимодействие = Взаимодействия.Ссылка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|			ПО КонтактыВзаимодействий.Взаимодействие = ПредметыПапкиВзаимодействий.Взаимодействие
		|		ПО КонтактыДляРасчета.Контакт = КонтактыВзаимодействий.Контакт
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтактыВзаимодействий.Контакт";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			РегистрыСведений.СостоянияКонтактовВзаимодействий.ВыполнитьЗаписьВРегистр(Выборка.Контакт,
			                                                                          Выборка.КоличествоНеРассмотрено,
			                                                                          Выборка.ДатаПоследнегоВзаимодействия);
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Запрос = Новый Запрос;
		
		Если ТипЗнч(ДанныеДляРасчета) = Тип("ТаблицаЗначений") Тогда
			
			ТекстКонтактыДляРасчета = 
			"ВЫБРАТЬ
			|	КонтактыДляРасчета.ПоЧемуРассчитывать КАК Контакт
			|ПОМЕСТИТЬ КонтактыДляРасчета
			|ИЗ
			|	&КонтактыДляРасчета КАК КонтактыДляРасчета
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Контакт
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////";
			
			Запрос.УстановитьПараметр("КонтактыДляРасчета", ДанныеДляРасчета);
			
		ИначеЕсли ТипЗнч(ДанныеДляРасчета) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
			
			МассивВзаимодействий = Новый Массив;
			Пока ДанныеДляРасчета.Следующий() Цикл
				МассивВзаимодействий.Добавить(ДанныеДляРасчета.Взаимодействие);
			КонецЦикла;
			
			ТекстКонтактыДляРасчета = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КонтактыВзаимодействий.Контакт
			|ПОМЕСТИТЬ КонтактыДляРасчета
			|ИЗ
			|	РегистрСведений.КонтактыВзаимодействий КАК КонтактыВзаимодействий
			|ГДЕ
			|	КонтактыВзаимодействий.Взаимодействие В(&МассивВзаимодействий)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Контакт
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////";
			
			Запрос.УстановитьПараметр("МассивВзаимодействий", МассивВзаимодействий);
			
		ИначеЕсли ТипЗнч(ДанныеДляРасчета) = Тип("Массив") Тогда
			
			ТекстКонтактыДляРасчета = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КонтактыВзаимодействий.Контакт
			|ПОМЕСТИТЬ КонтактыДляРасчета
			|ИЗ
			|	РегистрСведений.КонтактыВзаимодействий КАК КонтактыВзаимодействий
			|ГДЕ
			|	КонтактыВзаимодействий.Взаимодействие В(&МассивВзаимодействий)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Контакт
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////";
			
			Запрос.УстановитьПараметр("МассивВзаимодействий", ДанныеДляРасчета);
			
		Иначе 
			
			Возврат;
			
		КонецЕсли;
		
		Запрос.Текст = ТекстКонтактыДляРасчета + "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Контакт,
		|	МАКСИМУМ(ВложенныйЗапрос.ДатаПоследнегоВзаимодействия) КАК ДатаПоследнегоВзаимодействия,
		|	СУММА(ВложенныйЗапрос.КоличествоНеРассмотрено) КАК КоличествоНеРассмотрено
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		КонтактыВзаимодействий.Контакт КАК Контакт,
		|		Взаимодействия.Ссылка КАК Ссылка,
		|		ЕСТЬNULL(Взаимодействия.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоследнегоВзаимодействия,
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ИСТИНА)
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК КоличествоНеРассмотрено
		|	ИЗ
		|		КонтактыДляРасчета КАК КонтактыДляРасчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактыВзаимодействий КАК КонтактыВзаимодействий
		|				ЛЕВОЕ СОЕДИНЕНИЕ ЖурналДокументов.Взаимодействия КАК Взаимодействия
		|				ПО КонтактыВзаимодействий.Взаимодействие = Взаимодействия.Ссылка
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|				ПО КонтактыВзаимодействий.Взаимодействие = ПредметыПапкиВзаимодействий.Взаимодействие
		|			ПО КонтактыДляРасчета.Контакт = КонтактыВзаимодействий.Контакт) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Контакт";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			Если Выборка.ДатаПоследнегоВзаимодействия = Дата(1, 1, 1) Тогда
				РегистрыСведений.СостоянияКонтактовВзаимодействий.УдалитьЗаписьИзРегистра(Выборка.Контакт);
			Иначе
				РегистрыСведений.СостоянияКонтактовВзаимодействий.ВыполнитьЗаписьВРегистр(Выборка.Контакт,
				                                                                          Выборка.КоличествоНеРассмотрено,
				                                                                          Выборка.ДатаПоследнегоВзаимодействия);
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Рассчитывает состояния предметов взаимодействий.
//
// Параметры:
//  ТаблицаПредметов  - ТаблицаЗначений, Неопределено - таблица предметов, которые необходимо рассчитать.
//             Если Неопределено, то рассчитываются состояния всех предметов.
//
Процедура РассчитатьРассмотреноПоПредметам(ДанныеДляРасчета) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	
	Если ДанныеДляРасчета = Неопределено Тогда
		
		РегистрыСведений.СостоянияПредметовВзаимодействий.УдалитьЗаписьИзРегистра(Неопределено);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПредметыПапкиВзаимодействий.Предмет,
		|	СУММА(ВЫБОР
		|			КОГДА ПредметыПапкиВзаимодействий.Рассмотрено
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК КоличествоНеРассмотрено,
		|	МАКСИМУМ(Взаимодействия.Дата) КАК ДатаПоследнегоВзаимодействия,
		|	МАКСИМУМ(ЕСТЬNULL(СостоянияПредметовВзаимодействий.Активен, ЛОЖЬ)) КАК Активен
		|ИЗ
		|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЖурналДокументов.Взаимодействия КАК Взаимодействия
		|		ПО ПредметыПапкиВзаимодействий.Взаимодействие = Взаимодействия.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПредметовВзаимодействий КАК СостоянияПредметовВзаимодействий
		|		ПО ПредметыПапкиВзаимодействий.Предмет = СостоянияПредметовВзаимодействий.Предмет
		|
		|СГРУППИРОВАТЬ ПО
		|	ПредметыПапкиВзаимодействий.Предмет";
		
	Иначе
		
		Если ДанныеДляРасчета.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеДляРасчета) = Тип("ТаблицаЗначений") Тогда
			
			ТекстПредметыДляРасчета = "
			|ВЫБРАТЬ
			|	ПредметыДляРасчета.ПоЧемуРассчитывать КАК Предмет
			|ПОМЕСТИТЬ ПредметыДляРасчета
			|ИЗ
			|	&ПредметыДляРасчета КАК ПредметыДляРасчета
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Предмет
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////";
			
			Запрос.УстановитьПараметр("ПредметыДляРасчета", ДанныеДляРасчета);
			
		ИначеЕсли ТипЗнч(ДанныеДляРасчета) = Тип("Массив") Тогда
			
			ТекстПредметыДляРасчета = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПредметыПапкиВзаимодействий.Предмет КАК Предмет
			|ПОМЕСТИТЬ ПредметыДляРасчета
			|ИЗ
			|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
			|ГДЕ
			|	ПредметыПапкиВзаимодействий.Взаимодействие В(&МассивВзаимодействий)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Предмет
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////";
			
			Запрос.УстановитьПараметр("МассивВзаимодействий", ДанныеДляРасчета);
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
		Запрос.Текст = ТекстПредметыДляРасчета + "
		|ВЫБРАТЬ
		|	ПредметыПапкиВзаимодействий.Предмет КАК Предмет,
		|	СУММА(ВЫБОР
		|			КОГДА ПредметыПапкиВзаимодействий.Рассмотрено
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК КоличествоНеРассмотрено,
		|	МАКСИМУМ(Взаимодействия.Дата) КАК ДатаПоследнегоВзаимодействия,
		|	МАКСИМУМ(ЕСТЬNULL(СостоянияПредметовВзаимодействий.Активен, ЛОЖЬ)) КАК Активен
		|ПОМЕСТИТЬ РассчитанныеПредметы
		|ИЗ
		|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЖурналДокументов.Взаимодействия КАК Взаимодействия
		|		ПО ПредметыПапкиВзаимодействий.Взаимодействие = Взаимодействия.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПредметовВзаимодействий КАК СостоянияПредметовВзаимодействий
		|		ПО ПредметыПапкиВзаимодействий.Предмет = СостоянияПредметовВзаимодействий.Предмет
		|ГДЕ
		|	ПредметыПапкиВзаимодействий.Предмет В
		|			(ВЫБРАТЬ
		|				ПредметыДляРасчета.Предмет
		|			ИЗ
		|				ПредметыДляРасчета)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПредметыПапкиВзаимодействий.Предмет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Предмет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредметыДляРасчета.Предмет,
		|	ЕСТЬNULL(РассчитанныеПредметы.КоличествоНеРассмотрено, 0) КАК КоличествоНеРассмотрено,
		|	ЕСТЬNULL(РассчитанныеПредметы.ДатаПоследнегоВзаимодействия, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоследнегоВзаимодействия,
		|	ВЫБОР
		|		КОГДА РассчитанныеПредметы.Активен ЕСТЬ NULL 
		|			ТОГДА ЕСТЬNULL(СостоянияПредметовВзаимодействий.Активен, ЛОЖЬ)
		|		ИНАЧЕ РассчитанныеПредметы.Активен
		|	КОНЕЦ КАК Активен
		|ИЗ
		|	ПредметыДляРасчета КАК ПредметыДляРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РассчитанныеПредметы КАК РассчитанныеПредметы
		|		ПО ПредметыДляРасчета.Предмет = РассчитанныеПредметы.Предмет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПредметовВзаимодействий КАК СостоянияПредметовВзаимодействий
		|		ПО ПредметыДляРасчета.Предмет = СостоянияПредметовВзаимодействий.Предмет";
		
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ДатаПоследнегоВзаимодействия <> Дата(1,1,1) ИЛИ Выборка.Активен = Истина  Тогда
			РегистрыСведений.СостоянияПредметовВзаимодействий.ВыполнитьЗаписьВРегистр(Выборка.Предмет, 
			                                                                          Выборка.КоличествоНеРассмотрено,
			                                                                          Выборка.ДатаПоследнегоВзаимодействия,
			                                                                          Выборка.Активен);
		Иначе
			
			РегистрыСведений.СостоянияПредметовВзаимодействий.УдалитьЗаписьИзРегистра(Выборка.Предмет);
			
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

// Формирует таблицу данных для расчета состояний папок и предметов взаимодействий.
//
// Параметры:
//  ДанныеДляРасчета  - Структура, ВыборкаИзРезультатовЗапроса, Массив - данные, на основании
//                      которых будет формироваться таблица.
//  ИмяРеквизита  - Строка - может принимать значения "Предмет" или "Папка".
//
// Возвращаемое значение:
//   ТаблицаЗначений   - подготовленная для расчета таблица.
//
Функция ТаблицаДанныхДляРасчетаРассмотрено(ДанныеДляРасчета, ИмяРеквизита) Экспорт

	СформированнаяТаблица = Новый ТаблицаЗначений;
	Если ИмяРеквизита = "Папка" Тогда
		ОписаниеТиповКолонки = Новый ОписаниеТипов("СправочникСсылка.ПапкиЭлектронныхПисем");
	ИначеЕсли ИмяРеквизита = "Предмет" Тогда
		ОписаниеТиповКолонки = Новый ОписаниеТипов(Новый ОписаниеТипов(Метаданные.РегистрыСведений.СостоянияПредметовВзаимодействий.Измерения.Предмет.Тип.Типы()));
	ИначеЕсли ИмяРеквизита = "Контакт" Тогда
		ОписаниеТиповКолонки = Новый ОписаниеТипов(Новый ОписаниеТипов(Метаданные.РегистрыСведений.КонтактыВзаимодействий.Измерения.Контакт.Тип.Типы()));
	КонецЕсли;
	
	СформированнаяТаблица.Колонки.Добавить("ПоЧемуРассчитывать", ОписаниеТиповКолонки);
	
	Если ТипЗнч(ДанныеДляРасчета) = Тип("Структура") Тогда
		
		НоваяЗапись  = ДанныеДляРасчета.НоваяЗапись;
		СтараяЗапись = ДанныеДляРасчета.СтараяЗапись;
		
		Если ЗначениеЗаполнено(НоваяЗапись[ИмяРеквизита]) Тогда
			НоваяСтрока = СформированнаяТаблица.Добавить();
			НоваяСтрока.ПоЧемуРассчитывать = НоваяЗапись[ИмяРеквизита];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтараяЗапись[ИмяРеквизита]) И НоваяЗапись[ИмяРеквизита] <> СтараяЗапись[ИмяРеквизита] Тогда
			
			НоваяСтрока = СформированнаяТаблица.Добавить();
			НоваяСтрока.ПоЧемуРассчитывать = СтараяЗапись[ИмяРеквизита];
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеДляРасчета) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		Пока ДанныеДляРасчета.Следующий() Цикл
			Если ЗначениеЗаполнено(ДанныеДляРасчета[ИмяРеквизита]) И СформированнаяТаблица.Найти(ДанныеДляРасчета[ИмяРеквизита], "ПоЧемуРассчитывать") = Неопределено Тогда
				НоваяСтрока = СформированнаяТаблица.Добавить();
				НоваяСтрока.ПоЧемуРассчитывать = ДанныеДляРасчета[ИмяРеквизита];
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеДляРасчета) = Тип("Массив") Тогда
		
		Для Каждого ЭлементМассива Из ДанныеДляРасчета Цикл
			Если ЗначениеЗаполнено(ЭлементМассива) И СформированнаяТаблица.Найти(ЭлементМассива, "ПоЧемуРассчитывать") = Неопределено Тогда
				НоваяСтрока = СформированнаяТаблица.Добавить();
				НоваяСтрока.ПоЧемуРассчитывать = ЭлементМассива;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СформированнаяТаблица;

КонецФункции

// Определяет необходимость расчета состояний папок, предметов или контактов взаимодействий.
//
// Параметры:
//  ДополнительныеСвойства  - Структура - дополнительные свойства набора записей или документа взаимодействий.
//
// Возвращаемое значение:
//   Булево   - признак необходимости расчета состояний папок, предметов или контактов взаимодействий".
//
Функция РассчитыватьРассмотрено(ДополнительныеСвойства) Экспорт
	Перем РассчитыватьРассмотрено;

	Возврат ДополнительныеСвойства.Свойство("РассчитыватьРассмотрено", РассчитыватьРассмотрено)
		И РассчитыватьРассмотрено;

КонецФункции

// Определяет необходимость записи контактов взаимодействий во вспомогательный регистр 
//  "Контакты взаимодействий".
//
// Параметры:
//  ДополнительныеСвойства  - Структура - дополнительные свойства документа взаимодействий.
//
// Возвращаемое значение:
//   Булево   - признак необходимости записи контактов взаимодействий во вспомогательный регистр 
//    "Контакты взаимодействий".
//
Функция НеЗаписыватьКонтакты(ДополнительныеСвойства)
	Перем НеЗаписыватьКонтакты;
	
	Возврат ДополнительныеСвойства.Свойство("НеЗаписыватьКонтакты", НеЗаписыватьКонтакты) 
		И НеЗаписыватьКонтакты;

КонецФункции

// Устанавливает признак рассмотрения для массива взаимодействий.
//
// Параметры:
//  МассивВзаимодействий  - Массив - массив, для которого устанавливается признак.
//  ЗначениеПризнака      - Булево - значение признака Рассмотрено.
//  ЕстьИзменения         - Булево - признак того, что хотя бы у одного взаимодействия было изменено значение
//                                   Рассмотрено.
//
Процедура УстановитьПризнакРассмотрено(МассивВзаимодействий, ЗначениеПризнака, ЕстьИзменения) Экспорт

	Если МассивВзаимодействий.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПредметыПапкиВзаимодействий.Взаимодействие,
		|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма КАК Папка,
		|	ПредметыПапкиВзаимодействий.Предмет
		|ИЗ
		|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|ГДЕ
		|	ПредметыПапкиВзаимодействий.Рассмотрено <> &ЗначениеПризнака
		|	И ПредметыПапкиВзаимодействий.Взаимодействие В(&МассивВзаимодействий)";
		
		Запрос.УстановитьПараметр("МассивВзаимодействий", МассивВзаимодействий);
		Запрос.УстановитьПараметр("ЗначениеПризнака", ЗначениеПризнака);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Реквизиты = ВзаимодействияКлиентСервер.СтруктураРеквизитовВзаимодействияДляЗаписи(,,ЗначениеПризнака,,ЛОЖЬ);
			ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(Выборка.Взаимодействие, Реквизиты);
			ЕстьИзменения = Истина;
			
		КонецЦикла;
		
		Выборка.Сбросить();
		РассчитатьРассмотреноПоПапкам(ТаблицаДанныхДляРасчетаРассмотрено(Выборка, "Папка"));
		
		Выборка.Сбросить();
		РассчитатьРассмотреноПоПредметам(ТаблицаДанныхДляРасчетаРассмотрено(Выборка, "Предмет"));
		
		Выборка.Сбросить();
		РассчитатьРассмотреноПоКонтактам(Выборка);
		
	КонецЕсли;

КонецПроцедуры

// Проверяет массив взаимодействий на и оставляет только те, у которых необходимо изменить дату рассмотрения.
//
// Параметры:
//  МассивВзаимодействий  - Массив - массив взаимодействий, для которого предлагается изменить дату рассмотрения.
//  ДатаРассмотрения  - Дата - новая дата рассмотрения.
//
// Возвращаемое значение:
//   Массив - массив взаимодействий, для которого необходимо изменить дату рассмотрения.
//
Функция МассивВзаимодействийДляИзмененияДатыРассмотрения(МассивВзаимодействий, ДатаРассмотрения) Экспорт

	Если МассивВзаимодействий.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПредметыПапкиВзаимодействий.Взаимодействие
		|ИЗ
		|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|ГДЕ
		|	НЕ ПредметыПапкиВзаимодействий.Рассмотрено
		|	И ПредметыПапкиВзаимодействий.РассмотретьПосле <> &ДатаРассмотрения";
		
		Запрос.УстановитьПараметр("ДатаРассмотрения", ДатаРассмотрения);
		
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Взаимодействие");
	Иначе
		
		Возврат МассивВзаимодействий;
		
	КонецЕсли;

КонецФункции

///////////////////////////////////////////////////////////////////////////////////
//  Прочее

// Получает в привилегированном  режиме значение константы "Адрес публикации информационной базы в интернете".
//
// Возвращаемое значение:
//   Строка - значение константы.
//
Функция АдресПубликацииИнформационнойБазыВИнтернете() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы.АдресПубликацииИнформационнойБазыВИнтернете.Получить();
	
КонецФункции

// Процедура заполняет список выбора времени.
// Параметры:
//  ПолеВводаФормы  - элемент-владелец списка,
//  Интервал        - интервал, с которым необходимо заполнить список, по умолчанию час.
Процедура ЗаполнитьСписокВыбораВремени(ПолеВводаФормы, Интервал = 3600) Экспорт

	НачалоРабочегоДня      = '00010101000000';
	ОкончаниеРабочегоДня   = '00010101235959';

	СписокВремен = ПолеВводаФормы.СписокВыбора;
	СписокВремен.Очистить();

	ВремяСписка = НачалоРабочегоДня;
	Пока НачалоЧаса(ВремяСписка) <= НачалоЧаса(ОкончаниеРабочегоДня) Цикл
		Если НЕ ЗначениеЗаполнено(ВремяСписка) Тогда
			ПредставлениеВремени = "00:00";
		Иначе
			ПредставлениеВремени = Формат(ВремяСписка,"ДФ=ЧЧ:мм");
		КонецЕсли;

		СписокВремен.Добавить(ВремяСписка, ПредставлениеВремени);

		ВремяСписка = ВремяСписка + Интервал;
	КонецЦикла;

КонецПроцедуры

// Формирует текст запроса динамического списка взаимодействий в зависимости от вида панели навигации
// и типа переданного параметра.
//
// Параметры:
//  ЗначениеОтбора  - СправочникСсылка, ДокументСсылка - значение отбора панели навигации.
//
// Возвращаемое значение:
//   Строка   - текст запроса динамического списка.
//
Функция ТекстЗапросаСпискаВзаимодействий(ЗначениеОтбора = Неопределено) Экспорт
	
	ТекстЗапроса ="
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЖурналДокументовВзаимодействия.Ссылка ССЫЛКА Документ.Встреча
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналДокументовВзаимодействия.ПометкаУдаления
	|						ТОГДА 10
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОГДА ЖурналДокументовВзаимодействия.Ссылка ССЫЛКА Документ.ЗапланированноеВзаимодействие
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналДокументовВзаимодействия.ПометкаУдаления
	|						ТОГДА 11
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОГДА ЖурналДокументовВзаимодействия.Ссылка ССЫЛКА Документ.ТелефонныйЗвонок
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналДокументовВзаимодействия.ПометкаУдаления
	|						ТОГДА 12
	|					ИНАЧЕ 2
	|				КОНЕЦ
	|		КОГДА ЖурналДокументовВзаимодействия.Ссылка ССЫЛКА Документ.ЭлектронноеПисьмоВходящее
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналДокументовВзаимодействия.ПометкаУдаления
	|						ТОГДА 13
	|					ИНАЧЕ 3
	|				КОНЕЦ
	|		КОГДА ЖурналДокументовВзаимодействия.Ссылка ССЫЛКА Документ.ЭлектронноеПисьмоИсходящее
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналДокументовВзаимодействия.ПометкаУдаления
	|						ТОГДА 14
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ЖурналДокументовВзаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик)
	|								ТОГДА 15
	|							КОГДА ЖурналДокументовВзаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
	|								ТОГДА 16
	|							ИНАЧЕ 4
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА ЖурналДокументовВзаимодействия.Ссылка ССЫЛКА Документ.СообщениеSMS
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналДокументовВзаимодействия.ПометкаУдаления
	|						ТОГДА 22
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ЖурналДокументовВзаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументаСообщениеSMS.Черновик)
	|								ТОГДА 17
	|							КОГДА ЖурналДокументовВзаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументаСообщениеSMS.Исходящее)
	|								ТОГДА 18
	|							КОГДА ЖурналДокументовВзаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументаСообщениеSMS.Доставляется)
	|								ТОГДА 19
	|							КОГДА ЖурналДокументовВзаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено)
	|								ТОГДА 21
	|							КОГДА ЖурналДокументовВзаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументаСообщениеSMS.НеДоставлено)
	|								ТОГДА 23
	|							КОГДА ЖурналДокументовВзаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументаСообщениеSMS.Доставлено)
	|								ТОГДА 24
	|							ИНАЧЕ 17
	|						КОНЕЦ
	|				КОНЕЦ
	|	КОНЕЦ КАК НомерКартинки,
	|	ЖурналДокументовВзаимодействия.Ссылка,
	|	ЖурналДокументовВзаимодействия.Дата,
	|	ЖурналДокументовВзаимодействия.ПометкаУдаления КАК ПометкаУдаления,
	|	ЖурналДокументовВзаимодействия.Номер,
	|	ЖурналДокументовВзаимодействия.Проведен,
	|	ЖурналДокументовВзаимодействия.Автор,
	|	ЖурналДокументовВзаимодействия.ВзаимодействиеОснование,
	|	ЖурналДокументовВзаимодействия.Входящий,
	|	ЖурналДокументовВзаимодействия.Тема,
	|	ЖурналДокументовВзаимодействия.Ответственный КАК Ответственный,
	|	ЕСТЬNULL(ПредметыВзаимодействий.Рассмотрено, ЛОЖЬ) КАК Рассмотрено,
	|	ЕСТЬNULL(ПредметыВзаимодействий.РассмотретьПосле, ДАТАВРЕМЯ(1, 1, 1)) КАК РассмотретьПосле,
	|	ЖурналДокументовВзаимодействия.Участники,
	|	ЖурналДокументовВзаимодействия.Тип,
	|	ЖурналДокументовВзаимодействия.УчетнаяЗапись,
	|	ЖурналДокументовВзаимодействия.ЕстьВложения,
	|	ЖурналДокументовВзаимодействия.Важность,
	|	ВЫБОР
	|		КОГДА ЖурналДокументовВзаимодействия.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиВзаимодействия.Высокая)
	|			ТОГДА 2
	|		КОГДА ЖурналДокументовВзаимодействия.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиВзаимодействия.Низкая)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ВажностьНомерКартинки,
	|	%Предмет% КАК Предмет,
	|	ТИПЗНАЧЕНИЯ(ПредметыВзаимодействий.Предмет) КАК ТипПредмета,
	|	ЕСТЬNULL(ПредметыВзаимодействий.ПапкаЭлектронногоПисьма, ЗНАЧЕНИЕ(Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка)) КАК Папка,
	|	ЖурналДокументовВзаимодействия.ПолученоОтправлено,
	|	ЖурналДокументовВзаимодействия.Размер,
	|	ЖурналДокументовВзаимодействия.СтатусИсходящегоПисьма
	|ИЗ
	|	ЖурналДокументов.Взаимодействия КАК ЖурналДокументовВзаимодействия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыВзаимодействий
	|		ПО ЖурналДокументовВзаимодействия.Ссылка = ПредметыВзаимодействий.Взаимодействие
	|		%ТекстСоединенияТаблицаКонтактов%
	|{ГДЕ
	|	ЖурналДокументовВзаимодействия.Ссылка КАК Поиск
	|	%ОтборКонтакт%}";
	
	Если ЗначениеОтбора = Неопределено Тогда
		ТекстПредмет                    = "ЕСТЬNULL(ПредметыВзаимодействий.Предмет, НЕОПРЕДЕЛЕНО)";
		ТекстОтборКонтакт               = "";
		ТекстСоединениеТаблицаКонтактов = "";
	ИначеЕсли ВзаимодействияКлиентСервер.ЯвляетсяПредметом(ЗначениеОтбора) ИЛИ ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(ЗначениеОтбора) Тогда
		ТекстПредмет                    = "ЕСТЬNULL(ВЫРАЗИТЬ(ПредметыВзаимодействий.Предмет КАК " + ЗначениеОтбора.Метаданные().ПолноеИмя() + "), НЕОПРЕДЕЛЕНО)";
		ТекстОтборКонтакт               = "";
		ТекстСоединениеТаблицаКонтактов = "";
	Иначе
		ТекстПредмет                    = "ЕСТЬNULL(ПредметыВзаимодействий.Предмет, НЕОПРЕДЕЛЕНО)";
		ТекстРазличные                  = "";
		ТекстОтборКонтакт               = ",
		                                   |КонтактыВзаимодействий.Контакт";
		ТекстСоединениеТаблицаКонтактов = "{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактыВзаимодействий КАК КонтактыВзаимодействий
		                                   |ПО ЖурналДокументовВзаимодействия.Ссылка = КонтактыВзаимодействий.Взаимодействие}";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Предмет%", ТекстПредмет);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%РАЗЛИЧНЫЕ%", ТекстРазличные);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборКонтакт%", ТекстОтборКонтакт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстСоединенияТаблицаКонтактов%", ТекстСоединениеТаблицаКонтактов);

	Возврат ТекстЗапроса; 

КонецФункции

// Заполняет данные регистра сведений КонтактыВзаимодействий для переданного массива взаимодействий.
//
// Параметры:
//  МассивВзаимодействий    - Массив - массив для которого будут заполнены данные о контактах.
//  РассчитыватьРассмотрено - Булево - признак необходимости расчета состояний контактов взаимодействий.
//
Процедура ПриЗаписиДокумента(ДокументОбъект) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если НеЗаписыватьКонтакты(ДокументОбъект.ДополнительныеСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.КонтактыВзаимодействий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Взаимодействие.Установить(ДокументОбъект.Ссылка);
	
	Таблица = Новый ТаблицаЗначений;
	ОписаниеТиповКонтактов = Новый ОписаниеТипов(ВзаимодействияКлиентСервер.ПолучитьМассивВозможныхТиповКонтактов());
	Таблица.Колонки.Добавить("Контакт", ОписаниеТиповКонтактов);
	Таблица.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));

	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.Встреча") Тогда
		
		Для Каждого Участник Из ДокументОбъект.Участники Цикл
			
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Контакт        = Участник.Контакт;
			НоваяСтрока.Представление  = Участник.ПредставлениеКонтакта;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗапланированноеВзаимодействие") Тогда
		
		Для Каждого Участник Из ДокументОбъект.Участники Цикл
			
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Контакт        = Участник.Контакт;
			НоваяСтрока.Представление  = Участник.ПредставлениеКонтакта;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ТелефонныйЗвонок") Тогда
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Контакт        = ДокументОбъект.АбонентКонтакт;
		НоваяСтрока.Представление  = ДокументОбъект.АбонентПредставление;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СообщениеSMS") Тогда
		
		Для Каждого Абонент Из ДокументОбъект.Адресаты Цикл
			
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Контакт        = Абонент.Контакт;
			НоваяСтрока.Представление  = Абонент.ПредставлениеКонтакта;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") Тогда
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Контакт        = ДокументОбъект.ОтправительКонтакт;
		НоваяСтрока.Представление  = ДокументОбъект.ОтправительПредставление;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		
		Для Каждого Адресат Из ДокументОбъект.ПолучателиПисьма Цикл
			
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Контакт        = Адресат.Контакт;
			НоваяСтрока.Представление  = Адресат.Представление;
			
		КонецЦикла;
		
		Для Каждого Адресат Из ДокументОбъект.ПолучателиКопий Цикл
			
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Контакт        = Адресат.Контакт;
			НоваяСтрока.Представление  = Адресат.Представление;
			
		КонецЦикла;
		
		Для Каждого Адресат Из ДокументОбъект.ПолучателиСкрытыхКопий Цикл
			
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Контакт        = Адресат.Контакт;
			НоваяСтрока.Представление  = Адресат.Представление;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
			СтрокаТаблицы.Контакт = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаКонтактов.Контакт,
	|	ТаблицаКонтактов.Представление
	|ПОМЕСТИТЬ ТаблицаКонтактов
	|ИЗ
	|	&ТаблицаКонтактов КАК ТаблицаКонтактов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ТаблицаКонтактов.Контакт = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(СтроковыеКонтактыВзаимодействий.Ссылка, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ ТаблицаКонтактов.Контакт
	|	КОНЕЦ КАК Контакт,
	|	ТаблицаКонтактов.Представление
	|ИЗ
	|	ТаблицаКонтактов КАК ТаблицаКонтактов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтроковыеКонтактыВзаимодействий КАК СтроковыеКонтактыВзаимодействий
	|		ПО ТаблицаКонтактов.Представление = СтроковыеКонтактыВзаимодействий.Наименование
	|			И (НЕ СтроковыеКонтактыВзаимодействий.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("ТаблицаКонтактов", Таблица);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы.Контакт = Неопределено Тогда
			СтроковыйКонтактВзаимодействий              = Справочники.СтроковыеКонтактыВзаимодействий.СоздатьЭлемент();
			СтроковыйКонтактВзаимодействий.Наименование = СтрокаТаблицы.Представление;
			СтроковыйКонтактВзаимодействий.Записать();
			СтрокаТаблицы.Контакт                        = СтроковыйКонтактВзаимодействий.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Таблица.Свернуть("Контакт");
	
	Таблица.Колонки.Добавить("Взаимодействие");
	Таблица.ЗаполнитьЗначения(ДокументОбъект.Ссылка, "Взаимодействие");
	НаборЗаписей.ДополнительныеСвойства.Вставить("РассчитыватьРассмотрено", Истина);
	НаборЗаписей.Загрузить(Таблица);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Заполняет данные регистра сведений КонтактыВзаимодействий для переданного массива взаимодействий.
//
// Параметры:
//  МассивВзаимодействий    - Массив - массив для которого будут заполнены данные о контактах.
//  РассчитыватьРассмотрено - Булево - признак необходимости расчета состояний контактов взаимодействий.
//
Процедура ЗаполнитьКонтактыМассиваВзаимодействий(МассивВзаимодействий, РассчитыватьРассмотрено = Ложь) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВстречаУчастники.Ссылка КАК Взаимодействие,
	|	ВстречаУчастники.Контакт,
	|	ВстречаУчастники.ПредставлениеКонтакта КАК ПредставлениеКонтакта
	|ПОМЕСТИТЬ ИнформацияОКонтактах
	|ИЗ
	|	Документ.Встреча.Участники КАК ВстречаУчастники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактыВзаимодействий КАК КонтактыВзаимодействий
	|		ПО ВстречаУчастники.Ссылка = КонтактыВзаимодействий.Взаимодействие
	|ГДЕ
	|	ВстречаУчастники.Ссылка В
	|			(&МассивВзаимодействий)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗапланированноеВзаимодействиеУчастники.Ссылка,
	|	ЗапланированноеВзаимодействиеУчастники.Контакт,
	|	ЗапланированноеВзаимодействиеУчастники.ПредставлениеКонтакта
	|ИЗ
	|	Документ.ЗапланированноеВзаимодействие.Участники КАК ЗапланированноеВзаимодействиеУчастники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактыВзаимодействий КАК КонтактыВзаимодействий
	|		ПО ЗапланированноеВзаимодействиеУчастники.Ссылка = КонтактыВзаимодействий.Взаимодействие
	|ГДЕ
	|	ЗапланированноеВзаимодействиеУчастники.Ссылка В
	|			(&МассивВзаимодействий)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТелефонныйЗвонок.Ссылка,
	|	ТелефонныйЗвонок.АбонентКонтакт,
	|	ТелефонныйЗвонок.АбонентПредставление
	|ИЗ
	|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактыВзаимодействий КАК КонтактыВзаимодействий
	|		ПО (КонтактыВзаимодействий.Взаимодействие = ТелефонныйЗвонок.Ссылка)
	|ГДЕ
	|	ТелефонныйЗвонок.Ссылка В
	|			(&МассивВзаимодействий)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СообщениеSMSАдресаты.Ссылка,
	|	СообщениеSMSАдресаты.Контакт,
	|	СообщениеSMSАдресаты.ПредставлениеКонтакта
	|ИЗ
	|	Документ.СообщениеSMS.Адресаты КАК СообщениеSMSАдресаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактыВзаимодействий КАК КонтактыВзаимодействий
	|		ПО СообщениеSMSАдресаты.Ссылка = КонтактыВзаимодействий.Взаимодействие
	|ГДЕ
	|	СообщениеSMSАдресаты.Ссылка В
	|			(&МассивВзаимодействий)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ЭлектронноеПисьмоВходящее.ОтправительКонтакт,
	|	ЭлектронноеПисьмоВходящее.ОтправительПредставление
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактыВзаимодействий КАК КонтактыВзаимодействий
	|		ПО (КонтактыВзаимодействий.Взаимодействие = ЭлектронноеПисьмоВходящее.Ссылка)
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.Ссылка В
	|			(&МассивВзаимодействий)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка,
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт,
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Представление
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма,
	|	РегистрСведений.КонтактыВзаимодействий КАК КонтактыВзаимодействий
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка В
	|			(&МассивВзаимодействий)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Ссылка,
	|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Контакт,
	|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Представление
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиКопий КАК ЭлектронноеПисьмоИсходящееПолучателиКопий
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Ссылка В
	|			(&МассивВзаимодействий)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий.Ссылка,
	|	ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий.Контакт,
	|	ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий.Представление
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиСкрытыхКопий КАК ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактыВзаимодействий КАК КонтактыВзаимодействий
	|		ПО ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий.Ссылка = КонтактыВзаимодействий.Взаимодействие
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПолучателиСкрытыхКопий.Ссылка В
	|			(&МассивВзаимодействий)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредставлениеКонтакта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИнформацияОКонтактах.Взаимодействие КАК Взаимодействие,
	|	ВЫБОР
	|		КОГДА ИнформацияОКонтактах.Контакт = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЕСТЬNULL(СтроковыеКонтактыВзаимодействий.Ссылка, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ ИнформацияОКонтактах.Контакт
	|	КОНЕЦ КАК Контакт,
	|	ИнформацияОКонтактах.ПредставлениеКонтакта
	|ИЗ
	|	ИнформацияОКонтактах КАК ИнформацияОКонтактах
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтроковыеКонтактыВзаимодействий КАК СтроковыеКонтактыВзаимодействий
	|		ПО ИнформацияОКонтактах.ПредставлениеКонтакта = СтроковыеКонтактыВзаимодействий.Наименование
	|ИТОГИ ПО
	|	Взаимодействие";
	
	Запрос.УстановитьПараметр("МассивВзаимодействий", МассивВзаимодействий);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаВзаимодействие = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВзаимодействие.Следующий() Цикл
		ВыборкаДетали = ВыборкаВзаимодействие.Выбрать();
		
		НаборЗаписей = РегистрыСведений.КонтактыВзаимодействий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Взаимодействие.Установить(ВыборкаВзаимодействие.Взаимодействие);
		
		Пока ВыборкаДетали.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Взаимодействие = ВыборкаВзаимодействие.Взаимодействие;
			Если ВыборкаДетали.Контакт <> Неопределено Тогда
				НоваяЗапись.Контакт = ВыборкаДетали.Контакт;
			Иначе
				СтроковыйКонтактВзаимодействий              = Справочники.СтроковыеКонтактыВзаимодействий.СоздатьЭлемент();
				СтроковыйКонтактВзаимодействий.Наименование = ВыборкаДетали.ПредставлениеКонтакта;
				СтроковыйКонтактВзаимодействий.Записать();
				НоваяЗапись.Контакт                         = СтроковыйКонтактВзаимодействий.Ссылка;
			КонецЕсли;
			
		КонецЦикла;
		
		Если РассчитыватьРассмотрено Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("РассчитыватьРассмотрено", Истина);
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	КонецЦикла

КонецПроцедуры

// Удаляет повторяющиеся элементы массива.
//
Функция УдалитьПовторяющиесяЭлементыМассива(Массив, НеИспользоватьНеопределено = Ложь) Экспорт
	
	ОписаниеТиповСправочники  = Справочники.ТипВсеСсылки(); 
	ОписаниеТиповДокументы    = Документы.ТипВсеСсылки(); 
	ОписаниеТиповПВХ          = ПланыВидовХарактеристик.ТипВсеСсылки(); 
	ОписаниеТиповПланыСчетов  = ПланыСчетов.ТипВсеСсылки(); 
	ОписаниеТиповПланыРасчета = ПланыВидовРасчета.ТипВсеСсылки(); 
	
	Если ТипЗнч(Массив) = Тип("Массив") Тогда 
		
		УжеВМассиве 		   = Новый Соответствие; 
		БылоНеопределено 	   = Ложь;
		КоличествоЭлементовВМассиве = Массив.Количество(); 
		
		Для ОбратныйИндекс = 1 По КоличествоЭлементовВМассиве Цикл 
			
			ЭлементМассива = Массив[КоличествоЭлементовВМассиве - ОбратныйИндекс]; 
			ТипЭлемента    = ТипЗнч(ЭлементМассива); 
			
			Если ЭлементМассива = Неопределено Тогда
				
				Если БылоНеопределено ИЛИ НеИспользоватьНеопределено Тогда
					Массив.Удалить(КоличествоЭлементовВМассиве - ОбратныйИндекс); 
				Иначе
					БылоНеопределено = Истина;
				КонецЕсли;
				
				Продолжить;
				
			ИначеЕсли ОписаниеТиповСправочники.СодержитТип(ТипЭлемента) 
			 ИЛИ ОписаниеТиповДокументы.СодержитТип(ТипЭлемента) 
			 ИЛИ ОписаниеТиповПВХ.СодержитТип(ТипЭлемента) 
			 ИЛИ ОписаниеТиповПланыСчетов.СодержитТип(ТипЭлемента) 
			 ИЛИ ОписаниеТиповПланыРасчета.СодержитТип(ТипЭлемента) Тогда 
				
				ИДЭлемента = Строка(ЭлементМассива.УникальныйИдентификатор()); 
				
			Иначе 
				
				ИДЭлемента = ЭлементМассива; 
				
			КонецЕсли; 
			
			Если УжеВМассиве[ИДЭлемента] = Истина Тогда 
				Массив.Удалить(КоличествоЭлементовВМассиве - ОбратныйИндекс); 
			Иначе 
				УжеВМассиве[ИДЭлемента] = Истина; 
			КонецЕсли; 
			
		КонецЦикла;      
		
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

Процедура ЗаполнитьПодменюСтатус(ГруппаПодменю , Форма) Экспорт
	
	СписокСтатусов = ВзаимодействияКлиентСервер.СписокСтатусов();
	
	Для Инд = 0 По СписокСтатусов.Количество() - 1 Цикл
		
		Представление = СписокСтатусов.Получить(Инд).Представление;
		Значение      = СписокСтатусов.Получить(Инд).Значение;
		
		НоваяКоманда = Форма.Команды.Добавить("УстановитьОтборСтатус_" + Значение);
		НоваяКоманда.Действие = "Подключаемый_ИзменитьОтборСтатус";
		ЭлементКнопкаПодменю = Форма.Элементы.Добавить("УстановитьОтборСтатус_" + Значение, Тип("КнопкаФормы"), ГруппаПодменю);
		ЭлементКнопкаПодменю.Вид                   = ВидКнопкиФормы.КнопкаКоманднойПанели;
		ЭлементКнопкаПодменю.ИмяКоманды            = НоваяКоманда.Имя;
		ЭлементКнопкаПодменю.Заголовок             = Представление;
		ЭлементКнопкаПодменю.ТолькоВоВсехДействиях = Истина;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПодменюПоТипуВзаимодействия(ГруппаПодменю , Форма) Экспорт
	
	СписокОтборов = ВзаимодействияКлиентСервер.СписокОтборовПоТипуВзаимодействий(Форма.ТолькоПочта);
	
	Для Инд = 0 По СписокОтборов.Количество() - 1 Цикл
		
		Представление = СписокОтборов.Получить(Инд).Представление;
		Значение      = СписокОтборов.Получить(Инд).Значение;
		
		ИмяКоманды = "УстановитьОтборТипВзаимодействия_" + Значение;
		НайденнаяКоманда = Форма.Команды.Найти(ИмяКоманды);
		
		Если НайденнаяКоманда = Неопределено Тогда
			НоваяКоманда = Форма.Команды.Добавить("УстановитьОтборТипВзаимодействия_" + Значение);
			НоваяКоманда.Действие = "Подключаемый_ИзменитьОтборТипВзаимодействия";
		Иначе
			НоваяКоманда = НайденнаяКоманда;
		КонецЕсли;
		
		ЭлементКнопкаПодменю = Форма.Элементы.Добавить("УстановитьОтборТипВзаимодействия_" + ГруппаПодменю.Имя + "_"+ Значение, Тип("КнопкаФормы"), ГруппаПодменю);
		ЭлементКнопкаПодменю.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		ЭлементКнопкаПодменю.ИмяКоманды = НоваяКоманда.Имя;
		ЭлементКнопкаПодменю.Заголовок = Представление;
		ЭлементКнопкаПодменю.ТолькоВоВсехДействиях = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьПодменюОтборПоТипуВзаимодействий(Форма) Экспорт

	ШаблонЗаголовка = НСтр("ru = 'Тип взаимодействий: %1'");
	ПредставлениеТипа = ВзаимодействияКлиентСервер.СписокОтборовПоТипуВзаимодействий(Форма.ТолькоПочта).НайтиПоЗначению(Форма.ТипВзаимодействия).Представление;
	Форма.Элементы.СписокТипВзаимодействия.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ПредставлениеТипа);
	Для Каждого ЭлементПодменю Из Форма.Элементы.СписокТипВзаимодействия.ПодчиненныеЭлементы Цикл
		Если ЭлементПодменю.Имя = ("УстановитьОтборТипВзаимодействия_СписокТипВзаимодействия_" + Форма.ТипВзаимодействия) Тогда
			ЭлементПодменю.Пометка = Истина;
		Иначе
			ЭлементПодменю.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла	

КонецПроцедуры

Функция НовыхПисемПоУчетнымЗаписям()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(Взаимодействия.Ссылка) КАК КоличествоПисем,
	|	Взаимодействия.УчетнаяЗапись КАК УчетнаяЗапись
	|ИЗ
	|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыВзаимодействий
	|		ПО Взаимодействия.Ссылка = ПредметыВзаимодействий.Взаимодействие
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Взаимодействия.Ссылка) = ТИП(Документ.ЭлектронноеПисьмоВходящее)
	|	И ПредметыВзаимодействий.Рассмотрено = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	Взаимодействия.УчетнаяЗапись";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
