////////////////////////////////////////////////////////////////////////////////
// Подсистема "Файловые функции".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Показывает напоминание о порядке работы с файлом в веб-клиенте,
// если включена настройка "Показывать подсказки при редактировании файлов".
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//
Процедура ВывестиНапоминаниеПриРедактировании(ОбработчикРезультата) Экспорт
	ПерсональныеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
	Если ПерсональныеНастройки.ПоказыватьПодсказкиПриРедактированииФайлов = Истина Тогда
		Если НЕ РасширениеРаботыСФайламиПодключено() Тогда
			Форма = ФайловыеФункцииСлужебныйКлиентПовтИсп.ПолучитьФормуНапоминанияПриРедактировании();
			УстановитьОповещениеФормы(Форма, ОбработчикРезультата);
			Форма.Открыть();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ВернутьРезультат(ОбработчикРезультата, Истина);
КонецПроцедуры

// Показывает стандартное предупреждение.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ПредставлениеКоманды - Строка - Необязательный. Имя команды, для выполнения которой необходимо расширение.
//
Процедура ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(ОбработчикРезультата, ПредставлениеКоманды = "") Экспорт
	Если Не КлиентПоддерживаетСинхронныеВызовы() Тогда
		ТекстПредупреждения = НСтр("ru = 'Выполнение команды ""%1"" в браузере
			|Google Chrome не поддерживается.'");
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Для выполнения команды ""%1"" необходимо
			|установить расширение для веб-клиента 1С:Предприятие.'");
	КонецЕсли;
	Если ЗначениеЗаполнено(ПредставлениеКоманды) Тогда
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", ПредставлениеКоманды);
	Иначе
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, " ""%1""", "");
	КонецЕсли;
	ВернутьРезультатПослеПоказаПредупреждения(ОбработчикРезультата, ТекстПредупреждения, Неопределено);
КонецПроцедуры

// Возвращает путь к рабочему каталогу пользователя.
Функция РабочийКаталогПользователя() Экспорт
	
	Возврат ФайловыеФункцииСлужебныйКлиентПовтИсп.РабочийКаталогПользователя();
	
КонецФункции

// Возвращает путь к рабочему каталогу пользователя.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - оповещение, которое выполняется после получения рабочего
//   каталога пользователя. В качестве результата возвращается Структура со свойствами:
//     * Каталог        - Строка - полное имя рабочего каталога пользователя.
//     * ОписаниеОшибки - Строка - текст ошибки, если каталог получить не удалось.
//
Процедура ПолучитьРабочийКаталогПользователя(Оповещение) Экспорт
	
	ФайловыеФункцииСлужебныйКлиентПовтИсп.ПолучитьРабочийКаталогПользователя(Оповещение);
	
КонецПроцедуры

// Сохраняет путь к рабочему каталогу пользователя в настройках.
//
// Параметры:
//  ИмяКаталога - Строка - имя каталога.
//
Процедура УстановитьРабочийКаталогПользователя(ИмяКаталога) Экспорт
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранитьИОбновитьПовторноИспользуемыеЗначения(
		"ЛокальныйКэшФайлов", "ПутьКЛокальномуКэшуФайлов", ИмяКаталога);
	
КонецПроцедуры

// Возвращает каталог "Мои Документы" + имя текущего пользователя или
// ранее использованную папку для выгрузки.
//
Функция КаталогВыгрузки() Экспорт
	
	Путь = "";
	
#Если Не ВебКлиент Тогда
	
	ПараметрыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	
	Путь = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("ИмяПапкиВыгрузки", "ИмяПапкиВыгрузки");
	
	Если Путь = Неопределено Тогда
		Если НЕ ПараметрыКлиента.ЭтоБазоваяВерсияКонфигурации Тогда
			Путь = КаталогМоиДокументы();
			ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(
				"ИмяПапкиВыгрузки", "ИмяПапкиВыгрузки", Путь);
		КонецЕсли;
	КонецЕсли;
	
#КонецЕсли
	
	Возврат Путь;
	
КонецФункции

// Возвращает каталог "Мои Документы".
//
Функция КаталогМоиДокументы() Экспорт
	Возврат КаталогДокументов();
КонецФункции

// Показывает пользователю диалог выбора файлов и возвращает
// массив - выбранные файлы для импорта.
//
Функция ПолучитьСписокИмпортируемыхФайлов() Экспорт
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла     = "";
	ДиалогОткрытияФайла.Фильтр             = НСтр("ru = 'Все файлы(*.*)|*.*'");
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	ДиалогОткрытияФайла.Заголовок          = НСтр("ru = 'Выберите файлы'");
	
	МассивИменФайлов = Новый Массив;
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			МассивИменФайлов.Добавить(ИмяФайла);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивИменФайлов;
	
КонецФункции

// Добавляет концевой слэш к имени каталога, если это надо,
// удаляет все запрещенные символы из имени каталога и заменяет "/" на "\".
//
Функция НормализоватьКаталог(ИмяКаталога) Экспорт
	
	Результат = СокрЛП(ИмяКаталога);
	
	// Запоминание имени диска в начале пути "Диск:" без двоеточия.
	СтрДиск = "";
	Если Сред(Результат, 2, 1) = ":" Тогда
		СтрДиск = Сред(Результат, 1, 2);
		Результат = Сред(Результат, 3);
	Иначе
		
		// Проверка, это не UNC-путь (Т.е. вначале нет "\\").
		Если Сред(Результат, 2, 2) = "\\" Тогда
			СтрДиск = Сред(Результат, 1, 2);
			Результат = Сред(Результат, 3);
		КонецЕсли;
	КонецЕсли;
	
	// Преобразование слэшей к Windows-формату.
	Результат = СтрЗаменить(Результат, "/", "\");
	
	// Добавление конечного слэша.
	Результат = СокрЛП(Результат);
	Если Не СтрЗаканчиваетсяНа(Результат, "\") Тогда
		Результат = Результат + "\";
	КонецЕсли;
	
	// Замена всех двойных слэшей на одинарные и получение полного пути.
	Результат = СтрДиск + СтрЗаменить(Результат, "\\", "\");
	
	Возврат Результат;
	
КонецФункции

// Проверяет имя файла на наличие некорректных символов.
//
// Параметры:
//  ИмяФайла - Строка- проверяемое имя файла.
//
//  УдалятьНекорректныеСимволы - Булево - Истина указывает удалять некорректные
//             символы из переданной строки.
//
Процедура КорректноеИмяФайла(ИмяФайла, УдалятьНекорректныеСимволы = Ложь) Экспорт
	
	// Перечень запрещенных символов взят отсюда: http://support.microsoft.com/kb/100108/ru
	// при этом были объединены запрещенные символы для файловых систем FAT и NTFS.
	
	СтрИсключения = ОбщегоНазначенияКлиентСервер.ПолучитьНедопустимыеСимволыВИмениФайла();
	
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'В имени файла не должно быть следующих символов: %1'"), СтрИсключения);
	
	Результат = Истина;
	
	МассивНайденныхНедопустимыхСимволов =
		ОбщегоНазначенияКлиентСервер.НайтиНедопустимыеСимволыВИмениФайла(ИмяФайла);
	
	Если МассивНайденныхНедопустимыхСимволов.Количество() <> 0 Тогда
		
		Результат = Ложь;
		
		Если УдалятьНекорректныеСимволы Тогда
			ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла, "");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Результат Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Рекурсивно обходит каталоги и подсчитывает количество файлов и их суммарный размер.
Процедура ОбходФайловРазмер(Путь, МассивФайлов, РазмерСуммарный, КоличествоСуммарное) Экспорт
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		
		Если ВыбранныйФайл.ЭтоКаталог() Тогда
			НовыйПуть = Строка(Путь);
			
			НовыйПуть = НовыйПуть + ПолучитьРазделительПути();
			
			НовыйПуть = НовыйПуть + Строка(ВыбранныйФайл.Имя);
			МассивФайловВКаталоге = НайтиФайлы(НовыйПуть, "*.*");
			
			Если МассивФайловВКаталоге.Количество() <> 0 Тогда
				ОбходФайловРазмер(
					НовыйПуть, МассивФайловВКаталоге, РазмерСуммарный, КоличествоСуммарное);
			КонецЕсли;
		
			Продолжить;
		КонецЕсли;
		
		РазмерСуммарный = РазмерСуммарный + ВыбранныйФайл.Размер();
		КоличествоСуммарное = КоличествоСуммарное + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает путь к каталогу вида
// "C:\Documents and Settings\ИМЯ ПОЛЬЗОВАТЕЛЯ\Application Data\1C\ФайлыА8\".
//
Функция ВыбратьПутьККаталогуДанныхПользователя() Экспорт
	
	ИмяКаталога = "";
	Если РасширениеРаботыСФайламиПодключено() Тогда
		ИмяКаталога = РабочийКаталогДанныхПользователя();
	КонецЕсли;
	
	Возврат ИмяКаталога;
	
КонецФункции

// Возвращает путь к рабочему каталогу данных пользователя. Этот каталог используется
// в качестве начального значения для рабочего каталога пользователя.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - оповещение, которое выполняется после получения рабочего
//   каталога пользователя. В качестве результата возвращается Структура со свойствами:
//     * Каталог        - Строка - полное имя рабочего каталога данных пользователя.
//     * ОписаниеОшибки - Строка - текст ошибки, если каталог получить не удалось.
//
Процедура ПолучитьРабочийКаталогДанныхПользователя(Оповещение) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение", Оповещение);
	
	НачатьПолучениеРабочегоКаталогаДанныхПользователя(Новый ОписаниеОповещения(
		"ПолучитьРабочийКаталогДанныхПользователяПослеПолучения", ЭтотОбъект, Контекст,
		"ПолучитьРабочийКаталогДанныхПользователяПослеОшибкиПолучения", ЭтотОбъект));
	
КонецПроцедуры

// Продолжение процедуры ПолучитьРабочийКаталогДанныхПользователя.
Процедура ПолучитьРабочийКаталогДанныхПользователяПослеОшибкиПолучения(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Результат = Новый Структура;
	Результат.Вставить("Каталог", "");
	Результат.Вставить("ОписаниеОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось получить рабочий каталог данных пользователя по причине:
		           |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьРабочийКаталогДанныхПользователя.
Процедура ПолучитьРабочийКаталогДанныхПользователяПослеПолучения(КаталогДанныхПользователя, Контекст) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Каталог", КаталогДанныхПользователя);
	Результат.Вставить("ОписаниеОшибки", "");
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры

// Открывает Проводник Windows и выделяет указанный файл.
Функция ОткрытьПроводникСФайлом(Знач ПолноеИмяФайла) Экспорт
	
	ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
	
	Если НЕ ФайлНаДиске.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		ЗапуститьПриложение(ФайлНаДиске.Путь);
	Иначе
		ЗапуститьПриложение("explorer.exe /select, """ + ФайлНаДиске.ПолноеИмя + """");
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

// Проверяет свойства файла в рабочем каталоге и в хранилище файлов,
// если требуется уточняет у пользователя и возвращает действие.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ИмяФайлаСПутем - Строка - полное имя файла с путем в рабочем каталоге.
// 
//  ДанныеФайла    - Структура со свойствами:
//                   Размер                       - Число.
//                   ДатаМодификацииУниверсальная - Дата.
//                   ВРабочемКаталогеНаЧтение     - Булево.
//
// Возвращаемое значение:
//  Строка - возможные строки:
//  "ОткрытьСуществующий", "ВзятьИзХранилищаИОткрыть", "Отменить".
// 
Процедура ДействиеПриОткрытииФайлаВРабочемКаталоге(ОбработчикРезультата, ИмяФайлаСПутем, ДанныеФайла) Экспорт
	
	Если ДанныеФайла.Свойство("ПутьОбновленияИзФайлаНаДиске") Тогда
		ВернутьРезультат(ОбработчикРезультата, "ВзятьИзХранилищаИОткрыть");
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДействиеНадФайлом", "ОткрытиеВРабочемКаталоге");
	Параметры.Вставить("ПолноеИмяФайлаВРабочемКаталоге", ИмяФайлаСПутем);
	
	Файл = Новый Файл(Параметры.ПолноеИмяФайлаВРабочемКаталоге);
	
	Параметры.Вставить("ДатаИзмененияУниверсальнаяВХранилищеФайлов",
		ДанныеФайла.ДатаМодификацииУниверсальная);
	
	Параметры.Вставить("ДатаИзмененияУниверсальнаяВРабочемКаталоге",
		Файл.ПолучитьУниверсальноеВремяИзменения());
	
	Параметры.Вставить("ДатаИзмененияВРабочемКаталоге",
		МестноеВремя(Параметры.ДатаИзмененияУниверсальнаяВРабочемКаталоге));
	
	Параметры.Вставить("ДатаИзмененияВХранилищеФайлов",
		МестноеВремя(Параметры.ДатаИзмененияУниверсальнаяВХранилищеФайлов));
	
	Параметры.Вставить("РазмерВРабочемКаталоге", Файл.Размер());
	Параметры.Вставить("РазмерВХранилищеФайлов", ДанныеФайла.Размер);
	
	РазницаДат = Параметры.ДатаИзмененияУниверсальнаяВРабочемКаталоге
	           - Параметры.ДатаИзмененияУниверсальнаяВХранилищеФайлов;
	
	Если РазницаДат < 0 Тогда
		РазницаДат = -РазницаДат;
	КонецЕсли;
	
	Если РазницаДат <= 1 Тогда // С секунда - допустимая разница (на Win95 может быть такое).
		
		Если Параметры.РазмерВХранилищеФайлов <> 0
		   И Параметры.РазмерВХранилищеФайлов <> Параметры.РазмерВРабочемКаталоге Тогда
			// Дата одинаковая, но размер отличается - редкий, но возможный случай.
			
			Параметры.Вставить("Заголовок",
				НСтр("ru = 'Размер файла отличается'"));
			
			Параметры.Вставить("Сообщение",
				НСтр("ru = 'Размер файла в рабочем каталоге и в хранилище файлов отличается.
				           |
				           |Взять файл из хранилища файлов и заменить им существующий или
				           |открыть существующий без обновления?'"));
		Иначе
			// Все совпадает - и дата, и размер.
			ВернутьРезультат(ОбработчикРезультата, "ОткрытьСуществующий");
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Параметры.ДатаИзмененияУниверсальнаяВРабочемКаталоге
	        < Параметры.ДатаИзмененияУниверсальнаяВХранилищеФайлов Тогда
		// В хранилище файлов более новый файл.
		
		Если ДанныеФайла.ВРабочемКаталогеНаЧтение = Ложь Тогда
			// Файл в рабочем каталоге для редактирования.
			
			Параметры.Вставить("Заголовок", НСтр("ru = 'В хранилище файлов новый файл'"));
			
			Параметры.Вставить("Сообщение",
				НСтр("ru = 'Файл в хранилище файлов, отмеченный как занятый для редактирования,
				           |имеет более позднюю дату изменения (новее), чем в рабочем каталоге.
				           |
				           |Взять файл из хранилища файлов и заменить им существующий или
				           |открыть существующий без обновления?'"));
		Иначе
			// Файл в рабочем каталоге для чтения.
			
			// Обновление из хранилища файлов без вопросов.
			ВернутьРезультат(ОбработчикРезультата, "ВзятьИзХранилищаИОткрыть");
			Возврат;
		КонецЕсли;
	
	ИначеЕсли Параметры.ДатаИзмененияУниверсальнаяВРабочемКаталоге
	        > Параметры.ДатаИзмененияУниверсальнаяВХранилищеФайлов Тогда
		// В рабочем каталоге более новый файл.
		
		Если ДанныеФайла.ВРабочемКаталогеНаЧтение = Ложь
		   И ДанныеФайла.Редактирует = ПользователиКлиентСервер.ТекущийПользователь() Тогда
			
			// Файл в рабочем каталоге для редактирования и занят текущим пользователем.
			ВернутьРезультат(ОбработчикРезультата, "ОткрытьСуществующий");
			Возврат;
		Иначе
			// Файл в рабочем каталоге для чтения.
		
			Параметры.Вставить("Заголовок", НСтр("ru = 'В рабочем каталоге новый файл'"));
			
			Параметры.Вставить(
				"Сообщение",
				НСтр("ru = 'Файл в рабочем каталоге имеет более позднюю дату изменения (новее),
				           |чем в хранилище файлов. Возможно, он был изменен.
				           |
				           |Открыть существующий файл или заменить его на файл
				           |из хранилища файлов c потерей изменений и открыть?'"));
		КонецЕсли;
	КонецЕсли;
	
	// ВыборДействияПриОбнаруженииОтличийФайла
	ОткрытьФорму("ОбщаяФорма.ВыборДействияПриОбнаруженииОтличийФайла", Параметры, , , , , ОбработчикРезультата, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Возвращает результат подключения расширения работы с файлами.
//
//  Возвращаемое значение:
//   Булево - в тонком клиенте всегда Истина, в браузере Google Chrome
//            всегда ложь.
//
Функция РасширениеРаботыСФайламиПодключено() Экспорт
	Если КлиентПоддерживаетСинхронныеВызовы() Тогда
		Возврат ПодключитьРасширениеРаботыСФайлами();
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Описание процедуры см. ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами.
//
Процедура ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения) Экспорт
	Если Не КлиентПоддерживаетСинхронныеВызовы() Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
	Иначе
		ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

Процедура ОтправитьФайлыПоПочте(МассивФайлов, ИдентификаторФормы, ПараметрыОтправки, ЭтоФайл = Ложь) Экспорт
	
	Если МассивФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("МассивФайлов", МассивФайлов);
	Параметры.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	Параметры.Вставить("ЭтоФайл", ЭтоФайл);
	Параметры.Вставить("ПараметрыОтправки", ПараметрыОтправки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьФайлыПоПочтеНастройкаУчетнойЗаписиПредложена", ЭтотОбъект, Параметры);
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		МодульРаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьФайлыПоПочтеНастройкаУчетнойЗаписиПредложена(УчетнаяЗаписьНастроена, ДополнительныеПараметры) Экспорт
	
	Если УчетнаяЗаписьНастроена <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	СписокВложений = ФайловыеФункцииСлужебныйВызовСервера.ПоместитьФайлыВоВременноеХранилище(ДополнительныеПараметры);
	ПараметрыОтправки = ДополнительныеПараметры.ПараметрыОтправки;
	
	ПараметрыНовогоПисьма = Новый Структура;
	ПараметрыНовогоПисьма.Вставить("Получатель", ПараметрыОтправки.Получатель);
	ПараметрыНовогоПисьма.Вставить("Тема", ПараметрыОтправки.Тема);
	ПараметрыНовогоПисьма.Вставить("Текст", ПараметрыОтправки.Текст);
	ПараметрыНовогоПисьма.Вставить("Вложения", СписокВложений);
	ПараметрыНовогоПисьма.Вставить("УдалятьФайлыПослеОтправки", Истина);
	
	МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
	МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыНовогоПисьма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с криптографией.

// Проверить подписи данных объекта в таблице.
// 
// Параметры:
//  Форма - УправляемаяФорма - с реквизитами:
//    * Объект - ДанныеФормыСтруктура - как у объекта со свойствами Ссылка, Зашифрован.
//                  Например, СправочникОбъект.Файл, СправочникОбъект.ДокументПрисоединенныеФайлы.
//
//    * ЭлектронныеПодписи - ДанныеФормыКоллекция - с полями:
//       * ДатаПроверкиПодписи - Дата - (возвращаемое значение) - дата проверки.
//       * Статус              - Строка - (возвращаемое значение) - результат проверки.
//       * АдресПодписи        - Строка - адрес данных подписи во временном хранилище.
//
//  СсылкаНаДвоичныеДанные - ДвоичныеДанные - двоичные данные файла.
//                         - Строка - адрес во временном хранилище или навигационная ссылка.
//
//  ВыделенныеСтроки - Массив - свойство таблицы формы параметра ЭлектронныеПодписи.
//                   - Неопределено - проверить все подписи.
//
Процедура ПроверитьПодписи(Форма, СсылкаНаДвоичныеДанные, ВыделенныеСтроки = Неопределено) Экспорт
	
	// 1. Получаем адрес двоичных данных, адреса двоичных данных подписей.
	// 2. Если файл зашифрован, то расшифровываем, далее выполняем проверку.
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	
	Если Не Форма.Объект.Зашифрован Тогда
		ПроверитьПодписиПослеПодготовкиДанных(СсылкаНаДвоичныеДанные, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",              НСтр("ru = 'Шифрование файла'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",       НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("Данные",                СсылкаНаДвоичныеДанные);
	ОписаниеДанных.Вставить("Представление",         Форма.Объект.Ссылка);
	ОписаниеДанных.Вставить("СертификатыШифрования", Форма.Объект.Ссылка);
	ОписаниеДанных.Вставить("СообщитьОЗавершении",   Ложь);
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ПослеРасшифровкиФайла", ЭтотОбъект, ДополнительныеПараметры);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработчикПродолжения);
	
КонецПроцедуры

// Продолжение процедуры ПроверитьПодписи. Вызывается из подсистемы ЭлектроннаяПодпись.
Процедура ПослеРасшифровкиФайла(ОписаниеДанных, ДополнительныеПараметры) Экспорт
	
	Если Не ОписаниеДанных.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьПодписиПослеПодготовкиДанных(ОписаниеДанных.РасшифрованныеДанные, ДополнительныеПараметры);
	
КонецПроцедуры

// Продолжение процедуры ПроверитьПодписи.
Процедура ПроверитьПодписиПослеПодготовкиДанных(Данные, ДополнительныеПараметры)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	МодульЭлектроннаяПодписьКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиентСервер");
	
	ПроверятьЭлектронныеПодписиНаСервере = 
		МодульЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().ПроверятьЭлектронныеПодписиНаСервере;
	
	Если ДополнительныеПараметры.ВыделенныеСтроки = Неопределено Тогда
		Коллекция = ДополнительныеПараметры.Форма.ЭлектронныеПодписи;
	Иначе
		Коллекция = ДополнительныеПараметры.ВыделенныеСтроки;
	КонецЕсли;
	
	Если Не ПроверятьЭлектронныеПодписиНаСервере Тогда
		МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
		ДополнительныеПараметры.Вставить("Данные", Данные);
		ДополнительныеПараметры.Вставить("Коллекция", Коллекция);
		ДополнительныеПараметры.Вставить("МодульЭлектроннаяПодписьКлиент", МодульЭлектроннаяПодписьКлиент);
		МодульЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(
			Новый ОписаниеОповещения("ПроверитьПодписиПослеСозданияМенеджераКриптографии",
				ЭтотОбъект, ДополнительныеПараметры),
			"ПроверкаПодписи");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		АдресДанных = ПоместитьВоВременноеХранилище(Данные, ДополнительныеПараметры.ИдентификаторФормы);
	Иначе
		АдресДанных = Данные;
	КонецЕсли;
	
	ДанныеСтрок = Новый Массив;
	
	Для каждого Элемент Из Коллекция Цикл
		СтрокаПодписи = ?(ТипЗнч(Элемент) <> Тип("Число"), Элемент,
			ДополнительныеПараметры.Форма.ЭлектронныеПодписи.НайтиПоИдентификатору(Элемент));
		
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("АдресПодписи",        СтрокаПодписи.АдресПодписи);
		ДанныеСтроки.Вставить("Статус",              СтрокаПодписи.Статус);
		ДанныеСтроки.Вставить("ПодписьВерна",        СтрокаПодписи.ПодписьВерна);
		ДанныеСтроки.Вставить("ДатаПодписи",         СтрокаПодписи.ДатаПодписи);
		ДанныеСтроки.Вставить("ДатаПроверкиПодписи", СтрокаПодписи.ДатаПроверкиПодписи);
		ДанныеСтрок.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	ФайловыеФункцииСлужебныйВызовСервера.ПроверитьПодписи(АдресДанных, ДанныеСтрок);
	
	Индекс = 0;
	Для каждого Элемент Из Коллекция Цикл
		СтрокаПодписи = ?(ТипЗнч(Элемент) <> Тип("Число"), Элемент,
			ДополнительныеПараметры.Форма.ЭлектронныеПодписи.НайтиПоИдентификатору(Элемент));
		
		СтрокаПодписи.Статус              = ДанныеСтрок[Индекс].Статус;
		СтрокаПодписи.ПодписьВерна        = ДанныеСтрок[Индекс].ПодписьВерна;
		СтрокаПодписи.ДатаПроверкиПодписи = ДанныеСтрок[Индекс].ДатаПроверкиПодписи;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

// Продолжение процедуры ПроверитьПодписи.
Процедура ПроверитьПодписиПослеСозданияМенеджераКриптографии(МенеджерКриптографии, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(МенеджерКриптографии) <> Тип("МенеджерКриптографии") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Индекс", -1);
	ДополнительныеПараметры.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	
	ПроверитьПодписиЦиклНачало(ДополнительныеПараметры);
	
КонецПроцедуры

// Продолжение процедуры ПроверитьПодписи.
Процедура ПроверитьПодписиЦиклНачало(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.Коллекция.Количество() <= ДополнительныеПараметры.Индекс + 1 Тогда
		ДополнительныеПараметры.Форма.ОбновитьОтображениеДанных();
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Индекс = ДополнительныеПараметры.Индекс + 1;
	Элемент = ДополнительныеПараметры.Коллекция[ДополнительныеПараметры.Индекс];
	
	ДополнительныеПараметры.Вставить("СтрокаПодписи", ?(ТипЗнч(Элемент) <> Тип("Число"), Элемент,
		ДополнительныеПараметры.Форма.ЭлектронныеПодписи.НайтиПоИдентификатору(Элемент)));
		
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.ПроверитьПодпись(
		Новый ОписаниеОповещения("ПроверитьПодписиПослеПроверкиСтроки", ЭтотОбъект, ДополнительныеПараметры),
		ДополнительныеПараметры.Данные,
		ДополнительныеПараметры.СтрокаПодписи.АдресПодписи,
		ДополнительныеПараметры.МенеджерКриптографии,
		ДополнительныеПараметры.СтрокаПодписи.ДатаПодписи);
	
КонецПроцедуры

// Продолжение процедуры ПроверитьПодписи.
Процедура ПроверитьПодписиПослеПроверкиСтроки(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаПодписи = ДополнительныеПараметры.СтрокаПодписи;
	СтрокаПодписи.ДатаПроверкиПодписи = ОбщегоНазначенияКлиент.ДатаСеанса();
	СтрокаПодписи.ПодписьВерна = (Результат = Истина);
	ФайловыеФункцииСлужебныйКлиентСервер.ЗаполнитьСтатусПодписи(СтрокаПодписи, Результат);
	
	ПроверитьПодписиЦиклНачало(ДополнительныеПараметры);
	
КонецПроцедуры

// Для формы файла.
Процедура УстановитьДоступностьКомандСпискаЭлектронныхПодписей(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	ЕстьПодписи = (Форма.ЭлектронныеПодписи.Количество() <> 0);
	
	Элементы.ЭлектронныеПодписиОткрыть.Доступность      = ЕстьПодписи;
	Элементы.ЭлектронныеПодписиПроверить.Доступность    = ЕстьПодписи;
	Элементы.ЭлектронныеПодписиПроверитьВсе.Доступность = ЕстьПодписи;
	Элементы.ЭлектронныеПодписиСохранить.Доступность    = ЕстьПодписи;
	Элементы.ЭлектронныеПодписиУдалить.Доступность      = ЕстьПодписи;
	
КонецПроцедуры

// Для формы файла.
Процедура УстановитьДоступностьКомандСпискаСертификатовШифрования(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.СертификатыШифрованияОткрыть.Доступность = Объект.Зашифрован;
	
КонецПроцедуры

// Проверяет установлена ли компонента сканирования и есть ли хоть один сканер.
Функция ДоступнаКомандаСканировать() Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПроинициализироватьКомпоненту() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыПриложения["СтандартныеПодсистемы.КомпонентаTwain"].ЕстьУстройства() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Открывает диалог сканирования и просмотра картинки.
Процедура ДобавитьСоСканера(ПараметрыВыполнения) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла", ПараметрыВыполнения.ВладелецФайла);
	ПараметрыФормы.Вставить("ЭтоФайл", ПараметрыВыполнения.ЭтоФайл);
	ПараметрыФормы.Вставить("ИдентификаторКлиента", ИдентификаторКлиента);
	ПараметрыФормы.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", ПараметрыВыполнения.НеОткрыватьКарточкуПослеСозданияИзФайла);
	
	ОбработчикРезультата = ПодготовитьОбработчикДляДиалога(ПараметрыВыполнения.ОбработчикРезультата);
	ОткрытьФорму("Обработка.Сканирование.Форма.РезультатСканирования", ПараметрыФормы, ПараметрыВыполнения.ФормаВладелец, , , , ОбработчикРезультата);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции работы с файлами операционной системы.

// Выполняет пакет неинтерактивных действий с файлом.
// Если файл не существует, то действия не будут пропущены.
//
// Можно получить следующие свойства: Имя, ИмяБезРасширения, ПолноеИмя, Путь, Расширение, Существует,
//    ВремяИзменения, УниверсальноеВремяИзменения, ТолькоЧтение, Невидимость, Размер, ЭтоКаталог, ЭтоФайл.
//
// Можно установить следующие свойства: ВремяИзменения, УниверсальноеВремяИзменения, ТолькоЧтение, Невидимость.
// Можно выполнить действия с файлом: Удалить.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - оповещение, которое выполняется после выполнения
//   действий с файлом. В качестве результата возвращается Структура со свойствами:
//     * ОписаниеОшибки - Строка - текст ошибки, если одно из действий выполнить не удалось.
//     * Результаты     - Массив - содержит результат по каждому действию в виде структуры:
//             * Файл       - Файл - инициализированный объект файл.
//                          - Неопределено - ошибка инициализации файла.
//             * Существует - Булево - Ложь, если файл не существует.
//
//  ДействияСФайлом - Массив - содержащий структуры с именем действия и параметрами действия;
//    * Действие - Строка    - ПолучитьСвойства, УстановитьСвойства, Удалить, СкопироватьИзИсточника,
//                             СоздатьКаталог, Получить, Поместить.
//    * Файл     - Строка    - полное имя файла на компьютере.
//               - Файл      - инициализированный объект Файл.
//    * Свойства - Структура - см. свойства которые можно получить или установить.
//    * Источник - Строка    - полное имя файла на компьютере из которого нужно создать копию.
//    * Адрес    - Строка    - адрес двоичных данных файла, например, адрес временного хранилища.
//    * ЗаголовокОшибки - Строка - текст к которому нужно добавить перевод строки и представление ошибки.
//
Процедура ОбработатьФайл(Оповещение, ДействияСФайлом, ИдентификаторФормы = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение",         Оповещение);
	Контекст.Вставить("ДействияСФайлом",    ДействияСФайлом);
	Контекст.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	Контекст.Вставить("РезультатДействий", Новый Структура);
	Контекст.РезультатДействий.Вставить("ОписаниеОшибки", "");
	Контекст.РезультатДействий.Вставить("Результаты", Новый Массив);
	
	Контекст.Вставить("Индекс", -1);
	ОбработатьФайлЦиклНачало(Контекст);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


// Продолжение процедуры ОбработатьФайл.
Процедура ОбработатьФайлЦиклНачало(Контекст)
	
	Если Контекст.Индекс + 1 >= Контекст.ДействияСФайлом.Количество() Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Контекст.РезультатДействий);
		Возврат;
	КонецЕсли;
	
	Контекст.Индекс = Контекст.Индекс + 1;
	Контекст.Вставить("ОписаниеДействия", Контекст.ДействияСФайлом[Контекст.Индекс]);
	
	Контекст.Вставить("Результат",  Новый Структура);
	Контекст.Результат.Вставить("Файл", Неопределено);
	Контекст.Результат.Вставить("Существует", Ложь);
	
	Контекст.РезультатДействий.Результаты.Добавить(Контекст.Результат);
	
	Контекст.Вставить("СвойстваДляПолучения", Новый Структура);
	Контекст.Вставить("СвойстваДляУстановки", Новый Структура);
	
	Действие = Контекст.ОписаниеДействия.Действие;
	Файл = Контекст.ОписаниеДействия.Файл;
	ПолноеИмяФайла = ?(ТипЗнч(Файл) = Тип("Файл"), Файл.ПолноеИмя, Файл);
	
	Если Действие = "Удалить" Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения(
			"ОбработатьФайлПослеУдаленияФайлов", ЭтотОбъект, Контекст,
			"ОбработатьФайлПослеОшибки", ЭтотОбъект), ПолноеИмяФайла);
		Возврат;
	
	ИначеЕсли Действие = "СкопироватьИзИсточника" Тогда
		НачатьКопированиеФайла(Новый ОписаниеОповещения(
			"ОбработатьФайлПослеКопированияФайла", ЭтотОбъект, Контекст,
			"ОбработатьФайлПослеОшибки", ЭтотОбъект), Контекст.ОписаниеДействия.Источник, ПолноеИмяФайла);
		Возврат;
	
	ИначеЕсли Действие = "СоздатьКаталог" Тогда
		НачатьСозданиеКаталога(Новый ОписаниеОповещения(
			"ОбработатьФайлПослеСозданияКаталога", ЭтотОбъект, Контекст,
			"ОбработатьФайлПослеОшибки", ЭтотОбъект), ПолноеИмяФайла);
		Возврат;
	
	ИначеЕсли Действие = "Получить" Тогда
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, Контекст.ОписаниеДействия.Адрес);
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(ОписаниеФайла);
		НачатьПолучениеФайлов(Новый ОписаниеОповещения(
				"ОбработатьФайлПослеПолученияФайлов", ЭтотОбъект, Контекст,
				"ОбработатьФайлПослеОшибки", ЭтотОбъект),
			ПолучаемыеФайлы, , Ложь);
		Возврат;
	
	ИначеЕсли Действие = "Поместить" Тогда
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла);
		ПомещаемыеФайлы = Новый Массив;
		ПомещаемыеФайлы.Добавить(ОписаниеФайла);
		НачатьПомещениеФайлов(Новый ОписаниеОповещения(
				"ОбработатьФайлПослеПомещенияФайлов", ЭтотОбъект, Контекст,
				"ОбработатьФайлПослеОшибки", ЭтотОбъект),
			ПомещаемыеФайлы, , Ложь, Контекст.ИдентификаторФормы);
		Возврат;
	
	ИначеЕсли Действие = "ПолучитьСвойства" Тогда
		Контекст.Вставить("СвойстваДляПолучения", Контекст.ОписаниеДействия.Свойства);
		
	ИначеЕсли Действие = "УстановитьСвойства" Тогда
		Контекст.Вставить("СвойстваДляУстановки", Контекст.ОписаниеДействия.Свойства);
	КонецЕсли;
	
	Если ТипЗнч(Файл) = Тип("Файл") Тогда
		Контекст.Вставить("Файл", Файл);
		ОбработатьФайлПослеИнициализацииФайла(Файл, Контекст);
	Иначе
		Контекст.Вставить("Файл", Новый Файл);
		Контекст.Файл.НачатьИнициализацию(Новый ОписаниеОповещения(
			"ОбработатьФайлПослеИнициализацииФайла", ЭтотОбъект, Контекст,
			"ОбработатьФайлПослеОшибки", ЭтотОбъект), Файл);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбработатьФайл.
Процедура ОбработатьФайлПослеОшибки(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Контекст.РезультатДействий.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		Контекст.РезультатДействий.ОписаниеОшибки = ИнформацияОбОшибке;
	КонецЕсли;
	
	Если Контекст.ОписаниеДействия.Свойство("ЗаголовокОшибки") Тогда
		Контекст.РезультатДействий.ОписаниеОшибки = Контекст.ОписаниеДействия.ЗаголовокОшибки
			+ Символы.ПС + Контекст.РезультатДействий.ОписаниеОшибки;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Контекст.РезультатДействий);
	
КонецПроцедуры

// Продолжение процедуры ОбработатьФайл.
Процедура ОбработатьФайлПослеУдаленияФайлов(Контекст) Экспорт
	
	ОбработатьФайлЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ОбработатьФайл.
Процедура ОбработатьФайлПослеКопированияФайла(СкопированныйФайл, Контекст) Экспорт
	
	ОбработатьФайлЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ОбработатьФайл.
Процедура ОбработатьФайлПослеСозданияКаталога(Каталог, Контекст) Экспорт
	
	ОбработатьФайлЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ОбработатьФайл.
Процедура ОбработатьФайлПослеПолученияФайлов(ПолученныеФайлы, Контекст) Экспорт
	
	Если ТипЗнч(ПолученныеФайлы) <> Тип("Массив") Или ПолученныеФайлы.Количество() = 0 Тогда
		ОбработатьФайлПослеОшибки(НСтр("ru = 'Получение файла было отменено.'"), , Контекст);
		Возврат;
	КонецЕсли;
	
	ОбработатьФайлЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ОбработатьФайл.
Процедура ОбработатьФайлПослеПомещенияФайлов(ПомещенныеФайлы, Контекст) Экспорт
	
	Если ТипЗнч(ПомещенныеФайлы) <> Тип("Массив") Или ПомещенныеФайлы.Количество() = 0 Тогда
		ОбработатьФайлПослеОшибки(НСтр("ru = 'Помещение файла было отменено.'"), , Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.ОписаниеДействия.Вставить("Адрес", ПомещенныеФайлы[0].Хранение);
	
	ОбработатьФайлЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ОбработатьФайл.
Процедура ОбработатьФайлПослеИнициализацииФайла(Файл, Контекст) Экспорт
	
	Контекст.Вставить("Файл", Файл);
	Контекст.Результат.Вставить("Файл", Файл);
	ЗаполнитьЗначенияСвойств(Контекст.СвойстваДляПолучения, Файл);
	
	Контекст.Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения(
		"ОбработатьФайлПослеПроверкиСуществования", ЭтотОбъект, Контекст,
		"ОбработатьФайлПослеОшибки", ЭтотОбъект));
	
КонецПроцедуры

// Продолжение процедуры ОбработатьФайл.
Процедура ОбработатьФайлПослеПроверкиСуществования(Существует, Контекст) Экспорт
	
	Контекст.Результат.Вставить("Существует", Существует);
	
	Если Не Контекст.Результат.Существует Тогда
		ОбработатьФайлЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	Если Контекст.СвойстваДляПолучения.Количество() = 0 Тогда
		ОбработатьФайлПослеПроверкиЭтоФайл(Null, Контекст);
		
	ИначеЕсли Контекст.СвойстваДляПолучения.Свойство("ВремяИзменения") Тогда
		Контекст.Файл.НачатьПолучениеВремениИзменения(Новый ОписаниеОповещения(
			"ОбработатьФайлПослеПолученияВремениИзменения", ЭтотОбъект, Контекст,
			"ОбработатьФайлПослеОшибки", ЭтотОбъект));
	Иначе
		ОбработатьФайлПослеПолученияВремениИзменения(Null, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбработатьФайл.
Процедура ОбработатьФайлПослеПолученияВремениИзменения(ВремяИзменения, Контекст) Экспорт
	
	Если ВремяИзменения <> Null Тогда
		Контекст.СвойстваДляПолучения.ВремяИзменения = ВремяИзменения;
	КонецЕсли;
	
	Если Контекст.СвойстваДляПолучения.Свойство("УниверсальноеВремяИзменения") Тогда
		Контекст.Файл.НачатьПолучениеУниверсальногоВремениИзменения(Новый ОписаниеОповещения(
			"ОбработатьФайлПослеПолученияУниверсальногоВремениИзменения", ЭтотОбъект, Контекст,
			"ОбработатьФайлПослеОшибки", ЭтотОбъект));
	Иначе
		ОбработатьФайлПослеПолученияУниверсальногоВремениИзменения(Null, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбработатьФайл.
Процедура ОбработатьФайлПослеПолученияУниверсальногоВремениИзменения(УниверсальноеВремяИзменения, Контекст) Экспорт
	
	Если УниверсальноеВремяИзменения <> Null Тогда
		Контекст.СвойстваДляПолучения.УниверсальноеВремяИзменения = УниверсальноеВремяИзменения;
	КонецЕсли;
	
	Если Контекст.СвойстваДляПолучения.Свойство("ТолькоЧтение") Тогда
		Контекст.Файл.НачатьПолучениеТолькоЧтения(Новый ОписаниеОповещения(
			"ОбработатьФайлПослеПолученияТолькоЧтения", ЭтотОбъект, Контекст,
			"ОбработатьФайлПослеОшибки", ЭтотОбъект));
	Иначе
		ОбработатьФайлПослеПолученияТолькоЧтения(Null, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбработатьФайл.
Процедура ОбработатьФайлПослеПолученияТолькоЧтения(ТолькоЧтение, Контекст) Экспорт
	
	Если ТолькоЧтение <> Null Тогда
		Контекст.СвойстваДляПолучения.ТолькоЧтение = ТолькоЧтение;
	КонецЕсли;
	
	Если Контекст.СвойстваДляПолучения.Свойство("Невидимость") Тогда
		Контекст.Файл.НачатьПолучениеНевидимости(Новый ОписаниеОповещения(
			"ОбработатьФайлПослеПолученияНевидимости", ЭтотОбъект, Контекст,
			"ОбработатьФайлПослеОшибки", ЭтотОбъект));
	Иначе
		ОбработатьФайлПослеПолученияНевидимости(Null, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбработатьФайл.
Процедура ОбработатьФайлПослеПолученияНевидимости(Невидимость, Контекст) Экспорт
	
	Если Невидимость <> Null Тогда
		Контекст.СвойстваДляПолучения.Невидимость = Невидимость;
	КонецЕсли;
	
	Если Контекст.СвойстваДляПолучения.Свойство("Размер") Тогда
		Контекст.Файл.НачатьПолучениеРазмера(Новый ОписаниеОповещения(
			"ОбработатьФайлПослеПолученияРазмера", ЭтотОбъект, Контекст,
			"ОбработатьФайлПослеОшибки", ЭтотОбъект));
	Иначе
		ОбработатьФайлПослеПолученияРазмера(Null, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбработатьФайл.
Процедура ОбработатьФайлПослеПолученияРазмера(Размер, Контекст) Экспорт
	
	Если Размер <> Null Тогда
		Контекст.СвойстваДляПолучения.Размер = Размер;
	КонецЕсли;
	
	Если Контекст.СвойстваДляПолучения.Свойство("ЭтоКаталог") Тогда
		Контекст.Файл.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения(
			"ОбработатьФайлПослеПроверкиЭтоКаталог", ЭтотОбъект, Контекст,
			"ОбработатьФайлПослеОшибки", ЭтотОбъект));
	Иначе
		ОбработатьФайлПослеПроверкиЭтоКаталог(Null, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбработатьФайл.
Процедура ОбработатьФайлПослеПроверкиЭтоКаталог(ЭтоКаталог, Контекст) Экспорт
	
	Если ЭтоКаталог <> Null Тогда
		Контекст.СвойстваДляПолучения.ЭтоКаталог = ЭтоКаталог;
	КонецЕсли;
	
	Если Контекст.СвойстваДляПолучения.Свойство("ЭтоФайл") Тогда
		Контекст.Файл.НачатьПроверкуЭтоФайл(Новый ОписаниеОповещения(
			"ОбработатьФайлПослеПроверкиЭтоФайл", ЭтотОбъект, Контекст,
			"ОбработатьФайлПослеОшибки", ЭтотОбъект));
	Иначе
		ОбработатьФайлПослеПроверкиЭтоФайл(Null, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбработатьФайл.
Процедура ОбработатьФайлПослеПроверкиЭтоФайл(ЭтоФайл, Контекст) Экспорт
	
	Если ЭтоФайл <> Null Тогда
		Контекст.СвойстваДляПолучения.ЭтоФайл = ЭтоФайл;
	КонецЕсли;
	
	Если Контекст.СвойстваДляУстановки.Количество() = 0 Тогда
		ОбработатьФайлПослеУстановкиНевидимости(Контекст);
		
	ИначеЕсли Контекст.СвойстваДляУстановки.Свойство("ВремяИзменения") Тогда
		Контекст.Файл.НачатьУстановкуВремениИзменения(Новый ОписаниеОповещения(
			"ОбработатьФайлПослеУстановкиВремениИзменения", ЭтотОбъект, Контекст,
			"ОбработатьФайлПослеОшибки", ЭтотОбъект), Контекст.СвойстваДляУстановки.ВремяИзменения);
	Иначе
		ОбработатьФайлПослеУстановкиВремениИзменения(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбработатьФайл.
Процедура ОбработатьФайлПослеУстановкиВремениИзменения(Контекст) Экспорт
	
	Если Контекст.СвойстваДляУстановки.Свойство("УниверсальноеВремяИзменения") Тогда
		Контекст.Файл.НачатьУстановкуУниверсальногоВремениИзменения(Новый ОписаниеОповещения(
			"ОбработатьФайлПослеУстановкиУниверсальногоВремениИзменения", ЭтотОбъект, Контекст,
			"ОбработатьФайлПослеОшибки", ЭтотОбъект), Контекст.СвойстваДляУстановки.УниверсальноеВремяИзменения);
	Иначе
		ОбработатьФайлПослеУстановкиУниверсальногоВремениИзменения(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбработатьФайл.
Процедура ОбработатьФайлПослеУстановкиУниверсальногоВремениИзменения(Контекст) Экспорт
	
	Если Контекст.СвойстваДляУстановки.Свойство("ТолькоЧтение") Тогда
		Контекст.Файл.НачатьУстановкуТолькоЧтения(Новый ОписаниеОповещения(
			"ОбработатьФайлПослеУстановкиТолькоЧтения", ЭтотОбъект, Контекст,
			"ОбработатьФайлПослеОшибки", ЭтотОбъект), Контекст.СвойстваДляУстановки.ТолькоЧтение);
	Иначе
		ОбработатьФайлПослеУстановкиТолькоЧтения(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбработатьФайл.
Процедура ОбработатьФайлПослеУстановкиТолькоЧтения(Контекст) Экспорт
	
	Если Контекст.СвойстваДляУстановки.Свойство("Невидимость") Тогда
		Контекст.Файл.НачатьУстановкуНевидимости(Новый ОписаниеОповещения(
			"ОбработатьФайлПослеУстановкиНевидимости", ЭтотОбъект, Контекст,
			"ОбработатьФайлПослеОшибки", ЭтотОбъект), Контекст.СвойстваДляУстановки.Невидимость);
	Иначе
		ОбработатьФайлПослеУстановкиНевидимости(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбработатьФайл.
Процедура ОбработатьФайлПослеУстановкиНевидимости(Контекст) Экспорт
	
	ОбработатьФайлЦиклНачало(Контекст);
	
КонецПроцедуры

#Если НЕ ВебКлиент Тогда
// Извлекает текст из файла на диске на клиенте и помещает результат на сервер.
Процедура ИзвлечьТекстВерсии(ФайлИлиВерсияФайла,
                             АдресФайла,
                             Расширение,
                             УникальныйИдентификатор,
                             Кодировка = Неопределено) Экспорт
	
	ИмяФайлаСПутем = ПолучитьИмяВременногоФайла(Расширение);
	
	Если Не ПолучитьФайл(АдресФайла, ИмяФайлаСПутем, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	// Для варианта с хранением файлов на диске (на сервере)
	// удаление Файла из временного хранилища после получения.
	Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
		УдалитьИзВременногоХранилища(АдресФайла);
	КонецЕсли;
	
	РезультатИзвлечения = "НеИзвлечен";
	АдресВременногоХранилищаТекста = "";
	
	Текст = "";
	Если ИмяФайлаСПутем <> "" Тогда
		
		// Извлечение текста из файла.
		Отказ = Ложь;
		Текст = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекст(ИмяФайлаСПутем, Отказ, Кодировка);
		
		Если Отказ = Ложь Тогда
			РезультатИзвлечения = "Извлечен";
			
			Если Не ПустаяСтрока(Текст) Тогда
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
				ТекстовыйФайл = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
				ТекстовыйФайл.Записать(Текст);
				ТекстовыйФайл.Закрыть();
				
				РезультатЗагрузки = ПоместитьФайлСДискаВоВременноеХранилище(ИмяВременногоФайла, , УникальныйИдентификатор);
				Если РезультатЗагрузки <> Неопределено Тогда
					АдресВременногоХранилищаТекста = РезультатЗагрузки;
				КонецЕсли;
				
				УдалитьФайлы(ИмяВременногоФайла);
			КонецЕсли;
		Иначе
			// Когда Текст извлечь "некому" - это нормальный случай,
			// сообщение об ошибке не формируется.
			РезультатИзвлечения = "ИзвлечьНеУдалось";
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьФайлы(ИмяФайлаСПутем);
	
	ФайловыеФункцииСлужебныйВызовСервера.ЗаписатьРезультатИзвлеченияТекста(
		ФайлИлиВерсияФайла, РезультатИзвлечения, АдресВременногоХранилищаТекста);
	
КонецПроцедуры
#КонецЕсли

// Загружает файл с клиента во временное хранилище на сервере. Не работает без расширения работы с файлами.
Функция ПоместитьФайлСДискаВоВременноеХранилище(ПолноеИмяФайла, АдресФайла = "", УникальныйИдентификатор = Неопределено) Экспорт
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЧтоЗагрузить = Новый Массив;
	ЧтоЗагрузить.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, АдресФайла));
	РезультатЗагрузки = Новый Массив;
	ФайлЗагружен = ПоместитьФайлы(ЧтоЗагрузить, РезультатЗагрузки, , Ложь, УникальныйИдентификатор);
	Если Не ФайлЗагружен Или РезультатЗагрузки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат РезультатЗагрузки[0].Хранение;
КонецФункции

// На основе переданного пути к файлу на диске создает Файл его и открывает карточку.
Процедура ДобавитьИзФайловойСистемыСРасширением(ПараметрыВыполнения) Экспорт
	
	Если ПараметрыВыполнения.ЭтоФайл И ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиСлужебныйКлиент");
		МодульРаботаСФайламиСлужебныйКлиент.ДобавитьИзФайловойСистемыСРасширением(ПараметрыВыполнения);
	ИначеЕсли Не ПараметрыВыполнения.ЭтоФайл И ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		МодульПрисоединенныеФайлыСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПрисоединенныеФайлыСлужебныйКлиент");
		МодульПрисоединенныеФайлыСлужебныйКлиент.ДобавитьФайлыРасширениеПредложено(Истина, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// На основе переданного пути к файлу на диске создает Файл и открывает карточку.
Функция ДобавитьИзФайловойСистемыСРасширениемСинхронно(ПараметрыВыполнения) Экспорт
	
	Если ПараметрыВыполнения.ЭтоФайл И ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиСлужебныйКлиент");
		Возврат МодульРаботаСФайламиСлужебныйКлиент.ДобавитьИзФайловойСистемыСРасширениемСинхронно(ПараметрыВыполнения);
	ИначеЕсли Не ПараметрыВыполнения.ЭтоФайл И ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		МодульПрисоединенныеФайлыСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПрисоединенныеФайлыСлужебныйКлиент");
		МодульПрисоединенныеФайлыСлужебныйКлиент.ДобавитьФайлыРасширениеПредложено(Истина, ПараметрыВыполнения);
		
		Результат = Новый Структура;
		Результат.Вставить("ФайлДобавлен", Истина);
		Результат.Вставить("ФайлСсылка",   Неопределено);
		Результат.Вставить("ТекстОшибки",  "");
		
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функция для работы со сканером.

// Инициализация компоненты сканирования.
Функция ПроинициализироватьКомпоненту() Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяПараметра = "СтандартныеПодсистемы.КомпонентаTwain";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		КодВозврата = ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаTWAIN", "twain", ТипВнешнейКомпоненты.Native);
		Если Не КодВозврата Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПараметрыПриложения.Вставить(ИмяПараметра, Новый("AddIn.twain.AddInNativeExtension"));
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Установка компоненты сканирования.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//
// Возвращаемое значение:
//   Булево - Успешно ли выполнена операция.
//
// См. также:
//   Переменную глобального контекста КомпонентаTwain.
//
Процедура УстановитьКомпоненту(ОбработчикРезультата) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		ВернутьРезультат(ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ПроинициализироватьКомпоненту() Тогда
		Состояние(НСтр("ru = 'Компонента сканирования уже установлена.'"));
		ВернутьРезультат(ОбработчикРезультата, Истина);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	Обработчик = Новый ОписаниеОповещения("УстановитьКомпонентуЗавершение", ЭтотОбъект, ПараметрыВыполнения);
	НачатьУстановкуВнешнейКомпоненты(Обработчик, "ОбщийМакет.КомпонентаTWAIN");
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура УстановитьКомпонентуЗавершение(ПараметрыВыполнения) Экспорт
	
	КомпонентаПодключена = ПроинициализироватьКомпоненту();
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, КомпонентаПодключена);
	
КонецПроцедуры

// Возвращает устройства TWAIN (массив строк).
Функция ПолучитьУстройства() Экспорт
	
	Массив = Новый Массив;
	
	Если Не ПроинициализироватьКомпоненту() Тогда
		Возврат Массив;
	КонецЕсли;
	
	СтрокаУстройств = ПараметрыПриложения["СтандартныеПодсистемы.КомпонентаTwain"].ПолучитьУстройства();
	
	Для Индекс = 1 По СтрЧислоСтрок(СтрокаУстройств) Цикл
		Строка = СтрПолучитьСтроку(СтрокаУстройств, Индекс);
		Массив.Добавить(Строка);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

// Возвращает настройку сканера по имени.
//
// Параметры:
//   ИмяУстройства - Строка - Имя сканера.
//   ИмяНастройки  - Строка - Имя настройки,
//       например "XRESOLUTION", или "PIXELTYPE", или "ROTATION", или "SUPPORTEDSIZES".
//
// Возвращаемое значение:
//   Число - Значение настройки сканера.
//
Функция ПолучитьНастройку(ИмяУстройства, ИмяНастройки) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		Возврат -1;
	КонецЕсли;
	
	Попытка
		Возврат ПараметрыПриложения["СтандартныеПодсистемы.КомпонентаTwain"].ПолучитьНастройку(ИмяУстройства, ИмяНастройки);
	Исключение
		Возврат -1;
	КонецПопытки;
	
КонецФункции

// Подготовка обработчика асинхронного диалога.
Функция ПодготовитьОбработчикДляДиалога(ОбработчикИлиСтруктура)
	
	Если ТипЗнч(ОбработчикИлиСтруктура) = Тип("Структура") Тогда
		// Рекурсивная регистрация всех обработчиков вызывающего кода.
		Если ОбработчикИлиСтруктура.Свойство("ОбработчикРезультата") Тогда
			ОбработчикИлиСтруктура.ОбработчикРезультата = ПодготовитьОбработчикДляДиалога(ОбработчикИлиСтруктура.ОбработчикРезультата);
		КонецЕсли;
		Если ОбработчикИлиСтруктура.Свойство("АсинхронныйДиалог") Тогда
			// Регистрация открытого диалога.
			ОбработчикИлиСтруктура.АсинхронныйДиалог.Открыт = Истина;
			// Формирование обработчика (при этом фиксируется вся структура параметров).
			Обработчик = Новый ОписаниеОповещения(
				ОбработчикИлиСтруктура.АсинхронныйДиалог.ИмяПроцедуры,
				ОбработчикИлиСтруктура.АсинхронныйДиалог.Модуль,
				ОбработчикИлиСтруктура);
		Иначе
			Обработчик = Неопределено;
		КонецЕсли;
	Иначе
		Обработчик = ОбработчикИлиСтруктура;
	КонецЕсли;
	
	Возврат Обработчик;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры для поддержки асинхронной модели.
//
// Общее описание параметров:
//   ОбработчикРезультата - Процедура-обработчик асинхронного метода.
//       - Неопределено - Обработка не требуется.
//       - ОписаниеОповещения - Описание процедуры-обработчика.
//   Результат - Произвольный - Значение, которое необходимо вернуть в ОбработчикРезультата.

// Показывает текст и вызывает обработчик с заданным результатом.
Процедура ВернутьРезультатПослеПоказаПредупреждения(ОбработчикРезультата, ТекстПредупреждения, Результат)
	Если ТипЗнч(ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
		ПараметрыОбработчика.Вставить("Результат",             Результат);
		Обработчик = Новый ОписаниеОповещения("ВернутьРезультатПослеЗакрытияПростогоДиалога", ЭтотОбъект, ПараметрыОбработчика);
		ПоказатьПредупреждение(Обработчик, ТекстПредупреждения);
	Иначе
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
КонецПроцедуры

// Обработчик результата работы процедуры ВернутьРезультатПослеПоказаПредупреждения.
Процедура ВернутьРезультатПослеЗакрытияПростогоДиалога(Структура)
	ВыполнитьОбработкуОповещения(Структура.ОбработчикРезультата, Структура.Результат);
КонецПроцедуры

// Возвращает результат прямого вызова, когда не потребовалось открывать диалог.
Процедура ВернутьРезультат(ОбработчикРезультата, Результат)
	Если ТипЗнч(ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОбработчикРезультата, Результат);
	КонецЕсли;
КонецПроцедуры

// Устанавливает обработчик закрытия окна формы, полученной при помощи метода ПолучитьФорму.
Процедура УстановитьОповещениеФормы(Форма, ОбработчикРезультата)
	Если ТипЗнч(ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		Форма.ОписаниеОповещенияОЗакрытии = ОбработчикРезультата;
	КонецЕсли;
КонецПроцедуры

Функция КлиентПоддерживаетСинхронныеВызовы()
	
#Если ВебКлиент Тогда
	// В Firefox для платформы 8.3.7 и Chrome синхронные методы не поддерживаются.
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ИнформацияПрограммыМассив = СтрРазделить(СистемнаяИнформация.ИнформацияПрограммыПросмотра, " ", Ложь);
	
	Для Каждого ИнформацияПрограммы Из ИнформацияПрограммыМассив Цикл
		Если СтрНайти(ИнформацияПрограммы, "Chrome") > 0 Тогда
			Возврат Ложь;
		ИначеЕсли СтрНайти(ИнформацияПрограммы, "Firefox") > 0 И СтрНайти(СистемнаяИнформация.ВерсияПриложения, "8.3.7.") > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
#КонецЕсли
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти
