////////////////////////////////////////////////////////////////////////////////
// Подсистема "Присоединенные файлы".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Продолжение процедуры ПрисоединенныеФайлыКлиент.ДобавитьФайлы.
Процедура ДобавитьФайлыРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	ВладелецФайла = ДополнительныеПараметры.ВладелецФайла;
	ИдентификаторФормы = ДополнительныеПараметры.ИдентификаторФормы;
	
	Если Не ДополнительныеПараметры.Свойство("Фильтр") Тогда
		ДополнительныеПараметры.Вставить("Фильтр","");
	КонецЕсли;
	
	Если РасширениеРаботыСФайламиПодключено Тогда
		
		Фильтр = ДополнительныеПараметры.Фильтр;
		ОткрыватьКарточкуПослеСозданияИзФайла = Ложь;
		Если ДополнительныеПараметры.Свойство("НеОткрыватьКарточкуПослеСозданияИзФайла") Тогда
			ОткрыватьКарточкуПослеСозданияИзФайла = Не ДополнительныеПараметры.НеОткрыватьКарточкуПослеСозданияИзФайла;
		КонецЕсли;
		
		ВыбранныеФайлы = Новый Массив;
		
		Если Не ДополнительныеПараметры.Свойство("ПолноеИмяФайла") Тогда
			ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ВыборФайла.МножественныйВыбор = Истина;
			ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
			ВыборФайла.Фильтр = ?(ЗначениеЗаполнено(Фильтр), Фильтр, НСтр("ru = 'Все файлы'") + " (*.*)|*.*");
			Если ВыборФайла.Выбрать() Тогда
				ВыбранныеФайлы = ВыборФайла.ВыбранныеФайлы;
			КонецЕсли;
		Иначе
			ВыбранныеФайлы.Добавить(ДополнительныеПараметры.ПолноеИмяФайла);
		КонецЕсли;
		
		ИмяСоздаваемогоФайла = "";
		Если ДополнительныеПараметры.Свойство("ИмяСоздаваемогоФайла") Тогда
			ИмяСоздаваемогоФайла = ДополнительныеПараметры.ИмяСоздаваемогоФайла;
		КонецЕсли;
		
		Если ВыбранныеФайлы.Количество() > 0  Тогда
			ПрисоединенныеФайлыМассив = Новый Массив;
			ПоместитьВыбранныеФайлыВХранилище(
				ВыбранныеФайлы,
				ВладелецФайла,
				ПрисоединенныеФайлыМассив,
				ИдентификаторФормы,
				ИмяСоздаваемогоФайла);
			
			Если ПрисоединенныеФайлыМассив.Количество() = 1 И ОткрыватьКарточкуПослеСозданияИзФайла Тогда
				ПрисоединенныйФайл = ПрисоединенныеФайлыМассив[0];
				
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Создание:'"),
					ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл),
					ПрисоединенныйФайл,
					БиблиотекаКартинок.Информация32);
				
				ПараметрыФормы = Новый Структура("ПрисоединенныйФайл, ЭтоНовый", ПрисоединенныйФайл, Истина);
				ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыФормы, , ПрисоединенныйФайл);
			КонецЕсли;
			
			Если ПрисоединенныеФайлыМассив.Количество() > 0 Тогда
				ОповеститьОбИзменении(ПрисоединенныеФайлыМассив[0]);
				Оповестить("Запись_ПрисоединенныйФайл",
					Новый Структура("ЭтоНовый, ВладелецФайла", Истина, ВладелецФайла), ПрисоединенныеФайлыМассив);
			КонецЕсли;
		
		КонецЕсли;
		
	Иначе // Если веб-клиент без подключенного расширения.
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьФайлыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоместитьВыбранныеФайлыВХранилищеВеб(ОписаниеОповещения, ВладелецФайла, ИдентификаторФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// См. одноименную функцию в общем модуле ПрисоединенныеФайлыКлиент.
Функция ПолучитьФайлВРабочийКаталог(Знач АдресДвоичныхДанныхФайла,
                                    Знач ОтносительныйПуть,
                                    Знач ДатаМодификацииУниверсальная,
                                    Знач ИмяФайла,
                                    Знач РабочийКаталогПользователя,
                                    ПолноеИмяФайлаНаКлиенте)
	
	Если РабочийКаталогПользователя = Неопределено
	 ИЛИ ПустаяСтрока(РабочийКаталогПользователя) Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	КаталогСохранения = РабочийКаталогПользователя + ОтносительныйПуть;
	
	Попытка
		СоздатьКаталог(КаталогСохранения);
	Исключение
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОбОшибке = НСтр("ru = 'Ошибка создания каталога на диске:'") + " " + СообщениеОбОшибке;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		Возврат Ложь;
	КонецПопытки;
	
	Файл = Новый Файл(КаталогСохранения + ИмяФайла);
	Если Файл.Существует() Тогда
		Файл.УстановитьТолькоЧтение(Ложь);
		УдалитьФайлы(КаталогСохранения + ИмяФайла);
	КонецЕсли;
	
	ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(КаталогСохранения + ИмяФайла, АдресДвоичныхДанныхФайла);
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
	
	ПолученныеФайлы = Новый Массив;
	
	Если ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, , Ложь) Тогда
		ПолноеИмяФайлаНаКлиенте = ПолученныеФайлы[0].Имя;
		Файл = Новый Файл(ПолноеИмяФайлаНаКлиенте);
		Файл.УстановитьУниверсальноеВремяИзменения(ДатаМодификацииУниверсальная);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// См. одноименную функцию в общем модуле ПрисоединенныеФайлыКлиент.
Функция ПоместитьФайлВХранилище(Знач ПутьКФайлу, Знач ИдентификаторФормы)
	
	Результат = Новый Структура;
	Результат.Вставить("ФайлПомещенВХранилище", Ложь);
	
	Файл = Новый Файл(ПутьКФайлу);
	ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьВозможностьЗагрузкиФайла(Файл);
	
	АдресВременногоХранилищаТекста = "";
	Если Не ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами().ИзвлекатьТекстыФайловНаСервере Тогда
		АдресВременногоХранилищаТекста = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(ПутьКФайлу, ИдентификаторФормы);
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПутьКФайлу));
	ПомещенныеФайлы = Новый Массив;
	
	Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ИдентификаторФормы) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при помещении файла
				           |""%1""
				           |во временное хранилище.'"),
				ПутьКФайлу) );
		Возврат Результат;
	КонецЕсли;
	
	Результат.Вставить("ФайлПомещенВХранилище", Истина);
	Результат.Вставить("ДатаМодификацииУниверсальная",   Файл.ПолучитьУниверсальноеВремяИзменения());
	Результат.Вставить("АдресФайлаВоВременномХранилище", ПомещенныеФайлы[0].Хранение);
	Результат.Вставить("АдресВременногоХранилищаТекста", АдресВременногоХранилищаТекста);
	Результат.Вставить("Расширение",                     Прав(Файл.Расширение, СтрДлина(Файл.Расширение)-1));
	
	Возврат Результат;
	
КонецФункции

// Добавляет файлы перетаскиванием в список файлов.
//
// Параметры:
//  ВладелецФайла      - Ссылка - владелец файла.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//  МассивИменФайлов   - Массив Строк - путей к файлам.
//
Процедура ДобавитьФайлыПеретаскиванием(Знач ВладелецФайла, Знач ИдентификаторФормы, Знач МассивИменФайлов) Экспорт
	
	ПрисоединенныеФайлыМассив = Новый Массив;
	ПоместитьВыбранныеФайлыВХранилище(
		МассивИменФайлов,
		ВладелецФайла,
		ПрисоединенныеФайлыМассив,
		ИдентификаторФормы);
	
	Если ПрисоединенныеФайлыМассив.Количество() = 1 Тогда
		ПрисоединенныйФайл = ПрисоединенныеФайлыМассив[0];
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание'"),
			ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл),
			ПрисоединенныйФайл,
			БиблиотекаКартинок.Информация32);
		
		ПараметрыФормы = Новый Структура("ПрисоединенныйФайл, ЭтоНовый", ПрисоединенныйФайл, Истина);
		ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыФормы, , ПрисоединенныйФайл);
	КонецЕсли;
	
	Если ПрисоединенныеФайлыМассив.Количество() > 0 Тогда
		ОповеститьОбИзменении(ПрисоединенныеФайлыМассив[0]);
		Оповестить("Запись_ПрисоединенныйФайл",
			Новый Структура("ЭтоНовый, ВладелецФайла", Истина, ВладелецФайла), ПрисоединенныеФайлыМассив);
	КонецЕсли;
	
КонецПроцедуры

// Помещает файл с диска в хранилище присоединенных файлов (веб-клиент).
// 
// Параметры:
//  ОбработчикРезультата    - ОписаниеОповещения - процедура, в которую необходимо передать управление при завершении.
//                            Параметры вызываемой процедуры:
//                             ПрисоединенныйФайл      - Ссылка, Неопределено - ссылка на добавленный файл, либо
//                                                       Неопределено, если файл не был помещен;
//                             ДополнительныеПараметры - Произвольный - значение, которое было указано при создании
//                                                                      объекта оповещения.
//  ВладелецФайла           - Ссылка на владельца файла.
//  НастройкиРаботыСФайлами - Структура.
//  ИдентификаторФормы      - УникальныйИдентификатор формы.
//
Процедура ПоместитьВыбранныеФайлыВХранилищеВеб(ОбработчикРезультата, Знач ВладелецФайла, Знач ИдентификаторФормы)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВладелецФайла", ВладелецФайла);
	Параметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоместитьВыбранныеФайлыВХранилищеВебЗавершение", ЭтотОбъект, Параметры);
	НачатьПомещениеФайла(ОписаниеОповещения, , ,Истина, ИдентификаторФормы);
	
КонецПроцедуры

// Продолжение процедуры ПоместитьВыбранныеФайлыВХранилищеВеб.
Процедура ПоместитьВыбранныеФайлыВХранилищеВебЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	АдресВременногоХранилищаФайла = Адрес;
	ИмяФайла = ВыбранноеИмяФайла;
	ВладелецФайла = ДополнительныеПараметры.ВладелецФайла;
	
	СтруктураПути = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыбранноеИмяФайла);
	
	Если Не ПустаяСтрока(СтруктураПути.Расширение) Тогда
		Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураПути.Расширение);
		ИмяБезРасширения = СтруктураПути.ИмяБезРасширения;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при помещении файла
			           |""%1""
			           |во временное хранилище.'"),
			ИмяФайла);
	КонецЕсли;
	
	ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(Расширение);
	
	// Создание карточки Файла в базе данных.
	ПрисоединенныйФайл = ПрисоединенныеФайлыСлужебныйВызовСервера.ДобавитьФайл(
		ВладелецФайла,
		ИмяБезРасширения,
		Расширение,
		,
		,
		АдресВременногоХранилищаФайла,
		"");
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, ПрисоединенныйФайл);
	
КонецПроцедуры

// Помещает отредактированные файлы в хранилище.
// Используется, как обработчик команды окончания редактирования файлов.
//
// Параметры:
//  ОбработчикРезультата    - ОписаниеОповещения - процедура, в которую необходимо передать управление при завершении.
//                            Параметры вызываемой процедуры:
//                             ИнформацияОФайле - Структура, Неопределено - информация о помещенном файле. Если
//                                                помещение не было выполнено, то возвращается Неопределено;
//                             ДополнительныеПараметры - Произвольный - значение, которое было указано при создании
//                                                                      объекта оповещения.
//  ДанныеФайла        - Структура с данными файла.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
Процедура ПоместитьРедактируемыйФайлНаДискеВХранилище(ОбработчикРезультата, Знач ДанныеФайла, Знач ИдентификаторФормы) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	Параметры.Вставить("ДанныеФайла", ДанныеФайла);
	Параметры.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоместитьРедактируемыйФайлНаДискеВХранилищеРасширениеПредложено", ЭтотОбъект, Параметры);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

// Продолжение процедуры ПоместитьРедактируемыйФайлНаДискеВХранилище.
Процедура ПоместитьРедактируемыйФайлНаДискеВХранилищеРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	ИдентификаторФормы = ДополнительныеПараметры.ИдентификаторФормы;
	
	Если РасширениеРаботыСФайламиПодключено Тогда
		РабочийКаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		ПолноеИмяФайлаНаКлиенте = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		
		ИнформацияОФайле = Неопределено;
		Файл = Новый Файл(ПолноеИмяФайлаНаКлиенте);
		Если Файл.Существует() Тогда
			ИнформацияОФайле = ПоместитьФайлВХранилище(ПолноеИмяФайлаНаКлиенте, ИдентификаторФормы);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Файл не найден в рабочем каталоге.'"));
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, ИнформацияОФайле);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоместитьРедактируемыйФайлНаДискеВХранилищеВыполненоПомещение", ЭтотОбъект, ДополнительныеПараметры);
		ПоместитьФайлНаДискеВХранилищеВеб(ОписаниеОповещения, ДанныеФайла, ИдентификаторФормы);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПоместитьРедактируемыйФайлНаДискеВХранилище.
Процедура ПоместитьРедактируемыйФайлНаДискеВХранилищеВыполненоПомещение(ИнформацияОФайле, ДополнительныеПараметры) Экспорт
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	Если ИнформацияОФайле = Неопределено Или ДанныеФайла.ИмяФайла = ИнформацияОФайле.ИмяФайла Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, ИнформацияОФайле);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Имя выбранного файла
		           |""%1""
		           |отличается от имени файла в хранилище
		           |""%2"".
		           |
		           |Продолжить?'"),
		ИнформацияОФайле.ИмяФайла,
		ДанныеФайла.ИмяФайла);
		
	ДополнительныеПараметры.Вставить("ИнформацияОФайле", ИнформацияОФайле);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоместитьРедактируемыйФайлНаДискеВХранилищеОтветПолучен", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

// Продолжение процедуры ПоместитьРедактируемыйФайлНаДискеВХранилище.
Процедура ПоместитьРедактируемыйФайлНаДискеВХранилищеОтветПолучен(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Результат = Неопределено;
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Результат = ДополнительныеПараметры.ИнформацияОФайле;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Результат);
КонецПроцедуры

// Выбирает файл с диска и помещает его во временное хранилище на сервере.
//
// Параметры:
//  ОбработчикРезультата    - ОписаниеОповещения - процедура, в которую необходимо передать управление при завершении.
//                            Параметры вызываемой процедуры:
//                             ИнформацияОФайле - Структура, Неопределено - информация о помещенном файле. Если
//                                                помещение не было выполнено, то возвращается Неопределено;
//                             ДополнительныеПараметры - Произвольный - значение, которое было указано при создании
//                                                                      объекта оповещения.
//  ДанныеФайла        - Структура с данными файла.
//  ИнформацияОФайле   - Структура (возвращаемое значение) - информация о файле.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
Процедура ВыбратьФайлНаДискеИПоместитьВХранилище(ОбработчикРезультата, Знач ДанныеФайла, Знач ИдентификаторФормы) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	Параметры.Вставить("ДанныеФайла", ДанныеФайла);
	Параметры.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьФайлНаДискеИПоместитьВХранилищеРасширениеПредложено", ЭтотОбъект, Параметры);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

// Продолжение процедуры ВыбратьФайлНаДискеИПоместитьВХранилище.
Процедура ВыбратьФайлНаДискеИПоместитьВХранилищеРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	ИдентификаторФормы = ДополнительныеПараметры.ИдентификаторФормы;
	
	Если РасширениеРаботыСФайламиПодключено Тогда
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
		ВыборФайла.Расширение = ДанныеФайла.Расширение;
		ВыборФайла.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Все файлы (*.%1)|*.%1'"), ДанныеФайла.Расширение);
		
		ИнформацияОФайле = Неопределено;
		Если ВыборФайла.Выбрать() Тогда
			ИнформацияОФайле = ПоместитьФайлВХранилище(ВыборФайла.ПолноеИмяФайла, ИдентификаторФормы);
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, ИнформацияОФайле);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьФайлНаДискеИПоместитьВХранилищеВыполненоПомещение", ЭтотОбъект, ДополнительныеПараметры);
		ПоместитьФайлНаДискеВХранилищеВеб(ОписаниеОповещения, ДанныеФайла, ИдентификаторФормы);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ВыбратьФайлНаДискеИПоместитьВХранилище.
Процедура ВыбратьФайлНаДискеИПоместитьВХранилищеВыполненоПомещение(ИнформацияОФайле, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, ИнформацияОФайле);
	
КонецПроцедуры

// Помещает файл с диска клиента во временное хранилище.
//  Аналог функции ПоместитьФайлНаДискеВХранилище
// для веб-клиента без расширения для работы с файлами.
//
// Параметры:
//  ОбработчикРезультата    - ОписаниеОповещения - процедура, в которую необходимо передать управление при завершении.
//                            Параметры вызываемой процедуры:
//                             ИнформацияОФайле - Структура, Неопределено - информация о помещенном файле. Если
//                                                помещение не было выполнено, то возвращается Неопределено;
//                             ДополнительныеПараметры - Произвольный - значение, которое было указано при создании
//                                                                      объекта оповещения.
//  ДанныеФайла             - Структура с данными файла.
//  ИнформацияОФайле        - Структура (возвращаемое значение) с информацией о файле.
//  ИдентификаторФормы      - УникальныйИдентификатор формы.
//
Процедура ПоместитьФайлНаДискеВХранилищеВеб(ОбработчикРезультата, Знач ДанныеФайла, Знач ИдентификаторФормы)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоместитьФайлНаДискеВХранилищеВебВыполненоПомещение", ЭтотОбъект, Параметры);
	НачатьПомещениеФайла(ОписаниеОповещения, , ДанныеФайла.ИмяФайла, Истина, ИдентификаторФормы);
	
КонецПроцедуры

// Продолжение процедуры ПоместитьФайлНаДискеВХранилищеВеб.
Процедура ПоместитьФайлНаДискеВХранилищеВебВыполненоПомещение(Результат, АдресВременногоХранилищаФайла, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	СтруктураПути = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыбранноеИмяФайла);
	
	Если Не ПустаяСтрока(СтруктураПути.Расширение) Тогда
		НовоеИмя = СтруктураПути.ИмяБезРасширения;
		НовоеРасширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураПути.Расширение);
		ИмяФайла = НовоеИмя + "." + НовоеРасширение;
	ИначеЕсли Не ПустаяСтрока(СтруктураПути.ИмяБезРасширения) Тогда
		НовоеИмя = СтруктураПути.ИмяБезРасширения;
		НовоеРасширение = "";
		ИмяФайла = НовоеИмя;
	КонецЕсли;
	
	ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(НовоеРасширение);
	
	ИнформацияОФайле = Новый Структура;
	ИнформацияОФайле.Вставить("ФайлПомещенВХранилище", Истина);
	ИнформацияОФайле.Вставить("ДатаМодификацииУниверсальная",   Неопределено);
	ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресВременногоХранилищаФайла);
	ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
	ИнформацияОФайле.Вставить("ИмяФайла",                       ИмяФайла);
	ИнформацияОФайле.Вставить("Расширение",                     НовоеРасширение);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, ИнформацияОФайле);
	
КонецПроцедуры

// Открывает каталог с файлом (при необходимости получает файл из хранилища).
// Используется, как обработчик команды открытия каталога с файлом.
//
// Параметры:
//  ДанныеФайла - Структура с данными файла.
//
Процедура ОткрытьКаталогСФайлом(Знач ДанныеФайла) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДанныеФайла", ДанныеФайла);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьКаталогСФайломРасширениеПредложено", ЭтотОбъект, Параметры);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

// Продолжение процедуры ОткрытьКаталогСФайлом.
Процедура ОткрытьКаталогСФайломРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	Перем ПолноеИмяФайла;
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;

	Если РасширениеРаботыСФайламиПодключено Тогда
		РабочийКаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		Если ПустаяСтрока(РабочийКаталогПользователя) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не задан рабочий каталог'"));
			Возврат;
		КонецЕсли;
		
		ПолныйПуть = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		Файл = Новый Файл(ПолныйПуть);
		Если Не Файл.Существует() Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Каталог файла не существует. Возможно, на данном компьютере файл ""%1"" еще не открывался.
				|Сохранить файл на компьютер и открыть его каталог?'"),
				Файл.Имя);
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить(КодВозвратаДиалога.Да, НСтр("ru= 'Сохранить и открыть каталог'"));
			КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет, НСтр("ru= 'Отмена'"));
			ДополнительныеПараметры.Вставить("РабочийКаталогПользователя", РабочийКаталогПользователя);
			ДополнительныеПараметры.Вставить("ПолныйПуть", ПолныйПуть);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьКаталогСФайломОтветПолучен", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса);
		КонецЕсли;
		
		ФайловыеФункцииСлужебныйКлиент.ОткрытьПроводникСФайлом(ПолныйПуть);
	Иначе
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОткрытьКаталогСФайлом.
Процедура ОткрытьКаталогСФайломОтветПолучен(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	РабочийКаталогПользователя = ДополнительныеПараметры.РабочийКаталогПользователя;
	ПолныйПуть = ДополнительныеПараметры.ПолныйПуть;
	
	ПолноеИмяФайлаНаКлиенте = "";
	ПолучитьФайлВРабочийКаталог(
		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
		ДанныеФайла.ОтносительныйПуть,
		ДанныеФайла.ДатаМодификацииУниверсальная,
		ДанныеФайла.ИмяФайла,
		РабочийКаталогПользователя,
		ПолноеИмяФайлаНаКлиенте);
		
	ФайловыеФункцииСлужебныйКлиент.ОткрытьПроводникСФайлом(ПолныйПуть);
	
КонецПроцедуры


// См. одноименную процедуру в общем модуле ПрисоединенныеФайлыКлиент.
Процедура ПоместитьПрисоединенныйФайл(Оповещение, ПрисоединенныйФайл, ИдентификаторФормы, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение",                Оповещение);
	Контекст.Вставить("ПрисоединенныйФайл",        ПрисоединенныйФайл);
	Контекст.Вставить("ИдентификаторФормы",        ИдентификаторФормы);
	Контекст.Вставить("ДанныеФайла",               Неопределено);
	Контекст.Вставить("ПолноеИмяПомещаемогоФайла", Неопределено);
	ДополнительныеПараметры.Свойство("ДанныеФайла",    Контекст.ДанныеФайла);
	ДополнительныеПараметры.Свойство("ПолноеИмяФайла", Контекст.ПолноеИмяПомещаемогоФайла);
	
	Если ТипЗнч(Контекст.ДанныеФайла) <> Тип("Структура") Тогда
		Контекст.Вставить("ДанныеФайла", ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(
			Контекст.ПрисоединенныйФайл, Контекст.ИдентификаторФормы, Ложь));
	КонецЕсли;
	
	Контекст.Вставить("ЗаголовокОшибки",
		НСтр("ru = 'Не удалось поместить файл с компьютера в хранилище файлов по причине:'") + Символы.ПС);
	
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Новый ОписаниеОповещения(
		"ПоместитьПрисоединенныйФайлПослеПодключенияРасширения", ЭтотОбъект, Контекст),, Ложь);
	
КонецПроцедуры

// Продолжение процедуры ПоместитьПрисоединенныйФайл.
Процедура ПоместитьПрисоединенныйФайлПослеПодключенияРасширения(РасширениеПодключено, Контекст) Экспорт
	
	Если Не РасширениеПодключено Тогда
		Результат = Новый Структура;
		Результат.Вставить("ОписаниеОшибки", Контекст.ЗаголовокОшибки
			+ НСтр("ru = 'В обозреватель интернет не установлено расширение для работы с файлами.'"));
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииСлужебныйКлиент.ПолучитьРабочийКаталогПользователя(Новый ОписаниеОповещения(
		"ПоместитьПрисоединенныйФайлПослеПолученияРабочегоКаталога", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры ПоместитьПрисоединенныйФайл.
Процедура ПоместитьПрисоединенныйФайлПослеПолученияРабочегоКаталога(Результат, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		Результат = Новый Структура;
		Результат.Вставить("ОписаниеОшибки", Контекст.ЗаголовокОшибки + Результат.ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("РабочийКаталогПользователя", Результат.Каталог);
	Контекст.Вставить("КаталогФайла", Контекст.РабочийКаталогПользователя + Контекст.ДанныеФайла.ОтносительныйПуть);
	Контекст.Вставить("ПолноеИмяФайла", Контекст.КаталогФайла + Контекст.ДанныеФайла.ИмяФайла);
	
	Если Не ЗначениеЗаполнено(Контекст.ПолноеИмяПомещаемогоФайла) Тогда
		Контекст.ПолноеИмяПомещаемогоФайла = Контекст.ПолноеИмяФайла;
	КонецЕсли;
	
	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(Контекст.ПолноеИмяФайла);
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(ОписаниеФайла);
	
	ДействияСФайлом = Новый Массив;
	
	Вызовы = Новый Массив;
	
	Если Контекст.ПолноеИмяФайла <> Контекст.ПолноеИмяПомещаемогоФайла Тогда
		Действие = Новый Структура;
		Действие.Вставить("Действие", "СоздатьКаталог");
		Действие.Вставить("Файл", Контекст.КаталогФайла);
		Действие.Вставить("ЗаголовокОшибки", Контекст.ЗаголовокОшибки
			+ НСтр("ru = 'Создание каталога не выполнено по причине:'"));
		ДействияСФайлом.Добавить(Действие);
		
		Действие = Новый Структура;
		Действие.Вставить("Действие", "УстановитьСвойства");
		Действие.Вставить("Файл",  Контекст.ПолноеИмяФайла);
		Действие.Вставить("Свойства", Новый Структура("ТолькоЧтение", Ложь));
		Действие.Вставить("ЗаголовокОшибки", Контекст.ЗаголовокОшибки
			+ НСтр("ru = 'Изменение свойства файла ""Только просмотр"" не выполнено по причине:'"));
		ДействияСФайлом.Добавить(Действие);
		
		Действие = Новый Структура;
		Действие.Вставить("Действие", "СкопироватьИзИсточника");
		Действие.Вставить("Файл",     Контекст.ПолноеИмяФайла);
		Действие.Вставить("Источник", Контекст.ПолноеИмяПомещаемогоФайла);
		Действие.Вставить("ЗаголовокОшибки", Контекст.ЗаголовокОшибки
			+ НСтр("ru = 'Копирование файла не выполнено по причине:'"));
		ДействияСФайлом.Добавить(Действие);
		ДобавитьВызов(Вызовы, "НачатьКопированиеФайла", Контекст.ПолноеИмяПомещаемогоФайла, Контекст.ПолноеИмяФайла,,);
	КонецЕсли;
	
	Действие = Новый Структура;
	Действие.Вставить("Действие", "УстановитьСвойства");
	Действие.Вставить("Файл",  Контекст.ПолноеИмяФайла);
	Действие.Вставить("Свойства", Новый Структура("ТолькоЧтение", Истина));
	Действие.Вставить("ЗаголовокОшибки", Контекст.ЗаголовокОшибки
		+ НСтр("ru = 'Изменение свойства файла ""Только просмотр"" не выполнено по причине:'"));
	ДействияСФайлом.Добавить(Действие);
	
	Контекст.Вставить("СвойстваФайла", Новый Структура);
	Контекст.СвойстваФайла.Вставить("УниверсальноеВремяИзменения");
	Контекст.СвойстваФайла.Вставить("ИмяБезРасширения");
	Контекст.СвойстваФайла.Вставить("Расширение");
	
	Действие = Новый Структура;
	Действие.Вставить("Действие", "ПолучитьСвойства");
	Действие.Вставить("Файл",  Контекст.ПолноеИмяФайла);
	Действие.Вставить("Свойства", Контекст.СвойстваФайла);
	Действие.Вставить("ЗаголовокОшибки", Контекст.ЗаголовокОшибки
		+ НСтр("ru = 'Получение свойств файла не выполнено по причине:'"));
	ДействияСФайлом.Добавить(Действие);
	
	Контекст.Вставить("ДействиеПомещения", Новый Структура);
	Контекст.ДействиеПомещения.Вставить("Действие", "Поместить");
	Контекст.ДействиеПомещения.Вставить("Файл",  Контекст.ПолноеИмяФайла);
	Контекст.ДействиеПомещения.Вставить("ЗаголовокОшибки", Контекст.ЗаголовокОшибки);
	ДействияСФайлом.Добавить(Контекст.ДействиеПомещения);
	ДобавитьВызов(Вызовы, "НачатьПомещениеФайлов", ПомещаемыеФайлы, , Ложь, Контекст.ИдентификаторФормы);
	
	Контекст.Вставить("ДействияСФайлом", ДействияСФайлом);
	
	НачатьЗапросРазрешенияПользователя(Новый ОписаниеОповещения(
		"ПоместитьПрисоединенныйФайлПослеПолученияРазрешений", ЭтотОбъект, Контекст), Вызовы);
	
КонецПроцедуры

Процедура ДобавитьВызов(Вызовы, Метод, П1, П2, П3, П4)
	
	Вызов = Новый Массив;
	Вызов.Добавить(Метод);
	Вызов.Добавить(П1);
	Вызов.Добавить(П2);
	Вызов.Добавить(П3);
	Вызов.Добавить(П4);
	
	Вызовы.Добавить(Вызов);
	
КонецПроцедуры

// Продолжение процедуры ПоместитьПрисоединенныйФайл.
Процедура ПоместитьПрисоединенныйФайлПослеПолученияРазрешений(РазрешенияПолучены, Контекст) Экспорт
	
	Если РазрешенияПолучены Тогда
		ФайловыеФункцииСлужебныйКлиент.ОбработатьФайл(Новый ОписаниеОповещения(
				"ПоместитьПрисоединенныйФайлПослеОбработкиФайла", ЭтотОбъект, Контекст),
			Контекст.ДействияСФайлом, Контекст.ИдентификаторФормы);
	КонецЕсли;
		
КонецПроцедуры

// Продолжение процедуры ПоместитьПрисоединенныйФайл.
Процедура ПоместитьПрисоединенныйФайлПослеОбработкиФайла(РезультатДействий, Контекст) Экспорт
	
	Результат = Новый Структура;
	
	Если ЗначениеЗаполнено(РезультатДействий.ОписаниеОшибки) Тогда
		Результат.Вставить("ОписаниеОшибки", РезультатДействий.ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
		Возврат;
	КонецЕсли;
	
	Результат.Вставить("ОписаниеОшибки", "");
	
	Расширение = Контекст.СвойстваФайла.Расширение;
	
	ИнформацияОФайле = Новый Структура;
	ИнформацияОФайле.Вставить("ДатаМодификацииУниверсальная",   Контекст.СвойстваФайла.УниверсальноеВремяИзменения);
	ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", Контекст.ДействиеПомещения.Адрес);
	ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
	ИнформацияОФайле.Вставить("ИмяБезРасширения",               Контекст.СвойстваФайла.ИмяБезРасширения);
	ИнформацияОФайле.Вставить("Расширение",                     Прав(Расширение, СтрДлина(Расширение)-1));
	ИнформацияОФайле.Вставить("Редактирует",                    Неопределено);
	
	Попытка
		ПрисоединенныеФайлыСлужебныйВызовСервера.ОбновитьПрисоединенныйФайл(
			Контекст.ПрисоединенныйФайл, ИнформацияОФайле);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Результат.Вставить("ОписаниеОшибки", Контекст.ЗаголовокОшибки + Символы.ПС
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры


// См. одноименную процедуру в общем модуле ПрисоединенныеФайлыКлиент.
Процедура ПолучитьПрисоединенныйФайл(Оповещение, ПрисоединенныйФайл, ИдентификаторФормы, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение",         Оповещение);
	Контекст.Вставить("ПрисоединенныйФайл", ПрисоединенныйФайл);
	Контекст.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	Контекст.Вставить("ДляРедактирования",  Ложь);
	Контекст.Вставить("ДанныеФайла",        Неопределено);
	ДополнительныеПараметры.Свойство("ДляРедактирования", Контекст.ДляРедактирования);
	ДополнительныеПараметры.Свойство("ДанныеФайла",       Контекст.ДанныеФайла);
	
	Если ТипЗнч(Контекст.ДанныеФайла) <> Тип("Структура")
	 Или Не ЗначениеЗаполнено(Контекст.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		Контекст.Вставить("ДанныеФайла", ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(
			Контекст.ПрисоединенныйФайл, Контекст.ИдентификаторФормы, Истина, Контекст.ДляРедактирования));
	КонецЕсли;
	
	Контекст.Вставить("ЗаголовокОшибки",
		НСтр("ru = 'Не удалось получить файл на компьютер из хранилища файлов по причине:'") + Символы.ПС);
	
	Если Контекст.ДляРедактирования
	   И Контекст.ДанныеФайла.Редактирует <> ПользователиКлиентСервер.АвторизованныйПользователь() Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("ПолноеИмяФайла", "");
		Результат.Вставить("ОписаниеОшибки", Контекст.ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл уже редактирует пользователь %1.'"), Строка(Контекст.ДанныеФайла.Редактирует)));
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ДляРедактирования", ЗначениеЗаполнено(Контекст.ДанныеФайла.Редактирует));
	
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Новый ОписаниеОповещения(
		"ПолучитьПрисоединенныйФайлПослеПодключенияРасширения", ЭтотОбъект, Контекст),, Ложь);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьПрисоединенныйФайл.
Процедура ПолучитьПрисоединенныйФайлПослеПодключенияРасширения(РасширениеПодключено, Контекст) Экспорт
	
	Если Не РасширениеПодключено Тогда
		Результат = Новый Структура;
		Результат.Вставить("ПолноеИмяФайла", "");
		Результат.Вставить("ОписаниеОшибки", Контекст.ЗаголовокОшибки
			+ НСтр("ru = 'В обозреватель интернет не установлено расширение для работы с файлами.'"));
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииСлужебныйКлиент.ПолучитьРабочийКаталогПользователя(Новый ОписаниеОповещения(
		"ПолучитьПрисоединенныйФайлПослеПолученияРабочегоКаталога", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры ПолучитьПрисоединенныйФайл.
Процедура ПолучитьПрисоединенныйФайлПослеПолученияРабочегоКаталога(Результат, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		Результат = Новый Структура;
		Результат.Вставить("ПолноеИмяФайла", "");
		Результат.Вставить("ОписаниеОшибки", Контекст.ЗаголовокОшибки + Результат.ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("РабочийКаталогПользователя", Результат.Каталог);
	Контекст.Вставить("КаталогФайла", Контекст.РабочийКаталогПользователя + Контекст.ДанныеФайла.ОтносительныйПуть);
	Контекст.Вставить("ПолноеИмяФайла", Контекст.КаталогФайла + Контекст.ДанныеФайла.ИмяФайла);
	
	ДействияСФайлом = Новый Массив;
	
	Действие = Новый Структура;
	Действие.Вставить("Действие", "СоздатьКаталог");
	Действие.Вставить("Файл", Контекст.КаталогФайла);
	Действие.Вставить("ЗаголовокОшибки", Контекст.ЗаголовокОшибки
		+ НСтр("ru = 'Создание каталога не выполнено по причине:'"));
	ДействияСФайлом.Добавить(Действие);
	
	Действие = Новый Структура;
	Действие.Вставить("Действие", "УстановитьСвойства");
	Действие.Вставить("Файл",  Контекст.ПолноеИмяФайла);
	Действие.Вставить("Свойства", Новый Структура("ТолькоЧтение", Ложь));
	Действие.Вставить("ЗаголовокОшибки", Контекст.ЗаголовокОшибки
		+ НСтр("ru = 'Изменение свойства файла ""Только просмотр"" не выполнено по причине:'"));
	ДействияСФайлом.Добавить(Действие);
	
	Действие = Новый Структура;
	Действие.Вставить("Действие", "Получить");
	Действие.Вставить("Файл",  Контекст.ПолноеИмяФайла);
	Действие.Вставить("Адрес", Контекст.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	Действие.Вставить("ЗаголовокОшибки", Контекст.ЗаголовокОшибки);
	ДействияСФайлом.Добавить(Действие);
	
	СвойстваФайла = Новый Структура;
	СвойстваФайла.Вставить("ТолькоЧтение", Не Контекст.ДляРедактирования);
	СвойстваФайла.Вставить("УниверсальноеВремяИзменения", Контекст.ДанныеФайла.ДатаМодификацииУниверсальная);
	
	Действие = Новый Структура;
	Действие.Вставить("Действие", "УстановитьСвойства");
	Действие.Вставить("Файл",  Контекст.ПолноеИмяФайла);
	Действие.Вставить("Свойства", СвойстваФайла);
	Действие.Вставить("ЗаголовокОшибки", Контекст.ЗаголовокОшибки
		+ НСтр("ru = 'Установка свойств файла не выполнено по причине:'"));
	ДействияСФайлом.Добавить(Действие);
	
	ФайловыеФункцииСлужебныйКлиент.ОбработатьФайл(Новый ОписаниеОповещения(
			"ПолучитьПрисоединенныйФайлПослеОбработкиФайла", ЭтотОбъект, Контекст),
		ДействияСФайлом, Контекст.ИдентификаторФормы);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьПрисоединенныйФайл.
Процедура ПолучитьПрисоединенныйФайлПослеОбработкиФайла(РезультатДействий, Контекст) Экспорт
	
	Результат = Новый Структура;
	
	Если ЗначениеЗаполнено(РезультатДействий.ОписаниеОшибки) Тогда
		Результат.Вставить("ПолноеИмяФайла", "");
		Результат.Вставить("ОписаниеОшибки", РезультатДействий.ОписаниеОшибки);
	Иначе
		Результат.Вставить("ПолноеИмяФайла", Контекст.ПолноеИмяФайла);
		Результат.Вставить("ОписаниеОшибки", "");
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с электронными подписями.

// Подписывает файл с помощью подсистемы ЭлектроннаяПодпись.
Процедура ПодписатьФайл(ПрисоединенныйФайл, ДанныеФайла, ИдентификаторФормы,
			ОбработчикЗавершения = Неопределено, ОбработчикПриПолученииПодписи = Неопределено) Экспорт
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	ПараметрыВыполнения.Вставить("ПрисоединенныйФайл",   ПрисоединенныйФайл);
	ПараметрыВыполнения.Вставить("ДанныеФайла",          ДанныеФайла);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы",   ИдентификаторФормы);
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Подписание файла'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("Представление",       ПрисоединенныйФайл);
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Истина);
	
	ОписаниеДанных.Вставить("Данные", ПараметрыВыполнения.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	Если ОбработчикПриПолученииПодписи = Неопределено Тогда
		ОписаниеДанных.Вставить("Объект", ПрисоединенныйФайл);
	Иначе
		ОписаниеДанных.Вставить("Объект", ОбработчикПриПолученииПодписи);
	КонецЕсли;
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ПослеДобавленияПодписей", ЭтотОбъект, ПараметрыВыполнения);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОбработчикПродолжения);
	
КонецПроцедуры

// Добавляет электронные подписи к файлу-объекту из файлов-подписей на диске.
Процедура ДобавитьПодписьИзФайла(ПрисоединенныйФайл, ДанныеФайла, ИдентификаторФормы,
			ОбработчикЗавершения = Неопределено, ОбработчикПриПолученииПодписи = Неопределено) Экспорт
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	ПараметрыВыполнения.Вставить("ПрисоединенныйФайл",   ПрисоединенныйФайл);
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("Представление",       ПрисоединенныйФайл);
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Истина);
	
	ОписаниеДанных.Вставить("Данные", ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	Если ОбработчикПриПолученииПодписи = Неопределено Тогда
		ОписаниеДанных.Вставить("Объект", ПрисоединенныйФайл);
	Иначе
		ОписаниеДанных.Вставить("Объект", ОбработчикПриПолученииПодписи);
	КонецЕсли;
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ПослеДобавленияПодписей",
		ЭтотОбъект, ПараметрыВыполнения);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.ДобавитьПодписьИзФайла(ОписаниеДанных,, ОбработчикПродолжения);
	
КонецПроцедуры

// Завершение процедур ПодписатьФайл, ДобавитьПодписьИзФайла.
Процедура ПослеДобавленияПодписей(ОписаниеДанных, ПараметрыВыполнения) Экспорт
	
	Если ОписаниеДанных.Успех Тогда
		ОповеститьОбИзменении(ПараметрыВыполнения.ПрисоединенныйФайл);
		Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ПараметрыВыполнения.ПрисоединенныйФайл);
	КонецЕсли;
	
	Если ПараметрыВыполнения.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОбработчикЗавершения, ОписаниеДанных.Успех);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Шифрование.

// Шифрует файл в хранилище:
// - предлагает пользователю выбрать сертификаты для шифрования,
// - выполняет шифрование файла,
// - записывает зашифрованные данные вместе с отпечатками в хранилище,
// - оповещает систему и пользователя об изменениях.
// Используется в обработчике команды шифрования файла.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на файл, который требуется зашифровать.
//  ДанныеФайла        - Структура с данными файла.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
// 
Процедура Зашифровать(Знач ПрисоединенныйФайл, Знач ДанныеФайла, Знач ИдентификаторФормы) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПрисоединенныйФайл", ПрисоединенныйФайл);
	Параметры.Вставить("ДанныеФайла", ДанныеФайла);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗашифроватьДанныеПолучены", ЭтотОбъект, Параметры);
	ПолучитьЗашифрованныеДанные(ОписаниеОповещения, ПрисоединенныйФайл, ДанныеФайла, ИдентификаторФормы);
	
КонецПроцедуры

// Продолжение процедуры Зашифровать.
Процедура ЗашифроватьДанныеПолучены(РезультатПолучения, ДополнительныеПараметры) Экспорт
	
	Если РезультатПолучения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗашифрованныеДанные = РезультатПолучения.ЗашифрованныеДанные;
	МассивОтпечатков = РезультатПолучения.МассивОтпечатков;
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	ПрисоединенныйФайл = ДополнительныеПараметры.ПрисоединенныйФайл;
	
	ПрисоединенныеФайлыСлужебныйВызовСервера.Зашифровать(ПрисоединенныйФайл, ЗашифрованныеДанные, МассивОтпечатков);
	ОповеститьОбИзмененииИУдалитьФайлВРабочемКаталоге(ПрисоединенныйФайл, ДанныеФайла);
	
КонецПроцедуры

// Шифрует двоичные данные файла с помощью сертификатов, выбранных пользователем.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения - процедура, в которую необходимо передать управление при завершении.
//                         Параметры вызываемой процедуры:
//                          Результат - Структура, Неопределено - если данные не были зашифрованы, то неопределено,
//                                      иначе структура:
//                           ЗашифрованныеДанные - Структура  - содержит зашифрованные данные файла (для записи).
//                           МассивОтпечатков    - Массив     - содержит отпечатки.
//                          ДополнительныеПараметры - Произвольный - значение, которое было указано при создании
//                                                                   объекта оповещения.
//  ПрисоединенныйФайл  - Ссылка на файл.
//  ДанныеФайла         - Структура с данными файла.
//  ИдентификаторФормы  - УникальныйИдентификатор формы.
//
Процедура ПолучитьЗашифрованныеДанные(ОбработчикРезультата, Знач ПрисоединенныйФайл, Знач ДанныеФайла, Знач ИдентификаторФормы) Экспорт
	
	Если ДанныеФайла.Зашифрован Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл ""%1""
			           |уже зашифрован.'"), Строка(ПрисоединенныйФайл)));
		ВыполнитьОбработкуОповещения(ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеФайла.Редактирует) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя зашифровать занятый файл.'"));
		ВыполнитьОбработкуОповещения(ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ДополнительныеПараметры.Вставить("ПрисоединенныйФайл", ПрисоединенныйФайл);
	ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);
	ДополнительныеПараметры.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Шифрование файла'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("Данные",              ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ОписаниеДанных.Вставить("Представление",       ДополнительныеПараметры.ПрисоединенныйФайл);
	ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ПослеШифрованияФайла", ЭтотОбъект, ДополнительныеПараметры);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.Зашифровать(ОписаниеДанных, , ОбработчикПродолжения);
	
КонецПроцедуры

// Завершение процедуры Зашифровать. Вызывается из подсистемы ЭлектроннаяПодпись.
Процедура ПослеШифрованияФайла(ОписаниеДанных, ДополнительныеПараметры) Экспорт
	
	Результат = Неопределено;
	
	Если ОписаниеДанных.Успех Тогда
		Результат = Новый Структура;
		
		Если ТипЗнч(ОписаниеДанных.СертификатыШифрования) = Тип("Строка") Тогда
			Результат.Вставить("МассивОтпечатков", ПолучитьИзВременногоХранилища(
				ОписаниеДанных.СертификатыШифрования));
		Иначе
			Результат.Вставить("МассивОтпечатков", ОписаниеДанных.СертификатыШифрования);
		КонецЕсли;
		
		ЗашифрованныеДанные = ОписаниеДанных.ЗашифрованныеДанные;
		Если ТипЗнч(ЗашифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
			АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ЗашифрованныеДанные,
				ДополнительныеПараметры.ИдентификаторФормы);
		Иначе
			АдресВременногоХранилища = ЗашифрованныеДанные;
		КонецЕсли;
		ЗашифрованныеДанные = Новый Структура;
		ЗашифрованныеДанные.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
		Результат.Вставить("ЗашифрованныеДанные", ЗашифрованныеДанные);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Результат);
	
КонецПроцедуры


// Удаляет файл из рабочего каталога, оповещает об изменениях открытые формы.
Процедура ОповеститьОбИзмененииИУдалитьФайлВРабочемКаталоге(Знач ПрисоединенныйФайл, Знач ДанныеФайла) Экспорт
	
	ОповеститьОбИзменении(ПрисоединенныйФайл);
	Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ПрисоединенныйФайл);
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
		МодульЭлектроннаяПодписьКлиент.ИнформироватьОШифрованииОбъекта(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файл: %1'"), ПрисоединенныйФайл));
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПрисоединенныйФайл", ПрисоединенныйФайл);
	Параметры.Вставить("ДанныеФайла", ДанныеФайла);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповеститьОбИзмененииИУдалитьФайлВРабочемКаталогеРасширениеПредложено", ЭтотОбъект, Параметры);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОповеститьОбИзмененииИУдалитьФайлВРабочемКаталогеРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	ПрисоединенныйФайл = ДополнительныеПараметры.ПрисоединенныйФайл;
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	
	Если РасширениеРаботыСФайламиПодключено Тогда
		РабочийКаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		ПолныйПутьКФайлу = РабочийКаталогПользователя + ДанныеФайла.ИмяФайла;
		
		Файл = Новый Файл(ПолныйПутьКФайлу);
		Если Файл.Существует() Тогда
			Попытка
				Файл.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ПолныйПутьКФайлу);
			Исключение
				// Попытка удалить файл с диска.
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Расшифровывает файл в хранилище:
// - показывает пользователю диалог с предложением расшифровать файл,
// - получает двоичные данные и массив отпечатков,
// - производит расшифровку,
// - записывает расшифрованные данные файла в хранилище.
// Используется как обработчик команды расшифровки файла.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на файл.
//  ДанныеФайла        - Структура с данными файла.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
Процедура Расшифровать(Знач ПрисоединенныйФайл, Знач ДанныеФайла, Знач ИдентификаторФормы) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РасшифроватьДанныеПолучены", ЭтотОбъект, ПрисоединенныйФайл);
	ПолучитьРасшифрованныеДанные(ОписаниеОповещения, ПрисоединенныйФайл, ДанныеФайла, ИдентификаторФормы);
	
КонецПроцедуры

// Продолжение процедуры Расшифровать.
Процедура РасшифроватьДанныеПолучены(РасшифрованныеДанные, ПрисоединенныйФайл) Экспорт
	Если РасшифрованныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыСлужебныйВызовСервера.Расшифровать(ПрисоединенныйФайл, РасшифрованныеДанные);
	ОповеститьОРасшифровкеФайла(ПрисоединенныйФайл);
КонецПроцедуры

// Получает расшифрованные данные файла.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения - процедура, в которую необходимо передать управление при завершении.
//                         Параметры вызываемой процедуры:
//                          РасшифрованныеДанные - Структура, Неопределено - содержит расшифрованные данные, либо
//                                                 Неопределено, если расшифровка не была выполнена.
//                          ДополнительныеПараметры - Произвольный - значение, которое было указано при создании
//                                                                   объекта оповещения.
//  ПрисоединенныйФайл   - Ссылка на файл.
//  ДанныеФайла          - Структура с данными файла.
//  ИдентификаторФормы   - УникальныйИдентификатор формы.
// 
Процедура ПолучитьРасшифрованныеДанные(ОбработчикРезультата, Знач ПрисоединенныйФайл, Знач ДанныеФайла, Знач ИдентификаторФормы) Экспорт
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ДополнительныеПараметры.Вставить("ПрисоединенныйФайл", ПрисоединенныйФайл);
	ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);
	ДополнительныеПараметры.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",              НСтр("ru = 'Расшифровка файла'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",       НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("Данные",                ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ОписаниеДанных.Вставить("Представление",         ДополнительныеПараметры.ПрисоединенныйФайл);
	ОписаниеДанных.Вставить("СертификатыШифрования", ДополнительныеПараметры.ПрисоединенныйФайл);
	ОписаниеДанных.Вставить("СообщитьОЗавершении",   Ложь);
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ПослеРасшифровкиФайла", ЭтотОбъект, ДополнительныеПараметры);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработчикПродолжения);
	
КонецПроцедуры

// Завершение процедуры Расшифровать. Вызывается из подсистемы ЭлектроннаяПодпись.
Процедура ПослеРасшифровкиФайла(ОписаниеДанных, ДополнительныеПараметры) Экспорт
	
	Результат = Неопределено;
	
	Если ОписаниеДанных.Успех Тогда
		
		РасшифрованныеДанные = ОписаниеДанных.РасшифрованныеДанные;
		Если ТипЗнч(РасшифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
			АдресВременногоХранилища = ПоместитьВоВременноеХранилище(РасшифрованныеДанные,
				ДополнительныеПараметры.ИдентификаторФормы);
		Иначе
			АдресВременногоХранилища = РасшифрованныеДанные;
		#Если Не ВебКлиент Тогда
			РасшифрованныеДанные = ПолучитьИзВременногоХранилища(РасшифрованныеДанные);
		#КонецЕсли
		КонецЕсли;
		
	#Если ВебКлиент Тогда
		АдресВременногоХранилищаТекста = "";
	#Иначе
		ИзвлекатьТекстыФайловНаСервере =
			ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами().ИзвлекатьТекстыФайловНаСервере;
		
		Если НЕ ИзвлекатьТекстыФайловНаСервере Тогда
			
			ПолныйПутьКФайлу = ПолучитьИмяВременногоФайла(ДополнительныеПараметры.ДанныеФайла.Расширение);
			РасшифрованныеДанные.Записать(ПолныйПутьКФайлу);
			
			АдресВременногоХранилищаТекста =
				ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
					ПолныйПутьКФайлу, ДополнительныеПараметры.ИдентификаторФормы);
			
			УдалитьФайлы(ПолныйПутьКФайлу);
		Иначе
			АдресВременногоХранилищаТекста = "";
		КонецЕсли;
	#КонецЕсли
		
		Результат = Новый Структура;
		Результат.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
		Результат.Вставить("АдресВременногоХранилищаТекста", АдресВременногоХранилищаТекста);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Результат);
	
КонецПроцедуры

// Оповещает систему и пользователя о расшифровке файла.
// 
// Параметры:
//  ПрисоединенныйФайл - Ссылка на файл.
//
Процедура ОповеститьОРасшифровкеФайла(Знач ПрисоединенныйФайл) Экспорт
	
	ОповеститьОбИзменении(ПрисоединенныйФайл);
	Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ПрисоединенныйФайл);
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.ИнформироватьОРасшифровкеОбъекта(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл: %1'"), ПрисоединенныйФайл));
	
КонецПроцедуры

// Помещает файлы с диска в хранилище присоединенных файлов.
// 
// Параметры:
//  ВыбранныеФайлы                 - Массив - пути к файлам на диске.
//  ВладелецФайла                  - Ссылка на владельца файла.
//  НастройкиРаботыСФайлами        - Структура.
//  ПрисоединенныеФайлыМассив      - Массив (возвращаемое значение) - заполняется ссылками
//                                   на добавленные файлы.
//  ИдентификаторФормы             - УникальныйИдентификатор формы.
//
Процедура ПоместитьВыбранныеФайлыВХранилище(Знач ВыбранныеФайлы,
                                            Знач ВладелецФайла,
                                            ПрисоединенныеФайлыМассив,
                                            Знач ИдентификаторФормы,
                                            Знач ИмяСоздаваемогоФайла = "") Экспорт
	
	ОбщиеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами();
	
	ТекущаяПозиция = 0;
	
	ПоследнийСохраненныйФайл = Неопределено;
	
	Для Каждого ПолноеИмяФайла Из ВыбранныеФайлы Цикл
		
		ТекущаяПозиция = ТекущаяПозиция + 1;
		
		Файл = Новый Файл(ПолноеИмяФайла);
		
		ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьВозможностьЗагрузкиФайла(Файл);
		
		Если ОбщиеНастройки.ИзвлекатьТекстыФайловНаСервере Тогда
			АдресВременногоХранилищаТекста = "";
		Иначе
			АдресВременногоХранилищаТекста =
				ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
					ПолноеИмяФайла, ИдентификаторФормы);
		КонецЕсли;
	
		ВремяИзмененияУниверсальное = Файл.ПолучитьУниверсальноеВремяИзменения();
		
		ОбновитьСостояниеОСохраненииФайлов(ВыбранныеФайлы, Файл, ТекущаяПозиция, ИмяСоздаваемогоФайла);
		ПоследнийСохраненныйФайл = Файл;
		
		ПомещаемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя, "");
		ПомещаемыеФайлы.Добавить(Описание);
		
		ПомещенныеФайлы = Новый Массив;
		
		Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ИдентификаторФормы) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при помещении файла
					           |""%1""
					           |во временное хранилище.'"),
					Файл.ПолноеИмя) );
			Продолжить;
		КонецЕсли;
		
		АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
		
		ИмяБезРасширения = ?(ПустаяСтрока(ИмяСоздаваемогоФайла), Файл.ИмяБезРасширения, ИмяСоздаваемогоФайла);
		// Создание карточки Файла в базе данных.
		ПрисоединенныйФайл = ПрисоединенныеФайлыСлужебныйВызовСервера.ДобавитьФайл(
			ВладелецФайла,
			ИмяБезРасширения,
			ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение),
			,
			ВремяИзмененияУниверсальное,
			АдресВременногоХранилищаФайла,
			АдресВременногоХранилищаТекста);
		
		Если ПрисоединенныйФайл = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПрисоединенныеФайлыМассив.Добавить(ПрисоединенныйФайл);
		
	КонецЦикла;
	
	ОбновитьСостояниеОСохраненииФайлов(ВыбранныеФайлы, ПоследнийСохраненныйФайл, , ИмяБезРасширения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

Процедура ОбновитьСостояниеОСохраненииФайлов(Знач ВыбранныеФайлы,
											 Знач Файл,
											 Знач ТекущаяПозиция = Неопределено,
											 ИмяСоздаваемогоФайла = "");
	
	Если Файл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохраняемоеИмяФайла = ?(ПустаяСтрока(ИмяСоздаваемогоФайла), Файл.Имя, ИмяСоздаваемогоФайла);
	
	РазмерВМб = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(Файл.Размер() / (1024 * 1024));
	
	Если ВыбранныеФайлы.Количество() > 1 Тогда
		
		Если ТекущаяПозиция = Неопределено Тогда
			Состояние(НСтр("ru = 'Сохранение файлов завершено.'"));
		Иначе
			ИндикаторПроцент = ТекущаяПозиция * 100 / ВыбранныеФайлы.Количество();
			
			НадписьПодробнее = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сохраняется файл ""%1"" (%2 Мб) ...'"), СохраняемоеИмяФайла, РазмерВМб);
				
			ТекстСостояния = НСтр("ru = 'Сохранение нескольких файлов.'");
			
			Состояние(ТекстСостояния, ИндикаторПроцент, НадписьПодробнее, БиблиотекаКартинок.Информация32);
		КонецЕсли;
	Иначе
		Если ТекущаяПозиция = Неопределено Тогда
			ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сохранение файла ""%1"" (%2 Мб)
				           |завершено.'"), СохраняемоеИмяФайла, РазмерВМб);
		Иначе
			ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сохраняется файл ""%1"" (%2 Мб).
				           |Пожалуйста, подождите...'"), СохраняемоеИмяФайла, РазмерВМб);
		КонецЕсли;
		ПоказатьОповещениеПользователя(ТекстПояснения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Продолжения асинхронных процедур.

// Продолжение процедуры ПрисоединенныеФайлыКлиент.ОткрытьФайл.
Процедура ОткрытьФайлРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	ДляРедактирования = ДополнительныеПараметры.ДляРедактирования;
	
	Если РасширениеРаботыСФайламиПодключено Тогда
		РабочийКаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		ПолноеИмяФайлаНаКлиенте = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		ФайлНаДиске = Новый Файл(ПолноеИмяФайлаНаКлиенте);
		
		ДополнительныеПараметры.Вставить("ДляРедактирования", ДляРедактирования);
		ДополнительныеПараметры.Вставить("РабочийКаталогПользователя", РабочийКаталогПользователя);
		ДополнительныеПараметры.Вставить("ФайлНаДиске", ФайлНаДиске);
		ДополнительныеПараметры.Вставить("ПолноеИмяФайлаНаКлиенте", ПолноеИмяФайлаНаКлиенте);
		
		Если ЗначениеЗаполнено(ДанныеФайла.Редактирует) И ДляРедактирования И ФайлНаДиске.Существует() Тогда
			ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
			ПолучитьФайл = Ложь;
		ИначеЕсли ФайлНаДиске.Существует() Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлДиалогПоказан", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьДиалогНужноПолучитьФайлССервера(ОписаниеОповещения, ПолноеИмяФайлаНаКлиенте, ДанныеФайла, ДляРедактирования);
			Возврат;
		Иначе
			ПолучитьФайл = Истина;
		КонецЕсли;
		
		ОткрытьФайлДиалогПоказан(ПолучитьФайл, ДополнительныеПараметры);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлНапоминаниеПоказано", ЭтотОбъект, ДополнительныеПараметры);
		ФайловыеФункцииСлужебныйКлиент.ВывестиНапоминаниеПриРедактировании(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПрисоединенныеФайлыКлиент.ОткрытьФайл.
Процедура ОткрытьФайлДиалогПоказан(ПолучитьФайл, ДополнительныеПараметры) Экспорт
	Если ПолучитьФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	ДляРедактирования = ДополнительныеПараметры.ДляРедактирования;
	РабочийКаталогПользователя = ДополнительныеПараметры.РабочийКаталогПользователя;
	ФайлНаДиске = ДополнительныеПараметры.ФайлНаДиске;
	ПолноеИмяФайлаНаКлиенте = ДополнительныеПараметры.ПолноеИмяФайлаНаКлиенте;
	
	ФайлМожноОткрывать = Истина;
	Если ПолучитьФайл Тогда
		ПолноеИмяФайлаНаКлиенте = "";
		ФайлМожноОткрывать = ПолучитьФайлВРабочийКаталог(
			ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
			ДанныеФайла.ОтносительныйПуть,
			ДанныеФайла.ДатаМодификацииУниверсальная,
			ДанныеФайла.ИмяФайла,
			РабочийКаталогПользователя,
			ПолноеИмяФайлаНаКлиенте);
	КонецЕсли;
		
	Если ФайлМожноОткрывать Тогда
		Если ДляРедактирования Тогда
			ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
		Иначе
			ФайлНаДиске.УстановитьТолькоЧтение(Истина);
		КонецЕсли;
		ОткрытьФайлПриложением(ПолноеИмяФайлаНаКлиенте, ДанныеФайла);
	КонецЕсли;
		
КонецПроцедуры

// Продолжение процедуры ПрисоединенныеФайлыКлиент.ОткрытьФайл.
Процедура ОткрытьФайлНапоминаниеПоказано(РезультатНапоминания, ДополнительныеПараметры) Экспорт
	
	Если РезультатНапоминания = КодВозвратаДиалога.Отмена Или РезультатНапоминания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла, Истина);
	
КонецПроцедуры

// Продолжение процедуры ПрисоединенныеФайлыКлиент.ДобавитьФайлы.
Процедура ДобавитьФайлыЗавершение(ПрисоединенныйФайл, ДополнительныеПараметры) Экспорт
	
	Если ПрисоединенныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецФайла = ДополнительныеПараметры.ВладелецФайла;
	ОповеститьОбИзменении(ПрисоединенныйФайл);
	Оповестить("Запись_ПрисоединенныйФайл", 
		Новый Структура("ЭтоНовый, ВладелецФайла", Истина, ВладелецФайла), ПрисоединенныйФайл);
	
	ОткрыватьКарточкуПослеСозданияИзФайла = Ложь;
	Если ДополнительныеПараметры.Свойство("НеОткрыватьКарточкуПослеСозданияИзФайла") Тогда
		ОткрыватьКарточкуПослеСозданияИзФайла = Не ДополнительныеПараметры.НеОткрыватьКарточкуПослеСозданияИзФайла;
	КонецЕсли;
	Если ОткрыватьКарточкуПослеСозданияИзФайла Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание'"),
			ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл),
			ПрисоединенныйФайл,
			БиблиотекаКартинок.Информация32);
			
		ПараметрыФормы = Новый Структура("ПрисоединенныйФайл", ПрисоединенныйФайл);
		ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыФормы, , ПрисоединенныйФайл);
			
	КонецЕсли;
		
КонецПроцедуры

// Продолжение процедуры ПрисоединенныеФайлыКлиент.СохранитьВместеСЭП.
// Вызывается из подсистемы ЭлектроннаяПодпись после выбора подписей для сохранения.
//
Процедура ПриСохраненииДанныхФайла(Параметры, ПараметрыВыполнения) Экспорт
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	
	ПараметрыВыполнения.Вставить("ОбработчикЗавершения", Параметры.Оповещение);
	СохранитьФайлКакРасширениеПредложено(РасширениеПодключено, ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры ПрисоединенныеФайлыКлиент.СохранитьФайлКак.
Процедура СохранитьФайлКакРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	ПолноеИмяФайла = "";
	Если РасширениеРаботыСФайламиПодключено Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = ДанныеФайла.ИмяФайла;
		ВыборФайла.Расширение = ДанныеФайла.Расширение;
		ВыборФайла.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Все файлы (*.%1)|*.%1'"), ДанныеФайла.Расширение);
		
		Если НЕ ВыборФайла.Выбрать() Тогда
			Возврат;
		КонецЕсли;
		
		РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
		
		ТекстПояснения =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сохраняется файл ""%1"" (%2 Мб)
				           |Пожалуйста, подождите...'"),
				ДанныеФайла.ИмяФайла, 
				ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб) );
		
		Состояние(ТекстПояснения);
		
		ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ВыборФайла.ПолноеИмяФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
		
		ПолученныеФайлы = Новый Массив;
		
		Если ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, , Ложь) Тогда
			Состояние(НСтр("ru = 'Файл успешно сохранен.'"), , ВыборФайла.ПолноеИмяФайла);
		КонецЕсли;
		ПолноеИмяФайла = ВыборФайла.ПолноеИмяФайла;
	Иначе
		ПолноеИмяФайла = ДанныеФайла.ИмяФайла;
		ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ПолноеИмяФайла, Истина);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОбработчикЗавершения") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикЗавершения,
			Новый Структура("ПолноеИмяФайла", ПолноеИмяФайла));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

Процедура ПоказатьДиалогНужноПолучитьФайлССервера(ОбработчикРезультата, Знач ИмяФайлаСПутем, Знач ДанныеФайла, Знач ДляРедактирования)
	
	СтандартныеДанныеФайла = Новый Структура;
	СтандартныеДанныеФайла.Вставить("ДатаМодификацииУниверсальная", ДанныеФайла.ДатаМодификацииУниверсальная);
	СтандартныеДанныеФайла.Вставить("Размер",                       ДанныеФайла.Размер);
	СтандартныеДанныеФайла.Вставить("ВРабочемКаталогеНаЧтение",     НЕ ДляРедактирования);
	СтандартныеДанныеФайла.Вставить("Редактирует",                  ДанныеФайла.Редактирует);
	
	// Выяснено, что Файл в рабочем каталоге есть.
	// Проверка даты изменения и принятие решения, что делать дальше.
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	Параметры.Вставить("ИмяФайлаСПутем", ИмяФайлаСПутем);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьДиалогНужноПолучитьФайлССервераДействиеОпределено", ЭтотОбъект, Параметры);
	ФайловыеФункцииСлужебныйКлиент.ДействиеПриОткрытииФайлаВРабочемКаталоге(
		ОписаниеОповещения, ИмяФайлаСПутем, СтандартныеДанныеФайла);
КонецПроцедуры

// Продолжение процедуры ПоказатьДиалогНужноПолучитьФайлССервера.
Процедура ПоказатьДиалогНужноПолучитьФайлССервераДействиеОпределено(Действие, ДополнительныеПараметры) Экспорт
	ИмяФайлаСПутем = ДополнительныеПараметры.ИмяФайлаСПутем;
	
	Если Действие = "ВзятьИзХранилищаИОткрыть" Тогда
		Файл = Новый Файл(ИмяФайлаСПутем);
		Файл.УстановитьТолькоЧтение(Ложь);
		УдалитьФайлы(ИмяФайлаСПутем);
		Результат = Истина;
	ИначеЕсли Действие = "ОткрытьСуществующий" Тогда
		Результат = Ложь;
	Иначе // Действие = "Отмена".
		Результат = Неопределено;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Результат);
	
КонецПроцедуры

Процедура ОткрытьФайлПриложением(Знач ИмяОткрываемогоФайла, ДанныеФайла)
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	
	Если РасширениеПодключено Тогда
		ЗаголовокСтрока = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ДанныеФайла.Наименование, ДанныеФайла.Расширение);
		
		Если НРег(ДанныеФайла.Расширение) = НРег("grs") Тогда
			Схема = Новый ГрафическаяСхема; 
			Схема.Прочитать(ИмяОткрываемогоФайла);
			Схема.Показать(ЗаголовокСтрока, ИмяОткрываемогоФайла);
			Возврат;
		КонецЕсли;
		
		Если НРег(ДанныеФайла.Расширение) = НРег("mxl") Тогда
			
			ПомещаемыеФайлы = Новый Массив;
			ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяОткрываемогоФайла));
			ПомещенныеФайлы = Новый Массив;
			Если Не ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь) Тогда
				Возврат;
			КонецЕсли;
			ТабличныйДокумент = ПомещенныеФайлы[0].Хранение;
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ИмяДокумента", ЗаголовокСтрока);
			ПараметрыОткрытия.Вставить("ПутьКФайлу", ИмяОткрываемогоФайла);
			ПараметрыОткрытия.Вставить("ТабличныйДокумент", ТабличныйДокумент);
			
			ОткрытьФорму("ОбщаяФорма.РедактированиеТабличногоДокумента", ПараметрыОткрытия);
			Возврат;
		КонецЕсли;
		
		// Открытие Файла.
		Попытка
			ЗапуститьПриложение(ИмяОткрываемогоФайла);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При открытии файла
				           |""%1""
				           |произошла ошибка:
				           |""%2"".'"),
				ИмяОткрываемогоФайла,
				ИнформацияОбОшибке.Описание));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

// Обновляет данные файла из файла, выбранного пользователем.
// Используется, как обработчик команды обновления присоединенного файла из другого файла.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на файл.
//  ДанныеФайла        - Структура - данные файла.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
Процедура ОбновитьПрисоединенныйФайл(Знач ПрисоединенныйФайл, Знач ДанныеФайла, Знач ИдентификаторФормы) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПрисоединенныйФайлПомещениеВыполнено", ЭтотОбъект, ПрисоединенныйФайл);
	ВыбратьФайлНаДискеИПоместитьВХранилище(ОписаниеОповещения, ДанныеФайла, ИдентификаторФормы);
	
КонецПроцедуры

// Продолжение процедуры ОбновитьПрисоединенныйФайл.
Процедура ОбновитьПрисоединенныйФайлПомещениеВыполнено(ИнформацияОФайле, ПрисоединенныйФайл) Экспорт
	
	Если ИнформацияОФайле = Неопределено
		Или Не ИнформацияОФайле.ФайлПомещенВХранилище Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыСлужебныйВызовСервера.ОбновитьПрисоединенныйФайл(ПрисоединенныйФайл, ИнформацияОФайле);
	ОповеститьОбИзменении(ПрисоединенныйФайл);
	
КонецПроцедуры

#КонецОбласти
