////////////////////////////////////////////////////////////////////////////////
// Подсистема "Даты запрета изменения".
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"ДатыЗапретаИзмененияСлужебный");
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.ВариантыОтчетов\ПриНастройкеВариантовОтчетов"].Добавить(
			"ДатыЗапретаИзмененияСлужебный");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ВыгрузкаЗагрузкаДанных") Тогда
		СерверныеОбработчики[
			"ТехнологияСервиса.ВыгрузкаЗагрузкаДанных\ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке"].Добавить(
				"ДатыЗапретаИзмененияСлужебный");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов из других подсистем.

// Отключает или включает проверку запрета изменения на текущий сеанс.
//
Процедура ПропуститьПроверкуЗапретаИзменения(Пропустить = Истина) Экспорт
	
	ПараметрыСеанса.ПропуститьПроверкуЗапретаИзменения = Пропустить;
	
КонецПроцедуры

// Устанавливает необходимость обновления версии дат запрета изменения после изменения данных
// в режиме загрузки или непосредственно обновляет версию (загрузка в рамках обновления ИБ).
//
// Вызывается из события ПриЗаписи регистров ДатыЗапретаИзменения и СоставыГруппПользователей.
//
Процедура ОбновитьВерсиюДатЗапретаИзмененияПриЗагрузкеДанных(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Объект.ОбменДанными.Отправитель) Тогда
		ПараметрыСеанса.ОбновитьВерсиюДатЗапретаИзмененияПослеЗагрузкиДанных = Истина;
	Иначе
		ОбновитьВерсиюДатЗапретаИзменения();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("ПропуститьПроверкуЗапретаИзменения",
		"ДатыЗапретаИзмененияСлужебный.УстановкаПараметровСеанса");
	
	Обработчики.Вставить("ДействующиеДатыЗапретаИзменения",
		"ДатыЗапретаИзмененияСлужебный.УстановкаПараметровСеанса");
	
	Обработчики.Вставить("ОбновитьВерсиюДатЗапретаИзмененияПослеЗагрузкиДанных",
		"ДатыЗапретаИзмененияСлужебный.УстановкаПараметровСеанса");
	
КонецПроцедуры

// Возвращает возможность проверки запрета изменения данных.
Функция ЗапретИзмененияПроверяется(ОбъектМетаданных) Экспорт
	
	Возврат ИсточникиДанныхДляПроверкиЗапретаИзменения().Получить(ОбъектМетаданных.ПолноеИмя()) <> Неопределено;
	
КонецФункции

// Обработчики событий подсистемы Пользователи.

// Обновляет группировки пользователей после обновления составов групп пользователей
// используемых для выполнения проверок разрешенных пользователей.
//
// Параметры:
//  УчастникиИзменений - Массив значений типов:
//                       - СправочникСсылка.Пользователи.
//                       - СправочникСсылка.ВнешниеПользователи.
//                       Пользователи которые участвовали в изменении состава групп.
//
//  ИзмененныеГруппы   - Массив значений типов:
//                       - СправочникСсылка.ГруппыПользователей.
//                       - СправочникСсылка.ГруппыВнешнихПользователей.
//                       Группы, состав которых был изменен.
//
Процедура ПослеОбновленияСоставовГруппПользователей(УчастникиИзменений, ИзмененныеГруппы) Экспорт
	
	ОбновитьВерсиюДатЗапретаИзменения();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП.

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.12";
	Обработчик.Процедура = "ДатыЗапретаИзмененияСлужебный.ЗаменитьНеопределеноНаЗначениеПеречисления";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.3.2";
	Обработчик.Процедура = "ДатыЗапретаИзмененияСлужебный.УдалитьПустыеДатыЗапретаПоУмолчанию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.51";
	Обработчик.Процедура = "ДатыЗапретаИзмененияСлужебный.ЗаполнитьИспользованиеДатЗапрета";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.55";
	Обработчик.Процедура = "ДатыЗапретаИзмененияСлужебный.УстановитьОтносительныеДатыЗапрета";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ДатыЗапретаИзмененияСлужебный.УстановитьНачальнуюДатуЗапретаИзменения";
	
КонецПроцедуры

// Обработчики событий подсистемы ВариантыОтчетов.

// Содержит настройки размещения вариантов отчетов в панели отчетов.
//
// Параметры:
//   Настройки - Коллекция - Содержит настройки всех отчетов и вариантов конфигурации.
//       Используется для передачи в параметрах вспомогательных методов.
//
// Описание:
//   См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Вспомогательные методы:
//   1. Функции ОписаниеОтчета и ОписаниеВарианта формируют описание настроек отчета и варианта для последующего изменения:
//       НастройкиОтчета   = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.<ИмяОтчета>);
//       НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//       Возвращаемые коллекции содержат одинаковый набор свойств.
//       НастройкиОтчета используются как умолчания для вариантов, описания которых еще не получены.
//       Подробнее - см. "свойства для изменения" в комментарии к ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//   2. Процедура УстановитьРежимВыводаВПанеляхОтчетов позволяет настроить режим группировки вариантов в панелях отчетов:
//       ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина/Ложь);
//       ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, Метаданные.Отчеты.<ИмяОтчета>, Истина/Ложь);
//       ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, Метаданные.Подсистемы.<ИмяПодсистемы>, Истина/Ложь);
//   3. Процедура НастроитьОтчетВМодулеМенеджера позволяет переопределять настройки отчета в его модуле менеджера:
//       ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.<ИмяОтчета>);
//
Процедура ПриНастройкеВариантовОтчетов(Настройки) Экспорт
	
	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
	МодульВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ДатыЗапретаЗагрузки);
	МодульВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ДатыЗапретаИзменения);
	
КонецПроцедуры

// Обработчики событий библиотеки ТехнологияСервиса.

// Заполняет массив типов неразделенных данных, для которых не требуется сопоставление ссылок
// при загрузке данных в другую информационную базу, т.к. корректное сопоставление ссылок
// гарантируется с помощью других механизмов.
//
// Параметры:
//  Типы - Массив(ОбъектМетаданных).
//
Процедура ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	// В разделенных данных используются ссылки только на предопределенные элементы
	// плана видов характеристик РазделыДатЗапретаИзменения.
	Типы.Добавить(Метаданные.ПланыВидовХарактеристик.РазделыДатЗапретаИзменения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Основные процедуры и функции.

// Устанавливает параметры сеанса подсистемы обмена данными.
//
// Параметры:
//  ИмяПараметра - Строка - имя параметра сеанса, значение которого необходимо установить.
//  УстановленныеПараметры - массив - в данный параметр помещается информация об установленных параметрах сеанса.
// 
Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ДействующиеДатыЗапретаИзменения" Тогда
		Значение = ЗначениеПараметраСеансаДействующиеДатыЗапретаИзменения();
		ПараметрыСеанса.ДействующиеДатыЗапретаИзменения = Значение;
		УстановленныеПараметры.Добавить("ДействующиеДатыЗапретаИзменения");
		ПоследняяПроверка = ДатыЗапретаИзмененияСлужебныйПовтИсп.ПоследняяПроверкаВерсииДействующихДатЗапрета();
		ПоследняяПроверка.Дата = ТекущаяДатаСеанса();
		
	ИначеЕсли ИмяПараметра = "ПропуститьПроверкуЗапретаИзменения" Тогда
		ПараметрыСеанса.ПропуститьПроверкуЗапретаИзменения = Ложь;
		УстановленныеПараметры.Добавить("ПропуститьПроверкуЗапретаИзменения");
		
	ИначеЕсли ИмяПараметра = "ОбновитьВерсиюДатЗапретаИзмененияПослеЗагрузкиДанных" Тогда
		ПараметрыСеанса.ОбновитьВерсиюДатЗапретаИзмененияПослеЗагрузкиДанных = Ложь;
		УстановленныеПараметры.Добавить("ОбновитьВерсиюДатЗапретаИзмененияПослеЗагрузкиДанных");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки ОбновлениеВерсииДатЗапретаИзмененияПослеЗагрузкиДанных
// на событие ПриЗаписи любого плана обмена.
//
Процедура ОбновлениеВерсииДатЗапретаИзмененияПослеЗагрузкиДанныхПриЗаписи(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыСеанса.ОбновитьВерсиюДатЗапретаИзмененияПослеЗагрузкиДанных Тогда
		ОбновитьВерсиюДатЗапретаИзменения();
		ПараметрыСеанса.ОбновитьВерсиюДатЗапретаИзмененияПослеЗагрузкиДанных = Ложь;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет версию дат запрета после изменения.
Процедура ОбновитьВерсиюДатЗапретаИзменения() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ВерсияДатЗапретаИзменения.Установить(Новый УникальныйИдентификатор);
	
	ПоследняяПроверка = ДатыЗапретаИзмененияСлужебныйПовтИсп.ПоследняяПроверкаВерсииДействующихДатЗапрета();
	ПоследняяПроверка.Дата = '00010101';
	
КонецПроцедуры

// Возвращает дату запрета, рассчитанную по описанию относительной даты запрета.
//
// Параметры:
//  ОписаниеДатыЗапрета - Строка - содержит описание относительной даты запрета.
//  ДатаЗапрета         - Дата - абсолютная дата, полученная из регистра.
//  НачалоДня           - Дата - текущая дата сеанса на начало дня.
//                      - Неопределено - вычислить автоматически.
//
Функция ДатаЗапретаПоОписанию(ОписаниеДатыЗапрета, ДатаЗапрета, НачалоДня = '00010101') Экспорт
	
	Если Не ЗначениеЗаполнено(ОписаниеДатыЗапрета) Тогда
		Возврат ДатаЗапрета;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НачалоДня) Тогда
		НачалоДня = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Сутки = 60*60*24;
	КоличествоДнейРазрешения = 0;
	
	ВариантДатыЗапрета    = СтрПолучитьСтроку(ОписаниеДатыЗапрета, 1);
	КоличествоДнейСтрокой = СтрПолучитьСтроку(ОписаниеДатыЗапрета, 2);
	
	Если ЗначениеЗаполнено(КоличествоДнейСтрокой) Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		КоличествоДнейРазрешения = ОписаниеТипа.ПривестиЗначение(КоличествоДнейСтрокой);
	КонецЕсли;
	
	Если ВариантДатыЗапрета = "КонецПрошлогоГода" Тогда
		ТекущаяДатаЗапрета    = НачалоГода(НачалоДня)          - Сутки;
		ПредыдущаяДатаЗапрета = НачалоГода(ТекущаяДатаЗапрета) - Сутки;
		
	ИначеЕсли ВариантДатыЗапрета = "КонецПрошлогоКвартала" Тогда
		ТекущаяДатаЗапрета    = НачалоКвартала(НачалоДня)          - Сутки;
		ПредыдущаяДатаЗапрета = НачалоКвартала(ТекущаяДатаЗапрета) - Сутки;
		
	ИначеЕсли ВариантДатыЗапрета = "КонецПрошлогоМесяца" Тогда
		ТекущаяДатаЗапрета    = НачалоМесяца(НачалоДня)          - Сутки;
		ПредыдущаяДатаЗапрета = НачалоМесяца(ТекущаяДатаЗапрета) - Сутки;
		
	ИначеЕсли ВариантДатыЗапрета = "КонецПрошлойНедели" Тогда
		ТекущаяДатаЗапрета    = НачалоНедели(НачалоДня)          - Сутки;
		ПредыдущаяДатаЗапрета = НачалоНедели(ТекущаяДатаЗапрета) - Сутки;
		
	ИначеЕсли ВариантДатыЗапрета = "ПредыдущийДень" Тогда
		ТекущаяДатаЗапрета    = НачалоДня(НачалоДня)          - Сутки;
		ПредыдущаяДатаЗапрета = НачалоДня(ТекущаяДатаЗапрета) - Сутки;
	Иначе
		Возврат '00030303'; // Неизвестный формат.
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяДатаЗапрета) Тогда
		СрокРазрешения = ТекущаяДатаЗапрета + КоличествоДнейРазрешения * Сутки;
		Если Не НачалоДня > СрокРазрешения Тогда
			ТекущаяДатаЗапрета = ПредыдущаяДатаЗапрета;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущаяДатаЗапрета;
	
КонецФункции

// Ищет даты запрета изменения/загрузки данных для объекта.
//
// Параметры:
//  Источник        - СправочникОбъект,
//                    ПланВидовХарактеристикОбъект,
//                    ПланСчетовОбъект,
//                    ПланВидовРасчетаОбъект,
//                    БизнесПроцессОбъект,
//                    ЗадачаОбъект,
//                    ПланОбменаОбъект,
//                    ДокументОбъект  - объект данных.
//                  - РегистрСведенийНаборЗаписей,
//                    РегистрНакопленияНаборЗаписей,
//                    РегистрБухгалтерииНаборЗаписей,
//                    РегистрРасчетаНаборЗаписей - набор записей.
//                  - УдалениеОбъекта - удаление объекта при загрузке.
//
//  Отказ           - Булево - (возвращаемое значение), будет установлено Истина,
//                    если объект не проходит проверки дат запрета.
//
//  ИсточникРегистр - Булево - Ложь - Источник является регистром, иначе объектом.
//
//  Замещение       - Булево - если источник является регистром и выполняется добавление,
//                    нужно указать Ложь.
//
//  Удаление        - Булево - если источник является объектом и выполняется удаление объекта,
//                    нужно указать Истина.
//
//  ДополнительныеПараметры - Неопределено - указанные ниже параметры имеют начальные значения.
//                          - Структура - со свойствами:
//    * ПроверкаЗапретаИзменения    - Булево - начальное значение Истина, если установить Ложь,
//                                    проверка запрета изменения для пользователей) будет пропущена.
//    * УзелПроверкиЗапретаЗагрузки - Неопределено - (начальное значение) выполнить проверку изменения данных.
//                                  - ПланыОбменаСсылка.<Имя плана обмена> - выполнить проверку
//                                    загрузки данных для указанного узла.
//    * ОписаниеОшибки              - Строка - (возвращаемое значение) - описание запрета загрузки.
//                                  - Null - в этом случае текст сообщения об ошибке не будет подготовлен,
//                                    что ускоряет выполнение проверки, когда запрет найден.
//    * СообщитьОЗапрете            - Булево - начальное значение Истина. Если указать Ложь, тогда
//                                    непустое ОписаниеОшибки не будет отправлено пользователю и
//                                    записано в журнал регистрации.
//
Процедура ПроверитьДатыЗапретаИзмененияЗагрузкиДанных(Источник,
		Отказ, ИсточникРегистр, Замещение, Удаление, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПроверкаЗапретаИзменения    = Истина;
	УзелПроверкиЗапретаЗагрузки = Неопределено;
	ОписаниеОшибки              = "";
	СообщитьОЗапрете            = Истина;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("ПроверкаЗапретаИзменения",    ПроверкаЗапретаИзменения);
		ДополнительныеПараметры.Свойство("УзелПроверкиЗапретаЗагрузки", УзелПроверкиЗапретаЗагрузки);
		ДополнительныеПараметры.Свойство("ОписаниеОшибки",              ОписаниеОшибки);
		ДополнительныеПараметры.Свойство("СообщитьОЗапрете",            СообщитьОЗапрете);
	КонецЕсли;
	
	ВерсияОбъекта = "";
	Если ПропуститьПроверкуДатЗапрета(Источник, ПроверкаЗапретаИзменения,
			УзелПроверкиЗапретаЗагрузки, ВерсияОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИсточникРегистр
	   И НЕ Источник.ЭтоНовый()
	   И НЕ Удаление Тогда
	
		Если ИзменениеЗапрещено(
				?(ВерсияОбъекта <> "СтараяВерсия", Источник, Источник.Метаданные().ПолноеИмя()),
				?(ВерсияОбъекта <> "НоваяВерсия",  Источник.Ссылка, Неопределено),
				ОписаниеОшибки,
				УзелПроверкиЗапретаЗагрузки) Тогда
			
			Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли ИсточникРегистр И Замещение Тогда
		
		Если ИзменениеЗапрещено(
				?(ВерсияОбъекта <> "СтараяВерсия", Источник, Источник.Метаданные().ПолноеИмя()),
				?(ВерсияОбъекта <> "НоваяВерсия",  Источник.Отбор, Неопределено),
				ОписаниеОшибки,
				УзелПроверкиЗапретаЗагрузки) Тогда
			
			Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("УдалениеОбъекта") Тогда
		
		Если ВерсияОбъекта <> "НоваяВерсия"
		   И ИзменениеЗапрещено(
				Источник.Метаданные().ПолноеИмя(),
				Источник.Ссылка,
				ОписаниеОшибки,
				УзелПроверкиЗапретаЗагрузки) Тогда
			
			Отказ = Истина;
		КонецЕсли;
		
	Иначе
		// Выполняется при условии:
		//     НЕ ИсточникРегистр И Источник.ЭтоНовый()
		// ИЛИ    ИсточникРегистр И НЕ Замещение
		// ИЛИ НЕ ИсточникРегистр И Удаление
		Если ВерсияОбъекта <> "СтараяВерсия"
		   И ИзменениеЗапрещено(
				Источник,
				,
				ОписаниеОшибки,
				УзелПроверкиЗапретаЗагрузки) Тогда
			
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Вставить("ПроверкаЗапретаИзменения",    ПроверкаЗапретаИзменения);
		ДополнительныеПараметры.Вставить("УзелПроверкиЗапретаЗагрузки", УзелПроверкиЗапретаЗагрузки);
		ДополнительныеПараметры.Вставить("ОписаниеОшибки",              ОписаниеОшибки);
		ДополнительныеПараметры.Вставить("СообщитьОЗапрете",            СообщитьОЗапрете);
	КонецЕсли;
	
	Если Не Отказ Или Не СообщитьОЗапрете Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	
	ЗаписьЖурналаРегистрации(
		?(УзелПроверкиЗапретаЗагрузки <> Неопределено,
			НСтр("ru = 'Даты запрета изменения.Найдены запреты загрузки'",
			     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			НСтр("ru = 'Даты запрета изменения.Найдены запреты изменения'",
			     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		ОписаниеОшибки,
		РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	
КонецПроцедуры

// Проверяет необходимость проверки запрета изменения или загрузки данных.
Функция ПропуститьПроверкуДатЗапрета(Объект,
                                     ПроверкаЗапретаИзменения,
                                     УзелПроверкиЗапретаЗагрузки,
                                     ВерсияОбъекта) Экспорт
	
	Если ТипЗнч(Объект) <> Тип("УдалениеОбъекта")
	   И Объект.ДополнительныеСвойства.Свойство("ПропуститьПроверкуЗапретаИзменения") Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ПараметрыСеанса.ПропуститьПроверкуЗапретаИзменения Тогда
		Возврат Истина;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗапретИзмененияДанныхНеИспользуется(ПроверкаЗапретаИзменения, УзелПроверкиЗапретаЗагрузки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДатыЗапретаИзмененияПереопределяемый.ПередПроверкойЗапретаИзменения(
		Объект, ПроверкаЗапретаИзменения, УзелПроверкиЗапретаЗагрузки, ВерсияОбъекта);
	
	Возврат ПроверкаЗапретаИзменения    = Ложь          // НЕ проверять запрет изменения.
	      И УзелПроверкиЗапретаЗагрузки = Неопределено; // НЕ проверять запрет загрузки.
	
КонецФункции

// См. одноименную функцию в общем модуле ДатыЗапретаИзменения.
Функция ИзменениеЗапрещено(Данные, ИдентификаторДанных, ОписаниеОшибки, УзелПроверкиЗапретаЗагрузки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапретНайден = Ложь;
	ДействующиеДаты = ДействующиеДатыЗапрета();
	
	ДатыЗапретаПоОбъектамНеУказаны = ?(УзелПроверкиЗапретаЗагрузки = Неопределено,
		ДействующиеДаты.ДляПользователей.ДатыЗапретаПоОбъектамНеУказаны,
		ДействующиеДаты.ДляИнформационныхБаз.ДатыЗапретаПоОбъектамНеУказаны);
	
	// Проверка старой версии объекта или набора записей.
	Если ИдентификаторДанных <> Неопределено Тогда
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("НоваяВерсия", Ложь);
		
		// Данные - это имя таблицы, требуемое для свойства ИдентификаторДанных типа Отбор,
		// а также когда исходные данные имеют тип УдалениеОбъекта.
		
		Если ТипЗнч(ИдентификаторДанных) = Тип("Отбор") Тогда
			ОписаниеДанных.Вставить("Данные", Новый Структура);
			ОписаниеДанных.Данные.Вставить("Регистр", Данные);
			ОписаниеДанных.Данные.Вставить("Отбор", ИдентификаторДанных);
		Иначе
			ОписаниеДанных.Вставить("Данные", ИдентификаторДанных);
		КонецЕсли;
		
		ДанныеДляПроверки = ДанныеДляПроверкиИзБазыДанных(Данные,
			ИдентификаторДанных, ДействующиеДаты, ДатыЗапретаПоОбъектамНеУказаны);
		
		ДанныеИДаты = Новый Структура;
		ДанныеИДаты.Вставить("ДействующиеДаты",   ДействующиеДаты);
		ДанныеИДаты.Вставить("ДанныеДляПроверки", ДанныеДляПроверки);
		
		ЗапретНайден = ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеИДаты,
			ОписаниеДанных, ОписаниеОшибки, УзелПроверкиЗапретаЗагрузки);
	КонецЕсли;
	
	// Проверка новой версии объекта или набора записей.
	Если Не ЗапретНайден И ТипЗнч(Данные) <> Тип("Строка") Тогда
		
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("НоваяВерсия", Истина);
		ОписаниеДанных.Вставить("Данные", Данные);
		
		ДанныеДляПроверки = ДанныеДляПроверкиИзОбъекта(Данные,
			ДействующиеДаты, ДатыЗапретаПоОбъектамНеУказаны);
		
		ДанныеИДаты = Новый Структура;
		ДанныеИДаты.Вставить("ДействующиеДаты",   ДействующиеДаты);
		ДанныеИДаты.Вставить("ДанныеДляПроверки", ДанныеДляПроверки);
		
		ЗапретНайден = ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеИДаты,
			ОписаниеДанных, ОписаниеОшибки, УзелПроверкиЗапретаЗагрузки);
	КонецЕсли;
	
	Возврат ЗапретНайден;
	
КонецФункции

// Возвращает действующие даты запрета с учетом последней версии после изменений.
Функция ДействующиеДатыЗапрета() Экспорт
	
	ПоследняяПроверка = ДатыЗапретаИзмененияСлужебныйПовтИсп.ПоследняяПроверкаВерсииДействующихДатЗапрета();
	
	ДействующиеДаты = ПараметрыСеанса.ДействующиеДатыЗапретаИзменения;
	
	Если ТекущаяДатаСеанса() > (ПоследняяПроверка.Дата + 5) Тогда
		Если ДействующиеДаты.НачалоДня <> НачалоДня(ТекущаяДатаСеанса())
		 Или ДействующиеДаты.Версия <> Константы.ВерсияДатЗапретаИзменения.Получить() Тогда
			
			ОчищаемыеПараметры = Новый Массив;
			ОчищаемыеПараметры.Добавить("ДействующиеДатыЗапретаИзменения");
			ПараметрыСеанса.Очистить(ОчищаемыеПараметры);
			ДействующиеДаты = ПараметрыСеанса.ДействующиеДатыЗапретаИзменения;
		КонецЕсли;
		ПоследняяПроверка.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат ДействующиеДаты;
	
КонецФункции

// Возвращает свойства, характеризующие вариант встраивания.
Функция СвойстваРазделов() Экспорт
	
	Возврат ПараметрыСеанса.ДействующиеДатыЗапретаИзменения.СвойстваРазделов;
	
КонецФункции

// Возвращает источники данных, заполненные в процедуре ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения
// общего модуля ДатыЗапретаИзмененияПереопределяемый.
//
Функция ИсточникиДанныхДляПроверкиЗапретаИзменения() Экспорт
	
	Возврат ПараметрыСеанса.ДействующиеДатыЗапретаИзменения.ИсточникиДанных;
	
КонецФункции

// Возвращает пустую ссылку указанного типа.
Функция ПустаяСсылка(ТипСсылки) Экспорт
	
	Типы = Новый Массив;
	Типы.Добавить(ТипСсылки);
	ОписаниеТипов = Новый ОписаниеТипов(Типы);
	
	Возврат ОписаниеТипов.ПривестиЗначение(Неопределено);
	
КонецФункции

Функция ТекстОшибкиДатыЗапретаЗагрузкиНеВнедрены() Экспорт
	
	Возврат НСтр("ru = 'Даты запрета загрузки данных прошлых периодов из других программ
	                   |не предусмотрены ни для одного плана обмена.'");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// Обработчик заполнения общей начальной даты запрета изменения до 1980 года.
Процедура УстановитьНачальнуюДатуЗапретаИзменения() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	Запись = НаборЗаписей.Добавить();
	Запись.Пользователь = Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей;
	Запись.Раздел       = ДатыЗапретаИзмененияСлужебныйПовтИсп.ПустойРаздел();
	Запись.Объект       = ДатыЗапретаИзмененияСлужебныйПовтИсп.ПустойРаздел();
	Запись.ДатаЗапрета  = '19791231';
	Запись.Комментарий  = "(" + НСтр("ru = 'По умолчанию'") + ")";
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	
КонецПроцедуры

// Обработчик обновления выполняет замену значения Неопределено
// измерения Пользователь регистра сведений ДатыЗапретаИзменения
// на значение Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей.
//
Процедура ЗаменитьНеопределеноНаЗначениеПеречисления() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Неопределено);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		Таблица = НаборЗаписей.Выгрузить();
		НаборЗаписей.Отбор.Пользователь.Установить(Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей);
		Таблица.ЗаполнитьЗначения(Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей, "Пользователь");
		НаборЗаписей.Загрузить(Таблица);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления выполняет удаление пустых дат запрета заданных
// для всех пользователей или всех планов обмена, т.е. "По умолчанию",
// т.к. по умолчанию даты запрета пустые.
//
Процедура УдалитьПустыеДатыЗапретаПоУмолчанию() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата", '00000000');
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДатыЗапретаИзменения.Раздел,
	|	ДатыЗапретаИзменения.Объект,
	|	ДатыЗапретаИзменения.Пользователь
	|ИЗ
	|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
	|ГДЕ
	|	ДатыЗапретаИзменения.Пользователь В (ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей), ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехИнформационныхБаз))
	|	И ДатыЗапретаИзменения.ДатаЗапрета = &ПустаяДата
	|	И ДатыЗапретаИзменения.ОписаниеДатыЗапрета = """"";
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если Выгрузка.Количество() > 0 Тогда
		МенеджерЗаписи = РегистрыСведений.ДатыЗапретаИзменения.СоздатьМенеджерЗаписи();
		НачатьТранзакцию();
		Попытка
			Для каждого Строка Из Выгрузка Цикл
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Строка);
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.Записать();
				КонецЕсли;
			КонецЦикла;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления выполняет заполнение констант
// использования дат запрета по наличию настроенных дат.
//
Процедура ЗаполнитьИспользованиеДатЗапрета() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДатыЗапретаИзменения.Пользователь КАК Адресат
	|ИЗ
	|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения";
	
	ЗапретИзмененияИспользуется = Ложь;
	ЗапретЗагрузкиИспользуется = Ложь;
	
	ТипыПользователей = Новый Массив;
	ТипыПользователей.Добавить(Тип("СправочникСсылка.Пользователи"));
	ТипыПользователей.Добавить(Тип("СправочникСсылка.ГруппыПользователей"));
	ТипыПользователей.Добавить(Тип("СправочникСсылка.ВнешниеПользователи"));
	ТипыПользователей.Добавить(Тип("СправочникСсылка.ГруппыВнешнихПользователей"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Адресат = Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей Тогда
			ЗапретИзмененияИспользуется = Истина;
			
		ИначеЕсли Выборка.Адресат = Перечисления.ВидыНазначенияДатЗапрета.ДляВсехИнформационныхБаз Тогда
			ЗапретЗагрузкиИспользуется = Истина;
		
		ИначеЕсли ТипыПользователей.Найти(ТипЗнч(Выборка.Адресат)) <> Неопределено Тогда
			ЗапретИзмененияИспользуется = Истина;
			
		ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипЗнч(Выборка.Адресат)) Тогда
			ЗапретЗагрузкиИспользуется = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗапретИзмененияИспользуется Тогда
		Константы.ИспользоватьДатыЗапретаИзменения.Установить(Истина);
	КонецЕсли;
	
	Если ЗапретЗагрузкиИспользуется Тогда
		Константы.ИспользоватьДатыЗапретаЗагрузки.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик устанавливает значение сохранение '00020202' для относительных дат запрета.
Процедура УстановитьОтносительныеДатыЗапрета() Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДатыЗапретаИзменения");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		ЕстьИзменения = Ложь;
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Если ЗначениеЗаполнено(Запись.ОписаниеДатыЗапрета)
			   И Запись.ДатаЗапрета <> '00020202' Тогда
				
				Запись.ДатаЗапрета = '00020202';
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьИзменения Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

// Для процедуры ПропуститьПроверкуДатЗапрета.
Функция ЗапретИзмененияДанныхНеИспользуется(ПроверкаЗапретаИзменения, УзелПроверкиЗапретаЗагрузки)
	
	Если ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДействующиеДатыЗапрета = ДействующиеДатыЗапрета();
	
	Если (Не ДействующиеДатыЗапрета.ЗапретИзмененияИспользуется
	      Или ПроверкаЗапретаИзменения = Ложь)
	   И (Не ДействующиеДатыЗапрета.ЗапретЗагрузкиИспользуется
	      Или УзелПроверкиЗапретаЗагрузки = Неопределено) Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Для функции ИзменениеИлиЗагрузкаЗапрещена.
Функция ДанныеДляПроверкиИзБазыДанных(Данные, ИдентификаторДанных, ДействующиеДаты, ДатыЗапретаПоОбъектамНеУказаны)
	
	Если ТипЗнч(ИдентификаторДанных) = Тип("Отбор") Тогда
		Если ТипЗнч(Данные) = Тип("Строка") Тогда
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Данные);
		Иначе
			ОбъектМетаданных = Данные.Метаданные();
		КонецЕсли;
	Иначе
		ОбъектМетаданных = ИдентификаторДанных.Метаданные();
	КонецЕсли;
	
	Таблица = ОбъектМетаданных.ПолноеИмя();
	ИсточникиДанных = ПолучитьИсточникиДанных(ДействующиеДаты, Таблица);
	
	ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
	Запрос = Новый Запрос;
	Если ДатыЗапретаПоОбъектамНеУказаны Тогда
		Запрос.Текст = ИсточникиДанных.ТекстЗапросаТолькоДаты;
	Иначе
		Запрос.Текст = ИсточникиДанных.ТекстЗапроса;
	КонецЕсли;
	Если ИсточникиДанных.ЭтоРегистр Тогда
		ВставитьПараметрыИУсловиеОтбора(Запрос, ИдентификаторДанных);
	Иначе
		Запрос.УстановитьПараметр("Ссылка", ИдентификаторДанных);
	КонецЕсли;
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Для Каждого ИсточникДанных Из ИсточникиДанных.Состав Цикл
		Выборка = РезультатыЗапроса[ИсточникиДанных.Состав.Найти(ИсточникДанных)].Выбрать();
		Пока Выборка.Следующий() Цикл
			Строка = ДанныеДляПроверки.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Выборка);
			Строка.Раздел = ИсточникДанных.Раздел;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеДляПроверки;
	
КонецФункции

// Для процедуры ДанныеДляПроверкиИзБазыДанных.
// Преобразует Отбор в условие на языке запросов и вставляет в запрос.
//
// Параметры:
//  Запрос             - Запрос.
//
//  Отбор              - РегистрСведенийНаборЗаписей.Отбор,
//                       РегистрНакопленияНаборЗаписей.Отбор,
//                       РегистрБухгалтерииНаборЗаписей.Отбор,
//                       РегистрРасчетаНаборЗаписей.Отбор.
//
//  ПсевдонимТаблицы   - Строка - псевдоним регистра в запросе.
//
//  МестоУсловияОтбора - Строка - Идентификатор места условия в запросе,
//                       например, &УсловиеОтбора.
//
// Возвращаемое значение:
//  Строка.
//
Процедура ВставитьПараметрыИУсловиеОтбора(Запрос,
                                          Отбор,
                                          ПсевдонимТаблицы = "ТекущаяТаблица",
                                          МестоУсловияОтбора = "&УсловиеОтбора")
	
	Условие = "";
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ЭлементОтбора.Использование Тогда
			Если НЕ ПустаяСтрока(Условие) Тогда
				Условие = Условие + Символы.ПС + "И ";
			КонецЕсли;
			Запрос.УстановитьПараметр(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
			Условие = Условие
				+ ПсевдонимТаблицы + "." + ЭлементОтбора.Имя + " = &" + ЭлементОтбора.Имя;
		КонецЕсли;
	КонецЦикла;
	Условие = ?(ЗначениеЗаполнено(Условие), Условие, "Истина");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, МестоУсловияОтбора, Условие);
	
КонецПроцедуры

// Для функции ИзменениеИлиЗагрузкаЗапрещена.
Функция ДанныеДляПроверкиИзОбъекта(Данные, ДействующиеДаты, ДатыЗапретаПоОбъектамНеУказаны)
	
	ЗначенияПолей = Новый Структура;
	ОбъектМетаданных = Данные.Метаданные();
	Таблица = ОбъектМетаданных.ПолноеИмя();
	ИсточникиДанных = ПолучитьИсточникиДанных(ДействующиеДаты, Таблица);
	
	ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
	БезОбъекта = ДатыЗапретаПоОбъектамНеУказаны;
	
	Если ИсточникиДанных.ЭтоРегистр Тогда
		ЗначенияПолей = Данные.Выгрузить(, ИсточникиДанных.ПоляРегистра);
		ЗначенияПолей.Свернуть(ИсточникиДанных.ПоляРегистра);
		Если ЗначенияПолей.Колонки.Найти("Регистратор") <> Неопределено
		   И Данные.Отбор.Найти("Регистратор") <> Неопределено
		   И ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
			ЗначенияПолей.ЗаполнитьЗначения(Данные.Отбор.Регистратор.Значение, "Регистратор");
		КонецЕсли;
		Для Каждого Строка Из ЗначенияПолей Цикл
			Для Каждого ИсточникДанных Из ИсточникиДанных.Состав Цикл
				ДобавитьСтрокуДанных(Строка, Строка, ИсточникДанных, ДанныеДляПроверки, БезОбъекта);
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого ИсточникДанных Из ИсточникиДанных.Состав Цикл
			
			Если Не ЗначениеЗаполнено(ИсточникДанных.ПолеДаты.ТабличнаяЧасть)
			   И Не ЗначениеЗаполнено(ИсточникДанных.ПолеОбъекта.ТабличнаяЧасть) Тогда
				
				ДобавитьСтрокуДанных(Данные, Данные, ИсточникДанных, ДанныеДляПроверки, БезОбъекта);
				
			ИначеЕсли Не ЗначениеЗаполнено(ИсточникДанных.ПолеДаты.ТабличнаяЧасть) Тогда
				
				Если БезОбъекта Тогда
					ДобавитьСтрокуДанных(Данные, , ИсточникДанных, ДанныеДляПроверки, БезОбъекта);
				Иначе
					СтрокаДаты = Новый Структура("Значение", ЗначениеПоля(Данные, ИсточникДанных.ПолеДаты));
					Поле = ИсточникДанных.ПолеОбъекта.Имя;
					ЗначенияОбъекта = Данные[ИсточникДанных.ПолеОбъекта.ТабличнаяЧасть].Выгрузить(, Поле);
					ЗначенияОбъекта.Свернуть(Поле);
					Для Каждого СтрокаОбъекта Из ЗначенияОбъекта Цикл
						ДобавитьСтрокуДанных(СтрокаДаты, СтрокаОбъекта, ИсточникДанных, ДанныеДляПроверки);
					КонецЦикла;
				КонецЕсли;
				
			ИначеЕсли Не ЗначениеЗаполнено(ИсточникДанных.ПолеОбъекта.ТабличнаяЧасть) Тогда
				
				Если Не БезОбъекта Тогда
					СтрокаОбъекта = Новый Структура("Значение", ЗначениеПоля(Данные, ИсточникДанных.ПолеОбъекта));
				КонецЕсли;
				Поле = ИсточникДанных.ПолеДаты.Имя;
				ЗначенияДаты = Данные[ИсточникДанных.ПолеДаты.ТабличнаяЧасть].Выгрузить(, Поле);
				ЗначенияДаты.Свернуть(Поле);
				Для Каждого СтрокаДаты Из ЗначенияДаты Цикл
					ДобавитьСтрокуДанных(СтрокаДаты, СтрокаОбъекта, ИсточникДанных, ДанныеДляПроверки, БезОбъекта);
				КонецЦикла;
			
			ИначеЕсли ИсточникДанных.ПолеДаты.ТабличнаяЧасть = ИсточникДанных.ПолеОбъекта.ТабличнаяЧасть Тогда
				
				Если БезОбъекта Тогда
					Поля = ИсточникДанных.ПолеДаты.Имя;
				Иначе
					Поля = ИсточникДанных.ПолеДаты.Имя + "," + ИсточникДанных.ПолеОбъекта.Имя;
				КонецЕсли;
				Значения = Данные[ИсточникДанных.ПолеДаты.ТабличнаяЧасть].Выгрузить(, Поля);
				Значения.Свернуть(Поля);
				Для Каждого Строка Из Значения Цикл
					ДобавитьСтрокуДанных(Строка, Строка, ИсточникДанных, ДанныеДляПроверки, БезОбъекта);
				КонецЦикла;
			Иначе
				Поле = ИсточникДанных.ПолеДаты.Имя;
				ЗначенияДаты = Данные[ИсточникДанных.ПолеДаты.ТабличнаяЧасть].Выгрузить(, Поле);
				ЗначенияДаты.Свернуть(Поле);
				
				Если Не БезОбъекта Тогда
					Поле = ИсточникДанных.ПолеОбъекта.Имя;
					ЗначенияОбъекта = Данные[ИсточникДанных.ПолеОбъекта.ТабличнаяЧасть].Выгрузить(, Поле);
					ЗначенияОбъекта.Свернуть(Поле);
				КонецЕсли;
				
				Для Каждого СтрокаДаты Из ЗначенияДаты Цикл
					СтрокаДаты = Новый Структура("Значение", ЗначениеПоля(СтрокаДаты, ИсточникДанных.ПолеДаты));
					Если БезОбъекта Тогда
						ДобавитьСтрокуДанных(СтрокаДаты, , ИсточникДанных, ДанныеДляПроверки, БезОбъекта);
					Иначе
						Для Каждого СтрокаОбъекта Из ЗначенияОбъекта Цикл
							ДобавитьСтрокуДанных(СтрокаДаты, СтрокаОбъекта, ИсточникДанных, ДанныеДляПроверки);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеДляПроверки;
	
КонецФункции

// Для процедур ДанныеДляПроверкиИзБазыДанных, ДанныеДляПроверкиИзОбъекта.
Функция ПолучитьИсточникиДанных(ДействующиеДаты, Таблица)
	
	ИсточникиДанных = ДействующиеДаты.ИсточникиДанных.Получить(Таблица);
	
	Если ИсточникиДанных = Неопределено
	 Или ИсточникиДанных.Количество() = 0 Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для проверки запрета изменения не найдены
			           |источники данных для таблицы ""%1"".'"),
			Таблица);
	КонецЕсли;
	
	Возврат ИсточникиДанных;
	
КонецФункции

// Для процедуры ДанныеДляПроверкиИзОбъекта.
Процедура ДобавитьСтрокуДанных(СтрокаДаты, СтрокаОбъекта, ИсточникДанных, ДанныеДляПроверки, БезОбъекта = Ложь)
	
	НоваяСтрока = ДанныеДляПроверки.Добавить();
	НоваяСтрока.Раздел = ИсточникДанных.Раздел;
	НоваяСтрока.Дата = ЗначениеПоля(СтрокаДаты, ИсточникДанных.ПолеДаты);
	
	Если БезОбъекта Или Не ЗначениеЗаполнено(ИсточникДанных.ПолеОбъекта.Имя) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока.Объект = ЗначениеПоля(СтрокаОбъекта, ИсточникДанных.ПолеОбъекта);
	
КонецПроцедуры

// Для процедуры ДобавитьСтрокуДанных1.
Функция ЗначениеПоля(ЗначенияПолей, Поле)
	
	Если ТипЗнч(ЗначенияПолей) = Тип("Структура") Тогда
		Возврат ЗначенияПолей.Значение;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Поле.Путь) Тогда
		Возврат ЗначенияПолей[Поле.Имя];
	КонецЕсли;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("ТекущаяСсылка", Поле.Тип);
	ТаблицаЗначений.Добавить().ТекущаяСсылка = ЗначенияПолей[Поле.Имя];
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТекущаяТаблица.ТекущаяСсылка КАК ТекущаяСсылка
	|ПОМЕСТИТЬ ТекущаяТаблица
	|ИЗ
	|	&ТаблицаЗначений КАК ТекущаяТаблица
	|;
	|ВЫБРАТЬ
	|	ЕстьNULL(ТекущаяТаблица.ТекущаяСсылка." + Поле.Путь + ", НЕОПРЕДЕЛЕНО) КАК ЗначениеРеквизита
	|ИЗ
	|	ТекущаяТаблица КАК ТекущаяТаблица";
	Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаЗначений);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ЗначениеРеквизита;
	
КонецФункции

// Для процедуры УстановкаПараметровСеанса.
Функция ЗначениеПараметраСеансаДействующиеДатыЗапретаИзменения()
	
	// Приоритеты дат запрета изменения.
	// 1. Для раздела, объекта и пользователя.
	// 2. Для раздела, объекта и группы пользователей.
	// 3. Для раздела, объекта и любого пользователя.
	// 4. Для раздела, любого объекта (объект = раздел) и пользователя.
	// 5. Для раздела, любого объекта (объект = раздел) и группы пользователей.
	// 6. Для раздела, любого объекта (объект = раздел) и любого пользователя.
	// 7. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и пользователя.
	// 8. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и группы пользователей.
	// 9. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и любого пользователя.
	
	// Приоритеты дат запрета загрузки.
	// 1. Для раздела, объекта и узла.
	// 2. Для раздела, объекта и любого узла.
	// 3. Для раздела, любого объекта (объект = раздел) и узла.
	// 4. Для раздела, любого объекта (объект = раздел) и любого узла.
	// 5. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и узла.
	// 6. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и любого узла.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Константы.ВерсияДатЗапретаИзменения,
	|	Константы.ИспользоватьДатыЗапретаЗагрузки,
	|	Константы.ИспользоватьДатыЗапретаИзменения
	|ИЗ
	|	Константы КАК Константы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоставыГруппПользователей.Пользователь КАК Пользователь,
	|	СоставыГруппПользователей.ГруппаПользователей
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
	|		ПО СоставыГруппПользователей.ГруппаПользователей = ДатыЗапретаИзменения.Пользователь
	|			И (СоставыГруппПользователей.ГруппаПользователей <> СоставыГруппПользователей.Пользователь)
	|ИТОГИ ПО
	|	Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыЗапретаИзменения.Раздел КАК Раздел,
	|	ДатыЗапретаИзменения.Объект КАК Объект,
	|	ДатыЗапретаИзменения.Пользователь,
	|	ДатыЗапретаИзменения.ОписаниеДатыЗапрета,
	|	ДатыЗапретаИзменения.ДатаЗапрета
	|ИЗ
	|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
	|ГДЕ
	|	НЕ(ДатыЗапретаИзменения.Пользователь <> ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей)
	|				И ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) <> ТИП(Справочник.Пользователи)
	|				И ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) <> ТИП(Справочник.ГруппыПользователей)
	|				И ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) <> ТИП(Справочник.ВнешниеПользователи)
	|				И ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) <> ТИП(Справочник.ГруппыВнешнихПользователей))
	|ИТОГИ ПО
	|	Раздел,
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыЗапретаИзменения.Раздел КАК Раздел,
	|	ДатыЗапретаИзменения.Объект КАК Объект,
	|	ДатыЗапретаИзменения.Пользователь,
	|	ДатыЗапретаИзменения.ОписаниеДатыЗапрета,
	|	ДатыЗапретаИзменения.ДатаЗапрета
	|ИЗ
	|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
	|ГДЕ
	|	ДатыЗапретаИзменения.Пользователь <> НЕОПРЕДЕЛЕНО
	|	И ДатыЗапретаИзменения.Пользователь <> ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ПустаяСсылка)
	|	И ДатыЗапретаИзменения.Пользователь <> ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей)
	|	И ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) <> ТИП(Справочник.Пользователи)
	|	И ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) <> ТИП(Справочник.ГруппыПользователей)
	|	И ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) <> ТИП(Справочник.ВнешниеПользователи)
	|	И ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) <> ТИП(Справочник.ГруппыВнешнихПользователей)
	|ИТОГИ ПО
	|	Раздел,
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазделыДатЗапретаИзменения.Ссылка КАК Ссылка,
	|	РазделыДатЗапретаИзменения.ТипЗначения КАК ТипЗначения,
	|	РазделыДатЗапретаИзменения.ИмяПредопределенныхДанных КАК Имя
	|ИЗ
	|	ПланВидовХарактеристик.РазделыДатЗапретаИзменения КАК РазделыДатЗапретаИзменения
	|ГДЕ
	|	РазделыДатЗапретаИзменения.Предопределенный";
	
	НачалоДня = НачалоДня(ТекущаяДатаСеанса());
	
	ДействующиеДаты = Новый Структура;
	ДействующиеДаты.Вставить("НачалоДня", НачалоДня);
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ЗначенияКонстант = РезультатыЗапроса[0].Выгрузить()[0];
		ДействующиеДаты.Вставить("Версия",                      ЗначенияКонстант.ВерсияДатЗапретаИзменения);
		ДействующиеДаты.Вставить("ЗапретИзмененияИспользуется", ЗначенияКонстант.ИспользоватьДатыЗапретаИзменения);
		ДействующиеДаты.Вставить("ЗапретЗагрузкиИспользуется",  ЗначенияКонстант.ИспользоватьДатыЗапретаЗагрузки);
		
		Выгрузка = РезультатыЗапроса[1].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		ГруппыПользователей = Новый Соответствие;
		Для Каждого Строка Из Выгрузка.Строки Цикл
			ГруппыПользователей.Вставить(Строка.Пользователь,
				Новый ФиксированныйМассив(Строка.Строки.ВыгрузитьКолонку("ГруппаПользователей")));
		КонецЦикла;
		ДействующиеДаты.Вставить("ГруппыПользователей", Новый ФиксированноеСоответствие(ГруппыПользователей));
		
		ДействующиеДаты.Вставить("ДляПользователей",     УстановленныеДаты(РезультатыЗапроса[2], НачалоДня));
		ДействующиеДаты.Вставить("ДляИнформационныхБаз", УстановленныеДаты(РезультатыЗапроса[3], НачалоДня));
		Разделы = РезультатыЗапроса[4].Выгрузить();
	Иначе
		ДействующиеДаты.Вставить("Версия", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
		ДействующиеДаты.Вставить("ЗапретИзмененияИспользуется", Ложь);
		ДействующиеДаты.Вставить("ЗапретЗагрузкиИспользуется",  Ложь);
		ДействующиеДаты.Вставить("ГруппыПользователей", Новый ФиксированноеСоответствие(Новый Соответствие));
		УстановленныеДаты = Новый Структура;
		УстановленныеДаты.Вставить("Разделы", Новый ФиксированноеСоответствие(Новый Соответствие));
		УстановленныеДаты.Вставить("ДатыЗапретаПоОбъектамНеУказаны", Истина);
		ДействующиеДаты.Вставить("ДляПользователей",     Новый ФиксированнаяСтруктура(УстановленныеДаты));
		ДействующиеДаты.Вставить("ДляИнформационныхБаз", Новый ФиксированнаяСтруктура(УстановленныеДаты));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РазделыДатЗапретаИзменения.Ссылка КАК Ссылка,
		|	РазделыДатЗапретаИзменения.ТипЗначения КАК ТипЗначения,
		|	РазделыДатЗапретаИзменения.ИмяПредопределенныхДанных КАК Имя
		|ИЗ
		|	ПланВидовХарактеристик.РазделыДатЗапретаИзменения КАК РазделыДатЗапретаИзменения
		|ГДЕ
		|	РазделыДатЗапретаИзменения.Предопределенный";
		Разделы = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ТипыАдресатов = Метаданные.ОпределяемыеТипы.АдресатЗапретаИзменения.Тип.Типы();
	ТипыАдресатовУзлов = Новый Массив;
	ТипыАдресатовПользователей = Новый Массив;
	Для каждого ТипАдресатов Из ТипыАдресатов Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипАдресатов);
		Если Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
			ТипыАдресатовУзлов.Добавить(ТипАдресатов);
		ИначеЕсли ТипАдресатов <> Тип("ПеречислениеСсылка.ВидыНазначенияДатЗапрета") Тогда
			ТипыАдресатовПользователей.Добавить(ТипАдресатов);
		КонецЕсли;
	КонецЦикла;
	
	Если ДействующиеДаты.ДляПользователей.Разделы.Количество() = 0 Тогда
		ДействующиеДаты.ЗапретИзмененияИспользуется = Ложь;
	КонецЕсли;
	
	Если ДействующиеДаты.ДляИнформационныхБаз.Разделы.Количество() = 0
	 Или ТипыАдресатовУзлов.Количество() = 0 Тогда
		
		ДействующиеДаты.ЗапретЗагрузкиИспользуется = Ложь;
	КонецЕсли;
	
	СсылкиИменРазделов = Новый Соответствие;
	ДействующиеДаты.Вставить("СвойстваРазделов", ТекущиеСвойстваРазделов(Разделы, СсылкиИменРазделов, ТипыАдресатовУзлов));
	ДействующиеДаты.Вставить("ИсточникиДанных",  ТекущиеИсточникиДанныхДляПроверкиЗапретаИзменения(СсылкиИменРазделов));
	
	Возврат Новый ФиксированнаяСтруктура(ДействующиеДаты);
	
КонецФункции

// Для процедуры ЗначениеПараметраСеансаДействующиеДатыЗапретаИзменения.

Функция УстановленныеДаты(РезультатЗапроса, НачалоДня)
	
	Выгрузка = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Разделы = Новый Соответствие;
	ДатыЗапретаПоОбъектамНеУказаны = Истина;
	
	Для Каждого Раздел Из Выгрузка.Строки Цикл
		Объекты = Новый Соответствие;
		Для Каждого Объект Из Раздел.Строки Цикл
			Адресаты = Новый Соответствие;
			Для Каждого Адресат Из Объект.Строки Цикл
				Адресаты.Вставить(Адресат.Пользователь, ДатаЗапретаПоОписанию(
					Адресат.ОписаниеДатыЗапрета, Адресат.ДатаЗапрета, НачалоДня));
			КонецЦикла;
			Объекты.Вставить(Объект.Объект, Новый ФиксированноеСоответствие(Адресаты));
			Если Объект.Объект <> Раздел.Раздел Тогда
				ДатыЗапретаПоОбъектамНеУказаны = Ложь;
			КонецЕсли;
		КонецЦикла;
		Разделы.Вставить(Раздел.Раздел, Новый ФиксированноеСоответствие(Объекты));
	КонецЦикла;
	
	УстановленныеДаты = Новый Структура;
	УстановленныеДаты.Вставить("Разделы", Новый ФиксированноеСоответствие(Разделы));
	УстановленныеДаты.Вставить("ДатыЗапретаПоОбъектамНеУказаны", ДатыЗапретаПоОбъектамНеУказаны);
	
	Возврат Новый ФиксированнаяСтруктура(УстановленныеДаты);
	
КонецФункции

Функция ТекущиеСвойстваРазделов(Разделы, СсылкиИменРазделов, ТипыАдресатовУзлов)
	
	Свойства = Новый Структура;
	Свойства.Вставить("ИспользоватьВнешнихПользователей", Ложь);
	
	ДатыЗапретаИзмененияПереопределяемый.НастройкаИнтерфейса(Свойства);
	
	Свойства.Вставить("ДатыЗапретаЗагрузкиВнедрены", ТипыАдресатовУзлов.Количество() > 0);
	
	ТипыАдресатов = Метаданные.ОпределяемыеТипы.АдресатЗапретаИзменения.Тип.Типы();
	ПустыеСсылкиУзлов = Новый Массив;
	
	Для Каждого ТипАдресатовУзлов Из ТипыАдресатовУзлов Цикл
		ПустаяСсылкаУзла = ПустаяСсылка(ТипАдресатовУзлов);
		ПустыеСсылкиУзлов.Добавить(ПустаяСсылкаУзла);
	КонецЦикла;
	
	Свойства.Вставить("ПустыеСсылкиУзловПлановОбмена", Новый ФиксированныйМассив(ПустыеСсылкиУзлов));
	
	Свойства.Вставить("ВсеРазделыБезОбъектов", Истина);
	
	РазделыБезОбъектов   = Новый Массив;
	ТипыОбъектовРазделов = Новый Соответствие;
	
	Для Каждого Раздел Из Разделы Цикл
		СсылкиИменРазделов.Вставить(Раздел.Имя, Раздел.Ссылка);
		
		ТипыОбъектов = Новый Массив;
		Для каждого Тип Из Раздел.ТипЗначения.Типы() Цикл
			Если Тип <> Тип("ПланВидовХарактеристикСсылка.РазделыДатЗапретаИзменения") Тогда
				Если ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
					МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
					СвойстваТипа = Новый Структура;
					СвойстваТипа.Вставить("ПолноеИмя",     МетаданныеТипа.ПолноеИмя());
					СвойстваТипа.Вставить("Представление", МетаданныеТипа.ПредставлениеОбъекта);
					ТипыОбъектов.Добавить(Новый ФиксированнаяСтруктура(СвойстваТипа));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ТипыОбъектовРазделов.Вставить(Раздел.Ссылка, Новый ФиксированныйМассив(ТипыОбъектов));
		
		Если ТипыОбъектов.Количество() <> 0 Тогда
			Свойства.ВсеРазделыБезОбъектов = Ложь;
		Иначе
			РазделыБезОбъектов.Добавить(Раздел.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Свойства.Вставить("РазделыБезОбъектов",   Новый ФиксированныйМассив(РазделыБезОбъектов));
	Свойства.Вставить("ТипыОбъектовРазделов", Новый ФиксированноеСоответствие(ТипыОбъектовРазделов));
	
	ПустойРаздел = ДатыЗапретаИзмененияСлужебныйПовтИсп.ПустойРаздел();
	
	Свойства.Вставить("БезРазделовИОбъектов", Разделы.Количество() = 0);
	Свойства.Вставить("ЕдинственныйРаздел", ?(Разделы.Количество() = 1, Разделы[0].Ссылка, ПустойРаздел));
	Свойства.Вставить("ПоказыватьРазделы", НЕ (  НЕ Свойства.ВсеРазделыБезОбъектов
	                                           И    ЗначениеЗаполнено(Свойства.ЕдинственныйРаздел)));
	
	Возврат Новый ФиксированнаяСтруктура(Свойства);
	
КонецФункции

Функция ТекущиеИсточникиДанныхДляПроверкиЗапретаИзменения(СсылкиИменРазделов)
	
	Если Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Новый ФиксированноеСоответствие(Новый Соответствие);
	КонецЕсли;
	
	ИсточникиДанных = Новый ТаблицаЗначений;
	ИсточникиДанных.Колонки.Добавить("Таблица",     Новый ОписаниеТипов("Строка"));
	ИсточникиДанных.Колонки.Добавить("ПолеДаты",    Новый ОписаниеТипов("Строка"));
	ИсточникиДанных.Колонки.Добавить("Раздел",      Новый ОписаниеТипов("Строка"));
	ИсточникиДанных.Колонки.Добавить("ПолеОбъекта", Новый ОписаниеТипов("Строка"));
	
	ИнтеграцияСтандартныхПодсистем.ПриЗаполненииИсточниковДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	
	Источники = Новый Соответствие;
	Таблицы = ИсточникиДанных.Скопировать(, "Таблица");
	Таблицы.Свернуть("Таблица");
	
	Для Каждого Строка Из Таблицы Цикл
		ИсточникиТаблицы = Новый Структура;
		Попытка
			Если СтрНачинаетсяС(ВРег(Строка.Таблица), ВРег("Регистр")) Тогда
				ТипЭлемента = Тип(СтрЗаменить(Строка.Таблица, ".", "КлючЗаписи."));
			Иначе
				ТипЭлемента = Тип(СтрЗаменить(Строка.Таблица, ".", "Ссылка."));
			КонецЕсли;
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЭлемента);
		Исключение
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Строка.Таблица);
		КонецПопытки;
		Если ОбъектМетаданных = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для проверки запрета изменения 
				           |в источнике данных неверно указана таблица
				           |""%1"".'"),
				Строка.Таблица);
		КонецЕсли;
		ЭтоРегистр = ОбщегоНазначения.ЭтоРегистр(ОбъектМетаданных);
		ИсточникиТаблицы.Вставить("ЭтоРегистр", ЭтоРегистр);
		
		ИсточникиДанныхТаблицы = ИсточникиДанных.НайтиСтроки(Новый Структура("Таблица", Строка.Таблица));
		СоставИсточников = Новый Массив;
		ПоляРегистра = Новый Соответствие;
		ТекстЗапроса = "";
		ТекстЗапросаТолькоДаты = "";
		
		Для Каждого Строка Из ИсточникиДанныхТаблицы Цикл
			Источник = Новый Структура;
			Источник.Вставить("Раздел",      СсылкиИменРазделов.Получить(Строка.Раздел));
			Источник.Вставить("ПолеДаты",    ПолеТаблицы(Строка, "ПолеДаты",    ОбъектМетаданных, ЭтоРегистр));
			Источник.Вставить("ПолеОбъекта", ПолеТаблицы(Строка, "ПолеОбъекта", ОбъектМетаданных, ЭтоРегистр));
			Если ЭтоРегистр Тогда
				ПоляРегистра.Вставить(Источник.ПолеДаты.Имя, Истина);
				Если ЗначениеЗаполнено(Источник.ПолеОбъекта.Имя) Тогда
					ДобавитьТекстЗапросаДляРегистра(ТекстЗапроса, Строка.Таблица, Источник);
					ПоляРегистра.Вставить(Источник.ПолеОбъекта.Имя, Истина);
				Иначе
					ДобавитьТекстЗапросаТолькоДатыДляРегистра(ТекстЗапроса, Строка.Таблица, Источник);
				КонецЕсли;
				ДобавитьТекстЗапросаТолькоДатыДляРегистра(ТекстЗапросаТолькоДаты, Строка.Таблица, Источник);
			Иначе
				Если ЗначениеЗаполнено(Источник.ПолеОбъекта.Имя) Тогда
					ДобавитьТекстЗапроса(ТекстЗапроса, Строка.Таблица, Источник);
				Иначе
					ДобавитьТекстЗапросаТолькоДаты(ТекстЗапроса, Строка.Таблица, Источник);
				КонецЕсли;
				ДобавитьТекстЗапросаТолькоДаты(ТекстЗапросаТолькоДаты, Строка.Таблица, Источник);
			КонецЕсли;
			СоставИсточников.Добавить(Новый ФиксированнаяСтруктура(Источник));
		КонецЦикла;
		ИсточникиТаблицы.Вставить("Состав", Новый ФиксированныйМассив(СоставИсточников));
		ИсточникиТаблицы.Вставить("ТекстЗапроса", ТекстЗапроса);
		ИсточникиТаблицы.Вставить("ТекстЗапросаТолькоДаты", ТекстЗапросаТолькоДаты);
		Если ЭтоРегистр Тогда
			Поля = "";
			Для Каждого КлючИЗначение Из ПоляРегистра Цикл
				Поля = Поля + "," + КлючИЗначение.Ключ;
			КонецЦикла;
			ИсточникиТаблицы.Вставить("ПоляРегистра", Сред(Поля, 2));
		КонецЕсли;
		Источники.Вставить(Строка.Таблица, Новый ФиксированнаяСтруктура(ИсточникиТаблицы));
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(Источники);
	
КонецФункции

// Для функции ТекущиеИсточникиДанныхДляПроверкиЗапретаИзменения.

Функция ПолеТаблицы(Источник, ВидПоля, ОбъектМетаданных, ЭтоРегистр)
	
	Свойства = Новый Структура("Имя, Тип, ТабличнаяЧасть, Путь, ИмяИПуть");
	
	Поле = Источник[ВидПоля];
	Поля = СтрРазделить(Поле, ".", Ложь);
	
	Если Поля.Количество() = 0 Тогда
		Если ВидПоля = "ПолеДаты" Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для проверки запрета изменения 
				           |в источнике данных для таблицы ""%1""
				           |не задано поле даты.'"),
				Источник.Таблица);
		Иначе
			Возврат Новый ФиксированнаяСтруктура(Свойства);
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Поля[0]) Тогда
		Если ВидПоля = "ПолеДаты" Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для проверки запрета изменения 
				           |в источнике данных для таблицы ""%1""
				           |неверно задано поле даты: ""%2""'"),
				Источник.Таблица, Поле);
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для проверки запрета изменения 
				           |в источнике данных для таблицы ""%1""
				           |неверно задано поле объекта: ""%2""'"),
				Источник.Таблица, Поле);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоРегистр
	 Или ОбъектМетаданных.ТабличныеЧасти.Найти(Поля[0]) = Неопределено Тогда
		
		Свойства.ИмяИПуть = Поле;
		Свойства.Имя = Поля[0];
		Свойства.Тип = ТипПоля(ОбъектМетаданных, Свойства.Имя);
		ПозицияТочки = СтрНайти(Поле, ".");
		Если ПозицияТочки > 0 Тогда
			Свойства.Путь = Сред(Поле, ПозицияТочки + 1);
		КонецЕсли;
		Возврат Новый ФиксированнаяСтруктура(Свойства);
	КонецЕсли;
	
	Если Поля.Количество() = 1 Тогда
		Если ВидПоля = "ПолеДаты" Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для проверки запрета изменения 
				           |в источнике данных для таблицы ""%1""
				           |неверно задано поле даты:
				           |не задано поле заданной табличной части ""%2"".'"),
				Источник.Таблица, Поля[0]);
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для проверки запрета изменения 
				           |в источнике данных для таблицы ""%1""
				           |неверно задано поле объекта:
				           |не задано поле заданной табличной части ""%2"".'"),
				Источник.Таблица, Поля[0]);
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Поля[1]) Тогда
		Если ВидПоля = "ПолеДаты" Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для проверки запрета изменения 
				           |в источнике данных для таблицы ""%1""
				           |неверно задано поле даты:
				           |неверно задано поле заданной табличной части ""%2"".'"),
				Источник.Таблица, Поля[0]);
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для проверки запрета изменения 
				           |в источнике данных для таблицы ""%1""
				           |неверно задано поле объекта:
				           |неверно задано поле заданной табличной части ""%2"".'"),
				Источник.Таблица, Поля[0]);
		КонецЕсли;
	КонецЕсли;
	
	Свойства.ТабличнаяЧасть = Поля[0];
	Свойства.Имя = Поля[1];
	Свойства.Тип = ТипПоля(ОбъектМетаданных, Свойства.Имя, Свойства.ТабличнаяЧасть);
	
	ПозицияТочки = СтрНайти(Поле, ".");
	Свойства.ИмяИПуть = Сред(Поле, ПозицияТочки + 1);
	
	ПозицияТочки = СтрНайти(Свойства.ИмяИПуть, ".");
	Если ПозицияТочки > 0 Тогда
		Свойства.Путь = Сред(Свойства.ИмяИПуть, ПозицияТочки + 1);
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(Свойства);
	
КонецФункции

Функция ТипПоля(ОбъектМетаданных, ИмяПоля, ИмяТабличнойЧасти = "")
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ИмяПоля КАК ТекущееПоле
	|ИЗ
	|	&ТекущаяТаблица КАК ТекущаяТаблица
	|ГДЕ
	|	ЛОЖЬ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяПоля", "ТекущаяТаблица." + ИмяПоля);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекущаяТаблица", ОбъектМетаданных.ПолноеИмя()
		+ ?(ЗначениеЗаполнено(ИмяТабличнойЧасти), "." + ИмяТабличнойЧасти, ""));
	
	Возврат Новый ОписаниеТипов(Запрос.Выполнить().Выгрузить().Колонки["ТекущееПоле"].ТипЗначения,, "Null");
	
КонецФункции

Процедура ДобавитьТекстЗапроса(ТекстЗапроса, Таблица, Источник)
	
	Если Не ЗначениеЗаполнено(Источник.ПолеДаты.ТабличнаяЧасть)
	   И Не ЗначениеЗаполнено(Источник.ПолеОбъекта.ТабличнаяЧасть)
	 Или Источник.ПолеДаты.ТабличнаяЧасть = Источник.ПолеОбъекта.ТабличнаяЧасть Тогда
		
		Если Источник.ПолеДаты.ТабличнаяЧасть = Источник.ПолеОбъекта.ТабличнаяЧасть Тогда
			ТекущаяТаблица = Таблица + "." + Источник.ПолеДаты.ТабличнаяЧасть;
		Иначе
			ТекущаяТаблица = Таблица;
		КонецЕсли;
		
		Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(&ПолеДаты КАК ДАТА) КАК Дата,
		|	ЕСТЬNULL(&ПолеОбъекта, НЕОПРЕДЕЛЕНО) КАК Объект
		|ИЗ
		|	&Таблица КАК ТекущаяТаблица
		|ГДЕ
		|	ТекущаяТаблица.Ссылка = &Ссылка";
		Текст = СтрЗаменить(Текст, "&Таблица",     ТекущаяТаблица);
		Текст = СтрЗаменить(Текст, "&ПолеДаты",    "ТекущаяТаблица." + Источник.ПолеДаты.ИмяИПуть);
		Текст = СтрЗаменить(Текст, "&ПолеОбъекта", "ТекущаяТаблица." + Источник.ПолеОбъекта.ИмяИПуть);
	Иначе
		Если ЗначениеЗаполнено(Источник.ПолеДаты.ТабличнаяЧасть) Тогда
			ТаблицаПоляДаты = Таблица + "." + Источник.ПолеДаты.ТабличнаяЧасть;
		Иначе
			ТаблицаПоляДаты = Таблица;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.ПолеОбъекта.ТабличнаяЧасть) Тогда
			ТаблицаПоляОбъекта = Таблица + "." + Источник.ПолеОбъекта.ТабличнаяЧасть;
		Иначе
			ТаблицаПоляОбъекта = Таблица;
		КонецЕсли;
		
		Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(&ПолеДаты КАК ДАТА) КАК Дата,
		|	ЕСТЬNULL(&ПолеОбъекта, НЕОПРЕДЕЛЕНО) КАК Объект
		|ИЗ
		|	ТаблицаДаты КАК ТаблицаПоляДаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОбъекта КАК ТаблицаПоляОбъекта
		|		ПО ТаблицаПоляДаты.Ссылка = ТаблицаПоляОбъекта.Ссылка
		|ГДЕ
		|	ТаблицаПоляДаты.Ссылка = &Ссылка";
		Текст = СтрЗаменить(Текст, "ТаблицаДаты",    ТаблицаПоляДаты);
		Текст = СтрЗаменить(Текст, "ТаблицаОбъекта", ТаблицаПоляОбъекта);
		Текст = СтрЗаменить(Текст, "&ПолеДаты",    "ТаблицаПоляДаты."    + Источник.ПолеДаты.ИмяИПуть);
		Текст = СтрЗаменить(Текст, "&ПолеОбъекта", "ТаблицаПоляОбъекта." + Источник.ПолеОбъекта.ИмяИПуть);
	КонецЕсли;
	
	ДобавитьТекстЗапросаВПакет(ТекстЗапроса, Текст);
	
КонецПроцедуры

Процедура ДобавитьТекстЗапросаТолькоДаты(ТекстЗапроса, Таблица, Источник)
	
	Если Не ЗначениеЗаполнено(Источник.ПолеДаты.ТабличнаяЧасть) Тогда
		Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(&ПолеДаты КАК ДАТА) КАК Дата
		|ИЗ
		|	&Таблица КАК ТекущаяТаблица
		|ГДЕ
		|	ТекущаяТаблица.Ссылка = &Ссылка";
		Текст = СтрЗаменить(Текст, "&Таблица", Таблица);
		Текст = СтрЗаменить(Текст, "&ПолеДаты", "ТекущаяТаблица." + Источник.ПолеДаты.ИмяИПуть);
	Иначе
		Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВЫРАЗИТЬ(&ПолеДаты КАК ДАТА) КАК Дата
		|ИЗ
		|	&Таблица КАК ТекущаяТаблица
		|ГДЕ
		|	ТекущаяТаблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		Текст = СтрЗаменить(Текст, "&Таблица", Таблица + "." + Источник.ПолеДаты.ТабличнаяЧасть);
		Текст = СтрЗаменить(Текст, "&ПолеДаты", "ТекущаяТаблица." + Источник.ПолеДаты.ИмяИПуть);
	КонецЕсли;
	
	ДобавитьТекстЗапросаВПакет(ТекстЗапроса, Текст);
	
КонецПроцедуры

Процедура ДобавитьТекстЗапросаДляРегистра(ТекстЗапроса, Таблица, Источник)
	
	Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(&ПолеДаты КАК ДАТА) КАК Дата,
	|	ЕСТЬNULL(&ПолеОбъекта, НЕОПРЕДЕЛЕНО) КАК Объект
	|ИЗ
	|	&Таблица КАК ТекущаяТаблица
	|ГДЕ
	|	&УсловиеОтбора";
	
	Текст = СтрЗаменить(Текст, "&Таблица", Таблица);
	Текст = СтрЗаменить(Текст, "&ПолеДаты",    "ТекущаяТаблица." + Источник.ПолеДаты.ИмяИПуть);
	Текст = СтрЗаменить(Текст, "&ПолеОбъекта", "ТекущаяТаблица." + Источник.ПолеОбъекта.ИмяИПуть);
	
	ДобавитьТекстЗапросаВПакет(ТекстЗапроса, Текст);
	
КонецПроцедуры

Процедура ДобавитьТекстЗапросаТолькоДатыДляРегистра(ТекстЗапроса, Таблица, Источник)
	
	Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫРАЗИТЬ(&ПолеДаты КАК ДАТА) КАК Дата
	|ИЗ
	|	&Таблица КАК ТекущаяТаблица
	|ГДЕ
	|	&УсловиеОтбора
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Текст = СтрЗаменить(Текст, "&Таблица", Таблица);
	Текст = СтрЗаменить(Текст, "&ПолеДаты", "ТекущаяТаблица." + Источник.ПолеДаты.ИмяИПуть);
	
	ДобавитьТекстЗапросаВПакет(ТекстЗапроса, Текст);
	
КонецПроцедуры

Процедура ДобавитьТекстЗапросаВПакет(ТекстПакетаЗапросов, ТекстЗапроса)
	
	Если Не ЗначениеЗаполнено(ТекстПакетаЗапросов) Тогда
		ТекстПакетаЗапросов = ТекстЗапроса;
		Возврат;
	КонецЕсли;
	
	ТекстПакетаЗапросов = ТекстПакетаЗапросов + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + ТекстЗапроса;
	
КонецПроцедуры

#КонецОбласти
