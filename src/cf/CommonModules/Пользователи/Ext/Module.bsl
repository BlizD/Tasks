////////////////////////////////////////////////////////////////////////////////
// Подсистема "Пользователи".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Основные процедуры и функции.

// См. одноименную функцию в общем модуле ПользователиКлиентСервер.
Функция АвторизованныйПользователь() Экспорт
	
	Возврат ПользователиКлиентСервер.АвторизованныйПользователь();
	
КонецФункции

// См. одноименную функцию в общем модуле ПользователиКлиентСервер.
Функция ТекущийПользователь() Экспорт
	
	Возврат ПользователиКлиентСервер.ТекущийПользователь();
	
КонецФункции

// Проверяет, является ли текущий или указанный пользователь полноправным.
// 
// Полноправным считается пользователь, который
// а) при не пустом списке пользователей информационной базы, 
//    имеет роль ПолныеПрава и роль для администрирования системы (если ПроверятьПраваАдминистрированияСистемы = Истина)
// б) при пустом списке пользователей информационной базы
//    основная роль конфигурации не задана или ПолныеПрава.
//
// Параметры:
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ.
//               - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - осуществляется
//                    поиск пользователя ИБ по уникальному идентификатору, заданному в реквизите.
//                    ИдентификаторПользователяИБ. Если пользователь ИБ не найден, возвращается Ложь.
//               - ПользовательИнформационнойБазы - проверяется указанный пользователь ИБ.
//
//  ПроверятьПраваАдминистрированияСистемы - Булево - если задано Истина, тогда проверяется наличие
//                 роли для администрирования системы.
//
//  УчитыватьПривилегированныйРежим - Булево - если задано Истина, тогда для текущего пользователя
//                 функция возвращает Истина, когда установлен привилегированный режим.
//
// Возвращаемое значение:
//  Булево - если Истина, пользователь является полноправным.
//
Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	ПривилегированныйРежимУстановлен = ПривилегированныйРежим();
	
	УстановитьПривилегированныйРежим(Истина);
	Свойства = СвойстваПроверяемогоПользователяИБ(Пользователь);
	ПользовательИБ = Свойства.ПользовательИБ;
	
	ПроверитьРольПолныеПрава = Не ПроверятьПраваАдминистрированияСистемы;
	ПроверитьРольАдминистратораСистемы = ПроверятьПраваАдминистрированияСистемы;
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли НЕ Свойства.УказанТекущийПользовательИБ Тогда
		// Для не текущего пользователя ИБ проверяются роли в записанном пользователе ИБ.
		Если ПроверитьРольПолныеПрава
		   И НЕ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ПроверитьРольАдминистратораСистемы
		   И НЕ ПользовательИБ.Роли.Содержит(РольАдминистратораСистемы(Истина)) Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	Иначе
		Если УчитыватьПривилегированныйРежим И ПривилегированныйРежимУстановлен Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если СтандартныеПодсистемыПовтИсп.ПривилегированныйРежимУстановленПриЗапуске() Тогда
			// Когда клиентское приложение запущено с параметром UsePrivilegedMode, тогда
			// пользователь является полноправным, если привилегированный режим установлен.
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПользовательИБ.Имя) И Метаданные.ОсновныеРоли.Количество() = 0 Тогда
			// Когда основные роли не указаны, тогда у неуказанного пользователя
			// есть все права (как в привилегированном режиме).
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПользовательИБ.Имя)
		   И ПривилегированныйРежимУстановлен
		   И ПравоДоступа("Администрирование", Метаданные, ПользовательИБ) Тогда
			// Когда у неуказанного пользователя есть право Администрирование,
			// тогда привилегированный режим учитывается всегда для поддержки
			// параметра запуска UsePrivilegedMode у не клиентских приложений.
			Возврат Истина;
		КонецЕсли;
		
		// Для текущего пользователя ИБ проверяются роли не в записанном пользователе ИБ,
		// а роли в текущем сеансе.
		Если ПроверитьРольПолныеПрава
		   И НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда // Не заменять на РолиДоступны.
			Возврат Ложь;
		КонецЕсли;
		Если ПроверитьРольАдминистратораСистемы
		   И НЕ РольДоступна(РольАдминистратораСистемы(Истина)) Тогда // Не заменять на РолиДоступны.
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает доступность хотя бы одной из указанных ролей или полноправность
// пользователя (текущего или указанного).
//
// Параметры:
//  ИменаРолей   - Строка - имена ролей, разделенные запятыми, доступность которых проверяется.
//
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ.
//               - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - осуществляется
//                    поиск пользователя ИБ по уникальному идентификатору, заданному в реквизите.
//                    ИдентификаторПользователяИБ. Если пользователь ИБ не найден, возвращается Ложь.
//               - ПользовательИнформационнойБазы - проверяется указанный пользователь ИБ.
//
//  УчитыватьПривилегированныйРежим - Булево - если задано Истина, тогда для текущего пользователя
//                 функция возвращает Истина, когда установлен привилегированный режим.
//
// Возвращаемое значение:
//  Булево - Истина, если хотя бы одна из указанных ролей доступна,
//           или функция ЭтоПолноправныйПользователь(Пользователь) возвращает Истина.
//
Функция РолиДоступны(ИменаРолей,
                     Пользователь = Неопределено,
                     УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	РольАдминистраторСистемы = ЭтоПолноправныйПользователь(Пользователь, Истина, УчитыватьПривилегированныйРежим);
	РольПолныеПрава          = ЭтоПолноправныйПользователь(Пользователь, Ложь,   УчитыватьПривилегированныйРежим);
	
	Если РольАдминистраторСистемы И РольПолныеПрава Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивИменРолей = СтрРазделить(ИменаРолей, ",", Ложь);
	
	ТребуетсяРольАдминистраторСистемы = Ложь;
	НазначениеРолей = ПользователиСлужебныйПовтИсп.Параметры().НазначениеРолей;
	
	Для Каждого ИмяРоли Из МассивИменРолей Цикл
		Если НазначениеРолей.ТолькоДляАдминистраторовСистемы.Получить(ИмяРоли) <> Неопределено Тогда
			ТребуетсяРольАдминистраторСистемы = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если РольАдминистраторСистемы И    ТребуетсяРольАдминистраторСистемы
	 Или РольПолныеПрава          И Не ТребуетсяРольАдминистраторСистемы Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Свойства = СвойстваПроверяемогоПользователяИБ(Пользователь);
	ПользовательИБ = Свойства.ПользовательИБ;
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
		МодульУправлениеДоступомСлужебный.ПередПроверкойДоступностиРолей(МассивИменРолей);
	КонецЕсли;
	
	Для Каждого ИмяРоли Из МассивИменРолей Цикл
		
		Если Свойства.УказанТекущийПользовательИБ Тогда
			Если РольДоступна(СокрЛП(ИмяРоли)) Тогда // Не заменять на РолиДоступны.
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.Найти(СокрЛП(ИмяРоли))) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет наличие хотя бы одного вида аутентификации у пользователя ИБ.
//
// Параметры:
//  ОписаниеПользователяИБ - УникальныйИдентификатор - пользователя ИБ.
//                         - Структура - содержит 3 свойства аутентификации:
//                             * АутентификацияСтандартная - Булево -
//                             * АутентификацияОС          - Булево -
//                             * АутентификацияOpenID      - Булево -
//                         - ПользовательИнформационнойБазы -
//                         - СправочникСсылка.Пользователи -
//                         - СправочникСсылка.ВнешниеПользователи -
//
// Возвращаемое значение:
//  Булево - Истина, если хотя бы одно свойство аутентификации равно Истина.
//
Функция ВходВПрограммуРазрешен(ОписаниеПользователяИБ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УникальныйИдентификатор = Неопределено;
	
	Если ТипЗнч(ОписаниеПользователяИБ) = Тип("СправочникСсылка.Пользователи")
	 Или ТипЗнч(ОписаниеПользователяИБ) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		
		УникальныйИдентификатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ОписаниеПользователяИБ, "ИдентификаторПользователяИБ");
		
		Если ТипЗнч(ОписаниеПользователяИБ) <> Тип("УникальныйИдентификатор") Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОписаниеПользователяИБ) = Тип("УникальныйИдентификатор") Тогда
		УникальныйИдентификатор = ОписаниеПользователяИБ;
	КонецЕсли;
	
	Если УникальныйИдентификатор <> Неопределено Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(УникальныйИдентификатор);
		
		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ПользовательИБ = ОписаниеПользователяИБ;
	КонецЕсли;
	
	Возврат ПользовательИБ.АутентификацияСтандартная
		ИЛИ ПользовательИБ.АутентификацияОС
		ИЛИ ПользовательИБ.АутентификацияOpenID;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые в работе элементов управляемых форм.

// Возвращает список пользователей, групп пользователей, внешних пользователей и
// групп внешних пользователей.
//  Используется в обработчиках событий ОкончаниеВводаТекста и АвтоПодбор.
//
// Параметры:
//  Текст         - Строка - символы введенные пользователем.
//
//  ВключаяГруппы - Булево - если Истина, включать группы пользователей и внешних пользователей.
//                  Если ФО ИспользоватьГруппыПользователей отключена, параметр игнорируется.
//
//  ВключаяВнешнихПользователей - Неопределено, Булево - когда Неопределено, используется значение,
//                  возвращаемое функцией ВнешниеПользователи.ИспользоватьВнешнихПользователей().
//
//  БезПользователей - Булево - если Истина, то элементы справочника Пользователи
//                  исключаются из результата.
//
Функция СформироватьДанныеВыбораПользователя(Знач Текст,
                                             Знач ВключаяГруппы = Истина,
                                             Знач ВключаяВнешнихПользователей = Неопределено,
                                             Знач БезПользователей = Ложь) Экспорт
	
	ВключаяГруппы = ВключаяГруппы И ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("ВключаяГруппы", ВключаяГруппы);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Ссылка,
	|	"""" КАК Наименование,
	|	-1 КАК НомерКартинки
	|ГДЕ
	|	ЛОЖЬ";
	
	Если НЕ БезПользователей Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Пользователи.Ссылка,
		|	Пользователи.Наименование,
		|	1 КАК НомерКартинки
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Наименование ПОДОБНО &Текст
		|	И Пользователи.Недействителен = ЛОЖЬ
		|	И Пользователи.Служебный = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГруппыПользователей.Ссылка,
		|	ГруппыПользователей.Наименование,
		|	3
		|ИЗ
		|	Справочник.ГруппыПользователей КАК ГруппыПользователей
		|ГДЕ
		|	&ВключаяГруппы
		|	И ГруппыПользователей.Наименование ПОДОБНО &Текст";
		
		Запрос.Текст = Запрос.Текст + " ОБЪЕДИНИТЬ ВСЕ " + ТекстЗапроса;
	КонецЕсли;
	
	Если ТипЗнч(ВключаяВнешнихПользователей) <> Тип("Булево") Тогда
		ВключаяВнешнихПользователей = ВнешниеПользователи.ИспользоватьВнешнихПользователей();
	КонецЕсли;
	ВключаяВнешнихПользователей = ВключаяВнешнихПользователей
	                            И ПравоДоступа("Чтение", Метаданные.Справочники.ВнешниеПользователи);
	
	Если ВключаяВнешнихПользователей Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВнешниеПользователи.Ссылка,
		|	ВнешниеПользователи.Наименование,
		|	7 КАК НомерКартинки
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|ГДЕ
		|	ВнешниеПользователи.Наименование ПОДОБНО &Текст
		|	И ВнешниеПользователи.Недействителен = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГруппыВнешнихПользователей.Ссылка,
		|	ГруппыВнешнихПользователей.Наименование,
		|	9
		|ИЗ
		|	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
		|ГДЕ
		|	&ВключаяГруппы
		|	И ГруппыВнешнихПользователей.Наименование ПОДОБНО &Текст";
		
		Запрос.Текст = Запрос.Текст + " ОБЪЕДИНИТЬ ВСЕ " + ТекстЗапроса;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Наименование, , БиблиотекаКартинок["СостояниеПользователя" + Формат(Выборка.НомерКартинки + 1, "ЧЦ=2; ЧВН=; ЧГ=")]);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Процедура ЗаполнитьНомераКартинокПользователей заполняет номера картинок
// пользователей, групп пользователей, внешних пользователей и групп внешних пользователей.
// 
// Параметры:
//  Таблица      - ДанныеФормыКоллекция, ДанныеФормыДерево - список для заполнения.
//  ИмяПоляПользователь - Строка - имя поля содержащего ссылку на пользователя, группу пользователей,
//                 внешнего пользователя или группу внешних пользователей.
//  ИмяПоляНомераКартинки - Строка - имя поля содержащего номер картинки, который нужно установить.
//  ИдентификаторСтроки  - Неопределено, Число - идентификатор строки (не порядковый номер),
//                 когда Неопределено, заполнить картинки для всех строк таблицы.
//
Процедура ЗаполнитьНомераКартинокПользователей(Знач Таблица,
                                               Знач ИмяПоляПользователь,
                                               Знач ИмяПоляНомераКартинки,
                                               Знач ИдентификаторСтроки = Неопределено,
                                               Знач ОбработатьИерархиюВторогоИТретьегоУровней = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИдентификаторСтроки = Неопределено Тогда
		МассивСтрок = Неопределено;
		
	ИначеЕсли ТипЗнч(ИдентификаторСтроки) = Тип("Массив") Тогда
		МассивСтрок = Новый Массив;
		Для каждого Идентификатор Из ИдентификаторСтроки Цикл
			МассивСтрок.Добавить(Таблица.НайтиПоИдентификатору(Идентификатор));
		КонецЦикла;
	Иначе
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Таблица.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЕсли;
	
	Если ТипЗнч(Таблица) = Тип("ДанныеФормыДерево") Тогда
		Если МассивСтрок = Неопределено Тогда
			МассивСтрок = Таблица.ПолучитьЭлементы();
		КонецЕсли;
		ТаблицаПользователей = Новый ТаблицаЗначений;
		ТаблицаПользователей.Колонки.Добавить(ИмяПоляПользователь, Метаданные.РегистрыСведений.СоставыГруппПользователей.Измерения.ГруппаПользователей.Тип);
		Для каждого Строка Из МассивСтрок Цикл
			ТаблицаПользователей.Добавить()[ИмяПоляПользователь] = Строка[ИмяПоляПользователь];
			Если ОбработатьИерархиюВторогоИТретьегоУровней Тогда
				Для каждого Строка2 Из Строка.ПолучитьЭлементы() Цикл
					ТаблицаПользователей.Добавить()[ИмяПоляПользователь] = Строка2[ИмяПоляПользователь];
					Для каждого Строка3 Из Строка2.ПолучитьЭлементы() Цикл
						ТаблицаПользователей.Добавить()[ИмяПоляПользователь] = Строка3[ИмяПоляПользователь];
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Таблица) = Тип("ДанныеФормыКоллекция") Тогда
		Если МассивСтрок = Неопределено Тогда
			МассивСтрок = Таблица;
		КонецЕсли;
		ТаблицаПользователей = Новый ТаблицаЗначений;
		ТаблицаПользователей.Колонки.Добавить(ИмяПоляПользователь, Метаданные.РегистрыСведений.СоставыГруппПользователей.Измерения.ГруппаПользователей.Тип);
		Для каждого Строка Из МассивСтрок Цикл
			ТаблицаПользователей.Добавить()[ИмяПоляПользователь] = Строка[ИмяПоляПользователь];
		КонецЦикла;
	Иначе
		Если МассивСтрок = Неопределено Тогда
			МассивСтрок = Таблица;
		КонецЕсли;
		ТаблицаПользователей = Таблица.Выгрузить(МассивСтрок, ИмяПоляПользователь);
	КонецЕсли;
	
	Запрос = Новый Запрос(СтрЗаменить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Пользователи.ИмяПоляПользователь КАК Пользователь
	|ПОМЕСТИТЬ Пользователи
	|ИЗ
	|	&Пользователи КАК Пользователи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Пользователь,
	|	ВЫБОР
	|		КОГДА Пользователи.Пользователь = НЕОПРЕДЕЛЕНО
	|			ТОГДА -1
	|		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.Пользователи)
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.Пользователи).ПометкаУдаления
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.ГруппыПользователей)
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.ГруппыПользователей).ПометкаУдаления
	|						ТОГДА 2
	|					ИНАЧЕ 3
	|				КОНЕЦ
	|		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.ВнешниеПользователи).ПометкаУдаления
	|						ТОГДА 6
	|					ИНАЧЕ 7
	|				КОНЕЦ
	|		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.ГруппыВнешнихПользователей)
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.ГруппыВнешнихПользователей).ПометкаУдаления
	|						ТОГДА 8
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		ИНАЧЕ -2
	|	КОНЕЦ КАК НомерКартинки
	|ИЗ
	|	Пользователи КАК Пользователи", "ИмяПоляПользователь", ИмяПоляПользователь));
	Запрос.УстановитьПараметр("Пользователи", ТаблицаПользователей);
	НомераКартинок = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка Из МассивСтрок Цикл
		НайденнаяСтрока = НомераКартинок.Найти(Строка[ИмяПоляПользователь], "Пользователь");
		Строка[ИмяПоляНомераКартинки] = ?(НайденнаяСтрока = Неопределено, -2, НайденнаяСтрока.НомерКартинки);
		Если ОбработатьИерархиюВторогоИТретьегоУровней Тогда
			Для каждого Строка2 Из Строка.ПолучитьЭлементы() Цикл
				НайденнаяСтрока = НомераКартинок.Найти(Строка2[ИмяПоляПользователь], "Пользователь");
				Строка2[ИмяПоляНомераКартинки] = ?(НайденнаяСтрока = Неопределено, -2, НайденнаяСтрока.НомерКартинки);
				Для каждого Строка3 Из Строка2.ПолучитьЭлементы() Цикл
					НайденнаяСтрока = НомераКартинок.Найти(Строка3[ИмяПоляПользователь], "Пользователь");
					Строка3[ИмяПоляНомераКартинки] = ?(НайденнаяСтрока = Неопределено, -2, НайденнаяСтрока.НомерКартинки);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые при обновлении информационной базы.

// Используется при обновлении и начальном заполнении информационной базы.
// 1) Создает первого администратора и сопоставляет его с новым или существующим
//    пользователем в справочнике Пользователи.
// 2) Сопоставляет администратора, указанного в параметре ПользовательИБ с новым или
//    существующим пользователем в справочнике Пользователи.
//
// Параметры:
//  ПользовательИБ - Неопределено - создать первого администратора, если не существует.
//                 - ПользовательИнформационнойБазы - используется, когда нужно сопоставить
//                   существующего администратора с новым или существующим пользователем
//                   в справочнике Пользователи.
//
// Возвращаемое значение:
//  Неопределено                  - первый администратор уже существует.
//  СправочникСсылка.Пользователи - пользователь в справочнике, с которым сопоставлен созданный
//                                  первый администратор или указанный существующий.
//
Функция СоздатьАдминистратора(ПользовательИБ = Неопределено) Экспорт
	
	Если Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		ВызватьИсключение НСтр("ru = 'Справочник Пользователи недоступен в неразделенном режиме.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Добавление администратора.
	Если ПользовательИБ = Неопределено Тогда
		ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
		
		Если ПользователиИБ.Количество() = 0 Тогда
			Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
				ВызватьИсключение
					НСтр("ru = 'Невозможно автоматически создать первого администратора области данных.'");
			КонецЕсли;
			ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
			ПользовательИБ.Имя       = "Администратор";
			ПользовательИБ.ПолноеИмя = ПользовательИБ.Имя;
			ПользовательИБ.Роли.Очистить();
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
			РольАдминистратораСистемы = РольАдминистратораСистемы();
			Если НЕ ПользовательИБ.Роли.Содержит(РольАдминистратораСистемы) Тогда
				ПользовательИБ.Роли.Добавить(РольАдминистратораСистемы);
			КонецЕсли;
			ПользовательИБ.Записать();
		Иначе
			// Если существует пользователь с правами администратора,
			// тогда первый администратор уже создан и его не требуется создавать.
			Для Каждого ТекущийПользовательИБ Из ПользователиИБ Цикл
				Если ПользователиСлужебный.РолиАдминистратораДоступны(ТекущийПользовательИБ) Тогда
					Возврат Неопределено; // Первый администратор уже создан.
				КонецЕсли;
			КонецЦикла;
			// Первый администратор создан некорректно.
			Если Метаданные.Роли.ПолныеПрава = РольАдминистратораСистемы(Истина) Тогда
				ТекстОшибки =
					НСтр("ru = 'Список пользователей информационной базы не пустой, однако
					           |не удалось найти ни одного пользователя с ролью Полные права.
					           |
					           |Вероятно, пользователи создавались в конфигураторе.
					           |Требуется назначить роль Полные права хотя бы одному пользователю.'");
			Иначе
				ТекстОшибки =
					НСтр("ru = 'Список пользователей информационной базы не пустой, однако не удалось
					           |найти ни одного пользователя с ролями Полные права и Администратор системы.
					           |
					           |Вероятно, пользователи создавались в конфигураторе.
					           |Требуется назначить роли Полные права и Администратор системы хотя бы одному пользователю.'");
			КонецЕсли;
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Иначе
		Если Не ПользователиСлужебный.РолиАдминистратораДоступны(ПользовательИБ) Тогда
			
			Если Метаданные.Роли.ПолныеПрава = РольАдминистратораСистемы(Истина) Тогда
				ТекстОшибки =
					НСтр("ru = 'Невозможно создать пользователя в справочнике для пользователя
					           |информационной базы ""%1"",
					           |так как у него нет роли Полные права.
					           |
					           |Вероятно, пользователь был создан в конфигураторе. Для автоматического
					           |создания пользователя в справочнике требуется назначить ему роль Полные права.'");
			Иначе
				ТекстОшибки =
					НСтр("ru = 'Невозможно создать пользователя в справочнике для пользователя
					           |информационной базы ""%1"",
					           |так как у него нет ролей Полные права и Администратор системы.
					           |
					           |Вероятно, пользователь был создан в конфигураторе.
					           |Для автоматического создания пользователя в справочнике требуется
					           |назначить ему роли Полные права и Администратор системы.'");
			КонецЕсли;
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка(ПользовательИБ));
		КонецЕсли;
		
		НайтиНеоднозначныхПользователейИБ(Неопределено, ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ПользователиСлужебный.ПользовательПоИдентификаторуСуществует(
	         ПользовательИБ.УникальныйИдентификатор) Тогда
		
		Пользователь = Справочники.Пользователи.НайтиПоРеквизиту(
			"ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
		
		// Если администратор сопоставлен с внешним пользователем - это ошибка,
		// требуется очистить сопоставление.
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			
			ВнешнийПользователь = Справочники.ВнешниеПользователи.НайтиПоРеквизиту(
				"ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
			
			ВнешнийПользовательОбъект = ВнешнийПользователь.ПолучитьОбъект();
			ВнешнийПользовательОбъект.ИдентификаторПользователяИБ = Неопределено;
			ВнешнийПользовательОбъект.ОбменДанными.Загрузка = Истина;
			ВнешнийПользовательОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Справочники.Пользователи.НайтиПоНаименованию(ПользовательИБ.ПолноеИмя);
		
		Если ЗначениеЗаполнено(Пользователь)
		   И ЗначениеЗаполнено(Пользователь.ИдентификаторПользователяИБ)
		   И Пользователь.ИдентификаторПользователяИБ <> ПользовательИБ.УникальныйИдентификатор
		   И ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		         Пользователь.ИдентификаторПользователяИБ) <> Неопределено Тогда
			
			Пользователь = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Справочники.Пользователи.СоздатьЭлемент();
		ПользовательСоздан = Истина;
	Иначе
		Пользователь = Пользователь.ПолучитьОбъект();
		ПользовательСоздан = Ложь;
	КонецЕсли;
	
	Пользователь.Наименование = ПользовательИБ.ПолноеИмя;
	
	ОписаниеПользователяИБ = Новый Структура;
	ОписаниеПользователяИБ.Вставить("Действие", "Записать");
	ОписаниеПользователяИБ.Вставить(
		"УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
	
	Пользователь.ДополнительныеСвойства.Вставить(
		"ОписаниеПользователяИБ", ОписаниеПользователяИБ);
	
	Пользователь.ДополнительныеСвойства.Вставить(
		"СозданиеАдминистратора",
		?(ПользовательИБ = Неопределено,
		  НСтр("ru = 'Выполнено создание первого администратора.'"),
		  ?(ПользовательСоздан,
		    НСтр("ru = 'Администратор сопоставлен с новым пользователем справочника.'"),
		    НСтр("ru = 'Администратор сопоставлен с существующим пользователем справочника.'")) ) );
		
	Пользователь.Записать();
	
	Возврат Пользователь.Ссылка;
	
КонецФункции

// Устанавливает константу ИспользоватьГруппыПользователей в Истина,
// если существует хотя бы одна группа пользователей в справочнике.
//
// Используется при обновлении информационной базы.
//
Процедура ПриНаличииГруппПользователейУстановитьИспользование() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ГруппыПользователей КАК ГруппыПользователей
	|ГДЕ
	|	ГруппыПользователей.Ссылка <> ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
	|ГДЕ
	|	ГруппыВнешнихПользователей.Ссылка <> ЗНАЧЕНИЕ(Справочник.ГруппыВнешнихПользователей.ВсеВнешниеПользователи)");
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Константы.ИспользоватьГруппыПользователей.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с пользователями информационной базы.

// Возвращает полное имя неуказанного пользователя для отображения в интерфейсах.
Функция ПолноеИмяНеуказанногоПользователя() Экспорт
	
	Возврат НСтр("ru = '<Не указан>'");
	
КонецФункции

// Возвращает ссылку неуказанного пользователя.
// Параметры:
//  СоздатьЕслиНеСуществует - Булево - начальное значение Ложь. Если указать Истина,
//                            тогда будет выполнено создание пользователя "<Не указан>".
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - неуказанный пользователь существует в справочнике.
//  Неопределено - неуказанный пользователь не существует в справочнике.
//
Функция СсылкаНеуказанногоПользователя(СоздатьЕслиНеСуществует = Ложь) Экспорт
	
	Ссылка = ПользователиСлужебный.СвойстваНеуказанногоПользователя().Ссылка;
	
	Если Ссылка = Неопределено И СоздатьЕслиНеСуществует Тогда
		Ссылка = ПользователиСлужебный.СоздатьНеуказанногоПользователя();
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

// Проверяет сопоставлен ли пользовательИБ с элементом справочника Пользователи или
// с элементом справочника ВнешниеПользователи.
// 
// Параметры:
//  ПользовательИБ - Строка - имя пользователя ИБ.
//                 - УникальныйИдентификатор - уникальный идентификатор пользователя ИБ.
//                 - ПользовательИнформационнойБазы -
//
//  УчетнаяЗапись  - ПользовательИнформационнойБазы - (возвращаемое значение).
//
// Возвращаемое значение:
//  Булево - Истина, если пользователь ИБ существует и его идентификатор
//   используется либо в справочнике Пользователи, либо в справочнике ВнешниеПользователи.
//
Функция ПользовательИБЗанят(ПользовательИБ, УчетнаяЗапись = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ПользовательИБ) = Тип("Строка") Тогда
		УчетнаяЗапись = ПользователиИнформационнойБазы.НайтиПоИмени(ПользовательИБ);
		
	ИначеЕсли ТипЗнч(ПользовательИБ) = Тип("УникальныйИдентификатор") Тогда
		УчетнаяЗапись = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательИБ);
	Иначе
		УчетнаяЗапись = ПользовательИБ;
	КонецЕсли;
	
	Если УчетнаяЗапись = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПользователиСлужебный.ПользовательПоИдентификаторуСуществует(
		УчетнаяЗапись.УникальныйИдентификатор);
	
КонецФункции

// Возвращает пустую структуру описания пользователя ИБ.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//   * УникальныйИдентификатор   - УникальныйИдентификатор -
//   * Имя                       - Строка -
//   * ПолноеИмя                 - Строка -
//
//   * АутентификацияOpenID      - Булево -
//
//   * АутентификацияСтандартная - Булево -
//   * ПоказыватьВСпискеВыбора   - Булево -
//   * Пароль                    - Неопределено -
//   * СохраняемоеЗначениеПароля - Неопределено -
//   * ПарольУстановлен          - Булево -
//   * ЗапрещеноИзменятьПароль   - Булево -
//
//   * АутентификацияОС          - Булево -
//   * ПользовательОС            - Строка - (не учитывается в учебной платформе).
//
//   * ОсновнойИнтерфейс         - Неопределено -
//                               - Строка - имя интерфейса из коллекции "Метаданные.Интерфейсы".
//
//   * РежимЗапуска              - Неопределено -
//                               - Строка - значения: "Авто", "ОбычноеПриложение", "УправляемоеПриложение".
//   * Язык                      - Неопределено -
//                               - Строка - имя языка из коллекции "Метаданные.Языки".
//
//   * Роли                      - Неопределено -
//                               - Массив - значений типа:
//                                  * Строка - имена ролей из коллекции "Метаданные.Роли".
//
Функция НовоеОписаниеПользователяИБ() Экспорт
	
	// Подготовка структур возвращаемых данных.
	Свойства = Новый Структура;
	
	Свойства.Вставить("УникальныйИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Свойства.Вставить("Имя",                       "");
	Свойства.Вставить("ПолноеИмя",                 "");
	Свойства.Вставить("АутентификацияOpenID",      Ложь);
	Свойства.Вставить("АутентификацияСтандартная", Ложь);
	Свойства.Вставить("ПоказыватьВСпискеВыбора",   Ложь);
	Свойства.Вставить("СтарыйПароль",              Неопределено);
	Свойства.Вставить("Пароль",                    Неопределено);
	Свойства.Вставить("СохраняемоеЗначениеПароля", Неопределено);
	Свойства.Вставить("ПарольУстановлен",          Ложь);
	Свойства.Вставить("ЗапрещеноИзменятьПароль",   Ложь);
	Свойства.Вставить("АутентификацияОС",          Ложь);
	Свойства.Вставить("ПользовательОС",            "");
	
	Свойства.Вставить("ОсновнойИнтерфейс",
		?(Метаданные.ОсновнойИнтерфейс = Неопределено, "", Метаданные.ОсновнойИнтерфейс.Имя));
	
	Свойства.Вставить("РежимЗапуска",              "Авто");
	
	Свойства.Вставить("Язык",
		?(Метаданные.ОсновнойЯзык = Неопределено, "", Метаданные.ОсновнойЯзык.Имя));
	
	Свойства.Вставить("Роли", Неопределено);
	
	Возврат Свойства;
	
КонецФункции

// Считывает свойства пользователя информационной базы по строковому или уникальному идентификатору.
//
// Параметры:
//  Идентификатор  - Неопределено, Строка, УникальныйИдентификатор - идентификатор пользователя.
//  Свойства       - Структура - со свойствами, как в функции НовоеОписаниеПользователяИБ().
//  ОписаниеОшибки - Строка - содержит описание ошибки, если чтение не удалось.
//
// Возвращаемое значение:
//  Булево - если Истина, тогда пользователь прочитан, иначе см. ОписаниеОшибки.
//
Функция ПрочитатьПользователяИБ(Знач Идентификатор,
                                Свойства = Неопределено,
                                ОписаниеОшибки = "",
                                ПользовательИБ = Неопределено) Экспорт
	
	Свойства = НовоеОписаниеПользователяИБ();
	
	Свойства.Роли = Новый Массив;
	
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		   И ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()
		   И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных()
		   И Идентификатор = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор Тогда
			
			ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		Иначе
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Идентификатор);
	Иначе
		ПользовательИБ = Неопределено;
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пользователь информационной базы ""%1"" не найден.'"),
			Идентификатор);
		Возврат Ложь;
	КонецЕсли;
	
	СкопироватьСвойстваПользователяИБ(Свойства, ПользовательИБ);
	
	Возврат Истина;
	
КонецФункции

// Перезаписывает свойства пользователя ИБ, найденного по строковому или
// уникальному идентификатору, либо создает нового пользователя ИБ
// (если задано создать существующего пользователя - будет ошибка).
//
// Параметры:
//  Идентификатор - Строка, УникальныйИдентификатор - идентификатор пользователя.
//
//  ОбновляемыеСвойства - Структура - со свойствами, как в функции НовоеОписаниеПользователяИБ().
//    Свойство может быть не задано, тогда используется прочитанное или начальное значение.
//    Следующие свойства структуры используются нестандартно:
//      * УникальныйИдентификатор - Неопределено - (возвращаемое значение),
//                                  устанавливается после записи пользователя ИБ.
//      * СтарыйПароль            - Неопределено, Строка - если заданный пароль
//                                  не совпадет с существующим будет ошибка.
//
//  СоздатьНового - Ложь  - никаких дополнительных действий.
//                - Неопределено, Истина - создается новый пользователь ИБ,
//                  когда ПользовательИБ не найден по указанному идентификатору.
//                  При значении Истина, если Пользователь ИБ найден
//                  по указанному идентификатору - будет ошибка.
//
//  ОписаниеОшибки - Строка - содержит описание ошибки, если чтение не удалось.
//
//  Пользователь   - СправочникСсылка.Пользователи, СправочникОбъект.Пользователи,
//                   СправочникСсылка.ВнешниеПользователи, СправочникОбъект.ВнешниеПользователи - это
//                     пользователь с которым сопоставлен ПользовательИБ.
//                 - Неопределено - ссылка или объект пользователя в справочнике, если существует.
//                 - ПользовательИнформационнойБазы - (Возвращаемое значение), если запись удалась.
//
// Возвращаемое значение:
//  Булево - если Истина, тогда пользователь записан, иначе см. ОписаниеОшибки.
//
Функция ЗаписатьПользователяИБ(Знач Идентификатор,
                               Знач ОбновляемыеСвойства,
                               Знач СоздатьНового = Ложь,
                               ОписаниеОшибки = "",
                               Пользователь = Неопределено) Экспорт
	
	ПользовательИБ = Неопределено;
	СтарыеСвойства = Неопределено;
	
	ПредварительноеЧтение = ПрочитатьПользователяИБ(
		Идентификатор, СтарыеСвойства, ОписаниеОшибки, ПользовательИБ);
	
	Если НЕ ПредварительноеЧтение Тогда
		
		Если СоздатьНового = Неопределено ИЛИ СоздатьНового = Истина Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли СоздатьНового = Истина Тогда
		ОписаниеОшибки = ОписаниеОшибкиПриЗаписиПользователяИБ(
			НСтр("ru = 'Невозможно создать пользователя информационной базы
			           |%1,
			           |так как он уже существует.'"),
			СтарыеСвойства.Имя,
			СтарыеСвойства.УникальныйИдентификатор);
		Возврат Ложь;
	Иначе
		Если ОбновляемыеСвойства.Свойство("СтарыйПароль")
		   И ТипЗнч(ОбновляемыеСвойства.СтарыйПароль) = Тип("Строка") Тогда
			
			СтарыйПарольСовпадает = Ложь;
			
			ПользователиСлужебный.СохраняемоеЗначениеСтрокиПароля(
				ОбновляемыеСвойства.СтарыйПароль,
				СтарыеСвойства.УникальныйИдентификатор,
				СтарыйПарольСовпадает);
			
			Если НЕ СтарыйПарольСовпадает Тогда
				ОписаниеОшибки = ОписаниеОшибкиПриЗаписиПользователяИБ(
					НСтр("ru = 'При записи пользователя информационной базы
					           |%1,
					           |старый пароль указан не верно.'"),
					СтарыеСвойства.Имя,
					СтарыеСвойства.УникальныйИдентификатор);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Подготовка новых значений свойств.
	НовыеСвойства = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтарыеСвойства);
	
	Для каждого КлючИЗначение Из НовыеСвойства Цикл
		
		Если ОбновляемыеСвойства.Свойство(КлючИЗначение.Ключ)
		   И ОбновляемыеСвойства[КлючИЗначение.Ключ] <> Неопределено Тогда
		
			НовыеСвойства[КлючИЗначение.Ключ] = ОбновляемыеСвойства[КлючИЗначение.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	СкопироватьСвойстваПользователяИБ(ПользовательИБ, НовыеСвойства);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ПользовательИБ.ПоказыватьВСпискеВыбора = Ложь;
	КонецЕсли;
	
	// Попытка записи нового или измененного пользователяИБ.
	Попытка
		ПользователиСлужебный.ЗаписатьПользователяИнформационнойБазы(ПользовательИБ, Пользователь);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ОписаниеОшибкиПриЗаписиПользователяИБ(
			НСтр("ru = 'При записи пользователя информационной базы
			           |%1 произошла ошибка:
			           |
			           |""%2"".'"),
			ПользовательИБ.Имя,
			?(ПредварительноеЧтение, СтарыеСвойства.УникальныйИдентификатор, Неопределено),
			ИнформацияОбОшибке);
		Возврат Ложь;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(СтарыеСвойства.Имя)
	   И СтарыеСвойства.Имя <> НовыеСвойства.Имя Тогда
		// Перемещение настроек.
		ПользователиСлужебный.СкопироватьНастройкиПользователя(
			СтарыеСвойства.Имя, НовыеСвойства.Имя, Истина);
	КонецЕсли;
	
	ПользователиПереопределяемый.ПриЗаписиПользователяИнформационнойБазы(СтарыеСвойства, НовыеСвойства);
	
	Если СоздатьНового = Неопределено ИЛИ СоздатьНового = Истина Тогда
		ПользователиСлужебный.УстановитьНачальныеНастройки(НовыеСвойства.Имя, Пользователь);
	КонецЕсли;
	
	ОбновляемыеСвойства.Вставить("УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
	Пользователь = ПользовательИБ;
	Возврат Истина;
	
КонецФункции

// Удаляет указанного пользователя информационной базы.
//
// Параметры:
//  Идентификатор  - Строка - имя пользователя ИБ.
//                 - УникальныйИдентификатор - идентификатор пользователя ИБ.
//
//  ОписаниеОшибки - Строка - (возвращаемое значение) содержит описание ошибки, если удаление не удалось.
//
// Возвращаемое значение:
//  Булево - если Истина пользователь успешно удален, иначе см. ОписаниеОшибки.
//
Функция УдалитьПользователяИБ(Знач Идентификатор,
                              ОписаниеОшибки = "",
                              ПользовательИБ = Неопределено) Экспорт
	
	ПользовательИБ = Неопределено;
	Свойства       = Неопределено;
	
	Если НЕ ПрочитатьПользователяИБ(Идентификатор, Свойства, ОписаниеОшибки, ПользовательИБ) Тогда
		Возврат Ложь;
	Иначе
		Попытка
			
			Обработчики = ОбщегоНазначения.ОбработчикиСлужебногоСобытия("СтандартныеПодсистемы.Пользователи\ПередЗаписьюПользователяИБ");
			Для Каждого Обработчик Из Обработчики Цикл
				Обработчик.Модуль.ПередЗаписьюПользователяИБ(ПользовательИБ.УникальныйИдентификатор);
			КонецЦикла;
			
			ПользовательИБ.Удалить();
			
		Исключение
			ОписаниеОшибки = ОписаниеОшибкиПриЗаписиПользователяИБ(
				НСтр("ru = 'При удалении пользователя информационной базы
				           |%1 произошла ошибка:
				           |
				           |""%2"".'"),
				ПользовательИБ.Имя,
				ПользовательИБ.УникальныйИдентификатор,
				ИнформацияОбОшибке());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	ПользователиПереопределяемый.ПослеУдаленияПользователяИнформационнойБазы(Свойства);
	
	Возврат Истина;
	
КонецФункции

// Копирует значения свойств пользователя ИБ с преобразованием
// в/из строковых идентификаторов для основного интерфейса,
// языка, режима запуска и ролей.
//
//  Несуществующие свойства в источнике или приемнике не копируются.
//
//  Свойства Пароль и СохраняемоеЗначениеПароля не копируются, если
// значения в Источнике равно Неопределено.
//
//  Свойства АутентификацияОС, АутентификацияСтандартная,
// АутентификацияOpenID и ПользовательОС не переустанавливается,
// если совпадают, когда Приемник типа ПользовательИнформационнойБазы.
//
//  Свойства УникальныйИдентификатор, ПарольУстановлен, СтарыйПароль
// не копируются, если Приемник типа ПользовательИнформационнойБазы.
//
//  Преобразование выполняется только для типа Источника или Приемника.
// ПользовательИнформационнойБазы.
//
// Параметры:
//  Приемник     - Структура, ПользовательИнформационнойБазы, ДанныеФормыКоллекция - подмножество
//                 свойств из НовоеОписаниеПользователяИБ().
//
//  Источник     - Структура, ПользовательИнформационнойБазы, ДанныеФормыКоллекция - как и приемник,
//                 но типы обратные, т.е. когда в Приемнике тип Структура, тогда в источнике НЕ Структура.
// 
//  КопируемыеСвойства  - Строка - список свойств через запятую, которые нужно скопировать (без префикса).
//  ИсключаемыеСвойства - Строка - список свойств через запятую, которые не нужно копировать (без префикса).
//  ПрефиксСвойств      - Строка - начальное имя для Источника или Приемника типа НЕ Структура.
//
Процедура СкопироватьСвойстваПользователяИБ(Приемник,
                                            Источник,
                                            КопируемыеСвойства = "",
                                            ИсключаемыеСвойства = "",
                                            ПрефиксСвойств = "") Экспорт
	
	ВсеСвойства = НовоеОписаниеПользователяИБ();
	
	Если ЗначениеЗаполнено(КопируемыеСвойства) Тогда
		СтруктураКопируемыхСвойств = Новый Структура(КопируемыеСвойства);
	Иначе
		СтруктураКопируемыхСвойств = ВсеСвойства;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсключаемыеСвойства) Тогда
		СтруктураИсключаемыхСвойств = Новый Структура(ИсключаемыеСвойства);
	Иначе
		СтруктураИсключаемыхСвойств = Новый Структура;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоУчебнаяПлатформа() Тогда
		СтруктураИсключаемыхСвойств.Вставить("АутентификацияОС");
		СтруктураИсключаемыхСвойств.Вставить("ПользовательОС");
	КонецЕсли;
	
	ПарольУстановлен = Ложь;
	
	Для каждого КлючИЗначение Из ВсеСвойства Цикл
		Свойство = КлючИЗначение.Ключ;
		
		Если НЕ СтруктураКопируемыхСвойств.Свойство(Свойство)
		 ИЛИ СтруктураИсключаемыхСвойств.Свойство(Свойство) Тогда
		
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Источник) = Тип("ПользовательИнформационнойБазы") Тогда
			
			Если Свойство = "Пароль"
			 ИЛИ Свойство = "СтарыйПароль" Тогда
				
				ЗначениеСвойства = Неопределено;
				
			ИначеЕсли Свойство = "ОсновнойИнтерфейс" Тогда
				ЗначениеСвойства = ?(Источник.ОсновнойИнтерфейс = Неопределено,
				                     "",
				                     Источник.ОсновнойИнтерфейс.Имя);
			
			ИначеЕсли Свойство = "РежимЗапуска" Тогда
				ПолноеИмяЗначения = ПолучитьПолноеИмяПредопределенногоЗначения(Источник.РежимЗапуска);
				ЗначениеСвойства = Сред(ПолноеИмяЗначения, СтрНайти(ПолноеИмяЗначения, ".") + 1);
				
			ИначеЕсли Свойство = "Язык" Тогда
				ЗначениеСвойства = ?(Источник.Язык = Неопределено,
				                     "",
				                     Источник.Язык.Имя);
				
			ИначеЕсли Свойство = "Роли" Тогда
				
				ВременнаяСтруктура = Новый Структура("Роли", Новый ТаблицаЗначений);
				ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Приемник);
				Если ТипЗнч(ВременнаяСтруктура.Роли) = Тип("ТаблицаЗначений") Тогда
					Продолжить;
				ИначеЕсли ВременнаяСтруктура.Роли = Неопределено Тогда
					Приемник.Роли = Новый Массив;
				Иначе
					Приемник.Роли.Очистить();
				КонецЕсли;
				
				Для каждого Роль Из Источник.Роли Цикл
					Приемник.Роли.Добавить(Роль.Имя);
				КонецЦикла;
				
				Продолжить;
			Иначе
				ЗначениеСвойства = Источник[Свойство];
			КонецЕсли;
			
			ПолноеИмяСвойства = ПрефиксСвойств + Свойство;
			ВременнаяСтруктура = Новый Структура(ПолноеИмяСвойства, ЗначениеСвойства);
			ЗаполнитьЗначенияСвойств(Приемник, ВременнаяСтруктура);
		Иначе
			Если ТипЗнч(Источник) = Тип("Структура") Тогда
				Если Источник.Свойство(Свойство) Тогда
					ЗначениеСвойства = Источник[Свойство];
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				ПолноеИмяСвойства = ПрефиксСвойств + Свойство;
				ВременнаяСтруктура = Новый Структура(ПолноеИмяСвойства, Новый ТаблицаЗначений);
				ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Источник);
				ЗначениеСвойства = ВременнаяСтруктура[ПолноеИмяСвойства];
				Если ТипЗнч(ЗначениеСвойства) = Тип("ТаблицаЗначений") Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(Приемник) = Тип("ПользовательИнформационнойБазы") Тогда
			
				Если Свойство = "УникальныйИдентификатор"
				 ИЛИ Свойство = "СтарыйПароль"
				 ИЛИ Свойство = "ПарольУстановлен" Тогда
					
					Продолжить;
					
				ИначеЕсли Свойство = "АутентификацияOpenID"
				      ИЛИ Свойство = "АутентификацияСтандартная"
				      ИЛИ Свойство = "АутентификацияОС"
				      ИЛИ Свойство = "ПользовательОС" Тогда
					
					Если Приемник[Свойство] <> ЗначениеСвойства Тогда
						Приемник[Свойство] = ЗначениеСвойства;
					КонецЕсли;
					
				ИначеЕсли Свойство = "Пароль" Тогда
					Если ЗначениеСвойства <> Неопределено Тогда
						Приемник.Пароль = ЗначениеСвойства;
						ПарольУстановлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Свойство = "СохраняемоеЗначениеПароля" Тогда
					Если ЗначениеСвойства <> Неопределено
					   И НЕ ПарольУстановлен Тогда
						Приемник.СохраняемоеЗначениеПароля = ЗначениеСвойства;
					КонецЕсли;
					
				ИначеЕсли Свойство = "ОсновнойИнтерфейс" Тогда
					Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
						Приемник.ОсновнойИнтерфейс = Метаданные.Интерфейсы.Найти(ЗначениеСвойства);
					Иначе
						Приемник.ОсновнойИнтерфейс = Неопределено;
					КонецЕсли;
				
				ИначеЕсли Свойство = "РежимЗапуска" Тогда
					Если ЗначениеСвойства = "Авто"
					 ИЛИ ЗначениеСвойства = "ОбычноеПриложение"
					 ИЛИ ЗначениеСвойства = "УправляемоеПриложение" Тогда
						
						Приемник.РежимЗапуска = РежимЗапускаКлиентскогоПриложения[ЗначениеСвойства];
					Иначе
						Приемник.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.Авто;
					КонецЕсли;
					
				ИначеЕсли Свойство = "Язык" Тогда
					Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
						Приемник.Язык = Метаданные.Языки.Найти(ЗначениеСвойства);
					Иначе
						Приемник.Язык = Неопределено;
					КонецЕсли;
					
				ИначеЕсли Свойство = "Роли" Тогда
					Приемник.Роли.Очистить();
					Если ЗначениеСвойства <> Неопределено Тогда
						Для каждого ИмяРоли Из ЗначениеСвойства Цикл
							Роль = Метаданные.Роли.Найти(ИмяРоли);
							Если Роль <> Неопределено Тогда
								Приемник.Роли.Добавить(Роль);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				Иначе
					Если Свойство = "Имя"
					   И Приемник[Свойство] <> ЗначениеСвойства Тогда
					
						Если СтрДлина(ЗначениеСвойства) > 64 Тогда
							ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка записи пользователя информационной базы
								           |Имя (для входа): ""%1""
								           |превышает длину 64 символа.'"),
								ЗначениеСвойства);
							
						ИначеЕсли СтрНайти(ЗначениеСвойства, ":") > 0 Тогда
							ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка записи пользователя информационной базы
								           |Имя (для входа): ""%1""
								           |содержит запрещенный символ "":"".'"),
								ЗначениеСвойства);
						КонецЕсли;
					КонецЕсли;
					Приемник[Свойство] = Источник[Свойство];
				КонецЕсли;
			Иначе
				Если Свойство = "Роли" Тогда
					
					ВременнаяСтруктура = Новый Структура("Роли", Новый ТаблицаЗначений);
					ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Приемник);
					Если ТипЗнч(ВременнаяСтруктура.Роли) = Тип("ТаблицаЗначений") Тогда
						Продолжить;
					ИначеЕсли ВременнаяСтруктура.Роли = Неопределено Тогда
						Приемник.Роли = Новый Массив;
					Иначе
						Приемник.Роли.Очистить();
					КонецЕсли;
					
					Если Источник.Роли <> Неопределено Тогда
						Для каждого Роль Из Источник.Роли Цикл
							Приемник.Роли.Добавить(Роль.Имя);
						КонецЦикла;
					КонецЕсли;
					Продолжить;
					
				ИначеЕсли ТипЗнч(Источник) = Тип("Структура") Тогда
					ПолноеИмяСвойства = ПрефиксСвойств + Свойство;
				Иначе
					ПолноеИмяСвойства = Свойство;
				КонецЕсли;
				ВременнаяСтруктура = Новый Структура(ПолноеИмяСвойства, ЗначениеСвойства);
				ЗаполнитьЗначенияСвойств(Приемник, ВременнаяСтруктура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает пользователя из справочника Пользователи, с которым сопоставлен
// пользователь ИБ с указанным именем.
//  Для поиска требуются административные права. Если административных прав нет,
// допустимо искать только пользователя для текущего пользователя ИБ.
// 
// Параметры:
//  ИмяДляВхода - Строка - имя пользователя информационной базы, используемое для входа.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи           - если пользователь найден.
//  Справочники.Пользователи.ПустаяСсылка() - если пользователь ИБ найден.
//  Неопределено                            - если пользователь ИБ не найден.
//
Функция НайтиПоИмени(Знач ИмяДляВхода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяДляВхода);
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		НайтиНеоднозначныхПользователейИБ(Неопределено, ПользовательИБ.УникальныйИдентификатор);
		
		Возврат Справочники.Пользователи.НайтиПоРеквизиту(
			"ИдентификаторПользователяИБ",
			ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

// Возвращает роль, предоставляющую права администрирования системы.
//
// Параметры:
//  ДляПроверки - Булево - вернуть роль для проверки, а не для установки.
//                 Для базовых версий роль для установки АдминистраторСистемы,
//                 а роль для проверки может быть ПолныеПрава с правом Администрирование.
//
// Возвращаемое значение:
//  ОбъектМетаданных - Роль.
//
Функция РольАдминистратораСистемы(ДляПроверки = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РольАдминистратораСистемы = Метаданные.Роли.АдминистраторСистемы;
	
	Если ДляПроверки
	   И ПравоДоступа("Администрирование", Метаданные, Метаданные.Роли.ПолныеПрава)
	   И СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
	
		РольАдминистратораСистемы = Метаданные.Роли.ПолныеПрава;
	КонецЕсли;
	
	Возврат РольАдминистратораСистемы;
	
КонецФункции

// Выполняет поиск идентификаторов пользователей ИБ используемых более одного раза и
// либо вызывает исключение, либо возвращает найденных пользователей ИБ для дальнейшей
// обработки.
//
// Параметры:
//  Пользователь - Неопределено - проверка для всех пользователей и внешних пользователей.
//               - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - проверка
//                 только для указанной ссылки.
//
//  УникальныйИдентификатор - Неопределено - проверка всех заданных идентификаторов пользователей ИБ.
//                          - УникальныйИдентификатор - проверка только для заданного идентификатора.
//
//  НайденныеИдентификаторы - Неопределено - при нахождении ошибок вызывается исключение.
//                          - Соответствие - при нахождении ошибок исключение не вызывается,
//                              а вместо этого заполняется переданное соответствие:
//                              * Ключ     - неоднозначный идентификатор пользователя ИБ.
//                              * Значение - массив пользователей и внешних пользователей.
//
//  ИдентификаторПользователяСервиса - Булево - если Ложь, тогда проверять ИдентификаторПользователяИБ,
//                                              если Истина,тогда проверять ИдентификаторПользователяСервиса.
//
Процедура НайтиНеоднозначныхПользователейИБ(Знач Пользователь,
                                            Знач УникальныйИдентификатор = Неопределено,
                                            Знач НайденныеИдентификаторы = Неопределено,
                                            Знач ИдентификаторПользователяСервиса = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(УникальныйИдентификатор) <> Тип("УникальныйИдентификатор") Тогда
		УникальныйИдентификатор =
			Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыПользователей.ИдентификаторПользователяИБ КАК НеоднозначныйИдентификатор,
	|	ИдентификаторыПользователей.Пользователь
	|ИЗ
	|	(ВЫБРАТЬ
	|		Пользователи.ИдентификаторПользователяИБ,
	|		Пользователи.Ссылка КАК Пользователь
	|	ИЗ
	|		Справочник.Пользователи КАК Пользователи
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВнешниеПользователи.ИдентификаторПользователяИБ,
	|		ВнешниеПользователи.Ссылка
	|	ИЗ
	|		Справочник.ВнешниеПользователи КАК ВнешниеПользователи) КАК ИдентификаторыПользователей
	|ГДЕ
	|	ИдентификаторыПользователей.ИдентификаторПользователяИБ В
	|			(ВЫБРАТЬ
	|				ИдентификаторыПользователей.ИдентификаторПользователяИБ
	|			ИЗ
	|				(ВЫБРАТЬ
	|					Пользователи.ИдентификаторПользователяИБ,
	|					Пользователи.Ссылка КАК Пользователь
	|				ИЗ
	|					Справочник.Пользователи КАК Пользователи
	|				ГДЕ
	|					Пользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор
	|					И НЕ(&Пользователь <> НЕОПРЕДЕЛЕНО
	|							И Пользователи.Ссылка <> &Пользователь)
	|					И НЕ(&УникальныйИдентификатор <> &ПустойУникальныйИдентификатор
	|							И Пользователи.ИдентификаторПользователяИБ <> &УникальныйИдентификатор)
	|		
	|				ОБЪЕДИНИТЬ ВСЕ
	|		
	|				ВЫБРАТЬ
	|					ВнешниеПользователи.ИдентификаторПользователяИБ,
	|					ВнешниеПользователи.Ссылка
	|				ИЗ
	|					Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|				ГДЕ
	|					ВнешниеПользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор
	|					И НЕ(&Пользователь <> НЕОПРЕДЕЛЕНО
	|							И ВнешниеПользователи.Ссылка <> &Пользователь)
	|					И НЕ(&УникальныйИдентификатор <> &ПустойУникальныйИдентификатор
	|							И ВнешниеПользователи.ИдентификаторПользователяИБ <> &УникальныйИдентификатор)
	|				) КАК ИдентификаторыПользователей
	|			СГРУППИРОВАТЬ ПО
	|						ИдентификаторыПользователей.ИдентификаторПользователяИБ
	|			ИМЕЮЩИЕ
	|				КОЛИЧЕСТВО(ИдентификаторыПользователей.Пользователь) > 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторыПользователей.ИдентификаторПользователяИБ";
	
	Если ИдентификаторПользователяСервиса Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ИдентификаторПользователяИБ",
			"ИдентификаторПользователяСервиса");
	КонецЕсли;
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если Выгрузка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = НСтр("ru = 'Ошибка в базе данных:'") + Символы.ПС;
	ТекущийНеоднозначныйИдентификатор = Неопределено;
	
	Для каждого Строка Из Выгрузка Цикл
		
		НовыйУникальныйИдентификатор = Ложь;
		Если Строка.НеоднозначныйИдентификатор <> ТекущийНеоднозначныйИдентификатор Тогда
			НовыйУникальныйИдентификатор = Истина;
			ТекущийНеоднозначныйИдентификатор = Строка.НеоднозначныйИдентификатор;
			Если ТипЗнч(НайденныеИдентификаторы) = Тип("Соответствие") Тогда
				ТекущиеПользователи = Новый Массив;
				НайденныеИдентификаторы.Вставить(ТекущийНеоднозначныйИдентификатор, ТекущиеПользователи);
			Иначе
				ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
				
				Если ТекущийПользовательИБ.УникальныйИдентификатор <> ТекущийНеоднозначныйИдентификатор Тогда
					ТекущийПользовательИБ =
						ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
							ТекущийНеоднозначныйИдентификатор);
				КонецЕсли;
				
				Если ТекущийПользовательИБ = Неопределено Тогда
					ИмяДляВхода = НСтр("ru = '<не найден>'");
				Иначе
					ИмяДляВхода = ТекущийПользовательИБ.Имя;
				КонецЕсли;
				
				Если ИдентификаторПользователяСервиса Тогда
					ОписаниеОшибки = ОписаниеОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Пользователю сервиса с идентификатором ""%1""
						           |соответствует более одного элемента в справочнике Пользователи:'"),
						ТекущийНеоднозначныйИдентификатор);
				Иначе
					ОписаниеОшибки = ОписаниеОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Пользователю ИБ ""%1"" с идентификатором ""%2""
						           |соответствует более одного элемента в справочнике Пользователи:'"),
						ИмяДляВхода,
						ТекущийНеоднозначныйИдентификатор);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(НайденныеИдентификаторы) = Тип("Соответствие") Тогда
			ТекущиеПользователи.Добавить(Строка.Пользователь);
		Иначе
			Если НЕ НовыйУникальныйИдентификатор Тогда
				ОписаниеОшибки = ОписаниеОшибки + ",";
			КонецЕсли;
			ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + "	"
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '""%1"" с идентификатором ссылки %2'"),
					Строка.Пользователь,
					Строка.Пользователь.УникальныйИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(НайденныеИдентификаторы) <> Тип("Соответствие") Тогда
		ВызватьИсключение ОписаниеОшибки + "." + Символы.ПС;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает сохраняемое значение пароля для указанного пароля.
//
// Параметры:
//  Пароль - Строка - пароль для которого нужно получить сохраняемое значение.
//
// Возвращаемое значение:
//  Строка - сохраняемое значение пароля.
//
Функция СохраняемоеЗначениеСтрокиПароля(Знач Пароль) Экспорт
	
	Возврат ПользователиСлужебный.СохраняемоеЗначениеСтрокиПароля(Пароль);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции.

// Возвращает Истина, если для конфигурации возможно использование настроек входа,
// общих для пользователей (сложность пароля, смена пароля, ограничения
// срока работы в программе и другие).
//
// Возвращаемое значение:
//  Булево.
//
Функция ОбщиеНастройкиВходаИспользуются() Экспорт
	
	Возврат ПользователиСлужебныйПовтИсп.Настройки().ОбщиеНастройкиВхода;
	
КонецФункции

// Возвращает назначение ролей, указанное разработчиками библиотек и прикладных решений.
// Область применения: только для автоматизированной проверки конфигурации.
//
// Возвращаемое значение:
//  Структура - смотри одноименный параметр в процедуре ПриОпределенииНазначенияРолей
//              общего модуля ПользователиПереопределяемый.
//
Функция НазначениеРолей() Экспорт
	
	НазначениеРолей = Новый Структура;
	НазначениеРолей.Вставить("ТолькоДляАдминистраторовСистемы",                Новый Массив);
	НазначениеРолей.Вставить("ТолькоДляПользователейСистемы",                  Новый Массив);
	НазначениеРолей.Вставить("ТолькоДляВнешнихПользователей",                  Новый Массив);
	НазначениеРолей.Вставить("СовместноДляПользователейИВнешнихПользователей", Новый Массив);
	
	ПользователиПереопределяемый.ПриОпределенииНазначенияРолей(НазначениеРолей);
	ИнтеграцияСтандартныхПодсистем.ПриОпределенииНазначенияРолей(НазначениеРолей);
	
	Возврат НазначениеРолей;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует краткое описание ошибки, которое увидит пользователь,
// а также может записать подробное описание ошибки в журнал регистрации.
//
// Параметры:
//  ШаблонОшибки       - Шаблон, содержащий параметр "%1" для представления пользователя ИБ и
//                       параметр %2 для описания ошибки.
//
//  ИмяДляВхода        - имя пользователя информационной базы, используемое для входа.
//
//  ИдентификаторПользователяИБ - Неопределено, УникальныйИдентификатор.
//
//  ИнформацияОбОшибке - ИнформацияОбОшибке.
//
//  ЗаписатьВЖурнал    - Булево. Если Истина, то выполняется запись подробного описания ошибки
//                       в журнал регистрации.
//
// Возвращаемое значение:
//  Строка - описание ошибки для просмотра пользователю.
//
Функция ОписаниеОшибкиПриЗаписиПользователяИБ(ШаблонОшибки,
                                              ИмяДляВхода,
                                              ИдентификаторПользователяИБ,
                                              ИнформацияОбОшибке = Неопределено,
                                              ЗаписатьВЖурнал = Истина)
	
	Если ЗаписатьВЖурнал Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Пользователи.Ошибка записи пользователя ИБ'",
			     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
				"""" + ИмяДляВхода + """ (" + ?(ЗначениеЗаполнено(ИдентификаторПользователяИБ),
					НСтр("ru = 'Новый'"), Строка(ИдентификаторПользователяИБ)) + ")",
				?(ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), Строка(ИнформацияОбОшибке))));
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, """" + ИмяДляВхода + """",
		?(ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке), Строка(ИнформацияОбОшибке)));
	
КонецФункции

// Для функций ЭтоПолноправныйПользователь и РолиДоступны.

Функция СвойстваПроверяемогоПользователяИБ(Пользователь)
	
	Свойства = Новый Структура;
	Свойства.Вставить("ТекущийПользовательИБ", ПользователиИнформационнойБазы.ТекущийПользователь());
	Свойства.Вставить("ПользовательИБ", Неопределено);
	
	Если ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		Свойства.Вставить("ПользовательИБ", Пользователь);
		
	ИначеЕсли Пользователь = Неопределено ИЛИ Пользователь = АвторизованныйПользователь() Тогда
		Свойства.Вставить("ПользовательИБ", Свойства.ТекущийПользовательИБ);
	Иначе
		// Задан не текущий пользователь.
		Если ЗначениеЗаполнено(Пользователь) Тогда
			Свойства.Вставить("ПользовательИБ", ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ")));
		КонецЕсли;
	КонецЕсли;
	
	Если Свойства.ПользовательИБ <> Неопределено Тогда
		Свойства.Вставить("УказанТекущийПользовательИБ",
			Свойства.ПользовательИБ.УникальныйИдентификатор
				= Свойства.ТекущийПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

#КонецОбласти
