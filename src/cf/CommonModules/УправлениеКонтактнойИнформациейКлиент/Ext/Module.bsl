////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик события ПриИзменении поля формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма             - УправляемаяФорма - Форма владельца контактной информации.
//     Элемент           - ПолеФормы        - Элемент формы, содержащий представление контактной информации.
//     ЭтоТабличнаяЧасть - Булево           - Флаг того, что элемент является частью таблицы формы.
//
Процедура ПриИзменении(Форма, Элемент, ЭтоТабличнаяЧасть = Ложь) Экспорт

	ЭтоТабличнаяЧасть = ЭтоТабличнаяЧасть(Элемент);
	
	Если ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения = Форма.Элементы[Форма.ТекущийЭлемент.Имя].ТекущиеДанные;
		Если ДанныеЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ДанныеЗаполнения = Форма;
	КонецЕсли;
	
	// Если это очистка, то сбрасываем представление.
	ДанныеСтроки = ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, ЭтоТабличнаяЧасть);
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		ДанныеЗаполнения[Элемент.Имя] = "";
		Если ЭтоТабличнаяЧасть Тогда
			ДанныеЗаполнения[Элемент.Имя + "ЗначенияПолей"] = "";
		КонецЕсли;
		ДанныеСтроки.Представление = "";
		ДанныеСтроки.ЗначенияПолей = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.ХранитьИсториюИзменений И НачалоДня(ДанныеСтроки.ДействуетС) <> НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
		ИсторическаяКонтактнаяИнформация = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(ИсторическаяКонтактнаяИнформация, ДанныеСтроки);
		ИсторическаяКонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация = Истина;
		ИсторическаяКонтактнаяИнформация.ИмяРеквизита = "";
		ДанныеСтроки.ДействуетС = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	КонецЕсли;
	
	ДанныеСтроки.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(Текст, ДанныеСтроки.Вид);
	ДанныеСтроки.Представление = Текст;
	
	Если ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения[Элемент.Имя + "ЗначенияПолей"] = ДанныеСтроки.ЗначенияПолей;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события НачалоВыбора поля формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма                - УправляемаяФорма - Форма владельца контактной информации.
//     Элемент              - ПолеФормы        - Элемент формы, содержащий представление контактной информации.
//     Модифицированность   - Булево           - Устанавливаемый флаг модифицированности формы.
//     СтандартнаяОбработка - Булево           - Устанавливаемый флаг стандартной обработки события формы.
//
Процедура НачалоВыбора(Форма, Элемент, Модифицированность = Истина, СтандартнаяОбработка = Ложь) Экспорт
	СтандартнаяОбработка = Ложь;
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяРеквизита", Элемент.Имя);
	
	ЭтоТабличнаяЧасть = ЭтоТабличнаяЧасть(Элемент);
	
	Если ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения = Форма.Элементы[Форма.ТекущийЭлемент.Имя].ТекущиеДанные;
		Если ДанныеЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ДанныеЗаполнения = Форма;
	КонецЕсли;
	
	ДанныеСтроки = ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, ЭтоТабличнаяЧасть);
	
	// Если представление было изменено в поле и не соответствует реквизиту, то приводим в соответствие.
	Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
		Если ДанныеЗаполнения[Элемент.Имя] <> Элемент.ТекстРедактирования Тогда
			ДанныеЗаполнения[Элемент.Имя] = Элемент.ТекстРедактирования;
			ПриИзменении(Форма, Элемент, ЭтоТабличнаяЧасть);
			Форма.Модифицированность = Истина;
		КонецЕсли;
		ТекстРедактирования = Элемент.ТекстРедактирования;
	Иначе 
		ТекстРедактирования = ?(ЗначениеЗаполнено(ДанныеСтроки.ЗначенияПолей), Форма[Элемент.Имя], "");
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ДанныеСтроки.Вид);
	ПараметрыОткрытия.Вставить("ЗначенияПолей", ДанныеСтроки.ЗначенияПолей);
	ПараметрыОткрытия.Вставить("Представление", ТекстРедактирования);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	ПараметрыОткрытия.Вставить("КонтактнаяИнформацияОписаниеДополнительныхРеквизитов", Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов);
	
	Если Не ЭтоТабличнаяЧасть Тогда
		ПараметрыОткрытия.Вставить("Комментарий", ДанныеСтроки.Комментарий);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПредставлениеНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("ДанныеЗаполнения",  ДанныеЗаполнения);
	Оповещение.ДополнительныеПараметры.Вставить("ЭтоТабличнаяЧасть", ЭтоТабличнаяЧасть);
	Оповещение.ДополнительныеПараметры.Вставить("ДанныеСтроки",      ДанныеСтроки);
	Оповещение.ДополнительныеПараметры.Вставить("Элемент",           Элемент);
	Оповещение.ДополнительныеПараметры.Вставить("Результат",         Результат);
	Оповещение.ДополнительныеПараметры.Вставить("Форма",             Форма);
	
	ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия,, Оповещение);
КонецПроцедуры

// Обработчик события Очистка поля формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма        - УправляемаяФорма - Форма владельца контактной информации.
//     ИмяРеквизита - Строка           - Имя реквизита формы, связанного с представление контактной информации.
//
Процедура Очистка(Знач Форма, Знач ИмяРеквизита) Экспорт
	
	Результат = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденнаяСтрока = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Результат)[0];
	НайденнаяСтрока.ЗначенияПолей = "";
	НайденнаяСтрока.Представление = "";
	НайденнаяСтрока.Комментарий   = "";
	
	Форма[ИмяРеквизита] = "";
	Форма.Модифицированность = Истина;
	
	ОбновитьКонтактнуюИнформациюФормы(Форма, Результат);
КонецПроцедуры

// Обработчик команды, связанной с контактной информации (написать письмо, открыть адрес, и т.п.).
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма      - УправляемаяФорма - Форма владельца контактной информации.
//     ИмяКоманды - Строка           - Имя автоматически сгенерированной команды действия.
//
Процедура ВыполнитьКоманду(Знач Форма, Знач ИмяКоманды) Экспорт
	
	Если ИмяКоманды = "КонтактнаяИнформацияДобавитьПолеВвода" Тогда
		Оповещение = Новый ОписаниеОповещения("КонтактнаяИнформацияДобавитьПолеВводаЗавершение", ЭтотОбъект, Новый Структура);
			
		Оповещение.ДополнительныеПараметры.Вставить("Форма", Форма);
		Форма.ПоказатьВыборИзМеню(Оповещение, Форма.ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов, Форма.Элементы.КонтактнаяИнформацияДобавитьПолеВвода);
		Возврат;
		
	ИначеЕсли СтрНачинаетсяС(ИмяКоманды, "Команда") Тогда
		ИмяРеквизита = СтрЗаменить(ИмяКоманды, "Команда", "");
		КомандаКонтекстногоМеню = Неопределено;
	Иначе
		КомандаКонтекстногоМеню = КомандаКонтекстногоМеню(ИмяКоманды);
		ИмяРеквизита = КомандаКонтекстногоМеню.ИмяРеквизита;
	КонецЕсли;
	
	Результат = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденнаяСтрока = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Результат)[0];
	ТипКонтактнойИнформации = НайденнаяСтрока.Тип;
	
	Если КомандаКонтекстногоМеню <> Неопределено Тогда
		Если КомандаКонтекстногоМеню.Команда = "Комментарий" Тогда
			ВвестиКомментарий(Форма, КомандаКонтекстногоМеню.ИмяРеквизита, НайденнаяСтрока, Результат);
		ИначеЕсли КомандаКонтекстногоМеню.Команда = "История" Тогда
			ОткрытьФормуИсторииИзменений(Форма, НайденнаяСтрока);
		ИначеЕсли КомандаКонтекстногоМеню.Команда = "КартаЯндекс" Тогда
			ПоказатьАдресНаКарте(НайденнаяСтрока.Представление, "Яндекс.Карты");
		ИначеЕсли КомандаКонтекстногоМеню.Команда = "КартаGoogle" Тогда
			ПоказатьАдресНаКарте(НайденнаяСтрока.Представление, "GoogleMaps");
		Иначе
			ПервыйЭлемент = НайденнаяСтрока.ИмяРеквизита;
			Индекс =Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Индекс(НайденнаяСтрока);
			Если КомандаКонтекстногоМеню.НаправлениеПеремещения = 1 Тогда
				Если Индекс < Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Количество() - 1 Тогда
					ВторойЭлемент = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Получить(Индекс + 1).ИмяРеквизита;
				КонецЕсли;
			Иначе
				Если Индекс > 0 Тогда
					ВторойЭлемент = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Получить(Индекс - 1).ИмяРеквизита;
				КонецЕсли;
			КонецЕсли;
			Результат = Новый Структура("ПоменятьМестамиЭлементы, ПервыйЭлемент, ВторойЭлемент", Истина, ПервыйЭлемент, ВторойЭлемент);
			ОбновитьКонтактнуюИнформациюФормы(Форма, Результат);
		КонецЕсли;
		
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		ЗаполнитьАдрес(Форма, ИмяРеквизита, НайденнаяСтрока, Результат);
		
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
		АдресПочты = Форма.Элементы[ИмяРеквизита].ТекстРедактирования;
		СоздатьЭлектронноеПисьмо("", АдресПочты, ТипКонтактнойИнформации);
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		
		Параметры = Новый Структура("НомерТелефона, ТипКонтактнойИнформации, ИсточникКонтактнойИнформации");
		Параметры.НомерТелефона = Форма.Элементы[ИмяРеквизита].ТекстРедактирования;
		Параметры.ТипКонтактнойИнформации = ТипКонтактнойИнформации;
		Параметры.ИсточникКонтактнойИнформации = Форма.ПараметрыКонтактнойИнформации.Владелец;
		
		Если ПустаяСтрока(Параметры.НомерТелефона) Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Для совершения звонка или отправки SMS требуется ввести номер телефона.'"));
			Возврат;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
			Список = Новый СписокЗначений;
			Список.Добавить("Позвонить", НСтр("ru = 'Позвонить'"),, БиблиотекаКартинок.Позвонить);
			Список.Добавить("ОтправитьSMS", НСтр("ru = 'Отправить SMS...'"),, БиблиотекаКартинок.ОтправитьSMS);
			ОповещениеМеню = Новый ОписаниеОповещения("ПослеВыбораИзМенюТелефон", ЭтотОбъект, Параметры);
			
			Форма.ПоказатьВыборИзМеню(ОповещениеМеню, Список, Форма.Элементы[ИмяКоманды]);
		Иначе
			ПозвонитьПоТелефону(Параметры.НомерТелефона);
		КонецЕсли;
		
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Skype") Тогда
		Параметры = Новый Структура("ЛогинSkype");
		Параметры.ЛогинSkype = Форма.Элементы[ИмяРеквизита].ТекстРедактирования;
		Список = Новый СписокЗначений;
		Список.Добавить("Позвонить", НСтр("ru = 'Позвонить'"));
		Список.Добавить("НачатьЧат", НСтр("ru = 'Начать чат'"));
		ОповещениеМеню = Новый ОписаниеОповещения("ПослеВыбораИзМенюSkype", ЭтотОбъект, Параметры);
		Форма.ПоказатьВыборИзМеню(ОповещениеМеню, Список, Форма.Элементы[ИмяКоманды]);
		
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
		АдресСсылки = Форма.Элементы[ИмяРеквизита].ТекстРедактирования;
		ПерейтиПоВебСсылке("", АдресСсылки, ТипКонтактнойИнформации);
	КонецЕсли;
	
КонецПроцедуры

// Открытие формы адреса формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма     - УправляемаяФорма - Форма владельца контактной информации.
//     Результат - Произвольный     - Данные, переданные обработчиком команды.
//
Процедура ОткрытьФормуВводаАдреса(Форма, Результат) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Свойство("ЭлементФормыАдреса") Тогда
			НачалоВыбора(Форма, Форма.Элементы[Результат.ЭлементФормыАдреса]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик возможного обновления формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма     - УправляемаяФорма - Форма владельца контактной информации.
//     Результат - Произвольный     - Данные, переданные обработчиком команды.
//
Процедура КонтрольОбновленияФормы(Форма, Результат) Экспорт
	
	// Анализ на обратный вызов формы ввода адреса.
	ОткрытьФормуВводаАдреса(Форма, Результат);
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора страны мира. 
// Реализует функционал автоматического заведения элемента справочника СтраныМира после выбора.
//
// Параметры:
//     Элемент              - ПолеФормы    - Элемент, содержащий редактируемую страну мира.
//     ВыбранноеЗначение    - Произвольный - Значение выбора.
//     СтандартнаяОбработка - Булево       - Устанавливаемый флаг стандартной обработки события формы.
//
Процедура СтранаМираОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	Если Не СтандартнаяОбработка Тогда 
		Возврат;
	КонецЕсли;
	
	ТипВыбранного = ТипЗнч(ВыбранноеЗначение);
	Если ТипВыбранного = Тип("Массив") Тогда
		СписокПреобразования = Новый Соответствие;
		Для Индекс = 0 По ВыбранноеЗначение.ВГраница() Цикл
			Данные = ВыбранноеЗначение[Индекс];
			Если ТипЗнч(Данные) = Тип("Структура") И Данные.Свойство("Код") Тогда
				СписокПреобразования.Вставить(Индекс, Данные.Код);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокПреобразования.Количество() > 0 Тогда
			УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КоллекцияСтранМираПоДаннымКлассификатора(СписокПреобразования);
			Для Каждого КлючЗначение Из СписокПреобразования Цикл
				ВыбранноеЗначение[КлючЗначение.Ключ] = КлючЗначение.Значение;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипВыбранного = Тип("Структура") И ВыбранноеЗначение.Свойство("Код") Тогда
		ВыбранноеЗначение = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.СтранаМираПоДаннымКлассификатора(ВыбранноеЗначение.Код);
		
	КонецЕсли;
	
КонецПроцедуры

// Конструктор для структуры параметров открытия формы контактной информации.
//
//  Параметры:
//      ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид редактируемой информации, 
//      Значение                - Строка - сериализованное значение полей контактной информации.
//      Представление           - Строка - необязательное представление.
//
Функция ПараметрыФормыКонтактнойИнформации(ВидКонтактнойИнформации, Значение,
	Представление = Неопределено, Комментарий = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформации);
	ПараметрыФормы.Вставить("ЗначенияПолей", Значение);
	ПараметрыФормы.Вставить("Представление", Представление);
	ПараметрыФормы.Вставить("Комментарий", Комментарий);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Открывает подходящую форму контактной информации для редактирования или просмотра.
//
//  Параметры:
//      Параметры    - Произвольный - результат функции ПараметрыФормыКонтактнойИнформации.
//      Владелец     - Произвольный - параметр для открываемой формы.
//      Оповещение   - ОписаниеОповещения - для обработки закрытия формы.
//
//  Возвращаемое значение: необходимая форма.
//
Функция ОткрытьФормуКонтактнойИнформации(Параметры, Владелец = Неопределено, Оповещение = Неопределено) Экспорт
	Параметры.Вставить("ОткрытаПоСценарию", Истина);
	Возврат ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма", Параметры, Владелец,,,, Оповещение);
КонецФункции

// Создает письмо по контактной информации.
//
//  Параметры:
//    ЗначенияПолей - Строка, Структура, Соответствие, Список значений - контактная информация.
//    Представление - Строка  - представление. Используется, если невозможно определить представление из параметра.
//                    ЗначенияПолей (отсутствие поля "Представление").
//    ОжидаемыйВид  - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура
//                    Используется для определения типа, если его невозможно вычислить по полю ЗначенияПолей.
//
Процедура СоздатьЭлектронноеПисьмо(Знач ЗначенияПолей, Знач Представление = "", ОжидаемыйВид = Неопределено) Экспорт
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.ПривестиКонтактнуюИнформациюXML(
		Новый Структура("ЗначенияПолей, Представление, ВидКонтактнойИнформации", ЗначенияПолей, Представление, ОжидаемыйВид));
		
	ТипИнформации = КонтактнаяИнформация.ТипКонтактнойИнформации;
	Если ТипИнформации <> ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Нельзя создать письмо по контактной информацию с типом ""%1""'"), ТипИнформации);
	КонецЕсли;
	
	Если ЗначенияПолей = "" И ПустаяСтрока(Представление) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Для отправки письма необходимо ввести адрес электронной почты.'"));
		Возврат;
	КонецЕсли;
	
	XMLДанные = КонтактнаяИнформация.ДанныеXML;
	АдресПочты = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.СтрокаСоставаКонтактнойИнформации(XMLДанные);
	Если ТипЗнч(АдресПочты) <> Тип("Строка") Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка получения адреса электронной почты, неверный тип контактной информации'");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		
		ПараметрыОтправки = Новый Структура("Получатель", АдресПочты);
		МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
		Возврат; 
	КонецЕсли;
	
	// Нет подсистемы почты, запускаем системное.
	Оповещение = Новый ОписаниеОповещения("СоздатьПисьмоПоКонтактнойИнформацииЗавершение", ЭтотОбъект, АдресПочты);
	ТекстПредложения = НСтр("ru = 'Для отправки письма необходимо установить расширение для работы с файлами.'");
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Оповещение, ТекстПредложения);
	
КонецПроцедуры

// Создает письмо по контактной информации.
//
//  Параметры:
//    ЗначенияПолей - Строка, Структура, Соответствие, Список значений - контактная информация.
//    Представление - Строка  - представление. Используется, если невозможно определить представление из параметра.
//                    ЗначенияПолей (отсутствие поля "Представление").
//    ОжидаемыйВид  - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура
//                    Используется для определения типа, если его невозможно вычислить по полю ЗначенияПолей.
//
Процедура СоздатьSMS(Знач ЗначенияПолей, Знач Представление = "", ОжидаемыйВид = Неопределено, ИсточникКонтактнойИнформации = "") Экспорт
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
		ВызватьИсключение НСтр("ru = 'Отправка SMS недоступна.'");
	КонецЕсли;
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.ПривестиКонтактнуюИнформациюXML(
		Новый Структура("ЗначенияПолей, Представление, ВидКонтактнойИнформации", ЗначенияПолей, Представление, ОжидаемыйВид));
		
	ТипИнформации = КонтактнаяИнформация.ТипКонтактнойИнформации;
	Если ТипИнформации <> ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Нельзя отправитьSMS по контактной информацию с типом ""%1""'"), ТипИнформации);
	КонецЕсли;
	
	Если ЗначенияПолей = "" И ПустаяСтрока(Представление) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Для отправки SMS необходимо ввести номер телефона.'"));
		Возврат;
	КонецЕсли;
	
	XMLДанные = КонтактнаяИнформация.ДанныеXML;
	Если ЗначениеЗаполнено(XMLДанные) Тогда
		НомерПолучателя = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.СтрокаСоставаКонтактнойИнформации(XMLДанные);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НомерПолучателя) Тогда
		НомерПолучателя = СокрЛП(Представление);
	КонецЕсли;
	НомераПолучателей = Новый Массив;
	НомераПолучателей.Добавить(НомерПолучателя);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяОтправителя", Неопределено);
	ДополнительныеПараметры.Вставить("ПеревестиВТранслит", Ложь);
	ДополнительныеПараметры.Вставить("ИсточникКонтактнойИнформации", ИсточникКонтактнойИнформации);
	МодульОтправкаSMSКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОтправкаSMSКлиент");
	МодульОтправкаSMSКлиент.ОтправитьSMS(НомераПолучателей, "", ДополнительныеПараметры);
	
КонецПроцедуры

// Открывает ссылку по контактной информации.
//
// Параметры:
//    ЗначенияПолей - Строка, Структура, Соответствие, Список значений - контактная информация.
//    Представление - Строка  - представление. Используется, если невозможно определить представление из параметра.
//                    ЗначенияПолей (отсутствие поля "Представление").
//    ОжидаемыйВид  - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура
//                    Используется для определения типа, если его невозможно вычислить по полю ЗначенияПолей.
//
Процедура ПерейтиПоВебСсылке(Знач ЗначенияПолей, Знач Представление = "", ОжидаемыйВид = Неопределено) Экспорт
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.ПривестиКонтактнуюИнформациюXML(
		Новый Структура("ЗначенияПолей, Представление, ВидКонтактнойИнформации", ЗначенияПолей, Представление, ОжидаемыйВид));
	ТипИнформации = КонтактнаяИнформация.ТипКонтактнойИнформации;
	
	Если ТипИнформации <> ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Нельзя открыть ссылку по контактной информации с типом ""%1""'"), ТипИнформации);
	КонецЕсли;
		
	XMLДанные = КонтактнаяИнформация.ДанныеXML;

	АдресСсылки = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.СтрокаСоставаКонтактнойИнформации(XMLДанные);
	Если ТипЗнч(АдресСсылки) <> Тип("Строка") Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка получения ссылки, неверный тип контактной информации'");
	КонецЕсли;
	
	Если СтрНайти(АдресСсылки, "://") > 0 Тогда
		ПерейтиПоНавигационнойСсылке(АдресСсылки);
	Иначе
		ПерейтиПоНавигационнойСсылке("http://" + АдресСсылки);
	КонецЕсли;
КонецПроцедуры

// Показывает адрес в браузере на картах Яндекс или Google
//
// Параметры:
//  Адрес						 - Строка - Текстовое представление адреса
//  ИмяКартографическогоСервиса	 - Строка - Имя картографического сервиса в котором необходимо показать адрес: Яндекс.Карты или GoogleMaps.
//
Процедура ПоказатьАдресНаКарте(Адрес, ИмяКартографическогоСервиса) Экспорт
	АдресКодированный = Адрес;
	Если ИмяКартографическогоСервиса = "GoogleMaps" Тогда
		СтрокаЗапуска = "https://maps.google.ru/?q=" + АдресКодированный;
	Иначе
		СтрокаЗапуска = "https://maps.yandex.ru/?text=" + АдресКодированный;
	КонецЕсли;
	
	ПерейтиПоНавигационнойСсылке(СтрокаЗапуска);
	
КонецПроцедуры

// Отображает форму с историей изменения контактной информации
//
Процедура ОткрытьФормуИсторииИзменений(Форма, ПараметрыКонтактнойИнформации) Экспорт
	
	Результат = Новый Структура("Вид", ПараметрыКонтактнойИнформации.Вид);
	НайденныеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Результат);
	
	СписокКонтактнойИнформации = Новый Массив;
	Для каждого СтрокаКонтактнойИнформации Из НайденныеСтроки Цикл
		КонтактнаяИнформация = Новый Структура("Представление, ЗначенияПолей, ДействуетС");
		ЗаполнитьЗначенияСвойств(КонтактнаяИнформация, СтрокаКонтактнойИнформации);
		СписокКонтактнойИнформации.Добавить(КонтактнаяИнформация);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура("Форма");
	ДополнительныеПараметры.Вставить("ИмяЭлемента", ПараметрыКонтактнойИнформации.ИмяРеквизита);
	ДополнительныеПараметры.Вставить("Вид", ПараметрыКонтактнойИнформации.Вид);
	ДополнительныеПараметры.Форма = Форма;
	
	ПараметрыФормы = Новый Структура("СписокКонтактнойИнформации", СписокКонтактнойИнформации);
	ПараметрыФормы.Вставить("ВидКонтактнойИнформации", ПараметрыКонтактнойИнформации.Вид);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	
	ОповещениеОЗакрытие = Новый ОписаниеОповещения("ПослеЗакрытияФормыИстории", УправлениеКонтактнойИнформациейКлиент, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма.ИсторияКонтактнойИнформации", ПараметрыФормы, Форма,,,, ОповещениеОЗакрытие);
	
КонецПроцедуры

// Устарела. Следует использовать ПриИзменении().
//
Процедура ПредставлениеПриИзменении(Форма, Элемент, ЭтоТабличнаяЧасть = Ложь) Экспорт
	ПриИзменении(Форма, Элемент, ЭтоТабличнаяЧасть);
КонецПроцедуры

// Устарела. Следует использовать НачалоВыбора()
//
Функция ПредставлениеНачалоВыбора(Форма, Элемент, Модифицированность = Истина, СтандартнаяОбработка = Ложь) Экспорт
	НачалоВыбора(Форма, Элемент, Модифицированность, СтандартнаяОбработка);
	Возврат Неопределено;
КонецФункции

// Устарела. Следует использовать Очистка()
Функция ПредставлениеОчистка(Форма, ИмяРеквизита) Экспорт
	Очистка(Форма, ИмяРеквизита);
	Возврат Неопределено;
КонецФункции

// Устарела. Следует использовать ВыполнитьКоманду()
//
Функция ПодключаемаяКоманда(Форма, ИмяКоманды) Экспорт
	ВыполнитьКоманду(Форма, ИмяКоманды);
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Завершение немодальных диалогов.

Процедура ПослеЗакрытияФормыИстории(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	Отбор = Новый Структура("Вид", ДополнительныеПараметры.Вид);
	НайденныеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	
	СтарыйКомментарий = Неопределено;
	Для каждого СтрокаКонтактнойИнформации Из НайденныеСтроки Цикл
		Если НЕ СтрокаКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация Тогда
			СтарыйКомментарий = СтрокаКонтактнойИнформации.Комментарий;
		КонецЕсли;
		Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Удалить(СтрокаКонтактнойИнформации);
	КонецЦикла;
	
	ЭтоИсторическаяКонтактнаяИнформация = Ложь;
	ПараметрыОбновления = Новый Структура;
	Для Каждого СтрокаКонтактнойИнформации Из Результат Цикл
		ДанныеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаКонтактнойИнформации);
		Если НЕ СтрокаКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация Тогда
			Форма[ДополнительныеПараметры.ИмяЭлемента] = СтрокаКонтактнойИнформации.Представление;
			ДанныеСтроки.ИмяРеквизита = ДополнительныеПараметры.ИмяЭлемента;
			Если ДанныеСтроки.Комментарий <> СтарыйКомментарий Тогда
				ПараметрыОбновления.Вставить("ЭтоДобавлениеКомментария", ЗначениеЗаполнено(ДанныеСтроки.Комментарий));
				ПараметрыОбновления.Вставить("ИмяРеквизита", ДополнительныеПараметры.ИмяЭлемента);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	Если ЗначениеЗаполнено(ПараметрыОбновления) Тогда
		ОбновитьКонтактнуюИнформациюФормы(Форма, ПараметрыОбновления);
	КонецЕсли;
КонецПроцедуры

Процедура ПредставлениеНачалоВыбораЗавершение(Знач РезультатЗакрытия, Знач ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = ДополнительныеПараметры.ДанныеЗаполнения;
	НоваяСтрока      = ДополнительныеПараметры.ДанныеСтроки;
	Результат        = ДополнительныеПараметры.Результат;
	Элемент          = ДополнительныеПараметры.Элемент;
	Форма            = ДополнительныеПараметры.Форма;
	
	ТекстПредставления = РезультатЗакрытия.Представление;
	
	Если НоваяСтрока.Свойство("ХранитьИсториюИзменений") И НоваяСтрока.ХранитьИсториюИзменений Тогда
		КонтактнаяИнформацияОписаниеДополнительныхРеквизитов = ДанныеЗаполнения.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
		Отбор = Новый Структура("Вид", НоваяСтрока.Вид);
		НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Для Каждого СтрокаКонтактнойИнформации Из НайденныеСтроки Цикл
			КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Удалить(СтрокаКонтактнойИнформации);
		КонецЦикла;
		
		Отбор = Новый Структура("Вид", НоваяСтрока.Вид);
		НайденныеСтроки = РезультатЗакрытия.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		ЭтоИсторическаяКонтактнаяИнформация = Ложь;
		ПоследниеЗначениеПолей = "";
		
		Для Каждого СтрокаКонтактнойИнформации Из НайденныеСтроки Цикл
			Если НЕ СтрокаКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация Тогда
				Если СтрСравнить(СтрокаКонтактнойИнформации.ЗначенияПолей, РезультатЗакрытия.КонтактнаяИнформация) <> 0 Тогда
					Если СтрокаКонтактнойИнформации.ДействуетС < НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
						// Контактная информация стала историей.
						НоваяКонтактнаяИнформация = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяКонтактнаяИнформация, СтрокаКонтактнойИнформации);
						НоваяКонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация = Истина;
						НоваяКонтактнаяИнформация.ИмяРеквизита= "";
					КонецЕсли;
						// Новая контактная информация.
						НоваяКонтактнаяИнформация = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяКонтактнаяИнформация, РезультатЗакрытия);
						НоваяКонтактнаяИнформация.ЗначенияПолей = РезультатЗакрытия.КонтактнаяИнформация;
						НоваяКонтактнаяИнформация.ДействуетС = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
						НоваяКонтактнаяИнформация.ИмяРеквизита = Элемент.Имя;
						НоваяКонтактнаяИнформация.ХранитьИсториюИзменений = Истина;
						НоваяКонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация = Ложь;
				Иначе
					НоваяКонтактнаяИнформация = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяКонтактнаяИнформация, СтрокаКонтактнойИнформации);
				КонецЕсли;
			Иначе
				НоваяКонтактнаяИнформация = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяКонтактнаяИнформация, СтрокаКонтактнойИнформации);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения[Элемент.Имя + "ЗначенияПолей"] = РезультатЗакрытия.КонтактнаяИнформация;
		
	Иначе
		Если ПустаяСтрока(НоваяСтрока.Комментарий) И Не ПустаяСтрока(РезультатЗакрытия.Комментарий) Тогда
			Результат.Вставить("ЭтоДобавлениеКомментария", Истина);
			
		ИначеЕсли Не ПустаяСтрока(НоваяСтрока.Комментарий) И ПустаяСтрока(РезультатЗакрытия.Комментарий) Тогда
			Результат.Вставить("ЭтоДобавлениеКомментария", Ложь);
			
		Иначе
			Если Не ПустаяСтрока(НоваяСтрока.Комментарий) Тогда
				ЭлементКомментария = Форма.Элементы.Найти("Комментарий" + Элемент.Имя);
				Если ЭлементКомментария <> Неопределено Тогда
					ЭлементКомментария.Заголовок = РезультатЗакрытия.Комментарий;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока.Представление = ТекстПредставления;
		НоваяСтрока.ЗначенияПолей = РезультатЗакрытия.КонтактнаяИнформация;
		НоваяСтрока.Комментарий   = РезультатЗакрытия.Комментарий;
	КонецЕсли;
	
	Если РезультатЗакрытия.Свойство("АдресВВидеГиперссылки")
		И РезультатЗакрытия.АдресВВидеГиперссылки
		И НЕ ЗначениеЗаполнено(ТекстПредставления) Тогда
			ДанныеЗаполнения[Элемент.Имя] = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
	Иначе
		ДанныеЗаполнения[Элемент.Имя] = ТекстПредставления;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	ОбновитьКонтактнуюИнформациюФормы(Форма, Результат);
КонецПроцедуры

Процедура КонтактнаяИнформацияДобавитьПолеВводаЗавершение(Знач ВыбранныйЭлемент, Знач ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		// Отказ от выбора
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура("ДобавляемыйВид", ВыбранныйЭлемент.Значение);
	
	ОбновитьКонтактнуюИнформациюФормы(ДополнительныеПараметры.Форма, Результат);
КонецПроцедуры

Процедура ПослеЗапускаПриложения(ВыбранныйЭлемент, Параметры) Экспорт
	// Процедура заглушка, т.к. НачатьЗапускПриложения требуется наличие обработчика оповещения.
КонецПроцедуры

//  Обработчик события НачалоВыбора для улицы.
//
//  Параметры:
//      Владелец                       - Произвольный - вызывающий элемент формы.
//      ИдентификаторНаселенногоПункта - УникальныйИдентификатор - ограничение по населенному пункту.
//      ТекущееЗначение                - УникальныйИдентификатор, Строка - текущее значение - или код классификатора,
//                                       или текст.
//      ДополнительныеПараметры        - Структура - дополнительная структура параметров.
//
Процедура НачалоВыбораУлицы(Владелец, ИдентификаторНаселенногоПункта, ТекущееЗначение, ДополнительныеПараметры) Экспорт
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Возврат;
	КонецЕсли;
	
	СкрыватьНеактуальныеАдреса = Неопределено;
	ДополнительныеПараметры.Свойство("СкрыватьНеактуальныеАдреса", СкрыватьНеактуальныеАдреса);
	Если СкрыватьНеактуальныеАдреса = Неопределено Тогда
		СкрыватьНеактуальныеАдреса = Ложь;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Родитель", ИдентификаторНаселенногоПункта);
	Параметры.Вставить("ПредставлениеУлицы", ТекущееЗначение);
	Параметры.Вставить("Уровень",  7);
	Параметры.Вставить("СкрыватьНеактуальныеАдреса",        СкрыватьНеактуальныеАдреса);
	
	ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма.ВыборУлицы", Параметры, Владелец, 
		,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

//  Предлагает загрузить адресный классификатор.
//
//  Параметры:
//      Текст  - Строка        - Дополнительный текст предложения.
//      Регион - Число, Строка - Код или название региона для загрузки.
//
Процедура ПредложениеЗагрузкиКлассификатора(Знач Текст = "", Знач Регион = Неопределено) Экспорт
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Возврат;
	КонецЕсли;
	
	ТипПараметраРегиона = ТипЗнч(Регион);
	ПараметрыЗагрузки   = Новый Структура;
	
	Если ТипПараметраРегиона = Тип("Число") Тогда
		ПараметрыЗагрузки.Вставить("КодРегионаДляЗагрузки", Регион);
		
	ИначеЕсли ТипПараметраРегиона = Тип("Строка") Тогда
		ПараметрыЗагрузки.Вставить("НазваниеРегионаДляЗагрузки", Регион);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПредложениеЗагрузкиКлассификатораЗавершение", ЭтотОбъект, ПараметрыЗагрузки);
	ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма.ЗагрузкаАдресногоКлассификатора", ПараметрыЗагрузки, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ПредложениеЗагрузкиКлассификатораЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьАдресныйКлассификатор(ДополнительныеПараметры);
КонецПроцедуры

//  Загружает адресный классификатор.
//
Процедура ЗагрузитьАдресныйКлассификатор(Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("АдресныйКлассификаторКлиент");
		МодульАдресныйКлассификаторКлиент.ЗагрузитьАдресныйКлассификатор(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Страны ЕАЭС поддерживающие структурированный ввод
// 
// Возвращаемое значение:
//  Соответствие - Список стран
//
Функция СтраныПоддерживающиеСтруктурированныйВвод() Экспорт
	СписокСтран = Новый Соответствие;
	СписокСтран.Вставить("БЕЛАРУСЬ", Истина);
	СписокСтран.Вставить("КАЗАХСТАН", Истина);
	СписокСтран.Вставить("АРМЕНИЯ", Истина);
	СписокСтран.Вставить("КИРГИЗИЯ", Истина);
	Возврат СписокСтран;
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////

// Завершение модального диалога создания письма.
Процедура СоздатьПисьмоПоКонтактнойИнформацииЗавершение(Действие, АдресПочты) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьПисьмоПоКонтактнойИнформацииПослеЗапускаПриложения", ЭтотОбъект);
	НачатьЗапускПриложения(ОписаниеОповещения, "mailto:" + АдресПочты);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПослеВыбораИзМенюSkype(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
		Если ПустаяСтрока(ПрограммаТелефонииУстановлена("skype")) Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для совершения звонка по Skype требуется установить программу.'"));
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	СтрокаЗапуска = "skype:" + Параметры.ЛогинSkype;
	Если ВыбранныйЭлемент.Значение = "Позвонить" Тогда
		СтрокаЗапуска = СтрокаЗапуска + "?call";
	ИначеЕсли ВыбранныйЭлемент.Значение = "НачатьЧат" Тогда
		СтрокаЗапуска = СтрокаЗапуска + "?chat";
	Иначе
		СтрокаЗапуска = СтрокаЗапуска + "?userinfo";
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗапускSkype", ЭтотОбъект, СтрокаЗапуска);
	ТекстСообщения = НСтр("ru = 'Для запуска Skype необходимо установить расширение работы с файлами.'");
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстСообщения);

КонецПроцедуры

Процедура ПослеВыбораИзМенюТелефон(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Если ВыбранныйЭлемент.Значение = "ОтправитьSMS" Тогда
			СоздатьSMS("", Параметры.НомерТелефона, Параметры.ТипКонтактнойИнформации, Параметры.ИсточникКонтактнойИнформации);
		Иначе
			ПозвонитьПоТелефону(Параметры.НомерТелефона);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗапускSkype(РасширениеПодключено, СтрокаЗапуска) Экспорт
	
	Если РасширениеПодключено Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗапускаПриложения", ЭтотОбъект);
		НачатьЗапускПриложения(Оповещение, СтрокаЗапуска);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПозвонитьПоТелефону(НомерТелефона)
	
	НомерТелефона = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()_- ", НомерТелефона, "");
	
	// по умолчанию используем "tel"
	ИмяПротокола = "tel";

	#Если НЕ ВебКлиент Тогда
		ДоступноеИмяПротокола = ПрограммаТелефонииУстановлена();
		Если ДоступноеИмяПротокола = Неопределено Тогда
			СтрокаСПредупреждением = Новый ФорматированнаяСтрока(
					НСтр("ru = 'Для совершения звонка требуется установить программу телефонии, например'"),
					 " ", Новый ФорматированнаяСтрока("Skype",,,, "http://www.skype.com"), ".");
			ПоказатьПредупреждение(Неопределено, СтрокаСПредупреждением);
			Возврат;
		ИначеЕсли НЕ ПустаяСтрока(ДоступноеИмяПротокола) Тогда
			ИмяПротокола = ДоступноеИмяПротокола;
		КонецЕсли;
	#КонецЕсли
	
	СтрокаЗапуска = ИмяПротокола + ":" + НомерТелефона;
	
	Оповещение = Новый ОписаниеОповещения("СовершитьЗвонок", ЭтотОбъект, СтрокаЗапуска);
	ТекстСообщения = НСтр("ru = 'Для совершения звонка необходимо установить расширение работы с файлами.'");
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстСообщения);
	
КонецПроцедуры

Процедура СовершитьЗвонок(РасширениеПодключено, СтрокаЗапуска) Экспорт
	
	Если РасширениеПодключено Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗапускаПриложения", ЭтотОбъект);
		НачатьЗапускПриложения(Оповещение, СтрокаЗапуска);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает строку дополнительных значений по имени реквизита.
//
// Параметры:
//    Форма   - УправляемаяФорма - передаваемая форма.
//    Элемент - ДанныеФормыСтруктураСКоллекцией - данные формы.
//
// Возвращаемое значение:
//    СтрокаКоллекции - найденные данные.
//    Неопределено    - при отсутствии данных.
//
Функция ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, ЭтоТабличнаяЧасть = Ложь)
	
	Отбор = Новый Структура("ИмяРеквизита", Элемент.Имя);
	Строки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	
	Если ЭтоТабличнаяЧасть И ДанныеСтроки <> Неопределено Тогда
		
		ПутьКСтроке = Форма.Элементы[Форма.ТекущийЭлемент.Имя].ТекущиеДанные;
		
		ДанныеСтроки.Представление = ПутьКСтроке[Элемент.Имя];
		ДанныеСтроки.ЗначенияПолей = ПутьКСтроке[Элемент.Имя + "ЗначенияПолей"];
		
	КонецЕсли;
	
	Возврат ДанныеСтроки;
	
КонецФункции

// Заполнение адреса другим адресом.
Процедура ЗаполнитьАдрес(Знач Форма, Знач ИмяРеквизита, Знач НайденнаяСтрока, Знач Результат)
	
	// Все строки - адреса,
	ВсеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	НайденныеСтроки = ВсеСтроки.НайтиСтроки( Новый Структура("Тип, ЭтоРеквизитТабличнойЧасти", НайденнаяСтрока.Тип, Ложь) );
	НайденныеСтроки.Удалить( НайденныеСтроки.Найти(НайденнаяСтрока) );
	
	ЗначенияПолейДляАнализа = Новый Массив;
	Для Каждого Адрес Из НайденныеСтроки Цикл
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("Идентификатор", Адрес.ПолучитьИдентификатор());
		СтруктураАдреса.Вставить("Представление", Адрес.Представление);
		СтруктураАдреса.Вставить("ЗначениеПолей", Адрес.ЗначенияПолей);
		СтруктураАдреса.Вставить("ВидАдреса", Адрес.Вид);
		ЗначенияПолейДляАнализа.Добавить(СтруктураАдреса);
	КонецЦикла;
	
	АдресаДляЗаполнения = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.ДоступныеДляКопированияАдреса(ЗначенияПолейДляАнализа, НайденнаяСтрока.Вид);
		
	Если АдресаДляЗаполнения.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для того чтобы не вводить один и тот же адрес несколько раз, можно скопировать в это поле значение, ранее введенное в соседнем поле.'")
			,, НСтр("ru = 'Копирование адреса'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьАдресЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("Форма", Форма);
	Оповещение.ДополнительныеПараметры.Вставить("НайденнаяСтрока", НайденнаяСтрока);
	Оповещение.ДополнительныеПараметры.Вставить("ИмяРеквизита",    ИмяРеквизита);
	Оповещение.ДополнительныеПараметры.Вставить("Результат",       Результат);
	
	Форма.ПоказатьВыборИзМеню(Оповещение, АдресаДляЗаполнения, Форма.Элементы["Команда" + ИмяРеквизита]);
КонецПроцедуры

// Завершение немодального диалога.
Процедура ЗаполнитьАдресЗавершение(Знач ВыбранныйЭлемент, Знач ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВсеСтроки = ДополнительныеПараметры.Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	СтрокаИсточник = ВсеСтроки.НайтиПоИдентификатору(ВыбранныйЭлемент.Значение);
	Если СтрокаИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ДополнительныеПараметры.НайденнаяСтрока.ЗначенияПолей = СтрокаИсточник.ЗначенияПолей;
	ДополнительныеПараметры.НайденнаяСтрока.Представление = СтрокаИсточник.Представление;
	ДополнительныеПараметры.НайденнаяСтрока.Комментарий   = СтрокаИсточник.Комментарий;
		
	ДополнительныеПараметры.Форма[ДополнительныеПараметры.ИмяРеквизита] = СтрокаИсточник.Представление;
		
	ДополнительныеПараметры.Форма.Модифицированность = Истина;
	ОбновитьКонтактнуюИнформациюФормы(ДополнительныеПараметры.Форма, ДополнительныеПараметры.Результат);

КонецПроцедуры

// Ввод комментария из контекстного меню.
Процедура ВвестиКомментарий(Знач Форма, Знач ИмяРеквизита, Знач НайденнаяСтрока, Знач Результат)
	Комментарий = НайденнаяСтрока.Комментарий;
	
	Оповещение = Новый ОписаниеОповещения("ВвестиКомментарийЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("Форма", Форма);
	Оповещение.ДополнительныеПараметры.Вставить("ИмяРеквизитаКомментария", "Комментарий" + ИмяРеквизита);
	Оповещение.ДополнительныеПараметры.Вставить("НайденнаяСтрока", НайденнаяСтрока);
	Оповещение.ДополнительныеПараметры.Вставить("ПредыдущийКомментарий", Комментарий);
	Оповещение.ДополнительныеПараметры.Вставить("Результат", Результат);
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, Комментарий, 
		НСтр("ru = 'Комментарий'"));
КонецПроцедуры

// Завершение немодального диалога.
Процедура ВвестиКомментарийЗавершение(Знач Комментарий, Знач ДополнительныеПараметры) Экспорт
	Если Комментарий = Неопределено Или Комментарий = ДополнительныеПараметры.ПредыдущийКомментарий Тогда
		// Отказ от ввода или нет изменений.
		Возврат;
	КонецЕсли;
	
	КомментарийБылПустой  = ПустаяСтрока(ДополнительныеПараметры.ПредыдущийКомментарий);
	КомментарийСталПустой = ПустаяСтрока(Комментарий);
	
	ДополнительныеПараметры.НайденнаяСтрока.Комментарий = Комментарий;
	
	Если КомментарийБылПустой И Не КомментарийСталПустой Тогда
		ДополнительныеПараметры.Результат.Вставить("ЭтоДобавлениеКомментария", Истина);
	ИначеЕсли Не КомментарийБылПустой И КомментарийСталПустой Тогда
		ДополнительныеПараметры.Результат.Вставить("ЭтоДобавлениеКомментария", Ложь);
	Иначе
		Элемент = ДополнительныеПараметры.Форма.Элементы[ДополнительныеПараметры.ИмяРеквизитаКомментария];
		Элемент.Заголовок = Комментарий;
	КонецЕсли;
	
	ДополнительныеПараметры.Форма.Модифицированность = Истина;
	ОбновитьКонтактнуюИнформациюФормы(ДополнительныеПараметры.Форма, ДополнительныеПараметры.Результат)
КонецПроцедуры

// Контекстный вызов
Процедура ОбновитьКонтактнуюИнформациюФормы(Форма, Результат)

	Форма.Подключаемый_ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

Функция ЭтоТабличнаяЧасть(Элемент)
	
	Родитель = Элемент.Родитель;
	
	Пока ТипЗнч(Родитель) <> Тип("УправляемаяФорма") Цикл
		
		Если ТипЗнч(Родитель) = Тип("ТаблицаФормы") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Родитель = Родитель.Родитель;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// определение команды контекстного меню 
Функция КомандаКонтекстногоМеню(ИмяКоманды)
	
	Результат = Новый Структура("Команда, НаправлениеПеремещения, ИмяРеквизита", Неопределено, 0, Неопределено);
	
	ИмяРеквизита = СтрЗаменить(ИмяКоманды, "КонтекстноеМеню", "");
	Если СтрНачинаетсяС(ИмяРеквизита, "Вверх") Тогда
		Результат.ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "Вверх", "");
		Результат.НаправлениеПеремещения = -1;
		Результат.Команда = "Вверх";
	ИначеЕсли СтрНачинаетсяС(ИмяРеквизита, "История") Тогда
		Результат.ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "История", "");
		Результат.Команда = "История";
	ИначеЕсли СтрНачинаетсяС(ИмяРеквизита, "Вниз") Тогда
		Результат.ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "Вниз", "");
		Результат.НаправлениеПеремещения = 1;
		Результат.Команда = "Вниз";
	ИначеЕсли СтрНачинаетсяС(ИмяРеквизита, "КартаЯндекс") Тогда
		Результат.ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "КартаЯндекс", "");
		Результат.Команда = "КартаЯндекс";
	ИначеЕсли СтрНачинаетсяС(ИмяРеквизита, "КартаGoogle") Тогда
		Результат.ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "КартаGoogle", "");
		Результат.Команда = "КартаGoogle";
	Иначе
		Результат.ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "Комментарий", "");
		Результат.Команда = "Комментарий";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы.

Процедура СоздатьПисьмоПоКонтактнойИнформацииПослеЗапускаПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	// Действие не требуется
КонецПроцедуры

// Проверяет, установлена ли программа телефонии на компьютер.
//  Проверка возможна только в тонком клиенте для Windows.
//
// Параметры:
//  ИмяПротокола - Строка - Имя проверяемого URI протокола, возможные варианты "skype", "tel", "sip".
//                          Если параметр не указан, то проверяются все протоколы. 
// 
// Возвращаемое значение:
//  Строка - имя доступного URI протокола зарегистрирована в реестре. Пустая строка - если протокол не доступен.
//  Неопределенно если проверка не возможна.
//
Функция ПрограммаТелефонииУстановлена(ИмяПротокола = Неопределено)
	
		Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
			Если ЗначениеЗаполнено(ИмяПротокола) Тогда
				Возврат ?(ИмяПротоколаЗарегистрированоВРеестре(ИмяПротокола), ИмяПротокола, "");
			Иначе
				СписокПротоколов = Новый Массив;
				СписокПротоколов.Добавить("tel");
				СписокПротоколов.Добавить("sip");
				СписокПротоколов.Добавить("skype");
				Для каждого ИмяПротокола Из СписокПротоколов Цикл
					Если ИмяПротоколаЗарегистрированоВРеестре(ИмяПротокола) Тогда
						Возврат ИмяПротокола;
					КонецЕсли;
				КонецЦикла;
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	
	Возврат "";
КонецФункции

Функция ИмяПротоколаЗарегистрированоВРеестре(ИмяПротокола)
	
	Попытка
		Оболочка = Новый COMОбъект("Wscript.Shell");
		Результат = Оболочка.RegRead("HKEY_CLASSES_ROOT\" + ИмяПротокола + "\");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции


#КонецОбласти
