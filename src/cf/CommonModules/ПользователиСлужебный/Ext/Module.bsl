////////////////////////////////////////////////////////////////////////////////
// Подсистема "Пользователи".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Объявление служебных событий, к которым можно подключать обработчики БСП.

// Объявляет служебные события подсистемы Пользователи:
//
// Серверные события:
//   ПриСозданииПользователяВМоментВхода,
//   ПриАвторизацииНовогоПользователяИБ,
//   ПриНачалеОбработкиПользователяИБ,
//   ПередЗаписьюПользователяИБ.
//
// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия) Экспорт
	
	// СЕРВЕРНЫЕ СОБЫТИЯ.
	
	// Вызывается при создании элемента справочника "Пользователи" в момент интерактивного входа пользователя.
	//
	// Параметры:
	//  НовыйПользователь - СправочникОбъект.Пользователи.
	//
	// Синтаксис:
	// Процедура ПриСозданииПользователяВМоментВхода(НовыйПользователь) Экспорт
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.Пользователи\ПриСозданииПользователяВМоментВхода");
	
	// Вызывается при авторизации нового пользователя информационной базы.
	//
	// Параметры:
	//  ПользовательИБ - ПользовательИнформационнойБазы, текущий пользователь информационной базы,
	//  СтандартнаяОбработка - Булево, значение может быть установлено внутри обработчика, в этом случае
	//    стандартная обработка авторизации нового пользователя ИБ выполняться не будет.
	//
	// Синтаксис:
	// Процедура ПриАвторизацииНовогоПользователяИБ(ПользовательИБ, СтандартнаяОбработка) Экспорт
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.Пользователи\ПриАвторизацииНовогоПользователяИБ");
	
	// Вызывается при начале обработки пользователя информационной базы.
	//
	// Параметры:
	//  ПараметрыОбработки - Структура, см. комментарий к процедуре НачатьОбработкуПользователяИБ().
	//  ОписаниеПользователяИБ - Структура, см. комментарий к процедуре НачатьОбработкуПользователяИБ().
	//
	// Синтаксис:
	// Процедура ПриНачалеОбработкиПользователяИБ(ПараметрыОбработки, ОписаниеПользователяИБ);
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.Пользователи\ПриНачалеОбработкиПользователяИБ");
	
	// Вызывается перед записью пользователя информационной базы.
	//
	// Параметры:
	//  ИдентификаторПользователяИБ - УникальныйИдентификатор.
	//
	// Синтаксис:
	// Процедура ПередЗаписьюПользователяИБ(ИдентификаторПользователяИБ) Экспорт
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.Пользователи\ПередЗаписьюПользователяИБ");
	
КонецПроцедуры

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"ПользователиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиента"].Добавить(
		"ПользователиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииИсключенийПоискаСсылок"].Добавить(
		"ПользователиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхПодчиненному"].Добавить(
		"ПользователиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхГлавному"].Добавить(
		"ПользователиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтПодчиненного"].Добавить(
		"ПользователиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтГлавного"].Добавить(
		"ПользователиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПослеПолученияДанныхОтПодчиненного"].Добавить(
		"ПользователиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПослеПолученияДанныхОтГлавного"].Добавить(
		"ПользователиСлужебный");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.УправлениеДоступом\ПриЗаполненииВидовОграниченийПравОбъектовМетаданных"].Добавить(
			"ПользователиСлужебный");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.ОбменДанными\ПриНастройкеПодчиненногоУзлаРИБ"].Добавить(
			"ПользователиСлужебный");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.ВариантыОтчетов\ПриНастройкеВариантовОтчетов"].Добавить(
			"ПользователиСлужебный");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.ТекущиеДела\ПриЗаполненииСпискаТекущихДел"].Добавить(
			"ПользователиСлужебный");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий\ПриПолученииСпискаШаблонов"].Добавить(
			"ПользователиСлужебный");
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Основные процедуры и функции.

// Заполняет параметр сеанса ТекущийПользователь или ТекущийВнешнийПользователь
// значением пользователя, найденному по пользователю информационной базы
// под которым запущен сеанс.
//  Если пользователь не найден, то при наличии административных прав
// создается новый пользователь в справочнике, иначе вызывается исключение.
// 
Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра <> "ТекущийПользователь"
	   И ИмяПараметра <> "ТекущийВнешнийПользователь"
	   И ИмяПараметра <> "АвторизованныйПользователь" Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		Значения = ЗначенияПараметровСеансаТекущийПользователь();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось установить параметр сеанса ТекущийПользователь по причине:
			           |""%1"".
			           |
			           |Обратитесь к администратору.'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	Если ТипЗнч(Значения) = Тип("Строка") Тогда
		ВызватьИсключение Значения;
	КонецЕсли;
	
	ПараметрыСеанса.ТекущийПользователь        = Значения.ТекущийПользователь;
	ПараметрыСеанса.ТекущийВнешнийПользователь = Значения.ТекущийВнешнийПользователь;
	
	Если ЗначениеЗаполнено(Значения.ТекущийПользователь) Тогда
		ПараметрыСеанса.АвторизованныйПользователь = Значения.ТекущийПользователь;
	Иначе
		ПараметрыСеанса.АвторизованныйПользователь = Значения.ТекущийВнешнийПользователь;
	КонецЕсли;
	
	УстановленныеПараметры.Добавить("ТекущийПользователь");
	УстановленныеПараметры.Добавить("ТекущийВнешнийПользователь");
	УстановленныеПараметры.Добавить("АвторизованныйПользователь");
	
КонецПроцедуры

Функция ЗначенияПараметровСеансаТекущийПользователь()
	
	Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат
			НСтр("ru = 'Недопустимое получение параметра сеанса ТекущийПользователь
			           |в сеансе без указания всех разделителей.'");
	КонецЕсли;
	
	ЗаголовокОшибки = НСтр("ru = 'Не удалось установить параметр сеанса ТекущийПользователь.'") + Символы.ПС;
	
	НачатьТранзакцию();
	Попытка
		ПользовательНеНайден = Ложь;
		СоздатьПользователя  = Ложь;
		СсылкаНового         = Неопределено;
		Служебный            = Ложь;
		
		ТекущийПользователь        = Неопределено;
		ТекущийВнешнийПользователь = Неопределено;
		
		ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		
		Если ПустаяСтрока(ТекущийПользовательИБ.Имя) Тогда
			
			ТекущийВнешнийПользователь = Справочники.ВнешниеПользователи.ПустаяСсылка();
			
			СвойстваНеуказанногоПользователя = СвойстваНеуказанногоПользователя();
			
			ИмяПользователя       = СвойстваНеуказанногоПользователя.ПолноеИмя;
			ПолноеИмяПользователя = СвойстваНеуказанногоПользователя.ПолноеИмя;
			СсылкаНового          = СвойстваНеуказанногоПользователя.СтандартнаяСсылка;
			
			Если СвойстваНеуказанногоПользователя.Ссылка = Неопределено Тогда
				ПользовательНеНайден = Истина;
				СоздатьПользователя  = Истина;
				Служебный = Истина;
				ИдентификаторПользователяИБ = "";
			Иначе
				ТекущийПользователь = СвойстваНеуказанногоПользователя.Ссылка;
			КонецЕсли;
		Иначе
			ИмяПользователя             = ТекущийПользовательИБ.Имя;
			ИдентификаторПользователяИБ = ТекущийПользовательИБ.УникальныйИдентификатор;
			
			Пользователи.НайтиНеоднозначныхПользователейИБ(Неопределено, ИдентификаторПользователяИБ);
			
			Запрос = Новый Запрос;
			Запрос.Параметры.Вставить("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
			
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Пользователи.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
			РезультатПользователи = Запрос.Выполнить();
			
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ВнешниеПользователи.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
			|ГДЕ
			|	ВнешниеПользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
			РезультатВнешниеПользователи = Запрос.Выполнить();
			
			Если НЕ РезультатВнешниеПользователи.Пустой() Тогда
				
				Выборка = РезультатВнешниеПользователи.Выбрать();
				Выборка.Следующий();
				ТекущийПользователь        = Справочники.Пользователи.ПустаяСсылка();
				ТекущийВнешнийПользователь = Выборка.Ссылка;
				
				Если НЕ ВнешниеПользователи.ИспользоватьВнешнихПользователей() Тогда
					Возврат НСтр("ru = 'Внешние пользователи отключены.'");
				КонецЕсли;
			Иначе
				ТекущийВнешнийПользователь = Справочники.ВнешниеПользователи.ПустаяСсылка();
				
				Если РезультатПользователи.Пустой() Тогда
					РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
					
					Если РолиАдминистратораДоступны() Тогда
						ИдентификаторПользователяИБ = ТекущийПользовательИБ.УникальныйИдентификатор;
						
						ПолноеИмяПользователя       = ТекущийПользовательИБ.ПолноеИмя;
						ПользовательПоНаименованию  = СсылкаПользователяПоПолномуНаименованию(ПолноеИмяПользователя);
						
						Если ПользовательПоНаименованию = Неопределено Тогда
							ПользовательНеНайден = Истина;
							СоздатьПользователя  = Истина;
						Иначе
							ТекущийПользователь = ПользовательПоНаименованию;
						КонецЕсли;
					Иначе
						ПользовательНеНайден = Истина;
					КонецЕсли;
				Иначе
					Выборка = РезультатПользователи.Выбрать();
					Выборка.Следующий();
					ТекущийПользователь = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СоздатьПользователя Тогда
			
			НачатьТранзакцию();
			Попытка
				
				Если СсылкаНового = Неопределено Тогда
					СсылкаНового = Справочники.Пользователи.ПолучитьСсылку();
				КонецЕсли;
				
				ТекущийПользователь = СсылкаНового;
				
				ПараметрыСеанса.ТекущийПользователь        = ТекущийПользователь;
				ПараметрыСеанса.ТекущийВнешнийПользователь = ТекущийВнешнийПользователь;
				ПараметрыСеанса.АвторизованныйПользователь = ТекущийПользователь;
				
				НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
				НовыйПользователь.Служебный = Служебный;
				НовыйПользователь.Наименование = ПолноеИмяПользователя;
				НовыйПользователь.УстановитьСсылкуНового(СсылкаНового);
				
				Если ЗначениеЗаполнено(ИдентификаторПользователяИБ) Тогда
					
					ОписаниеПользователяИБ = Новый Структура;
					ОписаниеПользователяИБ.Вставить("Действие", "Записать");
					ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", ИдентификаторПользователяИБ);
					
					НовыйПользователь.ДополнительныеСвойства.Вставить(
						"ОписаниеПользователяИБ", ОписаниеПользователяИБ);
				КонецЕсли;
				
				Обработчики = ОбщегоНазначения.ОбработчикиСлужебногоСобытия("СтандартныеПодсистемы.Пользователи\ПриСозданииПользователяВМоментВхода");
				Для Каждого Обработчик Из Обработчики Цикл
					Обработчик.Модуль.ПриСозданииПользователяВМоментВхода(НовыйПользователь);
				КонецЦикла;
				
				НовыйПользователь.Записать();
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ОчищаемыеПараметры = Новый Массив;
				ОчищаемыеПараметры.Добавить("ТекущийПользователь");
				ОчищаемыеПараметры.Добавить("ТекущийВнешнийПользователь");
				ОчищаемыеПараметры.Добавить("АвторизованныйПользователь");
				ПараметрыСеанса.Очистить(ОчищаемыеПараметры);
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если Не СоздатьПользователя И ПользовательНеНайден Тогда
		Возврат ЗаголовокОшибки + ТекстСообщенияПользовательНеНайденВСправочнике(ИмяПользователя);
	КонецЕсли;
	
	Если ТекущийПользователь = Неопределено
	 ИЛИ ТекущийВнешнийПользователь = Неопределено Тогда
		
		Возврат ЗаголовокОшибки + ТекстСообщенияПользовательНеНайденВСправочнике(ИмяПользователя) + Символы.ПС
			+ НСтр("ru = 'Возникла внутренняя ошибка при поиске пользователя.'");
	КонецЕсли;
	
	Значения = Новый Структура;
	Значения.Вставить("ТекущийПользователь",        ТекущийПользователь);
	Значения.Вставить("ТекущийВнешнийПользователь", ТекущийВнешнийПользователь);
	
	Возврат Значения;
	
КонецФункции

// Вызывается при начале работы системы, чтобы проверить возможность выполнения авторизации и
// вызвать заполнение значений параметров сеанса ТекущийПользователь и ТекущийВнешнийПользователь.
// Также вызывается при входе в область данных.
//
// Возвращаемое значение:
//  Строка - пустая строка   - авторизация выполнена успешно.
//           Непустая строка - описание ошибки.
//                             При начале работы системы следует
//                             завершить работу 1С:Предприятия.
//
Функция АвторизоватьТекущегоПользователя(ПриНачалеРаботыСистемы = Ложь, РегистрироватьВЖурнале = Ложь) Экспорт
	
	Если НЕ ПриНачалеРаботыСистемы Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	ЭтоВнешнийПользователь = ЗначениеЗаполнено(Справочники.ВнешниеПользователи.НайтиПоРеквизиту(
		"ИдентификаторПользователяИБ", ТекущийПользовательИБ.УникальныйИдентификатор));
	ПроверитьПраваПользователя(ТекущийПользовательИБ, "ПриЗапуске", ЭтоВнешнийПользователь);
	
	Если ПустаяСтрока(ТекущийПользовательИБ.Имя) Тогда
		// Авторизуется пользователь по умолчанию.
		Попытка
			Значения = ЗначенияПараметровСеансаТекущийПользователь();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Возврат КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(ИнформацияОбОшибке,
				НСтр("ru = 'Не удалось установить параметр сеанса ТекущийПользователь по причине:
				           |""%1"".
				           |
				           |Обратитесь к администратору.'"),
				РегистрироватьВЖурнале);
		КонецПопытки;
		Если ТипЗнч(Значения) = Тип("Строка") Тогда
			Возврат КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(Значения, , РегистрироватьВЖурнале);
		КонецЕсли;
		Возврат РезультатУстановкиПараметровСеанса(РегистрироватьВЖурнале);
	КонецЕсли;
	
	Обработчики = ОбщегоНазначения.ОбработчикиСлужебногоСобытия("СтандартныеПодсистемы.Пользователи\ПриАвторизацииНовогоПользователяИБ");
	СтандартнаяОбработка = Истина;
	Для Каждого Обработчик Из Обработчики Цикл
		Обработчик.Модуль.ПриАвторизацииНовогоПользователяИБ(ТекущийПользовательИБ, СтандартнаяОбработка);
	КонецЦикла;
	
	Если Не СтандартнаяОбработка Тогда
		Возврат "";
	КонецЕсли;
	
	НайденныйПользователь = Неопределено;
	Если ПользовательПоИдентификаторуСуществует(
	       ТекущийПользовательИБ.УникальныйИдентификатор, , НайденныйПользователь) Тогда
		
		// ПользовательИБ найден в справочнике.
		Если ПриНачалеРаботыСистемы И РолиАдминистратораДоступны() Тогда
			ИнтеграцияСтандартныхПодсистем.ПриСозданииАдминистратора(НайденныйПользователь,
				НСтр("ru = 'При авторизации у пользователя найдены роли администратора.'"));
		КонецЕсли;
		Возврат РезультатУстановкиПараметровСеанса(РегистрироватьВЖурнале);
	КонецЕсли;
	
	// Требуется либо создать администратора, либо сообщить об отказе авторизации.
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Если ПользователиИБ.Количество() > 1
	   И Не РолиАдминистратораДоступны()
	   И Не ПравоДоступа("Администрирование", Метаданные, ТекущийПользовательИБ) Тогда
		
		// Авторизуется обычный пользователь, созданный в конфигураторе.
		Возврат КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(
			ТекстСообщенияПользовательНеНайденВСправочнике(ТекущийПользовательИБ.Имя),
			, РегистрироватьВЖурнале);
	КонецЕсли;
	
	// Авторизуется администратор, созданный в конфигураторе.
	Если Не РолиАдминистратораДоступны() Тогда
		Возврат КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(
			НСтр("ru = 'Запуск от имени пользователя с правом Администрирование невозможен,
			           |так как он не зарегистрирован в списке пользователей.
			           |
			           |Для ведения списка и настройки прав пользователей предназначен список Пользователи,
			           |режим конфигурирования 1С:Предприятия для этого использовать не следует.'"),
			, РегистрироватьВЖурнале);
	КонецЕсли;
	
	Попытка
		Пользователь = Пользователи.СоздатьАдминистратора(ТекущийПользовательИБ);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Возврат КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(ИнформацияОбОшибке,
			НСтр("ru = 'Не удалось выполнить автоматическую регистрацию администратора в списке по причине:
			           |""%1"".
			           |
			           |Для ведения списка и настройки прав пользователей предназначен список Пользователи,
			           |режим конфигурирования 1С:Предприятия для этого использовать не следует.'"),
			РегистрироватьВЖурнале);
	КонецПопытки;
	
	Комментарий =
		НСтр("ru = 'Выполнен запуск от имени пользователя с ролью ""Полные права"",
		           |который не зарегистрирован в списке пользователей.
		           |Выполнена автоматическая регистрация в списке пользователей.
		           |
		           |Для ведения списка и настройки прав пользователей предназначен список Пользователи,
		           |режим конфигурирования 1С:Предприятия для этого использовать не следует.'");
	
	ИнтеграцияСтандартныхПодсистем.ПослеЗаписиАдминистратораПриАвторизации(Комментарий);
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Пользователи.Администратор зарегистрирован в справочнике Пользователи'",
		     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Предупреждение,
		Метаданные.Справочники.Пользователи,
		Пользователь,
		Комментарий);
	
	Возврат РезультатУстановкиПараметровСеанса(РегистрироватьВЖурнале);
	
КонецФункции

// Определяет, что используется нестандартный способ установки ролей пользователям ИБ.
Функция ЗапретРедактированияРолей() Экспорт
	
	Возврат ПользователиСлужебныйПовтИсп.Настройки().РедактированиеРолей <> Истина;
	
КонецФункции

// Устанавливает начальные настройки для пользователя информационной базы.
//
// Параметры:
//  ИмяПользователя - Строка - имя пользователя информационной базы, для которого сохраняются настройки.
//  Пользователь    - СправочникСсылка.Пользователи, СправочникОбъект.Пользователи
//                    СправочникСсылка.ВнешниеПользователи, СправочникОбъект.ВнешниеПользователи
//                    Неопределено - ссылка или объект пользователя в справочнике, если существует.
//
Процедура УстановитьНачальныеНастройки(Знач ИмяПользователя, Пользователь = Неопределено) Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ТекущийРежим = Метаданные.РежимСовместимостиИнтерфейса;
	Такси = (ТекущийРежим = Метаданные.СвойстваОбъектов.РежимСовместимостиИнтерфейса.Такси
		ИЛИ ТекущийРежим = Метаданные.СвойстваОбъектов.РежимСовместимостиИнтерфейса.ТаксиРазрешитьВерсия8_2);
	
	НастройкиКлиента = Новый НастройкиКлиентскогоПриложения;
	НастройкиКлиента.ОтображатьПанелиНавигацииИДействий = Ложь;
	НастройкиКлиента.ОтображатьПанельРазделов = Истина;
	НастройкиКлиента.РежимОткрытияФормПриложения = РежимОткрытияФормПриложения.Закладки;
	
	НастройкиТакси = Неопределено;
	НастройкиИнтерфейса = Новый НастройкиКомандногоИнтерфейса;
	
	Если Такси Тогда
		НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
		
		НастройкиИнтерфейса.ОтображениеПанелиРазделов = ОтображениеПанелиРазделов.КартинкаИТекст;
		
		НастройкиТакси = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
		НастройкиСостава = Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
		ГруппаСлева = Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
		ГруппаСлева.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельИнструментов"));
		ГруппаСлева.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельРазделов"));
		НастройкиСостава.Лево.Добавить(ГруппаСлева);
		НастройкиТакси.УстановитьСостав(НастройкиСостава);
	Иначе
		НастройкиИнтерфейса.ОтображениеПанелиРазделов = ОтображениеПанелиРазделов.Текст;
	КонецЕсли;
	
	НачальныеНастройки = Новый Структура;
	НачальныеНастройки.Вставить("НастройкиКлиента",    НастройкиКлиента);
	НачальныеНастройки.Вставить("НастройкиИнтерфейса", НастройкиИнтерфейса);
	НачальныеНастройки.Вставить("НастройкиТакси",      НастройкиТакси);
	НачальныеНастройки.Вставить("ЭтоВнешнийПользователь",
		    ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи")
		Или ТипЗнч(Пользователь) = Тип("СправочникОбъект.ВнешниеПользователи"));
	
	ПользователиПереопределяемый.ПриУстановкеНачальныхНастроек(НачальныеНастройки);
	
	Если НачальныеНастройки.НастройкиКлиента <> Неопределено Тогда
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения", "",
			НачальныеНастройки.НастройкиКлиента, , ИмяПользователя);
	КонецЕсли;
	
	Если НачальныеНастройки.НастройкиИнтерфейса <> Неопределено Тогда
		ХранилищеСистемныхНастроек.Сохранить("Общее/ПанельРазделов/НастройкиКомандногоИнтерфейса", "",
			НачальныеНастройки.НастройкиИнтерфейса, , ИмяПользователя);
	КонецЕсли;
		
	Если НачальныеНастройки.НастройкиТакси <> Неопределено Тогда
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "",
			НачальныеНастройки.НастройкиТакси, , ИмяПользователя);
	КонецЕсли;
		
КонецПроцедуры

// Возвращает текст ошибки, если у текущего пользователя нет ни роли базовые права, ни ролей администратора.
// Регистрирует ошибку в журнале.
//
Функция ОшибкаНедостаточноПравДляВходаВПрограмму(РегистрироватьВЖурнале = Истина) Экспорт
	
	Если РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда // Не заменять на РолиДоступны.
		Возврат "";
	КонецЕсли;
	
	Если ПользователиСлужебныйПовтИсп.ЭтоСеансВнешнегоПользователя() Тогда
		ИмяРолиБазовыеПрава = Метаданные.Роли.БазовыеПраваВнешнегоПользователя.Имя;
	Иначе
		ИмяРолиБазовыеПрава = Метаданные.Роли.БазовыеПрава.Имя;
	КонецЕсли;
	
	Если РольДоступна(ИмяРолиБазовыеПрава) Тогда // Не заменять на РолиДоступны.
		Возврат "";
	КонецЕсли;
	
	Возврат КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(
		НСтр("ru = 'Недостаточно прав для входа в программу.
		           |
		           |Обратитесь к администратору.'"),
		, РегистрироватьВЖурнале);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Для работы интерфейса ролей в управляемой форме.

// Только для внутреннего использования.
//
Процедура ОбработатьИнтерфейсРолей(Действие, Параметры) Экспорт
	
	Если Действие = "УстановитьТолькоПросмотрРолей" Тогда
		УстановитьТолькоПросмотрРолей(Параметры);
		
	ИначеЕсли Действие = "НастроитьИнтерфейсРолейПриЗагрузкеНастроек" Тогда
		НастроитьИнтерфейсРолейПриЗагрузкеНастроек(Параметры);
		
	ИначеЕсли Действие = "НастроитьИнтерфейсРолейПриСозданииФормы" Тогда
		НастроитьИнтерфейсРолейПриСозданииФормы(Параметры);
		
	ИначеЕсли Действие = "НастроитьИнтерфейсРолейПриЧтенииНаСервере" Тогда
		НастроитьИнтерфейсРолейПриЧтенииНаСервере(Параметры);
		
	ИначеЕсли Действие = "ТолькоВыбранныеРоли" Тогда
		ТолькоВыбранныеРоли(Параметры);
		
	ИначеЕсли Действие = "ГруппировкаПоПодсистемам" Тогда
		ГруппировкаПоПодсистемам(Параметры);
		
	ИначеЕсли Действие = "ОбновитьДеревоРолей" Тогда
		ОбновитьДеревоРолей(Параметры);
		
	ИначеЕсли Действие = "ОбновитьСоставРолей" Тогда
		ОбновитьСоставРолей(Параметры);
		
	ИначеЕсли Действие = "ЗаполнитьРоли" Тогда
		ЗаполнитьРоли(Параметры);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка в процедуре ПользователиСлужебный.ОбработатьИнтерфейсРолей()
			           |Неверное значение параметра Действие: ""%1"".'"),
			Действие);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции общего назначения.

// Возвращает таблицу значений имен всех ролей конфигурации.
//
// Параметры:
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура со свойствами:
//      Массив          - ФиксированныйМассив имен ролей.
//      Соответствие    - ФиксированноеСоответствие имен ролей со значением Истина.
//      ТаблицаЗначений - ТаблицаЗначений с колонками:
//                        Имя - Строка - имя роли.
//
Функция ВсеРоли() Экспорт
	
	Возврат ПользователиСлужебныйПовтИсп.Параметры().ВсеРоли;
	
КонецФункции

// Возвращает свойства пользователя для пользователя ИБ с пустым именем.
Функция СвойстваНеуказанногоПользователя() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Свойства = Новый Структура;
	
	// Ссылка на найденный элемент справочника
	// соответствующий неуказанному пользователю.
	Свойства.Вставить("Ссылка", Неопределено);
	
	// Ссылка, используемая для поиска и создания
	// неуказанного пользователя в справочнике Пользователи.
	Свойства.Вставить("СтандартнаяСсылка", Справочники.Пользователи.ПолучитьСсылку(
		Новый УникальныйИдентификатор("aa00559e-ad84-4494-88fd-f0826edc46f0")));
	
	// Полное имя, которое устанавливается в элемент справочника Пользователи
	// при создании несуществующего неуказанного пользователя.
	Свойства.Вставить("ПолноеИмя", Пользователи.ПолноеИмяНеуказанногоПользователя());
	
	// Полное имя, которое используется для поиска неуказанного пользователя
	// старым способом, необходимым для поддержки старых версий
	// неуказанного пользователя. Это имя не требуется изменять.
	Свойства.Вставить("ПолноеИмяДляПоиска", НСтр("ru = '<Не указан>'"));
	
	// Поиск по уникальному идентификатору.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Свойства.СтандартнаяСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Ссылка";
	
	НачатьТранзакцию();
	Попытка
		Если Запрос.Выполнить().Пустой() Тогда
			Запрос.УстановитьПараметр("ПолноеИмя", Свойства.ПолноеИмяДляПоиска);
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Пользователи.Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.Наименование = &ПолноеИмя";
			Результат = Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				Свойства.Ссылка = Выборка.Ссылка;
			КонецЕсли;
		Иначе
			Свойства.Ссылка = Свойства.СтандартнаяСсылка;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Свойства;
	
КонецФункции

// Определяет наличие элемента в справочнике Пользователи
// или справочнике ВнешниеПользователи по уникальному идентификатору
// пользователя информационной.
//  Функция используется для проверки наличия сопоставления пользователяИБ только
// с одним элементом справочников Пользователи и ВнешниеПользователи.
//
// Параметры:
//  УникальныйИдентификатор - идентификатор пользователя ИБ.
//
//  СсылкаНаТекущего - СправочникСсылка.Пользователи,
//                     СправочникСсылка.ВнешниеПользователи - исключить
//                       указанную ссылку из поиска.
//                     Неопределено - искать среди всех элементов справочников.
//
//  НайденныйПользователь (Возвращаемое значение):
//                     Неопределено - пользователь не существует.
//                     СправочникСсылка.Пользователи,
//                     СправочникСсылка.ВнешниеПользователи, если найден.
//
//  ИдентификаторПользователяСервиса - Булево.
//                     Ложь   - проверять ИдентификаторПользователяИБ.
//                     Истина - проверять ИдентификаторПользователяСервиса.
//
// Возвращаемое значение:
//  Булево.
//
Функция ПользовательПоИдентификаторуСуществует(УникальныйИдентификатор,
                                               СсылкаНаТекущего = Неопределено,
                                               НайденныйПользователь = Неопределено,
                                               ИдентификаторПользователяСервиса = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаТекущего", СсылкаНаТекущего);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
	|	И Пользователи.Ссылка <> &СсылкаНаТекущего
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
	|	И ВнешниеПользователи.Ссылка <> &СсылкаНаТекущего";
	
	Результат = Ложь;
	НайденныйПользователь = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		НайденныйПользователь = Выборка.Пользователь;
		Результат = Истина;
		Пользователи.НайтиНеоднозначныхПользователейИБ(Неопределено, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Только для внутреннего использования.
//
Процедура ОбновитьНазначениеПриСозданииНаСервере(Форма, ДобавлятьПользователей = Истина, ТолькоВнешниеПользователи = Ложь) Экспорт
	
	Назначение = Форма.Объект.Назначение;
	
	Если Не ВнешниеПользователи.ИспользоватьВнешнихПользователей() Тогда
		Назначение.Очистить();
		НоваяСтрока = Назначение.Добавить();
		Форма.Элементы.ВыбратьНазначение.Родитель.Видимость = Ложь;
		НоваяСтрока.ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Если ДобавлятьПользователей И Назначение.Количество() = 0 Тогда
		Если ТолькоВнешниеПользователи Тогда
			Для Каждого Тип Из Метаданные.ОпределяемыеТипы.ВнешнийПользователь.Тип.Типы() Цикл
				ОписаниеТипаСсылки = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип));
				Значение = ОписаниеТипаСсылки.ПривестиЗначение(Неопределено);
				
				НоваяСтрока = Назначение.Добавить();
				НоваяСтрока.ТипПользователей = Значение;
			КонецЦикла;
			
		Иначе
			НоваяСтрока = Назначение.Добавить();
			НоваяСтрока.ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если Назначение.Количество() <> 0 Тогда
		МассивПредставлений = Новый Массив;
		Индекс = Назначение.Количество() - 1;
		Пока Индекс >= 0 Цикл
			ТипПользователей = Назначение.Получить(Индекс).ТипПользователей;
			Если ТипПользователей = Неопределено Тогда
				Назначение.Удалить(Индекс);
			Иначе
				МассивПредставлений.Добавить(ТипПользователей.Метаданные().Синоним);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		Форма.Элементы.ВыбратьНазначение.Заголовок = СтрСоединить(МассивПредставлений, ", ");
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает служебное событие ПередЗаписьюПользователяИБ, проверяет права с учетом
// режима разделения данных и записывает указанного пользователя ИБ.
//
// Параметры:
//  ПользовательИБ  - ПользовательИнформационнойБазы - объект, который требуется записать.
//  Пользователь    - СправочникСсылка.Пользователи, СправочникОбъект.Пользователи,
//                    СправочникСсылка.ВнешниеПользователи, СправочникОбъект.ВнешниеПользователи - это
//                      пользователь с которым сопоставлен ПользовательИБ.
//
Процедура ЗаписатьПользователяИнформационнойБазы(ПользовательИБ, Пользователь) Экспорт
	
	Обработчики = ОбщегоНазначения.ОбработчикиСлужебногоСобытия("СтандартныеПодсистемы.Пользователи\ПередЗаписьюПользователяИБ");
	Для Каждого Обработчик Из Обработчики Цикл
		Обработчик.Модуль.ПередЗаписьюПользователяИБ(ПользовательИБ.УникальныйИдентификатор);
	КонецЦикла;
	
	ЭтоВнешнийПользователь = ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи")
	                     Или ТипЗнч(Пользователь) = Тип("СправочникОбъект.ВнешниеПользователи");
	
	ПроверитьПраваПользователя(ПользовательИБ, "ПередЗаписью", ЭтоВнешнийПользователь);
	
	ОбновлениеИнформационнойБазыСлужебный.УстановитьФлагОтображенияОписанийДляНовогоПользователя(ПользовательИБ.Имя);
	
	ПользовательИБ.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и функции.

// Возвращает ссылку старого объекта или ссылку нового объекта.
//
// Параметры:
//  Объект       - СправочникОбъект, ...
//  ЭтоНовый     - Булево (Возвращаемое значение).
//
Функция СсылкаОбъекта(Знач Объект, ЭтоНовый = Неопределено) Экспорт
	
	Ссылка = Объект.Ссылка;
	ЭтоНовый = НЕ ЗначениеЗаполнено(Ссылка);
	
	Если ЭтоНовый Тогда
		Ссылка = Объект.ПолучитьСсылкуНового();
		
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
			Ссылка = Менеджер.ПолучитьСсылку();
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов из других подсистем.

// Заполняет параметры, которые используется клиентским кодом на запуске конфигурации.
//
// Параметры:
//   Параметры - Структура - параметры запуска.
//   Отказ     - Булево - если указать Истина, значит не удалось добавить параметры и
//                        требуются действия на стороне клиента для успешного продолжения.
//
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры, Отказ, ЭтоВызовПередНачаломРаботыСистемы) Экспорт
	
	Если ЭтоВызовПередНачаломРаботыСистемы Тогда
		
		РегистрироватьВЖурнале = Параметры.ПолученныеПараметрыКлиента <> Неопределено
			И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ОшибкаАвторизации");
		
		ОшибкаАвторизации = АвторизоватьТекущегоПользователя(Истина, РегистрироватьВЖурнале);
		
		Если ОшибкаАвторизации <> "" Тогда
			Параметры.Вставить("ОшибкаАвторизации", ОшибкаАвторизации);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ТребуетсяСменитьПароль(ОшибкаАвторизации, Истина, РегистрироватьВЖурнале) Тогда
			Параметры.Вставить("ТребуетсяСменитьПароль");
			СтандартныеПодсистемыВызовСервера.СкрытьРабочийСтолПриНачалеРаботыСистемы();
			
		ИначеЕсли ОшибкаАвторизации <> "" Тогда
			Параметры.Вставить("ОшибкаАвторизации", ОшибкаАвторизации);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	Иначе
		
		КлючПредупрежденияБезопасности = КлючПредупрежденияБезопасностиПриЗапуске();
		Если ЗначениеЗаполнено(КлючПредупрежденияБезопасности) Тогда
			Параметры.Вставить("КлючПредупрежденияБезопасности", КлючПредупрежденияБезопасности);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность 
// редактирования реквизитов при групповом изменении.
//
// Параметры:
//   Объекты - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                            подключенного к подсистеме "Групповое изменение объектов". 
//                            Дополнительно в значении могут быть перечислены имена экспортных функций:
//                            "РеквизитыНеРедактируемыеВГрупповойОбработке",
//                            "РеквизитыРедактируемыеВГрупповойОбработке".
//                            Каждое имя должно начинаться с новой строки.
//                            Если указана пустая строка, значит в модуле менеджера определены обе функции.
//
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Справочники.ВнешниеПользователи.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ГруппыВнешнихПользователей.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.Пользователи.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
КонецПроцедуры

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("ТекущийПользователь",        "ПользователиСлужебный.УстановкаПараметровСеанса");
	Обработчики.Вставить("ТекущийВнешнийПользователь", "ПользователиСлужебный.УстановкаПараметровСеанса");
	Обработчики.Вставить("АвторизованныйПользователь", "ПользователиСлужебный.УстановкаПараметровСеанса");
	
КонецПроцедуры

// Заполняет виды доступа, используемые в ограничениях прав доступа.
// Виды доступа Пользователи и ВнешниеПользователи уже заполнены.
// Их можно удалить, если они не требуются для ограничения прав доступа.
//
// Параметры:
//  ВидыДоступа - ТаблицаЗначений - с колонками:
//   * Имя                    - Строка - имя используемое в описании поставляемых
//                                       профилей групп доступа и текстах ОДД.
//   * Представление          - Строка - представляет вид доступа в профилях и группах доступа.
//   * ТипЗначений            - Тип    - тип ссылки значений доступа.
//                                       Например, Тип("СправочникСсылка.Номенклатура").
//   * ТипГруппЗначений       - Тип    - тип ссылки групп значений доступа.
//                                       Например, Тип("СправочникСсылка.ГруппыДоступаНоменклатуры").
//   * НесколькоГруппЗначений - Булево - Истина указывает, что для значения доступа (Номенклатуры), можно
//                                       выбрать несколько групп значений (Групп доступа номенклатуры).
//
Процедура ПриЗаполненииВидовДоступа(ВидыДоступа) Экспорт
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя                    = "Пользователи";
	ВидДоступа.Представление          = НСтр("ru = 'Пользователи'");
	ВидДоступа.ТипЗначений            = Тип("СправочникСсылка.Пользователи");
	ВидДоступа.ТипГруппЗначений       = Тип("СправочникСсылка.ГруппыПользователей");
	ВидДоступа.НесколькоГруппЗначений = Истина; // Должно быть Истина, особый случай.
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя                    = "ВнешниеПользователи";
	ВидДоступа.Представление          = НСтр("ru = 'Внешние пользователи'");
	ВидДоступа.ТипЗначений            = Тип("СправочникСсылка.ВнешниеПользователи");
	ВидДоступа.ТипГруппЗначений       = Тип("СправочникСсылка.ГруппыВнешнихПользователей");
	ВидДоступа.НесколькоГруппЗначений = Истина; // Должно быть Истина, особый случай.
	
КонецПроцедуры

// Обработчик ожидания проверяет, что срок действия учетной записи истек и нужно завершить работу.
Процедура ПриВыполненииСтандартныхПериодическихПроверокНаСервере(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТребуетсяСменитьПароль(); // Обновление даты последней активности.
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
		
	Параметры.Вставить("ВходВПрограммуЗапрещен", Ложь);
	
	Если ПользовательИБ = Неопределено Тогда
		
		Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено()
		 Или Не ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей() Тогда
			
			Параметры.ВходВПрограммуЗапрещен = Истина;
		КонецЕсли;
		
	ИначеЕсли ПользовательИБ.АутентификацияСтандартная = Ложь
	        И ПользовательИБ.АутентификацияОС          = Ложь
	        И ПользовательИБ.АутентификацияOpenID      = Ложь Тогда
	
		Параметры.ВходВПрограммуЗапрещен = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определить список справочников, доступных для загрузки с помощью подсистемы "Загрузка данных из файла".
//
// Параметры:
//  ЗагружаемыеСправочники - ТаблицаЗначений - список справочников, в которые возможна загрузка данных.
//      * ПолноеИмя          - Строка - полное имя справочника (как в метаданных).
//      * Представление      - Строка - представление справочника в списке выбора.
//      * ПрикладнаяЗагрузка - Булево - если Истина, значит справочник использует собственный алгоритм загрузки и
//                                      в модуле менеджера справочника определены функции.
//
Процедура ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт
	
	// Загрузка в справочник ВнешниеПользователи запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.ВнешниеПользователи.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
	// Загрузка в справочник Пользователи запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.Пользователи.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;

	
КонецПроцедуры

// См. описание процедуры СтандартныеПодсистемыСервер.СобратьСтатистикуКонфигурации.
Процедура СобратьСтатистикуКонфигурации() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЦентрМониторинга") Тогда
		Возврат;
	КонецЕсли;
	
	МодульЦентрМониторинга = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторинга");
	
	АутентификацияСтандартная = 0;
	АутентификацияОС = 0;
	АутентификацияOpenID = 0;
	ВходВПрограммуРазрешен = 0;
	Для Каждого ОписаниеПользователя Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		АутентификацияСтандартная = АутентификацияСтандартная + ОписаниеПользователя.АутентификацияСтандартная;
		АутентификацияОС = АутентификацияОС + ОписаниеПользователя.АутентификацияОС;
		АутентификацияOpenID = АутентификацияOpenID + ОписаниеПользователя.АутентификацияOpenID;
		ВходВПрограммуРазрешен = ВходВПрограммуРазрешен + (ОписаниеПользователя.АутентификацияСтандартная
			Или ОписаниеПользователя.АутентификацияОС Или ОписаниеПользователя.АутентификацияOpenID);
	КонецЦикла;
	
	МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации("Справочник.Пользователи.АутентификацияСтандартная", АутентификацияСтандартная);
	МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации("Справочник.Пользователи.АутентификацияОС", АутентификацияОС);
	МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации("Справочник.Пользователи.АутентификацияOpenID", АутентификацияOpenID);
	МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации("Справочник.Пользователи.ВходВПрограммуРазрешен", ВходВПрограммуРазрешен);

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(1) КАК Количество
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Недействителен";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации("Справочник.Пользователи.Недействителен", Выборка.Количество);
	
	Настройки = ПользователиСлужебныйПовтИсп.Настройки().Пользователи;
	ИспользованиеРасширенныхНастроекВхода = Настройки.ПарольДолженОтвечатьТребованиямСложности
		Или ЗначениеЗаполнено(Настройки.МинимальнаяДлинаПароля)
		Или ЗначениеЗаполнено(Настройки.МаксимальныйСрокДействияПароля)
		Или ЗначениеЗаполнено(Настройки.МинимальныйСрокДействияПароля)
		Или ЗначениеЗаполнено(Настройки.ЗапретитьПовторениеПароляСредиПоследних)
		Или ЗначениеЗаполнено(Настройки.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
		Или ЗначениеЗаполнено(Настройки.ПросрочкаРаботыВПрограммеДатаВключения);
		
	МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации("Справочник.Пользователи.ИспользованиеРасширенныхНастроекВхода", ИспользованиеРасширенныхНастроекВхода);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(1) КАК Количество
	|ИЗ
	|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|ГДЕ
	|	СведенияОПользователях.ДатаПоследнейАктивности >= &ДатаСреза";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаСреза", НачалоДня(ТекущаяДатаСеанса() - 30 *60*60*24)); // 30 дней.
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации("Справочник.Пользователи.Активный", Выборка.Количество);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СведенияОПользователях.ПоследнийИспользуемыйКлиент КАК ИспользуемыйКлиент,
	|	КОЛИЧЕСТВО(1) КАК Количество
	|ИЗ
	|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОПользователях.ПоследнийИспользуемыйКлиент";
	
	СоответствиеИменМетаданных = Новый Соответствие;
	СоответствиеИменМетаданных.Вставить("Справочник.Пользователи", ТекстЗапроса);
	МодульЦентрМониторинга.ЗаписатьСтатистикуКонфигурации(СоответствиеИменМетаданных);
	
КонецПроцедуры

// Вызывается после загрузки данных.
//
// Параметры:
//  Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//    контейнера, используемый в процессе загрузки данных. Подробнее см. комментарий
//    к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
	// Сброс общего решения, принятого администратором в форме "Предупреждение безопасности".
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ПараметрыАдминистрирования = СтандартныеПодсистемыСервер.ПараметрыАдминистрирования();
		ПараметрыАдминистрирования.Удалить("РазрешеноОткрытиеВнешнихОтчетовИОбработок");
		ПараметрыАдминистрирования.Удалить("ПринятоРешениеПоОткрытиюВнешнихОтчетовИОбработок");
		СтандартныеПодсистемыСервер.УстановитьПараметрыАдминистрирования(ПараметрыАдминистрирования);
		
		ДобавитьАдминистраторамПравоОткрытияВнешнихОтчетовИОбработок();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП.

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.2";
	Обработчик.Процедура = "ПользователиСлужебный.ЗаполнитьИдентификаторыПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.15";
	Обработчик.Процедура = "РегистрыСведений.СоставыГруппПользователей.ОбновитьДанныеРегистра";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.5";
	Обработчик.Процедура = "РегистрыСведений.СоставыГруппПользователей.ОбновитьДанныеРегистра";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.2";
	Обработчик.Процедура = "Пользователи.ПриНаличииГруппПользователейУстановитьИспользование";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.8";
	Обработчик.Процедура = "ПользователиСлужебный.ПреобразоватьИменаРолейВИдентификаторы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.8";
	Обработчик.Процедура = "РегистрыСведений.СоставыГруппПользователей.ОбновитьДанныеРегистра";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.3.16";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ПользователиСлужебный.ОбновитьПредопределенныеВидыКонтактнойИнформацииПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.4.19";
	Обработчик.Процедура = "ПользователиСлужебный.ПеренестиГруппыВнешнихПользователейВКорень";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.3";
	Обработчик.Процедура = "ПользователиСлужебный.ЗаполнитьСвойстваАутентификацииПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.42";
	Обработчик.Процедура = "ПользователиСлужебный.ДобавитьПолноправнымПользователямРольАдминистраторСистемы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.3.16";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ПользователиСлужебный.УдалитьКэшНеразделенныеДанныеДоступныеДляИзменения";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.16";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ПользователиСлужебный.ОчиститьРеквизитПоказыватьВСпискеВыбораУВсехПользователейИБ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.37";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ПользователиСлужебный.ЗаполнитьНазначениеГруппВнешнихПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.2.4";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ПользователиСлужебный.УдалитьКэшНедоступныеРолиПоТипамПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.2.30";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ПользователиСлужебный.ПеренестиНастройкиДлиныИСложностиПаролейКонфигуратора";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.2.72";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ПользователиСлужебный.ДобавитьАдминистраторамПравоОткрытияВнешнихОтчетовИОбработок";
	
КонецПроцедуры

// Доопределяет структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры - Структура, в которую можно вставить параметры работы клиента при запуске.
//                 Ключ     - имя параметра,
//                 Значение - значение параметра.
//
// Пример использования:
//   Параметры.Вставить(<ИмяПараметра>, <Код получения значения параметра>);
//
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	Параметры.Вставить("ЭтоПолноправныйПользователь", Пользователи.ЭтоПолноправныйПользователь());
	
КонецПроцедуры

// Заполняет массив списком имен объектов метаданных, данные которых могут содержать ссылки на различные объекты
// метаданных, но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Параметры:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Процедура ПриДобавленииИсключенийПоискаСсылок(Массив) Экспорт
	
	Массив.Добавить(Метаданные.РегистрыСведений.СоставыГруппПользователей.ПолноеИмя());
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхПодчиненному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель) Экспорт
	
	ПриОтправкеДанных(ЭлементДанных, ОтправкаЭлемента, Истина);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхГлавному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель) Экспорт
	
	ПриОтправкеДанных(ЭлементДанных, ОтправкаЭлемента, Ложь);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтПодчиненного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Истина);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтГлавного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Ложь);
	
КонецПроцедуры

// Процедура-обработчик события после получения данных в главном узле от подчиненного узла распределенной ИБ.
// Вызывается в момент завершения чтения сообщения обмена, когда все данные из сообщения обмена успешно прочитаны и
// записаны в ИБ.
// 
//  Параметры:
// Отправитель - ПланОбменаОбъект. Объект узла плана обмена, от которого получены данные.
// Отказ - Булево. Флаг отказа. Если установить данному параметру значение Истина,
// то сообщение будет считаться не принятым. Также произойдет отмена транзакции загрузки данных,
// если все данные были загружены в одной транзакции или отмена последней транзакции загрузки данных,
// если данные были загружены порциями.
//
Процедура ПослеПолученияДанныхОтПодчиненного(Отправитель, Отказ) Экспорт
	
	ПослеПолученияДанных(Отправитель, Отказ, Истина);
	
КонецПроцедуры

// Процедура-обработчик события после получения данных в подчиненном узле от главного узла распределенной ИБ.
// Вызывается в момент завершения чтения сообщения обмена, когда все данные из сообщения обмена успешно прочитаны и
// записаны в ИБ.
// 
//  Параметры:
// Отправитель - ПланОбменаОбъект. Объект узла плана обмена, от которого получены данные.
// Отказ - Булево. Флаг отказа. Если установить данному параметру значение Истина,
// то сообщение будет считаться не принятым. Также произойдет отмена транзакции загрузки данных,
// если все данные были загружены в одной транзакции или отмена последней транзакции загрузки данных,
// если данные были загружены порциями.
//
Процедура ПослеПолученияДанныхОтГлавного(Отправитель, Отказ) Экспорт
	
	ПослеПолученияДанных(Отправитель, Отказ, Ложь);
	
КонецПроцедуры

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат; // В модели сервиса дело не выводится.
	КонецЕсли;
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если Не Пользователи.ЭтоПолноправныйПользователь(, Истина)
		Или МодульТекущиеДелаСервер.ДелоОтключено("НекорректныеСведенияОПользователях") Тогда
		Возврат;
	КонецЕсли;
	
	НекорректныхПользователей = ПользователиДобавленныеСПомощьюКонфигуратора();
	
	// Процедура вызывается только при наличии подсистемы "Текущие дела", поэтому здесь
	// не делается проверка существования подсистемы.
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.Справочники.Пользователи.ПолноеИмя());
	
	Для Каждого Раздел Из Разделы Цикл
		
		ИдентификаторПользователи = "НекорректныеСведенияОПользователях" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "");
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИдентификаторПользователи;
		Дело.ЕстьДела       = НекорректныхПользователей > 0;
		Дело.Количество     = НекорректныхПользователей;
		Дело.Представление  = НСтр("ru = 'Некорректные сведения о пользователях'");
		Дело.Форма          = "Справочник.Пользователи.Форма.ПользователиИнформационнойБазы";
		Дело.Владелец       = Раздел;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчики событий подсистемы Управление доступом.

// Заполняет состав видов доступа, используемых при ограничении прав объектов метаданных.
// Если состав видов доступа не заполнен, отчет "Права доступа" покажет некорректные сведения.
//
// Обязательно требуется заполнить только виды доступа, используемые
// в шаблонах ограничения доступа явно, а виды доступа, используемые
// в наборах значений доступа могут быть получены из текущего состояния
// регистра сведений НаборыЗначенийДоступа.
//
//  Для автоматической подготовки содержимого процедуры следует
// воспользоваться инструментами разработчика для подсистемы.
// Управление доступом.
//
// Параметры:
//  Описание     - Строка, многострочная строка формата <Таблица>.<Право>.<ВидДоступа>[.Таблица объекта].
//                 Например, Документ.ПриходнаяНакладная.Чтение.Организации
//                           Документ.ПриходнаяНакладная.Чтение.Контрагенты
//                           Документ.ПриходнаяНакладная.Изменение.Организации
//                           Документ.ПриходнаяНакладная.Изменение.Контрагенты
//                           Документ.ЭлектронныеПисьма.Чтение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.ЭлектронныеПисьма.Изменение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.Файлы.Чтение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Чтение.Объект.Документ.ЭлектронноеПисьмо
//                           Документ.Файлы.Изменение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Изменение.Объект.Документ.ЭлектронноеПисьмо
//                 Вид доступа Объект предопределен, как литерал. Этот вид доступа используется в
//                 шаблонах ограничений доступа, как "ссылка" на другой объект, по которому
//                 ограничивается текущий объект таблицы.
//                 Когда вид доступа "Объект" задан, также требуется задать типы таблиц,
//                 которые используются для этого вида доступа. Т.е. перечислить типы,
//                 которые соответствуют полю, использованному в шаблоне ограничения доступа
//                 в паре с видом доступа "Объект". При перечислении типов по виду доступа "Объект"
//                 нужно перечислить только те типы поля, которые есть у поля.
//                 РегистрыСведений.НаборыЗначенийДоступа.Объект, остальные типы лишние.
// 
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	ДополнениеОписания =
	"
	|Справочник.ВнешниеПользователи.Чтение.ВнешниеПользователи
	|Справочник.ВнешниеПользователи.Изменение.ВнешниеПользователи
	|Справочник.ГруппыВнешнихПользователей.Чтение.ВнешниеПользователи
	|Справочник.ГруппыПользователей.Чтение.Пользователи
	|Справочник.Пользователи.Чтение.Пользователи
	|Справочник.Пользователи.Изменение.Пользователи
	|РегистрСведений.СоставыГруппПользователей.Чтение.ВнешниеПользователи
	|РегистрСведений.СоставыГруппПользователей.Чтение.Пользователи
	|";
	
	Описание = Описание + ДополнениеОписания;
	
КонецПроцедуры

// Обработчики событий подсистемы Обмен данными.

// Обработчик начальной настройки ИБ после создания узла РИБ.
// Вызывается в момент первого запуска подчиненного узла РИБ (в том числе АРМ).
//
Процедура ПриНастройкеПодчиненногоУзлаРИБ() Экспорт
	
	ОчиститьИдентификаторыНесуществующихПользователейИБ();
	
КонецПроцедуры

// Обработчики событий подсистемы ВариантыОтчетов.

// Содержит настройки размещения вариантов отчетов в панели отчетов.
//
// Параметры:
//   Настройки - Коллекция - Содержит настройки всех отчетов и вариантов конфигурации.
//       Используется для передачи в параметрах вспомогательных методов.
//
// Описание:
//   См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Вспомогательные методы:
//   1. Функции ОписаниеОтчета и ОписаниеВарианта формируют описание настроек отчета и варианта для последующего изменения:
//       НастройкиОтчета   = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.<ИмяОтчета>);
//       НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//       Возвращаемые коллекции содержат одинаковый набор свойств.
//       НастройкиОтчета используются как умолчания для вариантов, описания которых еще не получены.
//       Подробнее - см. "свойства для изменения" в комментарии к ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//   2. Процедура УстановитьРежимВыводаВПанеляхОтчетов позволяет настроить режим группировки вариантов в панелях отчетов:
//       ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина/Ложь);
//       ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, Метаданные.Отчеты.<ИмяОтчета>, Истина/Ложь);
//       ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, Метаданные.Подсистемы.<ИмяПодсистемы>, Истина/Ложь);
//   3. Процедура НастроитьОтчетВМодулеМенеджера позволяет переопределять настройки отчета в его модуле менеджера:
//       ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.<ИмяОтчета>);
//
Процедура ПриНастройкеВариантовОтчетов(Настройки) Экспорт
	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
	МодульВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СведенияОПользователях);
КонецПроцедуры

// Обработчики событий подсистемы РаботаВМоделиСервиса.ОчередьЗаданий.

// Обработчик события ПриПолученииСпискаШаблонов.
//
// Формирует список шаблонов заданий очереди.
//
// Параметры:
//  Шаблоны - Массив строк. В параметр следует добавить имена предопределенных
//   неразделенных регламентных заданий, которые должны использоваться в качестве
//   шаблонов для заданий очереди.
//
Процедура ПриПолученииСпискаШаблонов(Шаблоны) Экспорт
	
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.КонтрольАктивностиПользователей.Имя);
	
КонецПроцедуры

// Обработчики событий подсистемы Пользователи.

// См. процедуру ИзменитьДействияВФорме в общем модуле ПользователиПереопределяемый.
Процедура ПриОпределенииДействийВФорме(Ссылка, ДействияВФорме) Экспорт
	
	ИнтеграцияСтандартныхПодсистем.ПриОпределенииДействийВФорме(Ссылка, ДействияВФорме);
	ПользователиПереопределяемый.ИзменитьДействияВФорме(Ссылка, ДействияВФорме);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события.

// Вызывает обновление представления внешнего пользователя при изменении
// представления его объекта авторизации.
//
//  В состав подписки следует включить типы объектов авторизации:
// Метаданные.Справочники.ВнешниеПользователи.Реквизиты.ОбъектАвторизации.Тип.
// Например: Справочник.ФизическиеЛица, Справочник.Контрагенты.
//
Процедура ОбновитьПредставлениеВнешнегоПользователяПриЗаписи(Знач Объект, Отказ) Экспорт
	
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПредставлениеВнешнегоПользователя(Объект.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Использование регламентных заданий.

// Обработчик регламентного задания КонтрольАктивностиПользователей.
Процедура КонтрольАктивностиПользователей() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.КонтрольАктивностиПользователей);
	
	ОтключитьНеактивныхИПросроченныхПользователей();
	
КонецПроцедуры

// Изменяет использование регламентного задания КонтрольАктивностиПользователей.
//
// Параметры:
//   Использование - Булево - Истина, если задание нужно включить, иначе Ложь.
//
Процедура ИзменитьЗаданиеКонтрольАктивностиПользователей(Использование) Экспорт
	
	СтандартныеПодсистемыСервер.УстановитьИспользованиеПредопределенногоРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.КонтрольАктивностиПользователей, Использование);
	
КонецПроцедуры

// Вызывается при записи пользователя или внешнего пользователя, проверят срок действия.
Процедура ВключитьЗаданиеКонтрольАктивностиПользователейПриНеобходимости(Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПользователиСлужебныйПовтИсп.Настройки().ОбщиеНастройкиВхода Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|ГДЕ
	|	СведенияОПользователях.Пользователь В(&Пользователь)
	|	И СведенияОПользователях.СрокДействия <> &ПустаяДата
	|	И СведенияОПользователях.ДатаАвтоматическогоЗапрещенияВхода = &ПустаяДата";
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		ИзменитьЗаданиеКонтрольАктивностиПользователей(Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с настройками входа пользователей.

// См. функцию Настройки в общем модуле ПользователиСлужебныйПовтИсп.
Функция НастройкиВхода() Экспорт
	
	Настройки = Новый Структура;
	// Требования сложности.
	Настройки.Вставить("ПарольДолженОтвечатьТребованиямСложности", Ложь);
	Настройки.Вставить("МинимальнаяДлинаПароля", 0);
	// Требования срока действия.
	Настройки.Вставить("МаксимальныйСрокДействияПароля", 0);
	Настройки.Вставить("МинимальныйСрокДействияПароля", 0);
	Настройки.Вставить("ЗапретитьПовторениеПароляСредиПоследних", 0);
	// Требование периодической работы в программе.
	Настройки.Вставить("ПросрочкаРаботыВПрограммеДоЗапрещенияВхода", 0);
	Настройки.Вставить("ПросрочкаРаботыВПрограммеДатаВключения", '00010101');
	
	КопияНастроек = Новый ФиксированнаяСтруктура(Настройки);
	
	ПодготовленныеНастройки = Новый Структура;
	ПодготовленныеНастройки.Вставить("Пользователи", Новый Структура(КопияНастроек));
	ПодготовленныеНастройки.Вставить("ВнешниеПользователи", Настройки);
	
	СохраненныеНастройки = Константы.НастройкиВходаПользователей.Получить().Получить();
	Если ТипЗнч(СохраненныеНастройки) <> Тип("Структура") Тогда
		Возврат ПодготовленныеНастройки;
	КонецЕсли;
	
	Для Каждого ПодготовленнаяНастройка Из ПодготовленныеНастройки Цикл
		Если Не СохраненныеНастройки.Свойство(ПодготовленнаяНастройка.Ключ)
		 Или ТипЗнч(СохраненныеНастройки[ПодготовленнаяНастройка.Ключ]) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		НачальныеНастройки = ПодготовленнаяНастройка.Значение;
		ТекущиеНастройки = СохраненныеНастройки[ПодготовленнаяНастройка.Ключ];
		
		Если ТипЗнч(ТекущиеНастройки) = Тип("Структура") Тогда
			Для Каждого НачальнаяНастройка Из НачальныеНастройки Цикл
				
				Если Не ТекущиеНастройки.Свойство(НачальнаяНастройка.Ключ)
				 Или ТипЗнч(ТекущиеНастройки[НачальнаяНастройка.Ключ]) <> ТипЗнч(НачальнаяНастройка.Значение) Тогда
					
					Продолжить;
				КонецЕсли;
				
				НачальныеНастройки[НачальнаяНастройка.Ключ] = ТекущиеНастройки[НачальнаяНастройка.Ключ];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодготовленныеНастройки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с паролем.

// Создает новый пароль, соответствующий заданным правилам проверки сложности.
// Для облегчения запоминания, пароль формируется из слогов (согласная-гласная).
//
// Параметры:
//  ПараметрыПароля - Структура - возвращается функций ПараметрыПароля.
//  ГСЧ             - ГенераторСлучайныхЧисел - если уже используется.
//                  - Неопределено - создать новый.
//
// Возвращаемое значение:
//  Строка - новый пароль.
//
Функция СоздатьПароль(ПараметрыПароля, ГСЧ = Неопределено) Экспорт
	
	НовыйПароль = "";
	
	СогласныеСтрочные               = ПараметрыПароля.СогласныеБуквыСтрочные;
	СогласныеЗаглавные              = ПараметрыПароля.СогласныеБуквыЗаглавные;
	КоличествоСогласныхСтрочных     = СтрДлина(СогласныеСтрочные);
	КоличествоСогласныхЗаглавных    = СтрДлина(СогласныеЗаглавные);
	ИспользоватьСогласные           = (КоличествоСогласныхСтрочных > 0)
	                                  ИЛИ (КоличествоСогласныхЗаглавных > 0);
	
	ГласныеСтрочные                 = ПараметрыПароля.ГласныеБуквыСтрочные;
	ГласныеЗаглавные                = ПараметрыПароля.ГласныеБуквыЗаглавные;
	КоличествоГласныхСтрочных       = СтрДлина(ГласныеСтрочные);
	КоличествоГласныхЗаглавных      = СтрДлина(ГласныеЗаглавные);
	ИспользоватьГласные             = (КоличествоГласныхСтрочных > 0) 
	                                  ИЛИ (КоличествоГласныхЗаглавных > 0);
	
	Цифры                   = ПараметрыПароля.Цифры;
	КоличествоЦифр          = СтрДлина(Цифры);
	ИспользоватьЦифры       = (КоличествоЦифр > 0);
	
	СпецСимволы             = ПараметрыПароля.СпецСимволы;
	КоличествоСпецСимволов  = СтрДлина(СпецСимволы);
	ИспользоватьСпецСимволы = (КоличествоСпецСимволов > 0);
	
	// Создание генератора случайных чисел.
	Если ГСЧ = Неопределено Тогда
		ГСЧ = Новый ГенераторСлучайныхЧисел();
	КонецЕсли;
	
	Счетчик = 0;
	
	МаксимальнаяДлина           = ПараметрыПароля.МаксимальнаяДлина;
	МинимальнаяДлина            = ПараметрыПароля.МинимальнаяДлина;
	
	// Определение позиции спец. символов и цифр.
	Если ПараметрыПароля.ПроверятьУсловияСложности Тогда
		УстановитьСтрочную      = ПараметрыПароля.СтрочныеБуквыПроверятьНаличие;
		УстановитьЗаглавную     = ПараметрыПароля.ЗаглавныеБуквыПроверятьНаличие;
		УстановитьЦифру         = ПараметрыПароля.ЦифрыПроверятьНаличие;
		УстановитьСпецСимвол    = ПараметрыПароля.СпецСимволыПроверятьНаличие;
	Иначе
		УстановитьСтрочную      = (КоличествоГласныхСтрочных > 0) 
		                          ИЛИ (КоличествоСогласныхСтрочных > 0);
		УстановитьЗаглавную     = (КоличествоГласныхЗаглавных > 0) 
		                          ИЛИ (КоличествоСогласныхЗаглавных > 0);
		УстановитьЦифру         = ИспользоватьЦифры;
		УстановитьСпецСимвол    = ИспользоватьСпецСимволы;
	КонецЕсли;
	
	Пока Счетчик < МаксимальнаяДлина Цикл
		
		// Начало с согласной буквы.
		Если ИспользоватьСогласные Тогда
			Если УстановитьЗаглавную И УстановитьСтрочную Тогда
				СтрокаПоиска = СогласныеСтрочные + СогласныеЗаглавные;
				ВерхняяГраница = КоличествоСогласныхСтрочных + КоличествоСогласныхЗаглавных;
			ИначеЕсли УстановитьЗаглавную Тогда
				СтрокаПоиска = СогласныеЗаглавные;
				ВерхняяГраница = КоличествоСогласныхЗаглавных;
			Иначе
				СтрокаПоиска = СогласныеСтрочные;
				ВерхняяГраница = КоличествоСогласныхСтрочных;
			КонецЕсли;
			Если ПустаяСтрока(СтрокаПоиска) Тогда
				СтрокаПоиска = СогласныеСтрочные + СогласныеЗаглавные;
				ВерхняяГраница = КоличествоСогласныхСтрочных + КоличествоСогласныхЗаглавных;
			КонецЕсли;
			Символ = Сред(СтрокаПоиска, ГСЧ.СлучайноеЧисло(1, ВерхняяГраница), 1);
			Если Символ = ВРЕГ(Символ) Тогда
				Если УстановитьЗаглавную Тогда
					УстановитьЗаглавную = (ГСЧ.СлучайноеЧисло(0, 1) = 1);
				КонецЕсли;
			Иначе
				УстановитьСтрочную = Ложь;
			КонецЕсли;
			НовыйПароль = НовыйПароль + Символ;
			Счетчик     = Счетчик + 1;
			Если Счетчик >= МинимальнаяДлина Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		// Добавление гласных.
		Если ИспользоватьГласные Тогда
			Если УстановитьЗаглавную И УстановитьСтрочную Тогда
				СтрокаПоиска = ГласныеСтрочные + ГласныеЗаглавные;
				ВерхняяГраница = КоличествоГласныхСтрочных + КоличествоГласныхЗаглавных;
			ИначеЕсли УстановитьЗаглавную Тогда
				СтрокаПоиска = ГласныеЗаглавные;
				ВерхняяГраница = КоличествоГласныхЗаглавных;
			Иначе
				СтрокаПоиска = ГласныеСтрочные;
				ВерхняяГраница = КоличествоГласныхСтрочных;
			КонецЕсли;
			Если ПустаяСтрока(СтрокаПоиска) Тогда
				СтрокаПоиска = ГласныеСтрочные + ГласныеЗаглавные;
				ВерхняяГраница = КоличествоГласныхСтрочных + КоличествоГласныхЗаглавных;
			КонецЕсли;
			Символ = Сред(СтрокаПоиска, ГСЧ.СлучайноеЧисло(1, ВерхняяГраница), 1);
			Если Символ = ВРЕГ(Символ) Тогда
				УстановитьЗаглавную = Ложь;
			Иначе
				УстановитьСтрочную = Ложь;
			КонецЕсли;
			НовыйПароль = НовыйПароль + Символ;
			Счетчик     = Счетчик + 1;
			Если Счетчик >= МинимальнаяДлина Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	
		// Добавление цифр.
		Если ИспользоватьЦифры И УстановитьЦифру Тогда
			УстановитьЦифру = (ГСЧ.СлучайноеЧисло(0, 1) = 1);
			Символ          = Сред(Цифры, ГСЧ.СлучайноеЧисло(1, КоличествоЦифр), 1);
			НовыйПароль     = НовыйПароль + Символ;
			Счетчик         = Счетчик + 1;
			Если Счетчик >= МинимальнаяДлина Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		// Добавление спец. символов.
		Если ИспользоватьСпецСимволы И УстановитьСпецСимвол Тогда
			УстановитьСпецСимвол = (ГСЧ.СлучайноеЧисло(0, 1) = 1);
			Символ      = Сред(СпецСимволы, ГСЧ.СлучайноеЧисло(1, КоличествоСпецСимволов), 1);
			НовыйПароль = НовыйПароль + Символ;
			Счетчик     = Счетчик + 1;
			Если Счетчик >= МинимальнаяДлина Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НовыйПароль;
	
КонецФункции

// Возвращает стандартные параметры с учетом длины и сложности.
//
// Параметры:
//  НаименьшаяДлина - Число - наименьшая длина пароля (по умолчанию - 7).
//  Сложный         - Булево - учитывать требования проверки сложности пароля.
//
// Возвращаемое значение:
//  Структура - параметры создания пароля.
//
Функция ПараметрыПароля(НаименьшаяДлина = 7, Сложный = Ложь) Экспорт
	
	ПараметрыПароля = Новый Структура();
	ПараметрыПароля.Вставить("МинимальнаяДлина",                НаименьшаяДлина);
	ПараметрыПароля.Вставить("МаксимальнаяДлина",               99);
	ПараметрыПароля.Вставить("ГласныеБуквыСтрочные",            "aeiouy"); 
	ПараметрыПароля.Вставить("ГласныеБуквыЗаглавные",           "AEIOUY");
	ПараметрыПароля.Вставить("СогласныеБуквыСтрочные",          "bcdfghjklmnpqrstvwxz");
	ПараметрыПароля.Вставить("СогласныеБуквыЗаглавные",         "BCDFGHJKLMNPQRSTVWXZ");
	ПараметрыПароля.Вставить("Цифры",                           "0123456789");
	ПараметрыПароля.Вставить("СпецСимволы",                     " _.,!?");
	ПараметрыПароля.Вставить("ПроверятьУсловияСложности",       Сложный);
	ПараметрыПароля.Вставить("ЗаглавныеБуквыПроверятьНаличие",  Истина);
	ПараметрыПароля.Вставить("СтрочныеБуквыПроверятьНаличие",   Истина);
	ПараметрыПароля.Вставить("ЦифрыПроверятьНаличие",           Истина);
	ПараметрыПароля.Вставить("СпецСимволыПроверятьНаличие",     Ложь);
	
	Возврат ПараметрыПароля;
	
КонецФункции

// Проверяет наличие учетной записи и прав, необходимых для изменения пароля.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи,
//                 СправочникСсылка.ВнешниеПользователи - пользователь для смены пароля.
//
//  ДополнительныеПараметры - Структура - (возвращаемое значение) со свойствами:
//   * ТекстОшибки                 - Строка - описание ошибки, если нет возможности изменить пароль.
//   * ИдентификаторПользователяИБ - УникальныйИдентификатор - идентификатор пользователя ИБ.
//   * ЭтоТекущийПользовательИБ    - Булево - Истина, если пользователь является текущим.
//
// Возвращаемое значение:
//  Булево - Ложь, если нет возможности изменить пароль.
//
Функция ВозможноИзменитьПароль(Пользователь, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
	   И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		
		МодульПользователиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		ДействияСПользователемСервиса = МодульПользователиСлужебныйВМоделиСервиса.ПолучитьДействияСПользователемСервиса(
			Пользователь);
		
		Если Не ДействияСПользователемСервиса.ИзменениеПароля Тогда
			ДополнительныеПараметры.Вставить("ТекстОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сервис: Недостаточно прав для изменения пароля пользователя ""%1"".'"), Пользователь));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Пользователь, "Ссылка, Недействителен, ИдентификаторПользователяИБ, Подготовлен");
	
	Если РеквизитыПользователя.Ссылка <> Пользователь Тогда
		РеквизитыПользователя.Ссылка = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Пользователь).ПустаяСсылка();
		РеквизитыПользователя.Недействителен = Ложь;
		РеквизитыПользователя.Подготовлен = Ложь;
		РеквизитыПользователя.ИдентификаторПользователяИБ =
			Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ПроверятьДействительностьПользователя")
	   И РеквизитыПользователя.Недействителен <> Ложь Тогда
		
		ДополнительныеПараметры.Вставить("ТекстОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пользователь ""%1"" недействителен.'"), Пользователь));
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторПользователяИБ = РеквизитыПользователя.ИдентификаторПользователяИБ;
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДополнительныеПараметры.Свойство("ПроверятьНаличиеПользователяИБ")
	   И ПользовательИБ = Неопределено Тогда
		
		ДополнительныеПараметры.Вставить("ТекстОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдена учетная запись пользователя ""%1"".'"), Пользователь));
		Возврат Ложь;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
	
	ИдентификаторТекущегоПользователяИБ = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	ДополнительныеПараметры.Вставить("ЭтоТекущийПользовательИБ", ИдентификаторПользователяИБ = ИдентификаторТекущегоПользователяИБ);
	
	УровеньДоступа = УровеньДоступаКСвойствамПользователя(РеквизитыПользователя);
	
	Если Не ДополнительныеПараметры.ЭтоТекущийПользовательИБ
	   И Не УровеньДоступа.НастройкиДляВхода Тогда
		
		ДополнительныеПараметры.Вставить("ТекстОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недостаточно прав для изменения пароля пользователя ""%1"".'"), Пользователь));
		Возврат Ложь;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПарольУстановлен",
		ПользовательИБ <> Неопределено И ПользовательИБ.ПарольУстановлен);
	
	Если ПользовательИБ <> Неопределено И ПользовательИБ.ЗапрещеноИзменятьПароль Тогда
		Если УровеньДоступа.НастройкиДляВхода Тогда
			Если ДополнительныеПараметры.Свойство("УчитыватьСвойствоЗапрещеноИзменятьПароль") Тогда
				ДополнительныеПараметры.Вставить("ТекстОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Установлен запрет изменения пароля пользователя ""%1"".'"), Пользователь));
				Возврат Ложь;
			КонецЕсли;
		Иначе
			ДополнительныеПараметры.Вставить("ТекстОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Установлен запрет изменения пароля пользователя ""%1"".
				           |Обратитесь к администратору.'"), Пользователь));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("УчитыватьСвойствоАутентификацияСтандартная")
	   И ПользовательИБ <> Неопределено
	   И Не ПользовательИБ.АутентификацияСтандартная Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка минимального срока действия пароля.
	Если УровеньДоступа.НастройкиДляВхода Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		НастройкиВхода = ПользователиСлужебныйПовтИсп.Настройки().ВнешниеПользователи;
	Иначе
		НастройкиВхода = ПользователиСлужебныйПовтИсп.Настройки().Пользователи;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиВхода.МинимальныйСрокДействияПароля) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Прочитать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	СведенияОПользователе = НаборЗаписей[0];
	
	Если Не ЗначениеЗаполнено(СведенияОПользователе.ДатаНачалаИспользованияПароля) Тогда
		Возврат Истина;
	КонецЕсли;
	
	НачалоДняТекущейДатыСеанса = НачалоДня(ТекущаяДатаСеанса());
	ОстатокМинимальногоСрокаДействияПароля = НастройкиВхода.МинимальныйСрокДействияПароля
		- (НачалоДняТекущейДатыСеанса - СведенияОПользователе.ДатаНачалаИспользованияПароля) / (24*60*60);
	
	Если ОстатокМинимальногоСрокаДействияПароля <= 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	КоличествоДней = ОстатокМинимальногоСрокаДействияПароля;
	
	ЧислоИПредмет = Формат(КоличествоДней, "ЧГ=") + " "
		+ ПользователиСлужебныйКлиентСервер.ПредметЦелогоЧисла(КоличествоДней,
			"Л = ru_RU", НСтр("ru = 'день,дня,дней,,,,,,0'"));
	
	ДополнительныеПараметры.Вставить("ТекстОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Пароль можно будет сменить только через %1.'"), ЧислоИПредмет));
	
	Возврат Ложь;
	
КонецФункции

// Для форм элементов справочников Пользователи и ВнешниеПользователи.
Процедура ПрочитатьСведенияОПользователе(Форма) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Пользователь = Форма.Объект.Ссылка;
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;
	
	УровеньДоступа = УровеньДоступаКСвойствамПользователя(Форма.Объект);
	
	НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Прочитать();
	
	Форма.ПотребоватьСменуПароляПриВходе             = Ложь;
	Форма.СрокДействияНеОграничен                    = Ложь;
	Форма.СрокДействия                               = Неопределено;
	Форма.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода = 0;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		
		Если УровеньДоступа.УправлениеСписком
		 Или УровеньДоступа.ИзменениеТекущего Тогда
		
			ЗаполнитьЗначенияСвойств(Форма, НаборЗаписей[0],
				"ПотребоватьСменуПароляПриВходе,
				|СрокДействияНеОграничен,
				|СрокДействия,
				|ПросрочкаРаботыВПрограммеДоЗапрещенияВхода");
		Иначе
			Форма.ПотребоватьСменуПароляПриВходе = НаборЗаписей[0].ПотребоватьСменуПароляПриВходе;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Для форм элементов справочников Пользователи и ВнешниеПользователи.
Процедура ЗаписатьСведенияОПользователе(Форма, ТекущийОбъект) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	УровеньДоступа = УровеньДоступаКСвойствамПользователя(ТекущийОбъект);
	
	Пользователь = ТекущийОбъект.Ссылка;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			СведенияОПользователе = НаборЗаписей.Добавить();
			СведенияОПользователе.Пользователь = Пользователь;
		Иначе
			СведенияОПользователе = НаборЗаписей[0];
		КонецЕсли;
		
		Если УровеньДоступа.НастройкиДляВхода Тогда
			ЗаполнитьЗначенияСвойств(СведенияОПользователе, Форма,
				"ПотребоватьСменуПароляПриВходе,
				|СрокДействияНеОграничен,
				|СрокДействия,
				|ПросрочкаРаботыВПрограммеДоЗапрещенияВхода");
		Иначе
			СведенияОПользователе.ПотребоватьСменуПароляПриВходе = Форма.ПотребоватьСменуПароляПриВходе;
		КонецЕсли;
		
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Для формы СменаПароля и перед записью пользователя ИБ.
// Выполняет проверку нового пароля, старого пароля и в случае успеха
// регистрирует новый пароль в списке использованных паролей,
// а также устанавливает его, если вызов выполнен из формы СменаПароля.
// 
// Параметры:
//  Параметры - Структура - со свойствами:
//   * Пользователь - СправочникСсылка.Пользователи,
//                    СправочникСсылка.ВнешниеПользователи - при вызове из формы СменаПароля.
//                  - СправочникОбъект.Пользователи,
//                    СправочникОбъект.ВнешниеПользователи - при записи объекта.
//
//   * НовыйПароль  - Строка - пароль, который планируется установить пользователю ИБ.
//   * СтарыйПароль - Строка - пароль, который установлен пользователю ИБ (для проверки).
//
//   * ПриВходеВПрограмму    - Булево - может быть Истина при вызове из формы СменаПароля.
//   * ТолькоПроверить       - Булево - может быть Истина при вызове из формы СменаПароля.
//   * СтарыйПарольСовпадает - Булево - (возвращаемое значение) - если Ложь, значит не совпадает.
//
//   * ПарольПользователяСервиса - Строка - пароль текущего пользователя при вызове
//                                          из формы СменаПароля, сбрасывается при ошибке.
//
// Возвращаемое значение:
//  Строка - текст ошибки, если не пустая строка.
//
Функция ОбработатьНовыйПароль(Параметры) Экспорт
	
	НовыйПароль  = Параметры.НовыйПароль;
	СтарыйПароль = Параметры.СтарыйПароль;
	
	Если ТипЗнч(Параметры.Пользователь) = Тип("СправочникОбъект.Пользователи")
	 Или ТипЗнч(Параметры.Пользователь) = Тип("СправочникОбъект.ВнешниеПользователи") Тогда
		
		СсылкаОбъекта = Параметры.Пользователь.Ссылка;
		Пользователь  = СсылкаОбъекта(Параметры.Пользователь);
		ВызовИзФормыСменаПароля = Ложь;
	Иначе
		СсылкаОбъекта = Параметры.Пользователь;
		Пользователь  = Параметры.Пользователь;
		ВызовИзФормыСменаПароля = Истина;
	КонецЕсли;
	
	Параметры.Вставить("СтарыйПарольСовпадает", Ложь);
	
	ДополнительныеПараметры = Новый Структура;
	Если Не ВозможноИзменитьПароль(СсылкаОбъекта, ДополнительныеПараметры) Тогда
		Возврат ДополнительныеПараметры.ТекстОшибки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДополнительныеПараметры.ЭтоТекущийПользовательИБ
	   И ДополнительныеПараметры.ПарольУстановлен
	   И (ВызовИзФормыСменаПароля Или СтарыйПароль <> Неопределено) Тогда
		
		СохраняемоеЗначениеСтрокиПароля(СтарыйПароль,
			ДополнительныеПараметры.ИдентификаторПользователяИБ, Параметры.СтарыйПарольСовпадает);
		
		Если Не Параметры.СтарыйПарольСовпадает Тогда
			Возврат НСтр("ru = 'Старый пароль указан неверно.'");
		КонецЕсли;
	КонецЕсли;
	
	Если ПользователиСлужебныйПовтИсп.Настройки().ОбщиеНастройкиВхода Тогда
		Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			НастройкиВхода = ПользователиСлужебныйПовтИсп.Настройки().ВнешниеПользователи;
		Иначе
			НастройкиВхода = ПользователиСлужебныйПовтИсп.Настройки().Пользователи;
		КонецЕсли;
		
		ТекстОшибки = ОшибкаДлиныИлиСложностиПароля(НовыйПароль,
			НастройкиВхода.МинимальнаяДлинаПароля,
			НастройкиВхода.ПарольДолженОтвечатьТребованиямСложности);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Возврат ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	ТекстОшибки = ОшибкаДлиныИлиСложностиПароля(НовыйПароль,
		ПолучитьМинимальнуюДлинуПаролейПользователей(),
		ПолучитьПроверкуСложностиПаролейПользователей());
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Если Не ПользователиСлужебныйПовтИсп.Настройки().ОбщиеНастройкиВхода Тогда
			Возврат ТекстОшибки;
		КонецЕсли;
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
			           |
			           |Ограничение установлено в конфигураторе в меню ""Администрирование"" пункт ""Параметры информационной базы ..."".
			           |Следует очистить минимальную длину и требование сложности пароля в конфигураторе и
			           |задать настройки входа пользователей в настройках программы.'"),
			ТекстОшибки);
	КонецЕсли;
	
	СохраняемоеЗначениеПароля = СохраняемоеЗначениеСтрокиПароля(НовыйПароль);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(Пользователь)).ПолноеИмя());
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Пользователь);
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			СведенияОПользователе = НаборЗаписей.Добавить();
			СведенияОПользователе.Пользователь = Пользователь;
		Иначе
			СведенияОПользователе = НаборЗаписей[0];
		КонецЕсли;
		ИспользованныеПароли = СведенияОПользователе.ИспользованныеПароли.Получить();
		Если ИспользованныеПароли = Неопределено Тогда
			ИспользованныеПароли = Новый Массив;
		КонецЕсли;
		
		Если ПользователиСлужебныйПовтИсп.Настройки().ОбщиеНастройкиВхода
		   И ЗначениеЗаполнено(НастройкиВхода.ЗапретитьПовторениеПароляСредиПоследних) Тогда
			
			Если ИспользованныеПароли.Найти(СохраняемоеЗначениеПароля) <> Неопределено Тогда
				ОтменитьТранзакцию();
				Возврат НСтр("ru = 'Новый пароль использовался ранее.'");
			КонецЕсли;
			ИспользованныеПароли.Добавить(СохраняемоеЗначениеПароля);
			Пока ИспользованныеПароли.Количество() > НастройкиВхода.ЗапретитьПовторениеПароляСредиПоследних Цикл
				ИспользованныеПароли.Удалить(0);
			КонецЦикла;
		Иначе
			ИспользованныеПароли.Очистить();
		КонецЕсли;
		Если ВызовИзФормыСменаПароля И Параметры.ТолькоПроверить Тогда
			ОтменитьТранзакцию();
			Возврат "";
		КонецЕсли;
		
		Если ВызовИзФормыСменаПароля Тогда
			ОписаниеПользователяИБ = Новый Структура;
			ОписаниеПользователяИБ.Вставить("Действие", "Записать");
			ОписаниеПользователяИБ.Вставить("Пароль", НовыйПароль);
			
			ТекущийОбъект = Пользователь.ПолучитьОбъект();
			ТекущийОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
			Если Параметры.ПриВходеВПрограмму Тогда
				ТекущийОбъект.ДополнительныеСвойства.Вставить("СменаПароляПриВходеВПрограмму");
			КонецЕсли;
			Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
				Если ДополнительныеПараметры.ЭтоТекущийПользовательИБ Тогда
					ТекущийОбъект.ДополнительныеСвойства.Вставить("ПарольПользователяСервиса", СтарыйПароль);
				Иначе
					ТекущийОбъект.ДополнительныеСвойства.Вставить("ПарольПользователяСервиса", Параметры.ПарольПользователяСервиса);
				КонецЕсли;
				ТекущийОбъект.ДополнительныеСвойства.Вставить("СинхронизироватьССервисом", Истина);
			КонецЕсли;
			Попытка
				ТекущийОбъект.Записать();
			Исключение
				Параметры.ПарольПользователяСервиса = Неопределено;
				ВызватьИсключение;
			КонецПопытки;
		Иначе
			СведенияОПользователе.ДатаНачалаИспользованияПароля = Неопределено;
			Если Параметры.Пользователь.ДополнительныеСвойства.Свойство("СменаПароляПриВходеВПрограмму") Тогда
				СведенияОПользователе.ПотребоватьСменуПароляПриВходе = Ложь;
			КонецЕсли;
			СведенияОПользователе.ИспользованныеПароли = Новый ХранилищеЗначения(ИспользованныеПароли);
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		Если ВызовИзФормыСменаПароля Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Пользователи.Ошибка смены пароля'",
				     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.НайтиПоТипу(ТипЗнч(Пользователь)),
				Пользователь,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось сменить пароль пользователя ""%1"" по причине:
					           |%2'"),
					Пользователь, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			Возврат КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

// Для формы СменаПароля и функции НовыйПарольМожноУстановить.
Функция ПодсказкаДляНовогоПароля() Экспорт
	
	Возврат
		НСтр("ru = 'Надежный пароль:
		           |- имеет не менее 7 символов;
		           |- содержит любые 3 из 4-х типов символов: заглавные буквы,
		           |  строчные буквы, цифры, специальные символы;
		           |- не совпадает с именем (для входа).'");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с пользователями.

// Возвращает сохраняемое значение пароля для указанного пароля.
//
// Параметры:
//  Пароль                      - Строка - пароль для которого нужно получить сохраняемое значение.
//
//  ИдентификаторПользователяИБ - УникальныйИдентификатор - пользователя ИБ для которого нужно
//                                сравнить сохраняемое значение с полученным и результат поместить
//                                в следующий параметр Совпадает.
//
//  Совпадает                   - Булево (возвращаемое значение) - см. комментарий к параметру.
//                                ИдентификаторПользователяИБ.
// Возвращаемое значение:
//  Строка - сохраняемое значение пароля.
//
Функция СохраняемоеЗначениеСтрокиПароля(Знач Пароль,
                                        Знач ИдентификаторПользователяИБ = Неопределено,
                                        Совпадает = Ложь) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
		ХешированиеДанных.Добавить(Пароль);
		
		СохраняемоеЗначениеПароля = Base64Строка(ХешированиеДанных.ХешСумма);
		
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
		ХешированиеДанных.Добавить(ВРег(Пароль));
		
		СохраняемоеЗначениеПароля = СохраняемоеЗначениеПароля + ","
			+ Base64Строка(ХешированиеДанных.ХешСумма);
	Иначе
		ТекущаяПроверкаСложности = ПолучитьПроверкуСложностиПаролейПользователей();
		ТекущаяМинимальнаяДлина  = ПолучитьМинимальнуюДлинуПаролейПользователей();
		
		НачатьТранзакцию();
		Попытка
			Если ТекущаяМинимальнаяДлина > 0 Тогда
				УстановитьМинимальнуюДлинуПаролейПользователей(0);
			КонецЕсли;
			Если ТекущаяПроверкаСложности Тогда
				УстановитьПроверкуСложностиПаролейПользователей(Ложь);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИмяПользователя())
			   И ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
				
				ВременныйАдминистраторИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
				ВременныйАдминистраторИБ.АутентификацияСтандартная = Истина;
				ВременныйАдминистраторИБ.Роли.Добавить(Метаданные.Роли.Администрирование);
				ВременныйАдминистраторИБ.Имя = НСтр("ru = 'Временный первый администратор'")
					+ " (" + Строка(Новый УникальныйИдентификатор) + ")";
				ВременныйАдминистраторИБ.Записать();
			Иначе
				ВременныйАдминистраторИБ = Неопределено;
			КонецЕсли;
			
			ВременныйПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
			ВременныйПользовательИБ.АутентификацияСтандартная = Ложь;
			ВременныйПользовательИБ.Пароль = Пароль;
			
			ВременныйПользовательИБ.Имя = НСтр("ru = 'Временный пользователь'")
				+ " (" + Строка(Новый УникальныйИдентификатор) + ")";
			
			ВременныйПользовательИБ.Записать();
			
			ВременныйПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				ВременныйПользовательИБ.УникальныйИдентификатор);
			
			СохраняемоеЗначениеПароля = ВременныйПользовательИБ.СохраняемоеЗначениеПароля;
			
			ВременныйПользовательИБ.Удалить();
			
			Если ВременныйАдминистраторИБ <> Неопределено Тогда
				ВременныйАдминистраторИБ.Удалить();
			КонецЕсли;
			
			Если ТекущаяМинимальнаяДлина > 0 Тогда
				УстановитьМинимальнуюДлинуПаролейПользователей(ТекущаяМинимальнаяДлина);
			КонецЕсли;
			Если ТекущаяПроверкаСложности Тогда
				УстановитьПроверкуСложностиПаролейПользователей(Истина);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			Если ТекущаяМинимальнаяДлина <> ПолучитьМинимальнуюДлинуПаролейПользователей() Тогда
				УстановитьМинимальнуюДлинуПаролейПользователей(ТекущаяМинимальнаяДлина);
			КонецЕсли;
			Если ТекущаяПроверкаСложности <> ПолучитьПроверкуСложностиПаролейПользователей() Тогда
				УстановитьПроверкуСложностиПаролейПользователей(ТекущаяПроверкаСложности);
			КонецЕсли;
			
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(ИдентификаторПользователяИБ) = Тип("УникальныйИдентификатор") Тогда
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ИдентификаторПользователяИБ);
		
		Если ТипЗнч(ПользовательИБ) = Тип("ПользовательИнформационнойБазы") Тогда
			Совпадает = (СохраняемоеЗначениеПароля = ПользовательИБ.СохраняемоеЗначениеПароля);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СохраняемоеЗначениеПароля;
	
КонецФункции

// Возвращает текущий уровень доступа на изменение свойств пользователя ИБ.
// 
// Параметры:
//  ОписаниеОбъекта - СправочникОбъект.Пользователи -
//                  - СправочникОбъект.ВнешниеПользователи -
//                  - ДанныеФормыСтруктура - созданная из объектов указанных выше.
//
//  ПараметрыОбработки - Неопределено - получить данные из описания объекта,
//                       иначе взять уже готовые данные из параметров обработки.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//   * АдминистраторСистемы       - Булево - любые действия с любым пользователем и его пользователем ИБ.
//   * ПолныеПрава                - Булево - то же, АдминистраторСистемы, исключая администраторов системы.
//   * УправлениеСписком          - Булево - добавление новых пользователей и изменение существующих:
//                                   - для пользователей, которым еще не разрешался вход в программу (новых),
//                                     можно настроить любые свойства, кроме включения входа в программу,
//                                   - для пользователей, которым уже разрешался вход в программу,
//                                     можно настроить любые свойства, кроме включения входа в программу
//                                     и настройки аутентификации (см. ниже).
//   * ИзменениеРазрешенияНаВход  - Булево - изменение флажка "Вход в программу разрешен".
//   * ОтключениеРазрешенияНаВход - Булево - снятие    флажка "Вход в программу разрешен".
//   * НастройкиДляВхода          - Булево - изменение свойств пользователя ИБ: Имя, ПользовательОС и
//                                    свойств элемента справочника АутентификацияOpenID, АутентификацияСтандартная,
//                                    АутентификацияОС и Роли (если нет запрета редактирования при внедрении).
//   * ИзменениеТекущего          - Булево - изменение свойств текущего пользователя Пароль и Язык.
//   * НетДоступа                 - Булево - нет ни одного из указанных выше уровней доступа.
//
Функция УровеньДоступаКСвойствамПользователя(ОписаниеОбъекта, ПараметрыОбработки = Неопределено) Экспорт
	
	УровеньДоступа = Новый Структура;
	
	// Администратор системы (системные данные).
	УровеньДоступа.Вставить("АдминистраторСистемы", Пользователи.ЭтоПолноправныйПользователь(, Истина));
	
	// Полноправный пользователь (основных данные).
	УровеньДоступа.Вставить("ПолныеПрава", Пользователи.ЭтоПолноправныйПользователь());
	
	Если ТипЗнч(ОписаниеОбъекта.Ссылка) = Тип("СправочникСсылка.Пользователи") Тогда
		// Ответственный за список пользователей.
		УровеньДоступа.Вставить("УправлениеСписком",
			ПравоДоступа("Добавление", Метаданные.Справочники.Пользователи)
			И (УровеньДоступа.ПолныеПрава
			   Или Не Пользователи.ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка)));
		// Пользователь текущего пользователя ИБ.
		УровеньДоступа.Вставить("ИзменениеТекущего",
			УровеньДоступа.ПолныеПрава
			Или ПравоДоступа("Изменение", Метаданные.Справочники.Пользователи)
			  И ОписаниеОбъекта.Ссылка = Пользователи.АвторизованныйПользователь());
		
	ИначеЕсли ТипЗнч(ОписаниеОбъекта.Ссылка) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		// Ответственный за список внешних пользователей.
		УровеньДоступа.Вставить("УправлениеСписком",
			ПравоДоступа("Добавление", Метаданные.Справочники.ВнешниеПользователи)
			И (УровеньДоступа.ПолныеПрава
			   Или Не Пользователи.ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка)));
		// Внешний пользователь текущего пользователя ИБ.
		УровеньДоступа.Вставить("ИзменениеТекущего",
			УровеньДоступа.ПолныеПрава
			Или ПравоДоступа("Изменение", Метаданные.Справочники.ВнешниеПользователи)
			  И ОписаниеОбъекта.Ссылка = Пользователи.АвторизованныйПользователь());
	КонецЕсли;
	
	Если ПараметрыОбработки = Неопределено Тогда
		УстановитьПривилегированныйРежим(Истина);
		Если ЗначениеЗаполнено(ОписаниеОбъекта.ИдентификаторПользователяИБ) Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				ОписаниеОбъекта.ИдентификаторПользователяИБ);
		Иначе
			ПользовательИБ = Неопределено;
		КонецЕсли;
		ПользовательБезНастроекДляВходаИлиПодготовлен =
			    ПользовательИБ = Неопределено
			Или ОписаниеОбъекта.Подготовлен
			    И Не Пользователи.ВходВПрограммуРазрешен(ПользовательИБ);
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		ПользовательБезНастроекДляВходаИлиПодготовлен =
			    Не ПараметрыОбработки.СтарыйПользовательИБСуществует
			Или ПараметрыОбработки.СтарыйПользователь.Подготовлен
			    И Не Пользователи.ВходВПрограммуРазрешен(ПараметрыОбработки.ОписаниеСтарогоПользователяИБ);
	КонецЕсли;
	
	УровеньДоступа.Вставить("ИзменениеРазрешенияНаВход",
		    УровеньДоступа.АдминистраторСистемы
		Или УровеньДоступа.ПолныеПрава
		  И Не Пользователи.ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка, Истина));
	
	УровеньДоступа.Вставить("ОтключениеРазрешенияНаВход",
		    УровеньДоступа.АдминистраторСистемы
		Или УровеньДоступа.ПолныеПрава
		  И Не Пользователи.ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка, Истина)
		Или УровеньДоступа.УправлениеСписком);
	
	УровеньДоступа.Вставить("НастройкиДляВхода",
		    УровеньДоступа.АдминистраторСистемы
		Или УровеньДоступа.ПолныеПрава
		  И Не Пользователи.ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка, Истина)
		Или УровеньДоступа.УправлениеСписком
		  И ПользовательБезНастроекДляВходаИлиПодготовлен);
	
	УровеньДоступа.Вставить("НетДоступа",
		  НЕ УровеньДоступа.АдминистраторСистемы
		И НЕ УровеньДоступа.ПолныеПрава
		И НЕ УровеньДоступа.УправлениеСписком
		И НЕ УровеньДоступа.ИзменениеТекущего
		И НЕ УровеньДоступа.НастройкиДляВхода);
	
	Возврат УровеньДоступа;
	
КонецФункции

// Проверяет, что указанный пользователь имеем более высокий уровень доступа, чем текущий пользователь.
Функция УровеньДоступаПользователяВыше(ОписаниеПользователя, ТекущийУровеньДоступа) Экспорт
	
	Если ТипЗнч(ОписаниеПользователя) = Тип("СправочникСсылка.Пользователи")
	 Или ТипЗнч(ОписаниеПользователя) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		
		Возврат Пользователи.ЭтоПолноправныйПользователь(ОписаниеПользователя, Истина, Ложь)
		      И Не ТекущийУровеньДоступа.АдминистраторСистемы
		    Или Пользователи.ЭтоПолноправныйПользователь(ОписаниеПользователя, Ложь, Ложь)
		      И Не ТекущийУровеньДоступа.ПолныеПрава;
	Иначе
		Возврат ОписаниеПользователя.Роли.Найти("АдминистраторСистемы") <> Неопределено
		      И Не ТекущийУровеньДоступа.АдминистраторСистемы
		    Или ОписаниеПользователя.Роли.Найти("ПолныеПрава") <> Неопределено
		      И Не ТекущийУровеньДоступа.ПолныеПрава;
	КонецЕсли;
	
КонецФункции

// Вызывается ПередЗаписью Пользователя или Внешнего пользователя.
Процедура НачатьОбработкуПользователяИБ(ПользовательОбъект,
                                        ПараметрыОбработки,
                                        УдалениеПользователяИзСправочника = Ложь) Экспорт
	
	ПараметрыОбработки = Новый Структура;
	ДополнительныеСвойства = ПользовательОбъект.ДополнительныеСвойства;
	
	ПараметрыОбработки.Вставить("УдалениеПользователяИзСправочника", УдалениеПользователяИзСправочника);
	ПараметрыОбработки.Вставить("ТекстСообщенияНедостаточноПрав",
		НСтр("ru = 'Недостаточно прав для изменения пользователя информационной базы.'"));
	
	Если ДополнительныеСвойства.Свойство("ЗначениеКопирования")
	   И ЗначениеЗаполнено(ДополнительныеСвойства.ЗначениеКопирования)
	   И ТипЗнч(ДополнительныеСвойства.ЗначениеКопирования) = ТипЗнч(ПользовательОбъект.Ссылка) Тогда
		
		ПараметрыОбработки.Вставить("ЗначениеКопирования", ДополнительныеСвойства.ЗначениеКопирования);
	КонецЕсли;
	
	// Реквизиты справочника, которые устанавливаются автоматически (проверка неизменности).
	АвтоРеквизиты = Новый Структура;
	АвтоРеквизиты.Вставить("ИдентификаторПользователяИБ");
	АвтоРеквизиты.Вставить("СвойстваПользователяИБ");
	ПараметрыОбработки.Вставить("АвтоРеквизиты", АвтоРеквизиты);
	
	// Реквизиты справочника, которые не допускается изменять в подписках на события (проверка начальных значений).
	БлокируемыеРеквизиты = Новый Структура;
	БлокируемыеРеквизиты.Вставить("Служебный", Ложь); // Значение для внешнего пользователя.
	БлокируемыеРеквизиты.Вставить("ПометкаУдаления");
	БлокируемыеРеквизиты.Вставить("Недействителен");
	БлокируемыеРеквизиты.Вставить("Подготовлен");
	ПараметрыОбработки.Вставить("БлокируемыеРеквизиты", БлокируемыеРеквизиты);
	
	ЗапомнитьСвойстваПользователя(ПользовательОбъект, ПараметрыОбработки);
	
	УровеньДоступа = УровеньДоступаКСвойствамПользователя(ПользовательОбъект, ПараметрыОбработки);
	ПараметрыОбработки.Вставить("УровеньДоступа", УровеньДоступа);
	
	// ПередНачаломОбработкиПользователяИБ - поддержка модели сервиса.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульПользователиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		МодульПользователиСлужебныйВМоделиСервиса.ПередНачаломОбработкиПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
	КонецЕсли;
	
	Если ПараметрыОбработки.СтарыйПользователь.Подготовлен <> ПользовательОбъект.Подготовлен
	   И Не УровеньДоступа.ИзменениеРазрешенияНаВход Тогда
		
		ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
	КонецЕсли;
	
	// Поддержка интерактивной пометки удаления и группового изменения реквизитов ПометкаУдаления, Недействителен.
	Если ПараметрыОбработки.СтарыйПользовательИБСуществует
	   И Пользователи.ВходВПрограммуРазрешен(ПараметрыОбработки.ОписаниеСтарогоПользователяИБ)
	   И Не ДополнительныеСвойства.Свойство("ОписаниеПользователяИБ")
	   И (  ПараметрыОбработки.СтарыйПользователь.ПометкаУдаления = Ложь
	      И ПользовательОбъект.ПометкаУдаления = Истина
	    Или ПараметрыОбработки.СтарыйПользователь.Недействителен = Ложь
	      И ПользовательОбъект.Недействителен  = Истина) Тогда
		
		ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", Новый Структура);
		ДополнительныеСвойства.ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ДополнительныеСвойства.ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", Ложь);
	КонецЕсли;
	
	// Поддержка обновления полного имени пользователя ИБ при изменении наименования.
	Если ПараметрыОбработки.СтарыйПользовательИБСуществует
	   И Не ДополнительныеСвойства.Свойство("ОписаниеПользователяИБ")
	   И ПараметрыОбработки.ОписаниеСтарогоПользователяИБ.ПолноеИмя
	     <> ПользовательОбъект.Наименование Тогда
		
		ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", Новый Структура);
		ДополнительныеСвойства.ОписаниеПользователяИБ.Вставить("Действие", "Записать");
	КонецЕсли;
	
	Если НЕ ДополнительныеСвойства.Свойство("ОписаниеПользователяИБ") Тогда
		Если УровеньДоступа.УправлениеСписком
		   И Не ПараметрыОбработки.СтарыйПользовательИБСуществует
		   И ЗначениеЗаполнено(ПользовательОбъект.ИдентификаторПользователяИБ) Тогда
			// Очистка идентификатора пользователя ИБ.
			ПользовательОбъект.ИдентификаторПользователяИБ = Неопределено;
			ПараметрыОбработки.АвтоРеквизиты.ИдентификаторПользователяИБ =
				ПользовательОбъект.ИдентификаторПользователяИБ;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	ОписаниеПользователяИБ = ДополнительныеСвойства.ОписаниеПользователяИБ;
	
	Если НЕ ОписаниеПользователяИБ.Свойство("Действие") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
			           |В параметре ОписаниеПользователяИБ не указано свойство Действие.'"),
			ПользовательОбъект.Ссылка);
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Действие <> "Записать"
	   И ОписаниеПользователяИБ.Действие <> "Удалить" Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
			           |В параметре ОписаниеПользователяИБ указано
			           |неверное значение ""%2"" свойства Действие.'"),
			ПользовательОбъект.Ссылка,
			ОписаниеПользователяИБ.Действие);
	КонецЕсли;
	ПараметрыОбработки.Вставить("Действие", ОписаниеПользователяИБ.Действие);
	
	Обработчики = ОбщегоНазначения.ОбработчикиСлужебногоСобытия("СтандартныеПодсистемы.Пользователи\ПриНачалеОбработкиПользователяИБ");
	Для Каждого Обработчик Из Обработчики Цикл
		Обработчик.Модуль.ПриНачалеОбработкиПользователяИБ(ПараметрыОбработки, ОписаниеПользователяИБ);
	КонецЦикла;
	
	Если Не ПараметрыОбработки.Свойство("Действие") Тогда
		Возврат;
	КонецЕсли;
	
	Если УровеньДоступа.НетДоступа Тогда
		ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Действие = "Удалить" Тогда
		
		Если Не УровеньДоступа.ИзменениеРазрешенияНаВход Тогда
			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;
		
	ИначеЕсли Не УровеньДоступа.УправлениеСписком Тогда // Действие = "Записать"
		
		Если Не УровеньДоступа.ИзменениеТекущего
		 Или Не ПараметрыОбработки.СтарыйПользовательИБТекущий Тогда
			
			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОписаниеПользователяИБ.Действие = "Записать"
	   И ОписаниеПользователяИБ.Свойство("УникальныйИдентификатор")
	   И ЗначениеЗаполнено(ОписаниеПользователяИБ.УникальныйИдентификатор)
	   И ОписаниеПользователяИБ.УникальныйИдентификатор
	     <> ПараметрыОбработки.СтарыйПользователь.ИдентификаторПользователяИБ Тогда
		
		ПараметрыОбработки.Вставить("УстановкаПользователяИБ");
		
		Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при записи пользователя ""%1"".
				           |Нельзя сопоставить пользователя ИБ с пользователем в справочнике,
				           |с которым уже сопоставлен другой пользователем ИБ.'"),
				ПользовательОбъект.Наименование);
		КонецЕсли;
		
		НайденныйПользователь = Неопределено;
		
		Если ПользовательПоИдентификаторуСуществует(
			ОписаниеПользователяИБ.УникальныйИдентификатор,
			ПользовательОбъект.Ссылка,
			НайденныйПользователь) Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при записи пользователя ""%1"".
				           |Нельзя сопоставить пользователя ИБ с этим пользователем в справочнике,
				           |так как он уже сопоставлен с другим пользователем в справочнике
				           |""%2"".'"),
				НайденныйПользователь,
				ПользовательОбъект.Наименование);
		КонецЕсли;
		
		Если Не УровеньДоступа.ПолныеПрава Тогда
			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Действие = "Записать" Тогда
		
		// Проверка прав на изменение пользователей с широким доступом.
		Если ПараметрыОбработки.СтарыйПользовательИБСуществует
		   И УровеньДоступаПользователяВыше(ПараметрыОбработки.ОписаниеСтарогоПользователяИБ, УровеньДоступа) Тогда
			
			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;
		
		// Проверка попытки изменения недоступных свойств.
		Если Не УровеньДоступа.ПолныеПрава Тогда
			ДопустимыеСвойства = Новый Структура;
			ДопустимыеСвойства.Вставить("УникальныйИдентификатор"); // Проверено выше.
			
			Если УровеньДоступа.ИзменениеТекущего Тогда
				ДопустимыеСвойства.Вставить("Пароль");
				ДопустимыеСвойства.Вставить("Язык");
			КонецЕсли;
			
			Если УровеньДоступа.УправлениеСписком Тогда
				ДопустимыеСвойства.Вставить("ПолноеИмя");
				ДопустимыеСвойства.Вставить("ПоказыватьВСпискеВыбора");
				ДопустимыеСвойства.Вставить("ЗапрещеноИзменятьПароль");
				ДопустимыеСвойства.Вставить("Язык");
				ДопустимыеСвойства.Вставить("РежимЗапуска");
			КонецЕсли;
			
			Если УровеньДоступа.НастройкиДляВхода Тогда
				ДопустимыеСвойства.Вставить("Имя");
				ДопустимыеСвойства.Вставить("АутентификацияСтандартная");
				ДопустимыеСвойства.Вставить("Пароль");
				ДопустимыеСвойства.Вставить("АутентификацияОС");
				ДопустимыеСвойства.Вставить("ПользовательОС");
				ДопустимыеСвойства.Вставить("АутентификацияOpenID");
				ДопустимыеСвойства.Вставить("Роли");
			КонецЕсли;
			
			ВсеСвойства = Пользователи.НовоеОписаниеПользователяИБ();
			
			Для Каждого КлючИЗначение Из ОписаниеПользователяИБ Цикл
				
				Если ВсеСвойства.Свойство(КлючИЗначение.Ключ)
				   И Не ДопустимыеСвойства.Свойство(КлючИЗначение.Ключ) Тогда
					
					ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗаписатьПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
	Иначе
		УдалитьПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
	КонецЕсли;
	
	// Обновление значения реквизита контролируемого при записи.
	ПараметрыОбработки.АвтоРеквизиты.ИдентификаторПользователяИБ =
		ПользовательОбъект.ИдентификаторПользователяИБ;
	
	ОписаниеНовогоПользователяИБ = Неопределено;
	Если Пользователи.ПрочитатьПользователяИБ(
	         ПользовательОбъект.ИдентификаторПользователяИБ,
	         ОписаниеНовогоПользователяИБ) Тогда
		
		ПараметрыОбработки.Вставить("НовыйПользовательИБСуществует", Истина);
		ПараметрыОбработки.Вставить("ОписаниеНовогоПользователяИБ", ОписаниеНовогоПользователяИБ);
		
		// Проверка прав на изменение пользователей с широким доступом.
		Если ПараметрыОбработки.СтарыйПользовательИБСуществует
		   И УровеньДоступаПользователяВыше(ПараметрыОбработки.ОписаниеНовогоПользователяИБ, УровеньДоступа) Тогда
			
			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;
	Иначе
		ПараметрыОбработки.Вставить("НовыйПользовательИБСуществует", Ложь);
	КонецЕсли;
	
	// ПослеНачалаОбработкиПользователяИБ - поддержка модели сервиса.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульПользователиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		МодульПользователиСлужебныйВМоделиСервиса.ПослеНачалаОбработкиПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
	КонецЕсли;
	
	Если ПараметрыОбработки.Свойство("СозданиеАдминистратора") Тогда
		УстановитьПривилегированныйРежим(Истина);
		ИнтеграцияСтандартныхПодсистем.ПриСозданииАдминистратора(СсылкаОбъекта(ПользовательОбъект),
			ПараметрыОбработки.СозданиеАдминистратора);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается ПриЗаписи Пользователя или Внешнего пользователя.
Процедура ЗавершитьОбработкуПользователяИБ(ПользовательОбъект, ПараметрыОбработки) Экспорт
	
	ПроверитьИзмененияРеквизитовПользователя(ПользовательОбъект, ПараметрыОбработки);
	
	// ПередЗавершениемОбработкиПользователяИБ - поддержка модели сервиса.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульПользователиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		МодульПользователиСлужебныйВМоделиСервиса.ПередЗавершениемОбработкиПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
	КонецЕсли;
	
	Если НЕ ПараметрыОбработки.Свойство("Действие") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлятьРоли = Истина;
	
	// ПриЗавершенииОбработкиПользователяИБ - поддержка модели сервиса.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульПользователиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		МодульПользователиСлужебныйВМоделиСервиса.ПриЗавершенииОбработкиПользователяИБ(
			ПользовательОбъект, ПараметрыОбработки, ОбновлятьРоли);
	КонецЕсли;
	
	Если ПараметрыОбработки.Свойство("УстановкаПользователяИБ") И ОбновлятьРоли Тогда
		ПарольПользователяСервиса = Неопределено;
		Если ПользовательОбъект.ДополнительныеСвойства.Свойство("ПарольПользователяСервиса") Тогда
			ПарольПользователяСервиса = ПользовательОбъект.ДополнительныеСвойства.ПарольПользователяСервиса;
		КонецЕсли;
		
		ИнтеграцияСтандартныхПодсистем.ПослеУстановкиПользователяИБ(ПользовательОбъект.Ссылка,
			ПарольПользователяСервиса);
	КонецЕсли;
	
	Если ПараметрыОбработки.Действие = "Записать"
	   И Пользователи.ВходВПрограммуРазрешен(ПараметрыОбработки.ОписаниеНовогоПользователяИБ) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		СброситьРесурсДатаАвтоматическогоЗапрещенияВхода(ПользовательОбъект.Ссылка);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	СкопироватьНастройкиПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
	
КонецПроцедуры

// Вызывается при обработке свойства СвойстваПользователяИБ пользователя в справочнике.
// 
// Параметры:
//  ОписаниеПользователя   - СправочникОбъект.Пользователи, СправочникОбъект.ВнешниеПользователи,
//                           ДанныеФормыСтруктура, содержит свойство СвойстваПользователяИБ.
//                         - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи -
//                           из объекта которой нужно прочитать свойство СвойстваПользователяИБ.
//  ВходВПрограммуРазрешен - Булево - если указано Ложь, а сохранено Истина, тогда свойства
//                           аутентификации безусловно Ложь, т.к. были сняты в конфигураторе.
//
// Возвращаемое значение:
//  Структура.
//
Функция ХранимыеСвойстваПользователяИБ(ОписаниеПользователя, ВходВПрограммуРазрешен = Ложь) Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("ВходВПрограммуРазрешен",    Ложь);
	Свойства.Вставить("АутентификацияСтандартная", Ложь);
	Свойства.Вставить("АутентификацияOpenID",      Ложь);
	Свойства.Вставить("АутентификацияОС",          Ложь);
	
	Если ТипЗнч(ОписаниеПользователя) = Тип("СправочникСсылка.Пользователи")
	 Или ТипЗнч(ОписаниеПользователя) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		
		ХранилищеСвойств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ОписаниеПользователя, "СвойстваПользователяИБ");
	Иначе
		ХранилищеСвойств = ОписаниеПользователя.СвойстваПользователяИБ;
	КонецЕсли;
	
	Если ТипЗнч(ХранилищеСвойств) <> Тип("ХранилищеЗначения") Тогда
		Возврат Свойства;
	КонецЕсли;
	
	СохраненныеСвойства = ХранилищеСвойств.Получить();
	
	Если ТипЗнч(СохраненныеСвойства) <> Тип("Структура") Тогда
		Возврат Свойства;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из Свойства Цикл
		Если СохраненныеСвойства.Свойство(КлючИЗначение.Ключ)
		   И ТипЗнч(СохраненныеСвойства[КлючИЗначение.Ключ]) = Тип("Булево") Тогда
			
			Свойства[КлючИЗначение.Ключ] = СохраненныеСвойства[КлючИЗначение.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	Если Свойства.ВходВПрограммуРазрешен И Не ВходВПрограммуРазрешен Тогда
		Свойства.Вставить("АутентификацияСтандартная", Ложь);
		Свойства.Вставить("АутентификацияOpenID",      Ложь);
		Свойства.Вставить("АутентификацияОС",          Ложь);
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

// Нельзя вызвать из фоновых заданий с пустым пользователем.
Функция ТребуетсяСоздатьПервогоАдминистратора(Знач ОписаниеПользователяИБ,
                                              Текст = Неопределено) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если НЕ ЗначениеЗаполнено(ТекущийПользовательИБ.Имя)
	   И ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
		
		Если ТипЗнч(ОписаниеПользователяИБ) = Тип("Структура") Тогда
			// Проверка перед записью обычного пользователя или пользователя ИБ.
			
			Если ОписаниеПользователяИБ.Свойство("Роли") Тогда
				Роли = ОписаниеПользователяИБ.Роли;
			Иначе
				Роли = Новый Массив;
			КонецЕсли;
			
			Если ЗапретРедактированияРолей()
				ИЛИ Роли.Найти("ПолныеПрава") = Неопределено
				ИЛИ Роли.Найти(Пользователи.РольАдминистратораСистемы().Имя) = Неопределено Тогда
				
				// Подготовка текста вопроса при записи первого администратора.
				Если ВРег(Пользователи.РольАдминистратораСистемы().Имя) = ВРег("ПолныеПрава") Тогда
					Текст = НСтр("ru = 'В список пользователей программы добавляется первый пользователь,
					                   |поэтому ему автоматически будет назначена роль ""Полные права"".
					                   |Продолжить?'");
				Иначе
					Текст = НСтр("ru = 'В список пользователей программы добавляется первый пользователь, поэтому ему
					                   |автоматически будут назначены роли ""Администратор системы"" и ""Полные права"".
					                   |Продолжить?'");
				КонецЕсли;
				
				Если НЕ ЗапретРедактированияРолей() Тогда
					Возврат Истина;
				КонецЕсли;
				
				ИнтеграцияСтандартныхПодсистем.ПриОпределенииТекстаВопросаПередЗаписьюПервогоАдминистратора(Текст);
				
				Возврат Истина;
			КонецЕсли;
		Иначе
			// Проверка перед записью внешнего пользователя.
			Текст = НСтр("ru = 'Первый пользователь информационной базы должен иметь полные права.
			                   |Внешний пользователь не может быть полноправным.
			                   |Сначала создайте администратора в справочнике Пользователи.'");
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет наличие ролей администратора с учетом модели сервиса и базовых версий.
Функция РолиАдминистратораДоступны(ПользовательИБ = Неопределено) Экспорт
	
	Если ПользовательИБ = Неопределено
	 Или ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь() Тогда
	
		Возврат РольДоступна(Метаданные.Роли.ПолныеПрава) // Не заменять на РолиДоступны.
		     И (РольДоступна(Пользователи.РольАдминистратораСистемы(Истина)) // Не заменять на РолиДоступны.
		        Или ОбщегоНазначенияПовтИсп.РазделениеВключено() );
	КонецЕсли;
	
	Возврат ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава)
	     И (ПользовательИБ.Роли.Содержит(Пользователи.РольАдминистратораСистемы(Истина))
	        Или ОбщегоНазначенияПовтИсп.РазделениеВключено() );
	
КонецФункции

// Создает пользователя <Не указан>.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи.
// 
Функция СоздатьНеуказанногоПользователя() Экспорт
	
	СвойстваНеуказанногоПользователя = СвойстваНеуказанногоПользователя();
	
	Если ОбщегоНазначения.СсылкаСуществует(СвойстваНеуказанногоПользователя.СтандартнаяСсылка) Тогда
		
		Возврат СвойстваНеуказанногоПользователя.СтандартнаяСсылка;
		
	Иначе
		
		НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
		НовыйПользователь.Служебный = Истина;
		НовыйПользователь.Наименование = СвойстваНеуказанногоПользователя.ПолноеИмя;
		НовыйПользователь.УстановитьСсылкуНового(СвойстваНеуказанногоПользователя.СтандартнаяСсылка);
		НовыйПользователь.ОбменДанными.Загрузка = Истина;
		НовыйПользователь.Записать();
		
		Возврат НовыйПользователь.Ссылка;
		
	КонецЕсли;
	
КонецФункции

// Проверяет корректность заполнения структуры описания пользователя ИБ.
// В случае нахождения ошибок устанавливает параметр Отказ в Истина и
// отправляет сообщения об ошибках.
//
// Параметры:
//  ОписаниеПользователяИБ - Структура - описание пользователя ИБ
//                 заполнение которого требуется проверить.
//
//  Отказ        - Булево - флаг отказа от выполнения операции.
//                 Устанавливается в случае ошибки.
//
// Возвращаемое значение:
//  Булево - если Истина, ошибок не найдено.
//
Функция ПроверитьОписаниеПользователяИБ(Знач ОписаниеПользователяИБ, Отказ) Экспорт
	
	Если ОписаниеПользователяИБ.Свойство("Имя") Тогда
		Имя = ОписаниеПользователяИБ.Имя;
		
		Если ПустаяСтрока(Имя) Тогда
			// Хранилище настроек использует только первые 64 символа имени пользователя ИБ.
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнено Имя (для входа).'"),
				,
				"Имя",
				,
				Отказ);
			
		ИначеЕсли СтрДлина(Имя) > 64 Тогда
			// Аутентификация через web использует символ ":",
			// как разделитель имени и пароля пользователя.
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Имя (для входа) превышает 64 символа.'"),
				,
				"Имя",
				,
				Отказ);
			
		ИначеЕсли СтрНайти(Имя, ":") > 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Имя (для входа) содержит запрещенный символ "":"".'"),
				,
				"Имя",
				,
				Отказ);
				
		Иначе
			УстановитьПривилегированныйРежим(Истина);
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Имя);
			УстановитьПривилегированныйРежим(Ложь);
			
			Если ПользовательИБ <> Неопределено
			   И ПользовательИБ.УникальныйИдентификатор
			     <> ОписаниеПользователяИБ.ИдентификаторПользователяИБ Тогда
				
				НайденныйПользователь = Неопределено;
				ПользовательПоИдентификаторуСуществует(
					ПользовательИБ.УникальныйИдентификатор, , НайденныйПользователь);
				
				Если НайденныйПользователь = Неопределено
				 ИЛИ НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
					
					ТекстОшибки = НСтр("ru = 'Имя (для входа) уже занято.'");
				Иначе
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Имя (для входа) уже занято для пользователя ""%1"".'"),
						Строка(НайденныйПользователь));
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки, , "Имя", , Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Свойство("ПользовательОС") Тогда
		
		Если Не ПустаяСтрока(ОписаниеПользователяИБ.ПользовательОС)
		   И Не СтандартныеПодсистемыСервер.ЭтоУчебнаяПлатформа() Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			Попытка
				ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
				ПользовательИБ.ПользовательОС = ОписаниеПользователяИБ.ПользовательОС;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Пользователь ОС должен быть в формате
					           |""\\ИмяДомена\ИмяПользователя"".'"),
					,
					"ПользовательОС",
					,
					Отказ);
			КонецПопытки;
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

// Обновляет составы пользователей у групп пользователей с учетом иерархии
// в регистре сведений "Составы групп пользователей".
//  Данные регистра используются в форме списка и формы выбора пользователей.
//  Данные регистра могут быть использованы для повышения производительности запросов,
// т.к. не требуется работать с иерархией.
//
// Параметры:
//  ГруппаПользователей - СправочникСсылка.ГруппыПользователей.
//
//  Пользователь - Неопределено                                  - для всех пользователей.
//               - Массив значений СправочникСсылка.Пользователи - для указанных пользователей.
//               - СправочникСсылка.Пользователи                 - для указанного пользователя.
//
//  УчастникиИзменений - Неопределено - никаких действий.
//                     - Массив (возвращаемое значение) - заполняет массив пользователями
//                       для которых есть изменения.
//
//  ИзмененныеГруппы   - Неопределено - никаких действий.
//                     - Массив (возвращаемое значение) - заполняет массив группами пользователей
//                       для которых есть изменения.
//
Процедура ОбновитьСоставыГруппПользователей(Знач ГруппаПользователей,
                                            Знач Пользователь       = Неопределено,
                                            Знач УчастникиИзменений = Неопределено,
                                            Знач ИзмененныеГруппы   = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ГруппаПользователей) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Пользователь) = Тип("Массив") И Пользователь.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если УчастникиИзменений = Неопределено Тогда
		ТекущиеУчастникиИзменений = Новый Соответствие;
	Иначе
		ТекущиеУчастникиИзменений = УчастникиИзменений;
	КонецЕсли;
	
	Если ИзмененныеГруппы = Неопределено Тогда
		ТекущиеИзмененныеГруппы = Новый Соответствие;
	Иначе
		ТекущиеИзмененныеГруппы = ИзмененныеГруппы;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Если ГруппаПользователей = Справочники.ГруппыПользователей.ВсеПользователи Тогда
			
			ОбновитьСоставГруппыВсеПользователи(
				Пользователь, , ТекущиеУчастникиИзменений, ТекущиеИзмененныеГруппы);
		Иначе
			ОбновитьСоставыИерархическихГруппПользователей(
				ГруппаПользователей,
				Пользователь,
				ТекущиеУчастникиИзменений,
				ТекущиеИзмененныеГруппы);
		КонецЕсли;
		
		Если УчастникиИзменений = Неопределено
		   И ИзмененныеГруппы   = Неопределено Тогда
			
			ПослеОбновленияСоставовГруппПользователей(
				ТекущиеУчастникиИзменений, ТекущиеИзмененныеГруппы);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновление ресурс Используется при изменении реквизитов ПометкаУдаления, Недействителен.
//
// Параметры:
//  ПользовательИлиГруппа - СправочникСсылка.Пользователи,
//                        - СправочникСсылка.ВнешниеПользователи,
//                        - СправочникСсылка.ГруппыПользователей,
//                        - СправочникСсылка.ГруппыВнешнихПользователей.
//
//  УчастникиИзменений - Массив (возвращаемое значение) - заполняет массив пользователями или
//                       внешними пользователями, для которых есть изменения.
//
//  ИзмененныеГруппы   - Массив (возвращаемое значение) - заполняет массив группами пользователей или
//                       группами внешних пользователей, для которых есть изменения.
//
Процедура ОбновитьИспользуемостьСоставовГруппПользователей(Знач ПользовательИлиГруппа,
                                                           Знач УчастникиИзменений,
                                                           Знач ИзмененныеГруппы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПользовательИлиГруппа", ПользовательИлиГруппа);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставыГруппПользователей.ГруппаПользователей,
	|	СоставыГруппПользователей.Пользователь,
	|	ВЫБОР
	|		КОГДА СоставыГруппПользователей.ГруппаПользователей.ПометкаУдаления
	|			ТОГДА ЛОЖЬ
	|		КОГДА СоставыГруппПользователей.Пользователь.ПометкаУдаления
	|			ТОГДА ЛОЖЬ
	|		КОГДА СоставыГруппПользователей.Пользователь.Недействителен
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Используется
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	&Отбор
	|	И ВЫБОР
	|			КОГДА СоставыГруппПользователей.ГруппаПользователей.ПометкаУдаления
	|				ТОГДА ЛОЖЬ
	|			КОГДА СоставыГруппПользователей.Пользователь.ПометкаУдаления
	|				ТОГДА ЛОЖЬ
	|			КОГДА СоставыГруппПользователей.Пользователь.Недействителен
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ <> СоставыГруппПользователей.Используется";
	
	Если ТипЗнч(ПользовательИлиГруппа) = Тип("СправочникСсылка.Пользователи")
	 ИЛИ ТипЗнч(ПользовательИлиГруппа) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Отбор",
			"СоставыГруппПользователей.Пользователь = &ПользовательИлиГруппа");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Отбор",
			"СоставыГруппПользователей.ГруппаПользователей = &ПользовательИлиГруппа");
	КонецЕсли;
	
	НаборЗаписи = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
	Запись = НаборЗаписи.Добавить();
	
	НачатьТранзакцию();
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписи.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
			НаборЗаписи.Отбор.Пользователь.Установить(Выборка.Пользователь);
			
			Запись.ГруппаПользователей = Выборка.ГруппаПользователей;
			Запись.Пользователь        = Выборка.Пользователь;
			Запись.Используется        = Выборка.Используется;
			
			НаборЗаписи.Записать();
			
			ИзмененныеГруппы.Вставить(Выборка.ГруппаПользователей);
			УчастникиИзменений.Вставить(Выборка.Пользователь);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПослеОбновленияСоставовГруппПользователей(УчастникиИзменений, ИзмененныеГруппы) Экспорт
	
	Если УчастникиИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УчастникиИзмененийМассив = Новый Массив;
	
	Для каждого КлючИЗначение Из УчастникиИзменений Цикл
		УчастникиИзмененийМассив.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	ИзмененныеГруппыМассив = Новый Массив;
	Для каждого КлючИЗначение Из ИзмененныеГруппы Цикл
		ИзмененныеГруппыМассив.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	ИнтеграцияСтандартныхПодсистем.ПослеОбновленияСоставовГруппПользователей(УчастникиИзмененийМассив,
		ИзмененныеГруппыМассив);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с внешними пользователями.

// Обновляет составы внешних пользователей у групп внешних пользователей
// с учетом иерархии в регистре сведений "Составы групп пользователей".
//  Данные используются в форме списка и форме выбора внешних пользователей.
//  Данные могут быть использованы в целях для повышения производительности,
// так как не требуется работать с иерархией на языке запросов.
//
// Параметры:
//  ГруппаВнешнихПользователей - СправочникСсылка.ГруппыВнешнихПользователей
//                        Когда указана группа ВсеВнешниеПользователи обновляются также все
//                        автоматические группы внешних пользователей по типам объектов авторизации.
//
//  ВнешнийПользователь - Неопределено - для всех внешних пользователей.
//                      - Массив значений СправочникСсылка.ВнешниеПользователи - для указанных
//                          внешних пользователей.
//                      - СправочникСсылка.ВнешниеПользователи - для указанного внешнего пользователя.
//
//  УчастникиИзменений  - Неопределено - никаких действий.
//                      - Массив (возвращаемое значение) - заполняет массив внешними
//                        пользователями для которых есть изменения.
//
//  ИзмененныеГруппы   - Неопределено - никаких действий.
//                     - Массив (возвращаемое значение) - заполняет массив группами внешних
//                       пользователей для которых есть изменения.
//
Процедура ОбновитьСоставыГруппВнешнихПользователей(Знач ГруппаВнешнихПользователей,
                                                   Знач ВнешнийПользователь = Неопределено,
                                                   Знач УчастникиИзменений  = Неопределено,
                                                   Знач ИзмененныеГруппы    = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ГруппаВнешнихПользователей) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВнешнийПользователь) = Тип("Массив") И ВнешнийПользователь.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если УчастникиИзменений = Неопределено Тогда
		ТекущиеУчастникиИзменений = Новый Соответствие;
	Иначе
		ТекущиеУчастникиИзменений = УчастникиИзменений;
	КонецЕсли;
	
	Если ИзмененныеГруппы = Неопределено Тогда
		ТекущиеИзмененныеГруппы = Новый Соответствие;
	Иначе
		ТекущиеИзмененныеГруппы = ИзмененныеГруппы;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Если ГруппаВнешнихПользователей = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
			
			ОбновитьСоставГруппыВсеПользователи(
				ВнешнийПользователь, Истина, ТекущиеУчастникиИзменений, ТекущиеИзмененныеГруппы);
			
			ОбновитьСоставыГруппПоТипамОбъектовАвторизации(
				, ВнешнийПользователь, ТекущиеУчастникиИзменений, ТекущиеИзмененныеГруппы);
			
		Иначе
			ВсеОбъектыАвторизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВнешнихПользователей,
				"ВсеОбъектыАвторизации");
			ВсеОбъектыАвторизации = ?(ВсеОбъектыАвторизации = Неопределено, Ложь, ВсеОбъектыАвторизации);
			
			Если ВсеОбъектыАвторизации Тогда
				ОбновитьСоставыГруппПоТипамОбъектовАвторизации(
					ГруппаВнешнихПользователей,
					ВнешнийПользователь,
					ТекущиеУчастникиИзменений,
					ТекущиеИзмененныеГруппы);
			Иначе
				ОбновитьСоставыИерархическихГруппПользователей(
					ГруппаВнешнихПользователей,
					ВнешнийПользователь,
					ТекущиеУчастникиИзменений,
					ТекущиеИзмененныеГруппы);
			КонецЕсли;
		КонецЕсли;
		
		Если УчастникиИзменений = Неопределено
		   И ИзмененныеГруппы   = Неопределено Тогда
			
			ПослеОбновленияСоставовГруппВнешнихПользователей(
				ТекущиеУчастникиИзменений, ТекущиеИзмененныеГруппы);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПослеОбновленияСоставовГруппВнешнихПользователей(УчастникиИзменений, ИзмененныеГруппы) Экспорт
	
	Если УчастникиИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УчастникиИзмененийМассив = Новый Массив;
	Для каждого КлючИЗначение Из УчастникиИзменений Цикл
		УчастникиИзмененийМассив.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	ОбновитьРолиВнешнихПользователей(УчастникиИзмененийМассив);
	
	ИзмененныеГруппыМассив = Новый Массив;
	Для каждого КлючИЗначение Из ИзмененныеГруппы Цикл
		ИзмененныеГруппыМассив.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	ИнтеграцияСтандартныхПодсистем.ПослеОбновленияСоставовГруппПользователей(УчастникиИзмененийМассив,
		ИзмененныеГруппыМассив);
	
КонецПроцедуры

// Обновляет список ролей пользователей информационной базы, которые соответствуют
// внешним пользователям. Состав ролей вычисляется исходя из вхождения внешних
// пользователей в группы внешних пользователей, кроме тех внешних пользователей,
// для которых роли установлены непосредственно.
//  Требуется только при разрешении редактирования ролей, например, если
// встроена подсистема Управление доступом, то эта процедура не требуется.
// 
// Параметры:
//  МассивВнешнихПользователей - Неопределено - все внешние пользователи.
//                               СправочникСсылка.ГруппаВнешнихПользователей,
//                               Массив элементов СправочникСсылка.ВнешниеПользователи.
//
Процедура ОбновитьРолиВнешнихПользователей(Знач МассивВнешнихПользователей = Неопределено) Экспорт
	
	Если ЗапретРедактированияРолей() Тогда
		// Роли устанавливаются другим механизмом, например, механизмом подсистемы УправлениеДоступом.
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(МассивВнешнихПользователей) = Тип("Массив")
	   И МассивВнешнихПользователей.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Если ТипЗнч(МассивВнешнихПользователей) <> Тип("Массив") Тогда
			
			Если МассивВнешнихПользователей = Неопределено Тогда
				ГруппаВнешнихПользователей = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи;
			Иначе
				ГруппаВнешнихПользователей = МассивВнешнихПользователей;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ГруппаВнешнихПользователей", ГруппаВнешнихПользователей);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СоставыГруппПользователей.Пользователь
			|ИЗ
			|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|ГДЕ
			|	СоставыГруппПользователей.ГруппаПользователей = &ГруппаВнешнихПользователей";
			
			МассивВнешнихПользователей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		КонецЕсли;
		
		Пользователи.НайтиНеоднозначныхПользователейИБ(Неопределено);
		
		ИдентификаторыПользователейИБ = Новый Соответствие;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВнешниеПользователи", МассивВнешнихПользователей);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВнешниеПользователи.Ссылка КАК ВнешнийПользователь,
		|	ВнешниеПользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|ГДЕ
		|	ВнешниеПользователи.Ссылка В(&ВнешниеПользователи)
		|	И (НЕ ВнешниеПользователи.УстановитьРолиНепосредственно)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ИдентификаторыПользователейИБ.Вставить(
				Выборка.ВнешнийПользователь, Выборка.ИдентификаторПользователяИБ);
		КонецЦикла;
		
		// Подготовка таблицы старых ролей внешних пользователей.
		СтарыеРолиВнешнихПользователей = Новый ТаблицаЗначений;
		
		СтарыеРолиВнешнихПользователей.Колонки.Добавить(
			"ВнешнийПользователь", Новый ОписаниеТипов("СправочникСсылка.ВнешниеПользователи"));
		
		СтарыеРолиВнешнихПользователей.Колонки.Добавить(
			"Роль", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
		
		ТекущийНомер = МассивВнешнихПользователей.Количество() - 1;
		Пока ТекущийНомер >= 0 Цикл
			
			// Проверка необходимости обработки пользователя.
			ПользовательИБ = Неопределено;
			ИдентификаторПользователяИБ = ИдентификаторыПользователейИБ[МассивВнешнихПользователей[ТекущийНомер]];
			Если ИдентификаторПользователяИБ <> Неопределено Тогда
				
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
					ИдентификаторПользователяИБ);
			КонецЕсли;
			
			Если ПользовательИБ = Неопределено
			 ИЛИ ПустаяСтрока(ПользовательИБ.Имя) Тогда
				
				МассивВнешнихПользователей.Удалить(ТекущийНомер);
			Иначе
				Для каждого Роль Из ПользовательИБ.Роли Цикл
					СтараяРольВнешнегоПользователя = СтарыеРолиВнешнихПользователей.Добавить();
					СтараяРольВнешнегоПользователя.ВнешнийПользователь = МассивВнешнихПользователей[ТекущийНомер];
					СтараяРольВнешнегоПользователя.Роль = Роль.Имя;
				КонецЦикла;
			КонецЕсли;
			ТекущийНомер = ТекущийНомер - 1;
		КонецЦикла;
		
		// Подготовка списка ролей отсутствующих в метаданных и которые нужно переустановить.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ВнешниеПользователи", МассивВнешнихПользователей);
		Запрос.УстановитьПараметр("ВсеРоли", ВсеРоли().Таблица);
		Запрос.УстановитьПараметр("СтарыеРолиВнешнихПользователей", СтарыеРолиВнешнихПользователей);
		Запрос.УстановитьПараметр("ИспользоватьВнешнихПользователей",
			ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей"));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтарыеРолиВнешнихПользователей.ВнешнийПользователь,
		|	СтарыеРолиВнешнихПользователей.Роль
		|ПОМЕСТИТЬ СтарыеРолиВнешнихПользователей
		|ИЗ
		|	&СтарыеРолиВнешнихПользователей КАК СтарыеРолиВнешнихПользователей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеРоли.Имя
		|ПОМЕСТИТЬ ВсеРоли
		|ИЗ
		|	&ВсеРоли КАК ВсеРоли
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаВнешнихПользователей,
		|	СоставыГруппПользователей.Пользователь КАК ВнешнийПользователь,
		|	Роли.Роль.Имя КАК Роль
		|ПОМЕСТИТЬ ВсеНовыеРолиВнешнихПользователей
		|ИЗ
		|	Справочник.ГруппыВнешнихПользователей.Роли КАК Роли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО (СоставыГруппПользователей.Пользователь В (&ВнешниеПользователи))
		|			И (СоставыГруппПользователей.ГруппаПользователей = Роли.Ссылка)
		|			И (&ИспользоватьВнешнихПользователей = ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеНовыеРолиВнешнихПользователей.ВнешнийПользователь,
		|	ВсеНовыеРолиВнешнихПользователей.Роль
		|ПОМЕСТИТЬ НовыеРолиВнешнихПользователей
		|ИЗ
		|	ВсеНовыеРолиВнешнихПользователей КАК ВсеНовыеРолиВнешнихПользователей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтарыеРолиВнешнихПользователей.ВнешнийПользователь
		|ПОМЕСТИТЬ ИзмененныеВнешниеПользователи
		|ИЗ
		|	СтарыеРолиВнешнихПользователей КАК СтарыеРолиВнешнихПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеРолиВнешнихПользователей КАК НовыеРолиВнешнихПользователей
		|		ПО (НовыеРолиВнешнихПользователей.ВнешнийПользователь = СтарыеРолиВнешнихПользователей.ВнешнийПользователь)
		|			И (НовыеРолиВнешнихПользователей.Роль = СтарыеРолиВнешнихПользователей.Роль)
		|ГДЕ
		|	НовыеРолиВнешнихПользователей.Роль ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НовыеРолиВнешнихПользователей.ВнешнийПользователь
		|ИЗ
		|	НовыеРолиВнешнихПользователей КАК НовыеРолиВнешнихПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеРолиВнешнихПользователей КАК СтарыеРолиВнешнихПользователей
		|		ПО НовыеРолиВнешнихПользователей.ВнешнийПользователь = СтарыеРолиВнешнихПользователей.ВнешнийПользователь
		|			И НовыеРолиВнешнихПользователей.Роль = СтарыеРолиВнешнихПользователей.Роль
		|ГДЕ
		|	СтарыеРолиВнешнихПользователей.Роль ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеНовыеРолиВнешнихПользователей.ГруппаВнешнихПользователей,
		|	ВсеНовыеРолиВнешнихПользователей.ВнешнийПользователь,
		|	ВсеНовыеРолиВнешнихПользователей.Роль
		|ИЗ
		|	ВсеНовыеРолиВнешнихПользователей КАК ВсеНовыеРолиВнешнихПользователей
		|ГДЕ
		|	НЕ ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА КАК ЗначениеИстина
		|				ИЗ
		|					ВсеРоли КАК ВсеРоли
		|				ГДЕ
		|					ВсеРоли.Имя = ВсеНовыеРолиВнешнихПользователей.Роль)";
		
		// Регистрация ошибок имен ролей в профилях групп доступа.
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru= 'При обновлении ролей внешнего пользователя
				          |""%1""
				          |роль ""%2""
				          |группы внешних пользователей ""%3""
				          |не найдена в метаданных.'"),
				СокрЛП(Выборка.ВнешнийПользователь.Наименование),
				Выборка.Роль,
				Строка(Выборка.ГруппаВнешнихПользователей));
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Пользователи.Роль не найдена в метаданных'",
				     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстСообщения,
				РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецЦикла;
		
		// Обновление ролей пользователей ИБ.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИзмененныеВнешниеПользователиИРоли.ВнешнийПользователь,
		|	ИзмененныеВнешниеПользователиИРоли.Роль
		|ИЗ
		|	(ВЫБРАТЬ
		|		НовыеРолиВнешнихПользователей.ВнешнийПользователь КАК ВнешнийПользователь,
		|		НовыеРолиВнешнихПользователей.Роль КАК Роль
		|	ИЗ
		|		НовыеРолиВнешнихПользователей КАК НовыеРолиВнешнихПользователей
		|	ГДЕ
		|		НовыеРолиВнешнихПользователей.ВнешнийПользователь В
		|				(ВЫБРАТЬ
		|					ИзмененныеВнешниеПользователи.ВнешнийПользователь
		|				ИЗ
		|					ИзмененныеВнешниеПользователи КАК ИзмененныеВнешниеПользователи)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВнешниеПользователи.Ссылка,
		|		""""
		|	ИЗ
		|		Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|	ГДЕ
		|		ВнешниеПользователи.Ссылка В
		|				(ВЫБРАТЬ
		|					ИзмененныеВнешниеПользователи.ВнешнийПользователь
		|				ИЗ
		|					ИзмененныеВнешниеПользователи КАК ИзмененныеВнешниеПользователи)) КАК ИзмененныеВнешниеПользователиИРоли
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИзмененныеВнешниеПользователиИРоли.ВнешнийПользователь,
		|	ИзмененныеВнешниеПользователиИРоли.Роль";
		Выборка = Запрос.Выполнить().Выбрать();
		
		ПользовательИБ = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Роль) Тогда
				ПользовательИБ.Роли.Добавить(Метаданные.Роли[Выборка.Роль]);
				Продолжить;
			КонецЕсли;
			Если ПользовательИБ <> Неопределено Тогда
				ПользовательИБ.Записать();
			КонецЕсли;
			
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				ИдентификаторыПользователейИБ[Выборка.ВнешнийПользователь]);
			
			ПользовательИБ.Роли.Очистить();
		КонецЦикла;
		Если ПользовательИБ <> Неопределено Тогда
			ПользовательИБ.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Проверяет, что объект информационной базы используется в качестве объекта авторизации
// какого-нибудь внешнего пользователя, кроме заданного внешнего пользователя (если задан).
//
Функция ОбъектАвторизацииИспользуется(Знач СсылкаНаОбъектАвторизации,
                                      Знач СсылкаНаТекущегоВнешнегоПользователя,
                                      НайденныйВнешнийПользователь = Неопределено,
                                      ЕстьПравоДобавленияВнешнегоПользователя = Ложь,
                                      ТекстОшибки = "") Экспорт
	
	ЕстьПравоДобавленияВнешнегоПользователя = ПравоДоступа(
		"Добавление", Метаданные.Справочники.ВнешниеПользователи);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВнешниеПользователи.Ссылка
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ОбъектАвторизации = &СсылкаНаОбъектАвторизации
	|	И ВнешниеПользователи.Ссылка <> &СсылкаНаТекущегоВнешнегоПользователя";
	Запрос.УстановитьПараметр("СсылкаНаТекущегоВнешнегоПользователя", СсылкаНаТекущегоВнешнегоПользователя);
	Запрос.УстановитьПараметр("СсылкаНаОбъектАвторизации", СсылкаНаОбъектАвторизации);
	
	НачатьТранзакцию();
	Попытка
		Таблица = Запрос.Выполнить().Выгрузить();
		Если Таблица.Количество() > 0 Тогда
			НайденныйВнешнийПользователь = Таблица[0].Ссылка;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Результат = Таблица.Количество() > 0;
	Если Результат Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Уже существует внешний пользователь, связанный с объектом ""%1"".'"),
			СсылкаНаОбъектАвторизации);
		КонецЕсли;
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с настройками пользователя информационной базы.

// Копирует настройки от пользователя источника пользователю приемнику. При значении
// параметра Переносить = Истина, настройки у пользователя источника удаляются.
//
// Параметры:
// ИмяПользователяИсточник - Строка - Имя пользователя ИБ от которого будет производиться копирование настроек.
//
// ИмяПользователяПриемник - Строка - Имя пользователя ИБ которому будут записаны настройки.
//
// Переносить              - Булево - Если Истина - настройки переносятся от одного пользователя другому,
//                           если Ложь - копируются новому.
//
Процедура СкопироватьНастройкиПользователя(ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить = Ложь) Экспорт
	
	// Перенос пользовательских настроек отчетов.
	СкопироватьНастройки(ХранилищеПользовательскихНастроекОтчетов, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
	// Перенос настроек внешнего вида.
	СкопироватьНастройки(ХранилищеСистемныхНастроек,ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
	// Перенос произвольных настроек пользователей.
	СкопироватьНастройки(ХранилищеОбщихНастроек, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
	// Перенос настроек данных форм.
	СкопироватьНастройки(ХранилищеНастроекДанныхФорм, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
	// Перенос настроек быстрого доступа дополнительных отчетов и обработок.
	Если Не Переносить Тогда
		СкопироватьПрочиеПользовательскиеНастройки(ИмяПользователяИсточник, ИмяПользователяПриемник);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции перемещения пользователей между группами.

// Перемещает пользователя из одной группы в другую.
//
// Параметры:
//  МассивПользователей - Массив - пользователи, которых нужно перенести в новую группу.
//  ГруппаИсточник      - СправочникСсылка.ГруппыПользователей - группа, из которой происходит
//                        перенос пользователей.
//  ГруппаПриемник      - СправочникСсылка.ГруппыПользователей - группа, в которую переносятся
//                        пользователи.
//  Перемещение         - Булево - если Истина, то пользователь удаляется из старой группы.
//
// ВозвращаемоеЗначение:
//  Строка - Сообщение о результате переноса.
//
Функция ПеремещениеПользователяВНовуюГруппу(МассивПользователей, ГруппаИсточник,
												ГруппаПриемник, Перемещение) Экспорт
	
	Если ГруппаПриемник = Неопределено
		Или ГруппаПриемник = ГруппаИсточник Тогда
		Возврат Неопределено;
	КонецЕсли;
	МассивПеремещенныхПользователей = Новый Массив;
	МассивНеПеремещенныхПользователей = Новый Массив;
	
	Для Каждого ПользовательСсылка Из МассивПользователей Цикл
		
		Если ТипЗнч(ПользовательСсылка) <> Тип("СправочникСсылка.Пользователи")
			И ТипЗнч(ПользовательСсылка) <> Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ВозможноПеремещениеПользователя(ГруппаПриемник, ПользовательСсылка) Тогда
			МассивНеПеремещенныхПользователей.Добавить(ПользовательСсылка);
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ПользовательСсылка) = Тип("СправочникСсылка.Пользователи") Тогда
			ИмяКолонкиСостава = "Пользователь";
		Иначе
			ИмяКолонкиСостава = "ВнешнийПользователь";
		КонецЕсли;
		
		// Если переносимый пользователь не входит в новую группу, то переносим.
		Если ГруппаПриемник = Справочники.ГруппыПользователей.ВсеПользователи
			Или ГруппаПриемник = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
			
			Если Перемещение Тогда
				УдалитьПользователяИзГруппы(ГруппаИсточник, ПользовательСсылка, ИмяКолонкиСостава);
			КонецЕсли;
			МассивПеремещенныхПользователей.Добавить(ПользовательСсылка);
			
		ИначеЕсли ГруппаПриемник.Состав.Найти(ПользовательСсылка, ИмяКолонкиСостава) = Неопределено Тогда
			
			ДобавитьПользователяВГруппу(ГруппаПриемник, ПользовательСсылка, ИмяКолонкиСостава);
			
			// Удаление пользователя из старой группы.
			Если Перемещение Тогда
				УдалитьПользователяИзГруппы(ГруппаИсточник, ПользовательСсылка, ИмяКолонкиСостава);
			КонецЕсли;
			
			МассивПеремещенныхПользователей.Добавить(ПользовательСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
	СообщениеПользователю = ФормированиеСообщенияПользователю(
		МассивПеремещенныхПользователей, ГруппаПриемник, Перемещение, МассивНеПеремещенныхПользователей, ГруппаИсточник);
	
	Если МассивПеремещенныхПользователей.Количество() = 0 И МассивНеПеремещенныхПользователей.Количество() = 0 Тогда
		Если МассивПользователей.Количество() = 1 Тогда
			ТекстСообщения = НСтр("ru = 'Пользователь ""%1"" уже включен в группу ""%2"".'");
			ИмяПеремещаемогоПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МассивПользователей[0], "Наименование");
		Иначе
			ТекстСообщения = НСтр("ru = 'Все выбранные пользователи уже включены в группу ""%2"".'");
			ИмяПеремещаемогоПользователя = "";
		КонецЕсли;
		НаименованиеГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаПриемник, "Наименование");
		СообщениеПользователю.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
			ИмяПеремещаемогоПользователя, НаименованиеГруппы);
		СообщениеПользователю.ЕстьОшибки = Истина;
		Возврат СообщениеПользователю;
	КонецЕсли;
	
	Возврат СообщениеПользователю;
	
КонецФункции

// Проверяет возможность включения внешнего пользователя в группу.
//
// Параметры:
//  ГруппыПриемник     - СправочникСсылка.ГруппыПользователей, группа, в которую
//                       добавляется пользователь.
//  ПользовательСсылка - СправочникСсылка.Пользователь - пользователь, которого необходимо
//                       добавить в группу.
//
// Возвращаемое значение:
//  Булево             - Ложь, если добавление пользователя в группу невозможно.
//
Функция ВозможноПеремещениеПользователя(ГруппаПриемник, ПользовательСсылка) Экспорт
	
	Если ТипЗнч(ПользовательСсылка) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		
		СвойстваГруппыПриемника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ГруппаПриемник, "Назначение, ВсеОбъектыАвторизации");
		
		Если СвойстваГруппыПриемника.ВсеОбъектыАвторизации Тогда
			Возврат Ложь;
		КонецЕсли;
		
		НазначениеГруппыПриемника = СвойстваГруппыПриемника.Назначение.Выгрузить();
		
		ТипВнешнегоПользователя = ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПользовательСсылка, "ОбъектАвторизации"));
		ОписаниеТипаСсылки = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипВнешнегоПользователя));
		Значение = ОписаниеТипаСсылки.ПривестиЗначение(Неопределено);
		
		Отбор = Новый Структура("ТипПользователей", Значение);
		Если НазначениеГруппыПриемника.НайтиСтроки(Отбор).Количество() <> 1 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Добавляет пользователя в группу.
//
// Параметры:
//  ГруппаПриемник     - СправочникСсылка.ГруппыПользователей - группа, в которую переносится
//                       пользователь.
//  ПользовательСсылка - СправочникСсылка.Пользователь - пользователь, которого необходимо
//                       добавить в группу.
//  ТипПользователя    - Строка - ВнешнийПользователь или Пользователь.
//
Процедура ДобавитьПользователяВГруппу(ГруппаПриемник, ПользовательСсылка, ТипПользователя) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ГруппаПриемникОбъект = ГруппаПриемник.ПолучитьОбъект();
		СтрокаСостава = ГруппаПриемникОбъект.Состав.Добавить();
		Если ТипПользователя = "ВнешнийПользователь" Тогда
			СтрокаСостава.ВнешнийПользователь = ПользовательСсылка;
		Иначе
			СтрокаСостава.Пользователь = ПользовательСсылка;
		КонецЕсли;
		
		ГруппаПриемникОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Удаляет пользователя из группы.
//
// Параметры:
//  ГруппаПриемник     - СправочникСсылка.ГруппыПользователей - группа, из которой удаляется
//                       пользователь.
//  ПользовательСсылка - СправочникСсылка.Пользователь - пользователь, которого необходимо
//                       добавить в группу.
//  ТипПользователя    - Строка - ВнешнийПользователь или Пользователь.
//
Процедура УдалитьПользователяИзГруппы(ГруппаВладелец, ПользовательСсылка, ТипПользователя) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ГруппаВладелецОбъект = ГруппаВладелец.ПолучитьОбъект();
		Если ГруппаВладелецОбъект.Состав.Количество() <> 0 Тогда
			ГруппаВладелецОбъект.Состав.Удалить(ГруппаВладелецОбъект.Состав.Найти(ПользовательСсылка, ТипПользователя));
			ГруппаВладелецОбъект.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Формирует сообщение о результатах переноса пользователя.
//
// Параметры:
//  МассивПользователей - Массив - пользователи, которых нужно перенести в новую группу.
//  ГруппаПриемник      - СправочникСсылка.ГруппыПользователей - группа, в которую переносятся
//                        пользователи.
//  Перемещение         - Булево - если Истина, то пользователь удаляется из старой группы.
//  МассивНеПеремещенныхПользователей - Массив - пользователи, которых не удалось переместить в группу.
//  ГруппаИсточник      - СправочникСсылка.ГруппыПользователей - группа, из которой происходит
//                        перенос пользователей.
//
// ВозвращаемоеЗначение:
//  Строка - Сообщение пользователю.
//
Функция ФормированиеСообщенияПользователю(МассивПользователей, ГруппаПриемник,
	                                      Перемещение, МассивНеПеремещенныхПользователей, ГруппаИсточник = Неопределено) Экспорт
	
	КоличествоПользователей = МассивПользователей.Количество();
	НаименованиеГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаПриемник, "Наименование");
	СообщениеПользователю = Неопределено;
	КоличествоНеПеремещенныхПользователей = МассивНеПеремещенныхПользователей.Количество();
	
	УведомлениеПользователя = Новый Структура;
	УведомлениеПользователя.Вставить("Сообщение");
	УведомлениеПользователя.Вставить("ЕстьОшибки");
	УведомлениеПользователя.Вставить("Пользователи");
	
	Если КоличествоНеПеремещенныхПользователей > 0 Тогда
		
		СвойстваГруппыПриемника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ГруппаПриемник, "Назначение, Наименование");
		
		НаименованиеГруппы = СвойстваГруппыПриемника.Наименование;
		НазначениеГруппыВнешнихПользователей = СвойстваГруппыПриемника.Назначение.Выгрузить();
		
		МассивПредставлений = Новый Массив;
		Для Каждого СтрокаНазначения Из НазначениеГруппыВнешнихПользователей Цикл
			
			МассивПредставлений.Добавить(НРег(Метаданные.НайтиПоТипу(
				ТипЗнч(СтрокаНазначения.ТипПользователей)).Синоним));
			
		КонецЦикла;
		
		ПредставлениеТипаОбъектаАвторизации = СтрСоединить(МассивПредставлений, ", ");
		
		Если КоличествоНеПеремещенныхПользователей = 1 Тогда
			
			СвойстваНеПеремещенногоПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				МассивНеПеремещенныхПользователей[0], "Наименование, ОбъектАвторизации");
			
			Предмет = СвойстваНеПеремещенногоПользователя.Наименование;
			
			ТипВнешнегоПользователя = ТипЗнч(СвойстваНеПеремещенногоПользователя.ОбъектАвторизации);
			ОписаниеТипаСсылки = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипВнешнегоПользователя));
			Значение = ОписаниеТипаСсылки.ПривестиЗначение(Неопределено);
		
			Отбор = Новый Структура("ТипПользователей", Значение);
			ТипПользователяСовпадаетСГруппой = (НазначениеГруппыВнешнихПользователей.НайтиСтроки(Отбор).Количество() = 1);
			
			УведомлениеПользователя.Пользователи = Неопределено;
			
			Если ТипПользователяСовпадаетСГруппой Тогда
				СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Пользователь ""%1"" не может быть включен в группу ""%2"",
					           |т.к. у группы стоит признак ""Все пользователи заданного типа"".'"),
					Предмет, НаименованиеГруппы) + Символы.ПС;
			Иначе
				СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Пользователь ""%1"" не может быть включен в группу ""%2"",
					           |т.к. в состав ее участников входят только %3.'"),
					Предмет, НаименованиеГруппы, ПредставлениеТипаОбъектаАвторизации) + Символы.ПС;
			КонецЕсли;
		Иначе
			УведомлениеПользователя.Пользователи = СтрСоединить(МассивНеПеремещенныхПользователей, Символы.ПС);
			
			СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не все пользователи могут быть включены в группу ""%1"",
				           |т.к. в состав ее участников входят только %2
				           |или у группы стоит признак ""Все пользователи заданного типа"".'"),
				НаименованиеГруппы,
				ПредставлениеТипаОбъектаАвторизации);
		КонецЕсли;
		
		УведомлениеПользователя.Сообщение = СообщениеПользователю;
		УведомлениеПользователя.ЕстьОшибки = Истина;
		
		Возврат УведомлениеПользователя;
	КонецЕсли;
	
	Если КоличествоПользователей = 1 Тогда
		
		СтрокаОбъект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МассивПользователей[0], "Наименование");
		
		Если ГруппаПриемник = Справочники.ГруппыПользователей.ВсеПользователи
		 Или ГруппаПриемник = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
			
			СтрокаДействие = НСтр("ru = 'исключен из группы'");
			НаименованиеГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаИсточник, "Наименование");
			
		ИначеЕсли Перемещение Тогда
			СтрокаДействие = НСтр("ru = 'перемещен в группу'");
		Иначе
			СтрокаДействие = НСтр("ru = 'включен в группу'");
		КонецЕсли;
		
		СообщениеПользователю = НСтр("ru = '""%1"" %2 ""%3""'");
		
	ИначеЕсли КоличествоПользователей > 1 Тогда
		
		СтрокаОбъект = Формат(КоличествоПользователей, "ЧДЦ=0") + " "
			+ ПользователиСлужебныйКлиентСервер.ПредметЦелогоЧисла(КоличествоПользователей,
				"Л = ru_RU", НСтр("ru = 'пользователь,пользователя,пользователей,,,,,,0'"));
		
		Если ГруппаПриемник = Справочники.ГруппыПользователей.ВсеПользователи Тогда
			СтрокаДействие = НСтр("ru = 'исключены из группы'");
			НаименованиеГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаИсточник, "Наименование");
			
		ИначеЕсли Перемещение Тогда
			СтрокаДействие = НСтр("ru = 'перемещены в группу'");
		Иначе
			СтрокаДействие = НСтр("ru = 'включены в группу'");
		КонецЕсли;
		СообщениеПользователю = НСтр("ru = '%1 %2 ""%3""'");
	КонецЕсли;
	
	Если СообщениеПользователю <> Неопределено Тогда
		СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеПользователю,
			СтрокаОбъект, СтрокаДействие, НаименованиеГруппы);
	КонецЕсли;
	
	УведомлениеПользователя.Сообщение = СообщениеПользователю;
	УведомлениеПользователя.ЕстьОшибки = Ложь;
	
	Возврат УведомлениеПользователя;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и функции.

// Возвращает несовпадающие значения в колонке таблиц значений.
//
// Параметры:
//  ИмяКолонки - Строка - имя сравниваемой колонки.
//  Таблица1   - ТаблицаЗначений.
//  Таблица2   - ТаблицаЗначений.
//
// Возвращаемое значение:
//  Массив значений, которые есть только в колонке только одной из таблиц.
// 
Функция РазличияЗначенийКолонки(ИмяКолонки, Таблица1, Таблица2) Экспорт
	
	Если ТипЗнч(Таблица1) <> Тип("ТаблицаЗначений")
	   И ТипЗнч(Таблица2) <> Тип("ТаблицаЗначений") Тогда
		
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ТипЗнч(Таблица1) <> Тип("ТаблицаЗначений") Тогда
		Возврат Таблица2.ВыгрузитьКолонку(ИмяКолонки);
	КонецЕсли;
	
	Если ТипЗнч(Таблица2) <> Тип("ТаблицаЗначений") Тогда
		Возврат Таблица1.ВыгрузитьКолонку(ИмяКолонки);
	КонецЕсли;
	
	Таблица11 = Таблица1.Скопировать(, ИмяКолонки);
	Таблица11.Свернуть(ИмяКолонки);
	
	Таблица22 = Таблица2.Скопировать(, ИмяКолонки);
	Таблица22.Свернуть(ИмяКолонки);
	
	Для каждого Строка Из Таблица22 Цикл
		НоваяСтрока = Таблица11.Добавить();
		НоваяСтрока[ИмяКолонки] = Строка[ИмяКолонки];
	КонецЦикла;
	
	Таблица11.Колонки.Добавить("Признак");
	Таблица11.ЗаполнитьЗначения(1, "Признак");
	
	Таблица11.Свернуть(ИмяКолонки, "Признак");
	
	Отбор = Новый Структура("Признак", 1);
	Таблица = Таблица11.Скопировать(Таблица11.НайтиСтроки(Отбор));
	
	Возврат Таблица.ВыгрузитьКолонку(ИмяКолонки);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// Обновляет вспомогательные данные, которые зависят только
// от конфигурации.
// Записывает изменения этих данных по версиям конфигурации
// (если изменения есть), чтобы использовать эти изменения
// при обновлении остальных вспомогательных данных, например,
// в обработчике ОбновитьВспомогательныеДанныеПриОбновленииИБ.
//
Процедура ОбновитьПараметрыРаботыПользователей(ЕстьИзменения = Неопределено, ТолькоПроверка = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТолькоПроверка ИЛИ МонопольныйРежим() Тогда
		СнятьМонопольныйРежим = Ложь;
	Иначе
		СнятьМонопольныйРежим = Истина;
		УстановитьМонопольныйРежим(Истина);
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.ПараметрыРаботыПользователей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Константы.ПараметрыРаботыПользователей.СоздатьМенеджерЗначения().ОбновитьОбщиеПараметры(ЕстьИзменения, ТолькоПроверка);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Если СнятьМонопольныйРежим Тогда
			УстановитьМонопольныйРежим(Ложь);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Если СнятьМонопольныйРежим Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при обновлении конфигурации на версию 1.0.5.2.
// Выполняет попытку сопоставления / заполнения реквизита "ИдентификаторПользователяИБ"
// для каждого элемента справочника Пользователи.
//
Процедура ЗаполнитьИдентификаторыПользователей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пользователи.НайтиНеоднозначныхПользователейИБ(Неопределено);
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПустойИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") );
	
	Запрос.УстановитьПараметр("НеуказанныйПользователь",
		СвойстваНеуказанногоПользователя().Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка <> &НеуказанныйПользователь
	|	И Пользователи.ИдентификаторПользователяИБ = &ПустойИдентификатор";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатыЗапроса[1].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЗанятыеИдентификаторы = РезультатыЗапроса[0].Выгрузить();
	ЗанятыеИдентификаторы.Индексы.Добавить("ИдентификаторПользователяИБ");
	
	ДлинаПолногоИмени = Метаданные.Справочники.Пользователи.ДлинаНаименования;
	СвободныеПользователи = РезультатыЗапроса[1].Выгрузить();
	СвободныеПользователи.Индексы.Добавить("Наименование");
	
	Для каждого Строка Из СвободныеПользователи Цикл
		Строка.Наименование = ВРег(СокрЛП(Строка.Наименование));
	КонецЦикла;
	
	Для каждого ПользовательИБ Из ПользователиИБ Цикл
		
		Если ЗанятыеИдентификаторы.Найти(
		      ПользовательИБ.УникальныйИдентификатор,
		      "ИдентификаторПользователяИБ") <> Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		
		ПолноеИмяПользователя = ВРег(СокрЛП(Лев(ПользовательИБ.ПолноеИмя, ДлинаПолногоИмени)));
		
		ОписаниеПользователя = СвободныеПользователи.Найти(ПолноеИмяПользователя, "Наименование");
		Если ОписаниеПользователя <> Неопределено Тогда
			ОбъектПользователь = ОписаниеПользователя.Ссылка.ПолучитьОбъект();
			ОбъектПользователь.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектПользователь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Преобразует реквизит УдалитьРоль в реквизит Роль роли в табличной части Роли
// справочника Группы внешних пользователей.
//
Процедура ПреобразоватьИменаРолейВИдентификаторы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Роли.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГруппыВнешнихПользователей.Роли КАК Роли
	|ГДЕ
	|	НЕ(Роли.Роль <> ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка)
	|				И Роли.УдалитьРоль = """")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Индекс = Объект.Роли.Количество()-1;
		Пока Индекс >= 0 Цикл
			Строка = Объект.Роли[Индекс];
			Если ЗначениеЗаполнено(Строка.Роль) Тогда
				Строка.УдалитьРоль = "";
			ИначеЕсли ЗначениеЗаполнено(Строка.УдалитьРоль) Тогда
				МетаданныеРоли = Метаданные.Роли.Найти(Строка.УдалитьРоль);
				Если МетаданныеРоли <> Неопределено Тогда
					Строка.УдалитьРоль = "";
					Строка.Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
						МетаданныеРоли);
				Иначе
					Объект.Роли.Удалить(Индекс);
				КонецЕсли;
			Иначе
				Объект.Роли.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс-1;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 2.1.3.16.
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииПользователей() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailПользователя";
	ПараметрыВида.Подсказка = НСтр("ru='Адрес электронной почты пользователя'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 1;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонПользователя";
	ПараметрыВида.Подсказка = НСтр("ru='Контактный телефон пользователя'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 2.1.4.19.
Процедура ПеренестиГруппыВнешнихПользователейВКорень() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыВнешнихПользователей.Ссылка
	|ИЗ
	|	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
	|ГДЕ
	|	ГруппыВнешнихПользователей.Родитель.ВсеОбъектыАвторизации = ИСТИНА";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаГруппаПользователей Из Результат Цикл
		ГруппаПользователей = СтрокаГруппаПользователей.Ссылка.ПолучитьОбъект();
		ГруппаПользователей.Родитель = Справочники.ГруппыВнешнихПользователей.ПустаяСсылка();
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ГруппаПользователей);
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при переходе на новую версию конфигурации 2.2.2.3.
Процедура ЗаполнитьСвойстваАутентификацииПользователей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойИдентификаторПользователяИБ",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.ИдентификаторПользователяИБ,
	|	Пользователи.СвойстваПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ <> &ПустойИдентификаторПользователяИБ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка,
	|	ВнешниеПользователи.ИдентификаторПользователяИБ,
	|	ВнешниеПользователи.СвойстваПользователяИБ
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ <> &ПустойИдентификаторПользователяИБ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			Выборка.ИдентификаторПользователяИБ);
		
		Если ПользовательИБ = Неопределено
		 Или Не Пользователи.ВходВПрограммуРазрешен(ПользовательИБ) Тогда
			
			Продолжить;
		КонецЕсли;
		
		ПользовательОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ХранимыеСвойства = ХранимыеСвойстваПользователяИБ(ПользовательОбъект);
		ХранимыеСвойства.ВходВПрограммуРазрешен    = Истина;
		ХранимыеСвойства.АутентификацияСтандартная = ПользовательИБ.АутентификацияСтандартная;
		ХранимыеСвойства.АутентификацияOpenID      = ПользовательИБ.АутентификацияOpenID;
		ХранимыеСвойства.АутентификацияОС          = ПользовательИБ.АутентификацияОС;
		
		Новые = Новый ХранилищеЗначения(ХранимыеСвойства);
		Если Не ОбщегоНазначения.ДанныеСовпадают(ПользовательОбъект.СвойстваПользователяИБ, Новые) Тогда
			ПользовательОбъект.СвойстваПользователяИБ = Новые;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПользовательОбъект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при переходе на новую версию конфигурации 2.2.2.42.
Процедура ДобавитьПолноправнымПользователямРольАдминистраторСистемы() Экспорт
	
	Если Не ПравоДоступа("Администрирование", Метаданные, Метаданные.Роли.ПолныеПрава) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ВсеПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для каждого ПользовательИБ Из ВсеПользователиИБ Цикл
		Если Не ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			Продолжить;
		КонецЕсли;
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.АдминистраторСистемы) Тогда
			Продолжить;
		КонецЕсли;
		
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.АдминистраторСистемы);
		ПользовательИБ.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при переходе на новую версию конфигурации 2.2.3.16.
Процедура УдалитьКэшНеразделенныеДанныеДоступныеДляИзменения() Экспорт
	
	СтандартныеПодсистемыСервер.УдалитьПараметрРаботыПрограммы(
		"ПараметрыРаботыПользователей", "НеразделенныеДанныеДоступныеДляИзменения");
	
КонецПроцедуры

// Вызывается при переходе на новую версию конфигурации 2.3.1.16.
Процедура ОчиститьРеквизитПоказыватьВСпискеВыбораУВсехПользователейИБ() Экспорт
	
	МенеджерЗначения = Константы.ИспользоватьВнешнихПользователей.СоздатьМенеджерЗначения();
	МенеджерЗначения.Прочитать();
	
	Если МенеджерЗначения.Значение = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗначения.ОчиститьРеквизитПоказыватьВСпискеВыбораУВсехПользователейИБ();
	
КонецПроцедуры

// Вызывается при переходе на новую версию конфигурации 2.3.1.37.
Процедура ЗаполнитьНазначениеГруппВнешнихПользователей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыВнешнихПользователей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
	|ГДЕ
	|	НЕ(НЕ ГруппыВнешнихПользователей.Предопределенный
	|				И ГруппыВнешнихПользователей.Ссылка В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ГруппыВнешнихПользователей.Ссылка
	|					ИЗ
	|						Справочник.ГруппыВнешнихПользователей.Назначение КАК ГруппыВнешнихПользователейНазначение))";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ГруппаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ГруппаОбъект.Предопределенный Или ГруппаОбъект.УдалитьТипОбъектовАвторизации = Неопределено Тогда // любые пользователи
			
			Для Каждого Тип Из Метаданные.ОпределяемыеТипы.ВнешнийПользователь.Тип.Типы() Цикл
				
				ОписаниеТипаСсылки = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип));
				Значение = ОписаниеТипаСсылки.ПривестиЗначение(Неопределено);
				
				НоваяСтрока = ГруппаОбъект.Назначение.Добавить();
				НоваяСтрока.ТипПользователей = Значение;
				
			КонецЦикла;
			
		Иначе
			
			НоваяСтрока = ГруппаОбъект.Назначение.Добавить();
			НоваяСтрока.ТипПользователей = ГруппаОбъект.УдалитьТипОбъектовАвторизации;
			
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ГруппаОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при переходе на новую версию конфигурации 2.3.2.4.
Процедура УдалитьКэшНедоступныеРолиПоТипамПользователей() Экспорт
	
	СтандартныеПодсистемыСервер.УдалитьПараметрРаботыПрограммы(
		"ПараметрыРаботыПользователей", "НедоступныеРолиПоТипамПользователей");
	
КонецПроцедуры

// Вызывается при переходе на новую версию конфигурации 2.3.2.30.
Процедура ПеренестиНастройкиДлиныИСложностиПаролейКонфигуратора() Экспорт
	
	ВсеНастройки = ПользователиСлужебныйПовтИсп.Настройки();
	
	Если Не ВсеНастройки.ОбщиеНастройкиВхода
	 Или ПолучитьМинимальнуюДлинуПаролейПользователей() = 0
	   И Не ПолучитьПроверкуСложностиПаролейПользователей()
	 Или ВсеНастройки.Пользователи.МинимальнаяДлинаПароля <> 0
	 Или ВсеНастройки.Пользователи.ПарольДолженОтвечатьТребованиямСложности <> 0
	 Или ВсеНастройки.ВнешниеПользователи.МинимальнаяДлинаПароля <> 0
	 Или ВсеНастройки.ВнешниеПользователи.ПарольДолженОтвечатьТребованиямСложности <> 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки  = Блокировка.Добавить("Константа.НастройкиВходаПользователей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НастройкиВхода = НастройкиВхода();
		
		СложныйПароль          = ПолучитьПроверкуСложностиПаролейПользователей();
		МинимальнаяДлинаПароля = ПолучитьМинимальнуюДлинуПаролейПользователей();
		
		НастройкиВхода.Пользователи.МинимальнаяДлинаПароля = МинимальнаяДлинаПароля;
		НастройкиВхода.Пользователи.ПарольДолженОтвечатьТребованиямСложности = СложныйПароль;
		Если Константы.ИспользоватьВнешнихПользователей.Получить() Тогда
			НастройкиВхода.ВнешниеПользователи.МинимальнаяДлинаПароля = МинимальнаяДлинаПароля;
			НастройкиВхода.ВнешниеПользователи.ПарольДолженОтвечатьТребованиямСложности = СложныйПароль;
		КонецЕсли;
		
		Константы.НастройкиВходаПользователей.Установить(Новый ХранилищеЗначения(НастройкиВхода));
		
		Если ПолучитьМинимальнуюДлинуПаролейПользователей() <> 0 Тогда
			УстановитьМинимальнуюДлинуПаролейПользователей(0);
		КонецЕсли;
		Если ПолучитьПроверкуСложностиПаролейПользователей() Тогда
			УстановитьПроверкуСложностиПаролейПользователей(Ложь);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Вызывается при переходе на новую версию конфигурации 2.3.2.72.
Процедура ДобавитьАдминистраторамПравоОткрытияВнешнихОтчетовИОбработок() Экспорт
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ()
		И Не ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		Возврат; // В подчиненных узлах изменения в профилях загружаются из главного узла.
	КонецЕсли;
	
	// Чтение общего решения, принятого администратором в форме "Предупреждение безопасности".
	ПараметрыАдминистрирования = СтандартныеПодсистемыСервер.ПараметрыАдминистрирования();
	РешениеПринято = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыАдминистрирования,
		"ПринятоРешениеПоОткрытиюВнешнихОтчетовИОбработок");
	Если РешениеПринято <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОткрытиеРазрешено = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыАдминистрирования,
		"РазрешеноОткрытиеВнешнихОтчетовИОбработок");
	
	// Удаление старого ключа и регистрация нового ключа.
	ПараметрыАдминистрирования.Удалить("РазрешеноОткрытиеВнешнихОтчетовИОбработок");
	Если ОткрытиеРазрешено <> Неопределено Тогда
		ПараметрыАдминистрирования.Вставить("ПринятоРешениеПоОткрытиюВнешнихОтчетовИОбработок", Истина);
	КонецЕсли;
	СтандартныеПодсистемыСервер.УстановитьПараметрыАдминистрирования(ПараметрыАдминистрирования);
	
	// Если решение не принято, то право интерактивного открытия включается для всех администраторов.
	Если ОткрытиеРазрешено = Неопределено Тогда
		ОткрытиеРазрешено = Истина;
	КонецЕсли;
	
	// Если открытие разрешено, то включаем администраторам соответствующую роль.
	Если ОткрытиеРазрешено Тогда
		ДобавляемаяРоль = Метаданные.Роли.ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок;
		РольАдминистратора = Метаданные.Роли.АдминистраторСистемы;
		ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
		Для Каждого ПользовательИБ Из ПользователиИБ Цикл
			Если ПользовательИБ.Роли.Содержит(РольАдминистратора)
				И Не ПользовательИБ.Роли.Содержит(ДобавляемаяРоль) Тогда
				ПользовательИБ.Роли.Добавить(ДобавляемаяРоль);
				ПользовательИБ.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Создание профиля и включение пользователей с правом в группу доступа.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
		МодульУправлениеДоступомСлужебный.УстановитьПравоОткрытияВнешнихОтчетовИОбработок(ОткрытиеРазрешено);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие пользовательские настройки.

// См. одноименную процедуру в общем модуле ПользователиПереопределяемый.
Процедура ПриПолученииПрочихНастроек(СведенияОПользователе, Настройки) Экспорт
	
	ИнтеграцияСтандартныхПодсистем.ПриПолученииПрочихНастроек(СведенияОПользователе, Настройки);
	ПользователиПереопределяемый.ПриПолученииПрочихНастроек(СведенияОПользователе, Настройки);
	
КонецПроцедуры

// См. одноименную процедуру в общем модуле ПользователиПереопределяемый.
Процедура ПриСохраненииПрочихНастроек(СведенияОПользователе, Настройки) Экспорт
	
	ИнтеграцияСтандартныхПодсистем.ПриСохраненииПрочихНастроек(СведенияОПользователе, Настройки);
	ПользователиПереопределяемый.ПриСохраненииПрочихНастроек(СведенияОПользователе, Настройки);
	
КонецПроцедуры

// См. одноименную процедуру в общем модуле ПользователиПереопределяемый.
Процедура ПриУдаленииПрочихНастроек(СведенияОПользователе, Настройки) Экспорт
	
	ИнтеграцияСтандартныхПодсистем.ПриУдаленииПрочихНастроек(СведенияОПользователе, Настройки);
	ПользователиПереопределяемый.ПриУдаленииПрочихНастроек(СведенияОПользователе, Настройки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// При первом запуске подчиненного узла очищает идентификаторы
// пользователей ИБ, скопированные при создании начального образа.
//
Процедура ОчиститьИдентификаторыНесуществующихПользователейИБ()
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ПустойУникальныйИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", ПустойУникальныйИдентификатор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка,
	|	ВнешниеПользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			Выборка.ИдентификаторПользователяИБ);
		
		Если ПользовательИБ <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТекущийОбъект.ИдентификаторПользователяИБ = ПустойУникальныйИдентификатор;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет представление внешнего пользователя при изменении представления его объекта авторизации.
Процедура ОбновитьПредставлениеВнешнегоПользователя(СсылкаНаОбъектАвторизации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВнешниеПользователи.Ссылка
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ОбъектАвторизации = &СсылкаНаОбъектАвторизации
	|	И ВнешниеПользователи.Наименование <> &НовоеПредставлениеОбъектаАвторизации");
	Запрос.УстановитьПараметр("СсылкаНаОбъектАвторизации", СсылкаНаОбъектАвторизации);
	Запрос.УстановитьПараметр("НовоеПредставлениеОбъектаАвторизации", Строка(СсылкаНаОбъектАвторизации));
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ВнешнийПользовательОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ВнешнийПользовательОбъект.Наименование = Строка(СсылкаНаОбъектАвторизации);
			ВнешнийПользовательОбъект.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ЗаголовокСообщенияАвторизацияНеВыполненаСПереводомСтроки()
	
	Возврат НСтр("ru = 'Авторизация не выполнена. Работа системы будет завершена.'")
		+ Символы.ПС + Символы.ПС;
	
КонецФункции

Функция ТекстСообщенияПользовательНеНайденВСправочнике(ИмяПользователя)
	
	Если ВнешниеПользователи.ИспользоватьВнешнихПользователей() Тогда
		ШаблонСообщенияОбОшибке =
			НСтр("ru = 'Пользователь ""%1"" не найден в справочниках
			           |""Пользователи"" и ""Внешние пользователи"".
			           |
			           |Обратитесь к администратору.'");
	Иначе
		ШаблонСообщенияОбОшибке
			= НСтр("ru = 'Пользователь ""%1"" не найден в справочнике ""Пользователи"".
			             |
			             |Обратитесь к администратору.'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияОбОшибке, ИмяПользователя);
	
КонецФункции

Функция СсылкаПользователяПоПолномуНаименованию(ПолноеИмя)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Наименование = &ПолноеИмя";
	
	Запрос.УстановитьПараметр("ПолноеИмя", ПолноеИмя);
	
	Результат = Неопределено;
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если НЕ Пользователи.ПользовательИБЗанят(Выборка.ИдентификаторПользователяИБ) Тогда
				Результат = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатУстановкиПараметровСеанса(РегистрироватьВЖурнале)
	
	Попытка
		Пользователи.АвторизованныйПользователь();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Возврат КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(ИнформацияОбОшибке,
			, РегистрироватьВЖурнале);
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

Функция КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(ИнформацияОбОшибке, ШаблонОшибки = "", РегистрироватьВЖурнале = Истина)
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		КраткоеПредставление   = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставление = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		КраткоеПредставление   = ИнформацияОбОшибке;
		ПодробноеПредставление = ИнформацияОбОшибке;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонОшибки) Тогда
		КраткоеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ПодробноеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецЕсли;
	
	КраткоеПредставление   = ЗаголовокСообщенияАвторизацияНеВыполненаСПереводомСтроки() + КраткоеПредставление;
	ПодробноеПредставление = ЗаголовокСообщенияАвторизацияНеВыполненаСПереводомСтроки() + ПодробноеПредставление;
	
	Если РегистрироватьВЖурнале Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Пользователи.Ошибка входа в программу'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставление);
	КонецЕсли;
	
	Возврат КраткоеПредставление;
	
КонецФункции

// Используется в процедурах ОбновитьСоставыГруппПользователей,
// ОбновитьСоставыГруппВнешнихПользователей.
//
// Параметры:
//  Таблица      - полное имя объекта метаданных.
//
// Возвращаемое значение:
//  ТаблицаЗначений (Ссылка, Родитель).
//
Функция СсылкиВИерархииРодителей(Таблица)
	
	// Подготовка состава групп родителей.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СсылкиРодителей.Ссылка КАК Ссылка,
	|	СсылкиРодителей.Родитель КАК Родитель
	|ИЗ
	|	" + Таблица + " КАК СсылкиРодителей");
	СсылкиРодителей = Запрос.Выполнить().Выгрузить();
	СсылкиРодителей.Индексы.Добавить("Родитель");
	СсылкиВИерархииРодителей = СсылкиРодителей.Скопировать(Новый Массив);
	
	Для каждого ОписаниеСсылки Из СсылкиРодителей Цикл
		НоваяСтрока = СсылкиВИерархииРодителей.Добавить();
		НоваяСтрока.Родитель = ОписаниеСсылки.Ссылка;
		НоваяСтрока.Ссылка   = ОписаниеСсылки.Ссылка;
		
		ЗаполнитьСсылкиВИерархииРодителя(ОписаниеСсылки.Ссылка, ОписаниеСсылки.Ссылка, СсылкиРодителей, СсылкиВИерархииРодителей);
	КонецЦикла;
	
	Возврат СсылкиВИерархииРодителей;
	
КонецФункции

Процедура ЗаполнитьСсылкиВИерархииРодителя(Знач Родитель, Знач ТекущийРодитель, Знач СсылкиРодителей, Знач СсылкиВИерархииРодителей)
	
	СсылкиРодителя = СсылкиРодителей.НайтиСтроки(Новый Структура("Родитель", ТекущийРодитель));
	
	Для каждого ОписаниеСсылки Из СсылкиРодителя Цикл
		НоваяСтрока = СсылкиВИерархииРодителей.Добавить();
		НоваяСтрока.Родитель = Родитель;
		НоваяСтрока.Ссылка   = ОписаниеСсылки.Ссылка;
		
		ЗаполнитьСсылкиВИерархииРодителя(Родитель, ОписаниеСсылки.Ссылка, СсылкиРодителей, СсылкиВИерархииРодителей);
	КонецЦикла;
	
КонецПроцедуры

// Используется в процедурах ОбновитьСоставыГруппПользователей,
// ОбновитьСоставыГруппВнешнихПользователей.
//
Процедура ОбновитьСоставГруппыВсеПользователи(Пользователь,
                                              ОбновитьГруппуВнешнихПользователей = Ложь,
                                              УчастникиИзменений = Неопределено,
                                              ИзмененныеГруппы   = Неопределено)
	
	Если ОбновитьГруппуВнешнихПользователей Тогда
		ГруппаВсеПользователи = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи;
	Иначе
		ГруппаВсеПользователи = Справочники.ГруппыПользователей.ВсеПользователи;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппаВсеПользователи", ГруппаВсеПользователи);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Пользователи.ПометкаУдаления
	|			ТОГДА ЛОЖЬ
	|		КОГДА Пользователи.Недействителен
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Используется
	|ПОМЕСТИТЬ Пользователи
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	&ОтборПользователя
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пользователи.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ГруппаВсеПользователи КАК ГруппаПользователей,
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.Используется
	|ИЗ
	|	Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ПО (СоставыГруппПользователей.ГруппаПользователей = &ГруппаВсеПользователи)
	|			И (СоставыГруппПользователей.Пользователь = Пользователи.Ссылка)
	|			И (СоставыГруппПользователей.Используется = Пользователи.Используется)
	|ГДЕ
	|	СоставыГруппПользователей.Пользователь ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Пользователи.Ссылка,
	|	Пользователи.Ссылка,
	|	Пользователи.Используется
	|ИЗ
	|	Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ПО (СоставыГруппПользователей.ГруппаПользователей = Пользователи.Ссылка)
	|			И (СоставыГруппПользователей.Пользователь = Пользователи.Ссылка)
	|			И (СоставыГруппПользователей.Используется = Пользователи.Используется)
	|ГДЕ
	|	СоставыГруппПользователей.Пользователь ЕСТЬ NULL ";
	
	Если ОбновитьГруппуВнешнихПользователей Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Пользователи", "Справочник.ВнешниеПользователи");
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПользователя", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, "&ОтборПользователя", "Пользователи.Ссылка В (&Пользователь)");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		НаборЗаписей = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
		Запись = НаборЗаписей.Добавить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
			НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			НаборЗаписей.Записать(); // Добавление недостающих записей о связях.
			
			Если УчастникиИзменений <> Неопределено Тогда
				УчастникиИзменений.Вставить(Выборка.Пользователь);
			КонецЕсли;
		КонецЦикла;
		
		Если ИзмененныеГруппы <> Неопределено Тогда
			ИзмененныеГруппы.Вставить(ГруппаВсеПользователи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Используется в процедуре ОбновитьСоставыГруппВнешнихПользователей.
Процедура ОбновитьСоставыГруппПоТипамОбъектовАвторизации(ГруппаВнешнихПользователей,
		ВнешнийПользователь, УчастникиИзменений, ИзмененныеГруппы)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыВнешнихПользователей.Ссылка КАК ГруппаПользователей,
	|	ВнешниеПользователи.Ссылка КАК Пользователь,
	|	ВЫБОР
	|		КОГДА ГруппыВнешнихПользователей.ПометкаУдаления
	|			ТОГДА ЛОЖЬ
	|		КОГДА ВнешниеПользователи.ПометкаУдаления
	|			ТОГДА ЛОЖЬ
	|		КОГДА ВнешниеПользователи.Недействителен
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Используется
	|ПОМЕСТИТЬ НовыеСоставы
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
	|		ПО (ГруппыВнешнихПользователей.ВсеОбъектыАвторизации = ИСТИНА)
	|			И (&ОтборГруппыВнешнихПользователей1)
	|			И (ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.ГруппыВнешнихПользователей.Назначение КАК ТипыПользователей
	|				ГДЕ
	|					ТипыПользователей.Ссылка = ГруппыВнешнихПользователей.Ссылка
	|					И ТИПЗНАЧЕНИЯ(ТипыПользователей.ТипПользователей) = ТИПЗНАЧЕНИЯ(ВнешниеПользователи.ОбъектАвторизации)))
	|			И (&ОтборВнешнегоПользователя1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставыГруппПользователей.ГруппаПользователей,
	|	СоставыГруппПользователей.Пользователь
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеСоставы КАК НовыеСоставы
	|		ПО СоставыГруппПользователей.ГруппаПользователей = НовыеСоставы.ГруппаПользователей
	|			И СоставыГруппПользователей.Пользователь = НовыеСоставы.Пользователь
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.ГруппаПользователей) = ТИП(Справочник.ГруппыВнешнихПользователей)
	|	И ВЫРАЗИТЬ(СоставыГруппПользователей.ГруппаПользователей КАК Справочник.ГруппыВнешнихПользователей).ВсеОбъектыАвторизации = ИСТИНА
	|	И &ОтборГруппыВнешнихПользователей2
	|	И &ОтборВнешнегоПользователя2
	|	И НовыеСоставы.Пользователь ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеСоставы.ГруппаПользователей,
	|	НовыеСоставы.Пользователь,
	|	НовыеСоставы.Используется
	|ИЗ
	|	НовыеСоставы КАК НовыеСоставы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ПО (СоставыГруппПользователей.ГруппаПользователей = НовыеСоставы.ГруппаПользователей)
	|			И (СоставыГруппПользователей.Пользователь = НовыеСоставы.Пользователь)
	|			И (СоставыГруппПользователей.Используется = НовыеСоставы.Используется)
	|ГДЕ
	|	СоставыГруппПользователей.Пользователь ЕСТЬ NULL ";
	
	Если ГруппаВнешнихПользователей = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборГруппыВнешнихПользователей1", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборГруппыВнешнихПользователей2", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("ГруппаВнешнихПользователей", ГруппаВнешнихПользователей);
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&ОтборГруппыВнешнихПользователей1",
			"ГруппыВнешнихПользователей.Ссылка В (&ГруппаВнешнихПользователей)");
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&ОтборГруппыВнешнихПользователей2",
			"СоставыГруппПользователей.ГруппаПользователей В (&ГруппаВнешнихПользователей)");
	КонецЕсли;
	
	Если ВнешнийПользователь = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборВнешнегоПользователя1", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборВнешнегоПользователя2", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("ВнешнийПользователь", ВнешнийПользователь);
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&ОтборВнешнегоПользователя1",
			"ВнешниеПользователи.Ссылка В (&ВнешнийПользователь)");
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&ОтборВнешнегоПользователя2",
			"СоставыГруппПользователей.Пользователь В (&ВнешнийПользователь)");
	КонецЕсли;
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	Если НЕ РезультатыЗапросов[1].Пустой() Тогда
		НаборЗаписей = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
		Выборка = РезультатыЗапросов[1].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
			НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
			НаборЗаписей.Записать(); // Удаление лишних записей о связях.
			
			Если УчастникиИзменений <> Неопределено Тогда
				УчастникиИзменений.Вставить(Выборка.Пользователь);
			КонецЕсли;
			
			Если ИзмененныеГруппы <> Неопределено
			   И ТипЗнч(Выборка.ГруппаПользователей)
			     = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
				
				ИзмененныеГруппы.Вставить(Выборка.ГруппаПользователей);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ РезультатыЗапросов[2].Пустой() Тогда
		НаборЗаписей = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
		Запись = НаборЗаписей.Добавить();
		Выборка = РезультатыЗапросов[2].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
			НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			НаборЗаписей.Записать(); // Добавление недостающих записей о связях.
			
			Если УчастникиИзменений <> Неопределено Тогда
				УчастникиИзменений.Вставить(Выборка.Пользователь);
			КонецЕсли;
			
			Если ИзмененныеГруппы <> Неопределено
			   И ТипЗнч(Выборка.ГруппаПользователей)
			     = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
				
				ИзмененныеГруппы.Вставить(Выборка.ГруппаПользователей);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Используется в процедурах ОбновитьСоставыГруппПользователей,
// ОбновитьСоставыГруппВнешнихПользователей.
//
Процедура ОбновитьСоставыИерархическихГруппПользователей(ГруппаПользователей,
                                                         Пользователь,
                                                         УчастникиИзменений = Неопределено,
                                                         ИзмененныеГруппы   = Неопределено)
	
	ОбновитьГруппыВнешнихПользователей =
		ТипЗнч(ГруппаПользователей) <> Тип("СправочникСсылка.ГруппыПользователей");
	
	// Подготовка групп пользователей в иерархии их родителей.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СсылкиВИерархииРодителей.Родитель,
	|	СсылкиВИерархииРодителей.Ссылка
	|ПОМЕСТИТЬ СсылкиВИерархииРодителей
	|ИЗ
	|	&СсылкиВИерархииРодителей КАК СсылкиВИерархииРодителей";
	
	Запрос.УстановитьПараметр("СсылкиВИерархииРодителей", СсылкиВИерархииРодителей(
		?(ОбновитьГруппыВнешнихПользователей,
		  "Справочник.ГруппыВнешнихПользователей",
		  "Справочник.ГруппыПользователей") ));
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// Подготовка запроса для цикла.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставыГруппПользователей.Пользователь,
	|	СоставыГруппПользователей.Используется
	|ПОМЕСТИТЬ СоставыГруппПользователей
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	&ОтборПользователяВРегистре
	|	И СоставыГруппПользователей.ГруппаПользователей = &ГруппаПользователей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СоставыГруппПользователей.Пользователь,
	|	СоставыГруппПользователей.Используется
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыПользователейСостав.Пользователь КАК Пользователь,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ГруппыПользователейСостав.Ссылка.ПометкаУдаления
	|				ТОГДА ЛОЖЬ
	|			КОГДА ГруппыПользователейСостав.Пользователь.ПометкаУдаления
	|				ТОГДА ЛОЖЬ
	|			КОГДА ГруппыПользователейСостав.Пользователь.Недействителен
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК Используется
	|ПОМЕСТИТЬ НовыеСоставыГруппПользователей
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СсылкиВИерархииРодителей КАК СсылкиВИерархииРодителей
	|		ПО (СсылкиВИерархииРодителей.Ссылка = ГруппыПользователейСостав.Ссылка)
	|			И (СсылкиВИерархииРодителей.Родитель = &ГруппаПользователей)
	|			И (&ОтборПользователяВСправочнике)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГруппыПользователейСостав.Пользователь
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоставыГруппПользователей.Пользователь
	|ИЗ
	|	СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеСоставыГруппПользователей КАК НовыеСоставыГруппПользователей
	|		ПО СоставыГруппПользователей.Пользователь = НовыеСоставыГруппПользователей.Пользователь
	|ГДЕ
	|	НовыеСоставыГруппПользователей.Пользователь ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ГруппаПользователей КАК ГруппаПользователей,
	|	НовыеСоставыГруппПользователей.Пользователь,
	|	НовыеСоставыГруппПользователей.Используется
	|ИЗ
	|	НовыеСоставыГруппПользователей КАК НовыеСоставыГруппПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ПО (СоставыГруппПользователей.Пользователь = НовыеСоставыГруппПользователей.Пользователь)
	|			И (СоставыГруппПользователей.Используется = НовыеСоставыГруппПользователей.Используется)
	|ГДЕ
	|	СоставыГруппПользователей.Пользователь ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыПользователей.Родитель КАК Родитель
	|ИЗ
	|	Справочник.ГруппыПользователей КАК ГруппыПользователей
	|ГДЕ
	|	ГруппыПользователей.Ссылка = &ГруппаПользователей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СоставыГруппПользователей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НовыеСоставыГруппПользователей";
	
	Если Пользователь = Неопределено Тогда
		ОтборПользователяВРегистре    = "ИСТИНА";
		ОтборПользователяВСправочнике = "ИСТИНА";
	Иначе
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		ОтборПользователяВРегистре    = "СоставыГруппПользователей.Пользователь В (&Пользователь)";
		ОтборПользователяВСправочнике = "ГруппыПользователейСостав.Пользователь В (&Пользователь)";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПользователяВРегистре",    ОтборПользователяВРегистре);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПользователяВСправочнике", ОтборПользователяВСправочнике);
	
	Если ОбновитьГруппыВнешнихПользователей Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"Справочник.ГруппыПользователей",
			"Справочник.ГруппыВнешнихПользователей");
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"ГруппыПользователейСостав.Пользователь",
			"ГруппыПользователейСостав.ВнешнийПользователь");
	КонецЕсли;
	
	// Выполнение для текущий группы пользователей и каждой группы-родителя.
	Пока ЗначениеЗаполнено(ГруппаПользователей) Цикл
		
		Запрос.УстановитьПараметр("ГруппаПользователей", ГруппаПользователей);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		Если НЕ РезультатыЗапроса[2].Пустой() Тогда
			НаборЗаписей = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
			Выборка = РезультатыЗапроса[2].Выбрать();
			
			Пока Выборка.Следующий() Цикл
				НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
				НаборЗаписей.Отбор.ГруппаПользователей.Установить(ГруппаПользователей);
				НаборЗаписей.Записать(); // Удаление лишних записей о связях.
				
				Если УчастникиИзменений <> Неопределено Тогда
					УчастникиИзменений.Вставить(Выборка.Пользователь);
				КонецЕсли;
				
				Если ИзмененныеГруппы <> Неопределено Тогда
					ИзмененныеГруппы.Вставить(ГруппаПользователей);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ РезультатыЗапроса[3].Пустой() Тогда
			НаборЗаписей = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
			Запись = НаборЗаписей.Добавить();
			Выборка = РезультатыЗапроса[3].Выбрать();
			
			Пока Выборка.Следующий() Цикл
				НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
				НаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				НаборЗаписей.Записать(); // Добавление недостающих записей о связях.
				
				Если УчастникиИзменений <> Неопределено Тогда
					УчастникиИзменений.Вставить(Выборка.Пользователь);
				КонецЕсли;
				
				Если ИзмененныеГруппы <> Неопределено Тогда
					ИзмененныеГруппы.Вставить(Выборка.ГруппаПользователей);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ РезультатыЗапроса[4].Пустой() Тогда
			Выборка = РезультатыЗапроса[4].Выбрать();
			Выборка.Следующий();
			ГруппаПользователей = Выборка.Родитель;
		Иначе
			ГруппаПользователей = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет права указанного пользователя ИБ.
//
// Параметры:
//  ПользовательИБ         - ПользовательИнформационнойБазы - проверяемый пользователь.
//  РежимПроверки          - Строка - ПриЗаписи или ПриЗапуске.
//  ЭтоВнешнийПользователь - Булево - проверять права для внешнего пользователя.
//
Процедура ПроверитьПраваПользователя(ПользовательИБ, РежимПроверки, ЭтоВнешнийПользователь)
	
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	Если РазделениеВключено И ПользовательИБ.РазделениеДанных.Количество() = 0 Тогда
		Возврат; // Не нужно проверять неразделенных пользователей в модели сервиса.
	КонецЕсли;
	
	Если Не РазделениеВключено И РежимПроверки = "ПриЗапуске" И Не ЭтоВнешнийПользователь Тогда
		Возврат; // Не нужно проверять права пользователей при запуске в локальном режиме.
	КонецЕсли;
	
	Если ЭтоВнешнийПользователь Тогда
		
		НазначениеРолейПользователя = "ДляВнешнихПользователей";
		
	ИначеЕсли Не РазделениеВключено И Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
		// Пользователь с ролью АдминистраторСистемы в локальном режиме работы
		// может выдавать административные права.
		НазначениеРолейПользователя = "ДляАдминистраторов";
	Иначе
		НазначениеРолейПользователя = "ДляПользователей";
	КонецЕсли;
	
	НедоступныеРоли = ПользователиСлужебныйПовтИсп.НедоступныеРоли(НазначениеРолейПользователя);
	
	РолиДляПроверки = Новый ТаблицаЗначений;
	РолиДляПроверки.Колонки.Добавить("Роль", Новый ОписаниеТипов("ОбъектМетаданных"));
	РолиДляПроверки.Колонки.Добавить("ЭтоУдаляемаяРоль", Новый ОписаниеТипов("Булево"));
	Для Каждого Роль Из ПользовательИБ.Роли Цикл
		РолиДляПроверки.Добавить().Роль = Роль;
	КонецЦикла;
	РолиДляПроверки.Индексы.Добавить("Роль");
	
	ПрежнийПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		ПользовательИБ.УникальныйИдентификатор);
	
	Если ПрежнийПользовательИБ <> Неопределено Тогда
		Для Каждого Роль Из ПрежнийПользовательИБ.Роли Цикл
			Строка = РолиДляПроверки.Найти(Роль, "Роль");
			Если Не РазделениеВключено И РежимПроверки = "ПередЗаписью" Тогда
				Если Строка <> Неопределено Тогда
					РолиДляПроверки.Удалить(Строка);
				КонецЕсли;
			ИначеЕсли Строка = Неопределено Тогда
				Строка = РолиДляПроверки.Добавить();
				Строка.Роль = Роль;
				Строка.ЭтоУдаляемаяРоль = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УдаляемыеНедоступныеРоли = "";
	ДобавляемыеНедоступныеРоли = "";
	НазначениеРолей = Неопределено;
	
	Для Каждого ОписаниеРоли Из РолиДляПроверки Цикл
		Роль = ОписаниеРоли.Роль;
		ИмяРоли = Роль.Имя;
		
		Если НедоступныеРоли.Получить(ИмяРоли) = Неопределено Тогда
			Продолжить;
		ИначеЕсли РежимПроверки = "ПередЗаписью"
			И Не ОписаниеРоли.ЭтоУдаляемаяРоль Тогда
			Если ПользовательИБ.Роли.Содержит(Роль) Тогда
				ПользовательИБ.Роли.Удалить(Роль);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если НазначениеРолей = Неопределено Тогда
			НазначениеРолей = ПользователиСлужебныйПовтИсп.Параметры().НазначениеРолей;
		КонецЕсли;
		
		Если НазначениеРолей.ТолькоДляАдминистраторовСистемы.Получить(ИмяРоли) <> Неопределено Тогда
			ТекстШаблона = НСтр("ru = '""%1"" (предназначена только для администраторов системы)'");
		
		ИначеЕсли РазделениеВключено
		        И НазначениеРолей.ТолькоДляПользователейСистемы.Получить(ИмяРоли) <> Неопределено Тогда
			
			ТекстШаблона = НСтр("ru = '""%1"" (предназначена только для пользователей системы)'");
		
		Иначе
			Если ОписаниеРоли.ЭтоУдаляемаяРоль Тогда
				Продолжить;
			КонецЕсли;
			Если НазначениеРолей.ТолькоДляВнешнихПользователей.Получить(ИмяРоли) <> Неопределено Тогда
				ТекстШаблона = НСтр("ru = '""%1"" (предназначена только для внешних пользователей)'");
				
			Иначе // Это внешний пользователь.
				ТекстШаблона = НСтр("ru = '""%1"" (предназначена только для пользователей)'");
			КонецЕсли;
		КонецЕсли;
		
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, Роль.Представление()) + Символы.ПС;
		
		Если ОписаниеРоли.ЭтоУдаляемаяРоль Тогда
			УдаляемыеНедоступныеРоли = УдаляемыеНедоступныеРоли + Представление;
		Иначе
			ДобавляемыеНедоступныеРоли = ДобавляемыеНедоступныеРоли + Представление;
		КонецЕсли;
	КонецЦикла;
	
	УдаляемыеНедоступныеРоли   = СокрЛП(УдаляемыеНедоступныеРоли);
	ДобавляемыеНедоступныеРоли = СокрЛП(ДобавляемыеНедоступныеРоли);
	
	Если Не ЗначениеЗаполнено(УдаляемыеНедоступныеРоли)
	   И Не ЗначениеЗаполнено(ДобавляемыеНедоступныеРоли) Тогда
		
		Возврат;
	КонецЕсли;
	
	ИмяСобытия = НСтр("ru = 'Пользователи.Ошибка при установке ролей пользователю ИБ'",
	     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Если РежимПроверки = "ПриЗапуске" Тогда
		Если СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) = 1 Тогда
			ТекстРегистрацииВхода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Попытка входа пользователя %1 с недоступной ролью:
				           |%2.'"),
			ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
		Иначе
			ТекстРегистрацииВхода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Попытка входа пользователя %1 с недоступными ролями:
				           |%2.'"),
			ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПользовательИБ,
			ТекстРегистрацииВхода);
		
		ТекстСообщенияВхода =
			НСтр("ru = 'Невозможно выполнить вход из-за наличия недоступных ролей.
			           |Обратитесь к администратору.'");
		ВызватьИсключение ТекстСообщенияВхода;
	КонецЕсли;
	
	Если СтрЧислоСтрок(УдаляемыеНедоступныеРоли) = 1 И ЗначениеЗаполнено(УдаляемыеНедоступныеРоли) Тогда
		ТекстРегистрацииУдаления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Попытка удалить пользователю %1 недоступную роль
			           |""%2"".'"),
			ПользовательИБ.ПолноеИмя, УдаляемыеНедоступныеРоли);
			
	ИначеЕсли СтрЧислоСтрок(УдаляемыеНедоступныеРоли) > 1 Тогда
		ТекстРегистрацииУдаления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Попытка удалить пользователю %1 недоступные роли:
			           |%2.'"),
			ПользовательИБ.ПолноеИмя, УдаляемыеНедоступныеРоли);
	Иначе
		ТекстРегистрацииУдаления = "";
	КонецЕсли;
	
	Если СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) = 1 И ЗначениеЗаполнено(ДобавляемыеНедоступныеРоли) Тогда
		ТекстРегистрацииДобавления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Попытка назначить пользователю %1 недоступную роль:
			           |%2.'"),
			ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
			
	ИначеЕсли СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) > 1 Тогда
		ТекстРегистрацииДобавления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Попытка назначить пользователю %1 недоступные роли:
			           |%2.'"),
			ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
	Иначе
		ТекстРегистрацииДобавления = "";
	КонецЕсли;
	
	ТекстРегистрации = СокрЛП(ТекстРегистрацииУдаления + Символы.ПС  + Символы.ПС + ТекстРегистрацииДобавления);
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПользовательИБ,
		ТекстРегистрации);
	
	Если СтрЧислоСтрок(УдаляемыеНедоступныеРоли) = 1 И ЗначениеЗаполнено(УдаляемыеНедоступныеРоли) Тогда
		ТекстСообщенияУдаления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пользователю ""%1"" невозможно удалить недоступную роль.'"),
			ПользовательИБ.ПолноеИмя);
	ИначеЕсли СтрЧислоСтрок(УдаляемыеНедоступныеРоли) > 1 Тогда
		ТекстСообщенияУдаления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пользователю ""%1"" невозможно удалить недоступные роли.'"),
			ПользовательИБ.ПолноеИмя);
	Иначе
		ТекстСообщенияУдаления = "";
	КонецЕсли;
	
	Если СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) = 1 И ЗначениеЗаполнено(ДобавляемыеНедоступныеРоли) Тогда
		ТекстСообщенияДобавления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пользователю ""%1"" невозможно назначить недоступную роль
			           |%2.'"),
			ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
		
	ИначеЕсли СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) > 1 Тогда
		ТекстСообщенияДобавления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пользователю ""%1"" невозможно назначить недоступные роли:
			           |%2.'"),
			ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
	Иначе
		ТекстСообщенияДобавления = "";
	КонецЕсли;
	
	ТекстСообщения = СокрЛП(ТекстСообщенияУдаления + Символы.ПС  + Символы.ПС + ТекстСообщенияДобавления);
	
	ВызватьИсключение ТекстСообщения;
	
КонецПроцедуры

Функция СписокНастроек(ИмяПользователяИБ, МенеджерНастроек)
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("КлючОбъекта");
	ТаблицаНастроек.Колонки.Добавить("КлючНастроек");
	
	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", ИмяПользователяИБ);
	
	ВыборкаНастроек = МенеджерНастроек.Выбрать(Отбор);
	Пропустить = Ложь;
	Пока СледующаяНастройка(ВыборкаНастроек, Пропустить) Цикл
		
		Если Пропустить Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаНастроек.Добавить();
		НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
		НоваяСтрока.КлючНастроек = ВыборкаНастроек.КлючНастроек;
	КонецЦикла;
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Функция СледующаяНастройка(ВыборкаНастроек, Пропустить) 
	
	Попытка 
		Пропустить = Ложь;
		Возврат ВыборкаНастроек.Следующий();
	Исключение
		Пропустить = Истина;
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Процедура СкопироватьНастройки(МенеджерНастроек, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить)
	
	ТаблицаНастроек = СписокНастроек(ИмяПользователяИсточник, МенеджерНастроек);
	
	Для Каждого Настройка Из ТаблицаНастроек Цикл
		КлючОбъекта = Настройка.КлючОбъекта;
		КлючНастроек = Настройка.КлючНастроек;
		Значение = МенеджерНастроек.Загрузить(КлючОбъекта, КлючНастроек, , ИмяПользователяИсточник);
		ОписаниеНастроек = МенеджерНастроек.ПолучитьОписание(КлючОбъекта, КлючНастроек, ИмяПользователяИсточник);
		МенеджерНастроек.Сохранить(КлючОбъекта, КлючНастроек, Значение,
			ОписаниеНастроек, ИмяПользователяПриемник);
		Если Переносить Тогда
			МенеджерНастроек.Удалить(КлючОбъекта, КлючНастроек, ИмяПользователяИсточник);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьПрочиеПользовательскиеНастройки(ИмяПользователяИсточник, ИмяПользователяПриемник)
	
	ПользовательИсточникСсылка = Пользователи.НайтиПоИмени(ИмяПользователяИсточник);
	ПользовательПриемникСсылка = Пользователи.НайтиПоИмени(ИмяПользователяПриемник);
	СведенияОПользователеИсточнике = Новый Структура;
	СведенияОПользователеИсточнике.Вставить("ПользовательСсылка", ПользовательИсточникСсылка);
	СведенияОПользователеИсточнике.Вставить("ИмяПользователяИнформационнойБазы", ИмяПользователяИсточник);
	
	СведенияОПользователеПриемнике = Новый Структура;
	СведенияОПользователеПриемнике.Вставить("ПользовательСсылка", ПользовательПриемникСсылка);
	СведенияОПользователеПриемнике.Вставить("ИмяПользователяИнформационнойБазы", ИмяПользователяПриемник);
	
	// Получение прочих настроек.
	ПрочиеНастройкиПользователей = Новый Структура;
	ПриПолученииПрочихНастроек(СведенияОПользователеИсточнике, ПрочиеНастройкиПользователей);
	Ключи = Новый СписокЗначений;
	МассивПрочихНастроек = Новый Массив;
	Если ПрочиеНастройкиПользователей.Количество() <> 0 Тогда
		
		Для Каждого ПрочаяНастройка Из ПрочиеНастройкиПользователей Цикл
			ПрочиеНастройкиСтруктура = Новый Структура;
			Если ПрочаяНастройка.Ключ = "НастройкаБыстрогоДоступа" Тогда
				СписокНастроек = ПрочаяНастройка.Значение.СписокНастроек;
				Для Каждого Элемент Из СписокНастроек Цикл
					Ключи.Добавить(Элемент.Объект, Элемент.Идентификатор);
				КонецЦикла;
				ПрочиеНастройкиСтруктура.Вставить("ИдентификаторНастройки", "НастройкаБыстрогоДоступа");
				ПрочиеНастройкиСтруктура.Вставить("ЗначениеНастройки", Ключи);
			Иначе
				ПрочиеНастройкиСтруктура.Вставить("ИдентификаторНастройки", ПрочаяНастройка.Ключ);
				ПрочиеНастройкиСтруктура.Вставить("ЗначениеНастройки", ПрочаяНастройка.Значение.СписокНастроек);
			КонецЕсли;
			ПриСохраненииПрочихНастроек(СведенияОПользователеПриемнике, ПрочиеНастройкиСтруктура);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СкопироватьНастройкиПользователяИБ(ПользовательОбъект, ПараметрыОбработки)
	
	Если НЕ ПараметрыОбработки.Свойство("ЗначениеКопирования")
	 ИЛИ НЕ ПараметрыОбработки.НовыйПользовательИБСуществует Тогда
		
		Возврат;
	КонецЕсли;
	
	ИмяНовогоПользователяИБ = ПараметрыОбработки.ОписаниеНовогоПользователяИБ.Имя;
	
	ИдентификаторКопируемогоПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ПараметрыОбработки.ЗначениеКопирования, "ИдентификаторПользователяИБ");
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторКопируемогоПользователяИБ) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеКопируемогоПользователяИБ = Неопределено;
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ Пользователи.ПрочитатьПользователяИБ(
	         ИдентификаторКопируемогоПользователяИБ,
	         ОписаниеКопируемогоПользователяИБ) Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ИмяКопируемогоПользователяИБ = ОписаниеКопируемогоПользователяИБ.Имя;
	
	// Копирование настроек.
	СкопироватьНастройкиПользователя(ИмяКопируемогоПользователяИБ, ИмяНовогоПользователяИБ, Ложь);
	
КонецПроцедуры

Функция КлючПредупрежденияБезопасностиПриЗапуске()
	Если ПустаяСтрока(ПользователиИнформационнойБазы.ТекущийПользователь().Имя) Тогда
		Возврат Неопределено; // В базе без пользователей предупреждение не требуется.
	КонецЕсли;
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Неопределено; // В модели сервиса предупреждение не требуется.
	КонецЕсли;
	Если ПривилегированныйРежим() Тогда
		Возврат Неопределено; // С ключом запуска "/UsePrivilegedMode" предупреждение не требуется.
	КонецЕсли;
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ()
		И Не ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		Возврат Неопределено; // В подчиненных узлах предупреждение не требуется.
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыАдминистрирования = СтандартныеПодсистемыСервер.ПараметрыАдминистрирования();
	РешениеПринято = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыАдминистрирования, "ПринятоРешениеПоОткрытиюВнешнихОтчетовИОбработок");
	УстановитьПривилегированныйРежим(Ложь);
	
	ЭтоАдминистраторСистемы = Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь);
	Если ЭтоАдминистраторСистемы И РешениеПринято = Неопределено Тогда
		Возврат "ПослеОбновления";
	КонецЕсли;
	
	Если РешениеПринято <> Неопределено Тогда
		Если ПравоДоступа("ИнтерактивноеОткрытиеВнешнихОбработок", Метаданные)
			Или ПравоДоступа("ИнтерактивноеОткрытиеВнешнихОтчетов", Метаданные) Тогда
			ПользовательОзнакомлен = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПредупреждениеБезопасности", "ПользовательОзнакомлен", Ложь);
			Если Не ПользовательОзнакомлен Тогда
				Возврат "ПослеПоявленияПрава";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры используемые при обмене данными.

// Переопределяет стандартное поведение при выгрузке данных.
// Реквизит ИдентификаторПользователяИБ не переносится.
//
Процедура ПриОтправкеДанных(ЭлементДанных, ОтправкаЭлемента, Подчиненному)
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить
	 ИЛИ ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		
		// Стандартная обработка не переопределяется.
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.Пользователи")
	      ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВнешниеПользователи") Тогда
		
		ЭлементДанных.ИдентификаторПользователяИБ =
			Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		
		ЭлементДанных.Подготовлен = Ложь;
		ЭлементДанных.СвойстваПользователяИБ = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет стандартное поведение при загрузке данных.
// Реквизит ИдентификаторПользователяИБ не переносится, т.к. всегда
// относится к пользователю текущей информационной базы или не заполнен.
//
Процедура ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, ОтПодчиненного)
	
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		
		// Стандартная обработка не переопределяется.
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("КонстантаМенеджерЗначения.ИспользоватьГруппыПользователей")
	      ИЛИ ТипЗнч(ЭлементДанных) = Тип("КонстантаМенеджерЗначения.ИспользоватьВнешнихПользователей")
	      ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.Пользователи")
	      ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ГруппыПользователей")
	      ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВнешниеПользователи")
	      ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ГруппыВнешнихПользователей")
	      ИЛИ ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.СоставыГруппПользователей") Тогда
		
		Если ОтПодчиненного И ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			
			// Получение данных из автономного рабочего места пропускается, а для соответствия
			// данных в узлах, текущие данные отправляются обратно в автономное рабочее место.
			ОтправкаНазад = Истина;
			ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
			
		ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.Пользователи")
		      ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВнешниеПользователи") Тогда
			
			СписокСвойств =
			"ИдентификаторПользователяИБ,
			|Подготовлен,
			|СвойстваПользователяИБ";
			
			ЗаполнитьЗначенияСвойств(ЭлементДанных, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ЭлементДанных.Ссылка, СписокСвойств));
			
		ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда
			
			Если ТипЗнч(ЭлементДанных.Ссылка) = Тип("СправочникСсылка.Пользователи")
			 ИЛИ ТипЗнч(ЭлементДанных.Ссылка) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
				
				ОбъектПолучен = Ложь;
				Попытка
					Объект = ЭлементДанных.Ссылка.ПолучитьОбъект();
				Исключение
					ОбъектПолучен = Истина;
				КонецПопытки;
				
				Если ОбъектПолучен Тогда
					Объект.ОбщиеДействияПередУдалениемВОбычномРежимеИПриОбменеДанными();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет поведение после получения данных в распределенной ИБ.
Процедура ПослеПолученияДанных(Отправитель, Отказ, ОтПодчиненного)
	
	ОбновитьРолиВнешнихПользователей();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для процедур:
// - ПриДобавленииПараметровРаботыКлиентаПриЗапуске,
// - ПриВыполненииСтандартныхПериодическихПроверокНаСервере.

// Обновляет дату последней активности и проверяет необходимость смены пароля.
Функция ТребуетсяСменитьПароль(ОписаниеОшибки = "", ПриЗапуске = Ложь, РегистрироватьВЖурнале = Истина)
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если Не ЗначениеЗаполнено(ПользовательИБ.Имя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Обновление даты последнего входа пользователя.
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	НачалоДняТекущейДатыСеанса = НачалоДня(ТекущаяДатаСеанса());
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Пользователь", ТекущийПользователь);
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			СведенияОПользователе = НаборЗаписей.Добавить();
			СведенияОПользователе.Пользователь = ТекущийПользователь;
		Иначе
			СведенияОПользователе = НаборЗаписей[0];
		КонецЕсли;
		Записать = Ложь;
		Если СведенияОПользователе.ДатаПоследнейАктивности <> НачалоДняТекущейДатыСеанса Тогда
			СведенияОПользователе.ДатаПоследнейАктивности = НачалоДняТекущейДатыСеанса;
			Записать = Истина;
		КонецЕсли;
		ИспользуемыйКлиент = СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере().Получить("ИспользуемыйКлиент");
		Если СведенияОПользователе.ПоследнийИспользуемыйКлиент <> ИспользуемыйКлиент Тогда
			СведенияОПользователе.ПоследнийИспользуемыйКлиент = ИспользуемыйКлиент;
			Записать = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СведенияОПользователе.ДатаНачалаИспользованияПароля)
		 Или СведенияОПользователе.ДатаНачалаИспользованияПароля > НачалоДняТекущейДатыСеанса Тогда
			СведенияОПользователе.ДатаНачалаИспользованияПароля = НачалоДняТекущейДатыСеанса;
			Записать = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(СведенияОПользователе.ДатаАвтоматическогоЗапрещенияВхода) Тогда
			СведенияОПользователе.ДатаАвтоматическогоЗапрещенияВхода = Неопределено;
			Записать = Истина;
		КонецЕсли;
		Если Записать Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		ШаблонТекстаОшибки =
			НСтр("ru = 'Не удалось записать сведения о текущем пользователе по причине:
			           |%1
			           |
			           |Обратитесь к администратору.'");
		Если ПриЗапуске Тогда
			ОписаниеОшибки = ЗаголовокСообщенияАвторизацияНеВыполненаСПереводомСтроки()
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаОшибки,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			
			Если РегистрироватьВЖурнале Тогда
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Пользователи.Ошибка входа в программу'",
					     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.НайтиПоТипу(ТипЗнч(ТекущийПользователь)),
					ТекущийПользователь,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаОшибки,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			КонецЕсли;
		Иначе
			Если РегистрироватьВЖурнале Тогда
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Пользователи.Ошибка обновления даты последней активности'",
					     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.НайтиПоТипу(ТипЗнч(ТекущийПользователь)),
					ТекущийПользователь,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаОшибки,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			КонецЕсли;
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УчитыватьСвойствоЗапрещеноИзменятьПароль");
	ДополнительныеПараметры.Вставить("УчитыватьСвойствоАутентификацияСтандартная");
	Если Не ВозможноИзменитьПароль(ТекущийПользователь, ДополнительныеПараметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СведенияОПользователе.ПотребоватьСменуПароляПриВходе Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ПользователиСлужебныйПовтИсп.Настройки().ОбщиеНастройкиВхода Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		НастройкиВхода = ПользователиСлужебныйПовтИсп.Настройки().ВнешниеПользователи;
	Иначе
		НастройкиВхода = ПользователиСлужебныйПовтИсп.Настройки().Пользователи;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиВхода.МаксимальныйСрокДействияПароля) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СведенияОПользователе.ДатаНачалаИспользованияПароля) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОстатокМаксимальногоСрокаДействияПароля = НастройкиВхода.МаксимальныйСрокДействияПароля
		- (НачалоДняТекущейДатыСеанса - СведенияОПользователе.ДатаНачалаИспользованияПароля) / (24*60*60);
	
	Возврат ОстатокМаксимальногоСрокаДействияПароля <= 0;
	
КонецФункции

// Для функции ОбработатьНовыйПароль.
Функция ОшибкаДлиныИлиСложностиПароля(Пароль, МинимальнаяДлинаПароля, СложныйПароль)
	
	Если СложныйПароль И МинимальнаяДлинаПароля < 7 Тогда
		МинимальнаяДлинаПароля = 7;
	КонецЕсли;
	Если СтрДлина(Пароль) < МинимальнаяДлинаПароля Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Количество символов нового пароля должно быть не менее %1.'"),
			Формат(МинимальнаяДлинаПароля, "ЧГ="));
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат ""; // Проверка сложности пароля в разделенном режиме невозможна.
	КонецЕсли;
	
	Если СложныйПароль И Не ПарольОтвечаетТребованиямСложности(Пароль) Тогда
		Возврат НСтр("ru = 'Пароль не отвечает требованиям сложности.'")
			+ Символы.ПС + Символы.ПС
			+ ПодсказкаДляНовогоПароля();
	КонецЕсли;
	
КонецФункции

// Для функции ОшибкаДлиныИлиСложностиПароля.
// Проверяет пароль на требования сложности, реализованными в 1С:Предприятии.
//
// Параметры:
//  Пароль - Строка - проверяемый пароль.
//
// Возвращаемое значение:
//  Булево - Истина, если соответствует.
//
Функция ПарольОтвечаетТребованиямСложности(Пароль)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущаяПроверкаСложности = ПолучитьПроверкуСложностиПаролейПользователей();
	ТекущаяМинимальнаяДлина  = ПолучитьМинимальнуюДлинуПаролейПользователей();
	
	НачатьТранзакцию();
	Попытка
		Если ТекущаяМинимальнаяДлина > 0 Тогда
			УстановитьМинимальнуюДлинуПаролейПользователей(0);
		КонецЕсли;
		Если ТекущаяПроверкаСложности Тогда
			УстановитьПроверкуСложностиПаролейПользователей(Ложь);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ИмяПользователя())
		   И ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
			
			ВременныйАдминистраторИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
			ВременныйАдминистраторИБ.АутентификацияСтандартная = Истина;
			ВременныйАдминистраторИБ.Роли.Добавить(Метаданные.Роли.Администрирование);
			ВременныйАдминистраторИБ.Имя = НСтр("ru = 'Временный первый администратор'")
				+ " (" + Строка(Новый УникальныйИдентификатор) + ")";
			ВременныйАдминистраторИБ.Записать();
		Иначе
			ВременныйАдминистраторИБ = Неопределено;
		КонецЕсли;
		
		ВременныйПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		ВременныйПользовательИБ.АутентификацияСтандартная = Истина;
		ВременныйПользовательИБ.Пароль = Пароль;
		
		ВременныйПользовательИБ.Имя = НСтр("ru = 'Временный пользователь'")
			+ " (" + Строка(Новый УникальныйИдентификатор) + ")";
		
		ВременныйПользовательИБ.Записать();
		
		ВременныйПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ВременныйПользовательИБ.УникальныйИдентификатор);
		
		УстановитьПроверкуСложностиПаролейПользователей(Истина);
		Отвечает = Истина;
		Попытка
			ВременныйПользовательИБ.Пароль = Пароль;
			ВременныйПользовательИБ.Записать();
		Исключение
			Отвечает = Ложь;
		КонецПопытки;
		
		ВременныйПользовательИБ.Удалить();
		
		Если ВременныйАдминистраторИБ <> Неопределено Тогда
			ВременныйАдминистраторИБ.Удалить();
		КонецЕсли;
		
		Если ТекущаяМинимальнаяДлина > 0 Тогда
			УстановитьМинимальнуюДлинуПаролейПользователей(ТекущаяМинимальнаяДлина);
		КонецЕсли;
		Если Не ТекущаяПроверкаСложности Тогда
			УстановитьПроверкуСложностиПаролейПользователей(Ложь);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Если ТекущаяМинимальнаяДлина <> ПолучитьМинимальнуюДлинуПаролейПользователей() Тогда
			УстановитьМинимальнуюДлинуПаролейПользователей(ТекущаяМинимальнаяДлина);
		КонецЕсли;
		Если ТекущаяПроверкаСложности <> ПолучитьПроверкуСложностиПаролейПользователей() Тогда
			УстановитьПроверкуСложностиПаролейПользователей(ТекущаяПроверкаСложности);
		КонецЕсли;
		
		ОтменитьТранзакцию();
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить отвечает ли пароль требованиям сложности по причине:
			           |%1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	Возврат Отвечает;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Для процедуры НачатьОбработкуПользователяИБ.

Процедура ЗапомнитьСвойстваПользователя(ПользовательОбъект, ПараметрыОбработки)
	
	Поля =
	"Ссылка,
	|ИдентификаторПользователяИБ,
	|ИдентификаторПользователяСервиса,
	|СвойстваПользователяИБ,
	|Подготовлен,
	|ПометкаУдаления,
	|Недействителен";
	
	Если ТипЗнч(ПользовательОбъект) = Тип("СправочникОбъект.Пользователи") Тогда
		Поля = Поля + ",
		|Служебный";
	КонецЕсли;
	
	СтарыйПользователь = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПользовательОбъект.Ссылка, Поля);
	
	Если ТипЗнч(ПользовательОбъект) <> Тип("СправочникОбъект.Пользователи") Тогда
		СтарыйПользователь.Вставить("Служебный", Ложь);
	КонецЕсли;
	
	Если ПользовательОбъект.ЭтоНовый() Или ПользовательОбъект.Ссылка <> СтарыйПользователь.Ссылка Тогда
		СтарыйПользователь.ИдентификаторПользователяИБ =
			Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		СтарыйПользователь.ИдентификаторПользователяСервиса =
			Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		СтарыйПользователь.СвойстваПользователяИБ    = Новый ХранилищеЗначения(Неопределено);
		СтарыйПользователь.Подготовлен               = Ложь;
		СтарыйПользователь.ПометкаУдаления           = Ложь;
		СтарыйПользователь.Недействителен            = Ложь;
	КонецЕсли;
	ПараметрыОбработки.Вставить("СтарыйПользователь", СтарыйПользователь);
	
	// Свойства старого пользователя ИБ (если существует).
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеСтарогоПользователяИБ = Неопределено;
	ПараметрыОбработки.Вставить("СтарыйПользовательИБСуществует", Пользователи.ПрочитатьПользователяИБ(
		СтарыйПользователь.ИдентификаторПользователяИБ, ОписаниеСтарогоПользователяИБ));
	
	ПараметрыОбработки.Вставить("СтарыйПользовательИБТекущий", Ложь);
	
	Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
		ПараметрыОбработки.Вставить("ОписаниеСтарогоПользователяИБ", ОписаниеСтарогоПользователяИБ);
		
		Если ОписаниеСтарогоПользователяИБ.УникальныйИдентификатор =
				ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор Тогда
		
			ПараметрыОбработки.Вставить("СтарыйПользовательИБТекущий", Истина);
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	// Начальное заполнение значений полей авто реквизитов значениями старого пользователя.
	ЗаполнитьЗначенияСвойств(ПараметрыОбработки.АвтоРеквизиты, СтарыйПользователь);
	
	// Начальное заполнение значений полей блокируемых реквизитов значениями нового пользователя.
	ЗаполнитьЗначенияСвойств(ПараметрыОбработки.БлокируемыеРеквизиты, ПользовательОбъект);
	
КонецПроцедуры

Процедура ЗаписатьПользователяИБ(ПользовательОбъект, ПараметрыОбработки)
	
	ДополнительныеСвойства = ПользовательОбъект.ДополнительныеСвойства;
	ОписаниеПользователяИБ = ДополнительныеСвойства.ОписаниеПользователяИБ;
	СтарыйПользователь     = ПараметрыОбработки.СтарыйПользователь;
	АвтоРеквизиты          = ПараметрыОбработки.АвтоРеквизиты;
	
	Если ОписаниеПользователяИБ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьНовогоПользователяИБ = Ложь;
	
	Если ОписаниеПользователяИБ.Свойство("УникальныйИдентификатор")
	   И ЗначениеЗаполнено(ОписаниеПользователяИБ.УникальныйИдентификатор)
	   И ОписаниеПользователяИБ.УникальныйИдентификатор
	     <> ПараметрыОбработки.СтарыйПользователь.ИдентификаторПользователяИБ Тогда
		
		ИдентификаторПользователяИБ = ОписаниеПользователяИБ.УникальныйИдентификатор;
		
	ИначеЕсли ЗначениеЗаполнено(СтарыйПользователь.ИдентификаторПользователяИБ) Тогда
		ИдентификаторПользователяИБ = СтарыйПользователь.ИдентификаторПользователяИБ;
		СоздатьНовогоПользователяИБ = НЕ ПараметрыОбработки.СтарыйПользовательИБСуществует;
	Иначе
		ИдентификаторПользователяИБ = Неопределено;
		СоздатьНовогоПользователяИБ = Истина;
	КонецЕсли;
	
	// Заполнение автоматических свойств пользователя ИБ.
	ОписаниеПользователяИБ.Вставить("ПолноеИмя", ПользовательОбъект.Наименование);
	
	ХранимыеСвойства = ХранимыеСвойстваПользователяИБ(ПользовательОбъект);
	Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
		СтараяАутентификация = ПараметрыОбработки.ОписаниеСтарогоПользователяИБ;
		Если Пользователи.ВходВПрограммуРазрешен(СтараяАутентификация) Тогда
			ХранимыеСвойства.АутентификацияСтандартная = СтараяАутентификация.АутентификацияСтандартная;
			ХранимыеСвойства.АутентификацияOpenID      = СтараяАутентификация.АутентификацияOpenID;
			ХранимыеСвойства.АутентификацияОС          = СтараяАутентификация.АутентификацияОС;
			ПользовательОбъект.СвойстваПользователяИБ = Новый ХранилищеЗначения(ХранимыеСвойства);
			АвтоРеквизиты.СвойстваПользователяИБ = ПользовательОбъект.СвойстваПользователяИБ;
		КонецЕсли;
	Иначе
		СтараяАутентификация = Новый Структура;
		СтараяАутентификация.Вставить("АутентификацияСтандартная", Ложь);
		СтараяАутентификация.Вставить("АутентификацияОС",          Ложь);
		СтараяАутентификация.Вставить("АутентификацияOpenID",      Ложь);
		ХранимыеСвойства.АутентификацияСтандартная = Ложь;
		ХранимыеСвойства.АутентификацияOpenID      = Ложь;
		ХранимыеСвойства.АутентификацияОС          = Ложь;
		ПользовательОбъект.СвойстваПользователяИБ = Новый ХранилищеЗначения(ХранимыеСвойства);
		АвтоРеквизиты.СвойстваПользователяИБ = ПользовательОбъект.СвойстваПользователяИБ;
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Свойство("АутентификацияСтандартная") Тогда
		ХранимыеСвойства.АутентификацияСтандартная = ОписаниеПользователяИБ.АутентификацияСтандартная;
		ПользовательОбъект.СвойстваПользователяИБ = Новый ХранилищеЗначения(ХранимыеСвойства);
		АвтоРеквизиты.СвойстваПользователяИБ = ПользовательОбъект.СвойстваПользователяИБ;
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Свойство("АутентификацияОС") Тогда
		ХранимыеСвойства.АутентификацияОС = ОписаниеПользователяИБ.АутентификацияОС;
		ПользовательОбъект.СвойстваПользователяИБ = Новый ХранилищеЗначения(ХранимыеСвойства);
		АвтоРеквизиты.СвойстваПользователяИБ = ПользовательОбъект.СвойстваПользователяИБ;
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Свойство("АутентификацияOpenID") Тогда
		ХранимыеСвойства.АутентификацияOpenID = ОписаниеПользователяИБ.АутентификацияOpenID;
		ПользовательОбъект.СвойстваПользователяИБ = Новый ХранилищеЗначения(ХранимыеСвойства);
		АвтоРеквизиты.СвойстваПользователяИБ = ПользовательОбъект.СвойстваПользователяИБ;
	КонецЕсли;
	
	УстановитьХранимуюАутентификацию = Неопределено;
	Если ОписаниеПользователяИБ.Свойство("ВходВПрограммуРазрешен") Тогда
		УстановитьХранимуюАутентификацию = ОписаниеПользователяИБ.ВходВПрограммуРазрешен = Истина;
	
	ИначеЕсли ОписаниеПользователяИБ.Свойство("АутентификацияСтандартная")
	        И ОписаниеПользователяИБ.АутентификацияСтандартная = Истина
	      ИЛИ ОписаниеПользователяИБ.Свойство("АутентификацияОС")
	        И ОписаниеПользователяИБ.АутентификацияОС = Истина
	      ИЛИ ОписаниеПользователяИБ.Свойство("АутентификацияOpenID")
	        И ОписаниеПользователяИБ.АутентификацияOpenID = Истина Тогда
		
		УстановитьХранимуюАутентификацию = Истина;
	КонецЕсли;
	
	Если УстановитьХранимуюАутентификацию = Неопределено Тогда
		НоваяАутентификация = СтараяАутентификация;
	Иначе
		Если УстановитьХранимуюАутентификацию Тогда
			ОписаниеПользователяИБ.Вставить("АутентификацияСтандартная", ХранимыеСвойства.АутентификацияСтандартная);
			ОписаниеПользователяИБ.Вставить("АутентификацияOpenID",      ХранимыеСвойства.АутентификацияOpenID);
			ОписаниеПользователяИБ.Вставить("АутентификацияОС",          ХранимыеСвойства.АутентификацияОС);
		Иначе
			ОписаниеПользователяИБ.Вставить("АутентификацияСтандартная", Ложь);
			ОписаниеПользователяИБ.Вставить("АутентификацияОС",          Ложь);
			ОписаниеПользователяИБ.Вставить("АутентификацияOpenID",      Ложь);
		КонецЕсли;
		НоваяАутентификация = ОписаниеПользователяИБ;
	КонецЕсли;
	
	Если ХранимыеСвойства.ВходВПрограммуРазрешен <> Пользователи.ВходВПрограммуРазрешен(НоваяАутентификация) Тогда
		ХранимыеСвойства.ВходВПрограммуРазрешен = Пользователи.ВходВПрограммуРазрешен(НоваяАутентификация);
		ПользовательОбъект.СвойстваПользователяИБ = Новый ХранилищеЗначения(ХранимыеСвойства);
		АвтоРеквизиты.СвойстваПользователяИБ = ПользовательОбъект.СвойстваПользователяИБ;
	КонецЕсли;
	
	// Проверка прав на изменение разрешения входа в программу.
	Если Пользователи.ВходВПрограммуРазрешен(НоваяАутентификация)
	  <> Пользователи.ВходВПрограммуРазрешен(СтараяАутентификация) Тогда
	
		Если Пользователи.ВходВПрограммуРазрешен(НоваяАутентификация)
		   И Не ПараметрыОбработки.УровеньДоступа.ИзменениеРазрешенияНаВход
		 Или Не Пользователи.ВходВПрограммуРазрешен(НоваяАутентификация)
		   И Не ПараметрыОбработки.УровеньДоступа.ОтключениеРазрешенияНаВход Тогда
			
			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Свойство("Пароль")
	   И ОписаниеПользователяИБ.Пароль <> Неопределено Тогда
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("Пользователь", ПользовательОбъект);
		ПараметрыВыполнения.Вставить("НовыйПароль",  ОписаниеПользователяИБ.Пароль);
		ПараметрыВыполнения.Вставить("СтарыйПароль", Неопределено);
		
		ОписаниеПользователяИБ.Свойство("СтарыйПароль", ПараметрыВыполнения.СтарыйПароль);
		
		ТекстОшибки = ОбработатьНовыйПароль(ПараметрыВыполнения);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	// Попытка записи пользователя ИБ.
	ТекстОшибки = "";
	ПользовательИБ = ПользовательОбъект;
	Если НЕ Пользователи.ЗаписатьПользователяИБ(
	         ИдентификаторПользователяИБ,
	         ОписаниеПользователяИБ,
	         СоздатьНовогоПользователяИБ,
	         ТекстОшибки,
	         ПользовательИБ) Тогда
		
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	// Поддержка обратной совместимости до версии "2.3.3" (начало).
	Если Не ПользовательОбъект.ДополнительныеСвойства.Свойство("СозданиеАдминистратора")
	   И РолиАдминистратораДоступны(ПользовательИБ) Тогда
		
		ПользовательОбъект.ДополнительныеСвойства.Вставить("СозданиеАдминистратора",
			НСтр("ru = 'Запись пользователя с ролями администратора.'"));
	КонецЕсли;
	// Поддержка обратной совместимости до версии "2.3.3" (окончание).
	
	Если ПользовательОбъект.ДополнительныеСвойства.Свойство("СозданиеАдминистратора")
	   И ЗначениеЗаполнено(ПользовательОбъект.ДополнительныеСвойства.СозданиеАдминистратора)
	   И РолиАдминистратораДоступны(ПользовательИБ) Тогда
		
		ПараметрыОбработки.Вставить("СозданиеАдминистратора",
			ПользовательОбъект.ДополнительныеСвойства.СозданиеАдминистратора);
	КонецЕсли;
	
	Если СоздатьНовогоПользователяИБ Тогда
		ОписаниеПользователяИБ.Вставить("РезультатДействия", "ДобавленПользовательИБ");
		ИдентификаторПользователяИБ = ОписаниеПользователяИБ.УникальныйИдентификатор;
		ПараметрыОбработки.Вставить("УстановкаПользователяИБ");
		
		Если Не ПараметрыОбработки.УровеньДоступа.ИзменениеРазрешенияНаВход
		   И ПараметрыОбработки.УровеньДоступа.УправлениеСписком
		   И Не Пользователи.ВходВПрограммуРазрешен(ПользовательИБ) Тогда
			
			ПользовательОбъект.Подготовлен = Истина;
			ПараметрыОбработки.БлокируемыеРеквизиты.Подготовлен = Истина;
		КонецЕсли;
	Иначе
		ОписаниеПользователяИБ.Вставить("РезультатДействия", "ИзмененПользовательИБ");
		
		Если Пользователи.ВходВПрограммуРазрешен(ПользовательИБ) Тогда
			ПользовательОбъект.Подготовлен = Ложь;
			ПараметрыОбработки.БлокируемыеРеквизиты.Подготовлен = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПользовательОбъект.ИдентификаторПользователяИБ = ИдентификаторПользователяИБ;
	
	ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", ИдентификаторПользователяИБ);
	
КонецПроцедуры

Функция УдалитьПользователяИБ(ПользовательОбъект, ПараметрыОбработки)
	
	ОписаниеПользователяИБ = ПользовательОбъект.ДополнительныеСвойства.ОписаниеПользователяИБ;
	СтарыйПользователь     = ПараметрыОбработки.СтарыйПользователь;
	
	// Очистка идентификатора пользователя ИБ.
	ПользовательОбъект.ИдентификаторПользователяИБ = Неопределено;
	
	Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТекстОшибки = "";
		ПользовательИБ = Неопределено;
		Если Пользователи.УдалитьПользователяИБ(
		         СтарыйПользователь.ИдентификаторПользователяИБ,
		         ТекстОшибки,
		         ПользовательИБ) Тогда
			
			// Установка идентификатора удаляемого пользователя ИБ, как результата действия Удалить.
			ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор",
				СтарыйПользователь.ИдентификаторПользователяИБ);
			
			ОписаниеПользователяИБ.Вставить("РезультатДействия", "УдаленПользовательИБ");
		Иначе
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтарыйПользователь.ИдентификаторПользователяИБ) Тогда
		
		ОписаниеПользователяИБ.Вставить(
			"РезультатДействия", "ОчищеноСопоставлениеСНесуществующимПользователемИБ");
	Иначе
		ОписаниеПользователяИБ.Вставить(
			"РезультатДействия", "НеТребуетсяУдалениеПользовательИБ");
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Для процедуры ЗавершитьОбработкуПользователяИБ.

Процедура ПроверитьИзмененияРеквизитовПользователя(ПользовательОбъект, ПараметрыОбработки)
	
	СтарыйПользователь   = ПараметрыОбработки.СтарыйПользователь;
	АвтоРеквизиты        = ПараметрыОбработки.АвтоРеквизиты;
	БлокируемыеРеквизиты = ПараметрыОбработки.БлокируемыеРеквизиты;
	
	Если ТипЗнч(ПользовательОбъект) = Тип("СправочникОбъект.Пользователи")
	   И БлокируемыеРеквизиты.Служебный <> ПользовательОбъект.Служебный Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
			           |Реквизит Служебный не допускается изменять в подписках на события.'"),
			ПользовательОбъект.Ссылка);
	КонецЕсли;
	
	Если БлокируемыеРеквизиты.Подготовлен <> ПользовательОбъект.Подготовлен Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
			           |Реквизит Подготовлен не допускается изменять в подписках на события.'"),
			ПользовательОбъект.Ссылка);
	КонецЕсли;
	
	Если АвтоРеквизиты.ИдентификаторПользователяИБ <> ПользовательОбъект.ИдентификаторПользователяИБ Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
			           |Реквизит ИдентификаторПользователяИБ не допускается изменять.
			           |Обновление реквизита выполняется автоматически.'"),
			ПользовательОбъект.Ссылка);
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ДанныеСовпадают(АвтоРеквизиты.СвойстваПользователяИБ,
				ПользовательОбъект.СвойстваПользователяИБ) Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
			           |Реквизит СвойстваПользователяИБ не допускается изменять.
			           |Обновление реквизита выполняется автоматически.'"),
			ПользовательОбъект.Ссылка);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СтарыйПользователь.ПометкаУдаления = Ложь
	   И ПользовательОбъект.ПометкаУдаления = Истина
	   И Пользователи.ВходВПрограммуРазрешен(ПользовательОбъект.ИдентификаторПользователяИБ) Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
			           |Нельзя помечать на удаление пользователя, которому разрешен вход в программу.'"),
			ПользовательОбъект.Ссылка);
	КонецЕсли;
	
	Если СтарыйПользователь.Недействителен = Ложь
	   И ПользовательОбъект.Недействителен = Истина
	   И Пользователи.ВходВПрограммуРазрешен(ПользовательОбъект.ИдентификаторПользователяИБ) Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
			           |Нельзя пометить недействительным пользователя, которому разрешен вход в программу.'"),
			ПользовательОбъект.Ссылка);
	КонецЕсли;
	
	Если СтарыйПользователь.Подготовлен = Ложь
	   И ПользовательОбъект.Подготовлен = Истина
	   И Пользователи.ВходВПрограммуРазрешен(ПользовательОбъект.ИдентификаторПользователяИБ) Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
			           |Нельзя пометить подготовленным пользователя, которому разрешен вход в программу.'"),
			ПользовательОбъект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура СброситьРесурсДатаАвтоматическогоЗапрещенияВхода(Пользователь)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей[0].ДатаАвтоматическогоЗапрещенияВхода = Неопределено;
			НаборЗаписей.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для процедуры КонтрольАктивностиПользователей.

Процедура ОтключитьНеактивныхИПросроченныхПользователей()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = ПользователиСлужебныйПовтИсп.Настройки();
	Если Не Настройки.ОбщиеНастройкиВхода Тогда
		ИзменитьЗаданиеКонтрольАктивностиПользователей(Ложь);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата",                                 '00010101');
	Запрос.УстановитьПараметр("НачалоДняТекущейДатыСеанса",                 НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ДатаВключенияПросрочкиПользователей",        Настройки.Пользователи.ПросрочкаРаботыВПрограммеДатаВключения);
	Запрос.УстановитьПараметр("ПросрочкаРаботыПользователей",               Настройки.Пользователи.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода);
	Запрос.УстановитьПараметр("ДатаВключенияПросрочкиВнешнихПользователей", Настройки.ВнешниеПользователи.ПросрочкаРаботыВПрограммеДатаВключения);
	Запрос.УстановитьПараметр("ПросрочкаРаботыВнешнихПользователей",        Настройки.ВнешниеПользователи.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <> &ПустаяДата
	|			ТОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <= &НачалоДняТекущейДатыСеанса
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СрокДействияИстек
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|		ПО (СведенияОПользователях.Пользователь = Пользователи.Ссылка)
	|ГДЕ
	|	ЕСТЬNULL(СведенияОПользователях.СрокДействияНеОграничен, ЛОЖЬ) = ЛОЖЬ
	|	И ЕСТЬNULL(СведенияОПользователях.ДатаАвтоматическогоЗапрещенияВхода, &ПустаяДата) = &ПустаяДата
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <> &ПустаяДата
	|				ТОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <= &НачалоДняТекущейДатыСеанса
	|			КОГДА ЕСТЬNULL(СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода, 0) <> 0
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата) = &ПустаяДата
	|							ТОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(&ДатаВключенияПросрочкиПользователей, ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|						КОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата), ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &ПросрочкаРаботыПользователей = 0
	|						ТОГДА ЛОЖЬ
	|					КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата) = &ПустаяДата
	|						ТОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(&ДатаВключенияПросрочкиПользователей, ДЕНЬ, &ПросрочкаРаботыПользователей)
	|					КОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата), ДЕНЬ, &ПросрочкаРаботыПользователей)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <> &ПустаяДата
	|			ТОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <= &НачалоДняТекущейДатыСеанса
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|		ПО (СведенияОПользователях.Пользователь = ВнешниеПользователи.Ссылка)
	|ГДЕ
	|	ЕСТЬNULL(СведенияОПользователях.СрокДействияНеОграничен, ЛОЖЬ) = ЛОЖЬ
	|	И ЕСТЬNULL(СведенияОПользователях.ДатаАвтоматическогоЗапрещенияВхода, &ПустаяДата) = &ПустаяДата
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <> &ПустаяДата
	|				ТОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <= &НачалоДняТекущейДатыСеанса
	|			КОГДА ЕСТЬNULL(СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода, 0) <> 0
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата) = &ПустаяДата
	|							ТОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(&ДатаВключенияПросрочкиПользователей, ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|						КОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата), ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &ПросрочкаРаботыВнешнихПользователей = 0
	|						ТОГДА ЛОЖЬ
	|					КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата) = &ПустаяДата
	|						ТОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(&ДатаВключенияПросрочкиВнешнихПользователей, ДЕНЬ, &ПросрочкаРаботыВнешнихПользователей)
	|					КОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата), ДЕНЬ, &ПросрочкаРаботыВнешнихПользователей)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИнформацияОбОшибке = Неопределено;
	Пока Выборка.Следующий() Цикл
		Пользователь = Выборка.Пользователь;
		Если НЕ Выборка.СрокДействияИстек
		   И Пользователи.ЭтоПолноправныйПользователь(Пользователь,, Ложь) Тогда
			Продолжить;
		КонецЕсли;
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(Пользователь)).ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Пользователь);
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь,
				"ИдентификаторПользователяИБ");
			ПользовательИБ = Неопределено;
			Если ТипЗнч(ИдентификаторПользователяИБ) = Тип("УникальныйИдентификатор") Тогда
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
					ИдентификаторПользователяИБ);
			КонецЕсли;
			Если ПользовательИБ <> Неопределено
			   И (    ПользовательИБ.АутентификацияСтандартная
			      Или ПользовательИБ.АутентификацияОС
			      Или ПользовательИБ.АутентификацияOpenID) Тогда
				
				ОбновляемыеСвойства = Новый Структура;
				ОбновляемыеСвойства.Вставить("АутентификацияСтандартная", Ложь);
				ОбновляемыеСвойства.Вставить("АутентификацияОС",          Ложь);
				ОбновляемыеСвойства.Вставить("АутентификацияOpenID",      Ложь);
				ТекстОшибки = "";
				ТекущийПользователь = Пользователь; // В ТекущийПользователь возвращается ПользовательИБ.
				Если Не Пользователи.ЗаписатьПользователяИБ(ПользовательИБ.УникальныйИдентификатор,
							ОбновляемыеСвойства, Ложь, ТекстОшибки, ТекущийПользователь) Тогда
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
			НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				СведенияОПользователе = НаборЗаписей.Добавить();
				СведенияОПользователе.Пользователь = Пользователь;
			Иначе
				СведенияОПользователе = НаборЗаписей[0];
			КонецЕсли;
			СведенияОПользователе.ДатаАвтоматическогоЗапрещенияВхода = НачалоДня(ТекущаяДатаСеанса());
			НаборЗаписей.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОтменитьТранзакцию();
			Если Выборка.СрокДействияИстек Тогда
				ШаблонКомментария =
					НСтр("ru = 'Не удалось снять пользователю ""%1"" признак
					           |""Вход в программу разрешен"" в связи с окончанием срока действия по причине:
					           |%2'");
			Иначе
				ШаблонКомментария =
					НСтр("ru = 'Не удалось снять пользователю ""%1"" признак
					           |""Вход в программу разрешен"" в связи с отсутствием работы
					           |в программе более установленного срока по причине:
					           |%2'");
			КонецЕсли;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Пользователи.Ошибка автоматического запрещения входа в программу'",
				     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.НайтиПоТипу(ТипЗнч(Пользователь)),
				Пользователь,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария,
					Пользователь, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
		КонецПопытки;
	КонецЦикла;
	
	Если ИнформацияОбОшибке <> Неопределено
	 Или ЗначениеЗаполнено(Настройки.Пользователи.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	 Или ЗначениеЗаполнено(Настройки.ВнешниеПользователи.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода) Тогда
		// Для проверки просрочки работы в программе, задание выключить нельзя.
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|ГДЕ
	|	 СведенияОПользователях.СрокДействия <> &ПустаяДата
	|	И СведенияОПользователях.ДатаАвтоматическогоЗапрещенияВхода = &ПустаяДата";
	
	Если Запрос.Выполнить().Пустой() Тогда
		ИзменитьЗаданиеКонтрольАктивностиПользователей(Ложь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для процедуры ОбработатьИнтерфейсРолей.

Процедура ЗаполнитьРоли(Параметры)
	
	ПрочитанныеРоли = Параметры.ОсновнойПараметр;
	КоллекцияРолей  = Параметры.КоллекцияРолей;
	
	КоллекцияРолей.Очистить();
	ДобавленныеРоли = Новый Соответствие;
	
	Для Каждого ОписаниеРоли Из ПрочитанныеРоли Цикл
		Роль = ?(ТипЗнч(ПрочитанныеРоли) = Тип("Массив"), ОписаниеРоли, ОписаниеРоли.Роль);
		Если ДобавленныеРоли.Получить(Роль) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДобавленныеРоли.Вставить(Роль, Истина);
		Если ТипЗнч(Роль) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			ИмяРоли = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Роль, "Имя");
			ИмяРоли = ?(ИмяРоли = Неопределено, "(" + Роль.УникальныйИдентификатор() + ")", ИмяРоли);
			ИмяРоли = ?(Лев(ИмяРоли, 1) = "?", Сред(ИмяРоли, 2), ИмяРоли);
			КоллекцияРолей.Добавить().Роль = СокрЛП(ИмяРоли);
		Иначе
			КоллекцияРолей.Добавить().Роль = Роль;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДеревоРолей(Параметры);
	
КонецПроцедуры

Процедура НастроитьИнтерфейсРолейПриСозданииФормы(Параметры)
	
	Форма    = Параметры.Форма;
	Элементы = Форма.Элементы;
	
	// Условное оформление недоступных ролей.
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ПоясняющийОшибкуТекст.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Роли.ЭтоНедоступнаяРоль");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("Роли");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	// Условное оформление несуществующих ролей.
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Роли.ЭтоНесуществующаяРоль");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("Роли");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	НастроитьИнтерфейсРолейПриЧтенииНаСервере(Параметры);
	
КонецПроцедуры

Процедура НастроитьИнтерфейсРолейПриЧтенииНаСервере(Параметры)
	
	Форма    = Параметры.Форма;
	Элементы = Форма.Элементы;
	
	// Установка начальных значений перед загрузкой данных из настроек на сервере
	// для случая, когда данные еще не были записаны и не загружаются.
	Форма.ПоказатьПодсистемыРолей = Ложь;
	Элементы.РолиПоказатьПодсистемыРолей.Пометка = Ложь;
	
	// Для нового элемента показать все роли, для существующего - только выбранные роли.
	Если Элементы.Найти("РолиПоказатьТолькоВыбранныеРоли") <> Неопределено Тогда
		Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = Параметры.ОсновнойПараметр;
	КонецЕсли;
	
	ОбновитьДеревоРолей(Параметры);
	
КонецПроцедуры

Процедура НастроитьИнтерфейсРолейПриЗагрузкеНастроек(Параметры)
	
	Настройки = Параметры.ОсновнойПараметр;
	Форма     = Параметры.Форма;
	Элементы  = Форма.Элементы;
	
	ПоказатьПодсистемыРолей = Форма.ПоказатьПодсистемыРолей;
	
	Если Настройки["ПоказатьПодсистемыРолей"] = Ложь Тогда
		Форма.ПоказатьПодсистемыРолей = Ложь;
		Элементы.РолиПоказатьПодсистемыРолей.Пометка = Ложь;
	Иначе
		Форма.ПоказатьПодсистемыРолей = Истина;
		Элементы.РолиПоказатьПодсистемыРолей.Пометка = Истина;
	КонецЕсли;
	
	Если ПоказатьПодсистемыРолей <> Форма.ПоказатьПодсистемыРолей Тогда
		ОбновитьДеревоРолей(Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТолькоПросмотрРолей(Параметры)
	
	Элементы               = Параметры.Форма.Элементы;
	ТолькоПросмотрРолей    = Параметры.ОсновнойПараметр;
	
	Если ТолькоПросмотрРолей <> Неопределено Тогда
		
		Элементы.Роли.ТолькоПросмотр = ТолькоПросмотрРолей;
		
		Если Элементы.Найти("РолиУстановитьФлажки") <> Неопределено Тогда
			Элементы.РолиУстановитьФлажки.Доступность = НЕ ТолькоПросмотрРолей;
		КонецЕсли;
		Если Элементы.Найти("РолиСнятьФлажки") <> Неопределено Тогда
			Элементы.РолиСнятьФлажки.Доступность = НЕ ТолькоПросмотрРолей;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТолькоВыбранныеРоли(Параметры)
	
	Параметры.Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка =
		НЕ Параметры.Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
	
	ОбновитьДеревоРолей(Параметры);
	
КонецПроцедуры

Процедура ГруппировкаПоПодсистемам(Параметры)
	
	Параметры.Форма.ПоказатьПодсистемыРолей = НЕ Параметры.Форма.ПоказатьПодсистемыРолей;
	Параметры.Форма.Элементы.РолиПоказатьПодсистемыРолей.Пометка = Параметры.Форма.ПоказатьПодсистемыРолей;
	
	ОбновитьДеревоРолей(Параметры);
	
КонецПроцедуры

Процедура ОбновитьДеревоРолей(Параметры)
	
	Форма           = Параметры.Форма;
	Элементы        = Форма.Элементы;
	Роли            = Форма.Роли;
	КоллекцияРолей  = Параметры.КоллекцияРолей;
	НазначениеРолей = Параметры.НазначениеРолей;
	
	СкрытьРольПолныеПрава = Параметры.Свойство("СкрытьРольПолныеПрава")
	                      И Параметры.СкрытьРольПолныеПрава = Истина;
	
	Если Элементы.Найти("РолиПоказатьТолькоВыбранныеРоли") <> Неопределено Тогда
		Если НЕ Элементы.РолиПоказатьТолькоВыбранныеРоли.Доступность Тогда
			Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = Истина;
		КонецЕсли;
		ПоказатьТолькоВыбранныеРоли = Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
	Иначе
		ПоказатьТолькоВыбранныеРоли = Истина;
	КонецЕсли;
	
	ПоказатьПодсистемыРолей = Параметры.Форма.ПоказатьПодсистемыРолей;
	
	// Запоминание текущей строки.
	ТекущаяПодсистема = "";
	ТекущаяРоль       = "";
	
	Если Элементы.Роли.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Роли.НайтиПоИдентификатору(Элементы.Роли.ТекущаяСтрока);
		
		Если ТекущиеДанные = Неопределено Тогда
			Элементы.Роли.ТекущаяСтрока = Неопределено;
			
		ИначеЕсли ТекущиеДанные.ЭтоРоль Тогда
			ТекущаяРоль       = ТекущиеДанные.Имя;
			ТекущаяПодсистема = ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, "",
				ТекущиеДанные.ПолучитьРодителя().Имя);
		Иначе
			ТекущаяРоль       = "";
			ТекущаяПодсистема = ТекущиеДанные.Имя;
		КонецЕсли;
	КонецЕсли;
	
	ДеревоРолей = ПользователиСлужебныйПовтИсп.ДеревоРолей(
		ПоказатьПодсистемыРолей, НазначениеРолей).Скопировать();
	
	ДеревоРолей.Колонки.Добавить("ЭтоНедоступнаяРоль",    Новый ОписаниеТипов("Булево"));
	ДеревоРолей.Колонки.Добавить("ЭтоНесуществующаяРоль", Новый ОписаниеТипов("Булево"));
	ДобавитьИменаНесуществующихИНедоступныхРолей(Параметры, ДеревоРолей);
	
	ДеревоРолей.Колонки.Добавить("Пометка",       Новый ОписаниеТипов("Булево"));
	ДеревоРолей.Колонки.Добавить("НомерКартинки", Новый ОписаниеТипов("Число"));
	ПодготовитьДеревоРолей(ДеревоРолей.Строки, СкрытьРольПолныеПрава, ПоказатьТолькоВыбранныеРоли,
		Параметры.КоллекцияРолей);
	
	Параметры.Форма.ЗначениеВРеквизитФормы(ДеревоРолей, "Роли");
	
	Элементы.Роли.Отображение = ?(ДеревоРолей.Строки.Найти(Ложь, "ЭтоРоль") = Неопределено,
		ОтображениеТаблицы.Список, ОтображениеТаблицы.Дерево);
	
	// Восстановление текущей строки.
	Отбор = Новый Структура("ЭтоРоль, Имя", Ложь, ТекущаяПодсистема);
	НайденныеСтроки = ДеревоРолей.Строки.НайтиСтроки(Отбор, Истина);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ОписаниеПодсистемы = НайденныеСтроки[0];
		
		ИндексПодсистемы = ?(ОписаниеПодсистемы.Родитель = Неопределено,
			ДеревоРолей.Строки, ОписаниеПодсистемы.Родитель.Строки).Индекс(ОписаниеПодсистемы);
		
		СтрокаПодсистемы = ДанныеФормыКоллекцияЭлементовДерева(Роли,
			ОписаниеПодсистемы).Получить(ИндексПодсистемы);
		
		Если ЗначениеЗаполнено(ТекущаяРоль) Тогда
			Отбор = Новый Структура("ЭтоРоль, Имя", Истина, ТекущаяРоль);
			НайденныеСтроки = ОписаниеПодсистемы.Строки.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() <> 0 Тогда
				ОписаниеРоли = НайденныеСтроки[0];
				Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьЭлементы().Получить(
					ОписаниеПодсистемы.Строки.Индекс(ОписаниеРоли)).ПолучитьИдентификатор();
			Иначе
				Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьИдентификатор();
			КонецЕсли;
		Иначе
			Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьИдентификатор();
		КонецЕсли;
	Иначе
		Отбор = Новый Структура("ЭтоРоль, Имя", Истина, ТекущаяРоль);
		НайденныеСтроки = ДеревоРолей.Строки.НайтиСтроки(Отбор, Истина);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			ОписаниеРоли = НайденныеСтроки[0];
			
			ИндексРоли = ?(ОписаниеРоли.Родитель = Неопределено,
				ДеревоРолей.Строки, ОписаниеРоли.Родитель.Строки).Индекс(ОписаниеРоли);
			
			СтрокаРоли = ДанныеФормыКоллекцияЭлементовДерева(Роли, ОписаниеРоли).Получить(ИндексРоли);
			Элементы.Роли.ТекущаяСтрока = СтрокаРоли.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьИменаНесуществующихИНедоступныхРолей(Параметры, ДеревоРолей)
	
	КоллекцияРолей  = Параметры.КоллекцияРолей;
	ВсеРоли = ВсеРоли().Соответствие;
	
	НедоступныеРоли    = Новый СписокЗначений;
	НесуществующиеРоли = Новый СписокЗначений;
	
	// Добавление несуществующих ролей.
	Для каждого Строка Из КоллекцияРолей Цикл
		Отбор = Новый Структура("ЭтоРоль, Имя", Истина, Строка.Роль);
		Если ДеревоРолей.Строки.НайтиСтроки(Отбор, Истина).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		Синоним = ВсеРоли.Получить(Строка.Роль);
		Если Синоним = Неопределено Тогда
			НесуществующиеРоли.Добавить(Строка.Роль, "? " + Строка.Роль);
		Иначе
			НедоступныеРоли.Добавить(Строка.Роль, Синоним);
		КонецЕсли;
	КонецЦикла;
	
	НедоступныеРоли.СортироватьПоПредставлению();
	Для Каждого ОписаниеРоли Из НедоступныеРоли Цикл
		Индекс = НедоступныеРоли.Индекс(ОписаниеРоли);
		СтрокаДерева = ДеревоРолей.Строки.Вставить(Индекс);
		СтрокаДерева.Имя     = ОписаниеРоли.Значение;
		СтрокаДерева.Синоним = ОписаниеРоли.Представление;
		СтрокаДерева.ЭтоРоль = Истина;
		СтрокаДерева.ЭтоНедоступнаяРоль = Истина;
	КонецЦикла;
	
	НесуществующиеРоли.СортироватьПоПредставлению();
	Для Каждого ОписаниеРоли Из НесуществующиеРоли Цикл
		Индекс = НесуществующиеРоли.Индекс(ОписаниеРоли);
		СтрокаДерева = ДеревоРолей.Строки.Вставить(Индекс);
		СтрокаДерева.Имя     = ОписаниеРоли.Значение;
		СтрокаДерева.Синоним = ОписаниеРоли.Представление;
		СтрокаДерева.ЭтоРоль = Истина;
		СтрокаДерева.ЭтоНесуществующаяРоль = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьДеревоРолей(Знач Коллекция, Знач СкрытьРольПолныеПрава, Знач ПоказатьТолькоВыбранныеРоли, КоллекцияРолей)
	
	Индекс = Коллекция.Количество()-1;
	
	Пока Индекс >= 0 Цикл
		Строка = Коллекция[Индекс];
		
		ПодготовитьДеревоРолей(Строка.Строки, СкрытьРольПолныеПрава, ПоказатьТолькоВыбранныеРоли,
			КоллекцияРолей);
		
		Если Строка.ЭтоРоль Тогда
			Если СкрытьРольПолныеПрава
			   И (    ВРег(Строка.Имя) = ВРег("ПолныеПрава")
			      ИЛИ ВРег(Строка.Имя) = ВРег("АдминистраторСистемы")) Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.НомерКартинки = 7;
				Строка.Пометка = КоллекцияРолей.НайтиСтроки(
					Новый Структура("Роль", Строка.Имя)).Количество() > 0;
				
				Если ПоказатьТолькоВыбранныеРоли И НЕ Строка.Пометка Тогда
					Коллекция.Удалить(Индекс);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Строка.Строки.Количество() = 0 Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.НомерКартинки = 6;
				Строка.Пометка = Строка.Строки.НайтиСтроки(
					Новый Структура("Пометка", Ложь)).Количество() = 0;
			КонецЕсли;
		КонецЕсли;
		
		Индекс = Индекс-1;
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеФормыКоллекцияЭлементовДерева(Знач ДанныеФормыДерево, Знач СтрокаДереваЗначений)
	
	Если СтрокаДереваЗначений.Родитель = Неопределено Тогда
		ДанныеФормыКоллекцияЭлементовДерева = ДанныеФормыДерево.ПолучитьЭлементы();
	Иначе
		ИндексРодителя = ?(СтрокаДереваЗначений.Родитель.Родитель = Неопределено,
			СтрокаДереваЗначений.Владелец().Строки, СтрокаДереваЗначений.Родитель.Родитель.Строки).Индекс(
				СтрокаДереваЗначений.Родитель);
			
		ДанныеФормыКоллекцияЭлементовДерева = ДанныеФормыКоллекцияЭлементовДерева(ДанныеФормыДерево,
			СтрокаДереваЗначений.Родитель).Получить(ИндексРодителя).ПолучитьЭлементы();
	КонецЕсли;
	
	Возврат ДанныеФормыКоллекцияЭлементовДерева;
	
КонецФункции

Процедура ОбновитьСоставРолей(Параметры)
	
	Роли                        = Параметры.Форма.Роли;
	ПоказатьТолькоВыбранныеРоли = Параметры.Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
	НазначениеРолей             = Параметры.НазначениеРолей;
	
	ВсеРоли         = ВсеРоли().Массив;
	НедоступныеРоли = ПользователиСлужебныйПовтИсп.НедоступныеРоли(НазначениеРолей);
	
	Если Параметры.ОсновнойПараметр = "ВключитьВсе" Тогда
		ИдентификаторСтроки = Неопределено;
		Добавить            = Истина;
		
	ИначеЕсли Параметры.ОсновнойПараметр = "ИсключитьВсе" Тогда
		ИдентификаторСтроки = Неопределено;
		Добавить            = Ложь;
	Иначе
		ИдентификаторСтроки = Параметры.Форма.Элементы.Роли.ТекущаяСтрока;
	КонецЕсли;
	
	Если ИдентификаторСтроки = Неопределено Тогда
		
		БылУстановленАдминистративныйДоступ = Параметры.КоллекцияРолей.НайтиСтроки(
			Новый Структура("Роль", "ПолныеПрава")).Количество() > 0;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
		Иначе
			МодульУправлениеДоступомСлужебный = Неопределено;
		КонецЕсли;
		
		// Обработка всех.
		КоллекцияРолей = Параметры.КоллекцияРолей;
		КоллекцияРолей.Очистить();
		Если Добавить Тогда
			Для Каждого ИмяРоли Из ВсеРоли Цикл
				
				Если ИмяРоли = "ПолныеПрава"
				 Или ИмяРоли = "АдминистраторСистемы"
				 Или НедоступныеРоли.Получить(ИмяРоли) <> Неопределено
				 Или ВРег(Лев(ИмяРоли, СтрДлина("Удалить"))) = ВРег("Удалить")
				 Или МодульУправлениеДоступомСлужебный <> Неопределено
				     И МодульУправлениеДоступомСлужебный.ЭтоПрофильнаяРоль(ИмяРоли) Тогда
					
					Продолжить;
				КонецЕсли;
				КоллекцияРолей.Добавить().Роль = ИмяРоли;
			КонецЦикла;
		КонецЕсли;
		
		Если Параметры.Свойство("ЗапретИзмененияАдминистративногоДоступа")
			И Параметры.ЗапретИзмененияАдминистративногоДоступа Тогда
			
			УстановленАдминистративныйДоступ = Параметры.КоллекцияРолей.НайтиСтроки(
				Новый Структура("Роль", "ПолныеПрава")).Количество() > 0;
			
			Если УстановленАдминистративныйДоступ И НЕ БылУстановленАдминистративныйДоступ Тогда
				Отбор = Новый Структура("Роль", "ПолныеПрава");
				Параметры.КоллекцияРолей.НайтиСтроки(Отбор).Удалить(0);
				
			ИначеЕсли БылУстановленАдминистративныйДоступ И НЕ УстановленАдминистративныйДоступ Тогда
				КоллекцияРолей.Добавить().Роль = "ПолныеПрава";
			КонецЕсли;
		КонецЕсли;
		
		Если ПоказатьТолькоВыбранныеРоли Тогда
			Если КоллекцияРолей.Количество() > 0 Тогда
				ОбновитьДеревоРолей(Параметры);
			Иначе
				Роли.ПолучитьЭлементы().Очистить();
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Роли.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущиеДанные.ЭтоРоль Тогда
			ДобавитьУдалитьРоль(Параметры, ТекущиеДанные.Имя, ТекущиеДанные.Пометка);
		Иначе
			ДобавитьУдалитьРолиПодсистемы(Параметры, ТекущиеДанные.ПолучитьЭлементы(), ТекущиеДанные.Пометка);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПометкуВыбранныхРолей(Параметры, Роли.ПолучитьЭлементы());
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ДобавитьУдалитьРоль(Параметры, Знач Роль, Знач Добавить)
	
	НайденныеРоли = Параметры.КоллекцияРолей.НайтиСтроки(Новый Структура("Роль", Роль));
	
	Если Добавить Тогда
		Если НайденныеРоли.Количество() = 0 Тогда
			Параметры.КоллекцияРолей.Добавить().Роль = Роль;
		КонецЕсли;
	Иначе
		Если НайденныеРоли.Количество() > 0 Тогда
			Параметры.КоллекцияРолей.Удалить(НайденныеРоли[0]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьУдалитьРолиПодсистемы(Параметры, Знач Коллекция, Знач Добавить)
	
	Для каждого Строка Из Коллекция Цикл
		Если Строка.ЭтоРоль Тогда
			ДобавитьУдалитьРоль(Параметры, Строка.Имя, Добавить);
		Иначе
			ДобавитьУдалитьРолиПодсистемы(Параметры, Строка.ПолучитьЭлементы(), Добавить);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПометкуВыбранныхРолей(Параметры, Знач Коллекция)
	
	ПоказатьТолькоВыбранныеРоли = Параметры.Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
	
	Индекс = Коллекция.Количество()-1;
	
	Пока Индекс >= 0 Цикл
		Строка = Коллекция[Индекс];
		
		Если Строка.ЭтоРоль Тогда
			Отбор = Новый Структура("Роль", Строка.Имя);
			Строка.Пометка = Параметры.КоллекцияРолей.НайтиСтроки(Отбор).Количество() > 0;
			Если ПоказатьТолькоВыбранныеРоли И НЕ Строка.Пометка Тогда
				Коллекция.Удалить(Индекс);
			КонецЕсли;
		Иначе
			ОбновитьПометкуВыбранныхРолей(Параметры, Строка.ПолучитьЭлементы());
			Если Строка.ПолучитьЭлементы().Количество() = 0 Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.Пометка = Истина;
				Для каждого Элемент Из Строка.ПолучитьЭлементы() Цикл
					Если НЕ Элемент.Пометка Тогда
						Строка.Пометка = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Индекс = Индекс-1;
	КонецЦикла;
	
КонецПроцедуры

Функция ПользователиДобавленныеСПомощьюКонфигуратора()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.Наименование КАК ПолноеИмя,
	|	Пользователи.ИдентификаторПользователяИБ,
	|	ЛОЖЬ КАК ЭтоВнешнийПользователь
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка,
	|	ВнешниеПользователи.Наименование,
	|	ВнешниеПользователи.ИдентификаторПользователяИБ,
	|	ИСТИНА
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор";
	
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", Новый УникальныйИдентификатор);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	ПользователейДобавленоВКонфигураторе = 0;
	
	Для Каждого ПользовательИБ Из ПользователиИБ Цикл
		
		СвойстваПользовательИБ = Пользователи.НовоеОписаниеПользователяИБ();
		Пользователи.ПрочитатьПользователяИБ(ПользовательИБ.УникальныйИдентификатор, СвойстваПользовательИБ);
		
		Строка = Выгрузка.Найти(СвойстваПользовательИБ.УникальныйИдентификатор, "ИдентификаторПользователяИБ");
		
		Если Строка = Неопределено Тогда
			ПользователейДобавленоВКонфигураторе = ПользователейДобавленоВКонфигураторе + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПользователейДобавленоВКонфигураторе;
	
КонецФункции

#КонецОбласти
