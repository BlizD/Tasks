////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция формирует представление с видом для формы ввода адреса.
//
// Параметры:
//    СтруктураАдреса  - Структура - Адрес в виде структуры. Описание структур см. в функциях
//                                    СведенияОбАдресе и ПредыдущаяСтруктураКонтактнойИнформацииXML
//    Представление    - Строка - Представление адреса.
//    НаименованиеВида - Строка - Наименование вида.
//
// Возвращаемое значение:
//    Строка - Представление адреса с видом.
//
Функция СформироватьПредставлениеАдреса(СтруктураАдреса, Представление, НаименованиеВида = Неопределено) Экспорт
	
	Представление = "";
	
	Если ТипЗнч(СтруктураАдреса) <> Тип("Структура") Тогда
		Возврат Представление;
	КонецЕсли;
	
	ФорматФИАС = СтруктураАдреса.Свойство("Округ");
	
	Если СтруктураАдреса.Свойство("Страна") Тогда
		Представление = СтруктураАдреса.Страна;
	КонецЕсли;
	
	ПредставлениеАдресаПоСтруктуре(СтруктураАдреса, "Индекс", Представление);
	ПредставлениеАдресаПоСтруктуре(СтруктураАдреса, "Регион", Представление, "РегионСокращение", ФорматФИАС);
	ПредставлениеАдресаПоСтруктуре(СтруктураАдреса, "Округ", Представление, "ОкругСокращение", ФорматФИАС);
	ПредставлениеАдресаПоСтруктуре(СтруктураАдреса, "Район", Представление, "РайонСокращение", ФорматФИАС);
	ПредставлениеАдресаПоСтруктуре(СтруктураАдреса, "Город", Представление, "ГородСокращение", ФорматФИАС);
	ПредставлениеАдресаПоСтруктуре(СтруктураАдреса, "ВнутригородскойРайон", Представление, "ВнутригородскойРайонСокращение", ФорматФИАС);
	ПредставлениеАдресаПоСтруктуре(СтруктураАдреса, "НаселенныйПункт", Представление, "НаселенныйПунктСокращение", ФорматФИАС);
	ПредставлениеАдресаПоСтруктуре(СтруктураАдреса, "Улица", Представление, "УлицаСокращение", ФорматФИАС);
	ПредставлениеАдресаПоСтруктуре(СтруктураАдреса, "ДополнительнаяТерритория", Представление, "ДополнительнаяТерриторияСокращение", ФорматФИАС);
	ПредставлениеАдресаПоСтруктуре(СтруктураАдреса, "ЭлементДополнительнойТерритории", Представление, "ЭлементДополнительнойТерриторииСокращение", ФорматФИАС);
	
	Если СтруктураАдреса.Свойство("Здание") Тогда
		ДополнитьПредставлениеАдреса(СокрЛП(ЗначениеПоКлючуСтруктуры("Номер", СтруктураАдреса.Здание)), ", " + ЗначениеПоКлючуСтруктуры("ТипЗдания", СтруктураАдреса) + " № ", Представление);
	Иначе
		ДополнитьПредставлениеАдреса(СокрЛП(ЗначениеПоКлючуСтруктуры("Дом", СтруктураАдреса)), ", " + ЗначениеПоКлючуСтруктуры("ТипДома", СтруктураАдреса) + " № ", Представление);
	КонецЕсли;
	
	Если СтруктураАдреса.Свойство("Корпуса") Тогда
		Для каждого Корпус Из СтруктураАдреса.Корпуса Цикл
			ДополнитьПредставлениеАдреса(СокрЛП(ЗначениеПоКлючуСтруктуры("Номер", Корпус )), ", " + ЗначениеПоКлючуСтруктуры("ТипКорпуса", Корпус)+ " ", Представление);
		КонецЦикла;
	Иначе
		ДополнитьПредставлениеАдреса(СокрЛП(ЗначениеПоКлючуСтруктуры("Корпус", СтруктураАдреса)), ", " + ЗначениеПоКлючуСтруктуры("ТипКорпуса", СтруктураАдреса)+ " ", Представление);
	КонецЕсли;
	
	Если СтруктураАдреса.Свойство("Помещения") Тогда
		Для каждого Помещение Из СтруктураАдреса.Помещения Цикл
			ДополнитьПредставлениеАдреса(СокрЛП(ЗначениеПоКлючуСтруктуры("Номер", Помещение)), ", " + ЗначениеПоКлючуСтруктуры("ТипПомещения", Помещение)+ " ", Представление);
		КонецЦикла;
	Иначе
		ДополнитьПредставлениеАдреса(СокрЛП(ЗначениеПоКлючуСтруктуры("Квартира", СтруктураАдреса)), ", " + ЗначениеПоКлючуСтруктуры("ТипКвартиры", СтруктураАдреса) + " ", Представление);
	КонецЕсли;
	
	НаименованиеВида = ЗначениеПоКлючуСтруктуры("НаименованиеВида", СтруктураАдреса);
	ПредставлениеСВидом = НаименованиеВида + ": " + Представление;
	
	Возврат ПредставлениеСВидом;
	
КонецФункции

// Формирует строковое представление телефона.
//
// Параметры:
//    КодСтраны     - Строка - код страны.
//    КодГорода     - Строка - код города.
//    НомерТелефона - Строка - номер телефона.
//    Добавочный    - Строка - добавочный номер.
//    Комментарий   - Строка - комментарий.
//
// Возвращаемое значение - Строка - представление телефона.
//
Функция СформироватьПредставлениеТелефона(КодСтраны, КодГорода, НомерТелефона, Добавочный, Комментарий) Экспорт
	
	Представление = СокрЛП(КодСтраны);
	Если Не ПустаяСтрока(Представление) И Не СтрНачинаетсяС(Представление, "+") Тогда
		Представление = "+" + Представление;
	КонецЕсли;
	
	Если Не ПустаяСтрока(КодГорода) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + "(" + СокрЛП(КодГорода) + ")";
	КонецЕсли;
	
	Если Не ПустаяСтрока(НомерТелефона) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + СокрЛП(НомерТелефона);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Добавочный) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + "доб. " + СокрЛП(Добавочный);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Комментарий) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + СокрЛП(Комментарий);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Возвращает структуру контактной информации по типу.
//
// Параметры:
//    ТипКИ - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//
// Возвращаемое значение:
//    Структура - пустая структура контактной информации, ключи - имена полей, значения поля.
//
Функция СтруктураКонтактнойИнформацииПоТипу(ТипКИ, ФорматАдреса = "КЛАДР") Экспорт
	
	Если ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		Возврат СтруктураПолейАдреса(ФорматАдреса);
	ИначеЕсли ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		Возврат СтруктураПолейТелефона();
	Иначе
		Возврат Новый Структура;
	КонецЕсли;
	
КонецФункции

// Возвращает признак того, является ли строка данных контактной информации XML данными.
//
// Параметры:
//     Текст - Строка - Проверяемая строка.
//
// Возвращаемое значение:
//     Булево - результат проверки.
//
Функция ЭтоКонтактнаяИнформацияВXML(Знач Текст) Экспорт
	
	Возврат ТипЗнч(Текст) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(Текст), "<");
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

//  Возвращает XPath для района.
//
// Возвращаемое значение:
//      Строка - XPath
//
Функция XPathРайона() Экспорт
	
	Возврат "СвРайМО/Район";
	
КонецФункции

// Возвращает пространство имен для оперирования с XDTO контактной информации.
//
// Возвращаемое значение:
//      Строка - пространство имен.
//
Функция ПространствоИмен() Экспорт
	Возврат "http://www.v8.1c.ru/ssl/contactinfo";
КонецФункции

//  Возвращает массив структур с информацией о частях адреса согласно приказу ФНС ММВ-7-1/525 от 31.08.2011.
//
// Возвращаемое значение:
//      Массив - содержит структуры - описания.
//
Функция ТипыОбъектовАдресацииАдресаРФ() Экспорт
	
	Результат = Новый Массив;
	
	// Код, Наименование, Тип, Порядок, КодФИАС
	// Тип: 1 - владение, 2 - здание, 3 - помещение.
	
	Результат.Добавить(СтрокаОбъектаАдресации("1010", НСтр("ru = 'Дом'"),          1, 1, 2));
	Результат.Добавить(СтрокаОбъектаАдресации("1020", НСтр("ru = 'Владение'"),     1, 2, 1));
	Результат.Добавить(СтрокаОбъектаАдресации("1030", НСтр("ru = 'Домовладение'"), 1, 3, 3));
	
	Результат.Добавить(СтрокаОбъектаАдресации("1050", НСтр("ru = 'Корпус'"),     2, 1));
	Результат.Добавить(СтрокаОбъектаАдресации("1060", НСтр("ru = 'Строение'"),   2, 2, 1));
	Результат.Добавить(СтрокаОбъектаАдресации("1080", НСтр("ru = 'Литера'"),     2, 3, 3));
	Результат.Добавить(СтрокаОбъектаАдресации("1070", НСтр("ru = 'Сооружение'"), 2, 4, 2));
	Результат.Добавить(СтрокаОбъектаАдресации("1040", НСтр("ru = 'Участок'"),    2, 5));
	
	Результат.Добавить(СтрокаОбъектаАдресации("2010", НСтр("ru = 'Квартира'"),  3, 1));
	Результат.Добавить(СтрокаОбъектаАдресации("2030", НСтр("ru = 'Офис'"),      3, 2));
	Результат.Добавить(СтрокаОбъектаАдресации("2040", НСтр("ru = 'Бокс'"),      3, 3));
	Результат.Добавить(СтрокаОбъектаАдресации("2020", НСтр("ru = 'Помещение'"), 3, 4));
	Результат.Добавить(СтрокаОбъектаАдресации("2050", НСтр("ru = 'Комната'"),   3, 5));
	Результат.Добавить(СтрокаОбъектаАдресации("2060", НСтр("ru = 'Этаж'"),   3, 6));
	//  Наши сокращения для поддержки обратной совместимости при парсинге.
	Результат.Добавить(СтрокаОбъектаАдресации("2010", НСтр("ru = 'кв.'"),       3, 6));
	Результат.Добавить(СтрокаОбъектаАдресации("2030", НСтр("ru = 'оф.'"),       3, 7));
	
	// Уточняющие объекты
	Результат.Добавить(СтрокаОбъектаАдресации("10100000", НСтр("ru = 'Почтовый индекс'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10200000", НСтр("ru = 'Адресная точка'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10300000", НСтр("ru = 'Садовое товарищество'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10400000", НСтр("ru = 'Элемент улично-дорожной сети, планировочной структуры дополнительного адресного элемента'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10500000", НСтр("ru = 'Промышленная зона'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10600000", НСтр("ru = 'Гаражно-строительный кооператив'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10700000", НСтр("ru = 'Территория'")));
	
	Возврат Результат;
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

//  Возвращает код дополнительной части адреса для сериализации.
//
//  Параметры:
//      СтрокаЗначения - Строка - значение для поиска, например "Дом", "Корпус", "Литера".
//
// Возвращаемое значение:
//      Число - код
// 
Функция КодСериализацииОбъектаАдресации(СтрокаЗначения) Экспорт
	
	Ключ = ВРег(СокрЛП(СтрокаЗначения));
	Для Каждого Элемент Из ТипыОбъектовАдресацииАдресаРФ() Цикл
		Если Элемент.Ключ = Ключ Тогда
			Возврат Элемент.Код;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

//  Возвращает код дополнительной части адреса для почтового индекса.
//
// Возвращаемое значение:
//      Строка - код
//
Функция КодСериализацииПочтовогоИндекса() Экспорт
	
	Возврат КодСериализацииОбъектаАдресации(НСтр("ru = 'Почтовый индекс'"));
	
КонецФункции

//  Возвращает XPath для почтового индекса.
//
// Возвращаемое значение:
//      Строка - XPath
//
Функция XPathПочтовогоИндекса() Экспорт
	
	Возврат "ДопАдрЭл[ТипАдрЭл='" + КодСериализацииПочтовогоИндекса() + "']";
	
КонецФункции

Функция КодСериализацииДополнительногоОбъектаАдресации(Уровень, ТипаАдресногоЭлемента = "") Экспорт
	
	Если Уровень = 90 Тогда
		Если ВРег(ТипаАдресногоЭлемента) = "ГСК" Тогда
			Возврат "10600000";
		ИначеЕсли ВРег(ТипаАдресногоЭлемента) = "СНТ" Тогда
			Возврат "10300000";
		ИначеЕсли ВРег(ТипаАдресногоЭлемента) = "ТЕР" Тогда
			Возврат "10700000";
		Иначе
			Возврат "10200000";
		КонецЕсли;
	ИначеЕсли Уровень = 91 Тогда
		Возврат "10400000";
	КонецЕсли;
	
	// Все остальное - считаем ориентиром.
	Возврат "Местоположение";
КонецФункции

// Возвращает XPath для дополнительного объекта адресации по умолчанию.
//
//  Параметры;
//      Уровень - Число - уровень объекта. 90  - дополнительный(Варианты: ГСК, СНТ, ТЕР), 91 - подчиненный, -1 -
//                        Ориентир.
//
// Возвращаемое значение:
//      Строка - XPath
//
Функция XPathДополнительногоОбъектаАдресации(Уровень, ТипаАдресногоЭлемента = "") Экспорт
	КодСериализации = КодСериализацииДополнительногоОбъектаАдресации(Уровень, ТипаАдресногоЭлемента);
	Возврат "ДопАдрЭл[ТипАдрЭл='" + КодСериализации + "']";
КонецФункции

//  Возвращает XPath для номера дополнительного объекта адресации.
//
//  Параметры;
//      СтрокаЗначения - Строка - искомый тип, например "Дом", "Корпус".
//
// Возвращаемое значение:
//      Строка - XPath
//
Функция XPathНомераДополнительногоОбъектаАдресации(СтрокаЗначения) Экспорт
	
	Код = КодСериализацииОбъектаАдресации(СтрокаЗначения);
	Если Код = Неопределено Тогда
		Код = СтрЗаменить(СтрокаЗначения, "'", "");
	КонецЕсли;
	
	Возврат "ДопАдрЭл/Номер[Тип='" + Код + "']";
КонецФункции

//  Возвращает строку с описанием типа по коду части адреса.
//  Противоположность функции "КодСериализацииОбъектаАдресации".
//
// Параметры:
//      Код - Строка - код
//
// Возвращаемое значение:
//      Число - Тип
//
Функция ТипОбъектаПоКодуСериализации(Код) Экспорт
	Для Каждого Элемент Из ТипыОбъектовАдресацииАдресаРФ() Цикл
		Если Элемент.Код = Код Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Возвращает массив вариантов наименований по типу (по признаку владения, строения, и т.п).
//
// Параметры:
//      Тип                  - Число  - запрашиваемый тип.
//      ДопускатьПовторыКода - Булево - Истина - будут возвращены все варианты с повторами ("квартира" - "кв." и т.п.).
//
// Возвращаемое значение:
//      Массив - содержит структуры - описания.
//
Функция НаименованияОбъектовАдресацииПоТипу(Тип, ДопускатьПовторыКода = Истина) Экспорт
	Результат = Новый Массив;
	Повторы   = Новый Соответствие;
	
	Для Каждого Элемент Из ТипыОбъектовАдресацииАдресаРФ() Цикл
		Если Элемент.Тип = Тип Тогда
			Если ДопускатьПовторыКода Тогда
				Результат.Добавить(Элемент.Наименование);
			Иначе
				Если Повторы.Получить(Элемент.Код) = Неопределено Тогда
					Результат.Добавить(Элемент.Наименование);
				КонецЕсли;
				Повторы.Вставить(Элемент.Код, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции    

//  Возвращает сокращения частей адреса
//
// Возвращаемое значение:
//      Соответствие - Список сокращений.
//
Функция СокращенияОбъектовАдресацииАдресаРФ() Экспорт
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(НСтр("ru = 'Дом'"), НСтр("ru = 'Д.'"));
	Результат.Вставить(НСтр("ru = 'Владение'"), НСтр("ru = 'Вл.'"));
	Результат.Вставить(НСтр("ru = 'Домовладение'"), НСтр("ru = 'Домовл.'"));
	
	Результат.Вставить(НСтр("ru = 'Корпус'"), НСтр("ru = 'Корп.'"));
	Результат.Вставить(НСтр("ru = 'Строение'"), НСтр("ru = 'Стр.'"));
	Результат.Вставить(НСтр("ru = 'Литера'"), НСтр("ru = 'Лит.'"));
	Результат.Вставить(НСтр("ru = 'Сооружение'"), НСтр("ru = 'Сооруж.'"));
	Результат.Вставить(НСтр("ru = 'Участок'"), НСтр("ru = 'Уч.'"));
	
	Результат.Вставить(НСтр("ru = 'Квартира'"), НСтр("ru = 'Кв.'"));
	Результат.Вставить(НСтр("ru = 'Офис'"), НСтр("ru = 'Оф.'"));
	Результат.Вставить(НСтр("ru = 'Бокс'"), НСтр("ru = 'Бокс'"));
	Результат.Вставить(НСтр("ru = 'Помещение'"), НСтр("ru = 'Пом.'"));
	Результат.Вставить(НСтр("ru = 'Комната'"), НСтр("ru = 'Ком.'"));
	Результат.Вставить(НСтр("ru = 'Этаж'"), НСтр("ru = 'Этаж'"));
	
	Возврат Результат;
КонецФункции


Функция СтрокаОбъектаАдресации(Код, Наименование, Тип = 0, Порядок = 0, КодФИАС = 0)
	
	СтруктураОбъектаАдресации = Новый Структура;
	СтруктураОбъектаАдресации.Вставить("Код", Код);
	СтруктураОбъектаАдресации.Вставить("Наименование", Наименование);
	СтруктураОбъектаАдресации.Вставить("Тип", Тип);
	СтруктураОбъектаАдресации.Вставить("Порядок", Порядок);
	СтруктураОбъектаАдресации.Вставить("КодФИАС", КодФИАС);
	СтруктураОбъектаАдресации.Вставить("Сокращение", НРег(Наименование));
	СтруктураОбъектаАдресации.Вставить("Ключ", ВРег(Наименование));
	Возврат СтруктураОбъектаАдресации;
	
КонецФункции


// Функция формирует полное наименование из массив адреса.
//
// Параметры:
//  Адрес - массив - массив содержащий адресные объекты.
// Возвращаемое значение:
//  Строка - Полное наименование адреса в виде строки.
Функция СформироватьПолноеНаименование(Адрес) Экспорт
	
	ПолноеНаименование = "";
	Разделитель = "";
	Для каждого Элемент Из Адрес Цикл
		Если ЗначениеЗаполнено(Элемент) Тогда 
			ПолноеНаименование = ПолноеНаименование + Разделитель + Элемент;
			Разделитель = ", ";
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПолноеНаименование;
КонецФункции

#Область СлужебныеПроцедурыИФункцииПоРаботеСXMLАдресами


// Возвращает структуру с наименованием и сокращением от значения.
//
// Параметры:
//     Текст - Строка - Полное наименование.
//
// Возвращаемое значение:
//     Структура - результат обработки.
//         * Наименование - Строка - часть текста.
//         * Сокращение   - Строка - часть текста.
//
Функция НаименованиеСокращение(Знач Текст) Экспорт
	Результат = Новый Структура("Наименование, Сокращение");
	
	Части = НаборНаименованийИСокращений(Текст, Истина);
	Если Части.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Результат, Части[0]);
	Иначе
		Результат.Наименование = Текст;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает отдельно сокращение от значения.
//
// Параметры:
//     Текст - Строка - Полное наименования.
//
// Возвращаемое значение:
//     Строка - выделенное сокращение.
//
Функция Сокращение(Знач Текст) Экспорт
	
	Части = НаименованиеСокращение(Текст);
	Возврат Части.Сокращение;
	
КонецФункции

// Разделяет текст на слова по указанным разделителям. По умолчанию разделители - пробельные символы.
//
// Параметры:
//     Текст       - Строка - Разделяемая строка.
//     Разделители - Строка - Необязательная строка символов-разделителей.
//
// Возвращаемое значение:
//     Массив - строки, слова
//
Функция СловаТекста(Знач Текст, Знач Разделители = Неопределено)
	
	НачалоСлова = 0;
	Состояние   = 0;
	Результат   = Новый Массив;
	
	Для Позиция = 1 По СтрДлина(Текст) Цикл
		ТекущийСимвол = Сред(Текст, Позиция, 1);
		ЭтоРазделитель = ?(Разделители = Неопределено, ПустаяСтрока(ТекущийСимвол), СтрНайти(Разделители, ТекущийСимвол) > 0);
		
		Если Состояние = 0 И (Не ЭтоРазделитель) Тогда
			НачалоСлова = Позиция;
			Состояние   = 1;
		ИначеЕсли Состояние = 1 И ЭтоРазделитель Тогда
			Результат.Добавить(Сред(Текст, НачалоСлова, Позиция-НачалоСлова));
			Состояние = 0;
		КонецЕсли;
	КонецЦикла;
	
	Если Состояние = 1 Тогда
		Результат.Добавить(Сред(Текст, НачалоСлова, Позиция-НачалоСлова));    
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Разделяет текст, разделенный запятыми.
//
// Параметры:
//     Текст              - Срока  - Разделяемый текст.
//     ВыделятьСокращения - Булево - Опциональный параметр режима работы.
//
// Возвращаемое значение:
//     Массив - содержит структуры "Наименование, Сокращение".
//
Функция НаборНаименованийИСокращений(Знач Текст, Знач ВыделятьСокращения = Истина)
	
	Результат = Новый Массив;
	Для Каждого Часть Из СловаТекста(Текст, ",") Цикл
		СтрокаЧасти = СокрЛП(Часть);
		Если ПустаяСтрока(СтрокаЧасти) Тогда
			Продолжить;
		КонецЕсли;
		
		Позиция = ?(ВыделятьСокращения, СтрДлина(СтрокаЧасти), 0);
		Пока Позиция > 0 Цикл
			Если Сред(СтрокаЧасти, Позиция, 1) = " " Тогда
				Результат.Добавить(Новый Структура("Наименование, Сокращение",
					СокрЛП(Лев(СтрокаЧасти, Позиция-1)), СокрЛП(Сред(СтрокаЧасти, Позиция))));
				Позиция = -1;
				Прервать;
			КонецЕсли;
			Позиция = Позиция - 1;
		КонецЦикла;
		Если Позиция = 0 Тогда
			Результат.Добавить(Новый Структура("Наименование, Сокращение", СтрокаЧасти));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции    

// Возвращает первый элемент из списка.
//
// Параметры:
//     СписокДанных - СписокЗначений, Массив, ПолеФормы.
//
// Возвращаемое значение:
//     Произвольный - первый элемент.
//     Неопределено - нет первого элемента.
// 
Функция ПервыйИлиПустой(Знач СписокДанных) Экспорт
	
	ТипСписка = ТипЗнч(СписокДанных);
	Если ТипСписка = Тип("СписокЗначений") И СписокДанных.Количество() > 0 Тогда
		Возврат СписокДанных[0].Значение;
	ИначеЕсли ТипСписка = Тип("Массив") И СписокДанных.Количество() > 0 Тогда
		Возврат СписокДанных[0];
	ИначеЕсли ТипСписка = Тип("ПолеФормы") Тогда
		Возврат ПервыйИлиПустой(СписокДанных.СписокВыбора);
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

//  Возвращает структуру, описывающую населенный пункт в иерархии младший-старший.
//
//  Параметры:
//      ВариантКлассификатора  Строка - Требуемый вид классификатора ФИАС, КЛАДР.
// 
// Возвращаемое значение:
//      Структура - описание населенного пункта.
//
Функция СтруктураЧастейАдресаНаселенногоПункта(ВариантКлассификатора = "ФИАС") Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Регион",           ЭлементАдреснойСтруктуры(НСтр("ru = 'Регион'"),      НСтр("ru = 'Регион адреса'"),           "СубъектРФ",     1));
	Если ВариантКлассификатора = "ФИАС" Тогда
		Результат.Вставить("Округ",        ЭлементАдреснойСтруктуры(НСтр("ru = 'Округ'"),       НСтр("ru = 'Округ адреса'"),            "Округ",         2));
	КонецЕсли;
	Результат.Вставить("Район",            ЭлементАдреснойСтруктуры(НСтр("ru = 'Район'"),       НСтр("ru = 'Район адреса'"),            "СвРайМО/Район", 3));
	Результат.Вставить("Город",            ЭлементАдреснойСтруктуры(НСтр("ru = 'Город'"),       НСтр("ru = 'Город адреса'"),            "Город",         4));
	Если ВариантКлассификатора = "ФИАС" Тогда
		Результат.Вставить("ВнутригРайон", ЭлементАдреснойСтруктуры(НСтр("ru = 'Внутр. р-н.'"), НСтр("ru = 'Внутригородской район'"),   "ВнутригРайон",  5));
	КонецЕсли;
	Результат.Вставить("НаселенныйПункт", ЭлементАдреснойСтруктуры(НСтр("ru = 'Нас.пункт'"),
		НСтр("ru = 'Населенный пункт адреса'"), "НаселПункт",  6, Истина));
		
	Если ВариантКлассификатора <> "БезКлассификатора" Тогда
		Результат.Вставить("Улица", ЭлементАдреснойСтруктуры(НСтр("ru = 'Улица'"),
			НСтр("ru = 'Улица адреса'"), "Улица", 7));
		Результат.Вставить("ДополнительныйЭлемент", ЭлементАдреснойСтруктуры(НСтр("ru = 'ДополнительныйЭлемент'"),
			НСтр("ru = 'Дополнительный элемент адреса'"), "ДопАдрЭл[ТипАдрЭл='10200000']", 90));
		Результат.Вставить("ПодчиненныйЭлемент", ЭлементАдреснойСтруктуры(НСтр("ru = 'Подчиненный элемент'"),
			НСтр("ru = 'Подчиненный элемент адреса'"), "ДопАдрЭл[ТипАдрЭл='10400000']", 91));
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Обрабатывает структуру частей адреса и возвращает идентификатор ближайшего определенного родителя.
//
// Параметры:
//     ЧастьАдреса - Строка, Структура - Идентификатор части или сама часть.
//     ЧастиАдреса - Структура - Описание текущего состояния адреса.
//
// Возвращаемое значение:
//     УникальныйИдентификатор - идентификатор родителя.
//
Функция ИдентификаторРодителяЧастиАдресаЭлемента(ЧастьАдреса, ЧастиАдреса) Экспорт
	
	ПутьXPath = ЧастьАдреса.ПутьXPath;
	Элемент   = Неопределено;
	
	Порядок = Новый СписокЗначений;
	Для Каждого КлючЗначение Из ЧастиАдреса Цикл
		Часть = КлючЗначение.Значение;
		НовыйЭлемент = Порядок.Добавить(Часть.Уровень, КлючЗначение.Ключ);
		Если Часть.ПутьXPath = ПутьXPath Тогда
			Элемент = НовыйЭлемент;
		КонецЕсли;
	КонецЦикла;
	Порядок.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	Если Элемент <> Неопределено Тогда
		Для Позиция = Порядок.Индекс(Элемент) + 1 По Порядок.Количество() - 1 Цикл
			Часть = ЧастиАдреса[ Порядок[Позиция].Представление ];
			Если ЗначениеЗаполнено(Часть.Представление) Тогда
				Возврат Часть.Идентификатор;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Обрабатывает структуру частей адреса и возвращает идентификатор последнего заполненного элемента.
//
// Параметры:
//     ЧастиАдреса - Структура - Описание текущего состояния адреса.
//
// Возвращаемое значение:
//     УникальныйИдентификатор - идентификатор.
//
Функция ИдентификаторЭлементаПоЧастямАдреса(ЧастиАдреса, ИскатьПоУлицам = Истина) Экспорт
	
	Порядок = Новый СписокЗначений;
	Для Каждого КлючЗначение Из ЧастиАдреса Цикл
		Если НЕ ИскатьПоУлицам И КлючЗначение.Значение.Уровень > 6 Тогда
			Продолжить;
		КонецЕсли;
		Порядок.Добавить(КлючЗначение.Значение.Уровень, КлючЗначение.Ключ);
	КонецЦикла;
	Порядок.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	Для Каждого ЭлементСписка Из Порядок Цикл
		ИмяРеквизита = ЭлементСписка.Представление;
		Если ЧастиАдреса.Свойство(ИмяРеквизита) Тогда
			ЧастьАдреса = ЧастиАдреса[ИмяРеквизита];
			Если ЗначениеЗаполнено(ЧастьАдреса.Представление) Тогда
				Возврат ЧастьАдреса.Идентификатор;
			КонецЕсли;
		КонецЕсли
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Обрабатывает структуру частей адреса.
//
// Параметры:
//     ИмяЧастиАдреса    - Строка    - Идентификатор части.
//     ЧастиАдреса       - Структура - Описание текущего состояния адреса.
//     ВыбранноеЗначение - Строка, Структура - новое значение.
//
// Возвращаемое значение:
//     Строка - Новое представление части адреса.
//
Функция УстановитьЗначениеЧастиАдреса(ИмяЧастиАдреса, ЧастиАдреса, ВыбранноеЗначение) Экспорт
	
	ЧастьАдреса = ЧастиАдреса[ИмяЧастиАдреса];
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЧастьАдреса.Идентификатор = ВыбранноеЗначение.Идентификатор;
		ЧастьАдреса.Представление = ВыбранноеЗначение.Представление;
	Иначе
		ЧастьАдреса.Идентификатор = Неопределено;
		ЧастьАдреса.Представление = СокрЛП(ВыбранноеЗначение);
	КонецЕсли;
	
	Представление = ЧастьАдреса.Представление;
	
	Части = НаименованиеСокращение(Представление);
	ЧастьАдреса.Наименование = Части.Наименование;
	ЧастьАдреса.Сокращение   = Части.Сокращение;
	
	Возврат Представление;
КонецФункции

//  Возвращает полное наименование для населенного пункта. Под населенным пунктом понимается синтетическое 
//  поле, характеризующее все, что больше улицы.
//
//  Параметры:
//      ЧастиАдреса           - Структура - Описание текущего состояния адреса.
//      ВариантКлассификатора - Строка    - Вариант классификатора.
//
Функция ПредставлениеНаселенногоПунктаПоЧастямАдреса(ЧастиАдреса, ВариантКлассификатора = "ФИАС") Экспорт
	
	Уровни = Новый Массив;
	Уровни.Добавить(1);
	Уровни.Добавить(3);
	Уровни.Добавить(4);
	Уровни.Добавить(6);
	Если ВариантКлассификатора = "ФИАС" Тогда
		Уровни.Добавить(2);
		Уровни.Добавить(5);
	КонецЕсли;
	Возврат ПредставлениеПоЧастямАдреса(ЧастиАдреса,Уровни);
	
КонецФункции

// Конструктор внутренней структуры элемента адреса.
//
Функция ЭлементАдреснойСтруктуры(Заголовок, Подсказка, ПутьXPath, Уровень, Предопределенный = Ложь)
	
	Результат = Новый Структура("Наименование, Сокращение, Идентификатор, Представление");
	Результат.Вставить("Заголовок",        Заголовок);
	Результат.Вставить("Подсказка",        Подсказка);
	Результат.Вставить("ПутьXPath",        ПутьXPath);
	Результат.Вставить("Предопределенный", Предопределенный);
	Результат.Вставить("Уровень",          Уровень);
	
	Возврат Результат;
КонецФункции

// Строка представления по частям адреса в нужном порядке.
//
Функция ПредставлениеПоЧастямАдреса(ЧастиАдреса, Уровни)
	
	Эталон = СтруктураЧастейАдресаНаселенногоПункта();
	
	Порядок = Новый СписокЗначений;
	Для Каждого КлючЗначение Из Эталон Цикл
		Если Уровни.Найти(КлючЗначение.Значение.Уровень) <> Неопределено Тогда
			Порядок.Добавить(КлючЗначение.Значение.Уровень, КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Порядок.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	Результат = "";
	Для Каждого ЭлементСписка Из Порядок Цикл
		ИмяРеквизита = ЭлементСписка.Представление;
		Если ЧастиАдреса.Свойство(ИмяРеквизита) Тогда
			ЧастьПредставления = ЧастиАдреса[ИмяРеквизита].Представление;
			Если Не ПустаяСтрока(ЧастьПредставления) Тогда
				Результат = Результат + ", " + ЧастьПредставления;
			КонецЕсли;
		КонецЕсли
	КонецЦикла;
	
	Возврат СокрЛП(Сред(Результат, 2));
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыИФункции

// Дополняет представление адреса строкой.
//
// Параметры:
//    Дополнение         - Строка - дополнение адреса.
//    СтрокаКонкатенации - Строка - строка конкатенации.
//    Представление      - Строка - представление адреса.
//
Процедура ДополнитьПредставлениеАдреса(Дополнение, СтрокаКонкатенации, Представление)
	
	Если Дополнение <> "" Тогда
		Представление = Представление + СтрокаКонкатенации + Дополнение;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает строку значения по свойству структуры.
// 
// Параметры:
//    Ключ - Строка - ключ структуры.
//    Структура - Структура - передаваемая структура.
//
// Возвращаемое значение:
//    Произвольный - значение.
//    Строка       - пустая строка, если нет значения.
//
Функция ЗначениеПоКлючуСтруктуры(Ключ, Структура)
	
	Значение = Неопределено;
	
	Если Структура.Свойство(Ключ, Значение) Тогда
		Возврат Строка(Значение);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ПредставлениеАдресаПоСтруктуре(СтруктураАдреса, КлючНаименование, Представление, КлючСокращения = "", ДобавлятьСокращения = Ложь, СтрокаКонкатенации = ", ")
	
	Если СтруктураАдреса.Свойство(КлючНаименование) Тогда
		Дополнение = СокрЛП(СтруктураАдреса[КлючНаименование]);
		Если ЗначениеЗаполнено(Дополнение) Тогда
			Если ДобавлятьСокращения И СтруктураАдреса.Свойство(КлючСокращения) Тогда
				Дополнение = Дополнение + " " + СокрЛП(СтруктураАдреса[КлючСокращения]);
			КонецЕсли;
			Если ЗначениеЗаполнено(Представление) Тогда
				Представление = Представление + СтрокаКонкатенации + Дополнение;
			Иначе
				Представление = Дополнение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


// Возвращает пустую структура адреса.
//
// Возвращаемое значение:
//    Структура - адрес, ключи - имена полей, значения поля.
//
Функция СтруктураПолейАдреса(ФорматАдреса)
	
	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("Представление", "");
	СтруктураАдреса.Вставить("Страна", "");
	СтруктураАдреса.Вставить("НаименованиеСтраны", "");
	СтруктураАдреса.Вставить("КодСтраны","");
	СтруктураАдреса.Вставить("Индекс","");
	СтруктураАдреса.Вставить("Регион","");
	СтруктураАдреса.Вставить("РегионСокращение","");
	СтруктураАдреса.Вставить("Район","");
	СтруктураАдреса.Вставить("РайонСокращение","");
	СтруктураАдреса.Вставить("Город","");
	СтруктураАдреса.Вставить("ГородСокращение","");
	СтруктураАдреса.Вставить("НаселенныйПункт","");
	СтруктураАдреса.Вставить("НаселенныйПунктСокращение","");
	СтруктураАдреса.Вставить("Улица","");
	СтруктураАдреса.Вставить("УлицаСокращение","");
	СтруктураАдреса.Вставить("Дом","");
	СтруктураАдреса.Вставить("Корпус","");
	СтруктураАдреса.Вставить("Квартира","");
	СтруктураАдреса.Вставить("ТипДома","");
	СтруктураАдреса.Вставить("ТипКорпуса","");
	СтруктураАдреса.Вставить("ТипКвартиры","");
	СтруктураАдреса.Вставить("НаименованиеВида","");
	
	Если ВРег(ФорматАдреса) = "ФИАС" Тогда
		СтруктураАдреса.Вставить("Округ","");
		СтруктураАдреса.Вставить("ОкругСокращение","");
		СтруктураАдреса.Вставить("ВнутригородскойРайон","");
		СтруктураАдреса.Вставить("ВнутригородскойРайонСокращение","");
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Возвращает пустую структура телефона.
//
// Возвращаемое значение:
//    Структура - ключи - имена полей, значения поля.
//
Функция СтруктураПолейТелефона()
	
	СтруктураТелефона = Новый Структура;
	СтруктураТелефона.Вставить("Представление", "");
	СтруктураТелефона.Вставить("КодСтраны", "");
	СтруктураТелефона.Вставить("КодГорода", "");
	СтруктураТелефона.Вставить("НомерТелефона", "");
	СтруктураТелефона.Вставить("Добавочный", "");
	СтруктураТелефона.Вставить("Комментарий", "");
	
	Возврат СтруктураТелефона;
	
КонецФункции

// Получает сокращение географического названия объекта.
//
// Параметры:
//    ГеографическоеНазвание - Строка - географическое название объекта.
//
// Возвращаемое значение:
//     Строка - пустая строка или последнее слово в географическом названии.
//
Функция АдресноеСокращение(Знач ГеографическоеНазвание)
	
	Сокращение = "";
	МассивСлов = СтрРазделить(ГеографическоеНазвание, " ", Ложь);
	Если МассивСлов.Количество() > 1 Тогда
		Сокращение = МассивСлов[МассивСлов.Количество() - 1];
	КонецЕсли;
	
	Возврат Сокращение;
	
КонецФункции

// Возвращает строку списка полей.
//
// Параметры:
//    СоответствиеПолей - СписокЗначений - соответствия полей.
//    БезПустыхПолей    - Булево - необязательный флаг сохранения полей с пустыми значениями.
//
//  Возвращаемое значение:
//     Строка - результат, преобразованный из списка.
//
Функция ПреобразоватьСписокПолейВСтроку(СоответствиеПолей, БезПустыхПолей = Истина) Экспорт
	
	КвартираДобавлена = Ложь;
	КорпусДобавлен = Ложь;
	ПредыдущиеЗначение = Неопределено;
	
	СтруктураЗначенийПолей = Новый Структура;
	Для Каждого Элемент Из СоответствиеПолей Цикл
		
		Если Элемент.Представление = "Корпус" ИЛИ Элемент.Представление = "ТипКорпуса" Тогда
			Если ПредыдущиеЗначение <> Неопределено И ПредыдущиеЗначение.Представление = "ТипКорпуса"
				И ПредыдущиеЗначение.Значение = "Корпус" Тогда
				СтруктураЗначенийПолей.Вставить(Элемент.Представление, Элемент.Значение);
				КорпусДобавлен = Истина;
			ИначеЕсли НЕ КорпусДобавлен Тогда
				СтруктураЗначенийПолей.Вставить(Элемент.Представление, Элемент.Значение);
			КонецЕсли;
		ИначеЕсли Элемент.Представление = "Квартира" ИЛИ Элемент.Представление = "ТипКвартиры" Тогда
			Если ПредыдущиеЗначение <> Неопределено И ПредыдущиеЗначение.Представление = "ТипКвартиры"
				И ПредыдущиеЗначение.Значение = "Квартира" Тогда
				СтруктураЗначенийПолей.Вставить(Элемент.Представление, Элемент.Значение);
				КвартираДобавлена = Истина;
			ИначеЕсли НЕ КвартираДобавлена Тогда
				СтруктураЗначенийПолей.Вставить(Элемент.Представление, Элемент.Значение);				
			КонецЕсли;
		Иначе
			СтруктураЗначенийПолей.Вставить(Элемент.Представление, Элемент.Значение);	
		КонецЕсли;
		ПредыдущиеЗначение = Элемент;
	КонецЦикла;
	
	Возврат СтрокаПолей(СтруктураЗначенийПолей, БезПустыхПолей);
КонецФункции

// Возвращает список значений. Преобразует строку полей в список значений.
//
// Параметры:
//    СтрокаПолей - Строка - строка полей.
//
// Возвращаемое значение:
//    СписокЗначений - список значений полей.
//
Функция ПреобразоватьСтрокуВСписокПолей(СтрокаПолей) Экспорт
	
	// XML сериализацию преобразовывать не надо.
	Если ЭтоКонтактнаяИнформацияВXML(СтрокаПолей) Тогда
		Возврат СтрокаПолей;
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	
	СтруктураЗначенийПолей = СтруктураЗначенийПолей(СтрокаПолей);
	Для каждого ЗначениеПоля Из СтруктураЗначенийПолей Цикл
		Результат.Добавить(ЗначениеПоля.Значение, ЗначениеПоля.Ключ);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//  Преобразует строку полей вида ключ = значение в структуру.
//
//  Параметры:
//      СтрокаПолей             - Строка - строка полей с данными в виде ключ = значение.
//      ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - для определения состава незаполненных
//                                                                            полей.
//
//  Возвращаемое значение:
//      Структура - значения полей.
//
Функция СтруктураЗначенийПолей(СтрокаПолей, ВидКонтактнойИнформации = Неопределено) Экспорт
	
	Если ВидКонтактнойИнформации = Неопределено Тогда
		Результат = Новый Структура;
	Иначе
		Результат = СтруктураКонтактнойИнформацииПоТипу(ВидКонтактнойИнформации.Тип);
	КонецЕсли;
	
	ПоследнийЭлемент = Неопределено;
	
	Для Итерация = 1 По СтрЧислоСтрок(СтрокаПолей) Цикл
		ПолученнаяСтрока = СтрПолучитьСтроку(СтрокаПолей, Итерация);
		Если СтрНачинаетсяС(ПолученнаяСтрока, Символы.Таб) Тогда
			Если Результат.Количество() > 0 Тогда
				Результат.Вставить(ПоследнийЭлемент, Результат[ПоследнийЭлемент] + Символы.ПС + Сред(ПолученнаяСтрока, 2));
			КонецЕсли;
		Иначе
			ПозицияСимвола = СтрНайти(ПолученнаяСтрока, "=");
			Если ПозицияСимвола <> 0 Тогда
				НазваниеПоля = Лев(ПолученнаяСтрока, ПозицияСимвола - 1);
				ЗначениеПоля = Сред(ПолученнаяСтрока, ПозицияСимвола + 1);
				Если НазваниеПоля = "Регион" Или НазваниеПоля = "Район" Или НазваниеПоля = "Город" 
					Или НазваниеПоля = "НаселенныйПункт" Или НазваниеПоля = "Улица" Тогда
					Если СтрНайти(СтрокаПолей, НазваниеПоля + "Сокращение") = 0 Тогда
						Результат.Вставить(НазваниеПоля + "Сокращение", АдресноеСокращение(ЗначениеПоля));
					КонецЕсли;
				КонецЕсли;
				Результат.Вставить(НазваниеПоля, ЗначениеПоля);
				ПоследнийЭлемент = НазваниеПоля;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

//  Возвращает строку списка полей.
//
//  Параметры:
//    СтруктураЗначенийПолей - Структура - структура значений полей.
//    БезПустыхПолей         - Булево - необязательный флаг сохранения полей с пустыми значениями.
//
//  Возвращаемое значение:
///     Строка - результат преобразования из структуры.
//
Функция СтрокаПолей(СтруктураЗначенийПолей, БезПустыхПолей = Истина) Экспорт
	
	Результат = "";
	Для Каждого ЗначениеПоля Из СтруктураЗначенийПолей Цикл
		Если БезПустыхПолей И ПустаяСтрока(ЗначениеПоля.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Результат + ?(Результат = "", "", Символы.ПС)
		            + ЗначениеПоля.Ключ + "=" + СтрЗаменить(ЗначениеПоля.Значение, Символы.ПС, Символы.ПС + Символы.Таб);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Текст, который выводит в поле адрес, когда он не заполнен и отображается в виде гиперссылки.
//
Функция ТекстПустогоАдресаВВидеГиперссылки() Экспорт
	Возврат НСтр("ru = 'Заполнить'");
КонецФункции

#КонецОбласти

#КонецОбласти
