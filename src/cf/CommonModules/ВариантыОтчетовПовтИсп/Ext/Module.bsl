////////////////////////////////////////////////////////////////////////////////
// Подсистема "Варианты отчетов" (сервер, повт. исп.).
// 
// Выполняется на сервере, возвращаемые значения кэшируются на время сеанса.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// Формирует список отчетов конфигурации, доступных текущему пользователю.
//
// Возвращаемое значение:
//   Массив из <см. Справочники.ВариантыОтчетов.Реквизиты.Отчет> -
//       Ссылки отчетов, доступных текущему пользователю.
//
// Описание:
//   Данный массив следует использовать во всех запросах к таблице
//   справочника "ВариантыОтчетов" как отбор по реквизиту "Отчет".
//
Функция ДоступныеОтчеты(ПроверятьФункциональныеОпции = Истина) Экспорт
	Результат = Новый Массив;
	
	КэшФлажка = Неопределено;
	Для Каждого ОтчетМетаданные Из Метаданные.Отчеты Цикл
		Если ПравоДоступа("Просмотр", ОтчетМетаданные)
			И ВариантыОтчетов.ОтчетПодключенКХранилищу(ОтчетМетаданные, КэшФлажка) Тогда
			Если ПроверятьФункциональныеОпции
				И Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОтчетМетаданные) Тогда
				Продолжить;
			КонецЕсли;
			Результат.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОтчетМетаданные));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Формирует список вариантов отчетов конфигурации, недоступных текущему пользователю по функциональным опциям.
//
// Возвращаемое значение:
//   Массив из СправочникСсылка.ПредопределенныеВариантыОтчетов, СправочникСсылка.ПредопределенныеВариантыОтчетовРасширений -
//       Варианты отчетов, которые отключены по функциональным опциям.
//
// Описание:
//   Данный массив следует использовать во всех запросах к таблице
//   справочника "ВариантыОтчетов" как исключающий отбор по реквизиту "ПредопределенныйВариант".
//
Функция ОтключенныеВариантыПрограммы() Экспорт
	// Получить варианты, недоступные по функциональным опциям.
	
	ТаблицаОпций = ВариантыОтчетовПовтИсп.Параметры().ТаблицаФункциональныхОпций;
	
	ТаблицаВариантов = ТаблицаОпций.СкопироватьКолонки("ПредопределенныйВариант, ИмяФункциональнойОпции");
	ТаблицаВариантов.Колонки.Добавить("ЗначениеОпции", Новый ОписаниеТипов("Число"));
	
	ОтчетыПользователя = ВариантыОтчетовПовтИсп.ДоступныеОтчеты();
	Для Каждого ОтчетСсылка Из ОтчетыПользователя Цикл
		Найденные = ТаблицаОпций.НайтиСтроки(Новый Структура("Отчет", ОтчетСсылка));
		Для Каждого СтрокаТаблицы Из Найденные Цикл
			СтрокаВариант = ТаблицаВариантов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВариант, СтрокаТаблицы);
			Значение = ПолучитьФункциональнуюОпцию(СтрокаТаблицы.ИмяФункциональнойОпции);
			Если Значение = Истина Тогда
				СтрокаВариант.ЗначениеОпции = 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаВариантов.Свернуть("ПредопределенныйВариант", "ЗначениеОпции");
	ТаблицаОтключенных = ТаблицаВариантов.Скопировать(Новый Структура("ЗначениеОпции", 0));
	ТаблицаОтключенных.Свернуть("ПредопределенныйВариант");
	ОтключенныеВарианты = ТаблицаОтключенных.ВыгрузитьКолонку("ПредопределенныйВариант");
	
	// Добавить варианты, отключенные разработчиком.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтчетыПользователя", ОтчетыПользователя);
	Запрос.УстановитьПараметр("ВерсияРасширений", ПараметрыСеанса.ВерсияРасширений);
	Запрос.УстановитьПараметр("МассивОтключенных", ОтключенныеВарианты);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыКонфигурации.Ссылка
	|ИЗ
	|	Справочник.ПредопределенныеВариантыОтчетов КАК ВариантыКонфигурации
	|ГДЕ
	|	НЕ(НЕ ВариантыКонфигурации.Включен = ЛОЖЬ
	|				И НЕ ВариантыКонфигурации.ПометкаУдаления = ИСТИНА)
	|	И ВариантыКонфигурации.Отчет В(&ОтчетыПользователя)
	|	И НЕ ВариантыКонфигурации.Ссылка В (&МассивОтключенных)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВариантыРасширений.Ссылка
	|ИЗ
	|	Справочник.ПредопределенныеВариантыОтчетовРасширений КАК ВариантыРасширений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредопределенныеВариантыОтчетовВерсийРасширений КАК Версии
	|		ПО ВариантыРасширений.Ссылка = Версии.Вариант
	|			И ВариантыРасширений.Отчет = Версии.Отчет
	|			И (Версии.ВерсияРасширений = &ВерсияРасширений)
	|ГДЕ
	|	НЕ(НЕ ВариантыРасширений.Включен = ЛОЖЬ
	|				И НЕ ВариантыРасширений.ПометкаУдаления = ИСТИНА
	|				И НЕ Версии.Вариант ЕСТЬ NULL )
	|	И ВариантыРасширений.Отчет В(&ОтчетыПользователя)
	|	И НЕ ВариантыРасширений.Ссылка В (&МассивОтключенных)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОтключенныеВарианты.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ОтключенныеВарианты;
КонецФункции

// Формирует дерево подсистем, доступных текущему пользователю.
//
// Возвращаемое значение: 
//   Результат - ДеревоЗначений -
//       * РазделСсылка - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Ссылка раздела.
//       * Ссылка       - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Ссылка подсистемы.
//       * Имя           - Строка - Имя подсистемы.
//       * ПолноеИмя     - Строка - Полное имя подсистемы.
//       * Представление - Строка - Представление подсистемы.
//       * Приоритет     - Строка - Приоритет подсистемы.
//
Функция ПодсистемыТекущегоПользователя() Экспорт
	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("Ссылка",              Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	Результат.Колонки.Добавить("Имя",                 ВариантыОтчетов.ОписаниеТиповСтрока(150));
	Результат.Колонки.Добавить("ПолноеИмя",           ВариантыОтчетов.ОписаниеТиповСтрока(510));
	Результат.Колонки.Добавить("Представление",       ВариантыОтчетов.ОписаниеТиповСтрока(150));
	Результат.Колонки.Добавить("РазделСсылка",        Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	Результат.Колонки.Добавить("Приоритет",           ВариантыОтчетов.ОписаниеТиповСтрока(100));
	Результат.Колонки.Добавить("ПолноеПредставление", ВариантыОтчетов.ОписаниеТиповСтрока(300));
	
	КорневаяСтрока = Результат.Строки.Добавить();
	КорневаяСтрока.Ссылка = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
	КорневаяСтрока.Представление = НСтр("ru = 'Все разделы'");
	
	ДобавитьПодсистемыТекущегоПользователя(КорневаяСтрока, Неопределено, Неопределено);
	
	Возврат Результат;
КонецФункции

// Добавляет подсистемы родителя с фильтром по правам доступа и функциональным опциям.
Процедура ДобавитьПодсистемыТекущегоПользователя(РодительСтрока, РодительМетаданные = Неопределено, РазделСсылка = Неопределено)
	Если РодительМетаданные = Неопределено Тогда
		ДляКорневойСтроки = Истина;
		ПриоритетРодителя = "";
		Подсистемы = ВариантыОтчетов.ИспользуемыеРазделы();
		ИдентификаторНачальнойСтраницы = ВариантыОтчетовКлиентСервер.ИдентификаторНачальнойСтраницы();
	Иначе
		ДляКорневойСтроки = Ложь;
		ПриоритетРодителя = РодительСтрока.Приоритет;
		Подсистемы = РодительМетаданные.Подсистемы;
		ИдентификаторНачальнойСтраницы = "";
	КонецЕсли;
	Приоритет = 0;
	Для Каждого Подсистема Из Подсистемы Цикл
		Если ДляКорневойСтроки Тогда
			ПодсистемаМетаданные = Подсистема.Метаданные;
			ЭтоНачальнаяСтраница = (ПодсистемаМетаданные = ИдентификаторНачальнойСтраницы);
		Иначе
			ПодсистемаМетаданные = Подсистема;
			ЭтоНачальнаяСтраница = Ложь;
		КонецЕсли;
		
		Приоритет = Приоритет + 1;
		
		Если Не ЭтоНачальнаяСтраница Тогда
			Если Не ПодсистемаМетаданные.ВключатьВКомандныйИнтерфейс
				Или Не ПравоДоступа("Просмотр", ПодсистемаМетаданные)
				Или Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ПодсистемаМетаданные) Тогда
				Продолжить; // Подсистема не доступна по ФО или по правам.
			КонецЕсли;
		КонецЕсли;
		
		СтрокаДерева = РодительСтрока.Строки.Добавить();
		Если ЭтоНачальнаяСтраница Тогда
			СтрокаДерева.Имя           = ИдентификаторНачальнойСтраницы;
			СтрокаДерева.ПолноеИмя     = "Подсистема." + ИдентификаторНачальнойСтраницы;
			СтрокаДерева.Представление = НСтр("ru = 'Начальная страница'");
		Иначе
			СтрокаДерева.Имя           = ПодсистемаМетаданные.Имя;
			СтрокаДерева.ПолноеИмя     = ПодсистемаМетаданные.ПолноеИмя();
			СтрокаДерева.Представление = ПодсистемаМетаданные.Представление();
		КонецЕсли;
		Если ДляКорневойСтроки Тогда
			СтрокаДерева.Ссылка              = Подсистема.Ссылка;
			СтрокаДерева.РазделСсылка        = Подсистема.Ссылка;
			СтрокаДерева.ПолноеПредставление = Подсистема.ЗаголовокПанели;
		Иначе
			СтрокаДерева.Ссылка       = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПодсистемаМетаданные);
			СтрокаДерева.РазделСсылка = РазделСсылка;
			Если СтрДлина(ПриоритетРодителя) > 12 Тогда
				СтрокаДерева.ПолноеПредставление = РодительСтрока.Представление + ": " + СтрокаДерева.Представление;
			Иначе
				СтрокаДерева.ПолноеПредставление = СтрокаДерева.Представление;
			КонецЕсли;
		КонецЕсли;
		СтрокаДерева.Приоритет = ПриоритетРодителя + Формат(Приоритет, "ЧЦ=4; ЧДЦ=0; ЧВН=; ЧГ=0");
		Если Не ЭтоНачальнаяСтраница Тогда
			ДобавитьПодсистемыТекущегоПользователя(СтрокаДерева, ПодсистемаМетаданные, СтрокаДерева.РазделСсылка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Возвращает Истина если у пользователя есть право чтения вариантов отчетов.
Функция ПравоЧтения() Экспорт
	Возврат ПравоДоступа("Чтение", Метаданные.Справочники.ВариантыОтчетов);
КонецФункции

// Возвращает Истина если у пользователя есть право на сохранение вариантов отчетов.
Функция ПравоДобавления() Экспорт
	Возврат ПравоДоступа("СохранениеДанныхПользователя", Метаданные) И ПравоДоступа("Добавление", Метаданные.Справочники.ВариантыОтчетов);
КонецФункции

// Параметры подсистемы, закэшированные при обновлении.
Функция Параметры() Экспорт
	ХранилищеЗначения = Константы.ПараметрыВариантовОтчетов.Получить();
	Параметры = ХранилищеЗначения.Получить();
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.ВерсияРасширений) Тогда
		ПолноеИмяПодсистемы = ВариантыОтчетовКлиентСервер.ПолноеИмяПодсистемы();
		ХранилищеЗначения = СтандартныеПодсистемыСервер.ПараметрРаботыРасширения(ПолноеИмяПодсистемы);
		Если ХранилищеЗначения = Неопределено Тогда
			Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
				УстановитьПривилегированныйРежим(Истина);
				Если Не ПривилегированныйРежим() Тогда
					ВызватьИсключение НСтр("ru = 'Не удалось обновить вспомогательные данные расширений. Обратитесь к администратору.'");
				КонецЕсли;
			КонецЕсли;
			Настройки = Новый Структура;
			Настройки.Вставить("Конфигурация",      Ложь);
			Настройки.Вставить("Расширения",        Истина);
			Настройки.Вставить("ОбщиеДанные",       Истина);
			Настройки.Вставить("РазделенныеДанные", Истина);
			Настройки.Вставить("Оперативное",       Истина);
			Настройки.Вставить("Отложенное",        Истина);
			Настройки.Вставить("Полное",            Истина);
			Обновление = ВариантыОтчетов.Обновить(Настройки);
			ХранилищеЗначения = СтандартныеПодсистемыСервер.ПараметрРаботыРасширения(ПолноеИмяПодсистемы);
		КонецЕсли;
		Если ХранилищеЗначения <> Неопределено Тогда
			ПараметрыРасширений = ХранилищеЗначения.Получить();
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Параметры.ОтчетыСНастройками, ПараметрыРасширений.ОтчетыСНастройками);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Параметры.ТаблицаФункциональныхОпций, ПараметрыРасширений.ТаблицаФункциональныхОпций);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		МодульДополнительныеОтчетыИОбработки.ПриОпределенииОтчетовСНастройками(Параметры.ОтчетыСНастройками);
	КонецЕсли;
	
	Возврат Параметры;
КонецФункции

#КонецОбласти
