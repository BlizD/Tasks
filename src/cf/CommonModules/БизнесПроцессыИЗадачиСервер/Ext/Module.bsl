////////////////////////////////////////////////////////////////////////////////
// Подсистема "Бизнес-процессы и задачи".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Инициализирует общие параметры формы выполнения задачи.
//
// Параметры:
//  ФормаЗадачи  - УправляемаяФорма  - форма выполнения задачи.
//  ЗадачаОбъект - ЗадачаОбъект      - объект задачи.
//  ЭлементГруппаСостояние - элемент управления формы - группа с информации о
//                                                      состоянии задачи.
//  ЭлементДатаИсполнения  - элемент управления формы - поле с датой исполнения задачи.
//
Процедура ФормаЗадачиПриСозданииНаСервере(ФормаЗадачи, ЗадачаОбъект, 
	ЭлементГруппаСостояние, ЭлементДатаИсполнения) Экспорт
	
	ФормаЗадачи.ТолькоПросмотр = ЗадачаОбъект.Выполнена;

	Если ЗадачаОбъект.Выполнена Тогда
		Если ЭлементГруппаСостояние <> Неопределено Тогда
			ЭлементГруппаСостояние.Видимость = Истина;
		КонецЕсли;
		Родитель = ?(ЭлементГруппаСостояние <> Неопределено, ЭлементГруппаСостояние, ФормаЗадачи);
		Элемент = ФормаЗадачи.Элементы.Найти("__СостояниеЗадачиКартинка");
		Если Элемент = Неопределено Тогда
			Элемент = ФормаЗадачи.Элементы.Добавить("__СостояниеЗадачиКартинка", Тип("ДекорацияФормы"), Родитель);
			Элемент.Вид = ВидДекорацииФормы.Картинка;
			Элемент.Картинка = БиблиотекаКартинок.Информация;
			Элемент.Высота = 1;
			Элемент.Ширина = 2;
		КонецЕсли;
		
		Элемент = ФормаЗадачи.Элементы.Найти("__СостояниеЗадачи");
		Если Элемент = Неопределено Тогда
			Элемент = ФормаЗадачи.Элементы.Добавить("__СостояниеЗадачи", Тип("ДекорацияФормы"), Родитель);
			Элемент.Вид = ВидДекорацииФормы.Надпись;
			Элемент.Высота = 0; // автовысота
		КонецЕсли;
		ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
		ДатаИсполненияСтрокой = ?(ИспользоватьДатуИВремяВСрокахЗадач, 
			Формат(ЗадачаОбъект.ДатаИсполнения, "ДЛФ=DT"), Формат(ЗадачаОбъект.ДатаИсполнения, "ДЛФ=D"));
		Элемент.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru ='Задача выполнена %1 пользователем %2.'"),
			ДатаИсполненияСтрокой, 
			ИсполнительСтрокой(ЗадачаОбъект.Исполнитель, ЗадачаОбъект.РольИсполнителя,
			ЗадачаОбъект.ОсновнойОбъектАдресации, ЗадачаОбъект.ДополнительныйОбъектАдресации));
	КонецЕсли;
	
	Если БизнесПроцессыИЗадачиВызовСервера.ЭтоВедущаяЗадача(ЗадачаОбъект.Ссылка) Тогда
		Если ЭлементГруппаСостояние <> Неопределено Тогда
			ЭлементГруппаСостояние.Видимость = Истина;
		КонецЕсли;
		Родитель = ?(ЭлементГруппаСостояние <> Неопределено, ЭлементГруппаСостояние, ФормаЗадачи);
		Элемент = ФормаЗадачи.Элементы.Найти("__ВедущаяЗадачаКартинка");
		Если Элемент = Неопределено Тогда
			Элемент = ФормаЗадачи.Элементы.Добавить("__ВедущаяЗадачаКартинка", Тип("ДекорацияФормы"), Родитель);
			Элемент.Вид = ВидДекорацииФормы.Картинка;
			Элемент.Картинка = БиблиотекаКартинок.Информация;
			Элемент.Высота = 1;
			Элемент.Ширина = 2;
		КонецЕсли;
		
		Элемент = ФормаЗадачи.Элементы.Найти("__ВедущаяЗадача");
		Если Элемент = Неопределено Тогда
			Элемент = ФормаЗадачи.Элементы.Добавить("__ВедущаяЗадача", Тип("ДекорацияФормы"), Родитель);
			Элемент.Вид = ВидДекорацииФормы.Надпись;
			Элемент.Заголовок = НСтр("ru ='Это ведущая задача для вложенных бизнес-процессов. Она будет выполнена автоматически при их завершении.'");
			Элемент.Высота = 0; // автовысота
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры             

// Вызывается при создании формы списка задач на сервере.
//
// Параметры:
//  УсловноеОформлениеСпискаЗадач - УсловноеОформление - условное оформление списка задач.
//
Процедура УстановитьОформлениеЗадач(Знач СписокЗадачИлиЕгоУсловноеОформление) Экспорт
	
	Если ТипЗнч(СписокЗадачИлиЕгоУсловноеОформление) = Тип("ДинамическийСписок") Тогда
		УсловноеОформлениеСпискаЗадач = СписокЗадачИлиЕгоУсловноеОформление.КомпоновщикНастроек.Настройки.УсловноеОформление;
		УсловноеОформлениеСпискаЗадач.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	Иначе
		УсловноеОформлениеСпискаЗадач = СписокЗадачИлиЕгоУсловноеОформление;
	КонецЕсли;
	
	// Удаление предустановленных элементов оформления.
	Предустановленные = Новый Массив;
	Элементы = УсловноеОформлениеСпискаЗадач.Элементы;
	Для каждого ЭлементУсловногоОформления Из Элементы Цикл
		Если ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Предустановленные.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого ЭлементУсловногоОформления Из Предустановленные Цикл
		Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЦикла;
		
	// Установка оформления для просроченных задач.
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДатаСеанса();
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение;   
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для выполненных задач.
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ВыполненнаяЗадача.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для задач, не принятых к исполнению.
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПринятаКИсполнению");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.НеПринятыеКИсполнениюЗадачи.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для незаполненного поля "Срок".
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ОформляемоеПоле.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	ЭлементЦветаОформления.Значение = НСтр("ru = 'Срок не указан'");
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для внешних пользователей, поле Автор пустое.
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
			ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
			ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Автор");
			ОформляемоеПоле.Использование = Истина;
			
			ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автор");
			ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбораДанных.ПравоеЗначение = ПользователиКлиентСервер.АвторизованныйПользователь();
			ЭлементОтбораДанных.Использование = Истина;

			ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
			ЭлементЦветаОформления.Значение = НСтр("ru = 'Представитель организации'");
			ЭлементЦветаОформления.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании формы списка бизнес-процессов на сервере.
//
// Параметры:
//  УсловноеОформлениеБизнесПроцессов - УсловноеОформление - условное оформление списка бизнес-процессов.
//
Процедура УстановитьОформлениеБизнесПроцессов(Знач УсловноеОформлениеБизнесПроцессов) Экспорт
	
	// Наименование не задано
	ЭлементУсловногоОформления = УсловноеОформлениеБизнесПроцессов.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Наименование");
	ОформляемоеПоле.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Наименование");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Без описания'"));
	
	// Завершенный бизнес-процесс
	ЭлементУсловногоОформления = УсловноеОформлениеБизнесПроцессов.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Завершен");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗавершенныйБизнесПроцесс);
	
КонецПроцедуры

// Возвращает строковое представление исполнителя задачи Исполнитель, 
// либо указанного в параметрах РольИсполнителя, ОсновнойОбъектАдресации и ДополнительныйОбъектАдресации.
//
// Параметры:
//  Исполнитель     - ПользовательСсылка  - исполнитель задачи.
//  РольИсполнителя  - Справочники.РолиИсполнителей - роль.
//  ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации - произвольный ссылочный тип.
//
// Возвращаемое значение:
//   Строка 
//
Функция ИсполнительСтрокой(Знач Исполнитель, Знач РольИсполнителя,
	Знач ОсновнойОбъектАдресации = Неопределено, Знач ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		Возврат Строка(Исполнитель)
	ИначеЕсли НЕ РольИсполнителя.Пустая() Тогда
		Возврат РольСтрокой(РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации);
	КонецЕсли;
	Возврат НСтр("ru = 'Не указан'");

КонецФункции

// Возвращает строковое представление роли РольИсполнителя.
//
// Параметры:
//  РольИсполнителя  - Справочники.РолиИсполнителей - роль.
//  ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации - произвольный ссылочный тип.
//
// Возвращаемое значение:
//   Строка 
//
Функция РольСтрокой(Знач РольИсполнителя,
	Знач ОсновнойОбъектАдресации = Неопределено, Знач ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	Если НЕ РольИсполнителя.Пустая() Тогда
		Результат = Строка(РольИсполнителя);
		Если ОсновнойОбъектАдресации <> Неопределено Тогда
			Результат = Результат + " (" + Строка(ОсновнойОбъектАдресации);
			Если ДополнительныйОбъектАдресации <> Неопределено Тогда
				Результат = Результат + " ," + Строка(ДополнительныйОбъектАдресации);
			КонецЕсли;
			Результат = Результат + ")";
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	Возврат "";

КонецФункции

// Помечает на удаление задачи бизнес-процесса БизнесПроцессСсылка.
//
// Параметры:
//  БизнесПроцессСсылка  - бизнес-процесс.
//  ПометкаУдаления  - Булево - значение свойства ПометкаУдаления.
//
Процедура УстановитьПометкуУдаленияЗадач(БизнесПроцессСсылка, ПометкаУдаления) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", БизнесПроцессСсылка);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	Задачи.Ссылка КАК Ссылка 
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК Задачи
			|ГДЕ
			|	Задачи.БизнесПроцесс = &БизнесПроцесс");
		Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		КонецЦикла;	
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, 
			БизнесПроцессСсылка.Метаданные(), БизнесПроцессСсылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры	

// Установить формат отображения и редактирования поля формы типа Дата
// в зависимости от настроек подсистемы.
//
// Параметры:
//  ПолеДаты  - элемент управления формы, поле со значением типа Дата.
//
Процедура УстановитьФорматДаты(ПолеДаты) Экспорт
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	СтрокаФормата = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДЛФ=DT", "ДЛФ=D");
	Если ПолеДаты.Вид = ВидПоляФормы.ПолеВвода Тогда
		ПолеДаты.ФорматРедактирования 	= СтрокаФормата;
	Иначе	
		ПолеДаты.Формат					= СтрокаФормата;
	КонецЕсли;	
	ПолеДаты.Ширина = ?(ИспользоватьДатуИВремяВСрокахЗадач, 0, 8);
	
КонецПроцедуры		

// Получить бизнес-процессы ведущей задачи ЗадачаСсылка.
//
// Параметры:
//   ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - задача.
//   ДляИзменения - Булево - если Истина, то следует установить исключительную управляемую блокировку 
//                           на все бизнес-процессы указанной ведущей задачи. По умолчанию, Ложь.
// Возвращаемое значение:
//    Массив - массив бизнес-процессов.
// 
Функция БизнесПроцессыВедущейЗадачи(ЗадачаСсылка, ДляИзменения = Ложь) Экспорт
	
	Результат = ВыбратьБизнесПроцессыВедущейЗадачи(ЗадачаСсылка, ДляИзменения);
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
КонецФункции	

// Возвращает дату завершения указанного бизнес-процесса,
// полученную как максимальная дата исполнения задач бизнес-процесса.
//
// Параметры:
//  БизнесПроцессСсылка  - бизнес-процесс.
//
// Возвращаемое значение:
//   Дата 
//
Функция ДатаЗавершенияБизнесПроцесса(БизнесПроцессСсылка) Экспорт 
	
	ВыполнитьПроверкуПравДоступа("Чтение", БизнесПроцессСсылка.Метаданные());
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ЗадачаИсполнителя.ДатаИсполнения) КАК МаксДатаИсполнения
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.Выполнена = ИСТИНА";
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат ТекущаяДатаСеанса();
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.МаксДатаИсполнения;
	
КонецФункции	

// Возвращает массив подчиненных указанной задаче бизнес-процессов.
//
// Параметры:
//  ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача.
//  ДляИзменения  - Булево - если Истина, то следует установить исключительную управляемую блокировку 
//                           на все бизнес-процессы, подчиненные указанной задаче. По умолчанию, Ложь.
//
// Возвращаемое значение:
//   Массив - массив ссылок на бизнес-процессы.
//
Функция БизнесПроцессыГлавнойЗадачи(ЗадачаСсылка, ДляИзменения = Ложь) Экспорт
	
	Результат = Новый Массив;
	Для Каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		// У бизнес-процесса может и не быть главной задачи.
		РеквизитГлавнаяЗадача = МетаданныеБизнесПроцесса.Реквизиты.Найти("ГлавнаяЗадача");
		Если РеквизитГлавнаяЗадача = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
			
		Если ДляИзменения Тогда
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(МетаданныеБизнесПроцесса.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("ГлавнаяЗадача", ЗадачаСсылка);
			Блокировка.Заблокировать();
		КонецЕсли;
		
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	%1.Ссылка КАК Ссылка
			|ИЗ
			|	%2 КАК %1
			|ГДЕ
			|	%1.ГлавнаяЗадача = &ГлавнаяЗадача", 
			МетаданныеБизнесПроцесса.Имя, МетаданныеБизнесПроцесса.ПолноеИмя());
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ГлавнаяЗадача", ЗадачаСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Ссылка);
		КонецЦикла;
			
	КонецЦикла;	
	
	Возврат Результат;
		
КонецФункции	

// Проверяет у текущего пользователя наличие прав на изменение состояния бизнес-процесса.
//
// Параметры:
//  БизнесПроцессОбъект - объект бизнес-процесса.
//
Процедура ПроверитьПраваНаИзменениеСостоянияБизнесПроцесса(БизнесПроцессОбъект) Экспорт
	
	Если Не ЗначениеЗаполнено(БизнесПроцессОбъект.Состояние) Тогда 
		БизнесПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	КонецЕсли;
	
	Если БизнесПроцессОбъект.ЭтоНовый() Тогда
		ПредыдущееСостояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	Иначе
		ПредыдущееСостояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцессОбъект.Ссылка, "Состояние");
	КонецЕсли;
	
	Если ПредыдущееСостояние <> БизнесПроцессОбъект.Состояние Тогда
		
		Если Не ЕстьПраваНаОстановкуБизнесПроцесса(БизнесПроцессОбъект) Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недостаточно прав для остановки бизнес-процесса ""%1"".'"),
				Строка(БизнесПроцессОбъект));
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		Если ПредыдущееСостояние = Перечисления.СостоянияБизнесПроцессов.Активен Тогда
			
			Если БизнесПроцессОбъект.Завершен Тогда
				ВызватьИсключение НСтр("ru = 'Невозможно остановить завершенные бизнес-процессы.'");
			КонецЕсли;
				
			Если Не БизнесПроцессОбъект.Стартован Тогда
				ВызватьИсключение НСтр("ru = 'Невозможно остановить не стартовавшие бизнес-процессы.'");
			КонецЕсли;
			
		ИначеЕсли ПредыдущееСостояние = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
			
			Если БизнесПроцессОбъект.Завершен Тогда
				ВызватьИсключение НСтр("ru = 'Невозможно сделать активными завершенные бизнес-процессы.'");
			КонецЕсли;
				
			Если Не БизнесПроцессОбъект.Стартован Тогда
				ВызватьИсключение НСтр("ru = 'Невозможно сделать активными не стартовавшие бизнес-процессы.'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Установить исключительную управляемую блокировку на массив переданных бизнес-процессов.
//
// Параметры:
//   БизнесПроцессы - Массив - массив ссылок на бизнес-процессы, или одна ссылка на бизнес-процесс.
//
Процедура ЗаблокироватьБизнесПроцессы(БизнесПроцессы) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	Если ТипЗнч(БизнесПроцессы) = Тип("Массив") Тогда
		Для каждого БизнесПроцесс Из БизнесПроцессы Цикл
			
			Если ТипЗнч(БизнесПроцесс) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;	
			
			ЭлементБлокировки = Блокировка.Добавить(БизнесПроцесс.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", БизнесПроцесс);
		КонецЦикла;
	Иначе	
		Если ТипЗнч(БизнесПроцессы) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Возврат;
		КонецЕсли;	
		ЭлементБлокировки = Блокировка.Добавить(БизнесПроцессы.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", БизнесПроцессы);
	КонецЕсли;
	Блокировка.Заблокировать();
	
КонецПроцедуры	

// Установить исключительную управляемую блокировку на массив переданных задач.
//
// Параметры:
//   Задачи - Массив - массив ссылок на задачи, или одна ссылка ЗадачаСсылка.ЗадачаИсполнителя.
//
Процедура ЗаблокироватьЗадачи(Задачи) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	Если ТипЗнч(Задачи) = Тип("Массив") Тогда
		Для каждого Задача Из Задачи Цикл
			
			Если ТипЗнч(Задача) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
				Продолжить;
			КонецЕсли;
			
			ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача);
		КонецЦикла;
	Иначе	
		Если ТипЗнч(БизнесПроцессы) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Возврат;
		КонецЕсли;	
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Задачи);
	КонецЕсли;
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Заполняет реквизит ГлавнаяЗадача при создании бизнес-процесса
// на основании другого бизнес-процесса.
//
Процедура ЗаполнитьГлавнуюЗадачу(БизнесПроцессОбъект, ДанныеЗаполнения) Экспорт
	
	СтандартнаяОбработка = Истина;
	БизнесПроцессыИЗадачиПереопределяемый.ПриЗаполненииГлавнойЗадачиБизнесПроцесса(БизнесПроцессОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		БизнесПроцессОбъект.ГлавнаяЗадача = ДанныеЗаполнения;
	КонецЕсли;
	
КонецПроцедуры

// Получить группу исполнителей задач, которая соответствует реквизитам адресации.
// Если группа еще не существует, то создается и возвращается новая.
// 
// Параметры:
//  РольИсполнителя                - СправочникСсылка.РолиИсполнителей
//  ОсновнойОбъектАдресации        - ЛюбаяСсылка
//  ДополнительныйОбъектАдресации  - ЛюбаяСсылка.
// 
// Возвращаемое значение:
//   СправочникСсылка.ГруппыИсполнителейЗадач.
//
Функция ГруппаИсполнителейЗадач(РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппыИсполнителейЗадач");
		ЭлементБлокировки.УстановитьЗначение("РольИсполнителя", РольИсполнителя);
		ЭлементБлокировки.УстановитьЗначение("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
		ЭлементБлокировки.УстановитьЗначение("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ГруппыИсполнителейЗадач.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ГруппыИсполнителейЗадач КАК ГруппыИсполнителейЗадач
			|ГДЕ
			|	ГруппыИсполнителейЗадач.РольИсполнителя = &РольИсполнителя
			|	И ГруппыИсполнителейЗадач.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
			|	И ГруппыИсполнителейЗадач.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации");
		Запрос.УстановитьПараметр("РольИсполнителя",               РольИсполнителя);
		Запрос.УстановитьПараметр("ОсновнойОбъектАдресации",       ОсновнойОбъектАдресации);
		Запрос.УстановитьПараметр("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ГруппаИсполнителей = Выборка.Ссылка;
		Иначе
			// Требуется добавить новую группу исполнителей задач.
			ГруппаИсполнителейОбъект = Справочники.ГруппыИсполнителейЗадач.СоздатьЭлемент();
			ГруппаИсполнителейОбъект.РольИсполнителя               = РольИсполнителя;
			ГруппаИсполнителейОбъект.ОсновнойОбъектАдресации       = ОсновнойОбъектАдресации;
			ГруппаИсполнителейОбъект.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресации;
			ГруппаИсполнителейОбъект.Записать();
			ГруппаИсполнителей = ГруппаИсполнителейОбъект.Ссылка;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;	
	Возврат ГруппаИсполнителей;
		
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Обработчики регламентных заданий.

// Обработчик регламентного задания УведомлениеИсполнителейОНовыхЗадачах.
//
Процедура УведомитьИсполнителейОНовыхЗадачах() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УведомлениеИсполнителейОНовыхЗадачах);
	ПроверитьСистемнаяУчетнаяЗаписьНастроена();
	
	ДатаУведомления = ТекущаяДатаСеанса();
	ДатаПоследнегоУведомления = Константы.ДатаУведомленияОНовыхЗадачах.Получить();
	
	// Если оповещение ранее не производилось, или последнее оповещение происходило
	// ранее, чем за сутки, то отбираем новые задачи за последние сутки.
	Если (ДатаПоследнегоУведомления = '00010101000000') 
		Или (ДатаУведомления - ДатаПоследнегоУведомления > 24*60*60) Тогда
		ДатаПоследнегоУведомления = ДатаУведомления - 24*60*60;
	КонецЕсли;
	
	ВидСообщения = НСтр("ru = 'Бизнес-процессы и задачи.Уведомление о новых задачах'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ВидСообщения,
		УровеньЖурналаРегистрации.Информация, , ,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Начато регламентное уведомление о новых задачах за период %1 - %2'"),
			ДатаПоследнегоУведомления, ДатаУведомления));
			
	ЗадачиПоИсполнителям = ВыбратьНовыеЗадачиПоИсполнителям(ДатаПоследнегоУведомления, ДатаУведомления);
	Для Каждого СтрокаИсполнителя Из ЗадачиПоИсполнителям.Строки Цикл
		ОтправитьУведомлениеОНовыхЗадачах(СтрокаИсполнителя.Исполнитель, СтрокаИсполнителя);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ДатаУведомленияОНовыхЗадачах.Установить(ДатаУведомления);
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаписьЖурналаРегистрации(ВидСообщения,
		УровеньЖурналаРегистрации.Информация, , ,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Завершено регламентное уведомление о новых задачах (уведомлено исполнителей: %1)'"),
			ЗадачиПоИсполнителям.Строки.Количество()));
	
КонецПроцедуры

// Обработчик регламентного задания МониторингЗадач.
//
Процедура ПроконтролироватьЗадачи() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.МониторингЗадач);
	ПроверитьСистемнаяУчетнаяЗаписьНастроена();

	ПросроченныеЗадачи = ВыбратьПросроченныеЗадачи();
	Если ПросроченныеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	НаборПисемПоАдресатам = ВыбратьИсполнителейПросроченныхЗадач(ПросроченныеЗадачи);
	Для Каждого ПисьмоИзНабора Из НаборПисемПоАдресатам Цикл
		ОтправитьУведомлениеОПросроченныхЗадачах(ПисьмоИзНабора);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// Подготовить первую порцию объектов для отложенной обработки прав доступа.
// Для вызова из отложенных обработчиков обновления при изменении логики формирования наборов значений доступа.
//
// Параметры:
//   Параметры     - Структура - структура параметров отложенного обработчика обновления.
//   БизнесПроцесс - ОбъектМетаданных: БизнесПроцесс - метаданные бизнес-процесса, наборы значений доступа
//                   которого требуется обновить.
//   ИмяПроцедуры  - Строка - имя процедуры отложенного обработчика обновления для журнала регистрации.
//   РазмерПорции  - Число  - количество объектов, обрабатываемых за один вызов.
//
Процедура НачатьОбновлениеПорцииНаборовЗначенийДоступа(Параметры, БизнесПроцесс, ИмяПроцедуры, РазмерПорции = 1000) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ТаблицаСНаборамиЗначенийДоступа.Ссылка) КАК Количество,
			|	МАКСИМУМ(ТаблицаСНаборамиЗначенийДоступа.Дата) КАК Дата
			|ИЗ
			|	%1 КАК ТаблицаСНаборамиЗначенийДоступа";
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, БизнесПроцесс.ПолноеИмя());
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = РезультатЗапроса[0].Количество;
		
		Если Не Параметры.Свойство("НачальнаяДатаКОбработке") Тогда
			Параметры.Вставить("НачальнаяДатаКОбработке", РезультатЗапроса[0].Дата);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Параметры.Свойство("ПроблемныеОбъекты") Тогда
		Параметры.Вставить("ПроблемныеОбъекты", Новый Массив);
	КонецЕсли;
	
	Если Не Параметры.Свойство("НачальнаяСсылкаКОбработке") Тогда
		Параметры.Вставить("НачальнаяСсылкаКОбработке", ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(БизнесПроцесс.ПолноеИмя()).ПустаяСсылка());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ %1
		|	ТаблицаСНаборамиЗначенийДоступа.Ссылка КАК Ссылка,
		|	ТаблицаСНаборамиЗначенийДоступа.Дата КАК Дата
		|ИЗ
		|	%2 КАК ТаблицаСНаборамиЗначенийДоступа
		|ГДЕ ТаблицаСНаборамиЗначенийДоступа.Дата <= &НачальнаяДатаКОбработке
		|   И ТаблицаСНаборамиЗначенийДоступа.Ссылка > &НачальнаяСсылкаКОбработке
		|УПОРЯДОЧИТЬ ПО 
		|   Дата УБЫВ,
		|   Ссылка";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, Формат(РазмерПорции, "ЧГ=0"), БизнесПроцесс.ПолноеИмя());
	Запрос.УстановитьПараметр("НачальнаяДатаКОбработке", Параметры.НачальнаяДатаКОбработке);
	Запрос.УстановитьПараметр("НачальнаяСсылкаКОбработке", Параметры.НачальнаяСсылкаКОбработке);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	ОбъектыКОбработке = РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	Параметры.Вставить("ОбъектыКОбработке", ОбъектыКОбработке);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Параметры.ОбъектыКОбработке, Параметры.ПроблемныеОбъекты);
	Параметры.ПроблемныеОбъекты.Очистить();
	
	Параметры.ОбработкаЗавершена = ОбъектыКОбработке.Количество() = 0 
		Или РезультатЗапроса[0].Ссылка = Параметры.НачальнаяСсылкаКОбработке;
	Если Не Параметры.ОбработкаЗавершена Тогда
		
		Если Не Параметры.Свойство("БизнесПроцесс") Тогда
			Параметры.Вставить("БизнесПроцесс", БизнесПроцесс);
		КонецЕсли;
		
		Если Не Параметры.Свойство("ОбъектовОбработано") Тогда
			Параметры.Вставить("ОбъектовОбработано", 0);
		КонецЕсли;
		
		Если Не Параметры.Свойство("ИмяПроцедуры") Тогда
			Параметры.Вставить("ИмяПроцедуры", ИмяПроцедуры);
		КонецЕсли;
		
		Параметры.НачальнаяДатаКОбработке = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Дата;
		Параметры.НачальнаяСсылкаКОбработке = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Завершить обработку первой порции объектов для отложенной обработки прав доступа.
// Для вызова из отложенных обработчиков обновления при изменении логики формирования наборов значений доступа.
//
// Параметры:
//   Параметры     - Структура - структура параметров отложенного обработчика обновления.
//
Процедура ЗавершитьОбновлениеПорцииНаборовЗначенийДоступа(Параметры) Экспорт
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + Параметры.ОбъектовОбработано;
	Если Параметры.ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ""%1"" не удалось обновить права доступа для некоторых объектов (пропущены): %1'"), 
				Параметры.ИмяПроцедуры, Параметры.ПроблемныеОбъекты.Количество());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
		Параметры.БизнесПроцесс,, 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Процедура ""%1"" обновила права доступа для очередной порции объектов: %2'"), 
			Параметры.ИмяПроцедуры, Параметры.ОбъектовОбработано));
	
	// Очистка временных параметров, которые не нужно сохранять между сеансами.
	Параметры.Удалить("ОбъектыКОбработке");
	Параметры.Удалить("ИмяПроцедуры");
	Параметры.Удалить("БизнесПроцесс");
	Параметры.Удалить("ОбъектовОбработано");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Объявляет служебные события подсистемы БизнесПроцессыИЗадачи:
//
// Серверные события:
//  -
//
// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия) Экспорт
	
	// СЕРВЕРНЫЕ СОБЫТИЯ.
	
КонецПроцедуры

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"БизнесПроцессыИЗадачиСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииИсключенийПоискаСсылок"].Добавить(
		"БизнесПроцессыИЗадачиСервер");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.НапоминанияПользователя") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.НапоминанияПользователя\ПриЗаполненииСпискаРеквизитовИсточникаСДатамиДляНапоминания"].Добавить(
			"БизнесПроцессыИЗадачиСервер");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.УправлениеДоступом\ПриЗаполненииЗависимостейПравДоступа"].Добавить(
			"БизнесПроцессыИЗадачиСервер");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.УправлениеДоступом\ПриЗаполненииВидовОграниченийПравОбъектовМетаданных"].Добавить(
			"БизнесПроцессыИЗадачиСервер");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.УправлениеДоступом\ПриЗаполненииВидовДоступа"].Добавить(
			"БизнесПроцессыИЗадачиСервер");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий\ПриПолученииСпискаШаблонов"].Добавить(
			"БизнесПроцессыИЗадачиСервер");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.ВариантыОтчетов\ПриНастройкеВариантовОтчетов"].Добавить(
			"БизнесПроцессыИЗадачиСервер");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.ТекущиеДела\ПриЗаполненииСпискаТекущихДел"].Добавить(
			"БизнесПроцессыИЗадачиСервер");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в эту подсистему.

// Возвращает менеджер временных таблиц, содержащий временную таблицу пользователей
// некоторых дополнительных групп пользователей, например, пользователей групп
// исполнителей задач, которые соответствуют ключам адресации
// (РольИсполнителя + ОсновнойОбъектАдресации + ДополнительныйОбъектАдресации).
//
//  При изменении состава дополнительных групп пользователей, необходимо вызвать
// процедуру ОбновитьПользователейГруппИсполнителей в модуле УправлениеДоступом,
// чтобы применить изменения к внутренним данным подсистемы.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц, в который можно поместить таблицу:
//                            ТаблицаГруппИсполнителей с полями:
//                              ГруппаИсполнителей - Например,
//                                                   СправочникСсылка.ГруппыИсполнителейЗадач.
//                              Пользователь       - СправочникСсылка.Пользователи,
//                                                   СправочникСсылка.ВнешниеПользователи.
//
//  СодержаниеПараметра     - Неопределено - параметр не указан, вернуть все данные.
//                            Строка, когда
//                              "ГруппыИсполнителей" требуется вернуть
//                               только составы указанных групп исполнителей.
//                              "Исполнители" требуется вернуть
//                               только составы групп исполнителей, которые
//                               в которые входят указанные исполнители.
//
//  ЗначениеПараметра       - Неопределено, когда СодержаниеПараметра = Неопределено,
//                          - Например, СправочникСсылка.ГруппыИсполнителейЗадач,
//                            когда СодержаниеПараметра = "ГруппыИсполнителей".
//                          - СправочникСсылка.Пользователи,
//                            СправочникСсылка.ВнешниеПользователи,
//                            когда СодержаниеПараметра = "Исполнители".
//                            Массив указанных выше типов.
//
//  НетГруппИсполнителей    - Булево, если Ложь, МенеджерВременныхТаблиц содержит временную таблицу, иначе нет.
//
Процедура ПриОпределенииГруппИсполнителей(МенеджерВременныхТаблиц, СодержаниеПараметра, ЗначениеПараметра, НетГруппИсполнителей) Экспорт
	
	НетГруппИсполнителей = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если СодержаниеПараметра = "ГруппыИсполнителей" Тогда
		
		Запрос.УстановитьПараметр("ГруппыИсполнителей", ЗначениеПараметра);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиЗадач.ГруппаИсполнителейЗадач КАК ГруппаИсполнителей,
		|	ИсполнителиЗадач.Исполнитель КАК Пользователь
		|ПОМЕСТИТЬ ТаблицаГруппИсполнителей
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.ГруппаИсполнителейЗадач В(&ГруппыИсполнителей)";
		
	ИначеЕсли СодержаниеПараметра = "Исполнители" Тогда
		
		Запрос.УстановитьПараметр("Исполнители", ЗначениеПараметра);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиЗадач.ГруппаИсполнителейЗадач КАК ГруппаИсполнителей,
		|	ИсполнителиЗадач.Исполнитель КАК Пользователь
		|ПОМЕСТИТЬ ТаблицаГруппИсполнителей
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				РегистрСведений.ИсполнителиЗадач КАК ГруппыИсполнителей
		|			ГДЕ
		|				ГруппыИсполнителей.ГруппаИсполнителейЗадач = ИсполнителиЗадач.ГруппаИсполнителейЗадач
		|				И ГруппыИсполнителей.Исполнитель В (&Исполнители))";
		
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиЗадач.ГруппаИсполнителейЗадач КАК ГруппаИсполнителей,
		|	ИсполнителиЗадач.Исполнитель КАК Пользователь
		|ПОМЕСТИТЬ ТаблицаГруппИсполнителей
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач";
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Определить список справочников, доступных для загрузки с помощью подсистемы "Загрузка данных из файла".
//
// Параметры:
//  ЗагружаемыеСправочники - ТаблицаЗначений - список справочников, в которые возможна загрузка данных.
//      * ПолноеИмя          - Строка - полное имя справочника (как в метаданных).
//      * Представление      - Строка - представление справочника в списке выбора.
//      * ПрикладнаяЗагрузка - Булево - если Истина, значит справочник использует собственный алгоритм загрузки и
//                                      в модуле менеджера справочника определены функции.
//
Процедура ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт
	
	// Загрузка в справочник ГруппыИсполнителейЗадач запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.ГруппыИсполнителейЗадач.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность 
// редактирования реквизитов при групповом изменении.
//
// Параметры:
//   Объекты - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                            подключенного к подсистеме "Групповое изменение объектов". 
//                            Дополнительно в значении могут быть перечислены имена экспортных функций:
//                            "РеквизитыНеРедактируемыеВГрупповойОбработке",
//                            "РеквизитыРедактируемыеВГрупповойОбработке".
//                            Каждое имя должно начинаться с новой строки.
//                            Если указана пустая строка, значит в модуле менеджера определены обе функции.
//
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.БизнесПроцессы.Задание.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Задачи.ЗадачаИсполнителя.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ГруппыИсполнителейЗадач.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.РолиИсполнителей.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
КонецПроцедуры

// См. описание одноименной процедуры в общем модуле РегламентныеЗаданияПереопределяемый.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.МониторингЗадач;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьБизнесПроцессыИЗадачи;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.УведомлениеИсполнителейОНовыхЗадачах;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьБизнесПроцессыИЗадачи;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП.

// Заполняет массив списком имен объектов метаданных, данные которых могут содержать ссылки на различные объекты
// метаданных, но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Параметры:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Процедура ПриДобавленииИсключенийПоискаСсылок(Массив) Экспорт
	
	Массив.Добавить(Метаданные.РегистрыСведений.ИсполнителиЗадач.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ДанныеБизнесПроцессов.ПолноеИмя());
	
КонецПроцедуры

// Обработчик события ПриПолученииСпискаШаблонов.
//
// Формирует список шаблонов заданий очереди.
//
// Параметры:
//  Шаблоны - Массив строк. В параметр следует добавить имена предопределенных
//   неразделенных регламентных заданий, которые должны использоваться в качестве
//   шаблонов для заданий очереди.
//
Процедура ПриПолученииСпискаШаблонов(Шаблоны) Экспорт
	
	Шаблоны.Добавить("МониторингЗадач");
	Шаблоны.Добавить("УведомлениеИсполнителейОНовыхЗадачах");
	
КонецПроцедуры

// Переопределяет массив реквизитов объекта, относительно которых разрешается устанавливать время напоминания.
// Например, можно скрыть те реквизиты с датами, которые являются служебными или не имеют смысла для 
// установки напоминаний: дата документа или задачи и прочие.
// 
// Параметры:
//  Источник	 - Любая ссылка - Ссылка на объект, для которого формируется массив реквизитов с датами.
//  МассивРеквизитов - Массив - Массив имен реквизитов (из метаданных), содержащих даты.
//
Процедура ПриЗаполненииСпискаРеквизитовИсточникаСДатамиДляНапоминания(Источник, МассивРеквизитов) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		МассивРеквизитов.Очистить();
		МассивРеквизитов.Добавить("СрокИсполнения"); 
		МассивРеквизитов.Добавить("ДатаНачала"); 
	КонецЕсли;
	
КонецПроцедуры

// Заполняет зависимости прав доступа "подчиненного" объекта, например, задачи ЗадачаИсполнителя,
// от "ведущего" объекта, например,  бизнес-процесса Задание, которые отличаются от стандартных.
//
// Зависимости прав используются в стандартном шаблоне ограничения доступа для вида доступа "Объект":
// 1) стандартно при чтении "подчиненного" объекта
//    проверяется наличие права чтения "ведущего" объекта
//    и проверяется отсутствие ограничения чтения "ведущего" объекта;
// 2) стандартно при добавлении, изменении, удалении "подчиненного" объекта
//    проверяется наличие права изменения "ведущего" объекта
//    и проверяется отсутствие ограничения изменения "ведущего" объекта.
//
// Допускается только одно переназначение по сравнению со стандартным:
// в пункте "2)" вместо проверки права изменения "ведущего" объекта установить
// проверку права чтения "ведущего" объекта.
//
// Параметры:
//  ЗависимостиПрав - ТаблицаЗначений с колонками:
//                    - ВедущаяТаблица     - Строка, например, "БизнесПроцесс.Задание".
//                    - ПодчиненнаяТаблица - Строка, например, "Задача.ЗадачаИсполнителя".
//
Процедура ПриЗаполненииЗависимостейПравДоступа(ЗависимостиПрав) Экспорт
	
	// Задача исполнителя может быть изменена, когда бизнес-процесс доступен только для чтения,
	// поэтому проверка права изменения и ограничения изменения не требуется,
	// а требуется более "мягкое" условие - проверка права и ограничения чтения.
	
	Строка = ЗависимостиПрав.Добавить();
	Строка.ПодчиненнаяТаблица = "Задача.ЗадачаИсполнителя";
	Строка.ВедущаяТаблица     = "БизнесПроцесс.Задание";
	
КонецПроцедуры

// Заполняет состав видов доступа, используемых при ограничении прав объектов метаданных.
// Если состав видов доступа не заполнен, отчет "Права доступа" покажет некорректные сведения.
//
// Обязательно требуется заполнить только виды доступа, используемые
// в шаблонах ограничения доступа явно, а виды доступа, используемые
// в наборах значений доступа могут быть получены из текущего состояния
// регистра сведений НаборыЗначенийДоступа.
//
//  Для автоматической подготовки содержимого процедуры следует
// воспользоваться инструментами разработчика для подсистемы.
// Управление доступом.
//
// Параметры:
//  Описание     - Строка, многострочная строка формата <Таблица>.<Право>.<ВидДоступа>[.Таблица объекта].
//                 Например, Документ.ПриходнаяНакладная.Чтение.Организации
//                           Документ.ПриходнаяНакладная.Чтение.Контрагенты
//                           Документ.ПриходнаяНакладная.Изменение.Организации
//                           Документ.ПриходнаяНакладная.Изменение.Контрагенты
//                           Документ.ЭлектронныеПисьма.Чтение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.ЭлектронныеПисьма.Изменение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.Файлы.Чтение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Чтение.Объект.Документ.ЭлектронноеПисьмо
//                           Документ.Файлы.Изменение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Изменение.Объект.Документ.ЭлектронноеПисьмо
//                 Вид доступа Объект предопределен, как литерал, его нет в предопределенных элементах.
//                 ПланыВидовХарактеристик.ВидыДоступа. Этот вид доступа используется в шаблонах ограничений доступа,
//                 как "ссылка" на другой объект, по которому ограничивается таблица.
//                 Когда вид доступа "Объект" задан, также требуется задать типы таблиц, которые используются
//                 для этого вида доступа. Т.е. перечислить типы, которые соответствующие полю,
//                 использованному в шаблоне ограничения доступа в паре с видом доступа "Объект".
//                 При перечислении типов по виду доступа "Объект" нужно перечислить только те типы поля,
//                 которые есть у поля РегистрыСведений.НаборыЗначенийДоступа.Объект, остальные типы лишние.
// 
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Возврат;
	КонецЕсли;
	
	Описание = Описание 
		+ "
		|БизнесПроцесс.Задание.Чтение.Пользователи
		|БизнесПроцесс.Задание.Изменение.Пользователи
		|Задача.ЗадачаИсполнителя.Чтение.Объект.БизнесПроцесс.Задание
		|Задача.ЗадачаИсполнителя.Чтение.Пользователи
		|Задача.ЗадачаИсполнителя.Изменение.Пользователи
		|РегистрСведений.ДанныеБизнесПроцессов.Чтение.Объект.БизнесПроцесс.Задание
		|";
	
КонецПроцедуры

// Заполняет виды доступа, используемые в ограничениях прав доступа.
// Виды доступа Пользователи и ВнешниеПользователи уже заполнены.
// Их можно удалить, если они не требуются для ограничения прав доступа.
//
// Параметры:
//  ВидыДоступа - ТаблицаЗначений - с колонками:
//   * Имя                    - Строка - имя используемое в описании поставляемых
//                                       профилей групп доступа и текстах ОДД.
//   * Представление          - Строка - представляет вид доступа в профилях и группах доступа.
//   * ТипЗначений            - Тип    - тип ссылки значений доступа.
//                                       Например, Тип("СправочникСсылка.Номенклатура").
//   * ТипГруппЗначений       - Тип    - тип ссылки групп значений доступа.
//                                       Например, Тип("СправочникСсылка.ГруппыДоступаНоменклатуры").
//   * НесколькоГруппЗначений - Булево - Истина указывает, что для значения доступа (Номенклатуры), можно
//                                       выбрать несколько групп значений (Групп доступа номенклатуры).
//
Процедура ПриЗаполненииВидовДоступа(ВидыДоступа) Экспорт
	
	ВидДоступа = ВидыДоступа.Найти("Пользователи", "Имя");
	Если ВидДоступа <> Неопределено Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ДобавитьДополнительныеТипыВидаДоступа(ВидДоступа,
			Тип("СправочникСсылка.ГруппыИсполнителейЗадач"));
	КонецЕсли;
	
КонецПроцедуры

// Содержит настройки размещения вариантов отчетов в панели отчетов.
//
// Параметры:
//   Настройки - Коллекция - Содержит настройки всех отчетов и вариантов конфигурации.
//       Используется для передачи в параметрах вспомогательных методов.
//
// Описание:
//   См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Вспомогательные методы:
//   1. Функция ОписаниеОтчета и ОписаниеВарианта формируют описание настроек отчета и варианта для последующего изменения:
//       НастройкиОтчета   = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.<ИмяОтчета>);
//       НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//       Возвращаемые коллекции содержат одинаковый набор свойств.
//       НастройкиОтчета используются как умолчания для вариантов, описания которых еще не получены.
//       Подробнее - см. "свойства для изменения" в комментарии к ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//   2. Процедура УстановитьРежимВыводаВПанеляхОтчетов позволяет настроить режим группировки вариантов в панелях отчетов:
//       ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина/Ложь);
//       ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, Метаданные.Отчеты.<ИмяОтчета>, Истина/Ложь);
//       ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, Метаданные.Подсистемы.<ИмяПодсистемы>, Истина/Ложь);
//   3. Процедура НастроитьОтчетВМодулеМенеджера позволяет переопределять настройки отчета в его модуле менеджера:
//       ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.<ИмяОтчета>);
//
Процедура ПриНастройкеВариантовОтчетов(Настройки) Экспорт
	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
	МодульВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.БизнесПроцессы);
	МодульВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ЗависшиеЗадачи);
	МодульВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.Задания);
	МодульВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.Задачи);
	МодульВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ЗадачиИстекающиеНаДату);
	МодульВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ПросроченныеЗадачи);
КонецПроцедуры

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если Не ПравоДоступа("Редактирование", Метаданные.Задачи.ЗадачаИсполнителя)
		Или МодульТекущиеДелаСервер.ДелоОтключено("ЗадачиИсполнителя") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоЗадачИсполнителя = КоличествоЗадачИсполнителя();
	
	// Процедура вызывается только при наличии подсистемы "Текущие дела", поэтому здесь
	// не делается проверка существования подсистемы.
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.Задачи.ЗадачаИсполнителя.ПолноеИмя());
	
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя()
		И Разделы.Количество() = 0 Тогда
		Разделы.Добавить(Метаданные.Задачи.ЗадачаИсполнителя);
	КонецЕсли;
	
	Для Каждого Раздел Из Разделы Цикл
		
		ИдентификаторМоихЗадач = "ЗадачиИсполнителя" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "");
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИдентификаторМоихЗадач;
		Дело.ЕстьДела       = КоличествоЗадачИсполнителя.Всего > 0;
		Дело.Представление  = НСтр("ru = 'Мои задачи'");
		Дело.Количество     = КоличествоЗадачИсполнителя.Всего;
		Дело.Форма          = "Задача.ЗадачаИсполнителя.Форма.МоиЗадачи";
		ЗначениеОтбора		= Новый Структура("Выполнена", Ложь);
		Дело.ПараметрыФормы = Новый Структура("Отбор", ЗначениеОтбора);
		Дело.Владелец       = Раздел;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "ЗадачиИсполнителяПросроченные";
		Дело.ЕстьДела       = КоличествоЗадачИсполнителя.Просроченные > 0;
		Дело.Представление  = НСтр("ru = 'просроченные'");
		Дело.Количество     = КоличествоЗадачИсполнителя.Просроченные;
		Дело.Важное         = Истина;
		Дело.Владелец       = ИдентификаторМоихЗадач; 
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "ЗадачиИсполнителяНаСегодня";
		Дело.ЕстьДела       = КоличествоЗадачИсполнителя.НаСегодня > 0;
		Дело.Представление  = НСтр("ru = 'сегодня'");
		Дело.Количество     = КоличествоЗадачИсполнителя.НаСегодня;
		Дело.Владелец       = ИдентификаторМоихЗадач; 

		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "ЗадачиИсполнителяНаНеделю";
		Дело.ЕстьДела       = КоличествоЗадачИсполнителя.НаНеделю > 0;
		Дело.Представление  = НСтр("ru = 'на этой неделе'");
		Дело.Количество     = КоличествоЗадачИсполнителя.НаНеделю;
		Дело.Владелец       = ИдентификаторМоихЗадач; 

		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "ЗадачиИсполнителяНаСледующуюНеделю";
		Дело.ЕстьДела       = КоличествоЗадачИсполнителя.НаСледующуюНеделю > 0;
		Дело.Представление  = НСтр("ru = 'на следующей неделе'");
		Дело.Количество     = КоличествоЗадачИсполнителя.НаСледующуюНеделю > 0;
		Дело.Владелец       = ИдентификаторМоихЗадач; 
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Мониторинг и контроль исполнения.

Функция ВыгрузитьИсполнителей(ТекстЗапроса, ОсновнойОбъектАдресацииСсылка, ДопОбъектАдресацииСсылка)
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Если ЗначениеЗаполнено(ДопОбъектАдресацииСсылка) Тогда
		Запрос.УстановитьПараметр("ДОА", ДопОбъектАдресацииСсылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОсновнойОбъектАдресацииСсылка) Тогда
		Запрос.УстановитьПараметр("ООА", ОсновнойОбъектАдресацииСсылка);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция НайтиИсполнителейПоРолям(Знач Задача, Знач БазовыйТекстЗапроса)
	
	СписокПользователей = Новый Массив;
	
	ООА = Задача.ОсновнойОбъектАдресации;
	ДОА = Задача.ДополнительныйОбъектАдресации;
	
	Если ЗначениеЗаполнено(ДОА) Тогда
		ТекстЗапроса = БазовыйТекстЗапроса + " И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ООА
		                                     |И ИсполнителиЗадач.ДополнительныйОбъектАдресации = &ДОА";
	ИначеЕсли ЗначениеЗаполнено(ООА) Тогда
		ТекстЗапроса = БазовыйТекстЗапроса 
			+ " И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ООА
		    |И (ИсполнителиЗадач.ДополнительныйОбъектАдресации = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ОбъектыАдресацииЗадач.ПустаяСсылка)
			|   ИЛИ ИсполнителиЗадач.ДополнительныйОбъектАдресации = Неопределено)";
	Иначе
		ТекстЗапроса = БазовыйТекстЗапроса 
			+ " И (ИсполнителиЗадач.ОсновнойОбъектАдресации = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ОбъектыАдресацииЗадач.ПустаяСсылка)
			|    ИЛИ ИсполнителиЗадач.ОсновнойОбъектАдресации = Неопределено)
		    |И (ИсполнителиЗадач.ДополнительныйОбъектАдресации = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ОбъектыАдресацииЗадач.ПустаяСсылка)
			|   ИЛИ ИсполнителиЗадач.ДополнительныйОбъектАдресации = Неопределено)";
	КонецЕсли;
	
	ВыгрузкаИсполнителей = ВыгрузитьИсполнителей(ТекстЗапроса, ООА, ДОА);
	
	// Если в задаче не заполнены основной и дополнительный объекты адресации.
	Если Не ЗначениеЗаполнено(ДОА) И Не ЗначениеЗаполнено(ООА) Тогда
		Для Каждого ЭлементВыгрузки Из ВыгрузкаИсполнителей Цикл
			СписокПользователей.Добавить(ЭлементВыгрузки.Исполнитель);
		КонецЦикла;
		
		Возврат СписокПользователей;
	КонецЕсли;
	
	Если ВыгрузкаИсполнителей.Количество() = 0 И ЗначениеЗаполнено(ДОА) Тогда
		ТекстЗапроса = БазовыйТекстЗапроса + " И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ООА
			|И (ИсполнителиЗадач.ДополнительныйОбъектАдресации = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ОбъектыАдресацииЗадач.ПустаяСсылка)
			|   ИЛИ ИсполнителиЗадач.ДополнительныйОбъектАдресации = Неопределено)";
		ВыгрузкаИсполнителей = ВыгрузитьИсполнителей(ТекстЗапроса, ООА, Неопределено);
	КонецЕсли;
	
	Если ВыгрузкаИсполнителей.Количество() = 0 Тогда
		ТекстЗапроса = БазовыйТекстЗапроса + " И (ИсполнителиЗадач.ОсновнойОбъектАдресации = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ОбъектыАдресацииЗадач.ПустаяСсылка)
			|    ИЛИ ИсполнителиЗадач.ОсновнойОбъектАдресации = Неопределено)
			|И (ИсполнителиЗадач.ДополнительныйОбъектАдресации = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ОбъектыАдресацииЗадач.ПустаяСсылка)
			|   ИЛИ ИсполнителиЗадач.ДополнительныйОбъектАдресации = Неопределено)";
		ВыгрузкаИсполнителей = ВыгрузитьИсполнителей(ТекстЗапроса, Неопределено, Неопределено);
	КонецЕсли;
	
	Для Каждого ЭлементВыгрузки Из ВыгрузкаИсполнителей Цикл
		СписокПользователей.Добавить(ЭлементВыгрузки.Исполнитель);
	КонецЦикла;
	
	Возврат СписокПользователей;
	
КонецФункции

Функция НайтиОтветственныхЗаНазначениеРолей(Знач Задача)
	
	БазовыйТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ ИсполнителиЗадач.Исполнитель
	                      |ИЗ
	                      |	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач, Справочник.РолиИсполнителей КАК РолиИсполнителей
	                      |ГДЕ
	                      |	ИсполнителиЗадач.РольИсполнителя = РолиИсполнителей.Ссылка
	                      |И
	                      |	РолиИсполнителей.Ссылка = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ОтветственныйЗаКонтрольИсполнения)";
						  
	Ответственные = НайтиИсполнителейПоРолям(Задача, БазовыйТекстЗапроса);
	Возврат Ответственные;
	
КонецФункции

Функция ВыбратьИсполнителейЗадач(Знач Задача)
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
				  |	ИсполнителиЗадач.Исполнитель КАК Исполнитель
				  |ИЗ
				  |	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
				  |ГДЕ
				  |	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
				  |	И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
				  |	И ИсполнителиЗадач.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации";
				  
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("РольИсполнителя", Задача.РольИсполнителя);
	Запрос.Параметры.Вставить("ОсновнойОбъектАдресации", Задача.ОсновнойОбъектАдресации);
	Запрос.Параметры.Вставить("ДополнительныйОбъектАдресации", Задача.ДополнительныйОбъектАдресации);
	Исполнители = Запрос.Выполнить().Выгрузить();
	Возврат Исполнители;
	
КонецФункции

Процедура НайтиПисьмоИДобавитьТекст(Знач НаборПисемПоАдресатам,
                                  Знач ПолучательПисьма,
                                  Знач ПредставлениеПолучателяПисьма,
                                  Знач ТекстПисьма,
                                  Знач ТипПисьма)
	
	ПараметрыОтбора = Новый Структура("ТипПисьма, ПочтовыйАдрес", ТипПисьма, ПолучательПисьма);
	СтрокаПараметрыПисьма = НаборПисемПоАдресатам.НайтиСтроки(ПараметрыОтбора);
	Если СтрокаПараметрыПисьма.Количество() = 0 Тогда
		СтрокаПараметрыПисьма = Неопределено;
	Иначе
		СтрокаПараметрыПисьма = СтрокаПараметрыПисьма[0];
	КонецЕсли;
	
	Если СтрокаПараметрыПисьма = Неопределено Тогда
		СтрокаПараметрыПисьма = НаборПисемПоАдресатам.Добавить();
		СтрокаПараметрыПисьма.ПочтовыйАдрес = ПолучательПисьма;
		СтрокаПараметрыПисьма.ТекстПисьма = "";
		СтрокаПараметрыПисьма.КоличествоЗадач = 0;
		СтрокаПараметрыПисьма.ТипПисьма = ТипПисьма;
		СтрокаПараметрыПисьма.Получатель = ПредставлениеПолучателяПисьма;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаПараметрыПисьма.ТекстПисьма) Тогда
		СтрокаПараметрыПисьма.ТекстПисьма =
		        СтрокаПараметрыПисьма.ТекстПисьма + Символы.ПС
		        + "------------------------------------"  + Символы.ПС;
	КонецЕсли;
	
	СтрокаПараметрыПисьма.КоличествоЗадач = СтрокаПараметрыПисьма.КоличествоЗадач + 1;
	СтрокаПараметрыПисьма.ТекстПисьма = СтрокаПараметрыПисьма.ТекстПисьма + ТекстПисьма;
	
КонецПроцедуры

Функция ВыбратьПросроченныеЗадачи()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителя.СрокИсполнения КАК СрокИсполнения,
		|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
		|	ЗадачаИсполнителя.РольИсполнителя КАК РольИсполнителя,
		|	ЗадачаИсполнителя.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
		|	ЗадачаИсполнителя.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации,
		|	ЗадачаИсполнителя.Автор КАК Автор,
		|	ЗадачаИсполнителя.Описание КАК Описание
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаИсполнителя.СрокИсполнения <= &Дата
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)";
	
	СрокИсполнения = КонецДня(ТекущаяДатаСеанса());

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Дата", СрокИсполнения);
	
	ПросроченныеЗадачи = Запрос.Выполнить().Выгрузить();
	
	Индекс = ПросроченныеЗадачи.Количество() - 1;
	Пока Индекс > 0 Цикл
		ПросроченнаяЗадача = ПросроченныеЗадачи[Индекс];
		Если НЕ ЗначениеЗаполнено(ПросроченнаяЗадача.Исполнитель) И БизнесПроцессыИЗадачиВызовСервера.ЭтоВедущаяЗадача(ПросроченнаяЗадача.Ссылка) Тогда
			ПросроченныеЗадачи.Удалить(ПросроченнаяЗадача);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат ПросроченныеЗадачи;
	
КонецФункции

Функция ВыбратьИсполнителейПросроченныхЗадач(ПросроченныеЗадачи)
	
	НаборПисемПоАдресатам = Новый ТаблицаЗначений;
	НаборПисемПоАдресатам.Колонки.Добавить("ПочтовыйАдрес");
	НаборПисемПоАдресатам.Колонки.Добавить("ТекстПисьма");
	НаборПисемПоАдресатам.Колонки.Добавить("КоличествоЗадач");
	НаборПисемПоАдресатам.Колонки.Добавить("ТипПисьма");
	НаборПисемПоАдресатам.Колонки.Добавить("Получатель");
	
	Для Каждого ЭлементПросроченныеЗадачи Из ПросроченныеЗадачи Цикл
		ПросроченнаяЗадача = ЭлементПросроченныеЗадачи.Ссылка;
		
		ТекстПисьма = СформироватьПредставлениеЗадачи(ЭлементПросроченныеЗадачи);
		// Задача адресована лично исполнителю?
		Если ЗначениеЗаполнено(ПросроченнаяЗадача.Исполнитель) Тогда
			ПолучательПисьма = "";
			ПриПолученииАдресаЭлектроннойПочты(ПросроченнаяЗадача.Исполнитель, ПолучательПисьма);
			НайтиПисьмоИДобавитьТекст(НаборПисемПоАдресатам, ПолучательПисьма, ПросроченнаяЗадача.Исполнитель, ТекстПисьма, "Исполнителю");
			ПолучательПисьма = "";
			ПриПолученииАдресаЭлектроннойПочты(ПросроченнаяЗадача.Автор, ПолучательПисьма);
			НайтиПисьмоИДобавитьТекст(НаборПисемПоАдресатам, ПолучательПисьма, ПросроченнаяЗадача.Автор, ТекстПисьма, "Автору");
		Иначе
			Исполнители = ВыбратьИсполнителейЗадач(ПросроченнаяЗадача);
			Координаторы = НайтиОтветственныхЗаНазначениеРолей(ПросроченнаяЗадача);
			// Есть хотя бы один исполнитель для измерений ролевой адресации задачи?
			Если Исполнители.Количество() > 0 Тогда
				// Исполнитель не выполняет свои задачи.
				Для Каждого Исполнитель Из Исполнители Цикл
					ПолучательПисьма = "";
					ПриПолученииАдресаЭлектроннойПочты(Исполнитель.Исполнитель, ПолучательПисьма);
					НайтиПисьмоИДобавитьТекст(НаборПисемПоАдресатам, ПолучательПисьма, Исполнитель.Исполнитель, ТекстПисьма, "Исполнителю");
				КонецЦикла;
			Иначе	// Задачу исполнять некому.
				СоздатьЗадачуПоНастройкеРолей(ПросроченнаяЗадача, Координаторы);
			КонецЕсли;
			
			Для Каждого Координатор Из Координаторы Цикл
				ПолучательПисьма = "";
				ПриПолученииАдресаЭлектроннойПочты(Координатор, ПолучательПисьма);
				НайтиПисьмоИДобавитьТекст(НаборПисемПоАдресатам, ПолучательПисьма, Координатор, ТекстПисьма, "Координатору");
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НаборПисемПоАдресатам;
	
КонецФункции

Процедура ОтправитьУведомлениеОПросроченныхЗадачах(ПисьмоИзНабора)
	
	Если ПустаяСтрока(ПисьмоИзНабора.ПочтовыйАдрес) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уведомление не было отправлено, так как у пользователя %1 не задан адрес электронной почты.'"), 
			ПисьмоИзНабора.Получатель);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи.Уведомление о просроченных задачах'", 
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,,, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Кому", ПисьмоИзНабора.ПочтовыйАдрес);
	Если ПисьмоИзНабора.ТипПисьма = "Исполнителю" Тогда
		ТекстТелаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не выполненные в срок задачи:
			| 
			|%1'"), ПисьмоИзНабора.ТекстПисьма);
		ПараметрыПисьма.Вставить("Тело", ТекстТелаПисьма);
		
		ТекстТемыПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не выполненные в срок задачи (%1)'"),
			Строка(ПисьмоИзНабора.КоличествоЗадач ));
		ПараметрыПисьма.Вставить("Тема", ТекстТемыПисьма);
	ИначеЕсли ПисьмоИзНабора.ТипПисьма = "Автору" Тогда
		ТекстТелаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'По введенным задачам прошел крайний срок:
			| 
			|%1'"), ПисьмоИзНабора.ТекстПисьма);
		ПараметрыПисьма.Вставить("Тело", ТекстТелаПисьма);
		
		ТекстТемыПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'По задачам истек контрольный срок (%1)'"),
			Строка(ПисьмоИзНабора.КоличествоЗадач));
		ПараметрыПисьма.Вставить("Тема", ТекстТемыПисьма);
	ИначеЕсли ПисьмоИзНабора.ТипПисьма = "Координатору" Тогда
		ТекстТелаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Прошел крайний срок по задачам:
			| 
			|%1'"), ПисьмоИзНабора.ТекстПисьма);
		ПараметрыПисьма.Вставить("Тело", ТекстТелаПисьма);
		
		ТекстТемыПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Истек контрольный срок задач (%1)'"),
			Строка(ПисьмоИзНабора.КоличествоЗадач));
		ПараметрыПисьма.Вставить("Тема", ТекстТемыПисьма);
	КонецЕсли;
	
	ТекстСообщения = "";
	
	МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
	Попытка
		МодульРаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(
			МодульРаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(), ПараметрыПисьма);
	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при отправке уведомления о просроченных задачах: %1.'"),
			ОписаниеОшибки);
		УровеньВажностиСобытия = УровеньЖурналаРегистрации.Ошибка;
	КонецПопытки;
	
	Если ПустаяСтрока(ТекстСообщения) Тогда
		Если ПараметрыПисьма.Кому.Количество() > 0 Тогда
			Кому = ? (ПустаяСтрока(ПараметрыПисьма.Кому[0].Представление),
						ПараметрыПисьма.Кому[0].Адрес,
						ПараметрыПисьма.Кому[0].Представление + " <" + ПараметрыПисьма.Кому[0].Адрес + ">");
		КонецЕсли;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уведомление о просроченных задачах успешно отправлено на адрес %1.'"), Кому);
		УровеньВажностиСобытия = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи.Уведомление о просроченных задачах'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
		УровеньВажностиСобытия,,, ТекстСообщения);
		
КонецПроцедуры

Функция СоздатьЗадачуПоНастройкеРолей(ЗадачаСсылка, Ответственные)
	
	Для Каждого Ответственный Из Ответственные Цикл
		ЗадачаОбъект = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаОбъект.Дата = ТекущаяДатаСеанса();
		ЗадачаОбъект.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая;
		ЗадачаОбъект.Исполнитель = Ответственный;
		ЗадачаОбъект.Предмет = ЗадачаСсылка;

		ЗадачаОбъект.Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Задача не может быть исполнена, так как у роли не задано ни одного исполнителя:
		    |%1'"), Строка(ЗадачаСсылка));
		ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Назначить исполнителей: задача не может быть исполнена %1'"), Строка(ЗадачаСсылка));
		ЗадачаОбъект.Записать();
	КонецЦикла;
	
КонецФункции

Функция ВыбратьНовыеЗадачиПоИсполнителям(Знач ДатаВремяОт, Знач ДатаВремяПо)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителя.Номер КАК Номер,
		|	ЗадачаИсполнителя.Дата КАК Дата,
		|	ЗадачаИсполнителя.Наименование КАК Наименование,
		|	ЗадачаИсполнителя.СрокИсполнения КАК СрокИсполнения,
		|	ЗадачаИсполнителя.Автор КАК Автор,
		|	ПОДСТРОКА(ЗадачаИсполнителя.Описание, 1, 250) КАК Описание,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА ЗадачаИсполнителя.Исполнитель
		|		ИНАЧЕ ИсполнителиЗадач.Исполнитель
		|	КОНЕЦ КАК Исполнитель,
		|	ЗадачаИсполнителя.РольИсполнителя КАК РольИсполнителя,
		|	ЗадачаИсполнителя.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
		|	ЗадачаИсполнителя.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО ЗадачаИсполнителя.РольИсполнителя = ИсполнителиЗадач.РольИсполнителя
		|			И ЗадачаИсполнителя.ОсновнойОбъектАдресации = ИсполнителиЗадач.ОсновнойОбъектАдресации
		|			И ЗадачаИсполнителя.ДополнительныйОбъектАдресации = ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|ГДЕ
		|	ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.Дата > &ДатаВремяОт
		|	И ЗадачаИсполнителя.Дата <= &ДатаВремяПо
		|	И НЕ (ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|		И ИсполнителиЗадач.Исполнитель В (NULL, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)))
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Исполнитель,
		|	СрокИсполнения УБЫВ
		|ИТОГИ ПО
		|	Исполнитель");
	Запрос.Параметры.Вставить("ДатаВремяОт", ДатаВремяОт);
	Запрос.Параметры.Вставить("ДатаВремяПо", ДатаВремяПо);
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Возврат Результат;
	
КонецФункции

Функция ОтправитьУведомлениеОНовыхЗадачах(Исполнитель, ЗадачиПоИсполнителю)
	
	ПочтовыйАдресПолучателя = "";
	ПриПолученииАдресаЭлектроннойПочты(Исполнитель, ПочтовыйАдресПолучателя);
	Если ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи.Уведомление о новых задачах'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уведомление не отправлено, так как не указан почтовый адрес у пользователя %1.'"), Строка(Исполнитель)));
		Возврат Ложь;
	КонецЕсли;
	
	ТекстПисьма = "";
	Для Каждого Задача Из ЗадачиПоИсполнителю.Строки Цикл
		ТекстПисьма = ТекстПисьма + СформироватьПредставлениеЗадачи(Задача);
	КонецЦикла;
	ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Направлены задачи - %1'"), Метаданные.КраткаяИнформация);
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
	ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
	ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
	
	МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
	Попытка 
		МодульРаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(
			МодульРаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(), ПараметрыПисьма);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи.Уведомление о новых задачах'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при отправке уведомления о новых задачах: %1'"), 
			   ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		Возврат Ложь;
	КонецПопытки;

	ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи.Уведомление о новых задачах'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уведомления успешно отправлены на адрес %1.'"), ПочтовыйАдресПолучателя));
	Возврат Истина;	
		
КонецФункции

Функция СформироватьПредставлениеЗадачи(ЗадачаСтруктура)
	
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1
		|
		|Крайний срок: %2'") + Символы.ПС,
		ЗадачаСтруктура.Ссылка, 
		Формат(ЗадачаСтруктура.СрокИсполнения, "ДЛФ=DD; ДП='не указан'"));
	Если ЗначениеЗаполнено(ЗадачаСтруктура.Исполнитель) Тогда
		Результат = Результат + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Исполнитель: %1'"), ЗадачаСтруктура.Исполнитель) + Символы.ПС;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗадачаСтруктура.РольИсполнителя) Тогда
		Результат = Результат + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Роль: %1'"), ЗадачаСтруктура.РольИсполнителя) + Символы.ПС;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗадачаСтруктура.ОсновнойОбъектАдресации) Тогда
		Результат = Результат + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Основной объект адресации: %1'"), ЗадачаСтруктура.ОсновнойОбъектАдресации) + Символы.ПС;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗадачаСтруктура.ДополнительныйОбъектАдресации) Тогда
		Результат = Результат + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Доп. объект адресации: %1'"), ЗадачаСтруктура.ДополнительныйОбъектАдресации) + Символы.ПС;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗадачаСтруктура.Автор) Тогда
		Результат = Результат + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Автор: %1'"), ЗадачаСтруктура.Автор) + Символы.ПС;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗадачаСтруктура.Описание) Тогда
		Результат = Результат + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), ЗадачаСтруктура.Описание) + Символы.ПС;
	КонецЕсли;
	Возврат Результат + Символы.ПС;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

// Выбрать список ролей, которые могут быть назначены в ОсновнойОбъектАдресации,
// и посчитать список назначений.
//
Функция ВыбратьРолиСКоличествомИсполнителей(ОсновнойОбъектАдресации) Экспорт
	Если ОсновнойОбъектАдресации <> Неопределено Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РолиИсполнителей.Ссылка КАК РольСсылка,
			|	РолиИсполнителей.Наименование КАК Роль,
			|	РолиИсполнителей.ВнешняяРоль КАК ВнешняяРоль,
			|	РолиИсполнителей.ТипыОсновногоОбъектаАдресации КАК ТипыОсновногоОбъектаАдресации,
			|	СУММА(ВЫБОР
			|			КОГДА ИсполнителиЗадач.РольИсполнителя <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка) 
			|				И ИсполнителиЗадач.РольИсполнителя ЕСТЬ НЕ NULL 
			|				И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Исполнители
			|ИЗ
			|	Справочник.РолиИсполнителей КАК РолиИсполнителей
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО (ИсполнителиЗадач.РольИсполнителя = РолиИсполнителей.Ссылка)
			|ГДЕ
			|	РолиИсполнителей.ПометкаУдаления = ЛОЖЬ
			|	И РолиИсполнителей.ИспользуетсяСОбъектамиАдресации = ИСТИНА
			| СГРУППИРОВАТЬ ПО
			|	РолиИсполнителей.Ссылка,
			|	ИсполнителиЗадач.РольИсполнителя, 
			|	РолиИсполнителей.ВнешняяРоль,
			|	РолиИсполнителей.Наименование,
			|	РолиИсполнителей.ТипыОсновногоОбъектаАдресации";
	Иначе
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РолиИсполнителей.Ссылка КАК РольСсылка,
			|	РолиИсполнителей.Наименование КАК Роль,
			|	РолиИсполнителей.ВнешняяРоль КАК ВнешняяРоль,
			|	РолиИсполнителей.ТипыОсновногоОбъектаАдресации КАК ТипыОсновногоОбъектаАдресации,
			|	СУММА(ВЫБОР
			|			КОГДА ИсполнителиЗадач.РольИсполнителя <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка) 
			|				И ИсполнителиЗадач.РольИсполнителя ЕСТЬ НЕ NULL 
			|				И (ИсполнителиЗадач.ОсновнойОбъектАдресации ЕСТЬ NULL 
			|					ИЛИ ИсполнителиЗадач.ОсновнойОбъектАдресации = Неопределено)
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Исполнители
			|ИЗ
			|	Справочник.РолиИсполнителей КАК РолиИсполнителей
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО (ИсполнителиЗадач.РольИсполнителя = РолиИсполнителей.Ссылка)
			|ГДЕ
			|	РолиИсполнителей.ПометкаУдаления = ЛОЖЬ
			|	И РолиИсполнителей.ИспользуетсяБезОбъектовАдресации = ИСТИНА
			| СГРУППИРОВАТЬ ПО
			|	РолиИсполнителей.Ссылка,
			|	ИсполнителиЗадач.РольИсполнителя, 
			|	РолиИсполнителей.ВнешняяРоль,
			|	РолиИсполнителей.Наименование, 
			|	РолиИсполнителей.ТипыОсновногоОбъектаАдресации";
	КонецЕсли;		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Возврат ВыборкаЗапроса;
	
КонецФункции

// Есть ли хотя бы один исполнитель, назначенный на указанную роль.
//
// Результат:
//   Булево
//
Функция ЕстьИсполнителиРоли(РольСсылка, ОсновнойОбъектАдресации = Неопределено,
	ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	РезультатЗапроса = ВыбратьИсполнителейРоли(РольСсылка, ОсновнойОбъектАдресации,
		ДополнительныйОбъектАдресации);
	Возврат НЕ РезультатЗапроса.Пустой();	
	
КонецФункции

Функция ВыбратьИсполнителейРоли(РольСсылка, ОсновнойОбъектАдресации = Неопределено,
	ДополнительныйОбъектАдресации = Неопределено)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
	   |	ИсполнителиЗадач.Исполнитель
	   |ИЗ
	   |	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	   |ГДЕ
	   |	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя";
	Если ОсновнойОбъектАдресации <> Неопределено Тогда  
		ТекстЗапроса = ТекстЗапроса 
			+ "	И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации";
	КонецЕсли;		
	Если ДополнительныйОбъектАдресации <> Неопределено Тогда  
		ТекстЗапроса = ТекстЗапроса 
			+ "	И ИсполнителиЗадач.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации";
	КонецЕсли;		
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("РольИсполнителя", РольСсылка);
	Запрос.Параметры.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	Запрос.Параметры.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;
	
КонецФункции

// Выбрать одного любого исполнителя, назначенного на РольИсполнителя в ОсновнойОбъектАдресации.
// 
Функция ВыбратьИсполнителя(ОсновнойОбъектАдресации, РольИсполнителя) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ИсполнителиЗадач.Исполнитель КАК Исполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
		|	И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации");
	Запрос.Параметры.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	Запрос.Параметры.Вставить("РольИсполнителя", РольИсполнителя);
	ВыборкаЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат ?(ВыборкаЗапроса.Количество() > 0, ВыборкаЗапроса[0].Исполнитель, Справочники.Пользователи.ПустаяСсылка());
	
КонецФункции	

Функция ВыбратьБизнесПроцессыВедущейЗадачи(ЗадачаСсылка, ДляИзменения = Ложь) Экспорт
	
	Итерация = 1;
	ТекстЗапроса = "";
	Для Каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		Если ДляИзменения Тогда
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(МетаданныеБизнесПроцесса.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("ВедущаяЗадача", ЗадачаСсылка);
			Блокировка.Заблокировать();
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|";
				
		КонецЕсли;
		ФрагментЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ВЫБРАТЬ %3
			|	%1.Ссылка КАК Ссылка
			|ИЗ
			|	%2 КАК %1
			|ГДЕ
			|	%1.ВедущаяЗадача = &ВедущаяЗадача", 
			МетаданныеБизнесПроцесса.Имя, МетаданныеБизнесПроцесса.ПолноеИмя(),
			?(Итерация = 1, "РАЗРЕШЕННЫЕ", ""));
		ТекстЗапроса = ТекстЗапроса + ФрагментЗапроса;
		Итерация = Итерация + 1;
	КонецЦикла;	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВедущаяЗадача", ЗадачаСсылка);
	Результат = Запрос.Выполнить();
	Возврат Результат;
		
КонецФункции	

// Вид события журнала регистрации для событий данной подсистемы.
//
Функция СобытиеЖурналаРегистрации() Экспорт
	Возврат НСтр("ru = 'Бизнес-процессы и задачи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
КонецФункции

// Вызывается при изменении состояния бизнес-процесса для того, чтобы 
// распространить это изменение состояния на невыполненные задачи этого 
// бизнес-процесса.
//
Процедура ПриИзмененииСостоянияБизнесПроцесса(БизнесПроцесс, СтароеСостояние, НовоеСостояние) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ";

	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс.Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Задача = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Задача.Заблокировать();
		Задача.СостояниеБизнесПроцесса =  НовоеСостояние;
		Задача.Записать();
		
		ПриИзмененииСостоянияЗадачи(Задача.Ссылка, СтароеСостояние, НовоеСостояние);
	КонецЦикла;

КонецПроцедуры

Процедура ПриИзмененииСостоянияЗадачи(ЗадачаСсылка, СтароеСостояние, НовоеСостояние)
	
	// Меняем состояние вложенных бизнес-процессов.
	Для каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		Если НЕ ПравоДоступа("Изменение", МетаданныеБизнесПроцесса) Тогда
		    Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БизнесПроцессы.Ссылка КАК Ссылка
			|ИЗ
			|	%1 КАК БизнесПроцессы
			|ГДЕ
			|   БизнесПроцессы.ВедущаяЗадача = &ВедущаяЗадача
			|   И БизнесПроцессы.ПометкаУдаления = ЛОЖЬ
			| 	И БизнесПроцессы.Завершен = ЛОЖЬ";
			
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, МетаданныеБизнесПроцесса.ПолноеИмя());
		Запрос.УстановитьПараметр("ВедущаяЗадача", ЗадачаСсылка);

		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			БизнесПроцесс = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			БизнесПроцесс.Состояние = НовоеСостояние;
			БизнесПроцесс.Записать();
			
		КонецЦикла;
		
	КонецЦикла;	
	
	// Меняем состояние подчиненных бизнес-процессов.
	Для каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		// У бизнес-процесса может и не быть главной задачи.
		РеквизитГлавнаяЗадача = МетаданныеБизнесПроцесса.Реквизиты.Найти("ГлавнаяЗадача");
		Если РеквизитГлавнаяЗадача = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БизнесПроцессы.Ссылка КАК Ссылка
			|ИЗ
			|	%1 КАК БизнесПроцессы
			|ГДЕ
			|   БизнесПроцессы.ГлавнаяЗадача = &ГлавнаяЗадача
			|   И БизнесПроцессы.ПометкаУдаления = ЛОЖЬ
			| 	И БизнесПроцессы.Завершен = ЛОЖЬ";
			
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, МетаданныеБизнесПроцесса.ПолноеИмя());
		Запрос.УстановитьПараметр("ГлавнаяЗадача", ЗадачаСсылка);

		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			БизнесПроцесс = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			БизнесПроцесс.Состояние = НовоеСостояние;
			БизнесПроцесс.Записать();
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

// Получает группы исполнителей задач согласно новым записям исполнителей задач.
//
// Параметры:
//  НовыеИсполнителиЗадач  - ТаблицаЗначений - выгрузка из набора записей
//                           регистра сведений ИсполнителиЗадач.
//
// Возвращаемое значение:
//   Массив - с элементами типа СправочникСсылка.ГруппыИсполнителейЗадач.
//
Функция ГруппыИсполнителейЗадач(НовыеИсполнителиЗадач) Экспорт
	
	НазванияПолей = "РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НовыеЗаписи", НовыеИсполнителиЗадач.Скопировать( , НазванияПолей));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НовыеЗаписи.РольИсполнителя КАК РольИсполнителя,
	|	НовыеЗаписи.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
	|	НовыеЗаписи.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации
	|ПОМЕСТИТЬ НовыеЗаписи
	|ИЗ
	|	&НовыеЗаписи КАК НовыеЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ГруппыИсполнителейЗадач.Ссылка, ЗНАЧЕНИЕ(Справочник.ГруппыИсполнителейЗадач.ПустаяСсылка)) КАК Ссылка,
	|	НовыеЗаписи.РольИсполнителя КАК РольИсполнителя,
	|	НовыеЗаписи.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
	|	НовыеЗаписи.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации
	|ИЗ
	|	НовыеЗаписи КАК НовыеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыИсполнителейЗадач КАК ГруппыИсполнителейЗадач
	|		ПО НовыеЗаписи.РольИсполнителя = ГруппыИсполнителейЗадач.РольИсполнителя
	|			И НовыеЗаписи.ОсновнойОбъектАдресации = ГруппыИсполнителейЗадач.ОсновнойОбъектАдресации
	|			И НовыеЗаписи.ДополнительныйОбъектАдресации = ГруппыИсполнителейЗадач.ДополнительныйОбъектАдресации";
	
	ГруппыИсполнителей = Запрос.Выполнить().Выгрузить();
	
	ОтборГруппыИсполнителей = Новый Структура(НазванияПолей);
	ГруппыИсполнителейЗадач = Новый Массив;
	
	Для каждого Запись Из НовыеИсполнителиЗадач Цикл
		ЗаполнитьЗначенияСвойств(ОтборГруппыИсполнителей, Запись);
		ГруппаИсполнителей = ГруппыИсполнителей.НайтиСтроки(ОтборГруппыИсполнителей)[0];
		// Требуется обновить ссылку в найденной строке.
		Если НЕ ЗначениеЗаполнено(ГруппаИсполнителей.Ссылка) Тогда
			// Требуется добавить новую группу исполнителей.
			ГруппаИсполнителейОбъект = Справочники.ГруппыИсполнителейЗадач.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(ГруппаИсполнителейОбъект, ОтборГруппыИсполнителей);
			ГруппаИсполнителейОбъект.Записать();
			ГруппаИсполнителей.Ссылка = ГруппаИсполнителейОбъект.Ссылка;
		КонецЕсли;
		ГруппыИсполнителейЗадач.Добавить(ГруппаИсполнителей.Ссылка);
	КонецЦикла;
	
	Возврат ГруппыИсполнителейЗадач;
	
КонецФункции

// Пометить на удаление вложенные и подчиненные бизнес-процессы задачи ЗадачаСсылка.
//
// Параметры:
//  ЗадачаСсылка                 - ЗадачаСсылка.ЗадачаИсполнителя
//  НовоеЗначениеПометкиУдаления - Булево.
//
Процедура ПриПометкеУдаленияЗадачи(ЗадачаСсылка, НовоеЗначениеПометкиУдаления) Экспорт
	
	ОбъектЗадачи = ЗадачаСсылка.Метаданные();
	Если НовоеЗначениеПометкиУдаления Тогда
		ВыполнитьПроверкуПравДоступа("ИнтерактивнаяПометкаУдаления", ОбъектЗадачи);
	КонецЕсли;
	Если Не НовоеЗначениеПометкиУдаления Тогда
		ВыполнитьПроверкуПравДоступа("ИнтерактивноеСнятиеПометкиУдаления", ОбъектЗадачи);
	КонецЕсли;
	Если ЗадачаСсылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		// Помечаем вложенные бизнес-процессы.
		УстановитьПривилегированныйРежим(Истина);
		ВложенныеБизнесПроцессы = БизнесПроцессыВедущейЗадачи(ЗадачаСсылка, Истина);
		УстановитьПривилегированныйРежим(Ложь);
		// Без привилегированного режима, с проверкой прав.
		Для Каждого ВложенныйБизнесПроцесс Из ВложенныеБизнесПроцессы Цикл
			БизнесПроцессОбъект = ВложенныйБизнесПроцесс.ПолучитьОбъект();
			БизнесПроцессОбъект.УстановитьПометкуУдаления(НовоеЗначениеПометкиУдаления);
		КонецЦикла;	
		
		// Помечаем подчиненные бизнес-процессы.
		ПодчиненныеБизнесПроцессы = БизнесПроцессыГлавнойЗадачи(ЗадачаСсылка, Истина);
		Для Каждого ПодчиненныйБизнесПроцесс Из ПодчиненныеБизнесПроцессы Цикл
			БизнесПроцессОбъект = ПодчиненныйБизнесПроцесс.ПолучитьОбъект();
			БизнесПроцессОбъект.Заблокировать();
			БизнесПроцессОбъект.УстановитьПометкуУдаления(НовоеЗначениеПометкиУдаления);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Проверяет наличие прав для того, чтобы отметить бизнес-процесс
// как остановленный или активный.
// 
// Параметры:
//  БизнесПроцесс - бизнес-процесс ссылка.
//
// ВозвращаемоеЗначение
//  Если права есть - Истина, иначе Ложь.
//
Функция ЕстьПраваНаОстановкуБизнесПроцесса(БизнесПроцесс)
	
	ЕстьПрава = Ложь;
	СтандартнаяОбработка = Истина;
	БизнесПроцессыИЗадачиПереопределяемый.ПриПроверкеПравНаОстановкуБизнесПроцесса(БизнесПроцесс, ЕстьПрава, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат ЕстьПрава;
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если БизнесПроцесс.Автор = Пользователи.ТекущийПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ЕстьПрава;
	
КонецФункции

Процедура УстановитьПараметрыСпискаМоихЗадач(Список) Экспорт
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	Сегодня = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
	ЭтаНеделя = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтаНеделя);
	СледующаяНеделя = Новый СтандартныйПериод(ВариантСтандартногоПериода.СледующаяНеделя);
	
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса);
	Список.Параметры.УстановитьЗначениеПараметра("КонецДня", Сегодня.ДатаОкончания);
	Список.Параметры.УстановитьЗначениеПараметра("КонецНедели", ЭтаНеделя.ДатаОкончания);
	Список.Параметры.УстановитьЗначениеПараметра("КонецСледующейНедели", СледующаяНеделя.ДатаОкончания);
	Список.Параметры.УстановитьЗначениеПараметра("Просрочено", " " + НСтр("ru = 'Просрочено'")); // пробел для сортировки
	Список.Параметры.УстановитьЗначениеПараметра("Сегодня", НСтр("ru = 'В течение сегодня'"));
	Список.Параметры.УстановитьЗначениеПараметра("ЭтаНеделя", НСтр("ru = 'До конца недели'"));
	Список.Параметры.УстановитьЗначениеПараметра("СледующаяНеделя", НСтр("ru = 'На следующей неделе'"));
	Список.Параметры.УстановитьЗначениеПараметра("Позднее", НСтр("ru = 'Позднее'"));
	Список.Параметры.УстановитьЗначениеПараметра("НачалоДня", НачалоДня(ТекущаяДатаСеанса));
	Список.Параметры.УстановитьЗначениеПараметра("НезаполненнаяДата", Дата(1,1,1));
	
КонецПроцедуры

Функция КоличествоЗадачИсполнителя()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(ЗадачиПоИсполнителю.Ссылка) КАК Количество
		|ИЗ
		|	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю КАК ЗадачиПоИсполнителю
		|ГДЕ
		|	НЕ ЗадачиПоИсполнителю.ПометкаУдаления
		|	И НЕ ЗадачиПоИсполнителю.Выполнена
		|	И ЗадачиПоИсполнителю.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЗадачиПоИсполнителю.Ссылка)
		|ИЗ
		|	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю КАК ЗадачиПоИсполнителю
		|ГДЕ
		|	ЗадачиПоИсполнителю.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1) И ЗадачиПоИсполнителю.СрокИсполнения <= &ТекущаяДата
		|	И НЕ ЗадачиПоИсполнителю.ПометкаУдаления
		|	И НЕ ЗадачиПоИсполнителю.Выполнена
		|	И ЗадачиПоИсполнителю.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЗадачиПоИсполнителю.Ссылка)
		|ИЗ
		|	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю КАК ЗадачиПоИсполнителю
		|ГДЕ
		|	ЗадачиПоИсполнителю.СрокИсполнения > &ТекущаяДата
		|	И ЗадачиПоИсполнителю.СрокИсполнения <= &Сегодня
		|	И НЕ ЗадачиПоИсполнителю.ПометкаУдаления
		|	И НЕ ЗадачиПоИсполнителю.Выполнена
		|	И ЗадачиПоИсполнителю.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЗадачиПоИсполнителю.Ссылка)
		|ИЗ
		|	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю КАК ЗадачиПоИсполнителю
		|ГДЕ
		|	ЗадачиПоИсполнителю.СрокИсполнения > &Сегодня
		|	И ЗадачиПоИсполнителю.СрокИсполнения <= &КонецНедели
		|	И НЕ ЗадачиПоИсполнителю.ПометкаУдаления
		|	И НЕ ЗадачиПоИсполнителю.Выполнена
		|	И ЗадачиПоИсполнителю.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЗадачиПоИсполнителю.Ссылка)
		|ИЗ
		|	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю КАК ЗадачиПоИсполнителю
		|ГДЕ
		|	ЗадачиПоИсполнителю.СрокИсполнения > &КонецНедели
		|	И ЗадачиПоИсполнителю.СрокИсполнения <= &КонецСледующейНедели
		|	И НЕ ЗадачиПоИсполнителю.ПометкаУдаления
		|	И НЕ ЗадачиПоИсполнителю.Выполнена
		|	И ЗадачиПоИсполнителю.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)";

	Сегодня = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
	ЭтаНеделя = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтаНеделя);
	СледующаяНеделя = Новый СтандартныйПериод(ВариантСтандартногоПериода.СледующаяНеделя);
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Сегодня", Сегодня.ДатаОкончания);
	Запрос.УстановитьПараметр("КонецНедели", ЭтаНеделя.ДатаОкончания);
	Запрос.УстановитьПараметр("КонецСледующейНедели", СледующаяНеделя.ДатаОкончания);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Результат = Новый Структура("Всего,Просроченные,НаСегодня,НаНеделю,НаСледующуюНеделю");
	Результат.Всего = РезультатЗапроса[0].Количество;
	Результат.Просроченные = РезультатЗапроса[1].Количество;
	Результат.НаСегодня = РезультатЗапроса[2].Количество;
	Результат.НаНеделю = РезультатЗапроса[3].Количество;
	Результат.НаСледующуюНеделю = РезультатЗапроса[4].Количество;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.2.2";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "БизнесПроцессыИЗадачиСервер.ЗаполнитьОтветственногоЗаКонтрольИсполнения";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.6";
	Обработчик.Процедура = "БизнесПроцессыИЗадачиСервер.ЗаполнитьПредметСтрокой";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.2";
	Обработчик.Процедура = "БизнесПроцессыИЗадачиСервер.ЗаполнитьСостоянияИПринятияКИсполнению";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.1.1";
	Обработчик.Процедура = "БизнесПроцессыИЗадачиСервер.ЗаполнитьКодРолиИсполнителя";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.3.2.21";
		Обработчик.Идентификатор = Новый УникальныйИдентификатор("80A64E76-12CC-4075-A80B-9EB93C411C85");
		Обработчик.Процедура = "БизнесПроцессыИЗадачиСервер.ОбновитьНаборыЗначенийДоступаЗаданий";
		Обработчик.Комментарий = НСтр("ru = 'Обновление прав доступа для бизнес-процесса ""Задание"". 
			|До завершения обработки будут действовать прежние права доступа к заданиям.'");
		Обработчик.РежимВыполнения = "Отложенно";
	КонецЕсли;
	
КонецПроцедуры

// Инициализировать предопределенную роль исполнителей ОтветственныйЗаКонтрольИсполнения.
// 
Процедура ЗаполнитьОтветственногоЗаКонтрольИсполнения() Экспорт
	
	ВсеОбъектыАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации;
	
	РольОбъект = Справочники.РолиИсполнителей.ОтветственныйЗаКонтрольИсполнения.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(РольОбъект.Ссылка);
	РольОбъект.ИспользуетсяБезОбъектовАдресации = Истина;
	РольОбъект.ИспользуетсяСОбъектамиАдресации = Истина;
	РольОбъект.ТипыОсновногоОбъектаАдресации = ВсеОбъектыАдресации;
	РольОбъект.Записать();
	
КонецПроцедуры

// Инициализировать новое поле Состояние у тех бизнес-процессов, у которых оно есть.
// 
Процедура ЗаполнитьСостоянияИПринятияКИсполнению() Экспорт
	
	// Обновления состояния бизнес-процессов и задач.
	Для каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		РеквизитСостояние = МетаданныеБизнесПроцесса.Реквизиты.Найти("Состояние");
		Если РеквизитСостояние = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ 
			|	БизнесПроцессы.Ссылка КАК Ссылка
			|ИЗ
			|	%1 КАК БизнесПроцессы";
			
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, МетаданныеБизнесПроцесса.ПолноеИмя());

		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			БизнесПроцесс = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			БизнесПроцесс.Заблокировать();
			БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(БизнесПроцесс);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Обновления принятия к исполнению задач.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	Задачи.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи";
		
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		Если ЗадачаОбъект.Выполнена = Истина Тогда
			ЗадачаОбъект.ПринятаКИсполнению = Истина;
			ЗадачаОбъект.ДатаПринятияКИсполнению = ЗадачаОбъект.ДатаИсполнения;
		КонецЕсли;
		
		ЗадачаОбъект.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Активен;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗадачаОбъект);
		
	КонецЦикла;
	
КонецПроцедуры	

// Заполнить новое поле ПредметСтрокой у задачи ЗадачаИсполнителя.
// 
Процедура ЗаполнитьПредметСтрокой() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителя.Предмет КАК Предмет
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя";

	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПредметСсылка = ВыборкаДетальныеЗаписи.Предмет;
		Если ПредметСсылка = Неопределено ИЛИ ПредметСсылка.Пустая() Тогда
			Продолжить;	
		КонецЕсли;	
		
		ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.ПредметСтрокой = ОбщегоНазначения.ПредметСтрокой(ПредметСсылка);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗадачаОбъект);
		
	КонецЦикла;

КонецПроцедуры

// Перенести данные из стандартного реквизита Код в новый реквизит КраткоеПредставление.
// 
Процедура ЗаполнитьКодРолиИсполнителя() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиИсполнителей.Ссылка КАК Ссылка,
		|	РолиИсполнителей.Код КАК Код
		|ИЗ
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей";

	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗначениеКода = ВыборкаДетальныеЗаписи.Код;
		Если ПустаяСтрока(ЗначениеКода) Тогда
			Продолжить;
		КонецЕсли;
		
		РольИсполнителейОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		РольИсполнителейОбъект.КраткоеПредставление = ЗначениеКода;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РольИсполнителейОбъект);
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьНаборыЗначенийДоступаЗаданий(Параметры) Экспорт
	
	БизнесПроцесс = Метаданные.БизнесПроцессы.Задание;
	ИмяПроцедуры = "БизнесПроцессыИЗадачиСервер.ОбновитьНаборыЗначенийДоступаЗаданий";
	
	НачатьОбновлениеПорцииНаборовЗначенийДоступа(Параметры, БизнесПроцесс, ИмяПроцедуры, 1000);
	Если Параметры.ОбработкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЗаданиеСсылка Из Параметры.ОбъектыКОбработке Цикл
		
		Попытка
			ОбновитьНаборыЗначенийДоступаЗадания(ЗаданиеСсылка);
			Параметры.ОбъектовОбработано = Параметры.ОбъектовОбработано + 1;
		Исключение
			// Если не удалось обработать какой-либо объект, в следующий раз повторим попытку снова.
			Параметры.ПроблемныеОбъекты.Добавить(ЗаданиеСсылка);
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обновить права доступа для ""%1"" в обработчике ""%2"" по причине:
					|%3'"), 
					ЗаданиеСсылка, ИмяПроцедуры, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				БизнесПроцесс, ЗаданиеСсылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	ЗавершитьОбновлениеПорцииНаборовЗначенийДоступа(Параметры);
	
КонецПроцедуры	

Процедура ОбновитьНаборыЗначенийДоступаЗадания(ЗаданиеСсылка) 
	
	МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
	НачатьТранзакцию();
	Попытка
	
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("БизнесПроцесс.Задание");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЗаданиеСсылка);
		Блокировка.Заблокировать();
		
		ЗаданиеОбъект = ЗаданиеСсылка.ПолучитьОбъект();
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ЗаданиеОбъект = Неопределено Тогда 
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если ЗаданиеОбъект.ГруппаИсполнителейЗадач <> Справочники.ГруппыИсполнителейЗадач.ПустаяСсылка() Тогда 
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ЗаданиеОбъект.ГруппаИсполнителейЗадач = ?(ТипЗнч(ЗаданиеОбъект.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей"), 
			ГруппаИсполнителейЗадач(ЗаданиеОбъект.Исполнитель, 
				ЗаданиеОбъект.ОсновнойОбъектАдресации, ЗаданиеОбъект.ДополнительныйОбъектАдресации), 
			ЗаданиеОбъект.Исполнитель);
		ЗаданиеОбъект.ГруппаИсполнителейЗадачПроверяющий = ?(ТипЗнч(ЗаданиеОбъект.Проверяющий) = Тип("СправочникСсылка.РолиИсполнителей"), 
			ГруппаИсполнителейЗадач(ЗаданиеОбъект.Проверяющий, 
				ЗаданиеОбъект.ОсновнойОбъектАдресацииПроверяющий, ЗаданиеОбъект.ДополнительныйОбъектАдресацииПроверяющий), 
			ЗаданиеОбъект.Проверяющий);
		
		МодульУправлениеДоступом.ОбновитьНаборыЗначенийДоступа(ЗаданиеОбъект);
		Если ЗаданиеОбъект.Модифицированность() Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗаданиеОбъект);
		КонецЕсли; 
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы.

// Возвращает адрес электронной почты пользователя Получатель для рассылки уведомлений о задачах.
//
// Параметры:
//  Получатель  - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - исполнитель задачи.
//  Адрес       - Строка - возвращаемый адрес электронной почты.
//
//
Процедура ПриПолученииАдресаЭлектроннойПочты(Знач Получатель, Адрес) 
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи") Тогда
			Адрес = МодульУправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				Получатель, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
		ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			Адрес = ЭлектроннаяПочтаВнешнегоПользователя(Получатель);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭлектроннаяПочтаВнешнегоПользователя(Получатель)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейСлужебный");
		Возврат МодульУправлениеКонтактнойИнформациейСлужебный.ПервоеЗначениеКонтактнойИнформацииОбъектаПоТипу(
			Получатель.ОбъектАвторизации, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ПроверитьСистемнаяУчетнаяЗаписьНастроена()
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		ВызватьИсключение НСтр("ru = 'Отправка почты не предусмотрена в программе.'");
	КонецЕсли;
	
	МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
	Результат = МодульРаботаСПочтовымиСообщениями.УчетнаяЗаписьНастроена(МодульРаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(), Истина, Ложь);
	Если Не Результат Тогда
		ВызватьИсключение НСтр("ru = 'Системная учетная запись электронной почты не настроена для отправки.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
