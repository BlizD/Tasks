////////////////////////////////////////////////////////////////////////////////
// Подсистема "Взаимодействия"
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
		СерверныеОбработчики[
			"СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий\ПриПолученииСпискаШаблонов"].Добавить(
				"УправлениеЭлектроннойПочтой");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриПолученииСпискаШаблонов.
//
// Формирует список шаблонов заданий очереди.
//
// Параметры:
//  Шаблоны - Массив строк. В параметр следует добавить имена предопределенных
//   неразделенных регламентных заданий, которые должны использоваться в качестве
//   шаблонов для заданий очереди.
//
Процедура ПриПолученииСпискаШаблонов(Шаблоны) Экспорт
	
	Шаблоны.Добавить("ПолучениеИОтправкаЭлектронныхПисем");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение и отправка писем

// Выполняет процедуру отправки и получения электронных писем.
Процедура ПолучениеИОтправкаЭлектронныхПисем() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеИОтправкаЭлектронныхПисем);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент") Тогда
		Возврат;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начато регламентное получение и отправка электронной почты'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	МассивПисем = Новый Массив;
	
	// Получение писем
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка,
	|	УчетныеЗаписиЭлектроннойПочты.Наименование,
	|	ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ПомещатьПисьмоВПапкуПисьмаОснования, ЛОЖЬ) КАК ПомещатьПисьмоВПапкуПисьмаОснования,
	|	УчетныеЗаписиЭлектроннойПочты.ОставлятьКопииСообщенийНаСервере КАК ОставлятьКопии,
	|	УчетныеЗаписиЭлектроннойПочты.ПериодХраненияСообщенийНаСервере КАК ОставлятьДней
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|		ПО (НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = УчетныеЗаписиЭлектроннойПочты.Ссылка)
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляПолучения
	|	И НЕ ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.НеИспользоватьВоВстроенномПочтовомКлиенте, ЛОЖЬ)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Получено = 0;
		ПолучитьПисьма(Выборка, Ложь, Получено, МассивПисем);
		
	КонецЦикла;
	
	// Отправка писем
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ЭлектронноеПисьмоИсходящее.Ссылка) КАК ПредставлениеПисьма,
	|	ЭлектронноеПисьмоИсходящее.УдалятьПослеОтправки,
	|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись КАК УчетнаяЗапись,
	|	ЕСТЬNULL(ПапкиЭлектронныхПисем.ПредопределеннаяПапка, ИСТИНА) КАК ТребуетсяОпределениеПапки,
	|	ЕСТЬNULL(НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.КоличествоПопыток, 0) КАК КоличествоПопыток
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|			ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка
	|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма КАК НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма
	|		ПО (НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.Письмо = ЭлектронноеПисьмоИсходящее.Ссылка)
	|ГДЕ
	|	НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления
	|	И ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
	|	И ВЫБОР
	|			КОГДА ЭлектронноеПисьмоИсходящее.ДатаКогдаОтправить = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЭлектронноеПисьмоИсходящее.ДатаКогдаОтправить < &ТекущаяДата
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ЭлектронноеПисьмоИсходящее.ДатаАктуальностиОтправки = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЭлектронноеПисьмоИсходящее.ДатаАктуальностиОтправки > &ТекущаяДата
	|		КОНЕЦ
	|	И ЕСТЬNULL(НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.КоличествоПопыток, 0) < 5
	|ИТОГИ ПО
	|	УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	ВыборкаУчетныеЗаписи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУчетныеЗаписи.Следующий() Цикл
		
		Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(ВыборкаУчетныеЗаписи.УчетнаяЗапись);
		
		Попытка
			Соединение = Новый ИнтернетПочта;
			Соединение.Подключиться(Профиль);
		Исключение
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Во время подключения к учетной записи %1 произошла ошибка
					|%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ВыборкаУчетныеЗаписи.УчетнаяЗапись,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Ошибка, , ,
			                         ТекстСообщенияОбОшибке);
			
			Продолжить;
			
		КонецПопытки;
		
		ВыборкаПисьма = ВыборкаУчетныеЗаписи.Выбрать();
		Пока ВыборкаПисьма.Следующий() Цикл
			
			ПисьмоОбъект = ВыборкаПисьма.Ссылка.ПолучитьОбъект();
			Попытка
				ИдентификаторПисьма = Взаимодействия.ВыполнитьОтправкуПисьма(ПисьмоОбъект,Соединение);
			Исключение
				
				ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Во время отправки электронного письма %1 произошла ошибка
						|%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					ВыборкаПисьма.ПредставлениеПисьма,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				                         УровеньЖурналаРегистрации.Ошибка, , ,
				                         ТекстСообщенияОбОшибке);
				
				МенеджерЗаписи = РегистрыСведений.НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Письмо = ВыборкаПисьма.Ссылка;
				МенеджерЗаписи.КоличествоПопыток = ВыборкаПисьма.КоличествоПопыток + 1;
				МенеджерЗаписи.ИнформацияООшибке = ТекстСообщенияОбОшибке;
				МенеджерЗаписи.Записать();
				
				Продолжить;
			КонецПопытки;
			
			Если ВыборкаПисьма.УдалятьПослеОтправки Тогда
				ПисьмоОбъект.Удалить();
			Иначе
				ПисьмоОбъект.ИдентификаторСообщения = ИдентификаторПисьма;
				ПисьмоОбъект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
				ПисьмоОбъект.Размер = Взаимодействия.ОценитьРазмерИсходящегоЭлектронногоПисьма(ПисьмоОбъект.Ссылка);
				ПисьмоОбъект.ДатаОтправления = ТекущаяДатаСеанса();
				ПисьмоОбъект.ДополнительныеСвойства.Вставить("НеЗаписыватьКонтакты", Истина);
				ПисьмоОбъект.Записать(РежимЗаписиДокумента.Запись);
				Если ВыборкаПисьма.ТребуетсяОпределениеПапки Тогда
					МассивПисем.Добавить(ВыборкаПисьма.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Соединение.Отключиться();
		
	КонецЦикла;
	
	Взаимодействия.ЗаполнитьКонтактыМассиваВзаимодействий(МассивПисем);
	Взаимодействия.УстановитьПапкиДляМассиваПисем(МассивПисем);
	Взаимодействия.РассчитатьРассмотреноПоПредметам(МассивПисем);
	Взаимодействия.РассчитатьРассмотреноПоКонтактам(МассивПисем);
	
	// Отправим уведомления о прочтении.
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УведомленияОПрочтении.Письмо,
	|	ПРЕДСТАВЛЕНИЕ(УведомленияОПрочтении.Письмо) КАК ПредставлениеПисьма,
	|	УведомленияОПрочтении.ДатаПрочтения,
	|	ЭлектронноеПисьмоВходящее.АдресаУведомленияОПрочтении.(
	|		Адрес,
	|		Представление,
	|		Контакт
	|	),
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись,
	|	ЭлектронноеПисьмоВходящее.ОтправительПредставление,
	|	ЭлектронноеПисьмоВходящее.ОтправительАдрес,
	|	ЭлектронноеПисьмоВходящее.Дата,
	|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты,
	|	ЭлектронноеПисьмоВходящее.Тема
	|ИЗ
	|	РегистрСведений.УведомленияОПрочтении КАК УведомленияОПрочтении
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|			ПО ЭлектронноеПисьмоВходящее.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|		ПО УведомленияОПрочтении.Письмо = ЭлектронноеПисьмоВходящее.Ссылка
	|ГДЕ
	|	УведомленияОПрочтении.ТребуетсяОтправка
	|ИТОГИ ПО
	|	УчетнаяЗапись";
	
	ВыборкаУчетныеЗаписи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУчетныеЗаписи.Следующий() Цикл
		
		Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(ВыборкаУчетныеЗаписи.УчетнаяЗапись);
		
		Попытка
			Соединение = Новый ИнтернетПочта;
			Соединение.Подключиться(Профиль);
		Исключение
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Во время подключения к учетной записи %1 произошла ошибка
				|%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ВыборкаУчетныеЗаписи.УчетнаяЗапись,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Ошибка, , ,
			                         ТекстСообщенияОбОшибке);
			
			Продолжить;
			
		КонецПопытки;
		
		ВыборкаПисьма = ВыборкаУчетныеЗаписи.Выбрать();
		Пока ВыборкаПисьма.Следующий() Цикл
			
			СоздатьОтправитьУведомлениеОПрочтении(ВыборкаПисьма, Истина, Соединение);
			
		КонецЦикла;
		
		Соединение.Отключиться();
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Закончено регламентное получение и отправка электронной почты'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры

// Выполняет получение электронной почты по доступным для пользователя учетным записям.
//
// Параметры:
//  Получено               - Число - в данный параметр будет возвращено количество полученных писем.
//  ДоступноУчетныхЗаписей - Число - в данный параметр будет возвращено количество доступных пользователю учетных
//                                   записей.
//  ЕстьОшибки             - Булево - признак наличия ошибок при получении писем.
//
Процедура ЗагрузитьПочтуПользователя(ПолученоПисем, ДоступноУчетныхЗаписей, ЕстьОшибки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка,
	|	УчетныеЗаписиЭлектроннойПочты.Наименование,
	|	ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ПомещатьПисьмоВПапкуПисьмаОснования, ЛОЖЬ) КАК ПомещатьПисьмоВПапкуПисьмаОснования,
	|	УчетныеЗаписиЭлектроннойПочты.ОставлятьКопииСообщенийНаСервере КАК ОставлятьКопии,
	|	УчетныеЗаписиЭлектроннойПочты.ПериодХраненияСообщенийНаСервере КАК ОставлятьДней
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|		ПО (НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = УчетныеЗаписиЭлектроннойПочты.Ссылка)
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляПолучения
	|	И НЕ ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.НеИспользоватьВоВстроенномПочтовомКлиенте, ЛОЖЬ)";
	
	Выборка = Запрос.Выполнить().Выбрать();

	ПолученоПисем = 0;
	ДоступноУчетныхЗаписей = Выборка.Количество();
	Если ДоступноУчетныхЗаписей = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет доступных для получения почты учетных записей'"));
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пока Выборка.Следующий() Цикл
		
		Получено = 0;
		МассивПисем = Новый Массив;
		
		ПолучитьПисьма(Выборка, ЕстьОшибки, Получено, МассивПисем);
		ПолученоПисем = ПолученоПисем + Получено;
		Взаимодействия.ЗаполнитьКонтактыМассиваВзаимодействий(МассивПисем);
		Взаимодействия.УстановитьПапкиДляМассиваПисем(МассивПисем);
		Взаимодействия.РассчитатьРассмотреноПоПредметам(МассивПисем);
		Взаимодействия.РассчитатьРассмотреноПоКонтактам(МассивПисем);
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет отправку писем пользователя.
Процедура ОтправитьПочтуПользователя() Экспорт

	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	// Отправка писем
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись,
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ЭлектронноеПисьмоИсходящее.Ссылка) КАК ПредставлениеПисьма,
	|	ЭлектронноеПисьмоИсходящее.УдалятьПослеОтправки,
	|	ЕСТЬNULL(ПапкиЭлектронныхПисем.ПредопределеннаяПапка, ИСТИНА) КАК ТребуетсяОпределениеПапки,
	|	ЕСТЬNULL(НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.КоличествоПопыток, 0) КАК КоличествоПопыток
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|			ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка
	|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма КАК НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма
	|		ПО НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.Письмо = ЭлектронноеПисьмоИсходящее.Ссылка
	|ГДЕ
	|	НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления
	|	И ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
	|	И ЭлектронноеПисьмоИсходящее.Автор = &Пользователь
	|	И УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки
	|	И НЕ ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.НеИспользоватьВоВстроенномПочтовомКлиенте, ЛОЖЬ)
	|	И ВЫБОР
	|			КОГДА ЭлектронноеПисьмоИсходящее.ДатаКогдаОтправить = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЭлектронноеПисьмоИсходящее.ДатаКогдаОтправить < &ТекущаяДата
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ЭлектронноеПисьмоИсходящее.ДатаАктуальностиОтправки = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЭлектронноеПисьмоИсходящее.ДатаАктуальностиОтправки > &ТекущаяДата
	|		КОНЕЦ
	|	И ЕСТЬNULL(НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.КоличествоПопыток, 0) < 5
	|ИТОГИ ПО
	|	УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("Пользователь",ТекущийПользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	МассивПисем = Новый Массив;
	ВыборкаУчетныеЗаписи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУчетныеЗаписи.Следующий() Цикл
		
		Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(ВыборкаУчетныеЗаписи.УчетнаяЗапись);
		
		Попытка
			Соединение = Новый ИнтернетПочта;
			Соединение.Подключиться(Профиль);
		Исключение
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Во время подключения к учетной записи %1 произошла ошибка
					|%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ВыборкаУчетныеЗаписи.УчетнаяЗапись,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке, ВыборкаУчетныеЗаписи.УчетнаяЗапись);
			
			Продолжить;
			
		КонецПопытки;
		
		ВыборкаПисьма = ВыборкаУчетныеЗаписи.Выбрать();
		Пока ВыборкаПисьма.Следующий() Цикл
			
			ПисьмоОбъект = ВыборкаПисьма.Ссылка.ПолучитьОбъект();
			Попытка
				ИдентификаторПисьма = Взаимодействия.ВыполнитьОтправкуПисьма(ПисьмоОбъект, Соединение);
			Исключение
				ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Во время отправки электронного письма %1 произошла ошибка
						|%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					ВыборкаПисьма.ПредставлениеПисьма,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке, ВыборкаПисьма.Ссылка);
				
				МенеджерЗаписи = РегистрыСведений.НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Письмо = ВыборкаПисьма.Ссылка;
				МенеджерЗаписи.КоличествоПопыток = ВыборкаПисьма.КоличествоПопыток + 1;
				МенеджерЗаписи.ИнформацияООшибке = ТекстСообщенияОбОшибке;
				МенеджерЗаписи.Записать();
				
				Продолжить;
			КонецПопытки;
			
			Если ВыборкаПисьма.УдалятьПослеОтправки Тогда
				ПисьмоОбъект.Удалить();
			Иначе
				ПисьмоОбъект.ИдентификаторСообщения = ИдентификаторПисьма;
				ПисьмоОбъект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
				ПисьмоОбъект.Размер = Взаимодействия.ОценитьРазмерИсходящегоЭлектронногоПисьма(ПисьмоОбъект.Ссылка);
				ПисьмоОбъект.ДатаОтправления = ТекущаяДатаСеанса();
				ПисьмоОбъект.ДополнительныеСвойства.Вставить("НеЗаписыватьКонтакты", Истина);
				ПисьмоОбъект.Записать(РежимЗаписиДокумента.Запись);
				Если ВыборкаПисьма.ТребуетсяОпределениеПапки Тогда
					МассивПисем.Добавить(ВыборкаПисьма.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Соединение.Отключиться();
		
	КонецЦикла;
	
	Взаимодействия.УстановитьПапкиДляМассиваПисем(МассивПисем);
	
	// Отправим уведомления о прочтении.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УведомленияОПрочтении.Письмо,
	|	ПРЕДСТАВЛЕНИЕ(УведомленияОПрочтении.Письмо) КАК ПредставлениеПисьма,
	|	УведомленияОПрочтении.ДатаПрочтения,
	|	ЭлектронноеПисьмоВходящее.АдресаУведомленияОПрочтении.(
	|		Адрес,
	|		Представление,
	|		Контакт
	|	),
	|	ЭлектронноеПисьмоВходящее.УчетнаяЗапись КАК УчетнаяЗапись,
	|	ЭлектронноеПисьмоВходящее.ОтправительПредставление,
	|	ЭлектронноеПисьмоВходящее.ОтправительАдрес,
	|	ЭлектронноеПисьмоВходящее.Дата,
	|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты,
	|	ЭлектронноеПисьмоВходящее.Тема,
	|	УведомленияОПрочтении.Пользователь
	|ИЗ
	|	РегистрСведений.УведомленияОПрочтении КАК УведомленияОПрочтении
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|			ПО ЭлектронноеПисьмоВходящее.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|		ПО УведомленияОПрочтении.Письмо = ЭлектронноеПисьмоВходящее.Ссылка
	|ГДЕ
	|	УведомленияОПрочтении.ТребуетсяОтправка
	|	И УведомленияОПрочтении.Пользователь = &Пользователь
	|ИТОГИ ПО
	|	УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("Пользователь",ТекущийПользователь);
	
	ВыборкаУчетныеЗаписи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУчетныеЗаписи.Следующий() Цикл
		
		Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(ВыборкаУчетныеЗаписи.УчетнаяЗапись);
		
		Попытка
			Соединение = Новый ИнтернетПочта;
			Соединение.Подключиться(Профиль);
		Исключение
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Во время подключения к учетной записи %1 произошла ошибка
					|%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ВыборкаУчетныеЗаписи.УчетнаяЗапись,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке,ВыборкаУчетныеЗаписи.УчетнаяЗапись);
			
			Продолжить;
			
		КонецПопытки;
		
		ВыборкаПисьма = ВыборкаУчетныеЗаписи.Выбрать();
		Пока ВыборкаПисьма.Следующий() Цикл
			
			СоздатьОтправитьУведомлениеОПрочтении(ВыборкаПисьма,Ложь,Соединение);
			
		КонецЦикла;
		
		Соединение.Отключиться();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьПисьма(ДанныеУчетнойЗаписи, ЕстьОшибки, Получено, МассивСозданныхПисем)
	
	// Проверим блокировку учетной записи и если она доступна для получения, установим блокировку.
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗаблокированныеДляПолученияУчетныеЗаписи.ДатаБлокировки
	|ИЗ
	|	РегистрСведений.ЗаблокированныеДляПолученияУчетныеЗаписи КАК ЗаблокированныеДляПолученияУчетныеЗаписи
	|ГДЕ
	|	ЗаблокированныеДляПолученияУчетныеЗаписи.УчетнаяЗапись = &УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", ДанныеУчетнойЗаписи.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ДатаБлокировки + 60 * 60 > ТекущаяДатаСеанса() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ЗаблокированныеДляПолученияУчетныеЗаписи.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УчетнаяЗапись  = ДанныеУчетнойЗаписи.Ссылка;
	МенеджерЗаписи.ДатаБлокировки = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();

	// -----------------------------------------------------------------
	// Сформируем почтовый профиль и подключимся к почтовому серверу.
	Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(ДанныеУчетнойЗаписи.Ссылка, Истина);
	
	Протокол = ПротоколИнтернетПочты.POP3;
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеУчетнойЗаписи.Ссылка, "ПротоколВходящейПочты") = "IMAP" Тогда
		Протокол = ПротоколИнтернетПочты.IMAP;
	КонецЕсли;
	
	Почта = Новый ИнтернетПочта;
	Попытка
		Почта.Подключиться(Профиль, Протокол);
	Исключение
		
		СнятьБлокировкуУчетнойЗаписиДляПолучения(ДанныеУчетнойЗаписи.Ссылка);
		
		ЕстьОшибки = Истина;
		
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Во время подключения к учетной записи %1 произошла ошибка
				|%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ДанныеУчетнойЗаписи.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Ошибка, , ,
			                         ТекстСообщенияОбОшибке);
		
		Возврат;
		
	КонецПопытки;

	// Получим идентификаторы сообщений на сервере.
	Идентификаторы = Почта.ПолучитьИдентификаторы();
	Если Идентификаторы.Количество() = 0 И (Не ДанныеУчетнойЗаписи.ОставлятьКопии) Тогда
		// Если на сервере сообщений нет, то удалим все записи по учетной записи в регистре сведений
		// ИдентификаторыПолученныхЭлектронныхПисем.
		УдалитьИдентификаторыВсехРанееПолученныхПисем(ДанныеУчетнойЗаписи.Ссылка);
		Почта.Отключиться();
		СнятьБлокировкуУчетнойЗаписиДляПолучения(ДанныеУчетнойЗаписи.Ссылка);
		Возврат;
	КонецЕсли;

	// -----------------------------------------------------------------
	// Определим какие сообщения нужно получать.
	ИдЗагружать = ПолучитьИдентификаторыПисемДляЗагрузки(Идентификаторы, ДанныеУчетнойЗаписи.Ссылка);
	Получено = 0;
	
	Если ИдЗагружать.Количество() <> 0 Тогда
		
		ОтветственныйЗаОбработкуПисем = ПолучитьОтветственногоЗаОбработкуПисьмаПоУмолчанию(ДанныеУчетнойЗаписи.Ссылка);
		КоличествоОшибокПриЗаписи = 0;
		Получено = 0;
		
			Пока ИдЗагружать.Количество() > (Получено + КоличествоОшибокПриЗаписи) Цикл
				
				КоличествоВПорции = 0;
				МассивИдентификаторовПорцииДляЗагрузки = Новый Массив;
				
				Для Инд = (Получено + КоличествоОшибокПриЗаписи) По ИдЗагружать.Количество() - 1 Цикл
					
					МассивИдентификаторовПорцииДляЗагрузки.Добавить(ИдЗагружать.Получить(Инд));
					КоличествоВПорции = КоличествоВПорции + 1;
					
					Если КоличествоВПорции = 10 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				// Получим нужные сообщения
				Сообщения = Почта.Выбрать(Ложь, МассивИдентификаторовПорцииДляЗагрузки);
				
				// Запишем их
				Для Каждого Сообщение Из Сообщения Цикл
					ДобавлятьВМассивСозданныхПисем = ЛОЖЬ;
					Попытка
						СозданноеПисьмо = ЗаписатьВходящееЭлектронноеПисьмо(
						ДанныеУчетнойЗаписи.Ссылка,
						Сообщение,
						ОтветственныйЗаОбработкуПисем,
						ДанныеУчетнойЗаписи.ПомещатьПисьмоВПапкуПисьмаОснования,
						ДобавлятьВМассивСозданныхПисем);
						
						Получено = Получено + 1;
						
					Исключение
						
						ОтменитьТранзакцию();
						ЕстьОшибки = Истина;
						ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'При получении письма %1 от %2, отправленное c адреса %3 произошла ошибка
						|%4'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
						Сообщение.Тема,
						Сообщение.ДатаОтправления,
						Сообщение.Отправитель.Адрес,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						
						ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Ошибка, , ,
						ТекстСообщенияОбОшибке);
						
						КоличествоОшибокПриЗаписи = КоличествоОшибокПриЗаписи + 1;
						Для Каждого ИдентификаторСообщения Из Сообщение.Идентификатор Цикл
							ИндексИдентификатораВМассиве = Идентификаторы.Найти(ИдентификаторСообщения);
							Если ИндексИдентификатораВМассиве <> Неопределено Тогда
								Идентификаторы.Удалить(ИндексИдентификатораВМассиве);
							КонецЕсли;
							Продолжить;
						КонецЦикла;
					КонецПопытки;
					Если ДобавлятьВМассивСозданныхПисем Тогда
						МассивСозданныхПисем.Добавить(СозданноеПисьмо);
					КонецЕсли;
				КонецЦикла;
			
			КонецЦикла;
		
		КонецЕсли;
	
	// -----------------------------------------------------------------
	// Удалим ненужные сообщения на сервере.
	Если Протокол = ПротоколИнтернетПочты.POP3 Тогда 
		Если Не ДанныеУчетнойЗаписи.ОставлятьКопии Тогда
			// удалять все
			МассивКУдалению = Идентификаторы;
			УдалятьВсе = Истина;
		Иначе
			УдалятьВсе = Ложь;
			Если ДанныеУчетнойЗаписи.ОставлятьДней > 0 Тогда
				МассивКУдалению = ПолучитьИдентификаторыПисемДляУдаленияНаСервере(
				Идентификаторы, 
				ДанныеУчетнойЗаписи.Ссылка, 
				ТекущаяДатаСеанса() - ДанныеУчетнойЗаписи.ОставлятьДней * 24 * 60 * 60);
			Иначе
				МассивКУдалению = Новый Массив;
			КонецЕсли;
		КонецЕсли;
		
		Если МассивКУдалению.Количество() <> 0 Тогда
			Почта.УдалитьСообщения(МассивКУдалению);
		КонецЕсли;
		
		// -----------------------------------------------------------------
		// Удалим ненужные идентификаторы в регистре сведений.
		Если УдалятьВсе Тогда
			УдалитьИдентификаторыВсехРанееПолученныхПисем(ДанныеУчетнойЗаписи.Ссылка);
		Иначе
			УдалитьИдентификаторыРанееПолученныхПисем(ДанныеУчетнойЗаписи.Ссылка, Идентификаторы, МассивКУдалению);
		КонецЕсли;
	КонецЕсли;
	
	// -----------------------------------------------------------------
	// Отключимся от почтового сервера.
	Почта.Отключиться();
	
	СнятьБлокировкуУчетнойЗаписиДляПолучения(ДанныеУчетнойЗаписи.Ссылка);

КонецПроцедуры

Процедура УдалитьИдентификаторыВсехРанееПолученныхПисем(УчетнаяЗапись)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|ИЗ
	|	РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем КАК ИдентификаторыПолученныхЭлектронныхПисем
	|ГДЕ
	|	ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись = &УчетнаяЗапись";
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Набор = РегистрыСведений.ИдентификаторыПолученныхЭлектронныхПисем.СоздатьНаборЗаписей();
		Набор.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьИдентификаторыРанееПолученныхПисем(УчетнаяЗапись, ИдентификаторыНаСервере, ИдентификаторыУдалять)
	
	// Получим список идентификаторов которые не нужно удалять.
	ИдентификаторыКУдалению = Новый Соответствие;
	Для Каждого Элемент Из ИдентификаторыУдалять Цикл
		ИдентификаторыКУдалению.Вставить(Элемент, Истина);
	КонецЦикла;
	
	ИдентификаторыОставляем = Новый Массив;
	Для Каждого Элемент Из ИдентификаторыНаСервере Цикл
		Если ИдентификаторыКУдалению.Получить(Элемент) = Неопределено Тогда
			ИдентификаторыОставляем.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	// Получим идентификаторы которые нужно удалить, те которые есть в регистре, но не нужно оставлять.
	ТаблицаИдентификаторов = СоздатьТаблицуСИдентификаторами(ИдентификаторыОставляем);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|ИЗ
	|	РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем КАК ИдентификаторыПолученныхЭлектронныхПисем
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.Идентификатор = ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|ГДЕ
	|	ТаблицаИдентификаторов.Идентификатор ЕСТЬ NULL
	|	 И ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись = &УчетнаяЗапись";

	МассивКУдалению = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");
	
	// Удалим все ненужные идентификаторы.
	Для Каждого Идентификатор Из МассивКУдалению Цикл
		Набор = РегистрыСведений.ИдентификаторыПолученныхЭлектронныхПисем.СоздатьНаборЗаписей();
		Набор.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
		Набор.Отбор.Идентификатор.Установить(Идентификатор);
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьТаблицуСИдентификаторами(Идентификаторы)
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",,, Новый КвалификаторыСтроки(100)));
	Для Каждого Идентификатор Из Идентификаторы Цикл
		НоваяСтрока = ТаблицаИдентификаторов.Добавить();
		НоваяСтрока.Идентификатор = Идентификатор;
	КонецЦикла;
	
	Возврат ТаблицаИдентификаторов;
	
КонецФункции

Функция ПолучитьИдентификаторыПисемДляЗагрузки(Идентификаторы, УчетнаяЗапись)

	// Получим список сообщений которые не были раньше получены.
	ТаблицаИдентификаторов = СоздатьТаблицуСИдентификаторами(Идентификаторы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("УчетнаяЗапись",          УчетнаяЗапись);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем КАК ИдентификаторыПолученныхЭлектронныхПисем
	|		ПО ТаблицаИдентификаторов.Идентификатор = ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|			И (ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись = &УчетнаяЗапись)
	|ГДЕ
	|	ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись ЕСТЬ NULL ";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");

КонецФункции

Функция ПолучитьИдентификаторыПисемДляУдаленияНаСервере(Идентификаторы, УчетнаяЗапись, ДатаПоКоторуюУдалять)

	ТаблицаИдентификаторов = СоздатьТаблицуСИдентификаторами(Идентификаторы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ДатаПолучения", ДатаПоКоторуюУдалять);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем КАК ИдентификаторыПолученныхЭлектронныхПисем
	|		ПО ТаблицаИдентификаторов.Идентификатор = ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|			И (ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись = &УчетнаяЗапись)
	|ГДЕ
	|	ИдентификаторыПолученныхЭлектронныхПисем.ДатаПолучения <= &ДатаПолучения";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");

КонецФункции

Функция ЗаписатьВходящееЭлектронноеПисьмо(
	УчетнаяЗапись,
	Сообщение,
	ОтветственныйЗаОбработкуПисем,
	ПомещатьПисьмоВПапкуПисьмаОснования,
	ДобавлятьВМассивСозданныхПисем)
	
	НачатьТранзакцию();

	// Создадим документ и заполним его реквизиты на основе сообщения.
	Письмо = Документы.ЭлектронноеПисьмоВходящее.СоздатьДокумент();
	Письмо.УчетнаяЗапись = УчетнаяЗапись;
	ЗаполнитьДокументЭлектронноеПисьмоВходящее(Письмо, Сообщение);

	// Найдем основание письма, определим предмет и контакты.
	Предмет = Неопределено;
	Папка   = Неопределено;
	ЗаполнитьПредметИКонтакты(Письмо,
		Предмет,
		Папка,
		ПомещатьПисьмоВПапкуПисьмаОснования);
	
	// Заполним ответственного
	Письмо.Ответственный = ОтветственныйЗаОбработкуПисем;
	
	// Запишем письмо
	Письмо.Записать();
	
	// Установим папку письма  и предмет.
	СтруктураДляЗаписи = ВзаимодействияКлиентСервер.СтруктураРеквизитовВзаимодействияДляЗаписи(
	                    Папка,?(ЗначениеЗаполнено(Предмет),Предмет,Письмо.Ссылка), , , Ложь);
	ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(Письмо.Ссылка, СтруктураДляЗаписи);
	МассивИменВложений              = Новый Массив;
	МассивДублирующихсяИменВложений = Новый Массив;
	
	// Запишем вложения
	Для Каждого Вложение Из Сообщение.Вложения Цикл
		Если МассивИменВложений.Найти(Вложение.ИмяФайла) = Неопределено Тогда 
			МассивИменВложений.Добавить(Вложение.ИмяФайла);
		ИначеЕсли МассивДублирующихсяИменВложений.Найти(Вложение.ИмяФайла) = Неопределено Тогда
			МассивДублирующихсяИменВложений.Добавить(Вложение.ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ДублирующеесяВложение Из МассивДублирующихсяИменВложений Цикл
		ИндексВМассиве = МассивИменВложений.Найти(ДублирующеесяВложение);
		Если ИндексВМассиве <> Неопределено Тогда
			МассивИменВложений.Удалить(ИндексВМассиве);
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодписьСлужебныйКлиентСервер =
			ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебныйКлиентСервер");
		
		СоответствиеВложенийИПодписей =
			МодульЭлектроннаяПодписьСлужебныйКлиентСервер.ПолучитьСоответствиеФайловИПодписей(
				МассивИменВложений);
	Иначе
		СоответствиеВложенийИПодписей = Новый Соответствие;
		Для Каждого ИмяФайлаВложения Из МассивИменВложений Цикл
			СоответствиеВложенийИПодписей.Вставить(ИмяФайлаВложения, Новый Массив);
		КонецЦикла;
	КонецЕсли;
	
	КоличествоПустыхИменВоВложениях = 0;
	Для каждого ЭлементСоответствия Из СоответствиеВложенийИПодписей Цикл
		
		НайденноеВложение = Неопределено;
		МассивПодписей    = Новый Массив;
		
		Для каждого Вложение Из Сообщение.Вложения Цикл
			Если Вложение.ИмяФайла = ЭлементСоответствия.Ключ Тогда
				НайденноеВложение = Вложение;
				Прервать;
			КонецЕсли
		КонецЦикла;
		
		Если НайденноеВложение <> Неопределено И ЭлементСоответствия.Значение.Количество() > 0 Тогда
			Для каждого Вложение Из Сообщение.Вложения Цикл
				Если ЭлементСоответствия.Значение.Найти(Вложение.ИмяФайла) <> Неопределено Тогда
					МассивПодписей.Добавить(Вложение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НайденноеВложение <> Неопределено Тогда
			ЗаписатьВложениеЭлектронногоПисьма(
				Письмо,НайденноеВложение,
				МассивПодписей,
				КоличествоПустыхИменВоВложениях);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивДублирующихсяИменВложений.Количество() > 0 Тогда
		Для каждого Вложение Из Сообщение.Вложения Цикл
			Если МассивДублирующихсяИменВложений.Найти(Вложение.ИмяФайла) <> Неопределено Тогда
				ЗаписатьВложениеЭлектронногоПисьма(
					Письмо,Вложение,
					Новый Массив,
					КоличествоПустыхИменВоВложениях);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Письмо.НепринятыеВложения.Количество() Тогда
		Письмо.Записать();
	КонецЕсли;
	
	// Запишем идентификатор
	ЗаписатьИдентификаторПолученногоПисьма(УчетнаяЗапись,
		Письмо.ИдентификаторНаСервере,
		Сообщение.ДатаПолучения);
	
	Если Письмо.УведомитьОПрочтении Тогда
		ЗаписатьНеобходимостьОбработкиУведомленияОПрочтении(Письмо.Ссылка);
	КонецЕсли;

	ЗафиксироватьТранзакцию();
	Если (НЕ ПомещатьПисьмоВПапкуПисьмаОснования) ИЛИ (НЕ ЗначениеЗаполнено(Папка)) Тогда
		ДобавлятьВМассивСозданныхПисем = Истина;
	КонецЕсли;
	
	Возврат Письмо.Ссылка;
	
КонецФункции

Процедура ЗаполнитьПредметИКонтакты(
	Письмо,
	Предмет,
	Папка,
	ПомещатьПисьмоВПапкуПисьмаОснования)
	
	// -----------------------------------------------------------------
	// Получим идентификаторы писем оснований.
	МассивИдентификаторов = Новый Массив;
	СтрокаИдентификаторы = Письмо.ИдентификаторыОснований;
	Пока Не ПустаяСтрока(СтрокаИдентификаторы) Цикл
		Позиция = СтрНайти(СтрокаИдентификаторы, "<");
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		СтрокаИдентификаторы = Сред(СтрокаИдентификаторы, Позиция+1);
		
		Позиция = СтрНайти(СтрокаИдентификаторы, ">");
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ТекущийИдентификатор = СокрЛП(Лев(СтрокаИдентификаторы, Позиция-1));
		СтрокаИдентификаторы = СокрЛП(Сред(СтрокаИдентификаторы, Позиция+1));
		
		Если Не ПустаяСтрока(ТекущийИдентификатор) Тогда
			МассивИдентификаторов.Добавить(ТекущийИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Если (МассивИдентификаторов.Найти(Письмо.ИдентификаторОснования) = Неопределено) 
		И (НЕ ПустаяСтрока(Письмо.ИдентификаторОснования)) Тогда
		МассивИдентификаторов.Добавить(Письмо.ИдентификаторОснования);
	КонецЕсли;
	
	Если МассивИдентификаторов.Найти(Письмо.ИдентификаторСообщения) = Неопределено 
		И НЕ ПустаяСтрока(Письмо.ИдентификаторСообщения) Тогда
		МассивИдентификаторов.Добавить(Письмо.ИдентификаторСообщения);
	КонецЕсли;
	
	ТаблицаИдентификаторов = СоздатьТаблицуСИдентификаторами(МассивИдентификаторов);

	// -----------------------------------------------------------------
	// Получим все основания
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка КАК Ссылка,
	|	ЭлектронноеПисьмоВходящее.Дата КАК Дата
	|ПОМЕСТИТЬ ВсеЭлектронныеПисьма
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ПО ТаблицаИдентификаторов.Идентификатор = ЭлектронноеПисьмоВходящее.ИдентификаторСообщения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ЭлектронноеПисьмоИсходящее.Дата
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ПО ТаблицаИдентификаторов.Идентификатор = ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВсеЭлектронныеПисьма.Ссылка,
	|	ВсеЭлектронныеПисьма.Дата КАК Дата
	|ИЗ
	|	ВсеЭлектронныеПисьма КАК ВсеЭлектронныеПисьма
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Письмо.ВзаимодействиеОснование = ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
	// -----------------------------------------------------------------
	// Получим предмет взаимодействия.
	Если ЗначениеЗаполнено(Письмо.ВзаимодействиеОснование) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПредметыПапкиВзаимодействий.Предмет,
		|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма КАК Папка,
		|	ЕСТЬNULL(ПапкиЭлектронныхПисем.ПредопределеннаяПапка, ИСТИНА) КАК ПредопределеннаяПапка
		|ИЗ
		|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|		ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка
		|ГДЕ
		|	ПредметыПапкиВзаимодействий.Взаимодействие = &ВзаимодействиеОснование";
		
		Запрос.УстановитьПараметр("ВзаимодействиеОснование", Письмо.ВзаимодействиеОснование );
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Предмет = Письмо.Ссылка;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Предмет = Выборка.Предмет;
			Если ПомещатьПисьмоВПапкуПисьмаОснования И Не Выборка.ПредопределеннаяПапка Тогда
				Папка = Выборка.Папка;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;

	// -----------------------------------------------------------------
	// Получим проставленные контакты в предмете.
	СоответствиеКонтактов = ПолучитьСоответствиеКонтактовВПисьме(Письмо.ВзаимодействиеОснование);

	// -----------------------------------------------------------------
	// Проставим контакты на основании предмета.
	НеопределенныеАдреса = Новый Массив;
	УстановитьКонтактыВоВходящемПисьме(Письмо, СоответствиеКонтактов, НеопределенныеАдреса);

	// -----------------------------------------------------------------
	// Если есть неопределенные адреса, то поищем их по контактной информации.
	СоответствиеКонтактов = НайтиАдресаЭлектроннойПочтыВКонтактнойИнформации(НеопределенныеАдреса);
	Если СоответствиеКонтактов.Количество() > 0 Тогда
		УстановитьКонтактыВоВходящемПисьме(Письмо, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиАдресаЭлектроннойПочтыВКонтактнойИнформации(МассивАдресов)

	СоответствиеКонтактов = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контакты.Ссылка,
	|	Контакты.АдресЭП КАК АдресЭП
	|ИЗ
	|	(ВЫБРАТЬ
	|		КонтактнаяИнформация.Ссылка КАК Ссылка,
	|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
	|	ИЗ
	|		Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
	|	ГДЕ
	|		КонтактнаяИнформация.АдресЭП В(&МассивАдресов)
	|		И КонтактнаяИнформация.Тип = &Тип
	|		И НЕ(КонтактнаяИнформация.Ссылка.ПометкаУдаления)
	|";
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;	
		
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		КонтактнаяИнформация.Ссылка КАК Ссылка,
		|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
		|ИЗ
		|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.АдресЭП В(&МассивАдресов)
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И (НЕ КонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|";		
		
	КонецЦикла;	
	
	Запрос.Текст = Запрос.Текст + ") КАК Контакты
	|ИТОГИ ПО
	|	АдресЭП";

	Запрос.УстановитьПараметр("МассивАдресов", МассивАдресов);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ВыборкаПоСсылкам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если (ВыборкаПоСсылкам.Следующий()) Тогда
			СоответствиеКонтактов.Вставить(ВРег(Выборка.АдресЭП), ВыборкаПоСсылкам.Ссылка);
		КонецЕсли;
	КонецЦикла;

	Возврат СоответствиеКонтактов;

КонецФункции

Процедура УстановитьКонтактыВоВходящемПисьме(Письмо, СоответствиеКонтактов, НеопределенныеАдреса)

	ОбработатьПоляКонтактИАдрес(Письмо.ОтправительАдрес, Письмо.ОтправительКонтакт, СоответствиеКонтактов, НеопределенныеАдреса);
	
	Для Каждого СтрокаТаблицы Из Письмо.ПолучателиПисьма Цикл
		ОбработатьПоляКонтактИАдрес(СтрокаТаблицы.Адрес, СтрокаТаблицы.Контакт, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Письмо.ПолучателиКопий Цикл
		ОбработатьПоляКонтактИАдрес(СтрокаТаблицы.Адрес, СтрокаТаблицы.Контакт, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Письмо.ПолучателиОтвета Цикл
		ОбработатьПоляКонтактИАдрес(СтрокаТаблицы.Адрес, СтрокаТаблицы.Контакт, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьПоляКонтактИАдрес(Адрес, Контакт, СоответствиеКонтактов, НеопределенныеАдреса)
	
	Если ЗначениеЗаполнено(Контакт) И ТипЗнч(Контакт) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	НайденныйКонтакт = СоответствиеКонтактов.Получить(ВРег(Адрес));
	Если НайденныйКонтакт <> Неопределено И ТипЗнч(НайденныйКонтакт) <> Тип("Строка") Тогда
		Контакт = НайденныйКонтакт;
		Возврат;
	КонецЕсли;
	
	Если НеопределенныеАдреса.Найти(Адрес) = Неопределено Тогда
		НеопределенныеАдреса.Добавить(Адрес);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСоответствиеКонтактовВПисьме(Письмо)
	
	СоответствиеКонтактов = Новый Соответствие;
	Если Не ЗначениеЗаполнено(Письмо) Тогда
		Возврат СоответствиеКонтактов;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Адреса.Адрес,
	|	Адреса.Контакт
	|ИЗ
	|	(" + ?(ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"), "", "ВЫБРАТЬ
	|		ПОДСТРОКА(ЭлектронноеПисьмоВходящее.ОтправительАдрес, 1, 100) КАК Адрес,
	|		ЭлектронноеПисьмоВходящее.ОтправительКонтакт КАК Контакт
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|	ГДЕ
	|		ЭлектронноеПисьмоВходящее.Ссылка = &Письмо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	") + "ВЫБРАТЬ
	|		Таблица.Адрес,
	|		Таблица.Контакт
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоВходящее.ПолучателиПисьма КАК Таблица
	|	ГДЕ
	|		Таблица.Ссылка = &Письмо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Адрес,
	|		Таблица.Контакт
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоВходящее.ПолучателиКопий КАК Таблица
	|	ГДЕ
	|		Таблица.Ссылка = &Письмо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Адрес,
	|		Таблица.Контакт
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоВходящее.ПолучателиОтвета КАК Таблица
	|	ГДЕ
	|		Таблица.Ссылка = &Письмо) КАК Адреса
	|ГДЕ
	|	(НЕ Адреса.Контакт ЕСТЬ NULL )";
	Запрос.УстановитьПараметр("Письмо", Письмо);
	
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЭлектронноеПисьмоВходящее", "ЭлектронноеПисьмоИсходящее");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Контакт) <> Тип("Строка") Тогда
			СоответствиеКонтактов.Вставить(Выборка.Адрес, Выборка.Контакт);
		КонецЕсли;
	КонецЦикла;

	Возврат СоответствиеКонтактов;
	
КонецФункции

Процедура ЗаписатьИдентификаторПолученногоПисьма(УчетнаяЗапись, Идентификатор, ДатаПолучения)

	Запись = РегистрыСведений.ИдентификаторыПолученныхЭлектронныхПисем.СоздатьМенеджерЗаписи();
	Запись.УчетнаяЗапись = УчетнаяЗапись;
	Запись.Идентификатор = Идентификатор;
	Запись.ДатаПолучения = ДатаПолучения;
	Запись.Записать();

КонецПроцедуры

Процедура ЗаполнитьДокументЭлектронноеПисьмоВходящее(Письмо, Сообщение)
	
	Письмо.Важность = ПолучитьВажностьЭлектронногоПисьма(Сообщение.Важность);
	Письмо.Дата = ?(Сообщение.ДатаОтправления = Дата(1,1,1), ТекущаяДатаСеанса(), Сообщение.ДатаОтправления);
	Письмо.ДатаПолучения = Сообщение.ДатаПолучения;
	Письмо.ВнутреннийЗаголовок = Сообщение.Заголовок;
	Письмо.ИдентификаторНаСервере = ?(Сообщение.Идентификатор.Количество() = 0, "", Сообщение.Идентификатор[0]);
	Письмо.ИдентификаторСообщения = Сообщение.ИдентификаторСообщения;
	Письмо.Кодировка = Сообщение.Кодировка;
	Письмо.УведомитьОДоставке = Сообщение.УведомитьОДоставке;
	Письмо.УведомитьОПрочтении = Сообщение.УведомитьОПрочтении;
	
	Если ТипЗнч(Сообщение.Отправитель) = Тип("ИнтернетПочтовыйАдрес") Тогда
		Письмо.ОтправительАдрес = Сообщение.Отправитель.Адрес;
	Иначе
		Письмо.ОтправительАдрес = Сообщение.Отправитель;
	КонецЕсли;
	Письмо.ОтправительАдрес = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Письмо.ОтправительАдрес, "");
	ИмяОтправителя          = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Сообщение.ИмяОтправителя, "");
	
	Письмо.ОтправительПредставление = 
		?(ПустаяСтрока(ИмяОтправителя), Письмо.ОтправительАдрес, ИмяОтправителя + " <"+ Письмо.ОтправительАдрес +">");
	
	Письмо.Размер = Сообщение.Размер;
	Письмо.Тема = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Сообщение.Тема);
	
	УстановитьТекстПисьма(Письмо, Сообщение);
	
	ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиКопий,  Сообщение.Копии);
	ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиОтвета, Сообщение.ОбратныйАдрес);
	ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиПисьма, Сообщение.Получатели);
	ЗаполнитьИнтернетПочтовыеАдреса(Письмо.АдресаУведомленияОПрочтении,Сообщение.АдресаУведомленияОПрочтении);
	
	Письмо.ИдентификаторОснования    = ИзПисьмаПолучитьИдентификаторОснования(Сообщение);
	Письмо.ИдентификаторыОснований   = Сообщение.ПолучитьПолеЗаголовка("References", "Строка");
	
	Для каждого Вложение Из Сообщение.Вложения Цикл
		Если ПустаяСтрока(Вложение.Идентификатор) И ТипЗнч(Вложение.Данные) = Тип("ДвоичныеДанные") Тогда
			Письмо.ЕстьВложения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИнтернетПочтовыеАдреса(ТабличнаяЧасть, Адреса)
	
	Для Каждого Адрес Из Адреса Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.Адрес         = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Адрес.Адрес, "");
		НоваяСтрока.Представление = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Адрес.ОтображаемоеИмя, "");
	КонецЦикла;
	
КонецПроцедуры

Функция ИзПисьмаПолучитьИдентификаторОснования(Сообщение)

	СтрокаИдентификаторы = СокрЛП(Сообщение.ПолучитьПолеЗаголовка("In-Reply-To", "Строка"));
	
	Позиция = СтрНайти(СтрокаИдентификаторы, "<");
	Если Позиция <> 0 Тогда
		СтрокаИдентификаторы = Сред(СтрокаИдентификаторы, Позиция+1);
	КонецЕсли;
	
	Позиция = СтрНайти(СтрокаИдентификаторы, ">");
	Если Позиция <> 0 Тогда
		СтрокаИдентификаторы = Лев(СтрокаИдентификаторы, Позиция-1);
	КонецЕсли;

	Возврат СтрокаИдентификаторы;

КонецФункции

Процедура УстановитьТекстПисьма(Письмо, Сообщение)
	
	ТекстHTML = "";
	ТекстПростой = "";
	ТекстРазмеченный = "";

	Для Каждого ТекстПочтовогоСообщения Из Сообщение.Тексты Цикл
		Если ТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
			
			ТекстHTML = ТекстHTML + ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстПочтовогоСообщения.Текст);
			
		ИначеЕсли ТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст Тогда
			
			ТекстПростой = ТекстПростой + ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстПочтовогоСообщения.Текст);
			
		ИначеЕсли ТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст Тогда
			ТекстРазмеченный = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстПочтовогоСообщения.Текст);
			
		КонецЕсли;
	КонецЦикла;
	
	Если ТекстHTML <> "" Тогда
		Письмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
		Письмо.ТекстHTML = ТекстHTML;
		Письмо.Текст = ?(ТекстПростой <> "", ТекстПростой, ПолучитьПростойТекстИзHTML(ТекстHTML));
		
	ИначеЕсли ТекстРазмеченный <> "" Тогда
		Письмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст;
		Письмо.Текст = ТекстРазмеченный;
		
	Иначе
		Письмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
		Письмо.Текст = ТекстПростой;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает ответственного за обработку электронных писем по умолчанию.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись, для которой определяется
//                                                                   ответственный.
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи   - ответственный за обработку электронных писем.
//
Функция ПолучитьОтветственногоЗаОбработкуПисьмаПоУмолчанию(УчетнаяЗапись)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиУчетныхЗаписейЭлектроннойПочты.ОтветственныйЗаОбработкуПисем
	|ИЗ
	|	РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|ГДЕ
	|	НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = &УчетнаяЗаписьЭлектроннойПочты";
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьЭлектроннойПочты", УчетнаяЗапись);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	Возврат Выборка.ОтветственныйЗаОбработкуПисем;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с вложения электронных писем.

Процедура ЗаписатьВложениеЭлектронногоПисьма(Объект, Вложение,МассивПодписей,КоличествоПустыхИменВоВложениях)
	
	ПисьмоСсылка = Объект.Ссылка;
	Размер = 0;
	Если ТипЗнч(Вложение.Данные) = Тип("ДвоичныеДанные") Тогда
		Размер = Вложение.Данные.Размер();
	Иначе
		// А может быть и тип ИнтернетПочтовоеСообщение. На данный момент не поддерживаем.
		Если ТипЗнч(Вложение.Данные) = Тип("ИнтернетПочтовоеСообщение") Тогда
			НовоеУдаленноеВложение = Объект.НепринятыеВложения.Добавить();
			НовоеУдаленноеВложение.ИмяВложение = Вложение.Данные.Тема + " " + НСтр("ru = 'от'") + " " +Вложение.Данные.ДатаОтправления;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Адрес = ПоместитьВоВременноеХранилище(Вложение.Данные, "");
	
	ВложениеПисьмаСсылка = ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
		ПисьмоСсылка, Адрес, Вложение.ИмяФайла, Размер,КоличествоПустыхИменВоВложениях);
	
	ЕстьПодписи = (МассивПодписей.Количество() > 0);
	ЭтоОтображаемыйФайл = НЕ ПустаяСтрока(Вложение.Идентификатор);
	
	Если ЕстьПодписи Или ЭтоОтображаемыйФайл Тогда
		
		ВложениеПисьмаОбъект = ВложениеПисьмаСсылка.ПолучитьОбъект();
		
		Если ЕстьПодписи
		   И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
			
			МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
			
			Для Каждого ПодписьВложения Из МассивПодписей Цикл
				ЭП = ВложениеПисьмаОбъект.ЭлектронныеПодписи.Добавить();
				
				ДанныеПодписи = МодульЭлектроннаяПодпись.ПрочитатьДанныеПодписи(ПодписьВложения.Данные);
				Если ДанныеПодписи <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ЭП, ДанныеПодписи);
				КонецЕсли;
				
				ЭП.Подпись = Новый ХранилищеЗначения(ПодписьВложения.Данные);
				ЭП.Комментарий = НСтр("ru = 'Вложение электронного письма'");
				ЭП.ДатаПодписи = ТекущаяДатаСеанса();
			КонецЦикла;
			
			ВложениеПисьмаОбъект.ПодписанЭП = Истина;
			
		КонецЕсли;
		
		Если ЭтоОтображаемыйФайл Тогда
			
			ВложениеПисьмаОбъект.ИДФайлаЭлектронногоПисьма = Вложение.Идентификатор;
			
		КонецЕсли;
		
		ВложениеПисьмаОбъект.Записать();
		
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(Адрес);
	
КонецПроцедуры

// Получает вложения электронного письма.
//
// Параметры:
//  Письмо  - ДокументСсылка - документ электронное письмо для которого необходимо получить вложения.
//
// Возвращаемое значение:
//  ТаблицаЗначений   - таблица значений, содержащая информацию о вложениях.
//
Функция ПолучитьВложенияЭлектронногоПисьма(Письмо,ФормироватьРазмерПредставление = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПрисоединенныхФайловПисьма = ВзаимодействияПереопределяемый.ПолучитьДанныеОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо);
	Если ДанныеПрисоединенныхФайловПисьма = Неопределено Тогда
		ИмяОбъектаМетаданных = ПолучитьИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо);
		ВладелецФайлов       = Письмо;
	Иначе
		ИмяОбъектаМетаданных = ДанныеПрисоединенныхФайловПисьма.ИмяСправочникаПрисоединенныеФайлы;
		ВладелецФайлов       = ДанныеПрисоединенныхФайловПисьма.Владелец;
	КонецЕсли;
	
	Если ИмяОбъектаМетаданных = Неопределено Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Если ФормироватьРазмерПредставление Тогда
		ТекстРазмерПредставление = ",
		|ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК РазмерПредставление";
	Иначе
		ТекстРазмерПредставление = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка,
	|	Файлы.ИндексКартинки,
	|	Файлы.Размер,
	|	Файлы.ИДФайлаЭлектронногоПисьма,
	|	Файлы.ПодписанЭП,
	|	ВЫБОР
	|		КОГДА Файлы.Расширение = &ПустаяСтрока
	|			ТОГДА Файлы.Наименование
	|		ИНАЧЕ Файлы.Наименование + ""."" + Файлы.Расширение
	|	КОНЕЦ КАК ИмяФайла" + ТекстРазмерПредставление + "
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Письмо
	|	И НЕ Файлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Письмо", ВладелецФайлов);
	Запрос.УстановитьПараметр("ПустаяСтрока","");
	
	ТаблицаКВозврату =  Запрос.Выполнить().Выгрузить();
	
	Если ФормироватьРазмерПредставление Тогда
		Для каждого СтрокаТаблицы Из ТаблицаКВозврату Цикл
		
			СтрокаТаблицы.РазмерПредставление = 
				ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(СтрокаТаблицы.Размер);
		
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаКВозврату;
	
КонецФункции

// Записывает вложение электронного письма, расположенное во временном хранилище в файл.
Функция ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
	Письмо,
	АдресВоВременномХранилище,
	ИмяФайла,
	Размер,
	КоличествоПустыхИменВоВложениях = 0) Экспорт
	
	ИмяФайлаДляРазбора = ИмяФайла;
	РасширениеБезТочки = ВзаимодействияКлиентСервер.ПолучитьРасширениеФайла(ИмяФайлаДляРазбора);
	ИмяБезРасширения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаДляРазбора);
	Если ПустаяСтрока(ИмяБезРасширения) Тогда
		
		ИмяФайлаБезРасширения =
			НСтр("ru = 'Вложение без имени'") + ?(КоличествоПустыхИменВоВложениях = 0, ""," " + Строка(КоличествоПустыхИменВоВложениях + 1));
		КоличествоПустыхИменВоВложениях = КоличествоПустыхИменВоВложениях + 1;
		
	Иначе
		ИмяБезРасширения =
			?(РасширениеБезТочки = "",
			ИмяБезРасширения,
			Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - СтрДлина(РасширениеБезТочки) - 1));
	КонецЕсли;
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов",              Письмо);
	ПараметрыФайла.Вставить("Автор",                       Неопределено);
	ПараметрыФайла.Вставить("ИмяБезРасширения",            ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки",          РасширениеБезТочки);
	ПараметрыФайла.Вставить("ВремяИзменения",              Неопределено);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	Возврат ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
		ПараметрыФайла,
		АдресВоВременномХранилище,
		"");
	
КонецФункции

// Записывает вложение электронного письма, копируя вложение другого письма.
Функция ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
	Письмо,
	СсылкаНаФайл,
	УникальныйИдентификаторФормы) Экспорт
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(
		СсылкаНаФайл, УникальныйИдентификаторФормы, Истина);
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов",              Письмо);
	ПараметрыФайла.Вставить("Автор",                       Неопределено);
	ПараметрыФайла.Вставить("ИмяБезРасширения",            ДанныеФайла.Наименование);
	ПараметрыФайла.Вставить("РасширениеБезТочки",          ДанныеФайла.Расширение);
	ПараметрыФайла.Вставить("ВремяИзменения",              Неопределено);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ДанныеФайла.ДатаМодификацииУниверсальная);
	Возврат ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
		ПараметрыФайла,
		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
		"");
	
КонецФункции

// Устанавливает или снимает пометку удаления у вложений электронного письма.
//
// Параметры:
//  Письмо          - ДокументСсылка - письмо, для вложений которого будут выполнены действия.
//  ПометкаУдаления - Булево - признак необходимости установить или снять пометку.
//
Процедура УстановитьПометкуУдаленияУВложенийПисьма(Письмо, ПометкаУдаления) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ИмяОбъектаМетаданных = ПолучитьИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо);
	Если ИмяОбъектаМетаданных = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Файлы.Ссылка
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК Файлы
	|ГДЕ
	|	Файлы.ПометкаУдаления <> &ПометкаУдаления
	|	И Файлы.ВладелецФайла = &ВладелецФайла
	|");
	Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	Запрос.УстановитьПараметр("ВладелецФайла", Письмо);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.УстановитьПометкуУдаления(ПометкаУдаления, Истина);
	КонецЦикла;

КонецПроцедуры

// Удаляет вложения электронного письма.
//
// Параметры:
//  Письмо - ДокументСсылка - письмо, вложения которого будут удалены.
//
Процедура УдалитьВложенияУПисьма(Письмо) Экспорт

	ИмяОбъектаМетаданных = ПолучитьИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо);
	Если ИмяОбъектаМетаданных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("ВладелецФайла", Письмо);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Уведомления о прочтении

// Получает учетную запись электронной почты используемую для отправки по умолчанию.
//
// Возвращаемое значение:
//  Справочник.УчетныеЗаписиЭлектроннойПочты  - учетная запись для отправки по умолчанию.
//
Функция ПолучитьУчетнуюЗаписьДляОтправкиПоУмолчанию() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ИЗ
	|	РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ПО НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки
	|	И НЕ ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.НеИспользоватьВоВстроенномПочтовомКлиенте, ЛОЖЬ)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

Процедура ЗаписатьНеобходимостьОбработкиУведомленияОПрочтении(Письмо)
	
	Запись = РегистрыСведений.УведомленияОПрочтении.СоздатьМенеджерЗаписи();
	Запись.Письмо = Письмо;
	Запись.Записать();
	
КонецПроцедуры

Процедура СоздатьОтправитьУведомлениеОПрочтении(Выборка,ЭтоРегламентноеЗадание,Соединение = Неопределено)
	
	ПараметрыПисьма = Новый Структура;
	
	Взаимодействия.ДобавитьВПараметрАдресатов(Выборка, ПараметрыПисьма, "Кому", "АдресаУведомленияОПрочтении");
	
	ПараметрыПисьма.Вставить("Тема",НСтр("ru = 'Уведомление о прочтении'") + " / " +"Reading Confirmation");
	ПараметрыПисьма.Вставить("Тело",СформироватьТекстУведомленияОПрочтении(Выборка));
	ПараметрыПисьма.Вставить("Кодировка","UTF-8");
	ПараметрыПисьма.Вставить("Важность", ВажностьИнтернетПочтовогоСообщения.Обычная);
	ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
	ПараметрыПисьма.Вставить("ОбрабатыватьТексты",Ложь);
	
	Попытка
		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(Выборка.УчетнаяЗапись, ПараметрыПисьма, Соединение);
	Исключение
		
		Если ЭтоРегламентноеЗадание Тогда
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Во время регламентной отправки уведомления о прочтении электронного письма %1 произошла ошибка
					|%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				Выборка.ПредставлениеПисьма,
				ОписаниеОшибки());
				
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстСообщенияОбОшибке);
			
		Иначе
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Во время отправки уведомления о прочтении электронного письма %1 произошла ошибка
					|%2'"),
				Выборка.ПредставлениеПисьма,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке,Выборка.Письмо);
			
		КонецЕсли;
		
		Возврат;
	КонецПопытки;
	
	УстановитьПризнакОтправкиУведомления(Выборка.Письмо,Ложь);
	
КонецПроцедуры

// Устанавливает признак отправки уведомления о прочтении электронного письма.
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее - письмо для которого устанавливается признак.
//  Отправлять  - Булево - если Истина, то признак будет установлен, снят если Ложь.
//
Процедура УстановитьПризнакОтправкиУведомления(Письмо, Отправлять) Экспорт

	Если Отправлять Тогда
		
		Запись = РегистрыСведений.УведомленияОПрочтении.СоздатьМенеджерЗаписи();
		Запись.Письмо = Письмо;
		Запись.ТребуетсяОтправка = Истина;
		Запись.ДатаПрочтения     = ПолучитьДатуСтрокойСоСмещениемGMT(ТекущаяДатаСеанса());
		Запись.Пользователь      = Пользователи.ТекущийПользователь();
		Запись.Записать();
		
	Иначе
		
		НаборЗаписей = РегистрыСведений.УведомленияОПрочтении.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Письмо.Установить(Письмо);
		НаборЗаписей.Записать();
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

Функция ПолучитьВажностьЭлектронногоПисьма(Важность)
	
	Если (Важность = ВажностьИнтернетПочтовогоСообщения.Высокая)
		ИЛИ (Важность = ВажностьИнтернетПочтовогоСообщения.Наивысшая) Тогда
		
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Высокая;

	ИначеЕсли (Важность = ВажностьИнтернетПочтовогоСообщения.Наименьшая)
		ИЛИ (Важность = ВажностьИнтернетПочтовогоСообщения.Низкая) Тогда
		
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Низкая;

	Иначе
		
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПростойТекстИзHTML(ТекстHTML)
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	Возврат ДокументHTML.Тело.ТекстовоеСодержимое;
	
	Возврат "";
	
КонецФункции

Функция СформироватьТекстУведомленияОПрочтении(Выборка)

	ТекстУведомленияАнглийский = "
		|Your message from " + Выборка.ОтправительПредставление + "<" + Выборка.ОтправительАдрес + ">
		|Subject: " + Выборка.Тема + "
		|Sent " + Выборка.Дата + "
		|Has been read " +  Выборка.ДатаПрочтения + "
		|By Recipient " +Выборка.ИмяПользователя + "<" + Выборка.АдресЭлектроннойПочты + ">";
	
	ЛокализованноеУведомление = Символы.ПС + НСтр("ru='Сообщение от %1 < %2 >
		|Тема: %3
		|Отправленное %4
		|Было прочитано %5
		|Получателем %6 <%7>'");
	
	ЛокализованноеУведомление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЛокализованноеУведомление,
		Выборка.ОтправительПредставление,
		Выборка.ОтправительАдрес,
		Выборка.Тема,
		Выборка.Дата,
		Выборка.ДатаПрочтения,
		Выборка.ИмяПользователя,
		Выборка.АдресЭлектроннойПочты);
	
	Возврат ЛокализованноеУведомление + Символы.ПС + Символы.ПС + ТекстУведомленияАнглийский;

КонецФункции

Функция ПолучитьДатуСтрокойСоСмещениемGMT(Дата)

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(&УниверсальноеВремя, &МестноеВремя, МИНУТА) КАК РазностьДат");
	Запрос.УстановитьПараметр("МестноеВремя",Дата);
	Запрос.УстановитьПараметр("УниверсальноеВремя",УниверсальноеВремя(Дата));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	СмещениеВремениВМинутах = Выборка.РазностьДат;
	ЧасыСмещения = Цел(СмещениеВремениВМинутах/60); 
	СтрокаЧасыСмещения = ?(ЧасыСмещения > 0,"+","") + Формат(ЧасыСмещения,"ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=");
	МинутыСмещения = СмещениеВремениВМинутах%60;
	Если МинутыСмещения < 0 Тогда
		МинутыСмещения = + МинутыСмещения;
	КонецЕсли;
	СтрокаМинутыСмещения = Формат(МинутыСмещения,"ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=");
	
	Возврат Формат(Дата,"ДЛФ=DT") + " GMT " + СтрокаЧасыСмещения + СтрокаМинутыСмещения;

КонецФункции

Процедура СоздатьПредопределеннуюПапкуЭлектронныхПисем(Наименование,Владелец)

	Папка = Справочники.ПапкиЭлектронныхПисем.СоздатьЭлемент();
	Папка.УстановитьНовыйКод();
	Папка.ОбменДанными.Загрузка = Истина;
	Папка.ПредопределеннаяПапка = Истина;
	Папка.Наименование = Наименование;
	Папка.Владелец = Владелец;
	Папка.Записать();

КонецПроцедуры 

// Возвращает важность Интернет почтового сообщения в зависимости от переданного значения
// перечисления ВариантыВажностиВзаимодействия.
//
// Параметры:
//  ВажностьВзаимодействия - Перечисление.ВариантыВажностиВзаимодействия.
//
// Возвращаемое значение:
//  ВажностьИнтернетПочтовогоСообщения.
//
Функция ПолучитьВажность(ВажностьВзаимодействия) Экспорт
	
	Если ВажностьВзаимодействия = Перечисления.ВариантыВажностиВзаимодействия.Высокая Тогда
		Возврат ВажностьИнтернетПочтовогоСообщения.Высокая;
	ИначеЕсли ВажностьВзаимодействия = Перечисления.ВариантыВажностиВзаимодействия.Низкая Тогда
		Возврат ВажностьИнтернетПочтовогоСообщения.Низкая;
	Иначе
		Возврат ВажностьИнтернетПочтовогоСообщения.Обычная;
	КонецЕсли;
	
КонецФункции

// Возвращает имя события журнала регистрации подсистемы Взаимодействия.
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Взаимодействия'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Получает и добавляет в список значений доступные пользователю учетные записи электронной почты.
//
// Параметры:
//  СписокВыбора  - СписокЗначений - в него будут добавлены доступные пользователю записи электронной почты.
//
Процедура ПолучитьДоступныеУчетныеЗаписиДляОтправки(СписокВыбора,ТаблицаДанныхУчетнойЗаписи) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись,
	|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты,
	|	ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.УдалятьПисьмаПослеОтправки, ЛОЖЬ) КАК УдалятьПослеОтправки,
	|	ВЫБОР
	|		КОГДА НастройкиУчетныхЗаписейЭлектроннойПочты.ОтветственныйЗаОбработкуПисем = &ТекущийПользователь
	|				И НастройкиУчетныхЗаписейЭлектроннойПочты.ПерсональнаяУчетнаяЗапись
	|			ТОГДА 0
	|		КОГДА НастройкиУчетныхЗаписейЭлектроннойПочты.ОтветственныйЗаОбработкуПисем = &ТекущийПользователь
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ЗначениеУпорядочивания
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|		ПО (НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = УчетныеЗаписиЭлектроннойПочты.Ссылка)
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки
	|	И НЕ ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.НеИспользоватьВоВстроенномПочтовомКлиенте, ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначениеУпорядочивания";
	
	Запрос.УстановитьПараметр("ТекущийПользователь",Пользователи.ТекущийПользователь());
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.УчетнаяЗапись, 
			ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Выборка.ИмяПользователя,
			                                                         Выборка.АдресЭлектроннойПочты,
			                                                         ""));
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Выгрузить(), ТаблицаДанныхУчетнойЗаписи);
	
КонецПроцедуры

// Создает предопределенные папки для учетной записи электронной почты.
//
// Параметры:
//  УчетнаяЗапись  - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись для которой будут созданы
//                                                                    предопределенные папки.
//
Процедура СоздатьПредопределенныеПапкиЭлектронныхПисемДляУчетнойЗаписи(УчетнаяЗапись) Экспорт
	
	МассивИменПредопределенныхПапок = Новый Массив;
	МассивИменПредопределенныхПапок.Добавить(НСтр("ru = 'Входящие'"));
	МассивИменПредопределенныхПапок.Добавить(НСтр("ru = 'Исходящие'"));
	МассивИменПредопределенныхПапок.Добавить(НСтр("ru = 'Нежелательная почта'"));
	МассивИменПредопределенныхПапок.Добавить(НСтр("ru = 'Отправленные'"));
	МассивИменПредопределенныхПапок.Добавить(НСтр("ru = 'Удаленные'"));
	МассивИменПредопределенныхПапок.Добавить(НСтр("ru = 'Черновики'"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПапкиЭлектронныхПисем.Наименование
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|	И ПапкиЭлектронныхПисем.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", УчетнаяЗапись);
	
	МассивИмеющихсяПапок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Наименование");
	
	Для каждого ИмяПредопределеннойПапки Из МассивИменПредопределенныхПапок Цикл
		Если МассивИмеющихсяПапок.Найти(ИмяПредопределеннойПапки) = Неопределено Тогда
			
			СоздатьПредопределеннуюПапкуЭлектронныхПисем(ИмяПредопределеннойПапки, УчетнаяЗапись);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает имя объекта метаданных присоединенных файлов электронного письма.
//
// Параметры:
//  Письмо  - ДокументСсылка - письмо для которого определяется имя.
//
// Возвращаемое значение:
//  Строка,Неопределено  - имя объекта метаданных присоединенных файлов электронного письма.
 Функция ПолучитьИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо) Экспорт

	 Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		
		Возврат "ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы";
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		Возврат "ЭлектронноеПисьмоВходящееПрисоединенныеФайлы";
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;

КонецФункции

Процедура СнятьБлокировкуУчетнойЗаписиДляПолучения(УчетнаяЗапись)

	НаборЗаписей = РегистрыСведений.ЗаблокированныеДляПолученияУчетныеЗаписи.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
	НаборЗаписей.Записать();

КонецПроцедуры

#КонецОбласти
