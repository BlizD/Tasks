////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обновление конфигурации".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяет наличие обновления конфигурации при запуске программы.
//
Процедура ПроверитьОбновлениеКонфигурации() Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		Возврат;
	КонецЕсли;
	
#Если НЕ ВебКлиент Тогда
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	Если ПараметрыРаботыКлиента.РазделениеВключено Или Не ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПриложения["СтандартныеПодсистемы.ДоступноеОбновлениеКонфигурации"] = Неопределено;
	НастройкиОбновления = ПараметрыРаботыКлиента.НастройкиОбновления;
	НаличиеОбновления = НастройкиОбновления.ПроверитьПрошлыеОбновленияБазы;
	
	Если НаличиеОбновления Тогда
		// Надо завершить предыдущее обновление.
		ПоказатьПоискИУстановкуОбновлений();
		Возврат;
	КонецЕсли;
	
	Если НЕ НаличиеОбновления И НастройкиОбновления.ЕстьДоступДляОбновления Тогда
		НаличиеОбновления = НастройкиОбновления.КонфигурацияИзменена;
	КонецЕсли;
	
	НаименованиеСтраницыДоступногоОбновления	= "ДоступноеОбновление";
	НаименованиеСтраницыФайлОбновления			= "ФайлОбновления";
	ЕстьДоступноеОбновлениеВИнтернете			= Ложь;
	
	ИмяПараметра = "СтандартныеПодсистемы.НастройкиОбновленияКонфигурации";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Неопределено);
	КонецЕсли;
	ПараметрыПриложения[ИмяПараметра] = НастройкиОбновления.НастройкиОбновленияКонфигурации;
	НастройкиОбновленияКонфигурации = ПараметрыПриложения[ИмяПараметра];
	
	Если Не НаличиеОбновления И НастройкиОбновленияКонфигурации <> Неопределено
		И НастройкиОбновления.ЕстьДоступДляПроверкиОбновления
		И (НастройкиОбновленияКонфигурации.ПроверятьНаличиеОбновленияПриЗапуске = 1
		Или НастройкиОбновленияКонфигурации.ПроверятьНаличиеОбновленияПриЗапуске = 2) Тогда
		
		// Подключение обработчика ожидания для проверки наличия обновления в сети Интернет.
		Если НастройкиОбновленияКонфигурации.ПроверятьНаличиеОбновленияПриЗапуске = 1
			И НастройкиОбновленияКонфигурации.РасписаниеПроверкиНаличияОбновления <> Неопределено Тогда
			ПодключитьОтключитьПроверкуПоРасписанию(Истина);
		КонецЕсли;
		
		Параметры = ПолучитьДоступноеОбновлениеКонфигурации();
		// Если расписание не задано, то проверяем наличие обновления сейчас.
		Если НастройкиОбновленияКонфигурации.ПроверятьНаличиеОбновленияПриЗапуске = 2 Тогда
			ПроверитьНаличиеОбновленияЧерезИнтернет();
			ЕстьДоступноеОбновлениеВИнтернете = НастройкиОбновленияКонфигурации.ИсточникОбновления <> -1 
				И Параметры.ИмяСтраницы = НаименованиеСтраницыДоступногоОбновления;
			Если НЕ НаличиеОбновления И ЕстьДоступноеОбновлениеВИнтернете Тогда
				НаличиеОбновления = ЕстьДоступноеОбновлениеВИнтернете;
			КонецЕсли;
		КонецЕсли;
		Если Не НаличиеОбновления Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиОбновления.КонфигурацияИзменена И НастройкиОбновления.ЕстьДоступДляПроверкиОбновления Тогда
		Настройки = ОбновлениеКонфигурацииКлиентСервер.ПолучитьОбновленныеНастройкиОбновленияКонфигурации(
			ПараметрыПриложения["СтандартныеПодсистемы.НастройкиОбновленияКонфигурации"]);
		Настройки.ИсточникОбновления	= 2;  // Локальный или сетевой каталог.
		Настройки.НуженФайлОбновления	= Ложь;
		ОбновлениеКонфигурацииВызовСервера.ЗаписатьСтруктуруНастроекПомощника(НастройкиОбновленияКонфигурации);
		
		Параметры = ПолучитьДоступноеОбновлениеКонфигурации();
		Параметры.ИсточникОбновления = НастройкиОбновленияКонфигурации.ИсточникОбновления;
		Параметры.НуженФайлОбновления = НастройкиОбновленияКонфигурации.НуженФайлОбновления;
		Параметры.ФлагАвтоПереходаНаСтраницуСОбновлением = Истина;
		ПоказатьОповещениеПользователя(НСтр("ru = 'Обновление конфигурации'"),
			"e1cib/app/Обработка.ПоискИУстановкаОбновлений",
			НСтр("ru = 'Конфигурация отличается от основной конфигурации информационной базы.'"), 
			БиблиотекаКартинок.Информация32);
		Возврат;
	КонецЕсли;	
	
	Если ЕстьДоступноеОбновлениеВИнтернете И НастройкиОбновления.ЕстьДоступДляПроверкиОбновления Тогда
		Настройки = ОбновлениеКонфигурацииКлиентСервер.ПолучитьОбновленныеНастройкиОбновленияКонфигурации(
			ПараметрыПриложения["СтандартныеПодсистемы.НастройкиОбновленияКонфигурации"]);
		Настройки.ИсточникОбновления	= 0;  // Интернет
		ОбновлениеКонфигурацииВызовСервера.ЗаписатьСтруктуруНастроекПомощника(НастройкиОбновленияКонфигурации);
		
		Параметры = ПолучитьДоступноеОбновлениеКонфигурации();
		Параметры.ИсточникОбновления = НастройкиОбновленияКонфигурации.ИсточникОбновления;
		Параметры.НуженФайлОбновления = НастройкиОбновленияКонфигурации.НуженФайлОбновления;
		Параметры.ФлагАвтоПереходаНаСтраницуСОбновлением = Истина;
		ПоказатьОповещениеПользователя(НСтр("ru = 'Доступно обновление конфигурации'"),
			"e1cib/app/Обработка.ПоискИУстановкаОбновлений",
			НСтр("ru = 'Версия:'") + " " + Параметры.ПараметрыФайлаПроверкиОбновления.Version, 
			БиблиотекаКартинок.Информация32);
		Возврат;	
	КонецЕсли;
	
#КонецЕсли

КонецПроцедуры

// Скачивает из Интернета файл проверки наличия обновлений.
//
// Параметры:
//	ВыдаватьСообщения - Булево - Признак необходимости выводить сообщения об ошибках пользователю.
//	ПроверитьОбновленияДляНовойРедакции - Булево - признак необходимости проверять обновления для новой редакции
//	                                               платформы.
//
Функция ПолучитьФайлПроверкиНаличияОбновлений(Знач ВыдаватьСообщения = Истина, ПроверитьОбновленияДляНовойРедакции = Ложь) Экспорт
	
	ПараметрыОбновления = ПолучитьПараметрыОбновления(ПроверитьОбновленияДляНовойРедакции);
	НастройкиОбновления = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления;
	
	ВременныйФайл = ПараметрыОбновления.КаталогФайловОбновления + ПараметрыОбновления.ИмяФайлаПроверкиНаличияОбновления;
	
	// При необходимости, создаем каталог для временного файла.
	КаталогВременногоФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВременныйФайл).Путь;
	КаталогВременногоФайлаОбъект = Новый Файл(КаталогВременногоФайла);
	Если НЕ КаталогВременногоФайлаОбъект.Существует() Тогда
		Попытка 
			СоздатьКаталог(КаталогВременногоФайла);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			
			СообщениеОбОшибке = НСтр("ru = 'Не удалось создать временный каталог для проверки наличия обновлений.
				|%1'");
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(), "Ошибка",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ПодробноеПредставлениеОшибки(ИнфоОбОшибке)),, Истина);
				
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, КраткоеПредставлениеОшибки(ИнфоОбОшибке));
			Если ВыдаватьСообщения Тогда
				ПоказатьПредупреждение(, СообщениеОбОшибке);
			КонецЕсли;
			Возврат СообщениеОбОшибке;
		КонецПопытки;
	КонецЕсли;
	
	// Получаем сам файл из Интернета.
	URL = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3",
		НастройкиОбновления.АдресСервераДляПроверкиНаличияОбновления,
		ПараметрыОбновления.АдресРесурсовДляПроверкиНаличияОбновления,
		ПараметрыОбновления.ИмяФайлаПроверкиНаличияОбновления);
	ПараметрыПолучения = Новый Структура("ПутьДляСохранения", ?(ПустаяСтрока(ВременныйФайл), Неопределено, ВременныйФайл));
	Результат = ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(URL, ПараметрыПолучения);
	
	Если Результат.Статус <> Истина Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось проверить наличие обновлений.
				|%1'"), Результат.СообщениеОбОшибке);
		Если ВыдаватьСообщения Тогда
			ПоказатьПредупреждение(, СообщениеОбОшибке);
		КонецЕсли;
		Возврат СообщениеОбОшибке;
	КонецЕсли;
	
	Возврат ПараметрыДистрибутива(ВременныйФайл);
	
КонецФункции

// Чтение данных по обновлению из файла ИмяФайлаПроверкиНаличияОбновления (UpdInfo.txt).
// Вычисляются: 
//		номер версии обновления на сервере, 
//		номера версий, с которых производится обновление (разделяются символом ";")
//		дата публикации обновления.
//
// Параметры:
//  ИмяФайла - полное имя файла UpdInfo.txt.
// 
// Возвращаемое значение:
//  Структура: 
//		Version - версия обновления.
//		FromVersions - с каких версий обновляет.
//		UpdateDate - дата опубликования.
//  Строка - описание ошибки, если файл не найден или не содержит нужных значений.
//
Функция ПараметрыДистрибутива(Знач ИмяФайла) Экспорт
	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда
		Возврат НСтр("ru = 'Файл описания обновлений не получен'");
	КонецЕсли;	
	ТекстовыйДокумент = Новый ТекстовыйДокумент(); 
	ТекстовыйДокумент.Прочитать(Файл.ПолноеИмя);
	ПараметрыКомплекта = Новый Структура();
	Для НомерСтроки = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		ВременнаяСтрока = НРег(СокрЛП(ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки)));
		Если ПустаяСтрока(ВременнаяСтрока) Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрНайти(ВременнаяСтрока, "fromversions=") > 0 Тогда
			ВременнаяСтрока = СокрЛП(Сред(ВременнаяСтрока, СтрНайти(ВременнаяСтрока, "fromversions=") + СтрДлина("fromversions=")));
			ВременнаяСтрока = ?(Лев(ВременнаяСтрока,1)=";","",";") + ВременнаяСтрока + ?(Прав(ВременнаяСтрока,1)=";","",";");
			ПараметрыКомплекта.Вставить("FromVersions", ВременнаяСтрока);
		ИначеЕсли СтрНайти(ВременнаяСтрока,"version=")>0 Тогда
			ПараметрыКомплекта.Вставить("Version",Сред(ВременнаяСтрока, СтрНайти(ВременнаяСтрока, "version=") + СтрДлина("version=")));
		ИначеЕсли СтрНайти(ВременнаяСтрока,"updatedate=")>0 Тогда
			// формат даты = Дата, 
			ВременнаяСтрока = Сред(ВременнаяСтрока, СтрНайти(ВременнаяСтрока,"updatedate=") + СтрДлина("updatedate="));
			Если СтрДлина(ВременнаяСтрока)>8 Тогда
				Если СтрНайти(ВременнаяСтрока,".")=5 Тогда
					// дата в формате  ГГГГ.ММ.ДД
					ВременнаяСтрока = СтрЗаменить(ВременнаяСтрока,".","");
				ИначеЕсли СтрНайти(ВременнаяСтрока,".")=3 Тогда
					// дата в формате ДД.ММ.ГГГГ
					ВременнаяСтрока = Прав(ВременнаяСтрока,4)+Сред(ВременнаяСтрока,4,2)+Лев(ВременнаяСтрока,2);
				Иначе 
					// дата в формате ГГГГММДД
				КонецЕсли;
			КонецЕсли;
			ПараметрыКомплекта.Вставить("UpdateDate",Дата(ВременнаяСтрока));
		Иначе
			Возврат НСтр("ru = 'Неверный формат сведений о наличии обновлений'");
		КонецЕсли;
	КонецЦикла;
	Если ПараметрыКомплекта.Количество() <> 3 Тогда 
		Возврат НСтр("ru = 'Неверный формат сведений о наличии обновлений'");
	КонецЕсли;
	Возврат ПараметрыКомплекта;
КонецФункции

// Открывает форму установки обновлений.
//
Процедура ПоказатьПоискИУстановкуОбновлений(ПараметрыФормы = Неопределено) Экспорт
	
	ОткрытьФорму("Обработка.ПоискИУстановкаОбновлений.Форма.Форма", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обновляет конфигурацию базы данных.
//
// Параметры:
//  СтандартнаяОбработка - Булево - если в процедуре установить данному параметру значение Ложь, то инструкция по
//                                  "ручному" обновлению показана не будет.
Процедура УстановитьОбновлениеКонфигурации(ЗавершениеРаботыСистемы = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура("ЗавершениеРаботыСистемы, ПолученоОбновлениеКонфигурации",
		ЗавершениеРаботыСистемы, ЗавершениеРаботыСистемы);
	ПоказатьПоискИУстановкуОбновлений(ПараметрыФормы);
	
КонецПроцедуры

// Записывает в каталог скрипта файл-маркер ошибки.
//
Процедура ЗаписатьФайлПротоколаОшибки(КаталогСкрипта) Экспорт
	
	ФайлРегистрации = Новый ЗаписьТекста(КаталогСкрипта + "error.txt");
	ФайлРегистрации.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает общие параметры обновления.
//
Функция ПолучитьПараметрыОбновления(ПроверитьОбновленияДляНовойРедакции = Ложь) Экспорт
	#Если НЕ ВебКлиент Тогда
		
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДатаВремяОбновленияУстановлена"	, Ложь);
	
	// Интернет
	СтруктураПараметров.Вставить("ИмяZipФайлаСпискаШаблонов" , "v8upd11.zip");
	СтруктураПараметров.Вставить("ИмяФайлаСпискаШаблонов"    , "v8cscdsc.xml");
	СтруктураПараметров.Вставить("ИмяФайлаОписанияОбновления", "news.htm");
	СтруктураПараметров.Вставить("ИмяФайлаПорядкаОбновления" , "update.htm");

	// Имена служебных файлов
	СтруктураПараметров.Вставить("ИмяИсполняемогоФайлаКонфигуратора", СтандартныеПодсистемыКлиент.ИмяИсполняемогоФайлаПриложения(Истина));
	СтруктураПараметров.Вставить("ИмяИсполняемогоФайлаКлиента"      , СтандартныеПодсистемыКлиент.ИмяИсполняемогоФайлаПриложения());
	СтруктураПараметров.Вставить("СобытиеЖурналаРегистрации"        , СобытиеЖурналаРегистрации());
	
	// Определение каталога временных файлов.
	СтруктураПараметров.Вставить("КаталогФайловОбновления"			, КаталогLocalAppData() + "1C\1Cv8Update\"); 
	КаталогВременныхФайловОбновления = КаталогВременныхФайлов() + "1Cv8Update." + Формат(ОбщегоНазначенияКлиент.ДатаСеанса(), "ДФ=ггММддЧЧммсс") + "\";
	СтруктураПараметров.Вставить("КаталогВременныхФайловОбновления"	, КаталогВременныхФайловОбновления);
	
	СтруктураПараметров.Вставить("АдресРесурсовДляПроверкиНаличияОбновления"						, АдресРесурсовДляПроверкиНаличияОбновления(ПроверитьОбновленияДляНовойРедакции));
	СтруктураПараметров.Вставить("АдресСтраницыИнформацииОПолученииДоступаКПользовательскомуСайту"	, АдресСтраницыИнформацииОПолученииДоступаКПользовательскомуСайту());
	СтруктураПараметров.Вставить("АдресКаталогаШаблоновНаСервереОбновлений"							, АдресКаталогаШаблоновНаСервереОбновлений());
	СтруктураПараметров.Вставить("АдресСервераОбновлений"											, АдресСервераОбновлений());
	СтруктураПараметров.Вставить("АдресСервисаПроверкиЛегальности"									, АдресСервисаПроверкиЛегальности());
	СтруктураПараметров.Вставить("ИмяФайлаПроверкиНаличияОбновления"								, "UpdInfo.txt");
	
	Возврат СтруктураПараметров;
	#КонецЕсли
КонецФункции

// Возвращает параметры найденного (доступного) обновления конфигурации.
Функция ПолучитьДоступноеОбновлениеКонфигурации() Экспорт
	ИмяПараметра = "СтандартныеПодсистемы.ДоступноеОбновлениеКонфигурации";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Новый Структура);
		ПараметрыПриложения[ИмяПараметра].Вставить("ИсточникОбновления", -1);
		ПараметрыПриложения[ИмяПараметра].Вставить("НуженФайлОбновления", Ложь);
		ПараметрыПриложения[ИмяПараметра].Вставить("ФлагАвтоПереходаНаСтраницуСОбновлением", Ложь);
		ПараметрыПриложения[ИмяПараметра].Вставить("ПараметрыФайлаПроверкиОбновления", Неопределено);
		ПараметрыПриложения[ИмяПараметра].Вставить("ИмяСтраницы", "");
		ПараметрыПриложения[ИмяПараметра].Вставить("ВремяПолученияОбновления", ОбщегоНазначенияКлиент.ДатаСеанса());
		ПараметрыПриложения[ИмяПараметра].Вставить("ПоследняяВерсияКонфигурации", "");
	КонецЕсли;
	
	Возврат ПараметрыПриложения[ИмяПараметра];
КонецФункции

// Получить адрес страницы на веб-сервере поставщика конфигурации, на которой находится
// информация о доступных обновлениях.
//
// Возвращаемое значение:
//   Строка   - адрес веб-страницы.
//
Функция АдресРесурсовДляПроверкиНаличияОбновления(ПроверитьОбновленияДляНовойРедакции = Ложь)
	
	НастройкиОбновления = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления;
	КороткоеИмяКонфигурации = НастройкиОбновления.КороткоеИмяКонфигурации;
	КороткоеИмяКонфигурации = СтрЗаменить(КороткоеИмяКонфигурации, "\", "/");
	Если ПроверитьОбновленияДляНовойРедакции Тогда
		КороткоеИмяКонфигурации = СтрЗаменить(КороткоеИмяКонфигурации, ТекущаяРедакцияПлатформы(), СледующаяРедакцияПлатформы());
	КонецЕсли;
	
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2/", ОбновлениеКонфигурацииКлиентСервер.ДобавитьКонечныйРазделительПути(
		НастройкиОбновления.АдресРесурсаДляПроверкиНаличияОбновления), КороткоеИмяКонфигурации);
		
	Возврат Результат;
	
КонецФункции

Функция ТекущаяРедакцияПлатформы()
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	МассивТекущейВерсии = СтрРазделить(СистемнаяИнформация.ВерсияПриложения, ".");
	ТекущаяРедакция = МассивТекущейВерсии[0] + МассивТекущейВерсии[1];
	
	Возврат ТекущаяРедакция;
	
КонецФункции

Функция СледующаяРедакцияПлатформы() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	МассивТекущейВерсии = СтрРазделить(СистемнаяИнформация.ВерсияПриложения, ".");
	СледующаяРедакция = МассивТекущейВерсии[0] + Строка(Число(МассивТекущейВерсии[1]) +1);
	
	Возврат СледующаяРедакция;
	
КонецФункции

// Получить адрес веб-страницы с информацией о том, как получить доступ к 
// пользовательскому разделу на сайте поставщика конфигурации.
//
// Возвращаемое значение:
//   Строка   - адрес веб-страницы.
Функция АдресСтраницыИнформацииОПолученииДоступаКПользовательскомуСайту()
	
	АдресСтраницы = "http://users.v8.1c.ru/Rules.aspx"; // Значение по умолчанию
	ОбновлениеКонфигурацииКлиентПереопределяемый.ПриОпределенииАдресаСтраницыПолученияДоступаКСайтуОбновлений(АдресСтраницы);
	
	Возврат АдресСтраницы;
	
КонецФункции

// Получить адрес каталога файлов обновления на сервере обновлений.
//
// Возвращаемое значение:
//   Строка   - адрес каталога на веб-сервере.
//
Функция АдресКаталогаШаблоновНаСервереОбновлений()
	
	СерверОбновлений = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.КаталогОбновлений;
	
	Если СтрНайти(СерверОбновлений, "ftp://") <> 0 Тогда
		Протокол = "ftp://";
	Иначе
		Протокол = "http://";
	КонецЕсли;
	
	СерверОбновлений = СтрЗаменить(СерверОбновлений, Протокол, "");
	КаталогШаблоновНаСервере = "";
	Позиция = СтрНайти(СерверОбновлений, "/");
	Если Позиция > 0 Тогда
		КаталогШаблоновНаСервере = Сред(СерверОбновлений, Позиция, СтрДлина(СерверОбновлений));
	КонецЕсли;
	Возврат КаталогШаблоновНаСервере;
	
КонецФункции

// Получить адрес сервиса проверки легальности получения обновления.
//
// Возвращаемое значение:
//   Строка   - адрес сервиса.
//
Функция АдресСервисаПроверкиЛегальности()
	
	Возврат СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.АдресСервисаПроверкиЛегальности;
	
КонецФункции

// Получить адрес сервера обновлений.
//
// Возвращаемое значение:
//   Строка   - адрес веб-сервера.
//
Функция АдресСервераОбновлений()
	
	СерверОбновлений = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.КаталогОбновлений;
	
	Если СтрНайти(СерверОбновлений, "ftp://") <> 0 Тогда
		Протокол = "ftp://";
	Иначе
		Протокол = "http://";
	КонецЕсли;
	
	СерверОбновлений = СтрЗаменить(СерверОбновлений, Протокол, "");
	Позиция = СтрНайти(СерверОбновлений, "/");
	Если Позиция > 0 Тогда
		СерверОбновлений = Сред(СерверОбновлений, 1, Позиция - 1);
	КонецЕсли;
	
	Возврат Протокол + СерверОбновлений;
	
КонецФункции

// Функция, выполняет включение и отключение проверки наличия обновления по расписанию.
// 
// Параметры:
// ФлагПодключитьИЛИОтключить: Булево, если ИСТИНА - проводится включение проверки, иначе отключение.
Функция ПодключитьОтключитьПроверкуПоРасписанию(ФлагПодключитьИЛИОтключить = Истина) Экспорт
	Если ФлагПодключитьИЛИОтключить Тогда
		ПодключитьОбработчикОжидания("ОбработатьПроверкуОбновленияПоРасписанию", 60 * 5); // каждые 5 минут
	Иначе
		ОтключитьОбработчикОжидания("ОбработатьПроверкуОбновленияПоРасписанию");
	КонецЕсли;
КонецФункции

// Процедура, выполняющая проверку наличия обновления для конфигурации через сеть Интернет.
//
// Параметры: 
//	ВыдаватьСообщения: Булево, признак вывода пользователю сообщений об ошибках.
Процедура ПроверитьНаличиеОбновленияЧерезИнтернет(ВыдаватьСообщения = Ложь, ДоступноОбновлениеДляНовойРедакции = Ложь) Экспорт
	
	Состояние(НСтр("ru = 'Проверка наличия обновления в Интернете'"));
	Параметры = ПолучитьДоступноеОбновлениеКонфигурации(); 
	Если Параметры.ИсточникОбновления <> -1 Тогда
		ВремяПолученияОбновления = Параметры.ВремяПолученияОбновления;
		Если ВремяПолученияОбновления <> Неопределено И ОбщегоНазначенияКлиент.ДатаСеанса() - ВремяПолученияОбновления < 30 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Параметры.ПараметрыФайлаПроверкиОбновления = ПолучитьФайлПроверкиНаличияОбновлений(ВыдаватьСообщения);
	Если ТипЗнч(Параметры.ПараметрыФайлаПроверкиОбновления) = Тип("Строка") Тогда
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(), "Предупреждение",
			НСтр("ru = 'Невозможно подключиться к сети Интернет для проверки обновлений.'"));
		Параметры.ИмяСтраницы = "ПодключениеКИнтернет";
		Возврат;
	КонецЕсли;
	
	Параметры.ПоследняяВерсияКонфигурации = Параметры.ПараметрыФайлаПроверкиОбновления.Version;
	ВерсияКонфигурации = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ВерсияКонфигурации;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияКонфигурации, Параметры.ПоследняяВерсияКонфигурации) >= 0 Тогда
		
		ОбновленияНеОбнаружено = Истина;
		
		Если ПроверятьОбновлениеДляСледующейРедакцииПлатформы() Тогда
			
			Параметры.ПараметрыФайлаПроверкиОбновления = ПолучитьФайлПроверкиНаличияОбновлений(Ложь, Истина);
			
			Если ТипЗнч(Параметры.ПараметрыФайлаПроверкиОбновления) <> Тип("Строка") Тогда
				
				Параметры.ПоследняяВерсияКонфигурации = Параметры.ПараметрыФайлаПроверкиОбновления.Version;
				ВерсияКонфигурации = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ВерсияКонфигурации;
				
				Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияКонфигурации, Параметры.ПоследняяВерсияКонфигурации) < 0 Тогда
					ОбновленияНеОбнаружено = Ложь;
					ДоступноОбновлениеДляНовойРедакции = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбновленияНеОбнаружено Тогда
			
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(), "Информация",
				НСтр("ru = 'Обновление не требуется: последняя версия конфигурации уже установлена.'"));
			
			Параметры.ИмяСтраницы = "ОбновленияНеОбнаружено";
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Обнаружена более новая версия конфигурации в Интернете: %1.'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Параметры.ПоследняяВерсияКонфигурации);
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(), "Информация", ТекстСообщения);
	
	Параметры.ИсточникОбновления = 0;
	Параметры.ИмяСтраницы = "ДоступноеОбновление";
	Параметры.ВремяПолученияОбновления = ОбщегоНазначенияКлиент.ДатаСеанса();
	
КонецПроцедуры

// Процедура проверяет возможность и при необходимости выполняет проверку наличия обновления конфигурации через сеть
// Интернет.
Процедура ПроверитьОбновлениеПоРасписанию() Экспорт
	
	ИмяПараметра = "СтандартныеПодсистемы.НастройкиОбновленияКонфигурации";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Неопределено);
	КонецЕсли;
	ПараметрыПриложения[ИмяПараметра] = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.НастройкиОбновленияКонфигурации;
	НастройкиОбновленияКонфигурации = ПараметрыПриложения[ИмяПараметра];
	
	ОбновлениеКонфигурацииКлиентСервер.ПолучитьОбновленныеНастройкиОбновленияКонфигурации(ПараметрыПриложения[ИмяПараметра]);
	РасписаниеПроверкиНаличияОбновления = НастройкиОбновленияКонфигурации.РасписаниеПроверкиНаличияОбновления;
	Если НастройкиОбновленияКонфигурации.ПроверятьНаличиеОбновленияПриЗапуске <> 1 
		ИЛИ РасписаниеПроверкиНаличияОбновления = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
			
	Расписание = ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(РасписаниеПроверкиНаличияОбновления);
	ДатаПроверки = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если НЕ Расписание.ТребуетсяВыполнение(ДатаПроверки, НастройкиОбновленияКонфигурации.ВремяПоследнейПроверкиОбновления) Тогда
		Возврат;	
	КонецЕсли;	
		
	НастройкиОбновленияКонфигурации.ВремяПоследнейПроверкиОбновления = ДатаПроверки;
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(),, 
		НСтр("ru = 'Проверка наличия обновления в сети Интернет по расписанию.'"));
		
	НаименованиеСтраницыДоступногоОбновления = "ДоступноеОбновление";
	ПроверитьНаличиеОбновленияЧерезИнтернет();
	Параметры = ПолучитьДоступноеОбновлениеКонфигурации();
	Если Параметры.ИсточникОбновления <> -1 И Параметры.ИмяСтраницы = НаименованиеСтраницыДоступногоОбновления Тогда
			
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(),,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Обнаружена новая версия конфигурации: %1'"), Параметры.ПараметрыФайлаПроверкиОбновления.Version));
		
		НастройкиОбновленияКонфигурации.ИсточникОбновления = 0;
		НастройкиОбновленияКонфигурации.РасписаниеПроверкиНаличияОбновления = РасписаниеПроверкиНаличияОбновления;
		ОбновлениеКонфигурацииВызовСервера.ЗаписатьСтруктуруНастроекПомощника(НастройкиОбновленияКонфигурации, ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"]);
		
		Параметры.ИсточникОбновления = НастройкиОбновленияКонфигурации.ИсточникОбновления;
		Параметры.НуженФайлОбновления = НастройкиОбновленияКонфигурации.НуженФайлОбновления;
		Параметры.ФлагАвтоПереходаНаСтраницуСОбновлением = Истина;
		ПоказатьОповещениеПользователя(НСтр("ru = 'Доступно обновление конфигурации'"),
			"e1cib/app/Обработка.ПоискИУстановкаОбновлений",
			НСтр("ru = 'Версия:'") + " " + Параметры.ПараметрыФайлаПроверкиОбновления.Version, 
			БиблиотекаКартинок.Информация32);
	Иначе
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(),, 
			НСтр("ru = 'Доступных обновлений не обнаружено.'"));
	КонецЕсли;
	ОбновлениеКонфигурацииВызовСервера.ЗаписатьСтруктуруНастроекПомощника(НастройкиОбновленияКонфигурации, ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"]);
	
КонецПроцедуры

Функция ПроверятьОбновлениеДляСледующейРедакцииПлатформы()
	
	ПроверятьОбновление = Ложь;
	ОбновлениеКонфигурацииКлиентПереопределяемый.ПриПроверкеОбновленияДляСледующейРедакцииПлатформы(ПроверятьОбновление);
	
	Возврат ПроверятьОбновление;
	
КонецФункции

// Функция, возвращает путь к каталогу временных файлов для проведения обновления.
Функция КаталогLocalAppData()
	App			= Новый COMОбъект("Shell.Application");
	Folder		= App.Namespace(28);
	Результат	= Folder.Self.Path;
	Возврат ОбновлениеКонфигурацииКлиентСервер.ДобавитьКонечныйРазделительПути(Результат);
КонецФункции

// Функция, открывает интерактивно адрес в сети Интернет.
//
// Параметры:
//	АдресСтраницы - строка, путь к странице в сети Интернет, которую надо открыть.
//	Заголовок - строка, заголовок окна "браузера".
//
Процедура ОткрытьВебСтраницу(Знач АдресСтраницы, Знач Заголовок = "") Экспорт
	
	ОткрытьФорму("Обработка.ПоискИУстановкаОбновлений.Форма.Обозреватель", 
		Новый Структура("АдресСтраницы,Заголовок", АдресСтраницы, Заголовок));

КонецПроцедуры

// Возвращает имя события для записи журнала регистрации.
Функция СобытиеЖурналаРегистрации() Экспорт
	Возврат НСтр("ru = 'Обновление конфигурации'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы.

// Проверяет легальность получения обновления. При отсутствии подсистемы
// проверки легальности возвращает Истина.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - содержит обработчик,
//               вызываемый после подтверждения легальности получения обновления.
//
Функция ПроверитьЛегальностьПолученияОбновления(Оповещение) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПроверкаЛегальностиПолученияОбновления") Тогда
		МодульПроверкаЛегальностиПолученияОбновленияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроверкаЛегальностиПолученияОбновленияКлиент");
		МодульПроверкаЛегальностиПолученияОбновленияКлиент.ПоказатьПроверкуЛегальностиПолученияОбновления(Оповещение);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП.

// Доопределяет список предупреждений пользователю перед завершением работы системы.
//
// Параметры:
//  Предупреждения - Массив - в массив можно добавить элементы типа Структура,
//                            свойства которой см. в СтандартныеПодсистемыКлиент.ПредупреждениеПриЗавершениеРаботы.
//
Процедура ПриПолученииСпискаПредупрежденийЗавершенияРаботы(Предупреждения) Экспорт
	
	// Предупреждение: при выставлении своего флажка подсистема "Обновление конфигурации" очищает список
	// всех ранее добавленных предупреждений.
	Если ПараметрыПриложения["СтандартныеПодсистемы.ПредлагатьОбновлениеИнформационнойБазыПриЗавершенииСеанса"] = Истина Тогда
		ПараметрыПредупреждения = СтандартныеПодсистемыКлиент.ПредупреждениеПриЗавершениеРаботы();
		ПараметрыПредупреждения.ТекстФлажка  = НСтр("ru = 'Установить обновление конфигурации'");
		ПараметрыПредупреждения.Приоритет = 50;
		ПараметрыПредупреждения.ВывестиОдноПредупреждение = Истина;
		
		ДействиеПриУстановленномФлажке = ПараметрыПредупреждения.ДействиеПриУстановленномФлажке;
		ДействиеПриУстановленномФлажке.Форма = ОбновлениеКонфигурацииКлиентСервер.ИмяФормыОбработкиОбновлениеКонфигурации();
		ДействиеПриУстановленномФлажке.ПараметрыФормы = Новый Структура("ЗавершениеРаботыСистемы, ВыполнитьОбновление", Истина, Истина);
		
		Предупреждения.Добавить(ПараметрыПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при интерактивном начале работы пользователя с областью данных.
// Соответствует событию ПриНачалеРаботыСистемы модулей приложения.
//
Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт
	
	ПроверитьОбновлениеКонфигурации();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры для проверки легальности получения обновления.

#Если Не ВебКлиент Тогда

// Возвращает структуру ответа веб-сервера.
//
Функция ПроверитьЛегальностьСкачиванияОбновления(ПараметрыЗапроса) Экспорт
	
	ПроверятьЛегальность = Истина;
	ОбновлениеКонфигурацииКлиентПереопределяемый.ПриПроверкеЛегальностиСкачиванияОбновлений(ПроверятьЛегальность);
	
	Если Не ПроверятьЛегальность Тогда
		Возврат Новый Структура("ЗначениеРезультата, ТекстОшибки", Истина, "");
	КонецЕсли;
	
	Попытка
	// Создание описания сервиса
		ОписаниеСервиса = ОписаниеСервисаПроверкиЛегальности();
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка создания описания веб-сервиса проверки легальности получения обновления.'");
		Возврат СтруктураОтветаВебСервера(ТекстОшибки, Истина,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	// Определение доступности веб-сервиса.
	Попытка
		
		ОтветСервера = СервисДоступен(ОписаниеСервиса);
		
		Если НРег(СокрЛП(ОтветСервера)) <> "ready" Тогда
			
			ТекстОшибки = НСтр("ru = 'Сервис проверки легальности получения обновлений временно недоступен.
				|Повторите попытку позднее'");
			Возврат СтруктураОтветаВебСервера(ТекстОшибки, Истина, ОтветСервера);
			
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось подключиться к сервису проверки легальности получения обновлений.
			|Проверьте параметры подключения к Интернету'");
		Возврат СтруктураОтветаВебСервера(ТекстОшибки, Истина,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	// Получение ответа с веб-сервиса.
	Возврат ПроверитьЛегальностьПолученияОбновлений(ПараметрыЗапроса, ОписаниеСервиса);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с веб-сервисом проверки легальности на "высоком уровне".

// Добавляет из структуры параметры в запрос.
//
// Параметры:
//	ОписаниеСервисаПроверкиЛегальности (Структура) - описание соединения с веб-сервисом проверки легальности.
//	ПараметрыЗапроса - Строка -  уже сформированные параметры.
//	СписокПараметров - ОбъектXDTO - список значений параметров.
//
Процедура ДобавитьПараметрыКЗапросу(ОписаниеСервисаПроверкиЛегальности, ПараметрыЗапроса, СписокПараметров)
	
	ТипПараметр = ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.Тип(ОписаниеСервисаПроверкиЛегальности.URIСервиса, "Parameter");
	КоличествоПараметров = 0;
	
	Для Каждого ПараметрПередачи Из СписокПараметров Цикл 
		
		// Определение объекта параметра (Объект XDTO).
		Параметр = ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.Создать(ТипПараметр);
		
		Параметр.name  = СокрЛП(ПараметрПередачи.Ключ);
		Параметр.value = СокрЛП(ПараметрПередачи.Значение);
		Параметр.index = КоличествоПараметров;
		
		ПараметрыЗапроса.parameter.Добавить(Параметр);
		
		КоличествоПараметров = КоличествоПараметров + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет легальность скачивания обновления.
//
// Параметры:
//	ДополнительныеПараметры - Структура - дополнительные параметры для передачи веб-сервису;
//	ОписаниеСервисаПроверкиЛегальности (Структура) - описание соединения с веб-сервисом проверки легальности.
//
// Возвращаемое значение:
//	Структура - структурированный ответ веб-сервера.
//
Функция ПроверитьЛегальностьПолученияОбновлений(ДополнительныеПараметры, ОписаниеСервисаПроверкиЛегальности)
	
	Попытка
		
		ТипОтвета  = ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.Тип(ОписаниеСервисаПроверкиЛегальности.URIСервиса, "ProcessResponseType");
		ТипЗапроса = ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.Тип(ОписаниеСервисаПроверкиЛегальности.URIСервиса, "Parameters");
		
		ПараметрыЗапроса = ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.Создать(ТипЗапроса);
		
		// Если имеются передаваемые параметры, то добавляем их.
		Если ДополнительныеПараметры <> Неопределено Тогда
			ДобавитьПараметрыКЗапросу(ОписаниеСервисаПроверкиЛегальности, ПараметрыЗапроса, ДополнительныеПараметры);
		КонецЕсли;
		
		// Выполнение метода "process" WEB-Сервиса.
		ОтветСервера = ОбновлениеПолученоЛегально(ПараметрыЗапроса, ОписаниеСервисаПроверкиЛегальности);
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Ошибка выполнения проверки легальности получения обновления.
			|Обратитесь к администратору'");
		Возврат СтруктураОтветаВебСервера(ТекстОшибки, Истина,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	СтруктураКоманды = ОтветСервера.command[0];
	
	Если СтруктураКоманды.name = "store.put" Тогда
		
		ПараметрыОтвета = СтруктураКоманды.parameters.parameter;
		
		Результат = Новый Структура;
		Для Каждого Параметр Из ПараметрыОтвета Цикл
			
			Результат.Вставить(Параметр.name, Параметр.value);
			
		КонецЦикла;
		
		Результат = СтруктураОтветаВебСервера(Результат.resultTextError, Ложь,
			Результат.resultCodeError, Результат.resultAvtorisation);
		
	Иначе
		
		Результат = СтруктураОтветаВебСервера(НСтр("ru = 'Неожиданный ответ сервиса проверки легальности получения обновлений'"), Истина);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает ответ сервера в виде структуры.
//
Функция СтруктураОтветаВебСервера(ТекстОшибки, ЗаписьВЖурналРегистрации,
	КодОшибки = 0, ЗначениеРезультата = Ложь, ТекстСообщения = "")
	
	СтруктураОтвета = Новый Структура;
	
	СтруктураОтвета.Вставить("ЗначениеРезультата", Булево(ЗначениеРезультата));
	СтруктураОтвета.Вставить("ТекстОшибки", Строка(ТекстОшибки));
	
	Если ЗаписьВЖурналРегистрации Тогда
		
		Если ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = НСтр("ru = '%ТекстОшибки. Код ошибки: %КодОшибки.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки", ТекстОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодОшибки", КодОшибки);
		КонецЕсли;
		
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(), "Ошибка", ТекстСообщения);
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с веб-сервисом проверки легальности на "низком уровне".

// Формирует описание веб-сервиса из WSDL-документа для дальнейшей работы
// с веб-сервисом проверки легальности.
//
// Возвращаемое значение:
//	Структура со свойствами:
//		АдресWSDL (Строка) - URL WSDL-документа;
//			выполняется с использованием временных файлов;
//		ФабрикаXDTO (ФабрикаXDTO) - Фабрика XDTO веб-сервиса;
//		URIСервиса (Строка) - URI веб-сервиса проверки легальности;
//		СоединениеПорта (HTTPСоединение) - соединение с портом сервиса
//			для выполнения вызовов методов веб-сервиса;
//		ПутьПорта (Строка) - путь порта на сервере;
//	
Функция ОписаниеСервисаПроверкиЛегальности()
	
	АдресWSDL = АдресСервисаПроверкиЛегальности();
	ПараметрыСоединения = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресWSDL);
	
	Результат = Новый Структура("АдресWSDL", АдресWSDL);
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(ПараметрыСоединения.Схема);
	
	ТаймаутСети = 10;
	
	HTTP = Новый HTTPСоединение(ПараметрыСоединения.Хост,
		ПараметрыСоединения.Порт,
		ПараметрыСоединения.Логин,
		ПараметрыСоединения.Пароль,
		ИнтернетПрокси,
		ТаймаутСети,
		?(ПараметрыСоединения.Схема = "https",
			Новый ЗащищенноеСоединениеOpenSSL(),
			Неопределено));
	
	Попытка
		
		HTTPЗапрос = Новый HTTPЗапрос(ПараметрыСоединения.ПутьНаСервере);
		Ответ = HTTP.Получить(HTTPЗапрос);
		ТекстWSDL = Ответ.ПолучитьТелоКакСтроку();
		
	Исключение
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса.
			|Не удалось получить WSDL-описание с сервера проверки легальности скачивания обновления (%1): %2.'"),
			АдресWSDL, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстWSDL);
	
	ПостроительDOM = Новый ПостроительDOM;
	Попытка
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	Исключение
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка чтения WSDL-описания веб-сервиса проверки легальности скачивания обновления: %2.'"),
			АдресWSDL, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	// Создание фабрики XDTO веб-сервиса проверки легальности.
	
	УзлыСхемы = ДокументDOM.ПолучитьЭлементыПоИмени("wsdl:types");
	Если УзлыСхемы.Количество() = 0 Тогда
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка чтения WSDL-описания веб-сервиса проверки легальности скачивания обновления:
			|Отсутствует элемент описания типов данных (<wsdl:types ...>).'"), АдресWSDL);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	УзелОписанияСхемы = УзлыСхемы[0].ПервыйДочерний;
	Если УзелОписанияСхемы = Неопределено Тогда
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка чтения WSDL-описания веб-сервиса проверки легальности скачивания обновления:
			|Отсутствует элемент описания типов данных (<xs:schema ...>)'"), АдресWSDL);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	ПостроительСхемы = Новый ПостроительСхемXML;
	
	Попытка
		СхемаДанныхСервиса = ПостроительСхемы.СоздатьСхемуXML(УзелОписанияСхемы);
	Исключение
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка при создании схемы данных из WSDL-описания веб-сервиса проверки легальности скачивания обновления:
			|%2'"), АдресWSDL, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	НаборСхем = Новый НаборСхемXML;
	НаборСхем.Добавить(СхемаДанныхСервиса);
	
	Попытка
		ФабрикаСервиса = Новый ФабрикаXDTO(НаборСхем);
	Исключение
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка при создании фабрики XDTO из WSDL-описания веб-сервиса проверки легальности скачивания обновления: %2'"),
			АдресWSDL, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	// Определение параметров подключения к порту сервиса.
	
	КорневойЭлемент = ДокументDOM.ПервыйДочерний;
	
	Результат.Вставить("ФабрикаXDTO", ФабрикаСервиса);
	
	URIСервиса = ЗначениеАтрибутаУзлаDOM(КорневойЭлемент, "targetNamespace");
	Если НЕ ЗначениеЗаполнено(URIСервиса) Тогда
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка чтения WSDL-описания веб-сервиса проверки легальности скачивания обновления:
			|Отсутствует URI пространства имен в WSDL-описании.'"), АдресWSDL);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Результат.Вставить("URIСервиса" , URIСервиса);
	
	// Определение адреса порта веб-сервиса.
	УзлыСервисов = КорневойЭлемент.ПолучитьЭлементыПоИмени("wsdl:service");
	Если УзлыСервисов.Количество() = 0 Тогда
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка чтения WSDL-описания веб-сервиса проверки легальности скачивания обновления:
			|Отсутствует описание веб-сервисов в WSDL-описании (<wsdl:service ...>).'"), АдресWSDL);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	УзелСервиса = УзлыСервисов[0];
	
	ИмяСервиса = ЗначениеАтрибутаУзлаDOM(УзелСервиса, "name");
	
	УзлыПортов = УзелСервиса.ПолучитьЭлементыПоИмени("wsdl:port");
	
	Если УзлыПортов.Количество() = 0 Тогда
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка чтения WSDL-описания веб-сервиса проверки легальности скачивания обновления:
			|Отсутствует описание портов в WSDL-описании (<wsdl:port ...>).'"), АдресWSDL);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	УзелПорта = УзлыПортов[0];
	ИмяПорта  = ЗначениеАтрибутаУзлаDOM(УзелПорта, "name");
	
	Если НЕ ЗначениеЗаполнено(ИмяПорта) Тогда
		
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка чтения WSDL-описания веб-сервиса интернет-поддержки пользователей:
			|Не удалось определить имя порта сервиса (%2)."), АдресWSDL, ИмяСервиса);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	АдресПорта = Неопределено;
	УзлыАдреса = УзелПорта.ПолучитьЭлементыПоИмени("soap:address");
	Если УзлыАдреса.Количество() > 0 Тогда
		АдресПорта = ЗначениеАтрибутаУзлаDOM(УзлыАдреса[0], "location");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресПорта) Тогда
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
				|Ошибка чтения WSDL-описания веб-сервиса интернет-поддержки пользователей:
				|Не удалось определить URL заданного порта сервиса (%2).'"), АдресWSDL, ИмяПорта);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	СоединениеПорта = Новый HTTPСоединение(ПараметрыСоединения.Хост,
		ПараметрыСоединения.Порт,
		ПараметрыСоединения.Логин,
		ПараметрыСоединения.Пароль,
		ИнтернетПрокси,
		ТаймаутСети,
		?(ПараметрыСоединения.Схема = "https",
			Новый ЗащищенноеСоединениеOpenSSL(),
			Неопределено));
	
	Результат.Вставить("СоединениеПорта"       , СоединениеПорта);
	Результат.Вставить("ПутьПорта"             , ПараметрыСоединения.ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

// Прокси-функция для вызова метода isReady() веб-сервиса проверки легальности.
//
// Параметры:
//	ОписаниеСервисаПроверкиЛегальности (Структура) - описание веб-сервиса проверки легальности,
//		см. ОписаниеСервисаПроверкиЛегальности();
//
// Возвращаемое значение:
//	Строка:
//		значение, возвращенное методом isReady() веб-сервиса проверки легальности;
//
Функция СервисДоступен(ОписаниеСервисаПроверкиЛегальности)
	
	ЗаписьКонверта = НовыйЗаписьКонвертаSOAP();
	ТекстКонверта  = ТекстВКонвертеSOAP(ЗаписьКонверта);
	
	Попытка
		ТелоОтвета = ОтправитьЗапросSOAP(ТекстКонверта, ОписаниеСервисаПроверкиЛегальности);
	Исключение
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при вызове операции isReady сервиса (%1): %2'"),
			ОписаниеСервисаПроверкиЛегальности.АдресWSDL, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	ТипОбъекта = ТипЗначенияКорневогоСвойстваФабрикиСервисаЛегальности("isReadyResponse", ОписаниеСервисаПроверкиЛегальности);
	Если ТипОбъекта = Неопределено Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции isReady сервиса (%1).
			|Не удалось определить тип корневого свойства isReadyResponse.'"),
			"%1",
			ОписаниеСервисаПроверкиЛегальности.АдресWSDL);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Попытка
		Значение = ПрочитатьОтветВКонвертеSOAP(ТелоОтвета, ОписаниеСервисаПроверкиЛегальности, ТипОбъекта);
	Исключение
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции isReady сервиса (%1).'"),
			"%1",
			ОписаниеСервисаПроверкиЛегальности.АдресWSDL)
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			+ Символы.ПС + Символы.ПС
			+ НСтр("ru = 'Тело запроса:'")
			+ Символы.ПС
			+ ТекстКонверта;
		
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		
		// Возвращено описание исключения SOAP.
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при вызове операции isReady сервиса (%1)
			|Ошибка SOAP: %2'"), ОписаниеСервисаПроверкиЛегальности.АдресWSDL, ОписаниеИсключенияSOAPВСтроку(Значение));
		ВызватьИсключение ТекстИсключения;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ЗначениеXDTO") Тогда
		Возврат Значение.Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Метод веб-сервиса для проверки легальности получения обновления.
//
// Параметры:
//	ПараметрыЗапроса (ОбъектXDTO) - параметры запроса метода process();
//	ОписаниеСервисаПроверкиЛегальности (Структура) - описание веб-сервиса проверки легальности,
//		см. ОписаниеСервисаПроверкиЛегальности();
//
// Возвращаемое значение:
//	ОбъектXDTO:
//		значение, возвращенное методом process() веб-сервиса проверки легальности;
//
Функция ОбновлениеПолученоЛегально(ПараметрыЗапроса, ОписаниеСервисаПроверкиЛегальности)
	
	ЗаписьКонверта = НовыйЗаписьКонвертаSOAP();
	
	ЗаписьКонверта.ЗаписатьНачалоЭлемента("m:processRequest");
	ЗаписьКонверта.ЗаписатьАтрибут("xmlns:m", ОписаниеСервисаПроверкиЛегальности.URIСервиса);
	
	ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.ЗаписатьXML(ЗаписьКонверта,
		ПараметрыЗапроса,
		"parameters",
		,
		ФормаXML.Элемент,
		НазначениеТипаXML.Явное);
	
	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </m:processRequest>
	
	ТекстКонверта = ТекстВКонвертеSOAP(ЗаписьКонверта);
	
	Попытка
		ТелоОтвета = ОтправитьЗапросSOAP(ТекстКонверта, ОписаниеСервисаПроверкиЛегальности);
	Исключение
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при вызове операции process сервиса (%1): %2'"),
			ОписаниеСервисаПроверкиЛегальности.АдресWSDL, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	ТипОбъекта = ТипЗначенияКорневогоСвойстваФабрикиСервисаЛегальности("processResponse", ОписаниеСервисаПроверкиЛегальности);
	Если ТипОбъекта = Неопределено Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции process сервиса (%1).
			|Не удалось определить тип корневого свойства processResponse.'"),
			"%1",
			ОписаниеСервисаПроверкиЛегальности.АдресWSDL);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Попытка
		Значение = ПрочитатьОтветВКонвертеSOAP(ТелоОтвета, ОписаниеСервисаПроверкиЛегальности, ТипОбъекта);
	Исключение
		
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции process сервиса (%1).'"),
			"%1",
			ОписаниеСервисаПроверкиЛегальности.АдресWSDL)
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			+ Символы.ПС + Символы.ПС
			+ НСтр("ru = 'Тело запроса:'")
			+ Символы.ПС
			+ ТекстКонверта;
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Если ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		Возврат Значение.commands;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает строковое значение атрибута узла DOM-документа.
//
// Параметры:
//	УзелDOM (УзелDOM) - узел DOM-документа;
//	ИмяАтрибута (Строка) - полное имя атрибута;
//	ЗначениеЕслиНеНайдено (Произвольный) - значение, если атрибут не найден;
//
// Возвращаемое значение:
//	Строка:
//		Строковое значение атрибута узла;
//
Функция ЗначениеАтрибутаУзлаDOM(УзелDOM, ИмяАтрибута, ЗначениеЕслиНеНайдено = Неопределено)
	
	Атрибут = УзелDOM.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	
	Если Атрибут = Неопределено Тогда
		Возврат ЗначениеЕслиНеНайдено;
	Иначе
		Возврат Атрибут.Значение;
	КонецЕсли;
	
КонецФункции

// Определяет тип значения корневого свойства пакета фабрики XDTO
// веб-сервиса проверки легальности.
//
// Параметры:
//	ИмяСвойства (Строка) - имя корневого свойства;
//	ОписаниеСервисаПроверкиЛегальности (Структура) - описание веб-сервиса проверки легальности,
//		см. ОписаниеСервисаПроверкиЛегальности();
//
// Возвращаемое значение:
//	ТипЗначенияXDTO;
//	ТипОбъектаXDTO;
//	Неопределено - если корневое свойство не найдено;
//
Функция ТипЗначенияКорневогоСвойстваФабрикиСервисаЛегальности(ИмяСвойства, ОписаниеСервисаПроверкиЛегальности)
	
	Пакет            = ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.Пакеты.Получить(ОписаниеСервисаПроверкиЛегальности.URIСервиса);
	КорневоеСвойство = Пакет.КорневыеСвойства.Получить(ИмяСвойства);
	Если КорневоеСвойство = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат КорневоеСвойство.Тип;
	КонецЕсли;
	
КонецФункции

// Формирует объект тип ЗаписьXML с уже записанными.
// SOAP-заголовками;
//
// Возвращаемое значение:
//	ЗаписьXML:
//		объект записи XML с записанными SOAP-заголовками;
//
Функция НовыйЗаписьКонвертаSOAP()
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Envelope");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:soap", "http://schemas.xmlsoap.org/soap/envelope/");
	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Header");
	ЗаписьXML.ЗаписатьКонецЭлемента(); // </soap:Header>
	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Body");
	
	Возврат ЗаписьXML;
	
КонецФункции

// Финализирует запись конверта SOAP и возвращает текст конверта.
//
// Параметры:
//	ЗаписьКонверта (ЗаписьXML) - объект, в который выполнялась запись конверта;
//
// Возвращаемое значение:
//	Строка: текст конверта SOAP;
//
Функция ТекстВКонвертеSOAP(ЗаписьКонверта)
	
	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </soap:Body>
	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </soap:Envelope>
	
	Возврат ЗаписьКонверта.Закрыть();
	
КонецФункции

// Выполняет отправку SOAP-конверта веб-сервису и получает ответный.
// SOAP-конверт.
//
// Параметры:
//	ТекстКонверта (Строка) - текст конверта-запроса;
//	ОписаниеСервисаПроверкиЛегальности (Структура) - описание веб-сервиса проверки легальности,
//		см. ОписаниеСервисаПроверкиЛегальности();
//
// Возвращаемое значение:
//	Строка: текст SOAP-конверта-ответа;
//
Функция ОтправитьЗапросSOAP(ТекстКонверта, ОписаниеСервисаПроверкиЛегальности)
	
	HTTPЗапрос = Новый HTTPЗапрос(ОписаниеСервисаПроверкиЛегальности.ПутьПорта);
	HTTPЗапрос.Заголовки["Content-Type"] = "text/xml;charset=UTF-8";
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстКонверта);
	
	Попытка
		HTTPОтвет = ОписаниеСервисаПроверкиЛегальности.СоединениеПорта.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ТекстИсключения = НСтр("ru = 'Ошибка сетевого соединения при отправке SOAP-запроса.'")
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Возврат ТелоОтвета;
	
КонецФункции

// Выполняет чтение объекта или значения в ответном SOAP-конверте в
// соответствии с фабрикой типов XDTO веб-сервиса.
//
// Параметры:
//	ТелоОтвета (Строка) - тело в SOAP-конверта-ответа;
//	ОписаниеСервисаПроверкиЛегальности (Структура) - описание веб-сервиса проверки легальности,
//		см. ОписаниеСервисаПроверкиЛегальности();
//	ТипЗначения (ТипЗначенияXDTO, ТипОбъектаXDTO) - тип читаемого значения;
//
Функция ПрочитатьОтветВКонвертеSOAP(ТелоОтвета, ОписаниеСервисаПроверкиЛегальности, ТипЗначения)
	
	ЧтениеОтвета = Новый ЧтениеXML;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	Попытка
		
		// Переход к телу ответа
		Пока ЧтениеОтвета.Имя <> "soap:Body" Цикл
			ЧтениеОтвета.Прочитать();
		КонецЦикла;
		
		// Переход к описанию объекта ответа.
		ЧтениеОтвета.Прочитать();
		
	Исключение
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка чтения ответа SOAP:
			|%1
			|Тело ответа:
			|%2'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТелоОтвета);
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента
		И ВРег(ЧтениеОтвета.Имя) = "SOAP:FAULT" Тогда
		// Это исключение веб-сервиса
		Попытка
			ДеталиИсключения = ПрочитатьОписаниеИсключенияСервиса(ЧтениеОтвета);
		Исключение
			
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка чтения ответа SOAP:
				|%1
				|Тело ответа:
				|%2'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТелоОтвета);
			ВызватьИсключение ТекстИсключения;
			
		КонецПопытки;
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка SOAP-Сервера при обработке запроса: %1'"), ОписаниеИсключенияSOAPВСтроку(ДеталиИсключения));
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Попытка
		Значение = ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.ПрочитатьXML(ЧтениеОтвета, ТипЗначения);
	Исключение
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка чтения объекта (%1) в конверте SOAP:
			|%2
			|Тело ответа:
			|%3'"), Строка(ТипЗначения), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТелоОтвета);
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции

// Если в ответном SOAP-конверте содержится описание ошибки,
// то выполняется чтение описания ошибки.
//
// Параметры:
//	ЧтениеОтвета (ЧтениеXML) - объект, используемый для чтения
//		ответного SOAP-конверта. На момент вызова спозиционирован на описании.
//		исключения SOAP;
//
// Возвращаемое значение:
//	Структура со свойствами:
//		FaultCode (Строка), FaultString (Строка), FaultActor (Строка);
//
Функция ПрочитатьОписаниеИсключенияСервиса(ЧтениеОтвета)
	
	ОписаниеИсключения = Новый Структура("FaultCode, FaultString, FaultActor", "", "", "");
	
	Пока НЕ (ВРег(ЧтениеОтвета.Имя) = "SOAP:BODY" И ЧтениеОтвета.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
		
		Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяУзлаВРег = ВРег(ЧтениеОтвета.Имя);
			
			Если ИмяУзлаВРег = "FAULTCODE"
				ИЛИ ИмяУзлаВРег = "FAULTSTRING"
				ИЛИ ИмяУзлаВРег = "FAULTACTOR" Тогда
				
				ЧтениеОтвета.Прочитать(); // Прочитать текст узла
				
				Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.Текст Тогда
					ОписаниеИсключения[ИмяУзлаВРег] = ЧтениеОтвета.Значение;
				КонецЕсли;
				
				ЧтениеОтвета.Прочитать(); // Прочитать конец элемента
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЧтениеОтвета.Прочитать() Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОписаниеИсключения;
	
КонецФункции

// Выполняет преобразование структуры-описателя исключения SOAP
// в строку для пользовательского представления;
//
// Параметры:
//	ИсключениеSOAP (Структура) - см. ПрочитатьОписаниеИсключенияСервиса();
//
// Возвращаемое значение:
//	Строка: пользовательское представление исключения SOAP;
//
Функция ОписаниеИсключенияSOAPВСтроку(ИсключениеSOAP)
	
	Результат = "";
	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultCode) Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Код ошибки: %1'"), ИсключениеSOAP.FaultCode);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultString) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Строка ошибки: %1'"), ИсключениеSOAP.FaultString);
		Результат = Результат + Символы.ПС + ТекстОшибки;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultActor) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Источник ошибки: %1'"), ИсключениеSOAP.FaultActor);
		Результат = Результат + Символы.ПС + ТекстОшибки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли

#КонецОбласти