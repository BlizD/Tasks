////////////////////////////////////////////////////////////////////////////////
// Подсистема "Регламентные задания".
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// КЛИЕНТСКИЕ ОБРАБОТЧИКИ.
	
	КлиентскиеОбработчики[
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриНачалеРаботыСистемы"].Добавить(
			"РегламентныеЗаданияКлиент");
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"РегламентныеЗаданияСлужебный");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса\ПриЗаполненииТаблицыПараметровИБ"].Добавить(
			"РегламентныеЗаданияСлужебный");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
		СерверныеОбработчики[
			"СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий\ПриОпределенииИспользованияРегламентныхЗаданий"].Добавить(
				"РегламентныеЗаданияСлужебный");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.ОбменДанными\ПриНастройкеПодчиненногоУзлаРИБ"].Добавить(
			"РегламентныеЗаданияСлужебный");
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, включено ли регламентное задание по функциональным опциям.
//
// Параметры:
//  Задание - ОбъектМетаданных: РегламентноеЗадание - регламентное задание.
//  ЗависимостиЗаданий - ТаблицаЗначений - таблица зависимостей регламентных
//    заданий, полученная методом РегламентныеЗаданияСлужебный.РегламентныеЗаданияЗависимыеОтФункциональныхОпций.
//    Если не указано, получается автоматически.
//
// Возвращаемое значение:
//  Использование - Булево - Истина, если регламентное задание используется.
//
Функция РегламентноеЗаданиеДоступноПоФункциональнымОпциям(Задание, ЗависимостиЗаданий = Неопределено) Экспорт
	
	Если ЗависимостиЗаданий = Неопределено Тогда
		ЗависимостиЗаданий = РегламентныеЗаданияЗависимыеОтФункциональныхОпций();
	КонецЕсли;
	
	ОтключитьВПодчиненномУзлеРИБ = Ложь;
	ОтключитьВАвтономномРабочемМесте = Ложь;
	Использование                = Неопределено;
	ЭтоПодчиненныйУзелРИБ        = ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ();
	ЭтоРазделенныйРежим          = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	ЭтоАвтономноеРабочееМесто = ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто();
	
	НайденныеСтроки = ЗависимостиЗаданий.НайтиСтроки(Новый Структура("РегламентноеЗадание", Задание));
	
	Для Каждого СтрокаЗависимости Из НайденныеСтроки Цикл
		Если ЭтоРазделенныйРежим И СтрокаЗависимости.ДоступноВМоделиСервиса = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ОтключитьВПодчиненномУзлеРИБ = (СтрокаЗависимости.ДоступноВПодчиненномУзлеРИБ = Ложь) И ЭтоПодчиненныйУзелРИБ;
		ОтключитьВАвтономномРабочемМесте = (СтрокаЗависимости.ДоступноВАвтономномРабочемМесте = Ложь) И ЭтоАвтономноеРабочееМесто;
		
		Если ОтключитьВПодчиненномУзлеРИБ Или ОтключитьВАвтономномРабочемМесте Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если СтрокаЗависимости.ФункциональнаяОпция = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеФО = ПолучитьФункциональнуюОпцию(СтрокаЗависимости.ФункциональнаяОпция.Имя);
		
		Если Использование = Неопределено Тогда
			Использование = ЗначениеФО;
		ИначеЕсли СтрокаЗависимости.ЗависимостьПоИ Тогда
			Использование = Использование И ЗначениеФО;
		Иначе
			Использование = Использование Или ЗначениеФО;
		КонецЕсли;
	КонецЦикла;
	
	Если Использование = Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Использование;
	КонецЕсли;
	
КонецФункции

// Проверяет факт перемещения базы или восстановления из резервной копии.
// Если расположение информационной базы изменилось, то регламентное задание отключается
// и его выполнение прерывается с записью в журнал регистрации.
//
// Параметры:
//  Задание - ОбъектМетаданных: РегламентноеЗадание - регламентное задание.
//  ЗависимостиЗаданий - ТаблицаЗначений - таблица зависимостей регламентных
//    заданий, полученная методом РегламентныеЗаданияСлужебный.РегламентныеЗаданияЗависимыеОтФункциональныхОпций.
//    Если не указано, получается автоматически.
//
Процедура ПроверитьВозможностьРаботыСВнешнимиРесурсами(РегламентноеЗадание, ЗависимостиЗаданий = Неопределено) Экспорт
	
	Если Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗависимостиЗаданий = Неопределено Тогда
		ЗависимостиЗаданий = РегламентныеЗаданияЗависимыеОтФункциональныхОпций();
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("РегламентноеЗадание", РегламентноеЗадание);
	Отбор.Вставить("РаботаетСВнешнимиРесурсами", Истина);
	
	НайденныеСтроки = ЗависимостиЗаданий.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыБлокировки = Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.Получить().Получить();
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
			ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
			ИмяМетода = РегламентноеЗадание.ИмяМетода;
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("ОбластьДанных", ОбластьДанных);
			ПараметрыЗадания.Вставить("ИмяМетода", ИмяМетода);
			ПараметрыЗадания.Вставить("Использование", Истина);
			МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
			СписокЗаданий = МодульОчередьЗаданий.ПолучитьЗадания(ПараметрыЗадания);
			
			ПараметрыЗадания = Новый Структура("Использование", Ложь);
			Для Каждого Задание Из СписокЗаданий Цикл
				МодульОчередьЗаданий.ИзменитьЗадание(Задание.Идентификатор, ПараметрыЗадания);
				ПараметрыБлокировки.ОтключенныеЗадания.Добавить(Задание.Идентификатор);
			КонецЦикла;
		КонецЕсли;
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Приложение было перемещено.
			|Регламентное задание ""%1"", работающее с внешними ресурсами, отключено.'"), РегламентноеЗадание.Синоним);
		
	Иначе
		
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные", РегламентноеЗадание);
		Отбор.Вставить("Использование", Истина);
		МассивЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
		
		Для Каждого Задание Из МассивЗаданий Цикл
			
			Задание.Использование = Ложь;
			Задание.Записать();
			
			ПараметрыБлокировки.ОтключенныеЗадания.Добавить(Задание.УникальныйИдентификатор);
			
		КонецЦикла;
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Изменилась строка соединения информационной базы.
			|Возможно информационная база была перемещена.
			|Регламентное задание ""%1"" отключено.'"), РегламентноеЗадание.Синоним);
		
	КонецЕсли;
	
	ХранилищеЗначения = Новый ХранилищеЗначения(ПараметрыБлокировки);
	Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.Установить(ХранилищеЗначения);
	
КонецПроцедуры

// Формирует таблицу зависимостей регламентных заданий от функциональных опций.
//
// Возвращаемое значение:
//  Зависимости - ТаблицаЗначений - таблица значений с колонками:
//    * РегламентноеЗадание - ОбъектМетаданных:РегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданных:ФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ      - Булево - если регламентное задание зависит более, чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево, Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - неопределено.
//    * ДоступноВМоделиСервиса      - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в модели сервиса.
//        По умолчанию - неопределено.
//    * РаботаетСВнешнимиРесурсами   - Булево - Истина, если регламентное задание работает
//        с внешними ресурсами (получение почты, синхронизация данных и т.п.).
//        По умолчанию - Ложь.
//
Функция РегламентныеЗаданияЗависимыеОтФункциональныхОпций() Экспорт
	
	Зависимости = Новый ТаблицаЗначений;
	Зависимости.Колонки.Добавить("РегламентноеЗадание");
	Зависимости.Колонки.Добавить("ФункциональнаяОпция");
	Зависимости.Колонки.Добавить("ЗависимостьПоИ", Новый ОписаниеТипов("Булево"));
	Зависимости.Колонки.Добавить("ДоступноВМоделиСервиса");
	Зависимости.Колонки.Добавить("ДоступноВПодчиненномУзлеРИБ");
	Зависимости.Колонки.Добавить("ВключатьПриВключенииФункциональнойОпции");
	Зависимости.Колонки.Добавить("ДоступноВАвтономномРабочемМесте");
	Зависимости.Колонки.Добавить("РаботаетСВнешнимиРесурсами",  Новый ОписаниеТипов("Булево"));
	Зависимости.Колонки.Добавить("Параметризуется",  Новый ОписаниеТипов("Булево"));
	
	ИнтеграцияСтандартныхПодсистем.ПриОпределенииНастроекРегламентныхЗаданий(Зависимости);
	РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий(Зависимости);
	
	Зависимости.Сортировать("РегламентноеЗадание");
	
	Возврат Зависимости;
	
КонецФункции

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("РаботаСВнешнимиРесурсамиЗаблокирована",
		"РегламентныеЗаданияСлужебный.УстановкаПараметровСеанса");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события.

// Процедура включает/отключает созданные в ИБ регламентные задания
// при изменении функциональной опции.
//
// Параметры:
//  Источник - КонстантаМенеджерЗначения - константа хранения значения ФО
//  Отказ    - Булево - Отказ при записи константы.
//
Процедура ВключитьРегламентноеЗаданиеПриИзмененииФункциональнойОпции(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ИзменитьИспользованиеРегламентныхЗаданийПоФункциональнымОпциям(Источник, Источник.Значение);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗначениеНастройки(ИмяНастройки) Экспорт
	
	Настройки = НастройкиПоУмолчанию();
	РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроек(Настройки);
	
	Возврат Настройки[ИмяНастройки];
	
КонецФункции

// Содержит значения настроек по умолчанию.
//
// Возвращаемое значение:
//  Структура - Структура с ключами:
//    * РасположениеКомандыСнятияБлокировки - Строка - определяет расположение команды снятия
//                                                     блокировки работы с внешними ресурсами.
//
Функция НастройкиПоУмолчанию()
	
	НастройкиПодсистемы = Новый Структура;
	НастройкиПодсистемы.Вставить("РасположениеКомандыСнятияБлокировки",
		НСтр("ru = 'Блокировку также можно снять позднее в разделе <b>Администрирование - Поддержка и обслуживание</b>.'"));
	
	Возврат НастройкиПодсистемы;
	
КонецФункции

// Устанавливает параметры сеанса.
//
// Параметры:
//  ИмяПараметра - Строка - имя параметра сеанса, значение которого необходимо установить.
//  УстановленныеПараметры - массив - в данный параметр помещается информация об установленных параметрах сеанса.
// 
Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	Если ИмяПараметра = "РаботаСВнешнимиРесурсамиЗаблокирована" Тогда
		ПараметрыСеанса.РаботаСВнешнимиРесурсамиЗаблокирована = УстановленаБлокировкаРаботыСВнешнимиРесурсами();
		УстановленныеПараметры.Добавить("РаботаСВнешнимиРесурсамиЗаблокирована");
	КонецЕсли;
КонецПроцедуры

// Вызывает исключение, если у пользователя нет права администрирования.
Процедура ВызватьИсключениеЕслиНетПраваАдминистрирования() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
			ВызватьИсключение НСтр("ru = 'Нарушение прав доступа.'");
		КонецЕсли;
	Иначе
		Если НЕ ПривилегированныйРежим() Тогда
			ВыполнитьПроверкуПравДоступа("Администрирование", Метаданные);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП.

// Формирует список параметров ИБ.
//
// Параметры:
// ТаблицаПараметров - ТаблицаЗначений - таблица описания параметров.
// Описание состав колонок - см. РаботаВМоделиСервиса.ПолучитьТаблицуПараметровИБ().
//
Процедура ПриЗаполненииТаблицыПараметровИБ(Знач ТаблицаПараметров) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания");
		МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "МаксимальноеКоличествоИсполняющихФоновыхЗаданий");
	КонецЕсли;
	
КонецПроцедуры

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.24";
	Обработчик.Процедура = "РегламентныеЗаданияСлужебный.УстановитьИспользованиеРегламентныхЗаданийПоФункциональнымОпциям";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.2.42";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "РегламентныеЗаданияСлужебный.ОбновитьПараметрыБлокировкиРаботыСВнешнимиРесурсами";
	
КонецПроцедуры

// Формирует таблицу регламентных заданий
// с признаком использования в модели сервиса.
//
// Параметры:
// ТаблицаИспользования - ТаблицаЗначений - таблица, которую необходимо 
// заполнить регламентными заданиями и признаком использования, колонки:
//  РегламентноеЗадание - Строка - имя предопределенного регламентного задания.
//  Использование - Булево - Истина, если регламентное задание должно
//   выполняться в модели сервиса. Ложь - если не должно.
//
Процедура ПриОпределенииИспользованияРегламентныхЗаданий(ТаблицаИспользования) Экспорт
	
	ЗависимыеРегламентныеЗадания = РегламентныеЗаданияЗависимыеОтФункциональныхОпций();
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ДоступноВМоделиСервиса", Ложь);
	ЗаданияОтключаемыеМоделиСервиса = ЗависимыеРегламентныеЗадания.Скопировать(ПараметрыОтбора ,"РегламентноеЗадание");
	Для Каждого ОтключаемоеЗадание Из ЗаданияОтключаемыеМоделиСервиса Цикл
		Если ТаблицаИспользования.Найти(ОтключаемоеЗадание.РегламентноеЗадание.Имя, "РегламентноеЗадание") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаИспользования.Добавить();
		НоваяСтрока.РегламентноеЗадание = ОтключаемоеЗадание.РегламентноеЗадание.Имя;
		НоваяСтрока.Использование       = Ложь;
	КонецЦикла;
	
	ПараметрыОтбора.Вставить("ДоступноВМоделиСервиса", Истина);
	ЗаданияВключаемыеВМоделиСервиса = ЗависимыеРегламентныеЗадания.Скопировать(ПараметрыОтбора ,"РегламентноеЗадание");
	Для Каждого ВключаемоеЗадание Из ЗаданияВключаемыеВМоделиСервиса Цикл
		Если ТаблицаИспользования.Найти(ВключаемоеЗадание.РегламентноеЗадание.Имя, "РегламентноеЗадание") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаИспользования.Добавить();
		НоваяСтрока.РегламентноеЗадание = ВключаемоеЗадание.РегламентноеЗадание.Имя;
		НоваяСтрока.Использование       = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик начальной настройки ИБ после создания узла РИБ.
// Вызывается в момент первого запуска подчиненного узла РИБ (в том числе АРМ).
//
Процедура ПриНастройкеПодчиненногоУзлаРИБ() Экспорт
	
	УстановитьИспользованиеРегламентныхЗаданийПоФункциональнымОпциям();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с регламентными заданиями.

// Предназначена для "ручного" немедленного выполнения процедуры регламентного задания
// либо в сеансе клиента (в файловой ИБ), либо в фоновом задании на сервере (в серверной ИБ).
// Применяется в любом режиме соединения.
// СРучной" режим запуска не влияет на выполнение регламентного задания по аварийному
// и основному расписаниям, т.к. не указывается ссылка на регламентное задание у фонового задания.
// Тип ФоновоеЗадание не допускает установки такой ссылки, поэтому для файлового режима применяется
// тоже правило.
// 
// Параметры:
//  Задание             - РегламентноеЗадание, Строка - уникального идентификатора РегламентногоЗадания.
//
// Возвращаемое значение:
//  Структура - со свойствами
//    * МоментЗапуска -   Неопределено, Дата - для файловой ИБ устанавливает переданный момент, как момент запуска
//                        метода регламентного задания.
//                        Для серверной ИБ - возвращает момент запуска фонового задания по факту.
//    * ИдентификаторФоновогоЗадания - Строка - для серверной ИБ возвращает идентификатор запущенного фонового задания.
//
Функция ВыполнитьРегламентноеЗаданиеВручную(Знач Задание) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыВыполнения = ПараметрыВыполненияРегламентногоЗадания();
	ПараметрыВыполнения.ПроцедураУжеВыполняется = Ложь;
	Задание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(Задание);
	
	ПараметрыВыполнения.ЗапускВыполнен = Ложь;
	СвойстваПоследнегоФоновогоЗадания = ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(Задание);
	
	Если СвойстваПоследнегоФоновогоЗадания <> Неопределено
	   И СвойстваПоследнегоФоновогоЗадания.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		
		ПараметрыВыполнения.МоментЗапуска  = СвойстваПоследнегоФоновогоЗадания.Начало;
		Если ЗначениеЗаполнено(СвойстваПоследнегоФоновогоЗадания.Наименование) Тогда
			ПараметрыВыполнения.ПредставлениеФоновогоЗадания = СвойстваПоследнегоФоновогоЗадания.Наименование;
		Иначе
			ПараметрыВыполнения.ПредставлениеФоновогоЗадания = ПредставлениеРегламентногоЗадания(Задание);
		КонецЕсли;
	Иначе
		НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Запуск вручную: %1'"), ПредставлениеРегламентногоЗадания(Задание));
		ФоновоеЗадание = ФоновыеЗадания.Выполнить(Задание.Метаданные.ИмяМетода, Задание.Параметры, Строка(Задание.УникальныйИдентификатор), НаименованиеФоновогоЗадания);
		ПараметрыВыполнения.ИдентификаторФоновогоЗадания = Строка(ФоновоеЗадание.УникальныйИдентификатор);
		ПараметрыВыполнения.МоментЗапуска = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ФоновоеЗадание.УникальныйИдентификатор).Начало;
		ПараметрыВыполнения.ЗапускВыполнен = Истина;
	КонецЕсли;
	
	ПараметрыВыполнения.ПроцедураУжеВыполняется = НЕ ПараметрыВыполнения.ЗапускВыполнен;
	Возврат ПараметрыВыполнения;
	
КонецФункции

Функция ПараметрыВыполненияРегламентногоЗадания() 
	
	Результат = Новый Структура;
	Результат.Вставить("МоментЗапуска");
	Результат.Вставить("ИдентификаторФоновогоЗадания");
	Результат.Вставить("ПредставлениеФоновогоЗадания");
	Результат.Вставить("ПроцедураУжеВыполняется");
	Результат.Вставить("ЗапускВыполнен");
	Возврат Результат;
	
КонецФункции

// Возвращает представление регламентного задания,
// это по порядку исключения незаполненных реквизитов:
// Наименование, Метаданные.Синоним, Метаданные.Имя.
//
// Параметры:
//  Задание      - РегламентноеЗадание, Строка - если строка, тогда УникальныйИдентификатор строкой.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПредставлениеРегламентногоЗадания(Знач Задание) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Задание) = Тип("РегламентноеЗадание") Тогда
		РегламентноеЗадание = Задание;
	Иначе
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(Задание));
	КонецЕсли;
	
	Если РегламентноеЗадание <> Неопределено Тогда
		Представление = РегламентноеЗадание.Наименование;
		
		Если ПустаяСтрока(РегламентноеЗадание.Наименование) Тогда
			Представление = РегламентноеЗадание.Метаданные.Синоним;
			
			Если ПустаяСтрока(Представление) Тогда
				Представление = РегламентноеЗадание.Метаданные.Имя;
			КонецЕсли
		КонецЕсли;
	Иначе
		Представление = ТекстНеОпределено();
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Возвращает текст "<не определено>".
Функция ТекстНеОпределено() Экспорт
	
	Возврат НСтр("ru = '<не определено>'");
	
КонецФункции

// Возвращает многострочную Строку содержащую Сообщения и ОписаниеИнформацииОбОшибке,
// последнее фоновое задание найдено по идентификатору регламентного задания
// и сообщения/ошибки есть.
//
// Параметры:
//  Задание      - РегламентноеЗадание, Строка - УникальныйИдентификатор
//                 РегламентногоЗадания строкой.
//
// Возвращаемое значение:
//  Строка.
//
Функция СообщенияИОписанияОшибокРегламентногоЗадания(Знач Задание) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);

	ИдентификаторРегламентногоЗадания = ?(ТипЗнч(Задание) = Тип("РегламентноеЗадание"), Строка(Задание.УникальныйИдентификатор), Задание);
	СвойстваПоследнегоФоновогоЗадания = ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(ИдентификаторРегламентногоЗадания);
	Возврат ?(СвойстваПоследнегоФоновогоЗадания = Неопределено,
	          "",
	          СообщенияИОписанияОшибокФоновогоЗадания(СвойстваПоследнегоФоновогоЗадания.Идентификатор) );
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с фоновыми заданиями.

// Отменяет фоновое задание, если это возможно, а именно, если оно выполняется на сервере, и активно.
//
// Параметры:
//  Идентификатор  - Строка уникального идентификатора ФоновогоЗадания.
// 
Процедура ОтменитьФоновоеЗадание(Идентификатор) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйУникальныйИдентификатор = Новый УникальныйИдентификатор(Идентификатор);
	Отбор = Новый Структура;
	Отбор.Вставить("УникальныйИдентификатор", НовыйУникальныйИдентификатор);
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если МассивФоновыхЗаданий.Количество() = 1 Тогда
		ФоновоеЗадание = МассивФоновыхЗаданий[0];
	Иначе
		ВызватьИсключение НСтр("ru = 'Фоновое задание не найдено на сервере.'");
	КонецЕсли;
	
	Если ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		ВызватьИсключение НСтр("ru = 'Задание не выполняется, его нельзя отменить.'");
	КонецЕсли;
	
	ФоновоеЗадание.Отменить();
	
КонецПроцедуры

// Только для внутреннего использования.
//
Функция ТаблицаСвойствФоновыхЗаданийВФоне(Параметры, АдресХранилища) Экспорт
	
	ТаблицаСвойств = ПолучитьТаблицуСвойствФоновыхЗаданий(Параметры.Отбор);
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаСвойств", ТаблицаСвойств);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецФункции

// Возвращает таблицу свойств фоновых заданий.
//  Структуру таблицы смотри в функции ПустаяТаблицаСвойствФоновыхЗаданий().
// 
// Параметры:
//  Отбор        - Структура - допустимые поля:
//                 Идентификатор, Ключ, Состояние, Начало, Конец,
//                 Наименование, ИмяМетода, РегламентноеЗадание. 
//
// Возвращаемое значение:
//  ТаблицаЗначений  - возвращается таблица после отбора.
//
Функция ПолучитьТаблицуСвойствФоновыхЗаданий(Отбор = Неопределено) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	Таблица = ПустаяТаблицаСвойствФоновыхЗаданий();
	
	Если ЗначениеЗаполнено(Отбор) И Отбор.Свойство("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания") Тогда
		Отбор.Удалить("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания");
		ПолучитьПоследнее = Истина;
	Иначе
		ПолучитьПоследнее = Ложь;
	КонецЕсли;
	
	РегламентноеЗадание = Неопределено;
	
	// Добавление истории фоновых заданий, полученных с сервера.
	Если ЗначениеЗаполнено(Отбор) И Отбор.Свойство("ИдентификаторРегламентногоЗадания") Тогда
		Если Отбор.ИдентификаторРегламентногоЗадания <> "" Тогда
			РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(
				Новый УникальныйИдентификатор(Отбор.ИдентификаторРегламентногоЗадания));
			ТекущийОтбор = Новый Структура("Ключ", Отбор.ИдентификаторРегламентногоЗадания);
			ФоновыеЗаданияЗапущенныеВручную = ФоновыеЗадания.ПолучитьФоновыеЗадания(ТекущийОтбор);
			Если РегламентноеЗадание <> Неопределено Тогда
				ПоследнееФоновоеЗадание = РегламентноеЗадание.ПоследнееЗадание;
			КонецЕсли;
			Если НЕ ПолучитьПоследнее ИЛИ ПоследнееФоновоеЗадание = Неопределено Тогда
				ТекущийОтбор = Новый Структура("РегламентноеЗадание", РегламентноеЗадание);
				АвтоматическиеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ТекущийОтбор);
			КонецЕсли;
			Если ПолучитьПоследнее Тогда
				Если ПоследнееФоновоеЗадание = Неопределено Тогда
					ПоследнееФоновоеЗадание = ПоследнееФоновоеЗаданиеВМассиве(АвтоматическиеФоновыеЗадания);
				КонецЕсли;
				
				ПоследнееФоновоеЗадание = ПоследнееФоновоеЗаданиеВМассиве(
					ФоновыеЗаданияЗапущенныеВручную, ПоследнееФоновоеЗадание);
				
				Если ПоследнееФоновоеЗадание <> Неопределено Тогда
					МассивФоновыхЗаданий = Новый Массив;
					МассивФоновыхЗаданий.Добавить(ПоследнееФоновоеЗадание);
					ДобавитьСвойстваФоновыхЗаданий(МассивФоновыхЗаданий, Таблица);
				КонецЕсли;
				Возврат Таблица;
			КонецЕсли;
			ДобавитьСвойстваФоновыхЗаданий(ФоновыеЗаданияЗапущенныеВручную, Таблица);
			ДобавитьСвойстваФоновыхЗаданий(АвтоматическиеФоновыеЗадания, Таблица);
		Иначе
			МассивФоновыхЗаданий = Новый Массив;
			ВсеИдентификаторыРегламентныхЗаданий = Новый Соответствие;
			Для каждого ТекущееЗадание Из РегламентныеЗадания.ПолучитьРегламентныеЗадания() Цикл
				ВсеИдентификаторыРегламентныхЗаданий.Вставить(
					Строка(ТекущееЗадание.УникальныйИдентификатор), Истина);
			КонецЦикла;
			ВсеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания();
			Для каждого ТекущееЗадание Из ВсеФоновыеЗадания Цикл
				Если ТекущееЗадание.РегламентноеЗадание = Неопределено
				   И ВсеИдентификаторыРегламентныхЗаданий[ТекущееЗадание.Ключ] = Неопределено Тогда
				
					МассивФоновыхЗаданий.Добавить(ТекущееЗадание);
				КонецЕсли;
			КонецЦикла;
			ДобавитьСвойстваФоновыхЗаданий(МассивФоновыхЗаданий, Таблица);
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(Отбор) Тогда
			МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания();
		Иначе
			Если Отбор.Свойство("Идентификатор") Тогда
				Отбор.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор(Отбор.Идентификатор));
				Отбор.Удалить("Идентификатор");
			КонецЕсли;
			МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
			Если Отбор.Свойство("УникальныйИдентификатор") Тогда
				Отбор.Вставить("Идентификатор", Строка(Отбор.УникальныйИдентификатор));
				Отбор.Удалить("УникальныйИдентификатор");
			КонецЕсли;
		КонецЕсли;
		ДобавитьСвойстваФоновыхЗаданий(МассивФоновыхЗаданий, Таблица);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отбор) И Отбор.Свойство("ИдентификаторРегламентногоЗадания") Тогда
		РегламентныеЗаданияДляОбработки = Новый Массив;
		Если Отбор.ИдентификаторРегламентногоЗадания <> "" Тогда
			Если РегламентноеЗадание = Неопределено Тогда
				РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(
					Новый УникальныйИдентификатор(Отбор.ИдентификаторРегламентногоЗадания));
			КонецЕсли;
			Если РегламентноеЗадание <> Неопределено Тогда
				РегламентныеЗаданияДляОбработки.Добавить(РегламентноеЗадание);
			КонецЕсли;
		КонецЕсли;
	Иначе
		РегламентныеЗаданияДляОбработки = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	КонецЕсли;
	
	Таблица.Сортировать("Начало Убыв, Конец Убыв");
	
	// Отбор фоновых заданий.
	Если ЗначениеЗаполнено(Отбор) Тогда
		Начало    = Неопределено;
		Конец     = Неопределено;
		Состояние = Неопределено;
		Если Отбор.Свойство("Начало") Тогда
			Начало = ?(ЗначениеЗаполнено(Отбор.Начало), Отбор.Начало, Неопределено);
			Отбор.Удалить("Начало");
		КонецЕсли;
		Если Отбор.Свойство("Конец") Тогда
			Конец = ?(ЗначениеЗаполнено(Отбор.Конец), Отбор.Конец, Неопределено);
			Отбор.Удалить("Конец");
		КонецЕсли;
		Если Отбор.Свойство("Состояние") Тогда
			Если ТипЗнч(Отбор.Состояние) = Тип("Массив") Тогда
				Состояние = Отбор.Состояние;
				Отбор.Удалить("Состояние");
			КонецЕсли;
		КонецЕсли;
		
		Если Отбор.Количество() <> 0 Тогда
			Строки = Таблица.НайтиСтроки(Отбор);
		Иначе
			Строки = Таблица;
		КонецЕсли;
		// Выполнение дополнительного отбора по периоду и состоянию (если отбор определен).
		НомерЭлемента = Строки.Количество() - 1;
		Пока НомерЭлемента >= 0 Цикл
			Если Начало    <> Неопределено И Начало > Строки[НомерЭлемента].Начало
				Или Конец     <> Неопределено И Конец  < ?(ЗначениеЗаполнено(Строки[НомерЭлемента].Конец), Строки[НомерЭлемента].Конец, ТекущаяДатаСеанса())
				Или Состояние <> Неопределено И Состояние.Найти(Строки[НомерЭлемента].Состояние) = Неопределено Тогда
				Строки.Удалить(НомерЭлемента);
			КонецЕсли;
			НомерЭлемента = НомерЭлемента - 1;
		КонецЦикла;
		// Удаление лишних строк из таблицы.
		Если ТипЗнч(Строки) = Тип("Массив") Тогда
			НомерСтроки = Таблица.Количество() - 1;
			Пока НомерСтроки >= 0 Цикл
				Если Строки.Найти(Таблица[НомерСтроки]) = Неопределено Тогда
					Таблица.Удалить(Таблица[НомерСтроки]);
				КонецЕсли;
				НомерСтроки = НомерСтроки - 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

// Возвращает свойства ФоновогоЗадания по строке уникального идентификатора.
//
// Параметры:
//  Идентификатор - Строка - уникального идентификатора ФоновогоЗадания.
//  ИменаСвойств  - Строка, если заполнено, возвращается структура с указанными свойствами.
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Структура - свойства ФоновогоЗадания.
//
Функция ПолучитьСвойстваФоновогоЗадания(Идентификатор, ИменаСвойств = "") Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура("Идентификатор", Идентификатор);
	ТаблицаСвойствФоновыхЗаданий = ПолучитьТаблицуСвойствФоновыхЗаданий(Отбор);
	
	Если ТаблицаСвойствФоновыхЗаданий.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(ИменаСвойств) Тогда
			Результат = Новый Структура(ИменаСвойств);
			ЗаполнитьЗначенияСвойств(Результат, ТаблицаСвойствФоновыхЗаданий[0]);
		Иначе
			Результат = ТаблицаСвойствФоновыхЗаданий[0];
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает свойства последнего фонового задания выполненного при выполнении регламентного задания, если оно есть.
// Процедура работает, как в файл-серверном, так и в клиент-серверном режимах.
//
// Параметры:
//  РегламентноеЗадание - РегламентноеЗадание, Строка - строка уникального идентификатора РегламентногоЗадания.
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено.
//
Функция ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(РегламентноеЗадание) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторРегламентногоЗадания = ?(ТипЗнч(РегламентноеЗадание) = Тип("РегламентноеЗадание"), Строка(РегламентноеЗадание.УникальныйИдентификатор), РегламентноеЗадание);
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторРегламентногоЗадания", ИдентификаторРегламентногоЗадания);
	Отбор.Вставить("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания");
	ТаблицаСвойствФоновыхЗаданий = ПолучитьТаблицуСвойствФоновыхЗаданий(Отбор);
	ТаблицаСвойствФоновыхЗаданий.Сортировать("Конец Возр");
	
	Если ТаблицаСвойствФоновыхЗаданий.Количество() = 0 Тогда
		СвойстваФоновогоЗадания = Неопределено;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТаблицаСвойствФоновыхЗаданий[0].Конец) Тогда
		СвойстваФоновогоЗадания = ТаблицаСвойствФоновыхЗаданий[0];
	Иначе
		СвойстваФоновогоЗадания = ТаблицаСвойствФоновыхЗаданий[ТаблицаСвойствФоновыхЗаданий.Количество()-1];
	КонецЕсли;
	
	Возврат СвойстваФоновогоЗадания;
	
КонецФункции

// Возвращает многострочную Строку содержащую Сообщения и ОписаниеИнформацииОбОшибке,
// если фоновое задание найдено по идентификатору и сообщения/ошибки есть.
//
// Параметры:
//  Задание      - Строка - УникальныйИдентификатор ФоновогоЗадания строкой.
//
// Возвращаемое значение:
//  Строка.
//
Функция СообщенияИОписанияОшибокФоновогоЗадания(Идентификатор, СвойстваФоновогоЗадания = Неопределено) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	Если СвойстваФоновогоЗадания = Неопределено Тогда
		СвойстваФоновогоЗадания = ПолучитьСвойстваФоновогоЗадания(Идентификатор);
	КонецЕсли;
	
	Строка = "";
	Если СвойстваФоновогоЗадания <> Неопределено Тогда
		Для каждого Сообщение Из СвойстваФоновогоЗадания.СообщенияПользователю Цикл
			Строка = Строка + ?(Строка = "",
			                    "",
			                    "
			                    |
			                    |") + Сообщение.Текст;
		КонецЦикла;
		Если ЗначениеЗаполнено(СвойстваФоновогоЗадания.ОписаниеИнформацииОбОшибке) Тогда
			Строка = Строка + ?(Строка = "",
			                    СвойстваФоновогоЗадания.ОписаниеИнформацииОбОшибке,
			                    "
			                    |
			                    |" + СвойстваФоновогоЗадания.ОписаниеИнформацииОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

Процедура УстановитьИспользованиеРегламентныхЗаданийПоФункциональнымОпциям() Экспорт
	
	ЭтоПодчиненныйУзелРИБ = ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ();
	ЭтоАвтономноеРабочееМесто = ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто();
	
	ЗависимыеРегламентныеЗадания = РегламентныеЗаданияЗависимыеОтФункциональныхОпций();
	Задания = ЗависимыеРегламентныеЗадания.Скопировать(,"РегламентноеЗадание");
	Задания.Свернуть("РегламентноеЗадание");
	
	Для Каждого СтрокаЗадание Из Задания Цикл
		
		Использование                    = Неопределено;
		ОтключитьЗадание                 = Истина;
		ОтключитьВПодчиненномУзлеРИБ     = Ложь;
		ОтключитьВАвтономномРабочемМесте = Ложь;
		
		НайденныеСтроки = ЗависимыеРегламентныеЗадания.НайтиСтроки(Новый Структура("РегламентноеЗадание", СтрокаЗадание.РегламентноеЗадание));
		
		Для Каждого СтрокаЗависимости Из НайденныеСтроки Цикл
			ОтключитьВПодчиненномУзлеРИБ = (СтрокаЗависимости.ДоступноВПодчиненномУзлеРИБ = Ложь) И ЭтоПодчиненныйУзелРИБ;
			ОтключитьВАвтономномРабочемМесте = (СтрокаЗависимости.ДоступноВАвтономномРабочемМесте = Ложь) И ЭтоАвтономноеРабочееМесто;
			Если ОтключитьВПодчиненномУзлеРИБ Или ОтключитьВАвтономномРабочемМесте Тогда
				Использование = Ложь;
				Прервать;
			КонецЕсли;
			
			Если СтрокаЗависимости.ФункциональнаяОпция = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеФО = ПолучитьФункциональнуюОпцию(СтрокаЗависимости.ФункциональнаяОпция.Имя);
			
			Если СтрокаЗависимости.ВключатьПриВключенииФункциональнойОпции = Ложь Тогда
				Если ОтключитьЗадание Тогда
					ОтключитьЗадание = Не ЗначениеФО;
				КонецЕсли;
				ЗначениеФО = Ложь;
			КонецЕсли;
			
			Если Использование = Неопределено Тогда
				Использование = ЗначениеФО;
			ИначеЕсли СтрокаЗависимости.ЗависимостьПоИ Тогда
				Использование = Использование И ЗначениеФО;
			Иначе
				Использование = Использование Или ЗначениеФО;
			КонецЕсли;
		КонецЦикла;
		
		Если Использование = Неопределено
			Или Использование // Автоматически при обновлении только отключаем регламентные задания.
			Или (Не Использование И Не ОтключитьЗадание) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
				ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
				ИмяМетода = СтрокаЗадание.РегламентноеЗадание.ИмяМетода;
				
				ПараметрыЗадания = Новый Структура;
				ПараметрыЗадания.Вставить("ОбластьДанных", ОбластьДанных);
				ПараметрыЗадания.Вставить("ИмяМетода", ИмяМетода);
				
				МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
				СписокЗаданий = МодульОчередьЗаданий.ПолучитьЗадания(ПараметрыЗадания);
				ПараметрыЗадания = Новый Структура("Использование", Использование);
				Для Каждого Задание Из СписокЗаданий Цикл
					МодульОчередьЗаданий.ИзменитьЗадание(Задание.Идентификатор, ПараметрыЗадания);
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			МассивЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", СтрокаЗадание.РегламентноеЗадание));
			
			Для каждого Задание Из МассивЗаданий Цикл
				
				Если Задание.Использование <> Использование Тогда
					
					Задание.Использование = Использование;
					Задание.Записать();
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

Процедура ИзменитьИспользованиеРегламентныхЗаданийПоФункциональнымОпциям(Источник, Знач Использование)
	
	Если Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник);
	ХранениеФО = Метаданные.НайтиПоТипу(ТипИсточника);
	ФункциональнаяОпция = Неопределено;
	ЭтоПодчиненныйУзелРИБ = ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ();
	ЭтоАвтономноеРабочееМесто = ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто();
	
	ЗависимыеРегламентныеЗадания = РегламентныеЗаданияЗависимыеОтФункциональныхОпций();
	
	СписокФО = ЗависимыеРегламентныеЗадания.Скопировать(,"ФункциональнаяОпция");
	СписокФО.Свернуть("ФункциональнаяОпция");
	
	Для Каждого СтрокаФО Из СписокФО Цикл
		
		Если СтрокаФО.ФункциональнаяОпция = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаФО.ФункциональнаяОпция.Хранение = ХранениеФО Тогда
			ФункциональнаяОпция = СтрокаФО.ФункциональнаяОпция;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ФункциональнаяОпция = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Задания = ЗависимыеРегламентныеЗадания.Скопировать(Новый Структура("ФункциональнаяОпция", ФункциональнаяОпция) ,"РегламентноеЗадание");
	Задания.Свернуть("РегламентноеЗадание");
	
	Для Каждого СтрокаЗадание Из Задания Цикл
		
		ИспользованиеПоФО                = Неопределено;
		ОтключитьЗадание                 = Истина;
		ОтключитьВПодчиненномУзлеРИБ     = Ложь;
		ОтключитьВАвтономномРабочемМесте = Ложь;
		
		НайденныеСтроки = ЗависимыеРегламентныеЗадания.НайтиСтроки(Новый Структура("РегламентноеЗадание", СтрокаЗадание.РегламентноеЗадание));
		
		Для Каждого СтрокаЗависимости Из НайденныеСтроки Цикл
			ОтключитьВПодчиненномУзлеРИБ = (СтрокаЗависимости.ДоступноВПодчиненномУзлеРИБ = Ложь) И ЭтоПодчиненныйУзелРИБ;
			ОтключитьВАвтономномРабочемМесте = (СтрокаЗависимости.ДоступноВАвтономномРабочемМесте = Ложь) И ЭтоАвтономноеРабочееМесто;
			Если ОтключитьВПодчиненномУзлеРИБ Или ОтключитьВАвтономномРабочемМесте Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаЗависимости.ФункциональнаяОпция = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаЗависимости.ФункциональнаяОпция = ФункциональнаяОпция Тогда
				ЗначениеФО = Использование;
			Иначе
				ЗначениеФО = ПолучитьФункциональнуюОпцию(СтрокаЗависимости.ФункциональнаяОпция.Имя);
			КонецЕсли;
			
			Если СтрокаЗависимости.ВключатьПриВключенииФункциональнойОпции = Ложь Тогда
				Если ОтключитьЗадание Тогда
					ОтключитьЗадание = Не ЗначениеФО;
				КонецЕсли;
				ЗначениеФО = Ложь;
			КонецЕсли;
			
			Если ИспользованиеПоФО = Неопределено Тогда
				ИспользованиеПоФО = ЗначениеФО;
			ИначеЕсли СтрокаЗависимости.ЗависимостьПоИ Тогда
				ИспользованиеПоФО = ИспользованиеПоФО И ЗначениеФО;
			Иначе
				ИспользованиеПоФО = ИспользованиеПоФО Или ЗначениеФО;
			КонецЕсли;
		КонецЦикла;
		
		Если ОтключитьВПодчиненномУзлеРИБ Или ОтключитьВАвтономномРабочемМесте Тогда
			Использование = Ложь;
		Иначе
			Если Использование <> ИспользованиеПоФО Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не Использование И Не ОтключитьЗадание Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(Новый Структура("Метаданные", СтрокаЗадание.РегламентноеЗадание));
		Для Каждого РегламентноеЗадание Из СписокЗаданий Цикл
			ПараметрыЗадания = Новый Структура("Использование", Использование);
			РегламентныеЗаданияСервер.ИзменитьЗадание(РегламентноеЗадание, ПараметрыЗадания);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает новую таблицу свойств фоновых заданий.
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПустаяТаблицаСвойствФоновыхЗаданий()
	
	НоваяТаблица = Новый ТаблицаЗначений;
	НоваяТаблица.Колонки.Добавить("Идентификатор",                     Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Наименование",                      Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Ключ",                              Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Начало",                            Новый ОписаниеТипов("Дата"));
	НоваяТаблица.Колонки.Добавить("Конец",                             Новый ОписаниеТипов("Дата"));
	НоваяТаблица.Колонки.Добавить("ИдентификаторРегламентногоЗадания", Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Состояние",                         Новый ОписаниеТипов("СостояниеФоновогоЗадания"));
	НоваяТаблица.Колонки.Добавить("ИмяМетода",                         Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Расположение",                      Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("ОписаниеИнформацииОбОшибке",        Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("ПопыткаЗапуска",                    Новый ОписаниеТипов("Число"));
	НоваяТаблица.Колонки.Добавить("СообщенияПользователю",             Новый ОписаниеТипов("Массив"));
	НоваяТаблица.Колонки.Добавить("НомерСеанса",                       Новый ОписаниеТипов("Число"));
	НоваяТаблица.Колонки.Добавить("НачалоСеанса",                      Новый ОписаниеТипов("Дата"));
	НоваяТаблица.Индексы.Добавить("Идентификатор, Начало");
	
	Возврат НоваяТаблица;
	
КонецФункции

Процедура ДобавитьСвойстваФоновыхЗаданий(Знач МассивФоновыхЗаданий, Знач ТаблицаСвойствФоновыхЗаданий)
	
	Индекс = МассивФоновыхЗаданий.Количество() - 1;
	Пока Индекс >= 0 Цикл
		ФоновоеЗадание = МассивФоновыхЗаданий[Индекс];
		Строка = ТаблицаСвойствФоновыхЗаданий.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, ФоновоеЗадание);
		Строка.Идентификатор = ФоновоеЗадание.УникальныйИдентификатор;
		РегламентноеЗадание = ФоновоеЗадание.РегламентноеЗадание;
		
		Если РегламентноеЗадание = Неопределено
		   И СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ФоновоеЗадание.Ключ) Тогда
			
			РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ФоновоеЗадание.Ключ));
		КонецЕсли;
		Строка.ИдентификаторРегламентногоЗадания = ?(
			РегламентноеЗадание = Неопределено,
			"",
			РегламентноеЗадание.УникальныйИдентификатор);
		
		Строка.ОписаниеИнформацииОбОшибке = ?(
			ФоновоеЗадание.ИнформацияОбОшибке = Неопределено,
			"",
			ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке));
		
		Индекс = Индекс - 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ПоследнееФоновоеЗаданиеВМассиве(МассивФоновыхЗаданий, ПоследнееФоновоеЗадание = Неопределено)
	
	Для каждого ТекущееФоновоеЗадание Из МассивФоновыхЗаданий Цикл
		Если ПоследнееФоновоеЗадание = Неопределено Тогда
			ПоследнееФоновоеЗадание = ТекущееФоновоеЗадание;
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПоследнееФоновоеЗадание.Конец) Тогда
			Если НЕ ЗначениеЗаполнено(ТекущееФоновоеЗадание.Конец)
			 ИЛИ ПоследнееФоновоеЗадание.Конец < ТекущееФоновоеЗадание.Конец Тогда
				ПоследнееФоновоеЗадание = ТекущееФоновоеЗадание;
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(ТекущееФоновоеЗадание.Конец)
			   И ПоследнееФоновоеЗадание.Начало < ТекущееФоновоеЗадание.Начало Тогда
				ПоследнееФоновоеЗадание = ТекущееФоновоеЗадание;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоследнееФоновоеЗадание;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Блокировка работы с внешними ресурсами.

// Создает файл для контроля за перемещением файловой информационной базы.
//
Функция ИдентификаторФайловойБазы(ЭтоФайловаяБаза)
	
	ИдентификаторБазы = "";
	Если ЭтоФайловаяБаза Тогда
		ИдентификаторБазы = Строка(Новый УникальныйИдентификатор);
		СодержимоеФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1
		|
		|Файл создан автоматически прикладным решением ""%2"".
		|Он содержит идентификатор информационной базы и позволяет определить, что эта информационная база была скопирована.
		|
		|При копировании файлов информационной базы, в том числе при создании резервной копии, не следует копировать этот файл.
		|Одновременное использование двух копий информационной базы с одинаковым идентификатором может привести к конфликтам
		|при синхронизации данных, отправке почты и другой работе с внешними ресурсами.
		|
		|Если файл отсутствует в каталоге с информационной базой, то программа запросит администратора, должна ли эта
		|информационная база работать с внешними ресурсами.'"), ИдентификаторБазы, Метаданные.Синоним);
		ИмяФайла = ОбщегоНазначенияКлиентСервер.КаталогФайловойИнформационнойБазы() + "\DoNotCopy.txt";
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);
		ЗаписьТекста.Записать(СодержимоеФайла);
		ЗаписьТекста.Закрыть();
	КонецЕсли;
	
	Возврат ИдентификаторБазы;
	
КонецФункции

// Устанавливает признак необходимости принять решение о блокировке работы с внешними ресурсами.
//
Процедура УстановитьПризнакНеобходимостиПринятияРешенияОБлокировке(ПараметрыБлокировки, ТекстСообщения)
	
	ПараметрыБлокировки.РаботаСВнешнимиРесурсамиЗаблокирована = Неопределено;
	ХранилищеЗначения = Новый ХранилищеЗначения(ПараметрыБлокировки);
	Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.Установить(ХранилищеЗначения);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с внешними ресурсами заблокирована'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
	
КонецПроцедуры

// Разрешает работу с внешними ресурсами после перемещения базы.
//
Процедура РазрешитьРаботуСВнешнимиРесурсами(ПараметрыБлокировки = Неопределено) Экспорт
	
	Если ПараметрыБлокировки = Неопределено Тогда
		ПараметрыБлокировки = Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.Получить().Получить();
	КонецЕсли;
	
	Отбор = Новый Структура("УникальныйИдентификатор");
	Для Каждого ИдентификаторЗадания Из ПараметрыБлокировки.ОтключенныеЗадания Цикл
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
				
				ПараметрыЗадания = Новый Структура;
				ПараметрыЗадания.Вставить("ОбластьДанных", ОбщегоНазначения.ЗначениеРазделителяСеанса());
				ПараметрыЗадания.Вставить("Идентификатор", ИдентификаторЗадания);
				ПараметрыЗадания.Вставить("Использование", Ложь);
				МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
				СписокЗаданий = МодульОчередьЗаданий.ПолучитьЗадания(ПараметрыЗадания);
				
				ПараметрыЗадания = Новый Структура("Использование", Истина);
				Для Каждого Задание Из СписокЗаданий Цикл
					МодульОчередьЗаданий.ИзменитьЗадание(Задание.Идентификатор, ПараметрыЗадания);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Отбор.УникальныйИдентификатор = ИдентификаторЗадания;
			НайденныеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
			
			Для Каждого ОтключенноеЗадание Из НайденныеЗадания Цикл
				ОтключенноеЗадание.Использование = Истина;
				ОтключенноеЗадание.Записать();
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединения);
	
	ПараметрыБлокировки.ЭтоФайловаяБаза = ЭтоФайловаяБаза;
	ПараметрыБлокировки.СтрокаСоединения = СтрокаСоединения;
	ПараметрыБлокировки.РаботаСВнешнимиРесурсамиЗаблокирована = Ложь;
	ПараметрыБлокировки.ОтключенныеЗадания.Очистить();
	ПараметрыБлокировки.ИдентификаторБазы = ИдентификаторФайловойБазы(ЭтоФайловаяБаза);
	ПараметрыБлокировки.РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	ПараметрыБлокировки.ИмяКомпьютера = ИмяКомпьютера();
	
	ХранилищеЗначения = Новый ХранилищеЗначения(ПараметрыБлокировки);
	Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.Установить(ХранилищеЗначения);
	
	ПараметрыСеанса.РаботаСВнешнимиРесурсамиЗаблокирована = Ложь;
	
КонецПроцедуры

// Запрещает работу с внешними ресурсами.
//
Процедура ЗапретитьРаботуСВнешнимиРесурсами() Экспорт
	
	ПараметрыБлокировки = Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.Получить().Получить();
	
	Если ПараметрыБлокировки = Неопределено Тогда
		ИнициализироватьПараметрыБлокировкиРаботыСВнешнимиРесурсами(Истина);
	Иначе
		ПараметрыБлокировки.РаботаСВнешнимиРесурсамиЗаблокирована = Истина;
		ХранилищеЗначения = Новый ХранилищеЗначения(ПараметрыБлокировки);
		Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.Установить(ХранилищеЗначения);
	КонецЕсли;
	
	ПараметрыСеанса.РаботаСВнешнимиРесурсамиЗаблокирована = Истина;
	
КонецПроцедуры

// Определяет установлена ли блокировка работы с внешними ресурсами.
//
Функция УстановленаБлокировкаРаботыСВнешнимиРесурсами(ЭтоВызовПередНачаломРаботыСистемы = Ложь, ПоказатьФорму = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СохраненныеПараметры = Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.Получить().Получить();
	
	Если СохраненныеПараметры = Неопределено Тогда
		Если ЭтоВызовПередНачаломРаботыСистемы Тогда
			ИнициализироватьПараметрыБлокировкиРаботыСВнешнимиРесурсами();
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыБлокировки = ПараметрыБлокировкиРаботыСВнешнимиРесурсами();
	ЗаполнитьЗначенияСвойств(ПараметрыБлокировки, СохраненныеПараметры);
	
	Если ПараметрыБлокировки.РаботаСВнешнимиРесурсамиЗаблокирована = Неопределено Тогда
		Возврат Истина; // Если признак уже был взведен ранее в регламентном задании.
	ИначеЕсли ПараметрыБлокировки.РаботаСВнешнимиРесурсамиЗаблокирована = Истина Тогда
		Возврат Не ПоказатьФорму; // Блокировка работы с внешними ресурсами подтверждена администратором.
	КонецЕсли;
	
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	// При работе в модели сервиса факт переноса базы определяется менеджером сервиса.
	Если РазделениеВключено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыБлокировки.Свойство("РазделениеВключено")
		И РазделениеВключено <> ПараметрыБлокировки.РазделениеВключено Тогда
		// Разделение не включено.
		ТекстСообщения = НСтр("ru = 'Информационная база была перемещена из приложения в Интернете.'");
		УстановитьПризнакНеобходимостиПринятияРешенияОБлокировке(ПараметрыБлокировки, ТекстСообщения);
		Возврат Истина;
	КонецЕсли;
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединения);
	
	Если ЭтоФайловаяБаза <> ПараметрыБлокировки.ЭтоФайловаяБаза Тогда
		ТекстСообщения = ?(ЭтоФайловаяБаза, НСтр("ru = 'Информационная база была перемещена из клиент-серверного режима работы в файловый.'"),
			НСтр("ru = 'Информационная база была перемещена из файловый режима работы в клиент-серверный.'"));
		УстановитьПризнакНеобходимостиПринятияРешенияОБлокировке(ПараметрыБлокировки, ТекстСообщения);
		Возврат Истина;
	КонецЕсли;
	
	// Если строка соединения совпадает, то дальнейшую проверку не выполняем.
	Если СтрокаСоединения = ПараметрыБлокировки.СтрокаСоединения Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоФайловаяБаза Тогда
		// Для файловой базы через строка соединения может быть разной при подключении с различных
		// компьютеров, поэтому проверку перемещения базы осуществляем через файл.
		ИмяФайлаПроверки = "DoNotCopy.txt";
		НайденныеФайлы = НайтиФайлы(ОбщегоНазначенияКлиентСервер.КаталогФайловойИнформационнойБазы(), "DoNotCopy.txt");
		Если НайденныеФайлы.Количество() = 0 Тогда
			// В каталоге базы отсутствует файл проверки.
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В каталоге информационной базы отсутствует файл проверки %1.'"), ИмяФайлаПроверки);
			УстановитьПризнакНеобходимостиПринятияРешенияОБлокировке(ПараметрыБлокировки, ТекстСообщения);
			Возврат Истина;
		КонецЕсли;
		ЧтениеТекста = Новый ЧтениеТекста(НайденныеФайлы[0].ПолноеИмя);
		ИдентификаторБазы =ЧтениеТекста.ПрочитатьСтроку();
		// Файл присутствует, но идентификатор внутри не соответствует ожидаемому.
		Если ИдентификаторБазы <> ПараметрыБлокировки.ИдентификаторБазы Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Идентификатор информационной базы в файле проверки %1 не соответствует идентификатору в текущей базе.'"), ИмяФайлаПроверки);
			УстановитьПризнакНеобходимостиПринятияРешенияОБлокировке(ПараметрыБлокировки, ТекстСообщения);
			Возврат Истина;
		КонецЕсли;
	Иначе // Клиент-серверная база
		ИмяБазы = НРег(СтроковыеФункцииКлиентСервер.ПолучитьПараметрыИзСтроки(СтрокаСоединения).Ref);
		ИмяКомпьютера = НРег(ИмяКомпьютера());
		ИмяСервера = НРег(СтроковыеФункцииКлиентСервер.ПолучитьПараметрыИзСтроки(СтрокаСоединения).Srvr);
		СохраненноеИмяБазы = НРег(СтроковыеФункцииКлиентСервер.ПолучитьПараметрыИзСтроки(ПараметрыБлокировки.СтрокаСоединения).Ref);
		СохраненноеИмяКомпьютера = НРег(ПараметрыБлокировки.ИмяКомпьютера);
		СохраненноеИмяСервера = НРег(СтроковыеФункцииКлиентСервер.ПолучитьПараметрыИзСтроки(ПараметрыБлокировки.СтрокаСоединения).Srvr);
		Если ИмяБазы <> СохраненноеИмяБазы
			Или (ПараметрыБлокировки.ПроверятьИмяСервера
			И (ИмяКомпьютера <> СохраненноеИмяКомпьютера
			И ИмяСервера <> СохраненноеИмяСервера)) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Различаются имя информационной базы или имя компьютера.
					|Сохраненное имя базы: %1, текущее имя базы: %2.
					|Сохраненное имя компьютера: %3, текущее имя компьютера: %4'"),
				СохраненноеИмяБазы, ИмяБазы, СохраненноеИмяКомпьютера, ИмяКомпьютера);
			УстановитьПризнакНеобходимостиПринятияРешенияОБлокировке(ПараметрыБлокировки, ТекстСообщения);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак установленной блокировки работы с внешними ресурсами.
//
// Возвращаемое значение:
//   Булево   - Истина, если работа с внешними ресурсами заблокирована.
//
Функция РаботаСВнешнимиРесурсамиЗаблокирована() Экспорт
	
	Возврат ПараметрыСеанса.РаботаСВнешнимиРесурсамиЗаблокирована;
	
КонецФункции

// Инициализирует константу ПараметрыБлокировкиРаботыСВнешнимиРесурсами.
//
Процедура ИнициализироватьПараметрыБлокировкиРаботыСВнешнимиРесурсами(РаботаСВнешнимиРесурсамиЗаблокирована = Ложь)
	
	ПараметрыБлокировки = ПараметрыБлокировкиРаботыСВнешнимиРесурсами(РаботаСВнешнимиРесурсамиЗаблокирована, Истина);
	ХранилищеЗначения = Новый ХранилищеЗначения(ПараметрыБлокировки);
	Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.Установить(ХранилищеЗначения);
	
КонецПроцедуры

Процедура ОбновитьПараметрыБлокировкиРаботыСВнешнимиРесурсами() Экспорт
	
	ПараметрыБлокировки = Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.Получить().Получить();
	
	Если ПараметрыБлокировки = Неопределено Тогда
		ИнициализироватьПараметрыБлокировкиРаботыСВнешнимиРесурсами();
	Иначе
		РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
		ПараметрыБлокировки.Вставить("РазделениеВключено", РазделениеВключено);
		Если РазделениеВключено Тогда
			ПараметрыБлокировки.Вставить("СтрокаСоединения", "");
			ПараметрыБлокировки.Вставить("ИмяКомпьютера", "");
		КонецЕсли;
		ХранилищеЗначения = Новый ХранилищеЗначения(ПараметрыБлокировки);
		Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.Установить(ХранилищеЗначения);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыБлокировкиРаботыСВнешнимиРесурсами(РаботаСВнешнимиРесурсамиЗаблокирована = Ложь,
	ИнициализироватьПараметрыБлокировки = Ложь) Экспорт
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединения);
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	ИдентификаторБазы = ?(ИнициализироватьПараметрыБлокировки, ИдентификаторФайловойБазы(ЭтоФайловаяБаза), "");
	
	ПараметрыБлокировки = Новый Структура;
	ПараметрыБлокировки.Вставить("РазделениеВключено", РазделениеВключено);
	ПараметрыБлокировки.Вставить("РаботаСВнешнимиРесурсамиЗаблокирована", РаботаСВнешнимиРесурсамиЗаблокирована);
	ПараметрыБлокировки.Вставить("ОтключенныеЗадания", Новый Массив);
	ПараметрыБлокировки.Вставить("ЭтоФайловаяБаза", ЭтоФайловаяБаза);
	ПараметрыБлокировки.Вставить("СтрокаСоединения", ?(РазделениеВключено, "", СтрокаСоединения));
	ПараметрыБлокировки.Вставить("ИмяКомпьютера", ?(РазделениеВключено, "", ИмяКомпьютера()));
	ПараметрыБлокировки.Вставить("ПроверятьИмяСервера", Истина);
	ПараметрыБлокировки.Вставить("ИдентификаторБазы", ИдентификаторБазы);
	
	Возврат ПараметрыБлокировки;
	
КонецФункции

#КонецОбласти