////////////////////////////////////////////////////////////////////////////////
// Подсистема "Дополнительные отчеты и обработки".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Подключает и возвращает имя, под которым подключен внешний отчет или обработка.
//   После подключения отчет или обработка регистрируется в программе под определенным именем,
//   используя которое можно создавать объект или открывать формы отчета или обработки.
//
// Параметры:
//   Ссылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - Подключаемая обработка.
//
// Возвращаемое значение: 
//   * Строка       - Имя подключенного отчета или обработки.
//   * Неопределено - Если передана некорректная ссылка.
//
// Важно:
//   Проверка функциональной опции "ИспользоватьДополнительныеОтчетыИОбработки"
//     должна выполняться вызывающим кодом.
//
Функция ПодключитьВнешнююОбработку(Ссылка) Экспорт
	
	СтандартнаяОбработка = Истина;
	Результат = Неопределено;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки\ПриПодключенииВнешнейОбработки");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		
		Обработчик.Модуль.ПриПодключенииВнешнейОбработки(Ссылка, СтандартнаяОбработка, Результат);
		
		Если Не СтандартнаяОбработка Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка корректности переданных параметров.
	Если ТипЗнч(Ссылка) <> Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") 
		Или Ссылка = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Подключение
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ИмяОбработки = ПолучитьИмяВременногоФайла();
		ХранилищеОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ХранилищеОбработки");
		ДвоичныеДанные = ХранилищеОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяОбработки);
		Возврат ИмяОбработки;
	#КонецЕсли
	
	Вид = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Вид");
	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		Или Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		Менеджер = ВнешниеОтчеты;
	Иначе
		Менеджер = ВнешниеОбработки;
	КонецЕсли;
	
	ПараметрыЗапуска = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "БезопасныйРежим, ХранилищеОбработки");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыЗапуска.ХранилищеОбработки.Получить());
	
	Если ПолучитьФункциональнуюОпцию("ИспользуютсяПрофилиБезопасности") Тогда
		
		БезопасныйРежим = РаботаВБезопасномРежимеСлужебный.РежимПодключенияВнешнегоМодуля(Ссылка);
		
		Если БезопасныйРежим = Неопределено Тогда
			БезопасныйРежим = Истина;
		КонецЕсли;
		
	Иначе
		
		БезопасныйРежим = ПолучитьФункциональнуюОпцию("СтандартныеПодсистемыВМоделиСервиса") Или ПараметрыЗапуска.БезопасныйРежим;
		
		Если БезопасныйРежим Тогда
			ЗапросРазрешений = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ДополнительныеОтчетыИОбработкиРазрешения.НомерСтроки,
				|	ДополнительныеОтчетыИОбработкиРазрешения.ВидРазрешения
				|ИЗ
				|	Справочник.ДополнительныеОтчетыИОбработки.Разрешения КАК ДополнительныеОтчетыИОбработкиРазрешения
				|ГДЕ
				|	ДополнительныеОтчетыИОбработкиРазрешения.Ссылка = &Ссылка");
			ЗапросРазрешений.УстановитьПараметр("Ссылка", Ссылка);
			ЕстьРазрешений = Не ЗапросРазрешений.Выполнить().Пустой();
			
			РежимСовместимости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "РежимСовместимостиРазрешений");
			Если РежимСовместимости = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_2_2
				И ЕстьРазрешений Тогда
				БезопасныйРежим = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьПримечание(Ссылка, НСтр("ru = 'Подключение, БезопасныйРежим = ""%1"".'"), БезопасныйРежим);
	
	ИмяОбработки = Менеджер.Подключить(АдресВоВременномХранилище, , БезопасныйРежим);
	
	Возврат ИмяОбработки;
	
КонецФункции

// Возвращает объект внешнего отчета или обработки.
//
// Параметры:
//   Ссылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - Подключаемый отчет или обработка.
//
// Возвращаемое значение: 
//   * ВнешняяОбработкаОбъект - Объект подключенной обработки.
//   * ВнешнийОтчетОбъект     - Объект подключенного отчета.
//   * Неопределено           - Если передана некорректная ссылка.
//
// Важно:
//   Проверка функциональной опции "ИспользоватьДополнительныеОтчетыИОбработки"
//     должна выполняться вызывающим кодом.
//
Функция ПолучитьОбъектВнешнейОбработки(Ссылка) Экспорт
	
	СтандартнаяОбработка = Истина;
	Результат = Неопределено;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки\ПриСозданииВнешнейОбработки");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		
		Обработчик.Модуль.ПриСозданииВнешнейОбработки(Ссылка, СтандартнаяОбработка, Результат);
		
		Если Не СтандартнаяОбработка Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	// Подключение
	ИмяОбработки = ПодключитьВнешнююОбработку(Ссылка);
	
	// Проверка корректности переданных параметров.
	Если ИмяОбработки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получение экземпляра объекта.
	Если Ссылка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		ИЛИ Ссылка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		Менеджер = ВнешниеОтчеты;
	Иначе
		Менеджер = ВнешниеОбработки;
	КонецЕсли;
	
	Возврат Менеджер.Создать(ИмяОбработки);
	
КонецФункции

// Установка параметров функциональных опций формы (требуется для формирования
//   командного интерфейса формы).
//
// Параметры:
//   Форма  - УправляемаяФорма
//   ТипФормы - Строка - Необязательный. "ФормаСписка" для форм списков и "ФормаОбъекта" для форм элементов.
//       См. также функции ТипФормыСписка() и ТипФормыОбъекта() общего модуля
//       ДополнительныеОтчетыИОбработкиКлиентСервер.
//
Процедура ПриСозданииНаСервере(Форма, ТипФормы = Неопределено) Экспорт
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	// Установка параметров формы для команд вызова дополнительных отчетов и обработок.
	Параметры = ДополнительныеОтчетыИОбработкиПовтИсп.ПараметрыФормыНазначаемогоОбъекта(Форма.ИмяФормы, ТипФормы);
	Если ТипЗнч(Параметры) <> Тип("ФиксированнаяСтруктура") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФункциональныхОпций = Новый Структура;
	ПараметрыФункциональныхОпций.Вставить("ДополнительныеОтчетыИОбработкиОбъектНазначения", Параметры.СсылкаРодителя);
	ПараметрыФункциональныхОпций.Вставить("ДополнительныеОтчетыИОбработкиТипФормы",         ?(ТипФормы = Неопределено, Параметры.ТипФормы, ТипФормы));
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФункциональныхОпций);
	
	Если Параметры.ВыводитьПодменюЗаполнениеОбъекта Тогда
		СформироватьПодменюКомандЗаполнения(Форма, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатную форму по внешнему источнику.
//
// Параметры:
//   ДополнительнаяОбработкаСсылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - внешняя обработка.
//   ПараметрыИсточника            - Структура - структура со свойствами:
//       * ИдентификаторКоманды - Строка - список макетов, перечисленных через запятую.
//       * ОбъектыНазначения    - Массив
//   КоллекцияПечатныхФорм - ТаблицаЗначений - см. описание процедуры Печать() в документации.
//   ОбъектыПечати         - СписокЗначений  - см. описание процедуры Печать() в документации.
//   ПараметрыВывода       - Структура       - см. описание процедуры Печать() в документации.
//
Процедура ПечатьПоВнешнемуИсточнику(ДополнительнаяОбработкаСсылка, ПараметрыИсточника, КоллекцияПечатныхФорм,
	ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	ВнешняяОбработкаОбъект = ПолучитьОбъектВнешнейОбработки(ДополнительнаяОбработкаСсылка);
	Если ВнешняяОбработкаОбъект = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Внешняя обработка ""%1"" (тип ""%2"") не обслуживается подсистемой ""%3""'"),
			Строка(ДополнительнаяОбработкаСсылка),
			Строка(ТипЗнч(ДополнительнаяОбработкаСсылка)),
			ДополнительныеОтчетыИОбработкиКлиентСервер.НаименованиеПодсистемы(Истина));
	КонецЕсли;
	
	КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(ПараметрыИсточника.ИдентификаторКоманды);
	ПараметрыВывода = УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода();
	ПараметрыВывода.Вставить("ДополнительнаяОбработкаСсылка", ДополнительнаяОбработкаСсылка);
	
	ВнешняяОбработкаОбъект.Печать(
		ПараметрыИсточника.ОбъектыНазначения,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
	
	// Проверим, все ли макеты были сформированы.
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		Если ПечатнаяФорма.ТабличныйДокумент = Неопределено Тогда
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В обработчике печати не был сформирован табличный документ для: %1'"),
				ПечатнаяФорма.ИмяМакета);
			ВызватьИсключение(ТекстСообщенияОбОшибке);
		КонецЕсли;
		
		ПечатнаяФорма.ТабличныйДокумент.КоличествоЭкземпляров = ПечатнаяФорма.Экземпляров;
	КонецЦикла;

КонецПроцедуры

// Формирует шаблон сведений о внешнем отчете или обработке для последующего заполнения.
//
// Параметры:
//   ВерсияБСП - Строка - Версия библиотеки стандартных подсистем, на которую рассчитывают механизмы внешнего объекта.
//       См. также СтандартныеПодсистемыСервер.ВерсияБиблиотеки().
//
// Возвращаемое значение:
//   ПараметрыРегистрации - Структура - Параметры внешнего объекта.
//       
//       * Вид - Строка - Вид внешнего объекта.
//           Для определения вида рекомендуется использовать функции
//           ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработки<ИмяВида>().
//           Также Вид можно указать явно:
//           ** "ПечатнаяФорма"
//           ** "ЗаполнениеОбъекта"
//           ** "СозданиеСвязанныхОбъектов"
//           ** "Отчет"
//           ** "ДополнительнаяОбработка"
//           ** "ДополнительныйОтчет".
//       
//       * Версия - Строка - Версия объекта.
//           Задается в формате: "<Старший номер>.<Младший номер>".
//       
//       * Назначение - Массив - Необязательный.
//           Объекты конфигурации, для которых предназначен этот объект.
//           ** Строка - Полное имя объекта метаданных.
//       
//       * Наименование - Строка - Необязательный. Представление для администратора (наименование элемента справочника).
//           Если не заполнено, то берется представление объекта метаданных внешнего объекта.
//       
//       * БезопасныйРежим - Булево - Необязательный. Признак подключения внешней обработки в безопасном режиме.
//           Значение по умолчанию Истина (обработка будет выполняться безопасно).
//           В безопасном режиме:
//             Игнорируется привилегированный режим.
//             Запрещены внешние по отношению к платформе 1С:Предприятия действия:
//               COM;
//               Загрузка внешних компонентов;
//               Запуск внешних приложений и команд операционной системы;
//               Доступ к файловой системе, кроме временных файлов;
//               Доступ к Интернету.
//       
//       * Разрешения - Массив - Необязательный.
//           Дополнительные разрешения, необходимые внешней обработке при работе в безопасном режиме.
//           ** ОбъектXDTO {http://www.1c.ru/1cFresh/ApplicationExtensions/Permissions/a.b.c.d}PermissionBase - Разрешение.
//               Для формирования описания разрешения рекомендуется использовать функции
//               РаботаВБезопасномРежиме.Разрешение<ВидРазрешения>(<ПараметрыРазрешения>).
//       
//       * Информация - Строка - Необязательный. Краткая информация по внешнему объекту.
//           В этом параметре для администратора рекомендуется указать описание возможностей внешнего объекта.
//           Если не заполнено, то берется комментарий объекта метаданных внешнего объекта.
//       
//       * ВерсияБСП - Строка - Необязательный. Версия библиотеки, на которую рассчитывают механизмы внешнего объекта.
//           Подробнее - см. СтандартныеПодсистемыСервер.ВерсияБиблиотеки().
//       
//       * ОпределитьНастройкиФормы - Булево - Необязательный.
//           Флажок тесной интеграции дополнительного отчета с общей формой отчета.
//           Позволяет переопределять некоторые настройки формы и подписываться на ее события.
//           Если Истина, тогда в модуле объекта отчета следует определить процедуру по шаблону:
//           
//           // Настройки общей формы отчета подсистемы "Варианты отчетов".
//           //
//           // Параметры:
//           //   Форма - УправляемаяФорма, Неопределено - Форма отчета или форма настроек отчета.
//           //       Неопределено когда вызов без контекста.
//           //   КлючВарианта - Строка, Неопределено - Имя предопределенного
//           //       или уникальный идентификатор пользовательского варианта отчета.
//           //       Неопределено когда вызов без контекста.
//           //   Настройки - Структура - см. возвращаемое значение
//           //       ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//           //
//           Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
//           	// Код процедуры.
//           КонецПроцедуры
//           
//           Внимание. Этот флажок работает только для дополнительных отчетов, подключенных к общей форме ФормаОтчета.
//           Подробнее см. в документации к подсистемам "Дополнительные отчеты и обработки" и "Варианты отчетов".
//       
//       * Команды - ТаблицаЗначений - Необязательный для отчетов. Настройки команд, поставляемых внешним объектом.
//           
//           ** Идентификатор - Строка - Внутреннее имя команды.
//               Для внешних печатных форм (когда Вид = "ПечатнаяФорма"):
//                 Идентификатор может содержать имена одной или нескольких команд печати,
//                 разделенных запятыми. Подробнее см. описание колонки Идентификатор
//                 в функции СоздатьКоллекциюКомандПечати() общего модуля УправлениеПечатью.
//           
//           ** Представление - Строка - Пользовательское представление команды.
//           
//           ** Использование - Строка - Тип команды.
//               Для определения рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>().
//               Шаблоны процедур - обработчиков команд описаны в комментариях к этим функциям.
//               
//               Также Использование можно определить явно:
//               *** "ВызовКлиентскогоМетода"
//               *** "ВызовСерверногоМетода"
//               *** "ЗаполнениеФормы"
//               *** "ОткрытиеФормы"
//               *** "СценарийВБезопасномРежиме".
//           
//           ** ПоказыватьОповещение - Булево - Истина = при запуске команды будет показано стандартное оповещение.
//               Не работает для команд по открытию формы (когда Использование = "ОткрытиеФормы").
//           
//           ** Модификатор - Строка - Дополнительная классификация команды.
//               Для внешних печатных форм (когда Вид = "ПечатнаяФорма"):
//                 *** "ПечатьMXL" - для печатных форм на основе табличных макетов.
//               Для загрузки данных из файла (когда Вид = "ПечатнаяФорма" и Использование = "ЗагрузкаДанныхИзФайла"):
//                 Модификатор является обязательным для заполнения
//                 и должен содержать полное имя объекта метаданных (справочника),
//                 для которого выполняется загрузка данных.
//           
//           ** Скрыть - Булево - Необязательный. Признак того, что это служебная команда.
//               Если установить в значение Истина, то команда скрывается в карточке дополнительного объекта.
//
Функция СведенияОВнешнейОбработке(ВерсияБСП = "") Экспорт
	ПараметрыРегистрации = Новый Структура;
	
	ПараметрыРегистрации.Вставить("Вид", "");
	ПараметрыРегистрации.Вставить("Версия", "0.0");
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование", Неопределено);
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Истина);
	ПараметрыРегистрации.Вставить("Информация", Неопределено);
	ПараметрыРегистрации.Вставить("ВерсияБСП", ВерсияБСП);
	ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	РеквизитыТабличнойЧасти = Метаданные.Справочники.ДополнительныеОтчетыИОбработки.ТабличныеЧасти.Команды.Реквизиты;
	
	ТаблицаКоманд = Новый ТаблицаЗначений;
	ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	ПараметрыРегистрации.Вставить("Разрешения", Новый Массив);
	
	Возврат ПараметрыРегистрации;
КонецФункции

// Выполняет назначаемую команду контекстно из формы объекта назначения.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма, из которой вызвана команда.
//   ИмяЭлемента - Строка - Имя команды формы, которая была нажата.
//   РезультатВыполнения - Структура - См. СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения().
//
// Описание:
//   Предназначена для вызова кодом этой подсистемы из формы элемента назначаемого объекта (например, справочника или
//   документа).
//
// Важно:
//   Проверка функциональной опции "ИспользоватьДополнительныеОтчетыИОбработки"
//     должна выполняться вызывающим кодом.
//
Процедура ВыполнитьНазначаемуюКомандуНаСервере(Форма, ИмяЭлемента, РезультатВыполнения) Экспорт
	
	ОписаниеКоманды = ОписаниеКомандыОбработки(ИмяЭлемента, 
		Форма.Команды.Найти("АдресКомандДополнительныхОбработокВоВременномХранилище").Действие);
	
	ВнешнийОбъект = ПолучитьОбъектВнешнейОбработки(ОписаниеКоманды.Ссылка);
	ИдентификаторКоманды = ОписаниеКоманды.Идентификатор;
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("ЭтаФорма", Форма);
	
	РезультатВыполнения = ВыполнитьКомандуВнешнегоОбъекта(ВнешнийОбъект, ИдентификаторКоманды, ПараметрыКоманды, Неопределено);
	
КонецПроцедуры

// Выполняет команду обработки и возвращает результат ее выполнения.
//
// Параметры:
//   ПараметрыКоманды - Структура - Параметры, с которыми выполняется команда.
//       * ДополнительнаяОбработкаСсылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - Элемент справочника.
//       * ИдентификаторКоманды - Строка - Имя выполняемой команды.
//       * ОбъектыНазначения    - Массив - Ссылки объектов, для которых выполняется обработка. Обязательный для
//                                         назначаемых обработок.
//       * РезультатВыполнения  - Структура - Необязательный. Дополняет возвращаемое значение.
//           См. СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения().
//   АдресРезультата - Строка - Необязательный. Адрес временного хранилища по которому будет размещен результат
//                              выполнения.
//
// Возвращаемое значение:
//   * Структура - Результат выполнения, который далее передается на клиент.
//   * Неопределено - Если был передан АдресРезультата.
//
// Важно:
//   Проверка функциональной опции "ИспользоватьДополнительныеОтчетыИОбработки"
//     должна выполняться вызывающим кодом.
//
Функция ВыполнитьКоманду(ПараметрыКоманды, АдресРезультата = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыКоманды.ДополнительнаяОбработкаСсылка) <> Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки")
		Или ПараметрыКоманды.ДополнительнаяОбработкаСсылка = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВнешнийОбъект = ПолучитьОбъектВнешнейОбработки(ПараметрыКоманды.ДополнительнаяОбработкаСсылка);
	
	ИдентификаторКоманды = ПараметрыКоманды.ИдентификаторКоманды;
	
	РезультатВыполнения = ВыполнитьКомандуВнешнегоОбъекта(ВнешнийОбъект, ИдентификаторКоманды, ПараметрыКоманды, АдресРезультата);
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Выполняет команду обработки напрямую из формы внешнего объекта и возвращает результат ее выполнения.
//   Пример использования - см. ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьКомандуВФоне().
//
// Параметры:
//   ИдентификаторКоманды - Строка - Имя команды как оно задано в функции СведенияОВнешнейОбработке() модуля объекта.
//   ПараметрыКоманды - Структура - Параметры выполнения команды.
//       См. ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьКомандуВФоне().
//   Форма - УправляемаяФорма - Форма, в которую необходимо вернуть результат.
//
// Возвращаемое значение:
//   РезультатВыполнения - Структура - См. СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения().
//
// Важно:
//   Проверка функциональной опции "ИспользоватьДополнительныеОтчетыИОбработки"
//     должна выполняться вызывающим кодом.
//
Функция ВыполнитьКомандуИзФормыВнешнегоОбъекта(ИдентификаторКоманды, ПараметрыКоманды, Форма) Экспорт
	
	ВнешнийОбъект = Форма.РеквизитФормыВЗначение("Объект");
	
	РезультатВыполнения = ВыполнитьКомандуВнешнегоОбъекта(ВнешнийОбъект, ИдентификаторКоманды, ПараметрыКоманды, Неопределено);
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Формирует список разделов, в которых доступна команда вызова дополнительных отчетов.
//
// Возвращаемое значение: 
//   Массив ОбъектМетаданных: Подсистема - Метаданные разделов, в которые выведен список команд дополнительных отчетов.
//
Функция РазделыДополнительныхОтчетов() Экспорт
	РазделыМетаданные = Новый Массив;
	
	ДополнительныеОтчетыИОбработкиПереопределяемый.ОпределитьРазделыСДополнительнымиОтчетами(РазделыМетаданные);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульОбработкиПанельАдминистрированияБСП = ОбщегоНазначения.ОбщийМодуль("Обработки.ПанельАдминистрированияБСП");
		МодульОбработкиПанельАдминистрированияБСП.ПриОпределенииРазделовСДополнительнымиОтчетами(РазделыМетаданные);
	КонецЕсли;
	
	Возврат РазделыМетаданные;
КонецФункции

// Формирует список разделов, в которых доступна команда вызова дополнительных обработок.
//
// Возвращаемое значение: 
//   Массив из ОбъектМетаданных: Подсистема - Метаданные разделов, в которые выведен список команд дополнительных
//   обработок.
//
Функция РазделыДополнительныхОбработок() Экспорт
	РазделыМетаданные = Новый Массив;
	
	ДополнительныеОтчетыИОбработкиПереопределяемый.ОпределитьРазделыСДополнительнымиОбработками(РазделыМетаданные);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульОбработкиПанельАдминистрированияБСП = ОбщегоНазначения.ОбщийМодуль("Обработки.ПанельАдминистрированияБСП");
		МодульОбработкиПанельАдминистрированияБСП.ПриОпределенииРазделовСДополнительнымиОбработками(РазделыМетаданные);
	КонецЕсли;
	
	Возврат РазделыМетаданные;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры используемые при обмене данными.

// Переопределяет стандартное поведение при загрузке данных.
//   Реквизит РегламентноеЗаданиеGUID табличной части Команды не переносится,
//   т.к. связан с регламентным заданием текущей базы.
//
Процедура ПриПолученииДополнительнойОбработки(ЭлементДанных, ПолучениеЭлемента) Экспорт
	
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		
		// Стандартную обработку не переопределяем.
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ДополнительныеОтчетыИОбработки")
		И ЭлементДанных.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка Тогда
		
		// Таблица уникальных идентификаторов регламентных заданий.
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Команды.Ссылка КАК Ссылка,
		|	Команды.Идентификатор КАК Идентификатор,
		|	Команды.РегламентноеЗаданиеGUID КАК РегламентноеЗаданиеGUID
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки.Команды КАК Команды
		|ГДЕ
		|	Команды.Ссылка = &Ссылка";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.Параметры.Вставить("Ссылка", ЭлементДанных.Ссылка);
		
		ИдентификаторыРегламентныхЗаданий = Запрос.Выполнить().Выгрузить();
		
		// Заполнение идентификаторов регламентных заданий в таблице команд из данных текущей БД.
		Для Каждого СтрокаКоманда Из ЭлементДанных.Команды Цикл
			Найденные = ИдентификаторыРегламентныхЗаданий.НайтиСтроки(Новый Структура("Идентификатор", СтрокаКоманда.Идентификатор));
			Если Найденные.Количество() = 0 Тогда
				СтрокаКоманда.РегламентноеЗаданиеGUID = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
			Иначе
				СтрокаКоманда.РегламентноеЗаданиеGUID = Найденные[0].РегламентноеЗаданиеGUID;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Объявляет служебные события подсистемы ДополнительныеОтчетыИОбработки:
//
// Серверные события:
//   ПриОбновленииПроизводственныхКалендарей.
//
// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия) Экспорт
	
	// СЕРВЕРНЫЕ СОБЫТИЯ.
	
	// Вызывается при определении наличия у текущего пользователя права на добавление дополнительного
	// отчета или обработки в область данных.
	//
	// Параметры:
	//  ДополнительнаяОбработка - СправочникОбъект.ДополнительныеОтчетыИОбработки, элемент справочника,
	//    который записывается пользователем.
	//  Результат - Булево, в этот параметр в данной процедуре устанавливается флаг наличия права,
	//  СтандартнаяОбработка - Булево, в этот параметр в данной процедуре устанавливается флаг выполнения
	//    стандартной обработки проверки права.
	//
	// Синтаксис:
	// Процедура ПриПроверкеПраваДобавления(Знач ДополнительнаяОбработка, Результат, СтандартнаяОбработка) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки\ПриПроверкеПраваДобавления");
	
	// Вызывается при проверке возможности загрузки дополнительного отчета или обработки из файла.
	//
	// Параметры:
	//  ДополнительнаяОбработка - СправочникСсылка.ДополнительныеОтчетыИОбработки,
	//  Результат - Булево, в этот параметр в данной процедуре устанавливается флаг наличия возможности
	//    загрузки дополнительного отчета или обработки из файла,
	//  СтандартнаяОбработка - Булево, в этот параметр в данной процедуре устанавливается флаг выполнения
	//    стандартной обработки проверки возможности загрузки дополнительного отчета или обработки из файла.
	//
	// Синтаксис:
	// Процедура ПриПроверкеВозможностиЗагрузкиОбработкиИзФайла(Знач ДополнительнаяОбработка, Результат, СтандартнаяОбработка) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки\ПриПроверкеВозможностиЗагрузкиОбработкиИзФайла");
	
	// Вызывается при проверке возможности выгрузки дополнительного отчета или обработки в файл.
	//
	// Параметры:
	//  ДополнительнаяОбработка - СправочникСсылка.ДополнительныеОтчетыИОбработки,
	//  Результат - Булево, в этот параметр в данной процедуре устанавливается флаг наличия возможности
	//    выгрузки дополнительного отчета или обработки в файл,
	//  СтандартнаяОбработка - Булево, в этот параметр в данной процедуре устанавливается флаг выполнения
	//    стандартной обработки проверки возможности выгрузки дополнительного отчета или обработки в файл.
	//
	// Синтаксис:
	// Процедура ПриПроверкеВозможностиВыгрузкиОбработкиВФайл(Знач ДополнительнаяОбработка, Результат, СтандартнаяОбработка) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки\ПриПроверкеВозможностиВыгрузкиОбработкиВФайл");
	
	// Вызывается при проверке необходимости отображения расширенной информации о дополнительных
	// отчетах и обработках в пользовательском интерфейсе.
	//
	// Параметры:
	//  ДополнительнаяОбработка - СправочникСсылка.ДополнительныеОтчетыИОбработки,
	//  Результат - Булево, в этот параметр в данной процедуре устанавливается флаг наличия необходимости
	//    отображения расширенной информации о дополнительных отчетах и обработках в пользовательском
	//    интерфейсе.
	//  СтандартнаяОбработка - Булево, в этот параметр в данной процедуре устанавливается флаг выполнения
	//    стандартной обработки проверки наличия необходимости отображения расширенной информации о
	//    дополнительных отчетах и обработках в пользовательском интерфейсе.
	//
	// Синтаксис:
	// Процедура ПриПроверкеНеобходимостиОтображенияРасширеннойИнформации(Знач ДополнительнаяОбработка, Результат, СтандартнаяОбработка) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки\ПриПроверкеНеобходимостиОтображенияРасширеннойИнформации");
	
	// Заполняет виды публикации дополнительных отчетов и обработок, недоступные для использования
	// в текущей модели информационной базы.
	//
	// Параметры:
	//  НедоступныеВидыПубликации - Массив строк.
	//
	// Синтаксис:
	// Процедура ПриЗаполненииНедоступныхВидовПубликации(Знач НедоступныеВидыПубликации) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки\ПриЗаполненииНедоступныхВидовПубликации");

	// Вызывается из события ПередЗаписью справочника.
	// ДополнительныеОтчетыИОбработки, выполняет проверку правомерности изменения реквизитов
	// элементов данного справочника для дополнительных обработок, полученных из
	// каталога дополнительных обработок менеджера сервиса.
	//
	// Параметры:
	//  Источник - СправочникОбъект.ДополнительныеОтчетыИОбработки,
	//  Отказ - булево, флаг отказа от выполнения записи элемента справочника.
	//
	// Синтаксис:
	// Процедура ПередЗаписьюДополнительнойОбработки(Знач Источник, Отказ) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки\ПередЗаписьюДополнительнойОбработки");
		
	// Вызывается из события ПередУдалением справочника.
	// ДополнительныеОтчетыИОбработки.
	//
	// Параметры:
	//  Источник - СправочникОбъект.ДополнительныеОтчетыИОбработки,
	//  Отказ - булево, флаг отказа от выполнения удаления элемента справочника из информационной базы.
	//
	// Синтаксис:
	// Процедура ПередУдалениемДополнительнойОбработки(Знач Источник, Отказ) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки\ПередУдалениемДополнительнойОбработки");
	
	// Вызывается при получении регистрационных данных для нового дополнительного отчета
	// или обработки.
	//
	// Параметры:
	//  Объект - СправочникОбъект.ДополнительныеОтчетыИОбработки
	//  РегистрационныеДанные - Структура, аналогичная структуре, возвращаемой экспортируемой функцией.
	//  	СведенияОВнешнейОбработке() внешних обработок.
	//  СтандартнаяОбработка - Булево.
	//
	// Синтаксис:
	// Процедура ПриПолученииРегистрационныхДанных(Знач Объект, РегистрационныеДанные, СтандартнаяОбработка) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки\ПриПолученииРегистрационныхДанных");
	
	// Вызывается при подключении внешней обработки.
	//
	// Параметры:
	//  Ссылка - СправочникСсылка.ДополнительныеОтчетыИОбработки,
	//  СтандартнаяОбработка - Булево, флаг необходимости выполнения стандартной обработки подключения
	//    внешней обработки,
	//  Результат - Строка - имя подключенного внешнего отчета или обработки (в том случае, если в обработчике
	//    для параметра СтандартнаяОбработка было установлено значение Ложь).
	//
	// Синтаксис:
	// Процедура ПриПодключенииВнешнейОбработки(Знач Ссылка, СтандартнаяОбработка, Результат) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки\ПриПодключенииВнешнейОбработки");
	
	// Вызывается при создании объекта внешней обработки.
	//
	// Параметры:
	//  Ссылка - СправочникСсылка.ДополнительныеОтчетыИОбработки,
	//  СтандартнаяОбработка - Булево, флаг необходимости выполнения стандартной обработки подключения
	//    внешней обработки,
	//  Результат - ВнешняяОбработкаОбъект, ВнешнийОтчетОбъект - объект подключенного внешнего отчета или
	//    обработки (в том случае, если в обработчике для параметра СтандартнаяОбработка было установлено значение Ложь).
	//
	// Синтаксис:
	// Процедура ПриСозданииВнешнейОбработки(Знач Ссылка, СтандартнаяОбработка, Результат) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки\ПриСозданииВнешнейОбработки");
	
	// Вызывается при получении разрешений сессии безопасного режима.
	//
	// Параметры:
	//  КлючСессии - УникальныйИдентификатор,
	//  ОписанияРазрешений - ТаблицаЗначений:
	//    * ВидРазрешения - Строка,
	//    * Параметры - ХранилищеЗначения,
	//  СтандартнаяОбработка - Булево, флаг необходимости выполнения стандартной обработки.
	//
	// Синтаксис:
	// Процедура ПриПолученииРазрешенийСессииБезопасногоРежима(Знач КлючСессии, ОписанияРазрешений, СтандартнаяОбработка) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки\ПриПолученииРазрешенийСессииБезопасногоРежима");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Добавление обработчиков служебных событий (подписок).

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	СерверныйМодуль = "ДополнительныеОтчетыИОбработки";
	
	Событие = "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления";
	СерверныеОбработчики[Событие].Добавить(СерверныйМодуль);
	
	Событие = "СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтПодчиненного";
	СерверныеОбработчики[Событие].Добавить(СерверныйМодуль);
	
	Событие = "СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтГлавного";
	СерверныеОбработчики[Событие].Добавить(СерверныйМодуль);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела") Тогда
		Событие = "СтандартныеПодсистемы.ТекущиеДела\ПриЗаполненииСпискаТекущихДел";
		СерверныеОбработчики[Событие].Добавить(СерверныйМодуль);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Событие = "СтандартныеПодсистемы.УправлениеДоступом\ПриЗаполненииВидовДоступа";
		СерверныеОбработчики[Событие].Добавить(СерверныйМодуль);
		
		Событие = "СтандартныеПодсистемы.УправлениеДоступом\ПриЗаполненииИспользованияВидаДоступа";
		СерверныеОбработчики[Событие].Добавить(СерверныйМодуль);
		
		Событие = "СтандартныеПодсистемы.УправлениеДоступом\ПриЗаполненииВидовОграниченийПравОбъектовМетаданных";
		СерверныеОбработчики[Событие].Добавить(СерверныйМодуль);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий.

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления().
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.1";
	Обработчик.Процедура = "ДополнительныеОтчетыИОбработки.ОбновитьПользовательскиеНастройкиДоступаКОбработкам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.4";
	Обработчик.Процедура = "ДополнительныеОтчетыИОбработки.ЗаполнитьИменаОбъектов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.3.2";
	Обработчик.Процедура = "ДополнительныеОтчетыИОбработки.ЗаменитьИменаОбъектовМетаданныхНаСсылки";
	
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.ВыполнятьВГруппеОбязательных = Истина;
		Обработчик.ОбщиеДанные                  = Истина;
		Обработчик.УправлениеОбработчиками      = Ложь;
		Обработчик.МонопольныйРежим             = Истина;
		Обработчик.Версия    = "2.1.3.22";
		Обработчик.Процедура = "ДополнительныеОтчетыИОбработки.ВключитьФункциональнуюОпцию";
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.25";
	Обработчик.Процедура = "ДополнительныеОтчетыИОбработки.ЗаполнитьРежимСовместимостиРазрешений";
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//   См. описание обработчика события ПриПолученииДанныхОтПодчиненного() в синтакс-помощнике.
//
Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ПриПолученииДополнительнойОбработки(ЭлементДанных, ПолучениеЭлемента);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//   См. описание обработчика события ПриПолученииДанныхОтГлавного() в синтакс-помощнике.
//
Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ПриПолученииДополнительнойОбработки(ЭлементДанных, ПолучениеЭлемента);
	
КонецПроцедуры

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	// В коробке.
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	// Есть права на данные справочника.
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если Не ПравоДоступа("Редактирование", Метаданные.Справочники.ДополнительныеОтчетыИОбработки)
		Или МодульТекущиеДелаСервер.ДелоОтключено("ДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	// Есть раздел "Администрирование".
	Подсистема = Метаданные.Подсистемы.Найти("Администрирование");
	Если Подсистема = Неопределено
		Или Не ПравоДоступа("Просмотр", Подсистема)
		Или Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Подсистема) Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиДело = Истина;
	ПровереноНаВерсию = ХранилищеОбщихНастроек.Загрузить("ТекущиеДела", "ДополнительныеОтчетыИОбработки");
	Если ПровереноНаВерсию <> Неопределено Тогда
		ВерсияМассив  = СтрРазделить(Метаданные.Версия, ".", Истина);
		ТекущаяВерсия = ВерсияМассив[0] + ВерсияМассив[1] + ВерсияМассив[2];
		Если ПровереноНаВерсию = ТекущаяВерсия Тогда
			ВывестиДело = Ложь; // Дополнительные отчеты и обработки проверены на текущей версии.
		КонецЕсли;
	КонецЕсли;
	
	КоличествоДополнительныхОтчетовИОбработок = КоличествоДополнительныхОтчетовИОбработок();
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор = "ДополнительныеОтчетыИОбработки";
	Дело.ЕстьДела      = ВывестиДело И КоличествоДополнительныхОтчетовИОбработок > 0;
	Дело.Представление = НСтр("ru = 'Дополнительные отчеты и обработки'");
	Дело.Количество    = КоличествоДополнительныхОтчетовИОбработок;
	Дело.Форма         = "Справочник.ДополнительныеОтчетыИОбработки.Форма.ПроверкаДополнительныхОтчетовИОбработок";
	Дело.Владелец      = "ПроверитьСовместимостьСТекущейВерсией";
	
	// Проверка наличия группы дела. Если группа отсутствует - добавляем.
	ГруппаДела = ТекущиеДела.Найти("ПроверитьСовместимостьСТекущейВерсией", "Идентификатор");
	Если ГруппаДела = Неопределено Тогда
		ГруппаДела = ТекущиеДела.Добавить();
		ГруппаДела.Идентификатор = "ПроверитьСовместимостьСТекущейВерсией";
		ГруппаДела.ЕстьДела      = Дело.ЕстьДела;
		ГруппаДела.Представление = НСтр("ru = 'Проверить совместимость'");
		Если Дело.ЕстьДела Тогда
			ГруппаДела.Количество = Дело.Количество;
		КонецЕсли;
		ГруппаДела.Владелец = Подсистема;
	Иначе
		Если Не ГруппаДела.ЕстьДела Тогда
			ГруппаДела.ЕстьДела = Дело.ЕстьДела;
		КонецЕсли;
		
		Если Дело.ЕстьДела Тогда
			ГруппаДела.Количество = ГруппаДела.Количество + Дело.Количество;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет виды доступа, используемые в ограничениях прав доступа.
// Виды доступа Пользователи и ВнешниеПользователи уже заполнены.
// Их можно удалить, если они не требуются для ограничения прав доступа.
//
// Параметры:
//  ВидыДоступа - ТаблицаЗначений - с колонками:
//   * Имя                    - Строка - имя используемое в описании поставляемых
//                                       профилей групп доступа и текстах ОДД.
//   * Представление          - Строка - представляет вид доступа в профилях и группах доступа.
//   * ТипЗначений            - Тип    - тип ссылки значений доступа.
//                                       Например, Тип("СправочникСсылка.Номенклатура").
//   * ТипГруппЗначений       - Тип    - тип ссылки групп значений доступа.
//                                       Например, Тип("СправочникСсылка.ГруппыДоступаНоменклатуры").
//   * НесколькоГруппЗначений - Булево - Истина указывает, что для значения доступа (Номенклатуры), можно
//                                       выбрать несколько групп значений (Групп доступа номенклатуры).
//
Процедура ПриЗаполненииВидовДоступа(ВидыДоступа) Экспорт
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "ДополнительныеОтчетыИОбработки";
	ВидДоступа.Представление = НСтр("ru = 'Дополнительные отчеты и обработки'");
	ВидДоступа.ТипЗначений   = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки");
	
КонецПроцедуры

// Заполняет использование видов доступа в зависимости от функциональных опций конфигурации,
// например, ИспользоватьГруппыДоступаНоменклатуры.
//
// Параметры:
//  ВидДоступа    - Строка - имя вида доступа заданное в процедуре ПриЗаполненииВидовДоступа.
//  Использование - Булево - начальное значение Истина.
// 
Процедура ПриЗаполненииИспользованияВидаДоступа(ИмяВидаДоступа, Использование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИмяВидаДоступа = "ДополнительныеОтчетыИОбработки" Тогда
		Использование = Константы.ИспользоватьДополнительныеОтчетыИОбработки.Получить();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет состав видов доступа, используемых при ограничении прав объектов метаданных.
// Если состав видов доступа не заполнен, отчет "Права доступа" покажет некорректные сведения.
//
// Обязательно требуется заполнить только виды доступа, используемые
// в шаблонах ограничения доступа явно, а виды доступа, используемые
// в наборах значений доступа могут быть получены из текущего состояния
// регистра сведений НаборыЗначенийДоступа.
//
//  Для автоматической подготовки содержимого процедуры следует
// воспользоваться инструментами разработчика для подсистемы.
// Управление доступом.
//
// Параметры:
//  Описание     - Строка, многострочная строка формата <Таблица>.<Право>.<ВидДоступа>[.Таблица объекта].
//                 Например, Документ.ПриходнаяНакладная.Чтение.Организации
//                           Документ.ПриходнаяНакладная.Чтение.Контрагенты
//                           Документ.ПриходнаяНакладная.Изменение.Организации
//                           Документ.ПриходнаяНакладная.Изменение.Контрагенты
//                           Документ.ЭлектронныеПисьма.Чтение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.ЭлектронныеПисьма.Изменение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.Файлы.Чтение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Чтение.Объект.Документ.ЭлектронноеПисьмо
//                           Документ.Файлы.Изменение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Изменение.Объект.Документ.ЭлектронноеПисьмо
//                 Вид доступа Объект предопределен, как литерал. Этот вид доступа используется в
//                 шаблонах ограничений доступа, как "ссылка" на другой объект, по которому
//                 ограничивается текущий объект таблицы.
//                 Когда вид доступа "Объект" задан, также требуется задать типы таблиц,
//                 которые используются для этого вида доступа. Т.е. перечислить типы,
//                 которые соответствуют полю, использованному в шаблоне ограничения доступа
//                 в паре с видом доступа "Объект". При перечислении типов по виду доступа "Объект"
//                 нужно перечислить только те типы поля, которые есть у поля.
//                 РегистрыСведений.НаборыЗначенийДоступа.Объект, остальные типы лишние.
// 
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
	Если МодульУправлениеДоступомСлужебный.ВидДоступаСуществует("ДополнительныеОтчетыИОбработки") Тогда
		
		Описание = Описание + "
		|
		|Справочник.ДополнительныеОтчетыИОбработки.Чтение.ДополнительныеОтчетыИОбработки
		|";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов.

// Получает ссылку дополнительного отчета, если он подключен к хранилищу подсистемы Варианты отчетов.
//
// Параметры:
//   ОтчетИнформация - Структура - См. ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени().
//
Процедура ПриОпределенииТипаИСсылкиЕслиОтчетДополнительный(ОтчетИнформация) Экспорт
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК Таблица
	|ГДЕ
	|	Таблица.ИмяОбъекта = &ИмяОбъекта
	|	И Таблица.ПометкаУдаления = ЛОЖЬ
	|	И Таблица.ИспользуетХранилищеВариантов = ИСТИНА
	|	И Таблица.Вид В (&ВидДополнительныйОтчет, &ВидОтчет)
	|	И Таблица.Публикация = &ПубликацияИспользуется";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОбъекта", ОтчетИнформация.ОтчетИмя);
	Запрос.УстановитьПараметр("ВидОтчет",               Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет);
	Запрос.УстановитьПараметр("ВидДополнительныйОтчет", Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет);
	Запрос.УстановитьПараметр("ПубликацияИспользуется", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется);
	Если ОтчетИнформация.ПоУмолчаниюВсеПодключеныКХранилищу Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Таблица.ИспользуетХранилищеВариантов = ИСТИНА", "");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	// Необходим для целостности формируемых данных. Права доступа будут применяться на этапе их использования.
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОтчетИнформация.Отчет = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Дополняет массив ссылкам дополнительных отчетов, доступных текущему пользователю.
//
// Параметры:
//   Результат - Массив из <см. Справочники.ВариантыОтчетов.Реквизиты.Отчет> -
//       Ссылки отчетов, доступных текущему пользователю.
//
// Места использования:
//   ВариантыОтчетов.ОтчетыТекущегоПользователя().
//
Процедура ПриДобавленииДополнительныхОтчетовДоступныхТекущемуПользователю(ДоступныеОтчеты) Экспорт
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Таблица.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК Таблица
	|ГДЕ
	|	Таблица.ИспользуетХранилищеВариантов
	|	И Таблица.Вид В (&ВидДополнительныйОтчет, &ВидОтчет)
	|	И НЕ Таблица.Ссылка В (&ДоступныеОтчеты)";
	
	Запрос.УстановитьПараметр("ДоступныеОтчеты", ДоступныеОтчеты);
	Запрос.УстановитьПараметр("ВидОтчет",               Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет);
	Запрос.УстановитьПараметр("ВидДополнительныйОтчет", Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДоступныеОтчеты.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Подключает отчет подсистемы "Дополнительные отчеты и обработки".
//   Обработка исключений производится управляющим кодом.
//
// Параметры:
//   Ссылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - Отчет, который необходимо инициализировать.
//   ПараметрыОтчета - Структура - Набор параметров, получаемый в процессе проверки и подключения отчета.
//       См. РассылкаОтчетов.ИнициализироватьОтчет().
//   Результат - Булево, Неопределено - Результат подключения.
//       Истина - Удалось подключить дополнительный отчет.
//       Ложь   - Не удалось подключить дополнительный отчет.
//
// Места использования:
//   ВариантыОтчетов.ПодключитьОтчетОбъект().
//   РассылкаОтчетов.ИнициализироватьОтчет().
//
Процедура ПриПодключенииДопОтчета(Ссылка, ПараметрыОтчета, Результат, ПолучатьМетаданные) Экспорт
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		ПараметрыОтчета.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Элемент ""%1"" не подключен, потому что подсистема ""%2"" отключена в настройках программы.
			|Для включения подсистемы обратитесь к администратору программы.'"),
			"'"+ Строка(Ссылка) +"'",
			ДополнительныеОтчетыИОбработкиКлиентСервер.НаименованиеПодсистемы(Истина));
		Возврат;
	КонецЕсли;
	
	Вид = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Вид");
	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		ИЛИ Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		
		Попытка
			ПараметрыОтчета.Имя = ПодключитьВнешнююОбработку(Ссылка);
			ПараметрыОтчета.Объект = ВнешниеОтчеты.Создать(ПараметрыОтчета.Имя);
			Если ПолучатьМетаданные Тогда
				ПараметрыОтчета.Метаданные = ПараметрыОтчета.Объект.Метаданные();
			КонецЕсли;
			Результат = Истина;
		Исключение
			ПараметрыОтчета.ТекстОшибки = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При подключении дополнительного отчета ""%1"" возникла ошибка:'"), Строка(Ссылка))
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Результат = Ложь;
		КонецПопытки;
		
	Иначе
		
		ПараметрыОтчета.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Элемент %1 не является дополнительным отчетом'"),
			"'"+ Строка(Ссылка) +"'");
		
		Результат = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Подключает отчет подсистемы "Дополнительные отчеты и обработки".
//   Обработка исключений производится управляющим кодом.
//
// Параметры:
//   Контекст - Структура - Набор параметров, получаемый в процессе проверки и подключения отчета.
//       См. ВариантыОтчетов.ПриПодключенииОтчета().
//
// Места использования:
//   ВариантыОтчетов.ПриПодключенииОтчета().
//
Процедура ПриПодключенииОтчета(Контекст) Экспорт
	Ссылка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Контекст, "Отчет");
	Если ТипЗнч(Ссылка) <> Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
		Текст    = НСтр("ru = 'Не указан отчет'");
		Подробно = НСтр("ru = 'В процедуру ""ДополнительныеОтчетыИОбработки.ПриПодключенииОтчета"" не передан отчет.'");
		СтандартныеПодсистемыКлиентСервер.ВывестиПредупреждение(Контекст, Текст, Подробно);
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Текст    = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет ""%1"" не подключен'"), Строка(Ссылка));
		Подробно = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Подсистема ""%2"" отключена в настройках программы.
			|Для включения подсистемы обратитесь к администратору программы.'"),
			ДополнительныеОтчетыИОбработкиКлиентСервер.НаименованиеПодсистемы(Истина));
		СтандартныеПодсистемыКлиентСервер.ВывестиПредупреждение(Контекст, Текст, Подробно);
		Возврат;
	КонецЕсли;
	
	Вид = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Вид");
	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		Или Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		
		ИнформацияОбОшибке = Неопределено;
		Попытка
			Контекст.ИмяОтчета = ПодключитьВнешнююОбработку(Ссылка);
			Контекст.Подключен = Истина;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
		КонецПопытки;
		
		Если ИнформацияОбОшибке <> Неопределено Тогда
			Текст    = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет ""%1"" не подключен'"), Строка(Ссылка));
			Подробно = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			СтандартныеПодсистемыКлиентСервер.ВывестиПредупреждение(Контекст, Текст, Подробно);
		КонецЕсли;
		
	Иначе
		
		СтандартныеПодсистемыКлиентСервер.ВывестиПредупреждение(Контекст,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Объект ""%1"" не является дополнительным отчетом'"), Строка(Ссылка)));
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет список команд печати внешними печатными формами.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - См. УправлениеПечатью.СоздатьКоллекциюКомандПечати().
//   ИмяОбъекта    - Строка          - Полное имя объекта метаданных, для которого необходимо получить список
//                                     команд печати.
//
// Места использования:
//   УправлениеПечатью.КомандыПечатиФормы().
//
Процедура ПриПолученииКомандПечати(КомандыПечати, ИмяОбъекта) Экспорт
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапросПоДоступнымКомандам(Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма, ИмяОбъекта);
	ТаблицаКоманд = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаКоманд.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаКоманд Цикл
		КомандаПечати = КомандыПечати.Добавить();
		
		// Обязательные параметры.
		ЗаполнитьЗначенияСвойств(КомандаПечати, СтрокаТаблицы, "Идентификатор, Представление");
		// Параметры, идентифицирующие подсистему.
		КомандаПечати.МенеджерПечати = "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки";
		
		// Дополнительные параметры.
		КомандаПечати.ДополнительныеПараметры = Новый Структура("Ссылка, Модификатор, ВариантЗапуска, ПоказыватьОповещение");
		ЗаполнитьЗначенияСвойств(КомандаПечати.ДополнительныеПараметры, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список печатных форм из внешних источников.
//
// Параметры:
//   ВнешниеПечатныеФормы - СписокЗначений - Печатные формы.
//       Значение      - Строка - Идентификатор печатной формы.
//       Представление - Строка - Название печатной формы.
//   ПолноеИмяОбъектаМетаданных - Строка - Полное имя объекта метаданных,
//       для которого требуется получить список печатных форм.
//
// Места использования:
//   УправлениеПечатью.ПриПолученииСпискаВнешнихПечатныхФорм().
//
Процедура ПриПолученииСпискаВнешнихПечатныхФорм(ВнешниеПечатныеФормы, ПолноеИмяОбъектаМетаданных) Экспорт
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапросПоДоступнымКомандам(Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма, ПолноеИмяОбъектаМетаданных);
	
	ТаблицаКоманд = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Команда Из ТаблицаКоманд Цикл
		Если СтрНайти(Команда.Идентификатор, ",") = 0 Тогда // кроме "комплектов"
			ВнешниеПечатныеФормы.Добавить(Команда.Идентификатор, Команда.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает ссылку на объект внешней печатной формы.
//
// Места использования:
//   УправлениеПечатью.ПриПолученииВнешнейПечатнойФормы().
//
Процедура ПриПолученииВнешнейПечатнойФормы(Идентификатор, ПолноеИмяОбъектаМетаданных, ВнешняяПечатнаяФормаСсылка) Экспорт
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапросПоДоступнымКомандам(Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма, ПолноеИмяОбъектаМетаданных);
	
	ТаблицаКоманд = Запрос.Выполнить().Выгрузить();
	
	Команда = ТаблицаКоманд.Найти(Идентификатор, "Идентификатор");
	Если Команда <> Неопределено Тогда 
		ВнешняяПечатнаяФормаСсылка = Команда.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// См. одноименную процедуру в общем модуле ПользователиПереопределяемый.
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	// СовместноДляПользователейИВнешнихПользователей.
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(
		Метаданные.Роли.ИспользованиеДополнительныхОтчетовИОбработок.Имя);
	
КонецПроцедуры

// См. одноименную процедуру в общем модуле ПользователиПереопределяемый.
Процедура ПриПолученииПрочихНастроек(СведенияОПользователе, Настройки) Экспорт
	
	// Получает настройки дополнительных отчетов и обработок для переданного пользователя.
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	// Название строки настроек, отображаемое в дереве настроек обработки.
	НазваниеНастройки = НСтр("ru = 'Настройки быстрого доступа к дополнительным отчетам и обработкам'");
	
	// Картинка строки настроек
	КартинкаНастройки = "";
	
	// Список дополнительных отчетов и обработок, находящихся в быстром доступе у пользователя.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПользовательскиеНастройкиДоступаКОбработкам.ДополнительныйОтчетИлиОбработка КАК Объект,
	|	ПользовательскиеНастройкиДоступаКОбработкам.ИдентификаторКоманды КАК Идентификатор,
	|	ПользовательскиеНастройкиДоступаКОбработкам.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам КАК ПользовательскиеНастройкиДоступаКОбработкам
	|ГДЕ
	|	Пользователь = &Пользователь";
	
	Запрос.Параметры.Вставить("Пользователь", СведенияОПользователе.ПользовательСсылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	НастройкаБыстрогоДоступа = Новый Структура;
	НастройкаБыстрогоДоступа.Вставить("НазваниеНастройки", НазваниеНастройки);
	НастройкаБыстрогоДоступа.Вставить("КартинкаНастройки", КартинкаНастройки);
	НастройкаБыстрогоДоступа.Вставить("СписокНастроек",    РезультатЗапроса);
	
	Настройки.Вставить("НастройкаБыстрогоДоступа", НастройкаБыстрогоДоступа);
	
КонецПроцедуры

// См. одноименную процедуру в общем модуле ПользователиПереопределяемый.
Процедура ПриСохраненииПрочихНастроек(СведенияОПользователе, Настройки) Экспорт
	
	// Сохраняет команды дополнительных отчетов и обработок указанным пользователям.
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	Если Настройки.ИдентификаторНастройки <> "НастройкаБыстрогоДоступа" Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСтрока Из Настройки.ЗначениеНастройки Цикл
		
		Запись = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьМенеджерЗаписи();
		
		Запись.ДополнительныйОтчетИлиОбработка  = ЭлементСтрока.Значение;
		Запись.ИдентификаторКоманды             = ЭлементСтрока.Представление;
		Запись.Пользователь                     = СведенияОПользователе.ПользовательСсылка;
		Запись.Доступно                         = Истина;
		
		Запись.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// См. одноименную процедуру в общем модуле ПользователиПереопределяемый.
Процедура ПриУдаленииПрочихНастроек(СведенияОПользователе, Настройки) Экспорт
	
	// Очищает команды дополнительных отчетов и обработок у указанного пользователя.
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	Если Настройки.ИдентификаторНастройки <> "НастройкаБыстрогоДоступа" Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСтрока Из Настройки.ЗначениеНастройки Цикл
		
		Запись = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьМенеджерЗаписи();
		
		Запись.ДополнительныйОтчетИлиОбработка  = ЭлементСтрока.Значение;
		Запись.ИдентификаторКоманды             = ЭлементСтрока.Представление;
		Запись.Пользователь                     = СведенияОПользователе.ПользовательСсылка;
		
		Запись.Прочитать();
		
		Запись.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет отчеты подсистемы "Дополнительные отчеты и обработки",
//   в модулях объектов которых есть процедура ОпределитьНастройкиФормы().
//
// Параметры:
//   ОтчетыСНастройками - Массив - Ссылки отчетов, в модулях объектов которых есть процедура ОпределитьНастройкиФормы().
//
// Места использования:
//   ВариантыОтчетовПовтИсп.Параметры().
//
Процедура ПриОпределенииОтчетовСНастройками(ОтчетыСНастройками) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеОтчетыИОбработки.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|ГДЕ
	|	ДополнительныеОтчетыИОбработки.ИспользуетХранилищеВариантов
	|	И ДополнительныеОтчетыИОбработки.ТеснаяИнтеграцияСФормойОтчета
	|	И НЕ ДополнительныеОтчетыИОбработки.ПометкаУдаления
	|	И (ДополнительныеОтчетыИОбработки.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет)
	|			ИЛИ ДополнительныеОтчетыИОбработки.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхОтчетовИОбработок.Отчет))";
	
	УстановитьПривилегированныйРежим(Истина);
	ДопОтчетыСНастройками = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Для Каждого Ссылка Из ДопОтчетыСНастройками Цикл
		ОтчетыСНастройками.Добавить(Ссылка);
	КонецЦикла;
КонецПроцедуры

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность 
// редактирования реквизитов при групповом изменении.
//
// Параметры:
//   Объекты - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                            подключенного к подсистеме "Групповое изменение объектов". 
//                            Дополнительно в значении могут быть перечислены имена экспортных функций:
//                            "РеквизитыНеРедактируемыеВГрупповойОбработке",
//                            "РеквизитыРедактируемыеВГрупповойОбработке".
//                            Каждое имя должно начинаться с новой строки.
//                            Если указана пустая строка, значит в модуле менеджера определены обе функции.
//
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Справочники.ДополнительныеОтчетыИОбработки.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
КонецПроцедуры

// Определяет список объектов метаданных, к которым может быть применена назначаемая обработка переданного вида.
//
// Параметры:
//   Вид - ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок - Вид внешней обработки.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Описание объектов метаданных.
//       * Метаданные - ОбъектМетаданных - Объект метаданных, подключенный к данному виду.
//       * ПолноеИмя  - Строка - Полное имя объекта метаданных, например "Справочник.Валюты".
//       * Ссылка     - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Ссылка объекта метаданных.
//       * Вид        - Строка - Вид объекта метаданных.
//       * Представление       - Строка - Представление объекта метаданных.
//       * ПолноеПредставление - Строка - Представление имени и вида объекта метаданных.
//   Неопределено - Если передан некорректный Вид.
//
Функция ПодключенныеОбъектыМетаданных(Вид) Экспорт
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Метаданные");
	Результат.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	Результат.Колонки.Добавить("Вид", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПолноеПредставление", Новый ОписаниеТипов("Строка"));
	
	МассивТиповИлиМетаданных = Новый Массив;
	
	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта Тогда
		
		МассивТиповИлиМетаданных = Метаданные.ОбщиеКоманды.ЗаполнениеОбъекта.ТипПараметраКоманды.Типы();
		
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
		
		МассивТиповИлиМетаданных = Метаданные.ОбщиеКоманды.ОтчетыОбъекта.ТипПараметраКоманды.Типы();
		
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
			МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
			МассивТиповИлиМетаданных = МодульУправлениеПечатью.ИсточникиКомандПечати()
		Иначе
			Возврат Результат;
		КонецЕсли;
		
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов Тогда
		
		МассивТиповИлиМетаданных = Метаданные.ОбщиеКоманды.СозданиеСвязанныхОбъектов.ТипПараметраКоманды.Типы();
		
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка Тогда
		
		МассивТиповИлиМетаданных = РазделыДополнительныхОбработок();
		
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		
		МассивТиповИлиМетаданных = РазделыДополнительныхОтчетов();
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Для Каждого ТипИлиМетаданные Из МассивТиповИлиМетаданных Цикл
		Если ТипЗнч(ТипИлиМетаданные) = Тип("Тип") Тогда
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипИлиМетаданные);
			Если ОбъектМетаданных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			ОбъектМетаданных = ТипИлиМетаданные;
		КонецЕсли;
		
		СтрокаТаблицы = Результат.Добавить();
		СтрокаТаблицы.Метаданные = ОбъектМетаданных;
		
		Если ОбъектМетаданных = ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола() Тогда
			СтрокаТаблицы.ПолноеИмя = ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола();
			СтрокаТаблицы.Ссылка = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
			СтрокаТаблицы.Вид = "Подсистема";
			СтрокаТаблицы.Представление = НСтр("ru = 'Рабочий стол'");
		Иначе
			СтрокаТаблицы.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			СтрокаТаблицы.Ссылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
			СтрокаТаблицы.Вид = Лев(СтрокаТаблицы.ПолноеИмя, СтрНайти(СтрокаТаблицы.ПолноеИмя, ".") - 1);
			СтрокаТаблицы.Представление = ОбъектМетаданных.Представление();
		КонецЕсли;
		
		СтрокаТаблицы.ПолноеПредставление = СтрокаТаблицы.Представление + " (" + СтрокаТаблицы.Вид + ")";
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Формирует запрос для получения таблицы команд дополнительных отчетов или обработок.
//
// Параметры:
//   ВидОбработок - ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок - Вид обработки.
//   Размещение - СправочникСсылка.ИдентификаторыОбъектовМетаданных, Строка - Необязательный.
//       Объект метаданных (Ссылка или ПолноеИмя).
//       Для назначаемых обработок - справочника или документа.
//       Для глобальных обработок - подсистемы.
//   ЭтоФормаОбъекта - Булево - Необязательный.
//       Истина - для формы объекта.
//       Ложь - для формы списка.
//   ТипыКоманд - ПеречислениеСсылка.ВариантыПубликацииДополнительныхОтчетовИОбработок - Тип получаемых команд.
//       - Массив - Типы команд, которые необходимо получить.
//           * ПеречислениеСсылка.ВариантыПубликацииДополнительныхОтчетовИОбработок.
//
// Возвращаемое значение: 
//   ТаблицаЗначений - Команды дополнительных отчетов или обработок.
//       * Ссылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - Ссылка дополнительного отчета или обработки.
//       * Идентификатор - Строка - Идентификатор команды, как он задан разработчиком дополнительного объекта.
//       * ВариантЗапуска - ПеречислениеСсылка.СпособыВызоваДополнительныхОбработок -
//           Способ вызова команды дополнительного объекта.
//       * Представление - Строка - Наименование команды в пользовательском интерфейсе.
//       * ПоказыватьОповещение - Булево - Показывать оповещение пользователю после выполнения команды.
//       * Модификатор - Строка - Модификатор команды.
//
Функция НовыйЗапросПоДоступнымКомандам(ВидОбработок, Размещение, ЭтоФормаОбъекта = Неопределено, ТипыКоманд = Неопределено) Экспорт
	Запрос = Новый Запрос;
	
	Если ТипЗнч(Размещение) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		СсылкаРодителяИлиРаздела = Размещение;
	Иначе
		Если ЗначениеЗаполнено(Размещение) Тогда
			СсылкаРодителяИлиРаздела = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Размещение);
		Иначе
			СсылкаРодителяИлиРаздела = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если СсылкаРодителяИлиРаздела <> Неопределено Тогда // Есть фильтр по родителю.
		ЭтоГлобальныеОбработки = (
			ВидОбработок = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет
			ИЛИ ВидОбработок = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка);
		
		// Запросы принципиально отличаются для глобальных обработок и назначаемых.
		Если ЭтоГлобальныеОбработки Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	БыстрыйДоступ.ДополнительныйОтчетИлиОбработка КАК Ссылка,
			|	БыстрыйДоступ.ИдентификаторКоманды
			|ПОМЕСТИТЬ втБыстрыйДоступ
			|ИЗ
			|	РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам КАК БыстрыйДоступ
			|ГДЕ
			|	БыстрыйДоступ.Пользователь = &ТекущийПользователь
			|	И БыстрыйДоступ.Доступно = ИСТИНА
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаБыстрыйДоступ.Ссылка,
			|	ТаблицаБыстрыйДоступ.ИдентификаторКоманды
			|ПОМЕСТИТЬ втСсылкиИКоманды
			|ИЗ
			|	втБыстрыйДоступ КАК ТаблицаБыстрыйДоступ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки КАК ДопОтчетыИОбработки
			|		ПО ТаблицаБыстрыйДоступ.Ссылка = ДопОтчетыИОбработки.Ссылка
			|			И (ДопОтчетыИОбработки.ПометкаУдаления = ЛОЖЬ)
			|			И (ДопОтчетыИОбработки.Вид = &Вид)
			|			И (ДопОтчетыИОбработки.Публикация = &Публикация)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Разделы КАК ТаблицаРазделы
			|		ПО ТаблицаБыстрыйДоступ.Ссылка = ТаблицаРазделы.Ссылка
			|			И (ТаблицаРазделы.Раздел = &СсылкаРаздела)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаКоманды.Ссылка,
			|	ТаблицаКоманды.Идентификатор,
			|	ТаблицаКоманды.ЗаменяемыеКоманды,
			|	ТаблицаКоманды.ВариантЗапуска,
			|	ТаблицаКоманды.Представление КАК Представление,
			|	ТаблицаКоманды.ПоказыватьОповещение,
			|	ТаблицаКоманды.Модификатор
			|ИЗ
			|	втСсылкиИКоманды КАК ТаблицаСсылкиИКоманды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Команды КАК ТаблицаКоманды
			|		ПО ТаблицаСсылкиИКоманды.Ссылка = ТаблицаКоманды.Ссылка
			|			И ТаблицаСсылкиИКоманды.ИдентификаторКоманды = ТаблицаКоманды.Идентификатор
			|			И (ТаблицаКоманды.Скрыть = ЛОЖЬ)
			|			И (ТаблицаКоманды.ВариантЗапуска В (&ТипыКоманд))
			|
			|УПОРЯДОЧИТЬ ПО
			|	Представление";
			
			Запрос.УстановитьПараметр("СсылкаРаздела", СсылкаРодителяИлиРаздела);
			
		Иначе
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ТаблицаНазначение.Ссылка
			|ПОМЕСТИТЬ втСсылки
			|ИЗ
			|	Справочник.ДополнительныеОтчетыИОбработки.Назначение КАК ТаблицаНазначение
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки КАК ДопОтчетыИОбработки
			|		ПО (ТаблицаНазначение.ОбъектНазначения = &СсылкаРодителя)
			|			И ТаблицаНазначение.Ссылка = ДопОтчетыИОбработки.Ссылка
			|			И (ДопОтчетыИОбработки.ПометкаУдаления = ЛОЖЬ)
			|			И (ДопОтчетыИОбработки.Вид = &Вид)
			|			И (ДопОтчетыИОбработки.Публикация = &Публикация)
			|			И (ДопОтчетыИОбработки.ИспользоватьДляФормыСписка = ИСТИНА)
			|			И (ДопОтчетыИОбработки.ИспользоватьДляФормыОбъекта = ИСТИНА)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаКоманды.Ссылка,
			|	ТаблицаКоманды.Идентификатор,
			|	ТаблицаКоманды.ЗаменяемыеКоманды,
			|	ТаблицаКоманды.ВариантЗапуска,
			|	ТаблицаКоманды.Представление КАК Представление,
			|	ТаблицаКоманды.ПоказыватьОповещение,
			|	ТаблицаКоманды.Модификатор
			|ИЗ
			|	втСсылки КАК ТаблицаСсылки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Команды КАК ТаблицаКоманды
			|		ПО ТаблицаСсылки.Ссылка = ТаблицаКоманды.Ссылка
			|			И (ТаблицаКоманды.Скрыть = ЛОЖЬ)
			|			И (ТаблицаКоманды.ВариантЗапуска В (&ТипыКоманд))
			|
			|УПОРЯДОЧИТЬ ПО
			|	Представление";
			
			Запрос.УстановитьПараметр("СсылкаРодителя", СсылкаРодителяИлиРаздела);
			
		КонецЕсли;
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаКоманды.Ссылка,
		|	ТаблицаКоманды.Идентификатор,
		|	ТаблицаКоманды.ЗаменяемыеКоманды,
		|	ТаблицаКоманды.ВариантЗапуска,
		|	ТаблицаКоманды.Представление КАК Представление,
		|	ТаблицаКоманды.ПоказыватьОповещение,
		|	ТаблицаКоманды.Модификатор
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки.Команды КАК ТаблицаКоманды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки КАК ДопОтчетыИОбработки
		|		ПО ТаблицаКоманды.Ссылка = ДопОтчетыИОбработки.Ссылка
		|			И (ДопОтчетыИОбработки.Вид = &Вид)
		|			И (ТаблицаКоманды.ВариантЗапуска В (&ТипыКоманд))
		|			И (ДопОтчетыИОбработки.Публикация = &Публикация)
		|			И (ДопОтчетыИОбработки.ПометкаУдаления = ЛОЖЬ)
		|			И (ДопОтчетыИОбработки.ИспользоватьДляФормыСписка = ИСТИНА)
		|			И (ДопОтчетыИОбработки.ИспользоватьДляФормыОбъекта = ИСТИНА)
		|			И (ТаблицаКоманды.Скрыть = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление";
		
	КонецЕсли;
	
	// Отключение отборов по форме списка и объекта.
	Если ЭтоФормаОбъекта <> Истина Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (ДопОтчетыИОбработки.ИспользоватьДляФормыОбъекта = ИСТИНА)", "");
	КонецЕсли;
	Если ЭтоФормаОбъекта <> Ложь Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (ДопОтчетыИОбработки.ИспользоватьДляФормыСписка = ИСТИНА)", "");
	КонецЕсли;
	
	Если ТипыКоманд = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (ТаблицаКоманды.ВариантЗапуска В (&ТипыКоманд))", "");
	Иначе
		Запрос.УстановитьПараметр("ТипыКоманд", ТипыКоманд);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Вид", ВидОбработок);
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДополнительныхОтчетовИОбработок") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Публикация = &Публикация", "Публикация <> &Публикация");
		Запрос.УстановитьПараметр("Публикация", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена);
	Иначе
		Запрос.УстановитьПараметр("Публикация", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.АвторизованныйПользователь());
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события.

// Удаление ссылок подсистем перед их удалением.
Процедура ПередУдалениемИдентификатораОбъектаМетаданных(ИОМОбъект, Отказ) Экспорт
	Если ИОМОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИОМСсылка = ИОМОбъект.Ссылка;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Ссылка
	|ПОМЕСТИТЬ втСсылки
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки.Разделы КАК Таблица
	|ГДЕ
	|	Таблица.Раздел = &ИОМСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки.Назначение КАК Таблица
	|ГДЕ
	|	Таблица.ОбъектНазначения = &ИОМСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втСсылки.Ссылка
	|ИЗ
	|	втСсылки КАК втСсылки";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИОМСсылка", ИОМСсылка);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Найденные = СправочникОбъект.Разделы.НайтиСтроки(Новый Структура("Раздел", ИОМСсылка));
		Для Каждого СтрокаТаблицы Из Найденные Цикл
			СправочникОбъект.Разделы.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		Найденные = СправочникОбъект.Назначение.НайтиСтроки(Новый Структура("ОбъектНазначения", ИОМСсылка));
		Для Каждого СтрокаТаблицы Из Найденные Цикл
			СправочникОбъект.Назначение.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		СправочникОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// [1.0.7.1] Процедура обновления записей о доступности дополнительных обработок.
Процедура ОбновитьПользовательскиеНастройкиДоступаКОбработкам() Экспорт
	
	ПользователиСДопОбработками = ПолучитьМассивПользователейСДоступомКДополнительнымОбработкам();
	
	ТаблицаЗаписей = ПолучитьТаблицуЗаписей(ПользователиСДопОбработками);
	
	Для Каждого Пользователь Из ПользователиСДопОбработками Цикл
		НаборЗаписей = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
		ЗаписиПоБыстромуДоступу = ТаблицаЗаписей.НайтиСтроки(Новый Структура("Пользователь,Доступно", Пользователь, Истина));
		Для Каждого ЗаписьБыстрогоДоступа Из ЗаписиПоБыстромуДоступу Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ДополнительныйОтчетИлиОбработка = ЗаписьБыстрогоДоступа.Обработка;
			НоваяЗапись.ИдентификаторКоманды			= ЗаписьБыстрогоДоступа.Идентификатор;
			НоваяЗапись.Пользователь					= Пользователь;
			НоваяЗапись.Доступно						= Истина;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	КонецЦикла;
	
КонецПроцедуры

// [2.0.1.4] Заполнение реквизита "ИмяОбъекта" (имя, под которыми объект регистрируется в программе).
//   Для объектов с вариантом Публикации "Используется" дополнительно проводится 
//   контроль уникальности Имени объекта. В случае нахождения отчетов или обработок 
//   с неуникальными Именами объектов для всех элементов, кроме первого, 
//   вариант Публикации изменяется с "Используется" на "Режим отладки".
//
Процедура ЗаполнитьИменаОбъектов() Экспорт
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДопОтчеты.Ссылка,
	|	ДопОтчеты.ИмяОбъекта,
	|	ДопОтчеты.ХранилищеОбработки,
	|	ВЫБОР
	|		КОГДА ДопОтчеты.Вид В (&ВидыДопОтчетов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОтчет,
	|	ВЫБОР
	|		КОГДА ДопОтчеты.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Публикуется,
	|	ВЫБОР
	|		КОГДА ДопОтчеты.ИмяОбъекта = """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяЗаполнитьИмяОбъекта
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДопОтчеты
	|ГДЕ
	|	ДопОтчеты.ЭтоГруппа = ЛОЖЬ
	|	И НЕ ДопОтчеты.ХранилищеОбработки ЕСТЬ NULL ";
	
	ВидыДопОтчетов = Новый Массив;
	ВидыДопОтчетов.Добавить(Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет);
	ВидыДопОтчетов.Добавить(Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыДопОтчетов", ВидыДопОтчетов);
	Запрос.Текст = ТекстЗапроса;
	
	ВсеДопОтчеты = Запрос.Выполнить().Выгрузить();
	
	ПоискДублей = Новый Структура("ИмяОбъекта, ЭтоОтчет, Публикуется");
	ПоискДублей.Публикуется = Истина;
	
	// Дополнительные отчеты и обработки, для которых необходимо заполнить имя объекта.
	ДопОтчетыДляЗаполнения = ВсеДопОтчеты.НайтиСтроки(Новый Структура("ТребуетсяЗаполнитьИмяОбъекта", Истина));
	Для Каждого СтрокаТаблицы Из ДопОтчетыДляЗаполнения Цикл
		
		// Помещение двоичных данных отчета (обработки) во временное хранилище.
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СтрокаТаблицы.ХранилищеОбработки.Получить());
		
		// Определение менеджера
		Менеджер = ?(СтрокаТаблицы.ЭтоОтчет, ВнешниеОтчеты, ВнешниеОбработки);
		
		// Получение экземпляра объекта.
		Объект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
		
		// Установка имени объекта
		Объект.ИмяОбъекта = СокрЛП(Менеджер.Подключить(АдресВоВременномХранилище, , Истина));
		
		// Если имя отчета (обработки) уже используется другим опубликованным отчетом (обработкой),
		// то данный объект является дублем - необходимо сменить его вариант публикации на режим отладки (или отключить).
		Если СтрокаТаблицы.Публикуется Тогда
			ПоискДублей.ИмяОбъекта = Объект.ИмяОбъекта;
			ПоискДублей.ЭтоОтчет   = СтрокаТаблицы.ЭтоОтчет;
			Если ВсеДопОтчеты.НайтиСтроки(ПоискДублей).Количество() > 0 Тогда
				Объект.Публикация = ДополнительныеОтчетыИОбработкиПовтИсп.ВидПубликацииДляКонфликтующихОбработок();
			КонецЕсли;
		КонецЕсли;
		
		// Регистрация использованного имени объекта в таблице для контроля дублей.
		СтрокаТаблицы.ИмяОбъекта = Объект.ИмяОбъекта;
		
		// Запись объекта
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

// Замена имен рабочих мест на ссылки справочника ИдентификаторыОбъектовМетаданных.
//
// Параметры:
//   ИменаРазделовИИдентификаторы - Соответствие -
//       * Ключ - Строка - Имя рабочего места (команды), которое ранее указывалось в процедурах:
//             ДополнительныеОтчетыИОбработкиПереопределяемый.ПолучитьОбщиеКомандыДополнительныхОбработок();
//             ДополнительныеОтчетыИОбработкиПереопределяемый.ПолучитьОбщиеКомандыДополнительныхОтчетов().
//       * Значение - ОбъектМетаданных: Подсистема - Раздел командного интерфейса (подсистема первого уровня),
//             в котором размещается данное рабочее место (команда).
//
Процедура ЗаменитьИменаРазделовНаИдентификаторы(ИменаРазделовИИдентификаторы) Экспорт
	ИдентификаторРабочегоСтола = ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола();
	
	МассивИменРазделов = Новый Массив;
	Для Каждого КлючИЗначение Из ИменаРазделовИИдентификаторы Цикл
		Если КлючИЗначение.Значение = ИдентификаторРабочегоСтола Тогда
			ИменаРазделовИИдентификаторы.Вставить(КлючИЗначение.Ключ, Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка());
		Иначе
			ИменаРазделовИИдентификаторы.Вставить(КлючИЗначение.Ключ, ОбщегоНазначения.ИдентификаторОбъектаМетаданных(КлючИЗначение.Значение));
		КонецЕсли;
		МассивИменРазделов.Добавить(КлючИЗначение.Ключ);
	КонецЦикла; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРазделы.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки.Разделы КАК ТЧРазделы
	|ГДЕ
	|	ТЧРазделы.УдалитьИмяРаздела В (&МассивИменРазделов)";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивИменРазделов", МассивИменРазделов);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// Получение экземпляра объекта.
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаРаздел Из Объект.Разделы Цикл
			ИОМ = ИменаРазделовИИдентификаторы.Получить(СтрокаРаздел.УдалитьИмяРаздела);
			Если ИОМ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаРаздел.Раздел = ИОМ;
			СтрокаРаздел.УдалитьИмяРаздела = "";
		КонецЦикла; 
		
		// Запись объекта
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
КонецПроцедуры

// [2.1.3.2] Замена имен объектов назначения на ссылки справочника ИдентификаторыОбъектовМетаданных.
Процедура ЗаменитьИменаОбъектовМетаданныхНаСсылки() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаНазначение.Ссылка КАК СправочникСсылка,
	|	ТаблицаНазначение.НомерСтроки КАК НомерСтроки,
	|	СправочникИОМ.Ссылка КАК ОбъектНазначения
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки.Назначение КАК ТаблицаНазначение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК СправочникИОМ
	|		ПО ТаблицаНазначение.УдалитьПолноеИмяОбъектаМетаданных = СправочникИОМ.ПолноеИмя
	|ИТОГИ ПО
	|	СправочникСсылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаСсылок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСсылок.Следующий() Цикл
		СправочникОбъект = ВыборкаСсылок.СправочникСсылка.ПолучитьОбъект();
		МассивСтрокДляУдаления = Новый Массив;
		ВыборкаСтрок = ВыборкаСсылок.Выбрать();
		Пока ВыборкаСтрок.Следующий() Цикл
			СтрокаТабличнойЧасти = СправочникОбъект.Назначение.Получить(ВыборкаСтрок.НомерСтроки - 1);
			СтрокаТабличнойЧасти.ОбъектНазначения = ВыборкаСтрок.ОбъектНазначения;
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОбъектНазначения) Тогда
				СтрокаТабличнойЧасти.УдалитьПолноеИмяОбъектаМетаданных = "";
			Иначе
				МассивСтрокДляУдаления.Добавить(СтрокаТабличнойЧасти);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТабличнойЧасти Из МассивСтрокДляУдаления Цикл
			СправочникОбъект.Назначение.Удалить(СтрокаТабличнойЧасти);
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
	КонецЦикла;
	
	РегистрыСведений.НазначениеДополнительныхОбработок.Обновить(Истина);
	
КонецПроцедуры

// [2.1.3.22] Включение функциональной опции ИспользоватьДополнительныеОтчетыИОбработки для локального режима.
Процедура ВключитьФункциональнуюОпцию() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ИспользоватьДополнительныеОтчетыИОбработки.Установить(Истина);
	
КонецПроцедуры

// [2.2.2.25] Процедура проставляет значение реквизита РежимСовместимостиРазрешений для элементов справочника.
// ДополнительныеОтчетыИОбработки.
//
Процедура ЗаполнитьРежимСовместимостиРазрешений() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		Блокировка.Добавить("Справочник.ДополнительныеОтчетыИОбработки");
		Блокировка.Заблокировать();
		
		Выборка = Справочники.ДополнительныеОтчетыИОбработки.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не Выборка.ЭтоГруппа И Не ЗначениеЗаполнено(Выборка.РежимСовместимостиРазрешений) Тогда
				
				ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
				
				Объект = Выборка.ПолучитьОбъект();
				
				Попытка
					
					ОбъектОбработки = ПолучитьОбъектВнешнейОбработки(Выборка.Ссылка);
					РегистрационныеДанные = ОбъектОбработки.СведенияОВнешнейОбработке();
					
					Если РегистрационныеДанные.Свойство("ВерсияБСП") Тогда
						Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(РегистрационныеДанные.ВерсияБСП, "2.2.2.0") > 0 Тогда
							РежимСовместимости = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_2_2;
						Иначе
							РежимСовместимости = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_1_3;
						КонецЕсли;
					Иначе
						РежимСовместимости = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_1_3;
					КонецЕсли;
					
					Публикация = Объект.Публикация;
					
				Исключение
					
					// При невозможности подключения обработки - установим для нее режим совместимости
					// разрешений с версией БСП 2.1.3 и временно заблокируем.
					ТекстОшибки = """" + Объект.Наименование + """:"
						+ Символы.ПС + НСтр("ru = 'Не удалось определить режим совместимости разрешений по причине:'")
						+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
						+ Символы.ПС
						+ Символы.ПС + НСтр("ru = 'Объект заблокирован в режиме совместимости с версией 2.1.3.'");
					ЗаписатьПредупреждение(Объект.Ссылка, ТекстОшибки);
					РежимСовместимости = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_1_3;
					Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена;
					
				КонецПопытки;
				
				Объект.РежимСовместимостиРазрешений = РежимСовместимости;
				Объект.Публикация = Публикация;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Регламентные задания

// Обработчик экземпляра регламентного задания ЗапускОбработок.
//   Запускает обработчик глобальной обработки по регламентному заданию,
//   с указанным идентификатором команды.
//
// Параметры:
//   ВнешняяОбработка     - СправочникСсылка.ДополнительныеОтчетыИОбработки - Ссылка выполняемой обработки.
//   ИдентификаторКоманды - Строка - Идентификатор выполняемой команды.
//
Процедура ВыполнитьОбработкуПоРегламентномуЗаданию(ВнешняяОбработка, ИдентификаторКоманды) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок);
	
	// Запись журнала регистрации
	ЗаписатьИнформацию(ВнешняяОбработка, НСтр("ru = 'Команда %1: Запуск.'"), ИдентификаторКоманды);
	
	// Выполнение команды
	Попытка
		ВыполнитьКоманду(Новый Структура("ДополнительнаяОбработкаСсылка, ИдентификаторКоманды", ВнешняяОбработка, ИдентификаторКоманды), Неопределено);
	Исключение
		ЗаписатьОшибку(
			ВнешняяОбработка,
			НСтр("ru = 'Команда %1: Ошибка выполнения:%2'"),
			ИдентификаторКоманды,
			Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	// Запись журнала регистрации
	ЗаписатьИнформацию(ВнешняяОбработка, НСтр("ru = 'Команда %1: Завершение.'"), ИдентификаторКоманды);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции.

// Возвращает Истина если вид относится к категории глобальных дополнительных отчетов или обработок.
//
// Параметры:
//   Вид - ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок - Вид внешней обработки.
//
// Возвращаемое значение: 
//    Истина - обработка относится к категории глобальных.
//    Ложь   - обработка относится к категории назначаемых.
//
Функция ПроверитьГлобальнаяОбработка(Вид) Экспорт
	
	Возврат Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка
		Или Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет;
	
КонецФункции

// Преобразует вид дополнительных отчетов или обработок из строковой константы в ссылку перечисления.
//
// Параметры:
//   СтроковоеПредставление - Строка - Строковое представление вида.
//
// Возвращаемое значение: 
//   ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок - Ссылка вида.
//
Функция ПолучитьВидОбработкиПоСтроковомуПредставлениюВида(СтроковоеПредставление) Экспорт
	
	Если СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиОтчет() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиСозданиеСвязанныхОбъектов() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет;
	КонецЕсли;
	
КонецФункции

// Преобразует вид дополнительных отчетов или обработок из ссылки перечисления в строковую константу.
Функция ВидВСтроку(СсылкаВида) Экспорт
	
	Если СсылкаВида = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта Тогда
		Возврат ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта();
		
	ИначеЕсли СсылкаВида = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
		Возврат ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиОтчет();
		
	ИначеЕсли СсылкаВида = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
		Возврат ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма();
		
	ИначеЕсли СсылкаВида = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов Тогда
		Возврат ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиСозданиеСвязанныхОбъектов();
		
	ИначеЕсли СсылкаВида = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка Тогда
		Возврат ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
		
	ИначеЕсли СсылкаВида = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		Возврат ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
		
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает имя рабочего места команды.
Функция ПредставлениеРаздела(Раздел) Экспорт
	Если Раздел = ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола()
		ИЛИ Раздел = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка() Тогда
		Возврат НСтр("ru = 'Рабочий стол'");
	КонецЕсли;
	
	Если ТипЗнч(Раздел) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Раздел, "Синоним, ПометкаУдаления");
		Если Реквизиты.ПометкаУдаления Тогда
			Возврат Неопределено;
		КонецЕсли;
		ПредставлениеРаздела = Реквизиты.Синоним;
	ИначеЕсли ТипЗнч(Раздел) = Тип("ОбъектМетаданных") Тогда
		ПредставлениеРаздела = Раздел.Представление();
	Иначе
		ПредставлениеРаздела = Метаданные.Подсистемы.Найти(Раздел).Представление();
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Раздел ""%1""'"), ПредставлениеРаздела);
КонецФункции

// Функция для добавления команд дополнительных обработок в список "своих".
Процедура ДобавитьКомандыВСписокСвоих(МассивКоманд) Экспорт
	
	Для Каждого ЭлементСтрока Из МассивКоманд Цикл
		Запись = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьМенеджерЗаписи();
		
		Запись.ДополнительныйОтчетИлиОбработка  = ЭлементСтрока.Обработка;
		Запись.ИдентификаторКоманды             = ЭлементСтрока.Идентификатор;
		Запись.Пользователь                     = Пользователи.АвторизованныйПользователь();
		Запись.Доступно                         = Истина;
		
		Запись.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

// Функция для исключения команд дополнительных обработок из списка "своих".
Процедура УдалитьКомандыИзСпискаСвоих(МассивКоманд) Экспорт
	
	Для Каждого ЭлементСтрока Из МассивКоманд Цикл
		
		Запись = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьМенеджерЗаписи();
		
		Запись.ДополнительныйОтчетИлиОбработка  = ЭлементСтрока.Обработка;
		Запись.ИдентификаторКоманды             = ЭлементСтрока.Идентификатор;
		Запись.Пользователь                     = Пользователи.АвторизованныйПользователь();
		
		Запись.Прочитать();
		
		Запись.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие права добавления дополнительных отчетов и обработок.
Функция ПравоДобавления(Знач ДополнительнаяОбработка = Неопределено) Экспорт
	
	Результат = Ложь;
	СтандартнаяОбработка = Истина;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки\ПриПроверкеПраваДобавления");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриПроверкеПраваДобавления(ДополнительнаяОбработка, Результат, СтандартнаяОбработка);
		
		Если Не СтандартнаяОбработка Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтандартнаяОбработка Тогда
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И ОбщегоНазначения.ИспользованиеРазделителяСеанса() Тогда
			Результат = Пользователи.ЭтоПолноправныйПользователь(, Истина);
		Иначе
			Результат = Пользователи.РолиДоступны("ДобавлениеИзменениеДополнительныхОтчетовИОбработок");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет возможность выгрузки дополнительного отчета или обработки из программы в файл.
//
// Параметры:
//   Обработка - СправочникСсылка.ДополнительныеОтчетыИОбработки.
//
// Возвращаемое значение:
//   Булево
//
Функция ВозможнаВыгрузкаОбработкиВФайл(Знач Обработка) Экспорт
	
	Результат = Ложь;
	СтандартнаяОбработка = Истина;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки\ПриПроверкеВозможностиВыгрузкиОбработкиВФайл");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриПроверкеВозможностиВыгрузкиОбработкиВФайл(Обработка, Результат, СтандартнаяОбработка);
		
		Если Не СтандартнаяОбработка Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтандартнаяОбработка Тогда
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Проверяет возможность загрузки уже существующей в ИБ дополнительной обработки из файла.
//
// Параметры:
//   Обработка - СправочникСсылка.ДополнительныеОтчетыИОбработки.
//
// Возвращаемое значение:
//   Булево
//
Функция ВозможнаЗагрузкаОбработкиИзФайла(Знач Обработка) Экспорт
	
	Результат = Ложь;
	СтандартнаяОбработка = Истина;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки\ПриПроверкеВозможностиЗагрузкиОбработкиИзФайла");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриПроверкеВозможностиЗагрузкиОбработкиИзФайла(Обработка, Результат, СтандартнаяОбработка);
		
		Если Не СтандартнаяОбработка Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтандартнаяОбработка Тогда
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает флажок отображения пользователю расширенной информации о дополнительном отчете или обработке.
//
// Параметры:
//   Обработка - СправочникСсылка.ДополнительныеОтчетыИОбработки.
//
// Возвращаемое значение:
//   Булево
//
Функция ОтображатьРасширеннуюИнформацию(Знач Обработка) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Виды публикации, недоступные для использования в текущем режиме работы программы.
Функция НедоступныеВидыПубликации() Экспорт
	
	Результат = Новый Массив;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки\ПриЗаполненииНедоступныхВидовПубликации");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриЗаполненииНедоступныхВидовПубликации(Результат);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Процедура должна вызываться из события ПередЗаписью справочника.
//  ДополнительныеОтчетыИОбработки, выполняет проверку правомерности изменения реквизитов
//  элементов данного справочника для дополнительных обработок, полученных из
//  каталога дополнительных обработок менеджера сервиса.
//
// Параметры:
//   Источник - СправочникОбъект.ДополнительныеОтчетыИОбработки
//   Отказ - булево, флаг отказа от выполнения записи элемента справочника.
//
Процедура ПередЗаписьюДополнительнойОбработки(Источник, Отказ) Экспорт
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки\ПередЗаписьюДополнительнойОбработки");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		
		Обработчик.Модуль.ПередЗаписьюДополнительнойОбработки(Источник, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура должна вызываться из события ПередУдалением справочника.
//  ДополнительныеОтчетыИОбработки.
//
// Параметры:
//  Источник - СправочникОбъект.ДополнительныеОтчетыИОбработки,
//  Отказ - булево, флаг отказа от выполнения удаления элемента справочника из информационной базы.
//
Процедура ПередУдалениемДополнительнойОбработки(Источник, Отказ) Экспорт
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки\ПередУдалениемДополнительнойОбработки");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		
		Обработчик.Модуль.ПередУдалениемДополнительнойОбработки(Источник, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Запись ошибки в журнал регистрации по дополнительному отчету или обработке.
Процедура ЗаписатьОшибку(Ссылка, ТекстСообщения, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено) Экспорт
	Уровень = УровеньЖурналаРегистрации.Ошибка;
	ЗаписатьВЖурнал(Уровень, Ссылка, ТекстСообщения, Реквизит1, Реквизит2, Реквизит3);
КонецПроцедуры

// Запись предупреждения в журнал регистрации по дополнительному отчету или обработке.
Процедура ЗаписатьПредупреждение(Ссылка, ТекстСообщения, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено) Экспорт
	Уровень = УровеньЖурналаРегистрации.Предупреждение;
	ЗаписатьВЖурнал(Уровень, Ссылка, ТекстСообщения, Реквизит1, Реквизит2, Реквизит3);
КонецПроцедуры

// Запись информации в журнал регистрации по дополнительному отчету или обработке.
Процедура ЗаписатьИнформацию(Ссылка, ТекстСообщения, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено)
	Уровень = УровеньЖурналаРегистрации.Информация;
	ЗаписатьВЖурнал(Уровень, Ссылка, ТекстСообщения, Реквизит1, Реквизит2, Реквизит3);
КонецПроцедуры

// Запись примечания в журнал регистрации по дополнительному отчету или обработке.
Процедура ЗаписатьПримечание(Ссылка, ТекстСообщения, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено)
	Уровень = УровеньЖурналаРегистрации.Примечание;
	ЗаписатьВЖурнал(Уровень, Ссылка, ТекстСообщения, Реквизит1, Реквизит2, Реквизит3);
КонецПроцедуры

// Запись события в журнал регистрации по дополнительному отчету или обработке.
Процедура ЗаписатьВЖурнал(Уровень, Ссылка, Текст, Параметр1, Параметр2, Параметр3)
	Текст = СтрЗаменить(Текст, "%1", Параметр1); // Переход на СтрШаблон невозможен.
	Текст = СтрЗаменить(Текст, "%2", Параметр2);
	Текст = СтрЗаменить(Текст, "%3", Параметр3);
	ЗаписьЖурналаРегистрации(
		ДополнительныеОтчетыИОбработкиКлиентСервер.НаименованиеПодсистемы(Ложь),
		Уровень,
		Метаданные.Справочники.ДополнительныеОтчетыИОбработки,
		Ссылка,
		Текст);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции.

// Вывод команд заполнения в формах объектов.
Процедура СформироватьПодменюКомандЗаполнения(Форма, Параметры)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДополнительныеОтчетыИОбработкиНазначение.Ссылка
	|ПОМЕСТИТЬ втСсылки
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки.Назначение КАК ДополнительныеОтчетыИОбработкиНазначение
	|ГДЕ
	|	ДополнительныеОтчетыИОбработкиНазначение.ОбъектНазначения = &ОбъектНазначения
	|	И ДополнительныеОтчетыИОбработкиНазначение.Ссылка.Вид = &Вид
	|	И ДополнительныеОтчетыИОбработкиНазначение.Ссылка.ИспользоватьДляФормыОбъекта = ИСТИНА
	|	И ДополнительныеОтчетыИОбработкиНазначение.Ссылка.Публикация = &Публикация
	|	И ДополнительныеОтчетыИОбработкиНазначение.Ссылка.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеОтчетыИОбработкиКоманды.Ссылка,
	|	ДополнительныеОтчетыИОбработкиКоманды.Идентификатор,
	|	ДополнительныеОтчетыИОбработкиКоманды.ВариантЗапуска,
	|	ДополнительныеОтчетыИОбработкиКоманды.Представление КАК Представление,
	|	ДополнительныеОтчетыИОбработкиКоманды.ПоказыватьОповещение,
	|	ДополнительныеОтчетыИОбработкиКоманды.Модификатор,
	|	ДополнительныеОтчетыИОбработкиКоманды.Ссылка.Вид
	|ИЗ
	|	втСсылки КАК втСсылки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Команды КАК ДополнительныеОтчетыИОбработкиКоманды
	|		ПО втСсылки.Ссылка = ДополнительныеОтчетыИОбработкиКоманды.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектНазначения", Параметры.СсылкаРодителя);
	Запрос.УстановитьПараметр("Вид", Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта);
	Запрос.УстановитьПараметр("ВариантЗапуска", Перечисления.СпособыВызоваДополнительныхОбработок.ЗаполнениеФормы);
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДополнительныхОтчетовИОбработок") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Публикация = &Публикация", "Публикация <> &Публикация");
		Запрос.УстановитьПараметр("Публикация", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена);
	Иначе
		Запрос.УстановитьПараметр("Публикация", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется);
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Определение группы, в которую будут добавлены команды.
	Элементы = Форма.Элементы;
	
	ПредустановленныеКоманды = Новый Массив;
	Подменю = Элементы.Найти("ПодменюДополнительныхОбработокЗаполнения");
	Если Подменю = Неопределено Тогда
		КоманднаяПанель = Элементы.Найти("КоманднаяПанель");
		Если КоманднаяПанель = Неопределено Тогда
			КоманднаяПанель = Форма.КоманднаяПанель;
		КонецЕсли;
		Подменю = Элементы.Вставить("ПодменюДополнительныхОбработокЗаполнения", Тип("ГруппаФормы"), КоманднаяПанель);
		Подменю.Заголовок = НСтр("ru = 'Заполнить'");
		Подменю.Вид = ВидГруппыФормы.Подменю;
		Подменю.Картинка = БиблиотекаКартинок.ЗаполнитьФорму;
		Подменю.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Иначе
		Для Каждого Элемент Из Подменю.ПодчиненныеЭлементы Цикл
			ПредустановленныеКоманды.Добавить(Элемент);
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаКоманд = Результат.Выгрузить();
	ТаблицаКоманд.Колонки.Добавить("ИмяЭлемента", Новый ОписаниеТипов("Строка"));
	ТаблицаКоманд.Колонки.Добавить("ЭтоОтчет", Новый ОписаниеТипов("Булево"));
	
	Для НомерЭлемента = 0 По ТаблицаКоманд.Количество() - 1 Цикл
		ОписаниеКоманды = ТаблицаКоманд[НомерЭлемента];
		ИмяЭлемента = "КомандаДополнительнойОбработки" + Формат(НомерЭлемента, "ЧГ=");
		ОписаниеКоманды.ИмяЭлемента = ИмяЭлемента;
		
		Команда = Форма.Команды.Добавить(ИмяЭлемента);
		Команда.Действие  = "Подключаемый_ВыполнитьНазначаемуюКоманду";
		Команда.Заголовок = ОписаниеКоманды.Представление;
		
		Элемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Подменю);
		Элемент.ИмяКоманды = ИмяЭлемента;
		Элемент.ТолькоВоВсехДействиях = Ложь;
	КонецЦикла;
	Команда = Форма.Команды.Добавить("АдресКомандДополнительныхОбработокВоВременномХранилище");
	Команда.Действие = ПоместитьВоВременноеХранилище(ТаблицаКоманд, Форма.УникальныйИдентификатор);
	
	Для Каждого Элемент Из ПредустановленныеКоманды Цикл
		Элементы.Переместить(Элемент, Подменю);
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеКомандыОбработки(ИмяЭлемента, АдресТаблицыКомандВоВременномХранилище) Экспорт
	ТаблицаКоманд = ПолучитьИзВременногоХранилища(АдресТаблицыКомандВоВременномХранилище);
	Для Каждого КомандаОбработки Из ТаблицаКоманд.НайтиСтроки(Новый Структура("ИмяЭлемента", ИмяЭлемента)) Цикл
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(КомандаОбработки);
	КонецЦикла;
КонецФункции

// Для внутреннего использования.
Функция ПолучитьТаблицуЗаписей(ПользователиСДопОбработками)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДополнительныеОтчетыИОбработки.Ссылка КАК Обработка,
	|	КомандыДополнительныхОтчетовИОбработок.Идентификатор КАК Идентификатор
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Команды КАК КомандыДополнительныхОтчетовИОбработок
	|		ПО (КомандыДополнительныхОтчетовИОбработок.Ссылка = ДополнительныеОтчетыИОбработки.Ссылка)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	ОбработкиСКомандами = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗаписей = Новый ТаблицаЗначений;
	ТаблицаЗаписей.Колонки.Добавить("Обработка",     Новый ОписаниеТипов("СправочникСсылка.ДополнительныеОтчетыИОбработки"));
	ТаблицаЗаписей.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаписей.Колонки.Добавить("Пользователь",  Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаЗаписей.Колонки.Добавить("Доступно",      Новый ОписаниеТипов("Булево"));
	
	Для Каждого ОбработкаКоманда Из ОбработкиСКомандами Цикл
		Для Каждого Пользователь Из ПользователиСДопОбработками Цикл
			НоваяСтрока = ТаблицаЗаписей.Добавить();
			НоваяСтрока.Обработка     = ОбработкаКоманда.Обработка;
			НоваяСтрока.Идентификатор = ОбработкаКоманда.Идентификатор;
			НоваяСтрока.Пользователь  = Пользователь;
			НоваяСтрока.Доступно   = Истина;
		КонецЦикла;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДополнительныеОтчетыИОбработки.Ссылка КАК Обработка,
	|	КомандыДополнительныхОтчетовИОбработок.Идентификатор КАК Идентификатор,
	|	Пользователи.Ссылка КАК Пользователь,
	|	ПользовательскиеНастройкиДоступаКОбработкам.Доступно КАК Доступно
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Команды КАК КомандыДополнительныхОтчетовИОбработок
	|		ПО (КомандыДополнительныхОтчетовИОбработок.Ссылка = ДополнительныеОтчетыИОбработки.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам КАК ПользовательскиеНастройкиДоступаКОбработкам
	|		ПО (ПользовательскиеНастройкиДоступаКОбработкам.ДополнительныйОтчетИлиОбработка = ДополнительныеОтчетыИОбработки.Ссылка)
	|			И (ПользовательскиеНастройкиДоступаКОбработкам.ИдентификаторКоманды = КомандыДополнительныхОтчетовИОбработок.Идентификатор)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Пользователи.Ссылка = ПользовательскиеНастройкиДоступаКОбработкам.Пользователь)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	ИсключенияПерсональногоДоступа = Запрос.Выполнить().Выгрузить();
	
	ПоискСтрок = Новый Структура("Обработка, Идентификатор, Пользователь");
	Для Каждого ИсключениеПерсональногоДоступа Из ИсключенияПерсональногоДоступа Цикл
		ЗаполнитьЗначенияСвойств(ПоискСтрок, ИсключениеПерсональногоДоступа);
		Найденные = ТаблицаЗаписей.НайтиСтроки(ПоискСтрок);
		Для Каждого СтрокаТаблицы Из Найденные Цикл
			СтрокаТаблицы.Доступно = НЕ ИсключениеПерсональногоДоступа.Доступно; // Инвертируем исключением доступа.
		КонецЦикла; 
	КонецЦикла;
	
	Возврат ТаблицаЗаписей;
	
КонецФункции

// Для внутреннего использования.
Функция ПолучитьМассивПользователейСДоступомКДополнительнымОбработкам()
	
	Результат = Новый Массив;
	
	ПроверяемыеРоли = "ИспользованиеДополнительныхОтчетовИОбработок, ДобавлениеИзменениеДополнительныхОтчетовИОбработок";
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.Пользователи");
	ВсеПользователи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для Каждого Пользователь Из ВсеПользователи Цикл
		Если Пользователи.РолиДоступны(ПроверяемыеРоли, Пользователь, Ложь) Тогда
			Результат.Добавить(Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиДоступа.Пользователь
	|ИЗ
	|	РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам КАК НастройкиДоступа
	|ГДЕ
	|	НЕ НастройкиДоступа.Пользователь В (&УжеДобавленныеПользователи)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("УжеДобавленныеПользователи", Результат);
	ПользователиВРегистре = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	Для Каждого Пользователь Из ПользователиВРегистре Цикл
		Результат.Добавить(Пользователь);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Для внутреннего использования.
Процедура ВыполнитьКомандуДополнительногоОтчетаИлиОбработки(ВнешнийОбъект, Знач ИдентификаторКоманды, ПараметрыКоманды, Знач СценарийВБезопасномРежиме = Ложь)
	
	Если СценарийВБезопасномРежиме Тогда
		
		ВыполнитьСценарийВБезопасномРежиме(ВнешнийОбъект, ПараметрыКоманды);
		
	Иначе
		
		Если ПараметрыКоманды = Неопределено Тогда
			
			ВнешнийОбъект.ВыполнитьКоманду(ИдентификаторКоманды);
			
		Иначе
			
			ВнешнийОбъект.ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования.
Процедура ВыполнитьНазначаемуюКомандуДополнительногоОтчетаИлиОбработки(ВнешнийОбъект, Знач ИдентификаторКоманды, ПараметрыКоманды, ОбъектыНазначения, Знач СценарийВБезопасномРежиме = Ложь)
	
	Если СценарийВБезопасномРежиме Тогда
		
		ВыполнитьСценарийВБезопасномРежиме(ВнешнийОбъект, ПараметрыКоманды, ОбъектыНазначения);
		
	Иначе
		
		Если ПараметрыКоманды = Неопределено Тогда
			ВнешнийОбъект.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения);
		Иначе
			ВнешнийОбъект.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения, ПараметрыКоманды);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования.
Процедура ВыполнитьКомандуСозданияСвязанныхОбъектов(ВнешнийОбъект, Знач ИдентификаторКоманды, ПараметрыКоманды, ОбъектыНазначения, ИзмененныеОбъекты, Знач СценарийВБезопасномРежиме = Ложь)
	
	Если СценарийВБезопасномРежиме Тогда
		
		ПараметрыКоманды.Вставить("ИзмененныеОбъекты", ИзмененныеОбъекты);
		
		ВыполнитьСценарийВБезопасномРежиме(ВнешнийОбъект, ПараметрыКоманды, ОбъектыНазначения);
		
	Иначе
		
		Если ПараметрыКоманды = Неопределено Тогда
			ВнешнийОбъект.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения, ИзмененныеОбъекты);
		Иначе
			ВнешнийОбъект.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения, ИзмененныеОбъекты, ПараметрыКоманды);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования.
Процедура ВыполнитьКомандуФормированияПечатнойФормы(ВнешнийОбъект, Знач ИдентификаторКоманды, ПараметрыКоманды, ОбъектыНазначения, Знач СценарийВБезопасномРежиме = Ложь)
	
	Если СценарийВБезопасномРежиме Тогда
		
		ВыполнитьСценарийВБезопасномРежиме(ВнешнийОбъект, ПараметрыКоманды, ОбъектыНазначения);
		
	Иначе
		
		Если ПараметрыКоманды = Неопределено Тогда
			ВнешнийОбъект.Печать(ИдентификаторКоманды, ОбъектыНазначения);
		Иначе
			ВнешнийОбъект.Печать(ИдентификаторКоманды, ОбъектыНазначения, ПараметрыКоманды);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет команду дополнительного отчета или обработки из объекта.
Функция ВыполнитьКомандуВнешнегоОбъекта(ВнешнийОбъект, ИдентификаторКоманды, ПараметрыКоманды, АдресРезультата)
	
	СведенияОВнешнемОбъекте = ВнешнийОбъект.СведенияОВнешнейОбработке();
	
	ВидОбработки = ПолучитьВидОбработкиПоСтроковомуПредставлениюВида(СведенияОВнешнемОбъекте.Вид);
	
	ПередаватьПараметры = (
		СведенияОВнешнемОбъекте.Свойство("ВерсияБСП")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СведенияОВнешнемОбъекте.ВерсияБСП, "1.2.1.4") >= 0);
	
	РезультатВыполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыКоманды, "РезультатВыполнения");
	Если ТипЗнч(РезультатВыполнения) <> Тип("Структура") Тогда
		ПараметрыКоманды.Вставить("РезультатВыполнения", СтандартныеПодсистемыКлиентСервер.ОписаниеРезультатаВыполнения());
	КонецЕсли;
	
	ОписаниеКоманды = СведенияОВнешнемОбъекте.Команды.Найти(ИдентификаторКоманды, "Идентификатор");
	Если ОписаниеКоманды = Неопределено Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Команда %1 не обнаружена!'"), ИдентификаторКоманды);
		
	КонецЕсли;
	ЭтоСценарийВБезопасномРежиме = (ОписаниеКоманды.Использование = "СценарийВБезопасномРежиме");
	
	ИзмененныеОбъекты = Неопределено;
	
	Если ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка
		ИЛИ ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		
		ВыполнитьКомандуДополнительногоОтчетаИлиОбработки(
			ВнешнийОбъект,
			ИдентификаторКоманды,
			?(ПередаватьПараметры, ПараметрыКоманды, Неопределено),
			ЭтоСценарийВБезопасномРежиме);
		
	ИначеЕсли ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов Тогда
		
		ИзмененныеОбъекты = Новый Массив;
		ВыполнитьКомандуСозданияСвязанныхОбъектов(
			ВнешнийОбъект,
			ИдентификаторКоманды,
			?(ПередаватьПараметры, ПараметрыКоманды, Неопределено),
			ПараметрыКоманды.ОбъектыНазначения,
			ИзмененныеОбъекты,
			ЭтоСценарийВБезопасномРежиме);
		
	ИначеЕсли ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта
		ИЛИ ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		ИЛИ ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
		
		ОбъектыНазначения = Неопределено;
		ПараметрыКоманды.Свойство("ОбъектыНазначения", ОбъектыНазначения);
		
		Если ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
			
			// Здесь только произвольная печать. Печать в MXL выполняется средствами подсистемы Печать.
			ВыполнитьКомандуФормированияПечатнойФормы(
				ВнешнийОбъект,
				ИдентификаторКоманды,
				?(ПередаватьПараметры, ПараметрыКоманды, Неопределено),
				ОбъектыНазначения,
				ЭтоСценарийВБезопасномРежиме);
			
		Иначе
			
			ВыполнитьНазначаемуюКомандуДополнительногоОтчетаИлиОбработки(
				ВнешнийОбъект,
				ИдентификаторКоманды,
				?(ПередаватьПараметры, ПараметрыКоманды, Неопределено),
				ОбъектыНазначения,
				ЭтоСценарийВБезопасномРежиме);
			
			Если ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта Тогда
				ИзмененныеОбъекты = ОбъектыНазначения;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтандартныеПодсистемыКлиентСервер.ОповеститьДинамическиеСписки(ПараметрыКоманды.РезультатВыполнения, ИзмененныеОбъекты);
	
	Если ТипЗнч(АдресРезультата) = Тип("Строка") И ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		ПоместитьВоВременноеХранилище(ПараметрыКоманды.РезультатВыполнения, АдресРезультата);
	КонецЕсли;
	
	Возврат ПараметрыКоманды.РезультатВыполнения;
	
КонецФункции

// Для внутреннего использования.
Процедура ВыполнитьСценарийВБезопасномРежиме(ВнешнийОбъект, ПараметрыКоманды, ОбъектыНазначения = Неопределено)
	
	РасширениеБезопасногоРежима = ДополнительныеОтчетыИОбработкиВБезопасномРежимеСлужебный;
	
	ВнешнийОбъект = ПолучитьОбъектВнешнейОбработки(ПараметрыКоманды.ДополнительнаяОбработкаСсылка);
	ИдентификаторКоманды = ПараметрыКоманды.ИдентификаторКоманды;
	
	Сценарий = ВнешнийОбъект.СформироватьСценарий(ИдентификаторКоманды, ПараметрыКоманды);
	КлючСессии = ДополнительныеОтчетыИОбработкиВБезопасномРежимеСлужебный.СформироватьКлючСессииРасширенияБезопасногоРежима(
		ПараметрыКоманды.ДополнительнаяОбработкаСсылка);
	
	РасширениеБезопасногоРежима.ВыполнитьСценарийБезопасногоРежима(
		КлючСессии, Сценарий, ВнешнийОбъект, ПараметрыКоманды, Неопределено, ОбъектыНазначения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Другие

// Для внутреннего использования.
Функция ЗарегистрироватьОбработку(Знач Объект, Знач ПараметрыРегистрации) Экспорт
	
	ВидДополнительнаяОбработка = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
	ВидДополнительныйОтчет     = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет;
	ВидОтчет                   = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет;
	
	// Получает файл обработки из временного хранилища, пытается создать объект
	// обработки (внешнего отчета) и получает информацию из объекта внешней обработки (отчета).
	
	Если ПараметрыРегистрации.ОтключатьКонфликтующие Тогда
		Для Каждого ЭлементСписка Из ПараметрыРегистрации.Конфликтующие Цикл
			КонфликтующийОбъект = ЭлементСписка.Значение.ПолучитьОбъект();
			КонфликтующийОбъект.Публикация = ДополнительныеОтчетыИОбработкиПовтИсп.ВидПубликацииДляКонфликтующихОбработок();
			КонфликтующийОбъект.Записать();
		КонецЦикла;
	ИначеЕсли ПараметрыРегистрации.ОтключатьПубликацию Тогда
		Объект.Публикация = ДополнительныеОтчетыИОбработкиПовтИсп.ВидПубликацииДляКонфликтующихОбработок();
	КонецЕсли;
	
	Результат = Новый Структура("ИмяОбъекта, СтароеИмяОбъекта, Успех, ИмяОбъектаЗанято, Конфликтующие, ТекстОшибки, КраткоеПредставлениеОшибки");
	Результат.ИмяОбъектаЗанято = Ложь;
	Результат.Успех = Ложь;
	Если Объект.ЭтоНовый() Тогда
		Результат.СтароеИмяОбъекта = Объект.ИмяОбъекта;
	Иначе
		Результат.СтароеИмяОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ИмяОбъекта");
	КонецЕсли;
	
	РегистрационныеДанные = ПолучитьРегистрационныеДанные(Объект, ПараметрыРегистрации, Результат);
	Если РегистрационныеДанные = Неопределено
		Или РегистрационныеДанные.Количество() = 0
		Или ЗначениеЗаполнено(Результат.ТекстОшибки)
		Или ЗначениеЗаполнено(Результат.КраткоеПредставлениеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Если отчет публикуется, то необходим контроль уникальности имени объекта, 
	//     под которым дополнительный отчет регистрируется в системе.
	Если Объект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется Тогда
		// Проверка имени
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаСправочника.Ссылка,
		|	ТаблицаСправочника.Представление
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ТаблицаСправочника
		|ГДЕ
		|	ТаблицаСправочника.ИмяОбъекта = &ИмяОбъекта
		|	И &УсловиеДопОтчет
		|	И ТаблицаСправочника.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)
		|	И ТаблицаСправочника.ПометкаУдаления = ЛОЖЬ
		|	И ТаблицаСправочника.Ссылка <> &Ссылка";
		
		ВидыДопОтчетов = Новый Массив;
		ВидыДопОтчетов.Добавить(ВидДополнительныйОтчет);
		ВидыДопОтчетов.Добавить(ВидОтчет);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИмяОбъекта",     Результат.ИмяОбъекта);
		Запрос.УстановитьПараметр("ВидыДопОтчетов", ВидыДопОтчетов);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Если ПараметрыРегистрации.ЭтоОтчет Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДопОтчет", "ТаблицаСправочника.Вид В (&ВидыДопОтчетов)");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДопОтчет", "НЕ ТаблицаСправочника.Вид В (&ВидыДопОтчетов)");
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
		УстановитьПривилегированныйРежим(Истина);
		Конфликтующие = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Конфликтующие.Количество() > 0 Тогда
			Результат.ИмяОбъектаЗанято = Истина;
			Результат.Конфликтующие = Новый СписокЗначений;
			Для Каждого СтрокаТаблицы Из Конфликтующие Цикл
				Результат.Конфликтующие.Добавить(СтрокаТаблицы.Ссылка, СтрокаТаблицы.Представление);
			КонецЦикла;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если РегистрационныеДанные.БезопасныйРежим
		ИЛИ Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		// ничего не делаем
	Иначе
		Результат.ТекстОшибки = НСтр("ru = 'Для подключения обработки, запускаемой в небезопасном режиме, требуются административные права.'");
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ Объект.ЭтоНовый() И РегистрационныеДанные.Вид <> Объект.Вид Тогда
		Результат.ТекстОшибки = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вид загружаемого объекта (%1) не соответствует текущему (%2).
					|Для загрузки нового объекта нажмите ""Создать"".'"),
				Строка(РегистрационныеДанные.Вид),
				Строка(Объект.Вид));
		Возврат Результат;
	ИначеЕсли ПараметрыРегистрации.ЭтоОтчет <> (РегистрационныеДанные.Вид = ВидДополнительныйОтчет ИЛИ РегистрационныеДанные.Вид = ВидОтчет) Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Вид обработки, указанный в сведениях о внешней обработке, не соответствует ее расширению.'");
		Возврат Результат;
	КонецЕсли;
	
	Объект.Наименование    = РегистрационныеДанные.Наименование;
	Объект.Версия          = РегистрационныеДанные.Версия;
	
	Если РегистрационныеДанные.Свойство("ВерсияБСП") Тогда
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(РегистрационныеДанные.ВерсияБСП, "2.2.2.0") > 0 Тогда
			Объект.РежимСовместимостиРазрешений = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_2_2;
		Иначе
			Объект.РежимСовместимостиРазрешений = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_1_3;
		КонецЕсли;
	Иначе
		Объект.РежимСовместимостиРазрешений = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_1_3;
	КонецЕсли;
	
	Если РегистрационныеДанные.Свойство("БезопасныйРежим") Тогда
		Объект.БезопасныйРежим = РегистрационныеДанные.БезопасныйРежим;
	КонецЕсли;
	
	Объект.Информация      = РегистрационныеДанные.Информация;
	Объект.ИмяФайла        = ПараметрыРегистрации.ИмяФайла;
	Объект.ИмяОбъекта      = Результат.ИмяОбъекта;
	
	Объект.ИспользуетХранилищеВариантов = Ложь;
	Если (РегистрационныеДанные.Вид = ВидДополнительныйОтчет) ИЛИ (РегистрационныеДанные.Вид = ВидОтчет) Тогда
		Если РегистрационныеДанные.ХранилищеВариантов = "ХранилищеВариантовОтчетов"
			ИЛИ (Метаданные.ХранилищеВариантовОтчетов <> Неопределено
				И Метаданные.ХранилищеВариантовОтчетов.Имя = "ХранилищеВариантовОтчетов") Тогда
			Объект.ИспользуетХранилищеВариантов = Истина;
		КонецЕсли;
		РегистрационныеДанные.Свойство("ОпределитьНастройкиФормы", Объект.ТеснаяИнтеграцияСФормойОтчета);
	КонецЕсли;
	
	// Загружена другая обработка (изменилось имя объекта или вид обработки).
	Если Объект.ЭтоНовый() ИЛИ Объект.ИмяОбъекта <> Результат.ИмяОбъекта ИЛИ Объект.Вид <> РегистрационныеДанные.Вид Тогда
		Объект.Назначение.Очистить();
		Объект.Разделы.Очистить();
		Объект.Вид = РегистрационныеДанные.Вид;
	КонецЕсли;
	
	// Если не заполнено назначение - устанавливаем назначение из обработки.
	Если Объект.Назначение.Количество() = 0
		И Объект.Вид <> ВидДополнительныйОтчет
		И Объект.Вид <> ВидДополнительнаяОбработка Тогда
		
		Если РегистрационныеДанные.Свойство("Назначение") Тогда
			ТаблицаОбъектовМетаданных = ПодключенныеОбъектыМетаданных(Объект.Вид);
			
			Для Каждого ПолноеИмяОбъектаМетаданных Из РегистрационныеДанные.Назначение Цикл
				ПозицияТочки = СтрНайти(ПолноеИмяОбъектаМетаданных, ".");
				Если Сред(ПолноеИмяОбъектаМетаданных, ПозицияТочки + 1) = "*" Тогда
					Поиск = Новый Структура("Вид", Лев(ПолноеИмяОбъектаМетаданных, ПозицияТочки - 1));
				Иначе
					Поиск = Новый Структура("ПолноеИмя", ПолноеИмяОбъектаМетаданных);
				КонецЕсли;
				
				Найденные = ТаблицаОбъектовМетаданных.НайтиСтроки(Поиск);
				Для Каждого СтрокаТаблицы Из Найденные Цикл
					СтрокаНазначение = Объект.Назначение.Добавить();
					СтрокаНазначение.ОбъектНазначения = СтрокаТаблицы.Ссылка;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Объект.Назначение.Свернуть("ОбъектНазначения", "");
		
	КонецЕсли;
	
	Объект.Команды.Очистить();
	
	// Инициализация команд
	
	Для Каждого КомандаОписание Из РегистрационныеДанные.Команды Цикл
		
		Если НЕ ЗначениеЗаполнено(КомандаОписание.ВариантЗапуска) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для команды ""%1"" не определен способ запуска.'"), КомандаОписание.Представление));
		КонецЕсли;
		
		Команда = Объект.Команды.Добавить();
		ЗаполнитьЗначенияСвойств(Команда, КомандаОписание);
		
	КонецЦикла;
	
	// Чтение разрешений, запрашиваемых дополнительной обработкой.
	Объект.Разрешения.Очистить();
	Разрешения = Неопределено;
	Если РегистрационныеДанные.Свойство("Разрешения", Разрешения) Тогда
		
		Для Каждого Разрешение Из Разрешения Цикл
			
			ТипXDTO = Разрешение.Тип();
			
			СтрокаТЧ = Объект.Разрешения.Добавить();
			СтрокаТЧ.ВидРазрешения = ТипXDTO.Имя;
			
			Параметры = Новый Структура();
			
			Для Каждого СвойствоXDTO Из ТипXDTO.Свойства Цикл
				
				Контейнер = Разрешение.ПолучитьXDTO(СвойствоXDTO.Имя);
				
				Если Контейнер <> Неопределено Тогда
					Параметры.Вставить(СвойствоXDTO.Имя, Контейнер.Значение);
				Иначе
					Параметры.Вставить(СвойствоXDTO.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаТЧ.Параметры = Новый ХранилищеЗначения(Параметры);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Результат.Успех = Истина;
	
	Возврат Результат;
	
КонецФункции

// Для внутреннего использования.
Функция ПолучитьРегистрационныеДанные(Знач Объект, Знач ПараметрыРегистрации, Знач РезультатРегистрации)
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки\ПриПолученииРегистрационныхДанных");
	
	РегистрационныеДанные = Новый Структура;
	
	СтандартнаяОбработка = Истина;
	
	Для Каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриПолученииРегистрационныхДанных(Объект, РегистрационныеДанные, СтандартнаяОбработка);
	КонецЦикла;
	
	Если СтандартнаяОбработка Тогда
		ПриПолученииРегистрационныхДанных(Объект, РегистрационныеДанные, ПараметрыРегистрации, РезультатРегистрации);
	КонецЕсли;
	
	Возврат РегистрационныеДанные;
КонецФункции

// Для внутреннего использования.
Процедура ПриПолученииРегистрационныхДанных(Объект, РегистрационныеДанные, ПараметрыРегистрации, РезультатРегистрации)
	
	// Подключение и получение имени, под которым объект будет подключаться.
	Менеджер = ?(ПараметрыРегистрации.ЭтоОтчет, ВнешниеОтчеты, ВнешниеОбработки);
	
	ИнформацияОбОшибке = Неопределено;
	Попытка
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			РезультатРегистрации.ИмяОбъекта = ПолучитьИмяВременногоФайла();
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыРегистрации.АдресДанныхОбработки);
			ДвоичныеДанные.Записать(РезультатРегистрации.ИмяОбъекта);
		#Иначе
			РезультатРегистрации.ИмяОбъекта = СокрЛП(Менеджер.Подключить(ПараметрыРегистрации.АдресДанныхОбработки, , Истина));
		#КонецЕсли
		
		// Получение сведений о внешней обработке.
		ВнешнийОбъект = Менеджер.Создать(РезультатРегистрации.ИмяОбъекта);
		ВнешнийОбъектМетаданные = ВнешнийОбъект.Метаданные();
		
		СведенияОВнешнейОбработке = ВнешнийОбъект.СведенияОВнешнейОбработке();
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(РегистрационныеДанные, СведенияОВнешнейОбработке, Истина);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	Если ИнформацияОбОшибке <> Неопределено Тогда
		Если ПараметрыРегистрации.ЭтоОтчет Тогда
			ТекстОшибки = НСтр("ru='Невозможно подключить дополнительный отчет из файла.
			|Возможно, он не подходит для этой версии программы.'");
		Иначе
			ТекстОшибки = НСтр("ru='Невозможно подключить дополнительную обработку из файла.
			|Возможно, она не подходит для этой версии программы.'");
		КонецЕсли;
		РезультатРегистрации.ТекстОшибки = ТекстОшибки;
		РезультатРегистрации.КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС + НСтр("ru = 'Техническая информация:'") + Символы.ПС;
		ЗаписатьОшибку(Объект.Ссылка, ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат;
	КонецЕсли;
	
	Если РегистрационныеДанные.Наименование = Неопределено ИЛИ РегистрационныеДанные.Информация = Неопределено Тогда
		Если РегистрационныеДанные.Наименование = Неопределено Тогда
			РегистрационныеДанные.Наименование = ВнешнийОбъектМетаданные.Представление();
		КонецЕсли;
		Если РегистрационныеДанные.Информация = Неопределено Тогда
			РегистрационныеДанные.Информация = ВнешнийОбъектМетаданные.Комментарий;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(РегистрационныеДанные.Вид) <> Тип("ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок") Тогда
		РегистрационныеДанные.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок[РегистрационныеДанные.Вид];
	КонецЕсли;
	
	РегистрационныеДанные.Вставить("ХранилищеВариантов");
	Если РегистрационныеДанные.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет
		Или РегистрационныеДанные.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
		Если ВнешнийОбъектМетаданные.ХранилищеВариантов <> Неопределено Тогда
			РегистрационныеДанные.ХранилищеВариантов = ВнешнийОбъектМетаданные.ХранилищеВариантов.Имя;
		КонецЕсли;
	КонецЕсли;
	
	РегистрационныеДанные.Команды.Колонки.Добавить("ВариантЗапуска");
	
	Для Каждого КомандаОписание Из РегистрационныеДанные.Команды Цикл
		КомандаОписание.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок[КомандаОписание.Использование];
	КонецЦикла;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		РезультатРегистрации.ИмяОбъекта = ВнешнийОбъектМетаданные.Имя;
	#КонецЕсли
КонецПроцедуры

// Только для внутреннего использования.
//
Функция КоличествоДополнительныхОтчетовИОбработок()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеОтчетыИОбработки.Наименование
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат.Количество();
	
КонецФункции

#КонецОбласти
