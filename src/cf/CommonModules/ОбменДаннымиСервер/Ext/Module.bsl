////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обмен данными"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура-обработчик события "ПриСозданииНаСервере" для формы узла плана обмена.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из которой вызвана процедура.
//  Отказ - Булево           - признак отказа от создания формы. Если установить в Истина, то форма создана не будет.
// 
Процедура ФормаУзлаПриСозданииНаСервере(Форма, Отказ) Экспорт
	
	Если Форма.Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Форма.АвтоЗаголовок = Ложь;
	Форма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Форма.Объект.Наименование + " (%1)",
		ПереопределяемоеИмяУзлаПланаОбмена(Форма.Объект.Ссылка, "ЗаголовокУзлаПланаОбмена"));
	
КонецПроцедуры

// Процедура-обработчик события "ПриСозданииНаСервере" для формы настройки узлов плана обмена.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из которой вызвана процедура.
//  Отказ - Булево           - признак отказа от создания формы. Если установить в Истина, то форма создана не будет.
// 
Процедура ФормаНастройкиУзловПриСозданииНаСервере(Форма, Отказ) Экспорт
	
	Параметры = Форма.Параметры;
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИдентификаторНастройки = "";
	
	Если Форма.Параметры.Свойство("ИдентификаторНастройки") Тогда
		ИдентификаторНастройки = Форма.Параметры.ИдентификаторНастройки;
	КонецЕсли;
	
	УстановитьОбязательныеРеквизитыФормы(Форма, ОбязательныеРеквизитыФормыНастройкиУзлов());
	
	Форма.ВерсияКорреспондента = Параметры.ВерсияКорреспондента;
	
	Контекст = Новый Структура;
	
	Если Параметры.Свойство("ПолучитьЗначенияПоУмолчанию") Тогда
		
		ИмяПланаОбмена = СтрРазделить(Форма.ИмяФормы, ".")[1];
		
		НастройкаОтборовНаУзле                   = НастройкаОтборовНаУзле(ИмяПланаОбмена, Параметры.ВерсияКорреспондента, , ИдентификаторНастройки);
		НастройкаОтборовНаУзлеБазыКорреспондента = НастройкаОтборовНаУзлеБазыКорреспондента(ИмяПланаОбмена, Параметры.ВерсияКорреспондента, , ИдентификаторНастройки);
		ИзменитьСтруктуруХраненияТабличныхЧастей(НастройкаОтборовНаУзлеБазыКорреспондента);
		
	Иначе
		
		НастройкаОтборовНаУзле = Форма.Параметры.Настройки.НастройкаОтборовНаУзле;
		НастройкаОтборовНаУзлеБазыКорреспондента = Форма.Параметры.Настройки.НастройкаОтборовНаУзлеБазыКорреспондента;
		
	КонецЕсли;
	
	Контекст.Вставить("НастройкаОтборовНаУзле", НастройкаОтборовНаУзле);
	Контекст.Вставить("НастройкаОтборовНаУзлеБазыКорреспондента", НастройкаОтборовНаУзлеБазыКорреспондента);
	
	Форма.Контекст = Контекст;
	
	ЗаполнитьДанныеФормы(Форма);
	
	Если Не Параметры.Свойство("ПроверкаЗаполнения") И Не Параметры.Свойство("ПолучитьЗначенияПоУмолчанию") Тогда
		ВыполнитьСравнениеИОбъединениеТаблицФормы(Форма, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события "ПриСозданииНаСервере" для формы настройки узла.
//
// Параметры:
//  Форма          - УправляемаяФорма - форма, из которой вызвана процедура.
//  ИмяПланаОбмена - Строка           - имя плана обмена, для которого создана форма.
// 
Процедура ФормаНастройкиУзлаПриСозданииНаСервере(Форма, ИмяПланаОбмена) Экспорт
	
	Если Форма.Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИдентификаторНастройки = "";
	
	Если Форма.Параметры.Свойство("ИдентификаторНастройки") Тогда
		ИдентификаторНастройки = Форма.Параметры.ИдентификаторНастройки;
	КонецЕсли;
	
	ПроверитьОбязательныеРеквизитыФормы(Форма, "НастройкаОтборовНаУзле, ВерсияКорреспондента");
	
	Форма.ВерсияКорреспондента   = Форма.Параметры.ВерсияКорреспондента;
	Форма.НастройкаОтборовНаУзле = НастройкаОтборовНаУзле(ИмяПланаОбмена, Форма.ВерсияКорреспондента, , ИдентификаторНастройки);
	
	ФормаНастройкиУзлаОбработчикПриСозданииНаСервере(Форма, "НастройкаОтборовНаУзле");
	
КонецПроцедуры

// Процедура-обработчик события "ПриСозданииНаСервере" для формы настройки узла базы корреспондента.
//
// Параметры:
//  Форма          - УправляемаяФорма - форма базы корреспондента.
//  ИмяПланаОбмена - Строка           - имя плана обмена, для которого создана форма.
//  Данные         - Соответствие     - содержит список таблиц базы данных для задания правил синхронизации данных.
// 
Процедура ФормаНастройкиУзлаБазыКорреспондентаПриСозданииНаСервере(Форма, ИмяПланаОбмена, Данные = Неопределено) Экспорт
	
	Если Форма.Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИдентификаторНастройки = "";
	
	Если Форма.Параметры.Свойство("ИдентификаторНастройки") Тогда
		ИдентификаторНастройки = Форма.Параметры.ИдентификаторНастройки;
	КонецЕсли;
	
	ПроверитьОбязательныеРеквизитыФормы(Форма, "ВерсияКорреспондента, НастройкаОтборовНаУзле, ПараметрыВнешнегоСоединения");
	
	Форма.ВерсияКорреспондента        = Форма.Параметры.ВерсияКорреспондента;
	Форма.ПараметрыВнешнегоСоединения = Форма.Параметры.ПараметрыВнешнегоСоединения;
	Форма.НастройкаОтборовНаУзле      = НастройкаОтборовНаУзлеБазыКорреспондента(ИмяПланаОбмена, Форма.ВерсияКорреспондента, , ИдентификаторНастройки);
	
	ФормаНастройкиУзлаОбработчикПриСозданииНаСервере(Форма, "НастройкаОтборовНаУзле");
	
	Если Данные <> Неопределено И ТипЗнч(Данные) = Тип("Соответствие") Тогда
		
		Подключение = ОбменДаннымиПовтИсп.УстановитьВнешнееСоединениеСБазой(Форма.ПараметрыВнешнегоСоединения);
		СтрокаСообщенияОбОшибке = Подключение.ПодробноеОписаниеОшибки;
		ВнешнееСоединение       = Подключение.Соединение;
		
		Если ВнешнееСоединение = Неопределено Тогда
			ВызватьИсключение СтрокаСообщенияОбОшибке;
		КонецЕсли;
		
		Для Каждого Таблица Из Данные Цикл
			
			Если    Форма.ПараметрыВнешнегоСоединения.ВерсияКорреспондента_2_1_1_7
				ИЛИ Форма.ПараметрыВнешнегоСоединения.ВерсияКорреспондента_2_0_1_6 Тогда
				
				ТаблицаБазыКорреспондента = ОбщегоНазначения.ЗначениеИзСтрокиXML(ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьОбъектыТаблицы_2_0_1_6(Таблица.Ключ));
				
			Иначе
				
				ТаблицаБазыКорреспондента = ЗначениеИзСтрокиВнутр(ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьОбъектыТаблицы(Таблица.Ключ));
				
			КонецЕсли;
			
			Данные.Вставить(Таблица.Ключ, ТаблицаЗначенийИзДереваЗначений(ТаблицаБазыКорреспондента));
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события "ПриСозданииНаСервере" для формы настройки значений по умолчанию.
//
// Параметры:                            
//  Форма          - УправляемаяФорма - форма, из которой вызвана процедура.
//  ИмяПланаОбмена - Строка           - имя плана обмена, для которого создана форма.
// 
Процедура ФормаНастройкиЗначенийПоУмолчаниюПриСозданииНаСервере(Форма, ИмяПланаОбмена) Экспорт
	
	Если Форма.Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИдентификаторНастройки = "";
	
	Если Форма.Параметры.Свойство("ИдентификаторНастройки") Тогда
		ИдентификаторНастройки = Форма.Параметры.ИдентификаторНастройки;
	КонецЕсли;
	
	ПроверитьОбязательныеРеквизитыФормы(Форма, "ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента");
	
	Форма.ВерсияКорреспондента      = Форма.Параметры.ВерсияКорреспондента;
	Форма.ЗначенияПоУмолчаниюНаУзле = ЗначенияПоУмолчаниюНаУзле(ИмяПланаОбмена, Форма.ВерсияКорреспондента, , ИдентификаторНастройки);
	
	ФормаНастройкиУзлаОбработчикПриСозданииНаСервере(Форма, "ЗначенияПоУмолчаниюНаУзле");
	
КонецПроцедуры

// Процедура-обработчик события "ПриСозданииНаСервере" для формы настройки значений по умолчанию,
// через внешнее соединение для базы корреспондента.
//
// Параметры:                            
//  Форма                - УправляемаяФорма - форма, из которой вызвана процедура.
//  ИмяПланаОбмена       - Строка           - имя плана обмена, для которого создана форма.
//  ДополнительныеДанные - Произвольный     - для получения дополнительных данных.
// 
Процедура ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондентаПриСозданииНаСервере(Форма, ИмяПланаОбмена, ДополнительныеДанные = Неопределено) Экспорт
	
	Если Форма.Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИдентификаторНастройки = "";
	
	Если Форма.Параметры.Свойство("ИдентификаторНастройки") Тогда
		ИдентификаторНастройки = Форма.Параметры.ИдентификаторНастройки;
	КонецЕсли;
	
	ПроверитьОбязательныеРеквизитыФормы(Форма, "ВерсияКорреспондента, ЗначенияПоУмолчаниюНаУзле, ПараметрыВнешнегоСоединения");
	
	Форма.ВерсияКорреспондента        = Форма.Параметры.ВерсияКорреспондента;
	Форма.ПараметрыВнешнегоСоединения = Форма.Параметры.ПараметрыВнешнегоСоединения;
	Форма.ЗначенияПоУмолчаниюНаУзле   = ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(ИмяПланаОбмена, Форма.ВерсияКорреспондента, , ИдентификаторНастройки);
	
	ФормаНастройкиУзлаОбработчикПриСозданииНаСервере(Форма, "ЗначенияПоУмолчаниюНаУзле");
	
	Если Форма.ПараметрыВнешнегоСоединения.ТипСоединения = "ВременноеХранилище" Тогда
		
		ДополнительныеДанные = ПолучитьИзВременногоХранилища(
			Форма.ПараметрыВнешнегоСоединения.АдресВременногоХранилища).Получить().Получить("{ДополнительныеДанные}");
	КонецЕсли;
	
КонецПроцедуры

// Удаляет из списка реквизитов для обязательного заполнения те реквизиты,
// которые не отображаются на форме.
//
// Параметры:
//	ПроверяемыеРеквизиты - Массив           - список реквизитов, для которых выполняется проверка заполнения.
//	Элементы             - ВсеЭлементыФормы - содержит коллекцию всех элементов управляемой формы.
//
Процедура ОпределитьПроверяемыеРеквизитыСУчетомНастроекВидимостиПолейФормы(ПроверяемыеРеквизиты, Элементы) Экспорт
	
	ОбратныйИндекс = ПроверяемыеРеквизиты.Количество() - 1;
	
	Пока ОбратныйИндекс >= 0 Цикл
		
		ИмяРеквизита = ПроверяемыеРеквизиты[ОбратныйИндекс];
		
		Для Каждого Элемент Из Элементы Цикл
			
			Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
				
				Если Элемент.ПутьКДанным = ИмяРеквизита
					И Не Элемент.Видимость Тогда
					
					ПроверяемыеРеквизиты.Удалить(ОбратныйИндекс);
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбратныйИндекс = ОбратныйИндекс - 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет необходимость выполнения обработчика события "ПослеВыгрузкиДанных" при обмене в РИБ.
//
// Параметры:
//  Объект - ПланОбменаОбъект - узел плана обмена, для которого выполняется обработчик.
//  Ссылка - ПланОбменаСсылка - ссылка на узел плана обмена, для которого выполняется обработчик.
// 
//  Возвращаемое значение:
//   Булево - если Истина, то необходимо выполнить обработчик "ПослеВыгрузкиДанных"; Ложь - нет.
//
Функция НадоВыполнитьОбработчикПослеВыгрузкиДанных(Объект, Ссылка) Экспорт
	
	Возврат НадоВыполнитьОбработчик(Объект, Ссылка, "НомерОтправленного");
	
КонецФункции

// Определяет необходимость выполнения обработчика события "ПослеЗагрузкиДанных" при обмене в РИБ.
//
// Параметры:
//  Объект - ПланОбменаОбъект - узел плана обмена, для которого выполняется обработчик.
//  Ссылка - ПланОбменаСсылка - ссылка на узел плана обмена, для которого выполняется обработчик.
// 
//  Возвращаемое значение:
//   Булево - если Истина, то необходимо выполнить обработчик "ПослеЗагрузкиДанных"; Ложь - нет.
//
Функция НадоВыполнитьОбработчикПослеЗагрузкиДанных(Объект, Ссылка) Экспорт
	
	Возврат НадоВыполнитьОбработчик(Объект, Ссылка, "НомерПринятого");
	
КонецФункции

// Возвращает префикс этой информационной базы.
//
// Возвращаемое значение:
//   Строка
//
Функция ПрефиксИнформационнойБазы() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
	
КонецФункции

// Возвращает версию конфигурации корреспондента.
// Если версия конфигурации корреспондента не определена, то возвращает пустую версию - "0.0.0.0".
//
// Параметры:
//  Корреспондент - ПланОбменаСсылка - узел плана обмена, для которого необходимо получить версию конфигурации.
// 
// Возвращаемое значение:
//  Строка - версия конфигурации корреспондента.
//
// Пример:
//  Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ОбменДаннымиСервер.ВерсияКорреспондента(Корреспондент), "2.1.5.1") >= 0 Тогда ...
//
Функция ВерсияКорреспондента(Знач Корреспондент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.ВерсияКорреспондента(Корреспондент);
КонецФункции

// Устанавливает префикс этой информационной базы.
//
// Параметры:
//   Префикс - Строка - новое значение префикса информационной базы.
//
Процедура УстановитьПрефиксИнформационнойБазы(Знач Префикс) Экспорт
	
	Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Установить(СокрЛП(Префикс));
	
	ОбменДаннымиВызовСервера.СброситьКэшМеханизмаРегистрацииОбъектов();
	
КонецПроцедуры

// Проверяет факт восстановления этой базы из резервной копии.
// Если база была восстановлена из резервной копии, то необходимо выполнить синхронизацию номеров отправленных и
// полученных сообщений для двух баз (номеру отправленного сообщения в этой базе присваивается значение номера
// принятого сообщения из базы-корреспондента).
// Если база была восстановлена из резервной копии, то рекомендуется не снимать с регистрации изменения данных на
// текущем узле, т.к. эти данные могли быть еще не отправлены.
//
// Параметры:
//   Отправитель    - ПланОбменаСсылка - узел, от имени которого было сформировано и отправлено сообщение обмена.
//   НомерПринятого - Число            - номер принятого сообщения в базе-корреспонденте.
//
// Возвращаемое значение:
//   ФиксированнаяСтруктура - свойства структуры:
//     * Отправитель                 - ПланОбменаСсылка - см. выше параметр Отправитель.
//     * НомерПринятого              - Число            - см. выше параметр НомерПринятого.
//     * ВосстановленаРезервнаяКопия - Булево - Истина, если обнаружен факт восстановления этой базы из резервной копии.
//
Функция ПараметрыРезервнойКопии(Знач Отправитель, Знач НомерПринятого) Экспорт
	
	// Для базы, которая была поднята из резервной копии, номер отправленного сообщения
	// будет меньше номера принятого сообщения в корреспонденте.
	// Т.е. эта база получит номер принятого сообщения,
	// который она еще не отправляла - "сообщение из будущего".
	Результат = Новый Структура("Отправитель, НомерПринятого, ВосстановленаРезервнаяКопия");
	Результат.Отправитель = Отправитель;
	Результат.НомерПринятого = НомерПринятого;
	Результат.ВосстановленаРезервнаяКопия = (НомерПринятого > ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отправитель, "НомерОтправленного"));
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции

// Выполняет синхронизацию номеров отправленных и полученных сообщений
// для двух баз (номеру отправленного сообщения в этой базе присваивается значение номера принятого сообщения из
// базы-корреспондента).
//
// Параметры:
//   ПараметрыРезервнойКопии - ФиксированнаяСтруктура - свойства структуры:
//     * Отправитель                 - ПланОбменаСсылка - узел, от имени которого было сформировано и отправлено
//                                                        сообщение обмена.
//     * НомерПринятого              - Число            - номер принятого сообщения в базе-корреспонденте.
//     * ВосстановленаРезервнаяКопия - Булево           - признак восстановления этой базы из резервной копии.
//
Процедура ПриВосстановленииРезервнойКопии(Знач ПараметрыРезервнойКопии) Экспорт
	
	Если ПараметрыРезервнойКопии.ВосстановленаРезервнаяКопия Тогда
		
		// Устанавливаем в качестве номера отправленного сообщения в этой базе номер принятого сообщения в корреспонденте.
		ОбъектУзла = ПараметрыРезервнойКопии.Отправитель.ПолучитьОбъект();
		ОбъектУзла.НомерОтправленного = ПараметрыРезервнойКопии.НомерПринятого;
		ОбъектУзла.ОбменДанными.Загрузка = Истина;
		ОбъектУзла.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает, если оно задано, переопределяемое имя плана обмена, 
// в зависимости от предопределенной настройки обмена.
// Параметры:
//   УзелПланаОбмена         - ПланОбменаСсылка - узел плана обмена, для которого необходимо получить переопределяемое
//                                                имя.
//   ИмяПараметраСИменемУзла - Имя параметра, в настройках по умолчанию, из которого необходимо получить имя узла.
//
// Возвращаемое значение:
//  Строка - переопределяемое имя плана обмена как оно заданно в конфигураторе.
//
Функция ПереопределяемоеИмяУзлаПланаОбмена(Знач УзелПланаОбмена, ИмяПараметраСИменемУзла) Экспорт
	
	ИмяПланаОбмена                     = УзелПланаОбмена.Метаданные().Имя;
	ПереопределяемоеИмяУзлаПланаОбмена = УзелПланаОбмена.Метаданные().Синоним;
	
	ПереопределяемоеИмяУзлаПланаОбмена = ЗначениеНастройкиПланаОбмена(ИмяПланаОбмена, 
	                                                                  ИмяПараметраСИменемУзла, 
	                                                                  СохраненныйВариантНастройкиУзлаПланаОбмена(УзелПланаОбмена));
	
	Возврат ПереопределяемоеИмяУзлаПланаОбмена;
	
КонецФункции

// Возвращает идентификатор сохраненного варианта настройки плана обмена.
// Параметры:
//   УзелПланаОбмена         - ПланОбменаСсылка - узел плана обмена, для которого необходимо получить переопределяемое
//                                                имя.
//
// Возвращаемое значение:
//  Строка - идентификатор сохраненной настройки как он задан в конфигураторе.
//
Функция СохраненныйВариантНастройкиУзлаПланаОбмена(УзелПланаОбмена) Экспорт
	
	ВариантНастройки = "";
	
	ИмяПланаОбмена = УзелПланаОбмена.Метаданные().Имя;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВариантНастройки", УзелПланаОбмена.Метаданные()) Тогда
		
		ВариантНастройки = УзелПланаОбмена.ВариантНастройки;
		
	КонецЕсли;
	
	Возврат ВариантНастройки;
	
КонецФункции

// Возвращает массив всех видов транспорта сообщений обмена, определенных в конфигурации.
//
// Параметры:
//  Нет.
// 
//  Возвращаемое значение:
//   Массив - Элементы массива имеют тип "ПеречислениеСсылка.ВидыТранспортаСообщенийОбмена".
//
Функция ВсеТранспортыСообщенийОбменаКонфигурации() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.COM);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL);
	
	Возврат Результат;
КонецФункции

// Выполняет отправку или получение данных для узла информационной базы используя любой из 
// доступных для плана обмена канал связи, кроме COM-соединения и web-сервиса.
//
// Параметры:
//  Отказ                        - Булево - флаг отказа, устанавливается в Истина в случае
//                                 не успешного выполнения процедуры.
//  УзелИнформационнойБазы       - УзелОбменаСсылка - ПланОбменаСсылка - узел плана обмена,
//                                 для которого выполняется действие обмена данными.
//  ДействиеПриОбмене            - ПеречислениеСсылка.ДействияПриОбмене - выполняемое действие обмена данными.
//  ВидТранспортаСообщенийОбмена - ПеречислениеСсылка.Перечисления.ВидыТранспортаСообщенийОбмена - вид транспорта,
//                                 который будет использоваться в процессе обмена данными. Если не указан, 
//                                 определяется из параметров транспорта, заданных для узла плана обмена при
//                                 настройке обмена. Необязательный, значение по умолчанию Неопределено.
//  ТолькоПараметры              - Булево - содержит признак выборочной загрузки данных при обмене РИБ.
// 
Процедура ВыполнитьДействиеОбменаДляУзлаИнформационнойБазы(
		Отказ,
		УзелИнформационнойБазы,
		ДействиеПриОбмене,
		ВидТранспортаСообщенийОбмена = Неопределено,
		Знач ТолькоПараметры = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
	СтруктураНастроекОбмена = ОбменДаннымиПовтИсп.ПолучитьСтруктуруНастроекОбменаДляУзлаИнформационнойБазы(
		УзелИнформационнойБазы, ДействиеПриОбмене, ВидТранспортаСообщенийОбмена);
	
	Если СтруктураНастроекОбмена.Отказ Тогда
		
		// Если настройка содержит ошибки, то обмен не производим; статус "Отменено".
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		
		Отказ = Истина;
		
		Возврат;
	КонецЕсли;
	
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	СтруктураНастроекОбмена.ДатаНачала = ТекущаяДатаСеанса();
	
	СтрокаСообщения = НСтр("ru = 'Начало процесса обмена данными для узла %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование);
	ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
	
	// ОБМЕН ДАННЫМИ
	ВыполнитьОбменДаннымиЧерезФайловыйРесурс(СтруктураНастроекОбмена, ТолькоПараметры);
	
	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	
	Если Не РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество нерассмотренных проблем обмена данными. Используется для отображения
// количества проблем обмена в пользовательском интерфейсе. Например, для использования в заголовке
// гиперссылки для перехода к монитору проблем обмена.
//
// Параметры:
//   Узлы - Массив - массив значений ПланОбменаСсылка.
//
// Возвращаемое значение:
//   Число
// 
Функция КоличествоНерассмотренныхПроблем(Узлы = Неопределено) Экспорт
	
	Возврат КоличествоПроблемОбменаДанными(Узлы) + КоличествоПроблемВерсионирования(Узлы);
	
КонецФункции

// Возвращает структуру заголовка гиперссылки для перехода к монитору проблем обмена данными.
// 
// Параметры:
//   Узлы - Массив - массив значений ПланОбменаСсылка.
//
// Возвращаемое значение:
//	Структура - со свойствами:
//	  * Заголовок - Строка   - заголовок гиперссылки.
//	  * Картинка  - Картинка - картинка для гиперссылки.
//
Функция СтруктураЗаголовкаГиперссылкиМонитораПроблем(Узлы = Неопределено) Экспорт
	
	Количество = КоличествоНерассмотренныхПроблем(Узлы);
	
	Если Количество > 0 Тогда
		
		Заголовок = НСтр("ru = 'Предупреждения (%1)'");
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, Количество);
		Картинка = БиблиотекаКартинок.Предупреждение;
		
	Иначе
		
		Заголовок = НСтр("ru = 'Предупреждений нет'");
		Картинка = Новый Картинка;
		
	КонецЕсли;
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("Заголовок", Заголовок);
	СтруктураЗаголовка.Вставить("Картинка", Картинка);
	
	Возврат СтруктураЗаголовка;
	
КонецФункции

// Определяет, существует ли каталог на FTP-сервере.
//
// Параметры:
//  Путь - Строка - путь к каталогу.
//  ИмяКаталога - Строка - имя каталога.
//  FTPСоединение - FTPСоединение - FTPСоединение, используемое для подключения к FTP-серверу.
// 
// Возвращаемое значение:
//  Булево - если Истина, то каталог существует; Ложь - нет.
//
Функция FTPКаталогСуществует(Знач Путь, Знач ИмяКаталога, Знач FTPСоединение) Экспорт
	
	Для Каждого FTPФайл Из FTPСоединение.НайтиФайлы(Путь) Цикл
		
		Если FTPФайл.ЭтоКаталог() И FTPФайл.Имя = ИмяКаталога Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

// Возвращает имена реквизитов значений по умолчанию для узла базы корреспондента.
// Передаваемый массив повторяет состав реквизитов шапки плана обмена базы корреспондента.
// 
// Параметры:
//  ИмяПланаОбмена       - Строка - Имя плана обмена.
//  ВерсияКорреспондента - Строка - Номер версии корреспондента. Используется, например, для разного
//                                  состава значений по умолчанию на узле для разных версий корреспондента.
// 
// Возвращаемое значение:
//  ФиксированныйМассив - фиксированный массив строк, содержащий имена реквизитов значений 
//   по умолчанию для узла базы корреспондента.
//
Функция ТаблицыКорреспондентаДляЗначенийПоУмолчанию(Знач ИмяПланаОбмена, Знач ВерсияКорреспондента) Экспорт
	
	Результат = Новый Массив;
	
	ЗначенияПоУмолчанию = ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(ИмяПланаОбмена, ВерсияКорреспондента);
	
	Для Каждого Элемент Из ЗначенияПоУмолчанию Цикл
		
		Если СтрНайти(Элемент.Ключ, "_Ключ") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(Элемент.Ключ);
		
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(Результат);
	
КонецФункции

// Возвращает данные таблиц для реквизитов узла обмена.
// 
// Параметры:
//  Таблицы        - Массив - Массив строк с именами реквизитов узла плана обмена.
//  ИмяПланаОбмена - Строка - Имя плана обмена.
// 
// Возвращаемое значение:
//  Соответствие - соответствие таблиц и их данных.
//
Функция ДанныеТаблицКорреспондента(Таблицы, Знач ИмяПланаОбмена) Экспорт
	
	Результат = Новый Соответствие;
	РеквизитыПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Реквизиты;
	
	Для Каждого Элемент Из Таблицы Цикл
		
		Реквизит = РеквизитыПланаОбмена.Найти(Элемент);
		
		Если Реквизит <> Неопределено Тогда
			
			ТипыРеквизита = Реквизит.Тип.Типы();
			
			Если ТипыРеквизита.Количество() <> 1 Тогда
				
				СтрокаСообщения = НСтр("ru = 'Составной тип данных для значений по умолчанию не поддерживается.
					|Реквизит ""%1"".'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Реквизит.ПолноеИмя());
				ВызватьИсключение СтрокаСообщения;
			КонецЕсли;
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипыРеквизита.Получить(0));
			
			Если Не ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
				
				СтрокаСообщения = НСтр("ru = 'Выбор значений по умолчанию поддерживается только для справочников.
					|Реквизит ""%1"".'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Реквизит.ПолноеИмя());
				ВызватьИсключение СтрокаСообщения;
			КонецЕсли;
			
			ПолноеИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
			
			ДанныеТаблицы = Новый Структура("СвойстваОбъектаМетаданных, ТаблицаБазыКорреспондента");
			ДанныеТаблицы.СвойстваОбъектаМетаданных = СвойстваОбъектаМетаданных(ПолноеИмяОбъектаМетаданных);
			ДанныеТаблицы.ТаблицаБазыКорреспондента = ПолучитьОбъектыТаблицы(ПолноеИмяОбъектаМетаданных);
			
			Результат.Вставить(ПолноеИмяОбъектаМетаданных, ДанныеТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеДанные = Новый Структура;
	
	// {Обработчик: ПолучитьДополнительныеДанныеДляКорреспондента} Начало
	ПланыОбмена[ИмяПланаОбмена].ПолучитьДополнительныеДанныеДляКорреспондента(ДополнительныеДанные);
	// {Обработчик: ПолучитьДополнительныеДанныеДляКорреспондента} Окончание
	
	Результат.Вставить("{ДополнительныеДанные}", ДополнительныеДанные);
	
	Возврат Результат;
	
КонецФункции

// Выполняет установку в константе количества элементов в транзакции загрузки данных.
//
// Параметры:
//  Количество - Число - количество элементов в транзакции.
// 
Процедура УстановитьКоличествоЭлементовВТранзакцииЗагрузкиДанных(Количество) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.КоличествоЭлементовВТранзакцииЗагрузкиДанных.Установить(Количество);
	
КонецПроцедуры

// Возвращает представление даты синхронизации.
//
// Параметры:
// ДатаСинхронизации - Дата. Абсолютная дата синхронизации данных.
// 
// Возвращаемое значение:
//  Строка - строковое представление даты.
//
Функция ПредставлениеДатыСинхронизации(Знач ДатаСинхронизации) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаСинхронизации) Тогда
		Возврат НСтр("ru = 'Синхронизация не выполнялась.'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Последняя синхронизация: %1'"), ОтносительнаяДатаСинхронизации(ДатаСинхронизации));
КонецФункции

// Возвращает представление относительной даты синхронизации.
//
// Параметры:
// ДатаСинхронизации - Дата. Абсолютная дата синхронизации данных.
//
// Возвращаемое значение:
//  Строка:
//  Никогда             (Т = пустая дата).
//  Сейчас              (Т < 5 мин)
//  5 минут назад       (5 мин  < Т < 15 мин)
//  15 минут назад      (15 мин  < Т < 30 мин)
//  30 минут назад      (30 мин  < Т < 1 час)
//  1 час назад         (1 час  < Т < 2 час)
//  2 часа назад        (2 час  < Т < 3 час).
//  Сегодня, 12:44:12   (3 час  < Т < вчера).
//  Вчера, 22:30:45     (вчера  < Т < позавчера).
//  Позавчера, 21:22:54 (позавчера  < Т < поза-позавчера).
//  <12 Марта 2012г.>   (поза-позавчера < Т).
//
Функция ОтносительнаяДатаСинхронизации(Знач ДатаСинхронизации) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаСинхронизации) Тогда
		
		Возврат НСтр("ru = 'Никогда'");
		
	КонецЕсли;
	
	ДатаТекущая = ТекущаяДатаСеанса();
	
	Интервал = ДатаТекущая - ДатаСинхронизации;
	
	Если Интервал < 0 Тогда // 0 мин
		
		Результат = Формат(ДатаСинхронизации, "ДЛФ=DD");
		
	ИначеЕсли Интервал < 60 * 5 Тогда // 5 мин
		
		Результат = НСтр("ru = 'Сейчас'");
		
	ИначеЕсли Интервал < 60 * 15 Тогда // 15 мин
		
		Результат = НСтр("ru = '5 минут назад'");
		
	ИначеЕсли Интервал < 60 * 30 Тогда // 30 мин
		
		Результат = НСтр("ru = '15 минут назад'");
		
	ИначеЕсли Интервал < 60 * 60 * 1 Тогда // 1 час
		
		Результат = НСтр("ru = '30 минут назад'");
		
	ИначеЕсли Интервал < 60 * 60 * 2 Тогда // 2 часа
		
		Результат = НСтр("ru = '1 час назад'");
		
	ИначеЕсли Интервал < 60 * 60 * 3 Тогда // 3 часа
		
		Результат = НСтр("ru = '2 часа назад'");
		
	Иначе
		
		КоличествоДнейРазницы = КоличествоДнейРазницы(ДатаСинхронизации, ДатаТекущая);
		
		Если КоличествоДнейРазницы = 0 Тогда // сегодня
			
			Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сегодня, %1'"), Формат(ДатаСинхронизации, "ДЛФ=T"));
			
		ИначеЕсли КоличествоДнейРазницы = 1 Тогда // вчера
			
			Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Вчера, %1'"), Формат(ДатаСинхронизации, "ДЛФ=T"));
			
		ИначеЕсли КоличествоДнейРазницы = 2 Тогда // позавчера
			
			Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Позавчера, %1'"), Формат(ДатаСинхронизации, "ДЛФ=T"));
			
		Иначе // давно
			
			Результат = Формат(ДатаСинхронизации, "ДЛФ=DD");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает идентификатор поставляемого профиля групп доступа "Синхронизация данных с другими программами".
//
// Возвращаемое значение:
//  Строка - идентификатор поставляемого профиля групп доступа.
//
Функция ПрофильДоступаСинхронизацияДанныхСДругимиПрограммами() Экспорт
	
	Возврат "04937803-5dba-11df-a1d4-005056c00008";
	
КонецФункции

// Проверяет наличие возможности администрирования обменов у текущего пользователя.
//
// Возвращаемое значение:
//  Булево - если Истина - права есть, Ложь - прав нет.
//
Функция ЕстьПраваНаАдминистрированиеОбменов() Экспорт
	
	Возврат Пользователи.ЭтоПолноправныйПользователь(, Не ОбщегоНазначенияПовтИсп.РазделениеВключено());
	
КонецФункции

// Функция возвращает объект WSПрокси веб-сервиса Exchange, созданный с переданными параметрами.
//
// Параметры:
//  СтруктураНастроек - Структура - параметры для WSПрокси;
//    * WSURLВебСервиса - Строка - месторасположение wsdl.
//    * WSИмяСервиса - Строка - имя сервиса.
//    * WSURLПространстваИменСервиса - Строка - URI пространства имен web-сервиса.
//    * WSИмяПользователя - Строка - имя пользователя для входа на сервер.
//    * WSПароль - Строка - пароль пользователя.
//    * WSТаймаут - Число - таймаут на операции выполняемые через полученное прокси.
//  СтрокаСообщенияОбОшибке - строка - содержит подробное описание ошибки в случае неуспешного подключения;
//  СтрокаСообщенияПользователю - строка - содержит краткое описание ошибки в случае неуспешного подключения.
//
// Возвращаемое значение:
//  WSПрокси
//
Функция ПолучитьWSПрокси(СтруктураНастроек, СтрокаСообщенияОбОшибке = "", СообщениеПользователю = "") Экспорт
	
	УдалитьНезначащиеСимволыВНастройкахПодключения(СтруктураНастроек);
	
	СтруктураНастроек.Вставить("WSURLПространстваИменСервиса", "http://www.1c.ru/SSL/Exchange");
	СтруктураНастроек.Вставить("WSИмяСервиса",                 "Exchange");
	СтруктураНастроек.Вставить("WSТаймаут", 600);
	
	Возврат ПолучитьWSПроксиПоПараметрамПодключения(СтруктураНастроек, СтрокаСообщенияОбОшибке, СообщениеПользователю);
КонецФункции

// Функция возвращает объект WSПрокси веб-сервиса Exchange_2_0_1_6, созданный с переданными параметрами.
//
// Параметры:
//  СтруктураНастроек - Структура - параметры для WSПрокси;
//    * WSURLВебСервиса - Строка - месторасположение wsdl.
//    * WSИмяСервиса - Строка - имя сервиса.
//    * WSURLПространстваИменСервиса - Строка - URI пространства имен web-сервиса.
//    * WSИмяПользователя - Строка - имя пользователя для входа на сервер.
//    * WSПароль - Строка - пароль пользователя.
//    * WSТаймаут - Число - таймаут на операции выполняемые через полученное прокси.
//  СтрокаСообщенияОбОшибке - строка - содержит подробное описание ошибки в случае неуспешного подключения;
//  СтрокаСообщенияПользователю - строка - содержит краткое описание ошибки в случае неуспешного подключения.
//
// Возвращаемое значение:
//  WSПрокси
//
Функция ПолучитьWSПрокси_2_0_1_6(СтруктураНастроек, СтрокаСообщенияОбОшибке = "", СообщениеПользователю = "") Экспорт
	
	УдалитьНезначащиеСимволыВНастройкахПодключения(СтруктураНастроек);
	
	СтруктураНастроек.Вставить("WSURLПространстваИменСервиса", "http://www.1c.ru/SSL/Exchange_2_0_1_6");
	СтруктураНастроек.Вставить("WSИмяСервиса",                 "Exchange_2_0_1_6");
	СтруктураНастроек.Вставить("WSТаймаут", 600);
	
	Возврат ПолучитьWSПроксиПоПараметрамПодключения(СтруктураНастроек, СтрокаСообщенияОбОшибке, СообщениеПользователю);
КонецФункции

// Функция возвращает объект WSПрокси веб-сервиса Exchange_2_0_1_7, созданный с переданными параметрами.
//
// Параметры:
//  СтруктураНастроек - Структура - параметры для WSПрокси;
//    * WSURLВебСервиса - Строка - месторасположение wsdl.
//    * WSИмяСервиса - Строка - имя сервиса.
//    * WSURLПространстваИменСервиса - Строка - URI пространства имен web-сервиса.
//    * WSИмяПользователя - Строка - имя пользователя для входа на сервер.
//    * WSПароль - Строка - пароль пользователя.
//    * WSТаймаут - Число - таймаут на операции выполняемые через полученное прокси.
//  СтрокаСообщенияОбОшибке - строка - содержит подробное описание ошибки в случае неуспешного подключения;
//  СтрокаСообщенияПользователю - строка - содержит краткое описание ошибки в случае неуспешного подключения.
//
// Возвращаемое значение:
//  WSПрокси
//
Функция ПолучитьWSПрокси_2_1_1_7(СтруктураНастроек, СтрокаСообщенияОбОшибке = "", СообщениеПользователю = "", Таймаут = 600) Экспорт
	
	УдалитьНезначащиеСимволыВНастройкахПодключения(СтруктураНастроек);
	
	СтруктураНастроек.Вставить("WSURLПространстваИменСервиса", "http://www.1c.ru/SSL/Exchange_2_0_1_6");
	СтруктураНастроек.Вставить("WSИмяСервиса",                 "Exchange_2_0_1_6");
	СтруктураНастроек.Вставить("WSТаймаут", Таймаут);
	
	Возврат ПолучитьWSПроксиПоПараметрамПодключения(СтруктураНастроек, СтрокаСообщенияОбОшибке, СообщениеПользователю, Истина);
КонецФункции

// Возвращает допустимое количество элементов, обрабатываемых в одной транзакции загрузки данных.
//
// Параметры:
//   Нет.
//
// Возвращаемое значение:
//   Число
// 
Функция КоличествоЭлементовВТранзакцииЗагрузкиДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.КоличествоЭлементовВТранзакцииЗагрузкиДанных.Получить();
	
КонецФункции

// Возвращает допустимое количество элементов, обрабатываемых в одной транзакции выгрузки данных.
//
// Параметры:
//   Нет.
//
// Возвращаемое значение:
//   Число
// 
Функция КоличествоЭлементовВТранзакцииВыгрузкиДанных() Экспорт
	
	Возврат 1;
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Выполняет добавление информации об установленном в константе количестве элементов в транзакции
// в структуру, содержащую параметры транспорта сообщений обмена.
//
// Параметры:
//  Результат - Структура - содержит параметры транспорта сообщений обмена.
// 
Процедура ДополнитьНастройкиТранспортаКоличествомЭлементовВТранзакции(Результат) Экспорт
	
	Результат.Вставить("КоличествоЭлементовВТранзакцииВыгрузкиДанных", КоличествоЭлементовВТранзакцииВыгрузкиДанных());
	Результат.Вставить("КоличествоЭлементовВТранзакцииЗагрузкиДанных", КоличествоЭлементовВТранзакцииЗагрузкиДанных());
	
КонецПроцедуры

// Возвращает номер области по коду узла плана обмена (обмен сообщениями).
// 
// Параметры:
//  КодУзла - Строка - Код узла плана обмена.
// 
// Возвращаемое значение:
//  Число - Номер области.
//
Функция НомерОбластиИзКодаУзлаПланаОбмена(Знач КодУзла) Экспорт
	
	Если ТипЗнч(КодУзла) <> Тип("Строка") Тогда
		ВызватьИсключение НСтр("ru = 'Неправильный тип параметра номер [1].'");
	КонецЕсли;
	
	Результат = СтрЗаменить(КодУзла, "S0", "");
	
	Возврат Число(Результат);
КонецФункции

// Возвращает данные первой записи результата запроса в виде структуры.
// 
// Параметры:
//  РезультатЗапроса - РезультатЗапроса - Результат запроса, содержащий данные для обработки.
// 
// Возвращаемое значение:
//  Структура - структура с результатом.
//
Функция РезультатЗапросаВСтруктуру(Знач РезультатЗапроса) Экспорт
	
	Результат = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбъявлениеСлужебныхСобытий

// Объявляет служебные события подсистемы ОбменДанными:
//
// Серверные события:
//   ПриВыгрузкеДанных,
//   ПриЗагрузкеДанных.
//
// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия) Экспорт
	
	// СЕРВЕРНЫЕ СОБЫТИЯ.
	
	// Используется для переопределения стандартной обработки выгрузки данных.
	// В данном обработчике должна быть реализована логика выгрузки данных:
	// выборка данных для выгрузки, сериализация данных в файл сообщения или сериализация данных в поток.
	// После выполнения обработчика выгруженные данные будут отправлены получателю подсистемой обмена данными.
	// Формат сообщения для выгрузки может быть произвольным.
	// В случае ошибок при отправке данных следует прерывать выполнение обработчика
	// методом ВызватьИсключение с описанием ошибки.
	//
	// Параметры:
	//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения
	//     стандартной (системной) обработки события. Если в теле процедуры-обработчика установить
	//     данному параметру значение Ложь, стандартная обработка события производиться не будет.
	//     Отказ от стандартной обработки не отменяет действие.
	//     Значение по умолчанию: Истина.
	//  Получатель - ПланОбменаСсылка - узел плана обмена, для которого выполняется выгрузка данных.
	//  ИмяФайлаСообщения    - Строка - имя файла, в который необходимо выполнить выгрузку данных.
	//     Если этот параметр заполнен, то система ожидает, что данные будут выгружены в файл.
	//     После выгрузки система выполнит отправку данных из этого файла.
	//     Если параметр пустой, то система ожидает, что данные будут выгружены в параметр ДанныеСообщения.
	//  ДанныеСообщения      - Произвольный - если параметр ИмяФайлаСообщения пустой, то система ожидает,
	//     что данные будут выгружены в этот параметр.
	//  КоличествоЭлементовВТранзакции - Число - определяет максимальное число элементов данных,
	//     которые помещаются в сообщение в рамках одной транзакции базы данных.
	//     При необходимости в обработчике следует реализовать логику установки
	//     транзакционных блокировок на выгружаемые данные.
	//     Значение параметра задается в настройках подсистемы обмена данными.
	//  ИмяСобытияЖурналаРегистрации - Строка - имя события журнала регистрации текущего сеанса обмена данными.
	//     Используется для записи в журнал регистрации данных (ошибок, предупреждений, информации)
	//     с заданным именем события. Соответствует параметру ИмяСобытия метода
	//     глобального контекста ЗаписьЖурналаРегистрации.
	//  КоличествоОтправленныхОбъектов - Число - Счетчик отправленных объектов.
	//     Используется для определения количества отправленных объектов для последующей фиксации в протоколе обмена.
	//
	// Синтаксис:
	// Процедура ПриВыгрузкеДанныхСлужебный(СтандартнаяОбработка,
	//							Получатель,
	//							ИмяФайлаСообщения,
	//							ДанныеСообщения,
	//							КоличествоЭлементовВТранзакции,
	//							ИмяСобытияЖурналаРегистрации,
	//							КоличествоОтправленныхОбъектов) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ОбменДанными\ПриВыгрузкеДанныхСлужебный");
	
	// Используется для переопределения стандартной обработки загрузки данных.
	// В данном обработчике должна быть реализована логика загрузки данных:
	// необходимые проверки перед загрузкой данных, сериализация данных из файла сообщения или сериализация данных из
	// потока.
	// Формат сообщения для загрузки может быть произвольным.
	// В случае ошибок при получении данных следует прерывать выполнение обработчика
	// методом ВызватьИсключение с описанием ошибки.
	//
	// Параметры:
	//
	//  СтандартнаяОбработка - Булево - 
	//     В данный параметр передается признак выполнения стандартной (системной) обработки события.
	//     Если в теле процедуры-обработчика установить данному параметру значение Ложь,
	//     стандартная обработка события производиться не будет. Отказ от стандартной обработки не отменяет действие.
	//     Значение по умолчанию: Истина.
	//  Отправитель - ПланОбменаСсылка - узел плана обмена, для которого выполняется загрузка данных.
	//  ИмяФайлаСообщения - Строка - имя файла, из которого требуется выполнить загрузку данных.
	//     Если параметр не заполнен, то данные для загрузки передаются через параметр ДанныеСообщения.
	//  ДанныеСообщения - Произвольный - Параметр содержит данные, которые необходимо загрузить.
	//     Если параметр ИмяФайлаСообщения пустой, то данные для загрузки передаются через этот параметр.
	//  КоличествоЭлементовВТранзакции - Число - Определяет максимальное число элементов данных,
	//     которые читаются из сообщения и записываются в базу данных в рамках одной транзакции.
	//     При необходимости в обработчике следует реализовать логику записи данных в транзакции.
	//     Значение параметра задается в настройках подсистемы обмена данными.
	//  ИмяСобытияЖурналаРегистрации - Строка - имя события журнала регистрации текущего сеанса обмена данными.
	//     Используется для записи в журнал регистрации данных (ошибок, предупреждений, информации)
	//     с заданным именем события.
	//     Соответствует параметру ИмяСобытия метода глобального контекста ЗаписьЖурналаРегистрации.
	//  КоличествоПолученныхОбъектов - Число - счетчик полученных объектов.
	//     Используется для определения количества загруженных объектов
	//     для последующей фиксации в протоколе обмена.
	//
	// Синтаксис:
	// Процедура ПриЗагрузкеДанныхСлужебный(СтандартнаяОбработка,
	//							Отправитель,
	//							ИмяФайлаСообщения,
	//							ДанныеСообщения,
	//							КоличествоЭлементовВТранзакции,
	//							ИмяСобытияЖурналаРегистрации,
	//							КоличествоПолученныхОбъектов) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ОбменДанными\ПриЗагрузкеДанныхСлужебный");
	
	// Обработчик начальной настройки ИБ после создания узла РИБ.
	// Вызывается в момент первого запуска подчиненного узла РИБ (в том числе АРМ).
	//
	// Синтаксис:
	// Процедура ПриНастройкеПодчиненногоУзлаРИБ() Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ОбменДанными\ПриНастройкеПодчиненногоУзлаРИБ");
	
КонецПроцедуры

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// КЛИЕНТСКИЕ ОБРАБОТЧИКИ.
	
	КлиентскиеОбработчики[
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриНачалеРаботыСистемы"].Добавить(
			"ОбменДаннымиКлиент");
			
	КлиентскиеОбработчики[
		"СтандартныеПодсистемы.БазоваяФункциональность\ПослеНачалаРаботыСистемы"].Добавить(
			"ОбменДаннымиКлиент");
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"ОбменДаннымиСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПереименованийОбъектовМетаданных"].Добавить(
		"ОбменДаннымиСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов"].Добавить(
		"ОбменДаннымиСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентаПриЗапуске"].Добавить(
		"ОбменДаннымиСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиента"].Добавить(
		"ОбменДаннымиСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриВключенииРазделенияПоОбластямДанных"].Добавить(
		"ОбменДаннымиСервер");
		
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииИсключенийПоискаСсылок"].Добавить(
		"ОбменДаннымиСервер");
		
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам"].Добавить(
		"ОбменДаннымиСервер");
		
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриРегистрацииМенеджеровВнешнихМодулей"].Добавить(
		"ОбменДаннымиСервер");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		
		СерверныеОбработчики["СтандартныеПодсистемы.УправлениеДоступом\ПриЗаполненииПоставляемыхПрофилейГруппДоступа"].Добавить(
			"ОбменДаннымиСервер");
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.ТекущиеДела\ПриЗаполненииСпискаТекущихДел"].Добавить(
			"ОбменДаннымиСервер");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиУсловныхВызовов

// Выполняет загрузку приоритетных данных, полученных из главного узла РИБ.
Процедура ЗагрузитьПриоритетныеДанныеВПодчиненныйУзелРИБ(Отказ = Ложь) Экспорт
	
	Если ОбменДаннымиВызовСервера.РежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском(
			"ПропуститьЗагрузкуСообщенияОбменаДаннымиПередЗапуском") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбменДаннымиВызовСервера.РежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском(
			"ПропуститьЗагрузкуПриоритетныхДанныхПередЗапуском") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	УстановитьРежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском("ЗагрузкаРазрешена", Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
	Попытка
		
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
			
			Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
				
				ИспользоватьСинхронизациюДанных = Константы.ИспользоватьСинхронизациюДанных.СоздатьМенеджерЗначения();
				ИспользоватьСинхронизациюДанных.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
				ИспользоватьСинхронизациюДанных.ОбменДанными.Загрузка = Истина;
				ИспользоватьСинхронизациюДанных.Значение = Истина;
				ИспользоватьСинхронизациюДанных.Записать();
				
			Иначе
				
				Если ПолучитьИспользуемыеПланыОбмена().Количество() > 0 Тогда
					
					ИспользоватьСинхронизациюДанных = Константы.ИспользоватьСинхронизациюДанных.СоздатьМенеджерЗначения();
					ИспользоватьСинхронизациюДанных.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
					ИспользоватьСинхронизациюДанных.ОбменДанными.Загрузка = Истина;
					ИспользоватьСинхронизациюДанных.Значение = Истина;
					ИспользоватьСинхронизациюДанных.Записать();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
			
			УзелИнформационнойБазы = ГлавныйУзел();
			
			Если УзелИнформационнойБазы <> Неопределено Тогда
				
				ВидТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию(УзелИнформационнойБазы);
				
				// Загрузка только параметров работы программы.
				
				ПараметрыОбмена = ПараметрыОбмена();
				ПараметрыОбмена.ВидТранспортаСообщенийОбмена = ВидТранспорта;
				ПараметрыОбмена.ВыполнятьЗагрузку = Истина;
				ПараметрыОбмена.ВыполнятьВыгрузку = Ложь;
				ПараметрыОбмена.ТолькоПараметры   = Истина;
				ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(УзелИнформационнойБазы, ПараметрыОбмена, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		УстановитьПривилегированныйРежим(Истина);
		УстановитьРежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском("ЗагрузкаРазрешена", Ложь);
		УстановитьПривилегированныйРежим(Ложь);
		
		ВключитьПовторениеЗагрузкиСообщенияОбменаДаннымиПередЗапуском();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обмен данными.Загрузка приоритетных данных'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение
			НСтр("ru = 'Ошибка загрузки приоритетных данных из сообщения обмена.
			           |См. подробности в журнале регистрации.'");
	КонецПопытки;
	УстановитьПривилегированныйРежим(Истина);
	УстановитьРежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском("ЗагрузкаРазрешена", Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Отказ Тогда
		
		Если КонфигурацияИзменена() Тогда
			ВызватьИсключение
				НСтр("ru = 'Загружены изменения программы, полученные из главного узла.
				           |Завершите работу программы. Откройте программу в конфигураторе
				           |и выполните команду ""Обновить конфигурацию базы данных (F7)"".
				           |
				           |После этого запустите программу.'");
		КонецЕсли;
		
		ВключитьПовторениеЗагрузкиСообщенияОбменаДаннымиПередЗапуском();
		
		ВызватьИсключение
			НСтр("ru = 'Ошибка загрузки приоритетных данных из сообщения обмена.
			           |См. подробности в журнале регистрации.'");
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак повторения загрузки при ошибке загрузки или обновления.
// Очищает хранилище сообщения обмена, полученного из главного узла РИБ.
//
Процедура ВключитьПовторениеЗагрузкиСообщенияОбменаДаннымиПередЗапуском() Экспорт
	
	ОчиститьСообщениеОбменаДаннымиИзГлавногоУзла();
	
	Константы.ПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском.Установить(Истина);
	
КонецПроцедуры

// Выполняет загрузку сообщения обмена, которое содержало
// изменения конфигурации, до обновления информационной базы.
//
Процедура ПередОбновлениемИнформационнойБазы(ПриЗапускеКлиентскогоПриложения, Перезапустить) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;	
	КонецЕсли;
	
	Если НЕ ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		ВыполнитьСинхронизациюПриОтсутствииОбновленияИнформационнойБазы(ПриЗапускеКлиентскогоПриложения, Перезапустить);
	Иначе	
		ЗагрузитьСообщениеПередОбновлениемИнформационнойБазы();
	КонецЕсли;

КонецПроцедуры

// Выполняет инициализацию XML файла, для записи информации об объектах
// отмеченных к обработке обновления, для передачи их в подчиненный узел РИБ.
//
Процедура ИнициализироватьФайлСДаннымиОбновления(Параметры) Экспорт
	
	ФайлДляЗаписиXML = Неопределено;
	
	Если СтандартныеПодсистемыПовтИсп.ИспользуетсяРИБ("СФильтром") Тогда
		
		ИмяФайла = ПолноеИмяФайлаДанныхОтложенногоОбновления();
		
		ФайлДляЗаписиXML = Новый ЗаписьFastInfoset;
		ФайлДляЗаписиXML.ОткрытьФайл(ИмяФайла);
		ФайлДляЗаписиXML.ЗаписатьОбъявлениеXML();
		ФайлДляЗаписиXML.ЗаписатьНачалоЭлемента("Objects");
		
	КонецЕсли;
	
	Параметры.ЗаписьИзмененийДляПодчиненногоУзлаРИБСФильтрами = ФайлДляЗаписиXML;
	
КонецПроцедуры

// Выполняет инициализацию XML файла, для записи информации об объектах
//
Процедура ЗаписатьДанныеДляОбновленияВФайл(Параметры, Данные, ВидДанных, ПолноеИмяОбъекта = "") Экспорт
	
	Если Не СтандартныеПодсистемыПовтИсп.ИспользуетсяРИБ("СФильтром") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ЗаписьИзмененийДляПодчиненногоУзлаРИБСФильтрами = Неопределено Тогда
		ТекстИсключения = НСтр("ru = 'В обработчике неправильно организована работа с параметрами регистрации данных к обработке.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ЗаписьXML = Параметры.ЗаписьИзмененийДляПодчиненногоУзлаРИБСФильтрами;
	ЗаписьXML.ЗаписатьНачалоЭлемента("Object");
	ЗаписьXML.ЗаписатьАтрибут("Queue", Строка(Параметры.Очередь));
	
	Если Не ЗначениеЗаполнено(ПолноеИмяОбъекта) Тогда
		ПолноеИмяОбъекта = Данные.Метаданные().ПолноеИмя();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьАтрибут("Type", ПолноеИмяОбъекта);
	
	Если ВРег(ВидДанных) = "ССЫЛКА" Тогда
		ЗаписьXML.ЗаписатьАтрибут("Ref", XMLСтрока(Данные.Ссылка));
	Иначе
		
		Если ВРег(ВидДанных) = "НЕЗАВИСИМЫЙРЕГИСТР" Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Filter");
			Для Каждого ЭлементОтбора Из Данные.Отбор Цикл
				
				Если ЗначениеЗаполнено(ЭлементОтбора.Значение) Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементОтбора.Имя);
					
					ТипДанных = ТипЗнч(ЭлементОтбора.Значение);
					ОбъектМетаданных =  Метаданные.НайтиПоТипу(ТипДанных);
					
					Если ОбъектМетаданных <> Неопределено Тогда
						ЗаписьXML.ЗаписатьАтрибут("Type",  ОбъектМетаданных.ПолноеИмя());
					Иначе
						ЗаписьXML.ЗаписатьАтрибут("Type",  Строка(ТипДанных));
					КонецЕсли;
					
					ЗаписьXML.ЗаписатьАтрибут("Val", XMLСтрока(ЭлементОтбора.Значение));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
				
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		Иначе
			Регистратор = Данные.Отбор.Регистратор.Значение;
			ЗаписьXML.ЗаписатьАтрибут("FilterType", Строка(Регистратор.Метаданные().ПолноеИмя()));
			ЗаписьXML.ЗаписатьАтрибут("Ref",        XMLСтрока(Регистратор.Ссылка));
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

// Выполняет регистрацию в подчиненном узле РИБ с фильтрами
// объектов зарегистрированных для отложенного обновления в главном узле РИБ.
//
Процедура ОбработатьДанныеДляОбновленияВПодчиненномУзле(Знач ЗначениеКонстанты) Экспорт
	
	Если Не СтандартныеПодсистемыПовтИсп.ИспользуетсяРИБ("СФильтром")
		Или Не ЭтоПодчиненныйУзелРИБ()
		Или НазначениеПланаОбмена(ГлавныйУзел().Метаданные().Имя) <> "РИБСФильтром" Тогда
		Возврат;
	КонецЕсли;
	
	ХранилищеЗначений = ЗначениеКонстанты.Значение;
	ИмяФайла          = ПолноеИмяФайлаДанныхОтложенногоОбновления();
	
	ДвоичныеДанные = ХранилищеЗначений.Получить();
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные.Записать(ИмяФайла);
	
	ЧтениеXML = Новый ЧтениеFastInfoset;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	
	ПараметрыОбработчикаСтруктура = ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке();
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбновлениеИнформационнойБазы.Ссылка КАК Узел
		|ИЗ
		|	ПланОбмена.ОбновлениеИнформационнойБазы КАК ОбновлениеИнформационнойБазы
		|ГДЕ
		|	НЕ ОбновлениеИнформационнойБазы.ЭтотУзел";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.Узел);
		КонецЦикла;
	КонецЕсли;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = "Object"
			И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ПараметрыОбработчикаСтруктура.Очередь = Число(ЧтениеXML.ЗначениеАтрибута("Queue"));
			ПолноеИмяОбъектаМетаданных            = СокрЛП(ЧтениеXML.ЗначениеАтрибута("Type"));
			ТипОбъектаМетаданных                  = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
			МенеджерОбъекта                       = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
			ЭтоСсылочныйТипОбъекта                = ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ТипОбъектаМетаданных);
			
			Если ЭтоСсылочныйТипОбъекта Тогда
				ОбъектКОбработке = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(ЧтениеXML.ЗначениеАтрибута("Ref")));
			Иначе
				
				ОбъектКОбработке = МенеджерОбъекта.СоздатьНаборЗаписей();
				
				Если ОбщегоНазначения.ЭтоРегистрСведений(ТипОбъектаМетаданных)
					И ТипОбъектаМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
					
					ЧтениеXML.Прочитать();
					
					Если ЧтениеXML.Имя = "Filter"
						И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						
						ЧтениеОтбора = Истина;
						
						Пока ЧтениеОтбора Цикл
							
							ЧтениеXML.Прочитать();
							
							Если ЧтениеXML.Имя = "Filter" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
								ЧтениеОтбора = Ложь;
								Продолжить;
							ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
								Продолжить;
							Иначе
								
								ЗначениеОтбора = ЧтениеXML.ЗначениеАтрибута("Val");
								Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
									
									ИмяОтбора         = ЧтениеXML.Имя;
									ТипЗначенияОтбора = ЧтениеXML.ЗначениеАтрибута("Type");
									ПолноеИмяЭлементаОтбора = Метаданные.НайтиПоПолномуИмени(ТипЗначенияОтбора);
									
									Если ПолноеИмяЭлементаОтбора <> Неопределено Тогда
										
										МенеджерОбъектаОтбора = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТипЗначенияОтбора);
										
										Если Найти(ВРег(ТипЗначенияОтбора), "ПЕРЕЧИСЛЕНИЕ") > 0 Тогда
											СсылкаНаЗначение = МенеджерОбъектаОтбора[ЗначениеОтбора];
										Иначе
											СсылкаНаЗначение = МенеджерОбъектаОтбора.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеОтбора));
										КонецЕсли;
										
										ОбъектКОбработке.Отбор[ИмяОтбора].Установить(СсылкаНаЗначение);
										
									Иначе
										ОбъектКОбработке.Отбор[ИмяОтбора].Установить(XMLЗначение(Тип(ТипЗначенияОтбора),ЗначениеОтбора));
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				Иначе
					
					ЗначениеРегистратора  = Новый УникальныйИдентификатор(ЧтениеXML.ЗначениеАтрибута("Ref"));
					ПолноеИмяРегистратора = ЧтениеXML.ЗначениеАтрибута("FilterType");
					МенеджерРегистратора  = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяРегистратора);
					СсылкаНаРегистратор   = МенеджерРегистратора.ПолучитьСсылку(ЗначениеРегистратора);
					ОбъектКОбработке.Отбор.Регистратор.Установить(СсылкаНаРегистратор);
					
				КонецЕсли;
				
				ОбъектКОбработке.Прочитать();
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ОтметитьКОбработке(ПараметрыОбработчикаСтруктура, ОбъектКОбработке);
			
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет закрытие XML файла с записанной информацией об объектах
// зарегистрированных для отложенного обновления.
//
Процедура ЗавершитьЗаписьФайлаСДаннымиОбновления(Параметры) Экспорт
	
	Если Не СтандартныеПодсистемыПовтИсп.ИспользуетсяРИБ("СФильтром") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ЗаписьИзмененийДляПодчиненногоУзлаРИБСФильтрами = Неопределено Тогда
		ТекстИсключения = НСтр("ru = 'В обработчике неправильно организована работа с параметрами регистрации данных к обработке.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ЗаписьXML = Параметры.ЗаписьИзмененийДляПодчиненногоУзлаРИБСФильтрами;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	ИмяФайла = ПолноеИмяФайлаДанныхОтложенногоОбновления();
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	Хранилище = Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных(9));
	Константы.ДанныеДляОтложенногоОбновления.Установить(Хранилище);
	
	ФайлСДанными = Новый Файл(ИмяФайла);
	Если ФайлСДанными.Существует() Тогда
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия после обновления информационной базы, в т.ч. выгрузку сообщения обмена,
// которое содержало изменения конфигурации, до обновления информационной базы.
//
Процедура ПослеОбновленияИнформационнойБазы() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ОбработчикиСобытийСинхронизацииДанных.ЗарегистрироватьОбновлениеДанныхИнформационнойБазы();
	
	ВыгрузитьСообщениеПослеОбновленияИнформационнойБазы();
	
КонецПроцедуры	

// Возвращает Истина, если настройка подчиненного узла РИБ не завершена и
// требуется обновления параметров работы программы, которые не участвуют в РИБ.
//
Функция НастройкаПодчиненногоУзлаРИБ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ЭтоПодчиненныйУзелРИБ()
	      И НЕ Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Получить();
	
КонецФункции

// См. описание одноименной процедуры в общем модуле РегламентныеЗаданияПереопределяемый.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Зависимости) Экспорт
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.УдалениеНеактуальнойИнформацииСинхронизации;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьСинхронизациюДанных;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.СинхронизацияДанных;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
	Зависимость.Параметризуется = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных")
		Или ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "*";
		Обработчик.Приоритет = 1;
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.МонопольныйРежим = Ложь;
		Обработчик.Процедура = "ОбменДаннымиСервер.ВыполнитьОбновлениеПравилДляОбменаДанными";
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.2";
	Обработчик.Процедура = "ОбменДаннымиСервер.УстановитьНеобходимостьВыполненияКорректировкиИнформацииСопоставленияДляВсехУзловИнформационнойБазы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.2";
	Обработчик.Процедура = "ОбменДаннымиСервер.УстановитьРежимВыгрузкиОбъектовДляВсехУзловИнформационнойБазы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.2";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ОбменДаннымиСервер.ОбновитьРегламентныеЗаданияСценариевОбменовДанными";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.0";
	Обработчик.Процедура = "ОбменДаннымиСервер.ОбновитьКонстантуНастройкаПодчиненногоУзлаРИБЗавершена";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.10";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ОбменДаннымиСервер.ПроверитьУстановкуФункциональныхОпцийПриОбновленииИБ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.1.5";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ОбменДаннымиСервер.УстановитьПризнакСохраненияПароляДляОбменаЧерезИнтернет";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.12";
	Обработчик.Процедура = "ОбменДаннымиСервер.СброситьНастройкиМонитораОбмена";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.21";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ОбменДаннымиСервер.ПроверитьУстановкуФункциональныхОпцийПриОбновленииИБ_2_1_2_21";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.4";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ОбменДаннымиСервер.УстановитьКоличествоЭлементовВТранзакцииЗагрузкиДанных_2_2_2_4";
	
КонецПроцедуры

// Выполняет обновление правил конвертации/регистрации объектов.
// Обновление выполняется для всех планов обмена, подключенных к подсистеме.
// Обновление правил выполняется только для типовых правил.
// Если для плана обмена правила были загружены из файла, то такие правила не обновляются.
//
Процедура ВыполнитьОбновлениеПравилДляОбменаДанными() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных")
		И Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	// Для сценария, когда в конфигурации был удален или переименован план обмена.
	УдалитьНеактуальныеЗаписиВРегистреПравилДляОбменаДанными();
	
	ПравилаОбменаЗагруженныеИзФайла = Новый Массив;
	ПравилаРегистрацииЗагруженныеИзФайла = Новый Массив;
	
	ВыполнитьПроверкуНаличияПравилОбменаЗагруженныхИзФайла(ПравилаОбменаЗагруженныеИзФайла, ПравилаРегистрацииЗагруженныеИзФайла);
	ВыполнитьОбновлениеВерсииТиповыхПравилДляОбменаДанными(ПравилаОбменаЗагруженныеИзФайла, ПравилаРегистрацииЗагруженныеИзФайла);
	
КонецПроцедуры

// Устанавливает признак того, что для всех узлов планов обмена необходимо выполнить процедуру
// корректировки информации сопоставления при следующем обмене данными.
//
Процедура УстановитьНеобходимостьВыполненияКорректировкиИнформацииСопоставленияДляВсехУзловИнформационнойБазы() Экспорт
	
	РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.УстановитьНеобходимостьВыполненияКорректировкиИнформацииСопоставленияДляВсехУзловИнформационнойБазы();
	
КонецПроцедуры

// Устанавливает для всех узлов универсального обмена данными значения реквизитов-флагов режимов выгрузки значение
// "Выгружать по условию".
//
Процедура УстановитьРежимВыгрузкиОбъектовДляВсехУзловИнформационнойБазы() Экспорт
	
	СписокПлановОбмена = ОбменДаннымиПовтИсп.СписокПлановОбменаБСП();
	
	Для Каждого Элемент Из СписокПлановОбмена Цикл
		
		ИмяПланаОбмена = Элемент.Значение;
		
		Если Метаданные.ПланыОбмена[ИмяПланаОбмена].РаспределеннаяИнформационнаяБаза Тогда
			Продолжить;
		КонецЕсли;
		
		МассивУзлов = ОбменДаннымиПовтИсп.ПолучитьМассивУзловПланаОбмена(ИмяПланаОбмена);
		
		Для Каждого Узел Из МассивУзлов Цикл
			
			ИменаРеквизитов = ОбщегоНазначения.ИменаРеквизитовПоТипу(Узел, Тип("ПеречислениеСсылка.РежимыВыгрузкиОбъектовОбмена"));
			
			Если ПустаяСтрока(ИменаРеквизитов) Тогда
				Продолжить;
			КонецЕсли;
			
			ИменаРеквизитов = СтрЗаменить(ИменаРеквизитов, " ", "");
			
			Реквизиты = СтрРазделить(ИменаРеквизитов, ",");
			
			ОбъектМодифицирован = Ложь;
			
			УзелОбъект = Узел.ПолучитьОбъект();
			
			Для Каждого ИмяРеквизита Из Реквизиты Цикл
				
				Если Не ЗначениеЗаполнено(УзелОбъект[ИмяРеквизита]) Тогда
					
					УзелОбъект[ИмяРеквизита] = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
					
					ОбъектМодифицирован = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ОбъектМодифицирован Тогда
				
				УзелОбъект.ДополнительныеСвойства.Вставить("ПолучениеСообщенияОбмена");
				УзелОбъект.Записать();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет данные регламентных заданий для всех сценариев обменов данных, кроме помеченных на удаление.
//
Процедура ОбновитьРегламентныеЗаданияСценариевОбменовДанными() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СценарииОбменовДанными.Ссылка
	|ИЗ
	|	Справочник.СценарииОбменовДанными КАК СценарииОбменовДанными
	|ГДЕ
	|	НЕ СценарииОбменовДанными.ПометкаУдаления
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Отказ = Ложь;
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Справочники.СценарииОбменовДанными.ОбновитьДанныеРегламентногоЗадания(Отказ, Неопределено, Объект);
		
		Если Отказ Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка при обновлении регламентного задания для сценария обмена данными.'");
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает значение константы НастройкаПодчиненногоУзлаРИБЗавершена в Истина для подчиненного узла РИБ,
// т.к. в базе уже настроен обмен в РИБ по факту.
//
Процедура ОбновитьКонстантуНастройкаПодчиненногоУзлаРИБЗавершена() Экспорт
	
	Если  ЭтоПодчиненныйУзелРИБ()
		И РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспортаДляУзлаЗаданы(ГлавныйУзел()) Тогда
		
		Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Установить(Истина);
		
		ОбновитьПовторноИспользуемыеЗначения();
		
	КонецЕсли;
	
КонецПроцедуры

// Переустанавливает значение константы ИспользоватьСинхронизациюДанных при необходимости.
//
Процедура ПроверитьУстановкуФункциональныхОпцийПриОбновленииИБ() Экспорт
	
	Если Константы.ИспользоватьСинхронизациюДанных.Получить() Тогда
		
		Константы.ИспользоватьСинхронизациюДанных.Установить(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Переустанавливает значение константы ИспользоватьСинхронизациюДанных при необходимости.
// Т.к. константа стала неразделенной и ее значение сбросилось.
//
Процедура ПроверитьУстановкуФункциональныхОпцийПриОбновленииИБ_2_1_2_21() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			
			Константы.ИспользоватьСинхронизациюДанных.Установить(Истина);
			
		Иначе
			
			Если ПолучитьИспользуемыеПланыОбмена().Количество() > 0 Тогда
				
				Константы.ИспользоватьСинхронизациюДанных.Установить(Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает количество элементов в транзакции загрузки данных равным единице.
//
Процедура УстановитьКоличествоЭлементовВТранзакцииЗагрузкиДанных_2_2_2_4() Экспорт
	
	УстановитьКоличествоЭлементовВТранзакцииЗагрузкиДанных(1);
	
КонецПроцедуры

// Устанавливает значение реквизита WSЗапомнитьПароль в РС.НастройкиТранспортаОбмена в значение Истина.
//
Процедура УстановитьПризнакСохраненияПароляДляОбменаЧерезИнтернет() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НастройкиТранспортаОбмена.Узел КАК Узел
	|ИЗ
	|	РегистрСведений.НастройкиТранспортаОбмена КАК НастройкиТранспортаОбмена
	|ГДЕ
	|	НастройкиТранспортаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию = ЗНАЧЕНИЕ(Перечисление.ВидыТранспортаСообщенийОбмена.WS)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// обновляем запись в РС
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Узел", Выборка.Узел);
		СтруктураЗаписи.Вставить("WSЗапомнитьПароль", Истина);
		РегистрыСведений.НастройкиТранспортаОбмена.ОбновитьЗапись(СтруктураЗаписи);
		
	КонецЦикла;
	
КонецПроцедуры

// Очищает сохраненные настройки общей формы СинхронизацияДанных.
//
Процедура СброситьНастройкиМонитораОбмена() Экспорт
	
	МассивНастроекФормы = Новый Массив;
	МассивНастроекФормы.Добавить("/НастройкиФормы");
	МассивНастроекФормы.Добавить("/НастройкиОкна");
	МассивНастроекФормы.Добавить("/НастройкиОкнаВебКлиента");
	МассивНастроекФормы.Добавить("/ТекущиеДанные");
	
	Для Каждого ЭлементФормы Из МассивНастроекФормы Цикл
		ХранилищеСистемныхНастроек.Удалить("ОбщаяФорма.СинхронизацияДанных" + ЭлементФормы, Неопределено, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

// Предназначена для перевода паролей в безопасное хранилище.
// Используется в обработчике обновления ИБ.
Процедура ПеренестиПаролиВБезопасноеХранилище() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиТранспортаОбмена.Узел,
	|	НастройкиТранспортаОбмена.УдалитьCOMПарольПользователя,
	|	НастройкиТранспортаОбмена.УдалитьFTPСоединениеПароль,
	|	НастройкиТранспортаОбмена.УдалитьWSПароль,
	|	НастройкиТранспортаОбмена.УдалитьПарольАрхиваСообщенияОбмена
	|ИЗ
	|	РегистрСведений.НастройкиТранспортаОбмена КАК НастройкиТранспортаОбмена";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		Если НЕ ПустаяСтрока(РезультатЗапроса.УдалитьCOMПарольПользователя)
			ИЛИ НЕ ПустаяСтрока(РезультатЗапроса.УдалитьFTPСоединениеПароль)
			ИЛИ НЕ ПустаяСтрока(РезультатЗапроса.УдалитьWSПароль) 
			ИЛИ НЕ ПустаяСтрока(РезультатЗапроса.УдалитьПарольАрхиваСообщенияОбмена) Тогда
			НачатьТранзакцию();
			Попытка
				УстановитьПривилегированныйРежим(Истина);
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(РезультатЗапроса.Узел, РезультатЗапроса.УдалитьCOMПарольПользователя, "COMПарольПользователя");
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(РезультатЗапроса.Узел, РезультатЗапроса.УдалитьFTPСоединениеПароль, "FTPСоединениеПароль");
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(РезультатЗапроса.Узел, РезультатЗапроса.УдалитьWSПароль, "WSПароль");
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(РезультатЗапроса.Узел, РезультатЗапроса.УдалитьПарольАрхиваСообщенияОбмена, "ПарольАрхиваСообщенияОбмен");
				УстановитьПривилегированныйРежим(Ложь);
				НастройкиТранспортаОбмена = РегистрыСведений.НастройкиТранспортаОбмена.СоздатьМенеджерЗаписи();
				НастройкиТранспортаОбмена.Узел = РезультатЗапроса.Узел;
				НастройкиТранспортаОбмена.Прочитать();
				НастройкиТранспортаОбмена.УдалитьCOMПарольПользователя = "";
				НастройкиТранспортаОбмена.УдалитьFTPСоединениеПароль = "";
				НастройкиТранспортаОбмена.УдалитьWSПароль = "";
				НастройкиТранспортаОбмена.УдалитьПарольАрхиваСообщенияОбмена = "";
				НастройкиТранспортаОбмена.Записать();
				ЗафиксироватьТранзакцию();
			Исключение
				СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииОбменДанными(), УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
				ОтменитьТранзакцию();
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Выполняет выгрузку сообщения обмена, которое содержало
// изменения конфигурации, до обновления информационной базы.
//
Процедура ВыгрузитьСообщениеПослеОбновленияИнформационнойБазы()
	
	// После успешной загрузки и обновления ИБ режим повтора можно отключить.
	ОтключитьПовторениеЗагрузкиСообщенияОбменаДаннымиПередЗапуском();
	
	Попытка
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
			
			УзелИнформационнойБазы = ГлавныйУзел();
			
			Если УзелИнформационнойБазы <> Неопределено Тогда
				
				ВыполнитьВыгрузку = Истина;
				
				НастройкиТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспорта(УзелИнформационнойБазы);
				
				ВидТранспорта = НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию;
				
				Если ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.WS
					И Не НастройкиТранспорта.WSЗапомнитьПароль Тогда
					
					ВыполнитьВыгрузку = Ложь;
					
					РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.УстановитьПризнакОтправкиДанных(УзелИнформационнойБазы);
					
				КонецЕсли;
				
				Если ВыполнитьВыгрузку Тогда
					
					// Только выгрузка.
					Отказ = Ложь;
					
					ПараметрыОбмена = ПараметрыОбмена();
					ПараметрыОбмена.ВидТранспортаСообщенийОбмена = ВидТранспорта;
					ПараметрыОбмена.ВыполнятьЗагрузку = Ложь;
					ПараметрыОбмена.ВыполнятьВыгрузку = Истина;
					
					ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(УзелИнформационнойБазы, ПараметрыОбмена, Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииОбменДанными(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиУсловныхВызововИзДругихПодсистем

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность 
// редактирования реквизитов при групповом изменении.
//
// Параметры:
//   Объекты - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                            подключенного к подсистеме "Групповое изменение объектов". 
//                            Дополнительно в значении могут быть перечислены имена экспортных функций:
//                            "РеквизитыНеРедактируемыеВГрупповойОбработке",
//                            "РеквизитыРедактируемыеВГрупповойОбработке".
//                            Каждое имя должно начинаться с новой строки.
//                            Если указана пустая строка, значит в модуле менеджера определены обе функции.
//
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Справочники.СценарииОбменовДанными.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
КонецПроцедуры

#КонецОбласти

#Область ПрогрессБар

// Вычисляет количество объектов к загрузке и размер файла сообщения обмена.
// Параметры:
//  ИмяФайлаОбмена - Строка - имя файла сообщения обмена.
//  ЭтоОбменXDTO - Булево - признак того, что выполняется обмен через универсальный формат.
//  ЭтоОбменРИБ - Булево - признак того, что выполняется обмен РИБ.
// 
// Возвращаемое значение:
//  Структура - свойства структуры:
//    * РазмерФайлаСообщенияОбмена  - Число - размер файла в мегабайтах, по умолчанию 0.
//    * КоличествоОбъектовКЗагрузке - Число - количество объектов к загрузке, по умолчанию 0.
//
// Вычисляет количество объектов к загрузке и размер файла сообщения обмена.
// Параметры:
//  ИмяФайлаОбмена - Строка - имя файла сообщения обмена.
//  ЭтоОбменXDTO - Булево - признак того, что выполняется обмен через универсальный формат.
// 
// Возвращаемое значение:
//  Структура - свойства структуры:
//    * РазмерФайлаСообщенияОбмена  - Число - размер файла в мегабайтах, по умолчанию 0.
//    * КоличествоОбъектовКЗагрузке - Число - количество объектов к загрузке, по умолчанию 0.
//
Функция РезультатПодсчетаДанныхКЗагрузке(Знач ИмяФайлаОбмена, ЭтоОбменXDTO, ЭтоОбменРИБ = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("РазмерФайлаСообщенияОбмена", 0);
	Результат.Вставить("КоличествоОбъектовКЗагрузке", 0);
	
	Если НЕ ЗначениеЗаполнено(ИмяФайлаОбмена) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ФайлСДанными = Новый Файл(ИмяФайлаОбмена);
	// Размер сразу переводим в мегабайты.
	Результат.РазмерФайлаСообщенияОбмена = Окр(ФайлСДанными.Размер() / 1048576, 1);
	
	ФайлОбмена = Новый ЧтениеXML;
	Попытка
		ФайлОбмена.ОткрытьФайл(ИмяФайлаОбмена);
	Исключение
		Возврат Результат;
	КонецПопытки;
	
	// В зависимости от вида обмена используется разный алгоритм анализа файла обмена.
	Если ЭтоОбменXDTO Тогда
		ФайлОбмена.Прочитать(); // Message.
		ФайлОбмена.Прочитать();  // Header начало.
		ФайлОбмена.Пропустить(); // Header конец.
		ФайлОбмена.Прочитать(); //Body начало.
		Пока ФайлОбмена.Прочитать() Цикл
			Если ФайлОбмена.ЛокальноеИмя <> "УдалениеОбъекта" 
				И ФайлОбмена.ЛокальноеИмя <> "Body" Тогда
				Результат.КоличествоОбъектовКЗагрузке = Результат.КоличествоОбъектовКЗагрузке + 1;
			КонецЕсли;
			ФайлОбмена.Пропустить();
		КонецЦикла;
	ИначеЕсли ЭтоОбменРИБ Тогда
		ФайлОбмена.Прочитать(); // Message.
		ФайлОбмена.Прочитать();  // Header начало.
		ФайлОбмена.Пропустить(); // Header конец.
		ФайлОбмена.Прочитать(); //Body начало.
		Пока ФайлОбмена.Прочитать() Цикл
			Если ФайлОбмена.ЛокальноеИмя = "Changes"
				ИЛИ ФайлОбмена.ЛокальноеИмя = "Data" Тогда
				Продолжить;
			ИначеЕсли СтрНайти(ФайлОбмена.ЛокальноеИмя, "Config") = 0 
				И СтрНайти(ФайлОбмена.ЛокальноеИмя, "Signature") = 0
				И СтрНайти(ФайлОбмена.ЛокальноеИмя, "Nodes") = 0
				И ФайлОбмена.ЛокальноеИмя <> "Parameters"
				И ФайлОбмена.ЛокальноеИмя <> "Body" Тогда
				Результат.КоличествоОбъектовКЗагрузке = Результат.КоличествоОбъектовКЗагрузке + 1;
			КонецЕсли;
			ФайлОбмена.Пропустить();
		КонецЦикла;
	Иначе
		
		ФайлОбмена.Прочитать(); // Файл обмена.
		ФайлОбмена.Прочитать();  // ПравилаОбмена начало.
		ФайлОбмена.Пропустить(); // ПравилаОбмена конец.

		ФайлОбмена.Прочитать();  // Типы данных начало.
		ФайлОбмена.Пропустить(); // ТипыДанных конец.

		ФайлОбмена.Прочитать();  // Данные по обмену начало.
		ФайлОбмена.Пропустить(); // Данные по обмену конец.
		Пока ФайлОбмена.Прочитать() Цикл
			Если ФайлОбмена.ЛокальноеИмя = "Объект"
				ИЛИ ФайлОбмена.ЛокальноеИмя = "НаборЗаписейРегистра"
				ИЛИ ФайлОбмена.ЛокальноеИмя = "УдалениеОбъекта"
				ИЛИ ФайлОбмена.ЛокальноеИмя = "ИнформацияОРегистрацииОбъекта" Тогда
				Результат.КоличествоОбъектовКЗагрузке = Результат.КоличествоОбъектовКЗагрузке + 1;
			КонецЕсли;
			ФайлОбмена.Пропустить();
		КонецЦикла;
	КонецЕсли;
	ФайлОбмена.Закрыть();
	
	Возврат Результат;
КонецФункции
// Рассчитывает процент выгрузки и записывает в виде сообщения пользователю.
//
// Параметры:
//  КоличествоВыгруженных       - Число - Количество выгруженных на данный момент объектов.
//  КоличествоОбъектовКВыгрузке - Число - Количество объектов к выгрузке.
//
Процедура РассчитатьПроцентВыгрузки(КоличествоВыгруженных, КоличествоОбъектовКВыгрузке) Экспорт
	// Сообщение о проценте выгрузки выдаем через каждые 10 объектов.
	Если КоличествоВыгруженных = 0 ИЛИ КоличествоВыгруженных / 10 <> Цел(КоличествоВыгруженных / 10) Тогда
		Возврат;
	КонецЕсли;
	Если КоличествоОбъектовКВыгрузке = 0 Тогда
		ПроцентВыполнения = 95;
		Шаблон = НСтр("ru = 'Обработано: %1 объектов.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Формат(КоличествоВыгруженных, "ЧН=0; ЧГ="));

	Иначе
		// 5% полосы резервируем под выгрузку по ссылкам, проценты по количеству считаем от 95.
		ПроцентВыполнения = Окр(Мин(КоличествоВыгруженных * 95 / КоличествоОбъектовКВыгрузке, 95));
		Шаблон = НСтр("ru = 'Обработано: %1 из %2 объектов.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Шаблон,
			Формат(КоличествоВыгруженных, "ЧН=0; ЧГ="),
			Формат(КоличествоОбъектовКВыгрузке, "ЧН=0; ЧГ="));
	КонецЕсли;
	
	// Регистрация сообщения для чтения из клиентского сеанса.
	ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, Текст);
КонецПроцедуры

// Рассчитывает процент загрузки и записывает в виде сообщения пользователю.
//
// Параметры:
//  КоличествоЗагруженных       - Число - Количество загруженных на данный момент объектов.
//  КоличествоОбъектовКЗагрузке - Число - Количество объектов к загрузке.
//  РазмерФайлаСообщенияОбмена  - Число - Размер файла сообщения обмена в мегабайтах.
//
Процедура РассчитатьПроцентЗагрузки(КоличествоЗагруженных, КоличествоОбъектовКЗагрузке, РазмерФайлаСообщенияОбмена) Экспорт
	// Сообщение о проценте загрузки выдаем через каждые 10 объектов.
	Если КоличествоЗагруженных = 0 ИЛИ КоличествоЗагруженных / 10 <> Цел(КоличествоЗагруженных / 10) Тогда
		Возврат;
	КонецЕсли;

	Если КоличествоОбъектовКЗагрузке = 0 Тогда
		// Возможно при загрузке через com соединение если на другой стороне не встроен прогресс-бар.
		ПроцентВыполнения = 95;
		Шаблон = НСтр("ru = 'Обработано %1 объектов.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Формат(КоличествоЗагруженных, "ЧН=0; ЧГ="));
	Иначе
		// 5% полосы резервируем под отложенное заполнение, проценты по количеству считаем от 95.
		ПроцентВыполнения = Окр(Мин(КоличествоЗагруженных * 95 / КоличествоОбъектовКЗагрузке, 95));
		
		Шаблон = НСтр("ru = 'Обработано: %1 из %2 объектов.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Шаблон,
			Формат(КоличествоЗагруженных, "ЧН=0; ЧГ="),
			Формат(КоличествоОбъектовКЗагрузке, "ЧН=0; ЧГ="));
	КонецЕсли;
	
	// Дополняем размером файла.
	Если РазмерФайлаСообщенияОбмена <> 0 Тогда
		Шаблон = НСтр("ru = 'Размер сообщения %1 МБ'");
		ТекстДополнение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, РазмерФайлаСообщенияОбмена);
		Текст = Текст + " " + ТекстДополнение;
	КонецЕсли;
	
	// Регистрация сообщения для чтения из клиентского сеанса.
	ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, Текст);

КонецПроцедуры

// Увеличение счетчика выгруженных объектов и расчет процента выгрузки. Только для РИБ.
//
// Параметры:
// Получатель - План обмена объект.
// СозданиеНачальногоОбраза - булево.
//
Процедура РассчитатьПроцентВыгрузкиРИБ(Получатель, СозданиеНачальногоОбраза) Экспорт
	
	Если Получатель = Неопределено
		Или Не ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(Получатель.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// Подсчет количества объектов к выгрузке.
	Если НЕ Получатель.ДополнительныеСвойства.Свойство("КоличествоОбъектовКВыгрузке") Тогда
		Если СозданиеНачальногоОбраза Тогда
			КоличествоОбъектовКВыгрузке = РассчитатьКоличествоОбъектовВБазе(Получатель);
		Иначе
			КоличествоОбъектовКВыгрузке = РассчитатьКоличествоЗарегистрированныхОбъектов(Получатель);
		КонецЕсли;
		Получатель.ДополнительныеСвойства.Вставить("КоличествоОбъектовКВыгрузке", КоличествоОбъектовКВыгрузке);
		Получатель.ДополнительныеСвойства.Вставить("СчетчикВыгруженныхОбъектов", 1);
		Возврат; // % выгрузки в этом случае можно не считать - это самое начало выгрузки.
	Иначе
		Если Получатель.ДополнительныеСвойства.Свойство("СчетчикВыгруженныхОбъектов") Тогда
			Получатель.ДополнительныеСвойства.СчетчикВыгруженныхОбъектов = Получатель.ДополнительныеСвойства.СчетчикВыгруженныхОбъектов + 1;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьПроцентВыгрузки(Получатель.ДополнительныеСвойства.СчетчикВыгруженныхОбъектов,
		Получатель.ДополнительныеСвойства.КоличествоОбъектовКВыгрузке);
КонецПроцедуры

// Увеличение счетчика загруженных объектов и расчет процента загрузки. Только для РИБ.
//
// Параметры:
// Отправитель - План обмена объект.
//
Процедура РассчитатьПроцентЗагрузкиРИБ(Отправитель) Экспорт
	
	Если Отправитель = Неопределено
		Или Не ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(Отправитель.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ Отправитель.ДополнительныеСвойства.Свойство("КоличествоОбъектовКЗагрузке")
		ИЛИ НЕ Отправитель.ДополнительныеСвойства.Свойство("РазмерФайлаСообщенияОбмена") Тогда
		КоличествоОбъектовКЗагрузке = 0;
		РазмерФайлаСообщенияОбмена = 0;
		// Извлечение общего количества объектов к загрузке и размера файла сообщения обмена.
		ТекущийПараметрСеанса = Неопределено;
		УстановитьПривилегированныйРежим(Истина);
		Попытка
			ТекущийПараметрСеанса = ПараметрыСеанса.ПараметрыСеансаСинхронизацииДанных.Получить();
		Исключение
			Возврат;
		КонецПопытки;
		УстановитьПривилегированныйРежим(Ложь);
		Если ТипЗнч(ТекущийПараметрСеанса) = Тип("Соответствие") Тогда
			ДанныеСинхронизации = ТекущийПараметрСеанса.Получить(Отправитель.Ссылка);
			Если ДанныеСинхронизации = Неопределено 
				ИЛИ ТипЗнч(ДанныеСинхронизации) <> Тип("Структура") Тогда
				Возврат;
			КонецЕсли;
			Отправитель.ДополнительныеСвойства.Вставить("КоличествоОбъектовКЗагрузке", 
														ДанныеСинхронизации.КоличествоОбъектовКЗагрузке);
			Отправитель.ДополнительныеСвойства.Вставить("РазмерФайлаСообщенияОбмена", 
														ДанныеСинхронизации.РазмерФайлаСообщенияОбмена);
		КонецЕсли;
	КонецЕсли;
	Если Не Отправитель.ДополнительныеСвойства.Свойство("СчетчикЗагруженныхОбъектов") Тогда
		Отправитель.ДополнительныеСвойства.Вставить("СчетчикЗагруженныхОбъектов", 1);
	Иначе
		Отправитель.ДополнительныеСвойства.СчетчикЗагруженныхОбъектов = Отправитель.ДополнительныеСвойства.СчетчикЗагруженныхОбъектов + 1;
	КонецЕсли;
	
	РассчитатьПроцентЗагрузки(Отправитель.ДополнительныеСвойства.СчетчикЗагруженныхОбъектов,
		Отправитель.ДополнительныеСвойства.КоличествоОбъектовКЗагрузке,
		Отправитель.ДополнительныеСвойства.РазмерФайлаСообщенияОбмена);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСОбъектомFTPСоединение

Функция FTPСоединение(Знач Настройки) Экспорт
	
	Возврат Новый FTPСоединение(
		Настройки.Сервер,
		Настройки.Порт,
		Настройки.ИмяПользователя,
		Настройки.ПарольПользователя,
		НастройкиПроксиСервера(Настройки.ЗащищенноеСоединение),
		Настройки.ПассивноеСоединение,
		Настройки.Таймаут,
		Настройки.ЗащищенноеСоединение);
	
КонецФункции

Функция FTPНастройкиСоединения() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Сервер", "");
	Результат.Вставить("Порт", 21);
	Результат.Вставить("ИмяПользователя", "");
	Результат.Вставить("ПарольПользователя", "");
	Результат.Вставить("ПассивноеСоединение", Ложь);
	Результат.Вставить("Таймаут", 0);
	Результат.Вставить("ЗащищенноеСоединение", Неопределено);
	
	Возврат Результат;
КонецФункции

// Возвращает имя сервера и путь на сервере FTP, полученные из строки подключения к FTP-ресурсу.
//
// Параметры:
//  СтрокаПодключения - Строка - строка подключения к FTP-ресурсу.
// 
// Возвращаемое значение:
//  Структура - настройки подключения к FTP-ресурсу. Поля структуры:
//              Сервер - Строка - имя сервера.
//              Путь   - Строка - путь на сервере.
//
//  Пример (1):
// Результат = FTPИмяСервераИПуть("ftp://server");
// Результат.Сервер = "server";
// Результат.Путь = "/";
//
//  Пример (2):
// Результат = FTPИмяСервераИПуть("ftp://server/saas/obmen");
// Результат.Сервер = "server";
// Результат.Путь = "/saas/obmen/";
//
Функция FTPИмяСервераИПуть(Знач СтрокаПодключения) Экспорт
	
	Результат = Новый Структура("Сервер, Путь");
	СтрокаПодключения = СокрЛП(СтрокаПодключения);
	
	Если (ВРег(Лев(СтрокаПодключения, 6)) <> "FTP://"
		И ВРег(Лев(СтрокаПодключения, 7)) <> "FTPS://")
		ИЛИ СтрНайти(СтрокаПодключения, "@") <> 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Строка подключения к FTP-ресурсу не соответствует формату: ""%1""'"), СтрокаПодключения);
	КонецЕсли;
	
	ПараметрыПодключения = СтрРазделить(СтрокаПодключения, "/");
	
	Если ПараметрыПодключения.Количество() < 3 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В строке подключения к FTP-ресурсу не указано имя сервера: ""%1""'"), СтрокаПодключения);
	КонецЕсли;
	
	Результат.Сервер = ПараметрыПодключения[2];
	
	ПараметрыПодключения.Удалить(0);
	ПараметрыПодключения.Удалить(0);
	ПараметрыПодключения.Удалить(0);
	
	ПараметрыПодключения.Вставить(0, "@");
	
	Если Не ПустаяСтрока(ПараметрыПодключения.Получить(ПараметрыПодключения.ВГраница())) Тогда
		
		ПараметрыПодключения.Добавить("@");
		
	КонецЕсли;
	
	Результат.Путь = СтрСоединить(ПараметрыПодключения, "/");
	Результат.Путь = СтрЗаменить(Результат.Путь, "@", "");
	
	Возврат Результат;
КонецФункции

// Получает настройки прокси сервера.
//
Функция НастройкиПроксиСервера(ЗащищенноеСоединение)
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернетаКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернетаКлиентСервер");
		Протокол = ?(ЗащищенноеСоединение = Неопределено, "ftp", "ftps");
		Прокси = МодульПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(Протокол);
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

Функция ОткрытьПомощникСозданияОбменаДаннымиДляНастройкиПодчиненногоУзла() Экспорт
	
	Возврат Не ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И Не ОбменДаннымиПовтИсп.ЭтоАвтономноеРабочееМесто()
		И ЭтоПодчиненныйУзелРИБ()
		И Не Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Получить();
	
КонецФункции

#КонецОбласти

#Область ПрофилиБезопасности

Функция ЗапросНаИспользованиеВнешнихРесурсовПриВключенииОбмена() Экспорт
	
	Запросы = Новый Массив();
	СформироватьЗапросыНаИспользованиеВнешнихРесурсов(Запросы);
	Возврат Запросы;
	
КонецФункции

Функция ЗапросНаОчисткуРазрешенийИспользованияВнешнихРесурсов() Экспорт
	
	Запросы = Новый Массив;
	
	Для Каждого ИмяПланаОбмена Из ОбменДаннымиПовтИсп.ПланыОбменаБСП() Цикл
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПланОбмена.Ссылка КАК Узел
		|ИЗ
		|	ПланОбмена.[ИмяПланаОбмена] КАК ПланОбмена";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяПланаОбмена]", ИмяПланаОбмена);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Запросы.Добавить(РаботаВБезопасномРежиме.ЗапросНаОчисткуРазрешенийИспользованияВнешнихРесурсов(Выборка.Узел));
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запросы.Добавить(РаботаВБезопасномРежиме.ЗапросНаОчисткуРазрешенийИспользованияВнешнихРесурсов(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Константы.КаталогСообщенийОбменаДаннымиДляLinux)));
	Запросы.Добавить(РаботаВБезопасномРежиме.ЗапросНаОчисткуРазрешенийИспользованияВнешнихРесурсов(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Константы.КаталогСообщенийОбменаДаннымиДляWindows)));
	
	Возврат Запросы;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Определяет является ли план обмена БСП разделенным.
//
// Параметры:
//	ИмяПланаОбмена - Строка - Имя проверяемого плана обмена.
//
// Возвращаемое значение:
//	Тип - Булево
//
Функция ЭтоРазделенныйПланОбменаБСП(Знач ИмяПланаОбмена) Экспорт
	
	Возврат ОбменДаннымиПовтИсп.РазделенныеПланыОбменаБСП().Найти(ИмяПланаОбмена) <> Неопределено;
	
КонецФункции

// Формирует выборку измененных данных для передачи их в тот или иной узел плана обмена.
// Если обращение к методу выполняется в активной транзакции, то вызывает исключение.
// См. описание метода ПланыОбменаМенеджер.ВыбратьИзменения() в синтаксис-помощнике.
//
Функция ВыбратьИзменения(Знач Узел, Знач НомерСообщения, Знач ФильтрВыборки = Неопределено) Экспорт
	
	Если ТранзакцияАктивна() Тогда
		ВызватьИсключение НСтр("ru = 'Выборка изменений данных запрещена в активной транзакции.'");
	КонецЕсли;
	
	Возврат ПланыОбмена.ВыбратьИзменения(Узел, НомерСообщения, ФильтрВыборки);
КонецФункции

// Определяет настройки по умолчанию для плана обмена, которые затем могут быть переопределены
// в модуле менеджера плана обмена в функции ОпределитьНастройки().
// 
// Возвращаемое значение:
//   Структура - содержит поля:
//      * ПредупреждатьОНесоответствииВерсийПравилОбмена        - Булево - Признак необходимости проверки на
//                                                                         расхождение версий в правилах конвертации.
//                                                                         Проверка выполняется при загрузке комплекта
//                                                                         правил, при отправке данных и при получении
//                                                                         данных.
//      * ПутьКФайлуКомплектаПравилНаПользовательскомСайте      - Строка - Содержит путь к файлу комплекта правил в
//                                                                         виде архива на пользовательском сайте в
//                                                                         разделе конфигурации.
//      * ПутьКФайлуКомплектаПравилВКаталогеШаблонов            - Строка - Содержит относительный путь к файлу
//                                                                         комплекта правил в каталоге шаблонов
//                                                                         1С:Предприятия.
//      * ЗаголовокКомандыДляСозданияНовогоОбменаДанными        - Строка - Содержит представление команды, выводимое в
//                                                                         пользовательском интерфейсе при создании
//                                                                         новой настройки обмена данными.
//      * ЗаголовокПомощникаСозданияОбмена                      - Строка - Содержит представление заголовка формы
//                                                                         помощника создания обмена данными выводимое
//                                                                         в пользовательском интерфейсе.
//      * НаименованиеКонфигурацииКорреспондента                - Строка - Содержит представление наименования
//                                                                         конфигурации корреспондента  выводимое в
//                                                                         пользовательском интерфейсе.
//      * ЗаголовокУзлаПланаОбмена                              - Строка - Содержит представление узла плана обмена
//                                                                         выводимое в пользовательском интерфейсе.
//      * ВариантыНастроекОбмена                                - Массив - Список возможных настроек плана обмена.
//                                                                         Используется для  для создания заготовленных
//                                                                         шаблонов с заполненным настройками планов
//                                                                         обмена.
//      * ОтображатьНастройкуОтборовНаУзле                      - Булево - Признак отображения настроек отборов на узле
//                                                                         в помощнике создания обмена.
//      * ОтображатьЗначенияПоУмолчаниюНаУзле                   - Булево - Признак отображения значений по умолчанию в
//                                                                         помощнике создания обмена.
//      * ОтображатьНастройкуОтборовНаУзлеБазыКорреспондента    - Булево - Признак отображения настроек отборов на узле
//                                                                         базы-корреспондента в помощнике создания
//                                                                         обмена.
//      * ОтображатьЗначенияПоУмолчаниюНаУзлеБазыКорреспондента - Булево - Признак отображения значений по умолчанию
//                                                                         базы-корреспондента в помощнике создания
//                                                                         обмена.
//      * НазначениеПланаОбмена                                 - Строка - Вариант назначения плана обмена.
//
Функция НастройкиПланаОбменаПоУмолчанию(ИмяПланаОбмена)
	
	// Получаем значения по умолчанию для плана обмена.
	МетаданныеПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена];
	
	ЗаголовокФормыПомощника = НСтр("ru='Синхронизация данных с %Программа% (настройка)'");
	ЗаголовокФормыПомощника = СтрЗаменить(ЗаголовокФормыПомощника, "%Программа%", МетаданныеПланаОбмена.Синоним);
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ПредупреждатьОНесоответствииВерсийПравилОбмена",        Истина);
	Параметры.Вставить("ПутьКФайлуКомплектаПравилНаПользовательскомСайте",      "");
	Параметры.Вставить("ПутьКФайлуКомплектаПравилВКаталогеШаблонов",            "");
	Параметры.Вставить("ЗаголовокКомандыДляСозданияНовогоОбменаДанными",        МетаданныеПланаОбмена.Синоним);
	Параметры.Вставить("ЗаголовокПомощникаСозданияОбмена",                      ЗаголовокФормыПомощника);
	Параметры.Вставить("НаименованиеКонфигурацииКорреспондента",                МетаданныеПланаОбмена.Синоним);
	Параметры.Вставить("ЗаголовокУзлаПланаОбмена",                              МетаданныеПланаОбмена.Синоним);
	Параметры.Вставить("ВариантыНастроекОбмена",                                Новый Массив());
	Параметры.Вставить("ОтображатьНастройкуОтборовНаУзле",                      Истина);
	Параметры.Вставить("ОтображатьЗначенияПоУмолчаниюНаУзле",                   Истина);
	Параметры.Вставить("ОтображатьНастройкуОтборовНаУзлеБазыКорреспондента",    Истина);
	Параметры.Вставить("ОтображатьЗначенияПоУмолчаниюНаУзлеБазыКорреспондента", Истина);
	Параметры.Вставить("ЭтоПланОбменаXDTO",                                     Ложь);
	Параметры.Вставить("НазначениеПланаОбмена",
		?(МетаданныеПланаОбмена.РаспределеннаяИнформационнаяБаза, "РИБ", "СинхронизацияСДругойПрограммой"));
	Возврат Параметры;
	
КонецФункции

// Получает значение настройки плана обмена по ее имени.
// 
// Параметры:
//   ИмяПланаОбмена         - Строка - Имя плана обмена из метаданных.
//   ИмяПараметра           - Строка - Имя параметра плана обмена или список параметров, разделенных запятыми.
//                                     Список допустимых значений см. в функции ПараметрыПланаОбменаПоУмолчанию.
//   ИдентификаторНастройки - Строка - Имя предопределенной настройки плана обмена.
// 
// Возвращаемое значение:
//	- Произвольный - Тип возвращаемого значения зависит от типа значения получаемой настройки.
//	- Структура - Если в качестве параметра ИмяПараметра была передан список параметров через запятую.
//
Функция ЗначениеНастройкиПланаОбмена(ИмяПланаОбмена, ИмяПараметра, ИдентификаторНастройки = "") Экспорт
	
	ПараметрыПоУмолчанию = НастройкиПланаОбменаПоУмолчанию(ИмяПланаОбмена);
	Если ОбменДаннымиПовтИсп.ПланыОбменаБСП().Найти(ИмяПланаОбмена) <> Неопределено Тогда
		ПланыОбмена[ИмяПланаОбмена].ОпределитьНастройки(ПараметрыПоУмолчанию, ИдентификаторНастройки);
	КонецЕсли;
	
	Если СтрНайти(ИмяПараметра, ",") = 0 Тогда
		
		ЗначениеПараметра = ПараметрыПоУмолчанию[ИмяПараметра];
		
	Иначе
		
		ЗначениеПараметра = Новый Структура(ИмяПараметра);
		ЗаполнитьЗначенияСвойств(ЗначениеПараметра, ПараметрыПоУмолчанию);
		
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Функция СтруктураПараметровWS() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("WSURLВебСервиса");
	СтруктураПараметров.Вставить("WSИмяПользователя");
	СтруктураПараметров.Вставить("WSПароль");
	
	Возврат СтруктураПараметров;
КонецФункции

Функция ТаблицаМонитораОбменаДанными(Знач ПланыОбмена, Знач ДополнительныеСвойстваПланаОбмена = "", Знач ТолькоОшибочные = Ложь) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	СостоянияОбменовДанными.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято)
	|				ИЛИ СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями)
	|			ТОГДА 2
	|		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КоличествоПроблем.Количество, 0) > 0
	|						ТОГДА 2
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК РезультатВыполненияОбмена
	|ПОМЕСТИТЬ СостоянияОбменовДаннымиЗагрузка
	|ИЗ
	|	РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоПроблем КАК КоличествоПроблем
	|		ПО СостоянияОбменовДанными.УзелИнформационнойБазы = КоличествоПроблем.УзелИнформационнойБазы
	|ГДЕ
	|	СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	СостоянияОбменовДанными.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято)
	|			ТОГДА 2
	|		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями)
	|			ТОГДА 2
	|		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК РезультатВыполненияОбмена
	|ПОМЕСТИТЬ СостоянияОбменовДаннымиВыгрузка
	|ИЗ
	|	РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
	|ГДЕ
	|	СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	СостоянияУспешныхОбменовДанными.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ СостоянияУспешныхОбменовДаннымиЗагрузка
	|ИЗ
	|	РегистрСведений.СостоянияУспешныхОбменовДанными КАК СостоянияУспешныхОбменовДанными
	|ГДЕ
	|	СостоянияУспешныхОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	СостоянияУспешныхОбменовДанными.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ СостоянияУспешныхОбменовДаннымиВыгрузка
	|ИЗ
	|	РегистрСведений.СостоянияУспешныхОбменовДанными КАК СостоянияУспешныхОбменовДанными
	|ГДЕ
	|	СостоянияУспешныхОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СценарииОбменовДаннымиНастройкиОбмена.УзелИнформационнойБазы КАК УзелИнформационнойБазы
	|ПОМЕСТИТЬ СценарииСинхронизацииДанных
	|ИЗ
	|	Справочник.СценарииОбменовДанными.НастройкиОбмена КАК СценарииОбменовДаннымиНастройкиОбмена
	|ГДЕ
	|	СценарииОбменовДаннымиНастройкиОбмена.Ссылка.ИспользоватьРегламентноеЗадание = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	СценарииОбменовДаннымиНастройкиОбмена.УзелИнформационнойБазы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыОбмена.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|
	|	[ДополнительныеСвойстваПланаОбмена]
	|
	|	ЕСТЬNULL(СостоянияОбменовДаннымиВыгрузка.РезультатВыполненияОбмена, 0) КАК РезультатПоследнейВыгрузкиДанных,
	|	ЕСТЬNULL(СостоянияОбменовДаннымиЗагрузка.РезультатВыполненияОбмена, 0) КАК РезультатПоследнейЗагрузкиДанных,
	|	СостоянияОбменовДаннымиЗагрузка.ДатаОкончания КАК ДатаПоследнейЗагрузки,
	|	СостоянияОбменовДаннымиВыгрузка.ДатаОкончания КАК ДатаПоследнейВыгрузки,
	|	СостоянияУспешныхОбменовДаннымиЗагрузка.ДатаОкончания КАК ДатаПоследнейУспешнойЗагрузки,
	|	СостоянияУспешныхОбменовДаннымиВыгрузка.ДатаОкончания КАК ДатаПоследнейУспешнойВыгрузки,
	|	ВЫБОР
	|		КОГДА СценарииСинхронизацииДанных.УзелИнформационнойБазы ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК РасписаниеНастроено
	|ИЗ
	|	ПланыОбменаКонфигурации КАК ПланыОбмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияОбменовДаннымиЗагрузка КАК СостоянияОбменовДаннымиЗагрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостоянияОбменовДаннымиЗагрузка.УзелИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияОбменовДаннымиВыгрузка КАК СостоянияОбменовДаннымиВыгрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостоянияОбменовДаннымиВыгрузка.УзелИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияУспешныхОбменовДаннымиЗагрузка КАК СостоянияУспешныхОбменовДаннымиЗагрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостоянияУспешныхОбменовДаннымиЗагрузка.УзелИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияУспешныхОбменовДаннымиВыгрузка КАК СостоянияУспешныхОбменовДаннымиВыгрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостоянияУспешныхОбменовДаннымиВыгрузка.УзелИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СценарииСинхронизацииДанных КАК СценарииСинхронизацииДанных
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СценарииСинхронизацииДанных.УзелИнформационнойБазы
	|
	|[Отбор]
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланыОбмена.Наименование";
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПолучитьТаблицуПлановОбменаДляМонитора(МенеджерВременныхТаблиц, ПланыОбмена, ДополнительныеСвойстваПланаОбмена);
	ПолучитьТаблицуРезультатовОбменаДляМонитора(МенеджерВременныхТаблиц, ПланыОбмена);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ДополнительныеСвойстваПланаОбмена]", ПолучитьДополнительныеСвойстваПланаОбменаСтрокой(ДополнительныеСвойстваПланаОбмена));
	
	Если ТолькоОшибочные Тогда
		Отбор = "
			|ГДЕ
			|	    ЕСТЬNULL(СостоянияОбменовДаннымиВыгрузка.РезультатВыполненияОбмена, 0) <> 0
			|	ИЛИ ЕСТЬNULL(СостоянияОбменовДаннымиЗагрузка.РезультатВыполненияОбмена, 0) <> 0";
	Иначе
		Отбор = "";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Отбор]", Отбор);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	НастройкиСинхронизации = Запрос.Выполнить().Выгрузить();
	НастройкиСинхронизации.Колонки.Добавить("ПредставлениеДатыПоследнейЗагрузки");
	НастройкиСинхронизации.Колонки.Добавить("ПредставлениеДатыПоследнейВыгрузки");
	НастройкиСинхронизации.Колонки.Добавить("ПредставлениеДатыПоследнейУспешнойЗагрузки");
	НастройкиСинхронизации.Колонки.Добавить("ПредставлениеДатыПоследнейУспешнойВыгрузки");
	НастройкиСинхронизации.Колонки.Добавить("ВариантОбменаДанными", Новый ОписаниеТипов("Строка"));
	НастройкиСинхронизации.Колонки.Добавить("ИмяПланаОбмена", Новый ОписаниеТипов("Строка"));
	
	Для Каждого НастройкаСинхронизации Из НастройкиСинхронизации Цикл
		
		ПереопределяемоеИмяУзлаПланаОбмена = ПереопределяемоеИмяУзлаПланаОбмена(НастройкаСинхронизации.УзелИнформационнойБазы, "НаименованиеКонфигурацииКорреспондента");
		
		Если ЗначениеЗаполнено(ПереопределяемоеИмяУзлаПланаОбмена) Тогда
			НастройкаСинхронизации.ИмяПланаОбмена = ПереопределяемоеИмяУзлаПланаОбмена;
		КонецЕсли;
		
		НастройкаСинхронизации.ПредставлениеДатыПоследнейЗагрузки         = ОтносительнаяДатаСинхронизации(НастройкаСинхронизации.ДатаПоследнейЗагрузки);
		НастройкаСинхронизации.ПредставлениеДатыПоследнейВыгрузки         = ОтносительнаяДатаСинхронизации(НастройкаСинхронизации.ДатаПоследнейВыгрузки);
		НастройкаСинхронизации.ПредставлениеДатыПоследнейУспешнойЗагрузки = ОтносительнаяДатаСинхронизации(НастройкаСинхронизации.ДатаПоследнейУспешнойЗагрузки);
		НастройкаСинхронизации.ПредставлениеДатыПоследнейУспешнойВыгрузки = ОтносительнаяДатаСинхронизации(НастройкаСинхронизации.ДатаПоследнейУспешнойВыгрузки);
		
		НастройкаСинхронизации.ВариантОбменаДанными = ВариантОбменаДанными(НастройкаСинхронизации.УзелИнформационнойБазы);
		
	КонецЦикла;
	
	Возврат НастройкиСинхронизации;
	
КонецФункции

Процедура ПроверитьВозможностьВыполненияОбменов() Экспорт
	
	Если Не Пользователи.РолиДоступны("ВыполнениеСинхронизацииДанных") Тогда
		
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для синхронизации данных.'");
		
	ИначеЕсли ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы()
	        И НЕ ОбменДаннымиВызовСервера.РежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском("ЗагрузкаРазрешена") Тогда
		
		ВызватьИсключение НСтр("ru = 'Информационная база находится в состоянии обновления.'");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИспользованиеОбменаДанными() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
		
		ТекстСообщения = НСтр("ru = 'Синхронизация данных запрещена администратором.'");
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииОбменДанными(), УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыОбмена() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ВидТранспортаСообщенийОбмена", Неопределено);
	СтруктураПараметров.Вставить("ВыполнятьЗагрузку", Истина);
	СтруктураПараметров.Вставить("ВыполнятьВыгрузку", Истина);
	
	СтруктураПараметров.Вставить("ТолькоПараметры", Ложь);
	
	СтруктураПараметров.Вставить("ДлительнаяОперацияРазрешена", Ложь);
	СтруктураПараметров.Вставить("ДлительнаяОперация", Ложь);
	СтруктураПараметров.Вставить("ИдентификаторОперации", "");
	СтруктураПараметров.Вставить("ИдентификаторФайла", "");
	СтруктураПараметров.Вставить("ПараметрыАутентификации", Неопределено);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Точка входа для выполнения итерации обмена данными - загрузки и выгрузки данных для узла плана обмена.
//
// Параметры:
//  УзелИнформационнойБазы - ПланОбменаСсылка - узел плана обмена, для которого выполняется итерация обмена данными.
//  ПараметрыОбменаДляУзла - Структура - содержит следующие параметры:
//    * ВыполнятьЗагрузку - Булево - флаг необходимости выполнять загрузку данных.
//        Необязательный, значение по умолчанию Истина.
//    * ВыполнятьВыгрузку - Булево - флаг необходимости выполнять выгрузку данных.
//        Необязательный, значение по умолчанию Истина.
//    * ВидТранспортаСообщенийОбмена - ПеречислениеСсылка.ВидыТранспортаСообщенийОбмена - вид транспорта, 
//        который будет использоваться в процессе обмена данными. 
//        Если в РС значение не задано, то значение по умолчанию - Перечисления.ВидыТранспортаСообщенийОбмена.FILE.
//        Необязательный, значение по умолчанию Неопределено.
//    * ДлительнаяОперация - Булево - содержит сведения о том, является ли операция длительной.
//        Необязательный, значение по умолчанию Ложь.
//    * ИдентификаторОперации - Строка - содержит идентификатор длительной операции в виде строки.
//        Необязательный, значение по умолчанию пустая строка.
//    * ИдентификаторФайла - Строка - идентификатор файла сообщения в сервисе.
//        Необязательный, значение по умолчанию пустая строка.
//    * ДлительнаяОперацияРазрешена - Булево - содержит признак того, что длительная операция разрешена.
//        Необязательный, значение по умолчанию Ложь.
//    * ПараметрыАутентификации - Структура - содержит параметры аутентификации для обмена через Web-сервис.
//        Необязательный, значение по умолчанию Неопределено.
//    * ТолькоПараметры - Булево - содержит признак выборочной загрузки данных при обмене РИБ.
//        Необязательный, значение по умолчанию Ложь.
//  Отказ - Булево - флаг отказа; поднимается в случае возникновения ошибки при выполнении обмена.
// 
Процедура ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(УзелИнформационнойБазы, ПараметрыОбмена, Отказ) Экспорт
	
	ДействиеЗагрузка = Перечисления.ДействияПриОбмене.ЗагрузкаДанных;
	ДействиеВыгрузка = Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
	
	ПроверитьВозможностьВыполненияОбменов();
	
	ПроверитьИспользованиеОбменаДанными();
	
	// Обмен через внешнее соединение.
	Если ПараметрыОбмена.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.COM Тогда
		
		ПроверитьВозможностьВнешнегоСоединения();
		
		Если ПараметрыОбмена.ВыполнятьЗагрузку Тогда
			ВыполнитьДействиеОбменаДляУзлаИнформационнойБазыПоВнешнемуСоединению(Отказ, УзелИнформационнойБазы,
				ДействиеЗагрузка, Неопределено);
		КонецЕсли;
		
		Если ПараметрыОбмена.ВыполнятьВыгрузку Тогда
			ВыполнитьДействиеОбменаДляУзлаИнформационнойБазыПоВнешнемуСоединению(Отказ, УзелИнформационнойБазы, 
				ДействиеВыгрузка, Неопределено);
		КонецЕсли;
		
	ИначеЕсли ПараметрыОбмена.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.WS Тогда // Обмен через Web-сервис
		
		Если ПараметрыОбмена.ВыполнятьЗагрузку Тогда
			ВыполнитьДействиеОбменаДляУзлаИнформационнойБазыЧерезWebСервис(УзелИнформационнойБазы,
				ДействиеЗагрузка, ПараметрыОбмена, Отказ);
		КонецЕсли;
		
		Если ПараметрыОбмена.ВыполнятьВыгрузку Тогда
			ВыполнитьДействиеОбменаДляУзлаИнформационнойБазыЧерезWebСервис(УзелИнформационнойБазы,
				ДействиеВыгрузка, ПараметрыОбмена, Отказ);
		КонецЕсли;
		
	Иначе // Обмен через обычные каналы связи.
		
		ТолькоПараметры = ПараметрыОбмена.ТолькоПараметры;
		ВидТранспортаСообщенийОбмена = ПараметрыОбмена.ВидТранспортаСообщенийОбмена;
		
		Если ПараметрыОбмена.ВыполнятьЗагрузку Тогда
			ВыполнитьДействиеОбменаДляУзлаИнформационнойБазы(Отказ, УзелИнформационнойБазы,
				ДействиеЗагрузка, ВидТранспортаСообщенийОбмена, ТолькоПараметры);
		КонецЕсли;
		
		Если ПараметрыОбмена.ВыполнятьВыгрузку Тогда
			ВыполнитьДействиеОбменаДляУзлаИнформационнойБазы(Отказ, УзелИнформационнойБазы,
				ДействиеВыгрузка, ВидТранспортаСообщенийОбмена, ТолькоПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьWSПроксиПоПараметрамПодключения(
					СтруктураНастроек,
					СтрокаСообщенияОбОшибке = "",
					СообщениеПользователю = "",
					ДелатьКонтрольныйВызов = Ложь) Экспорт
	
	Попытка
		ОбменДаннымиКлиентСервер.ПроверитьКорректностьФорматаАдресаWSПрокси(СтруктураНастроек.WSURLВебСервиса);
	Исключение
		СообщениеПользователю = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУстановкаПодключенияКWebСервису(), УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	
	Попытка
		ОбменДаннымиКлиентСервер.ПроверитьНедопустимыеСимволыВИмениПользователяWSПрокси(СтруктураНастроек.WSИмяПользователя);
	Исключение
		СообщениеПользователю = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУстановкаПодключенияКWebСервису(), УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	
	МестоположениеWSDL = "[URLВебСервиса]/ws/[ИмяСервиса]?wsdl";
	МестоположениеWSDL = СтрЗаменить(МестоположениеWSDL, "[URLВебСервиса]", СтруктураНастроек.WSURLВебСервиса);
	МестоположениеWSDL = СтрЗаменить(МестоположениеWSDL, "[ИмяСервиса]",    СтруктураНастроек.WSИмяСервиса);
	
	Попытка
		WSПрокси = ОбщегоНазначения.WSПрокси(
			МестоположениеWSDL,
			СтруктураНастроек.WSURLПространстваИменСервиса,
			СтруктураНастроек.WSИмяСервиса,
			,
			СтруктураНастроек.WSИмяПользователя,
			СтруктураНастроек.WSПароль,
			СтруктураНастроек.WSТаймаут,
			ДелатьКонтрольныйВызов);
	Исключение
		СообщениеПользователю = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУстановкаПодключенияКWebСервису(), УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат WSПрокси;
КонецФункции

// Выполняет действия по удалению настройки синхронизации данных.
// 
// Параметры:
//   УзелИнформационнойБазы - ПланОбменаСсылка - Ссылка на удаляемый узел плана обмена.
// 
Процедура УдалитьНастройкуСинхронизации(УзелИнформационнойБазы) Экспорт
	
	ПроверитьВозможностьАдминистрированияОбменов();
	
	ОбъектУзла = УзелИнформационнойБазы.ПолучитьОбъект();
	Если ОбъектУзла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ОбъектУзла.Удалить();
	
КонецПроцедуры

// Выполняет действия по удалению настройки синхронизации данных с главным узлом РИБ.
// 
// Параметры:
//   УзелИнформационнойБазы - ПланОбменаСсылка - Ссылка на главный узел.
// 
Процедура УдалитьНастройкиСинхронизацииСГлавнымУзломРИБ(УзелИнформационнойБазы) Экспорт
	
	УдалитьНастройкуСинхронизации(УзелИнформационнойБазы);
	
	НастройкаПодчиненногоУзлаРИБЗавершена = Константы.НастройкаПодчиненногоУзлаРИБЗавершена.СоздатьМенеджерЗначения();
	НастройкаПодчиненногоУзлаРИБЗавершена.Прочитать();
	Если НастройкаПодчиненногоУзлаРИБЗавершена.Значение Тогда
		НастройкаПодчиненногоУзлаРИБЗавершена.Значение = Ложь;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НастройкаПодчиненногоУзлаРИБЗавершена);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значение параметра "Загрузка" для свойства объекта "ОбменДанными".
//
// Параметры:
//  Объект - Любой объект - объект, для которого устанавливается свойство.
//  Значение - Булево - значение устанавливаемого свойства "Загрузка".
//  ОтправкаНазад - Булево - признак необходимости регистрации данных к обратной отправке.
//  УзелОбмена - ПланОбменаСсылка - признак необходимости регистрации данных к обратной отправке.
//
Процедура УстановитьОбменДаннымиЗагрузка(Объект, Значение = Истина, ОтправкаНазад = Ложь, УзелОбмена = Неопределено) Экспорт
	
	Объект.ОбменДанными.Загрузка = Значение;
	
	Если Не ОтправкаНазад
		И УзелОбмена <> Неопределено
		И НЕ УзелОбмена.Пустая() Тогда
	
		ТипЗначенияОбъекта = ТипЗнч(Объект);
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначенияОбъекта);
		
		Если Метаданные.ПланыОбмена[УзелОбмена.Метаданные().Имя].Состав.Содержит(ОбъектМетаданных) Тогда
			Объект.ОбменДанными.Отправитель = УзелОбмена;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Функция НазначениеПланаОбмена(ИмяПланаОбмена) Экспорт
	
	Возврат ОбменДаннымиПовтИсп.НазначениеПланаОбмена(ИмяПланаОбмена);
	
КонецФункции

Функция ПолноеИмяФайлаДанныхОтложенногоОбновления()
	
	КаталогВременныхФайлов = ОбменДаннымиПовтИсп.КаталогВременногоХранилищаФайлов();
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
		КаталогВременныхФайлов, "updatedata.xml");
		
	Возврат ИмяФайла;
	
КонецФункции

// Процедура удаления существующих движений документа при перепроведении (отмене проведения).
//
// Параметры:
//   ДокументОбъект - ДокументОбъект - документ, движения которого требуется удалить.
//
Процедура УдалитьДвиженияУДокумента(ДокументОбъект) Экспорт
	
	МассивОбрабатываемыхСтрокТаблицыДвижений = Новый Массив();
	
	// Получение списка регистров, по которым существуют движения.
	ТаблицаДвижений = ОпределитьНаличиеДвиженийПоДокументу(ДокументОбъект.Ссылка);
	ТаблицаДвижений.Колонки.Добавить("НаборЗаписей");
	ТаблицаДвижений.Колонки.Добавить("БезусловноеУдаление", Новый ОписаниеТипов("Булево"));
		
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
		// Имя регистра передается как значение, полученное с помощью
		// функции ПолноеИмя() метаданных регистра.
		ПозицияТочки = СтрНайти(СтрокаДвижения.Имя, ".");
		ТипРегистра = Лев(СтрокаДвижения.Имя, ПозицияТочки - 1);
		ИмяРегистра = СокрП(Сред(СтрокаДвижения.Имя, ПозицияТочки + 1));

		МассивОбрабатываемыхСтрокТаблицыДвижений.Добавить(СтрокаДвижения);
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			МетаданныеНабора = Метаданные.РегистрыНакопления[ИмяРегистра];
			Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
			МетаданныеНабора = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
			Набор = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
		ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
			МетаданныеНабора = Метаданные.РегистрыСведений[ИмяРегистра];
			Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
			МетаданныеНабора = Метаданные.РегистрыРасчета[ИмяРегистра];
			Набор = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
		КонецЕсли;
		
		Если Не ПравоДоступа("Изменение", Набор.Метаданные()) Тогда
			// Отсутствуют права на всю таблицу регистра.
			ТекстИсключения = НСтр("ru = 'Нарушение прав доступа: %1'");
			ТекстИсключения = СтрШаблон(ТекстИсключения, СтрокаДвижения.Имя);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;

		Набор.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);

		// Набор не записывается сразу, чтобы не откатывать транзакцию, если впоследствии
		// выяснится, что на один из регистров не хватает прав.
		СтрокаДвижения.НаборЗаписей = Набор;
		
	КонецЦикла;
	
	ПропуститьПроверкуЗапретаИзменения();
	
	Для Каждого СтрокаДвижения Из МассивОбрабатываемыхСтрокТаблицыДвижений Цикл		
		Попытка
			СтрокаДвижения.НаборЗаписей.Записать();
		Исключение
			// Возможно «сработал» RLS или подсистема даты запрета изменения.
			ТекстИсключения = НСтр("ru = 'Операция не выполнена: %1
				|%2'");
			ТекстИсключения = СтрШаблон(ТекстИсключения, СтрокаДвижения.Имя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
	КонецЦикла;
	
	ПропуститьПроверкуЗапретаИзменения(Ложь);
	
	Для Каждого Движение Из ДокументОбъект.Движения Цикл
		Если Движение.Количество() > 0 Тогда
			Движение.Очистить();
		КонецЕсли;
	КонецЦикла;
	
	// Удаление записей регистрации из всех последовательностей.
	Если ДокументОбъект.Метаданные().ЗаполнениеПоследовательностей = Метаданные.СвойстваОбъектов.ЗаполнениеПоследовательностей.ЗаполнятьАвтоматически Тогда
		ТекстЗапроса = "";
		
		Для Каждого Последовательность Из ДокументОбъект.ПринадлежностьПоследовательностям Цикл
			// В запросе получаем имена последовательностей, в которых документ зарегистрирован.
			ТекстЗапроса = ТекстЗапроса + "
			|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
			|ВЫБРАТЬ """ + Последовательность.Метаданные().Имя
			+  """ КАК Имя ИЗ " + Последовательность.Метаданные().ПолноеИмя()
			+ " ГДЕ Регистратор = &Регистратор";
			
		КонецЦикла;
		
		Если ТекстЗапроса = "" Тогда
			ТаблицаРегистраций = Новый ТаблицаЗначений();
		Иначе
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", ДокументОбъект.Ссылка);
			ТаблицаРегистраций = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		
		// Получение списка последовательностей в которых зарегистрирован документ.
		КоллекцияПоследовательностей = ДокументОбъект.ПринадлежностьПоследовательностям;
		Для Каждого НаборЗаписейРегистрацииВПоследовательности Из КоллекцияПоследовательностей Цикл
			Если (НаборЗаписейРегистрацииВПоследовательности.Количество() > 0)
				ИЛИ (НЕ ТаблицаРегистраций.Найти(НаборЗаписейРегистрацииВПоследовательности.Метаданные().Имя,"Имя") = Неопределено) Тогда
				НаборЗаписейРегистрацииВПоследовательности.Очистить();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийПодсистемБСП

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию подсистем,
// используя в качестве ключей названия подсистем.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура: 
//	- Ключи = Названия подсистем. 
//	- Значения = Массивы названий поддерживаемых версий.
//
// Пример реализации:
//
//	// СервисПередачиФайлов
//	МассивВерсий = Новый Массив;
//	МассивВерсий.Добавить("1.0.1.1");	
//	МассивВерсий.Добавить("1.0.2.1"); 
//	СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//	// Конец СервисПередачиФайлов
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(Знач СтруктураПоддерживаемыхВерсий) Экспорт
	
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("2.0.1.6");
	МассивВерсий.Добавить("2.1.1.7");
	СтруктураПоддерживаемыхВерсий.Вставить("ОбменДанными", МассивВерсий);
	
КонецПроцедуры

// Добавляет параметры работы клиентской логики для подсистемы обмена данными.
//
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры.Вставить("ИмяПланаОбменаРИБ", ?(ЭтоПодчиненныйУзелРИБ(), ГлавныйУзел().Метаданные().Имя, ""));
	Параметры.Вставить("ГлавныйУзел", ГлавныйУзел());
	
	Если ОткрытьПомощникСозданияОбменаДаннымиДляНастройкиПодчиненногоУзла() Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
			МодульВзаимодействия = ОбщегоНазначения.ОбщийМодуль("Взаимодействия");
			МодульВзаимодействия.ВыполнитьПолныйПерерасчетСостояний();
		КонецЕсли;
		
		Параметры.Вставить("ОткрытьПомощникСозданияОбменаДаннымиДляНастройкиПодчиненногоУзла");
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Параметры.Свойство("ОткрытьПомощникСозданияОбменаДаннымиДляНастройкиПодчиненногоУзла")
		И Пользователи.РолиДоступны("ВыполнениеСинхронизацииДанных") Тогда
		
		Параметры.Вставить("ПроверитьНеобходимостьОбновленияКонфигурацииПодчиненногоУзла");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переименования тех объектов метаданных, которые невозможно
// автоматически найти по типу, но ссылки на которые требуется сохранять
// в базе данных (например: подсистемы, роли).
//
// Подробнее: см. ОбщегоНазначения.ДобавитьПереименование().
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	Библиотека = "СтандартныеПодсистемы";
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог, "2.1.2.5", "Роль.ВыполнениеОбменовДанными", "Роль.ВыполнениеСинхронизацииДанных", Библиотека);
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры.Вставить("ГлавныйУзел", ГлавныйУзел());
	
КонецПроцедуры

// Вызывается при включении разделения данных по областям данных.
//
Процедура ПриВключенииРазделенияПоОбластямДанных() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
		Константы.ИспользоватьСинхронизациюДанных.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет описания поставляемых профилей групп доступа и
// переопределяет параметры обновления профилей и групп доступа.
// Подробнее см. УправлениеДоступомПереопределяемый.ПриЗаполненииПоставляемыхПрофилейГруппДоступа.
//
Процедура ПриЗаполненииПоставляемыхПрофилейГруппДоступа(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	// Профиль "Синхронизация данных с другими программами".
	ОписаниеПрофиля = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом").НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ПрофильДоступаСинхронизацияДанныхСДругимиПрограммами();
	ОписаниеПрофиля.Наименование =
		НСтр("ru = 'Синхронизация данных с другими программами'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Дополнительно назначается тем пользователям, которым должны быть доступны средства
		           |для мониторинга и синхронизации данных с другими программами.'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Основные возможности профиля.
	РолиПрофиля = СтрРазделить(РолиПрофиляДоступаСинхронизацияДанныхСДругимиПрограммами(), ",");
	Для Каждого Роль Из РолиПрофиля Цикл
		ОписаниеПрофиля.Роли.Добавить(СокрЛП(Роль));
	КонецЦикла;
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

// Заполняет массив списком имен объектов метаданных, данные которых могут содержать ссылки на различные объекты
// метаданных, но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Параметры:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Процедура ПриДобавленииИсключенийПоискаСсылок(Массив) Экспорт
	
	Массив.Добавить(Метаданные.РегистрыСведений.РезультатыОбменаДанными.ПолноеИмя());
	
КонецПроцедуры

// Заполняет перечень запросов внешних разрешений, которые обязательно должны быть предоставлены
// при создании информационной базы или обновлении программы.
//
// Параметры:
//  ЗапросыРазрешений - Массив - список значений, возвращенных функцией.
//                      РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов().
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьЗапросыНаИспользованиеВнешнихРесурсов(ЗапросыРазрешений);
	
КонецПроцедуры

// Вызывается при регистрации менеджеров внешних модулей.
//
// Параметры:
//  Менеджеры - Массив(ОбщийМодуль).
//
Процедура ПриРегистрацииМенеджеровВнешнихМодулей(Менеджеры) Экспорт
	
	Менеджеры.Добавить(ОбменДаннымиСервер);
	
КонецПроцедуры

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ПриЗаполненииСпискаТекущихДелПредупрежденияСинхронизации(ТекущиеДела);
	ПриЗаполненииСпискаТекущихДелНеобходимоОбновление(ТекущиеДела);
	ПриЗаполненииСпискаТекущихДелПроверитьСовместимостьСТекущейВерсией(ТекущиеДела);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиУсловныхВызововИзДругихПодсистем

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("РежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском", "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	
	Обработчики.Вставить("ДатаОбновленияПовторноИспользуемыхЗначенийМРО",    "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПравилаВыборочнойРегистрацииОбъектов",             "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПравилаРегистрацииОбъектов",                       "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПаролиСинхронизацииДанных",                        "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПриоритетныеДанныеОбмена",                         "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ОшибкаРасхожденияВерсийПриПолученииДанных",        "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПараметрыСеансаСинхронизацииДанных",               "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиУсловныхВызововВДругиеПодсистемы

// Определяет используется ли в конфигурации групповое изменение объектов.
//
// Параметры:
//  Используется - Булево - Истина, если используется, Ложь - иначе.
//
Процедура ПриОпределенииИспользованияГрупповогоИзмененияОбъектов(Используется) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов") Тогда
		Используется = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определяет используется ли в конфигурации подсистема даты запрета изменения.
//
// Параметры:
//  Используется - Булево - Истина, если используется, Ложь - иначе.
//
Процедура ПриОпределенииИспользованияДатЗапретаИзменения(Используется) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
		Используется = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак игнорирования версии объекта.
//
// Параметры:
//	Ссылка - Ссылка на игнорируемый объект.
//	НомерВерсии - Число - Номер версии игнорируемого объекта.
//	Игнорировать - Булево Признак игнорирования версии.
//
Процедура ПриИгнорированииВерсииОбъекта(Ссылка, НомерВерсии, Игнорировать) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ИгнорироватьВерсиюОбъекта(Ссылка, НомерВерсии, Игнорировать);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик перехода на версию объекта.
//
// Параметры:
//	ОбъектСсылка - Ссылка - Ссылка на объект, для которого имеется версия.
//	НомерВерсииДляПерехода - Число - Номер версии, на которую необходимо выполнить переход.
//	НомерИгнорируемойВерсии - Число - Номер версии, на которую необходимо проигнорировать.
//	ПропуститьПроверкуЗапретаИзменения - Булево - Признак пропуска проверки даты запрета загрузки.
//
Процедура ПриПереходеНаВерсиюОбъекта(ОбъектСсылка, НомерВерсии) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриПереходеНаВерсиюОбъекта(ОбъектСсылка, НомерВерсии);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик установки константы ИспользоватьСинхронизациюДанных.
//
//  Параметры:
// Отказ - Булево. Флаг отказа включения синхронизации данных.
// Если установить в значение Истина, то синхронизация включена не будет.
//
Процедура ПриВключенииСинхронизацииДанных(Отказ) Экспорт
	
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.УдалениеНеактуальнойИнформацииСинхронизации);
	
	Если Не Задание.Использование Тогда
		Задание.Использование = Истина;
		Задание.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик снятия константы ИспользоватьСинхронизациюДанных.
//
//  Параметры:
// Отказ - Булево. Флаг отказа отключения синхронизации данных.
// Если установить в значение Истина, то синхронизация отключена не будет.
//
Процедура ПриОтключенииСинхронизацииДанных(Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		МодульОбменДаннымиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		МодульОбменДаннымиВМоделиСервиса.ПриОтключенииСинхронизацииДанных(Отказ);
	КонецЕсли;
	
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.УдалениеНеактуальнойИнформацииСинхронизации);
	
	Если Задание.Использование Тогда
		Задание.Использование = Ложь;
		Задание.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик механизма регистрации объектов "После определения получателей".
// Событие возникает в транзакции записи данных в ИБ, когда определены 
// получатели изменений данных по правилам регистрации объектов.
//
// Параметры:
//  Данные. Записываемый объект, представляющий данные - документ, элемент справочника,
//          счет бухгалтерского учета, менеджер записи константы, набор записей регистра и т. п.
//  Получатели     - Массив - Массив узлов планов обмена на которых будут зарегистрированы изменения текущих данных.
//  ИмяПланаОбмена - Строка - Имя плана обмена, как объекта метаданных,
//          для которого выполняются правила регистрации объектов.
//
Процедура ПослеОпределенияПолучателей(Данные, Получатели, Знач ИмяПланаОбмена) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		МодульОбменДаннымиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		МодульОбменДаннымиВМоделиСервиса.ПослеОпределенияПолучателей(Данные, Получатели, ИмяПланаОбмена);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик пропуска проверки даты запрета изменения.
//
Процедура ПропуститьПроверкуЗапретаИзменения(Пропустить = Истина) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
		МодульДатыЗапретаИзмененияСлужебный = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзмененияСлужебный");
		МодульДатыЗапретаИзмененияСлужебный.ПропуститьПроверкуЗапретаИзменения(Пропустить);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриПродолженииНастройкиПодчиненногоУзлаРИБ() Экспорт
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.ОбменДанными\ПриНастройкеПодчиненногоУзлаРИБ");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриНастройкеПодчиненногоУзлаРИБ();
	КонецЦикла;
	
	ОбменДаннымиПереопределяемый.ПриНастройкеПодчиненногоУзлаРИБ();
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеОбменаДанными

// Выполняет процесс обмена данными отдельно для каждой строки настройки обмена.
// Процесс обмена данными состоит из двух стадий:
// - инициализация обмена - подготовка подсистемы обмена данными к процессу обмена
// - обмен данными        - процесс зачитывания файла сообщения с последующей загрузкой этих данных в ИБ 
//                          или выгрузки изменений в файл сообщения.
// Стадия инициализации выполняется один раз за сеанс и сохраняется в кэше сеанса на сервере 
// до перезапуска сеанса или сброса повторно-используемых значений подсистемы обмена данными.
// Сброс повторно-используемых значений происходит при изменении данных, влияющих на процесс обмена данными
// (настройки транспорта, настройка выполнения обмена, настройка отборов на узлах планов обмена).
//
// Обмен может быть выполнен полностью для всех строк сценария,
// а может быть выполнен для отдельной строки ТЧ сценария обмена.
//
// Параметры:
//  Отказ                     - Булево - флаг отказа; поднимается в случае возникновения ошибки при выполнении сценария.
//  НастройкаВыполненияОбмена - СправочникСсылка.СценарииОбменовДанными - элемент справочника,
//                              по значениям реквизитов которого будет выполнен обмен данными.
//  НомерСтроки               - Число - Номер строки по которой будет выполнен обмен данными.
//                              Если не указан, то обмен данными будет выполнен для всех строк.
// 
Процедура ВыполнитьОбменДаннымиПоСценариюОбменаДанными(Отказ, НастройкаВыполненияОбмена, НомерСтроки = Неопределено) Экспорт
	
	ПроверитьВозможностьВыполненияОбменов();
	
	ПроверитьИспользованиеОбменаДанными();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НастройкиВыполненияОбменаНастройкиОбмена.Ссылка                         КАК НастройкаВыполненияОбмена,
	|	НастройкиВыполненияОбменаНастройкиОбмена.НомерСтроки                    КАК НомерСтроки,
	|	НастройкиВыполненияОбменаНастройкиОбмена.ВыполняемоеДействие            КАК ВыполняемоеДействие,
	|	НастройкиВыполненияОбменаНастройкиОбмена.ВидТранспортаОбмена            КАК ВидТранспортаОбмена,
	|	НастройкиВыполненияОбменаНастройкиОбмена.УзелИнформационнойБазы         КАК УзелИнформационнойБазы,
	|
	|	ВЫБОР КОГДА НастройкиВыполненияОбменаНастройкиОбмена.ВидТранспортаОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыТранспортаСообщенийОбмена.COM)
	|	ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбменЧерезВнешнееСоединение,
	|
	|	ВЫБОР КОГДА НастройкиВыполненияОбменаНастройкиОбмена.ВидТранспортаОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыТранспортаСообщенийОбмена.WS)
	|	ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбменЧерезВебСервис
	|ИЗ
	|	Справочник.СценарииОбменовДанными.НастройкиОбмена КАК НастройкиВыполненияОбменаНастройкиОбмена
	|ГДЕ
	|	НастройкиВыполненияОбменаНастройкиОбмена.Ссылка = &НастройкаВыполненияОбмена
	|	[УсловиеПоНомеруСтроки]
	|УПОРЯДОЧИТЬ ПО
	|	НастройкиВыполненияОбменаНастройкиОбмена.НомерСтроки
	|";
	
	УсловиеПоНомеруСтроки = ?(НомерСтроки = Неопределено, "", "И НастройкиВыполненияОбменаНастройкиОбмена.НомерСтроки = &НомерСтроки");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[УсловиеПоНомеруСтроки]", УсловиеПоНомеруСтроки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НастройкаВыполненияОбмена", НастройкаВыполненияОбмена);
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ОбменЧерезВнешнееСоединение Тогда
			
			ПроверитьВозможностьВнешнегоСоединения();
			
			КоличествоЭлементовВТранзакции = КоличествоЭлементовВТранзакцииВыполняемогоДействия(Выборка.ВыполняемоеДействие);
			
			ВыполнитьДействиеОбменаДляУзлаИнформационнойБазыПоВнешнемуСоединению(Отказ, Выборка.УзелИнформационнойБазы, Выборка.ВыполняемоеДействие, КоличествоЭлементовВТранзакции);
			
		ИначеЕсли Выборка.ОбменЧерезВебСервис Тогда
			
			ПараметрыОбмена = ПараметрыОбмена();
			ВыполнитьДействиеОбменаДляУзлаИнформационнойБазыЧерезWebСервис(Выборка.УзелИнформационнойБазы,
				Выборка.ВыполняемоеДействие, ПараметрыОбмена, Отказ);
			
		Иначе
			
			// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
			СтруктураНастроекОбмена = ОбменДаннымиПовтИсп.ПолучитьСтруктуруНастроекОбмена(Выборка.НастройкаВыполненияОбмена, Выборка.НомерСтроки);
			
			// Если настройка содержит ошибки, то обмен не производим; статус "Отменено".
			Если СтруктураНастроекОбмена.Отказ Тогда
				
				Отказ = Истина;
				
				// Фиксируем в ЖР лог по обмену данными.
				ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
				Продолжить;
			КонецЕсли;
			
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
			СтруктураНастроекОбмена.ДатаНачала = ТекущаяДатаСеанса();
			
			// Добавляем в ЖР информацию о процессе обмена данными.
			СтрокаСообщения = НСтр("ru = 'Начало процесса обмена данными по настройке %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтруктураНастроекОбмена.НастройкаВыполненияОбменаНаименование);
			ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
			
			// ОБМЕН ДАННЫМИ
			ВыполнитьОбменДаннымиЧерезФайловыйРесурс(СтруктураНастроекОбмена);
			
			// Фиксируем в ЖР лог по обмену данными.
			ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
			
			Если Не РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
				
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Точка входа для выполнения обмена данными по сценарию обмена регламентным заданием.
//
// Параметры:
//  КодСценарияОбмена - Строка - код элемента справочника "Сценарии обменов данными", для которого будет выполнен обмен
//                               данными.
// 
Процедура ВыполнитьОбменДаннымиПоРегламентномуЗаданию(КодСценарияОбмена) Экспорт
	
	// Вызов ПриНачалеВыполненияРегламентногоЗадания не используется,
	// т.к. необходимые действия выполняются в частном порядке.
	
	ПроверитьВозможностьВыполненияОбменов();
	
	ПроверитьИспользованиеОбменаДанными();
	
	Если Не ЗначениеЗаполнено(КодСценарияОбмена) Тогда
		ВызватьИсключение НСтр("ru = 'Не задан сценарий обмена данными.'");
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СценарииОбменовДанными.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СценарииОбменовДанными КАК СценарииОбменовДанными
	|ГДЕ
	|		 СценарииОбменовДанными.Код = &Код
	|	И НЕ СценарииОбменовДанными.ПометкаУдаления
	|";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Код", КодСценарияОбмена);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		// Выполняем обмен по сценарию.
		ВыполнитьОбменДаннымиПоСценариюОбменаДанными(Ложь, Выборка.Ссылка);
	Иначе
		СтрокаСообщения = НСтр("ru = 'Сценарий обмена данными с кодом %1 не найден.'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, КодСценарияОбмена);
		ВызватьИсключение СтрокаСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Получает сообщение обмена во временный каталог пользователя ОС.
//
// Параметры:
//  Отказ                        - Булево - флаг отказа; поднимается в случае возникновения ошибки.
//  УзелИнформационнойБазы       - ПланОбменаСсылка - узел плана обмена, для которого выполняется получение сообщения
//                                                    обмена.
//  ВидТранспортаСообщенийОбмена - ПеречислениеСсылка.ВидыТранспортаСообщенийОбмена - вид транспорта для получения
//                                                                                    сообщения обмена.
//  ВыводитьСообщения            - Булево - если Истина, то выводятся сообщения пользователю.
//
//  Возвращаемое значение:
//   Структура со следующими ключи:
//     * ИмяВременногоКаталогаСообщенийОбмена - полное имя каталога обмена, в которое было загружено сообщение обмена.
//     * ИмяФайлаСообщенияОбмена              - полное имя файла сообщения обмена.
//     * ИдентификаторФайлаПакетаДанных       - дата изменения файла сообщения обмена.
//
Функция ПолучитьСообщениеОбменаВоВременныйКаталог(Отказ, УзелИнформационнойБазы, ВидТранспортаСообщенийОбмена, ВыводитьСообщения = Истина) Экспорт
	
	// Возвращаемое значение функции.
	Результат = Новый Структура;
	Результат.Вставить("ИмяВременногоКаталогаСообщенийОбмена", "");
	Результат.Вставить("ИмяФайлаСообщенияОбмена",              "");
	Результат.Вставить("ИдентификаторФайлаПакетаДанных",       Неопределено);
	
	СтруктураНастроекОбмена = ОбменДаннымиПовтИсп.ПолучитьСтруктуруНастроекТранспорта(УзелИнформационнойБазы, ВидТранспортаСообщенийОбмена);
	
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	СтруктураНастроекОбмена.ДатаНачала = ТекущаяДатаСеанса();
	
	// Если настройка содержит ошибки, то получение сообщения обмена не производим; статус "Отменено".
	Если СтруктураНастроекОбмена.Отказ Тогда
		
		Если ВыводитьСообщения Тогда
			НСтрока = НСтр("ru = 'При инициализации обработки транспорта сообщений обмена возникли ошибки.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,,, Отказ);
		КонецЕсли;
		
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		Возврат Результат;
	КонецЕсли;
	
	// создаем временный каталог
	ВыполнитьТранспортСообщенияОбменаПередОбработкой(СтруктураНастроекОбмена);
	
	Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
		
		// Получаем сообщение во временный каталог.
		ВыполнитьТранспортСообщенияОбменаПолучение(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
	Если СтруктураНастроекОбмена.РезультатВыполненияОбмена <> Неопределено Тогда
		
		Если ВыводитьСообщения Тогда
			НСтрока = НСтр("ru = 'При получении сообщений обмена возникли ошибки.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,,, Отказ);
		КонецЕсли;
		
		// Удаляем временный каталог и все его содержимое.
		ВыполнитьТранспортСообщенияОбменаПослеОбработки(СтруктураНастроекОбмена);
		
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		Возврат Результат;
	КонецЕсли;
	
	Результат.ИмяВременногоКаталогаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ИмяКаталогаСообщенияОбмена();
	Результат.ИмяФайлаСообщенияОбмена              = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ИмяФайлаСообщенияОбмена();
	Результат.ИдентификаторФайлаПакетаДанных       = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ДатаФайлаСообщенияОбмена();
	
	Возврат Результат;
КонецФункции

// Получает сообщение обмена из информационной базы корреспондента во временный каталог пользователя ОС.
//
// Параметры:
//  Отказ                        - Булево - флаг отказа; поднимается в случае возникновения ошибки.
//  УзелИнформационнойБазы       - ПланОбменаСсылка - узел плана обмена, для которого выполняется получение сообщения
//                                                    обмена.
//  ВыводитьСообщения            - Булево - если Истина, то выводятся сообщения пользователю.
//
//  Возвращаемое значение:
//   Структура со следующими ключи:
//     * ИмяВременногоКаталогаСообщенийОбмена - полное имя каталога обмена, в которое было загружено сообщение обмена.
//     * ИмяФайлаСообщенияОбмена              - полное имя файла сообщения обмена.
//     * ИдентификаторФайлаПакетаДанных       - дата изменения файла сообщения обмена.
//
Функция ПолучитьСообщениеОбменаВоВременныйКаталогИзИнформационнойБазыКорреспондента(Отказ, УзелИнформационнойБазы, ВыводитьСообщения = Истина) Экспорт
	
	// Возвращаемое значение функции.
	Результат = Новый Структура;
	Результат.Вставить("ИмяВременногоКаталогаСообщенийОбмена", "");
	Результат.Вставить("ИмяФайлаСообщенияОбмена",              "");
	Результат.Вставить("ИдентификаторФайлаПакетаДанных",       Неопределено);
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
	ТекущийУзелПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена(ИмяПланаОбмена);
	КодТекущегоУзлаПланаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийУзелПланаОбмена, "Код");
	
	ШаблонИмениФайлаСообщения = ПолучитьШаблонИмениФайлаСообщения(ТекущийУзелПланаОбмена, УзелИнформационнойБазы, Ложь);
	
	// Параметры, которые будут определены в функции.
	ДатаФайлаСообщенияОбмена = Дата('00010101');
	ИмяКаталогаСообщенияОбмена = "";
	СтрокаСообщенияОбОшибке = "";
	
	Попытка
		ИмяКаталогаСообщенияОбмена = СоздатьВременныйКаталогСообщенийОбмена();
	Исключение
		Если ВыводитьСообщения Тогда
			Сообщение = НСтр("ru = 'Не удалось произвести обмен: %1'");
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
		КонецЕсли;
		Возврат Результат;
	КонецПопытки;
	
	// Получаем внешнее соединение для узла информационной базы.
	ДанныеСоединения = ОбменДаннымиПовтИсп.ВнешнееСоединениеДляУзлаИнформационнойБазы(УзелИнформационнойБазы);
	ВнешнееСоединение = ДанныеСоединения.Соединение;
	
	Если ВнешнееСоединение = Неопределено Тогда
		
		Сообщение = НСтр("ru = 'Не удалось произвести обмен: %1'");
		Если ВыводитьСообщения Тогда
			СообщениеДляПользователя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ДанныеСоединения.КраткоеОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеДляПользователя,,,, Отказ);
		КонецЕсли;
		
		// Добавляем две записи в ЖР: одну для загрузки данных, другую для выгрузки данных.
		СтруктураНастроекОбмена = Новый Структура("КлючСообщенияЖурналаРегистрации");
		СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ДанныеСоединения.ПодробноеОписаниеОшибки);
		ЗаписьЖурналаРегистрацииОбменаДанными(Сообщение, СтруктураНастроекОбмена, Истина);
		
		Возврат Результат;
	КонецЕсли;
	
	ИмяФайлаСообщенияОбмена = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ИмяКаталогаСообщенияОбмена, ШаблонИмениФайлаСообщения + ".xml");
	
	ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ВыполнитьВыгрузкуДляУзлаИнформационнойБазы(Отказ, ИмяПланаОбмена, КодТекущегоУзлаПланаОбмена, ИмяФайлаСообщенияОбмена, СтрокаСообщенияОбОшибке);
	
	Если Отказ Тогда
		
		Если ВыводитьСообщения Тогда
			// Выводим сообщение об ошибке.
			Сообщение = НСтр("ru = 'Не удалось выгрузить данные: %1'");
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ДанныеСоединения.КраткоеОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	ФайлСообщенияОбмена = Новый Файл(ИмяФайлаСообщенияОбмена);
	Если ФайлСообщенияОбмена.Существует() Тогда
		ДатаФайлаСообщенияОбмена = ФайлСообщенияОбмена.ПолучитьВремяИзменения();
	КонецЕсли;
	
	Результат.ИмяВременногоКаталогаСообщенийОбмена = ИмяКаталогаСообщенияОбмена;
	Результат.ИмяФайлаСообщенияОбмена              = ИмяФайлаСообщенияОбмена;
	Результат.ИдентификаторФайлаПакетаДанных       = ДатаФайлаСообщенияОбмена;
	
	Возврат Результат;
КонецФункции

// Получает сообщение обмена из информационной базы корреспондента через веб-сервис во временный каталог пользователя
// ОС.
//
// Параметры:
//  Отказ                   - Булево - флаг отказа; поднимается в случае возникновения ошибки.
//  УзелИнформационнойБазы  - ПланОбменаСсылка - узел плана обмена, для которого выполняется получение сообщения обмена.
//  ИдентификаторФайла      - УникальныйИдентификатор - Идентификатор файла.
//  ДлительнаяОперация      - Булево - Признак использования длительное операции.
//  ИдентификаторОперации   - УникальныйИдентификатор - Уникальный идентификатор длительной операции.
//  ПараметрыАутентификации - Структура. Содержит параметры аутентификации на веб-сервисе (Пользователь, Пароль).
//
//  Возвращаемое значение:
//   Структура со следующими ключи:
//     * ИмяВременногоКаталогаСообщенийОбмена - полное имя каталога обмена, в которое было загружено сообщение обмена.
//     * ИмяФайлаСообщенияОбмена              - полное имя файла сообщения обмена.
//     * ИдентификаторФайлаПакетаДанных       - дата изменения файла сообщения обмена.
//
Функция ПолучитьСообщениеОбменаВоВременныйКаталогИзИнформационнойБазыКорреспондентаЧерезВебСервис(
											Отказ,
											УзелИнформационнойБазы,
											ИдентификаторФайла,
											ДлительнаяОперация,
											ИдентификаторОперации,
											ПараметрыАутентификации = Неопределено) Экспорт
	
	ПроверитьВозможностьВыполненияОбменов();
	
	ПроверитьИспользованиеОбменаДанными();
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Возвращаемое значение функции.
	Результат = Новый Структура;
	Результат.Вставить("ИмяВременногоКаталогаСообщенийОбмена", "");
	Результат.Вставить("ИмяФайлаСообщенияОбмена",              "");
	Результат.Вставить("ИдентификаторФайлаПакетаДанных",       Неопределено);
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
	ТекущийУзелПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена(ИмяПланаОбмена);
	КодТекущегоУзлаПланаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийУзелПланаОбмена, "Код");
	
	// Параметры, которые будут определены в функции.
	ИмяКаталогаСообщенияОбмена = "";
	ИмяФайлаСообщенияОбмена = "";
	ДатаФайлаСообщенияОбмена = Дата('00010101');
	СтрокаСообщенияОбОшибке = "";
	
	// Получаем прокси веб-сервиса для узла информационной базы.
	Прокси = ПолучитьWSПроксиДляУзлаИнформационнойБазы(УзелИнформационнойБазы, СтрокаСообщенияОбОшибке, ПараметрыАутентификации);
	
	Если Прокси = Неопределено Тогда
		
		Отказ = Истина;
		Сообщение = НСтр("ru = 'Ошибка при установке подключения ко второй информационной базе: %1'");
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, СтрокаСообщенияОбОшибке);
		СтруктураНастроекОбмена = Новый Структура("КлючСообщенияЖурналаРегистрации");
		СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		ЗаписьЖурналаРегистрацииОбменаДанными(Сообщение, СтруктураНастроекОбмена, Истина);
		
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		
		Прокси.UploadData(
			ИмяПланаОбмена,
			КодТекущегоУзлаПланаОбмена,
			ИдентификаторФайла,
			ДлительнаяОперация,
			ИдентификаторОперации,
			Истина);
		
	Исключение
		
		Отказ = Истина;
		Сообщение = НСтр("ru = 'При выгрузке данных возникли ошибки во второй информационной базе: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СтруктураНастроекОбмена = Новый Структура("КлючСообщенияЖурналаРегистрации");
		СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		ЗаписьЖурналаРегистрацииОбменаДанными(Сообщение, СтруктураНастроекОбмена, Истина);
		
		Возврат Результат;
	КонецПопытки;
	
	Если ДлительнаяОперация Тогда
		СтруктураНастроекОбмена = Новый Структура("КлючСообщенияЖурналаРегистрации");
		СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		ЗаписьЖурналаРегистрацииОбменаДанными(НСтр("ru = 'Ожидание получения данных от базы-корреспондента...'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), СтруктураНастроекОбмена);
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		ИмяФайлаИзСервисаПередачиФайлов = ПолучитьФайлИзХранилищаВСервисе(Новый УникальныйИдентификатор(ИдентификаторФайла), УзелИнформационнойБазы,, ПараметрыАутентификации);
	Исключение
		
		Отказ = Истина;
		Сообщение = НСтр("ru = 'Возникли ошибки при получении сообщения обмена из сервиса передачи файлов: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СтруктураНастроекОбмена = Новый Структура("КлючСообщенияЖурналаРегистрации");
		СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		ЗаписьЖурналаРегистрацииОбменаДанными(Сообщение, СтруктураНастроекОбмена, Истина);
		
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		ИмяКаталогаСообщенияОбмена = СоздатьВременныйКаталогСообщенийОбмена();
	Исключение
		Отказ = Истина;
		Сообщение = НСтр("ru = 'При получении сообщения обмена возникли ошибки: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СтруктураНастроекОбмена = Новый Структура("КлючСообщенияЖурналаРегистрации");
		СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		ЗаписьЖурналаРегистрацииОбменаДанными(Сообщение, СтруктураНастроекОбмена, Истина);
		
		Возврат Результат;
	КонецПопытки;
	
	ШаблонИмениФайлаСообщения = ПолучитьШаблонИмениФайлаСообщения(ТекущийУзелПланаОбмена, УзелИнформационнойБазы, Ложь);
	
	ИмяФайлаСообщенияОбмена = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ИмяКаталогаСообщенияОбмена, ШаблонИмениФайлаСообщения + ".xml");
	
	ПереместитьФайл(ИмяФайлаИзСервисаПередачиФайлов, ИмяФайлаСообщенияОбмена);
	
	ФайлСообщенияОбмена = Новый Файл(ИмяФайлаСообщенияОбмена);
	Если ФайлСообщенияОбмена.Существует() Тогда
		ДатаФайлаСообщенияОбмена = ФайлСообщенияОбмена.ПолучитьВремяИзменения();
	КонецЕсли;
	
	Результат.ИмяВременногоКаталогаСообщенийОбмена = ИмяКаталогаСообщенияОбмена;
	Результат.ИмяФайлаСообщенияОбмена              = ИмяФайлаСообщенияОбмена;
	Результат.ИдентификаторФайлаПакетаДанных       = ДатаФайлаСообщенияОбмена;
	
	Возврат Результат;
КонецФункции

// Получает сообщение обмена из базы-корреспондента через веб-сервис.
// Сохраняет полученное сообщение обмена во временный каталог.
// Используется в том случае, если получение сообщения обмена выполнялось в контексте фонового задания в
// базе-корреспонденте.
//
// Параметры:
//  Отказ                   - Булево - флаг отказа; поднимается в случае возникновения ошибки.
//  УзелИнформационнойБазы  - ПланОбменаСсылка - узел плана обмена, для которого выполняется получение сообщения обмена.
//  ИдентификаторФайла      - УникальныйИдентификатор - Идентификатор файла.
//  ПараметрыАутентификации - Структура. Содержит параметры аутентификации на веб-сервисе (Пользователь, Пароль).
//
//  Возвращаемое значение:
//   Структура со следующими ключи:
//     * ИмяВременногоКаталогаСообщенийОбмена - полное имя каталога обмена, в которое было загружено сообщение обмена.
//     * ИмяФайлаСообщенияОбмена              - полное имя файла сообщения обмена.
//     * ИдентификаторФайлаПакетаДанных       - дата изменения файла сообщения обмена.
//
Функция ПолучитьСообщениеОбменаВоВременныйКаталогИзИнформационнойБазыКорреспондентаЧерезВебСервисЗавершениеДлительнойОперации(
							Отказ,
							УзелИнформационнойБазы,
							ИдентификаторФайла,
							Знач ПараметрыАутентификации = Неопределено) Экспорт
	
	// Возвращаемое значение функции.
	Результат = Новый Структура;
	Результат.Вставить("ИмяВременногоКаталогаСообщенийОбмена", "");
	Результат.Вставить("ИмяФайлаСообщенияОбмена",              "");
	Результат.Вставить("ИдентификаторФайлаПакетаДанных",       Неопределено);
	
	// Параметры, которые будут определены в функции.
	ИмяКаталогаСообщенияОбмена = "";
	ИмяФайлаСообщенияОбмена = "";
	ДатаФайлаСообщенияОбмена = Дата('00010101');
	СтрокаСообщенияОбОшибке = "";
	
	Попытка
		
		ИмяФайлаИзСервисаПередачиФайлов = ПолучитьФайлИзХранилищаВСервисе(Новый УникальныйИдентификатор(ИдентификаторФайла), УзелИнформационнойБазы,, ПараметрыАутентификации);
	Исключение
		
		Отказ = Истина;
		Сообщение = НСтр("ru = 'Возникли ошибки при получении сообщения обмена из сервиса передачи файлов: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СтруктураНастроекОбмена = Новый Структура("КлючСообщенияЖурналаРегистрации");
		СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		ЗаписьЖурналаРегистрацииОбменаДанными(Сообщение, СтруктураНастроекОбмена, Истина);
		
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		ИмяКаталогаСообщенияОбмена = СоздатьВременныйКаталогСообщенийОбмена();
	Исключение
		Отказ = Истина;
		Сообщение = НСтр("ru = 'При получении сообщения обмена возникли ошибки: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СтруктураНастроекОбмена = Новый Структура("КлючСообщенияЖурналаРегистрации");
		СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		ЗаписьЖурналаРегистрацииОбменаДанными(Сообщение, СтруктураНастроекОбмена, Истина);
		
		Возврат Результат;
	КонецПопытки;
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
	ТекущийУзелПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена(ИмяПланаОбмена);
	
	ШаблонИмениФайлаСообщения = ПолучитьШаблонИмениФайлаСообщения(ТекущийУзелПланаОбмена, УзелИнформационнойБазы, Ложь);
	
	ИмяФайлаСообщенияОбмена = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ИмяКаталогаСообщенияОбмена, ШаблонИмениФайлаСообщения + ".xml");
	
	ПереместитьФайл(ИмяФайлаИзСервисаПередачиФайлов, ИмяФайлаСообщенияОбмена);
	
	ФайлСообщенияОбмена = Новый Файл(ИмяФайлаСообщенияОбмена);
	Если ФайлСообщенияОбмена.Существует() Тогда
		ДатаФайлаСообщенияОбмена = ФайлСообщенияОбмена.ПолучитьВремяИзменения();
	КонецЕсли;
	
	Результат.ИмяВременногоКаталогаСообщенийОбмена = ИмяКаталогаСообщенияОбмена;
	Результат.ИмяФайлаСообщенияОбмена              = ИмяФайлаСообщенияОбмена;
	Результат.ИдентификаторФайлаПакетаДанных       = ДатаФайлаСообщенияОбмена;
	
	Возврат Результат;
КонецФункции

// Выполняет получение файла сообщения обмена из базы-корреспондента через веб-сервис.
// Выполняет загрузку полученного файла сообщения обмена в эту базу.
//
// Параметры:
//  Отказ                   - Булево - флаг отказа; поднимается в случае возникновения ошибки.
//  УзелИнформационнойБазы  - ПланОбменаСсылка - узел плана обмена, для которого выполняется получение сообщения обмена.
//  ИдентификаторФайла      - УникальныйИдентификатор - Идентификатор файла.
//  ДатаНачалаОперации      - Дата - Дата начала загрузки.
//  ПараметрыАутентификации - Структура. Содержит параметры аутентификации на веб-сервисе (Пользователь, Пароль).
//
Процедура ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЗавершениеДлительнойОперации(
															Отказ,
															Знач УзелИнформационнойБазы,
															Знач ИдентификаторФайла,
															Знач ДатаНачалаОперации,
															Знач ПараметрыАутентификации = Неопределено,
															ВыдаватьОшибку = Ложь) Экспорт
	
	ПроверитьВозможностьВыполненияОбменов();
	
	ПроверитьИспользованиеОбменаДанными();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ФайлСообщенияОбмена = ПолучитьФайлИзХранилищаВСервисе(Новый УникальныйИдентификатор(ИдентификаторФайла), УзелИнформационнойБазы,, ПараметрыАутентификации);
	Исключение
		ЗафиксироватьЗавершениеОбменаСОшибкой(УзелИнформационнойБазы,
			Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
			ДатаНачалаОперации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Если ВыдаватьОшибку Тогда
			ВызватьИсключение;
		Иначе
			Отказ = Истина;
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	// Загрузка файла сообщения обмена в эту базу.
	ПараметрыОбменаДанными = ПараметрыОбменаДаннымиЧерезФайлИлиСтроку();
	
	ПараметрыОбменаДанными.УзелИнформационнойБазы        = УзелИнформационнойБазы;
	ПараметрыОбменаДанными.ПолноеИмяФайлаСообщенияОбмена = ФайлСообщенияОбмена;
	ПараметрыОбменаДанными.ДействиеПриОбмене             = Перечисления.ДействияПриОбмене.ЗагрузкаДанных;
	ПараметрыОбменаДанными.ДатаНачалаОперации            = ДатаНачалаОперации;
	
	Попытка
		ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЧерезФайлИлиСтроку(ПараметрыОбменаДанными);
	Исключение
		ЗафиксироватьЗавершениеОбменаСОшибкой(УзелИнформационнойБазы,
			Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
			ДатаНачалаОперации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Если ВыдаватьОшибку Тогда
			ВызватьИсключение;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(ФайлСообщенияОбмена);
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииОбменДанными(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Выполняет удаление файлов сообщений обмена, которые не были удалены из-за сбоев в работе системы.
// Удалению подлежат файлы с датой размещения более суток от текущей универсальной даты.
// Анализируется РС.СообщенияОбменаДанными и РС.СообщенияОбменаДаннымиОбластейДанных.
//
// Параметры:
// Нет.
//
Процедура УдалитьНеактуальныеСообщенияОбмена() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УдалениеНеактуальнойИнформацииСинхронизации);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВозможностьАдминистрированияОбменов();
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Удаляем неактуальные сообщения обмена, отмеченные в РС.СообщенияОбменаДанными.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СообщенияОбменаДанными.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	СообщенияОбменаДанными.ИмяФайлаСообщения КАК ИмяФайла
	|ИЗ
	|	РегистрСведений.СообщенияОбменаДанными КАК СообщенияОбменаДанными
	|ГДЕ
	|	СообщенияОбменаДанными.ДатаЗакладкиСообщения < &ДатаАктуальности";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяУниверсальнаяДата() - 60 * 60 * 24);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПолноеИмяФайлаСообщения = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременногоХранилищаФайлов(), Выборка.ИмяФайла);
		
		ФайлСообщения = Новый Файл(ПолноеИмяФайлаСообщения);
		
		Если ФайлСообщения.Существует() Тогда
			
			Попытка
				УдалитьФайлы(ФайлСообщения.ПолноеИмя);
			Исключение
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииОбменДанными(),
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		// Удаляем информацию о файле сообщения обмена из хранилища.
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("ИдентификаторСообщения", Строка(Выборка.ИдентификаторСообщения));
		РегистрыСведений.СообщенияОбменаДанными.УдалитьЗапись(СтруктураЗаписи);
		
	КонецЦикла;
	
	// Удаляем неактуальные сообщения обмена, отмеченные в РС.СообщенияОбменаДаннымиОбластейДанных.
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		МодульОбменДаннымиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		МодульОбменДаннымиВМоделиСервиса.ПриУдаленииНеактуальныхСообщенийОбмена();
	КонецЕсли;
	
КонецПроцедуры

Функция КоличествоЭлементовВТранзакцииВыполняемогоДействия(Действие)
	
	Если Действие = Перечисления.ДействияПриОбмене.ВыгрузкаДанных Тогда
		КоличествоЭлементов = КоличествоЭлементовВТранзакцииВыгрузкиДанных();
	Иначе
		КоличествоЭлементов = КоличествоЭлементовВТранзакцииЗагрузкиДанных();
	КонецЕсли;
	
	Возврат КоличествоЭлементов;
	
КонецФункции

#КонецОбласти

#Область ДляРаботыЧерезВнешнееСоединение

Процедура ВыполнитьВыгрузкуДляУзлаИнформационнойБазыВоВременноеХранилище(Знач ИмяПланаОбмена, Знач КодУзлаИнформационнойБазы, Адрес) Экспорт
	
	ПолноеИмяФайлаСообщенияОбмена = ПолучитьИмяВременногоФайла("xml");
	
	ПараметрыОбменаДанными = ПараметрыОбменаДаннымиЧерезФайлИлиСтроку();
	
	ПараметрыОбменаДанными.ПолноеИмяФайлаСообщенияОбмена = ПолноеИмяФайлаСообщенияОбмена;
	ПараметрыОбменаДанными.ДействиеПриОбмене             = Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
	ПараметрыОбменаДанными.ИмяПланаОбмена                = ИмяПланаОбмена;
	ПараметрыОбменаДанными.КодУзлаИнформационнойБазы     = КодУзлаИнформационнойБазы;
	
	ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЧерезФайлИлиСтроку(ПараметрыОбменаДанными);
	
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяФайлаСообщенияОбмена));
	
	УдалитьФайлы(ПолноеИмяФайлаСообщенияОбмена);
	
КонецПроцедуры

Процедура ВыполнитьВыгрузкуДляУзлаИнформационнойБазыВСервисПередачиФайлов(Знач ИмяПланаОбмена,
	Знач КодУзлаИнформационнойБазы,
	Знач ИдентификаторФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяФайлаСообщения = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
		КаталогВременногоХранилищаФайлов(),
		УникальноеИмяФайлаСообщенияОбмена());
	
	ПараметрыОбменаДанными = ПараметрыОбменаДаннымиЧерезФайлИлиСтроку();
	
	ПараметрыОбменаДанными.ПолноеИмяФайлаСообщенияОбмена = ИмяФайлаСообщения;
	ПараметрыОбменаДанными.ДействиеПриОбмене             = Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
	ПараметрыОбменаДанными.ИмяПланаОбмена                = ИмяПланаОбмена;
	ПараметрыОбменаДанными.КодУзлаИнформационнойБазы     = КодУзлаИнформационнойБазы;
	
	ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЧерезФайлИлиСтроку(ПараметрыОбменаДанными);
	
	ПоместитьФайлВХранилище(ИмяФайлаСообщения, ИдентификаторФайла);
	
КонецПроцедуры

Процедура ВыполнитьВыгрузкуДляУзлаИнформационнойБазыЧерезФайл(Знач ИмяПланаОбмена,
	Знач КодУзлаИнформационнойБазы,
	Знач ПолноеИмяФайлаСообщенияОбмена) Экспорт
	
	ПараметрыОбменаДанными = ПараметрыОбменаДаннымиЧерезФайлИлиСтроку();
	
	ПараметрыОбменаДанными.ПолноеИмяФайлаСообщенияОбмена = ПолноеИмяФайлаСообщенияОбмена;
	ПараметрыОбменаДанными.ДействиеПриОбмене             = Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
	ПараметрыОбменаДанными.ИмяПланаОбмена                = ИмяПланаОбмена;
	ПараметрыОбменаДанными.КодУзлаИнформационнойБазы     = КодУзлаИнформационнойБазы;
	
	ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЧерезФайлИлиСтроку(ПараметрыОбменаДанными);
	
КонецПроцедуры

Процедура ВыполнитьВыгрузкуДляУзлаИнформационнойБазыЧерезСтроку(Знач ИмяПланаОбмена, Знач КодУзлаИнформационнойБазы, СообщениеОбмена) Экспорт
	
	ПараметрыОбменаДанными = ПараметрыОбменаДаннымиЧерезФайлИлиСтроку();
	
	ПараметрыОбменаДанными.ДействиеПриОбмене             = Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
	ПараметрыОбменаДанными.ИмяПланаОбмена                = ИмяПланаОбмена;
	ПараметрыОбменаДанными.КодУзлаИнформационнойБазы     = КодУзлаИнформационнойБазы;
	ПараметрыОбменаДанными.СообщениеОбмена               = СообщениеОбмена;
	
	ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЧерезФайлИлиСтроку(ПараметрыОбменаДанными);
	
	СообщениеОбмена = ПараметрыОбменаДанными.СообщениеОбмена;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуДляУзлаИнформационнойБазыЧерезСтроку(Знач ИмяПланаОбмена, Знач КодУзлаИнформационнойБазы, СообщениеОбмена) Экспорт
	
	ПараметрыОбменаДанными = ПараметрыОбменаДаннымиЧерезФайлИлиСтроку();
	
	ПараметрыОбменаДанными.ДействиеПриОбмене             = Перечисления.ДействияПриОбмене.ЗагрузкаДанных;
	ПараметрыОбменаДанными.ИмяПланаОбмена                = ИмяПланаОбмена;
	ПараметрыОбменаДанными.КодУзлаИнформационнойБазы     = КодУзлаИнформационнойБазы;
	ПараметрыОбменаДанными.СообщениеОбмена               = СообщениеОбмена;
	
	ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЧерезФайлИлиСтроку(ПараметрыОбменаДанными);
	
	СообщениеОбмена = ПараметрыОбменаДанными.СообщениеОбмена;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуДляУзлаИнформационнойБазыИзСервисаПередачиФайлов(Знач ИмяПланаОбмена,
	Знач КодУзлаИнформационнойБазы,
	Знач ИдентификаторФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяВременногоФайла = ПолучитьФайлИзХранилища(ИдентификаторФайла);
	
	ПараметрыОбменаДанными = ПараметрыОбменаДаннымиЧерезФайлИлиСтроку();
	
	ПараметрыОбменаДанными.ПолноеИмяФайлаСообщенияОбмена = ИмяВременногоФайла;
	ПараметрыОбменаДанными.ДействиеПриОбмене             = Перечисления.ДействияПриОбмене.ЗагрузкаДанных;
	ПараметрыОбменаДанными.ИмяПланаОбмена                = ИмяПланаОбмена;
	ПараметрыОбменаДанными.КодУзлаИнформационнойБазы     = КодУзлаИнформационнойБазы;
	
	Попытка
		ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЧерезФайлИлиСтроку(ПараметрыОбменаДанными);
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		УдалитьФайлы(ИмяВременногоФайла);
		ВызватьИсключение ПредставлениеОшибки;
	КонецПопытки;
	
	УдалитьФайлы(ИмяВременногоФайла);
КонецПроцедуры

Функция ПараметрыОбменаДаннымиЧерезФайлИлиСтроку() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("УзелИнформационнойБазы");
	СтруктураПараметров.Вставить("ПолноеИмяФайлаСообщенияОбмена", "");
	СтруктураПараметров.Вставить("ДействиеПриОбмене");
	СтруктураПараметров.Вставить("ИмяПланаОбмена", "");
	СтруктураПараметров.Вставить("КодУзлаИнформационнойБазы", "");
	СтруктураПараметров.Вставить("СообщениеОбмена", "");
	СтруктураПараметров.Вставить("ДатаНачалаОперации", "");
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЧерезФайлИлиСтроку(ПараметрыОбмена) Экспорт
	
	ПроверитьВозможностьВыполненияОбменов();
	
	ПроверитьИспользованиеОбменаДанными();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыОбмена.УзелИнформационнойБазы = Неопределено Тогда
		
		ИмяПланаОбмена = ПараметрыОбмена.ИмяПланаОбмена;
		КодУзлаИнформационнойБазы = ПараметрыОбмена.КодУзлаИнформационнойБазы;
		
		ПараметрыОбмена.УзелИнформационнойБазы = ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(КодУзлаИнформационнойБазы);
			
		Если ПараметрыОбмена.УзелИнформационнойБазы.Пустая()
			И ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(ИмяПланаОбмена) Тогда
			ОшибкаПерехода = Ложь;
			НастройкаСинхронизацииЧерезУФ = ПланыОбмена[ИмяПланаОбмена].ПереходНаСинхронизациюЧерезУниверсальныйФорматИнтернет(
				КодУзлаИнформационнойБазы, ОшибкаПерехода);
			Если ЗначениеЗаполнено(НастройкаСинхронизацииЧерезУФ) Тогда
				ПараметрыОбмена.УзелИнформационнойБазы = НастройкаСинхронизацииЧерезУФ;
			ИначеЕсли ОшибкаПерехода Тогда
				СтрокаСообщенияОбОшибке = НСтр("ru = 'Не удалось выполнить переход на синхронизацию данных через универсальный формат.'");
				ВызватьИсключение СтрокаСообщенияОбОшибке;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыОбмена.УзелИнформационнойБазы.Пустая() Тогда
			СтрокаСообщенияОбОшибке = НСтр("ru = 'Узел плана обмена %1 с кодом %2 не найден.'");
			СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ИмяПланаОбмена, КодУзлаИнформационнойБазы);
			ВызватьИсключение СтрокаСообщенияОбОшибке;
		КонецЕсли;
		
	КонецЕсли;
	
	// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
	СтруктураНастроекОбмена = ОбменДаннымиПовтИсп.ПолучитьСтруктуруНастроекОбменаДляУзлаИнформационнойБазы(
		ПараметрыОбмена.УзелИнформационнойБазы, ПараметрыОбмена.ДействиеПриОбмене, Неопределено, Ложь);
	
	Если СтруктураНастроекОбмена.Отказ Тогда
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Ошибка при инициализации процесса обмена данными.'");
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		ВызватьИсключение СтрокаСообщенияОбОшибке;
	КонецЕсли;
	
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	СтруктураНастроекОбмена.ДатаНачала = ?(ПараметрыОбмена.ДатаНачалаОперации = Неопределено, ТекущаяДатаСеанса(), ПараметрыОбмена.ДатаНачалаОперации);
	
	СтрокаСообщения = НСтр("ru = 'Начало процесса обмена данными для узла %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование);
	ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
	
	Если СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных Тогда
		
		СозданВременныйФайл = Ложь;
		Если ПараметрыОбмена.ПолноеИмяФайлаСообщенияОбмена = ""
			И ПараметрыОбмена.СообщениеОбмена <> "" Тогда
			
			ПараметрыОбмена.ПолноеИмяФайлаСообщенияОбмена = ПолучитьИмяВременногоФайла(".xml");
			ТекстовыйФайл = Новый ТекстовыйДокумент;
			ТекстовыйФайл.УстановитьТекст(ПараметрыОбмена.СообщениеОбмена);
			ТекстовыйФайл.Записать(ПараметрыОбмена.ПолноеИмяФайлаСообщенияОбмена);
			СозданВременныйФайл = Истина;
		КонецЕсли;
		
		ПрочитатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, ПараметрыОбмена.ПолноеИмяФайлаСообщенияОбмена, ПараметрыОбмена.СообщениеОбмена);
		
		// {Обработчик: ПослеЧтенияСообщенияОбмена} Начало
		СтандартнаяОбработка = Истина;
		
		ПослеЧтенияСообщенияОбмена(
					СтруктураНастроекОбмена.УзелИнформационнойБазы,
					ПараметрыОбмена.ПолноеИмяФайлаСообщенияОбмена,
					РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена),
					СтандартнаяОбработка);
		// {Обработчик: ПослеЧтенияСообщенияОбмена} Окончание
		
		Если СозданВременныйФайл Тогда
			
			Попытка
				УдалитьФайлы(ПараметрыОбмена.ПолноеИмяФайлаСообщенияОбмена);
			Исключение
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииОбменДанными(),
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных Тогда
		
		ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, ПараметрыОбмена.ПолноеИмяФайлаСообщенияОбмена, ПараметрыОбмена.СообщениеОбмена);
		
	КонецЕсли;
	
	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	
	Если Не РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
		ВызватьИсключение СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьЗавершениеОбменаЧерезВнешнееСоединение(СтруктураНастроекОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	
КонецПроцедуры

Функция СтруктураНастроекОбменаЧерезВнешнееСоединение(Структура) Экспорт
	
	ПроверитьИспользованиеОбменаДанными();
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелИнформационнойБазы = ПланыОбмена[Структура.ИмяПланаОбмена].НайтиПоКоду(Структура.ТекущийУзелПланаОбменаКод);
	
	ДействиеПриОбмене = Перечисления.ДействияПриОбмене[Структура.ДействиеПриОбменеСтрокой];
	
	СтруктураНастроекОбменаВнешнееСоединение = Новый Структура;
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ИмяПланаОбмена",                   Структура.ИмяПланаОбмена);
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("РежимОтладки",                     Структура.РежимОтладки);
	
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("УзелИнформационнойБазы",             УзелИнформационнойБазы);
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("УзелИнформационнойБазыНаименование", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелИнформационнойБазы, "Наименование"));
	
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("КлючСообщенияЖурналаРегистрации",  ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, ДействиеПриОбмене));
	
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("РезультатВыполненияОбмена",        Неопределено);
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("РезультатВыполненияОбменаСтрокой", "");
	
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ДействиеПриОбмене", ДействиеПриОбмене);
	
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ОтладкаОбработчиковВыгрузки ", Ложь);
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ОтладкаОбработчиковЗагрузки", Ложь);
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ИмяФайлаВнешнейОбработкиОтладкиВыгрузки", "");
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ИмяФайлаВнешнейОбработкиОтладкиЗагрузки", "");
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("РежимПротоколированияОбменаДанными", Ложь);
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ИмяФайлаПротоколаОбмена", "");
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ПродолжитьПриОшибке", Ложь);
	
	УстановитьНастройкиРежимаОтладкиДляСтруктуры(СтруктураНастроекОбменаВнешнееСоединение, Истина);
	
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("КоличествоОбъектовОбработано", 0);
	
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ДатаНачала",    Неопределено);
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ДатаОкончания", Неопределено);
	
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("СообщениеПриОбмене",      "");
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("СтрокаСообщенияОбОшибке", "");
	
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("КоличествоЭлементовВТранзакции", Структура.КоличествоЭлементовВТранзакции);
	
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ЭтоОбменВРИБ", Ложь);
	
	Возврат СтруктураНастроекОбменаВнешнееСоединение;
КонецФункции

Функция ПолучитьПравилаКонвертацииОбъектовЧерезВнешнееСоединение(ИмяПланаОбмена, ПолучатьПравилаКорреспондента = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РегистрыСведений.ПравилаДляОбменаДанными.ПолучитьЗачитанныеПравилаКонвертацииОбъектов(ИмяПланаОбмена, ПолучатьПравилаКорреспондента);
	
КонецФункции

Процедура ВыполнитьДействиеОбменаДляУзлаИнформационнойБазыЧерезWebСервис(УзелИнформационнойБазы, ДействиеПриОбмене, ПараметрыОбмена, Отказ)
	
	ТолькоПараметры = ПараметрыОбмена.ТолькоПараметры;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
	СтруктураНастроекОбмена = ОбменДаннымиПовтИсп.ПолучитьСтруктуруНастроекОбменаДляУзлаИнформационнойБазы(УзелИнформационнойБазы, ДействиеПриОбмене, Перечисления.ВидыТранспортаСообщенийОбмена.WS, Ложь);
	
	Если СтруктураНастроекОбмена.Отказ Тогда
		// Если настройка содержит ошибки, то обмен не производим; статус "Отменено".
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	СтруктураНастроекОбмена.ДатаНачала = ТекущаяДатаСеанса();
	
	СтрокаСообщения = НСтр("ru = 'Начало процесса обмена данными для узла %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование);
	ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
	
	Если СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных Тогда
		
		Если СтруктураНастроекОбмена.ИспользоватьПередачуБольшогоОбъемаДанных Тогда
			
			// {Обработчик: ПередЧтениемСообщенияОбмена} Начало
			ФайлСообщенияОбмена = "";
			СтандартнаяОбработка = Истина;
			
			ПередЧтениемСообщенияОбмена(СтруктураНастроекОбмена.УзелИнформационнойБазы, ФайлСообщенияОбмена, СтандартнаяОбработка);
			// {Обработчик: ПередЧтениемСообщенияОбмена} Окончание
			
			Если СтандартнаяОбработка Тогда
				
				СтрокаСообщенияОбОшибке = "";
				
				// Получаем прокси веб-сервиса для узла информационной базы.
				Прокси = ПолучитьWSПроксиДляУзлаИнформационнойБазы(
					УзелИнформационнойБазы,
					СтрокаСообщенияОбОшибке,
					ПараметрыОбмена.ПараметрыАутентификации);
				
				Если Прокси = Неопределено Тогда
					
					// добавляем запись в ЖР
					ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
					
					// Если настройка содержит ошибки, то обмен не производим; статус "Отменено".
					СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
					ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
				ФайлСообщенияОбмена = "";
				
				Попытка
					
					Прокси.UploadData(СтруктураНастроекОбмена.ИмяПланаОбмена,
						СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод,
						ПараметрыОбмена.ИдентификаторФайла,
						ПараметрыОбмена.ДлительнаяОперация,
						ПараметрыОбмена.ИдентификаторОперации,
						ПараметрыОбмена.ДлительнаяОперацияРазрешена);
					
					Если ПараметрыОбмена.ДлительнаяОперация Тогда
						ЗаписьЖурналаРегистрацииОбменаДанными(НСтр("ru = 'Ожидание получения данных от базы-корреспондента...'",
							ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), СтруктураНастроекОбмена);
						Возврат;
					КонецЕсли;
					
					ФайлСообщенияОбмена = ПолучитьФайлИзХранилищаВСервисе(
						Новый УникальныйИдентификатор(ПараметрыОбмена.ИдентификаторФайла),
						УзелИнформационнойБазы,,
						ПараметрыОбмена.ПараметрыАутентификации);
				Исключение
					ЗаписьЖурналаРегистрацииОбменаДанными(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СтруктураНастроекОбмена, Истина);
					СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
					Отказ = Истина;
				КонецПопытки;
				
			КонецЕсли;
			
			Если Не Отказ Тогда
				
				ПрочитатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, ФайлСообщенияОбмена,, ТолькоПараметры);
				
			КонецЕсли;
			
			// {Обработчик: ПослеЧтенияСообщенияОбмена} Начало
			СтандартнаяОбработка = Истина;
			
			ПослеЧтенияСообщенияОбмена(
						СтруктураНастроекОбмена.УзелИнформационнойБазы,
						ФайлСообщенияОбмена,
						РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена),
						СтандартнаяОбработка,
						Не ТолькоПараметры);
			// {Обработчик: ПослеЧтенияСообщенияОбмена} Окончание
			
			Если СтандартнаяОбработка Тогда
				
				Попытка
					Если Не ПустаяСтрока(ФайлСообщенияОбмена) И ТипЗнч(ПолучитьСообщениеОбменаДаннымиИзГлавногоУзла()) <> Тип("Структура") Тогда
						УдалитьФайлы(ФайлСообщенияОбмена);
					КонецЕсли;
				Исключение
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииОбменДанными(),
						УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
			КонецЕсли;
			
		Иначе
			
			СтрокаСообщенияОбОшибке = "";
			
			// Получаем прокси веб-сервиса для узла информационной базы.
			Прокси = ПолучитьWSПроксиДляУзлаИнформационнойБазы(
				УзелИнформационнойБазы,
				СтрокаСообщенияОбОшибке,
				ПараметрыОбмена.ПараметрыАутентификации);
			
			Если Прокси = Неопределено Тогда
				
				// добавляем запись в ЖР
				ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
				
				// Если настройка содержит ошибки, то обмен не производим; статус "Отменено".
				СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
				ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			ХранилищеСообщенияОбмена = Неопределено;
			
			Попытка
				Прокси.Upload(СтруктураНастроекОбмена.ИмяПланаОбмена, СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод, ХранилищеСообщенияОбмена);
				
				ПрочитатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена,, ХранилищеСообщенияОбмена.Получить());
				
			Исключение
				ЗаписьЖурналаРегистрацииОбменаДанными(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СтруктураНастроекОбмена, Истина);
				СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			КонецПопытки;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных Тогда
		
		СтрокаСообщенияОбОшибке = "";
		
		// Получаем прокси веб-сервиса для узла информационной базы.
		Прокси = ПолучитьWSПроксиДляУзлаИнформационнойБазы(
			УзелИнформационнойБазы,
			СтрокаСообщенияОбОшибке,
			ПараметрыОбмена.ПараметрыАутентификации);
		
		Если Прокси = Неопределено Тогда
			
			// добавляем запись в ЖР
			ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
			
			// Если настройка содержит ошибки, то обмен не производим; статус "Отменено".
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
			ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если СтруктураНастроекОбмена.ИспользоватьПередачуБольшогоОбъемаДанных Тогда
			
			ФайлСообщенияОбмена = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременногоХранилищаФайлов(), УникальноеИмяФайлаСообщенияОбмена());
			
			Попытка
				ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, ФайлСообщенияОбмена);
			Исключение
				ЗаписьЖурналаРегистрацииОбменаДанными(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СтруктураНастроекОбмена, Истина);
				СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
				Отказ = Истина;
			КонецПопытки;
			
			// Отправка сообщения обмена только в случае успешной выгрузки данных.
			Если РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) И НЕ Отказ Тогда
				
				Попытка
					
					ИдентификаторФайлаСтрокой = Строка(ПоместитьФайлВХранилищеВСервисе(
						ФайлСообщенияОбмена, УзелИнформационнойБазы,, ПараметрыОбмена.ПараметрыАутентификации));
					
					Попытка
						УдалитьФайлы(ФайлСообщенияОбмена);
					Исключение
						ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииОбменДанными(),
							УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
					
					Прокси.DownloadData(СтруктураНастроекОбмена.ИмяПланаОбмена,
						СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод,
						ИдентификаторФайлаСтрокой,
						ПараметрыОбмена.ДлительнаяОперация,
						ПараметрыОбмена.ИдентификаторОперации,
						ПараметрыОбмена.ДлительнаяОперацияРазрешена);
					
					Если ПараметрыОбмена.ДлительнаяОперация Тогда
						ЗаписьЖурналаРегистрацииОбменаДанными(НСтр("ru = 'Ожидание загрузки данных в базе-корреспонденте...'",
							ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), СтруктураНастроекОбмена);
						Возврат;
					КонецЕсли;
					
				Исключение
					ЗаписьЖурналаРегистрацииОбменаДанными(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СтруктураНастроекОбмена, Истина);
					СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
					Отказ = Истина;
				КонецПопытки;
				
			КонецЕсли;
			
			Попытка
				УдалитьФайлы(ФайлСообщенияОбмена);
			Исключение
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииОбменДанными(),
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		Иначе
			
			СообщениеОбмена = "";
			
			Попытка
				
				ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена,, СообщениеОбмена);
				
				// Отправка сообщения обмена только в случае успешной выгрузки данных.
				Если РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
					
					Прокси.Download(СтруктураНастроекОбмена.ИмяПланаОбмена, СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод, Новый ХранилищеЗначения(СообщениеОбмена, Новый СжатиеДанных(9)));
					
				КонецЕсли;
				
			Исключение
				ЗаписьЖурналаРегистрацииОбменаДанными(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СтруктураНастроекОбмена, Истина);
				СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	
	Если Не РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДействиеОбменаДляУзлаИнформационнойБазыПоВнешнемуСоединению(Отказ, УзелИнформационнойБазы,
	ДействиеПриОбмене,
	КоличествоЭлементовВТранзакции)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
	СтруктураНастроекОбмена = ПолучитьСтруктуруНастроекОбменаДляВнешнегоСоединения(
		УзелИнформационнойБазы,
		ДействиеПриОбмене,
		КоличествоЭлементовВТранзакции);
	
	СтруктураНастроекОбмена.ДатаНачала = ТекущаяДатаСеанса();
	
	ЗаписьЖурналаРегистрацииНачалаОбменаДанными(СтруктураНастроекОбмена);
	
	Если СтруктураНастроекОбмена.Отказ Тогда
		// Если настройка содержит ошибки, то обмен не производим; статус "Отменено".
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтрокаСообщенияОбОшибке = "";
	
	// Получаем внешнее соединение для узла информационной базы.
	ВнешнееСоединение = ОбменДаннымиПовтИсп.ПолучитьВнешнееСоединениеДляУзлаИнформационнойБазы(
		УзелИнформационнойБазы,
		СтрокаСообщенияОбОшибке);
	
	Если ВнешнееСоединение = Неопределено Тогда
		
		// добавляем запись в ЖР
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		// Если настройка содержит ошибки, то обмен не производим; статус "Отменено".
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Получаем версию удаленной базы.
	ВерсияБСППоВнешнемуСоединению = ВнешнееСоединение.СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	ОбменСБСП20 = ОбщегоНазначенияКлиентСервер.СравнитьВерсии("2.1.1.10", ВерсияБСППоВнешнемуСоединению) > 0;
	
	// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ (ВНЕШНЕЕ СОЕДИНЕНИЕ)
	Структура = Новый Структура("ИмяПланаОбмена, ТекущийУзелПланаОбменаКод, КоличествоЭлементовВТранзакции");
	ЗаполнитьЗначенияСвойств(Структура, СтруктураНастроекОбмена);
	
	// Выполняем реверс значений перечисления.
	ДействиеПриОбменеСтрокой = ?(ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
								ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ДействияПриОбмене.ЗагрузкаДанных),
								ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ДействияПриОбмене.ВыгрузкаДанных));
	//
	
	Структура.Вставить("ДействиеПриОбменеСтрокой", ДействиеПриОбменеСтрокой);
	Структура.Вставить("РежимОтладки", Ложь);
	Структура.Вставить("ИмяФайлаПротоколаОбмена", "");
	
	ЭтоПланОбменаXDTO = ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(УзелИнформационнойБазы);
	Если ЭтоПланОбменаXDTO Тогда
		// Проверка наличия узла в базе-корреспонденте.
		ПланОбменаМенеджер = ВнешнееСоединение.ПланыОбмена[Структура.ИмяПланаОбмена];
		ПланОбменаСсылка = ПланОбменаМенеджер.НайтиПоКоду(Структура.ТекущийУзелПланаОбменаКод);
		Если НЕ ЗначениеЗаполнено(ПланОбменаСсылка.Code) Тогда
			// При необходимости запуск перехода на синхронизацию данных через универсальный формат.
			ТекстСообщения = НСтр("ru = 'Необходим переход на синхронизацию данных через универсальный формат в базе-корреспонденте.'");
			ЗаписьЖурналаРегистрацииОбменаДанными(ТекстСообщения, СтруктураНастроекОбмена, Ложь);

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Код", Структура.ТекущийУзелПланаОбменаКод);
			СтруктураПараметров.Вставить("ВариантНастройки", 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелИнформационнойБазы, "ВариантНастройки"));
			СтруктураПараметров.Вставить("Ошибка", Ложь);
			СтруктураПараметров.Вставить("СообщениеОбОшибке", "");
			
			ЕстьОшибки = Ложь;
			СтрокаСообщенияОбОшибке = "";
			РезультатПерехода = 
				ПланОбменаМенеджер.ПереходНаСинхронизациюЧерезУниверсальныйФорматВнешнееСоединение(СтруктураПараметров);
			Если СтруктураПараметров.Ошибка Тогда
				ЕстьОшибки = Истина;
				НСтрока = НСтр("ru = 'Ошибка при переходе на синхронизацию данных через универсальный формат: %1. Обмен отменен.'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, 
					СтруктураПараметров.СообщениеОбОшибке);
			ИначеЕсли РезультатПерехода = Неопределено Тогда
				ЕстьОшибки = Истина;
				СтрокаСообщенияОбОшибке = НСтр("ru = 'Переход на синхронизацию данных через универсальный формат не выполнен'");
			КонецЕсли;
			Если ЕстьОшибки Тогда
				// Синхронизация данных невозможна.
				ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
				СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
				ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
				Отказ = Истина;
				Возврат;
			Иначе
				Сообщение = НСтр("ru = 'Переход на синхронизацию данных через универсальный формат завершен успешно.'");
				ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		СтруктураНастроекОбменаВнешнееСоединение = ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.СтруктураНастроекОбмена(Структура);
	Исключение
		// Добавляем запись в ЖР.
		ЗаписьЖурналаРегистрацииОбменаДанными(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СтруктураНастроекОбмена, Истина);
		
		// Если настройка содержит ошибки, то обмен не производим; статус "Отменено".
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	СтруктураНастроекОбменаВнешнееСоединение.ДатаНачала = ВнешнееСоединение.ТекущаяДатаСеанса();
	
	ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ЗаписьЖурналаРегистрацииНачалаОбменаДанными(СтруктураНастроекОбменаВнешнееСоединение);
	// ОБМЕН ДАННЫМИ
	Если СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных Тогда
		Если НЕ ЭтоПланОбменаXDTO Тогда
			// Получаем правила обмена из второй ИБ.
			ПравилаКонвертацииОбъектов = ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьПравилаКонвертацииОбъектов(СтруктураНастроекОбменаВнешнееСоединение.ИмяПланаОбмена);
			
			Если ПравилаКонвертацииОбъектов = Неопределено Тогда
				
				// Правила обмена должны быть указаны.
				НСтрока = НСтр("ru = 'Не заданы правила конвертации во второй информационной базе для плана обмена %1. Обмен отменен.'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, СтруктураНастроекОбменаВнешнееСоединение.ИмяПланаОбмена);
				ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
				ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Обработка для загрузки данных.
		ОбработкаДляЗагрузкиДанных = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
		ОбработкаДляЗагрузкиДанных.ИмяФайлаОбмена = "";
		ОбработкаДляЗагрузкиДанных.КоличествоОбъектовНаТранзакцию = СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции;
		ОбработкаДляЗагрузкиДанных.ИспользоватьТранзакции = (ОбработкаДляЗагрузкиДанных.КоличествоОбъектовНаТранзакцию <> 1);
		Если НЕ ЭтоПланОбменаXDTO Тогда
			ОбработкаДляЗагрузкиДанных.ЗагрузкаДанныхВыполняетсяЧерезВнешнееСоединение = Истина;
		КонецЕсли;
		
		// Получаем инициализированную обработку для выгрузки данных.
		Если ЭтоПланОбменаXDTO Тогда
			ОбработкаОбменаДаннымиВнешнееСоединение = ВнешнееСоединение.Обработки.КонвертацияОбъектовXDTO.Создать();
			ОбработкаОбменаДаннымиВнешнееСоединение.РежимОбмена = "Выгрузка";
		Иначе
			ОбработкаОбменаДаннымиВнешнееСоединение = ВнешнееСоединение.Обработки.КонвертацияОбъектовИнформационныхБаз.Создать();
			ОбработкаОбменаДаннымиВнешнееСоединение.СохраненныеНастройки = ПравилаКонвертацииОбъектов;
			ОбработкаОбменаДаннымиВнешнееСоединение.ЗагрузкаДанныхВыполняетсяВоВнешнемСоединении = Ложь;
			ОбработкаОбменаДаннымиВнешнееСоединение.РежимОбмена = "Выгрузка";
			Попытка
				ОбработкаОбменаДаннымиВнешнееСоединение.ВосстановитьПравилаИзВнутреннегоФормата();
			Исключение
				ЗаписьЖурналаРегистрацииОбменаДанными(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Возникла ошибка во второй информационной базе: %1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())), СтруктураНастроекОбмена, Истина);
				
				// Если настройка содержит ошибки, то обмен не производим; статус "Отменено".
				СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
				ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
				Отказ = Истина;
				Возврат;
			КонецПопытки;
			// Задаем узлы обмена.
			ОбработкаОбменаДаннымиВнешнееСоединение.УзелДляФоновогоОбмена = Неопределено;
			ОбработкаОбменаДаннымиВнешнееСоединение.НеВыгружатьОбъектыПоСсылкам = Истина;
			ОбработкаОбменаДаннымиВнешнееСоединение.ИмяФайлаПравилОбмена = "1";
			ОбработкаОбменаДаннымиВнешнееСоединение.ВнешнееСоединение = Неопределено;
		КонецЕсли;

		// Задаем узлы обмена (общие для любого вида обмена).
		ОбработкаОбменаДаннымиВнешнееСоединение.УзелДляОбмена = СтруктураНастроекОбменаВнешнееСоединение.УзелИнформационнойБазы;
		
		УстановитьОбщиеПараметрыДляОбработкиОбменаДанными(ОбработкаОбменаДаннымиВнешнееСоединение, СтруктураНастроекОбменаВнешнееСоединение, ОбменСБСП20);
		
		Если НЕ ЭтоПланОбменаXDTO Тогда
			ВерсияКонфигурацииПриемника = "";
			ВерсияИсточникаИзПравил = "";
			ТекстСообщения = "";
			ПараметрыВнешнегоСоединения = Новый Структура;
			ПараметрыВнешнегоСоединения.Вставить("ВнешнееСоединение", ВнешнееСоединение);
			ПараметрыВнешнегоСоединения.Вставить("ВерсияБСППоВнешнемуСоединению", ВерсияБСППоВнешнемуСоединению);
			ПараметрыВнешнегоСоединения.Вставить("КлючСообщенияЖурналаРегистрации", СтруктураНастроекОбменаВнешнееСоединение.КлючСообщенияЖурналаРегистрации);
			ПараметрыВнешнегоСоединения.Вставить("УзелИнформационнойБазы", СтруктураНастроекОбменаВнешнееСоединение.УзелИнформационнойБазы);
			
			ПравилаКонвертацииОбъектов.Получить().Конвертация.Свойство("ВерсияКонфигурацииИсточника", ВерсияКонфигурацииПриемника);
			ОбработкаДляЗагрузкиДанных.СохраненныеНастройки.Получить().Конвертация.Свойство("ВерсияКонфигурацииИсточника", ВерсияИсточникаИзПравил);
			
			Если РазличаютсяВерсииКорреспондента(СтруктураНастроекОбмена.ИмяПланаОбмена, СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации,
				ВерсияИсточникаИзПравил, ВерсияКонфигурацииПриемника, ТекстСообщения, ПараметрыВнешнегоСоединения) Тогда
				
				ОбработкаОбменаДаннымиВнешнееСоединение = Неопределено;
				Возврат;
				
			КонецЕсли;
		КонецЕсли;
		// ВЫГРУЗКА (КОРРЕСПОНДЕНТ) - ЗАГРУЗКА (ЭТА БАЗА)
		ОбработкаОбменаДаннымиВнешнееСоединение.ВыполнитьВыгрузкуДанных(ОбработкаДляЗагрузкиДанных);
		
		// Фиксируем состояние выполнения обмена данными.
		СтруктураНастроекОбмена.РезультатВыполненияОбмена    = ОбработкаДляЗагрузкиДанных.РезультатВыполненияОбмена();
		СтруктураНастроекОбмена.КоличествоОбъектовОбработано = ОбработкаДляЗагрузкиДанных.СчетчикЗагруженныхОбъектов();
		СтруктураНастроекОбменаВнешнееСоединение.РезультатВыполненияОбменаСтрокой = ОбработкаОбменаДаннымиВнешнееСоединение.РезультатВыполненияОбменаСтрокой();
		СтруктураНастроекОбменаВнешнееСоединение.КоличествоОбъектовОбработано     = ОбработкаОбменаДаннымиВнешнееСоединение.СчетчикВыгруженныхОбъектов();
		СтруктураНастроекОбмена.СообщениеПриОбмене           = ОбработкаДляЗагрузкиДанных.КомментарийПриЗагрузкеДанных;
		СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке      = ОбработкаДляЗагрузкиДанных.СтрокаСообщенияОбОшибке();
		СтруктураНастроекОбменаВнешнееСоединение.СообщениеПриОбмене               = ОбработкаОбменаДаннымиВнешнееСоединение.КомментарийПриВыгрузкеДанных;
		СтруктураНастроекОбменаВнешнееСоединение.СтрокаСообщенияОбОшибке          = ОбработкаОбменаДаннымиВнешнееСоединение.СтрокаСообщенияОбОшибке();
		
		ОбработкаОбменаДаннымиВнешнееСоединение = Неопределено;
		
	ИначеЕсли СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных Тогда
		
		// Обработка для загрузки данных.
		Если ЭтоПланОбменаXDTO Тогда
			ОбработкаДляЗагрузкиДанных = ВнешнееСоединение.Обработки.КонвертацияОбъектовXDTO.Создать();
		Иначе
			ОбработкаДляЗагрузкиДанных = ВнешнееСоединение.Обработки.КонвертацияОбъектовИнформационныхБаз.Создать();
			ОбработкаДляЗагрузкиДанных.ЗагрузкаДанныхВыполняетсяЧерезВнешнееСоединение = Истина;
		КонецЕсли;
		ОбработкаДляЗагрузкиДанных.РежимОбмена = "Загрузка";
		ОбработкаДляЗагрузкиДанных.УзелОбменаЗагрузкаДанных = СтруктураНастроекОбменаВнешнееСоединение.УзелИнформационнойБазы;
		
		УстановитьОбщиеПараметрыДляОбработкиОбменаДанными(ОбработкаДляЗагрузкиДанных, СтруктураНастроекОбменаВнешнееСоединение, ОбменСБСП20);
		
		ОбработкаДляЗагрузкиДанных.КоличествоОбъектовНаТранзакцию = СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции;
		ОбработкаДляЗагрузкиДанных.ИспользоватьТранзакции = (ОбработкаДляЗагрузкиДанных.КоличествоОбъектовНаТранзакцию <> 1);
		
		// Получаем инициализированную обработку для выгрузки данных.
		ОбработкаОбменаДаннымиXML = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
		ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = "";
		Если НЕ ЭтоПланОбменаXDTO Тогда
			ОбработкаОбменаДаннымиXML.ВнешнееСоединение = ВнешнееСоединение;
			ОбработкаОбменаДаннымиXML.ЗагрузкаДанныхВыполняетсяВоВнешнемСоединении = Истина;
		КонецЕсли;
		
		// ВЫГРУЗКА (ЭТА БАЗА) - ЗАГРУЗКА (КОРРЕСПОНДЕНТ)
		ОбработкаОбменаДаннымиXML.ВыполнитьВыгрузкуДанных(ОбработкаДляЗагрузкиДанных);
		
		// Фиксируем состояние выполнения обмена данными.
		СтруктураНастроекОбмена.РезультатВыполненияОбмена    = ОбработкаОбменаДаннымиXML.РезультатВыполненияОбмена();
		СтруктураНастроекОбмена.КоличествоОбъектовОбработано = ОбработкаОбменаДаннымиXML.СчетчикВыгруженныхОбъектов();
		СтруктураНастроекОбменаВнешнееСоединение.РезультатВыполненияОбменаСтрокой = ОбработкаДляЗагрузкиДанных.РезультатВыполненияОбменаСтрокой();
		СтруктураНастроекОбменаВнешнееСоединение.КоличествоОбъектовОбработано     = ОбработкаДляЗагрузкиДанных.СчетчикЗагруженныхОбъектов();
		СтруктураНастроекОбмена.СообщениеПриОбмене           = ОбработкаОбменаДаннымиXML.КомментарийПриВыгрузкеДанных;
		СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке      = ОбработкаОбменаДаннымиXML.СтрокаСообщенияОбОшибке();
		СтруктураНастроекОбменаВнешнееСоединение.СообщениеПриОбмене               = ОбработкаДляЗагрузкиДанных.КомментарийПриЗагрузкеДанных;
		СтруктураНастроекОбменаВнешнееСоединение.СтрокаСообщенияОбОшибке          = ОбработкаДляЗагрузкиДанных.СтрокаСообщенияОбОшибке();
		ОбработкаДляЗагрузкиДанных = Неопределено;
		
	КонецЕсли;
	
	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	
	ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаВнешнееСоединение);
	
	Если Не РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбменДаннымиЧерезФайловыйРесурс(СтруктураНастроекОбмена, Знач ТолькоПараметры = Ложь)
	
	Если СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных Тогда
		
		// {Обработчик: ПередЧтениемСообщенияОбмена} Начало
		СообщениеОбмена = "";
		СтандартнаяОбработка = Истина;
		
		ПередЧтениемСообщенияОбмена(СтруктураНастроекОбмена.УзелИнформационнойБазы, СообщениеОбмена, СтандартнаяОбработка);
		// {Обработчик: ПередЧтениемСообщенияОбмена} Окончание
		
		Если СтандартнаяОбработка Тогда
			
			ВыполнитьТранспортСообщенияОбменаПередОбработкой(СтруктураНастроекОбмена);
			
			Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
				
				ВыполнитьТранспортСообщенияОбменаПолучение(СтруктураНастроекОбмена);
				
				Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
					
					СообщениеОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ИмяФайлаСообщенияОбмена();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Загрузка данных только при успешном получении сообщения обмена.
		Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
			
			ПрочитатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, СообщениеОбмена,, ТолькоПараметры);
			
		КонецЕсли;
		
		// {Обработчик: ПослеЧтенияСообщенияОбмена} Начало
		СтандартнаяОбработка = Истина;
		
		ПослеЧтенияСообщенияОбмена(
					СтруктураНастроекОбмена.УзелИнформационнойБазы,
					СообщениеОбмена,
					РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена),
					СтандартнаяОбработка,
					Не ТолькоПараметры);
		// {Обработчик: ПослеЧтенияСообщенияОбмена} Окончание
		
		Если СтандартнаяОбработка Тогда
			
			ВыполнитьТранспортСообщенияОбменаПослеОбработки(СтруктураНастроекОбмена);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных Тогда
		
		ВыполнитьТранспортСообщенияОбменаПередОбработкой(СтруктураНастроекОбмена);
		
		// выгрузка данных
		Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
			
			ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ИмяФайлаСообщенияОбмена());
			
		КонецЕсли;
		
		// Отправка сообщения обмена только в случае успешной выгрузки данных.
		Если РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
			
			ВыполнитьТранспортСообщенияОбменаОтправка(СтруктураНастроекОбмена);
			
		КонецЕсли;
		
		ВыполнитьТранспортСообщенияОбменаПослеОбработки(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЧтениемСообщенияОбмена(Знач Получатель, СообщениеОбмена, СтандартнаяОбработка)
	
	Если ЭтоПодчиненныйУзелРИБ()
		И ТипЗнч(ГлавныйУзел()) = ТипЗнч(Получатель) Тогда
		
		СохраненноеСообщениеОбмена = ПолучитьСообщениеОбменаДаннымиИзГлавногоУзла();
		
		Если ТипЗнч(СохраненноеСообщениеОбмена) = Тип("ДвоичныеДанные") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			СообщениеОбмена = ПолучитьИмяВременногоФайла("xml");
			
			СохраненноеСообщениеОбмена.Записать(СообщениеОбмена);
			
			ЗаписатьСобытиеПолученияДанных(Получатель, НСтр("ru = 'Сообщение обмена получено из кэша.'"));
			
			УстановитьПривилегированныйРежим(Истина);
			УстановитьРежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском("СообщениеПолученоИзКэша", Истина);
			УстановитьПривилегированныйРежим(Ложь);
			
		ИначеЕсли ТипЗнч(СохраненноеСообщениеОбмена) = Тип("Структура") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			СообщениеОбмена = СохраненноеСообщениеОбмена.ПутьКФайлу;
			
			ЗаписатьСобытиеПолученияДанных(Получатель, НСтр("ru = 'Сообщение обмена получено из кэша.'"));
			
			УстановитьПривилегированныйРежим(Истина);
			УстановитьРежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском("СообщениеПолученоИзКэша", Истина);
			УстановитьПривилегированныйРежим(Ложь);
			
		Иначе
			УстановитьПривилегированныйРежим(Истина);
			УстановитьРежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском("СообщениеПолученоИзКэша", Ложь);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЧтенияСообщенияОбмена(Знач Получатель, Знач СообщениеОбмена, Знач СообщениеПрочитано, СтандартнаяОбработка, Знач УдалитьСообщение = Истина)
	
	Если ЭтоПодчиненныйУзелРИБ()
		И ТипЗнч(ГлавныйУзел()) = ТипЗнч(Получатель) Тогда
		
		Если НЕ СообщениеПрочитано
		   И ОбменДаннымиВызовСервера.РежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском("СообщениеПолученоИзКэша") Тогда
			// Не удалось прочитать сообщение, полученное из кэша - требуется очистка кэша.
			ОчиститьСообщениеОбменаДаннымиИзГлавногоУзла();
			Возврат;
		КонецЕсли;
		
		ОбновитьСообщениеВКэше = Ложь;
		
		Если КонфигурацияИзменена() Тогда
			
			// Т.к. конфигурация может быть изменена повторно, требуется
			// обновить кэш, если он содержит устаревшее сообщение,
			// а не только при первой загрузке изменений конфигурации.
			ОбновитьСообщениеВКэше = Истина;
			
			Если Не СообщениеПрочитано Тогда
				
				Если НЕ Константы.ЗагрузитьСообщениеОбменаДанными.Получить() Тогда
					Константы.ЗагрузитьСообщениеОбменаДанными.Установить(Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если УдалитьСообщение Тогда
				
				ОчиститьСообщениеОбменаДаннымиИзГлавногоУзла();
				Если Константы.ЗагрузитьСообщениеОбменаДанными.Получить() Тогда
					Константы.ЗагрузитьСообщениеОбменаДанными.Установить(Ложь);
				КонецЕсли;
				
			Иначе
				// Т.к. чтение сообщение обмена может быть без загрузки метаданных,
				// то нужно сохранить сообщение обмена после чтения параметров работы программы,
				// чтобы не загружать его повторно для основного чтения.
				ОбновитьСообщениеВКэше = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбновитьСообщениеВКэше Тогда
			
			СтароеСообщение = ПолучитьСообщениеОбменаДаннымиИзГлавногоУзла();
			
			ОбновитьКэш = Ложь;
			НовоеСообщение = Новый ДвоичныеДанные(СообщениеОбмена);
			
			ТипСтруктура = ТипЗнч(СтароеСообщение) = Тип("Структура");
			
			Если ТипСтруктура Или ТипЗнч(СтароеСообщение) = Тип("ДвоичныеДанные") Тогда
				
				Если ТипСтруктура Тогда
					СтароеСообщение = Новый ДвоичныеДанные(СтароеСообщение.ПутьКФайлу);
				КонецЕсли;
				
				Если СтароеСообщение.Размер() <> НовоеСообщение.Размер() Тогда
					ОбновитьКэш = Истина;
				ИначеЕсли НовоеСообщение <> СтароеСообщение Тогда
					ОбновитьКэш = Истина;
				КонецЕсли;
				
			Иначе
				
				ОбновитьКэш = Истина;
				
			КонецЕсли;
			
			Если ОбновитьКэш Тогда
				УстановитьСообщениеОбменаДаннымиИзГлавногоУзла(НовоеСообщение, Получатель);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СообщениеПрочитано И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		РегистрыСведений.ОбработчикиСобытийСинхронизацииДанных.ВыполнитьОбработчики(Получатель, "ПослеПолученияДанных");
	КонецЕсли;
	
КонецПроцедуры

// Записывает изменения узла информационной базы в файл во временном каталоге.
//
// Параметры:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена.
// 
Процедура ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, Знач ИмяФайлаСообщенияОбмена = "", СообщениеОбмена = "")
	
	Если СтруктураНастроекОбмена.ЭтоОбменВРИБ Тогда // Обмен в РИБ
		
		Отказ = Ложь;
		
		// Получаем обработку обмена данными.
		ОбработкаОбменаДанными = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
		
		// Устанавливаем имя файла сообщения обмена, который необходимо прочитать.
		ОбработкаОбменаДанными.УстановитьИмяФайлаСообщенияОбмена(ИмяФайлаСообщенияОбмена);
		
		ОбработкаОбменаДанными.ВыполнитьВыгрузкуДанных(Отказ);
		
		Если Отказ Тогда
			
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			
		КонецЕсли;
		
	Иначе
		
		// {Обработчик: ПриВыгрузкеДанных} Начало. Переопределение стандартной обработки выгрузки данных.
		СтандартнаяОбработка = Истина;
		КоличествоОбъектовОбработано = 0;
		
		Попытка
			ОбработчикПриВыгрузкеДанныхБСП(СтандартнаяОбработка,
											СтруктураНастроекОбмена.УзелИнформационнойБазы,
											ИмяФайлаСообщенияОбмена,
											СообщениеОбмена,
											СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции,
											СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации,
											КоличествоОбъектовОбработано);
			
			Если СтандартнаяОбработка = Истина Тогда
				
				КоличествоОбъектовОбработано = 0;
				
				ОбработчикПриВыгрузкеДанных(СтандартнаяОбработка,
												СтруктураНастроекОбмена.УзелИнформационнойБазы,
												ИмяФайлаСообщенияОбмена,
												СообщениеОбмена,
												СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции,
												СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации,
												КоличествоОбъектовОбработано);
				
			КонецЕсли;
			
		Исключение
			
			СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,
					СтруктураНастроекОбмена.УзелИнформационнойБазы.Метаданные(), 
					СтруктураНастроекОбмена.УзелИнформационнойБазы, СтрокаСообщенияОбОшибке);
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке = СтрокаСообщенияОбОшибке;
			Возврат;
		КонецПопытки;
		
		Если СтандартнаяОбработка = Ложь Тогда
			СтруктураНастроекОбмена.КоличествоОбъектовОбработано = КоличествоОбъектовОбработано;
			Возврат;
		КонецЕсли;
		// {Обработчик: ПриВыгрузкеДанных} Окончание
		
		// Универсальный обмен (обмен по правилам конвертации).
		Если СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов Тогда
			
			ФормироватьСообщениеОбмена = ПустаяСтрока(ИмяФайлаСообщенияОбмена);
			Если ФормироватьСообщениеОбмена Тогда
				ИмяФайлаСообщенияОбмена = ПолучитьИмяВременногоФайла(".xml");
			КонецЕсли;
			
			// Получаем инициализированную обработку обмена данными.
			ОбработкаОбменаДаннымиXML = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
			ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = ИмяФайлаСообщенияОбмена;
			
			// выгрузка данных
			ОбработкаОбменаДаннымиXML.ВыполнитьВыгрузкуДанных();
			
			Если ФормироватьСообщениеОбмена Тогда
				ТекстовыйФайл = Новый ТекстовыйДокумент;
				ТекстовыйФайл.Прочитать(ИмяФайлаСообщенияОбмена, КодировкаТекста.UTF8);
				СообщениеОбмена = ТекстовыйФайл.ПолучитьТекст();
			КонецЕсли;
			
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = ОбработкаОбменаДаннымиXML.РезультатВыполненияОбмена();
			
			// Фиксируем состояние выполнения обмена данными.
			СтруктураНастроекОбмена.КоличествоОбъектовОбработано = ОбработкаОбменаДаннымиXML.СчетчикВыгруженныхОбъектов();
			СтруктураНастроекОбмена.СообщениеПриОбмене           = ОбработкаОбменаДаннымиXML.КомментарийПриВыгрузкеДанных;
			СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке      = ОбработкаОбменаДаннымиXML.СтрокаСообщенияОбОшибке();
			
		Иначе // Стандартный обмен (платформенная сериализация).
			
			Отказ = Ложь;
			КоличествоОбъектовОбработано = 0;
			
			ВыполнитьСтандартнуюВыгрузкуИзмененийДляУзла(Отказ,
								СтруктураНастроекОбмена.УзелИнформационнойБазы,
								ИмяФайлаСообщенияОбмена,
								СообщениеОбмена,
								СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции,
								СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации,
								КоличествоОбъектовОбработано);
			
			СтруктураНастроекОбмена.КоличествоОбъектовОбработано = КоличествоОбъектовОбработано;
			
			Если Отказ Тогда
				
				СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает сообщение обмена с новыми данными и загружает данные в информационную базу.
//
// Параметры:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена.
// 
Процедура ПрочитатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, Знач ИмяФайлаСообщенияОбмена = "", СообщениеОбмена = "", Знач ТолькоПараметры = Ложь)
	
	Если СтруктураНастроекОбмена.ЭтоОбменВРИБ Тогда // Обмен в РИБ
		
		Отказ = Ложь;
		
		// Получаем обработку обмена данными.
		ОбработкаОбменаДанными = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
		
		// Устанавливаем имя файла сообщения обмена, который необходимо прочитать.
		ОбработкаОбменаДанными.УстановитьИмяФайлаСообщенияОбмена(ИмяФайлаСообщенияОбмена);
		
		ОбработкаОбменаДанными.ВыполнитьЗагрузкуДанных(Отказ, ТолькоПараметры);
		
		Если Отказ Тогда
			
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			
		КонецЕсли;
		
	Иначе
		
		// {Обработчик: ПриЗагрузкеДанных} Начало. Переопределение стандартной обработки загрузки данных.
		СтандартнаяОбработка = Истина;
		КоличествоОбъектовОбработано = 0;
		
		Попытка
			ОбработчикПриЗагрузкеДанныхБСП(СтандартнаяОбработка,
											СтруктураНастроекОбмена.УзелИнформационнойБазы,
											ИмяФайлаСообщенияОбмена,
											СообщениеОбмена,
											СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции,
											СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации,
											КоличествоОбъектовОбработано);
			
			Если СтандартнаяОбработка = Истина Тогда
				
				КоличествоОбъектовОбработано = 0;
				
				ОбработчикПриЗагрузкеДанных(СтандартнаяОбработка,
												СтруктураНастроекОбмена.УзелИнформационнойБазы,
												ИмяФайлаСообщенияОбмена,
												СообщениеОбмена,
												СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции,
												СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации,
												КоличествоОбъектовОбработано);
				
			КонецЕсли;
			
		Исключение
			СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,
					СтруктураНастроекОбмена.УзелИнформационнойБазы.Метаданные(), 
					СтруктураНастроекОбмена.УзелИнформационнойБазы, СтрокаСообщенияОбОшибке);
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке = СтрокаСообщенияОбОшибке;
			Возврат;
		КонецПопытки;
		
		Если СтандартнаяОбработка = Ложь Тогда
			СтруктураНастроекОбмена.КоличествоОбъектовОбработано = КоличествоОбъектовОбработано;
			Возврат;
		КонецЕсли;
		// {Обработчик: ПриЗагрузкеДанных} Окончание
		
		// Универсальный обмен (обмен по правилам конвертации).
		Если СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов Тогда
			
			// Получаем инициализированную обработку обмена данными.
			ОбработкаОбменаДаннымиXML = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
			ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = ИмяФайлаСообщенияОбмена;
			
			// загрузка данных
			ОбработкаОбменаДаннымиXML.ВыполнитьЗагрузкуДанных();
			
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = ОбработкаОбменаДаннымиXML.РезультатВыполненияОбмена();
			
			// Фиксируем состояние выполнения обмена данными.
			СтруктураНастроекОбмена.КоличествоОбъектовОбработано = ОбработкаОбменаДаннымиXML.СчетчикЗагруженныхОбъектов();
			СтруктураНастроекОбмена.СообщениеПриОбмене           = ОбработкаОбменаДаннымиXML.КомментарийПриЗагрузкеДанных;
			СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке      = ОбработкаОбменаДаннымиXML.СтрокаСообщенияОбОшибке();
			
		Иначе // Стандартный обмен (платформенная сериализация).
			
			КоличествоОбъектовОбработано = 0;
			РезультатВыполненияОбмена = Неопределено;
			
			ВыполнитьСтандартнуюЗагрузкуИзмененийДляУзла(
								СтруктураНастроекОбмена.УзелИнформационнойБазы,
								ИмяФайлаСообщенияОбмена,
								СообщениеОбмена,
								СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции,
								СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации,
								КоличествоОбъектовОбработано,
								РезультатВыполненияОбмена);
			//
			
			СтруктураНастроекОбмена.КоличествоОбъектовОбработано = КоличествоОбъектовОбработано;
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = РезультатВыполненияОбмена;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеОбменаМетодамиСериализации

// Процедура записи изменений для сообщения обмена.
// Применима для случаев когда структура метаданных обменивающихся баз одинакова для всех объектов участвующих в обмене.
//
Процедура ВыполнитьСтандартнуюВыгрузкуИзмененийДляУзла(Отказ,
							УзелИнформационнойБазы,
							ИмяФайла,
							СообщениеОбмена,
							КоличествоЭлементовВТранзакции = 0,
							КлючСообщенияЖурналаРегистрации = "",
							КоличествоОбъектовОбработано = 0)
	
	Если ПустаяСтрока(КлючСообщенияЖурналаРегистрации) Тогда
		КлючСообщенияЖурналаРегистрации = СобытиеЖурналаРегистрацииОбменДанными();
	КонецЕсли;
	
	НачальнаяВыгрузкаДанных = УстановленПризнакНачальнойВыгрузкиДанных(УзелИнформационнойБазы);
	
	ЗаписьВФайл = Не ПустаяСтрока(ИмяФайла);
	
	ЗаписьXML = Новый ЗаписьXML;
	
	Если ЗаписьВФайл Тогда
		
		ЗаписьXML.ОткрытьФайл(ИмяФайла);
	Иначе
		
		ЗаписьXML.УстановитьСтроку();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Создаем новое сообщение
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелИнформационнойБазы);
	
	// Считаем количество записанных объектов.
	КоличествоЗаписанныхОбъектов = 0;
	КоличествоОбъектовОбработано = 0;
	
	ИспользоватьТранзакции = КоличествоЭлементовВТранзакции <> 1;
	
	ОбменДаннымиВызовСервера.ПроверитьКэшМеханизмаРегистрацииОбъектов();
	
	// Получаем выборку измененных данных.
	ВыборкаИзменений = ВыбратьИзменения(ЗаписьСообщения.Получатель, ЗаписьСообщения.НомерСообщения);
	
	Если ИспользоватьТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		ПолучательОбъект = ЗаписьСообщения.Получатель.ПолучитьОбъект();
		
		Пока ВыборкаИзменений.Следующий() Цикл
			
			Данные = ВыборкаИзменений.Получить();
			
			КоличествоОбъектовОбработано = КоличествоОбъектовОбработано + 1;
			
			// Выполняем проверку на то, что объект проходит фильтр ПРО
			// если объект фильтр ПРО не проходит, то в базу-приемник отсылаем удаление объекта
			// для наборов записей выполняем фильтрацию каждой записи
			// наборы выгружаем всегда, даже пустые (аналог удаления объекта).
			ОтправкаЭлемента = ОтправкаЭлементаДанных.Авто;
			
			СтандартныеПодсистемыСервер.ПриОтправкеДанныхПодчиненному(Данные, ОтправкаЭлемента, НачальнаяВыгрузкаДанных, ПолучательОбъект);
			
			Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить Тогда
				
				Если ОбщегоНазначения.ЭтоРегистр(Данные.Метаданные()) Тогда
					
					// Удаление регистра отсылаем в виде пустого набора записей.
					
				Иначе
					
					Данные = Новый УдалениеОбъекта(Данные.Ссылка);
					
				КонецЕсли;
				
			ИначеЕсли ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			// Записываем данные в сообщение.
			ЗаписатьXML(ЗаписьXML, Данные);
			
			КоличествоЗаписанныхОбъектов = КоличествоЗаписанныхОбъектов + 1;
			
			Если ИспользоватьТранзакции
				И КоличествоЭлементовВТранзакции > 0
				И КоличествоЗаписанныхОбъектов = КоличествоЭлементовВТранзакции Тогда
				
				// Промежуточную транзакцию закрываем и открываем новую.
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
				
				КоличествоЗаписанныхОбъектов = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИспользоватьТранзакции Тогда
			
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
		
		// Завершаем запись сообщения
		ЗаписьСообщения.ЗакончитьЗапись();
		
		СообщениеОбмена = ЗаписьXML.Закрыть();
		
	Исключение
		
		Если ИспользоватьТранзакции Тогда
			
			ОтменитьТранзакцию();
			
		КонецЕсли;
		
		ЗаписьСообщения.ПрерватьЗапись();
		
		ЗаписьXML.Закрыть();
		
		Отказ = Истина;
		
		ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,
			УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		//
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Процедура чтения изменений из сообщения обмена.
// Применима для случаев когда структура метаданных обменивающихся баз одинакова для всех объектов участвующих в обмене.
//
Процедура ВыполнитьСтандартнуюЗагрузкуИзмененийДляУзла(
							УзелИнформационнойБазы,
							ИмяФайла = "",
							СообщениеОбмена = "",
							КоличествоЭлементовВТранзакции = 0,
							КлючСообщенияЖурналаРегистрации = "",
							КоличествоОбъектовОбработано = 0,
							РезультатВыполненияОбмена = Неопределено)
	//
	
	Если ПустаяСтрока(КлючСообщенияЖурналаРегистрации) Тогда
		КлючСообщенияЖурналаРегистрации = СобытиеЖурналаРегистрацииОбменДанными();
	КонецЕсли;
	
	МенеджерПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьМенеджерПланаОбмена(УзелИнформационнойБазы);
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		
		Если Не ПустаяСтрока(СообщениеОбмена) Тогда
			ЧтениеXML.УстановитьСтроку(СообщениеОбмена);
		Иначе
			ЧтениеXML.ОткрытьФайл(ИмяФайла);
		КонецЕсли;
		
		ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
		ЧтениеСообщения.НачатьЧтение(ЧтениеXML, ДопустимыйНомерСообщения.Больший);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Если ЭтоОшибкаНомерСообщенияМеньшеИлиРавенНомеруРанееПринятогоСообщения(КраткоеПредставлениеОшибки(ИнформацияОбОшибке)) Тогда
			
			РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято;
			
			ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение,
				УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			//
		Иначе
			
			РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			
			ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,
				УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			//
		КонецЕсли;
		
		Возврат;
	КонецПопытки;
	
	Если ЧтениеСообщения.Отправитель <> УзелИнформационнойБазы Тогда // Сообщение предназначено не для этого узла.
		
		РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		
		ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,
			УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, НСтр("ru = 'Сообщение обмена содержит данные для другого узла информационной базы.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		//
		Возврат;
	КонецЕсли;
	
	ПараметрыРезервнойКопии = ПараметрыРезервнойКопии(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	
	УдалитьРегистрациюИзменений = Не ПараметрыРезервнойКопии.ВосстановленаРезервнаяКопия;
	
	Если УдалитьРегистрациюИзменений Тогда
		
		// Удаляем регистрацию изменений для узла отправителя сообщения.
		ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
		
		РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.СнятьПризнакНачальнойВыгрузкиДанных(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
		
	КонецЕсли;
	
	// Считаем сколько объектов прочитали.
	КоличествоЗаписанныхОбъектов = 0;
	КоличествоОбъектовОбработано = 0;
	
	ИспользоватьТранзакции = КоличествоЭлементовВТранзакции <> 1;
	
	Если ИспользоватьТранзакции Тогда
		
		// начинаем транзакцию
		НачатьТранзакцию();
		
	КонецЕсли;
	
	Попытка
		
		// Читаем данные из сообщения
		Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
			
			// Читаем очередное значение
			Данные = ПрочитатьXML(ЧтениеXML);
			
			ПолучениеЭлемента = ПолучениеЭлементаДанных.Авто;
			ОтправкаНазад = Ложь;
			
			СтандартныеПодсистемыСервер.ПриПолученииДанныхОтГлавного(Данные, ПолучениеЭлемента, ОтправкаНазад, ЧтениеСообщения.Отправитель);
			
			Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
				Продолжить;
			КонецЕсли;
				
			ЭтоУдалениеОбъекта = (ТипЗнч(Данные) = Тип("УдалениеОбъекта"));
			
			КоличествоОбъектовОбработано = КоличествоОбъектовОбработано + 1;
			
			Если Не ОтправкаНазад Тогда
				Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
			КонецЕсли;
			
			Данные.ОбменДанными.Загрузка = Истина;
			
			// Переопределяем стандартное поведение системы при получении удаления объекта.
			// Вместо физического удаления объекта без контроля ссылочной целостности 
			// выполняем установку пометки на удаление.
			Если ЭтоУдалениеОбъекта Тогда
				
				УдалениеОбъекта = Данные;
				
				Данные = Данные.Ссылка.ПолучитьОбъект();
				
				Если Данные = Неопределено Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если Не ОтправкаНазад Тогда
					Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
				КонецЕсли;
				
				Данные.ОбменДанными.Загрузка = Истина;
				
				Данные.ПометкаУдаления = Истина;
				
				Если ОбщегоНазначения.ЭтоДокумент(Данные.Метаданные()) Тогда
					
					Данные.Проведен = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЭтоУдалениеОбъекта Тогда
				
				Данные = УдалениеОбъекта;
				
			КонецЕсли;
			
			// Выполняем попытку записи объекта.
			Попытка
				Данные.Записать();
			Исключение
				
				РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
				
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,
					Данные.Метаданные(), Строка(Данные), ОписаниеОшибки);
				//
				Прервать;
			КонецПопытки;
			
			КоличествоЗаписанныхОбъектов = КоличествоЗаписанныхОбъектов + 1;
			
			Если ИспользоватьТранзакции
				И КоличествоЭлементовВТранзакции > 0
				И КоличествоЗаписанныхОбъектов = КоличествоЭлементовВТранзакции Тогда
				
				// Промежуточную транзакцию закрываем и открываем новую.
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
				
				КоличествоЗаписанныхОбъектов = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		
		ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,
			УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		//
	КонецПопытки;
	
	Если РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка Тогда
		
		ЧтениеСообщения.ПрерватьЧтение();
		
		Если ИспользоватьТранзакции Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	Иначе
		
		ЧтениеСообщения.ЗакончитьЧтение();
		
		ПриВосстановленииРезервнойКопии(ПараметрыРезервнойКопии);
		
		Если ИспользоватьТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииСвойства

// Возвращает имя файла сообщения обмена данными по данным узла-отправителя и узла-получателя.
//
Функция ИмяФайлаСообщенияОбмена(КодУзлаОтправителя, КодУзлаПолучателя)
	
	ШаблонИмени = "[Префикс]_[УзелОтправитель]_[УзелПолучатель]";
	
	ШаблонИмени = СтрЗаменить(ШаблонИмени, "[Префикс]",         "Message");
	ШаблонИмени = СтрЗаменить(ШаблонИмени, "[УзелОтправитель]", КодУзлаОтправителя);
	ШаблонИмени = СтрЗаменить(ШаблонИмени, "[УзелПолучатель]",  КодУзлаПолучателя);
	
	Возврат ШаблонИмени;
КонецФункции

// Возвращает имя временного каталога для сообщений обмена данными.
// Имя каталога соответствует шаблону:
// "Exchange82 {GUID}", 
// где GUID - строка уникального идентификатора.
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка - имя временного каталога для сообщений обмена данными.
//
Функция ИмяВременногоКаталогаСообщенийОбмена()
	
	Возврат СтрЗаменить("Exchange82 {GUID}", "GUID", ВРег(Строка(Новый УникальныйИдентификатор)));
	
КонецФункции

// Возвращает имя обработки транспорта сообщений обмена.
//
// Параметры:
//  ВидТранспорта - ПеречислениеСсылка.ВидыТранспортаСообщенийОбмена - вид транспорта, для которого необходимо получить
//                                                                     имя обработки.
// 
//  Возвращаемое значение:
//  Строка - имя обработки транспорта сообщений обмена.
//
Функция ИмяОбработкиТранспортаСообщенийОбмена(ВидТранспорта)
	
	Возврат СтрЗаменить("ТранспортСообщенийОбмена[ВидТранспорта]", "[ВидТранспорта]", ОбщегоНазначения.ИмяЗначенияПеречисления(ВидТранспорта));
	
КонецФункции

// Дубль процедуры на сервере ОбменДаннымиКлиент.МаксимальноеКоличествоПолейСопоставленияОбъектов().
//
Функция МаксимальноеКоличествоПолейСопоставленияОбъектов() Экспорт
	
	Возврат 5;
	
КонецФункции

// Определяет, входит ли план обмена в список планов обмена, которые используют обмен данными по формату XDTO.
//
// Параметры:
//  ПланОбмена - Ссылка на узел плана обмена или имя плана обмена.
//
// Возвращаемое значение: Булево.
//
Функция ЭтоПланОбменаXDTO(ПланОбмена) Экспорт
	Если ТипЗнч(ПланОбмена) = Тип("Строка") Тогда
		ИмяПланаОбмена = ПланОбмена;
	Иначе
		ИмяПланаОбмена = ПланОбмена.Метаданные().Имя;
	КонецЕсли;
	Возврат ЗначениеНастройкиПланаОбмена(ИмяПланаОбмена, "ЭтоПланОбменаXDTO");
КонецФункции

// Функция-свойство: возвращает литерал обозначения строки неограниченной длины.
//
// Возвращаемое значение:
//  Строка - литерал обозначения строки неограниченной длины.
//
Функция СтрокаНеограниченнойДлины() Экспорт
	
	Возврат "(снд)";
	
КонецФункции

// Функция-свойство: возвращает литерал обозначения узла-XML, который содержит значение константы ПРО.
//
// Возвращаемое значение:
//  Строка - литерал обозначения узла-XML, который содержит значение константы ПРО.
//
Функция ЭлементОтбораСвойствоЗначениеКонстанты() Экспорт
	
	Возврат "ЗначениеКонстанты";
	
КонецФункции

// Функция-свойство: возвращает литерал обозначения узла-XML, который содержит алгоритм получения значения.
//
// Возвращаемое значение:
//  Строка - возвращает литерал обозначения узла-XML, который содержит алгоритм получения значения.
//
Функция ЭлементОтбораСвойствоАлгоритмЗначения() Экспорт
	
	Возврат "АлгоритмЗначения";
	
КонецФункции

// Функция-свойство: возвращает имя файла, который используется для проверки подключения обработки транспорта.
//
// Возвращаемое значение:
//  Строка - возвращает имя файла, который используется для проверки подключения обработки транспорта.
//
Функция ИмяФайлаПроверкиПодключения() Экспорт
	
	Возврат "ConnectionCheckFile.tmp";
	
КонецФункции

Функция ЭтоОшибкаНомерСообщенияМеньшеИлиРавенНомеруРанееПринятогоСообщения(ОписаниеОшибки)
	
	Возврат СтрНайти(НРег(ОписаниеОшибки), НРег("ru = 'Номер сообщения меньше или равен'")) > 0;
	
КонецФункции

Функция СобытиеЖурналаРегистрацииУстановкаПодключенияКWebСервису() Экспорт
	
	Возврат НСтр("ru = 'Обмен данными.Установка подключения к web-сервису'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеЖурналаРегистрацииЗагрузкаПравилДляОбменаДанными() Экспорт
	
	Возврат НСтр("ru = 'Обмен данными.Загрузка правил'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеЖурналаРегистрацииСозданиеОбменаДанными() Экспорт
	
	Возврат НСтр("ru = 'Обмен данными.Создание обмена данными'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеЖурналаРегистрацииУдалениеВременногоФайла() Экспорт
	
	Возврат НСтр("ru = 'Обмен данными.Удаление временного файла'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеЖурналаРегистрацииОбменДанными() Экспорт
	
	Возврат НСтр("ru = 'Обмен данными'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#Область ТранспортСообщенийОбмена

Процедура ВыполнитьТранспортСообщенияОбменаПередОбработкой(СтруктураНастроекОбмена)
	
	// Получаем инициализированную обработку транспорта сообщений.
	ОбработкаТранспортаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена;
	
	// Получаем новое имя временного файла.
	Если Не ОбработкаТранспортаСообщенийОбмена.ВыполнитьДействияПередОбработкойСообщения() Тогда
		
		ЗаписьЖурналаРегистрацииОбменаДанными(ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР, СтруктураНастроекОбмена, Истина);
		
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьТранспортСообщенияОбменаОтправка(СтруктураНастроекОбмена)
	
	// Получаем инициализированную обработку транспорта сообщений.
	ОбработкаТранспортаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена;
	
	// Отправляем сообщение обмена из временного каталога.
	Если Не ОбработкаТранспортаСообщенийОбмена.ОтправитьСообщение() Тогда
		
		ЗаписьЖурналаРегистрацииОбменаДанными(ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР, СтруктураНастроекОбмена, Истина);
		
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьТранспортСообщенияОбменаПолучение(СтруктураНастроекОбмена)
	
	// Получаем инициализированную обработку транспорта сообщений.
	ОбработкаТранспортаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена;
	
	// Получаем сообщение обмена во временный каталог.
	Если Не ОбработкаТранспортаСообщенийОбмена.ПолучитьСообщение() Тогда
		
		ЗаписьЖурналаРегистрацииОбменаДанными(ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР, СтруктураНастроекОбмена, Истина);
		
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьТранспортСообщенияОбменаПослеОбработки(СтруктураНастроекОбмена)
	
	// Получаем инициализированную обработку транспорта сообщений.
	ОбработкаТранспортаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена;
	
	// Выполняем действия после отправки сообщения.
	ОбработкаТранспортаСообщенийОбмена.ВыполнитьДействияПослеОбработкиСообщения();
	
КонецПроцедуры

#КонецОбласти

#Область СервисПередачиФайлов

// Функция по переданному идентификатору скачивает файл из сервиса передачи файлов.
//
// Параметры:
//  ИдентификаторФайла       - УникальныйИдентификатор - идентификатор получаемого файла.
//  ПараметрыДоступаКСервису - Структура: АдресСервиса, ИмяПользователя, ПарольПользователя. 
//  РазмерЧасти              - Число - размер части в килобайтах. Если значение равно 0,
//                             то разбивка на части не производится.
// Возвращаемое значение:
//  Строка - путь к полученному файлу.
//
Функция ПолучитьФайлИзХранилищаВСервисе(Знач ИдентификаторФайла, Знач УзелИнформационнойБазы, Знач РазмерЧасти = 1024, Знач ПараметрыАутентификации = Неопределено) Экспорт
	
	// Возвращаемое значение функции.
	ИмяФайлаРезультата = "";
	
	Прокси = ПолучитьWSПроксиДляУзлаИнформационнойБазы(УзелИнформационнойБазы,, ПараметрыАутентификации);
	
	ОбменВыполняетсяВОднойСети = ОбменДаннымиПовтИсп.ОбменВыполняетсяВОднойЛокальнойСети(УзелИнформационнойБазы, ПараметрыАутентификации);
	
	Если ОбменВыполняетсяВОднойСети Тогда
		
		ИмяФайлаИзХранилища = Прокси.GetFileFromStorage(ИдентификаторФайла);
		
		ИмяФайлаРезультата = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременногоХранилищаФайлов(), ИмяФайлаИзХранилища);
		
	Иначе
		
		ИдентификаторСессии = Неопределено;
		КоличествоЧастей = Неопределено;
		
		Прокси.PrepareGetFile(ИдентификаторФайла, РазмерЧасти, ИдентификаторСессии, КоличествоЧастей);
		
		ИменаФайлов = Новый Массив;
		
		КаталогСборки = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(КаталогСборки);
		
		ШаблонИмениФайла = "data.zip.[n]";
		
		// Протоколирование событий обмена.
		СтруктураНастроекОбмена = Новый Структура("КлючСообщенияЖурналаРегистрации");
		СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Начало получения сообщения обмена из Интернета (количество частей файла %1).'"),
			Формат(КоличествоЧастей, "ЧН=0; ЧГ=0"));
		ЗаписьЖурналаРегистрацииОбменаДанными(Комментарий, СтруктураНастроекОбмена);
		//
		
		Для НомерЧасти = 1 По КоличествоЧастей Цикл
			
			ДанныеЧасти = Неопределено;
			Прокси.GetFilePart(ИдентификаторСессии, НомерЧасти, ДанныеЧасти);
			
			ИмяФайла = СтрЗаменить(ШаблонИмениФайла, "[n]", Формат(НомерЧасти, "ЧГ=0"));
			ИмяФайлаЧасти = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогСборки, ИмяФайла);
			
			ДанныеЧасти.Записать(ИмяФайлаЧасти);
			ИменаФайлов.Добавить(ИмяФайлаЧасти);
		КонецЦикла;
		ДанныеЧасти = Неопределено;
		
		Прокси.ReleaseFile(ИдентификаторСессии);
		
		ИмяАрхива = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогСборки, "data.zip");
		
		ОбъединитьФайлы(ИменаФайлов, ИмяАрхива);
		
		Разархиватор = Новый ЧтениеZipФайла(ИмяАрхива);
		Если Разархиватор.Элементы.Количество() = 0 Тогда
			Попытка
				УдалитьФайлы(КаталогСборки);
			Исключение
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУдалениеВременногоФайла(),
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			ВызватьИсключение(НСтр("ru = 'Файл архива не содержит данных.'"));
		КонецЕсли;
		
		// Протоколирование событий обмена.
		ФайлАрхива = Новый Файл(ИмяАрхива);
		
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Окончание получения сообщения обмена из Интернета (размер сжатого сообщения обмена %1 Мб).'"),
			Формат(Окр(ФайлАрхива.Размер() / 1024 / 1024, 3), "ЧН=0; ЧГ=0"));
		ЗаписьЖурналаРегистрацииОбменаДанными(Комментарий, СтруктураНастроекОбмена);
		//
		
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогСборки, Разархиватор.Элементы[0].Имя);
		
		Разархиватор.Извлечь(Разархиватор.Элементы[0], КаталогСборки);
		Разархиватор.Закрыть();
		
		Файл = Новый Файл(ИмяФайла);
		
		ИмяФайлаРезультата = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов(), Файл.Имя);
		ПереместитьФайл(ИмяФайла, ИмяФайлаРезультата);
		
		Попытка
			УдалитьФайлы(КаталогСборки);
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУдалениеВременногоФайла(),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ИмяФайлаРезультата;
КонецФункции

// Функция передает указанный файл в сервис передачи файлов.
//
// Параметры:
//  ИмяФайла                 - Строка - путь к передаваемому файлу.
//  ПараметрыДоступаКСервису - Структура: АдресСервиса, ИмяПользователя, ПарольПользователя. 
//  РазмерЧасти              - Число - размер части в килобайтах. Если значение равно 0,
//                             то разбивка на части не производится.
// Возвращаемое значение:
//  УникальныйИдентификатор  - идентификатор файла в сервисе передачи файлов.
//
Функция ПоместитьФайлВХранилищеВСервисе(Знач ИмяФайла, Знач УзелИнформационнойБазы, Знач РазмерЧасти = 1024, Знач ПараметрыАутентификации = Неопределено)
	
	// Возвращаемое значение функции.
	ИдентификаторФайла = Неопределено;
	
	Прокси = ПолучитьWSПроксиДляУзлаИнформационнойБазы(УзелИнформационнойБазы,, ПараметрыАутентификации);
	
	ОбменВыполняетсяВОднойСети = ОбменДаннымиПовтИсп.ОбменВыполняетсяВОднойЛокальнойСети(УзелИнформационнойБазы, ПараметрыАутентификации);
	
	Если ОбменВыполняетсяВОднойСети Тогда
		
		ИмяФайлаВХранилище = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременногоХранилищаФайлов(), УникальноеИмяФайлаСообщенияОбмена());
		
		ПереместитьФайл(ИмяФайла, ИмяФайлаВХранилище);
		
		Прокси.PutFileIntoStorage(ИмяФайлаВХранилище, ИдентификаторФайла);
		
	Иначе
		
		КаталогФайлов = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(КаталогФайлов);
		
		// Архивирование файла
		ИмяНеразделенногоФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогФайлов, "data.zip");
		Архиватор = Новый ЗаписьZipФайла(ИмяНеразделенногоФайла,,,, УровеньСжатияZIP.Максимальный);
		Архиватор.Добавить(ИмяФайла);
		Архиватор.Записать();
		
		// Разделение файла на части
		ИдентификаторСессии = Новый УникальныйИдентификатор;
		
		КоличествоЧастей = 1;
		Если ЗначениеЗаполнено(РазмерЧасти) Тогда
			ИменаФайлов = РазделитьФайл(ИмяНеразделенногоФайла, РазмерЧасти * 1024);
			КоличествоЧастей = ИменаФайлов.Количество();
			Для НомерЧасти = 1 По КоличествоЧастей Цикл
				ИмяФайлаЧасти = ИменаФайлов[НомерЧасти - 1];
				ДанныеФайла = Новый ДвоичныеДанные(ИмяФайлаЧасти);
				Прокси.PutFilePart(ИдентификаторСессии, НомерЧасти, ДанныеФайла);
			КонецЦикла;
		Иначе
			ДанныеФайла = Новый ДвоичныеДанные(ИмяНеразделенногоФайла);
			Прокси.PutFilePart(ИдентификаторСессии, 1, ДанныеФайла);
		КонецЕсли;
		
		Попытка
			УдалитьФайлы(КаталогФайлов);
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУдалениеВременногоФайла(),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Прокси.SaveFileFromParts(ИдентификаторСессии, КоличествоЧастей, ИдентификаторФайла);
		
	КонецЕсли;
	
	Возврат ИдентификаторФайла;
КонецФункции

// Получение файла по его идентификатору.
//
// Параметры:
//	ИдентификаторФайла - УникальныйИдентификатор - идентификатор получаемого файла.
//
// Возвращаемое значение:
//  ИмяФайла - Строка - имя файла.
//
Функция ПолучитьФайлИзХранилища(Знач ИдентификаторФайла) Экспорт
	
	ИмяФайла = "";
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		МодульОбменДаннымиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		МодульОбменДаннымиВМоделиСервиса.ПриПолученииФайлаИзХранилища(ИдентификаторФайла, ИмяФайла);
		
	Иначе
		
		ПриПолученииФайлаИзХранилища(ИдентификаторФайла, ИмяФайла);
		
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременногоХранилищаФайлов(), ИмяФайла);
КонецФункции

// Сохранение файла.
//
// Параметры:
//  ИмяФайла               - Строка - наименование файла.
//  ИдентификаторФайла     - УникальныйИдентификатор - идентификатор файла. Если задан, то при сохранении файла
//                           будет использоваться это значение, иначе - сгенерируется новое.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - идентификатор файла.
//
Функция ПоместитьФайлВХранилище(Знач ИмяФайла, Знач ИдентификаторФайла = Неопределено) Экспорт
	
	ИдентификаторФайла = ?(ИдентификаторФайла = Неопределено, Новый УникальныйИдентификатор, ИдентификаторФайла);
	
	Файл = Новый Файл(ИмяФайла);
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("ИдентификаторСообщения", Строка(ИдентификаторФайла));
	СтруктураЗаписи.Вставить("ИмяФайлаСообщения", Файл.Имя);
	СтруктураЗаписи.Вставить("ДатаЗакладкиСообщения", ТекущаяУниверсальнаяДата());
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		МодульОбменДаннымиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		МодульОбменДаннымиВМоделиСервиса.ПриПомещенииФайлаВХранилище(СтруктураЗаписи);
	Иначе
		
		ПриПомещенииФайлаВХранилище(СтруктураЗаписи);
		
	КонецЕсли;
	
	Возврат ИдентификаторФайла;
КонецФункции

// Определяет возможность передачи файлов между двумя базами через локальную сеть.
//
// Параметры:
//  УзелИнформационнойБазы  - ПланОбменаСсылка - узел плана обмена, для которого выполняется получение сообщения обмена.
//  ПараметрыАутентификации - Структура. Содержит параметры аутентификации на веб-сервисе (Пользователь, Пароль).
//
Функция ОбменВыполняетсяВОднойЛокальнойСети(Знач УзелИнформационнойБазы, Знач ПараметрыАутентификации = Неопределено) Экспорт
	
	Прокси = ПолучитьWSПроксиДляУзлаИнформационнойБазы(УзелИнформационнойБазы,, ПараметрыАутентификации);
	
	ИмяВременногоФайла = СтрЗаменить("test{GUID}.tmp", "GUID", Строка(Новый УникальныйИдентификатор));
	
	ПолноеИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременногоХранилищаФайлов(), ИмяВременногоФайла);
	ЗаписьТекста = Новый ЗаписьТекста(ПолноеИмяВременногоФайла);
	ЗаписьТекста.Закрыть();
	
	Попытка
		Результат = Прокси.FileExists(ИмяВременногоФайла);
	Исключение
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Попытка
			УдалитьФайлы(ПолноеИмяВременногоФайла);
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУдалениеВременногоФайла(),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		ВызватьИсключение ПодробноеПредставлениеОшибки;
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(ПолноеИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУдалениеВременногоФайла(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

// Получение имени файла по его идентификатору из хранилища.
// Если файла с указанным идентификатором нет, то вызывается исключение.
// Если файл найден, то возвращается его имя, при этом удаляется информация об этом файле из хранилища.
//
// Параметры:
//	ИдентификаторФайла - УникальныйИдентификатор - идентификатор получаемого файла.
//	ИмяФайла           - Строка - имя файла, из хранилища.
//
Процедура ПриПолученииФайлаИзХранилища(Знач ИдентификаторФайла, ИмяФайла)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СообщенияОбменаДанными.ИмяФайлаСообщения КАК ИмяФайла
	|ИЗ
	|	РегистрСведений.СообщенияОбменаДанными КАК СообщенияОбменаДанными
	|ГДЕ
	|	СообщенияОбменаДанными.ИдентификаторСообщения = &ИдентификаторСообщения";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторСообщения", Строка(ИдентификаторФайла));
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Описание = НСтр("ru = 'Файл с идентификатором %1 не обнаружен.'");
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Строка(ИдентификаторФайла));
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ИмяФайла = Выборка.ИмяФайла;
	
	// Удаляем информацию о файле сообщения обмена из хранилища.
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("ИдентификаторСообщения", Строка(ИдентификаторФайла));
	РегистрыСведений.СообщенияОбменаДанными.УдалитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

// Помещение файла в хранилище.
//
Процедура ПриПомещенииФайлаВХранилище(Знач СтруктураЗаписи)
	
	РегистрыСведений.СообщенияОбменаДанными.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияИзмененийНачальнойВыгрузкиДанных

// Выполняет регистрацию изменений для начальной выгрузки данных с учетом даты начала выгрузки и списка организаций.
// Процедура является универсальной и может быть использована для регистрации изменений данных по дате начала выгрузки
// и списку организаций для объектных типов данных и наборов записей регистров.
// Если список организаций не задан (Организации = Неопределено), то изменения регистрируются только по дате начала
// выгрузки.
// Регистрации подлежат данные для всех объектов метаданных, включенных в состав плана обмена.
// Если для объекта метаданных в составе плана обмена установлен признак авторегистрации
// или если признак авторегистрации не установлен и правила регистрации не заданы,
// то регистрация изменений будет выполнена безусловно для всех данных этого типа.
// Если для объекта метаданных заданы правила регистрации, то регистрация изменений будет выполнена 
// с учетом даты начала выгрузки и списка организаций.
// Для документов поддерживается регистрация изменений по дате начала выгрузки и по списку организаций.
// Для бизнес-процессов и для задач поддерживается регистрация изменений по дате начала выгрузки.
// Для наборов записей регистров поддерживается регистрация изменений по дате начала выгрузки и по списку организаций.
// Данная процедура может служить прототипом для разработки собственных процедур регистрации изменений
// для начальной выгрузки данных.
//
// Параметры:
//
//  Получатель - ПланОбменаСсылка - Узел плана обмена,
//               для которого требуется выполнить регистрацию изменений данных.
//  ДатаНачалаВыгрузки - Дата - дата, относительно которой необходимо выполнить
//               регистрацию изменений данных для выгрузки. Изменения будут зарегистрированы для данных,
//               которые на оси времени располагаются после этой даты.
//  Организации - Массив, Неопределено - Список организаций, для которых необходимо выполнить регистрацию
//               изменений данных. Если параметр не задан, то организации не будут
//               учитываться при регистрации изменений.
//
Процедура ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям(Знач Получатель, ДатаНачалаВыгрузки,
	Организации = Неопределено,
	Данные = Неопределено) Экспорт
	
	ОтборПоОрганизациям = (Организации <> Неопределено);
	ОтборПоДатеНачалаВыгрузки = ЗначениеЗаполнено(ДатаНачалаВыгрузки);
	
	Если Не ОтборПоОрганизациям И Не ОтборПоДатеНачалаВыгрузки Тогда
		
		Если ТипЗнч(Данные) = Тип("Массив") Тогда
			
			Для Каждого ОбъектМетаданных Из Данные Цикл
				
				ПланыОбмена.ЗарегистрироватьИзменения(Получатель, ОбъектМетаданных);
				
			КонецЦикла;
			
		Иначе
			
			ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Данные);
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ОтборПоДатеНачалаВыгрузкиИОрганизациям = ОтборПоДатеНачалаВыгрузки И ОтборПоОрганизациям;
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(Получатель);
	
	СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
	
	ИспользоватьФильтрПоМетаданным = (ТипЗнч(Данные) = Тип("Массив"));
	
	Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		
		Если ИспользоватьФильтрПоМетаданным
			И Данные.Найти(ЭлементСоставаПланаОбмена.Метаданные) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ПолноеИмяОбъекта = ЭлементСоставаПланаОбмена.Метаданные.ПолноеИмя();
		
		Если ЭлементСоставаПланаОбмена.АвтоРегистрация = АвтоРегистрацияИзменений.Запретить
			И ОбменДаннымиПовтИсп.ПравилаРегистрацииОбъектаСуществуют(ИмяПланаОбмена, ПолноеИмяОбъекта) Тогда
			
			Если ОбщегоНазначения.ЭтоДокумент(ЭлементСоставаПланаОбмена.Метаданные) Тогда // Документы
				
				Если ОтборПоДатеНачалаВыгрузкиИОрганизациям
					// Регистрация по дате и организациям.
					И ЭлементСоставаПланаОбмена.Метаданные.Реквизиты.Найти("Организация") <> Неопределено Тогда
					
					Выборка = ВыборкаДокументовПоДатеНачалаВыгрузкиИОрганизациям(ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организации);
					
					Пока Выборка.Следующий() Цикл
						
						ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Выборка.Ссылка);
						
					КонецЦикла;
					
					Продолжить;
					
				Иначе // Регистрация по дате
					
					Выборка = ВыборкаОбъектовПоДатеНачалаВыгрузки(ПолноеИмяОбъекта, ДатаНачалаВыгрузки);
					
					Пока Выборка.Следующий() Цикл
						
						ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Выборка.Ссылка);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(ЭлементСоставаПланаОбмена.Метаданные)
				ИЛИ ОбщегоНазначения.ЭтоЗадача(ЭлементСоставаПланаОбмена.Метаданные) Тогда // Бизнес-процессы и Задачи
				
				// Регистрация по дате
				Выборка = ВыборкаОбъектовПоДатеНачалаВыгрузки(ПолноеИмяОбъекта, ДатаНачалаВыгрузки);
				
				Пока Выборка.Следующий() Цикл
					
					ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Выборка.Ссылка);
					
				КонецЦикла;
				
				Продолжить;
				
			ИначеЕсли ОбщегоНазначения.ЭтоРегистр(ЭлементСоставаПланаОбмена.Метаданные) Тогда // Регистры
				
				// Регистры сведений (независимые).
				Если ОбщегоНазначения.ЭтоРегистрСведений(ЭлементСоставаПланаОбмена.Метаданные)
					И ЭлементСоставаПланаОбмена.Метаданные.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
					
					ОсновнойОтбор = ОсновнойОтборРегистраСведений(ЭлементСоставаПланаОбмена.Метаданные);
					
					ОтборПоПериоду     = (ОсновнойОтбор.Найти("Период") <> Неопределено);
					ОтборПоОрганизации = (ОсновнойОтбор.Найти("Организация") <> Неопределено);
					
					// Регистрация по дате и организациям.
					Если ОтборПоДатеНачалаВыгрузкиИОрганизациям И ОтборПоПериоду И ОтборПоОрганизации Тогда
						
						Выборка = ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоДатеНачалаВыгрузкиИОрганизациям(ОсновнойОтбор, ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организации);
						
					ИначеЕсли ОтборПоДатеНачалаВыгрузки И ОтборПоПериоду Тогда // Регистрация по дате
						
						Выборка = ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоДатеНачалаВыгрузки(ОсновнойОтбор, ПолноеИмяОбъекта, ДатаНачалаВыгрузки);
						
					ИначеЕсли ОтборПоОрганизациям И ОтборПоОрганизации Тогда // Регистрация по организациям.
						
						Выборка = ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоОрганизациям(ОсновнойОтбор, ПолноеИмяОбъекта, Организации);
						
					Иначе
						
						Выборка = Неопределено;
						
					КонецЕсли;
					
					Если Выборка <> Неопределено Тогда
						
						НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта).СоздатьНаборЗаписей();
						
						Пока Выборка.Следующий() Цикл
							
							Для Каждого ИмяИзмерения Из ОсновнойОтбор Цикл
								
								НаборЗаписей.Отбор[ИмяИзмерения].Значение = Выборка[ИмяИзмерения];
								НаборЗаписей.Отбор[ИмяИзмерения].Использование = Истина;
								
							КонецЦикла;
							
							ПланыОбмена.ЗарегистрироватьИзменения(Получатель, НаборЗаписей);
							
						КонецЦикла;
						
						Продолжить;
						
					КонецЕсли;
					
				Иначе // Регистры (прочие)
					
					Если ОтборПоДатеНачалаВыгрузкиИОрганизациям
						И ЭлементСоставаПланаОбмена.Метаданные.Измерения.Найти("Период") <> Неопределено
						// Регистрация по дате и организациям.
						И ЭлементСоставаПланаОбмена.Метаданные.Измерения.Найти("Организация") <> Неопределено Тогда
						
						Выборка = ВыборкаРегистраторовНаборовЗаписейПоДатеНачалаВыгрузкиИОрганизациям(ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организации);
						
						НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта).СоздатьНаборЗаписей();
						
						Пока Выборка.Следующий() Цикл
							
							НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
							НаборЗаписей.Отбор.Регистратор.Использование = Истина;
							
							ПланыОбмена.ЗарегистрироватьИзменения(Получатель, НаборЗаписей);
							
						КонецЦикла;
						
						Продолжить;
						
					// Регистрация по дате
					ИначеЕсли ЭлементСоставаПланаОбмена.Метаданные.Измерения.Найти("Период") <> Неопределено Тогда
						
						Выборка = ВыборкаРегистраторовНаборовЗаписейПоДатеНачалаВыгрузки(ПолноеИмяОбъекта, ДатаНачалаВыгрузки);
						
						НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта).СоздатьНаборЗаписей();
						
						Пока Выборка.Следующий() Цикл
							
							НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
							НаборЗаписей.Отбор.Регистратор.Использование = Истина;
							
							ПланыОбмена.ЗарегистрироватьИзменения(Получатель, НаборЗаписей);
							
						КонецЦикла;
						
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(Получатель, ЭлементСоставаПланаОбмена.Метаданные);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыборкаДокументовПоДатеНачалаВыгрузкиИОрганизациям(ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организации)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	[ПолноеИмяОбъекта] КАК Таблица
	|ГДЕ
	|	Таблица.Организация В(&Организации)
	|	И Таблица.Дата >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъекта]", ПолноеИмяОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаОбъектовПоДатеНачалаВыгрузки(ПолноеИмяОбъекта, ДатаНачалаВыгрузки)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	[ПолноеИмяОбъекта] КАК Таблица
	|ГДЕ
	|	Таблица.Дата >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъекта]", ПолноеИмяОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаРегистраторовНаборовЗаписейПоДатеНачалаВыгрузкиИОрганизациям(ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организации)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	[ПолноеИмяОбъекта] КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Организация В(&Организации)
	|	И ТаблицаРегистра.Период >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъекта]", ПолноеИмяОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаРегистраторовНаборовЗаписейПоДатеНачалаВыгрузки(ПолноеИмяОбъекта, ДатаНачалаВыгрузки)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	[ПолноеИмяОбъекта] КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Период >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъекта]", ПолноеИмяОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоДатеНачалаВыгрузкиИОрганизациям(ОсновнойОтбор,
	ПолноеИмяОбъекта,
	ДатаНачалаВыгрузки,
	Организации)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	[Измерения]
	|ИЗ
	|	[ПолноеИмяОбъекта] КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Организация В(&Организации)
	|	И ТаблицаРегистра.Период >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъекта]", ПолноеИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Измерения]", СтрСоединить(ОсновнойОтбор, ","));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоДатеНачалаВыгрузки(ОсновнойОтбор, ПолноеИмяОбъекта, ДатаНачалаВыгрузки)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	[Измерения]
	|ИЗ
	|	[ПолноеИмяОбъекта] КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Период >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъекта]", ПолноеИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Измерения]", СтрСоединить(ОсновнойОтбор, ","));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоОрганизациям(ОсновнойОтбор, ПолноеИмяОбъекта, Организации)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	[Измерения]
	|ИЗ
	|	[ПолноеИмяОбъекта] КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Организация В(&Организации)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъекта]", ПолноеИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Измерения]", СтрСоединить(ОсновнойОтбор, ","));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ОсновнойОтборРегистраСведений(ОбъектМетаданных)
	
	Результат = Новый Массив;
	
	Если ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический
		И ОбъектМетаданных.ОсновнойОтборПоПериоду Тогда
		
		Результат.Добавить("Период");
		
	КонецЕсли;
	
	Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		
		Если Измерение.ОсновнойОтбор Тогда
			
			Результат.Добавить(Измерение.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ОберткиДляРаботыСПрограммнымИнтерфейсомМенеджераПланаОбмена

Функция НастройкаОтборовНаУзле(Знач ИмяПланаОбмена, Знач ВерсияКорреспондента, ИмяФормы = "", ИдентификаторНастройки = "") Экспорт
	
	Если ПустаяСтрока(ВерсияКорреспондента) Тогда
		ВерсияКорреспондента = "0.0.0.0";
	КонецЕсли;
	
	ИмяФормы = "";
	
	Результат = ПланыОбмена[ИмяПланаОбмена].НастройкаОтборовНаУзле(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки);
	
	Если ПустаяСтрока(ИмяФормы) Тогда
		ИмяФормы = "ФормаНастройкиУзла";
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ЗначенияПоУмолчаниюНаУзле(Знач ИмяПланаОбмена, Знач ВерсияКорреспондента, ИмяФормы = "", ИдентификаторНастройки = "") Экспорт
	
	Если ПустаяСтрока(ВерсияКорреспондента) Тогда
		ВерсияКорреспондента = "0.0.0.0";
	КонецЕсли;
	
	ИмяФормы = "";
	
	Результат = ПланыОбмена[ИмяПланаОбмена].ЗначенияПоУмолчаниюНаУзле(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки);
	
	Если ПустаяСтрока(ИмяФормы) Тогда
		ИмяФормы = "ФормаНастройкиЗначенийПоУмолчанию";
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеОграниченийПередачиДанных(Знач ИмяПланаОбмена, Знач Настройка, Знач ВерсияКорреспондента, ИдентификаторНастройки = "") Экспорт
	
	Если ПустаяСтрока(ВерсияКорреспондента) Тогда
		ВерсияКорреспондента = "0.0.0.0";
	КонецЕсли;
	
	Возврат ПланыОбмена[ИмяПланаОбмена].ОписаниеОграниченийПередачиДанных(Настройка, ВерсияКорреспондента, ИдентификаторНастройки);
	
КонецФункции

Функция ОписаниеЗначенийПоУмолчанию(Знач ИмяПланаОбмена, Знач Настройка, Знач ВерсияКорреспондента, ИдентификаторНастройки = "") Экспорт
	
	Если ПустаяСтрока(ВерсияКорреспондента) Тогда
		ВерсияКорреспондента = "0.0.0.0";
	КонецЕсли;
	
	Возврат ПланыОбмена[ИмяПланаОбмена].ОписаниеЗначенийПоУмолчанию(Настройка, ВерсияКорреспондента, ИдентификаторНастройки);
	
КонецФункции

Функция ОбщиеДанныеУзлов(Знач ИмяПланаОбмена, Знач ВерсияКорреспондента, ИмяФормы = "") Экспорт
	
	Если ПустаяСтрока(ВерсияКорреспондента) Тогда
		ВерсияКорреспондента = "0.0.0.0";
	КонецЕсли;
	
	ИмяФормы = "";
	
	Результат = ПланыОбмена[ИмяПланаОбмена].ОбщиеДанныеУзлов(ВерсияКорреспондента, ИмяФормы);
	
	Если ПустаяСтрока(ИмяФормы) Тогда
		ИмяФормы = "ФормаНастройкиУзлов";
	КонецЕсли;
	
	Возврат СтрЗаменить(Результат, " ", "");
КонецФункции

Функция НастройкаОтборовНаУзлеБазыКорреспондента(Знач ИмяПланаОбмена, Знач ВерсияКорреспондента, ИмяФормы = "", ИдентификаторНастройки = "") Экспорт
	
	Если ПустаяСтрока(ВерсияКорреспондента) Тогда
		ВерсияКорреспондента = "0.0.0.0";
	КонецЕсли;
	
	ИмяФормы = "";
	
	Результат = ПланыОбмена[ИмяПланаОбмена].НастройкаОтборовНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки);
	
	Если ПустаяСтрока(ИмяФормы) Тогда
		ИмяФормы = "ФормаНастройкиУзлаБазыКорреспондента";
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(Знач ИмяПланаОбмена, Знач ВерсияКорреспондента, ИмяФормы = "", ИдентификаторНастройки = "") Экспорт
	
	Если ПустаяСтрока(ВерсияКорреспондента) Тогда
		ВерсияКорреспондента = "0.0.0.0";
	КонецЕсли;
	
	ИмяФормы = "";
	
	Результат = ПланыОбмена[ИмяПланаОбмена].ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки);
	
	Если ПустаяСтрока(ИмяФормы) Тогда
		ИмяФормы = "ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента";
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ОписаниеОграниченийПередачиДанныхБазыКорреспондента(Знач ИмяПланаОбмена, Знач НастройкаОтборовНаУзле, Знач ВерсияКорреспондента, ИдентификаторНастройки = "") Экспорт
	
	Если ПустаяСтрока(ВерсияКорреспондента) Тогда
		ВерсияКорреспондента = "0.0.0.0";
	КонецЕсли;
	
	Возврат ПланыОбмена[ИмяПланаОбмена].ОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки);
	
КонецФункции

Функция ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(Знач ИмяПланаОбмена, Знач ЗначенияПоУмолчаниюНаУзле, Знач ВерсияКорреспондента, ИдентификаторНастройки = "") Экспорт
	
	Если ПустаяСтрока(ВерсияКорреспондента) Тогда
		ВерсияКорреспондента = "0.0.0.0";
	КонецЕсли;
	
	Возврат ПланыОбмена[ИмяПланаОбмена].ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента, ИдентификаторНастройки);
	
КонецФункции

Функция ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента(Знач ИмяПланаОбмена, Знач ВерсияКорреспондента) Экспорт
	
	Если ПустаяСтрока(ВерсияКорреспондента) Тогда
		ВерсияКорреспондента = "0.0.0.0";
	КонецЕсли;
	
	Возврат ПланыОбмена[ИмяПланаОбмена].ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента(ВерсияКорреспондента);
	
КонецФункции

Процедура ПриПодключенииККорреспонденту(Знач ИмяПланаОбмена, Знач ВерсияКорреспондента) Экспорт
	
	Если ПустаяСтрока(ВерсияКорреспондента) Тогда
		ВерсияКорреспондента = "0.0.0.0";
	КонецЕсли;
	
	ПланыОбмена[ИмяПланаОбмена].ПриПодключенииККорреспонденту(ВерсияКорреспондента);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПаролямиСинхронизацииДанных

// Возвращает значения пароля синхронизации данных для заданного узла.
// Если пароля нет, то возвращается Неопределено.
//
// Возвращаемое значение:
//  Строка, Неопределено - значения пароля синхронизации данных.
//
Функция ПарольСинхронизацииДанных(Знач УзелИнформационнойБазы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПараметрыСеанса.ПаролиСинхронизацииДанных.Получить(УзелИнформационнойБазы);
КонецФункции

// Возвращает признак того, что пароль синхронизации данных был задан пользователем.
//
Функция ПарольСинхронизацииДанныхЗадан(Знач УзелИнформационнойБазы) Экспорт
	
	Возврат ПарольСинхронизацииДанных(УзелИнформационнойБазы) <> Неопределено;
	
КонецФункции

// Устанавливает пароль синхронизации данных для заданного узла.
// Пароль сохраняется в параметре сеанса.
//
Процедура УстановитьПарольСинхронизацииДанных(Знач УзелИнформационнойБазы, Знач Пароль)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПаролиСинхронизацииДанных = Новый Соответствие;
	
	Для Каждого Элемент Из ПараметрыСеанса.ПаролиСинхронизацииДанных Цикл
		
		ПаролиСинхронизацииДанных.Вставить(Элемент.Ключ, Элемент.Значение);
		
	КонецЦикла;
	
	ПаролиСинхронизацииДанных.Вставить(УзелИнформационнойБазы, Пароль);
	
	ПараметрыСеанса.ПаролиСинхронизацииДанных = Новый ФиксированноеСоответствие(ПаролиСинхронизацииДанных);
	
КонецПроцедуры

// Сбрасывает пароль синхронизации данных для заданного узла.
//
Процедура СброситьПарольСинхронизацииДанных(Знач УзелИнформационнойБазы)
	
	УстановитьПарольСинхронизацииДанных(УзелИнформационнойБазы, Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольНеразделенныхДанных

// Вызывается при проверке доступности неразделенных данных для записи.
//
Процедура ВыполнитьКонтрольЗаписиНеразделенныхДанных(Знач Данные) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных()
		И Не ЭтоРазделенныйОбъект(Данные) Тогда
		
		ПредставлениеИсключения = НСтр("ru = 'Нарушение прав доступа!'");
		ТекстИсключения = НСтр("ru = 'Нарушение прав доступа!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(
			ТекстИсключения,
			УровеньЖурналаРегистрации.Ошибка,
			Данные.Метаданные());
		
		ВызватьИсключение ПредставлениеИсключения;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоРазделенныйОбъект(Знач Объект)
	
	ПолноеИмя = Объект.Метаданные().ПолноеИмя();
	
	Возврат ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных(ПолноеИмя, ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных())
		ИЛИ ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных(ПолноеИмя, ОбщегоНазначенияПовтИсп.РазделительВспомогательныхДанных());
КонецФункции

#КонецОбласти

#Область РаботаСМониторомОбменаДанными

// Возвращает структуру с данными последнего обмена для заданного узла информационной базы.
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СостоянияОбменовДанными - Структура - структура с данными последнего обмена для заданного узла информационной базы.
//
Функция СостоянияОбменовДаннымиДляУзлаИнформационнойБазы(Знач УзелИнформационнойБазы) Экспорт
	
	// Возвращаемое значение функции.
	СостоянияОбменовДанными = Новый Структура;
	СостоянияОбменовДанными.Вставить("УзелИнформационнойБазы");
	СостоянияОбменовДанными.Вставить("РезультатЗагрузкиДанных", "Неопределено");
	СостоянияОбменовДанными.Вставить("РезультатВыгрузкиДанных", "Неопределено");
	
	ТекстЗапроса = "
	|// {ЗАПРОС №0}
	|////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|	КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|	ТОГДА ""Успех""
	|	
	|	КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями)
	|	ТОГДА ""ВыполненоСПредупреждениями""
	|	
	|	КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято)
	|	ТОГДА ""Предупреждение_СообщениеОбменаБылоРанееПринято""
	|	
	|	КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения)
	|	ТОГДА ""Ошибка_ТранспортСообщения""
	|	
	|	ИНАЧЕ ""Ошибка""
	|	
	|	КОНЕЦ КАК РезультатВыполненияОбмена
	|ИЗ
	|	РегистрСведений.[СостоянияОбменовДанными] КАК СостоянияОбменовДанными
	|ГДЕ
	|	  СостоянияОбменовДанными.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)
	|;
	|// {ЗАПРОС №1}
	|////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|	КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|	ТОГДА ""Успех""
	|	
	|	КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями)
	|	ТОГДА ""ВыполненоСПредупреждениями""
	|	
	|	КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято)
	|	ТОГДА ""Предупреждение_СообщениеОбменаБылоРанееПринято""
	|	
	|	КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения)
	|	ТОГДА ""Ошибка_ТранспортСообщения""
	|	
	|	ИНАЧЕ ""Ошибка""
	|	КОНЕЦ КАК РезультатВыполненияОбмена
	|	
	|ИЗ
	|	РегистрСведений.[СостоянияОбменовДанными] КАК СостоянияОбменовДанными
	|ГДЕ
	|	  СостоянияОбменовДанными.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных)
	|;
	|";
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[СостоянияОбменовДанными]", "СостоянияОбменовДаннымиОбластейДанных");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[СостоянияОбменовДанными]", "СостоянияОбменовДанными");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", УзелИнформационнойБазы);
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаРезультатовЗагрузкиДанных = МассивРезультатовЗапроса[0].Выбрать();
	ВыборкаРезультатовВыгрузкиДанных = МассивРезультатовЗапроса[1].Выбрать();
	
	Если ВыборкаРезультатовЗагрузкиДанных.Следующий() Тогда
		
		СостоянияОбменовДанными.РезультатЗагрузкиДанных = ВыборкаРезультатовЗагрузкиДанных.РезультатВыполненияОбмена;
		
	КонецЕсли;
	
	Если ВыборкаРезультатовВыгрузкиДанных.Следующий() Тогда
		
		СостоянияОбменовДанными.РезультатВыгрузкиДанных = ВыборкаРезультатовВыгрузкиДанных.РезультатВыполненияОбмена;
		
	КонецЕсли;
	
	СостоянияОбменовДанными.УзелИнформационнойБазы = УзелИнформационнойБазы;
	
	Возврат СостоянияОбменовДанными;
КонецФункции

// Возвращает структуру с данными последнего обмена для заданного узла информационной базы и действия при обмене.
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СостоянияОбменовДанными - Структура - структура с данными последнего обмена для заданного узла информационной базы.
//
Функция СостоянияОбменовДанными(Знач УзелИнформационнойБазы, ДействиеПриОбмене) Экспорт
	
	// Возвращаемое значение функции.
	СостоянияОбменовДанными = Новый Структура;
	СостоянияОбменовДанными.Вставить("ДатаНачала",    Дата('00010101'));
	СостоянияОбменовДанными.Вставить("ДатаОкончания", Дата('00010101'));
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДатаНачала,
	|	ДатаОкончания
	|ИЗ
	|	РегистрСведений.[СостоянияОбменовДанными] КАК СостоянияОбменовДанными
	|ГДЕ
	|	  СостоянияОбменовДанными.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И СостоянияОбменовДанными.ДействиеПриОбмене      = &ДействиеПриОбмене
	|";
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[СостоянияОбменовДанными]", "СостоянияОбменовДаннымиОбластейДанных");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[СостоянияОбменовДанными]", "СостоянияОбменовДанными");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", УзелИнформационнойБазы);
	Запрос.УстановитьПараметр("ДействиеПриОбмене",      ДействиеПриОбмене);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(СостоянияОбменовДанными, Выборка);
		
	КонецЕсли;
	
	Возврат СостоянияОбменовДанными;
	
КонецФункции

#КонецОбласти

#Область ИнициализацияСеанса

// Получает массив всех планов обмена по которым выполняется обмен данными.
// Наличие обмена с каким либо планом обмена определяется по наличию у этого плана обмена узлов кроме предопределенного.
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  МассивПлановОбмена - Массив - массив строк (имен) всех планов обмена по которым выполняется обмен данными.
//
Функция ПолучитьИспользуемыеПланыОбмена() Экспорт
	
	// возвращаемое значение
	МассивПлановОбмена = Новый Массив;
	
	// Список всех узлов в конфигурации.
	СписокПлановОбмена = ОбменДаннымиПовтИсп.СписокПлановОбменаБСП();
	
	Для Каждого Элемент Из СписокПлановОбмена Цикл
		
		ИмяПланаОбмена = Элемент.Значение;
		
		Если Не ПланОбменаНеСодержитУзлов(ИмяПланаОбмена) Тогда
			
			МассивПлановОбмена.Добавить(ИмяПланаОбмена);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПлановОбмена;
	
КонецФункции

// Получает таблицу правил регистрации объектов из информационной базы.
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  ПравилаРегистрацииОбъектов - ТаблицаЗначений - таблица общих правил регистрации объектов для МРО.
// 
Функция ПолучитьПравилаРегистрацииОбъектов() Экспорт
	
	// Возвращаемое значение функции.
	ПравилаРегистрацииОбъектов = ИнициализацияТаблицыПравилРегистрацииОбъектов();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПравилаДляОбменаДанными.ПравилаЗачитанные КАК ПравилаЗачитанные
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	  ПравилаДляОбменаДанными.ВидПравил = ЗНАЧЕНИЕ(Перечисление.ВидыПравилДляОбменаДанными.ПравилаРегистрацииОбъектов)
	|	И ПравилаДляОбменаДанными.ПравилаЗагружены
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойствДляТаблицыЗначенийПРО(ПравилаРегистрацииОбъектов, Выборка.ПравилаЗачитанные.Получить());
		
	КонецЦикла;
	
	Возврат ПравилаРегистрацииОбъектов;
	
КонецФункции

// Получает таблицу правил выборочной регистрации объектов из информационной базы.
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  ПравилаВыборочнойРегистрацииОбъектов - ТаблицаЗначений - таблица общих правил выборочной регистрации объектов для
//                                                           МРО.
// 
Функция ПолучитьПравилаВыборочнойРегистрацииОбъектов() Экспорт
	
	// Возвращаемое значение функции.
	ПравилаВыборочнойРегистрацииОбъектов = ИнициализацияТаблицыПравилВыборочнойРегистрацииОбъектов();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПравилаДляОбменаДанными.ПравилаЗачитанные КАК ПравилаЗачитанные
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	  ПравилаДляОбменаДанными.ВидПравил = ЗНАЧЕНИЕ(Перечисление.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов)
	|	И ПравилаДляОбменаДанными.ИспользоватьФильтрВыборочнойРегистрацииОбъектов
	|	И ПравилаДляОбменаДанными.ПравилаЗагружены
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПравилОбмена = Выборка.ПравилаЗачитанные.Получить();
		
		ЗаполнитьЗначенияСвойствДляТаблицыЗначений(ПравилаВыборочнойРегистрацииОбъектов, СтруктураПравилОбмена["ПравилаВыборочнойРегистрацииОбъектов"]);
		
	КонецЦикла;
	
	Возврат ПравилаВыборочнойРегистрацииОбъектов;
	
КонецФункции

Функция ИнициализацияТаблицыПравилРегистрацииОбъектов() Экспорт
	
	// Возвращаемое значение функции.
	Правила = Новый ТаблицаЗначений;
	
	Колонки = Правила.Колонки;
	
	Колонки.Добавить("ОбъектМетаданныхИмя", Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ИмяПланаОбмена",      Новый ОписаниеТипов("Строка"));
	
	Колонки.Добавить("ИмяРеквизитаФлага", Новый ОписаниеТипов("Строка"));
	
	Колонки.Добавить("ТекстЗапроса",    Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("СвойстваОбъекта", Новый ОписаниеТипов("Структура"));
	
	Колонки.Добавить("СвойстваОбъектаСтрокой", Новый ОписаниеТипов("Строка"));
	
	// Признаки того, что правила пустые.
	Колонки.Добавить("ПравилоПоСвойствамОбъектаПустое", Новый ОписаниеТипов("Булево"));
	
	// обработчики событий
	Колонки.Добавить("ПередОбработкой",            Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ПриОбработке",               Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ПриОбработкеДополнительный", Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ПослеОбработки",             Новый ОписаниеТипов("Строка"));
	
	Колонки.Добавить("ЕстьОбработчикПередОбработкой",            Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("ЕстьОбработчикПриОбработке",               Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("ЕстьОбработчикПриОбработкеДополнительный", Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("ЕстьОбработчикПослеОбработки",             Новый ОписаниеТипов("Булево"));
	
	Колонки.Добавить("ОтборПоСвойствамОбъекта", Новый ОписаниеТипов("ДеревоЗначений"));
	
	// Поле для оперативного хранения данных из объекта или ссылки.
	Колонки.Добавить("ОтборПоСвойствам", Новый ОписаниеТипов("ДеревоЗначений"));
	
	// добавляем индекс
	Правила.Индексы.Добавить("ИмяПланаОбмена, ОбъектМетаданныхИмя");
	
	Возврат Правила;
	
КонецФункции

Функция ИнициализацияТаблицыПравилВыборочнойРегистрацииОбъектов() Экспорт
	
	// Возвращаемое значение функции.
	Правила = Новый ТаблицаЗначений;
	
	Колонки = Правила.Колонки;
	
	Колонки.Добавить("Порядок",                        Новый ОписаниеТипов("Число"));
	Колонки.Добавить("ИмяОбъекта",                     Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ИмяПланаОбмена",                 Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ИмяТабличнойЧасти",              Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("РеквизитыРегистрации",           Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("СтруктураРеквизитовРегистрации", Новый ОписаниеТипов("Структура"));
	
	// добавляем индекс
	Правила.Индексы.Добавить("ИмяПланаОбмена, ИмяОбъекта");
	
	Возврат Правила;
	
КонецФункции

Функция ПланОбменаНеСодержитУзлов(Знач ИмяПланаОбмена)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1 1
	|ИЗ
	|	ПланОбмена." + ИмяПланаОбмена + " КАК ПланОбмена
	|ГДЕ
	|	НЕ ПланОбмена.ЭтотУзел
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Пустой()
	
КонецФункции

Процедура ЗаполнитьЗначенияСвойствДляТаблицыЗначенийПРО(ТаблицаПриемник, ТаблицаИсточник)
	
	Для Каждого СтрокаИсточника Из ТаблицаИсточник Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаИсточника);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияСвойствДляТаблицыЗначений(ТаблицаПриемник, ТаблицаИсточник)
	
	Для Каждого СтрокаИсточника Из ТаблицаИсточник Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаИсточника);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеПравилСинхронизацииДанных(Знач УзелИнформационнойБазы) Экспорт
	
	ВерсияКорреспондента = ВерсияКорреспондента(УзелИнформационнойБазы);
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
	
	Настройка = ЗначенияНастроекОтборовНаУзле(УзелИнформационнойБазы, ВерсияКорреспондента);
	
	Возврат ОписаниеОграниченийПередачиДанных(ИмяПланаОбмена, Настройка, ВерсияКорреспондента, СохраненныйВариантНастройкиУзлаПланаОбмена(УзелИнформационнойБазы));
	
КонецФункции

Функция ЗначенияНастроекОтборовНаУзле(Знач УзелИнформационнойБазы, Знач ВерсияКорреспондента)
	
	Результат = Новый Структура;
	
	УзелИнформационнойБазыОбъект = УзелИнформационнойБазы.ПолучитьОбъект();
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
	
	НастройкаОтборовНаУзле = НастройкаОтборовНаУзле(ИмяПланаОбмена, ВерсияКорреспондента, , СохраненныйВариантНастройкиУзлаПланаОбмена(УзелИнформационнойБазы));
	
	Для Каждого Настройка Из НастройкаОтборовНаУзле Цикл
		
		Если ТипЗнч(Настройка.Значение) = Тип("Структура") Тогда
			
			ТабличнаяЧасть = Новый Структура;
			
			Для Каждого Колонка Из Настройка.Значение Цикл
				
				ТабличнаяЧасть.Вставить(Колонка.Ключ, УзелИнформационнойБазыОбъект[Настройка.Ключ].ВыгрузитьКолонку(Колонка.Ключ));
				
			КонецЦикла;
			
			Результат.Вставить(Настройка.Ключ, ТабличнаяЧасть);
			
		Иначе
			
			Результат.Вставить(Настройка.Ключ, УзелИнформационнойБазыОбъект[Настройка.Ключ]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьРежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском(Знач Свойство, Знач ВключитьРежим) Экспорт
	
	// Перед вызовом требуется установить привилегированный режим.
	
	Если ЭтоПодчиненныйУзелРИБ() Тогда
		
		НоваяСтруктура = Новый Структура(ПараметрыСеанса.РежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском);
		Если ВключитьРежим Тогда
			Если НЕ НоваяСтруктура.Свойство(Свойство) Тогда
				НоваяСтруктура.Вставить(Свойство);
			КонецЕсли;
		Иначе
			Если НоваяСтруктура.Свойство(Свойство) Тогда
				НоваяСтруктура.Удалить(Свойство);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыСеанса.РежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском =
			Новый ФиксированнаяСтруктура(НоваяСтруктура);
	Иначе
		
		ПараметрыСеанса.РежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском = Новый ФиксированнаяСтруктура;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияСтруктурыНастроекОбмена

// Выполняет инициализацию подсистемы обмена данными для выполнения процесса обмена.
//
// Параметры:
// 
// Возвращаемое значение:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена.
//
Функция ПолучитьСтруктуруНастроекОбменаДляУзлаИнформационнойБазы(
	УзелИнформационнойБазы,
	ДействиеПриОбмене,
	ВидТранспортаСообщенийОбмена,
	ИспользоватьНастройкиТранспорта = Истина) Экспорт
	
	// Возвращаемое значение функции.
	СтруктураНастроекОбмена = СтруктураНастроекОбменаБазовая();
	
	СтруктураНастроекОбмена.УзелИнформационнойБазы = УзелИнформационнойБазы;
	СтруктураНастроекОбмена.ДействиеПриОбмене      = ДействиеПриОбмене;
	СтруктураНастроекОбмена.ВидТранспортаОбмена    = ВидТранспортаСообщенийОбмена;
	СтруктураНастроекОбмена.ЭтоОбменВРИБ           = ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(УзелИнформационнойБазы);
	
	ВыполнитьИнициализациюСтруктурыНастроекОбменаДляУзлаИнформационнойБазы(СтруктураНастроекОбмена, ИспользоватьНастройкиТранспорта);
	
	УстановитьНастройкиРежимаОтладкиДляСтруктуры(СтруктураНастроекОбмена);
	
	// Проверяем структуру настроек на валидность значений для выполнения обмена. Ошибки фиксируем в ЖР.
	ВыполнитьПроверкуСтруктурыОбменаНаВалидность(СтруктураНастроекОбмена, ИспользоватьНастройкиТранспорта);
	
	// Если настройки содержат ошибки, то выходим.
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат СтруктураНастроекОбмена;
	КонецЕсли;
	
	Если ИспользоватьНастройкиТранспорта Тогда
		
		// Инициализируем обработку транспорта сообщений обмена.
		ВыполнитьИнициализациюОбработкиТранспортаСообщенийОбмена(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
	// Инициализируем обработку обмена данными.
	Если СтруктураНастроекОбмена.ЭтоОбменВРИБ Тогда
		
		ВыполнитьИнициализациюОбработкиОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов Тогда
		
		ВыполнитьИнициализациюОбработкиОбменаПоПравиламКонвертации(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
	Возврат СтруктураНастроекОбмена;
КонецФункции

Функция ПолучитьСтруктуруНастроекОбменаДляВнешнегоСоединения(УзелИнформационнойБазы, ДействиеПриОбмене, КоличествоЭлементовВТранзакции)
	
	// Возвращаемое значение функции.
	СтруктураНастроекОбмена = СтруктураНастроекОбменаБазовая();
	
	СтруктураНастроекОбмена.УзелИнформационнойБазы = УзелИнформационнойБазы;
	СтруктураНастроекОбмена.ДействиеПриОбмене      = ДействиеПриОбмене;
	СтруктураНастроекОбмена.ЭтоОбменВРИБ           = ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(УзелИнформационнойБазы);
	
	СтруктураСвойств = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураНастроекОбмена.УзелИнформационнойБазы, "Код, Наименование");
	
	СтруктураНастроекОбмена.УзелИнформационнойБазыКод          = СтруктураСвойств.Код;
	СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование = СтруктураСвойств.Наименование;
	
	СтруктураНастроекОбмена.НастройкиТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспорта(СтруктураНастроекОбмена.УзелИнформационнойБазы);
	
	Если КоличествоЭлементовВТранзакции = Неопределено Тогда
		КоличествоЭлементовВТранзакции = КоличествоЭлементовВТранзакцииВыполняемогоДействия(ДействиеПриОбмене);
	КонецЕсли;
	
	СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции = КоличествоЭлементовВТранзакции;
	
	// ВЫЧИСЛЯЕМЫЕ ЗНАЧЕНИЯ
	СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных = (СтруктураНастроекОбмена.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных = (СтруктураНастроекОбмена.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	
	СтруктураНастроекОбмена.ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(СтруктураНастроекОбмена.УзелИнформационнойБазы);
	
	СтруктураНастроекОбмена.ТекущийУзелПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена(СтруктураНастроекОбмена.ИмяПланаОбмена);
	СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураНастроекОбмена.ТекущийУзелПланаОбмена, "Код");
	
	// Получаем ключ сообщения для ЖР.
	СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(СтруктураНастроекОбмена.УзелИнформационнойБазы, СтруктураНастроекОбмена.ДействиеПриОбмене);
	
	СтруктураНастроекОбмена.ВидТранспортаОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.COM;
	
	УстановитьНастройкиРежимаОтладкиДляСтруктуры(СтруктураНастроекОбмена);
	
	// Проверяем структуру настроек на валидность значений для выполнения обмена. Ошибки фиксируем в ЖР.
	ВыполнитьПроверкуСтруктурыОбменаНаВалидность(СтруктураНастроекОбмена);
	
	// Если настройки содержат ошибки, то выходим.
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат СтруктураНастроекОбмена;
	КонецЕсли;
	
	// Инициализируем обработку обмена данными.
	ВыполнитьИнициализациюОбработкиОбменаПоПравиламКонвертации(СтруктураНастроекОбмена);
	
	Возврат СтруктураНастроекОбмена;
КонецФункции

// Выполняет инициализацию подсистемы обмена данными для выполнения процесса обмена.
//
// Параметры:
// 
// Возвращаемое значение:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена.
//
Функция ПолучитьСтруктуруНастроекОбмена(НастройкаВыполненияОбмена, НомерСтроки) Экспорт
	
	// Возвращаемое значение функции.
	СтруктураНастроекОбмена = СтруктураНастроекОбменаБазовая();
	
	ВыполнитьИнициализациюСтруктурыНастроекОбмена(СтруктураНастроекОбмена, НастройкаВыполненияОбмена, НомерСтроки);
	
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат СтруктураНастроекОбмена;
	КонецЕсли;
	
	УстановитьНастройкиРежимаОтладкиДляСтруктуры(СтруктураНастроекОбмена);
	
	// Проверяем структуру настроек на валидность значений для выполнения обмена. Ошибки фиксируем в ЖР.
	ВыполнитьПроверкуСтруктурыОбменаНаВалидность(СтруктураНастроекОбмена);
	
	// Если настройки содержат ошибки, то выходим.
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат СтруктураНастроекОбмена;
	КонецЕсли;
	
	// Инициализируем обработку транспорта сообщений обмена.
	ВыполнитьИнициализациюОбработкиТранспортаСообщенийОбмена(СтруктураНастроекОбмена);
	
	// Инициализируем обработку обмена данными.
	Если СтруктураНастроекОбмена.ЭтоОбменВРИБ Тогда
		
		ВыполнитьИнициализациюОбработкиОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов Тогда
		
		ВыполнитьИнициализациюОбработкиОбменаПоПравиламКонвертации(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
	Возврат СтруктураНастроекОбмена;
КонецФункции

// Получает структуру настроек транспорта для выполнения обмена данными.
//
Функция ПолучитьСтруктуруНастроекТранспорта(УзелИнформационнойБазы, ВидТранспортаСообщенийОбмена) Экспорт
	
	// Возвращаемое значение функции.
	СтруктураНастроекОбмена = СтруктураНастроекОбменаБазовая();
	
	СтруктураНастроекОбмена.УзелИнформационнойБазы = УзелИнформационнойБазы;
	СтруктураНастроекОбмена.ДействиеПриОбмене      = Перечисления.ДействияПриОбмене.ЗагрузкаДанных;
	СтруктураНастроекОбмена.ВидТранспортаОбмена    = ВидТранспортаСообщенийОбмена;
	
	ВыполнитьИнициализациюСтруктурыНастроекОбменаДляУзлаИнформационнойБазы(СтруктураНастроекОбмена, Истина);
	
	// Проверяем структуру настроек на валидность значений для выполнения обмена. Ошибки фиксируем в ЖР.
	ВыполнитьПроверкуСтруктурыОбменаНаВалидность(СтруктураНастроекОбмена);
	
	// Если настройки содержат ошибки, то выходим.
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат СтруктураНастроекОбмена;
	КонецЕсли;
	
	// Инициализируем обработку транспорта сообщений обмена.
	ВыполнитьИнициализациюОбработкиТранспортаСообщенийОбмена(СтруктураНастроекОбмена);
	
	Возврат СтруктураНастроекОбмена;
КонецФункции

Функция СтруктураНастроекОбменаДляСеансаИнтерактивнойЗагрузки(Знач УзелИнформационнойБазы, Знач ИмяФайлаСообщенияОбмена) Экспорт
	
	Возврат ОбменДаннымиПовтИсп.СтруктураНастроекОбменаДляСеансаИнтерактивнойЗагрузки(УзелИнформационнойБазы, ИмяФайлаСообщенияОбмена);
	
КонецФункции

Процедура ВыполнитьИнициализациюСтруктурыНастроекОбмена(СтруктураНастроекОбмена, НастройкаВыполненияОбмена, НомерСтроки)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НастройкиВыполненияОбменаНастройкиОбмена.УзелИнформационнойБазы         КАК УзелИнформационнойБазы,
	|	НастройкиВыполненияОбменаНастройкиОбмена.УзелИнформационнойБазы.Код     КАК УзелИнформационнойБазыКод,
	|	НастройкиВыполненияОбменаНастройкиОбмена.ВидТранспортаОбмена            КАК ВидТранспортаОбмена,
	|	НастройкиВыполненияОбменаНастройкиОбмена.ВыполняемоеДействие            КАК ДействиеПриОбмене,
	|	НастройкиВыполненияОбменаНастройкиОбмена.Ссылка                         КАК НастройкаВыполненияОбмена,
	|	НастройкиВыполненияОбменаНастройкиОбмена.Ссылка.Наименование            КАК НастройкаВыполненияОбменаНаименование,
	|	ВЫБОР
	|		КОГДА НастройкиВыполненияОбменаНастройкиОбмена.ВыполняемоеДействие = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных) ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                                   КАК ПроизводитьЗагрузкуДанных,
	|	ВЫБОР
	|		КОГДА НастройкиВыполненияОбменаНастройкиОбмена.ВыполняемоеДействие = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных) ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                                   КАК ПроизводитьВыгрузкуДанных
	|ИЗ
	|	Справочник.СценарииОбменовДанными.НастройкиОбмена КАК НастройкиВыполненияОбменаНастройкиОбмена
	|ГДЕ
	|	  НастройкиВыполненияОбменаНастройкиОбмена.Ссылка      = &НастройкаВыполненияОбмена
	|	И НастройкиВыполненияОбменаНастройкиОбмена.НомерСтроки = &НомерСтроки
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НастройкаВыполненияОбмена", НастройкаВыполненияОбмена);
	Запрос.УстановитьПараметр("НомерСтроки",               НомерСтроки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	// Заполняем значения свойств структуры.
	ЗаполнитьЗначенияСвойств(СтруктураНастроекОбмена, Выборка);
	
	СтруктураНастроекОбмена.ЭтоОбменВРИБ = ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(СтруктураНастроекОбмена.УзелИнформационнойБазы);
	
	СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = НСтр("ru = 'Обмен данными'");
	
	// Выполняем проверку задания основных полей структуры настроек обмена.
	ВыполнитьПроверкуОсновныхПолейСтруктурыНастроекОбмена(СтруктураНастроекОбмена);
	
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//
	СтруктураНастроекОбмена.ИмяПланаОбмена = СтруктураНастроекОбмена.УзелИнформационнойБазы.Метаданные().Имя;
	СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов = ОбменДаннымиПовтИсп.ЭтоУзелУниверсальногоОбменаДанными(СтруктураНастроекОбмена.УзелИнформационнойБазы);
	
	СтруктураНастроекОбмена.ТекущийУзелПланаОбмена    = ПланыОбмена[СтруктураНастроекОбмена.ИмяПланаОбмена].ЭтотУзел();
	СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод = СтруктураНастроекОбмена.ТекущийУзелПланаОбмена.Код;
	
	СтруктураНастроекОбмена.ИмяОбработкиТранспортаСообщенийОбмена = ИмяОбработкиТранспортаСообщенийОбмена(СтруктураНастроекОбмена.ВидТранспортаОбмена);
	
	// Получаем ключ сообщения для ЖР.
	СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(СтруктураНастроекОбмена.УзелИнформационнойБазы, СтруктураНастроекОбмена.ДействиеПриОбмене);
	
	//
	СтруктураНастроекОбмена.НастройкиТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспорта(СтруктураНастроекОбмена.УзелИнформационнойБазы, СтруктураНастроекОбмена.ВидТранспортаОбмена);
	
	СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции = КоличествоЭлементовВТранзакцииВыполняемогоДействия(СтруктураНастроекОбмена.ДействиеПриОбмене);
	
КонецПроцедуры

Процедура ВыполнитьИнициализациюСтруктурыНастроекОбменаДляУзлаИнформационнойБазы(
		СтруктураНастроекОбмена,
		ИспользоватьНастройкиТранспорта)
	
	СтруктураСвойств = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураНастроекОбмена.УзелИнформационнойБазы, "Код, Наименование");
	
	СтруктураНастроекОбмена.УзелИнформационнойБазыКод          = СтруктураСвойств.Код;
	СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование = СтруктураСвойств.Наименование;
	
	// Получаем настройки транспорта обмена.
	СтруктураНастроекОбмена.НастройкиТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспорта(СтруктураНастроекОбмена.УзелИнформационнойБазы);
	
	Если СтруктураНастроекОбмена.НастройкиТранспорта <> Неопределено Тогда
		
		Если ИспользоватьНастройкиТранспорта Тогда
			
			// Если не указан вид транспорта, то используем значение по умолчанию.
			Если СтруктураНастроекОбмена.ВидТранспортаОбмена = Неопределено Тогда
				СтруктураНастроекОбмена.ВидТранспортаОбмена = СтруктураНастроекОбмена.НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию;
			КонецЕсли;
			
			// Если вид транспорта не задан, то используем транспорт FILE.
			Если Не ЗначениеЗаполнено(СтруктураНастроекОбмена.ВидТранспортаОбмена) Тогда
				
				СтруктураНастроекОбмена.ВидТранспортаОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
				
			КонецЕсли;
			
			СтруктураНастроекОбмена.ИмяОбработкиТранспортаСообщенийОбмена = ИмяОбработкиТранспортаСообщенийОбмена(СтруктураНастроекОбмена.ВидТранспортаОбмена);
			
		КонецЕсли;
		
		СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции = КоличествоЭлементовВТранзакцииВыполняемогоДействия(СтруктураНастроекОбмена.ДействиеПриОбмене);
		
		Если СтруктураНастроекОбмена.НастройкиТранспорта.Свойство("WSИспользоватьПередачуБольшогоОбъемаДанных") Тогда
			СтруктураНастроекОбмена.ИспользоватьПередачуБольшогоОбъемаДанных = СтруктураНастроекОбмена.НастройкиТранспорта.WSИспользоватьПередачуБольшогоОбъемаДанных;
		КонецЕсли;
		
	КонецЕсли;
	
	// ЗНАЧЕНИЯ ПО УМОЛЧАНИЮ
	СтруктураНастроекОбмена.НастройкаВыполненияОбмена             = Неопределено;
	СтруктураНастроекОбмена.НастройкаВыполненияОбменаНаименование = "";
	
	// ВЫЧИСЛЯЕМЫЕ ЗНАЧЕНИЯ
	СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных = (СтруктураНастроекОбмена.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных = (СтруктураНастроекОбмена.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	
	СтруктураНастроекОбмена.ИмяПланаОбмена = СтруктураНастроекОбмена.УзелИнформационнойБазы.Метаданные().Имя;
	СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов = ОбменДаннымиПовтИсп.ЭтоУзелУниверсальногоОбменаДанными(СтруктураНастроекОбмена.УзелИнформационнойБазы);
	
	СтруктураНастроекОбмена.ТекущийУзелПланаОбмена    = ПланыОбмена[СтруктураНастроекОбмена.ИмяПланаОбмена].ЭтотУзел();
	СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод = СтруктураНастроекОбмена.ТекущийУзелПланаОбмена.Код;
	
	// Получаем ключ сообщения для ЖР.
	СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(СтруктураНастроекОбмена.УзелИнформационнойБазы, СтруктураНастроекОбмена.ДействиеПриОбмене);
	
КонецПроцедуры

Функция СтруктураНастроекОбменаБазовая()
	
	СтруктураНастроекОбмена = Новый Структура;
	
	// Структура настроек по полям запроса.
	
	СтруктураНастроекОбмена.Вставить("ДатаНачала");
	СтруктураНастроекОбмена.Вставить("ДатаОкончания");
	
	СтруктураНастроекОбмена.Вставить("НомерСтроки");
	СтруктураНастроекОбмена.Вставить("НастройкаВыполненияОбмена");
	СтруктураНастроекОбмена.Вставить("НастройкаВыполненияОбменаНаименование");
	СтруктураНастроекОбмена.Вставить("УзелИнформационнойБазы");
	СтруктураНастроекОбмена.Вставить("УзелИнформационнойБазыКод", "");
	СтруктураНастроекОбмена.Вставить("УзелИнформационнойБазыНаименование", "");
	СтруктураНастроекОбмена.Вставить("ВидТранспортаОбмена");
	СтруктураНастроекОбмена.Вставить("ДействиеПриОбмене");
	СтруктураНастроекОбмена.Вставить("КоличествоЭлементовВТранзакции", 1); // На каждый элемент отдельная транзакция.
	СтруктураНастроекОбмена.Вставить("ПроизводитьЗагрузкуДанных", Ложь);
	СтруктураНастроекОбмена.Вставить("ПроизводитьВыгрузкуДанных", Ложь);
	СтруктураНастроекОбмена.Вставить("ИспользоватьПередачуБольшогоОбъемаДанных", Ложь);
	
	// Структура настроек дополнительная.
	СтруктураНастроекОбмена.Вставить("Отказ", Ложь);
	СтруктураНастроекОбмена.Вставить("ЭтоОбменВРИБ", Ложь);
	
	СтруктураНастроекОбмена.Вставить("ОбработкаОбменаДанными");
	СтруктураНастроекОбмена.Вставить("ОбработкаТранспортаСообщенийОбмена");
	
	СтруктураНастроекОбмена.Вставить("ИмяПланаОбмена");
	СтруктураНастроекОбмена.Вставить("ТекущийУзелПланаОбмена");
	СтруктураНастроекОбмена.Вставить("ТекущийУзелПланаОбменаКод");
	
	СтруктураНастроекОбмена.Вставить("ОбменПоПравиламКонвертацииОбъектов", Ложь);
	
	СтруктураНастроекОбмена.Вставить("ИмяОбработкиТранспортаСообщенийОбмена");
	
	СтруктураНастроекОбмена.Вставить("КлючСообщенияЖурналаРегистрации");
	
	СтруктураНастроекОбмена.Вставить("НастройкиТранспорта");
	
	СтруктураНастроекОбмена.Вставить("ПравилаКонвертацииОбъектов");
	СтруктураНастроекОбмена.Вставить("ПравилаЗагружены", Ложь);
	
	СтруктураНастроекОбмена.Вставить("ОтладкаОбработчиковВыгрузки ", Ложь);
	СтруктураНастроекОбмена.Вставить("ОтладкаОбработчиковЗагрузки", Ложь);
	СтруктураНастроекОбмена.Вставить("ИмяФайлаВнешнейОбработкиОтладкиВыгрузки", "");
	СтруктураНастроекОбмена.Вставить("ИмяФайлаВнешнейОбработкиОтладкиЗагрузки", "");
	СтруктураНастроекОбмена.Вставить("РежимПротоколированияОбменаДанными", Ложь);
	СтруктураНастроекОбмена.Вставить("ИмяФайлаПротоколаОбмена", "");
	СтруктураНастроекОбмена.Вставить("ПродолжитьПриОшибке", Ложь);
	
	// Структура для регистрации событий в ЖР.
	СтруктураНастроекОбмена.Вставить("РезультатВыполненияОбмена");
	СтруктураНастроекОбмена.Вставить("ДействиеПриОбмене");
	СтруктураНастроекОбмена.Вставить("КоличествоОбъектовОбработано", 0);
	СтруктураНастроекОбмена.Вставить("СообщениеПриОбмене",           "");
	СтруктураНастроекОбмена.Вставить("СтрокаСообщенияОбОшибке",      "");
	
	Возврат СтруктураНастроекОбмена;
КонецФункции

Процедура ВыполнитьПроверкуОсновныхПолейСтруктурыНастроекОбмена(СтруктураНастроекОбмена)
	
	Если НЕ ЗначениеЗаполнено(СтруктураНастроекОбмена.УзелИнформационнойБазы) Тогда
		
		// Узел информационной базы не должен быть пустым.
		СтрокаСообщенияОбОшибке = НСтр(
		"ru = 'Не задан узел информационной базы с которым нужно производить обмен информацией. Обмен отменен.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураНастроекОбмена.ВидТранспортаОбмена) Тогда
		
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не задан вид транспорта обмена. Обмен отменен.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураНастроекОбмена.ДействиеПриОбмене) Тогда
		
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не указано выполняемое действие (выгрузка / загрузка). Обмен отменен.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПроверкуСтруктурыОбменаНаВалидность(СтруктураНастроекОбмена, ИспользоватьНастройкиТранспорта = Истина)
	
	Если НЕ ЗначениеЗаполнено(СтруктураНастроекОбмена.УзелИнформационнойБазы) Тогда
		
		// Узел информационной базы не должен быть пустым.
		СтрокаСообщенияОбОшибке = НСтр(
		"ru = 'Не задан узел информационной базы с которым нужно производить обмен информацией. Обмен отменен.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли ИспользоватьНастройкиТранспорта И НЕ ЗначениеЗаполнено(СтруктураНастроекОбмена.ВидТранспортаОбмена) Тогда
		
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не задан вид транспорта обмена. Обмен отменен.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураНастроекОбмена.ДействиеПриОбмене) Тогда
		
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не указано выполняемое действие (выгрузка / загрузка). Обмен отменен.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли СтруктураНастроекОбмена.УзелИнформационнойБазы.ПометкаУдаления Тогда
		
		// Узел информационной базы не должен быть помечен на удаление.
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Узел информационной базы помечен на удаление. Обмен отменен.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
	
	ИначеЕсли СтруктураНастроекОбмена.УзелИнформационнойБазы = СтруктураНастроекОбмена.ТекущийУзелПланаОбмена Тогда
		
		// Сами с собой не обмениваемся.
		СтрокаСообщенияОбОшибке = НСтр(
		"ru = 'Нельзя организовать обмен данными с текущим узлом информационной базы. Обмен отменен.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
	
	ИначеЕсли ПустаяСтрока(СтруктураНастроекОбмена.УзелИнформационнойБазыКод)
		  ИЛИ ПустаяСтрока(СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод) Тогда
		
		// У узлов участвующих в обмене должен быть не пустой код.
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Один из узлов обмена имеет пустой код. Обмен отменен.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли СтруктураНастроекОбмена.ОтладкаОбработчиковВыгрузки Тогда
		
		ФайлОбработкиВыгрузки = Новый Файл(СтруктураНастроекОбмена.ИмяФайлаВнешнейОбработкиОтладкиВыгрузки);
		
		Если Не ФайлОбработкиВыгрузки.Существует() Тогда
			
			СтрокаСообщенияОбОшибке = НСтр("ru = 'Файл внешней обработки для отладки выгрузки не существует. Обмен отменен.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
			
			ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураНастроекОбмена.ОтладкаОбработчиковЗагрузки Тогда
		
		ФайлОбработкиЗагрузки = Новый Файл(СтруктураНастроекОбмена.ИмяФайлаВнешнейОбработкиОтладкиЗагрузки);
		
		Если Не ФайлОбработкиЗагрузки.Существует() Тогда
			
			СтрокаСообщенияОбОшибке = НСтр("ru = 'Файл внешней обработки для отладки загрузки не существует. Обмен отменен.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
			
			ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьИнициализациюОбработкиОбмена(СтруктураНастроекОбмена)
	
	// Если настройки содержат ошибки, то не производим инициализацию.
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// создание
	ОбработкаОбменаДанными = Обработки.КонвертацияОбъектовРаспределенныхИнформационныхБаз.Создать();
	
	// инициализация свойств
	ОбработкаОбменаДанными.УзелИнформационнойБазы          = СтруктураНастроекОбмена.УзелИнформационнойБазы;
	ОбработкаОбменаДанными.КоличествоЭлементовВТранзакции  = СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции;
	ОбработкаОбменаДанными.КлючСообщенияЖурналаРегистрации = СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации;
	
	СтруктураНастроекОбмена.Вставить("ОбработкаОбменаДанными", ОбработкаОбменаДанными);
	
КонецПроцедуры

Процедура ВыполнитьИнициализациюОбработкиОбменаПоПравиламКонвертации(СтруктураНастроекОбмена)
	
	Перем ОбработкаОбменаДанными;
	
	// Если настройки содержат ошибки, то не производим инициализацию.
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных Тогда
		
		ОбработкаОбменаДанными = ПолучитьОбработкуОбменаДаннымиДляВыгрузки(СтруктураНастроекОбмена);
		
	ИначеЕсли СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных Тогда
		
		ОбработкаОбменаДанными = ПолучитьОбработкуОбменаДаннымиДляЗагрузки(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
	СтруктураНастроекОбмена.Вставить("ОбработкаОбменаДанными", ОбработкаОбменаДанными);
	
КонецПроцедуры

Процедура ВыполнитьИнициализациюОбработкиТранспортаСообщенийОбмена(СтруктураНастроекОбмена)
	
	// Создаем обработку транспорта.
	ОбработкаТранспортаСообщенийОбмена = Обработки[СтруктураНастроекОбмена.ИмяОбработкиТранспортаСообщенийОбмена].Создать();
	
	ЭтоИсходящееСообщение = СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных;
	
	// Заполняем общие реквизиты, одинаковые для всех обработок транспорта.
	ОбработкаТранспортаСообщенийОбмена.ШаблонИмениФайлаСообщения = ПолучитьШаблонИмениФайлаСообщения(СтруктураНастроекОбмена.ТекущийУзелПланаОбмена, СтруктураНастроекОбмена.УзелИнформационнойБазы, ЭтоИсходящееСообщение);
	
	// Заполняем настойки транспорта, различные для каждой обработки транспорта.
	ЗаполнитьЗначенияСвойств(ОбработкаТранспортаСообщенийОбмена, СтруктураНастроекОбмена.НастройкиТранспорта);
	
	// Инициализируем транспорт
	ОбработкаТранспортаСообщенийОбмена.Инициализация();
	
	СтруктураНастроекОбмена.Вставить("ОбработкаТранспортаСообщенийОбмена", ОбработкаТранспортаСообщенийОбмена);
	
КонецПроцедуры

Функция ПолучитьОбработкуОбменаДаннымиДляВыгрузки(СтруктураНастроекОбмена)
	
	МенеджерОбработки = ?(ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(СтруктураНастроекОбмена.УзелИнформационнойБазы),
		Обработки.КонвертацияОбъектовXDTO,
		Обработки.КонвертацияОбъектовИнформационныхБаз);
	
	ОбработкаОбменаДанными = МенеджерОбработки.Создать();
	
	ОбработкаОбменаДанными.РежимОбмена = "Выгрузка";
	
	// Если обработка поддерживает механизм правил конвертации.
	Если ОбработкаОбменаДанными.Метаданные().Реквизиты.Найти("ИмяФайлаПравилОбмена") <> Неопределено Тогда
		УстановитьПравилаОбменаВыгрузкиДанных(ОбработкаОбменаДанными, СтруктураНастроекОбмена);
		ОбработкаОбменаДанными.НеВыгружатьОбъектыПоСсылкам = Истина;
		ОбработкаОбменаДанными.ИмяФайлаПравилОбмена        = "1";
	КонецЕсли;
	
	// Если обработка поддерживает механизм фонового обмена.
	Если ОбработкаОбменаДанными.Метаданные().Реквизиты.Найти("УзелДляФоновогоОбмена") <> Неопределено Тогда
		ОбработкаОбменаДанными.УзелДляФоновогоОбмена = Неопределено;
	КонецЕсли;
		
	ОбработкаОбменаДанными.УзелДляОбмена = СтруктураНастроекОбмена.УзелИнформационнойБазы;
	
	УстановитьОбщиеПараметрыДляОбработкиОбменаДанными(ОбработкаОбменаДанными, СтруктураНастроекОбмена);
	
	Возврат ОбработкаОбменаДанными;
	
КонецФункции

Функция ПолучитьОбработкуОбменаДаннымиДляЗагрузки(СтруктураНастроекОбмена)
	
	МенеджерОбработки = ?(ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(СтруктураНастроекОбмена.УзелИнформационнойБазы),
		Обработки.КонвертацияОбъектовXDTO,
		Обработки.КонвертацияОбъектовИнформационныхБаз);
	
	ОбработкаОбменаДанными = МенеджерОбработки.Создать();
	
	ОбработкаОбменаДанными.РежимОбмена = "Загрузка";
	ОбработкаОбменаДанными.УзелОбменаЗагрузкаДанных = СтруктураНастроекОбмена.УзелИнформационнойБазы;
	
	Если ОбработкаОбменаДанными.Метаданные().Реквизиты.Найти("ИмяФайлаПравилОбмена") <> Неопределено Тогда
		УстановитьПравилаОбменаЗагрузкиДанных(ОбработкаОбменаДанными, СтруктураНастроекОбмена);
	КонецЕсли;
	
	УстановитьОбщиеПараметрыДляОбработкиОбменаДанными(ОбработкаОбменаДанными, СтруктураНастроекОбмена);
	
	Возврат ОбработкаОбменаДанными
	
КонецФункции

Процедура УстановитьОбщиеПараметрыДляОбработкиОбменаДанными(ОбработкаОбменаДанными, СтруктураНастроекОбмена, ОбменСБСП20 = Ложь)
	
	ОбработкаОбменаДанными.ДописыватьДанныеВПротоколОбмена = Ложь;
	ОбработкаОбменаДанными.ВыгружатьТолькоРазрешенные      = Ложь;
	
	ОбработкаОбменаДанными.ИспользоватьТранзакции         = СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции <> 1;
	ОбработкаОбменаДанными.КоличествоОбъектовНаТранзакцию = СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции;
	
	ОбработкаОбменаДанными.КлючСообщенияЖурналаРегистрации = СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации;
	
	Если Не ОбменСБСП20 Тогда
		
		УстановитьНастройкиРежимаОтладкиДляОбработки(ОбработкаОбменаДанными, СтруктураНастроекОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПравилаОбменаВыгрузкиДанных(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбмена)
	
	ПравилаКонвертацииОбъектов = РегистрыСведений.ПравилаДляОбменаДанными.ПолучитьЗачитанныеПравилаКонвертацииОбъектов(СтруктураНастроекОбмена.ИмяПланаОбмена);
	
	Если ПравилаКонвертацииОбъектов = Неопределено Тогда
		
		// Правила обмена должны быть указаны.
		НСтрока = НСтр("ru = 'Не заданы правила конвертации для плана обмена %1. Выгрузка данных отменена.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, СтруктураНастроекОбмена.ИмяПланаОбмена);
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
		
		Возврат;
	КонецЕсли;
	
	ОбработкаОбменаДаннымиXML.СохраненныеНастройки = ПравилаКонвертацииОбъектов;
	
	Попытка
		ОбработкаОбменаДаннымиXML.ВосстановитьПравилаИзВнутреннегоФормата();
	Исключение
		ЗаписьЖурналаРегистрацииОбменаДанными(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), СтруктураНастроекОбмена, Истина);
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьПравилаОбменаЗагрузкиДанных(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбмена)
	
	ПравилаКонвертацииОбъектов = РегистрыСведений.ПравилаДляОбменаДанными.ПолучитьЗачитанныеПравилаКонвертацииОбъектов(СтруктураНастроекОбмена.ИмяПланаОбмена, Истина);
	
	Если ПравилаКонвертацииОбъектов = Неопределено Тогда
		
		// Правила обмена должны быть указаны.
		НСтрока = НСтр("ru = 'Не заданы правила конвертации для плана обмена %1. Загрузка данных отменена.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, СтруктураНастроекОбмена.ИмяПланаОбмена);
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
		
		Возврат;
	КонецЕсли;
	
	ОбработкаОбменаДаннымиXML.СохраненныеНастройки = ПравилаКонвертацииОбъектов;
	
	Попытка
		ОбработкаОбменаДаннымиXML.ВосстановитьПравилаИзВнутреннегоФормата();
	Исключение
		ЗаписьЖурналаРегистрацииОбменаДанными(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), СтруктураНастроекОбмена, Истина);
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Считывает настройки отладки из ИБ и устанавливает их для структуры обмена.
//
Процедура УстановитьНастройкиРежимаОтладкиДляСтруктуры(СтруктураНастроекОбмена, ЭтоВнешнееСоединение = Ложь)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ПроизводитьВыгрузку
	|			ТОГДА ПравилаДляОбменаДанными.РежимОтладкиВыгрузки
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтладкаОбработчиковВыгрузки,
	|	ВЫБОР
	|		КОГДА &ПроизводитьВыгрузку
	|			ТОГДА ПравилаДляОбменаДанными.ИмяФайлаОбработкиДляОтладкиВыгрузки
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИмяФайлаВнешнейОбработкиОтладкиВыгрузки,
	|	ВЫБОР
	|		КОГДА &ПроизводитьЗагрузку
	|			ТОГДА ПравилаДляОбменаДанными.РежимОтладкиЗагрузки
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтладкаОбработчиковЗагрузки,
	|	ВЫБОР
	|		КОГДА &ПроизводитьЗагрузку
	|			ТОГДА ПравилаДляОбменаДанными.ИмяФайлаОбработкиДляОтладкиЗагрузки
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИмяФайлаВнешнейОбработкиОтладкиЗагрузки,
	|	ПравилаДляОбменаДанными.РежимПротоколированияОбменаДанными КАК РежимПротоколированияОбменаДанными,
	|	ПравилаДляОбменаДанными.ИмяФайлаПротоколаОбмена КАК ИмяФайлаПротоколаОбмена,
	|	ПравилаДляОбменаДанными.НеОстанавливатьПоОшибке КАК ПродолжитьПриОшибке
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	ПравилаДляОбменаДанными.ИмяПланаОбмена = &ИмяПланаОбмена
	|	И ПравилаДляОбменаДанными.ВидПравил = ЗНАЧЕНИЕ(Перечисление.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов)
	|	И ПравилаДляОбменаДанными.РежимОтладки";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ПроизводитьВыгрузкуДанных = Ложь;
	Если Не СтруктураНастроекОбмена.Свойство("ПроизводитьВыгрузкуДанных", ПроизводитьВыгрузкуДанных) Тогда
		ПроизводитьВыгрузкуДанных = (СтруктураНастроекОбмена.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	КонецЕсли;
	
	ПроизводитьЗагрузкуДанных = Ложь;
	Если Не СтруктураНастроекОбмена.Свойство("ПроизводитьЗагрузкуДанных", ПроизводитьЗагрузкуДанных) Тогда
		ПроизводитьЗагрузкуДанных = (СтруктураНастроекОбмена.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИмяПланаОбмена", СтруктураНастроекОбмена.ИмяПланаОбмена);
	Запрос.УстановитьПараметр("ПроизводитьВыгрузку", ПроизводитьВыгрузкуДанных);
	Запрос.УстановитьПараметр("ПроизводитьЗагрузку", ПроизводитьЗагрузкуДанных);
	
	Результат = Запрос.Выполнить();
	
	ИмяФайлаПротокола = "";
	Если ЭтоВнешнееСоединение И СтруктураНастроекОбмена.Свойство("ИмяФайлаПротоколаОбмена", ИмяФайлаПротокола)
		И Не ПустаяСтрока(ИмяФайлаПротокола) Тогда
		
		СтруктураНастроекОбмена.ИмяФайлаПротоколаОбмена = ДобавитьЛитералКИмениФайла(ИмяФайлаПротокола, "ВнешнееСоединение")
	
	КонецЕсли;
	
	Если Не Результат.Пустой() И Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ТаблицаНастроек = Результат.Выгрузить();
		СтрокаТаблицы = ТаблицаНастроек[0];
		
		ЗаполнитьЗначенияСвойств(СтруктураНастроекОбмена, СтрокаТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

// Считывает настройки отладки из ИБ и устанавливает их для структуры настроек обмена.
//
Процедура УстановитьНастройкиРежимаОтладкиДляОбработки(ОбработкаОбменаДанными, СтруктураНастроекОбмена)
	
	Если СтруктураНастроекОбмена.Свойство("ИмяФайлаВнешнейОбработкиОтладкиВыгрузки")
		И ОбработкаОбменаДанными.Метаданные().Реквизиты.Найти("ИмяФайлаВнешнейОбработкиОтладкиВыгрузки") <> Неопределено Тогда
		
		ОбработкаОбменаДанными.ОтладкаОбработчиковВыгрузки = СтруктураНастроекОбмена.ОтладкаОбработчиковВыгрузки;
		ОбработкаОбменаДанными.ОтладкаОбработчиковЗагрузки = СтруктураНастроекОбмена.ОтладкаОбработчиковЗагрузки;
		ОбработкаОбменаДанными.ИмяФайлаВнешнейОбработкиОтладкиВыгрузки = СтруктураНастроекОбмена.ИмяФайлаВнешнейОбработкиОтладкиВыгрузки;
		ОбработкаОбменаДанными.ИмяФайлаВнешнейОбработкиОтладкиЗагрузки = СтруктураНастроекОбмена.ИмяФайлаВнешнейОбработкиОтладкиЗагрузки;
		ОбработкаОбменаДанными.РежимПротоколированияОбменаДанными = СтруктураНастроекОбмена.РежимПротоколированияОбменаДанными;
		ОбработкаОбменаДанными.ИмяФайлаПротоколаОбмена = СтруктураНастроекОбмена.ИмяФайлаПротоколаОбмена;
		ОбработкаОбменаДанными.ПродолжитьПриОшибке = СтруктураНастроекОбмена.ПродолжитьПриОшибке;
		
		Если СтруктураНастроекОбмена.РежимПротоколированияОбменаДанными Тогда
			
			Если СтруктураНастроекОбмена.ИмяФайлаПротоколаОбмена = "" Тогда
				ОбработкаОбменаДанными.ВыводВОкноСообщенийИнформационныхСообщений = Истина;
				ОбработкаОбменаДанными.ВыводВПротоколИнформационныхСообщений = Ложь;
			Иначе
				ОбработкаОбменаДанными.ВыводВОкноСообщенийИнформационныхСообщений = Ложь;
				ОбработкаОбменаДанными.ВыводВПротоколИнформационныхСообщений = Истина;
				ОбработкаОбменаДанными.ИмяФайлаПротоколаОбмена = СтруктураНастроекОбмена.ИмяФайлаПротоколаОбмена;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает для обработки настройки выгрузки.
//
Процедура УстановитьНастройкиОтладкиВыгрузкиДляПравилОбмена(ОбработкаОбменаДанными, ИмяПланаОбмена, РежимОтладки) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ПравилаДляОбменаДанными.РежимОтладкиВыгрузки КАК ОтладкаОбработчиковВыгрузки,
	|	ПравилаДляОбменаДанными.ИмяФайлаОбработкиДляОтладкиВыгрузки КАК ИмяФайлаВнешнейОбработкиОтладкиВыгрузки
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	ПравилаДляОбменаДанными.ИмяПланаОбмена = &ИмяПланаОбмена
	|	И ПравилаДляОбменаДанными.ВидПравил = ЗНАЧЕНИЕ(Перечисление.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов)
	|	И &РежимОтладки = ИСТИНА";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИмяПланаОбмена", ИмяПланаОбмена);
	Запрос.УстановитьПараметр("РежимОтладки", РежимОтладки);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Или ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ОбработкаОбменаДанными.ОтладкаОбработчиковВыгрузки = Ложь;
		ОбработкаОбменаДанными.ИмяФайлаВнешнейОбработкиОтладкиВыгрузки = "";
		
	Иначе
		
		ТаблицаНастроек = Результат.Выгрузить();
		НастройкиОтладки = ТаблицаНастроек[0];
		
		ЗаполнитьЗначенияСвойств(ОбработкаОбменаДанными, НастройкиОтладки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена)
	
	СтруктураНастроекОбмена.Отказ = Истина;
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
	
КонецПроцедуры

Функция ПолучитьШаблонИмениФайлаСообщения(ТекущийУзелПланаОбмена, УзелИнформационнойБазы, ЭтоИсходящееСообщение)
	
	УзелОтправитель = ?(ЭтоИсходящееСообщение, ТекущийУзелПланаОбмена, УзелИнформационнойБазы);
	УзелПолучатель  = ?(ЭтоИсходящееСообщение, УзелИнформационнойБазы, ТекущийУзелПланаОбмена);
	
	Возврат ИмяФайлаСообщенияОбмена(СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОтправитель, "Код")),
									СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелПолучатель, "Код")));
	//
КонецФункции

#КонецОбласти

#Область РаботаСМониторомПроблемОбменаДанными

Функция КоличествоПроблемОбменаДанными(УзлыОбмена = Неопределено)
	
	Возврат РегистрыСведений.РезультатыОбменаДанными.КоличествоПроблем(УзлыОбмена);
	
КонецФункции

Функция КоличествоПроблемВерсионирования(УзлыОбмена = Неопределено, ЭтоКоличествоКоллизий = Неопределено,
	УчитыватьПроигнорированные = Ложь, Период = Неопределено, СтрокаПоиска = "") Экспорт
	
	ИспользуетсяВерсионирование = ОбменДаннымиПовтИсп.ИспользуетсяВерсионирование(, Истина);
	Если ИспользуетсяВерсионирование Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		Возврат МодульВерсионированиеОбъектов.КоличествоКоллизийИлиНепринятых(УзлыОбмена,
			ЭтоКоличествоКоллизий, УчитыватьПроигнорированные, Период, СтрокаПоиска);
	КонецЕсли;
		
	Возврат 0;
	
КонецФункции

// Регистрирует ошибки при отложенном проведении документа в мониторе проблем обмена.
//
// Параметры:
//	Объект - ДокументОбъект - Документ при отложенном проведении которого возникли ошибки.
//	УзелОбмена - ПланОбменаСсылка - Узел информационной базы из которой получен документ.
//	СообщениеОбОшибке - Сообщение об ошибке для журнала регистрации.
//
// Примечание: СообщениеОбОшибке содержит в себе текст сообщения для журнала регистрации.
// Рекомендуется передавать в качестве этого параметра КраткоеПредставлениеОшибки(ИнформацияОбОшибке()).
// Текст сообщения для отображения в мониторе формируется из системных сообщений пользователю, которые
// были сформированы, но еще не были выведены пользователю. Поэтому рекомендуется, чтобы к моменту вызова
// данного метода в буфере сообщений системы не содержалось сообщений.
//
// Пример вызова процедуры при загрузке документа в информационную базу:
//
// Процедура ПровестиДокументПриЗагрузке(Документ, УзелОбмена)
// Документ.ОбменДанными.Загрузка = Истина;
// Документ.Записать();
// Документ.ОбменДанными.Загрузка = Ложь;
// Отказ = Ложь;
//
// Попытка
// 	Документ.Записать(РежимЗаписиДокумента.Проведение);
// Исключение
// 	СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
// 	Отказ = Истина;
// КонецПопытки;
//
// Если Отказ Тогда
// 	ЗарегистрироватьОшибкуПроведенияДокумента(Документ, УзелОбмена, СообщениеОбОшибке);
// КонецЕсли;
//
// КонецПроцедуры;
//
Процедура ЗарегистрироватьОшибкуПроведенияДокумента(Объект, УзелОбмена, ТекстИсключения) Экспорт
	
	СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	ТекстСообщения = ТекстИсключения;
	Для Каждого Сообщение Из СообщенияПользователю Цикл
		ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС) + Сообщение.Текст;
	КонецЦикла;
	
	ПричинаОшибки = ТекстСообщения;
	Если Не ПустаяСтрока(СокрЛП(ТекстСообщения)) Тогда
		
		ПричинаОшибки = " " + НСтр("ru = 'По причине %1.'");
		ПричинаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОшибки, ТекстСообщения);
		
	КонецЕсли;
	
	СтрокаСообщения = НСтр("ru = 'Не удалось провести документ %1, полученный из другой информационной базы.%2
		|Возможно не заполнены все реквизиты, обязательные к заполнению.'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Строка(Объект), ПричинаОшибки);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииОбменДанными(), УровеньЖурналаРегистрации.Предупреждение,,, СтрокаСообщения);
	
	РегистрыСведений.РезультатыОбменаДанными.ЗарегистрироватьОшибкуПроверкиОбъекта(Объект.Ссылка, УзелОбмена,
		ТекстСообщения, Перечисления.ТипыПроблемОбменаДанными.НепроведенныйДокумент);
	
КонецПроцедуры

// Регистрирует ошибки при отложенной записи объекта в мониторе проблем обмена.
//
// Параметры:
//	Объект - Объект ссылочного типа - Объект при отложенной записи которого возникли ошибки.
//	УзелОбмена - ПланОбменаСсылка - Узел информационной базы из которой получен объект.
//	СообщениеОбОшибке - Сообщение об ошибке для журнала регистрации.
//
// Примечание: СообщениеОбОшибке содержит в себе текст сообщения для журнала регистрации.
// Рекомендуется передавать в качестве этого параметра КраткоеПредставлениеОшибки(ИнформацияОбОшибке()).
// Текст сообщения для отображения в мониторе формируется из системных сообщений пользователю, которые
// были сформированы, но еще не были выведены пользователю. Поэтому рекомендуется, чтобы к моменту вызова
// данного метода в буфере сообщений системы не содержалось сообщений.
//
// Пример вызова процедуры при записи объекта в информационную базу:
//
// Процедура ЗаписатьОбъектПриЗагрузке(Объект, УзелОбмена)
// Объект.ОбменДанными.Загрузка = Истина;
// Объект.Записать();
// Объект.ОбменДанными.Загрузка = Ложь;
// Отказ = Ложь;
//
// Попытка
// 	Объект.Записать();
// Исключение
// 	СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
// 	Отказ = Истина;
// КонецПопытки;
//
// Если Отказ Тогда
// 	ЗарегистрироватьОшибкуЗаписиОбъекта(Объект, УзелОбмена, СообщениеОбОшибке);
// КонецЕсли;
//
// КонецПроцедуры;
//
Процедура ЗарегистрироватьОшибкуЗаписиОбъекта(Объект, УзелОбмена, ТекстИсключения) Экспорт
	
	СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	ТекстСообщения = ТекстИсключения;
	Для Каждого Сообщение Из СообщенияПользователю Цикл
		ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС) + Сообщение.Текст;
	КонецЦикла;
	
	ПричинаОшибки = ТекстСообщения;
	Если Не ПустаяСтрока(СокрЛП(ТекстСообщения)) Тогда
		
		ПричинаОшибки = " " + НСтр("ru = 'По причине %1.'");
		ПричинаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОшибки, ТекстСообщения);
		
	КонецЕсли;
	
	СтрокаСообщения = НСтр("ru = 'Не удалось записать объект %1, полученный из другой информационной базы.%2
		|Возможно не заполнены все реквизиты, обязательные к заполнению.'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Строка(Объект), ПричинаОшибки);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииОбменДанными(), УровеньЖурналаРегистрации.Предупреждение,,, СтрокаСообщения);
	
	РегистрыСведений.РезультатыОбменаДанными.ЗарегистрироватьОшибкуПроверкиОбъекта(Объект.Ссылка, УзелОбмена,
		ТекстСообщения, Перечисления.ТипыПроблемОбменаДанными.НезаполненныеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область ПрогрессБар

// Подсчет количества объектов ИБ, подлежащих выгрузке при создании начального образа.
//
// Параметры:
// Получатель - План обмена объект.
//
// Возвращаемое значение - число.
Функция РассчитатьКоличествоОбъектовВБазе(Получатель)
	
	ИмяПланаОбмена = Получатель.Метаданные().Имя;
	СчетчикОбъектов = 0;
	СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
	
	// 1. "Ссылочные" объекты.
	СтруктураСсылочныхОбъектов = Новый Структура;
	СтруктураСсылочныхОбъектов.Вставить("Справочник", Метаданные.Справочники);
	СтруктураСсылочныхОбъектов.Вставить("Документ", Метаданные.Документы);
	СтруктураСсылочныхОбъектов.Вставить("ПланВидовХарактеристик", Метаданные.ПланыВидовХарактеристик);
	СтруктураСсылочныхОбъектов.Вставить("ПланВидовРасчета", Метаданные.ПланыВидовРасчета);
	СтруктураСсылочныхОбъектов.Вставить("ПланСчетов", Метаданные.ПланыСчетов);
	СтруктураСсылочныхОбъектов.Вставить("БизнесПроцесс", Метаданные.БизнесПроцессы);
	СтруктураСсылочныхОбъектов.Вставить("Задача", Метаданные.Задачи);
	СтруктураСсылочныхОбъектов.Вставить("ПланСчетов", Метаданные.ПланыСчетов);

	ТекстЗапроса = "ВЫБРАТЬ 
	|Количество(Ссылка) КАК КоличествоОбъектов
	|ИЗ ";
	Для Каждого СсылочныйОбъект Из СтруктураСсылочныхОбъектов Цикл
		Для Каждого ОбъектМетаданных Из СсылочныйОбъект.Значение Цикл
			Если СоставПланаОбмена.Найти(ОбъектМетаданных) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПолноеИмяОбъекта = СсылочныйОбъект.Ключ +"."+ОбъектМетаданных.Имя;
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса + ПолноеИмяОбъекта;
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СчетчикОбъектов = СчетчикОбъектов + Выборка.КоличествоОбъектов;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// 2. Константы.
	Для Каждого ОбъектМетаданных Из Метаданные.Константы Цикл
		Если СоставПланаОбмена.Найти(ОбъектМетаданных) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СчетчикОбъектов = СчетчикОбъектов + 1;
	КонецЦикла;

	// 3. Регистры сведений.
	ТекстЗапроса = "ВЫБРАТЬ 
	|Количество(*) КАК КоличествоОбъектов
	|ИЗ ";
	ТекстЗапросаСРегистратором = "ВЫБРАТЬ 
	|Количество(РАЗЛИЧНЫЕ Регистратор) КАК КоличествоОбъектов
	|ИЗ ";
	Для Каждого ОбъектМетаданных Из Метаданные.РегистрыСведений Цикл
		Если СоставПланаОбмена.Найти(ОбъектМетаданных) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПолноеИмяОбъекта = "РегистрСведений."+ОбъектМетаданных.Имя;
		Запрос = Новый Запрос;
		Если ОбъектМетаданных.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора Тогда
			Запрос.Текст = ТекстЗапросаСРегистратором + ПолноеИмяОбъекта;
		Иначе
			Запрос.Текст = ТекстЗапроса + ПолноеИмяОбъекта;
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СчетчикОбъектов = СчетчикОбъектов + Выборка.КоличествоОбъектов;
		КонецЕсли;
	КонецЦикла;
	
	// 4. Регистры (подчиненные регистратору) и последовательности.
	СтруктураРегистров = Новый Структура;
	СтруктураРегистров.Вставить("РегистрНакопления", Метаданные.РегистрыНакопления);
	СтруктураРегистров.Вставить("РегистрРасчета", Метаданные.РегистрыРасчета);
	СтруктураРегистров.Вставить("РегистрБухгалтерии", Метаданные.РегистрыБухгалтерии);
	СтруктураРегистров.Вставить("Последовательность", Метаданные.Последовательности);

	ТекстЗапроса = ТекстЗапросаСРегистратором;
	Для Каждого Регистр Из СтруктураРегистров Цикл
		Для Каждого ОбъектМетаданных Из Регистр.Значение Цикл
			Если СоставПланаОбмена.Найти(ОбъектМетаданных) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПолноеИмяОбъекта = Регистр.Ключ +"."+ОбъектМетаданных.Имя;
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса + ПолноеИмяОбъекта;
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СчетчикОбъектов = СчетчикОбъектов + Выборка.КоличествоОбъектов;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат СчетчикОбъектов;
	
КонецФункции

// Подсчет количества объектов, зарегистрированных в плане обмена.
//
// Параметры:
// Получатель - План обмена объект.
//
// Возвращаемое значение - число.
Функция РассчитатьКоличествоЗарегистрированныхОбъектов(Получатель)
	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Получатель.Ссылка, Получатель.НомерОтправленного + 1);
	КоличествоОбъектовКВыгрузке = 0;
	Пока ВыборкаИзменений.Следующий() Цикл
		КоличествоОбъектовКВыгрузке = КоличествоОбъектовКВыгрузке + 1;
	КонецЦикла;
	Возврат КоличествоОбъектовКВыгрузке;
	
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

Функция КоличествоНастроенныхОбменов(Знач ПланыОбмена) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	1 КАК Поле1
	|ИЗ
	|	ПланыОбменаКонфигурации КАК ПланыОбмена";
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПолучитьТаблицуПлановОбменаДляМонитора(МенеджерВременныхТаблиц, ПланыОбмена, "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить().Количество();
	
КонецФункции

Функция ОбменДаннымиВыполненСПредупреждениями(Знач УзелИнформационнойБазы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
	|ГДЕ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
	|ГДЕ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", УзелИнформационнойБазы);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПолучитьДополнительныеСвойстваПланаОбменаСтрокой(Знач СвойстваСтрокой)
	
	Результат = "";
	
	Шаблон = "ПланыОбмена.[СвойствоСтрокой] КАК [СвойствоСтрокой]";
	
	СвойстваМассив = СтрРазделить(СвойстваСтрокой, ",", Ложь);
	
	Для Каждого СвойствоСтрокой Из СвойстваМассив Цикл
		
		СвойствоСтрокойВЗапросе = СтрЗаменить(Шаблон, "[СвойствоСтрокой]", СвойствоСтрокой);
		
		Результат = Результат + СвойствоСтрокойВЗапросе + ", ";
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ФильтрПлановОбменаПоПризнакуРазделенияДанных(ПланыОбменаМассив)
	
	Результат = Новый Массив;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			
			Для Каждого ИмяПланаОбмена Из ПланыОбменаМассив Цикл
				
				Если ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных("ПланОбмена." + ИмяПланаОбмена,
						ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных())
					ИЛИ  ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных("ПланОбмена." + ИмяПланаОбмена,
						ОбщегоНазначенияПовтИсп.РазделительВспомогательныхДанных()) Тогда
					
					Результат.Добавить(ИмяПланаОбмена);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого ИмяПланаОбмена Из ПланыОбменаМассив Цикл
				
				Если Не ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных("ПланОбмена." + ИмяПланаОбмена,
						ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных())
					И Не ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных("ПланОбмена." + ИмяПланаОбмена,
						ОбщегоНазначенияПовтИсп.РазделительВспомогательныхДанных()) Тогда
					
					Результат.Добавить(ИмяПланаОбмена);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого ИмяПланаОбмена Из ПланыОбменаМассив Цикл
			
			Результат.Добавить(ИмяПланаОбмена);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ФильтрПлановОбменаПоПризнакуАвтономнойРаботы(ПланыОбменаМассив)
	
	Результат = Новый Массив;
	
	Для Каждого ИмяПланаОбмена Из ПланыОбменаМассив Цикл
		
		Если ИмяПланаОбмена <> ОбменДаннымиПовтИсп.ПланОбменаАвтономнойРаботы() Тогда
			
			Результат.Добавить(ИмяПланаОбмена);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Процедура удаляет неактуальные записи в регистре сведений.
// Запись считается неактуальной, если план обмена, для которого была создана запись,
// был переименован или удален.
//
// Параметры:
//  Нет.
// 
Процедура УдалитьНеактуальныеЗаписиВРегистреПравилДляОбменаДанными()
	
	СписокПлановОбмена = ОбменДаннымиПовтИсп.СписокПлановОбменаБСП();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаДляОбменаДанными.ИмяПланаОбмена КАК ИмяПланаОбмена
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если СписокПлановОбмена.НайтиПоЗначению(Выборка.ИмяПланаОбмена) = Неопределено Тогда
			
			НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(Новый Структура("ИмяПланаОбмена", Выборка.ИмяПланаОбмена), "ПравилаДляОбменаДанными");
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьТаблицуПлановОбменаДляМонитора(МенеджерВременныхТаблиц, ПланыОбменаМассив, Знач ДополнительныеСвойстваПланаОбмена)
	
	ПланыОбменаМетода = ФильтрПлановОбменаПоПризнакуРазделенияДанных(ПланыОбменаМассив);
	
	Если ОбменДаннымиПовтИсп.АвтономнаяРаботаПоддерживается() Тогда
		
		// Для плана обмена автономной работы используется отдельный монитор.
		ПланыОбменаМетода = ФильтрПлановОбменаПоПризнакуАвтономнойРаботы(ПланыОбменаМетода);
		
	КонецЕсли;
	
	ДополнительныеСвойстваПланаОбменаСтрокой = ?(ПустаяСтрока(ДополнительныеСвойстваПланаОбмена), "", ДополнительныеСвойстваПланаОбмена + ", ");
	
	Запрос = Новый Запрос;
	
	ШаблонЗапроса = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|//////////////////////////////////////////////////////// {[ИмяПланаОбмена]}
	|ВЫБРАТЬ
	|
	|	[ДополнительныеСвойстваПланаОбмена]
	|
	|	Ссылка                      КАК УзелИнформационнойБазы,
	|	Наименование                КАК Наименование,
	|	""[ИмяПланаОбменаСиноним]"" КАК ИмяПланаОбмена
	|ИЗ
	|	ПланОбмена.[ИмяПланаОбмена]
	|ГДЕ
	|	     НЕ ЭтотУзел
	|	И НЕ ПометкаУдаления
	|";
	
	ТекстЗапроса = "";
	
	Если ПланыОбменаМетода.Количество() > 0 Тогда
		
		Для Каждого ИмяПланаОбмена Из ПланыОбменаМетода Цикл
			
			ТекстЗапросаДляПланаОбмена = СтрЗаменить(ШаблонЗапроса,              "[ИмяПланаОбмена]",        ИмяПланаОбмена);
			ТекстЗапросаДляПланаОбмена = СтрЗаменить(ТекстЗапросаДляПланаОбмена, "[ИмяПланаОбменаСиноним]", Метаданные.ПланыОбмена[ИмяПланаОбмена].Синоним);
			ТекстЗапросаДляПланаОбмена = СтрЗаменить(ТекстЗапросаДляПланаОбмена, "[ДополнительныеСвойстваПланаОбмена]", ДополнительныеСвойстваПланаОбменаСтрокой);
			
			// Удаляем литерал объединения для первой таблицы.
			Если ПустаяСтрока(ТекстЗапроса) Тогда
				
				ТекстЗапросаДляПланаОбмена = СтрЗаменить(ТекстЗапросаДляПланаОбмена, "ОБЪЕДИНИТЬ ВСЕ", "");
				
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляПланаОбмена;
			
		КонецЦикла;
		
	Иначе
		
		ДополнительныеСвойстваБезИсточникаДанныхСтрокой = "";
		
		Если Не ПустаяСтрока(ДополнительныеСвойстваПланаОбмена) Тогда
			
			ДополнительныеСвойства = СтрРазделить(ДополнительныеСвойстваПланаОбмена, ",");
			
			ДополнительныеСвойстваБезИсточникаДанных = Новый Массив;
			
			Для Каждого Свойство Из ДополнительныеСвойства Цикл
				
				ДополнительныеСвойстваБезИсточникаДанных.Добавить(СтрЗаменить("Неопределено КАК [Свойство]", "[Свойство]", Свойство));
				
			КонецЦикла;
			
			ДополнительныеСвойстваБезИсточникаДанныхСтрокой = СтрСоединить(ДополнительныеСвойстваБезИсточникаДанных, ",") + ", ";
			
		КонецЕсли;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|
		|	[ДополнительныеСвойстваБезИсточникаДанныхСтрокой]
		|
		|	Неопределено КАК УзелИнформационнойБазы,
		|	Неопределено КАК Наименование,
		|	Неопределено КАК ИмяПланаОбмена
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ДополнительныеСвойстваБезИсточникаДанныхСтрокой]", ДополнительныеСвойстваБезИсточникаДанныхСтрокой);
		
	КонецЕсли;
	
	ТекстЗапросаРезультат = "
	|//////////////////////////////////////////////////////// {ПланыОбменаКонфигурации}
	|ВЫБРАТЬ
	|
	|	[ДополнительныеСвойстваПланаОбмена]
	|
	|	УзелИнформационнойБазы,
	|	Наименование,
	|	ИмяПланаОбмена
	|ПОМЕСТИТЬ ПланыОбменаКонфигурации
	|ИЗ
	|	(
	|	[ТекстЗапроса]
	|	) КАК ВложенныйЗапрос
	|;
	|";
	
	ТекстЗапросаРезультат = СтрЗаменить(ТекстЗапросаРезультат, "[ТекстЗапроса]", ТекстЗапроса);
	ТекстЗапросаРезультат = СтрЗаменить(ТекстЗапросаРезультат, "[ДополнительныеСвойстваПланаОбмена]", ДополнительныеСвойстваПланаОбменаСтрокой);
	
	Запрос.Текст = ТекстЗапросаРезультат;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПолучитьТаблицуРезультатовОбменаДляМонитора(МенеджерВременныхТаблиц, ПланыОбменаМассив)
	
	Запрос = Новый Запрос;
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ТекстЗапросаРезультат = "
		|ВЫБРАТЬ
		|	РезультатыОбменаДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РезультатыОбменаДанными.ПроблемныйОбъект) КАК Количество
		|ПОМЕСТИТЬ КоличествоПроблем
		|ИЗ
		|	РегистрСведений.РезультатыОбменаДанными КАК РезультатыОбменаДанными
		|ГДЕ
		|	РезультатыОбменаДанными.Пропущена = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	РезультатыОбменаДанными.УзелИнформационнойБазы";
		
	Иначе
		
		ТекстЗапросаРезультат = "
		|ВЫБРАТЬ
		|	Неопределено КАК УзелИнформационнойБазы,
		|	Неопределено КАК Количество
		|ПОМЕСТИТЬ КоличествоПроблем";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаРезультат;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПланыОбменаСПравиламиИзФайла()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаДляОбменаДанными.ИмяПланаОбмена
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	ПравилаДляОбменаДанными.ИсточникПравил = &ИсточникПравил";
	
	Запрос.УстановитьПараметр("ИсточникПравил", Перечисления.ИсточникиПравилДляОбменаДанными.Файл);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.Количество();
	
КонецФункции

Процедура ПроверитьВозможностьАдминистрированияОбменов() Экспорт
	
	Если Не ЕстьПраваНаАдминистрированиеОбменов() Тогда
		
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для администрирования синхронизации данных.'");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьВнешнегоСоединения()
	
	Если ОбщегоНазначения.ЭтоLinuxСервер() Тогда
		
		ВызватьИсключение НСтр("ru = 'Синхронизация данных через прямое подключение на сервере под управлением ОС Linux недоступно.
			|Для синхронизации данных через прямое подключение требуется использовать ОС Windows.'");
			
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак наличия у пользователя прав на выполнение синхронизации данных.
// Выполнять синхронизацию данных может, либо полноправный пользователь,
// либо пользователь с правами поставляемого профиля "Синхронизация данных с другими программами".
//
//  Параметры:
// Пользователь (необязательный) - ПользовательИнформационнойБазы, Неопределено.
// Пользователь, для которого необходимо вычислить признак разрешения использования синхронизации данных.
// Если параметр не задан, то функция вычисляется для текущего пользователя информационной базы.
//
Функция СинхронизацияДанныхРазрешена(Знач Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	КонецЕсли;
	
	Если Пользователь.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
		Возврат Истина;
	КонецЕсли;
	
	РолиПрофиля = СтрРазделить(РолиПрофиляДоступаСинхронизацияДанныхСДругимиПрограммами(), ",");
	Для Каждого Роль Из РолиПрофиля Цикл
		
		Если Не Пользователь.Роли.Содержит(Метаданные.Роли.Найти(СокрЛП(Роль))) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

// Заполняет список значений доступными видами транспорта для узла плана обмена.
//
Процедура ЗаполнитьСписокВыбораДоступнымиВидамиТранспорта(УзелИнформационнойБазы, ЭлементФормы, Отбор = Неопределено) Экспорт
	
	ОтборЗадан = (Отбор <> Неопределено);
	
	ИспользуемыеТранспорты = ОбменДаннымиПовтИсп.ИспользуемыеТранспортыСообщенийОбмена(УзелИнформационнойБазы);
	
	ЭлементФормы.СписокВыбора.Очистить();
	
	Для Каждого Элемент Из ИспользуемыеТранспорты Цикл
		
		Если ОтборЗадан Тогда
			
			Если Отбор.Найти(Элемент) <> Неопределено Тогда
				
				ЭлементФормы.СписокВыбора.Добавить(Элемент, Строка(Элемент));
				
			КонецЕсли;
			
		Иначе
			
			ЭлементФормы.СписокВыбора.Добавить(Элемент, Строка(Элемент));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Регистрирует что обмен был произведен и фиксирует информацию в протоколе.
//
// Параметры:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена.
// 
Процедура ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена) Экспорт
	
	// Статус "Неопределено" в конце обмена свидетельствует об успешном выполнении обмена.
	Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
	КонецЕсли;
	
	// Формируем итоговое сообщение для протокола.
	Если СтруктураНастроекОбмена.ЭтоОбменВРИБ Тогда
		СтрокаСообщения = НСтр("ru = '%1, %2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
							СтруктураНастроекОбмена.РезультатВыполненияОбмена,
							СтруктураНастроекОбмена.ДействиеПриОбмене);
	Иначе
		СтрокаСообщения = НСтр("ru = '%1, %2; Объектов обработано: %3'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
							СтруктураНастроекОбмена.РезультатВыполненияОбмена,
							СтруктураНастроекОбмена.ДействиеПриОбмене,
							СтруктураНастроекОбмена.КоличествоОбъектовОбработано);
	КонецЕсли;
	
	СтруктураНастроекОбмена.ДатаОкончания = ТекущаяДатаСеанса();
	
	// Фиксируем состояние обмена в РС.
	ЗафиксироватьЗавершениеОбменаВРегистреСведений(СтруктураНастроекОбмена);
	
	// Если обмен данными был успешно выполнен.
	Если РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
		
		ЗафиксироватьУспешныйОбменДаннымиВРегистреСведений(СтруктураНастроекОбмена);
		
		РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.СнятьПризнакОтправкиДанных(СтруктураНастроекОбмена.УзелИнформационнойБазы);
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
	
КонецПроцедуры

// Фиксирует состояние обмена данными в регистре сведений СостоянияОбменовДанными.
//
// Параметры:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена.
// 
Процедура ЗафиксироватьЗавершениеОбменаВРегистреСведений(СтруктураНастроекОбмена)
	
	// Создаем структуру для новой записи в РС.
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("УзелИнформационнойБазы",    СтруктураНастроекОбмена.УзелИнформационнойБазы);
	СтруктураЗаписи.Вставить("ДействиеПриОбмене",         СтруктураНастроекОбмена.ДействиеПриОбмене);
	
	СтруктураЗаписи.Вставить("РезультатВыполненияОбмена", СтруктураНастроекОбмена.РезультатВыполненияОбмена);
	СтруктураЗаписи.Вставить("ДатаНачала",                СтруктураНастроекОбмена.ДатаНачала);
	СтруктураЗаписи.Вставить("ДатаОкончания",             СтруктураНастроекОбмена.ДатаОкончания);
	
	РегистрыСведений.СостоянияОбменовДанными.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

Процедура ЗафиксироватьУспешныйОбменДаннымиВРегистреСведений(СтруктураНастроекОбмена)
	
	// Создаем структуру для новой записи в РС.
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("УзелИнформационнойБазы", СтруктураНастроекОбмена.УзелИнформационнойБазы);
	СтруктураЗаписи.Вставить("ДействиеПриОбмене",      СтруктураНастроекОбмена.ДействиеПриОбмене);
	СтруктураЗаписи.Вставить("ДатаОкончания",          СтруктураНастроекОбмена.ДатаОкончания);
	
	РегистрыСведений.СостоянияУспешныхОбменовДанными.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

Процедура ЗаписьЖурналаРегистрацииНачалаОбменаДанными(СтруктураНастроекОбмена) Экспорт
	
	СтрокаСообщения = НСтр("ru = 'Начало процесса обмена данными для узла %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование);
	ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
	
КонецПроцедуры

// Создает запись в журнале регистрации о событии обмена данными/транспорте сообщений обмена.
//
Процедура ЗаписьЖурналаРегистрацииОбменаДанными(Комментарий, СтруктураНастроекОбмена, ЭтоОшибка = Ложь)
	
	Уровень = ?(ЭтоОшибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации, Уровень,,, Комментарий);
	
КонецПроцедуры

Процедура ЗаписатьСобытиеПолученияДанных(Знач УзелИнформационнойБазы, Знач Комментарий, Знач ЭтоОшибка = Ложь)
	
	Уровень = ?(ЭтоОшибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	
	ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, Уровень,,, Комментарий);
	
КонецПроцедуры

Процедура ФормаНастройкиУзлаОбработчикПриСозданииНаСервере(Форма, ИмяРеквизитаФормы)
	
	РеквизитыФормы = ИменаРеквизитовФормы(Форма);
	
	Для Каждого НастройкаОтбора Из Форма[ИмяРеквизитаФормы] Цикл
		
		Ключ = НастройкаОтбора.Ключ;
		
		Если РеквизитыФормы.Найти(Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Форма[Ключ]) = Тип("ДанныеФормыКоллекция") Тогда
			
			Таблица = Новый ТаблицаЗначений;
			
			СтруктураТабличнойЧасти = Форма.Параметры[ИмяРеквизитаФормы][Ключ];
			
			Для Каждого Элемент Из СтруктураТабличнойЧасти Цикл
				
				Пока Таблица.Количество() < Элемент.Значение.Количество() Цикл
					Таблица.Добавить();
				КонецЦикла;
				
				Таблица.Колонки.Добавить(Элемент.Ключ);
				
				Таблица.ЗагрузитьКолонку(Элемент.Значение, Элемент.Ключ);
				
			КонецЦикла;
			
			Форма[Ключ].Загрузить(Таблица);
			
		Иначе
			
			Форма[Ключ] = Форма.Параметры[ИмяРеквизитаФормы][Ключ];
			
		КонецЕсли;
		
		Форма[ИмяРеквизитаФормы][Ключ] = Форма.Параметры[ИмяРеквизитаФормы][Ключ];
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИменаРеквизитовФормы(Форма)
	
	// Возвращаемое значение функции.
	Результат = Новый Массив;
	
	Для Каждого РеквизитФормы Из Форма.ПолучитьРеквизиты() Цикл
		
		Результат.Добавить(РеквизитФормы.Имя);
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Распаковывает файл архива ZIP в указанный каталог; Извлекает все файлы архива.
//
// Параметры:
//  ПолноеИмяФайлаАрхива  - Строка - имя файла архива, который необходимо распаковать.
//  ПутьРаспаковкиФайлов  - Строка - путь по которому необходимо распаковать файлы.
//  ПарольАрхива          - Строка - пароль для распаковки архива. По умолчанию пустая строка.
// 
// Возвращаемое значение:
//  Результат - Булево - Истина, если успешно, Ложь, если нет.
//
Функция РаспаковатьZipФайл(Знач ПолноеИмяФайлаАрхива, Знач ПутьРаспаковкиФайлов, Знач ПарольАрхива = "") Экспорт
	
	// Возвращаемое значение функции.
	Результат = Истина;
	
	Попытка
		
		Архиватор = Новый ЧтениеZipФайла(ПолноеИмяФайлаАрхива, ПарольАрхива);
		
	Исключение
		Архиватор = Неопределено;
		СообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		
		Архиватор.ИзвлечьВсе(ПутьРаспаковкиФайлов, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		
	Исключение
		
		СтрокаСообщения = НСтр("ru = 'Ошибка при распаковке файлов архива: %1 в каталог: %2'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолноеИмяФайлаАрхива, ПутьРаспаковкиФайлов);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
		Результат = Ложь;
	КонецПопытки;
	
	Архиватор.Закрыть();
	Архиватор = Неопределено;
	
	Возврат Результат;
	
КонецФункции

// Запаковывает указанный каталог в файл архива ZIP.
//
// Параметры:
//  ПолноеИмяФайлаАрхива  - Строка - имя файла архива, в который необходимо запаковать.
//  МаскаУпаковкиФайлов    - Строка - имя файла, помещаемого в архив, или маска.
//			Недопустимо использование в именах файлов и папок букв национальных алфавитов, которые при 
//			преобразовании из символов UNICODE в узкие символы могут быть преобразованы с потерей информации. 
//			Рекомендуется использовать в именах файлов и папок символы латинского алфавита. 
//  ПарольАрхива          - Строка - пароль для архива. По умолчанию пустая строка.
// 
// Возвращаемое значение:
//  Результат - Булево - Истина, если успешно, Ложь, если нет.
//
Функция ЗапаковатьВZipФайл(Знач ПолноеИмяФайлаАрхива, Знач МаскаУпаковкиФайлов, Знач ПарольАрхива = "") Экспорт
	
	// Возвращаемое значение функции.
	Результат = Истина;
	
	Попытка
		
		Архиватор = Новый ЗаписьZipФайла(ПолноеИмяФайлаАрхива, ПарольАрхива);
		
	Исключение
		Архиватор = Неопределено;
		СообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		
		Архиватор.Добавить(МаскаУпаковкиФайлов, РежимСохраненияПутейZIP.НеСохранятьПути);
		Архиватор.Записать();
		
	Исключение
		
		СтрокаСообщения = НСтр("ru = 'Ошибка при запаковке файлов архива: %1 из каталог: %2'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолноеИмяФайлаАрхива, МаскаУпаковкиФайлов);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
		Результат = Ложь;
	КонецПопытки;
	
	Архиватор = Неопределено;
	
	Возврат Результат;
	
КонецФункции

// Возвращает количество записей в таблице базы данных.
//
// Параметры:
//  ИмяТаблицы - Строка - полное имя таблицы базы данных. Например: "Справочник.Контрагенты.Заказы".
// 
// Возвращаемое значение:
//  Число - Количество записей в таблице базы данных.
//
Функция КоличествоЗаписейВТаблицеБазыДанных(Знач ИмяТаблицы) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Количество(*) КАК Количество
	|ИЗ
	|	#ИмяТаблицы
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицы", ИмяТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка["Количество"];
	
КонецФункции

// Возвращает количество записей во временной таблице базы данных.
//
// Параметры:
//  ИмяТаблицы - Строка - имя таблицы. Например: "ВременнаяТаблица1".
//  МенеджерВременныхТаблиц - менеджер временных таблиц, который содержит указатель на временную таблицу ИмяТаблицы.
// 
// Возвращаемое значение:
//  Число - Количество записей в таблице базы данных.
//
Функция КоличествоЗаписейВоВременнойТаблицеБазыДанных(Знач ИмяТаблицы, МенеджерВременныхТаблиц) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Количество(*) КАК Количество
	|ИЗ
	|	#ИмяТаблицы
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицы", ИмяТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка["Количество"];
	
КонецФункции

// Возвращает ключ сообщения журнала регистрации.
//
Функция ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, ДействиеПриОбмене) Экспорт
	
	ИмяПланаОбмена     = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
	
	КлючСообщения = НСтр("ru = 'Обмен данными.[ИмяПланаОбмена].[ДействиеПриОбмене]'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	КлючСообщения = СтрЗаменить(КлючСообщения, "[ИмяПланаОбмена]",    ИмяПланаОбмена);
	КлючСообщения = СтрЗаменить(КлючСообщения, "[ДействиеПриОбмене]", ДействиеПриОбмене);
	
	Возврат КлючСообщения;
	
КонецФункции

// Возвращает признак того, что реквизит входит в подмножество стандартных реквизитов.
//
Функция ЭтоСтандартныйРеквизит(СтандартныеРеквизиты, ИмяРеквизита) Экспорт
	
	Для Каждого Реквизит Из СтандартныеРеквизиты Цикл
		
		Если Реквизит.Имя = ИмяРеквизита Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак успешного выполнения обмена данными.
//
Функция РезультатВыполненияОбменаВыполнено(РезультатВыполненияОбмена)
	
	Возврат РезультатВыполненияОбмена = Неопределено
		ИЛИ РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено
		ИЛИ РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями;
	
КонецФункции

// Формирует и возвращает ключ таблицы данных.
// Ключ таблицы используется для выборочной загрузки данных из сообщения обмена по заданному ключу.
//
Функция КлючТаблицыДанных(Знач ТипИсточника, Знач ТипПриемника, Знач ЭтоУдалениеОбъекта) Экспорт
	
	Возврат ТипИсточника + "#" + ТипПриемника + "#" + Строка(ЭтоУдалениеОбъекта);
	
КонецФункции

Функция НадоВыполнитьОбработчик(Объект, Ссылка, ИмяСвойства)
	
	НомерПослеОбработки = Объект[ИмяСвойства];
	
	НомерПередОбработкой = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяСвойства);
	
	НомерПередОбработкой = ?(НомерПередОбработкой = Неопределено, 0, НомерПередОбработкой);
	
	Возврат НомерПередОбработкой <> НомерПослеОбработки;
	
КонецФункции

Функция ЗаполнитьПараметрыПодключенияВнешнегоСоединения(НастройкиТранспорта)
	
	ПараметрыПодключения = ОбщегоНазначенияКлиентСервер.СтруктураПараметровДляУстановкиВнешнегоСоединения();
	
	ПараметрыПодключения.ВариантРаботыИнформационнойБазы             = НастройкиТранспорта.COMВариантРаботыИнформационнойБазы;
	ПараметрыПодключения.КаталогИнформационнойБазы                   = НастройкиТранспорта.COMКаталогИнформационнойБазы;
	ПараметрыПодключения.ИмяСервера1СПредприятия                     = НастройкиТранспорта.COMИмяСервера1СПредприятия;
	ПараметрыПодключения.ИмяИнформационнойБазыНаСервере1СПредприятия = НастройкиТранспорта.COMИмяИнформационнойБазыНаСервере1СПредприятия;
	ПараметрыПодключения.АутентификацияОперационнойСистемы           = НастройкиТранспорта.COMАутентификацияОперационнойСистемы;
	ПараметрыПодключения.ИмяПользователя                             = НастройкиТранспорта.COMИмяПользователя;
	ПараметрыПодключения.ПарольПользователя = НастройкиТранспорта.COMПарольПользователя;
	
	Возврат ПараметрыПодключения;
КонецФункции

Функция ДобавитьЛитералКИмениФайла(Знач ПолноеИмяФайла, Знач Литерал)
	
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяФайлаБезРасширения = Сред(ПолноеИмяФайла, 1, СтрДлина(ПолноеИмяФайла) - 4);
	
	Расширение = Прав(ПолноеИмяФайла, 3);
	
	Результат = "[ИмяФайлаБезРасширения]_[Литерал].[Расширение]";
	
	Результат = СтрЗаменить(Результат, "[ИмяФайлаБезРасширения]", ИмяФайлаБезРасширения);
	Результат = СтрЗаменить(Результат, "[Литерал]",               Литерал);
	Результат = СтрЗаменить(Результат, "[Расширение]",            Расширение);
	
	Возврат Результат;
КонецФункции

Функция КодУзлаПланаОбменаСтрокой(Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		
		Возврат СокрЛП(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		
		Возврат Формат(Значение, "ЧЦ=7; ЧВН=; ЧГ=0");
		
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

Функция НаименованиеПредопределенногоУзлаПланаОбмена(ИмяПланаОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена(ИмяПланаОбмена), "Наименование");
КонецФункции

Процедура ОбработчикПриВыгрузкеДанныхБСП(СтандартнаяОбработка,
											Знач Получатель,
											Знач ИмяФайлаСообщения,
											ДанныеСообщения,
											Знач КоличествоЭлементовВТранзакции,
											Знач ИмяСобытияЖурналаРегистрации,
											КоличествоОтправленныхОбъектов)
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.ОбменДанными\ПриВыгрузкеДанныхСлужебный");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриВыгрузкеДанныхСлужебный(
			СтандартнаяОбработка,
			Получатель,
			ИмяФайлаСообщения,
			ДанныеСообщения,
			КоличествоЭлементовВТранзакции,
			ИмяСобытияЖурналаРегистрации,
			КоличествоОтправленныхОбъектов);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработчикПриВыгрузкеДанных(СтандартнаяОбработка,
											Знач Получатель,
											Знач ИмяФайлаСообщения,
											ДанныеСообщения,
											Знач КоличествоЭлементовВТранзакции,
											Знач ИмяСобытияЖурналаРегистрации,
											КоличествоОтправленныхОбъектов)
	
	ОбменДаннымиПереопределяемый.ПриВыгрузкеДанных(СтандартнаяОбработка,
											Получатель,
											ИмяФайлаСообщения,
											ДанныеСообщения,
											КоличествоЭлементовВТранзакции,
											ИмяСобытияЖурналаРегистрации,
											КоличествоОтправленныхОбъектов);
	
КонецПроцедуры

Процедура ОбработчикПриЗагрузкеДанныхБСП(СтандартнаяОбработка,
											Знач Отправитель,
											Знач ИмяФайлаСообщения,
											ДанныеСообщения,
											Знач КоличествоЭлементовВТранзакции,
											Знач ИмяСобытияЖурналаРегистрации,
											КоличествоПолученныхОбъектов)
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.ОбменДанными\ПриЗагрузкеДанныхСлужебный");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриЗагрузкеДанныхСлужебный(
			СтандартнаяОбработка,
			Отправитель,
			ИмяФайлаСообщения,
			ДанныеСообщения,
			КоличествоЭлементовВТранзакции,
			ИмяСобытияЖурналаРегистрации,
			КоличествоПолученныхОбъектов);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработчикПриЗагрузкеДанных(СтандартнаяОбработка,
											Знач Отправитель,
											Знач ИмяФайлаСообщения,
											ДанныеСообщения,
											Знач КоличествоЭлементовВТранзакции,
											Знач ИмяСобытияЖурналаРегистрации,
											КоличествоПолученныхОбъектов)
	
	ОбменДаннымиПереопределяемый.ПриЗагрузкеДанных(СтандартнаяОбработка,
											Отправитель,
											ИмяФайлаСообщения,
											ДанныеСообщения,
											КоличествоЭлементовВТранзакции,
											ИмяСобытияЖурналаРегистрации,
											КоличествоПолученныхОбъектов);
	
КонецПроцедуры

Процедура ЗафиксироватьЗавершениеОбменаСОшибкой(Знач УзелИнформационнойБазы, 
												Знач ДействиеПриОбмене, 
												Знач ДатаНачала, 
												Знач СтрокаСообщенияОбОшибке) Экспорт
	
	Если ТипЗнч(ДействиеПриОбмене) = Тип("Строка") Тогда
		
		ДействиеПриОбмене = Перечисления.ДействияПриОбмене[ДействиеПриОбмене];
		
	КонецЕсли;
	
	СтруктураНастроекОбмена = Новый Структура;
	СтруктураНастроекОбмена.Вставить("УзелИнформационнойБазы", УзелИнформационнойБазы);
	СтруктураНастроекОбмена.Вставить("РезультатВыполненияОбмена", Перечисления.РезультатыВыполненияОбмена.Ошибка);
	СтруктураНастроекОбмена.Вставить("ДействиеПриОбмене", ДействиеПриОбмене);
	СтруктураНастроекОбмена.Вставить("КоличествоОбъектовОбработано", 0);
	СтруктураНастроекОбмена.Вставить("КлючСообщенияЖурналаРегистрации", ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, ДействиеПриОбмене));
	СтруктураНастроекОбмена.Вставить("ДатаНачала", ДатаНачала);
	СтруктураНастроекОбмена.Вставить("ДатаОкончания", ТекущаяДатаСеанса());
	СтруктураНастроекОбмена.Вставить("ЭтоОбменВРИБ", ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(УзелИнформационнойБазы));
	
	ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
	
	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	
КонецПроцедуры

Процедура ВыполнитьСравнениеИОбъединениеТаблицФормы(Форма, Отказ)
	
	ИмяПланаОбмена = СтрРазделить(Форма.ИмяФормы, ".")[1];
	
	ДанныеКорреспондента = ОбщиеДанныеУзловКорреспондента(ИмяПланаОбмена, Форма.Параметры.ПараметрыПодключения, Отказ);
	
	Если ДанныеКорреспондента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЭтойИнформационнойБазы = ДанныеДляТабличныхЧастейУзловЭтойИнформационнойБазы(ИмяПланаОбмена, Форма.ВерсияКорреспондента);
	
	ТабличныеЧастиПланаОбмена = ОбменДаннымиПовтИсп.ТабличныеЧастиПланаОбмена(ИмяПланаОбмена, Форма.ВерсияКорреспондента);
	
	ИменаРеквизитовФормы = ИменаРеквизитовФормы(Форма);
	
	// Объединение таблиц Общих данных.
	Для Каждого ИмяТабличнойЧасти Из ТабличныеЧастиПланаОбмена["ТаблицыОбщие"] Цикл
		
		Если ИменаРеквизитовФормы.Найти(ИмяТабличнойЧасти) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщаяТаблица = Новый ТаблицаЗначений;
		ОбщаяТаблица.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
		ОбщаяТаблица.Колонки.Добавить("УникальныйИдентификаторСсылки", Новый ОписаниеТипов("Строка"));
		
		Для Каждого СтрокаТаблицы Из ДанныеЭтойИнформационнойБазы[ИмяТабличнойЧасти] Цикл
			
			ЗаполнитьЗначенияСвойств(ОбщаяТаблица.Добавить(), СтрокаТаблицы);
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ДанныеКорреспондента[ИмяТабличнойЧасти] Цикл
			
			ЗаполнитьЗначенияСвойств(ОбщаяТаблица.Добавить(), СтрокаТаблицы);
			
		КонецЦикла;
		
		ТаблицаРезультат = ОбщаяТаблица.Скопировать(, "УникальныйИдентификаторСсылки");
		ТаблицаРезультат.Свернуть("УникальныйИдентификаторСсылки");
		ТаблицаРезультат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
		ТаблицаРезультат.Колонки.Добавить("Использовать", Новый ОписаниеТипов("Булево"));
		
		Для Каждого СтрокаТаблицыРезультата Из ТаблицаРезультат Цикл
			
			СтрокаТаблицы = ОбщаяТаблица.Найти(СтрокаТаблицыРезультата.УникальныйИдентификаторСсылки, "УникальныйИдентификаторСсылки");
			
			СтрокаТаблицыРезультата.Представление = СтрокаТаблицы.Представление;
			
		КонецЦикла;
		
		СинхронизироватьПризнакИспользованияВТаблицах(Форма[ИмяТабличнойЧасти], ТаблицаРезультат);
		
		ТаблицаРезультат.Сортировать("Представление");
		
		Форма[ИмяТабличнойЧасти].Загрузить(ТаблицаРезультат);
		
	КонецЦикла;
	
	СоответствиеРеквизитовЭтойПрограммы = Форма.ИменаРеквизитов;
	
	// Объединение таблиц данных Этой базы.
	Для Каждого ИмяТабличнойЧасти Из ТабличныеЧастиПланаОбмена["ТаблицыЭтойБазы"] Цикл
		
		Если СоответствиеРеквизитовЭтойПрограммы.Свойство(ИмяТабличнойЧасти) Тогда
			ИмяРеквизита = СоответствиеРеквизитовЭтойПрограммы[ИмяТабличнойЧасти];
		ИначеЕсли ИменаРеквизитовФормы.Найти(ИмяТабличнойЧасти) = Неопределено Тогда
			Продолжить;
		Иначе
			ИмяРеквизита = ИмяТабличнойЧасти;
		КонецЕсли;
		
		ТаблицаРезультат = ДанныеЭтойИнформационнойБазы[ИмяТабличнойЧасти].Скопировать();
		ТаблицаРезультат.Колонки.Добавить("Использовать", Новый ОписаниеТипов("Булево"));
		
		СинхронизироватьПризнакИспользованияВТаблицах(Форма[ИмяРеквизита], ТаблицаРезультат);
		
		Форма[ИмяРеквизита].Загрузить(ТаблицаРезультат);
		
	КонецЦикла;
	
	СоответствиеРеквизитовКорреспондента = Форма.ИменаРеквизитовБазыКорреспондента;
	
	// Объединение таблиц данных Корреспондента.
	Для Каждого ИмяТабличнойЧасти Из ТабличныеЧастиПланаОбмена["ТаблицыКорреспондента"] Цикл
		
		Если СоответствиеРеквизитовКорреспондента.Свойство(ИмяТабличнойЧасти) Тогда
			ИмяРеквизита = СоответствиеРеквизитовКорреспондента[ИмяТабличнойЧасти];
		ИначеЕсли ИменаРеквизитовФормы.Найти(ИмяТабличнойЧасти) = Неопределено Тогда
			Продолжить;
		Иначе
			ИмяРеквизита = ИмяТабличнойЧасти;
		КонецЕсли;
		
		ТаблицаРезультат = ДанныеКорреспондента[ИмяТабличнойЧасти].Скопировать();
		ТаблицаРезультат.Колонки.Добавить("Использовать", Новый ОписаниеТипов("Булево"));
		
		СинхронизироватьПризнакИспользованияВТаблицах(Форма[ИмяРеквизита], ТаблицаРезультат);
		
		Форма[ИмяРеквизита].Загрузить(ТаблицаРезультат);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СинхронизироватьПризнакИспользованияВТаблицах(ТаблицаФормы, ТаблицаРезультат)
	
	Если ТаблицаФормы.Количество() = 0 Тогда
		
		// При первом обращении к таблице устанавливаем все флажки.
		ТаблицаРезультат.ЗаполнитьЗначения(Истина, "Использовать");
		
	Иначе
		
		// Если имеется предыдущий контекст таблицы, то используем этот контекст для задания флажков.
		ТаблицаПредыдущегоКонтекста = ТаблицаФормы.Выгрузить(Новый Структура("Использовать", Истина), "УникальныйИдентификаторСсылки");
		
		ТаблицаРезультат.ЗаполнитьЗначения(Ложь, "Использовать");
		
		Для Каждого СтрокаТаблицыКонтекста Из ТаблицаПредыдущегоКонтекста Цикл
			
			СтрокаТаблицы = ТаблицаРезультат.Найти(СтрокаТаблицыКонтекста.УникальныйИдентификаторСсылки, "УникальныйИдентификаторСсылки");
			
			Если СтрокаТаблицы <> Неопределено Тогда
				
				СтрокаТаблицы.Использовать = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеФормы(Форма)
	
	// Заполняем данные этой программы.
	СоответствующиеРеквизиты = Форма.ИменаРеквизитов;
	НастройкаОтборовНаУзле = Форма.Контекст.НастройкаОтборовНаУзле;
	
	Для Каждого ЭлементНастройки Из НастройкаОтборовНаУзле Цикл
		
		Если СоответствующиеРеквизиты.Свойство(ЭлементНастройки.Ключ) Тогда
			ИмяРеквизита = СоответствующиеРеквизиты[ЭлементНастройки.Ключ];
		Иначе
			ИмяРеквизита = ЭлементНастройки.Ключ;
		КонецЕсли;
		
		РеквизитФормы = Форма[ИмяРеквизита];
		
		Если ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция") Тогда
			
			Если ТипЗнч(ЭлементНастройки.Значение) = Тип("Массив")
				И ЭлементНастройки.Значение.Количество() > 0 Тогда
				
				Таблица = Форма[ИмяРеквизита].Выгрузить();
				
				Таблица.Очистить();
				
				Для Каждого СтрокаТаблицы Из ЭлементНастройки.Значение Цикл
					
					ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаТаблицы);
					
				КонецЦикла;
				
				Форма[ИмяРеквизита].Загрузить(Таблица);
				
			КонецЕсли;
			
		Иначе
			
			Форма[ИмяРеквизита] = ЭлементНастройки.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполняем данные корреспондента.
	СоответствующиеРеквизиты = Форма.ИменаРеквизитовБазыКорреспондента;
	НастройкаОтборовНаУзлеБазыКорреспондента = Форма.Контекст.НастройкаОтборовНаУзлеБазыКорреспондента;
	
	Для Каждого ЭлементНастройки Из НастройкаОтборовНаУзлеБазыКорреспондента Цикл
		
		Если СоответствующиеРеквизиты.Свойство(ЭлементНастройки.Ключ) Тогда
			ИмяРеквизита = СоответствующиеРеквизиты[ЭлементНастройки.Ключ];
		Иначе
			ИмяРеквизита = ЭлементНастройки.Ключ;
		КонецЕсли;
		
		РеквизитФормы = Форма[ИмяРеквизита];
		
		Если ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция") Тогда
			
			Если ТипЗнч(ЭлементНастройки.Значение) = Тип("Массив")
				И ЭлементНастройки.Значение.Количество() > 0 Тогда
				
				Таблица = Форма[ИмяРеквизита].Выгрузить();
				
				Таблица.Очистить();
				
				Для Каждого СтрокаТаблицы Из ЭлементНастройки.Значение Цикл
					
					ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаТаблицы);
					
				КонецЦикла;
				
				Форма[ИмяРеквизита].Загрузить(Таблица);
				
			КонецЕсли;
			
		Иначе
			
			Форма[ИмяРеквизита] = ЭлементНастройки.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие указанных реквизитов в форме.
// Если хотя бы один реквизит отсутствует, то вызывает исключение.
//
Процедура ПроверитьОбязательныеРеквизитыФормы(Форма, Знач Реквизиты)
	
	ОтсутствующиеРеквизиты = Новый Массив;
	
	РеквизитыФормы = ИменаРеквизитовФормы(Форма);
	
	Для Каждого Реквизит Из СтрРазделить(Реквизиты, ",") Цикл
		
		Реквизит = СокрЛП(Реквизит);
		
		Если РеквизитыФормы.Найти(Реквизит) = Неопределено Тогда
			
			ОтсутствующиеРеквизиты.Добавить(Реквизит);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтсутствующиеРеквизиты.Количество() > 0 Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отсутствуют обязательные реквизиты формы настройки узла: %1'"),
			СтрСоединить(ОтсутствующиеРеквизиты, ","));
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОбязательныеРеквизитыФормы(Форма, ОбязательныеРеквизитыФормы)
	
	ОтсутствующиеРеквизиты = Новый Массив;
	
	РеквизитыФормы = ИменаРеквизитовФормы(Форма);
	
	Для Каждого Реквизит Из ОбязательныеРеквизитыФормы Цикл
		
		Если РеквизитыФормы.Найти(Реквизит.Имя) = Неопределено Тогда
			
			ОтсутствующиеРеквизиты.Добавить(Новый РеквизитФормы(Реквизит.Имя, Реквизит.ТипРеквизита));
			Реквизит.РеквизитДобавлен = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтсутствующиеРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(ОтсутствующиеРеквизиты);
	
	// Инициализация значений
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ТребуетсяЗаполнение", Истина);
	ПараметрыОтбора.Вставить("РеквизитДобавлен", Истина);
	РеквизитыДляЗаполнения = ОбязательныеРеквизитыФормы.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого Реквизит Из РеквизитыДляЗаполнения Цикл
		
		Форма[Реквизит.Имя] = Реквизит.ЗначениеЗаполнения;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбязательныеРеквизитыФормыНастройкиУзлов()
	
	ОбязательныеРеквизитыФормы = Новый ТаблицаЗначений;
	
	ОбязательныеРеквизитыФормы.Колонки.Добавить("Имя");
	ОбязательныеРеквизитыФормы.Колонки.Добавить("ТипРеквизита");
	ОбязательныеРеквизитыФормы.Колонки.Добавить("ТребуетсяЗаполнение");
	ОбязательныеРеквизитыФормы.Колонки.Добавить("ЗначениеЗаполнения");
	ОбязательныеРеквизитыФормы.Колонки.Добавить("РеквизитДобавлен");
	
	НоваяСтрока = ОбязательныеРеквизитыФормы.Добавить();
	НоваяСтрока.Имя = "Контекст";
	НоваяСтрока.ТипРеквизита = Новый ОписаниеТипов();
	НоваяСтрока.ТребуетсяЗаполнение = Ложь;
	
	НоваяСтрока = ОбязательныеРеквизитыФормы.Добавить();
	НоваяСтрока.Имя = "ОписаниеКонтекста";
	НоваяСтрока.ТипРеквизита = Новый ОписаниеТипов("Строка");
	НоваяСтрока.ТребуетсяЗаполнение = Ложь;
	
	НоваяСтрока = ОбязательныеРеквизитыФормы.Добавить();
	НоваяСтрока.Имя = "Реквизиты";
	НоваяСтрока.ТипРеквизита = Новый ОписаниеТипов("Строка");
	НоваяСтрока.ТребуетсяЗаполнение = Ложь;
	
	НоваяСтрока = ОбязательныеРеквизитыФормы.Добавить();
	НоваяСтрока.Имя = "ВерсияКорреспондента";
	НоваяСтрока.ТипРеквизита = Новый ОписаниеТипов("Строка");
	НоваяСтрока.ТребуетсяЗаполнение = Ложь;
	
	НоваяСтрока = ОбязательныеРеквизитыФормы.Добавить();
	НоваяСтрока.Имя = "ИменаРеквизитов";
	НоваяСтрока.ТипРеквизита = Новый ОписаниеТипов();
	НоваяСтрока.ТребуетсяЗаполнение = Истина;
	НоваяСтрока.ЗначениеЗаполнения = Новый Структура;
	
	НоваяСтрока = ОбязательныеРеквизитыФормы.Добавить();
	НоваяСтрока.Имя = "ИменаРеквизитовБазыКорреспондента";
	НоваяСтрока.ТипРеквизита = Новый ОписаниеТипов();
	НоваяСтрока.ТребуетсяЗаполнение = Истина;
	НоваяСтрока.ЗначениеЗаполнения = Новый Структура;
	
	ОбязательныеРеквизитыФормы.ЗаполнитьЗначения(Ложь, "РеквизитДобавлен");
	
	Возврат ОбязательныеРеквизитыФормы;
	
КонецФункции

Процедура ИзменитьСтруктуруХраненияТабличныхЧастей(НастройкиПоУмолчанию)
	
	Для Каждого Настройка Из НастройкиПоУмолчанию Цикл
		
		Если ТипЗнч(Настройка.Значение) = Тип("Структура") Тогда
			
			НастройкиПоУмолчанию.Вставить(Настройка.Ключ, Новый Массив);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВнешнееСоединениеОбновитьНастройкиОбменаДанными(Знач ИмяПланаОбмена, Знач КодУзла, Знач ЗначенияПоУмолчаниюНаУзле) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелИнформационнойБазы = ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(КодУзла);
	
	Если Не ЗначениеЗаполнено(УзелИнформационнойБазы) Тогда
		Сообщение = НСтр("ru = 'Не найден узел плана обмена; имя плана обмена %1; код узла %2'");
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ИмяПланаОбмена, КодУзла);
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
	ПомощникСозданияОбменаДанными = Обработки.ПомощникСозданияОбменаДанными.Создать();
	ПомощникСозданияОбменаДанными.УзелИнформационнойБазы = УзелИнформационнойБазы;
	ПомощникСозданияОбменаДанными.ВнешнееСоединениеОбновитьНастройкиОбменаДанными(ПолучитьЗначенияНастройкиОтборов(ЗначенияПоУмолчаниюНаУзле));
	
КонецПроцедуры

Функция ПолучитьЗначенияНастройкиОтборов(СтруктураНастроекВнешнегоСоединения) Экспорт
	
	Результат = Новый Структура;
	
	// объектные типы
	Для Каждого НастройкаОтбора Из СтруктураНастроекВнешнегоСоединения Цикл
		
		Если ТипЗнч(НастройкаОтбора.Значение) = Тип("Структура") Тогда
			
			РезультатВложенный = Новый Структура;
			
			Для Каждого Элемент Из НастройкаОтбора.Значение Цикл
				
				Если СтрНайти(Элемент.Ключ, "_Ключ") > 0 Тогда
					
					Ключ = СтрЗаменить(Элемент.Ключ, "_Ключ", "");
					
					Массив = Новый Массив;
					
					Для Каждого ЭлементМассива Из Элемент.Значение Цикл
						
						Если Не ПустаяСтрока(ЭлементМассива) Тогда
							
							Значение = ЗначениеИзСтрокиВнутр(ЭлементМассива);
							
							Массив.Добавить(Значение);
							
						КонецЕсли;
						
					КонецЦикла;
					
					РезультатВложенный.Вставить(Ключ, Массив);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Результат.Вставить(НастройкаОтбора.Ключ, РезультатВложенный);
			
		Иначе
			
			Если СтрНайти(НастройкаОтбора.Ключ, "_Ключ") > 0 Тогда
				
				Ключ = СтрЗаменить(НастройкаОтбора.Ключ, "_Ключ", "");
				
				Попытка
					Если ПустаяСтрока(НастройкаОтбора.Значение) Тогда
						Значение = Неопределено;
					Иначе
						Значение = ЗначениеИзСтрокиВнутр(НастройкаОтбора.Значение);
					КонецЕсли;
				Исключение
					Значение = Неопределено;
				КонецПопытки;
				
				Результат.Вставить(Ключ, Значение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// примитивные типы
	Для Каждого НастройкаОтбора Из СтруктураНастроекВнешнегоСоединения Цикл
		
		Если ТипЗнч(НастройкаОтбора.Значение) = Тип("Структура") Тогда
			
			РезультатВложенный = Результат[НастройкаОтбора.Ключ];
			
			Если РезультатВложенный = Неопределено Тогда
				
				РезультатВложенный = Новый Структура;
				
			КонецЕсли;
			
			Для Каждого Элемент Из НастройкаОтбора.Значение Цикл
				
				Если СтрНайти(Элемент.Ключ, "_Ключ") <> 0 Тогда
					
					Продолжить;
					
				ИначеЕсли НастройкаОтбора.Значение.Свойство(Элемент.Ключ + "_Ключ") Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Массив = Новый Массив;
				
				Для Каждого ЭлементМассива Из Элемент.Значение Цикл
					
					Массив.Добавить(ЭлементМассива);
					
				КонецЦикла;
				
				РезультатВложенный.Вставить(Элемент.Ключ, Массив);
				
			КонецЦикла;
			
		Иначе
			
			Если СтрНайти(НастройкаОтбора.Ключ, "_Ключ") <> 0 Тогда
				
				Продолжить;
				
			ИначеЕсли СтруктураНастроекВнешнегоСоединения.Свойство(НастройкаОтбора.Ключ + "_Ключ") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			// Экранирование перечисления
			Если ТипЗнч(НастройкаОтбора.Значение) = Тип("Строка")
				И (     СтрНайти(НастройкаОтбора.Значение, "Перечисление.") <> 0
					ИЛИ СтрНайти(НастройкаОтбора.Значение, "Enumeration.") <> 0) Тогда
				
				Результат.Вставить(НастройкаОтбора.Ключ, ПредопределенноеЗначение(НастройкаОтбора.Значение));
				
			Иначе
				
				Результат.Вставить(НастройкаОтбора.Ключ, НастройкаОтбора.Значение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ДанныеДляТабличныхЧастейУзловЭтойИнформационнойБазы(Знач ИмяПланаОбмена, ВерсияКорреспондента = "") Экспорт
	
	Результат = Новый Структура;
	
	ОбщиеТаблицыУзлов = ОбменДаннымиПовтИсп.ТабличныеЧастиПланаОбмена(ИмяПланаОбмена, ВерсияКорреспондента)["ВсеТаблицыЭтойБазы"];
	
	Для Каждого ИмяТабличнойЧасти Из ОбщиеТаблицыУзлов Цикл
		
		ДанныеТабличнойЧасти = Новый ТаблицаЗначений;
		ДанныеТабличнойЧасти.Колонки.Добавить("Представление",                 Новый ОписаниеТипов("Строка"));
		ДанныеТабличнойЧасти.Колонки.Добавить("УникальныйИдентификаторСсылки", Новый ОписаниеТипов("Строка"));
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Таблица.Ссылка КАК Ссылка,
		|	Таблица.Представление КАК Представление
		|ИЗ
		|	[ИмяТаблицы] КАК Таблица
		|
		|ГДЕ
		|	НЕ Таблица.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.Представление";
		
		ИмяТаблицы = ИмяТаблицыИзПервогоРеквизитаТабличнойЧастиПланаОбмена(ИмяПланаОбмена, ИмяТабличнойЧасти);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяТаблицы]", ИмяТаблицы);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТаблицы = ДанныеТабличнойЧасти.Добавить();
			СтрокаТаблицы.Представление = Выборка.Представление;
			СтрокаТаблицы.УникальныйИдентификаторСсылки = Строка(Выборка.Ссылка.УникальныйИдентификатор());
			
		КонецЦикла;
		
		Результат.Вставить(ИмяТабличнойЧасти, ДанныеТабличнойЧасти);
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ОбщиеДанныеУзловКорреспондента(Знач ИмяПланаОбмена, Знач ПараметрыПодключения, Отказ)
	
	Если ПараметрыПодключения.ТипСоединения = "ВнешнееСоединение" Тогда
		
		Подключение = ОбменДаннымиПовтИсп.УстановитьВнешнееСоединениеСБазой(ПараметрыПодключения);
		СтрокаСообщенияОбОшибке = Подключение.ПодробноеОписаниеОшибки;
		ВнешнееСоединение       = Подключение.Соединение;
		
		Если ВнешнееСоединение = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщенияОбОшибке,,,, Отказ);
			Возврат Неопределено;
		КонецЕсли;
		
		Если ПараметрыПодключения.ВерсияКорреспондента_2_1_1_7
			ИЛИ ПараметрыПодключения.ВерсияКорреспондента_2_0_1_6 Тогда
			
			Возврат ОбщегоНазначения.ЗначениеИзСтрокиXML(ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьОбщиеДанныеУзлов_2_0_1_6(ИмяПланаОбмена));
			
		Иначе
			
			Возврат ЗначениеИзСтрокиВнутр(ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьОбщиеДанныеУзлов(ИмяПланаОбмена));
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыПодключения.ТипСоединения = "ВебСервис" Тогда
		
		СтрокаСообщенияОбОшибке = "";
		
		Если ПараметрыПодключения.ВерсияКорреспондента_2_1_1_7 Тогда
			
			WSПрокси = ПолучитьWSПрокси_2_1_1_7(ПараметрыПодключения, СтрокаСообщенияОбОшибке);
			
		ИначеЕсли ПараметрыПодключения.ВерсияКорреспондента_2_0_1_6 Тогда
			
			WSПрокси = ПолучитьWSПрокси_2_0_1_6(ПараметрыПодключения, СтрокаСообщенияОбОшибке);
			
		Иначе
			
			WSПрокси = ПолучитьWSПрокси(ПараметрыПодключения, СтрокаСообщенияОбОшибке);
			
		КонецЕсли;
		
		Если WSПрокси = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщенияОбОшибке,,,, Отказ);
			Возврат Неопределено;
		КонецЕсли;
		
		Если ПараметрыПодключения.ВерсияКорреспондента_2_1_1_7
			ИЛИ ПараметрыПодключения.ВерсияКорреспондента_2_0_1_6 Тогда
			
			Возврат СериализаторXDTO.ПрочитатьXDTO(WSПрокси.GetCommonNodsData(ИмяПланаОбмена));
		Иначе
			
			Возврат ЗначениеИзСтрокиВнутр(WSПрокси.GetCommonNodsData(ИмяПланаОбмена));
		КонецЕсли;
		
	ИначеЕсли ПараметрыПодключения.ТипСоединения = "ВременноеХранилище" Тогда
		
		Возврат ПолучитьИзВременногоХранилища(ПараметрыПодключения.АдресВременногоХранилища).Получить();
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ИмяТаблицыИзПервогоРеквизитаТабличнойЧастиПланаОбмена(Знач ИмяПланаОбмена, Знач ИмяТабличнойЧасти)
	
	ТабличнаяЧасть = Метаданные.ПланыОбмена[ИмяПланаОбмена].ТабличныеЧасти[ИмяТабличнойЧасти];
	
	Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
		
		Тип = Реквизит.Тип.Типы()[0];
		
		Если ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
			
			Возврат Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "";
КонецФункции

Функция СправочникиПланаОбмена(Знач ИмяПланаОбмена)
	
	Если ТипЗнч(ИмяПланаОбмена) <> Тип("Строка") Тогда
		
		ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(ИмяПланаОбмена);
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
	
	Для Каждого Элемент Из СоставПланаОбмена Цикл
		
		Если ОбщегоНазначения.ЭтоСправочник(Элемент.Метаданные)
			ИЛИ ОбщегоНазначения.ЭтоПланВидовХарактеристик(Элемент.Метаданные) Тогда
			
			Результат.Добавить(Элемент.Метаданные);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ВсеДанныеПланаОбменаКромеСправочников(Знач ИмяПланаОбмена)
	
	Если ТипЗнч(ИмяПланаОбмена) <> Тип("Строка") Тогда
		
		ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(ИмяПланаОбмена);
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
	
	Для Каждого Элемент Из СоставПланаОбмена Цикл
		
		Если Не (ОбщегоНазначения.ЭтоСправочник(Элемент.Метаданные)
			ИЛИ ОбщегоНазначения.ЭтоПланВидовХарактеристик(Элемент.Метаданные)) Тогда
			
			Результат.Добавить(Элемент.Метаданные);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция НастройкиПараметровУчетаВСистемеУстановлены(Знач ИмяПланаОбмена, Знач Корреспондент, СообщениеОбОшибке) Экспорт
	
	Если ТипЗнч(Корреспондент) = Тип("Строка") Тогда
		
		Если ПустаяСтрока(Корреспондент) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		КорреспондентКод = Корреспондент;
		
		Корреспондент = ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(Корреспондент);
		
		Если Не ЗначениеЗаполнено(Корреспондент) Тогда
			Сообщение = НСтр("ru = 'Не найден узел плана обмена; имя плана обмена %1; код узла %2'");
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ИмяПланаОбмена, КорреспондентКод);
			ВызватьИсключение Сообщение;
		КонецЕсли;
		
	КонецЕсли;
	
	Отказ = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	ПланыОбмена[ИмяПланаОбмена].ОбработчикПроверкиПараметровУчета(Отказ, Корреспондент, СообщениеОбОшибке);
	
	Возврат Не Отказ;
КонецФункции

Функция ПолучитьПараметрыИнформационнойБазы(Знач ИмяПланаОбмена, Знач КодУзла, СообщениеОбОшибке) Экспорт
	
	Возврат ЗначениеВСтрокуВнутр(ПараметрыИнформационнойБазы(ИмяПланаОбмена, КодУзла, СообщениеОбОшибке));
	
КонецФункции

Функция ПолучитьПараметрыИнформационнойБазы_2_0_1_6(Знач ИмяПланаОбмена, Знач КодУзла, СообщениеОбОшибке) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(ПараметрыИнформационнойБазы(ИмяПланаОбмена, КодУзла, СообщениеОбОшибке));
	
КонецФункции

Функция СвойстваОбъектаМетаданных(Знач ПолноеИмяТаблицы) Экспорт
	
	Результат = Новый Структура("Синоним, Иерархический");
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяТаблицы);
	
	ЗаполнитьЗначенияСвойств(Результат, ОбъектМетаданных);
	
	Возврат Результат;
КонецФункции

Функция ПолучитьОбъектыТаблицы(Знач ПолноеИмяТаблицы) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяТаблицы);
	
	Если ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
		
		Если ОбъектМетаданных.Иерархический Тогда
			Если ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				Возврат ЭлементыИерархическогоСправочникаИерархияГруппИЭлементов(ПолноеИмяТаблицы);
			КонецЕсли;
			
			Возврат ЭлементыИерархическогоСправочникаИерархияЭлементов(ПолноеИмяТаблицы);
		КонецЕсли;
		
		Возврат ЭлементыНеиерархическогоСправочника(ПолноеИмяТаблицы);
		
	ИначеЕсли ОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектМетаданных) Тогда
		
		Если ОбъектМетаданных.Иерархический Тогда
			Возврат ЭлементыИерархическогоСправочникаИерархияГруппИЭлементов(ПолноеИмяТаблицы);
		КонецЕсли;
		
		Возврат ЭлементыНеиерархическогоСправочника(ПолноеИмяТаблицы);
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ЭлементыИерархическогоСправочникаИерархияГруппИЭлементов(Знач ПолноеИмяТаблицы)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 2000
		|	Ссылка,
		|	Представление,
		|	ВЫБОР
		|		КОГДА    ЭтоГруппа И НЕ ПометкаУдаления ТОГДА 0
		|		КОГДА    ЭтоГруппа И    ПометкаУдаления ТОГДА 1
		|		КОГДА НЕ ЭтоГруппа И НЕ ПометкаУдаления ТОГДА 2
		|		КОГДА НЕ ЭтоГруппа И    ПометкаУдаления ТОГДА 3
		|	КОНЕЦ КАК ИндексКартинки
		|ИЗ
		|	" + ПолноеИмяТаблицы + "
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоГруппа ИЕРАРХИЯ,
		|	Наименование
		|");
		
	Возврат РезультатЗапросаВXMLДерево(Запрос);
КонецФункции

Функция ЭлементыИерархическогоСправочникаИерархияЭлементов(Знач ПолноеИмяТаблицы)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 2000
		|	Ссылка,
		|	Представление,
		|	ВЫБОР
		|		КОГДА ПометкаУдаления ТОГДА 3
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ИндексКартинки
		|ИЗ
		|	" + ПолноеИмяТаблицы + "
		|УПОРЯДОЧИТЬ ПО
		|	Наименование ИЕРАРХИЯ
		|");
		
	Возврат РезультатЗапросаВXMLДерево(Запрос);
КонецФункции

Функция ЭлементыНеиерархическогоСправочника(Знач ПолноеИмяТаблицы)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 2000
		|	Ссылка,
		|	Представление,
		|	ВЫБОР
		|		КОГДА ПометкаУдаления ТОГДА 3
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ИндексКартинки
		|ИЗ
		|	" + ПолноеИмяТаблицы + " 
		|УПОРЯДОЧИТЬ ПО
		|	Наименование
		|");
		
	Возврат РезультатЗапросаВXMLДерево(Запрос);
КонецФункции

Функция РезультатЗапросаВXMLДерево(Знач Запрос)
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	ЗаполнитьИдентификаторыСсылокВДереве(Результат.Строки);
	Результат.Колонки.Удалить("Ссылка");
	
	Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(Результат);
КонецФункции

Процедура ЗаполнитьИдентификаторыСсылокВДереве(СтрокиДерева)
	
	Для Каждого Строка Из СтрокиДерева Цикл
		Строка.Идентификатор = ЗначениеВСтрокуВнутр(Строка.Ссылка);
		ЗаполнитьИдентификаторыСсылокВДереве(Строка.Строки);
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеКорреспондента(Знач ПолноеИмяТаблицы) Экспорт
	
	Результат = Новый Структура("СвойстваОбъектаМетаданных, ТаблицаБазыКорреспондента");
	
	Результат.СвойстваОбъектаМетаданных = СвойстваОбъектаМетаданных(ПолноеИмяТаблицы);
	Результат.ТаблицаБазыКорреспондента = ПолучитьОбъектыТаблицы(ПолноеИмяТаблицы);
	
	Возврат Результат;
КонецФункции

Функция ПараметрыИнформационнойБазы(Знач ИмяПланаОбмена, Знач КодУзла, СообщениеОбОшибке) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПланОбменаСуществует");
	Результат.Вставить("ПрефиксИнформационнойБазы");
	Результат.Вставить("ПрефиксИнформационнойБазыПоУмолчанию");
	Результат.Вставить("НаименованиеИнформационнойБазы");
	Результат.Вставить("НаименованиеИнформационнойБазыПоУмолчанию");
	Результат.Вставить("НастройкиПараметровУчетаЗаданы");
	Результат.Вставить("КодЭтогоУзла");
	Результат.Вставить("ВерсияКонфигурации"); // Начиная с версии БСП 2.1.5.1.
	
	Результат.ПланОбменаСуществует = (Метаданные.ПланыОбмена.Найти(ИмяПланаОбмена) <> Неопределено);
	
	Если Результат.ПланОбменаСуществует Тогда
		
		СвойстваЭтогоУзла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПланыОбмена[ИмяПланаОбмена].ЭтотУзел(), "Код, Наименование");
		
		ПрефиксИнформационнойБазы = Неопределено;
		ОбменДаннымиПереопределяемый.ПриОпределенииПрефиксаИнформационнойБазыПоУмолчанию(ПрефиксИнформационнойБазы);
		
		Результат.ПрефиксИнформационнойБазы                 = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
		Результат.ПрефиксИнформационнойБазыПоУмолчанию      = ПрефиксИнформационнойБазы;
		Результат.НаименованиеИнформационнойБазы            = СвойстваЭтогоУзла.Наименование;
		Результат.НастройкиПараметровУчетаЗаданы            = НастройкиПараметровУчетаВСистемеУстановлены(ИмяПланаОбмена, КодУзла, СообщениеОбОшибке);
		Результат.КодЭтогоУзла                              = СвойстваЭтогоУзла.Код;
		Результат.ВерсияКонфигурации                        = Метаданные.Версия;
		
		Результат.НаименованиеИнформационнойБазыПоУмолчанию = ?(ОбщегоНазначенияПовтИсп.РазделениеВключено(),
			Метаданные.Синоним, ОбменДаннымиПовтИсп.ИмяЭтойИнформационнойБазы());
		
	Иначе
		
		Результат.ПрефиксИнформационнойБазы = "";
		Результат.ПрефиксИнформационнойБазыПоУмолчанию = "";
		Результат.НаименованиеИнформационнойБазы = "";
		Результат.НаименованиеИнформационнойБазыПоУмолчанию = "";
		Результат.НастройкиПараметровУчетаЗаданы = Ложь;
		Результат.КодЭтогоУзла = "";
		Результат.ВерсияКонфигурации = Метаданные.Версия;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьДеревоИнформацииСтатистики(ИнформацияСтатистики, Знач ВключатьУдалениеОбъектов = Ложь) Экспорт
	
	ОтборМассив = ИнформацияСтатистики.ВыгрузитьКолонку("ИмяТаблицыПриемника");
	
	ОтборСтрока = СтрСоединить(ОтборМассив, ",");
	
	Отбор = Новый Структура("ПолноеИмя", ОтборСтрока);
	
	// Получаем дерево объектов метаданных конфигурации.
	ДеревоИнформацииСтатистики = ОбменДаннымиПовтИсп.ПолучитьДеревоМетаданныхКонфигурации(Отбор).Скопировать();
	
	// Добавляем колонки
	ДеревоИнформацииСтатистики.Колонки.Добавить("Ключ");
	ДеревоИнформацииСтатистики.Колонки.Добавить("КоличествоОбъектовВИсточнике");
	ДеревоИнформацииСтатистики.Колонки.Добавить("КоличествоОбъектовВПриемнике");
	ДеревоИнформацииСтатистики.Колонки.Добавить("КоличествоОбъектовНесопоставленных");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ПроцентСопоставленияОбъектов");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ИндексКартинки");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ИспользоватьПредварительныйПросмотр");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ИмяТаблицыПриемника");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ТипОбъектаСтрокой");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ПоляТаблицы");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ПоляПоиска");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ТипИсточникаСтрокой");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ТипПриемникаСтрокой");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ЭтоУдалениеОбъекта");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ДанныеУспешноЗагружены");
	
	
	// Индексы для поиска в статистике.
	Индексы = ИнформацияСтатистики.Индексы;
	Если Индексы.Количество() = 0 Тогда
		Если ВключатьУдалениеОбъектов Тогда
			Индексы.Добавить("ЭтоУдалениеОбъекта");
			Индексы.Добавить("ОдинКоМногим, ЭтоУдалениеОбъекта");
			Индексы.Добавить("ЭтоКлассификатор, ЭтоУдалениеОбъекта");
		Иначе
			Индексы.Добавить("ОдинКоМногим");
			Индексы.Добавить("ЭтоКлассификатор");
		КонецЕсли;
	КонецЕсли;
	
	ОбработанныеСтроки = Новый Соответствие;
	
	// Обычные строки
	Отбор = Новый Структура("ОдинКоМногим", Ложь);
	Если Не ВключатьУдалениеОбъектов Тогда
		Отбор.Вставить("ЭтоУдалениеОбъекта", Ложь);
	КонецЕсли;
		
	Для Каждого СтрокаТаблицы Из ИнформацияСтатистики.НайтиСтроки(Отбор) Цикл
		СтрокаДерева = ДеревоИнформацииСтатистики.Строки.Найти(СтрокаТаблицы.ИмяТаблицыПриемника, "ПолноеИмя", Истина);
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
		
		СтрокаДерева.Синоним = СинонимДанныхСтрокиДереваСтатистики(СтрокаДерева, СтрокаТаблицы.ТипИсточникаСтрокой);
		
		ОбработанныеСтроки[СтрокаТаблицы] = Истина;
	КонецЦикла;
	
	// Добавляем строки с типом ОдинКоМногим.
	Отбор = Новый Структура("ОдинКоМногим", Истина);
	Если Не ВключатьУдалениеОбъектов Тогда
		Отбор.Вставить("ЭтоУдалениеОбъекта", Ложь);
	КонецЕсли;
	ЗаполнитьДеревоИнформацииСтатистикиОдинКоМногим(ДеревоИнформацииСтатистики, ИнформацияСтатистики, Отбор, ОбработанныеСтроки);
	
	// Добавляем строки классификаторов.
	Отбор = Новый Структура("ЭтоКлассификатор", Истина);
	Если Не ВключатьУдалениеОбъектов Тогда
		Отбор.Вставить("ЭтоУдалениеОбъекта", Ложь);
	КонецЕсли;
	ЗаполнитьДеревоИнформацииСтатистикиОдинКоМногим(ДеревоИнформацииСтатистики, ИнформацияСтатистики, Отбор, ОбработанныеСтроки);
	
	// Добавляем строки удаления объектов.
	Если ВключатьУдалениеОбъектов Тогда
		Отбор = Новый Структура("ЭтоУдалениеОбъекта", Истина);
		ЗаполнитьДеревоИнформацииСтатистикиОдинКоМногим(ДеревоИнформацииСтатистики, ИнформацияСтатистики, Отбор, ОбработанныеСтроки);
	КонецЕсли;
	
	// Очищаем пустые строки
	СтрокиСтатистики = ДеревоИнформацииСтатистики.Строки;
	ПозицияГруппы = СтрокиСтатистики.Количество() - 1;
	Пока ПозицияГруппы >=0 Цикл
		Группа = СтрокиСтатистики[ПозицияГруппы];
		
		Элементы = Группа.Строки;
		Позиция = Элементы.Количество() - 1;
		Пока Позиция >=0 Цикл
			Элемент = Элементы[Позиция];
			
			Если Элемент.КоличествоОбъектовВПриемнике = Неопределено 
				И Элемент.КоличествоОбъектовВИсточнике = Неопределено
				И Элемент.Строки.Количество() = 0 Тогда
				Элементы.Удалить(Элемент);
			КонецЕсли;
			
			Позиция = Позиция - 1;
		КонецЦикла;
		
		Если Элементы.Количество() = 0 Тогда
			СтрокиСтатистики.Удалить(Группа);
		КонецЕсли;
		ПозицияГруппы = ПозицияГруппы - 1;
	КонецЦикла;
	
	Возврат ДеревоИнформацииСтатистики;
КонецФункции

Процедура ЗаполнитьДеревоИнформацииСтатистикиОдинКоМногим(ДеревоИнформацииСтатистики, ИнформацияСтатистики, Отбор, УжеОбработанныеСтроки)
	
	СтрокиДляОбработки = ИнформацияСтатистики.НайтиСтроки(Отбор);
	
	// Игнорируем уже обработанные строки источника.
	Позиция = СтрокиДляОбработки.ВГраница();
	Пока Позиция >= 0 Цикл
		Кандидат = СтрокиДляОбработки[Позиция];
		
		Если УжеОбработанныеСтроки[Кандидат] <> Неопределено Тогда
			СтрокиДляОбработки.Удалить(Позиция);
		Иначе
			УжеОбработанныеСтроки[Кандидат] = Истина;
		КонецЕсли;
		
		Позиция = Позиция - 1;
	КонецЦикла;
		
	Если СтрокиДляОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияСтатистикиОдинКоМногим = ИнформацияСтатистики.Скопировать(СтрокиДляОбработки);
	ИнформацияСтатистикиОдинКоМногим.Индексы.Добавить("ИмяТаблицыПриемника");
	
	ИнформацияСтатистикиОдинКоМногимВременная = ИнформацияСтатистикиОдинКоМногим.Скопировать(СтрокиДляОбработки, "ИмяТаблицыПриемника");
	
	ИнформацияСтатистикиОдинКоМногимВременная.Свернуть("ИмяТаблицыПриемника");
	
	Для Каждого СтрокаТаблицы Из ИнформацияСтатистикиОдинКоМногимВременная Цикл
		Строки       = ИнформацияСтатистикиОдинКоМногим.НайтиСтроки(Новый Структура("ИмяТаблицыПриемника", СтрокаТаблицы.ИмяТаблицыПриемника));
		СтрокаДерева = ДеревоИнформацииСтатистики.Строки.Найти(СтрокаТаблицы.ИмяТаблицыПриемника, "ПолноеИмя", Истина);
		
		Для Каждого Строка Из Строки Цикл
			НоваяСтрокаДерева = СтрокаДерева.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, СтрокаДерева);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, Строка);
			
			Если Строка.ЭтоУдалениеОбъекта Тогда
				НоваяСтрокаДерева.Картинка = БиблиотекаКартинок.ПометитьНаУдаление;
			Иначе
				НоваяСтрокаДерева.Синоним = СинонимДанныхСтрокиДереваСтатистики(НоваяСтрокаДерева, Строка.ТипИсточникаСтрокой) ;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция УдалитьИмяКлассаИзИмениОбъекта(Знач Результат)
	
	Результат = СтрЗаменить(Результат, "ДокументСсылка.", "");
	Результат = СтрЗаменить(Результат, "СправочникСсылка.", "");
	Результат = СтрЗаменить(Результат, "ПланВидовХарактеристикСсылка.", "");
	Результат = СтрЗаменить(Результат, "ПланСчетовСсылка.", "");
	Результат = СтрЗаменить(Результат, "ПланВидовРасчетаСсылка.", "");
	Результат = СтрЗаменить(Результат, "БизнесПроцессСсылка.", "");
	Результат = СтрЗаменить(Результат, "ЗадачаСсылка.", "");
	
	Возврат Результат;
КонецФункции

Процедура ВыполнитьПроверкуНаличияПравилОбменаЗагруженныхИзФайла(ПравилаОбменаЗагруженныеИзФайла, ПравилаРегистрацииЗагруженныеИзФайла)
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаДляОбменаДанными.ИмяПланаОбмена КАК ИмяПланаОбмена,
	|	ПравилаДляОбменаДанными.ВидПравил КАК ВидПравил
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	ПравилаДляОбменаДанными.ИсточникПравил = ЗНАЧЕНИЕ(Перечисление.ИсточникиПравилДляОбменаДанными.Файл)
	|	И ПравилаДляОбменаДанными.ПравилаЗагружены";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ПланыОбменаМассив = Новый Массив;
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ВидПравил = Перечисления.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов Тогда
				
				ПравилаОбменаЗагруженныеИзФайла.Добавить(Выборка.ИмяПланаОбмена);
				
			ИначеЕсли Выборка.ВидПравил = Перечисления.ВидыПравилДляОбменаДанными.ПравилаРегистрацииОбъектов Тогда
				
				ПравилаРегистрацииЗагруженныеИзФайла.Добавить(Выборка.ИмяПланаОбмена);
				
			КонецЕсли;
			
			Если ПланыОбменаМассив.Найти(Выборка.ИмяПланаОбмена) = Неопределено Тогда
				
				ПланыОбменаМассив.Добавить(Выборка.ИмяПланаОбмена);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаСообщения = НСтр("ru = 'Для планов обмена %1 используются правила обмена, загруженные из файла.
				|Эти правила могут быть несовместимы с новой версией программы.
				|Для предупреждения возможного возникновения ошибок при работе с программой рекомендуется актуализировать правила обмена из файла.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрСоединить(ПланыОбменаМассив, ","));
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку подключения обработки транспорта по заданным настройкам.
//
Процедура ПроверитьПодключениеОбработкиТранспортаСообщенийОбмена(Отказ, СтруктураНастроек, ВидТранспорта, СообщениеОбОшибке = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Создаем экземпляр объекта обработки.
	ОбработкаОбъект = Обработки[ИмяОбработкиТранспортаСообщенийОбмена(ВидТранспорта)].Создать();
	
	// Инициализация свойств обработки переданными параметрами настроек.
	ЗаполнитьЗначенияСвойств(ОбработкаОбъект, СтруктураНастроек);
	
	// Привилегированный режим установлен выше
	Если СтруктураНастроек.Свойство("Узел") Тогда
		Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(СтруктураНастроек.Узел, "COMПарольПользователя, FTPСоединениеПароль, WSПароль, ПарольАрхиваСообщенияОбмена", Истина);
		ЗаполнитьЗначенияСвойств(ОбработкаОбъект, Пароли);
	КонецЕсли;
	
	// Инициализация транспорта обмена.
	ОбработкаОбъект.Инициализация();
	
	// Выполняем проверку подключения.
	Если Не ОбработкаОбъект.ПодключениеУстановлено() Тогда
		
		ШаблонСообщения = "%1
						|%2";
		//
		
		ДополнительноеСообщение = НСтр("ru = 'Техническую информацию об ошибке см. в журнале регистрации.'");
		
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОбработкаОбъект.СтрокаСообщенияОбОшибке, ДополнительноеСообщение);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке,,,, Отказ);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Транспорт сообщений обмена'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОбъект.СтрокаСообщенияОбОшибкеЖР);
		
	КонецЕсли;
	
КонецПроцедуры

// Основная функция для использования внешнего соединения при обмене.
//
// Параметры: 
//  СтруктураНастроек - структура настроек транспорта COM обмена.
//
Функция УстановитьВнешнееСоединениеСБазой(СтруктураНастроек) Экспорт
	
	Результат = ОбщегоНазначенияКлиентСервер.УстановитьВнешнееСоединениеСБазой(
		ЗаполнитьПараметрыПодключенияВнешнегоСоединения(СтруктураНастроек));
	
	ВнешнееСоединение = Результат.Соединение;
	Если ВнешнееСоединение = Неопределено Тогда
		// Ошибка установки соединения.
		Возврат Результат;
	КонецЕсли;
	
	// Дополнительно проверяем возможность работы с внешней базой.
	
	Попытка
		НетПолныхПрав = Не ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.РольДоступнаПолныеПрава();
	Исключение
		НетПолныхПрав = Истина;
	КонецПопытки;
	
	Если НетПолныхПрав Тогда
		Результат.ПодробноеОписаниеОшибки = НСтр("ru = 'Пользователю, указанному для подключения к другой программе, должны быть назначены роли ""Администратор системы"" и ""Полные права""'");
		Результат.КраткоеОписаниеОшибки   = Результат.ПодробноеОписаниеОшибки;
		Результат.Соединение = Неопределено;
	Иначе
		Попытка 
			СостояниеНеДопустимо = ВнешнееСоединение.ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы();
		Исключение
			СостояниеНеДопустимо = Ложь
		КонецПопытки;
		
		Если СостояниеНеДопустимо Тогда
			Результат.ПодробноеОписаниеОшибки = НСтр("ru = 'Другая программа находится в состоянии обновления.'");
			Результат.КраткоеОписаниеОшибки   = Результат.ПодробноеОписаниеОшибки;
			Результат.Соединение = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция НастройкиТранспортаПоПараметрамВнешнегоСоединения(Параметры) Экспорт
	
	// Преобразуем настройки - параметры внешнего соединения в параметры транспорта.
	НастройкиТранспорта = Новый Структура;
	
	НастройкиТранспорта.Вставить("COMПарольПользователя",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ПарольПользователя"));
	НастройкиТранспорта.Вставить("COMИмяПользователя",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ИмяПользователя"));
	НастройкиТранспорта.Вставить("COMАутентификацияОперационнойСистемы",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "АутентификацияОперационнойСистемы"));
	НастройкиТранспорта.Вставить("COMИмяИнформационнойБазыНаСервере1СПредприятия",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ИмяИнформационнойБазыНаСервере1СПредприятия"));
	НастройкиТранспорта.Вставить("COMИмяСервера1СПредприятия",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ИмяСервера1СПредприятия"));
	НастройкиТранспорта.Вставить("COMКаталогИнформационнойБазы",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "КаталогИнформационнойБазы"));
	НастройкиТранспорта.Вставить("COMВариантРаботыИнформационнойБазы",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ВариантРаботыИнформационнойБазы"));
	
	Возврат НастройкиТранспорта;
	
КонецФункции

Функция ПолучитьWSПроксиДляУзлаИнформационнойБазы(УзелИнформационнойБазы, СтрокаСообщенияОбОшибке = "", ПараметрыАутентификации = Неопределено)
	
	СтруктураНастроек = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспортаWS(УзелИнформационнойБазы, ПараметрыАутентификации);
	
	Попытка
		ВерсииКорреспондента = ОбменДаннымиПовтИсп.ВерсииКорреспондента(СтруктураНастроек);
	Исключение
		СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУстановкаПодключенияКWebСервису(),
			УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	
	ВерсияКорреспондента_2_0_1_6 = (ВерсииКорреспондента.Найти("2.0.1.6") <> Неопределено);
	ВерсияКорреспондента_2_1_1_7 = (ВерсииКорреспондента.Найти("2.1.1.7") <> Неопределено);
	
	Если ВерсияКорреспондента_2_1_1_7 Тогда
		
		WSПрокси = ПолучитьWSПрокси_2_1_1_7(СтруктураНастроек, СтрокаСообщенияОбОшибке);
		
	ИначеЕсли ВерсияКорреспондента_2_0_1_6 Тогда
		
		WSПрокси = ПолучитьWSПрокси_2_0_1_6(СтруктураНастроек, СтрокаСообщенияОбОшибке);
		
	Иначе
		
		WSПрокси = ПолучитьWSПрокси(СтруктураНастроек, СтрокаСообщенияОбОшибке);
		
	КонецЕсли;
	
	Возврат WSПрокси;
КонецФункции

Процедура УдалитьНезначащиеСимволыВНастройкахПодключения(Настройки)
	
	Для Каждого Настройка Из Настройки Цикл
		
		Если ТипЗнч(Настройка.Значение) = Тип("Строка") Тогда
			
			Настройки.Вставить(Настройка.Ключ, СокрЛП(Настройка.Значение));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьПодключениеККорреспонденту(Знач Корреспондент, Знач СтруктураНастроек, СообщениеПользователю = "") Экспорт
	
	СобытиеЖурналаРегистрации = НСтр("ru = 'Обмен данными.Проверка подключения'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Попытка
		ВерсииКорреспондента = ОбменДаннымиПовтИсп.ВерсииКорреспондента(СтруктураНастроек);
	Исключение
		СброситьПарольСинхронизацииДанных(Корреспондент);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СообщениеПользователю = КраткоеПредставлениеПервойОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	ВерсияКорреспондента_2_0_1_6 = (ВерсииКорреспондента.Найти("2.0.1.6") <> Неопределено);
	ВерсияКорреспондента_2_1_1_7 = (ВерсииКорреспондента.Найти("2.1.1.7") <> Неопределено);
	
	Если ВерсияКорреспондента_2_1_1_7 Тогда
		
		WSПрокси = ПолучитьWSПрокси_2_1_1_7(СтруктураНастроек,, СообщениеПользователю, 5);
		
		Если WSПрокси = Неопределено Тогда
			СброситьПарольСинхронизацииДанных(Корреспондент);
			Возврат Ложь;
		КонецЕсли;
		
		Попытка
			
			КодКорреспондента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбменаПоСсылке(Корреспондент), "Код");
			ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(Корреспондент);
			ЕстьПодключение = WSПрокси.TestConnection(
				ИмяПланаОбмена,
				КодКорреспондента,
				СообщениеПользователю);
				
			Если НЕ ЕстьПодключение Тогда
				Если ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(Корреспондент) Тогда
					ИмяПланаОбменаСтаройНастройки = "";
					ВариантНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Корреспондент, "ВариантНастройки");
					ИмяПланаОбменаСтаройНастройки = 
						ПланыОбмена[ИмяПланаОбмена].ИмяПланаОбменаСтаройНастройки(КодКорреспондента);
					Если ИмяПланаОбменаСтаройНастройки <> "" Тогда
						ЕстьПодключение = WSПрокси.TestConnection(
							ИмяПланаОбменаСтаройНастройки,
							КодКорреспондента,
							СообщениеПользователю);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьПодключение Тогда
				УстановитьПарольСинхронизацииДанных(Корреспондент, СтруктураНастроек.WSПароль);
			КонецЕсли;
			
			Возврат ЕстьПодключение;
		Исключение
			СброситьПарольСинхронизацииДанных(Корреспондент);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			СообщениеПользователю = КраткоеПредставлениеПервойОшибки(ИнформацияОбОшибке());
			Возврат Ложь;
		КонецПопытки;
		
	ИначеЕсли ВерсияКорреспондента_2_0_1_6 Тогда
		
		WSПрокси = ПолучитьWSПрокси_2_0_1_6(СтруктураНастроек,, СообщениеПользователю);
		
	Иначе
		
		WSПрокси = ПолучитьWSПрокси(СтруктураНастроек,, СообщениеПользователю);
		
	КонецЕсли;
	
	ЕстьПодключение = (WSПрокси <> Неопределено);
	
	Если ЕстьПодключение Тогда
		УстановитьПарольСинхронизацииДанных(Корреспондент, СтруктураНастроек.WSПароль);
	Иначе
		СброситьПарольСинхронизацииДанных(Корреспондент);
	КонецЕсли;
	
	Возврат ЕстьПодключение;
КонецФункции

// Выводит сообщение об ошибке и выставляет параметр Отказ в "Истина".
//
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  Отказ          - булево, признак отказа (необязательный).
//
Процедура СообщитьОбОшибке(ТекстСообщения, Отказ = Ложь) Экспорт
	
	Отказ = Истина;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Получает таблицу правил выборочной регистрации объектов из параметров сеанса.
//
// Параметры:
// Нет.
// 
// Возвращаемое значение:
// Таблица значений - таблица реквизитов регистрации для всех объектов метаданных.
//
Функция ПолучитьПравилаВыборочнойРегистрацииОбъектовПС() Экспорт
	
	Возврат ОбменДаннымиПовтИсп.ПолучитьПравилаВыборочнойРегистрацииОбъектовПС();
	
КонецФункции

// Добавляет одну запись в регистр сведений по переданным значениям структуры.
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо создать набор записей и заполнить этот
//                                набор.
//  ИмяРегистра     - Строка - имя регистра сведений, в который необходимо добавить запись.
// 
Процедура ДобавитьЗаписьВРегистрСведений(СтруктураЗаписи, Знач ИмяРегистра, Загрузка = Ложь) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра);
	
	// Добавляем только одну запись в новый набор записей.
	НоваяЗапись = НаборЗаписей.Добавить();
	
	// Заполняем значения свойств записи из переданной структуры.
	ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
	
	НаборЗаписей.ОбменДанными.Загрузка = Загрузка;
	
	// записываем набор записей
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Обновляет запись в регистр сведений по переданным значениям структуры.
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо создать менеджер записи и обновить запись.
//  ИмяРегистра     - Строка - имя регистра сведений, в котором необходимо обновить запись.
// 
Процедура ОбновитьЗаписьВРегистрСведений(СтруктураЗаписи, Знач ИмяРегистра) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	// Создаем менеджер записи регистра.
	МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	
	// Устанавливаем отбор по измерениям регистра.
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		
		// Если задано значение в структуре, то отбор устанавливаем.
		Если СтруктураЗаписи.Свойство(Измерение.Имя) Тогда
			
			МенеджерЗаписи[Измерение.Имя] = СтруктураЗаписи[Измерение.Имя];
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Считываем запись из базы данных.
	МенеджерЗаписи.Прочитать();
	
	// Заполняем значения свойств записи из переданной структуры.
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураЗаписи);
	
	// записываем менеджер записи
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Удаляет набор записей в регистре по переданным значениям структуры.
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо удалить набор записей.
//  ИмяРегистра     - Строка - имя регистра сведений, в котором необходимо удалить набор записей.
// 
Процедура УдалитьНаборЗаписейВРегистреСведений(СтруктураЗаписи, ИмяРегистра, Загрузка = Ложь) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра);
	
	НаборЗаписей.ОбменДанными.Загрузка = Загрузка;
	
	// записываем набор записей
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Выполняет загрузку правил для обмена данными (ПРО или ПКО) в ИБ.
// 
Процедура ЗагрузитьПравилаДляОбменаДанными(Отказ,
										Знач ИмяПланаОбмена,
										Знач ВидПравил,
										Знач ИмяМакетаПравил,
										Знач ИмяМакетаПравилКорреспондента = "")
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("ИмяПланаОбмена",  ИмяПланаОбмена);
	СтруктураЗаписи.Вставить("ВидПравил",       ВидПравил);
	Если Не ПустаяСтрока(ИмяМакетаПравилКорреспондента) Тогда
		СтруктураЗаписи.Вставить("ИмяМакетаПравилКорреспондента", ИмяМакетаПравилКорреспондента);
	КонецЕсли;
	СтруктураЗаписи.Вставить("ИмяМакетаПравил", ИмяМакетаПравил);
	СтруктураЗаписи.Вставить("ИсточникПравил",  Перечисления.ИсточникиПравилДляОбменаДанными.МакетКонфигурации);
	СтруктураЗаписи.Вставить("ИспользоватьФильтрВыборочнойРегистрацииОбъектов", Истина);
	
	// Получаем набор записей регистра.
	НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, "ПравилаДляОбменаДанными");
	
	// Добавляем только одну запись в новый набор записей.
	НоваяЗапись = НаборЗаписей.Добавить();
	
	// Заполняем значения свойств записи из структуры.
	ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
	
	// Загружаем правила для обмена данными в ИБ.
	РегистрыСведений.ПравилаДляОбменаДанными.ЗагрузитьПравила(Отказ, НаборЗаписей[0]);
	
	Если Не Отказ Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбновлениеВерсииТиповыхПравилДляОбменаДанными(ПравилаОбменаЗагруженныеИзФайла, ПравилаРегистрацииЗагруженныеИзФайла)
	
	Отказ = Ложь;
	ТекстЗапроса = "";
	
	Для Каждого ИмяПланаОбмена Из ОбменДаннымиПовтИсп.ПланыОбменаБСП() Цикл
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
			И Не ОбменДаннымиПовтИсп.ПланОбменаИспользуетсяВМоделиСервиса(ИмяПланаОбмена) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ВЫБРАТЬ
			|	КОЛИЧЕСТВО (%1.Ссылка) КАК Количество,
			|	""%1"" КАК ИмяПланаОбмена
			|ИЗ
			|	ПланОбмена.%1 КАК %1", ИмяПланаОбмена);
			
	КонецЦикла;
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос(ТекстЗапроса);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ВыполненоОбновлениеПравил = Ложь;
	Для Каждого ЗаписьПланаОбмена Из Результат Цикл
		
		Если ЗаписьПланаОбмена.Количество <= 1 
			И Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда // только ЭтотУзел
			Продолжить;
		КонецЕсли;
		
		ИмяПланаОбмена = ЗаписьПланаОбмена.ИмяПланаОбмена;
		
		Если ПравилаОбменаЗагруженныеИзФайла.Найти(ИмяПланаОбмена) = Неопределено
			И ОбменДаннымиПовтИсп.ЕстьМакетПланаОбмена(ИмяПланаОбмена, "ПравилаОбмена")
			И ОбменДаннымиПовтИсп.ЕстьМакетПланаОбмена(ИмяПланаОбмена, "ПравилаОбменаКорреспондента") Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполняется обновление правил конвертации данных для плана обмена %1'"), ИмяПланаОбмена);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииОбменДанными(),
				УровеньЖурналаРегистрации.Информация,,, ТекстСообщения);
			
			ЗагрузитьПравилаДляОбменаДанными(Отказ, ИмяПланаОбмена, Перечисления.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов,
				"ПравилаОбмена", "ПравилаОбменаКорреспондента");
				
			ВыполненоОбновлениеПравил = Истина;
			
		КонецЕсли;
		
		Если ПравилаРегистрацииЗагруженныеИзФайла.Найти(ИмяПланаОбмена) = Неопределено
			И ОбменДаннымиПовтИсп.ЕстьМакетПланаОбмена(ИмяПланаОбмена, "ПравилаРегистрации") Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполняется обновление правил регистрации данных для плана обмена %1'"), ИмяПланаОбмена);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииОбменДанными(),
				УровеньЖурналаРегистрации.Информация,,, ТекстСообщения);
				
			ЗагрузитьПравилаДляОбменаДанными(Отказ, ИмяПланаОбмена, Перечисления.ВидыПравилДляОбменаДанными.ПравилаРегистрацииОбъектов, "ПравилаРегистрации");
			
			ВыполненоОбновлениеПравил = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ВызватьИсключение НСтр("ru = 'При обновлении правил обмена данными возникли ошибки (см. Журнал регистрации).'");
	КонецЕсли;
	
	Если ВыполненоОбновлениеПравил Тогда
		ОбменДаннымиВызовСервера.СброситьКэшМеханизмаРегистрацииОбъектов();
	КонецЕсли;
	
КонецПроцедуры

// Создает набор записей регистра сведений по переданным значениям структуры. Добавляет одну запись в набор.
//
// Параметры:
//  СтруктураЗаписи - Структура - структура по значениям которой необходимо создать набор записей и заполнить этот
//                                набор.
//  ИмяРегистра     - Строка - имя регистра сведений.
// 
Функция СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра)
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	// Создаем набор записей регистра.
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	
	// Устанавливаем отбор по измерениям регистра.
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		
		// Если задано значение в структуре, то отбор устанавливаем.
		Если СтруктураЗаписи.Свойство(Измерение.Имя) Тогда
			
			НаборЗаписей.Отбор[Измерение.Имя].Установить(СтруктураЗаписи[Измерение.Имя]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборЗаписей;
КонецФункции

// Получает индекс картинки для вывода в таблице статистики сопоставления объектов.
//
Функция ИндексКартинкиТаблицыИнформацииСтатистики(Знач КоличествоОбъектовНесопоставленных, Знач ДанныеУспешноЗагружены) Экспорт
	
	Возврат ?(КоличествоОбъектовНесопоставленных = 0, ?(ДанныеУспешноЗагружены = Истина, 2, 0), 1);
	
КонецФункции

// Выполняет проверку того, что размер файла сообщения обмена превышает допустимый размер.
//
//  Возвращаемое значение:
//   Истина - если размер файла больше допустимого, иначе Ложь.
//
Функция РазмерСообщенияОбменаПревышаетДопустимый(Знач ИмяФайла, Знач МаксимальныйДопустимыйРазмерСообщения) Экспорт
	
	// Возвращаемое значение функции.
	Результат = Ложь;
	
	Файл = Новый Файл(ИмяФайла);
	
	Если Файл.Существует() И Файл.ЭтоФайл() Тогда
		
		Если МаксимальныйДопустимыйРазмерСообщения <> 0 Тогда
			
			РазмерПакета = Окр(Файл.Размер() / 1024, 0, РежимОкругления.Окр15как20);
			
			Если РазмерПакета > МаксимальныйДопустимыйРазмерСообщения Тогда
				
				СтрокаСообщения = НСтр("ru = 'Размер исходящего пакета составил %1 Кбайт, что превышает допустимое ограничение %2 Кбайт.'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Строка(РазмерПакета), Строка(МаксимальныйДопустимыйРазмерСообщения));
				СообщитьОбОшибке(СтрокаСообщения, Результат);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УстановленПризнакНачальнойВыгрузкиДанных(УзелИнформационнойБазы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.УстановленПризнакНачальнойВыгрузкиДанных(УзелИнформационнойБазы);
	
КонецФункции

Процедура ЗарегистрироватьТолькоСправочникиДляНачальнойВыгрузки(Знач УзелИнформационнойБазы) Экспорт
	
	ЗарегистрироватьДанныеДляНачальнойВыгрузки(УзелИнформационнойБазы, СправочникиПланаОбмена(УзелИнформационнойБазы));
	
КонецПроцедуры

Процедура ЗарегистрироватьВсеДанныеКромеСправочниковДляНачальнойВыгрузки(Знач УзелИнформационнойБазы) Экспорт
	
	ЗарегистрироватьДанныеДляНачальнойВыгрузки(УзелИнформационнойБазы, ВсеДанныеПланаОбменаКромеСправочников(УзелИнформационнойБазы));
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеДляНачальнойВыгрузки(УзелИнформационнойБазы, Данные = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Обновляем повторно используемые значения Механизма регистрации объектов.
	ОбменДаннымиВызовСервера.ПроверитьКэшМеханизмаРегистрацииОбъектов();
	
	СтандартнаяОбработка = Истина;
	
	ОбменДаннымиПереопределяемый.РегистрацияИзмененийНачальнойВыгрузкиДанных(УзелИнформационнойБазы, СтандартнаяОбработка, Данные);
	
	Если СтандартнаяОбработка Тогда
		
		Если ТипЗнч(Данные) = Тип("Массив") Тогда
			
			Для Каждого ОбъектМетаданных Из Данные Цикл
				
				ПланыОбмена.ЗарегистрироватьИзменения(УзелИнформационнойБазы, ОбъектМетаданных);
				
			КонецЦикла;
			
		Иначе
			
			ПланыОбмена.ЗарегистрироватьИзменения(УзелИнформационнойБазы, Данные);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбменДаннымиПовтИсп.ПланОбменаСодержитОбъект(ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы),
		Метаданные.РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ПолноеИмя()) Тогда
		
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелИнформационнойБазы, Метаданные.РегистрыСведений.СоответствияОбъектовИнформационныхБаз);
		
	КонецЕсли;
	
	Если Не ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(УзелИнформационнойБазы) Тогда
		
		// Устанавливаем признак начальной выгрузки данных для узла.
		РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.УстановитьПризнакНачальнойВыгрузкиДанных(УзелИнформационнойБазы);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет загрузку сообщения обмена, которое содержало
// изменения конфигурации, до обновления информационной базы.
//
Процедура ЗагрузитьСообщениеПередОбновлениемИнформационнойБазы()
	
	Если ОбменДаннымиВызовСервера.РежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском(
			"ПропуститьЗагрузкуСообщенияОбменаДаннымиПередЗапуском") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
		
		УзелИнформационнойБазы = ГлавныйУзел();
		
		Если УзелИнформационнойБазы <> Неопределено Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			УстановитьРежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском("ЗагрузкаРазрешена", Истина);
			УстановитьПривилегированныйРежим(Ложь);
			
			Попытка
				// Обновление правил регистрации объектов выполняем до загрузки данных.
				ВыполнитьОбновлениеПравилДляОбменаДанными();
				
				ВидТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию(УзелИнформационнойБазы);
				
				Отказ = Ложь;
				
				ПараметрыОбмена = ПараметрыОбмена();
				ПараметрыОбмена.ВидТранспортаСообщенийОбмена = ВидТранспорта;
				ПараметрыОбмена.ВыполнятьЗагрузку = Истина;
				ПараметрыОбмена.ВыполнятьВыгрузку = Ложь;
				ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(УзелИнформационнойБазы, ПараметрыОбмена, Отказ);
				
				// Режим повтора требует включения в следующих случаях.
				// Случай 1. Получены метаданные с новой версией конфигурации, т.е. будет выполнено обновление ИБ.
				// Е если Отказ = Истина, тогда недопустимо продолжение, т.к. могут быть созданы дубли генерируемых данных,
				// - если Отказ = Ложь, тогда возможна ошибка при обновлении ИБ, возможно требующая повторной загрузки сообщения.
				// Случай 2. Получены метаданные с той же версией конфигурации, т.е. не будет выполнено обновление ИБ.
				// Е если Отказ = Истина, тогда возможна ошибка при продолжении запуска, например, из-за того, что
				//   не были загружены предопределенные элементы,
				// - если Отказ = Ложь, тогда продолжение возможно, т.к. выгрузку можно сделать позднее (если же
				//   выгрузка не выполняется успешно, тогда позднее можно получить и новое сообщение для загрузки).
				
				Если Отказ ИЛИ ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
					ВключитьПовторениеЗагрузкиСообщенияОбменаДаннымиПередЗапуском();
				КонецЕсли;
				
				Если Отказ Тогда
					ВызватьИсключение НСтр("ru = 'Получение данных из главного узла завершилось с ошибками.'");
				КонецЕсли;
			Исключение
				УстановитьПривилегированныйРежим(Истина);
				УстановитьРежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском("ЗагрузкаРазрешена", Ложь);
				УстановитьПривилегированныйРежим(Ложь);
				ВызватьИсключение;
			КонецПопытки;
			УстановитьПривилегированныйРежим(Истина);
			УстановитьРежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском("ЗагрузкаРазрешена", Ложь);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Сбрасывает признак повторения загрузки при ошибке загрузки или обновления.
Процедура ОтключитьПовторениеЗагрузкиСообщенияОбменаДаннымиПередЗапуском() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Константы.ПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском.Получить() Тогда
		Константы.ПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском.Установить(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет загрузку и выгрузку сообщения обмена, которое
// содержало изменения конфигурации, которые не потребовали
// обновления информационной базы.
//
Процедура ВыполнитьСинхронизациюПриОтсутствииОбновленияИнформационнойБазы(
		ПриЗапускеКлиентскогоПриложения, Перезапустить)
	
	Если Не ЗагрузитьСообщениеОбменаДанными() Тогда
		// Если загрузка сообщения обмена была отменена, а версия конфигурации
		// в изменениях метаданных не была повышена, тогда повторение загрузки нужно отключить.
		ОтключитьПовторениеЗагрузкиСообщенияОбменаДаннымиПередЗапуском();
		Возврат;
	КонецЕсли;
		
	Если КонфигурацияИзменена() Тогда
		// Изменения конфигурации загружены, но не применены.
		// Загружать сообщение еще рано.
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ЗагрузитьСообщениеПередОбновлениемИнформационнойБазы();
		ЗафиксироватьТранзакцию();
	Исключение
		Если КонфигурацияИзменена() Тогда
			Если НЕ ОбменДаннымиВызовСервера.РежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском(
				"СообщениеПолученоИзКэша") Тогда
				// Переход с конфигурации, в которой не использовалось кэширование
				// сообщения обмена. Возможно, новое загруженное сообщение содержит
				// новые изменения конфигурации. Определить возврат к конфигурации
				// базы данных невозможно. Следует зафиксировать транзакцию и продолжить
				// запуск без выгрузки нового сообщения обмена.
				ЗафиксироватьТранзакцию();
				Возврат;
			Иначе
				// Вновь получены изменения конфигурации, значит
				// был выполнен возврат к конфигурации базы данных.
				// Следует отменить загрузку.
				ОтменитьТранзакцию();
				УстановитьПривилегированныйРежим(Истина);
				Константы.ЗагрузитьСообщениеОбменаДанными.Установить(Ложь);
				ОчиститьСообщениеОбменаДаннымиИзГлавногоУзла();
				УстановитьПривилегированныйРежим(Ложь);
				ЗаписатьСобытиеПолученияДанных(ГлавныйУзел(),
					НСтр("ru = 'Обнаружен возврат к конфигурации базы данных.
					           |Синхронизация отменена.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		// Если был выполнен возврат к конфигурации базы данных,
		// но конфигуратор не был закрыт. Тогда новое сообщение не загружено.
		// Перейдя в режим повтора и в этом случае, можно будет нажать кнопку
		// "Не синхронизировать и продолжить" после чего возврат к конфигурации
		// базы данных будет закончен успешно.
		ЗафиксироватьТранзакцию();
		ВключитьПовторениеЗагрузкиСообщенияОбменаДаннымиПередЗапуском();
		Если ПриЗапускеКлиентскогоПриложения Тогда
			Перезапустить = Истина;
			Возврат;
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	ВыгрузитьСообщениеПослеОбновленияИнформационнойБазы();
	
КонецПроцедуры

Функция КаталогВременногоХранилищаФайлов()
	
	Возврат ОбменДаннымиПовтИсп.КаталогВременногоХранилищаФайлов();
	
КонецФункции

Функция УникальноеИмяФайлаСообщенияОбмена()
	
	Результат = "Message{GUID}.xml";
	Результат = СтрЗаменить(Результат, "GUID", Строка(Новый УникальныйИдентификатор));
	
	Возврат Результат;
КонецФункции

Функция ЭтоПодчиненныйУзелРИБ() Экспорт
	
	Возврат ГлавныйУзел() <> Неопределено;
	
КонецФункции

// Получает узел распределенной информационной базы, являющийся главным для текущей информационной базы при условии,
// что распределенная информационная база создана на базе плана обмена, обслуживаемым подсистемой обмена данными БСП.
//
// Возвращаемое значение:
//  ПланОбменаСсылка.<Имя плана обмена>; Неопределено - Если текущая информационная база не является
//   узлом распределенной информационной базы
//   или главный узел для нее не определен (она сама является корневым узлом)
//   или распределенная информационная база создана на базе плана обмена, который не обслуживается подсистемой обмена
//   данными БСП, то метод возвращает Неопределено.
//
Функция ГлавныйУзел() Экспорт
	
	Результат = ПланыОбмена.ГлавныйУзел();
	
	Если Результат <> Неопределено Тогда
		
		Если Не ОбменДаннымиПовтИсп.ЭтоУзелОбменаДаннымиБСП(Результат) Тогда
			
			Результат = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает массив номеров версий, поддерживаемых интерфейсом корреспондента для подсистемы ОбменДанными.
// 
// Параметры:
// ВнешнееСоединение - объект COM-соединение, которое используется для работы с корреспондентом.
//
// Возвращаемое значение:
// Массив номеров версий, поддерживаемых интерфейсом корреспондента.
//
Функция ВерсииКорреспондентаЧерезВнешнееСоединение(ВнешнееСоединение) Экспорт
	
	Возврат ОбщегоНазначения.ПолучитьВерсииИнтерфейсаЧерезВнешнееСоединение(ВнешнееСоединение, "ОбменДанными");
	
КонецФункции

Функция КраткоеПредставлениеПервойОшибки(ИнформацияОбОшибке)
	
	Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
		
		Возврат КраткоеПредставлениеПервойОшибки(ИнформацияОбОшибке.Причина);
		
	КонецЕсли;
	
	Возврат КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
КонецФункции

// Создает временный каталог сообщений обмена.
// Фиксирует имя каталога в регистре для последующего его удаления.
//
Функция СоздатьВременныйКаталогСообщенийОбмена() Экспорт
	
	Результат = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ОбменДаннымиПовтИсп.КаталогВременногоХранилищаФайлов(), ИмяВременногоКаталогаСообщенийОбмена());
	
	СоздатьКаталог(Результат);
	
	Если Не ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПоместитьФайлВХранилище(Результат);
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает признак необходимости загрузки сообщения обмена данными.
//
Функция ЗагрузитьСообщениеОбменаДанными() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы.ЗагрузитьСообщениеОбменаДанными.Получить();
	
КонецФункции

Функция ИнвертироватьПолучениеЭлементаДанныхПоУмолчанию(Знач ПолучениеОтГлавного) Экспорт
	
	Возврат ?(ПолучениеОтГлавного, ПолучениеЭлементаДанных.Игнорировать, ПолучениеЭлементаДанных.Принять);
	
КонецФункции

Функция ВариантОбменаДанными(Знач Корреспондент) Экспорт
	
	Результат = "Синхронизация";
	
	Если Не ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(Корреспондент) Тогда
		
		ИменаРеквизитов = ОбщегоНазначения.ИменаРеквизитовПоТипу(Корреспондент, Тип("ПеречислениеСсылка.РежимыВыгрузкиОбъектовОбмена"));
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Корреспондент, ИменаРеквизитов);
		
		Для Каждого Реквизит Из ЗначенияРеквизитов Цикл
			
			Если Реквизит.Значение = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную
				ИЛИ Реквизит.Значение = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать Тогда
				
				Результат = "ПолучениеИОтправка";
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ЗагрузитьКонтекстОбъекта(Знач Контекст, Знач Объект) Экспорт
	
	Для Каждого Реквизит Из Объект.Метаданные().Реквизиты Цикл
		
		Если Контекст.Свойство(Реквизит.Имя) Тогда
			
			Объект[Реквизит.Имя] = Контекст[Реквизит.Имя];
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из Объект.Метаданные().ТабличныеЧасти Цикл
		
		Если Контекст.Свойство(ТабличнаяЧасть.Имя) Тогда
			
			Объект[ТабличнаяЧасть.Имя].Загрузить(Контекст[ТабличнаяЧасть.Имя]);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКонтекстОбъекта(Знач Объект) Экспорт
	
	Результат = Новый Структура;
	
	Для Каждого Реквизит Из Объект.Метаданные().Реквизиты Цикл
		
		Результат.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
		
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из Объект.Метаданные().ТабличныеЧасти Цикл
		
		Результат.Вставить(ТабличнаяЧасть.Имя, Объект[ТабличнаяЧасть.Имя].Выгрузить());
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ТаблицаЗначенийИзДереваЗначений(Дерево)
	
	Результат = Новый ТаблицаЗначений;
	
	Для Каждого Колонка Из Дерево.Колонки Цикл
		
		Результат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		
	КонецЦикла;
	
	РазвернутьДеревоЗначений(Результат, Дерево.Строки);
	
	Возврат Результат;
КонецФункции

Процедура РазвернутьДеревоЗначений(Таблица, Дерево)
	
	Для Каждого СтрокаДерева Из Дерево Цикл
		
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаДерева);
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			
			РазвернутьДеревоЗначений(Таблица, СтрокаДерева.Строки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КоличествоДнейРазницы(Знач Дата1, Знач Дата2)
	
	Возврат Цел((НачалоДня(Дата2) - НачалоДня(Дата1)) / 86400);
	
КонецФункции

Процедура ЗаполнитьТаблицуЗначений(Приемник, Знач Источник) Экспорт
	Приемник.Очистить();
	
	Если ТипЗнч(Источник)=Тип("ТаблицаЗначений") Тогда
		КолонкиИсточника = Источник.Колонки;
	Иначе
		Времянка = Источник.Выгрузить(Новый Массив);
		КолонкиИсточника = Времянка.Колонки;
	КонецЕсли;
	
	Если ТипЗнч(Приемник)=Тип("ТаблицаЗначений") Тогда
		КолонкиПриемника = Приемник.Колонки;
		КолонкиПриемника.Очистить();
		Для Каждого Колонка Из КолонкиИсточника Цикл
			ЗаполнитьЗначенияСвойств(КолонкиПриемника.Добавить(), Колонка);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Строка Из Источник Цикл
		ЗаполнитьЗначенияСвойств(Приемник.Добавить(), Строка);
	КонецЦикла;
КонецПроцедуры

Функция ТаблицаВМассивСтруктур(Знач ТаблицаЗначений)
	Результат = Новый Массив;
	
	ИменаКолонок = "";
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		ИменаКолонок = ИменаКолонок + "," + Колонка.Имя;
	КонецЦикла;
	ИменаКолонок = Сред(ИменаКолонок, 2);
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		СтруктураСтроки = Новый Структура(ИменаКолонок);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
		Результат.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Проверка на различие версии корреспондента в правилах текущей и другой программы.
//
Функция РазличаютсяВерсииКорреспондента(ИмяПланаОбмена, КлючСообщенияЖурналаРегистрации, ВерсияВЭтойПрограмме,
	ВерсияВДругойПрограмме, ТекстСообщения, ПараметрыВнешнегоСоединения = Неопределено) Экспорт
	
	ВерсияВЭтойПрограмме = ?(ЗначениеЗаполнено(ВерсияВЭтойПрограмме), ВерсияВЭтойПрограмме, ВерсияКорреспондентаВПравилах(ИмяПланаОбмена));
	
	Если ЗначениеЗаполнено(ВерсияВЭтойПрограмме) И ЗначениеЗаполнено(ВерсияВДругойПрограмме)
		И ЗначениеНастройкиПланаОбмена(ИмяПланаОбмена, "ПредупреждатьОНесоответствииВерсийПравилОбмена") Тогда
		
		ВерсияВЭтойПрограммеБезНомераСборки = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(ВерсияВЭтойПрограмме);
		ВерсияВДругойПрограммеБезНомераСборки = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(ВерсияВДругойПрограмме);
		
		Если ВерсияВЭтойПрограммеБезНомераСборки <> ВерсияВДругойПрограммеБезНомераСборки Тогда
			
			ЭтоВнешнееСоединение = (ТекстСообщения = "ВнешнееСоединение");
			
			СинонимПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Синоним;
			
			ШаблонСообщения = НСтр("ru = 'Синхронизация данных может быть выполнена некорректно, т.к. версия программы ""%1"" (%2) в правилах конвертации этой программы отличается от версии %3 в правилах конвертации в другой программе. Убедитесь, что загружены актуальные правила, подходящие для используемых версий обеих программ.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СинонимПланаОбмена, ВерсияВЭтойПрограммеБезНомераСборки, ВерсияВДругойПрограммеБезНомераСборки);
			
			ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);
			
			Если ПараметрыВнешнегоСоединения <> Неопределено
				И ОбщегоНазначенияКлиентСервер.СравнитьВерсии("2.2.3.18", ПараметрыВнешнегоСоединения.ВерсияБСППоВнешнемуСоединению) <= 0
				И ПараметрыВнешнегоСоединения.ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПредупреждатьОНесоответствииВерсийПравилОбмена(ИмяПланаОбмена) Тогда
				
				СинонимПланаОбменаДругойПрограммы = ПараметрыВнешнегоСоединения.УзелИнформационнойБазы.Метаданные().Синоним;
				ТекстСообщенияВнешнееСоединение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					СинонимПланаОбменаДругойПрограммы, ВерсияВДругойПрограммеБезНомераСборки, ВерсияВЭтойПрограммеБезНомераСборки);
				
				ПараметрыВнешнегоСоединения.ВнешнееСоединение.ЗаписьЖурналаРегистрации(ПараметрыВнешнегоСоединения.КлючСообщенияЖурналаРегистрации,
					ПараметрыВнешнегоСоединения.ВнешнееСоединение.УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщенияВнешнееСоединение);
				
			КонецЕсли;
			
			Если ПараметрыСеанса.ОшибкаРасхожденияВерсийПриПолученииДанных.ПроверятьРасхождениеВерсий Тогда
				
				СтруктураПроверки = Новый Структура(ПараметрыСеанса.ОшибкаРасхожденияВерсийПриПолученииДанных);
				СтруктураПроверки.ЕстьОшибка = Истина;
				СтруктураПроверки.ТекстОшибки = ТекстСообщения;
				СтруктураПроверки.ПроверятьРасхождениеВерсий = Ложь;
				ПараметрыСеанса.ОшибкаРасхожденияВерсийПриПолученииДанных = Новый ФиксированнаяСтруктура(СтруктураПроверки);
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ИнициализироватьПараметрыПроверкиРасхожденияВерсий(ПроверятьРасхождениеВерсий) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураПроверки = Новый Структура(ПараметрыСеанса.ОшибкаРасхожденияВерсийПриПолученииДанных);
	СтруктураПроверки.ПроверятьРасхождениеВерсий = ПроверятьРасхождениеВерсий;
	СтруктураПроверки.ЕстьОшибка = Ложь;
	ПараметрыСеанса.ОшибкаРасхожденияВерсийПриПолученииДанных = Новый ФиксированнаяСтруктура(СтруктураПроверки);
	
	Возврат ПараметрыСеанса.ОшибкаРасхожденияВерсийПриПолученииДанных;
	
КонецФункции

Функция ОшибкаРасхожденияВерсийПриПолученииДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПараметрыСеанса.ОшибкаРасхожденияВерсийПриПолученииДанных;
	
КонецФункции

Функция ВерсияКорреспондентаВПравилах(ИмяПланаОбмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПравилаДляОбменаДанными.ПравилаЗачитанныеКорреспондента,
	|	ПравилаДляОбменаДанными.ВидПравил
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	ПравилаДляОбменаДанными.ИмяПланаОбмена = &ИмяПланаОбмена
	|	И ПравилаДляОбменаДанными.ПравилаЗагружены = ИСТИНА
	|	И ПравилаДляОбменаДанными.ВидПравил = ЗНАЧЕНИЕ(Перечисление.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов)";
	
	Запрос.УстановитьПараметр("ИмяПланаОбмена", ИмяПланаОбмена);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СтруктураПравил = Выборка.ПравилаЗачитанныеКорреспондента.Получить().Конвертация;
		ВерсияКорреспондента = Неопределено;
		СтруктураПравил.Свойство("ВерсияКонфигурацииИсточника", ВерсияКорреспондента);
		
		Возврат ВерсияКорреспондента;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает Истина при необходимости обновления конфигурации информационной базы подчиненного узла РИБ.
// В главном узле всегда - Ложь.
// 
// Копия функции ОбщегоНазначения.ТребуетсяОбновлениеКонфигурацииПодчиненногоУзлаРИБ.
// 
Функция ТребуетсяУстановкаОбновления() Экспорт
	
	Возврат ЭтоПодчиненныйУзелРИБ() И КонфигурацияИзменена();
	
КонецФункции

// Возвращает расширенное представление объекта.
//
Функция ПредставлениеОбъекта(ПараметрОбъект) Экспорт
	
	Если ПараметрОбъект = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	МетаданныеОбъекта = ?(ТипЗнч(ПараметрОбъект) = Тип("Строка"), Метаданные.НайтиПоПолномуИмени(ПараметрОбъект), ПараметрОбъект);
	
	// Реквизитов представления может не быть, обходим через структуру.
	Представление = Новый Структура("РасширенноеПредставлениеОбъекта, ПредставлениеОбъекта");
	ЗаполнитьЗначенияСвойств(Представление, МетаданныеОбъекта);
	Если Не ПустаяСтрока(Представление.РасширенноеПредставлениеОбъекта) Тогда
		Возврат Представление.РасширенноеПредставлениеОбъекта;
	ИначеЕсли Не ПустаяСтрока(Представление.ПредставлениеОбъекта) Тогда
		Возврат Представление.ПредставлениеОбъекта;
	КонецЕсли;
	
	Возврат МетаданныеОбъекта.Представление();
КонецФункции

// Возвращает расширенное представление списка объектов.
//
Функция ПредставлениеСпискаОбъектов(ПараметрОбъект) Экспорт
	
	Если ПараметрОбъект = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	МетаданныеОбъекта = ?(ТипЗнч(ПараметрОбъект) = Тип("Строка"), Метаданные.НайтиПоПолномуИмени(ПараметрОбъект), ПараметрОбъект);
	
	// Реквизитов представления может не быть, обходим через структуру.
	Представление = Новый Структура("РасширенноеПредставлениеСписка, ПредставлениеСписка");
	ЗаполнитьЗначенияСвойств(Представление, МетаданныеОбъекта);
	Если Не ПустаяСтрока(Представление.РасширенноеПредставлениеСписка) Тогда
		Возврат Представление.РасширенноеПредставлениеСписка;
	ИначеЕсли Не ПустаяСтрока(Представление.ПредставлениеСписка) Тогда
		Возврат Представление.ПредставлениеСписка;
	КонецЕсли;
	
	Возврат МетаданныеОбъекта.Представление();
КонецФункции

// Возвращает флаг доступности выгрузки для указанной ссылке на узле.
//
//  Параметры:
//      УзелОбмена             - ПланОбменаСсылка - узел плана обмена, возможность выгрузки по которому проверяется.
//      Ссылка                 - Произвольный     - проверяемый объект.
//      ДополнительныеСвойства - Структура        - дополнительные свойства, передаваемыми через объект.
//
// Возвращаемое значение:
//  Булево - флаг разрешения
//
Функция ВыгрузкаСсылкиРазрешена(УзелОбмена, Ссылка, ДополнительныеСвойства = Неопределено) Экспорт
	
	Если Ссылка.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектРегистрации = Ссылка.ПолучитьОбъект();
	Если ОбъектРегистрации = Неопределено Тогда
		// Объект удален, можно всегда.
		Возврат Истина;
	КонецЕсли;
	
	Если ДополнительныеСвойства <> Неопределено Тогда
		СтруктураРеквизитов = Новый Структура("ДополнительныеСвойства");
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, ОбъектРегистрации);
		ДополнительныеСвойстваОбъекта = СтруктураРеквизитов.ДополнительныеСвойства;
		
		Если ТипЗнч(ДополнительныеСвойстваОбъекта) = Тип("Структура") Тогда
			Для Каждого КлючЗначение Из ДополнительныеСвойства Цикл
				ДополнительныеСвойстваОбъекта.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка возможности выгрузки.
	Отправка = ОтправкаЭлементаДанных.Авто;
	ОбменДаннымиСобытия.ПриОтправкеДанныхКорреспонденту(ОбъектРегистрации, Отправка, , УзелОбмена);
	Возврат Отправка = ОтправкаЭлементаДанных.Авто;
КонецФункции

// Возвращает флаг доступности выгрузки вручную для указанной ссылке на узле.
//
//  Параметры:
//      УзелОбмена - ПланОбменаСсылка - узел плана обмена, возможность выгрузки по которому проверяется.
//      Ссылка     - Произвольный     -  проверяемый объект.
//
// Возвращаемое значение:
//  Булево - флаг разрешения
//
Функция ВыгрузкаСсылкиИзИнтерактивногоДополненияРазрешена(УзелОбмена, Ссылка) Экспорт
	
	ДополнительныеСвойства = Новый Структура("ИнтерактивноеДополнениеВыгрузки", Истина);
	Возврат ВыгрузкаСсылкиРазрешена(УзелОбмена, Ссылка, ДополнительныеСвойства);
	
КонецФункции

// Обертки фоновых процедур интерактивного изменения выгрузки.
//
Процедура ИнтерактивноеИзменениеВыгрузки_СформироватьТабличныйДокументПользователя(Параметры, АдресРезультата) Экспорт
	
	ОбъектОтчета = ИнтерактивноеИзменениеВыгрузки_ОбъектПоНастройкам(Параметры.СтруктураОбработки);
	Результат = ОбъектОтчета.СформироватьТабличныйДокументПользователя(Параметры.ПолноеИмяМетаданных, Параметры.Представление, Параметры.УпрощенныйРежим);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура ИнтерактивноеИзменениеВыгрузки_СформироватьДеревоЗначений(Параметры, АдресРезультата) Экспорт
	
	ОбъектОтчета = ИнтерактивноеИзменениеВыгрузки_ОбъектПоНастройкам(Параметры.СтруктураОбработки);
	Результат = ОбъектОтчета.СформироватьДеревоЗначений();
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Функция ИнтерактивноеИзменениеВыгрузки_ОбъектПоНастройкам(Знач Настройки)
	ОбъектОтчета = Обработки.ИнтерактивноеИзменениеВыгрузки.Создать();
	
	ЗаполнитьЗначенияСвойств(ОбъектОтчета, Настройки, , "КомпоновщикОтбораВсехДокументов");
	
	// Компоновщик конструируем по частям.
	Данные = ОбъектОтчета.КомпоновщикНастроекОбщегоОтбора();
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Данные.СхемаКомпоновки));
	Компоновщик.ЗагрузитьНастройки(Данные.Настройки);
	
	ОбъектОтчета.КомпоновщикОтбораВсехДокументов = Компоновщик;
	
	ЭлементыОтбора = ОбъектОтчета.КомпоновщикОтбораВсехДокументов.Настройки.Отбор.Элементы;
	ЭлементыОтбора.Очистить();
	ОбъектОтчета.ДобавитьЗначенияОтбораКомпоновки(
		ЭлементыОтбора, Настройки.НастройкиКомпоновщикаОтбораВсехДокументов.Отбор.Элементы);
	
	Возврат ОбъектОтчета;
КонецФункции

// Возвращает список ролей профиля групп доступа "Синхронизация данных с другими программами".
// 
Функция РолиПрофиляДоступаСинхронизацияДанныхСДругимиПрограммами()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		Возврат "ВыполнениеСинхронизацииДанных, УдаленныйДоступБазоваяФункциональность, ЧтениеИнформацииОВерсияхОбъектов";
	Иначе
		Возврат "ВыполнениеСинхронизацииДанных, УдаленныйДоступБазоваяФункциональность";
	КонецЕсли;
	
КонецФункции

// Получает параметр защищенного соединения.
//
Функция ЗащищенноеСоединение(Путь) Экспорт
	
	Возврат ?(НРег(Лев(Путь, 4)) = "ftps", Новый ЗащищенноеСоединениеOpenSSL, Неопределено);
	
КонецФункции

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДелПредупрежденияСинхронизации(ТекущиеДела)
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.РезультатыОбменаДанными)
		Или МодульТекущиеДелаСервер.ДелоОтключено("ПредупрежденияПриСинхронизации") Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоНерассмотренныхПроблем = КоличествоНерассмотренныхПроблем();
	
	// Процедура вызывается только при наличии подсистемы "Текущие дела", поэтому здесь
	// не делается проверка существования подсистемы.
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.ОбщиеФормы.СинхронизацияДанных.ПолноеИмя());
	
	Для Каждого Раздел Из Разделы Цикл
		
		ИдентификаторПредупрежденияПриСинхронизации = "ПредупрежденияПриСинхронизации" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "");
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИдентификаторПредупрежденияПриСинхронизации;
		Дело.ЕстьДела       = КоличествоНерассмотренныхПроблем > 0;
		Дело.Представление  = НСтр("ru = 'Предупреждения при синхронизации'");
		Дело.Количество     = КоличествоНерассмотренныхПроблем;
		Дело.Форма          = "РегистрСведений.РезультатыОбменаДанными.Форма.Форма";
		Дело.Владелец       = Раздел;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДелНеобходимоОбновление(ТекущиеДела)
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если Не ПравоДоступа("Администрирование", Метаданные)
		Или МодульТекущиеДелаСервер.ДелоОтключено("НеобходимоОбновлениеОбменДанными") Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяУстановкаОбновления = ТребуетсяУстановкаОбновления();
	
	// Процедура вызывается только при наличии подсистемы "Текущие дела", поэтому здесь
	// не делается проверка существования подсистемы.
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.ОбщиеФормы.СинхронизацияДанных.ПолноеИмя());
	
	Для Каждого Раздел Из Разделы Цикл
		
		ИдентификаторНеобходимоОбновление = "НеобходимоОбновлениеОбменДанными" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "");
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИдентификаторНеобходимоОбновление;
		Дело.ЕстьДела       = ТребуетсяУстановкаОбновления;
		Дело.Важное         = Истина;
		Дело.Представление  = НСтр("ru = 'Обновить версию программы'");
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбновлениеКонфигурации") Тогда
			МодульОбновлениеКонфигурацииКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ОбновлениеКонфигурацииКлиентСервер");
			ПараметрыФормы = Новый Структура("ЗавершениеРаботыСистемы, ПолученоОбновлениеКонфигурации", Ложь, Ложь);
			Дело.Форма      = МодульОбновлениеКонфигурацииКлиентСервер.ИмяФормыОбработкиОбновлениеКонфигурации();
			Дело.ПараметрыФормы = ПараметрыФормы;
		Иначе
			Дело.Форма      = "ОбщаяФорма.ДополнительноеОписание";
			Дело.ПараметрыФормы = Новый Структура("Заголовок,ИмяМакета",
				НСтр("ru = 'Установка обновления'"), "ИнструкцияКакВыполнитьУстановкуОбновленияВручную");
		КонецЕсли;
		Дело.Владелец       = Раздел;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДелПроверитьСовместимостьСТекущейВерсией(ТекущиеДела)
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если Не ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.ПравилаДляОбменаДанными)
		Или МодульТекущиеДелаСервер.ДелоОтключено("ПравилаОбмена") Тогда
		Возврат;
	КонецЕсли;
	
	// Если в командном интерфейсе нет раздела к которому относится регистр сведений, дело не добавляется.
	ПодсистемыКомандногоИнтерфейса = МодульТекущиеДелаСервер.РазделыДляОбъекта("РегистрСведений.ПравилаДляОбменаДанными");
	Если ПодсистемыКомандногоИнтерфейса.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	Подсистема = ПодсистемыКомандногоИнтерфейса[0];
	
	ВывестиДело = Истина;
	ПровереноНаВерсию = ХранилищеОбщихНастроек.Загрузить("ТекущиеДела", "ПланыОбмена");
	Если ПровереноНаВерсию <> Неопределено Тогда
		ВерсияМассив  = СтрРазделить(Метаданные.Версия, ".");
		ТекущаяВерсия = ВерсияМассив[0] + ВерсияМассив[1] + ВерсияМассив[2];
		Если ПровереноНаВерсию = ТекущаяВерсия Тогда
			ВывестиДело = Ложь; // Дополнительные отчеты и обработки проверены на текущей версии.
		КонецЕсли;
	КонецЕсли;
	
	ПланыОбменаСПравиламиИзФайла = ПланыОбменаСПравиламиИзФайла();
	
	// Добавление дела.
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор = "ПравилаОбмена";
	Дело.ЕстьДела      = ВывестиДело И ПланыОбменаСПравиламиИзФайла > 0;
	Дело.Представление = НСтр("ru = 'Правила обмена'");
	Дело.Количество    = ПланыОбменаСПравиламиИзФайла;
	Дело.Форма         = "РегистрСведений.ПравилаДляОбменаДанными.Форма.ПроверкаСинхронизацииДанных";
	Дело.Владелец      = "ПроверитьСовместимостьСТекущейВерсией";
	
	// Проверка наличия группы дела. Если группа отсутствует - добавляем.
	ГруппаДела = ТекущиеДела.Найти("ПроверитьСовместимостьСТекущейВерсией", "Идентификатор");
	Если ГруппаДела = Неопределено Тогда
		ГруппаДела = ТекущиеДела.Добавить();
		ГруппаДела.Идентификатор = "ПроверитьСовместимостьСТекущейВерсией";
		ГруппаДела.ЕстьДела      = Дело.ЕстьДела;
		ГруппаДела.Представление = НСтр("ru = 'Проверить совместимость'");
		Если Дело.ЕстьДела Тогда
			ГруппаДела.Количество = Дело.Количество;
		КонецЕсли;
		ГруппаДела.Владелец = Подсистема;
	Иначе
		Если Не ГруппаДела.ЕстьДела Тогда
			ГруппаДела.ЕстьДела = Дело.ЕстьДела;
		КонецЕсли;
		
		Если Дело.ЕстьДела Тогда
			ГруппаДела.Количество = ГруппаДела.Количество + Дело.Количество;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СинонимДанныхСтрокиДереваСтатистики(СтрокаДерева, ТипИсточникаСтрокой) 
	
	Синоним = СтрокаДерева.Синоним;
	
	Фильтр = Новый Структура("ПолноеИмя, Синоним", СтрокаДерева.ПолноеИмя, Синоним);
	Существующие = СтрокаДерева.Владелец().Строки.НайтиСтроки(Фильтр, Истина);
	Количество   = Существующие.Количество();
	Если Количество = 0 Или (Количество = 1 И Существующие[0] = СтрокаДерева) Тогда
		// Не было еще такого описания в этом дереве.
		Возврат Синоним;
	КонецЕсли;
	
	Синоним = "[СинонимТаблицыПриемника] ([ИмяТаблицыИсточника])"; // Не локализуется
	Синоним = СтрЗаменить(Синоним, "[СинонимТаблицыПриемника]", СтрокаДерева.Синоним);
	
	Возврат СтрЗаменить(Синоним, "[ИмяТаблицыИсточника]", УдалитьИмяКлассаИзИмениОбъекта(ТипИсточникаСтрокой));
КонецФункции

Функция ОпределитьНаличиеДвиженийПоДокументу(ДокументСсылка)
	ТекстЗапроса = "";	
	// Для исключения падения для документов, проводящимся более чем по 256 таблицам.
	счетчик_таблиц = 0;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		// В запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// Имя регистра приводим к Строка(200), см. ниже.
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// Если в запрос попадает более 256 таблиц - разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным).
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗАпрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// При выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200).
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// Если количество таблиц не превысило 256 - возвращаем таблицу.
	Если счетчик_таблиц = МетаданныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// Таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции

#КонецОбласти

#Область РаботаСКонстантойСообщениеОбменаИзГлавногоУзла

// Зачитывает из информационной базы информацию о сообщении обмена данными.
//
// Возвращаемое значение - Структура - Информация о расположении файла сообщения обмена (текущий формат).
//                       - ДвоичныеДанные - Сообщение обмена в информационной базе (устаревший формат).
//
Функция ПолучитьСообщениеОбменаДаннымиИзГлавногоУзла()
	
	Возврат Константы.СообщениеОбменаДаннымиИзГлавногоУзла.Получить().Получить();
	
КонецФункции

// Записывает на диск файл сообщения обмена, полученный из главного узла.
// Сохраняет путь к записанному сообщению в константу СообщениеОбменаДаннымиИзГлавногоУзла.
//
// Параметры:
//	СообщениеОбмена - ДвоичныеДанные - Зачитанное сообщение обмена.
//	ГлавныйУзел - ПланОбменаСсылка - Узел из которого получено сообщение.
//
Процедура УстановитьСообщениеОбменаДаннымиИзГлавногоУзла(СообщениеОбмена, ГлавныйУзел) Экспорт
	
	ПутьКФайлу = "[Каталог][Путь].xml";
	ПутьКФайлу = СтрЗаменить(ПутьКФайлу, "[Каталог]", КаталогВременногоХранилищаФайлов());
	ПутьКФайлу = СтрЗаменить(ПутьКФайлу, "[Путь]", Новый УникальныйИдентификатор);
	
	СообщениеОбмена.Записать(ПутьКФайлу);
	
	СтруктураСообщения = Новый Структура;
	СтруктураСообщения.Вставить("ПутьКФайлу", ПутьКФайлу);
	
	Константы.СообщениеОбменаДаннымиИзГлавногоУзла.Установить(Новый ХранилищеЗначения(СтруктураСообщения));
	
	ЗаписатьСобытиеПолученияДанных(ГлавныйУзел, НСтр("ru = 'Сообщение обмена записано в кэш.'"));
	
КонецПроцедуры

// Удаляет файл сообщения обмена с диска и очищает константу СообщениеОбменаДаннымиИзГлавногоУзла.
//
Процедура ОчиститьСообщениеОбменаДаннымиИзГлавногоУзла() Экспорт
	
	СообщениеОбмена = ПолучитьСообщениеОбменаДаннымиИзГлавногоУзла();
	
	Если ТипЗнч(СообщениеОбмена) = Тип("Структура") Тогда
		
		УдалитьФайлы(СообщениеОбмена.ПутьКФайлу);
		
	КонецЕсли;
	
	Константы.СообщениеОбменаДаннымиИзГлавногоУзла.Установить(Новый ХранилищеЗначения(Неопределено));
	
	ЗаписатьСобытиеПолученияДанных(ГлавныйУзел(), НСтр("ru = 'Сообщение обмена удалено из кэша.'"));
	
КонецПроцедуры

#КонецОбласти

#Область ПрофилиБезопасности

Процедура СформироватьЗапросыНаИспользованиеВнешнихРесурсов(ЗапросыРазрешений)
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Константы.КаталогСообщенийОбменаДаннымиДляLinux.СоздатьМенеджерЗначения().ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	Константы.КаталогСообщенийОбменаДаннымиДляWindows.СоздатьМенеджерЗначения().ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	РегистрыСведений.НастройкиТранспортаОбмена.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	РегистрыСведений.ПравилаДляОбменаДанными.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	
КонецПроцедуры

Процедура ЗапросВнешнихРесурсовДляКаталогаСообщенийОбменаДанными(ЗапросыРазрешений, Объект) Экспорт
	
	ЗначениеКонстанты = Объект.Значение;
	Если Не ПустаяСтрока(ЗначениеКонстанты) Тогда
		
		Разрешения = Новый Массив();
		Разрешения.Добавить(РаботаВБезопасномРежиме.РазрешениеНаИспользованиеКаталогаФайловойСистемы(
			ЗначениеКонстанты, Истина, Истина));
		
		ЗапросыРазрешений.Добавить(
			РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Объект.Метаданные())));
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает шаблон имени профиля безопасности для внешнего модуля.
// Функция должна возвращать одно и то же значение при многократном вызове.
//
// Параметры:
//  ВнешнийМодуль - ЛюбаяСсылка, ссылка на внешний модуль.
//
// Возвращаемое значение - Строка - шаблон имя профиля безопасности, содержащий символы
//  "%1", вместо которых в дальнейшем будет подставлен уникальный идентификатор.
//
Функция ШаблонИмениПрофиляБезопасности(Знач ВнешнийМодуль) Экспорт
	
	Шаблон = "Exchange_[ИмяПланаОбмена]_%1"; // Не локализуется
	Возврат СтрЗаменить(Шаблон, "[ИмяПланаОбмена]", ВнешнийМодуль.Имя);
	
КонецФункции

// Возвращает пиктограмму, отображающую внешний модуль.
//
//  ВнешнийМодуль - ЛюбаяСсылка, ссылка на внешний модуль,
//
// Возвращаемое значение - Картинка.
//
Функция ПиктограммаВнешнегоМодуля(Знач ВнешнийМодуль) Экспорт
	
	Возврат БиблиотекаКартинок.СинхронизацияДанных;
	
КонецФункции

Функция СловарьКонтейнераВнешнегоМодуля() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("Именительный", НСтр("ru = 'Настройка синхронизация данных'"));
	Результат.Вставить("Родительный", НСтр("ru = 'Настройки синхронизации данных'"));
	
	Возврат Результат;
	
КонецФункции

Функция КонтейнерыВнешнихМодулей() Экспорт
	
	Результат = Новый Массив();
	ОбменДаннымиПереопределяемый.ПолучитьПланыОбмена(Результат);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнтерактивноеИзменениеВыгрузки

// Инициализирует дополнение выгрузки для мастера пошагового обмена.
//
// Параметры:
//     УзелИнформационнойБазы - ПланОбменаСсылка                - ссылка на узел, для которого производится настройка.
//     АдресХранилищаФормы    - Строка, УникальныйИдентификатор - адрес сохранения между серверными вызовами.
//     ЕстьСценарийУзла       - Булево                          - флаг необходимости дополнительной настройки.
//
// Возвращаемое значение:
//     Структура - данные для дальнейшего оперирования дополнением выгрузки.
//
Функция ИнтерактивноеИзменениеВыгрузки(Знач УзелИнформационнойБазы, Знач АдресХранилищаФормы, Знач ЕстьСценарийУзла=Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("УзелИнформационнойБазы", УзелИнформационнойБазы);
	Результат.Вставить("ВариантВыгрузки", 0);
	
	Результат.Вставить("ПериодОтбораВсехДокументов", Новый СтандартныйПериод);
	Результат.ПериодОтбораВсехДокументов.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц;
	
	ОбработкаДополнения = Обработки.ИнтерактивноеИзменениеВыгрузки.Создать();
	ОбработкаДополнения.УзелИнформационнойБазы = УзелИнформационнойБазы;
	ОбработкаДополнения.ВариантВыгрузки        = 0;
	
	// Компоновщик собираем по частям.
	Данные = ОбработкаДополнения.КомпоновщикНастроекОбщегоОтбора(АдресХранилищаФормы);
	Результат.Вставить("АдресКомпоновщикаВсехДокументов", ПоместитьВоВременноеХранилище(Данные, АдресХранилищаФормы));
	
	Результат.Вставить("ДополнительнаяРегистрация", Новый ТаблицаЗначений);
	Колонки = Результат.ДополнительнаяРегистрация.Колонки;
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	Колонки.Добавить("ПолноеИмяМетаданных", ТипСтрока);
	Колонки.Добавить("Отбор",         Новый ОписаниеТипов("ОтборКомпоновкиДанных"));
	Колонки.Добавить("Период",        Новый ОписаниеТипов("СтандартныйПериод"));
	Колонки.Добавить("ВыборПериода",  Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("Представление", ТипСтрока);
	Колонки.Добавить("ОтборСтрокой",  ТипСтрока);
	Колонки.Добавить("Количество",    ТипСтрока);

	Результат.Вставить("ПараметрыСценарияДополнения", Новый Структура);
	ПараметрыСценарияДополнения = Результат.ПараметрыСценарияДополнения;
	
	ПараметрыСценарияДополнения.Вставить("ВариантБезДополнения", Новый Структура("Использование, Порядок, Заголовок", Истина, 1));
	ПараметрыСценарияДополнения.ВариантБезДополнения.Вставить("Пояснение", 
		НСтр("ru='Будут отправлены только данные согласно общим настройкам.'")); 
	
	ПараметрыСценарияДополнения.Вставить("ВариантВсеДокументы", Новый Структура("Использование, Порядок, Заголовок", Истина, 2));
	ПараметрыСценарияДополнения.ВариантВсеДокументы.Вставить("Пояснение",
		НСтр("ru='Дополнительно будут отправлены все документы за период, удовлетворяющие условиям отбора.'")); 
	
	ПараметрыСценарияДополнения.Вставить("ВариантПроизвольныйОтбор", Новый Структура("Использование, Порядок, Заголовок", Истина, 3));
	ПараметрыСценарияДополнения.ВариантПроизвольныйОтбор.Вставить("Пояснение",
		НСтр("ru='Дополнительно будут отправлены данные согласно отбору.'")); 
	
	ПараметрыСценарияДополнения.Вставить("ВариантДополнительно", Новый Структура("Использование, Порядок, Заголовок", Ложь,   4));
	ПараметрыСценарияДополнения.ВариантДополнительно.Вставить("Пояснение",
		НСтр("ru='Будут отправлены дополнительные данные по настройкам.'")); 
	
	ВариантДополнительно = ПараметрыСценарияДополнения.ВариантДополнительно;
	ВариантДополнительно.Вставить("Заголовок", "");
	ВариантДополнительно.Вставить("ИспользоватьПериодОтбора", Ложь);
	ВариантДополнительно.Вставить("ПериодОтбора");
	ВариантДополнительно.Вставить("Отбор", Результат.ДополнительнаяРегистрация.Скопировать());
	ВариантДополнительно.Вставить("ИмяФормыОтбора");
	ВариантДополнительно.Вставить("ЗаголовокКомандыФормы");
	
	МетаУзел = УзелИнформационнойБазы.Метаданные();
	
	Если ЕстьСценарийУзла=Неопределено Тогда
		// Можно определить по метаданным узла.
		ЕстьСценарийУзла = Ложь;
	КонецЕсли;
	
	Если ЕстьСценарийУзла Тогда
		
		МодульМенеджераУзла = ПланыОбмена[МетаУзел.Имя];
		МодульМенеджераУзла.НастроитьИнтерактивнуюВыгрузку(УзелИнформационнойБазы, Результат.ПараметрыСценарияДополнения);
		
	КонецЕсли;
	
	Результат.Вставить("АдресХранилищаФормы", АдресХранилищаФормы);
	Возврат Результат;
КонецФункции

// Очистка отбора всех документов.
//
// Параметры:
//     ДополнениеВыгрузки - Структура, РеквизитФормыКоллекция - описание параметров выгрузки.
//
Процедура ИнтерактивноеИзменениеВыгрузкиОчисткаОбщегоОтбора(ДополнениеВыгрузки) Экспорт
	
	Если ПустаяСтрока(ДополнениеВыгрузки.АдресКомпоновщикаВсехДокументов) Тогда
		ДополнениеВыгрузки.КомпоновщикОтбораВсехДокументов.Настройки.Отбор.Элементы.Очистить();
	Иначе
		Данные = ПолучитьИзВременногоХранилища(ДополнениеВыгрузки.АдресКомпоновщикаВсехДокументов);
		Данные.Настройки.Отбор.Элементы.Очистить();
		ДополнениеВыгрузки.АдресКомпоновщикаВсехДокументов = ПоместитьВоВременноеХранилище(Данные, ДополнениеВыгрузки.АдресХранилищаФормы);
		
		Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
		Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Данные.СхемаКомпоновки));
		Компоновщик.ЗагрузитьНастройки(Данные.Настройки);
		ДополнениеВыгрузки.КомпоновщикОтбораВсехДокументов = Компоновщик;
	КонецЕсли;
	
КонецПроцедуры

// Очистка детального отбора
//
// Параметры:
//     ДополнениеВыгрузки - Структура, РеквизитФормыКоллекция - описание параметров выгрузки.
//
Процедура ИнтерактивноеИзменениеВыгрузкиОчисткаДетально(ДополнениеВыгрузки) Экспорт
	ДополнениеВыгрузки.ДополнительнаяРегистрация.Очистить();
КонецПроцедуры

// Определяет описание общего отбора. При пустом отборе возвращает пустую строку.
//
// Параметры:
//     ДополнениеВыгрузки - Структура, РеквизитФормыКоллекция - описание параметров выгрузки.
//
// Возвращаемое значение:
//     Строка - описание отбора.
//
Функция ИнтерактивноеИзменениеВыгрузкиОписаниеДополненияОбщегоОтбора(Знач ДополнениеВыгрузки) Экспорт
	
	ДанныеКомпоновщика = ПолучитьИзВременногоХранилища(ДополнениеВыгрузки.АдресКомпоновщикаВсехДокументов);
	
	Источник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(ДанныеКомпоновщика.СхемаКомпоновки);
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Источник);
	Компоновщик.ЗагрузитьНастройки(ДанныеКомпоновщика.Настройки);
	
	Возврат ПредставлениеОтбораДополненияВыгрузки(Неопределено, Компоновщик, "");
КонецФункции

// Определяет описание детального отбора. При пустом отборе возвращает пустую строку.
//
// Параметры:
//     ДополнениеВыгрузки - Структура, РеквизитФормыКоллекция - описание параметров выгрузки.
//
// Возвращаемое значение:
//     Строка - описание отбора.
//
Функция ИнтерактивноеИзменениеВыгрузкиОписаниеДетальногоОтбора(Знач ДополнениеВыгрузки) Экспорт
	Возврат ПредставлениеДетальногоДополненияВыгрузки(ДополнениеВыгрузки.ДополнительнаяРегистрация, "");
КонецФункции

// Анализирует историю настроек-отборов, сохраненную пользователем для узла.
//
// Параметры:
//     ДополнениеВыгрузки - Структура, РеквизитФормыКоллекция - описание параметров выгрузки.
//
// Возвращаемое значение:
//     Список значений, где представление - имя настройки, значение - данные настройки.
//
Функция ИнтерактивноеИзменениеВыгрузкиИсторияНастроек(Знач ДополнениеВыгрузки) Экспорт
	ОбработкаДополнения = Обработки.ИнтерактивноеИзменениеВыгрузки.Создать();
	
	ФильтрВарианта = ИнтерактивноеИзменениеВыгрузкиФильтрВарианта(ДополнениеВыгрузки);
	
	Возврат ОбработкаДополнения.ПрочитатьПредставленияСпискаНастроек(ДополнениеВыгрузки.УзелИнформационнойБазы, ФильтрВарианта);
КонецФункции

// Восстанавливает настройки в реквизитах ДополнениеВыгрузки по названию сохраненной настройки.
//
// Параметры:
//     ДополнениеВыгрузки     - Структура, РеквизитФормыКоллекция - описание параметров выгрузки.
//     ПредставлениеНастройки - Строка                            - название восстанавливаемой настройки.
//
// Возвращаемое значение:
//     Булево - Истина - успешно восстановлено, Ложь - настройка не найдена.
//
Функция ИнтерактивноеИзменениеВыгрузкиВосстановитьНастройки(ДополнениеВыгрузки, Знач ПредставлениеНастройки) Экспорт
	
	ОбработкаДополнения = Обработки.ИнтерактивноеИзменениеВыгрузки.Создать();
	ЗаполнитьЗначенияСвойств(ОбработкаДополнения, ДополнениеВыгрузки);
	
	ФильтрВарианта = ИнтерактивноеИзменениеВыгрузкиФильтрВарианта(ДополнениеВыгрузки);
	
	// Восстанавливаем состояние объекта.
	Результат = ОбработкаДополнения.ВосстановитьТекущееИзНастроек(ПредставлениеНастройки, ФильтрВарианта, ДополнениеВыгрузки.АдресХранилищаФормы);
	
	Если Результат Тогда
		ЗаполнитьЗначенияСвойств(ДополнениеВыгрузки, ОбработкаДополнения, "ВариантВыгрузки, ПериодОтбораВсехДокументов, КомпоновщикОтбораВсехДокументов");
		
		// Обновляем адрес компоновщика всегда.
		Данные = ОбработкаДополнения.КомпоновщикНастроекОбщегоОтбора();
		Данные.Настройки = ДополнениеВыгрузки.КомпоновщикОтбораВсехДокументов.Настройки;
		ДополнениеВыгрузки.АдресКомпоновщикаВсехДокументов = ПоместитьВоВременноеХранилище(Данные, ДополнениеВыгрузки.АдресХранилищаФормы);
		
		ЗаполнитьТаблицуЗначений(ДополнениеВыгрузки.ДополнительнаяРегистрация, ОбработкаДополнения.ДополнительнаяРегистрация);
		
		// Настройки по сценарию узла обновляем только если они определены в прочитанном. Иначе оставляем текущее.
		Если ОбработкаДополнения.ДополнительнаяРегистрацияСценарияУзла.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ДополнениеВыгрузки, ОбработкаДополнения, "ПериодОтбораСценарияУзла, ПредставлениеОтбораСценарияУзла");
			ЗаполнитьТаблицуЗначений(ДополнениеВыгрузки.ДополнительнаяРегистрацияСценарияУзла, ОбработкаДополнения.ДополнительнаяРегистрацияСценарияУзла);
			// Нормализуем установки периода.
			ИнтерактивноеИзменениеВыгрузкиУстановитьПериодаСценарияУзла(ДополнениеВыгрузки);
		КонецЕсли;
		
		// Текущее представление ранее запомненных настроек.
		ДополнениеВыгрузки.ПредставлениеТекущейНастройки = ПредставлениеНастройки;
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Сохраняет настройки с указанным именем по данным ДополнениеВыгрузки.
//
// Параметры:
//     ДополнениеВыгрузки     - Структура, РеквизитФормыКоллекция - описание параметров выгрузки.
//     ПредставлениеНастройки - Строка                            - название сохраняемой настройки.
//
Процедура ИнтерактивноеИзменениеВыгрузкиСохранитьНастройки(ДополнениеВыгрузки, Знач ПредставлениеНастройки) Экспорт
	
	ОбработкаДополнения = Обработки.ИнтерактивноеИзменениеВыгрузки.Создать();
	ЗаполнитьЗначенияСвойств(ОбработкаДополнения, ДополнениеВыгрузки);
	
	СписокРеквизитов = "
		|ВариантВыгрузки, ПериодОтбораВсехДокументов,
		|ПериодОтбораСценарияУзла, ПредставлениеОтбораСценарияУзла";
	
	ЗаполнитьЗначенияСвойств(ОбработкаДополнения, ДополнениеВыгрузки, СписокРеквизитов);
	
	ЗаполнитьТаблицуЗначений(ОбработкаДополнения.ДополнительнаяРегистрация,             ДополнениеВыгрузки.ДополнительнаяРегистрация);
	ЗаполнитьТаблицуЗначений(ОбработкаДополнения.ДополнительнаяРегистрацияСценарияУзла, ДополнениеВыгрузки.ДополнительнаяРегистрацияСценарияУзла);
	
	// Компоновщик настроек собираем заново.
	Данные = ОбработкаДополнения.КомпоновщикНастроекОбщегоОтбора();
	
	Если ПустаяСтрока(ДополнениеВыгрузки.АдресКомпоновщикаВсехДокументов) Тогда
		ИсточникНастроек = ДополнениеВыгрузки.КомпоновщикОтбораВсехДокументов.Настройки;
	Иначе
		СтруктураКомпоновщика = ПолучитьИзВременногоХранилища(ДополнениеВыгрузки.АдресКомпоновщикаВсехДокументов);
		ИсточникНастроек = СтруктураКомпоновщика.Настройки;
	КонецЕсли;
		
	ОбработкаДополнения.КомпоновщикОтбораВсехДокументов = Новый КомпоновщикНастроекКомпоновкиДанных;
	ОбработкаДополнения.КомпоновщикОтбораВсехДокументов.Инициализировать( Новый ИсточникДоступныхНастроекКомпоновкиДанных(Данные.СхемаКомпоновки) );
	ОбработкаДополнения.КомпоновщикОтбораВсехДокументов.ЗагрузитьНастройки(ИсточникНастроек);
	
	// Собственно сохранение
	ОбработкаДополнения.СохранитьТекущееВНастройки(ПредставлениеНастройки);
	
	// Текущее представление запомненных настроек.
	ДополнениеВыгрузки.ПредставлениеТекущейНастройки = ПредставлениеНастройки;
КонецПроцедуры

// Заполняет реквизит формы по данным структуры настроек.
//
// Параметры:
//     Форма                       - УправляемаяФорма - форма для установки реквизита.
//     НастройкиДополненияВыгрузки - Структура        - исходные настройки.
//     ИмяРеквизитаДополнения      - Строка           - имя реквизита формы для создания или заполнения.
//
Процедура ИнтерактивноеИзменениеВыгрузкиРеквизитПоНастройкам(Форма, Знач НастройкиДополненияВыгрузки, Знач ИмяРеквизитаДополнения="ДополнениеВыгрузки") Экспорт
	ПараметрыСценарияДополнения = НастройкиДополненияВыгрузки.ПараметрыСценарияДополнения;
	
	// Разбираемся с реквизитами
	РеквизитДополнения = Неопределено;
	Для Каждого Реквизит Из Форма.ПолучитьРеквизиты() Цикл
		Если Реквизит.Имя=ИмяРеквизитаДополнения Тогда
			РеквизитДополнения = Реквизит;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Проверяем и добавляем реквизит.
	Добавляемые = Новый Массив;
	Если РеквизитДополнения=Неопределено Тогда
		РеквизитДополнения = Новый РеквизитФормы(ИмяРеквизитаДополнения, 
			Новый ОписаниеТипов("ОбработкаОбъект.ИнтерактивноеИзменениеВыгрузки"));
			
		Добавляемые.Добавить(РеквизитДополнения);
		Форма.ИзменитьРеквизиты(Добавляемые);
	КонецЕсли;
	
	// Проверяем и добавляем колонки общей дополнительной регистрации.
	ПутьРеквизитаТаблицы = РеквизитДополнения.Имя + ".ДополнительнаяРегистрация";
	Если Форма.ПолучитьРеквизиты(ПутьРеквизитаТаблицы).Количество()=0 Тогда
		Добавляемые.Очистить();
		Колонки = НастройкиДополненияВыгрузки.ДополнительнаяРегистрация.Колонки;
		Для Каждого Колонка Из Колонки Цикл
			Добавляемые.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ПутьРеквизитаТаблицы));
		КонецЦикла;
		Форма.ИзменитьРеквизиты(Добавляемые);
	КонецЕсли;
	
	// Проверяем и добавляем колонки дополнительной регистрации сценария узла.
	ПутьРеквизитаТаблицы = РеквизитДополнения.Имя + ".ДополнительнаяРегистрацияСценарияУзла";
	Если Форма.ПолучитьРеквизиты(ПутьРеквизитаТаблицы).Количество()=0 Тогда
		Добавляемые.Очистить();
		Колонки = ПараметрыСценарияДополнения.ВариантДополнительно.Отбор.Колонки;
		Для Каждого Колонка Из Колонки Цикл
			Добавляемые.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ПутьРеквизитаТаблицы));
		КонецЦикла;
		Форма.ИзменитьРеквизиты(Добавляемые);
	КонецЕсли;
	
	// Добавляем данные
	ЗначениеРеквизита = Форма[ИмяРеквизитаДополнения];
	
	// Обрабатываем таблицы значений.
	ЗначениеВДанныеФормы(ПараметрыСценарияДополнения.ВариантДополнительно.Отбор,
		ЗначениеРеквизита.ДополнительнаяРегистрацияСценарияУзла);
	
	ПараметрыСценарияДополнения.ВариантДополнительно.Отбор =ТаблицаВМассивСтруктур(
		ПараметрыСценарияДополнения.ВариантДополнительно.Отбор);
	
	ЗначениеРеквизита.ПараметрыСценарияДополнения = ПараметрыСценарияДополнения;
	
	ЗначениеРеквизита.УзелИнформационнойБазы = НастройкиДополненияВыгрузки.УзелИнформационнойБазы;

	ЗначениеРеквизита.ВариантВыгрузки                 = НастройкиДополненияВыгрузки.ВариантВыгрузки;
	ЗначениеРеквизита.ПериодОтбораВсехДокументов      = НастройкиДополненияВыгрузки.ПериодОтбораВсехДокументов;
	
	Данные = ПолучитьИзВременногоХранилища(НастройкиДополненияВыгрузки.АдресКомпоновщикаВсехДокументов);
	УдалитьИзВременногоХранилища(НастройкиДополненияВыгрузки.АдресКомпоновщикаВсехДокументов);
	ЗначениеРеквизита.АдресКомпоновщикаВсехДокументов = ПоместитьВоВременноеХранилище(Данные, Форма.УникальныйИдентификатор);
	
	ЗначениеРеквизита.ПериодОтбораСценарияУзла = ПараметрыСценарияДополнения.ВариантДополнительно.ПериодОтбора;
	
	Если ПараметрыСценарияДополнения.ВариантДополнительно.Использование Тогда
		ЗначениеРеквизита.ПредставлениеОтбораСценарияУзла = ПредставлениеДополненияВыгрузкиПоСценариюУзла(ЗначениеРеквизита);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает описание выгрузки по настройкам.
//
// Параметры:
//     ДополнениеВыгрузки - Структура, ДанныеФормыКоллекция - описание параметров выгрузки.
//
// Возвращаемое значение:
//     Строка - представление.
// 
Функция ПредставлениеДополненияВыгрузкиПоСценариюУзла(Знач ДополнениеВыгрузки)
	МетаУзел = ДополнениеВыгрузки.УзелИнформационнойБазы.Метаданные();
	МодульМенеджера = ПланыОбмена[МетаУзел.Имя];
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИспользоватьПериодОтбора", ДополнениеВыгрузки.ПараметрыСценарияДополнения.ВариантДополнительно.ИспользоватьПериодОтбора);
	Параметры.Вставить("ПериодОтбора",             ДополнениеВыгрузки.ПериодОтбораСценарияУзла);
	Параметры.Вставить("Отбор",                    ДополнениеВыгрузки.ДополнительнаяРегистрацияСценарияУзла);
	
	Возврат МодульМенеджера.ПредставлениеОтбораИнтерактивнойВыгрузки(ДополнениеВыгрузки.УзелИнформационнойБазы, Параметры);
КонецФункции

// Возвращает описание периода и отбора строкой.
//
//  Параметры:
//      Период:                период для описания отбора.
//      Отбор:                 отбор компоновки данных для описания.
//      ОписаниеПустогоОтбора: значение, возвращаемое в случае пустого отбора.
//
//  Возвращаемое значение:
//      Строка - описание периода и отбора.
//
Функция ПредставлениеОтбораДополненияВыгрузки(Знач Период, Знач Отбор, Знач ОписаниеПустогоОтбора=Неопределено) Экспорт
	
	НашОтбор = ?(ТипЗнч(Отбор)=Тип("КомпоновщикНастроекКомпоновкиДанных"), Отбор.Настройки.Отбор, Отбор);
	
	ПериодСтрокой = ?(ЗначениеЗаполнено(Период), Строка(Период), "");
	ОтборСтрокой  = Строка(НашОтбор);
	
	Если ПустаяСтрока(ОтборСтрокой) Тогда
		Если ОписаниеПустогоОтбора=Неопределено Тогда
			ОтборСтрокой = НСтр("ru='Все объекты'");
		Иначе
			ОтборСтрокой = ОписаниеПустогоОтбора;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПериодСтрокой) Тогда
		ОтборСтрокой =  ПериодСтрокой + ", " + ОтборСтрокой;
	КонецЕсли;
	
	Возврат ОтборСтрокой;
КонецФункции

// Возвращает описание детального отбора по реквизиту "ДополнительнаяРегистрация".
//
//  Параметры:
//      ДополнительнаяРегистрация - ТаблицаЗначений, Массив - строки или структуры, описывающие отбор.
//      ОписаниеПустогоОтбора     - Строка                  - значение, возвращаемое в случае пустого отбора.
//
Функция ПредставлениеДетальногоДополненияВыгрузки(Знач ДополнительнаяРегистрация, Знач ОписаниеПустогоОтбора=Неопределено) Экспорт
	
	Текст = "";
	Для Каждого Строка Из ДополнительнаяРегистрация Цикл
		Текст = Текст + Символы.ПС + Строка.Представление + ": " + ПредставлениеОтбораДополненияВыгрузки(Строка.Период, Строка.Отбор);
	КонецЦикла;
	
	Если Не ПустаяСтрока(Текст) Тогда
		Возврат СокрЛП(Текст);
		
	ИначеЕсли ОписаниеПустогоОтбора=Неопределено Тогда
		Возврат НСтр("ru='Дополнительные данные не выбраны'");
		
	КонецЕсли;
	
	Возврат ОписаниеПустогоОтбора;
КонецФункции

// Идентификатор служебной группы объектов метаданных "Все документы".
//
Функция ДополнениеВыгрузкиИдентификаторВсехДокументов() Экспорт
	// Не должно пересекаться с полным именем метаданных.
	Возврат "ВсеДокументы";
КонецФункции

// Идентификатор служебной группы объектов метаданных "Все справочники".
//
Функция ДополнениеВыгрузкиИдентификаторВсехСправочников() Экспорт
	// Не должно пересекаться с полным именем метаданных.
	Возврат "ВсеСправочники";
КонецФункции

// Имя для сохранения и восстановления настроек при интерактивном дополнении выгрузки.
//
Функция ДополнениеВыгрузкиИмяАвтоСохраненияНастроек() Экспорт
	Возврат НСтр("ru='Последняя отправка (сохраняется автоматически)'");
КонецФункции

// Производит дополнительную регистрацию объектов по настройкам.
//
// Параметры:
//     ДополнениеВыгрузки     - Структура, ДанныеФормыКоллекция - описание параметров выгрузки.
//
Процедура ИнтерактивноеИзменениеВыгрузкиЗарегистрироватьДополнительныеДанные(Знач ДополнениеВыгрузки) Экспорт
	
	Если ДополнениеВыгрузки.ВариантВыгрузки <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектОтчета = Обработки.ИнтерактивноеИзменениеВыгрузки.Создать();
	ЗаполнитьЗначенияСвойств(ОбъектОтчета, ДополнениеВыгрузки,,"ДополнительнаяРегистрация, ДополнительнаяРегистрацияСценарияУзла");
		
	Если ОбъектОтчета.ВариантВыгрузки=1 Тогда
		// За период с отбором, дополнительная пустая.
		
	ИначеЕсли ДополнениеВыгрузки.ВариантВыгрузки=2 Тогда
		// Детально настроено
		ОбъектОтчета.КомпоновщикОтбораВсехДокументов = Неопределено;
		ОбъектОтчета.ПериодОтбораВсехДокументов      = Неопределено;
		
		ЗаполнитьТаблицуЗначений(ОбъектОтчета.ДополнительнаяРегистрация, ДополнениеВыгрузки.ДополнительнаяРегистрация);
		
	ИначеЕсли ДополнениеВыгрузки.ВариантВыгрузки=3 Тогда
		// По сценарию узла, имитируем детальное.
		ОбъектОтчета.ВариантВыгрузки = 2;
		
		ОбъектОтчета.КомпоновщикОтбораВсехДокументов = Неопределено;
		ОбъектОтчета.ПериодОтбораВсехДокументов      = Неопределено;
		
		ЗаполнитьТаблицуЗначений(ОбъектОтчета.ДополнительнаяРегистрация, ДополнениеВыгрузки.ДополнительнаяРегистрацияСценарияУзла);
	КонецЕсли;
	
	ОбъектОтчета.ЗарегистрироватьДополнительныеИзменения();
КонецПроцедуры

// Производит установку общего периода во все разрезы отбора.
//
// Параметры:
//     ДополнениеВыгрузки - Структура, ДанныеФормыКоллекция - описание параметров выгрузки.
//
Процедура ИнтерактивноеИзменениеВыгрузкиУстановитьПериодаСценарияУзла(ДополнениеВыгрузки) Экспорт
	Для Каждого Строка Из ДополнениеВыгрузки.ДополнительнаяРегистрацияСценарияУзла Цикл
		Строка.Период = ДополнениеВыгрузки.ПериодОтбораСценарияУзла;
	КонецЦикла;
	
	// И обновляем представление
	ДополнениеВыгрузки.ПредставлениеОтбораСценарияУзла = ПредставлениеДополненияВыгрузкиПоСценариюУзла(ДополнениеВыгрузки);
КонецПроцедуры

// Возвращает используемые варианты отбора по данным настроек.
//
// Параметры:
//     ДополнениеВыгрузки - Структура, ДанныеФормыКоллекция - описание параметров выгрузки.
//
// Возвращаемое значение:
//     Массив - с номерами используемых вариантов: 
//               0 - без отбора, 1 - отбор всех документов, 2 - подробный, 3 - сценарий узла.
//
Функция ИнтерактивноеИзменениеВыгрузкиФильтрВарианта(Знач ДополнениеВыгрузки) Экспорт
	
	Результат = Новый Массив;
	
	ТестДанных = Новый Структура("ПараметрыСценарияДополнения");
	ЗаполнитьЗначенияСвойств(ТестДанных, ДополнениеВыгрузки);
	ПараметрыСценарияДополнения = ТестДанных.ПараметрыСценарияДополнения;
	Если ТипЗнч(ПараметрыСценарияДополнения)<>Тип("Структура") Тогда
		// Нет настроек, значения по умолчанию - все.
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПараметрыСценарияДополнения.Свойство("ВариантБезДополнения") 
		И ПараметрыСценарияДополнения.ВариантБезДополнения.Использование Тогда
		Результат.Добавить(0);
	КонецЕсли;
	
	Если ПараметрыСценарияДополнения.Свойство("ВариантВсеДокументы")
		И ПараметрыСценарияДополнения.ВариантВсеДокументы.Использование Тогда
		Результат.Добавить(1);
	КонецЕсли;
	
	Если ПараметрыСценарияДополнения.Свойство("ВариантПроизвольныйОтбор")
		И ПараметрыСценарияДополнения.ВариантПроизвольныйОтбор.Использование Тогда
		Результат.Добавить(2);
	КонецЕсли;
	
	Если ПараметрыСценарияДополнения.Свойство("ВариантДополнительно")
		И ПараметрыСценарияДополнения.ВариантДополнительно.Использование Тогда
		Результат.Добавить(3);
	КонецЕсли;
	
	Если Результат.Количество()=4 Тогда
		// Есть все варианты, убираем фильтр.
		Возврат Неопределено;
	КонецЕсли;

	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти
