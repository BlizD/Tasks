////////////////////////////////////////////////////////////////////////////////
// Подсистема "Присоединенные файлы".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает двоичные данные присоединенного файла.
//
// Параметры:
//  ПрисоединенныйФайл - СправочникСсылка - ссылка на справочник с именем "*ПрисоединенныеФайлы".
//
// Возвращаемое значение:
//  ДвоичныеДанные - двоичные данные присоединенного файла.
//
Функция ПолучитьДвоичныеДанныеФайла(Знач ПрисоединенныйФайл) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла", "ПрисоединенныйФайл", 
		ПрисоединенныйФайл, Метаданные.РегистрыСведений.ПрисоединенныеФайлы.Измерения.ПрисоединенныйФайл.Тип);
		
	ФайлОбъект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, 
		"ТипХраненияФайла,ВладелецФайла,Наименование,Расширение,Том,ПутьКФайлу");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ФайлОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.ПрисоединенныйФайл,
		|	ПрисоединенныеФайлы.ХранимыйФайл
		|ИЗ
		|	РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.ПрисоединенныйФайл = &ПрисоединенныйФайл";
		
		Запрос.УстановитьПараметр("ПрисоединенныйФайл", ПрисоединенныйФайл);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ХранимыйФайл.Получить();
		КонецЕсли;
		
		// Запись в журнал регистрации.
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Двоичные данные файла отсутствуют в регистре ПрисоединенныеФайлы
			           |
			           |Ссылка на файл: ""%1"".'"),
			ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Файлы.Открытие файла'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники[ПрисоединенныйФайл.Метаданные().Имя],
			ПрисоединенныйФайл,
			СообщениеОбОшибке);
		
		ПредставлениеВладельцаФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Присоединен к %1 : %2'"),
				Строка(ТипЗнч(ФайлОбъект.ВладелецФайла)),
				ФайлОбъект.ВладелецФайла);
		
		ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
			ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение,
			Ложь,
			ПредставлениеВладельцаФайла);
	Иначе
		ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ФайлОбъект.Том) + ФайлОбъект.ПутьКФайлу;
		
		Попытка
			Возврат Новый ДвоичныеДанные(ПолныйПуть);
		Исключение
			// Запись в журнал регистрации.
			СообщениеОбОшибке = ТекстОшибкиПриПолученииФайла(ИнформацияОбОшибке(), ПрисоединенныйФайл);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Файлы.Получение файла из тома'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники[ПрисоединенныйФайл.Метаданные().Имя],
				ПрисоединенныйФайл,
				СообщениеОбОшибке);
			
			ПредставлениеВладельцаФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Присоединен к %1 : %2'"),
					Строка(ТипЗнч(ФайлОбъект.ВладелецФайла)),
					ФайлОбъект.ВладелецФайла);
				
			ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
				ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение,
				,
				ПредставлениеВладельцаФайла);
				
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

// Возвращает структуру данных файла. Используется в различных командах работы с файлами,
// и как значение параметра ДанныеФайла других процедур и функций.
//
// Параметры:
//  ПрисоединенныйФайл - СправочникСсылка - ссылка на справочник с именем "*ПрисоединенныеФайлы".
//
//  ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, который
//                       используется при получении двоичных данных файла.
//
//  ПолучатьСсылкуНаДвоичныеДанные - Булево - если передать Ложь, то ссылка на двоичные данные
//                 не будет получена, что существенно ускорит выполнение для больших двоичных данных.
//
//  ДляРедактирования - Булево - если указать Истина, то свободный файл будет захвачен для редактирования.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//    * СсылкаНаДвоичныеДанныеФайла        - Строка - адрес во временном хранилище.
//    * ОтносительныйПуть                  - Строка -
//    * ДатаМодификацииУниверсальная       - Дата   -
//    * ИмяФайла                           - Строка -
//    * Наименование                       - Строка -
//    * Расширение                         - Строка -
//    * Размер                             - Число  -
//    * Редактирует                        - Неопределено, СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи -
//    * ПодписанЭП                         - Булево -
//    * Зашифрован                         - Булево -
//    * ФайлРедактируется                  - Булево -
//    * ФайлРедактируетТекущийПользователь - Булево -
//
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина,
                            Знач ДляРедактирования = Ложь) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("ПрисоединенныеФайлы.ПолучитьДанныеФайла", "ПрисоединенныйФайл", 
		ПрисоединенныйФайл, Метаданные.РегистрыСведений.ПрисоединенныеФайлы.Измерения.ПрисоединенныйФайл.Тип);
		
	ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	ОбщегоНазначенияКлиентСервер.Проверить(ФайлОбъект <> Неопределено, 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найден присоединенный файл ""%1"" (%2)'"),
			Строка(ПрисоединенныйФайл), ПрисоединенныйФайл.Метаданные()));
	
	Если ДляРедактирования И Не ЗначениеЗаполнено(ФайлОбъект.Редактирует) Тогда
		ФайлОбъект.Заблокировать();
		ПрисоединенныеФайлыСлужебный.ЗанятьФайлДляРедактированияСервер(ФайлОбъект);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаДвоичныеДанныеФайла = Неопределено;
	
	Если ПолучатьСсылкуНаДвоичныеДанные Тогда
		
		ДвоичныеДанные = ПолучитьДвоичныеДанныеФайла(ПрисоединенныйФайл);
		Если ТипЗнч(ИдентификаторФормы) = Тип("УникальныйИдентификатор") Тогда
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
		Иначе
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("СсылкаНаДвоичныеДанныеФайла",  СсылкаНаДвоичныеДанныеФайла);
	Результат.Вставить("ОтносительныйПуть",            ПолучитьИдентификаторОбъекта(ФайлОбъект.ВладелецФайла) + "\");
	Результат.Вставить("ДатаМодификацииУниверсальная", ФайлОбъект.ДатаМодификацииУниверсальная);
	Результат.Вставить("ИмяФайла",                     ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение);
	Результат.Вставить("Наименование",                 ФайлОбъект.Наименование);
	Результат.Вставить("Расширение",                   ФайлОбъект.Расширение);
	Результат.Вставить("Размер",                       ФайлОбъект.Размер);
	Результат.Вставить("Редактирует",                  ФайлОбъект.Редактирует);
	Результат.Вставить("ПодписанЭП",                   ФайлОбъект.ПодписанЭП);
	Результат.Вставить("Зашифрован",                   ФайлОбъект.Зашифрован);
	Результат.Вставить("ФайлРедактируется",            ЗначениеЗаполнено(ФайлОбъект.Редактирует));
	Результат.Вставить("ФайлРедактируетТекущийПользователь",
		?(Результат.ФайлРедактируется, ФайлОбъект.Редактирует = Пользователи.АвторизованныйПользователь(), Ложь) );
	
	Если ФайлОбъект.Зашифрован Тогда
		МассивСертификатовШифрования = Новый Массив;
		Для Каждого СтрокаТЧ Из ФайлОбъект.СертификатыШифрования Цикл
			МассивСертификатовШифрования.Добавить(Новый Структура("Отпечаток, Представление", СтрокаТЧ.Отпечаток, СтрокаТЧ.Представление));
		КонецЦикла;
		Результат.Вставить("МассивСертификатовШифрования", МассивСертификатовШифрования);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет массив ссылками на файлы объекта.
//
// Параметры:
//  Объект       - Ссылка - ссылка на объект, который может содержать присоединенные файлы.
//  МассивФайлов - Массив - массив в который будут добавлены ссылки на файлы объекта:
//                  * СправочникСсылка - (возвращаемое значение) ссылка на присоединенный файл.
//
Процедура ПолучитьПрикрепленныеФайлыКОбъекту(Знач Объект, Знач МассивФайлов) Экспорт
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		Возврат;
	КонецЕсли;
	
	ТипыВладельцев = Метаданные.РегистрыСведений.НаличиеПрисоединенныхФайлов.Измерения.ОбъектСФайлами.Тип.Типы();
	Если ТипыВладельцев.Найти(ТипЗнч(Объект)) <> Неопределено Тогда
		
		МассивФайловЛокальный = ПрисоединенныеФайлыСлужебный.ПолучитьВсеПодчиненныеФайлы(Объект);
		Для Каждого СсылкаНаФайл Из МассивФайловЛокальный Цикл
			МассивФайлов.Добавить(СсылкаНаФайл);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Создает объект в справочнике для хранения файла и заполняет его реквизиты переданными свойствами.
//
// Параметры:
//  ПараметрыФайла - Структура - Параметры с данными файла.
//       * Автор                        - Ссылка - пользователь, создавший файл.
//       * ВладелецФайлов               - Ссылка - объект, к которому добавляется файл.
//       * ИмяБезРасширения             - Строка - имя файла без расширения.
//       * РасширениеБезТочки           - Строка - расширение файла (без точки вначале).
//       * ВремяИзмененияУниверсальное  - Дата   - дата и время изменения файла (UTC+0:00),
//                                            если не указана, тогда используется ТекущаяУниверсальнаяДата().
//  АдресФайлаВоВременномХранилище      - Строка - адрес, указывающий на двоичные данные во временном хранилище.
//  АдресВременногоХранилищаТекста      - Строка - адрес, указывающий на извлеченный текст из файла во временном хранилище.
//  Описание                            - Строка - текстовое описание файла.
//
//  НоваяСсылкаНаФайл                   - Неопределено - создать новую ссылку на файл в стандартном справочнике
//                                        или в нестандартном, но единственном справочнике. Когда у владельца файла несколько
//                                        справочников, требуется обязательно передать ссылку, иначе будет вызвано
//                                        исключение.
//                                        - Ссылка - ссылка на элемент справочника хранения файлов,
//                                        которую следует использовать для добавляемого файла.
//                                        Должна соответствовать одному из типов справочников хранения файлов владельца
//                                        файлов.
// Возвращаемое значение:
//  СправочникСсылка - ссылка на созданный присоединенный файл.
//
Функция ДобавитьПрисоединенныйФайл(ПараметрыФайла,
                     Знач АдресФайлаВоВременномХранилище,
                     Знач АдресВременногоХранилищаТекста = "",
                     Знач Описание = "",
                     Знач НоваяСсылкаНаФайл = Неопределено) Экспорт

	Автор =              ПараметрыФайла.Автор;
	ВладелецФайлов =     ПараметрыФайла.ВладелецФайлов;
	ИмяБезРасширения  =  ПараметрыФайла.ИмяБезРасширения;
	РасширениеБезТочки = ПараметрыФайла.РасширениеБезТочки;
	ВремяИзмененияУниверсальное = ПараметрыФайла.ВремяИзмененияУниверсальное;

	Если РасширениеБезТочки = Неопределено Тогда
		ЧастиИмениФайла = СтрРазделить(ИмяБезРасширения, ".", Ложь);
		Если ЧастиИмениФайла.Количество() > 1 Тогда
			РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
			ИмяБезРасширения = Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - (СтрДлина(РасширениеБезТочки)+1));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВремяИзмененияУниверсальное)
		Или ВремяИзмененияУниверсальное > ТекущаяУниверсальнаяДата() Тогда
		ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при добавлении присоединенного файла.'");
	
	Если НоваяСсылкаНаФайл = Неопределено Тогда
		ИмяСправочника = ПрисоединенныеФайлыСлужебный.ИмяСправочникаХраненияФайлов(ВладелецФайлов, "", ЗаголовокОшибки,
			НСтр("ru = 'В этом случае параметр ""НоваяСсылкаНаФайл"" должен быть указан.'"));
		
		НоваяСсылкаНаФайл = Справочники[ИмяСправочника].ПолучитьСсылку();
	Иначе
		Если Не Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(НоваяСсылкаНаФайл))
			Или Не ЗначениеЗаполнено(НоваяСсылкаНаФайл) Тогда
			
			ВызватьИсключение НСтр("ru = 'Ошибка при добавлении присоединенного файла.
				|Ссылка на новый файл не заполнена.'");
		КонецЕсли;
		
		ИмяСправочника = ПрисоединенныеФайлыСлужебный.ИмяСправочникаХраненияФайлов(
			ВладелецФайлов, НоваяСсылкаНаФайл.Метаданные().Имя, ЗаголовокОшибки);
	КонецЕсли;
	
	ПрисоединенныйФайл = Справочники[ИмяСправочника].СоздатьЭлемент();
	ПрисоединенныйФайл.УстановитьСсылкуНового(НоваяСсылкаНаФайл);
	
	ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайлов;
	ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
	ПрисоединенныйФайл.ДатаСоздания                 = ТекущаяДатаСеанса();
	ПрисоединенныйФайл.Описание                     = Описание;
	ПрисоединенныйФайл.ПодписанЭП                   = Ложь;
	ПрисоединенныйФайл.Наименование                 = ИмяБезРасширения;
	ПрисоединенныйФайл.Расширение                   = РасширениеБезТочки;
	ПрисоединенныйФайл.ТипХраненияФайла             = ФайловыеФункцииСлужебный.ТипХраненияФайлов();
	ПрисоединенныйФайл.Размер                       = ДвоичныеДанные.Размер();
	
	СвояТранзакцияОткрыта = Ложь;
	
	Попытка
		Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			НачатьТранзакцию();
			СвояТранзакцияОткрыта = Истина;
			ПрисоединенныеФайлыСлужебный.ЗаписатьФайлВИнформационнуюБазу(НоваяСсылкаНаФайл, ДвоичныеДанные);
			ПрисоединенныйФайл.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			ПрисоединенныйФайл.ПутьКФайлу = "";
		Иначе
			// Добавление в один из томов (где есть свободное место).
			СведенияОФайле = ФайловыеФункцииСлужебный.ДобавитьФайлВТом(ДвоичныеДанные, ВремяИзмененияУниверсальное,
				ИмяБезРасширения, РасширениеБезТочки, , ПрисоединенныйФайл.Зашифрован);
			ПрисоединенныйФайл.Том = СведенияОФайле.Том;
			ПрисоединенныйФайл.ПутьКФайлу = СведенияОФайле.ПутьКФайлу;
		КонецЕсли;
		
		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
		ИзвлеченныйТекст = "";
		
		Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаТекста) Тогда
			ИзвлеченныйТекст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
			
		ИначеЕсли НЕ ФайловыеФункцииСлужебный.ИзвлекатьТекстыФайловНаСервере() Тогда
			// Тексты извлекаются сразу, а не в фоновом задании.
			СтатусИзвлеченияТекста = ПрисоединенныеФайлыСлужебный.ИзвлечьТекст(
				ДвоичныеДанные, ПрисоединенныйФайл.Расширение, ИзвлеченныйТекст);
		КонецЕсли;
		
		ПрисоединенныйФайл.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
		ПрисоединенныйФайл.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст);
		ПрисоединенныйФайл.Автор = Автор;
		
		ПрисоединенныйФайл.Заполнить(Неопределено);
		ПрисоединенныйФайл.Записать();
		
		Если СвояТранзакцияОткрыта Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Если СвояТранзакцияОткрыта Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ШаблонСообщения = НСтр("ru = 'Ошибка при добавлении присоединенного файла ""%1"":
		                             |%2'");
		КомментарийЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ИмяБезРасширения + "." + РасширениеБезТочки,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Файлы.Добавление присоединенного файла'",
			     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			КомментарийЖурналаРегистрации);
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ИмяБезРасширения + "." + РасширениеБезТочки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	Возврат ПрисоединенныйФайл.Ссылка;
	
КонецФункции

// Устарела. Следует использовать функцию ДобавитьПрисоединенныйФайл.
//
// Создает объект в справочнике для хранения файла и заполняет его реквизиты переданными свойствами.
//
// Параметры:
//  ВладелецФайлов                 - Ссылка - объект, к которому добавляется файл.
//  ИмяБезРасширения               - Строка - имя файла без расширения.
//  РасширениеБезТочки             - Строка - расширение файла (без точки вначале).
//  ВремяИзменения                 - Дата   - (не используется) дата и время изменения файла (местное время).
//  ВремяИзмененияУниверсальное    - Дата   - дата и время изменения файла (UTC+0:00),
//                                            если не указана, тогда используется ТекущаяУниверсальнаяДата().
//  АдресФайлаВоВременномХранилище - Строка - адрес, указывающий на двоичные данные во временном хранилище.
//  АдресВременногоХранилищаТекста - Строка - адрес, указывающий на извлеченный текст из файла во временном хранилище.
//  Описание                       - Строка - текстовое описание файла.
//
//  НоваяСсылкаНаФайл              - Неопределено - создать новую ссылку на файл в стандартном справочнике
//                                   или в нестандартном, но единственном справочнике. Когда у владельца файла несколько
//                                   справочников, требуется обязательно передать ссылку, иначе будет вызвано
//                                   исключение.
//                                 - Ссылка - ссылка на элемент справочника хранения файлов,
//                                   которую следует использовать для добавляемого файла.
//                                   Должна соответствовать одному из типов справочников хранения файлов владельца
//                                   файлов.
//
// Возвращаемое значение:
//  СправочникСсылка - ссылка на созданный присоединенный файл.
//
Функция ДобавитьФайл(Знач ВладелецФайлов,
                     Знач ИмяБезРасширения,
                     Знач РасширениеБезТочки = Неопределено,
                     Знач ВремяИзменения = Неопределено,
                     Знач ВремяИзмененияУниверсальное = Неопределено,
                     Знач АдресФайлаВоВременномХранилище,
                     Знач АдресВременногоХранилищаТекста = "",
                     Знач Описание = "",
                     Знач НоваяСсылкаНаФайл = Неопределено) Экспорт
	
	// Если расширение не задано явно, выделяем его из имени файла.
	Если РасширениеБезТочки = Неопределено Тогда
		ЧастиИмениФайла = СтрРазделить(ИмяБезРасширения, ".", Ложь);
		Если ЧастиИмениФайла.Количество() > 1 Тогда
			РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
			ИмяБезРасширения = Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - (СтрДлина(РасширениеБезТочки)+1));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВремяИзмененияУниверсальное)
		Или ВремяИзмененияУниверсальное > ТекущаяУниверсальнаяДата() Тогда
		ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при добавлении присоединенного файла.'");
	
	Если НоваяСсылкаНаФайл = Неопределено Тогда
		ИмяСправочника = ПрисоединенныеФайлыСлужебный.ИмяСправочникаХраненияФайлов(ВладелецФайлов, "", ЗаголовокОшибки,
			НСтр("ru = 'В этом случае параметр ""НоваяСсылкаНаФайл"" должен быть указан.'"));
		
		НоваяСсылкаНаФайл = Справочники[ИмяСправочника].ПолучитьСсылку();
	Иначе
		Если Не Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(НоваяСсылкаНаФайл))
			Или Не ЗначениеЗаполнено(НоваяСсылкаНаФайл) Тогда
			
			ВызватьИсключение НСтр("ru = 'Ошибка при добавлении присоединенного файла.
				|Ссылка на новый файл не заполнена.'");
		КонецЕсли;
		
		ИмяСправочника = ПрисоединенныеФайлыСлужебный.ИмяСправочникаХраненияФайлов(
			ВладелецФайлов, НоваяСсылкаНаФайл.Метаданные().Имя, ЗаголовокОшибки);
	КонецЕсли;
	
	ПрисоединенныйФайл = Справочники[ИмяСправочника].СоздатьЭлемент();
	ПрисоединенныйФайл.УстановитьСсылкуНового(НоваяСсылкаНаФайл);
	
	ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайлов;
	ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
	ПрисоединенныйФайл.ДатаСоздания                 = ТекущаяДатаСеанса();
	ПрисоединенныйФайл.Описание                     = Описание;
	ПрисоединенныйФайл.ПодписанЭП                   = Ложь;
	ПрисоединенныйФайл.Наименование                 = ИмяБезРасширения;
	ПрисоединенныйФайл.Расширение                   = РасширениеБезТочки;
	ПрисоединенныйФайл.ТипХраненияФайла             = ФайловыеФункцииСлужебный.ТипХраненияФайлов();
	ПрисоединенныйФайл.Размер                       = ДвоичныеДанные.Размер();
	
	СвояТранзакцияОткрыта = Ложь;
	
	Попытка
		Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			НачатьТранзакцию();
			СвояТранзакцияОткрыта = Истина;
			ПрисоединенныеФайлыСлужебный.ЗаписатьФайлВИнформационнуюБазу(НоваяСсылкаНаФайл, ДвоичныеДанные);
			ПрисоединенныйФайл.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			ПрисоединенныйФайл.ПутьКФайлу = "";
		Иначе
			// Добавление в один из томов (где есть свободное место).
			СведенияОФайле = ФайловыеФункцииСлужебный.ДобавитьФайлВТом(ДвоичныеДанные, ВремяИзмененияУниверсальное,
				ИмяБезРасширения, РасширениеБезТочки, , ПрисоединенныйФайл.Зашифрован);
			ПрисоединенныйФайл.Том = СведенияОФайле.Том;
			ПрисоединенныйФайл.ПутьКФайлу = СведенияОФайле.ПутьКФайлу;
		КонецЕсли;
		
		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
		ИзвлеченныйТекст = "";
		
		Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаТекста) Тогда
			ИзвлеченныйТекст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
			
		ИначеЕсли НЕ ФайловыеФункцииСлужебный.ИзвлекатьТекстыФайловНаСервере() Тогда
			// Тексты извлекаются сразу, а не в фоновом задании.
			СтатусИзвлеченияТекста = ПрисоединенныеФайлыСлужебный.ИзвлечьТекст(
				ДвоичныеДанные, ПрисоединенныйФайл.Расширение, ИзвлеченныйТекст);
		КонецЕсли;
		
		ПрисоединенныйФайл.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
		ПрисоединенныйФайл.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст);
		
		ПрисоединенныйФайл.Заполнить(Неопределено);
		ПрисоединенныйФайл.Записать();
		
		Если СвояТранзакцияОткрыта Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Если СвояТранзакцияОткрыта Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ШаблонСообщения = НСтр("ru = 'Ошибка при добавлении присоединенного файла ""%1"":
		                             |%2'");
		КомментарийЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ИмяБезРасширения + "." + РасширениеБезТочки,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Файлы.Добавление присоединенного файла'",
			     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			КомментарийЖурналаРегистрации);
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ИмяБезРасширения + "." + РасширениеБезТочки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	Возврат ПрисоединенныйФайл.Ссылка;
	
КонецФункции

// Возвращает новую ссылку на файл для указанного владельца,
// которую можно использовать, а затем передать в функцию ДобавитьФайл.
//
// Параметры:
//  ВладелецФайлов - Ссылка - ссылка на объект, к которому добавляется файл.
//
//  ИмяСправочника - Неопределено - вычислить справочник по владельцу (допустимо,
//                   когда справочник только один, иначе будет вызвано исключение).
//
//                 - Строка - имя справочника *ПрисоединенныеФайлы, отличное
//                            от стандартного <ИмяВладельца>ПрисоединенныеФайлы.
//  
// Возвращаемое значение:
//  СправочникСсылка - ссылка на новый еще несозданный присоединенный файл.
//
Функция НоваяСсылкаНаФайл(ВладелецФайлов, ИмяСправочника = Неопределено) Экспорт
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при получении новой ссылки на присоединенный файл.'");
	
	ИмяСправочника = ПрисоединенныеФайлыСлужебный.ИмяСправочникаХраненияФайлов(
		ВладелецФайлов, ИмяСправочника, ЗаголовокОшибки);
	
	Возврат Справочники[ИмяСправочника].ПолучитьСсылку();
	
КонецФункции

// Обновляет свойства файла - двоичные данные, текст, дату изменения,
// а также другие необязательные свойства.
//
// Параметры:
//  ПрисоединенныйФайл - СправочникСсылка - ссылка на справочник с именем "*ПрисоединенныеФайлы".
//  ИнформацияОФайле - Структура - со свойствами:
//     <обязательные>
//     * АдресФайлаВоВременномХранилище - Строка - адрес новых двоичных данных файла.
//     * АдресВременногоХранилищаТекста - Строка - адрес новых двоичных данных текста,
//                                                 извлеченного из файла.
//     <необязательные>
//     * ИмяБезРасширения               - Строка - если свойство не указано или не заполнено,
//                                                 тогда не будет изменено.
//     * ДатаМодификацииУниверсальная   - Дата   - дата последнего изменения файла, если
//                                                 свойство не указано или не заполнено, тогда будет
//                                                 установлена текущая дата сеанса.
//     * Расширение                     - Строка - новое расширение файла.
//     * Редактирует                    - Ссылка - новый пользователь, редактирующий файл.
//
Процедура ОбновитьПрисоединенныйФайл(Знач ПрисоединенныйФайл, Знач ИнформацияОФайле) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла", "ПрисоединенныйФайл", 
		ПрисоединенныйФайл, Метаданные.РегистрыСведений.ПрисоединенныеФайлы.Измерения.ПрисоединенныйФайл.Тип);
		
	РеквизитыЗначения = Новый Структура;
	
	Если ИнформацияОФайле.Свойство("ИмяБезРасширения") И ЗначениеЗаполнено(ИнформацияОФайле.ИмяБезРасширения) Тогда
		РеквизитыЗначения.Вставить("Наименование", ИнформацияОФайле.ИмяБезРасширения);
	КонецЕсли;
	
	Если НЕ ИнформацияОФайле.Свойство("ДатаМодификацииУниверсальная")
	 ИЛИ НЕ ЗначениеЗаполнено(ИнформацияОФайле.ДатаМодификацииУниверсальная)
	 ИЛИ ИнформацияОФайле.ДатаМодификацииУниверсальная > ТекущаяУниверсальнаяДата() Тогда
		
		// Заполнение текущей даты в формате универсального времени.
		РеквизитыЗначения.Вставить("ДатаМодификацииУниверсальная", ТекущаяУниверсальнаяДата());
	Иначе
		РеквизитыЗначения.Вставить("ДатаМодификацииУниверсальная", ИнформацияОФайле.ДатаМодификацииУниверсальная);
	КонецЕсли;
	
	Если ИнформацияОФайле.Свойство("Редактирует") Тогда
		РеквизитыЗначения.Вставить("Редактирует", ИнформацияОФайле.Редактирует);
	КонецЕсли;
	
	Если ИнформацияОФайле.Свойство("Расширение") Тогда
		РеквизитыЗначения.Вставить("Расширение", ИнформацияОФайле.Расширение);
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ИнформацияОФайле.АдресФайлаВоВременномХранилище);
	
	РеквизитыЗначения.Вставить("СтатусИзвлеченияТекста", Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен);
	ИзвлеченныйТекст = "";
	
	Если ЭтоАдресВременногоХранилища(ИнформацияОФайле.АдресВременногоХранилищаТекста) Тогда
		
		ИзвлеченныйТекст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(
			ИнформацияОФайле.АдресВременногоХранилищаТекста);
		
		РеквизитыЗначения.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		
	ИначеЕсли НЕ ФайловыеФункцииСлужебный.ИзвлекатьТекстыФайловНаСервере() Тогда
		// Тексты извлекаются сразу, а не в фоновом задании.
		РеквизитыЗначения.СтатусИзвлеченияТекста = ПрисоединенныеФайлыСлужебный.ИзвлечьТекст(
			ДвоичныеДанные, ПрисоединенныйФайл.Расширение, ИзвлеченныйТекст);
	КонецЕсли;
	
	РеквизитыЗначения.Вставить("ТекстХранилище", Новый ХранилищеЗначения(ИзвлеченныйТекст));
	
	ПрисоединенныеФайлыСлужебный.ОбновитьДвоичныеДанныеФайлаНаСервере(
		ПрисоединенныйФайл, ДвоичныеДанные, РеквизитыЗначения);
	
КонецПроцедуры

// Возвращает имя формы объекта присоединенных файлов по владельцу.
//
// Параметры:
//  ВладелецФайлов - Ссылка - ссылка на объект, по которому определяется имя формы.
//
// Возвращаемое значение:
//  Строка - имя формы объекта присоединенных файлов по владельцу.
//
Функция ПолучитьИмяФормыОбъектаПрисоединенныхФайловПоВладельцу(Знач ВладелецФайлов) Экспорт
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при получении имени формы присоединенного файла.'");
	ОкончаниеОшибки = НСтр("ru = 'В этом случае получение формы невозможно.'");
	
	ИмяСправочника = ПрисоединенныеФайлыСлужебный.ИмяСправочникаХраненияФайлов(
		ВладелецФайлов, "", ЗаголовокОшибки, ОкончаниеОшибки);
	
	ПолноеИмяОМ = "Справочник." + ИмяСправочника;
	
	МетаданныеПрисоединенныхФайлов = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОМ);
	
	Если МетаданныеПрисоединенныхФайлов.ОсновнаяФормаОбъекта = Неопределено Тогда
		ИмяФормы = ПолноеИмяОМ + ".ФормаОбъекта";
	Иначе
		ИмяФормы = МетаданныеПрисоединенныхФайлов.ОсновнаяФормаОбъекта.ПолноеИмя();
	КонецЕсли;
	
	Возврат ИмяФормы;
	
КонецФункции

// Определяет наличие хранилища присоединенных файлов у объекта
// право Добавление в хранилище (справочник присоединенных файлов).
//
// Параметры:
//  ВладелецФайлов - Ссылка - ссылка на объект для которого выполняется проверка.
//  ИмяСправочника - Строка - если требуется проверка добавления в указанное хранилище.
//
// Возвращаемое значение:
//  Булево - если Истина, тогда к объекту может присоединять файлы.
//
Функция КОбъектуМожноПрисоединятьФайлы(ВладелецФайлов, ИмяСправочника = "") Экспорт
	
	ИмяСправочника = ПрисоединенныеФайлыСлужебный.ИмяСправочникаХраненияФайлов(
		ВладелецФайлов, ИмяСправочника);
		
	СправочникПрисоединенныеФайлы = Метаданные.Справочники.Найти(ИмяСправочника);
	
	ТипыХранимыхФайлов =
		Метаданные.РегистрыСведений.ПрисоединенныеФайлы.Измерения.ПрисоединенныйФайл.Тип;
	
	Возврат СправочникПрисоединенныеФайлы <> Неопределено
	      И ПравоДоступа("Добавление", СправочникПрисоединенныеФайлы)
	      И ТипыХранимыхФайлов.СодержитТип(Тип("СправочникСсылка." + ИмяСправочника));
	
КонецФункции

// Конвертирует файлы из подсистемы Работа с файлами в подсистему Присоединенные файлы.
// Требует наличия подсистемы Работа с файлами.
//
// Для использования в процедурах обновления ИБ, если выполняется переход от использования
// одной подсистемы к другой в каком-либо объекте-владельце файлов.
// Выполняется последовательно для каждого элемента объекта-владельца файлов
// (элемента справочника, ПВХ, документа и т.п.).
//
// Параметры:
//   ВладелецФайлов - Ссылка - ссылка на объект для которого выполняется конвертация.
//   ИмяСправочника - Строка - если требуется конвертация в указанное хранилище.
//
Процедура СконвертироватьФайлыВПрисоединенные(Знач ВладелецФайлов, ИмяСправочника = Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат;
	КонецЕсли;
	
	МодульРаботаСФайламиСлужебныйВызовСервера = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиСлужебныйВызовСервера");
	МодульРаботаСФайламиСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиСлужебный");
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при конвертации присоединенных файлов подсистемы Работа с файлами
	                             |в присоединенные файлы подсистемы Присоединенные файлы.'");
	
	ИмяСправочника = ПрисоединенныеФайлыСлужебный.ИмяСправочникаХраненияФайлов(
		ВладелецФайлов, ИмяСправочника, ЗаголовокОшибки);
		
	УстановитьПривилегированныйРежим(Истина);
	
	ФайлыИсточник = МодульРаботаСФайламиСлужебныйВызовСервера.ПолучитьВсеПодчиненныеФайлы(ВладелецФайлов);
	
	МенеджерПрисоединенныхФайлов = Справочники[ИмяСправочника];
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого ФайлИсточник Из ФайлыИсточник Цикл
			ФайлИсточникОбъект = ФайлИсточник.ПолучитьОбъект();
			ТекущаяВерсияОбъект = ФайлИсточникОбъект.ТекущаяВерсия.ПолучитьОбъект();
			
			СсылкаНового = МенеджерПрисоединенныхФайлов.ПолучитьСсылку();
			ПрисоединенныйФайл = МенеджерПрисоединенныхФайлов.СоздатьЭлемент();
			ПрисоединенныйФайл.УстановитьСсылкуНового(СсылкаНового);
			
			ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайлов;
			ПрисоединенныйФайл.Наименование                 = ФайлИсточникОбъект.Наименование;
			ПрисоединенныйФайл.Автор                        = ФайлИсточникОбъект.Автор;
			ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ТекущаяВерсияОбъект.ДатаМодификацииУниверсальная;
			ПрисоединенныйФайл.ДатаСоздания                 = ФайлИсточникОбъект.ДатаСоздания;
			
			ПрисоединенныйФайл.Зашифрован                   = ФайлИсточникОбъект.Зашифрован;
			ПрисоединенныйФайл.Изменил                      = ТекущаяВерсияОбъект.Автор;
			ПрисоединенныйФайл.Описание                     = ФайлИсточникОбъект.Описание;
			ПрисоединенныйФайл.ПодписанЭП                  = ФайлИсточникОбъект.ПодписанЭП;
			ПрисоединенныйФайл.Размер                       = ТекущаяВерсияОбъект.Размер;
			
			ПрисоединенныйФайл.Расширение                   = ТекущаяВерсияОбъект.Расширение;
			ПрисоединенныйФайл.Редактирует                  = ФайлИсточникОбъект.Редактирует;
			ПрисоединенныйФайл.ТекстХранилище               = ФайлИсточникОбъект.ТекстХранилище;
			ПрисоединенныйФайл.ТипХраненияФайла             = ТекущаяВерсияОбъект.ТипХраненияФайла;
			ПрисоединенныйФайл.ПометкаУдаления              = ФайлИсточникОбъект.ПометкаУдаления;
			
			// Если файл хранится на томе - делается ссылка на существующий файл.
			ПрисоединенныйФайл.Том                          = ТекущаяВерсияОбъект.Том;
			ПрисоединенныйФайл.ПутьКФайлу                   = ТекущаяВерсияОбъект.ПутьКФайлу;
			
			Для Каждого СертификатШифрованияСтрока Из ФайлИсточникОбъект.СертификатыШифрования Цикл
				НоваяСтрока = ПрисоединенныйФайл.СертификатыШифрования.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СертификатШифрованияСтрока);
			КонецЦикла;
			
			Для Каждого ЭПСтрока Из ТекущаяВерсияОбъект.ЭлектронныеПодписи Цикл
				НоваяСтрока = ПрисоединенныйФайл.ЭлектронныеПодписи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭПСтрока);
			КонецЦикла;
			
			ПрисоединенныйФайл.Заполнить(Неопределено);
			ПрисоединенныйФайл.Записать();
			
			Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
				ХранилищеФайла = МодульРаботаСФайламиСлужебныйВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(ТекущаяВерсияОбъект.Ссылка);
				ДвоичныеДанные = ХранилищеФайла.Получить();
				
				МенеджерЗаписи = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПрисоединенныйФайл = СсылкаНового;
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.ПрисоединенныйФайл = СсылкаНового;
				МенеджерЗаписи.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
			ТекущаяВерсияОбъект.ПометкаУдаления = Истина;
			ФайлИсточникОбъект.ПометкаУдаления = Истина;
			
			// Удаление ссылок на том в старом файле, что бы при удалении, файлы остались на месте.
			Если ТекущаяВерсияОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				ТекущаяВерсияОбъект.ПутьКФайлу = "";
				ТекущаяВерсияОбъект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
				ФайлИсточникОбъект.ТекущаяВерсияПутьКФайлу = "";
				ФайлИсточникОбъект.ТекущаяВерсияТом = "";
				МодульРаботаСФайламиСлужебный.ПометитьНаУдалениеВерсииФайла(ФайлИсточникОбъект.Ссылка, ТекущаяВерсияОбъект.Ссылка);
			КонецЕсли;
			
			ТекущаяВерсияОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
			ТекущаяВерсияОбъект.Записать();
			
			ФайлИсточникОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
			ФайлИсточникОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
КонецПроцедуры

// Возвращает ссылки на объекты с файлами из подсистемы Работа с файлами.
// Требует наличия подсистемы Работа с файлами.
//
// Используется совместно с функцией СконвертироватьФайлыВПрисоединенные.
//
// Параметры:
//  ТаблицаВладельцевФайлов - Строка - полное имя объекта метаданных,
//                            который может владеть присоединенными файлами.
//
// Возвращаемое значение:
//  Массив - со значениями:
//   * Ссылка - ссылка на объект у которого есть хотя бы один присоединенный файл.
//
Функция СсылкиНаОбъектыСФайлами(Знач ТаблицаВладельцевФайлов) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	МодульРаботаСФайламиСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиСлужебный");
	
	Возврат МодульРаботаСФайламиСлужебный.СсылкиНаОбъектыСФайлами(ТаблицаВладельцевФайлов);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры, подключаемые к событиям управляемых форм.

// Обработчик события ПриЗаписиНаСервере управляемой формы владельца присоединенного файла.
//
// Параметры:
//  Отказ - Булево  - стандартный параметр события ПриЗаписиНаСервере управляемой формы.
//  ТекущийОбъект   - Объект - стандартный параметр события ПриЗаписиНаСервере управляемой формы.
//  ПараметрыЗаписи - Структура - стандартный параметр события ПриЗаписиНаСервере управляемой формы.
//  Параметры       - ДанныеФормыСтруктура - свойство Параметры управляемой формы.
//
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		ПрисоединенныеФайлыСлужебный.СкопироватьПрисоединенныеФайлы(
			Параметры.ЗначениеКопирования, ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры, вызываемые из модуля менеджера справочников с присоединенными файлами.


// Возвращает реквизиты объекта, которые разрешается редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	РедактируемыеРеквизиты.Добавить("Описание");
	РедактируемыеРеквизиты.Добавить("Редактирует");
	
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Операции с электронной подписью.

// Добавляет подпись к файлу.
// Параметры:
//  ПрисоединенныйФайл - Ссылка - ссылка на присоединенный файл.
//
//  СвойстваПодписи    - Структура - содержит данные, которые возвращает процедура Подписать
//                       общего модуля ЭлектроннаяПодписьКлиент в качестве результата.
//                     - Массив - массив описанных выше структур.
//                     
//  ИдентификаторФормы - УникальныйИдентификатор - если указан, то используется при блокировке объекта.
//
Процедура ДобавитьПодписьКФайлу(ПрисоединенныйФайл, СвойстваПодписи, ИдентификаторФормы = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПрисоединенныйФайл)) Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, "Редактирует, Зашифрован");
		ПрисоединенныйФайлСсылка = ПрисоединенныйФайл;
	Иначе
		СтруктураРеквизитов = Новый Структура("Редактирует, Зашифрован");
		СтруктураРеквизитов.Редактирует = ПрисоединенныйФайл.Редактирует;
		СтруктураРеквизитов.Зашифрован  = ПрисоединенныйФайл.Зашифрован;
		ПрисоединенныйФайлСсылка = ПрисоединенныйФайл.Ссылка;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("ПрисоединенныеФайлы.ДобавитьПодписьКФайлу", "ПрисоединенныйФайл", 
		ПрисоединенныйФайлСсылка, Метаданные.РегистрыСведений.ПрисоединенныеФайлы.Измерения.ПрисоединенныйФайл.Тип);
		
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Редактирует) Тогда
		ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла(ПрисоединенныйФайлСсылка);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Зашифрован Тогда
		ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла(ПрисоединенныйФайлСсылка);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		МодульЭлектроннаяПодпись.ДобавитьПодпись(ПрисоединенныйФайл, СвойстваПодписи, ИдентификаторФормы);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события.

// Обработчик подписки на событие ОбработкаПолученияФормы для переопределения формы присоединенного файла.
//
// Параметры:
//  Источник                 - СправочникМенеджер - менеджер справочника с именем "*ПрисоединенныеФайлы".
//  ВидФормы                 - Строка - имя стандартной формы.
//  Параметры                - Структура - параметры формы.
//  ВыбраннаяФорма           - Строка - имя или объект метаданных открываемой формы.
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы.
//  СтандартнаяОбработка     - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПереопределитьПолучаемуюФормуПрисоединенногоФайла(Источник, ВидФормы, Параметры,
			ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		ВыбраннаяФорма = "ОбщаяФорма.ПрисоединенныйФайл";
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ВидФормы = "ФормаСписка" Тогда
		ВыбраннаяФорма = "ОбщаяФорма.ПрисоединенныеФайлы";
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписью владельца присоединенного файла.
// Помечает на удаление связанные файлы.
//
// Параметры:
//  Источник - Объект - владелец присоединенного файла, кроме ДокументОбъект.
//  Отказ    - Булево - признак отказа от записи.
// 
Процедура УстановитьПометкуУдаленияПрисоединенныхФайлов(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоИдентификаторОбъектаМетаданных(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдалениеПрисоединенныеФайлы(Источник);
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписью владельца присоединенного файла.
// Помечает на удаление связанные файлы.
//
// Параметры:
//  Источник        - ДокументОбъект - владелец присоединенного файла.
//  Отказ           - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//  РежимЗаписи     - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//  РежимПроведения - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
// 
Процедура УстановитьПометкуУдаленияПрисоединенныхФайловДокументов(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдалениеПрисоединенныеФайлы(Источник);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события.

// Обработчик подписки на событие ПередЗаписью для заполнения авто реквизитов присоединенного файла.
//
// Параметры:
//  Источник   - СправочникОбъект - объект справочника с именем "*ПрисоединенныеФайлы".
//  Отказ      - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//
Процедура ВыполнитьДействияПередЗаписьюПрисоединенногоФайла(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоИдентификаторОбъектаМетаданных(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.ВладелецФайла) Тогда
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не заполнен владелец в файле
			           |""%1"".'"),
			Источник.Наименование);
		
		Если ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Файлы.Ошибка записи файла при обновлении ИБ'",
				     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				Источник.Ссылка,
				ОписаниеОшибки);
		Иначе
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
	Источник.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Источник.Расширение);
	
	Если Источник.ЭтоНовый() И Не ЗначениеЗаполнено(Источник.Автор) Тогда
		Источник.Автор = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
	Если Не Источник.ЭтоНовый() Тогда
		
		ИзмененаПометкаУдаления = 
			Источник.ПометкаУдаления <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
		
		Если ИзмененаПометкаУдаления И ЗначениеЗаполнено(Источник.Редактирует) Тогда
			
			Если Источник.Редактирует = Пользователи.АвторизованныйПользователь() Тогда
				
				ТекстОшибки = НСтр("ru = 'Действие недоступно, так как файл ""%1"" занят для редактирования.'");
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Источник.Наименование);
				
			Иначе
				ТекстОшибки = НСтр("ru = 'Действие недоступно, так как файл ""%1"" занят для редактирования
					|пользователем %2.'");
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				Источник.Наименование,
				Строка(Источник.Редактирует));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие ПередУдалением для удаления данных, связанных с присоединенным файлом.
//
// Параметры:
//  Источник   - СправочникОбъект - объект справочника с именем "*ПрисоединенныеФайлы".
//  Отказ      - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//
Процедура ВыполнитьДействияПередУдалениемПрисоединенногоФайла(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоИдентификаторОбъектаМетаданных(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыСлужебный.ПередУдалениемПрисоединенногоФайлаСервер(
		Источник.Ссылка,
		Источник.ВладелецФайла,
		Источник.Том,
		Источник.ТипХраненияФайла,
		Источник.ПутьКФайлу);
	
	КонецПроцедуры

// Обработчик подписки на событие ПриЗаписи для обновления данных, связанных с присоединенным файлом.
//
// Параметры:
//  Источник   - СправочникОбъект - объект справочника с именем "*ПрисоединенныеФайлы".
//  Отказ      - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//
Процедура ВыполнитьДействияПриЗаписиПрисоединенногоФайла(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		ЗаписатьДанныеФайлаВРегистрПриОбмене(Источник);
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоИдентификаторОбъектаМетаданных(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыСлужебный.ПриЗаписиПрисоединенногоФайлаСервер(
		Источник.ВладелецФайла);
		
	ПрисоединенныеФайлыСлужебный.ПриОбновленииСостоянияОчередиИзвлеченияТекста(
		Источник.Ссылка, Источник.СтатусИзвлеченияТекста);
	
	КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

// Возвращает текст сообщения об ошибке, добавляя к нему ссылку на элемент
// справочника хранимого файла.
//
Функция ТекстОшибкиПриПолученииФайла(Знач ИнформацияОбОшибке, Знач Файл)
	
	СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	Если Файл <> Неопределено Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
			           |
			           |Ссылка на файл: ""%2"".'"),
			СообщениеОбОшибке,
			ПолучитьНавигационнуюСсылку(Файл) );
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

// Возвращает идентификатор владельца присоединенного файла.
Функция ПолучитьИдентификаторОбъекта(Знач ВладелецФайлов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НаличиеПрисоединенныхФайлов.ИдентификаторОбъекта
	|ИЗ
	|	РегистрСведений.НаличиеПрисоединенныхФайлов КАК НаличиеПрисоединенныхФайлов
	|ГДЕ
	|	НаличиеПрисоединенныхФайлов.ОбъектСФайлами = &ОбъектСФайлами";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОбъектСФайлами", ВладелецФайлов);
	РезультатВыполнения = Запрос.Выполнить();
	
	Если РезультатВыполнения.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Выборка = РезультатВыполнения.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ИдентификаторОбъекта;
	
КонецФункции

Процедура ПометитьНаУдалениеПрисоединенныеФайлы(Знач Источник, ИмяСправочника = Неопределено)
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсточникСсылкаПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
	
	Если Источник.ПометкаУдаления = ИсточникСсылкаПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ИменаСправочников = ПрисоединенныеФайлыСлужебный.ИменаСправочниковХраненияФайлов(
			ТипЗнч(Источник.Ссылка));
	Исключение
		ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение НСтр("ru = 'Ошибка при пометке на удаление присоединенных файлов.'")
			+ Символы.ПС
			+ ПредставлениеОшибки;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецФайла", Источник.Ссылка);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.Редактирует КАК Редактирует
	|ИЗ
	|	&ИмяСправочника КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	
	Для каждого ОписаниеИмениСправочника Из ИменаСправочников Цикл
		
		ПолноеИмяСправочника = "Справочник." + ОписаниеИмениСправочника.Ключ;
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", ПолноеИмяСправочника);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Источник.ПометкаУдаления И ЗначениеЗаполнено(Выборка.Редактирует) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '""%1"" не может быть удален,
					           |т.к. содержит присоединенный файл ""%2"",
					           |занятый для редактирования.'"),
					Строка(Источник.Ссылка),
					Строка(Выборка.Ссылка));
			КонецЕсли;
			ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ФайлОбъект.Заблокировать();
			ФайлОбъект.УстановитьПометкуУдаления(Источник.ПометкаУдаления);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДанныеФайлаВРегистрПриОбмене(Знач Источник)
	
	Перем ДвоичныеДанныеФайла;
	
	Если Источник.ДополнительныеСвойства.Свойство("ДвоичныеДанныеФайла", ДвоичныеДанныеФайла) Тогда
		НаборЗаписей = РегистрыСведений.ПрисоединенныеФайлы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПрисоединенныйФайл.Использование = Истина;
		НаборЗаписей.Отбор.ПрисоединенныйФайл.Значение = Источник.Ссылка;
		
		Запись = НаборЗаписей.Добавить();
		Запись.ПрисоединенныйФайл = Источник.Ссылка;
		Запись.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных(9));
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		Источник.ДополнительныеСвойства.Удалить("ДвоичныеДанныеФайла");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
