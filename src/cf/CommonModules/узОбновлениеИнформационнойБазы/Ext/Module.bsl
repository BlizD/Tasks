Процедура ПриДобавленииПодсистемы(Описание) Экспорт
    Описание.Имя = "УправлениеЗадачами";
    Описание.Версия = "2024.11.17.1";
	
	//+ УрянскийД 2020-06-22 (начало)
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	Описание.ПараллельноеОтложенноеОбновлениеСВерсии = "1.0.5.003";
	//- УрянскийД 2020-06-22 (окончание)
	
	// Требуется библиотека стандартных подсистем.
    Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
КонецПроцедуры
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.узНачальноеЗаполнение";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Выполняется начальное заполнение данных";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.008";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_1_008";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.1.008";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.011";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_1_011";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.1.011";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.012";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_1_012";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.1.012";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.014";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_1_014";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.1.014";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.016";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_1_016";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.1.016";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.019";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_1_019";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.1.019";		
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.020";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_1_020";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.1.020";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.2.004";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_2_004";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.2.004";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.2.013";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_2_013";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.2.013";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.2.014";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_2_014";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.2.014";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.3.007";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_3_007";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.3.007";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.3.012";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_3_012";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.3.012";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.3.014";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_3_014";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.3.014";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.3.020";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_3_020";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.3.020";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.3.023";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_3_023";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.3.023";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.3.025";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_3_025";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.3.025";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.3.027";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_3_027";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.3.027";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.3.029";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_3_029";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.3.029";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.3.32";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_3_032";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.3.032";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.3.35";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_3_035";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.3.035";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.009";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_4_009";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.4.009";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.010";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_4_010";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.4.010";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.012";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_4_012";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.4.012";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.013";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_4_013";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.4.013";	
	
	//+ #104 Дзеса Ігор (capitoshko) 08.10.2018
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.014";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_4_014";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.4.014";
	//- #104 Дзеса Ігор (capitoshko) 08.10.2018 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.019";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_4_019";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.4.019";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.020";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_4_020";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.4.020";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.023";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_4_023";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.4.023";
	
	//+ ##122 Дзеса Ігор (capitoshko) 21.01.2019
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.024";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_4_024";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.4.024";	
	//- ##122 Дзеса Ігор (capitoshko) 21.01.2019 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.025";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_4_025";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.4.025";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.026";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_4_026";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.4.026";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.034";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_4_034";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.4.034";
	
	//+ УрянскийД 2020-06-22 (начало)
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.003";
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеИтоговЧекЛистаОперативное";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.003";
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеИтоговЧекЛистаВФоне";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0c980bcc-9483-4a76-b15b-80b6dac3dbf4");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет общее количество и количество выполненных подзадач чек-листа.'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "узОбновлениеИнформационнойБазы.ЗарегистрироватьДанныеКОбновлениюИтоговЧекЛиста";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.узЗадачи";
	Обработчик.ИзменяемыеОбъекты = "Справочник.узЗадачи";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.003";
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеСостоянийВзаимодействияПоЗадачамОперативное";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.003";
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеСостоянийВзаимодействияПоЗадачамВФоне";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("454eb93c-3fc1-45bf-99c6-1045a4f18142");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет сводную информацию о почтовых взаимодействиях по задачам.'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "узОбновлениеИнформационнойБазы.ЗарегистрироватьДанныеКОбновлениюВзаимодействийПоЗадачам";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.узСостояниеВзаимодействийПоЗадачам";
	Обработчик.ЧитаемыеОбъекты = "Справочник.узЗадачиПрисоединенныеФайлы,"
		+ "Документ.ЭлектронноеПисьмоВходящее,"
		+ "Документ.ЭлектронноеПисьмоИсходящее,"
		+ "Справочник.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы,"
		+ "Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы";;
	//- УрянскийД 2020-06-22 (окончание)
	
	// + #242 Пиганов Г.В. 2020-08-02
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновитьПредопределенныеВидыКонтактнойИнформацииЗаказчиков";
	// - #242 Пиганов Г.В. 2020-08-02
	
	// +SZ #277 17.01.2021
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.011";
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_5_011";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.5.011";
	// -SZ #277 17.01.2021
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "1.0.5.013";
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_5_013";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.5.013";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Версия = "1.0.5.014";
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_5_014";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.5.014";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Версия = "1.0.5.015";
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_5_015";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.5.015";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "1.0.5.016";
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_5_016";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.5.016";	

	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "1.0.5.017";
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_1_0_5_017";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 1.0.5.017";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "2024.04.20.0";
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_2024_04_20_0";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 2024.04.20.0";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "2024.05.11.1";
	Обработчик.Процедура = "узОбновлениеИнформационнойБазы.ОбновлениеНаВерсию_2024_05_11_1";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Комментарий = "Обновление на версию 2024.05.11.1";	
	
КонецПроцедуры 

Процедура ПередОбновлениемИнформационнойБазы() Экспорт
КонецПроцедуры
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
        Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
КонецПроцедуры
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
КонецПроцедуры
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
КонецПроцедуры
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
КонецПроцедуры 
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
КонецПроцедуры

Процедура ОбновлениеНаВерсию_1_0_1_008() Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Используется", Истина);	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_узЗадачи", ДопПараметры);
КонецПроцедуры 

Процедура ОбновлениеНаВерсию_1_0_1_011() Экспорт
	СтатусыЗадачи_ЗапросНаДобавление = Справочники.узСтатусыЗадачи.ЗапросНаДобавление;
	СтатусыЗадачи_КПереносуВРабочую = Справочники.узСтатусыЗадачи.КПереносуВРабочую;
	
	СпрОбъект = СтатусыЗадачи_ЗапросНаДобавление.ПолучитьОбъект();
	СпрОбъект.Записать();
	
	СпрОбъект = СтатусыЗадачи_КПереносуВРабочую.ПолучитьОбъект();
	СпрОбъект.Записать();	
	
	ТЗНастройки = Новый ТаблицаЗначений();
	ТЗНастройки.Колонки.Добавить("СтатусЗадачи");
	ТЗНастройки.Колонки.Добавить("ВидСтатуса");
	ТЗНастройки.Колонки.Добавить("ВидимостьПоУмолчанию");

	ВидСтатуса_Backlog = Справочники.узВидыСтатусов.Backlog;
	ВидСтатуса_ВРаботе = Справочники.узВидыСтатусов.ВРаботе;
	ВидСтатуса_Готово = Справочники.узВидыСтатусов.Готово;
	
	узДобавитьВТЗНастройки(СтатусыЗадачи_ЗапросНаДобавление,ВидСтатуса_ВРаботе,Ложь,ТЗНастройки);
	узДобавитьВТЗНастройки(СтатусыЗадачи_КПереносуВРабочую,ВидСтатуса_ВРаботе,Ложь,ТЗНастройки);
	
	Для каждого СтрокаТЗНастройки из ТЗНастройки цикл
		СпрОбъект = СтрокаТЗНастройки.СтатусЗадачи.ПолучитьОбъект();
		СпрОбъект.ВидСтатуса = СтрокаТЗНастройки.ВидСтатуса;
		СпрОбъект.ВидимостьПоУмолчанию = СтрокаТЗНастройки.ВидимостьПоУмолчанию;
		СпрОбъект.Записать();
	Конеццикла;	
КонецПроцедуры 

Процедура ОбновлениеНаВерсию_1_0_1_012() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	узЗадачи.Ссылка
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|ГДЕ
	|	НЕ узЗадачи.ЕстьПодчиненныеЗадачи";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		#Если Сервер И НЕ Сервер тогда
			СпрОбъект = Справочники.узЗадачи.СоздатьЭлемент();
		#Конецесли
		СпрОбъект.ПоказыватьВОтчетахИКанбанДоске = Истина;
		СпрОбъект.ДополнительныеСвойства.Вставить("узЭтоОбработка",Истина);
		СпрОбъект.Записать();
	КонецЦикла;
КонецПроцедуры 

Процедура ОбновлениеНаВерсию_1_0_1_014() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	узЗадачи.Ссылка
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ВидСтатуса_Готово = ПредопределенноеЗначение("Справочник.узВидыСтатусов.Готово");
	
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		#Если Сервер И НЕ Сервер тогда
			СпрОбъект = Справочники.узЗадачи.СоздатьЭлемент();
		#Конецесли
		Если СпрОбъект.ИсторияСтатусов.Количество() > 0 Тогда
			Продолжить;
		Конецесли;
		
		СпрОбъект.ДобавитьВИсториюСтатусов();
		
		Если СпрОбъект.Статус.ВидСтатуса = ВидСтатуса_Готово Тогда
			Для каждого СтрокаИсторияСтатусов из СпрОбъект.ИсторияСтатусов цикл
				Если НЕ ЗначениеЗаполнено(СтрокаИсторияСтатусов.ДатаОкончания) Тогда
					СтрокаИсторияСтатусов.ДатаОкончания = ТекущаяДатаСеанса();
				Конецесли;
			Конеццикла;	
		Иначе
			Для каждого СтрокаИсторияСтатусов из СпрОбъект.ИсторияСтатусов цикл
				СтрокаИсторияСтатусов.ДатаНачала = СпрОбъект.ДатаПоследнегоИзменения;
			Конеццикла;				
		Конецесли;
		
		СпрОбъект.ДополнительныеСвойства.Вставить("узЭтоОбработка",Истина);
		СпрОбъект.Записать();
	КонецЦикла;
КонецПроцедуры 

Процедура ОбновлениеНаВерсию_1_0_1_016() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	узЗадачи.Ссылка
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ОформлениеТекста_ФорматированныйТекст = ПредопределенноеЗначение("Перечисление.узОформлениеТекста.ФорматированныйТекст");
	ОформлениеТекста_Текст = ПредопределенноеЗначение("Перечисление.узОформлениеТекста.Текст");
	
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		#Если Сервер И НЕ Сервер тогда
			СпрОбъект = Справочники.узЗадачи.СоздатьЭлемент();
		#Конецесли
		Если СпрОбъект.Удалить_ИспользоватьФорматированиеВСодержании Тогда
			СпрОбъект.ОформлениеТекста = ОформлениеТекста_ФорматированныйТекст;
		Иначе
			СпрОбъект.ОформлениеТекста = ОформлениеТекста_Текст;
		Конецесли;
		СпрОбъект.ДополнительныеСвойства.Вставить("узЭтоОбработка",Истина);
		СпрОбъект.Записать();
	КонецЦикла;
КонецПроцедуры 

Процедура ОбновлениеНаВерсию_1_0_1_019() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	узЗадачи.Ссылка
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		#Если Сервер И НЕ Сервер тогда
			СпрОбъект = Справочники.узЗадачи.СоздатьЭлемент();
		#Конецесли
		пКлючСтроки = 1;
		Для каждого СтрокаКомментарии из СпрОбъект.Комментарии цикл
			СтрокаКомментарии.КлючСтроки = пКлючСтроки;		
			пКлючСтроки = пКлючСтроки + 1;
		Конеццикла;		
		СпрОбъект.ДополнительныеСвойства.Вставить("узЭтоОбработка",Истина);
		СпрОбъект.Записать();
	КонецЦикла;
КонецПроцедуры 

Процедура ОбновлениеНаВерсию_1_0_1_020() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	узЗадачи.Ссылка
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		#Если Сервер И НЕ Сервер тогда
			СпрОбъект = Справочники.узЗадачи.СоздатьЭлемент();
		#Конецесли
		пИзмененЦветПоУмолчанию = СпрОбъект.ПолучитьИзмененЦветПоУмолчанию();
		Если СпрОбъект.ИзмененЦветПоУмолчанию = пИзмененЦветПоУмолчанию Тогда
			Продолжить;
		Конецесли;
		
		СпрОбъект.ИзмененЦветПоУмолчанию = пИзмененЦветПоУмолчанию;
		СпрОбъект.ДополнительныеСвойства.Вставить("узЭтоОбработка",Истина);
		СпрОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ОбновлениеНаВерсию_1_0_2_004() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	узЗадачи.Ссылка
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|ГДЕ
	|	узЗадачи.ДатаНачалаРаботПоЗадаче = ДАТАВРЕМЯ(1, 1, 1)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		#Если Сервер И НЕ Сервер тогда
			СпрОбъект = Справочники.узЗадачи.СоздатьЭлемент();
		#Конецесли		
		СпрОбъект.ДатаНачалаРаботПоЗадаче = СпрОбъект.ДатаСоздания;
		СпрОбъект.ДополнительныеСвойства.Вставить("узЭтоОбработка",Истина);
		СпрОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ОбновлениеНаВерсию_1_0_2_013() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	узВыпускРелиза.Ссылка
	|ИЗ
	|	Документ.узВыпускРелиза КАК узВыпускРелиза
	|
	|УПОРЯДОЧИТЬ ПО
	|	узВыпускРелиза.Дата";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		#Если Сервер И НЕ Сервер тогда
			ДокОбъект = Документы.узВыпускРелиза.СоздатьДокумент();
		#Конецесли		
		ДокОбъект.СформироватьСписокЗадач();
		ДокОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ОбновлениеНаВерсию_1_0_2_014() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	узИсторияКонфигураций.Ссылка
	|ИЗ
	|	Справочник.узИсторияКонфигураций КАК узИсторияКонфигураций
	|
	|УПОРЯДОЧИТЬ ПО
	|	узИсторияКонфигураций.Код";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	СтруктураКэшПоиска = Новый Структура;
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		#Если Сервер И НЕ Сервер тогда
			СпрОбъект = Справочники.узИсторияКонфигураций.СоздатьЭлемент(); 
		#Конецесли		
		пПользователь = Неопределено;
		
		пПользовательХранилища = СокрЛП(СпрОбъект.ПользовательХранилища);		
		
		Если ЗначениеЗаполнено(пПользовательХранилища) Тогда
			Если СтруктураКэшПоиска.Свойство(пПользовательХранилища) Тогда
				пПользователь = СтруктураКэшПоиска[пПользовательХранилища];
			Иначе
				пПользователь = узОбщийМодульСервер.ПолучитьПользователяПоПользователюХранилища(пПользовательХранилища);		
				СтруктураКэшПоиска.Вставить(пПользовательХранилища,пПользователь);
			Конецесли;
		Конецесли;
		
		СпрОбъект.Пользователь = пПользователь;
		СпрОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ОбновлениеНаВерсию_1_0_3_007() Экспорт
	МассивКодовСообщений = Новый Массив();
	МассивКодовСообщений.Добавить(75);
	МассивКодовСообщений.Добавить(76);
	РегистрыСведений.узСловарь.ЗаполнитьСловарьПоКодамСообщений(МассивКодовСообщений);
КонецПроцедуры

Процедура ОбновлениеНаВерсию_1_0_3_012() Экспорт
	МассивКодовСообщений = Новый Массив();
	МассивКодовСообщений.Добавить(77);
	МассивКодовСообщений.Добавить(78);
	МассивКодовСообщений.Добавить(79);
	МассивКодовСообщений.Добавить(80);
	МассивКодовСообщений.Добавить(81);
	МассивКодовСообщений.Добавить(82);
	РегистрыСведений.узСловарь.ЗаполнитьСловарьПоКодамСообщений(МассивКодовСообщений);
КонецПроцедуры

Процедура ОбновлениеНаВерсию_1_0_3_014() Экспорт
	МассивКодовСообщений = Новый Массив();
	МассивКодовСообщений.Добавить(83);
	МассивКодовСообщений.Добавить(84);
	МассивКодовСообщений.Добавить(85);
	МассивКодовСообщений.Добавить(86);
	РегистрыСведений.узСловарь.ЗаполнитьСловарьПоКодамСообщений(МассивКодовСообщений);
КонецПроцедуры

Процедура ОбновлениеНаВерсию_1_0_3_020() Экспорт
	МассивКодовСообщений = Новый Массив();
	МассивКодовСообщений.Добавить(87);
	РегистрыСведений.узСловарь.ЗаполнитьСловарьПоКодамСообщений(МассивКодовСообщений);
КонецПроцедуры 

Процедура ОбновлениеНаВерсию_1_0_3_023() Экспорт
	МассивКодовСообщений = Новый Массив();
	МассивКодовСообщений.Добавить(88);
	РегистрыСведений.узСловарь.ЗаполнитьСловарьПоКодамСообщений(МассивКодовСообщений);
КонецПроцедуры 

Процедура ОбновлениеНаВерсию_1_0_3_025() Экспорт
	МассивКодовСообщений = Новый Массив();
	МассивКодовСообщений.Добавить(89);
	МассивКодовСообщений.Добавить(90);
	МассивКодовСообщений.Добавить(91);
	МассивКодовСообщений.Добавить(92);
	РегистрыСведений.узСловарь.ЗаполнитьСловарьПоКодамСообщений(МассивКодовСообщений);	
КонецПроцедуры 

Процедура ОбновлениеНаВерсию_1_0_3_027() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	узЗадачи.ОсновнаяЗадача
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|ГДЕ
	|	узЗадачи.ОсновнаяЗадача <> ЗНАЧЕНИЕ(Справочник.узЗадачи.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.ОсновнаяЗадача.ПолучитьОбъект();
		#Если Сервер И НЕ Сервер тогда
			СпрОбъект = Справочники.узЗадачи.СоздатьЭлемент();
		#Конецесли		
		СпрОбъект.ЭтоОсновнаяЗадача = Истина;
		СпрОбъект.ДополнительныеСвойства.Вставить("узЭтоОбработка",Истина);
		СпрОбъект.Записать();
	КонецЦикла;
	
	МассивКодовСообщений = Новый Массив();
	МассивКодовСообщений.Добавить(93);
	МассивКодовСообщений.Добавить(94);
	МассивКодовСообщений.Добавить(95);
	МассивКодовСообщений.Добавить(96);
	РегистрыСведений.узСловарь.ЗаполнитьСловарьПоКодамСообщений(МассивКодовСообщений);		
КонецПроцедуры 

Процедура ОбновлениеНаВерсию_1_0_3_029() Экспорт
	
	МассивКодовСообщений = Новый Массив();
	МассивКодовСообщений.Добавить(97);
	МассивКодовСообщений.Добавить(98);
	МассивКодовСообщений.Добавить(99);
	МассивКодовСообщений.Добавить(100);
	МассивКодовСообщений.Добавить(101);
	РегистрыСведений.узСловарь.ЗаполнитьСловарьПоКодамСообщений(МассивКодовСообщений);
	
КонецПроцедуры


Процедура ОбновлениеНаВерсию_1_0_3_032() Экспорт
	
	МассивКодовСообщений = Новый Массив();
	МассивКодовСообщений.Добавить(102);
	РегистрыСведений.узСловарь.ЗаполнитьСловарьПоКодамСообщений(МассивКодовСообщений);
	
КонецПроцедуры

Процедура ОбновлениеНаВерсию_1_0_3_035() Экспорт
	
	СпрОбъект = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_узКонтрагенты.ПолучитьОбъект();
	СпрОбъект.Используется = Истина;
	СпрОбъект.Записать();		
	
	СпрОбъект = Справочники.ВидыКонтактнойИнформации.СправочникузКонтрагенты.ПолучитьОбъект();
	СпрОбъект.Используется = Истина;
	СпрОбъект.Записать();
	
    // Справочник "Контрагенты"
    ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
    ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.узEmailКонтрагенты;
    ПараметрыВида.Используется = Истина;
    ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
    ПараметрыВида.Порядок = 1;
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
    ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
    ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.узТелефонКонтрагенты;
    ПараметрыВида.Используется = Истина;
    ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
    ПараметрыВида.Порядок = 2;
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Процедура ОбновлениеНаВерсию_1_0_4_009() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	узКонтрагенты.Ссылка
	|ИЗ
	|	Справочник.узКонтрагенты КАК узКонтрагенты
	|ГДЕ
	|	узКонтрагенты.узКороткоеИмя = """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		#Если Сервер И НЕ Сервер тогда
			СпрОбъект = Справочники.узКонтрагенты.СоздатьЭлемент();
		#Конецесли
		СпрОбъект.узКороткоеИмя = СпрОбъект.Наименование;
		СпрОбъект.Записать();
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	узЗадачи.Ссылка
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|ГДЕ
	|	узЗадачи.ТекстСодержания ПОДОБНО ""%#%""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		#Если Сервер И НЕ Сервер тогда
			СпрОбъект = Справочники.узЗадачи.СоздатьЭлемент();
		#Конецесли
		СпрОбъект.СформироватьЗаписиВРССвязанныеЗадачи(Ложь);
		СпрОбъект.Записать();
	КонецЦикла;
	

КонецПроцедуры

Процедура ОбновлениеНаВерсию_1_0_4_010() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	узТекущиеДела.Ссылка
	|ИЗ
	|	Справочник.узТекущиеДела КАК узТекущиеДела
	|ГДЕ
	|	узТекущиеДела.ГруппаТекущегоДела = &ГруппаТекущегоДелаПустая";
	
	Запрос.УстановитьПараметр("ГруппаТекущегоДелаПустая", ПредопределенноеЗначение("Справочник.узГруппыТекущихДел.ПустаяСсылка"));
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Конецесли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ГруппыТекущихДел_Сегодня = ПредопределенноеЗначение("Справочник.узГруппыТекущихДел.Сегодня");
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		#Если Сервер И НЕ Сервер тогда
			СпрОбъект = Справочники.узТекущиеДела.СоздатьЭлемент();
		#Конецесли
		СпрОбъект.ГруппаТекущегоДела = ГруппыТекущихДел_Сегодня;
		СпрОбъект.Записать();
	КонецЦикла;	
КонецПроцедуры

//+ #104 Дзеса Ігор (capitoshko) 08.10.2018
Процедура ОбновлениеНаВерсию_1_0_4_014() Экспорт
		
	ПереносУчетаВремениВОтдельныйРегистр();
	
КонецПроцедуры

Процедура ОбновлениеНаВерсию_1_0_4_019() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	узВводФактаПоЗадаче.Ссылка
	|ИЗ
	|	Документ.узВводФактаПоЗадаче КАК узВводФактаПоЗадаче
	|ГДЕ
	|	узВводФактаПоЗадаче.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	узВводФактаПоЗадаче.Дата";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Конецесли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
КонецПроцедуры 

Процедура ОбновлениеНаВерсию_1_0_4_020() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	узЗадачиУдалить_ФактическиеЧасы.Ссылка КАК Задача,
	|	узЗадачиУдалить_ФактическиеЧасы.ДатаНачала,
	|	узЗадачиУдалить_ФактическиеЧасы.ДатаОкончания,
	|	узЗадачиУдалить_ФактическиеЧасы.Комментарий
	|ПОМЕСТИТЬ ВТФактСКомментарием
	|ИЗ
	|	Справочник.узЗадачи.Удалить_ФактическиеЧасы КАК узЗадачиУдалить_ФактическиеЧасы
	|ГДЕ
	|	узЗадачиУдалить_ФактическиеЧасы.Комментарий <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	узВводФактаПоЗадачеДанные.Ссылка КАК ДокументВводФакта,
	|	узВводФактаПоЗадачеДанные.НомерСтроки,
	|	узВводФактаПоЗадачеДанные.ДатаНачала,
	|	узВводФактаПоЗадачеДанные.ДатаОкончания,
	|	ВТФактСКомментарием.ДатаНачала КАК ДатаНачалаВЗадаче,
	|	ВТФактСКомментарием.ДатаОкончания КАК ДатаОкончанияВЗадаче,
	|	ВТФактСКомментарием.Комментарий КАК КомментарийВЗадаче,
	|	узВводФактаПоЗадачеДанные.Примечание КАК ПримечаниеВДокументе
	|ИЗ
	|	ВТФактСКомментарием КАК ВТФактСКомментарием
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.узВводФактаПоЗадаче.Данные КАК узВводФактаПоЗадачеДанные
	|		ПО ВТФактСКомментарием.Задача = узВводФактаПоЗадачеДанные.Ссылка.Задача
	|			И ВТФактСКомментарием.ДатаНачала = узВводФактаПоЗадачеДанные.ДатаНачала
	|			И ВТФактСКомментарием.ДатаОкончания = узВводФактаПоЗадачеДанные.ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	узВводФактаПоЗадачеДанные.Ссылка.Дата
	|ИТОГИ ПО
	|	ДокументВводФакта";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Конецесли;
	
	ВыборкаПоДокументам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		// +++ 79Vlad  09.01.2019
		Если Не ЗначениеЗаполнено(ВыборкаПоДокументам.ДокументВводФакта) Тогда
			Продолжить;
		КонецЕсли; 
		// --- 79Vlad  09.01.2019
		
		
		ДокОбъект = ВыборкаПоДокументам.ДокументВводФакта.ПолучитьОбъект();
		#Если Сервер И НЕ Сервер тогда
			ДокОбъект = Документы.узВводФактаПоЗадаче.СоздатьДокумент();
		#Конецесли
		
		ЗаписыватьДокумент = Ложь;
		ВыборкаДанные = ВыборкаПоДокументам.Выбрать();
		Пока ВыборкаДанные.Следующий() Цикл
			СтрокаДанные = ДокОбъект.Данные[ВыборкаДанные.НомерСтроки-1];
			Если ЗначениеЗаполнено(СтрокаДанные.Примечание) Тогда
				Продолжить;
			Конецесли;
			
			СтрокаДанные.Примечание = ВыборкаДанные.КомментарийВЗадаче;
			ЗаписыватьДокумент = Истина;
		КонецЦикла;
		
		Если НЕ ЗаписыватьДокумент Тогда
			Продолжить;
		Конецесли;
		
		РежимЗаписи = РежимЗаписиДокумента.Запись;
		Если ДокОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Конецесли;
		ДокОбъект.Записать(РежимЗаписи);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Обработан " + ДокОбъект;
		Сообщение.Сообщить();
	КонецЦикла;	
	
КонецПроцедуры 

Процедура ОбновлениеНаВерсию_1_0_4_023() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	узВариантыВажностиЗадачи.Ссылка
	|ИЗ
	|	Справочник.узВариантыВажностиЗадачи КАК узВариантыВажностиЗадачи
	|ГДЕ
	|	узВариантыВажностиЗадачи.ВариантВажностиВзаимодействия = &ВариантВажностиВзаимодействияПустая";
	
	Запрос.УстановитьПараметр("ВариантВажностиВзаимодействияПустая",Перечисления.ВариантыВажностиВзаимодействия.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Конецесли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		пВажностьЗадачи = Выборка.Ссылка;
		пВариантВажностиВзаимодействия = Перечисления.ВариантыВажностиВзаимодействия[""+пВажностьЗадачи];
		Если НЕ ЗначениеЗаполнено(пВариантВажностиВзаимодействия) Тогда
			Продолжить;
		Конецесли;
		
		СпрОбъект = пВажностьЗадачи.ПолучитьОбъект();				
		СпрОбъект.ВариантВажностиВзаимодействия = пВариантВажностиВзаимодействия;
		СпрОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереносУчетаВремениВОтдельныйРегистр()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	узЗадачиУдалить_ФактическиеЧасы.Ссылка КАК Задача,
	|	узЗадачиУдалить_ФактическиеЧасы.Ссылка.Исполнитель,
	|	узСпринтыЗадачСрезПоследних.Спринт,
	|	узЗадачиУдалить_ФактическиеЧасы.ДатаНачала,
	|	узЗадачиУдалить_ФактическиеЧасы.ДатаОкончания,
	|	СУММА(узЗадачиУдалить_ФактическиеЧасы.ЧасыФакт) КАК Факт
	|ИЗ
	|	Справочник.узЗадачи.Удалить_ФактическиеЧасы КАК узЗадачиУдалить_ФактическиеЧасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.узСпринтыЗадач.СрезПоследних КАК узСпринтыЗадачСрезПоследних
	|		ПО узЗадачиУдалить_ФактическиеЧасы.Ссылка = узСпринтыЗадачСрезПоследних.Задача
	|
	|СГРУППИРОВАТЬ ПО
	|	узЗадачиУдалить_ФактическиеЧасы.Ссылка,
	|	узЗадачиУдалить_ФактическиеЧасы.ДатаНачала,
	|	узЗадачиУдалить_ФактическиеЧасы.ДатаОкончания,
	|	узСпринтыЗадачСрезПоследних.Спринт,
	|	узЗадачиУдалить_ФактическиеЧасы.Ссылка.Исполнитель
	|
	|ИМЕЮЩИЕ
	|	СУММА(узЗадачиУдалить_ФактическиеЧасы.ЧасыФакт) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	узЗадачи.Ссылка,
	|	узЗадачи.Ссылка.Исполнитель,
	|	узСпринтыЗадачСрезПоследних.Спринт,
	|	узСпринтыЗадачСрезПоследних.Спринт.ДатаНачала,
	|	узСпринтыЗадачСрезПоследних.Спринт.ДатаОкончания,
	|	узЗадачи.Удалить_ЧасыФакт
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.узЗадачи.Удалить_ФактическиеЧасы КАК узЗадачиУдалить_ФактическиеЧасы
	|		ПО узЗадачи.Ссылка = узЗадачиУдалить_ФактическиеЧасы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.узСпринтыЗадач.СрезПоследних КАК узСпринтыЗадачСрезПоследних
	|		ПО узЗадачи.Ссылка = узСпринтыЗадачСрезПоследних.Задача
	|ГДЕ
	|	узЗадачиУдалить_ФактическиеЧасы.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	узЗадачи.Ссылка,
	|	узЗадачи.Ссылка.Исполнитель,
	|	узСпринтыЗадачСрезПоследних.Спринт,
	|	узЗадачи.Удалить_ЧасыФакт,
	|	узЗадачиУдалить_ФактическиеЧасы.Ссылка
	|
	|ИМЕЮЩИЕ
	|	СУММА(узЗадачи.Удалить_ЧасыФакт) <> 0";
	
	ВыборкаЗадач = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		Пока ВыборкаЗадач.Следующий() Цикл
			ДокументУчетаЗадач = Документы.узВводФактаПоЗадаче.СоздатьДокумент();
			ДокументУчетаЗадач.Дата = ВыборкаЗадач.ДатаНачала;
			ДокументУчетаЗадач.Задача = ВыборкаЗадач.Задача;
			ДокументУчетаЗадач.Исполнитель = ВыборкаЗадач.Исполнитель;
			СтрокаТЧДанные = ДокументУчетаЗадач.Данные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧДанные, ВыборкаЗадач);
			ДокументУчетаЗадач.Записать(РежимЗаписиДокумента.Проведение);
		КонецЦикла;
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение "Возникли ошибки при обновлении!!!";
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры
//- #104 Дзеса Ігор (capitoshko) 08.10.2018 

//+ ##122 Дзеса Ігор (capitoshko) 21.01.2019
Процедура ОбновлениеНаВерсию_1_0_4_024()  Экспорт 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	узЗадачиИсторияСтатусов.Ссылка КАК Задача,
	|	узЗадачиИсторияСтатусов.Статус,
	|	узЗадачиИсторияСтатусов.Исполнитель,
	|	узЗадачиИсторияСтатусов.ДатаНачала КАК Период
	|ИЗ
	|	Справочник.узЗадачи.ИсторияСтатусов КАК узЗадачиИсторияСтатусов");
	
	ВыборкаИстории = Запрос.Выполнить().Выбрать();
		
	
	Пока ВыборкаИстории.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.узСтатусыЗадач.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаИстории);	
		
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
		
КонецПроцедуры
//- ##122 Дзеса Ігор (capitoshko) 21.01.2019 

Процедура ОбновлениеНаВерсию_1_0_4_034()  Экспорт 
	
	Справочники.узКонстанты.УстановитьЗначениеКонстанты("ТелеграммИспользоватьЗаменуСимволовВДругуюКодировку",Истина);
	
КонецПроцедуры


Процедура ОбновлениеНаВерсию_1_0_4_026()  Экспорт 
	
	Справочники.узКонстанты.УстановитьЗначениеКонстанты("ОтключитьВозможностьСозданиеРегламентныхТекущихДел",Ложь);
	ЗаполнитьПорядокВГруппеТекущихДел(ПредопределенноеЗначение("Справочник.узГруппыТекущихДел.Регламентное"),4);	
	
КонецПроцедуры


Процедура ОбновлениеНаВерсию_1_0_4_025()  Экспорт 
	
	Справочники.узКонстанты.УстановитьЗначениеКонстанты("ТелеграммИспользоватьПроксиДляОтправки",Ложь);
	РегистрыСведений.узПроксиСерверы.ЗаполнитьНастройкамиПоУмолчанию();
	
КонецПроцедуры

// +SZ #277 17.01.2021
Процедура ОбновлениеНаВерсию_1_0_5_011()  Экспорт 
	
	Справочники.узКонстанты.УстановитьЗначениеКонстанты("ТолькоПросмотрДляСодержанияЗадач", Ложь);
	
КонецПроцедуры // -SZ #277 17.01.2021

Процедура ОбновлениеНаВерсию_1_0_5_013() Экспорт
	
	ТипБулево = Тип("Булево");
	
	ТолькоПросмотрДляСодержанияЗадач = Справочники.узКонстанты.ПолучитьЗначениеКонстанты(
		"ТолькоПросмотрДляСодержанияЗадач", ТипБулево);
	
	Если ТолькоПросмотрДляСодержанияЗадач = Неопределено Тогда
		Справочники.узКонстанты.УстановитьЗначениеКонстанты("ТолькоПросмотрДляСодержанияЗадач", Ложь);
	КонецЕсли;
	
КонецПроцедуры  

Процедура ОбновлениеНаВерсию_1_0_5_014() Экспорт
	
    Справочники.узПроекты.СоздатьПроектыПоОсновнымЗадачам();
	
КонецПроцедуры

Процедура ОбновлениеНаВерсию_1_0_5_015() Экспорт
	
	ПеренестиКодВСодержаниеТекстКод();
	ЗаполнитьРеквизитПоказыватьТаблицу();
	
КонецПроцедуры  

Процедура ОбновлениеНаВерсию_1_0_5_016() Экспорт
	
	ТипБулево = Тип("Булево");
	
	Свойство_МеткаЗадачи = Справочники.узКонстанты.ПолучитьЗначениеКонстанты(
		"Свойство_МеткаЗадачи", 
		Тип("ПланВидовХарактеристикСсылка.узДопРеквизитыЗадачМножественные"));		
		
	Если Свойство_МеткаЗадачи = Неопределено Тогда  
		
		ПВХОбъект = ПланыВидовХарактеристик.узДопРеквизитыЗадачМножественные.СоздатьЭлемент();
		ПВХОбъект.Наименование = "Метка";
		ПВХОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.узМеткиЗадач");
		ПВХОбъект.Множественный = Истина;
		ПВХОбъект.Записать();
			
		Справочники.узКонстанты.УстановитьЗначениеКонстанты("Свойство_МеткаЗадачи", ПВХОбъект.Ссылка);
		
	КонецЕсли;
	
	// BSLLS:StyleElementConstructors-off     
	
	Если Справочники.узМеткиЗадач.НайтиПоНаименованию("Новая фича").Ссылка.Пустая() Тогда
		СпрОбъект = Справочники.узМеткиЗадач.СоздатьЭлемент();
		СпрОбъект.Наименование = "Новая фича";
		СпрОбъект.РеквизитДопУпорядочивания = 1;
		СпрОбъект.ЦветФонаМетки = Новый ХранилищеЗначения(Новый Цвет(224, 255, 255));
		СпрОбъект.ЦветТекстаМетки = Новый ХранилищеЗначения(Новый Цвет(0, 150, 70));
		СпрОбъект.Записать();
	КонецЕсли;
	
	Если Справочники.узМеткиЗадач.НайтиПоНаименованию("Ошибка").Ссылка.Пустая() Тогда
		СпрОбъект = Справочники.узМеткиЗадач.СоздатьЭлемент();
		СпрОбъект.Наименование = "Ошибка";
		СпрОбъект.РеквизитДопУпорядочивания = 2;
		СпрОбъект.ЦветФонаМетки = Новый ХранилищеЗначения(Новый Цвет(255, 200, 200));
		СпрОбъект.ЦветТекстаМетки = Новый ХранилищеЗначения(Новый Цвет(255, 0, 0));
		СпрОбъект.Записать();
	КонецЕсли;		
	
	Если Справочники.узМеткиЗадач.НайтиПоНаименованию("Дубль").Ссылка.Пустая() Тогда
		СпрОбъект = Справочники.узМеткиЗадач.СоздатьЭлемент();
		СпрОбъект.Наименование = "Дубль";
		СпрОбъект.РеквизитДопУпорядочивания = 3;
		СпрОбъект.ЦветФонаМетки = Новый ХранилищеЗначения(Новый Цвет(172, 195, 207));
		СпрОбъект.ЦветТекстаМетки = Новый ХранилищеЗначения(Новый Цвет(255, 255, 255));
		СпрОбъект.Записать();   
	КонецЕсли;
	
	Если Справочники.узМеткиЗадач.НайтиПоНаименованию("Вопрос").Ссылка.Пустая() Тогда
		СпрОбъект = Справочники.узМеткиЗадач.СоздатьЭлемент();
		СпрОбъект.Наименование = "Вопрос";
		СпрОбъект.РеквизитДопУпорядочивания = 4;
		СпрОбъект.ЦветФонаМетки = Новый ХранилищеЗначения(Новый Цвет(238, 130, 238));
		СпрОбъект.ЦветТекстаМетки = Новый ХранилищеЗначения(Новый Цвет(255, 255, 255));
		СпрОбъект.Записать();
	КонецЕсли;
	
	Если Справочники.узМеткиЗадач.НайтиПоНаименованию("Требуется помощь").Ссылка.Пустая() Тогда
		СпрОбъект = Справочники.узМеткиЗадач.СоздатьЭлемент();
		СпрОбъект.Наименование = "Требуется помощь";
		СпрОбъект.РеквизитДопУпорядочивания = 5;
		СпрОбъект.ЦветФонаМетки = Новый ХранилищеЗначения(Новый Цвет(123, 201, 111));
		СпрОбъект.ЦветТекстаМетки = Новый ХранилищеЗначения(Новый Цвет(255, 255, 255));
		СпрОбъект.Записать();  
	КонецЕсли;  

	Если Справочники.узМеткиЗадач.НайтиПоНаименованию("Инструкция").Ссылка.Пустая() Тогда
		СпрОбъект = Справочники.узМеткиЗадач.СоздатьЭлемент();
		СпрОбъект.Наименование = "Инструкция";
		СпрОбъект.РеквизитДопУпорядочивания = 6;
		СпрОбъект.ЦветФонаМетки = Новый ХранилищеЗначения(Новый Цвет(70, 130, 180));
		СпрОбъект.ЦветТекстаМетки = Новый ХранилищеЗначения(Новый Цвет(255, 255, 255));
		СпрОбъект.Записать();  
	КонецЕсли; 	
	
	// BSLLS:StyleElementConstructors-on	
	
КонецПроцедуры  

Процедура ОбновлениеНаВерсию_1_0_5_017() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(узЗадачиКомментарии.НомерСтроки) КАК НомерСтроки,
	|	узЗадачиКомментарии.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТПоследнийКомментарий
	|ИЗ
	|	Справочник.узЗадачи.Комментарии КАК узЗадачиКомментарии
	|
	|СГРУППИРОВАТЬ ПО
	|	узЗадачиКомментарии.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	узЗадачиКомментарии.Ссылка КАК Ссылка,
	|	узЗадачиКомментарии.НомерСтроки КАК НомерСтроки,
	|	узЗадачиКомментарии.КлючСтроки КАК КлючСтроки,
	|	узЗадачиКомментарии.ДатаКомментария КАК ДатаКомментария,
	|	узЗадачиКомментарии.Автор КАК Автор,
	|	узЗадачиКомментарии.Комментарий КАК Комментарий,
	|	узЗадачиКомментарии.Выполнено КАК Выполнено
	|ИЗ
	|	Справочник.узЗадачи.Комментарии КАК узЗадачиКомментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследнийКомментарий КАК ВТПоследнийКомментарий
	|		ПО узЗадачиКомментарии.Ссылка = ВТПоследнийКомментарий.Ссылка
	|			И узЗадачиКомментарии.НомерСтроки = ВТПоследнийКомментарий.НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗадачаСсылка = Выборка.Ссылка;
		#Если Сервер И НЕ Сервер тогда
			//Условие в конструкции специально сделано невыполнимым
			ЗадачаСсылка = Справочники.узЗадачи.ПустаяСсылка();
		#Конецесли
		
		СпрОбъектЗадача = ЗадачаСсылка.ПолучитьОбъект();
		СпрОбъектЗадача.ДополнительныеСвойства.Вставить("узЭтоОбработка", Истина);
		СпрОбъектЗадача.ПоследнийКомментарий = Выборка.Комментарий;		
		СпрОбъектЗадача.Записать();
		
	КонецЦикла;
	
КонецПроцедуры  

Процедура ПеренестиКодВСодержаниеТекстКод() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	узЗадачи.Ссылка КАК Ссылка,
	|	узЗадачи.ОформлениеТекста КАК ОформлениеТекста
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|ГДЕ
	|	узЗадачи.ОформлениеТекста = &ОформлениеТекста_Код
	|	И НЕ узЗадачи.ПоказыватьКод";
	
	Запрос.УстановитьПараметр("ОформлениеТекста_Код", 
		ПредопределенноеЗначение("Перечисление.узОформлениеТекста.Удалить_Код"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СпрОбъектЗадача = Выборка.Ссылка.ПолучитьОбъект();
		#Если Сервер И НЕ Сервер тогда 
			//Условие в конструкции специально сделано невыполнимым
			СпрОбъектЗадача = Справочники.узЗадачи.СоздатьЭлемент();
		#Конецесли
		
		СпрОбъектЗадача.ПоказыватьКод = Истина;
		СпрОбъектЗадача.ТекстСодержанияКод = СпрОбъектЗадача.ТекстСодержания;
		СпрОбъектЗадача.Записать();
		
	КонецЦикла;
	
КонецПроцедуры 

Процедура ЗаполнитьРеквизитПоказыватьТаблицу() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	узЗадачи.Ссылка КАК Ссылка,
	|	узЗадачи.ОформлениеТекста КАК ОформлениеТекста
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|ГДЕ
	|	узЗадачи.ОформлениеТекста = &ОформлениеТекста_Таблица
	|	И НЕ узЗадачи.ПоказыватьТаблицу";
	
	Запрос.УстановитьПараметр("ОформлениеТекста_Таблица", 
		ПредопределенноеЗначение("Перечисление.узОформлениеТекста.Удалить_Таблица"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СпрОбъектЗадача = Выборка.Ссылка.ПолучитьОбъект();
		#Если Сервер И НЕ Сервер тогда 
			//Условие в конструкции специально сделано невыполнимым
			СпрОбъектЗадача = Справочники.узЗадачи.СоздатьЭлемент();
		#Конецесли
		
		СпрОбъектЗадача.ПоказыватьТаблицу = Истина;
		СпрОбъектЗадача.Записать();
		
	КонецЦикла;
	
КонецПроцедуры 

Процедура узНачальноеЗаполнение() Экспорт
	узДобавитьАдминистраторИБ();
	узОбработатьСправочники("узВидыСтатусов");
	узОбработатьСправочники("узВариантыВажностиЗадачи");
	узОбработатьСправочники("узСтатусыЗадачи");
	узПроставитьВидСтатусаВСтатусахЗадачи();
	Константы.ЗаголовокСистемы.Установить("Управление задачами");
	Константы.ИспользоватьНапоминанияПользователя.Установить(Истина);
	
	ЗаполнитьКонстантыПоУмолчанию();
	
	ТекстСообщения = НСтр("ru = 'После первоначального заполнения, необходимо перезапустить программу!'; en = 'You must restart base after first run!'");
	Сообщить(ТекстСообщения);
	
КонецПроцедуры 

Процедура узДобавитьАдминистраторИБ()
	ИмяПользователя = "Администратор";
	Если ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя)<>Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
	ПользовательИБ.Имя = ИмяПользователя;
	ПользовательИБ.ПоказыватьВСпискеВыбора = Истина;
	ПользовательИБ.ПолноеИмя = ИмяПользователя;
	ПользовательИБ.АутентификацияСтандартная = Истина;
	ПользовательИБ.Роли.Добавить(Метаданные.Роли.АдминистраторСистемы);
	ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
	ПользовательИБ.Роли.Добавить(Метаданные.Роли.ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок);
	ПользовательИБ.Язык = Метаданные.Языки.Русский;
	
	Если Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_3_7 Тогда
		ПользовательИБ.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
	КонецЕсли;
	
	ПользовательИБ.Записать();
КонецПроцедуры 

Процедура узПроставитьВидСтатусаВСтатусахЗадачи()
	ТЗНастройки = Новый ТаблицаЗначений();
	ТЗНастройки.Колонки.Добавить("СтатусЗадачи");
	ТЗНастройки.Колонки.Добавить("ВидСтатуса");
	ТЗНастройки.Колонки.Добавить("ВидимостьПоУмолчанию");

	ВидСтатуса_Backlog = Справочники.узВидыСтатусов.Backlog;
	ВидСтатуса_ВРаботе = Справочники.узВидыСтатусов.ВРаботе;
	ВидСтатуса_Готово = Справочники.узВидыСтатусов.Готово;
	
	узДобавитьВТЗНастройки(Справочники.узСтатусыЗадачи.Отменена,ВидСтатуса_Backlog,Ложь,ТЗНастройки);
	узДобавитьВТЗНастройки(Справочники.узСтатусыЗадачи.Backlog,ВидСтатуса_Backlog,Истина,ТЗНастройки);
	узДобавитьВТЗНастройки(Справочники.узСтатусыЗадачи.Отложена,ВидСтатуса_Backlog,Ложь,ТЗНастройки);
	узДобавитьВТЗНастройки(Справочники.узСтатусыЗадачи.Зарегистрирована,ВидСтатуса_Backlog,Истина,ТЗНастройки);
	
	узДобавитьВТЗНастройки(Справочники.узСтатусыЗадачи.ОжидаетОтвета,ВидСтатуса_ВРаботе,Истина,ТЗНастройки);
	узДобавитьВТЗНастройки(Справочники.узСтатусыЗадачи.ВПроцессеВыполнения,ВидСтатуса_ВРаботе,Истина,ТЗНастройки);
	узДобавитьВТЗНастройки(Справочники.узСтатусыЗадачи.НаТестированииПоказПользователям,ВидСтатуса_ВРаботе,Истина,ТЗНастройки);
	
	узДобавитьВТЗНастройки(Справочники.узСтатусыЗадачи.Готово,ВидСтатуса_Готово,Истина,ТЗНастройки);
	узДобавитьВТЗНастройки(Справочники.узСтатусыЗадачи.Архив,ВидСтатуса_Готово,Ложь,ТЗНастройки);
	
	Для каждого СтрокаТЗНастройки из ТЗНастройки цикл
		СпрОбъект = СтрокаТЗНастройки.СтатусЗадачи.ПолучитьОбъект();
		СпрОбъект.ВидСтатуса = СтрокаТЗНастройки.ВидСтатуса;
		СпрОбъект.ВидимостьПоУмолчанию = СтрокаТЗНастройки.ВидимостьПоУмолчанию;
		СпрОбъект.Записать();
	Конеццикла;
КонецПроцедуры 

Процедура узДобавитьВТЗНастройки(СтатусЗадачи,ВидСтатуса,ВидимостьПоУмолчанию,ТЗНастройки)
	СтрокаТЗНастройки = ТЗНастройки.Добавить();
	СтрокаТЗНастройки.СтатусЗадачи = СтатусЗадачи; 
	СтрокаТЗНастройки.ВидСтатуса = ВидСтатуса;
	СтрокаТЗНастройки.ВидимостьПоУмолчанию = ВидимостьПоУмолчанию;
КонецПроцедуры 

Процедура узОбработатьСправочники(ИмяСправочника)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТСправочник.Ссылка,
	|	ВТСправочник.Код КАК Код
	|ИЗ
	|	Справочник."+ИмяСправочника+" КАК ВТСправочник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.Записать();
	КонецЦикла;
КонецПроцедуры 

Процедура ОбновлениеНаВерсию_1_0_4_012() Экспорт
	
	ЗаполнитьПорядокВГруппеТекущихДел(ПредопределенноеЗначение("Справочник.узГруппыТекущихДел.Сегодня"),1);
	ЗаполнитьПорядокВГруппеТекущихДел(ПредопределенноеЗначение("Справочник.узГруппыТекущихДел.НаНеделе"),2);
	ЗаполнитьПорядокВГруппеТекущихДел(ПредопределенноеЗначение("Справочник.узГруппыТекущихДел.Позже"),3);
	
КонецПроцедуры

Процедура ЗаполнитьПорядокВГруппеТекущихДел(пГруппыТекущихДел,пПорядок)
	СпрОбъект = пГруппыТекущихДел.ПолучитьОбъект();
	СпрОбъект.Порядок = пПорядок;
	СпрОбъект.Записать();	
КонецПроцедуры 

Процедура ОбновлениеНаВерсию_1_0_4_013() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	узЗадачи.Ссылка КАК Задача,
	|	узЗадачи.Удалить_Спринт КАК Спринт
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|ГДЕ
	|	узЗадачи.Удалить_Спринт <> ЗНАЧЕНИЕ(Справочник.узСпринты.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спринт,
	|	Задача
	|ИТОГИ ПО
	|	Спринт";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Конецесли;
	
	ВыборкаСпринт = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСпринт.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСпринт.Спринт) Тогда
			Продолжить;
		КонецЕсли;
		
		обСпринт = ВыборкаСпринт.Спринт.ПолучитьОбъект();
		
		#Если Сервер И НЕ Сервер тогда
			обСпринт = Справочники.узСпринты.СоздатьЭлемент();
		#Конецесли
		
		Если НЕ ЗначениеЗаполнено(обСпринт.ДатаНачала) Тогда
			обСпринт.ДатаНачала = ТекущаяДатаСеанса();	
		Конецесли;

		обСпринт.ТЧЗадачи.Очистить();
		
		ВыборкаПоЗадачам = ВыборкаСпринт.Выбрать();
		
		Пока ВыборкаПоЗадачам.Следующий() Цикл
			
			новСтр = обСпринт.ТЧЗадачи.Добавить();
			новСтр.Задача = ВыборкаПоЗадачам.Задача;
			
		КонецЦикла;
		
		обСпринт.Записать();
		
	КонецЦикла;	
		
КонецПроцедуры

Процедура ОбновлениеНаВерсию_2024_04_20_0() Экспорт

	МассивКодовСообщений = Новый Массив();
	МассивКодовСообщений.Добавить(103);
	РегистрыСведений.узСловарь.ЗаполнитьСловарьПоКодамСообщений(МассивКодовСообщений);
	
КонецПроцедуры         

Процедура ОбновлениеНаВерсию_2024_05_11_1() Экспорт

	РегистрыСведений.узСловарь.ЗаполнитьСловарьПоУмолчанию();
	
КонецПроцедуры

Процедура ЗаполнитьКонстантыПоУмолчанию()
	
	ЗначенияПоУмолчанию = Новый Структура;
	// Текущие дела
	ЗначенияПоУмолчанию.Вставить("ОтключитьВозможностьСозданиеРегламентныхТекущихДел", Ложь);
	// Задачи
	ЗначенияПоУмолчанию.Вставить("СтатусЗадачиПоУмолчанию", Справочники.узСтатусыЗадачи.Зарегистрирована);
	// Телеграмм
	ЗначенияПоУмолчанию.Вставить("ТелеграммИспользоватьЗаменуСимволовВДругуюКодировку", Истина);
	ЗначенияПоУмолчанию.Вставить("ТелеграммИспользоватьПроксиДляОтправки", Ложь);
	
	Для каждого Константа Из ЗначенияПоУмолчанию Цикл
		Справочники.узКонстанты.УстановитьЗначениеКонстанты(Константа.Ключ, Константа.Значение);
	КонецЦикла; 
	
	Константы.ИспользоватьНапоминанияПользователя.Установить(Истина);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// УрянскийД 2020-06-22
Процедура ОбновлениеИтоговЧекЛистаОперативное() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ЧекЛист.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.узЗадачи.Комментарии КАК ЧекЛист
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧекЛист.Ссылка.ДатаСоздания УБЫВ";
	
	ВыборкаЗадач = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗадач.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.узЗадачи");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаЗадач.Ссылка);
			Блокировка.Заблокировать();
			
			ЗадачаОбъект = ВыборкаЗадач.Ссылка.ПолучитьОбъект();
			
			Если ЗадачаОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли; 
			
			КоличествоПодзадач = ЗадачаОбъект.Комментарии.Количество();
			КоличествоВыполненных = ЗадачаОбъект.Комментарии.Итог("Выполнено");
			
			Если ЗадачаОбъект.КоличествоЗадачЧекЛиста <> КоличествоПодзадач Тогда
				ЗадачаОбъект.КоличествоЗадачЧекЛиста = КоличествоПодзадач;
			КонецЕсли; 
			Если ЗадачаОбъект.КоличествоВыполненныхЗадачЧекЛиста <> КоличествоВыполненных Тогда
				ЗадачаОбъект.КоличествоВыполненныхЗадачЧекЛиста = КоличествоВыполненных;
			КонецЕсли; 
			
			Если ЗадачаОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗадачаОбъект);
			КонецЕсли; 
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Процедуре %ИмяПроцедуры% не удалось обработать %ИмяОбъекта%: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяПроцедуры%", "узОбновлениеИнформационнойБазы.ОбновлениеИтоговЧекЛистаОперативное");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", ВыборкаЗадач.Ссылка.Метаданные().ПолноеИмя());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",     ВыборкаЗадач.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%",    ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение ТекстСообщения;
			
		КонецПопытки;
		
	КонецЦикла; 
	
КонецПроцедуры

// УрянскийД 2020-06-22
Процедура ОбновлениеИтоговЧекЛистаВФоне(ПараметрыОбновления) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.узЗадачи";
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	ОбработкаЗавершена = Истина;
	
	ВыборкаЗадач = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(ПараметрыОбновления.Очередь, ПолноеИмяОбъекта);
	
	Пока ВыборкаЗадач.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаЗадач.Ссылка);
			Блокировка.Заблокировать();
			
			ЗадачаОбъект = ВыборкаЗадач.Ссылка.ПолучитьОбъект();
			
			Если ЗадачаОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ВыборкаЗадач.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли; 
			
			КоличествоПодзадач = ЗадачаОбъект.Комментарии.Количество();
			КоличествоВыполненных = ЗадачаОбъект.Комментарии.Итог("Выполнено");
			
			Если ЗадачаОбъект.КоличествоЗадачЧекЛиста <> КоличествоПодзадач Тогда
				ЗадачаОбъект.КоличествоЗадачЧекЛиста = КоличествоПодзадач;
			КонецЕсли; 
			Если ЗадачаОбъект.КоличествоВыполненныхЗадачЧекЛиста <> КоличествоВыполненных Тогда
				ЗадачаОбъект.КоличествоВыполненныхЗадачЧекЛиста = КоличествоВыполненных;
			КонецЕсли; 
			
			Если ЗадачаОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗадачаОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ЗадачаОбъект);
			КонецЕсли; 
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать %ИмяОбъекта%: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", ПолноеИмяОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",     ВыборкаЗадач.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%",    ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				ВыборкаЗадач.Ссылка.Метаданные(),
				ВыборкаЗадач.Ссылка,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла; 
	
	Если Не ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(ПараметрыОбновления.Очередь, ПолноеИмяОбъекта) Тогда
		ОбработкаЗавершена = Ложь;
	КонецЕсли; 		
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре %1 не удалось обработать задачи (пропущены): %2'"),
			"узОбновлениеИнформационнойБазы.ОбновлениеИтоговЧекЛистаВФоне", 
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедура %1 обработала очередную порцию задач: %2'"),
			"узОбновлениеИнформационнойБазы.ОбновлениеИтоговЧекЛистаВФоне", 
			ОбъектовОбработано);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,
			, ,
			ТекстСообщения);
	КонецЕсли;
	
	ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

// УрянскийД 2020-06-22
Процедура ЗарегистрироватьДанныеКОбновлениюИтоговЧекЛиста(ПараметрыОбновления) Экспорт
	
	РазмерПорции = 1000;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекЛист.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.узЗадачи.Комментарии КАК ЧекЛист
	|ГДЕ
	|	ЧекЛист.Ссылка > &Граница
	|	И ЧекЛист.НомерСтроки = 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧекЛист.Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ " + Формат(РазмерПорции, "ЧН=; ЧГ="));
	Запрос.УстановитьПараметр("Граница", Справочники.узЗадачи.ПустаяСсылка());
	
	ЕстьДанныеДляОбработки = Истина;
	
	Пока ЕстьДанныеДляОбработки Цикл
		
		МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		
		Если ЗначениеЗаполнено(МассивСсылок) Тогда
			
			ОбновлениеИнформационнойБазы.ОтметитьКОбработке(ПараметрыОбновления, МассивСсылок);
			
			Запрос.УстановитьПараметр("Граница", МассивСсылок[МассивСсылок.ВГраница()]);
			
		КонецЕсли;
		
		ЕстьДанныеДляОбработки = Не (МассивСсылок.Количество() < РазмерПорции);
		
	КонецЦикла; 
	
КонецПроцедуры

// УрянскийД 2020-06-22
Процедура ОбновлениеСостоянийВзаимодействияПоЗадачамОперативное() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	узЗадачи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|
	|УПОРЯДОЧИТЬ ПО
	|	узЗадачи.ДатаСоздания УБЫВ";
	
	Результат = Запрос.Выполнить();
	МассивСсылок = Результат.Выгрузить().ВыгрузитьКолонку(0);
	
	НачатьТранзакцию();
		
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.узСостояниеВзаимодействийПоЗадачам");
		ЭлементБлокировки.ИсточникДанных = Результат;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Задача", "Ссылка");
		Блокировка.Заблокировать();
		
		РегистрыСведений.узСостояниеВзаимодействийПоЗадачам.ОтразитьСостояниеЗадачи(МассивСсылок, Ложь); 
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru = 'Процедуре %ИмяПроцедуры% не удалось обработать задачи по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяПроцедуры%", "узОбновлениеИнформационнойБазы.ОбновлениеСостоянийВзаимодействияПоЗадачамОперативное");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ТекстСообщения;
		
	КонецПопытки;
	
КонецПроцедуры

// УрянскийД 2020-06-22
Процедура ОбновлениеСостоянийВзаимодействияПоЗадачамВФоне(ПараметрыОбновления) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.узЗадачи";
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	ОбработкаЗавершена = Истина;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.МаксимумВыборки = 1000;
	
	ВыборкаЗадач = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(ПараметрыОбновления.Очередь, 
																			ПолноеИмяОбъекта, 
																			ДополнительныеПараметры);
																			
	МассивСсылок = Новый Массив;
	
	НачатьТранзакцию();
	
	Попытка
		
		Пока ВыборкаЗадач.Следующий() Цикл
			МассивСсылок.Добавить(ВыборкаЗадач.Ссылка);
		КонецЦикла; 
		
		РегистрыСведений.узСостояниеВзаимодействийПоЗадачам.ОтразитьСостояниеЗадачи(
			МассивСсылок, 
			Ложь, 
			ПараметрыОбновления.Очередь); 
			
		ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(МассивСсылок);
		
		ОбъектовОбработано = ОбъектовОбработано + МассивСсылок.Количество();		
		
		ЗафиксироватьТранзакцию();		
			
	Исключение
		
		ОтменитьТранзакцию();
		
		ПроблемныхОбъектов = ПроблемныхОбъектов + МассивСсылок.Количество();
		
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
		
		ТекстСообщения = НСтр("ru = 'Не удалось обработать %ИмяОбъекта% по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", ПолноеИмяОбъекта);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%",    ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			МетаданныеОбъекта,
			,
			ТекстСообщения);
		
	КонецПопытки;
		
	
	Если Не ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(ПараметрыОбновления.Очередь, ПолноеИмяОбъекта) Тогда
		ОбработкаЗавершена = Ложь;
	КонецЕсли; 		
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре %1 не удалось обработать задачи (пропущены): %2'"),
			"узОбновлениеИнформационнойБазы.ОбновлениеСостоянийВзаимодействияПоЗадачамВФоне", 
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедура %1 обработала очередную порцию задач: %2'"),
			"узОбновлениеИнформационнойБазы.ОбновлениеСостоянийВзаимодействияПоЗадачамВФоне", 
			ОбъектовОбработано);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,
			, ,
			ТекстСообщения);
	КонецЕсли;
	
	ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

// УрянскийД 2020-06-22
Процедура ЗарегистрироватьДанныеКОбновлениюВзаимодействийПоЗадачам(ПараметрыОбновления) Экспорт
	
	РазмерПорции = 1000;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задачи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.узЗадачи КАК Задачи
	|ГДЕ
	|	Задачи.Ссылка > &Граница
	|
	|УПОРЯДОЧИТЬ ПО
	|	Задачи.Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ " + Формат(РазмерПорции, "ЧН=; ЧГ="));
	Запрос.УстановитьПараметр("Граница", Справочники.узЗадачи.ПустаяСсылка());
	
	ЕстьДанныеДляОбработки = Истина;
	
	Пока ЕстьДанныеДляОбработки Цикл
		
		МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		
		Если ЗначениеЗаполнено(МассивСсылок) Тогда
			
			ОбновлениеИнформационнойБазы.ОтметитьКОбработке(ПараметрыОбновления, МассивСсылок);
			
			Запрос.УстановитьПараметр("Граница", МассивСсылок[МассивСсылок.ВГраница()]);
			
		КонецЕсли;
		
		ЕстьДанныеДляОбработки = Не (МассивСсылок.Количество() < РазмерПорции);
		
	КонецЦикла;
	
КонецПроцедуры

// #242 Пиганов Г.В. 2020-08-02
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииЗаказчиков() Экспорт
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "узEmailКонтрагенты";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 1;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "узТелефонКонтрагенты";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

