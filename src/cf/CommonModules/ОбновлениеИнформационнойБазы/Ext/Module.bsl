////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обновление версии ИБ".
// Серверные процедуры и функции обновления информационной базы
// при смене версии конфигурации.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для использования в обработчиках обновления.
//

// Записывает изменения в переданном объекте.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Данные                            - Произвольный - объект, набор записей или менеджер константы, который
//                                                      необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, 
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Данные.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);
	
	Если РегистрироватьНаУзлахПлановОбмена = Неопределено
		Или Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Данные.Записать();
	
	ОтметитьВыполнениеОбработки(Данные);
	
КонецПроцедуры

// Записывает изменения в переданном объекте ссылочного типа.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Объект                            - Произвольный - записываемый объект ссылочного типа. Например, СправочникОбъект.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//   ДокументРежимЗаписи              - ДокументРежимЗаписи - имеет смысл только для данных типа ДокументОбъект - режим записи документа.
//											Если параметр не передан, то документ записывается в режиме "Запись".
//
Процедура ЗаписатьОбъект(Знач Объект, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, 
	Знач ВключитьБизнесЛогику = Ложь, ДокументРежимЗаписи = Неопределено) Экспорт
	
	Объект.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);
	Объект.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	
	Если РегистрироватьНаУзлахПлановОбмена = Неопределено
		Или Не РегистрироватьНаУзлахПлановОбмена
		И Не Объект.ЭтоНовый() Тогда
		Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Если ДокументРежимЗаписи <> Неопределено Тогда
		Если ТипЗнч(ДокументРежимЗаписи) <> Тип("РежимЗаписиДокумента") Тогда
			ТекстИсключения = НСтр("ru = 'Неправильный тип параметра ДокументРежимЗаписи'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		Объект.ОбменДанными.Загрузка = Объект.ОбменДанными.Загрузка
			И Не ДокументРежимЗаписи = РежимЗаписиДокумента.Проведение
			И Не ДокументРежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		Объект.Записать(ДокументРежимЗаписи);
	Иначе
		Объект.Записать();
	КонецЕсли;
	
	ОтметитьВыполнениеОбработки(Объект);
	
КонецПроцедуры

// Записывает изменения в переданном наборе записей.
// Для использования в обработчиках обновления.
//
// Параметры:
//   НаборЗаписей                      - РегистрСведенийНаборЗаписей,
//                                       РегистрНакопленияНаборЗаписей,
//                                       РегистрБухгалтерииНаборЗаписей,
//                                       РегистрРасчетаНаборЗаписей - набор записей, который необходимо записать.
//   Замещать                          - Булево       - Определяет режим замещения существующей записи в соответствии с текущими установками отбора. Истина - перед записью существующие записи будут удалены. Ложь - записи будут дописаны к уже существующим в информационной базе записям.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьНаборЗаписей(Знач НаборЗаписей, Замещать = Истина, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено,
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);
	НаборЗаписей.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	
	Если РегистрироватьНаУзлахПлановОбмена = Неопределено 
		Или Не РегистрироватьНаУзлахПлановОбмена Тогда
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	НаборЗаписей.Записать(Замещать);
	
	ОтметитьВыполнениеОбработки(НаборЗаписей);
	
КонецПроцедуры

// Удаляет переданный объект.
// Для использования в обработчиках обновления.
//
// Параметры:
//  Данные                            - Произвольный - объект, который необходимо удалить.
//  РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//  ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура УдалитьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, 
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Данные.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);
	
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если РегистрироватьНаУзлахПлановОбмена = Неопределено 
		Или Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Данные.Удалить();
	
КонецПроцедуры

// Возвращает строковую константу для формирования сообщений журнала регистрации.
//
// Возвращаемое значение:
//   Строка
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат ОбновлениеИнформационнойБазыСлужебный.СобытиеЖурналаРегистрации();
	
КонецФункции

// Получает версию конфигурации или родительской конфигурации (библиотеки),
// которая хранится в информационной базе.
//
// Параметры:
//  ИдентификаторБиблиотеки   - Строка - имя конфигурации или идентификатор библиотеки.
//
// Возвращаемое значение:
//   Строка   - версия.
//
// Пример использования:
//   ВерсияКонфигурацииИБ = ВерсияИБ(Метаданные.Имя);
//
Функция ВерсияИБ(Знач ИдентификаторБиблиотеки) Экспорт
	
	Возврат ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(ИдентификаторБиблиотеки);
	
КонецФункции

// Записывает в информационную базу версию конфигурации или родительской конфигурации (библиотеки).
//
// Параметры:
//  ИдентификаторБиблиотеки - Строка - имя конфигурации или родительской конфигурации (библиотеки),
//  НомерВерсии             - Строка - номер версии.
//  ЭтоОсновнаяКонфигурация - Булево - признак, что ИдентификаторБиблиотеки соответствует имени конфигурации.
//
Процедура УстановитьВерсиюИБ(Знач ИдентификаторБиблиотеки, Знач НомерВерсии, Знач ЭтоОсновнаяКонфигурация) Экспорт
	
	ОбновлениеИнформационнойБазыСлужебный.УстановитьВерсиюИБ(ИдентификаторБиблиотеки, НомерВерсии, ЭтоОсновнаяКонфигурация);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для проверки доступности объекта для изменения при выполнении отложенного обновления.
//

// Вызывает исключение или блокирует форму Форма от редактирования, если 
// имеются незавершенные отложенные обработчики обновления,
// которые в данный момент обрабатывают переданный объект Данные.
// 
// Параметры:
//  Данные - ЛюбаяСсылка, НаборЗаписей, Объект, ДанныеФормыСтруктура - ссылка на объект, сам объект
//           или набор записей, который необходимо проверить.
//  Форма  - УправляемаяФорма - если объект не обработан, то у переданной формы
//           будет установлено свойство ТолькоПросмотр. Если форма не была
//           передана, то будет вызвано исключение.
//
Процедура ПроверитьОбъектОбработан(Данные, Форма = Неопределено) Экспорт
	
	Результат = ОбъектОбработан(Данные);
	Если Результат.Обработан Тогда
		Возврат;
	КонецЕсли;
		
	Если Форма = Неопределено Тогда
		ВызватьИсключение Результат.ТекстИсключения;
	КонецЕсли;
	
	Форма.ТолькоПросмотр = Истина;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстИсключения);
	
КонецПроцедуры

// Проверяет, имеются ли отложенные обработчики обновления,
// которые в данный момент обрабатывают переданный объект Данные.
//
// Параметры:
//  Данные - ЛюбаяСсылка, НаборЗаписей, Объект, ДанныеФормыСтруктура, Строка - ссылка на объект, сам объект, 
//           набор записей или полное имя объекта метаданных (для отчетов и обработок), 
//           блокировку которого необходимо проверить.
//
// Возвращаемое значение:
//   Структура - с полями:
//     * Обработан       - Булево - признак того, что переданный объект обработан.
//     * ТекстИсключения - Строка - текст исключения, если объект еще не обработан,
//                         содержит список незавершенных обработчиков.
//
Функция ОбъектОбработан(Данные) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Обработан", Истина);
	Результат.Вставить("ТекстИсключения", "");
	Результат.Вставить("НевыполненныеОбработчикиСтрокой", "");
	
	Если Данные = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		
		ЭтоПодчиненныйУзелРИБ = ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ();
		Если Не ЭтоПодчиненныйУзелРИБ Тогда
			Возврат Результат;
		ИначеЕсли ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно") Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	СведенияОБлокируемыхОбъектах = ОбновлениеИнформационнойБазыСлужебный.СведенияОБлокируемыхОбъектах();
	
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		ПолноеИмя = Данные;
	Иначе
		МетаданныеИОтбор = МетаданныеИОтборПоДанным(Данные);
		ПолноеИмя = МетаданныеИОтбор.Метаданные.ПолноеИмя();
	КонецЕсли;
	
	ПроверяемыйОбъект = СтрЗаменить(ПолноеИмя, ".", "");
	
	ОбработчикиОбъекта = СведенияОБлокируемыхОбъектах.БлокируемыеОбъекты[ПроверяемыйОбъект];
	Если ОбработчикиОбъекта = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Обработан = Истина;
	НезавершенныеОбработчики = Новый Массив;
	Для Каждого Обработчик Из ОбработчикиОбъекта Цикл
		СвойстваОбработчика = СведенияОБлокируемыхОбъектах.Обработчики[Обработчик];
		Если СвойстваОбработчика.Выполнен Тогда
			Обработан = Истина;
		ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
			Обработан = Ложь;
		Иначе
			Обработан = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме(
				СвойстваОбработчика.ПроцедураПроверки + "(Параметры)", МетаданныеИОтбор);
		КонецЕсли;
		
		Результат.Обработан = Обработан И Результат.Обработан;
		
		Если Не Обработан Тогда
			НезавершенныеОбработчики.Добавить(Обработчик);
		КонецЕсли;
	КонецЦикла;
	
	Если НезавершенныеОбработчики.Количество() > 0 Тогда
		ТекстИсключения = НСтр("ru = 'Действия с объектом временно запрещены, так как не завершен переход на новую версию программы.
			|Не завершены следующие процедуры обработки данных:'");
		
		НевыполненныеОбработчикиСтрокой = "";
		Для Каждого НезавершенныйОбработчик Из НезавершенныеОбработчики Цикл
			НевыполненныеОбработчикиСтрокой = НевыполненныеОбработчикиСтрокой + Символы.ПС + НезавершенныйОбработчик;
		КонецЦикла;
		Результат.ТекстИсключения = ТекстИсключения + НевыполненныеОбработчикиСтрокой;
		Результат.НевыполненныеОбработчикиСтрокой = НевыполненныеОбработчикиСтрокой;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для использования в отложенных обработчиках обновления
// с режимом выполнения "Параллельно".
//

// Отмечает, что переданные данные обновлены
//
// Параметры:
//  Данные					 - Ссылка, Массив, НаборДанных - данные, по которым нужно зарегистрировать изменения
//							 - ТаблицаЗначений - значения измерений независимого регистра сведений. Требования:
//													- все измерения регистра должны входить в основной отбор
//													- в таблице должны быть только колонки, соответствующие по именам измерениям регистра,
//														по которым ранее регистрировалась необходимость обработки
//													- запись наборов в процессе обновления должна проходить с тем же отбором,
//														что и регистрация необходимости обработки
//													- в ДополнительныеПараметры нужно передать соответствующий признак и полное имя регистра
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки
//  Очередь					 - Число, Неопределено - очередь обработки, в которой выполняется текущий обработчик. По умолчанию очередь передавать
//													не нужно, т.к. она будет взята из параметров сеанса, в котором запущен обработчик обновления.
//
Процедура ОтметитьВыполнениеОбработки(Данные, ДополнительныеПараметры = Неопределено, Очередь = Неопределено) Экспорт
	Если Очередь = Неопределено Тогда
		Если ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения <> "Отложенно"
			Или ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполненияОтложенныхОбработчиков <> "Параллельно" Тогда
			Возврат;
		КонецЕсли;
		
		Очередь = ПараметрыСеанса.ПараметрыОбработчикаОбновления.ОчередьОтложеннойОбработки;
		
		Если Не ПараметрыСеанса.ПараметрыОбработчикаОбновления.ЕстьОбработанныеОбъекты Тогда
			
			НовыеПараметрыСеанса = ОбновлениеИнформационнойБазыСлужебный.НовыеПараметрыОбработчикаОбновления();
			ЗаполнитьЗначенияСвойств(НовыеПараметрыСеанса, ПараметрыСеанса.ПараметрыОбработчикаОбновления);
			НовыеПараметрыСеанса.ЕстьОбработанныеОбъекты = Истина;
			
			ПараметрыСеанса.ПараметрыОбработчикаОбновления = Новый ФиксированнаяСтруктура(НовыеПараметрыСеанса);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыОтметкиОбработки();
	КонецЕсли;
	
	Если (ТипЗнч(Данные) = Тип("Массив")
		Или ТипЗнч(Данные) = Тип("ТаблицаЗначений"))
		И Данные.Количество() = 0 Тогда
		
		ТекстИсключения = НСтр("ru = 'В процедуру ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки передан пустой массив. Не возможно отметить выполнение обработки.'");
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Узел = ОчередьСсылкой(Очередь);
	
	Если ДополнительныеПараметры.ЭтоДвижения Тогда
		
		Набор = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();
		
		Если ТипЗнч(Данные) = Тип("Массив") Тогда
			Для Каждого СтрокаМассива Из Данные Цикл
				Набор.Отбор.Регистратор.Установить(СтрокаМассива);
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Набор);
			КонецЦикла;
		Иначе
			Набор.Отбор.Регистратор.Установить(Данные);
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Набор);
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений Тогда
		
		Набор = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра);
		
		УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеОбъекта, Данные);	
		
		Для каждого СтрокаТаблицы Из Данные Цикл
			Для Каждого Колонка Из Данные.Колонки Цикл
				Набор.Отбор[Колонка.Имя].Установить(СтрокаТаблицы[Колонка.Имя]);
			КонецЦикла;
			
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Набор);
		КонецЦикла;
		
	Иначе
		Если ТипЗнч(Данные) = Тип("ОбъектМетаданных") Тогда
			ТекстИсключения = НСтр("ru = 'Не поддерживается отметка выполнения обработки обновления целиком объекта метаданных. Нужно отмечать обработку конкретных данных.'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		Если ТипЗнч(Данные) <> Тип("Массив") Тогда
			
			ТипЗначенияОбъекта = ТипЗнч(Данные);
			МетаданныеОбъекта  = Метаданные.НайтиПоТипу(ТипЗначенияОбъекта);
			
			Если ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеОбъекта)
				И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
				
				УстановитьНедостающиеОтборыВНаборе(Данные, МетаданныеОбъекта, Данные.Отбор);
			ИначеЕсли ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта)
				И Не ОбщегоНазначения.ЭтоСсылка(ТипЗначенияОбъекта)
				И Данные.ЭтоНовый() Тогда
				
				Возврат;
				
			КонецЕсли;
			
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Данные);
			
		Иначе
			
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Данные);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		РегистрыСведений.ДанныеОбработанныеВЦентральномУзлеРИБ.ОтметитьВыполнениеОбработки(Очередь, Данные, ДополнительныеПараметры); 
	КонецЕсли;
	
КонецПроцедуры

// Дополнительные параметры функций ОтметитьКОбработке и ОтметитьВыполнениеОбработки.
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//     * ЭтоДвижения - Булево - в параметре Данные функции переданы ссылки на регистраторы, по которым нужно обновить движения,
//                              Значение по умолчанию - ЛОЖЬ
//      * ПолноеИмяРегистра - Строка - полное имя регистра, по которому нужно обновить данные. Например, РегистрНакопления.ТоварыНаСкладах 
//      * ОтметитьВсеРегистраторы - Булево - необходимо отметить к обработке все проведенные документы переданного во втором параметре типа
//                                           В этом случае в параметре Данные процедуры можно передавать ОбъектМетаданных:Документ или ДокументСсылка
//      * ЭтоНезависимыйРегистрСведений - Булево - в параметре Данные функции передана таблица со значениями измерений, по которым нужно обновлять данные,
//                                                 Значение по умолчанию - ЛОЖЬ.
//
Функция ДополнительныеПараметрыОтметкиОбработки() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭтоДвижения", Ложь);
	ДополнительныеПараметры.Вставить("ОтметитьВсеРегистраторы", Ложь);
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Ложь);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Основные параметры процедуры ОбновлениеИнформационнойБазы.ОтметитьКОбработке, которые инициализируются механизмом регистрации изменений
// и не должны переопределяться в коде процедур отметки к обработке обработчиков обновления.
//
//  ВозвращаемоеЗначение - Структура:
//     *Очередь - Число - очередь обработки, в которой выполняется текущий обработчик
//     *ЗаписьИзмененийДляПодчиненногоУзлаРИБСФильтрами - ЗаписьFastInfoset - параметр существует, только если внедрена подсистема ОбменДанными.
//
Функция ОсновныеПараметрыОтметкиКОбработке() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Очередь", 0);
	Параметры.Вставить("ПовторнаяРегистрация", Ложь);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		
		Параметры.Вставить("ЗаписьИзмененийДляПодчиненногоУзлаРИБСФильтрами", Неопределено);
		
	КонецЕсли;
	
	Возврат Параметры; 
	
КонецФункции

// Возвращает информацию о переданных данных в нормализованном виде. 
// Для использования в процедурах проверки блокировки данных отложенных обработчиков обновления.
//
// Параметры:
//  Данные				     - ЛюбаяСсылка, НаборЗаписей, Объект, ДанныеФормыСтруктура - данные, которые нужно проанализировать.
//  ДополнительныеПараметры	 - Структура, Неопределено - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки.
// 
// Возвращаемое значение:
//  Структура - со свойствами:
//      * Данные			  - ЛюбаяСсылка, НаборЗаписей, Объект, ДанныеФормыСтруктура - значение входящего параметра Данные.
//  	* МетаданныеОбъекта   - ОбъектМетаданных - объект метаданных, соответствующий параметру Данные.
//  	* ПолноеИмя           - Строка      - полное имя объекта метаданных (см. метод ОбъектМетаданных.ПолноеИмя).
//		* Отбор               - ЛюбаяСсылка - если Данные - это ссылочный объект, то значение ссылки, 
//                                            если регистр подчиненный регистратору - значение отбора по регистратору.
//			   	              - Структура   - если Данные - это независимый регистр сведений, то структура, соответствующая 
//                                            установленным отборам по измерениям.
//		* ЭтоНовый            - Булево      - если Данные - это ссылочный объект, то признак нового объекта. 
//                                            Для других типов - всегда Ложь.
//	
Функция МетаданныеИОтборПоДанным(Данные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыОтметкиОбработки();
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЭтоДвижения Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра);		
	Иначе
		МетаданныеОбъекта = Неопределено;
	КонецЕсли;
	
	Отбор = Неопределено;
	ТипДанных = ТипЗнч(Данные);
	ЭтоНовый = Ложь;
	
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Данные);
	ИначеЕсли ТипДанных = Тип("ДанныеФормыСтруктура") Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Данные, "Ссылка") Тогда
			
			Если МетаданныеОбъекта = Неопределено Тогда
				МетаданныеОбъекта = Данные.Ссылка.Метаданные();
			КонецЕсли;
			
			Отбор = Данные.Ссылка;
			
			Если Не ЗначениеЗаполнено(Отбор) Тогда
				ЭтоНовый = Истина;
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Данные, "ИсходныйКлючЗаписи") Тогда	

			Если МетаданныеОбъекта = Неопределено Тогда
				МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Данные.ИсходныйКлючЗаписи));	
			КонецЕсли;
			Отбор = Новый Структура;
			Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
				Отбор.Вставить(Измерение.Имя, Данные[Измерение.Имя]);
			КонецЦикла;
			
		Иначе
			ТекстИсключения = НСтр("ru = 'Процедура ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным не может быть использована для этой формы.'");
		КонецЕсли;
		
	Иначе
		
		Если МетаданныеОбъекта = Неопределено Тогда
			МетаданныеОбъекта = Данные.Метаданные();
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта) Тогда
			
			Если ОбщегоНазначения.ЭтоСсылка(ТипДанных) Тогда
				Отбор = Данные;
			Иначе
				Отбор = Данные.Ссылка;
				
				Если Данные.ЭтоНовый() Тогда
					ЭтоНовый = Истина;
				КонецЕсли;
			
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеОбъекта)
			И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
			
			Отбор = Новый Структура;
			Для Каждого ЭлементОтбора Из Данные.Отбор Цикл
				Если ЭлементОтбора.Использование Тогда 
					Отбор.Вставить(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистр(МетаданныеОбъекта) Тогда
			Если ДополнительныеПараметры.ЭтоДвижения Тогда
				Отбор = Данные;
			Иначе
				Отбор = Данные.Отбор.Регистратор.Значение;
			КонецЕсли;
		Иначе
			ТекстИсключения = НСтр("ru = 'Для этого типа метаданных не поддерживается анализ в функции ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным.'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Данные", Данные);
	Результат.Вставить("Метаданные", МетаданныеОбъекта);
	Результат.Вставить("ПолноеИмя", МетаданныеОбъекта.ПолноеИмя());
	Результат.Вставить("Отбор", Отбор);
	Результат.Вставить("ЭтоНовый", ЭтоНовый);
	
	Возврат Результат;
КонецФункции

// Отмечает, что переданные данные необходимо обновить
//
// Параметры:
//  Параметры - Структура - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке 
//  Данные    - Ссылка, Массив, НаборЗаписей - данные, по которым нужно зарегистрировать изменения
//            - ТаблицаЗначений - значения измерений независимого регистра сведений. Требования:
//                 - все измерения регистра должны входить в основной отбор
//                 - в таблице должны быть только колонки, соответствующие по именам измерениям регистра,
//                   по которым нужно регистрировать необходимость обработки
//                 - запись наборов в процессе обновления должна проходить с тем же отбором,
//                   что и регистрация необходимости обработки
//                 - в ДополнительныеПараметры нужно передать соответствующий признак и полное имя регистра
//  ДополнительныеПараметры - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки.
// 
Процедура ОтметитьКОбработке(ОсновныеПараметры, Данные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыОтметкиОбработки();
	КонецЕсли;
	
	Если (ТипЗнч(Данные) = Тип("Массив")
		Или ТипЗнч(Данные) = Тип("ТаблицаЗначений"))
		И Данные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Узел = ОчередьСсылкой(ОсновныеПараметры.Очередь);
	
	Если ДополнительныеПараметры.ЭтоДвижения Тогда
		
		Набор = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();
		
		Если ДополнительныеПараметры.ОтметитьВсеРегистраторы Тогда
			
			Если ТипЗнч(Данные) = Тип("ОбъектМетаданных") Тогда
				МетаданныеДокумента = Данные;
			ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Данные)) Тогда
				МетаданныеДокумента = Данные.Метаданные();
			Иначе
				ТекстИсключения = НСтр("ru = 'Для регистрации всех регистраторов регистра необходимо в параметре ""Данные"" передать ОбъектМетаданных:Документ или ДокументСсылка.'");
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			ПолноеИмяДокумента = МетаданныеДокумента.ПолноеИмя();
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаДокумента.Ссылка КАК Ссылка
			|ИЗ
			|	#ТаблицаДокумента КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.Проведен";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаДокумента", ПолноеИмяДокумента);
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			
			МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
			Для Каждого ЭлементМассива Из МассивСсылок Цикл
				Набор.Отбор.Регистратор.Установить(ЭлементМассива);
				ЗарегистрироватьИзменения(ОсновныеПараметры, Узел, Набор, "ПодчиненныйРегистр", ДополнительныеПараметры.ПолноеИмяРегистра);
			КонецЦикла;
			
		Иначе
			
			Если ТипЗнч(Данные) = Тип("Массив") Тогда
				
				Для Каждого ЭлементМассива Из Данные Цикл
					Набор.Отбор.Регистратор.Установить(ЭлементМассива);
					ЗарегистрироватьИзменения(ОсновныеПараметры, Узел, Набор, "ПодчиненныйРегистр", ДополнительныеПараметры.ПолноеИмяРегистра);
				КонецЦикла;
				
			Иначе
				
				Набор.Отбор.Регистратор.Установить(Данные);
				ЗарегистрироватьИзменения(ОсновныеПараметры, Узел, Набор, "ПодчиненныйРегистр", ДополнительныеПараметры.ПолноеИмяРегистра);
				
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений Тогда
		
		Набор = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра);
		УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеОбъекта, Данные);
		
		Для Каждого СтрокаТаблицы Из Данные Цикл
			
			Для Каждого Колонка Из Данные.Колонки Цикл
				Набор.Отбор[Колонка.Имя].Установить(СтрокаТаблицы[Колонка.Имя]);
			КонецЦикла;
			
			ЗарегистрироватьИзменения(ОсновныеПараметры, Узел, Набор, "НезависимыйРегистр", ДополнительныеПараметры.ПолноеИмяРегистра);
			
		КонецЦикла;
	Иначе
		Если ТипЗнч(Данные) = Тип("Массив") Тогда
			Для Каждого ЭлементМассива Из Данные Цикл
				ЗарегистрироватьИзменения(ОсновныеПараметры, Узел, ЭлементМассива, "Ссылка");
			КонецЦикла;
		ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Данные)) Тогда
			ЗарегистрироватьИзменения(ОсновныеПараметры, Узел, Данные, "Ссылка");
		Иначе
			Если ТипЗнч(Данные) = Тип("ОбъектМетаданных") Тогда
				ТекстИсключения = НСтр("ru = 'Не поддерживается регистрация к обновлению целиком объекта метаданных. Нужно обновлять конкретные данные.'");
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
			МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Данные));
			
			Если ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеОбъекта)
				И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
				
				УстановитьНедостающиеОтборыВНаборе(Данные, МетаданныеОбъекта, Данные.Отбор);
				
			КонецЕсли;
			ЗарегистрироватьИзменения(ОсновныеПараметры, Узел, Данные, "НезависимыйРегистр", МетаданныеОбъекта.ПолноеИмя());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Отмечает, что по переданным регистраторам нужно переформировать движения
// 
// Параметры:
//  Очередь           - Число - очередь обработки, в которой выполняется текущий обработчик
//  Регистраторы      -  Массив - массив ссылок регистраторов
//  ПолноеИмяРегистра - Строка - полное имя регистра, для которого необходимо обновить движения.
//
Процедура ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра) Экспорт
	
	ДополнительныеПараметры = ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

// Дополнительные параметры выборки данных для обработки
// 
// Возвращаемое значение:
//  Структура - поля структуры:
//		*ВыбиратьПорциями - Булево - выбирать данные для обработки порциями.
//								Если выбираются документы, то в порция определяется с учетом упорядочивания по убыванию по дате документа.
//								Если выбираются регистраторы регистра, то в порция определяется с учетом упорядочивания по убыванию
// 								по дате регистратора , если передано полное имя документа. Если полное имя документа не передано
//									- упорядочивание происходит по периоду регистра:
//										- берется максимальная дата по каждому регистратору
//										- если по регистратору нет записей - он в топе
//		*ИмяВременнойТаблицы - Строка - параметр актуален для методов, создающих временные таблицы. Если имя не задано (поведение по умолчанию),
//										то временная таблица будет создана с именем, указанным в описании каждого метода
//		*ДополнительныеИсточникиДанных - Соответствие - параметр актуален для методов, выбирающих регистраторы и ссылки для обработки.
//                                                      В ключах соответствия лежат пути к реквизитам шапки документа или реквизитам табличных частей,
//														которые участвуют в соединениях с другими таблицами (в т.ч. неявных соединениях при обращении
//														"через точку"). Процедуры проверяют блокировку данных этих таблиц обработчиками меньших очередей.
//														Формат имен <ИмяРеквизита> или <ИмяТабличной>.<ИмяРеквизитаТабличнойЧасти>.
//
Функция ДополнительныеПараметрыВыборкиДанныхДляОбработки() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбиратьПорциями", Истина);
	ДополнительныеПараметры.Вставить("ИмяВременнойТаблицы", "");
	ДополнительныеПараметры.Вставить("ДополнительныеИсточникиДанных", Новый Соответствие);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Создает временную таблицу ссылок, которые не обработаны в текущей очереди
//  и не заблокированы меньшими очередями.
//  Имя таблицы: ВТДляОбработки<ИмяРегистра>, например ВТДляОбработкиТоварыНаСкладах
//  Колонки таблицы
//  * Регистратор - ДокументСсылка.
//
// Параметры:
//  Очередь					 - Число					 - очередь обработки, в которой выполняется текущий обработчик
//  ПолноеИмяДокумента		 - Строка - имя документа, движения по которому нужно переформировать. Если движения формируются не по данным
//									документа, то нужно передать Неопределено - тогда не будет проверяться блокировка таблицы документа
//									Например, Документ.ПриходныйОрдерНаТовары
//  ПолноеИмяРегистра	 - Строка	 - имя регистра, движения по которому нужно переформировать.
//  	Например, РегистрНакопления.ТоварыНаСкладах
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер, в котором будет создана временная таблица
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки.
// 
// Возвращаемое значение:
//  Структура - результат формирования временной таблицы:
//  * ЕстьЗаписиВоВременнойТаблице - Булево - в создаваемой таблице есть хотя бы одна запись. Записей может не быть по двум причинам
//												- все обработано или все, что нужно обработать, еще заблокировано обработчиками с меньшей очередью
//  * ЕстьДанныеДляОбработки - Булево - в очереди есть ссылки для обработки, т.е. еще не все обработано
//  * ИмяВременнойТаблицы - Строка - имя созданной временной таблицы.
//
Функция СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(Очередь, ПолноеИмяДокумента, ПолноеИмяРегистра, МенеджерВременныхТаблиц, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	КонецЕсли;
	
	ИмяРегистра = СтрРазделить(ПолноеИмяРегистра,".",Ложь)[1];
	
	ТекущаяОчередь = ОчередьСсылкой(Очередь);
	
	Если ПолноеИмяДокумента = Неопределено Тогда 
		Если ДополнительныеПараметры.ВыбиратьПорциями Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаРегистраИзменения.Регистратор КАК Регистратор,
			|	МАКСИМУМ(ЕСТЬNULL(ТаблицаРегистра.Период, ДАТАВРЕМЯ(3000, 1, 1))) КАК Период
			|ПОМЕСТИТЬ ВТДляОбработкиРегистраторПолная
			|ИЗ
			|	#ТаблицаРегистраИзменения КАК ТаблицаРегистраИзменения
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоРегистратор КАК ВТЗаблокированоРегистратор
			|		ПО ТаблицаРегистраИзменения.Регистратор = ВТЗаблокированоРегистратор.Регистратор
			|		ЛЕВОЕ СОЕДИНЕНИЕ #ТаблицаДвиженийРегистра КАК ТаблицаРегистра
			|		ПО ТаблицаРегистраИзменения.Регистратор = ТаблицаРегистра.Регистратор
			|ГДЕ
			|	ТаблицаРегистраИзменения.Узел = &ТекущаяОчередь
			|	И ВТЗаблокированоРегистратор.Регистратор ЕСТЬ NULL 
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаРегистраИзменения.Регистратор
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Регистратор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТДляОбработкиРегистраторПолная.Регистратор КАК Регистратор
			|ПОМЕСТИТЬ #ВТДляОбработкиРегистратор
			|ИЗ
			|	ВТДляОбработкиРегистраторПолная КАК ВТДляОбработкиРегистраторПолная
			|ГДЕ
			|	ВТДляОбработкиРегистраторПолная.Регистратор В
			|			(ВЫБРАТЬ ПЕРВЫЕ 500
			|				ВТДляОбработкиРегистраторПолная.Регистратор КАК Регистратор
			|			ИЗ
			|				ВТДляОбработкиРегистраторПолная КАК ВТДляОбработкиРегистраторПолная
			|			УПОРЯДОЧИТЬ ПО
			|				ВТДляОбработкиРегистраторПолная.Период УБЫВ)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТЗаблокированоРегистратор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТДляОбработкиРегистраторПолная";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#ТаблицаДвиженийРегистра", ПолноеИмяРегистра);	
		Иначе
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаРегистраИзменения.Регистратор КАК Регистратор
			|ПОМЕСТИТЬ #ВТДляОбработкиРегистратор
			|ИЗ
			|	#ТаблицаРегистраИзменения КАК ТаблицаРегистраИзменения
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоРегистратор КАК ВТЗаблокированоРегистратор
			|		ПО ТаблицаРегистраИзменения.Регистратор = ВТЗаблокированоРегистратор.Регистратор
			|ГДЕ
			|	ТаблицаРегистраИзменения.Узел = &ТекущаяОчередь
			|	И ВТЗаблокированоРегистратор.Регистратор ЕСТЬ NULL 
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Регистратор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТЗаблокированоРегистратор";
		КонецЕсли;
	Иначе
		ИмяДокумента = СтрРазделить(ПолноеИмяДокумента,".",Ложь)[1];
		Если ДополнительныеПараметры.ВыбиратьПорциями Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаРегистраИзменения.Регистратор КАК Регистратор
			|ПОМЕСТИТЬ ВТДляОбработкиРегистраторПолная
			|ИЗ
			|	#ТаблицаРегистраИзменения КАК ТаблицаРегистраИзменения
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоРегистратор КАК ВТЗаблокированоРегистратор
			|		ПО ТаблицаРегистраИзменения.Регистратор = ВТЗаблокированоРегистратор.Регистратор
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоСсылка КАК ВТЗаблокированоСсылка
			|		ПО ТаблицаРегистраИзменения.Регистратор = ВТЗаблокированоСсылка.Ссылка
			|      	#ТекстЗапросаСоединениеСДопИсточникамиПоШапке
			|       #ТекстЗапросаСоединениеСДопИсточникамиПоТЧ
			|ГДЕ
			|	ТаблицаРегистраИзменения.Узел = &ТекущаяОчередь
			|	И ТаблицаРегистраИзменения.Регистратор ССЫЛКА #ПолноеИмяДокумента 
			|	И ВТЗаблокированоРегистратор.Регистратор ЕСТЬ NULL 
			|	И ВТЗаблокированоСсылка.Ссылка ЕСТЬ NULL 
			|	И &УсловиеПоДопИсточникам
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Регистратор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТДляОбработкиРегистраторПолная.Регистратор КАК Регистратор
			|ПОМЕСТИТЬ #ВТДляОбработкиРегистратор
			|ИЗ
			|	ВТДляОбработкиРегистраторПолная КАК ВТДляОбработкиРегистраторПолная
			|ГДЕ
			|	ВТДляОбработкиРегистраторПолная.Регистратор В
			|			(ВЫБРАТЬ ПЕРВЫЕ 500
			|				ВТДляОбработкиРегистраторПолная.Регистратор КАК Регистратор
			|			ИЗ
			|				ВТДляОбработкиРегистраторПолная КАК ВТДляОбработкиРегистраторПолная
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ПолноеИмяДокумента КАК ТаблицаДокумента
			|					ПО
			|						ВТДляОбработкиРегистраторПолная.Регистратор = ТаблицаДокумента.Ссылка
			|			УПОРЯДОЧИТЬ ПО
			|				ТаблицаДокумента.Дата УБЫВ)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТЗаблокированоРегистратор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТЗаблокированоСсылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТДляОбработкиРегистраторПолная";

		Иначе	
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаРегистраИзменения.Регистратор КАК Регистратор
			|ПОМЕСТИТЬ #ВТДляОбработкиРегистратор
			|ИЗ
			|	#ТаблицаРегистраИзменения КАК ТаблицаРегистраИзменения
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоРегистратор КАК ВТЗаблокированоРегистратор
			|		ПО ТаблицаРегистраИзменения.Регистратор = ВТЗаблокированоРегистратор.Регистратор
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоСсылка КАК ВТЗаблокированоСсылка
			|		ПО ТаблицаРегистраИзменения.Регистратор = ВТЗаблокированоСсылка.Ссылка
			|      	#ТекстЗапросаСоединениеСДопИсточникамиПоШапке
			|       #ТекстЗапросаСоединениеСДопИсточникамиПоТЧ
			|ГДЕ
			|	ТаблицаРегистраИзменения.Узел = &ТекущаяОчередь
			|	И ТаблицаРегистраИзменения.Регистратор ССЫЛКА #ПолноеИмяДокумента 
			|	И ВТЗаблокированоРегистратор.Регистратор ЕСТЬ NULL 
			|	И ВТЗаблокированоСсылка.Ссылка ЕСТЬ NULL 
			|	И &УсловиеПоДопИсточникам
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Регистратор 
			|;
			|УНИЧТОЖИТЬ
			|	ВТЗаблокированоРегистратор 
			|;
			|УНИЧТОЖИТЬ
			|	ВТЗаблокированоСсылка";
		КонецЕсли;
		
		ДополнительныеПараметрыСозданияВТ = ДополнительныеПараметрыВыборкиДанныхДляОбработки();
		ДополнительныеПараметрыСозданияВТ.ИмяВременнойТаблицы = "ВТЗаблокированоСсылка";
		СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяДокумента, МенеджерВременныхТаблиц, ДополнительныеПараметрыСозданияВТ);
	КонецЕсли;
	
	Если ПустаяСтрока(ДополнительныеПараметры.ИмяВременнойТаблицы) Тогда
		ИмяВременнойТаблицы = "ВТДляОбработки" + ИмяРегистра;
	Иначе
		ИмяВременнойТаблицы = ДополнительныеПараметры.ИмяВременнойТаблицы;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаРегистраИзменения", ПолноеИмяРегистра + ".Изменения");	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТДляОбработкиРегистратор", ИмяВременнойТаблицы);
	
	ДополнительныеПараметрыСозданияВТ = ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыСозданияВТ.ИмяВременнойТаблицы = "ВТЗаблокированоРегистратор";
	СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяРегистра, МенеджерВременныхТаблиц, ДополнительныеПараметрыСозданияВТ);
	
	ДобавитьПроверкуБлокировкиДополнительныхИсточников(Очередь, ТекстЗапроса, ПолноеИмяДокумента, ПолноеИмяРегистра, МенеджерВременныхТаблиц, Истина, ДополнительныеПараметры);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПолноеИмяДокумента", ПолноеИмяДокумента);
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущаяОчередь", ТекущаяОчередь);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура("ЕстьЗаписиВоВременнойТаблице,ЕстьДанныеДляОбработки,ИмяВременнойТаблицы", Ложь, Ложь, "");
	Результат.ИмяВременнойТаблицы = ИмяВременнойТаблицы;
	Результат.ЕстьЗаписиВоВременнойТаблице = РезультатЗапроса[0].Выгрузить()[0].Количество <> 0;
	
	Если Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Результат.ЕстьДанныеДляОбработки = Истина;
	Иначе
		Результат.ЕстьДанныеДляОбработки = ЕстьДанныеДляОбработки(Очередь, ПолноеИмяРегистра);
	КонецЕсли;	
	
	Возврат Результат; 
	
КонецФункции

// Возвращает порцию регистраторов, по которым нужно переформировать движения
//  Данные берутся из зарегистрированных в очереди, учитываются заблокированные более приоритетными очередями данные.
//  Блокировка по другим очередям делается по документу и по регистру.
//  Регистраторы в выборке упорядочены по дате регистратора по убыванию, если передано полное имя документа.
//  Если полное имя документа не передано - упорядочивание происходит по периоду регистра:
//				- берется максимальная дата по каждому регистратору
//				- если по регистратору нет записей - он в топе
// Параметры:
//  Очередь					 - Число - очередь, к которой отнесен обработчик и в которой зарегистрированы данные, которые он будет обрабатывать.
//  ПолноеИмяДокумента		 - Строка - имя документа, движения по которому нужно переформировать. Если движения формируются не по данным
//									документа, то нужно передать Неопределено - тогда не будет проверяться блокировка таблицы документа
//									Например, Документ.ПриходныйОрдерНаТовары
//  ПолноеИмяРегистра		 - Строка	 - имя регистра, движения по которому нужно переформировать.
//  	Например, РегистрНакопления.ТоварыНаСкладах
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки.
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка регистраторов, которые нужно обработать, поля выборки:
//  * Регистратор - ДокументСсылка
//  * Период - Дата - дата документа, если передано полное имя документа, максимальный период по регистратору,
//						если полное имя документа не передано
//  * Проведен - Булево, Неопределено - значение реквизита Проведен документа, если передано полное имя документа,
//										Неопределено - если имя документа не передано.
//
Функция ВыбратьРегистраторыРегистраДляОбработки(Очередь, ПолноеИмяДокумента, ПолноеИмяРегистра, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	КонецЕсли;
	
	ИмяРегистра = СтрРазделить(ПолноеИмяРегистра,".",Ложь)[1];
	
	ТекущаяОчередь =  ОчередьСсылкой(Очередь);
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	Если ПолноеИмяДокумента = Неопределено Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 500
		|	ТаблицаРегистраИзменения.Регистратор КАК Регистратор
		|ИЗ
		|	#ТаблицаРегистраИзменения КАК ТаблицаРегистраИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ #ТаблицаДвиженийРегистра КАК ТаблицаРегистра
		|		ПО ТаблицаРегистраИзменения.Регистратор = ТаблицаРегистра.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоРегистратор КАК ВТЗаблокированоРегистратор
		|		ПО ТаблицаРегистраИзменения.Регистратор = ВТЗаблокированоРегистратор.Регистратор
		|ГДЕ
		|	ТаблицаРегистраИзменения.Узел = &ТекущаяОчередь
		|	И ВТЗаблокированоРегистратор.Регистратор ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаРегистраИзменения.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	МАКСИМУМ(ЕСТЬNULL(ТаблицаРегистра.Период, ДАТАВРЕМЯ(3000, 1, 1))) УБЫВ";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаДвиженийРегистра", ПолноеИмяРегистра);	
	Иначе
		ИмяДокумента = СтрРазделить(ПолноеИмяДокумента,".",Ложь)[1];
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 500
		|	ТаблицаРегистраИзменения.Регистратор КАК Регистратор
		|ИЗ
		|	#ТаблицаРегистраИзменения КАК ТаблицаРегистраИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоРегистратор КАК ВТЗаблокированоРегистратор
		|		ПО ТаблицаРегистраИзменения.Регистратор = ВТЗаблокированоРегистратор.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоСсылка КАК ВТЗаблокированоСсылка
		|		ПО ТаблицаРегистраИзменения.Регистратор = ВТЗаблокированоСсылка.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ПолноеИмяДокумента КАК ТаблицаДокумента
		|       	#ТекстЗапросаСоединениеСДопИсточникамиПоШапке
		|		ПО ТаблицаРегистраИзменения.Регистратор = ТаблицаДокумента.Ссылка
		|       #ТекстЗапросаСоединениеСДопИсточникамиПоТЧ
		|
		|ГДЕ
		|	ТаблицаРегистраИзменения.Узел = &ТекущаяОчередь
		|	И ТаблицаРегистраИзменения.Регистратор ССЫЛКА #ПолноеИмяДокумента 
		|	И ВТЗаблокированоРегистратор.Регистратор ЕСТЬ NULL 
		|	И ВТЗаблокированоСсылка.Ссылка ЕСТЬ NULL 
		|	И &УсловиеПоДопИсточникам
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаДокумента.Дата УБЫВ";
		ДополнительныеПараметрыСозданияВТ = ДополнительныеПараметрыВыборкиДанныхДляОбработки();
		ДополнительныеПараметрыСозданияВТ.ИмяВременнойТаблицы = "ВТЗаблокированоСсылка";
		СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяДокумента, МенеджерВременныхТаблиц, ДополнительныеПараметрыСозданияВТ);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаРегистраИзменения", ПолноеИмяРегистра + ".Изменения");	
	
	ДополнительныеПараметрыСозданияВТ = ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыСозданияВТ.ИмяВременнойТаблицы = "ВТЗаблокированоРегистратор";
	СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяРегистра, МенеджерВременныхТаблиц, ДополнительныеПараметрыСозданияВТ);
	
	Если Не ДополнительныеПараметры.ВыбиратьПорциями Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ ПЕРВЫЕ 500","ВЫБРАТЬ");
	КонецЕсли;	
	
	ДобавитьПроверкуБлокировкиДополнительныхИсточников(Очередь, ТекстЗапроса, ПолноеИмяДокумента, ПолноеИмяРегистра, МенеджерВременныхТаблиц, Ложь, ДополнительныеПараметры);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПолноеИмяДокумента", ПолноеИмяДокумента);
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущаяОчередь", ТекущаяОчередь);
	ВыборкаПоРегистраторам = Запрос.Выполнить().Выбрать();
		
	Возврат ВыборкаПоРегистраторам;

КонецФункции

// Возвращает порцию ссылок, по которым нужно произвести обработку.
//  Данные берутся из зарегистрированных в очереди, учитываются заблокированные более приоритетными очередями данные.
//	Ссылки на документы возвращаются упорядоченными по убыванию по дате.
//
// Параметры:
//  Очередь				 - Число - очередь, к которой отнесен обработчик и в которой зарегистрированы данные, которые он будет
//									обрабатывать.
//  ПолноеИмяОбъекта	 - Строка	 - имя объекта, который нужно обработать. Например, Документ.ПриходныйОрдерНаТовары
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки.
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка ссылок, которые нужно обработать, поля выборки:
//  * Ссылка - ЛюбаяСсылка.
//
Функция ВыбратьСсылкиДляОбработки(Очередь, ПолноеИмяОбъекта, ДополнительныеПараметры = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	КонецЕсли;
	
	ИмяОбъекта = СтрРазделить(ПолноеИмяОбъекта,".",Ложь)[1];
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	ЭтоДокумент = ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта)
				Или ОбщегоНазначения.ЭтоЗадача(МетаданныеОбъекта);
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	ТаблицаИзменения.Ссылка
	|ИЗ
	|	#ТаблицаОбъектаИзменения КАК ТаблицаИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ВТЗаблокированоСсылка КАК ВТЗаблокированоСсылка
	|		ПО ТаблицаИзменения.Ссылка = ВТЗаблокированоСсылка.Ссылка";
	Если ЭтоДокумент
		Или ДополнительныеПараметры.ДополнительныеИсточникиДанных.Количество() > 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаОбъекта КАК ТаблицаОбъекта
		|       	#ТекстЗапросаСоединениеСДопИсточникамиПоШапке
		|		ПО ТаблицаИзменения.Ссылка = ТаблицаОбъекта.Ссылка
		|       #ТекстЗапросаСоединениеСДопИсточникамиПоТЧ";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|ГДЕ
	|	ТаблицаИзменения.Узел = &ТекущаяОчередь
	|	И ВТЗаблокированоСсылка.Ссылка ЕСТЬ NULL 
	|	И &УсловиеПоДопИсточникам";
	Если ЭтоДокумент Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОбъекта.Дата УБЫВ";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|УНИЧТОЖИТЬ
	|	#ВТЗаблокированоСсылка"; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТЗаблокированоСсылка","ВТЗаблокировано" + ИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#ТаблицаОбъектаИзменения", ПолноеИмяОбъекта + ".Изменения");	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#ТаблицаОбъекта", ПолноеИмяОбъекта);	
	
	Если Не ДополнительныеПараметры.ВыбиратьПорциями Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ ПЕРВЫЕ 500","ВЫБРАТЬ");
	КонецЕсли;	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	
	ДобавитьПроверкуБлокировкиДополнительныхИсточников(Очередь, ТекстЗапроса, ПолноеИмяОбъекта, Неопределено, МенеджерВременныхТаблиц, Ложь, ДополнительныеПараметры);
	ТекущаяОчередь = ОчередьСсылкой(Очередь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущаяОчередь", ТекущаяОчередь);
	ВыборкаПоСсылкам = Запрос.Выполнить().Выбрать();
		
	Возврат ВыборкаПоСсылкам;
КонецФункции

// Создает временную таблицу ссылок, которые не обработаны в текущей очереди
//  и не заблокированы меньшими очередями.
//  Имя таблицы: ВТДляОбработки<ИмяОбъекта>, например ВТДляОбработкиНоменклатура
//  Колонки таблицы
//  * Ссылка - ЛюбаяСсылка.
//
// Параметры:
//  Очередь					 - Число					 - очередь обработки, в которой выполняется текущий обработчик
//  ПолноеИмяОбъекта		 - Строка					 - полное имя объекта, для которого выполняется проверка, например, Справочник.Номенклатура
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер, в котором будет создана временная таблица
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки.
// 
// Возвращаемое значение:
//  Структура - результат формирования временной таблицы:
//  * ЕстьЗаписиВоВременнойТаблице - Булево - в создаваемой таблице есть хотя бы одна запись. Записей может не быть по двум причинам
//												- все обработано или все, что нужно обработать, еще заблокировано обработчиками с меньшей очередью
//  * ЕстьДанныеДляОбработки - Булево - в очереди есть ссылки для обработки, т.е. еще не все обработано
//  * ИмяВременнойТаблицы - Строка - имя созданной временной таблицы.
//
Функция СоздатьВременнуюТаблицуСсылокДляОбработки(Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	КонецЕсли;
	
	ИмяОбъекта = СтрРазделить(ПолноеИмяОбъекта,".",Ложь)[1];
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	Если ДополнительныеПараметры.ВыбиратьПорциями Тогда
		
		ЭтоДокумент = ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта)
					Или ОбщегоНазначения.ЭтоЗадача(МетаданныеОбъекта);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаИзменения.Ссылка КАК Ссылка";
		Если ЭтоДокумент Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ТаблицаОбъекта.Дата КАК Дата";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ПОМЕСТИТЬ ВТДляОбработкиСсылкаПолная
		|ИЗ
		|	#ТаблицаОбъектаИзменения КАК ТаблицаИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ #ВТЗаблокированоСсылка КАК ВТЗаблокированоСсылка
		|		ПО ТаблицаИзменения.Ссылка = ВТЗаблокированоСсылка.Ссылка";
		Если ЭтоДокумент
			Или ДополнительныеПараметры.ДополнительныеИсточникиДанных.Количество() > 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаОбъекта КАК ТаблицаОбъекта
			|       	#ТекстЗапросаСоединениеСДопИсточникамиПоШапке
			|		ПО ТаблицаИзменения.Ссылка = ТаблицаОбъекта.Ссылка
			|       #ТекстЗапросаСоединениеСДопИсточникамиПоТЧ";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	ТаблицаИзменения.Узел = &ТекущаяОчередь
		|	И ВТЗаблокированоСсылка.Ссылка ЕСТЬ NULL 
		|	И &УсловиеПоДопИсточникам
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка 
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДляОбработкиСсылкаПолная.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ #ВТДляОбработкиСсылка
		|ИЗ
		|	ВТДляОбработкиСсылкаПолная КАК ВТДляОбработкиСсылкаПолная
		|ГДЕ
		|	ВТДляОбработкиСсылкаПолная.Ссылка В
		|			(ВЫБРАТЬ ПЕРВЫЕ 500
		|				ВТДляОбработкиСсылкаПолная.Ссылка КАК Ссылка
		|			ИЗ
		|				ВТДляОбработкиСсылкаПолная КАК ВТДляОбработкиСсылкаПолная";
		Если ЭтоДокумент Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|			УПОРЯДОЧИТЬ ПО
			|				ВТДляОбработкиСсылкаПолная.Дата УБЫВ";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ #ВТЗаблокированоСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДляОбработкиСсылкаПолная"; 
		
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаИзменений.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ #ВТДляОбработкиСсылка
		|ИЗ
		|	#ТаблицаОбъектаИзменения КАК ТаблицаИзменений
		|		ЛЕВОЕ СОЕДИНЕНИЕ #ВТЗаблокированоСсылка КАК ВТЗаблокированоСсылка
		|		ПО ТаблицаИзменений.Ссылка = ВТЗаблокированоСсылка.Ссылка
		|ГДЕ
		|	ТаблицаИзменений.Узел = &ТекущаяОчередь
		|	И ВТЗаблокированоСсылка.Ссылка ЕСТЬ NULL 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ #ВТЗаблокированоСсылка"; 
	КонецЕсли;
	
	Если ПустаяСтрока(ДополнительныеПараметры.ИмяВременнойТаблицы) Тогда
		ИмяВременнойТаблицы = "ВТДляОбработки" + ИмяОбъекта;
	Иначе
		ИмяВременнойТаблицы = ДополнительныеПараметры.ИмяВременнойТаблицы;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТЗаблокированоСсылка","ВТЗаблокировано" + ИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТДляОбработкиСсылка",ИмяВременнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#ТаблицаОбъектаИзменения", ПолноеИмяОбъекта + ".Изменения");	
	
	СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	
	ДобавитьПроверкуБлокировкиДополнительныхИсточников(Очередь, ТекстЗапроса, ПолноеИмяОбъекта, Неопределено, МенеджерВременныхТаблиц, Истина, ДополнительныеПараметры);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#ТаблицаОбъекта", ПолноеИмяОбъекта);	
	
	ТекущаяОчередь = ОчередьСсылкой(Очередь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущаяОчередь", ТекущаяОчередь);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура("ЕстьЗаписиВоВременнойТаблице,ЕстьДанныеДляОбработки,ИмяВременнойТаблицы", Ложь, Ложь,"");
	Результат.ИмяВременнойТаблицы = ИмяВременнойТаблицы;
	Результат.ЕстьЗаписиВоВременнойТаблице = РезультатЗапроса[0].Выгрузить()[0].Количество <> 0;
	
	Если Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Результат.ЕстьДанныеДляОбработки = Истина;
	Иначе
		Результат.ЕстьДанныеДляОбработки = ЕстьДанныеДляОбработки(Очередь, ПолноеИмяОбъекта);
	КонецЕсли;	
		
	Возврат Результат;
	
КонецФункции

// Возвращает значения измерений независимого регистра сведений для обработки.
//  Данные берутся из зарегистрированных в очереди, учитываются заблокированные более приоритетными очередями данные.
//
// Параметры:
//  Очередь				 - Число - очередь, к которой отнесен обработчик и в которой зарегистрированы данные, которые он будет
//									обрабатывать.
//  ПолноеИмяОбъекта	 - Строка	 - имя объекта, который нужно обработать. Например, РегистрСведений.ШтрихкодыНоменклатуры
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки.
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка значений измерений, которые нужно обработать, имена полей соответствует именам измерений регистра
//									Если по измерению не регистрировалась необходимость обработки, то в выборке по этому измерению будет
//									пустое значение.
//
Функция ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(Очередь, ПолноеИмяОбъекта, ДополнительныеПараметры = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	КонецЕсли;
	
	ИмяОбъекта = СтрРазделить(ПолноеИмяОбъекта,".",Ложь)[1];
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
		
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	&ТекстВыборкиИзмерений
	|ИЗ
	|	#ТаблицаОбъектаИзменения КАК ТаблицаИзменений
	|	ЛЕВОЕ СОЕДИНЕНИЕ #ВТЗаблокированоИзмерения КАК ВТЗаблокированоИзмерения
	|	ПО &ТекстУсловияСоединенияИзмерений
	|   #ТекстЗапросаСоединениеСДопИсточниками
	|ГДЕ
	|	ТаблицаИзменений.Узел = &ТекущаяОчередь
	|	И &ТекстУсловияПоОтборуНезаблокированных
	|	И &УсловиеПоДопИсточникам";
	
	ТекстВыборкиИзмерений = "";
	ТекстУсловияСоединенияИзмерений = "ИСТИНА";
	ПервоеИзмерение = Истина;
	Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
		
		Если Не Измерение.ОсновнойОтбор Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстВыборкиИзмерений = ТекстВыборкиИзмерений + "
		|	ТаблицаИзменений." + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		
		ТекстУсловияСоединенияИзмерений = ТекстУсловияСоединенияИзмерений + "
		|	И ТаблицаИзменений." + Измерение.Имя + " = ВТЗаблокированоИзмерения." + Измерение.Имя + "
		|		ИЛИ ТаблицаИзменений." + Измерение.Имя + " = &ПустоеЗначениеИзмерения"+ Измерение.Имя + "
		|		ИЛИ ВТЗаблокированоИзмерения." + Измерение.Имя + " = &ПустоеЗначениеИзмерения"+ Измерение.Имя;
		
		Запрос.УстановитьПараметр("ПустоеЗначениеИзмерения"+ Измерение.Имя, Измерение.Тип.ПривестиЗначение()); 
		Если ПервоеИзмерение Тогда
			ТекстУсловияПоОтборуНезаблокированных =  "ВТЗаблокированоИзмерения." + Измерение.Имя + " ЕСТЬ NULL ";
			ПервоеИзмерение = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ТекстВыборкиИзмерений = Лев(ТекстВыборкиИзмерений, СтрДлина(ТекстВыборкиИзмерений) - 1);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкиИзмерений", ТекстВыборкиИзмерений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловияСоединенияИзмерений", ТекстУсловияСоединенияИзмерений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловияПоОтборуНезаблокированных", ТекстУсловияПоОтборуНезаблокированных);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#ТаблицаОбъектаИзменения", ПолноеИмяОбъекта + ".Изменения");	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТЗаблокированоИзмерения","ВТЗаблокировано" + ИмяОбъекта);
	Если Не ДополнительныеПараметры.ВыбиратьПорциями Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ ПЕРВЫЕ 500","ВЫБРАТЬ");
	КонецЕсли;	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	
	ДобавитьПроверкуБлокировкиДополнительныхИсточниковДляНезависимогоРегистра(Очередь,
																				ТекстЗапроса,
																				ПолноеИмяОбъекта,
																				МенеджерВременныхТаблиц,
																				ДополнительныеПараметры);	
	
	ТекущаяОчередь = ОчередьСсылкой(Очередь);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущаяОчередь", ТекущаяОчередь);
	ВыборкаПоИзмерениям = Запрос.Выполнить().Выбрать();
		
	Возврат ВыборкаПоИзмерениям;
КонецФункции

// Создает временную таблицу значения измерений независимого регистра сведений для обработки.
//  Имя таблицы: ВТДляОбработки<ИмяОбъекта>, например ВТДляОбработкиШтрихкодыНоменклатуры
//  Колонки таблицы соответствуют измерениям регистра. Если по измерению не регистрировалась 
//	необходимость обработки, то в выборке по этому измерению будет пустое значение.
//
// Параметры:
//  Очередь					 - Число					 - очередь обработки, в которой выполняется текущий обработчик
//  ПолноеИмяОбъекта		 - Строка					 - полное имя объекта, для которого выполняется проверка, например, Справочник.Номенклатура
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер, в котором будет создана временная таблица
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки.
// 
// Возвращаемое значение:
//  Структура - результат формирования временной таблицы:
//  * ЕстьЗаписиВоВременнойТаблице - Булево - в создаваемой таблице есть хотя бы одна запись. Записей может не быть по двум причинам
//												- все обработано или все, что нужно обработать, еще заблокировано обработчиками с меньшей очередью
//  * ЕстьДанныеДляОбработки - Булево - в очереди есть данные для обработки, т.е. еще не все обработано
//  * ИмяВременнойТаблицы - Строка - имя созданной временной таблицы.
//
Функция СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	КонецЕсли;
	
	ИмяОбъекта = СтрРазделить(ПолноеИмяОбъекта,".",Ложь)[1];
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
		                      
	Запрос = Новый Запрос;
	Если ДополнительныеПараметры.ВыбиратьПорциями Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&ТекстВыборкиИзмерений
		|ПОМЕСТИТЬ ВТДляОбработкиИзмеренияПолная
		|ИЗ
		|	#ТаблицаОбъектаИзменения КАК ТаблицаИзменений
		|		ЛЕВОЕ СОЕДИНЕНИЕ #ВТЗаблокированоИзмерения КАК ВТЗаблокированоИзмерения
		|		ПО (&ТекстУсловияСоединенияИзмерений)
		|   #ТекстЗапросаСоединениеСДопИсточниками
		|ГДЕ
		|	ТаблицаИзменений.Узел = &ТекущаяОчередь
		|	И &ТекстУсловияПоОтборуНезаблокированных
		|	И &УсловиеПоДопИсточникам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ТекстВыборкиИзмерений
		|ПОМЕСТИТЬ #ВТДляОбработкиИзмерения
		|ИЗ
		|	ВТДляОбработкиИзмеренияПолная КАК ТаблицаИзменений
		|ГДЕ
		|	&ТекстУсловияОтбораПорции В
		|			(ВЫБРАТЬ ПЕРВЫЕ 500
		|				&ТекстВыборкиИзмерений
		|			ИЗ
		|				ВТДляОбработкиИзмеренияПолная КАК ТаблицаИзменений)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ #ВТЗаблокированоИзмерения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДляОбработкиИзмеренияПолная";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&ТекстВыборкиИзмерений
		|ПОМЕСТИТЬ #ВТДляОбработкиИзмерения
		|ИЗ
		|	#ТаблицаОбъектаИзменения КАК ТаблицаИзменений
		|	ЛЕВОЕ СОЕДИНЕНИЕ #ВТЗаблокированоИзмерения КАК ВТЗаблокированоИзмерения
		|	ПО &ТекстУсловияСоединенияИзмерений
		|   #ТекстЗапросаСоединениеСДопИсточниками
		|ГДЕ
		|	ТаблицаИзменений.Узел = &ТекущаяОчередь
		|	И &ТекстУсловияПоОтборуНезаблокированных
		|	И &УсловиеПоДопИсточникам
		|;
		|УНИЧТОЖИТЬ
		|	#ВТЗаблокированоИзмерения";
	КонецЕсли;
	ТекстВыборкиИзмерений = "";
	ТекстУсловияСоединенияИзмерений = "ИСТИНА";
	ТекстУсловияОтбораПорции = ""; 	
	
	ПервоеИзмерение = Истина;
	Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
		ТекстВыборкиИзмерений = ТекстВыборкиИзмерений + "
		|	ТаблицаИзменений." + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		
		ТекстУсловияОтбораПорции = ТекстУсловияОтбораПорции + "
		|	ТаблицаИзменений." + Измерение.Имя + ",";
		
		ТекстУсловияСоединенияИзмерений = ТекстУсловияСоединенияИзмерений + "
		|	И ТаблицаИзменений." + Измерение.Имя + " = ВТЗаблокированоИзмерения." + Измерение.Имя + "
		|		ИЛИ ТаблицаИзменений." + Измерение.Имя + " = &ПустоеЗначениеИзмерения"+ Измерение.Имя + "
		|		ИЛИ ВТЗаблокированоИзмерения." + Измерение.Имя + " = &ПустоеЗначениеИзмерения"+ Измерение.Имя;
		Запрос.УстановитьПараметр("ПустоеЗначениеИзмерения"+ Измерение.Имя, Измерение.Тип.ПривестиЗначение()); 
		
		Если ПервоеИзмерение Тогда
			ТекстУсловияПоОтборуНезаблокированных =  "ВТЗаблокированоИзмерения." + Измерение.Имя + " ЕСТЬ NULL ";
			ПервоеИзмерение = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ТекстВыборкиИзмерений = Лев(ТекстВыборкиИзмерений, СтрДлина(ТекстВыборкиИзмерений) - 1);
	ТекстУсловияОтбораПорции = Лев(ТекстУсловияОтбораПорции, СтрДлина(ТекстУсловияОтбораПорции) - 1);
	ТекстУсловияОтбораПорции = "("+ТекстУсловияОтбораПорции+")";
	
	Если ПустаяСтрока(ДополнительныеПараметры.ИмяВременнойТаблицы) Тогда
		ИмяВременнойТаблицы = "ВТДляОбработки" + ИмяОбъекта;
	Иначе
		ИмяВременнойТаблицы = ДополнительныеПараметры.ИмяВременнойТаблицы;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкиИзмерений", ТекстВыборкиИзмерений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловияСоединенияИзмерений", ТекстУсловияСоединенияИзмерений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловияПоОтборуНезаблокированных", ТекстУсловияПоОтборуНезаблокированных);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#ТаблицаОбъектаИзменения", ПолноеИмяОбъекта + ".Изменения");	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТЗаблокированоИзмерения","ВТЗаблокировано" + ИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТДляОбработкиИзмерения",ИмяВременнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловияОтбораПорции",ТекстУсловияОтбораПорции);
	
	СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	ДобавитьПроверкуБлокировкиДополнительныхИсточниковДляНезависимогоРегистра(Очередь,
																				ТекстЗапроса,
																				ПолноеИмяОбъекта,
																				МенеджерВременныхТаблиц,
																				ДополнительныеПараметры);	
	
	ТекущаяОчередь = ОчередьСсылкой(Очередь);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущаяОчередь", ТекущаяОчередь);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура("ЕстьЗаписиВоВременнойТаблице,ЕстьДанныеДляОбработки,ИмяВременнойТаблицы", Ложь, Ложь,"");
	Результат.ИмяВременнойТаблицы = ИмяВременнойТаблицы;
	Результат.ЕстьЗаписиВоВременнойТаблице = РезультатЗапроса[0].Выгрузить()[0].Количество <> 0;
	
	Если Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Результат.ЕстьДанныеДляОбработки = Истина;
	Иначе
		Результат.ЕстьДанныеДляОбработки = ЕстьДанныеДляОбработки(Очередь, ПолноеИмяОбъекта);
	КонецЕсли;	
		
	Возврат Результат;
	
КонецФункции

// Проверяет, есть ли еще необработанные данные.
//
// Параметры:
//  Очередь			 - Число, Неопределено - очередь, к которой отнесен обработчик и в которой зарегистрированы данные, которые он будет обрабатывать.
//						Неопределено - проверяется, завершена ли обработка в целом;
//						Массив - проверяется есть данные для обработки в списке очередей
//  ПолноеИмяМетаданныеОбъекта	- Строка, ОбъектМетаданных - полное имя обрабатываемого объекта или его метаданные.
//									Например, "Документ.ПриходныйОрдерНаТовары"
//  							- Массив - массив полных имен объектов или объектов метаданных, в массиве не должно быть независимых регистров сведений
//  Отбор - ЛюбаяСсылка, Структура, Неопределено, Массив - отбор данных для проверки.
//									Если передано Неопределено - проверяется по всему типу объекта,
//									Если объект - регистр, подчиненный регистратору, то в отборе - ссылка на регистратор или массив ссылок
//									Если объект ссылочного типа, то в отборе - или ссылка, или массив ссылок
//									Если объект - независимый регистр сведений, то в отборе - структура со значениями измерений.
//										Ключ структуры - имя измерения, значение - значение отбора (можно передать массив значений).
// 
// Возвращаемое значение:
//  Булево
//
Функция ЕстьДанныеДляОбработки(Очередь, ПолноеИмяМетаданныеОбъекта, Отбор = Неопределено) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		ЭтоПодчиненныйУзелРИБ = ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ();
		Если Не ЭтоПодчиненныйУзелРИБ Тогда
			Возврат Ложь;
		ИначеЕсли ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно") Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПолноеИмяМетаданныеОбъекта) = Тип("Строка") Тогда
		ПолныеИменаОбрабатываемыхОбъектов = СтрРазделить(ПолноеИмяМетаданныеОбъекта, ",");
	ИначеЕсли ТипЗнч(ПолноеИмяМетаданныеОбъекта) = Тип("Массив") Тогда
		ПолныеИменаОбрабатываемыхОбъектов = ПолноеИмяМетаданныеОбъекта;
	ИначеЕсли ТипЗнч(ПолноеИмяМетаданныеОбъекта) = Тип("ОбъектМетаданных") Тогда
		ПолныеИменаОбрабатываемыхОбъектов = Новый Массив;
		ПолныеИменаОбрабатываемыхОбъектов.Добавить(ПолноеИмяМетаданныеОбъекта.ПолноеИмя());
	Иначе
		ТекстИсключения = НСтр("ru = 'Передан неправильный тип параметра ""ПолноеИмяМетаданныеОбъекта"" в функцию ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	
	ТекстыЗапроса = Новый Массив;
	ОтборУстановлен = Ложь;
	
	Для каждого ОбрабатываемыйТип Из ПолныеИменаОбрабатываемыхОбъектов Цикл 
		
		Если ТипЗнч(ОбрабатываемыйТип) = Тип("ОбъектМетаданных") Тогда
			МетаданныеОбъекта = ОбрабатываемыйТип;
			ПолноеИмяОбъекта  = ОбрабатываемыйТип.ПолноеИмя();
		Иначе
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ОбрабатываемыйТип);
			ПолноеИмяОбъекта  = ОбрабатываемыйТип;
		КонецЕсли;
		
		УсловиеОтбораДанных = "ИСТИНА";
		
		Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта) Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаИзменений.Ссылка КАК Ссылка
			|ИЗ
			|	#ТаблицаИзменения КАК ТаблицаИзменений
			|ГДЕ
			|	&УсловиеОтбораУзла
			|	И &УсловиеОтбораДанных";
			
			Запрос.УстановитьПараметр("Ссылка", Отбор);
			
			Если Отбор <> Неопределено Тогда
				УсловиеОтбораДанных = "ТаблицаИзменений.Ссылка В (&Отбор)";
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеОбъекта)
			И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
			
			Если ПолныеИменаОбрабатываемыхОбъектов.Количество() > 1 Тогда
				ТекстИсключения = НСтр("ru = 'В массиве имен в параметре ""ПолноеИмяМетаданныеОбъекта"" в функцию ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки передан независимый регистр сведений.'");
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;	
			
			ОтборУстановлен = Истина;
			
			ТекстЗапроса =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	&ТекстВыборкиИзмерений
			|ИЗ
			|	#ТаблицаИзменения КАК ТаблицаИзменений
			|ГДЕ
			|	&УсловиеОтбораУзла
			|	И &УсловиеОтбораДанных";
			
			ТекстВыборкиИзмерений = "";
			Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
				ТекстВыборкиИзмерений = ТекстВыборкиИзмерений + "
				|	ТаблицаИзменений." + Измерение.Имя + " КАК " + Измерение.Имя + ",";
				
				Если Отбор <> Неопределено Тогда
					УсловиеОтбораДанных = УсловиеОтбораДанных + "
					|	И (ТаблицаИзменений." + Измерение.Имя + " В (&ЗначениеОтбора" + Измерение.Имя + ")
					|		ИЛИ ТаблицаИзменений." + Измерение.Имя + " = &ПустоеЗначение" + Измерение.Имя + ")";
					
					Если Отбор.Свойство(Измерение.Имя) Тогда
						Запрос.УстановитьПараметр("ЗначениеОтбора" + Измерение.Имя, Отбор[Измерение.Имя]);
					Иначе
						Запрос.УстановитьПараметр("ЗначениеОтбора" + Измерение.Имя, Измерение.Тип.ПривестиЗначение());
					КонецЕсли;
					
					Запрос.УстановитьПараметр("ПустоеЗначение" + Измерение.Имя, Измерение.Тип.ПривестиЗначение());
				КонецЕсли;
			КонецЦикла;
			
			ТекстВыборкиИзмерений = Лев(ТекстВыборкиИзмерений, СтрДлина(ТекстВыборкиИзмерений) - 1);
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкиИзмерений", ТекстВыборкиИзмерений);
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистр(МетаданныеОбъекта) Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаИзменений.Регистратор КАК Ссылка
			|ИЗ
			|	#ТаблицаИзменения КАК ТаблицаИзменений
			|ГДЕ
			|	&УсловиеОтбораУзла
			|	И &УсловиеОтбораДанных";
			
			Если Отбор <> Неопределено Тогда
				УсловиеОтбораДанных = "ТаблицаИзменений.Регистратор В (&Отбор)";
			КонецЕсли;
			
		Иначе
			ТекстИсключения = НСтр("ru = 'Для типа метаданных ""%МетаданныеОбъекта%"" не поддерживается проверка в функции ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки'");
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%МетаданныеОбъекта%", Строка(МетаданныеОбъекта)); 
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаИзменения", ПолноеИмяОбъекта + ".Изменения");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораДанных", УсловиеОтбораДанных);
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	Соединитель = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";

	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, Соединитель);
	
	Если Очередь = Неопределено Тогда
		УсловиеОтбораУзла = "	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы ";
	Иначе
		УсловиеОтбораУзла = "	ТаблицаИзменений.Узел В (&Узлы) ";
		Если ТипЗнч(Очередь) = Тип("Массив") Тогда
			Запрос.УстановитьПараметр("Узлы", Очередь);
		Иначе
			Запрос.УстановитьПараметр("Узлы", ОчередьСсылкой(Очередь));
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораУзла", УсловиеОтбораУзла);
	
	Если Не ОтборУстановлен Тогда
		Запрос.УстановитьПараметр("Отбор", Отбор);
	КонецЕсли;
		
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Не Запрос.Выполнить().Пустой(); 
	
КонецФункции

// Проверяет, что все данные обработаны.
//
// Параметры:
//  Очередь			 - Число, Неопределено - очередь, к которой отнесен обработчик и в которой зарегистрированы данные, которые он будет обрабатывать.
//						Неопределено - проверяется, завершена ли обработка в целом;
//						Массив - проверяется есть данные для обработки в списке очередей
//  ПолноеИмяМетаданныеОбъекта	- Строка, ОбъектМетаданных - полное имя обрабатываемого объекта или его метаданные.
//									Например, "Документ.ПриходныйОрдерНаТовары"
//  							- Массив - массив полных имен объектов или объектов метаданных, в массиве не должно быть независимых регистров сведений
//  Отбор - ЛюбаяСсылка, Структура, Неопределено, Массив - отбор данных для проверки.
//									Если передано Неопределено - проверяется по всему типу объекта,
//									Если объект - регистр, подчиненный регистратору, то в отборе - ссылка на регистратор или массив ссылок
//									Если объект ссылочного типа, то в отборе - или ссылка, или массив ссылок
//									Если объект - независимый регистр сведений, то в отборе - структура со значениями измерений.
//										Ключ структуры - имя измерения, значение - значение отбора (можно передать массив значений).
// 
// Возвращаемое значение:
//  Булево 
//
Функция ОбработкаДанныхЗавершена(Очередь, ПолноеИмяМетаданныеОбъекта, Отбор = Неопределено) Экспорт
	
	Возврат Не ЕстьДанныеДляОбработки(Очередь, ПолноеИмяМетаданныеОбъекта, Отбор);
	
КонецФункции

// Проверяет есть заблокированные меньшими очередями обработки данные.
//
// Параметры:
//  Очередь			 - Число, Неопределено - очередь, к которой отнесен обработчик и в которой зарегистрированы данные, которые он будет
//									обрабатывать.
//  ПолноеИмяМетаданныеОбъекта	- Строка, ОбъектМетаданных - полное имя обрабатываемого объекта или его метаданные.
//									Например, "Документ.ПриходныйОрдерНаТовары"
//  							- Массив - массив полных имен объектов или объектов метаданных, в массиве не должно быть независимых регистров сведений.
// 
// Возвращаемое значение:
//  Булево
//
Функция ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Очередь, ПолноеИмяМетаданныеОбъекта) Экспорт
	
	Возврат ЕстьДанныеДляОбработки(УзлыМеньшейОчереди(Очередь), ПолноеИмяМетаданныеОбъекта);
	
КонецФункции

// Проверяет завершилась ли обработка данных обработчиками, отнесенными на более раннюю очередь.
//
// Параметры:
//  Очередь			- Число, Неопределено - очередь, к которой отнесен обработчик и в которой зарегистрированы данные, которые он будет обрабатывать.
//						Неопределено - проверяется, завершена ли обработка в целом;
//						Массив - проверяется есть данные для обработки в списке очередей.
//  Данные			- ЛюбаяСсылка, НаборЗаписей, Объект, ДанныеФормыСтруктура - ссылка на объект, сам объект
//                    или набор записей, который необходимо проверить. Если ДополнительныеПараметры.ЭтоДвижения = Истина, то Данные - это регистратор
//				      указанного в ДополнительныеПараметры регистра.
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки.
//  МетаданныеИОтбор		 - Структура - см. ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным.
// 
// Возвращаемое значение:
//  Булево 
//
Функция МожноЧитатьИМенять(Очередь, Данные, ДополнительныеПараметры = Неопределено, МетаданныеИОтбор = Неопределено) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если МетаданныеИОтбор = Неопределено Тогда
		МетаданныеИОтбор = МетаданныеИОтборПоДанным(Данные, ДополнительныеПараметры);
	КонецЕсли;
	
	Если МетаданныеИОтбор.ЭтоНовый Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Очередь = Неопределено Тогда
		Возврат Не ЕстьДанныеДляОбработки(Неопределено, МетаданныеИОтбор.Метаданные, МетаданныеИОтбор.Отбор);
	Иначе
		Возврат Не ЕстьДанныеДляОбработки(УзлыМеньшейОчереди(Очередь), МетаданныеИОтбор.Метаданные, МетаданныеИОтбор.Отбор);
	КонецЕсли;
	
КонецФункции

// Создает временную таблицу заблокированных данных.
//	Имя таблицы: ВТЗаблокированы<ИмяОбъекта>, например ВТЗаблокированоНоменклатура 
//  Колонки таблицы
//		для объектов ссылочного типа:
//			* Ссылка
//		для регистров, подчиненных регистратору
//			* Регистратор
//		для регистров с непосредственной записью
//			* колонки, соответствующие измерениям регистра.
//
// Параметры:
//  Очередь,Неопределено	 - Число - очередь обработки, в которой выполняется текущий обработчик. Если передано Неопределенно, то проверяется во всех очередях
//  ПолноеИмяОбъекта		 - Строка - полное имя объекта, для которого выполняется проверка, например, Справочник.Номенклатура 
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - менеджер, в котором будет создана временная таблица
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки,
//								параметр ВыбиратьПорциями игнорируется, заблокированные данные всегда помещаются в таблицу целиком.
//
// 
// Возвращаемое значение:
//  Структура - результат формирования временной таблицы:
//  * ЕстьЗаписиВоВременнойТаблице - Булево - в создаваемой таблице есть хотя бы одна запись.
//  * ИмяВременнойТаблицы - Строка - имя созданной временной таблицы.
//
Функция СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта) Тогда
		Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&ПустоеЗначение КАК Ссылка
			|ПОМЕСТИТЬ #ИмяВременнойТаблицы
			|ГДЕ
			|	ЛОЖЬ";
			                                           
			Запрос.УстановитьПараметр("ПустоеЗначение", МетаданныеОбъекта.СтандартныеРеквизиты.Ссылка.Тип.ПривестиЗначение()); 
		Иначе	
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаИзменений.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ #ИмяВременнойТаблицы
			|ИЗ
			|	#ТаблицаИзменения КАК ТаблицаИзменений
			|ГДЕ
			|	&УсловиеОтбораУзла
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка";
		КонецЕсли;
	ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеОбъекта)
		И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
		
		Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&ТекстВыборкиИзмерений
			|ПОМЕСТИТЬ #ИмяВременнойТаблицы
			|ГДЕ
			|	ЛОЖЬ";
			ТекстВыборкиИзмерений = "";
			Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
				ТекстВыборкиИзмерений = ТекстВыборкиИзмерений + "
				|	&ПустоеЗначениеИзмерения"+ Измерение.Имя + " КАК " + Измерение.Имя + ",";
				Запрос.УстановитьПараметр("ПустоеЗначениеИзмерения"+ Измерение.Имя, Измерение.Тип.ПривестиЗначение()); 
			КонецЦикла;
			
		Иначе	
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&ТекстВыборкиИзмерений
			|ПОМЕСТИТЬ #ИмяВременнойТаблицы
			|ИЗ
			|	#ТаблицаИзменения КАК ТаблицаИзменений
			|ГДЕ
			|	&УсловиеОтбораУзла ";
			ТекстВыборкиИзмерений = "";
			Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
				ТекстВыборкиИзмерений = ТекстВыборкиИзмерений + "
				|	ТаблицаИзменений." + Измерение.Имя + " КАК " + Измерение.Имя + ",";
			КонецЦикла;
		КонецЕсли;
		
		ТекстВыборкиИзмерений = Лев(ТекстВыборкиИзмерений, СтрДлина(ТекстВыборкиИзмерений) - 1);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкиИзмерений", ТекстВыборкиИзмерений);
		
	ИначеЕсли ОбщегоНазначения.ЭтоРегистр(МетаданныеОбъекта) Тогда
		
		Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&ПустоеЗначение КАК Регистратор
			|ПОМЕСТИТЬ #ИмяВременнойТаблицы
			|ГДЕ
			|	ЛОЖЬ";
			
			Запрос.УстановитьПараметр("ПустоеЗначение", МетаданныеОбъекта.СтандартныеРеквизиты.Регистратор.Тип.ПривестиЗначение()); 
			
		Иначе
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаИзменений.Регистратор КАК Регистратор
			|ПОМЕСТИТЬ #ИмяВременнойТаблицы
			|ИЗ
			|	#ТаблицаИзменения КАК ТаблицаИзменений
			|ГДЕ
			|	&УсловиеОтбораУзла
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Регистратор";
		КонецЕсли;
		
	Иначе
		ТекстИсключения = НСтр("ru = 'Для этого типа метаданных не поддерживается проверка в функции ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		
		Если Очередь = Неопределено Тогда
			УсловиеОтбораУзла = "	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы ";
		Иначе
			УсловиеОтбораУзла = "	ТаблицаИзменений.Узел В (&Узлы) ";
			Запрос.УстановитьПараметр("Узлы", УзлыМеньшейОчереди(Очередь));
		КонецЕсли;	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораУзла", УсловиеОтбораУзла);
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаИзменения", ПолноеИмяОбъекта + ".Изменения");
		
	КонецЕсли;
	
	ИмяОбъекта = СтрРазделить(ПолноеИмяОбъекта, ".")[1];
	
	Если ПустаяСтрока(ДополнительныеПараметры.ИмяВременнойТаблицы) Тогда
		ИмяВременнойТаблицы =  "ВТЗаблокировано"+ИмяОбъекта;
	Иначе
		ИмяВременнойТаблицы = ДополнительныеПараметры.ИмяВременнойТаблицы;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура("ЕстьЗаписиВоВременнойТаблице,ИмяВременнойТаблицы", Ложь, "");
	Результат.ИмяВременнойТаблицы = ИмяВременнойТаблицы;
	Результат.ЕстьЗаписиВоВременнойТаблице = РезультатЗапроса.Выгрузить()[0].Количество <> 0;
			
	Возврат Результат;
	
КонецФункции

// Создает временную таблицу заблокированных ссылок.
//	Имя таблицы: ВТЗаблокировано 
//  Колонки таблицы
//			* Ссылка
//
// Параметры:
//  Очередь,Неопределено	 - Число - очередь обработки, в которой выполняется текущий обработчик. Если передано Неопределенно, то проверяется во всех очередях
//  ПолныеИменаОбъектов		 - Строка, Массив - полные имена объектов, для которых выполняется проверка, например, Справочник.Номенклатура.
//                             Могут быть переданы объекты ссылочного типа, или регистры, подчиненные регистратору.
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - менеджер, в котором будет создана временная таблица
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки,
//								параметр ВыбиратьПорциями игнорируется, заблокированные данные всегда помещаются в таблицу целиком.
//
// 
// Возвращаемое значение:
//  Структура - результат формирования временной таблицы:
//  * ЕстьЗаписиВоВременнойТаблице - Булево - в создаваемой таблице есть хотя бы одна запись.
//  * ИмяВременнойТаблицы - Строка - имя созданной временной таблицы.
//
Функция СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок(Очередь, ПолныеИменаОбъектов, МенеджерВременныхТаблиц, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НЕОПРЕДЕЛЕНО КАК Ссылка
		|ПОМЕСТИТЬ #ИмяВременнойТаблицы
		|ГДЕ
		|	ЛОЖЬ";
	Иначе	
		Если ТипЗнч(ПолныеИменаОбъектов) = Тип("Строка") Тогда
			ПолныеИменаОбъектовМассив = СтрРазделить(ПолныеИменаОбъектов,",",Ложь);
		ИначеЕсли ТипЗнч(ПолныеИменаОбъектов) = Тип("Массив") Тогда 
			ПолныеИменаОбъектовМассив = ПолныеИменаОбъектов;
		Иначе
			ПолныеИменаОбъектовМассив = Новый Массив;
			ПолныеИменаОбъектовМассив.Добавить(ПолныеИменаОбъектов);
		КонецЕсли;
		
		МассивТекстовЗапросов = Новый Массив;
		
		ЕстьРегистры = Ложь;
		
		Для Каждого ОбрабатываемыйТип Из ПолныеИменаОбъектовМассив Цикл
			
			Если ТипЗнч(ОбрабатываемыйТип) = Тип("ОбъектМетаданных") Тогда
				МетаданныеОбъекта = ОбрабатываемыйТип;
				ПолноеИмяОбъекта  = ОбрабатываемыйТип.ПолноеИмя();
			Иначе
				МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ОбрабатываемыйТип);
				ПолноеИмяОбъекта  = ОбрабатываемыйТип;
			КонецЕсли;
			
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
			
			Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта) Тогда
				Если МассивТекстовЗапросов.Количество() = 0 Тогда
					ТекстЗапроса =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ТаблицаИзменений.Ссылка КАК Ссылка
					|//ПервыйЗапрос
					|ИЗ
					|	#ТаблицаИзменения КАК ТаблицаИзменений
					|ГДЕ
					|	&УсловиеОтбораУзла";
				Иначе
					ТекстЗапроса =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ТаблицаИзменений.Ссылка КАК Ссылка
					|ИЗ
					|	#ТаблицаИзменения КАК ТаблицаИзменений
					|ГДЕ
					|	&УсловиеОтбораУзла";	
				КонецЕсли;
			ИначеЕсли ОбщегоНазначения.ЭтоРегистр(МетаданныеОбъекта) Тогда
				Если МассивТекстовЗапросов.Количество() = 0 Тогда
					ТекстЗапроса =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ТаблицаИзменений.Регистратор КАК Ссылка
					|//ПервыйЗапрос
					|ИЗ
					|	#ТаблицаИзменения КАК ТаблицаИзменений
					|ГДЕ
					|	&УсловиеОтбораУзла";
				Иначе
					ТекстЗапроса =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ТаблицаИзменений.Регистратор КАК Ссылка
					|ИЗ
					|	#ТаблицаИзменения КАК ТаблицаИзменений
					|ГДЕ
					|	&УсловиеОтбораУзла";	
				КонецЕсли;
				
				ЕстьРегистры = Истина;
				
			Иначе
				ТекстИсключения = НСтр("ru = 'Для типа метаданных ""%МетаданныеОбъекта%"" не поддерживается проверка в функции ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок'");
				ТекстИсключения = СтрЗаменить(ТекстИсключения, "%МетаданныеОбъекта%", Строка(МетаданныеОбъекта)); 
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
		
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаИзменения", ПолноеИмяОбъекта + ".Изменения");
			
			МассивТекстовЗапросов.Добавить(ТекстЗапроса);
		КонецЦикла;
		
		Соединитель = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		
		ТекстЗапроса = СтрСоединить(МассивТекстовЗапросов, Соединитель); 
		
		Если ЕстьРегистры
			И МассивТекстовЗапросов.Количество() > 1 Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВложенныйЗапрос.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ #ИмяВременнойТаблицы
			|ИЗ
			|	(" + ТекстЗапроса + ") КАК ВложенныйЗапрос
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПервыйЗапрос", "");
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПервыйЗапрос", "ПОМЕСТИТЬ #ИмяВременнойТаблицы");
		КонецЕсли;
		
		Если Очередь = Неопределено Тогда
			УсловиеОтбораУзла = "	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы ";
		Иначе
			УсловиеОтбораУзла = "	ТаблицаИзменений.Узел В (&Узлы) ";
			Запрос.УстановитьПараметр("Узлы", УзлыМеньшейОчереди(Очередь));
		КонецЕсли;	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораУзла", УсловиеОтбораУзла);
	КонецЕсли;	
	
	Если ПустаяСтрока(ДополнительныеПараметры.ИмяВременнойТаблицы) Тогда
		ИмяВременнойТаблицы =  "ВТЗаблокировано";
	Иначе
		ИмяВременнойТаблицы = ДополнительныеПараметры.ИмяВременнойТаблицы;
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура("ЕстьЗаписиВоВременнойТаблице,ИмяВременнойТаблицы", Ложь, "");
	Результат.ИмяВременнойТаблицы = ИмяВременнойТаблицы;
	Результат.ЕстьЗаписиВоВременнойТаблице = РезультатЗапроса.Выгрузить()[0].Количество <> 0;
			
	Возврат Результат;
	
КонецФункции

// Создает временную таблицу измерений регистров, подчиненных регистраторам, по которым еще есть необработанные регистраторы.
//  Алгоритм вычисления
//  - берутся заблокированные регистраторы
//  - по ним соединяется с основной таблицей регистра
//  - из основной таблицы получаются значения изменений
//  - делается группировка
//	Имя таблицы: ВТЗаблокированы<ИмяОбъекта>, например ВТЗаблокированоТоварыНаСкладах 
//  Колонки таблицы соответствуют переданным измерениям.
//
// Параметры:
//  Очередь,Неопределено	 - Число - очередь обработки, в которой выполняется текущий обработчик. Если передано Неопределенно, то проверяется во всех очередях
//  ПолноеИмяРегистра	 - Строка	 - имя регистра, движения по которому нужно переформировать.
//  	Например, РегистрНакопления.ТоварыНаСкладах
//  Измерения				 - Строка, Массив - имя измерений, по которым нужно проверить блокировку перечисленные через запятую или массив имен
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - менеджер, в котором будет создана временная таблица
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки,
//								параметр ВыбиратьПорциями игнорируется, заблокированные данные всегда помещаются в таблицу целиком.
//
// Возвращаемое значение:
//  Структура - результат формирования временной таблицы:
//  * ЕстьЗаписиВоВременнойТаблице - Булево - в создаваемой таблице есть хотя бы одна запись.
//  * ИмяВременнойТаблицы - Строка - имя созданной временной таблицы.
//
Функция СоздатьВременнуюТаблицуЗначенийЗаблокированныхИзмерений(Очередь, ПолноеИмяРегистра, Измерения, МенеджерВременныхТаблиц, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ТипЗнч(Измерения) = Тип("Строка") Тогда
		ИзмеренияМассив = СтрРазделить(Измерения, ",", Ложь);
	Иначе
		ИзмеренияМассив = Измерения;
	КонецЕсли;
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра);
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ЗначенияИзмерений
		|ПОМЕСТИТЬ #ИмяВременнойТаблицы
		|ГДЕ
		|	ЛОЖЬ";
		ЗначенияИзмерений = "";
		Для Каждого ИзмерениеСтр Из ИзмеренияМассив Цикл
			
			Измерение = МетаданныеОбъекта.Измерения.Найти(ИзмерениеСтр);
			
			ЗначенияИзмерений = ЗначенияИзмерений + "
			|	&ПустоеЗначениеИзмерения"+ Измерение.Имя + " КАК " + Измерение.Имя + ",";
			Запрос.УстановитьПараметр("ПустоеЗначениеИзмерения"+ Измерение.Имя, Измерение.Тип.ПривестиЗначение()); 
			
		КонецЦикла;
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ЗначенияИзмерений
		|ПОМЕСТИТЬ #ИмяВременнойТаблицы
		|ИЗ
		|	#ТаблицаИзменения КАК ТаблицаИзменений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаРегистра КАК ТаблицаРегистра
		|		ПО ТаблицаИзменений.Регистратор = ТаблицаРегистра.Регистратор
		|ГДЕ
		|	&УсловиеОтбораУзла";
		
		ЗначенияИзмерений = "";
		Для Каждого Измерение Из ИзмеренияМассив Цикл
			
			ЗначенияИзмерений = ЗначенияИзмерений + "
			|	ТаблицаРегистра." + Измерение + " КАК " + Измерение + ","; 	
			
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаИзменения", ПолноеИмяРегистра + ".Изменения");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаРегистра", ПолноеИмяРегистра);
		
		Если Очередь = Неопределено Тогда
			УсловиеОтбораУзла = "	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы ";
		Иначе
			УсловиеОтбораУзла = "	ТаблицаИзменений.Узел В (&Узлы) ";
			Запрос.УстановитьПараметр("Узлы", УзлыМеньшейОчереди(Очередь));
		КонецЕсли;	
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораУзла", УсловиеОтбораУзла);
		
		
	КонецЕсли;
	
	ИмяОбъекта = СтрРазделить(ПолноеИмяРегистра, ".")[1];
	Если ПустаяСтрока(ДополнительныеПараметры.ИмяВременнойТаблицы) Тогда
		ИмяВременнойТаблицы =  "ВТЗаблокировано" + ИмяОбъекта;
	Иначе
		ИмяВременнойТаблицы = ДополнительныеПараметры.ИмяВременнойТаблицы;
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	
	ЗначенияИзмерений = Лев(ЗначенияИзмерений, СтрДлина(ЗначенияИзмерений) - 1);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗначенияИзмерений", ЗначенияИзмерений);
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура("ЕстьЗаписиВоВременнойТаблице,ИмяВременнойТаблицы", Ложь, "");
	Результат.ИмяВременнойТаблицы = ИмяВременнойТаблицы;
	Результат.ЕстьЗаписиВоВременнойТаблице = РезультатЗапроса.Выгрузить()[0].Количество <> 0;
			
	Возврат Результат;
	
КонецФункции

// Функция для проверки объектов при открытии форм и перед записью. Может использоваться как функция проверки по умолчанию, если
// достаточно логики - заблокированные объекты зарегистрированы на узлах плана обмена ОбновлениеИнформационнойБазы.
//  Данные           - ЛюбаяСсылка, НаборЗаписей, Объект, ДанныеФормыСтруктура - ссылка на объект, сам объект
//                     или набор записей, который необходимо проверить.
//  МетаданныеИОтбор - Структура - см. ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным.
//
Функция ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор) Экспорт
	
	Возврат МожноЧитатьИМенять(Неопределено, МетаданныеИОтбор.Данные,,МетаданныеИОтбор); 
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции.

// Проверить необходимость обновления информационной базы при смене версии конфигурации.
//
// Возвращаемое значение:
//   Булево
//
Функция НеобходимоОбновлениеИнформационнойБазы() Экспорт
	
	Возврат ОбновлениеИнформационнойБазыСлужебныйПовтИсп.НеобходимоОбновлениеИнформационнойБазы();
	
КонецФункции

// Возвращает Истина, если в данный момент выполняется обновление ИБ.
//
// Возвращаемое значение:
//   Булево
//
Функция ВыполняетсяОбновлениеИнформационнойБазы() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат НеобходимоОбновлениеИнформационнойБазы();
	КонецЕсли;
	
	Возврат ПараметрыСеанса.ВыполняетсяОбновлениеИБ;
	
КонецФункции

// Возвращает пустую таблицу обработчиков обновления и первоначального заполнения ИБ.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица с колонками:
//     * НачальноеЗаполнение - Булево - если Истина, то обработчик должен срабатывать при запуске на "пустой" базе.
//     * Версия              - Строка - например, "2.1.3.39". Номер версии конфигурации, при переходе
//                                      на которую должна быть выполнена процедура-обработчик обновления.
//                                      Если указана пустая строка, то это обработчик только для начального заполнения
//                                      (должно быть указано свойство НачальноеЗаполнение).
//     * Процедура           - Строка - полное имя процедуры-обработчика обновления/начального заполнения. 
//                                      Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьНовыйРеквизит"
//                                      Обязательно должна быть экспортной.
//
//     * ВыполнятьВГруппеОбязательных - Булево - следует указывать, если обработчик требуется
//                                      выполнять в одной группе с обработчиками на версии "*".
//                                      При этом, возможно менять порядок выполнения обработчика
//                                      относительно других путем изменения приоритета.
//     * Приоритет           - Число  - для внутреннего использования.
//
//     * ОбщиеДанные         - Булево - если Истина, то обработчик должен срабатывать до
//                                      выполнения любых обработчиков, использующих разделенные данные.
//                                      Допустимо указывать только для обработчиков с режимом выполнения Монопольно и Оперативно.
//                                      Если указать значение Истина для обработчика с режимом
//                                      выполнения Отложенно, будет выдано исключение.
//     * УправлениеОбработчиками - Булево - если Истина, то обработчик должен иметь параметр типа структура, в котором
//                                          есть свойство.
//                                      РазделенныеОбработчики - таблица значений со структурой, возвращаемой этой
//                                                               функцией.
//                                      При этом колонка Версия игнорируется. В случае необходимости выполнения
//                                      разделенного обработчика, в данную таблицу необходимо добавить строку с
//                                      описанием процедуры обработчика.
//                                      Имеет смысл только для обязательных (Версия = *) обработчиков обновления 
//                                      с установленным флагом ОбщиеДанные.
//     * Комментарий         - Строка - описание действий, выполняемых обработчиком обновления.
//     * РежимВыполнения     - Строка - режим выполнения обработчика обновления. Допустимые значения:
//                                      Монопольно, Отложенно, Оперативно. Если значение не заполнено, обработчик
//                                      считается монопольным.
//     * МонопольныйРежим    - Неопределено, Булево - если указано Неопределено, то обработчик 
//                                      должен безусловно выполняться в монопольном режиме.
//                                      Для обработчиков перехода на конкретную версию (версия <> *):
//                                        Ложь   - обработчик не требует монопольного режима для выполнения.
//                                        Истина - обработчик требует монопольного режима для выполнения.
//                                      Для обязательных обработчиков обновления (Версия = "*"):
//                                        Ложь   - обработчик не требует монопольного режима.
//                                        Истина - обработчик может требовать монопольного режима для выполнения.
//                                                 В такие обработчики передается параметр типа структура
//                                                 со свойством МонопольныйРежим (типа Булево).
//                                                 При запуске обработчика в монопольном режиме передается
//                                                 значение Истина. В этом случае обработчик должен выполнить
//                                                 требуемые действия по обновлению. Изменение параметра
//                                                 в теле обработчика игнорируется.
//                                                 При запуске обработчика в немонопольном режиме передается
//                                                 значение Ложь. В этом случае обработчик не должен вносить никакие
//                                                 изменения в ИБ.
//                                                 Если в результате анализа выясняется что обработчику требуется
//                                                 изменить данные ИБ следует установить значение параметра в.
//                                                 Истина и прекратить выполнение обработчика.
//                                                 В этом случае оперативное (немонопольное обновление ИБ) будет
//                                                 отменено и выдана ошибка с требованием выполнить обновление в
//                                                 монопольном режиме.
//     * Идентификатор       - УникальныйИдентификатор - необходимо заполнять для обработчиков отложенного обновления,
//                                                 для остальных заполнение не требуется. Требуется для идентификации
//                                                 обработчика в случае его переименования.
//     * БлокируемыеОбъекты  - Строка - необходимо заполнять для обработчиков отложенного обновления,
//                                      для остальных заполнение не требуется. Полные имена объектов через запятую, 
//                                      которые следует блокировать от изменения до завершения процедуры обработки данных.
//     * ПроцедураПроверки   - Строка - необходимо заполнять для обработчиков отложенного обновления,
//                                      для остальных заполнение не требуется. Имя функции, которая для переданного объекта 
//                                      определяет, завершена ли для него процедура обработки данных. 
//                                      Если переданный объект обработан, то следует вернуть значение Истина. 
//                                      Вызывается из процедуры ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан. 
//                                      Параметры, передаваемые в функцию:
//                                         Параметры - Структура - см. ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным.
//     * ЗапускатьТолькоВГлавномУзле  - Булево - только для обработчиков отложенного обновления с режимом выполнения Параллельно.
//                                      Указать Истина, если обработчик обновления должен выполняться только в главном узле РИБ.
//     * ЗапускатьИВПодчиненномУзлеРИБСФильтрами - Булево - только для обработчиков отложенного обновления с режимом выполнения Параллельно.
//                                      Указать Истина, если обработчик обновления должен также выполняться в подчиненном узле РИБ с фильтрами.
//
Функция НоваяТаблицаОбработчиковОбновления() Экспорт
	
	Обработчики = Новый ТаблицаЗначений;
	// Основные свойства.
	Обработчики.Колонки.Добавить("НачальноеЗаполнение", Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("Версия",    Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Процедура", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("РежимВыполнения", Новый ОписаниеТипов("Строка"));
	// Дополнительные свойства (для библиотек).
	Обработчики.Колонки.Добавить("ВыполнятьВГруппеОбязательных", Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)));
	// Поддержка модели сервиса.
	Обработчики.Колонки.Добавить("ОбщиеДанные",             Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("УправлениеОбработчиками", Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("МонопольныйРежим");
	// Для отложенных обработчиков обновления.
	Обработчики.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	Обработчики.Колонки.Добавить("ПроцедураПроверки", Новый ОписаниеТипов("Строка"));
	Обработчики.Колонки.Добавить("БлокируемыеОбъекты", Новый ОписаниеТипов("Строка"));
	Обработчики.Колонки.Добавить("ЗапускатьТолькоВГлавномУзле",  Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("ЗапускатьИВПодчиненномУзлеРИБСФильтрами",  Новый ОписаниеТипов("Булево"));
	
	// Для поддержки параллельного отложенного обновления.
	Обработчики.Колонки.Добавить("ПроцедураЗаполненияДанныхОбновления", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("ОчередьОтложеннойОбработки",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4)));
	
	// Устарело. Обратная совместимость до редакции "2.2".
	Обработчики.Колонки.Добавить("Опциональный");
	
	Возврат Обработчики;
	
КонецФункции

// Выполнить обработчики обновления из списка ОбработчикиОбновления 
// для библиотеки ИдентификаторБиблиотеки до версии ВерсияМетаданныхИБ.
//
// Параметры:
//   ИдентификаторБиблиотеки  - Строка       - имя конфигурации или идентификатор библиотеки.
//   ВерсияМетаданныхИБ       - Строка       - версия метаданных, до которой необходимо выполнить обновление.
//   ОбработчикиОбновления    - Соответствие - список обработчиков обновления.
//
// Возвращаемое значение:
//   ДеревоЗначений   - выполненные обработчики обновления.
//
Функция ВыполнитьИтерациюОбновления(Знач ИдентификаторБиблиотеки, Знач ВерсияМетаданныхИБ, 
	Знач ОбработчикиОбновления, Знач ХодВыполненияОбработчиков, Знач ОперативноеОбновление = Ложь) Экспорт
	
	ИтерацияОбновления = ОбновлениеИнформационнойБазыСлужебный.ИтерацияОбновления(ИдентификаторБиблиотеки, 
		ВерсияМетаданныхИБ, ОбработчикиОбновления);
		
	Параметры = Новый Структура;
	Параметры.Вставить("ХодВыполненияОбработчиков", ХодВыполненияОбработчиков);
	Параметры.Вставить("ОперативноеОбновление", ОперативноеОбновление);
	Параметры.Вставить("ВФоне", Ложь);
	
	Возврат ОбновлениеИнформационнойБазыСлужебный.ВыполнитьИтерациюОбновления(ИтерацияОбновления, Параметры);
	
КонецФункции

// Выполнить неинтерактивное обновление данных ИБ.
// Для вызова через внешнее соединение.
// 
// Для использования в других библиотеках и конфигурациях.
//
// Параметры:
//  ВыполнятьОтложенныеОбработчики - Булево - если Истина, отложенное обновление будет выполнено
//    в основном цикле обновления. Только для клиент-серверного режима работы.
//
// Возвращаемое значение:
//  Строка -  признак выполнения обработчиков обновления:
//           "Успешно", "НеТребуется", "ОшибкаУстановкиМонопольногоРежима".
//
Функция ВыполнитьОбновлениеИнформационнойБазы(ВыполнятьОтложенныеОбработчики = Ложь) Экспорт
	
	Возврат ОбновлениеИнформационнойБазыСлужебныйВызовСервера.ВыполнитьОбновлениеИнформационнойБазы(,, ВыполнятьОтложенныеОбработчики);
	
КонецФункции

// Удаляет отложенный обработчик из очереди выполняемых обработчиков на новую версию.
// Следует использовать, например, при переводе отложенного обработчика
// на монопольный (оперативный) режим выполнения.
// Для этого необходимо добавить новый разделенный обработчик обновления с режимом выполнения
// "Оперативно" и признаком "ОбщиеДанные = Ложь", после чего разместить в нем вызов данного метода.
//
// Параметры:
//  ИмяОбработчика - Строка - полное имя процедуры отложенного обработчика.
//
Процедура УдалитьОтложенныйОбработчикИзОчереди(ИмяОбработчика) Экспорт
	
	СведенияОбОбновлении = ОбновлениеИнформационнойБазыСлужебный.СведенияОбОбновленииИнформационнойБазы();
	
	ОтобранныйОбработчик = СведенияОбОбновлении.ДеревоОбработчиков.Строки.НайтиСтроки(Новый Структура("ИмяОбработчика", ИмяОбработчика), Истина);
	Если ОтобранныйОбработчик <> Неопределено И ОтобранныйОбработчик.Количество() > 0 Тогда
		
		Для Каждого СтрокаОбработчик Из ОтобранныйОбработчик Цикл
			СтрокаОбработчик.Родитель.Строки.Удалить(СтрокаОбработчик);
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ШагОбновления Из СведенияОбОбновлении.ПланОтложенногоОбновления Цикл
		ОбработчикиШага = ШагОбновления.Обработчики;
		НайденныйОбработчик = ОбработчикиШага.Найти(ИмяОбработчика);
		Если НайденныйОбработчик <> Неопределено Тогда
			ОбработчикиШага.Удалить(НайденныйОбработчик);
		КонецЕсли;
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыСлужебный.ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
	
КонецПроцедуры

// Возвращает таблицу с версиями подсистем конфигурации.
// Для пакетной выгрузки-загрузки сведений о версиях подсистем.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * ИмяПодсистемы - Строка - имя подсистемы.
//     * Версия        - Строка - версия подсистемы.
//
Функция ВерсииПодсистем() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВерсииПодсистем.ИмяПодсистемы КАК ИмяПодсистемы,
	|	ВерсииПодсистем.Версия КАК Версия
	|ИЗ
	|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции 

// Устанавливает версии всех подсистем.
// Для пакетной выгрузки-загрузки сведений о версиях подсистем.
//
// Параметры:
//   ВерсииПодсистем - ТаблицаЗначений - таблица с колонками:
//     * ИмяПодсистемы - Строка - имя подсистемы.
//     * Версия        - Строка - версия подсистемы.
//
Процедура УстановитьВерсииПодсистем(ВерсииПодсистем) Экспорт

	НаборЗаписей = РегистрыСведений.ВерсииПодсистем.СоздатьНаборЗаписей();
	
	Для каждого Версия Из ВерсииПодсистем Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ИмяПодсистемы = Версия.ИмяПодсистемы;
		НоваяЗапись.Версия = Версия.Версия;
		НоваяЗапись.ЭтоОсновнаяКонфигурация = (Версия.ИмяПодсистемы = Метаданные.Имя);
	КонецЦикла;
	
	НаборЗаписей.Записать();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьПроверкуБлокировкиДополнительныхИсточников(Очередь, ТекстЗапроса, ПолноеИмяОбъекта, ПолноеИмяРегистра, МенеджерВременныхТаблиц, ЭтоСозданиеВременнойТаблицы, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ДополнительныеИсточникиДанных.Количество() = 0 Тогда
				
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстЗапросаСоединениеСДопИсточникамиПоШапке", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстЗапросаСоединениеСДопИсточникамиПоТЧ", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДопИсточникам", "ИСТИНА");
	
	Иначе	
		Если ПолноеИмяОбъекта = Неопределено Тогда
			ТекстИсключения = НСтр("ru = 'Ошибка вызова функции %ИмяФункции%: не передано имя документа, но переданы дополнительные источники данных.'");
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяФункции%", "ОбновлениеИнформационнойБазы.ДобавитьПроверкуБлокировкиДополнительныхИсточников");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		МетаданныеДокумента = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
		ТекстЗапросаСоединениеСДопИсточникамиПоШапке = "";
		ТекстЗапросаСоединениеСДопИсточникамиПоТЧ = "";
		ТекстыЗапросаСоединениеСДопИсточникамиПоТЧ = Новый Соответствие;
		УсловиеПоДопИсточникам = "ИСТИНА";
		
		УсловиеПоДопИсточникамТЧ = "ЛОЖЬ";
		
		ВременныеТаблицыЗаблокированныхДопИсточников = Новый Соответствие;
		
		Для Каждого КлючЗначение Из ДополнительныеПараметры.ДополнительныеИсточникиДанных Цикл
			
			ИсточникДанных = КлючЗначение.Ключ;
			
			Если СтрНайти(ИсточникДанных, ".") > 0 Тогда
				ЧастиИмени = СтрРазделить(ИсточникДанных, ".");
				ИмяТЧ = ЧастиИмени[0];
				ИмяРеквизита = ЧастиИмени[1];
			Иначе
				ИмяТЧ = "";
				ИмяРеквизита = ИсточникДанных;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяТЧ) Тогда
				ТипыИсточника = МетаданныеДокумента.ТабличныеЧасти[ИмяТЧ].Реквизиты[ИмяРеквизита].Тип.Типы();
			Иначе
				ТипыИсточника = МетаданныеДокумента.Реквизиты[ИмяРеквизита].Тип.Типы();
			КонецЕсли;	
			
			Для Каждого ТипИсточника Из ТипыИсточника Цикл
				
				Если ЭтоПримитивныйТип(ТипИсточника) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИмяТЧ)
					И СтрНайти(ТекстЗапросаСоединениеСДопИсточникамиПоТЧ, "КАК ТЧДокумента" + ИмяТЧ) = 0 Тогда
					
					Если ПолноеИмяРегистра <> Неопределено Тогда
						
						ТекстЗапросаСоединениеСДопИсточникамиПоТЧ = ТекстЗапросаСоединениеСДопИсточникамиПоТЧ + "
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ПолноеИмяДокумента." + ИмяТЧ + " КАК ТЧДокумента" + ИмяТЧ + "
						|#ТекстЗапросаСоединениеСДопИсточникамиПоТЧ" + ИмяТЧ + "
						|		ПО ТаблицаРегистраИзменения.Регистратор = ТЧДокумента" + ИмяТЧ + ".Ссылка
						|";
						
					Иначе
						
						ТекстЗапросаСоединениеСДопИсточникамиПоТЧ = ТекстЗапросаСоединениеСДопИсточникамиПоТЧ + "
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ПолноеИмяДокумента." + ИмяТЧ + " КАК ТЧДокумента" + ИмяТЧ + "
						|#ТекстЗапросаСоединениеСДопИсточникамиПоТЧ" + ИмяТЧ + "
						|		ПО ТаблицаИзменения.Ссылка = ТЧДокумента" + ИмяТЧ + ".Ссылка
						|";
						
					КонецЕсли;
				КонецЕсли;
				
				МетаданныеИсточника = Метаданные.НайтиПоТипу(ТипИсточника);
				
				ИмяВТЗаблокированногоДопИсточника = ВременныеТаблицыЗаблокированныхДопИсточников.Получить(МетаданныеИсточника);
				
				Если ИмяВТЗаблокированногоДопИсточника = Неопределено Тогда
					ПолноеИмяИсточника = МетаданныеИсточника.ПолноеИмя();
					ИмяВТЗаблокированногоДопИсточника = "ВТЗаблокировано" + СтрЗаменить(ПолноеИмяИсточника,".","_");
					
					ДополнительныеПараметрыСозданияВТ = ДополнительныеПараметрыВыборкиДанныхДляОбработки();
					ДополнительныеПараметрыСозданияВТ.ИмяВременнойТаблицы = ИмяВТЗаблокированногоДопИсточника;
					СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяИсточника, МенеджерВременныхТаблиц, ДополнительныеПараметрыСозданияВТ);
					
					ВременныеТаблицыЗаблокированныхДопИсточников.Вставить(МетаданныеИсточника, ИмяВТЗаблокированногоДопИсточника);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИмяТЧ) Тогда
					
					ТекстЗапросаСоединениеСДопИсточникамиПоТЧИмяТЧ = ТекстыЗапросаСоединениеСДопИсточникамиПоТЧ.Получить(ИмяТЧ);
					
					Если ТекстЗапросаСоединениеСДопИсточникамиПоТЧИмяТЧ = Неопределено Тогда
						ТекстЗапросаСоединениеСДопИсточникамиПоТЧИмяТЧ = "";
					КонецЕсли;
					
					ТекстЗапросаСоединениеСДопИсточникамиПоТЧИмяТЧ = ТекстЗапросаСоединениеСДопИсточникамиПоТЧИмяТЧ + "
					|			ЛЕВОЕ СОЕДИНЕНИЕ #ИмяВТ КАК #СинонимВТ
					|			ПО ТЧДокумента" + ИмяТЧ + "." + ИмяРеквизита + " = #СинонимВТ.Ссылка";
					
					ТекстЗапросаСоединениеСДопИсточникамиПоТЧИмяТЧ = СтрЗаменить(ТекстЗапросаСоединениеСДопИсточникамиПоТЧИмяТЧ,
																				"#ИмяВТ",
																				ИмяВТЗаблокированногоДопИсточника);
					СинонимВТЗаблокированногоДопИсточника = ИмяВТЗаблокированногоДопИсточника + ИмяТЧ + ИмяРеквизита;															 
					ТекстЗапросаСоединениеСДопИсточникамиПоТЧИмяТЧ = СтрЗаменить(ТекстЗапросаСоединениеСДопИсточникамиПоТЧИмяТЧ,
																				"#СинонимВТ",
																				СинонимВТЗаблокированногоДопИсточника);
					ТекстыЗапросаСоединениеСДопИсточникамиПоТЧ.Вставить(ИмяТЧ, ТекстЗапросаСоединениеСДопИсточникамиПоТЧИмяТЧ);
					
					УсловиеПоДопИсточникамТЧ = УсловиеПоДопИсточникамТЧ + "
					|	ИЛИ НЕ " + СинонимВТЗаблокированногоДопИсточника + ".Ссылка ЕСТЬ NULL ";
				Иначе
					Если ПолноеИмяРегистра <> Неопределено Тогда
						ТекстЗапросаСоединениеСДопИсточникамиПоШапке = ТекстЗапросаСоединениеСДопИсточникамиПоШапке + "
						|			ЛЕВОЕ СОЕДИНЕНИЕ #ИмяВТ КАК #СинонимВТ
						|			ПО ТаблицаДокумента." + ИмяРеквизита + " = #СинонимВТ.Ссылка";
					Иначе
						ТекстЗапросаСоединениеСДопИсточникамиПоШапке = ТекстЗапросаСоединениеСДопИсточникамиПоШапке + "
						|			ЛЕВОЕ СОЕДИНЕНИЕ #ИмяВТ КАК #СинонимВТ
						|			ПО ТаблицаОбъекта." + ИмяРеквизита + " = #СинонимВТ.Ссылка";
					КонецЕсли;
					ТекстЗапросаСоединениеСДопИсточникамиПоШапке = СтрЗаменить(ТекстЗапросаСоединениеСДопИсточникамиПоШапке,
																				"#ИмяВТ",
																				ИмяВТЗаблокированногоДопИсточника);
					СинонимВТЗаблокированногоДопИсточника = ИмяВТЗаблокированногоДопИсточника + "Шапка";															 
					ТекстЗапросаСоединениеСДопИсточникамиПоШапке = СтрЗаменить(ТекстЗапросаСоединениеСДопИсточникамиПоШапке,
																				"#СинонимВТ",
																				СинонимВТЗаблокированногоДопИсточника);
				
					УсловиеПоДопИсточникам = УсловиеПоДопИсточникам + "
					|	И " + СинонимВТЗаблокированногоДопИсточника + ".Ссылка ЕСТЬ NULL ";
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Если Не ПустаяСтрока(ТекстЗапросаСоединениеСДопИсточникамиПоТЧ) Тогда
			Для Каждого ТекстСоединения Из ТекстыЗапросаСоединениеСДопИсточникамиПоТЧ Цикл
				
				ТекстЗапросаСоединениеСДопИсточникамиПоТЧ = СтрЗаменить(ТекстЗапросаСоединениеСДопИсточникамиПоТЧ,
				"#ТекстЗапросаСоединениеСДопИсточникамиПоТЧ" + ТекстСоединения.Ключ,
				ТекстСоединения.Значение);
				
			КонецЦикла;
			
			Если ПолноеИмяРегистра <> Неопределено Тогда
				ТекстЗапросаВременнойТаблицыЗаблокированныхПоТЧ =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ТаблицаРегистраИзменения.Регистратор КАК Ссылка
				|ПОМЕСТИТЬ ЗаблокированныеПоТЧ
				|ИЗ
				|	#ТаблицаИзменения КАК ТаблицаРегистраИзменения
				|       #ТекстЗапросаСоединениеСДопИсточникамиПоТЧ
				|ГДЕ
				|	&УсловиеПоДопИсточникамТЧ";
			Иначе
				ТекстЗапросаВременнойТаблицыЗаблокированныхПоТЧ =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ТаблицаИзменения.Ссылка КАК Ссылка
				|ПОМЕСТИТЬ ЗаблокированныеПоТЧ
				|ИЗ
				|	#ТаблицаИзменения КАК ТаблицаИзменения
				|       #ТекстЗапросаСоединениеСДопИсточникамиПоТЧ
				|ГДЕ
				|	&УсловиеПоДопИсточникамТЧ";
			КонецЕсли;
			
			ТекстЗапросаВременнойТаблицыЗаблокированныхПоТЧ = СтрЗаменить(ТекстЗапросаВременнойТаблицыЗаблокированныхПоТЧ,
																			"#ТекстЗапросаСоединениеСДопИсточникамиПоТЧ",
																			ТекстЗапросаСоединениеСДопИсточникамиПоТЧ);
			
			ТекстЗапросаВременнойТаблицыЗаблокированныхПоТЧ = СтрЗаменить(ТекстЗапросаВременнойТаблицыЗаблокированныхПоТЧ,
																			"&УсловиеПоДопИсточникамТЧ",
																			УсловиеПоДопИсточникамТЧ);
			Если ПолноеИмяРегистра <> Неопределено Тогда
				ТекстЗапросаВременнойТаблицыЗаблокированныхПоТЧ = СтрЗаменить(ТекстЗапросаВременнойТаблицыЗаблокированныхПоТЧ,
																				"#ТаблицаИзменения",
																				ПолноеИмяРегистра + ".Изменения");	
			Иначе
				ТекстЗапросаВременнойТаблицыЗаблокированныхПоТЧ = СтрЗаменить(ТекстЗапросаВременнойТаблицыЗаблокированныхПоТЧ,
																				"#ТаблицаИзменения",
																				ПолноеИмяОбъекта + ".Изменения");	
			КонецЕсли;																
			
			ТекстЗапросаВременнойТаблицыЗаблокированныхПоТЧ = СтрЗаменить(ТекстЗапросаВременнойТаблицыЗаблокированныхПоТЧ,
																			"#ПолноеИмяДокумента",
																			ПолноеИмяОбъекта);
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапросаВременнойТаблицыЗаблокированныхПоТЧ;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.Выполнить();
			
			Если ПолноеИмяРегистра <> Неопределено Тогда
				ТекстЗапросаСоединениеСДопИсточникамиПоТЧ = "
				|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаблокированныеПоТЧ КАК ЗаблокированныеПоТЧ 
				|		ПО ТаблицаРегистраИзменения.Регистратор = ЗаблокированныеПоТЧ.Ссылка
				|";
			Иначе
				ТекстЗапросаСоединениеСДопИсточникамиПоТЧ = "
				|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаблокированныеПоТЧ КАК ЗаблокированныеПоТЧ 
				|		ПО ТаблицаИзменения.Ссылка = ЗаблокированныеПоТЧ.Ссылка
				|";
			КонецЕсли;																
			
			УсловиеПоДопИсточникам = УсловиеПоДопИсточникам + "
			|	И ЗаблокированныеПоТЧ.Ссылка ЕСТЬ NULL ";
			
			ВременныеТаблицыЗаблокированныхДопИсточников.Вставить("ЗаблокированныеПоТЧ", "ЗаблокированныеПоТЧ");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗапросаСоединениеСДопИсточникамиПоШапке) Тогда 
			Если ЭтоСозданиеВременнойТаблицы
				И ПолноеИмяРегистра <> Неопределено Тогда
				ТекстЗапросаСоединениеСДопИсточникамиПоШапке = СтрЗаменить("
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ПолноеИмяДокумента КАК ТаблицаДокумента
				|       	#ТекстЗапросаСоединениеСДопИсточникамиПоШапке
				|		ПО ТаблицаРегистраИзменения.Регистратор = ТаблицаДокумента.Ссылка",
				"#ТекстЗапросаСоединениеСДопИсточникамиПоШапке",
				ТекстЗапросаСоединениеСДопИсточникамиПоШапке);
			КонецЕсли;
		КонецЕсли;	
			
		ШаблонТекстаЗапросаУничтоженияВременнойТаблицы = "
		|УНИЧТОЖИТЬ
		|	#ИмяВТ
		|";
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
		Для Каждого КлючЗначение Из ВременныеТаблицыЗаблокированныхДопИсточников Цикл
			
			ТекстЗапросаУничтоженияВременнойТаблицы = СтрЗаменить(ШаблонТекстаЗапросаУничтоженияВременнойТаблицы, "#ИмяВТ", КлючЗначение.Значение);
			
			ТекстыЗапроса.Добавить(ТекстЗапросаУничтоженияВременнойТаблицы);
			
		КонецЦикла;
		
		ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ";");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстЗапросаСоединениеСДопИсточникамиПоШапке", ТекстЗапросаСоединениеСДопИсточникамиПоШапке);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстЗапросаСоединениеСДопИсточникамиПоТЧ", ТекстЗапросаСоединениеСДопИсточникамиПоТЧ);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДопИсточникам", УсловиеПоДопИсточникам);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПолноеИмяДокумента", ПолноеИмяОбъекта);

	КонецЕсли;
КонецПроцедуры

Функция ЭтоПримитивныйТип(ПроверяемыйТип)
	
	Если ПроверяемыйТип = Тип("Неопределено")
		Или ПроверяемыйТип = Тип("Булево")
		Или ПроверяемыйТип = Тип("Строка")
		Или ПроверяемыйТип = Тип("Число")
		Или ПроверяемыйТип = Тип("Дата")
		Или ПроверяемыйТип = Тип("УникальныйИдентификатор") Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьПроверкуБлокировкиДополнительныхИсточниковДляНезависимогоРегистра(Очередь, ТекстЗапроса, ПолноеИмяРегистра, МенеджерВременныхТаблиц, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ДополнительныеИсточникиДанных.Количество() = 0 Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстЗапросаСоединениеСДопИсточниками", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДопИсточникам", "ИСТИНА");
	
	Иначе
		
		МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра);
		ТекстЗапросаСоединениеСДопИсточниками = "";
		УсловиеПоДопИсточникам = "ИСТИНА";
		
		ШаблонТекстаЗапросаУничтоженияВременнойТаблицы = "
		|УНИЧТОЖИТЬ
		|	#ИмяВТ
		|";
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
		Для Каждого КлючЗначение Из ДополнительныеПараметры.ДополнительныеИсточникиДанных Цикл
			
			ИсточникДанных = КлючЗначение.Ключ;
			
			ТипыИсточника = МетаданныеРегистра.Измерения[ИсточникДанных].Тип.Типы();
			МассивОбъектовМетаданных = Новый Массив;
			
			Для Каждого ТипИсточника Из ТипыИсточника Цикл
				
				Если ЭтоПримитивныйТип(ТипИсточника) Тогда
					Продолжить;
				КонецЕсли;
				
				МассивОбъектовМетаданных.Добавить(Метаданные.НайтиПоТипу(ТипИсточника));
				
			КонецЦикла;
			
			ДополнительныеПараметрыСозданияВТ = ДополнительныеПараметрыВыборкиДанныхДляОбработки();
			ИмяВременнойТаблицы = "ВТЗаблокировано" + ИсточникДанных;
			ДополнительныеПараметрыСозданияВТ.ИмяВременнойТаблицы = ИмяВременнойТаблицы;
			
			СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок(Очередь, МассивОбъектовМетаданных, МенеджерВременныхТаблиц, ДополнительныеПараметрыСозданияВТ);
			
			ТекстЗапросаСоединениеСДопИсточниками = ТекстЗапросаСоединениеСДопИсточниками + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВременнойТаблицы + " КАК " + ИмяВременнойТаблицы + "
			|		ПО ТаблицаИзменений." + ИсточникДанных + " = " + ИмяВременнойТаблицы + ".Ссылка";
			
			УсловиеПоДопИсточникам = УсловиеПоДопИсточникам + "
			|		И "  + ИмяВременнойТаблицы + ".Ссылка ЕСТЬ NULL ";
			
			ТекстЗапросаУничтоженияВременнойТаблицы = СтрЗаменить(ШаблонТекстаЗапросаУничтоженияВременнойТаблицы, "#ИмяВТ", ИмяВременнойТаблицы);
			ТекстыЗапроса.Добавить(ТекстЗапросаУничтоженияВременнойТаблицы);
			
		КонецЦикла;
		
		ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ";");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстЗапросаСоединениеСДопИсточниками", ТекстЗапросаСоединениеСДопИсточниками);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДопИсточникам", УсловиеПоДопИсточникам);

	КонецЕсли;
КонецПроцедуры

Процедура УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеНабора, УстанавливаемыеОтборы)
	Для Каждого Измерение Из МетаданныеНабора.Измерения Цикл
		
		ЕстьОтборПоИзмерению = Ложь;
		
		Если ТипЗнч(УстанавливаемыеОтборы) = Тип("ТаблицаЗначений") Тогда
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Колонки.Найти(Измерение.Имя) <> Неопределено;
		Иначе //Отбор
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы[Измерение.Имя].Использование;	
		КонецЕсли;
		
		Если Не ЕстьОтборПоИзмерению Тогда
			ПустоеЗначение = Измерение.Тип.ПривестиЗначение();
			Набор.Отбор[Измерение.Имя].Установить(ПустоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Если МетаданныеНабора.ОсновнойОтборПоПериоду Тогда
		
		Если ТипЗнч(УстанавливаемыеОтборы) = Тип("ТаблицаЗначений") Тогда
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Колонки.Найти("Период") <> Неопределено;
		Иначе //Отбор
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Период.Использование;
		КонецЕсли;
		
		Если Не ЕстьОтборПоИзмерению Тогда
			ПустоеЗначение = '00010101';
			Набор.Отбор.Период.Установить(ПустоеЗначение);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ЗарегистрироватьИзменения(Параметры, Узел, Данные, ВидДанных, ПолноеИмяОбъекта = "")
	
	ПланыОбмена.ЗарегистрироватьИзменения(Узел, Данные);
	
	Если Параметры.Свойство("ДанныеОбработчика") Тогда
		Если Не ЗначениеЗаполнено(ПолноеИмяОбъекта) Тогда
			ПолноеИмя = Данные.Метаданные().ПолноеИмя();
		Иначе
			ПолноеИмя = ПолноеИмяОбъекта;
		КонецЕсли;
		
		ДанныеПоОбъекту = Параметры.ДанныеОбработчика[ПолноеИмя];
		Если ДанныеПоОбъекту = Неопределено Тогда
			ДанныеПоОбъекту = Новый Структура;
			ДанныеПоОбъекту.Вставить("Количество", 1);
			ДанныеПоОбъекту.Вставить("Очередь", Параметры.Очередь);
			Параметры.ДанныеОбработчика.Вставить(ПолноеИмя, ДанныеПоОбъекту);
		Иначе
			Параметры.ДанныеОбработчика[ПолноеИмя].Количество = ДанныеПоОбъекту.Количество + 1;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными")
		И СтандартныеПодсистемыПовтИсп.ИспользуетсяРИБ("СФильтром")
		И Не Параметры.ПовторнаяРегистрация
		И Не ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		МодульОбменДаннымиСервер.ЗаписатьДанныеДляОбновленияВФайл(Параметры, Данные, ВидДанных, ПолноеИмяОбъекта);
	КонецЕсли;
	
КонецПроцедуры

Функция УзлыМеньшейОчереди(Очередь)
	Возврат ПланыОбмена.ОбновлениеИнформационнойБазы.УзлыМеньшейОчереди(Очередь);
КонецФункции

Функция ОчередьСсылкой(Очередь)
	Возврат ПланыОбмена.ОбновлениеИнформационнойБазы.УзелПоОчереди(Очередь);
КонецФункции

#КонецОбласти