////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

///////////////////////////////////////////////////////////////////////////////
// Инициализации параметров сеанса.

// Для вызова из обработчика УстановкаПараметровСеанса модуля сеанса.
//
// Параметры:
//  ИменаПараметровСеанса - Массив, Неопределено - в массиве имена параметров сеанса для инициализации.
//
//  Возвращает массив имен установленных параметров сеанса.
//
Функция УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт
	
	// Параметры сеанса, инициализация которых требует обращения к одним и тем же данным
	// следует инициализировать сразу группой. Для того, чтобы избежать их повторной инициализации,
	// имена уже установленных параметров сеанса сохраняются в массиве УстановленныеПараметры.
	УстановленныеПараметры = Новый Массив;
	
	Если ИменаПараметровСеанса = Неопределено Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(Новый Соответствие);
		ПараметрыСеанса.УстановленныеРасширения = КонтрольныеСуммыРасширений();
		Если ТекущийРежимЗапуска() <> Неопределено Тогда
			Справочники.ВерсииРасширений.ЗарегистрироватьИспользованиеВерсииРасширений();
		КонецЕсли;
		
		// При установке соединения с информационной базой до вызова всех остальных обработчиков.
		ПередЗапускомПрограммы();
		Возврат УстановленныеПараметры;
	КонецЕсли;
	
	Если ИменаПараметровСеанса.Найти("ПараметрыКлиентаНаСервере") <> Неопределено Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(Новый Соответствие);
		УстановленныеПараметры.Добавить("ПараметрыКлиентаНаСервере");
	КонецЕсли;
	
	Если ИменаПараметровСеанса.Найти("УстановленныеРасширения") <> Неопределено Тогда
		ПараметрыСеанса.УстановленныеРасширения = КонтрольныеСуммыРасширений();
		УстановленныеПараметры.Добавить("УстановленныеРасширения");
	КонецЕсли;
	
	Если ИменаПараметровСеанса.Найти("ВерсияРасширений") <> Неопределено Тогда
		ПараметрыСеанса.ВерсияРасширений = Справочники.ВерсииРасширений.ВерсияРасширений();
		УстановленныеПараметры.Добавить("ВерсияРасширений");
	КонецЕсли;
	
	Если ИменаПараметровСеанса.Найти("АдресСвойствРасширений") <> Неопределено Тогда
		Справочники.ИдентификаторыОбъектовМетаданных.УстановитьПараметрСеансаАдресСвойствРасширений();
		УстановленныеПараметры.Добавить("АдресСвойствРасширений");
	КонецЕсли;
	
	Если ИменаПараметровСеанса.Найти("БуферОбмена") <> Неопределено Тогда
		ПараметрыСеанса.БуферОбмена = Новый ФиксированнаяСтруктура(Новый Структура("Источник, Данные"));
		УстановленныеПараметры.Добавить("БуферОбмена");
	КонецЕсли;
	
	Обработчики = Новый Соответствие;
	ОбновлениеИнформационнойБазыСлужебный.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
		МодульДатыЗапретаИзмененияСлужебный = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзмененияСлужебный");
		МодульДатыЗапретаИзмененияСлужебный.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		МодульОценкаПроизводительностиСлужебный = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительностиСлужебный");
		МодульОценкаПроизводительностиСлужебный.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		МодульОбменДаннымиСервер.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Пользователи") Тогда
		МодульПользователиСлужебный = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебный");
		МодульПользователиСлужебный.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РегламентныеЗадания") Тогда
		МодульРегламентныеЗаданияСлужебный = ОбщегоНазначения.ОбщийМодуль("РегламентныеЗаданияСлужебный");
		МодульРегламентныеЗаданияСлужебный.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
		МодульУправлениеДоступомСлужебный.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	КонецЕсли;
	
	ОбработчикиСобственные = Новый Соответствие;
	ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса(ОбработчикиСобственные);
	Для Каждого Запись Из ОбработчикиСобственные Цикл
		Обработчики.Вставить(Запись.Ключ, Запись.Значение);
	КонецЦикла;
	
	ВыполнитьОбработчикиУстановкиПараметровСеанса(ИменаПараметровСеанса, Обработчики, УстановленныеПараметры);
	Возврат УстановленныеПараметры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Дополнительные процедуры и функции.

// Возвращает признак, является ли конфигурация базовой.
//
// Возвращаемое значение:
//   Булево   - Истина, если конфигурация - базовая.
//
Функция ЭтоБазоваяВерсияКонфигурации() Экспорт
	
	Возврат СтрНайти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;
	
КонецФункции

// Обновляет кэши свойств метаданных, позволяющие ускорить
// открытие сеанса, а также обновление ИБ, особенно в модели сервиса.
// Их обновление происходит до обновления ИБ.
//
// Для использования в других библиотеках и конфигурациях.
//
Процедура ОбновитьВсеПараметрыРаботыПрограммы() Экспорт
	
	ОбновитьПараметрыРаботыПрограммы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Параметры администрирования информационной базы и кластера серверов.

// Получает параметры администрирования информационной базы и кластера серверов.
// Пароли при этом не получаются.
// Возвращаемое значение:
//	Структура - Содержит свойства двух структур
//	            АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(). и АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера()
//
Функция ПараметрыАдминистрирования() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
			ВызватьИсключение НСтр("ru ='Недостаточно прав для выполнения операции'");
		КонецЕсли;
		
	Иначе
		
		Если Не Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
			ВызватьИсключение НСтр("ru ='Недостаточно прав для выполнения операции'");
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыАдминистрированияИБ = Константы.ПараметрыАдминистрированияИБ.Получить().Получить();
	Если ПараметрыАдминистрированияИБ = Неопределено Тогда
		ПараметрыАдминистрированияИБ = ПараметрыАдминистрированияПоУмолчанию();
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ПрочитатьПараметрыИзСтрокиСоединения(ПараметрыАдминистрированияИБ);
	КонецЕсли;
	
	Возврат ПараметрыАдминистрированияИБ;
	
КонецФункции

// Устанавливает параметры администрирования информационной базы и кластера серверов.
// Параметры:
//	ПараметрыАдминистрированияИБ - Структура - см. возвращаемое значение процедуры ПараметрыАдминистрирования().
// 
Процедура УстановитьПараметрыАдминистрирования(ПараметрыАдминистрированияИБ) Экспорт
	
	ПараметрыАдминистрированияИБ.ПарольАдминистратораКластера = "";
	ПараметрыАдминистрированияИБ.ПарольАдминистратораИнформационнойБазы = "";
	Константы.ПараметрыАдминистрированияИБ.Установить(Новый ХранилищеЗначения(ПараметрыАдминистрированияИБ));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Аутентификации пользователя на сайте ИТС

// Возвращает логин и пароль пользователя Интернет-поддержки,
// сохраненные в информационной базе.
//
// Возвращаемое значение:
//   Структура    - текущие значения:
//     * Логин     - Строка - логин пользователя Интернет-поддержки;
//     * Пароль    - Строка - пароль пользователя Интернет-поддержки.
//   Неопределено - если параметры еще не были введены.
//
Функция ПараметрыАутентификацииНаСайте() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		Возврат МодульИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	Иначе
		Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ИдентификаторыОбъектовМетаданных");
		УстановитьПривилегированныйРежим(Истина);
		Результат = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "Логин, Пароль");
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ?(ЗначениеЗаполнено(Результат.Логин), Результат, Неопределено);
	КонецЕсли;
	
КонецФункции

// Сохраняет параметры аутентификации пользователя (логин и пароль) на пользовательском сайте 1С.
//
// Параметры:
//     СохраняемыеПараметры - Структура - сохраняемые значения:
//         * Логин  - Строка - логин пользователя Интернет-поддержки;
//         * Пароль - Строка - пароль пользователя Интернет-поддержки.
// 
Процедура СохранитьПараметрыАутентификацииНаСайте(СохраняемыеПараметры) Экспорт
	
	ОбщегоНазначенияКлиентСервер.Проверить(Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей"), 
		НСтр("ru = 'Недопустимый вызов процедуры.'"), "СтандартныеПодсистемыСервер.СохранитьПараметрыАутентификацииНаСайте");
		
	Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ИдентификаторыОбъектовМетаданных");
	Если СохраняемыеПараметры <> Неопределено Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, СохраняемыеПараметры.Пароль);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, СохраняемыеПараметры.Логин, "Логин");
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, Неопределено);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, Неопределено, "Логин");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с формами.

// Устанавливает размер шрифта заголовков групп формы для их корректного отображения в интерфейсе 8.2.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма для изменения шрифта заголовков групп;
//  ИменаГрупп - Строка - Список имен групп формы, разделенных запятыми.
//
Процедура УстановитьОтображениеЗаголовковГрупп(Форма, ИменаГрупп = "") Экспорт
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		ЖирныйШрифт = Новый Шрифт(,, Истина);
		Если НЕ ЗначениеЗаполнено(ИменаГрупп) Тогда 
			Для Каждого Элемент Из Форма.Элементы Цикл 
				Если Тип(Элемент) = Тип("ГруппаФормы")
					И Элемент.Вид = ВидГруппыФормы.ОбычнаяГруппа
					И Элемент.ОтображатьЗаголовок = Истина 
					И (Элемент.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение
					Или Элемент.Отображение = ОтображениеОбычнойГруппы.Нет) Тогда 
						Элемент.ШрифтЗаголовка = ЖирныйШрифт;
				КонецЕсли;
			КонецЦикла;
		Иначе
			МассивЗаголовков = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаГрупп,,, Истина);
			Для Каждого ИмяЗаголовка Из МассивЗаголовков Цикл
				Элемент = Форма.Элементы[ИмяЗаголовка];
				Если Элемент.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение ИЛИ Элемент.Отображение = ОтображениеОбычнойГруппы.Нет Тогда 
					Элемент.ШрифтЗаголовка = ЖирныйШрифт;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подтверждение завершения работы программы.

// Прочитать настройку подтверждения завершения работы программы
// для текущего пользователя.
// 
// Возвращаемое значение:
//   Булево   - значение настройки.
// 
Функция ЗапрашиватьПодтверждениеПриЗавершенииПрограммы() Экспорт
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы");
	
	Если Результат = Неопределено Тогда
		Результат = ОбщегоНазначения.ОбщиеПараметрыБазовойФункциональности().ЗапрашиватьПодтверждениеПриЗавершенииПрограммы;
		СтандартныеПодсистемыВызовСервера.СохранитьНастройкуПодтвержденияПриЗавершенииПрограммы(Результат);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать СтандартныеПодсистемыПовтИсп.РежимРегистрацииДанныхДляПланаОбмена.
//
// Параметры:
//  Объект - ОбъектМетаданных - проверяемый объект.
// 
//  Возвращаемое значение:
//   Булево - Истина, если объект используется в РИБ только в момент создания начального образа подчиненного узла.
// 
Функция ЭтоОбъектНачальногоОбразаУзлаРИБ(Знач Объект) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПовтИсп");
		Если МодульОбменДаннымиПовтИсп.АвтономнаяРаботаПоддерживается() Тогда
			РежимРегистрации = СтандартныеПодсистемыПовтИсп.РежимРегистрацииДанныхДляПланаОбмена(
				Объект.ПолноеИмя(), МодульОбменДаннымиПовтИсп.ПланОбменаАвтономнойРаботы());
			Если РежимРегистрации = "АвторегистрацияОтключена" Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет проверку состава плана обмена на наличие обязательных объектов метаданных
// и объектов-исключений из состава плана обмена.
//
// Параметры:
//  ИмяПланаОбмена - Строка, ПланОбменаСсылка. Имя плана обмена или ссылка на узел плана обмена,
//  для которого необходимо выполнить проверку.
//
Процедура ПроверитьСоставПланаОбмена(Знач ИмяПланаОбмена) Экспорт
	
	Если ТипЗнч(ИмяПланаОбмена) <> Тип("Строка") Тогда
		ИмяПланаОбмена = ИмяПланаОбмена.Метаданные().Имя;
	КонецЕсли;
	
	РаспределеннаяИнформационнаяБаза = Метаданные.ПланыОбмена[ИмяПланаОбмена].РаспределеннаяИнформационнаяБаза;
	СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
	
	ВключитьВСостав = Новый Массив;
	ИсключитьИзСостава = Новый Массив;
	ОтключитьАвторегистрацию = Новый Массив;
	
	// Получаем список обязательных объектов и объектов-исключений.
	ОбязательныеОбъекты = Новый Массив;
	ОбъектыИсключения = Новый Массив;
	ОбъектыНачальногоОбраза = Новый Массив;
	
	// Получаем обязательные объекты.
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбязательныхОбъектовПланаОбмена");
	Для Каждого Обработчик Из ОбработчикиСобытия Цикл
		
		ПризнакРаспределеннаяИнформационнаяБаза = РаспределеннаяИнформационнаяБаза;
		
		Обработчик.Модуль.ПриПолученииОбязательныхОбъектовПланаОбмена(ОбязательныеОбъекты, ПризнакРаспределеннаяИнформационнаяБаза);
	КонецЦикла;
	
	// Получаем объекты-исключения.
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовИсключенийПланаОбмена");
	Для Каждого Обработчик Из ОбработчикиСобытия Цикл
		
		ПризнакРаспределеннаяИнформационнаяБаза = РаспределеннаяИнформационнаяБаза;
		
		Обработчик.Модуль.ПриПолученииОбъектовИсключенийПланаОбмена(ОбъектыИсключения, ПризнакРаспределеннаяИнформационнаяБаза);
	КонецЦикла;
	
	Если РаспределеннаяИнформационнаяБаза Тогда
		
		// Получаем объекты начального образа.
		ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
			"СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовНачальногоОбразаПланаОбмена");
		Для Каждого Обработчик Из ОбработчикиСобытия Цикл
			
			Обработчик.Модуль.ПриПолученииОбъектовНачальногоОбразаПланаОбмена(ОбъектыНачальногоОбраза);
			
		КонецЦикла;
		
		Для Каждого Объект Из ОбъектыНачальногоОбраза Цикл
			
			ОбязательныеОбъекты.Добавить(Объект);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверяем список обязательных объектов для состава плана обмена.
	Для Каждого Объект Из ОбязательныеОбъекты Цикл
		
		Если СоставПланаОбмена.Найти(Объект) = Неопределено Тогда
			
			ВключитьВСостав.Добавить(Объект);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверяем список объектов-исключений из состава плана обмена.
	Для Каждого Объект Из ОбъектыИсключения Цикл
		
		Если СоставПланаОбмена.Найти(Объект) <> Неопределено Тогда
			
			ИсключитьИзСостава.Добавить(Объект);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверяем признак авторегистрации.
	// Авторегистрация должна быть отключена у всех объектов начального образа.
	Для Каждого ЭлементСостава Из СоставПланаОбмена Цикл
		
		Если ОбъектыНачальногоОбраза.Найти(ЭлементСостава.Метаданные) <> Неопределено
			И ЭлементСостава.АвтоРегистрация <> АвтоРегистрацияИзменений.Запретить Тогда
			
			ОтключитьАвторегистрацию.Добавить(ЭлементСостава.Метаданные);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Формируем и выводим текст исключения при необходимости.
	Если ВключитьВСостав.Количество() <> 0
		ИЛИ ИсключитьИзСостава.Количество() <> 0
		ИЛИ ОтключитьАвторегистрацию.Количество() <> 0 Тогда
		
		Если ВключитьВСостав.Количество() <> 0 Тогда
			
			ОписаниеИсключения1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В состав плана обмена %1 должны входить следующие объекты метаданных: %2'"),
				ИмяПланаОбмена,
				СтрСоединить(ПредставлениеОбъектовМетаданных(ВключитьВСостав), ", "));
			
		КонецЕсли;
		
		Если ИсключитьИзСостава.Количество() <> 0 Тогда
			
			ОписаниеИсключения2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В состав плана обмена %1 НЕ должны входить следующие объекты метаданных: %2'"),
				ИмяПланаОбмена,
				СтрСоединить(ПредставлениеОбъектовМетаданных(ИсключитьИзСостава), ", "));
			
		КонецЕсли;
		
		Если ОтключитьАвторегистрацию.Количество() <> 0 Тогда
			
			ОписаниеИсключения3 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В составе плана обмена %1 не должно быть объектов с установленным признаком авторегистрации.
					|Требуется запретить авторегистрацию для следующих объектов метаданных: %2'"),
				ИмяПланаОбмена,
				СтрСоединить(ПредставлениеОбъектовМетаданных(ОтключитьАвторегистрацию), ", "));
			
		КонецЕсли;
		
		ОписаниеИсключения = "[ОписаниеИсключения1]
		|
		|[ОписаниеИсключения2]
		|
		|[ОписаниеИсключения3]
		|";
		
		ОписаниеИсключения = СтрЗаменить(ОписаниеИсключения, "[ОписаниеИсключения1]", ОписаниеИсключения1);
		ОписаниеИсключения = СтрЗаменить(ОписаниеИсключения, "[ОписаниеИсключения2]", ОписаниеИсключения2);
		ОписаниеИсключения = СтрЗаменить(ОписаниеИсключения, "[ОписаниеИсключения3]", ОписаниеИсключения3);
		
		ВызватьИсключение СокрЛП(ОписаниеИсключения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Работа с событиями служебного программного интерфейса.
// Использование только в пределах библиотеки и отдельно от других библиотек.

// Определяет список служебных событий.
// Каждая подсистема может предоставлять произвольный набор своих событий для того,
// чтобы на них мог подписаться внешний код (с помощью процедуры ПриДобавленииОбработчиковСлужебныхСобытий). 
// В зависимости от контекста работы, события могут вызываться с клиента или из серверного кода.
// Полный список этих событий задается в параметрах КлиентскиеСобытия и СерверныеСобытия.
// Имена событий должны быть заданы по образцу: "имя_подсистемы\имя_события",
// например: "СтандартныеПодсистемы.БазоваяФункциональность\ПриОпределенииФормыАктивныхПользователей".
//
// Параметры:
//  КлиентскиеСобытия - Массив - массив полных имен клиентских событий (Строка).
//  СерверныеСобытия  - Массив - массив полных имен серверных событий (Строка).
//
// Пример использования:
//
//	// Определяет событие, которое возникает при открытии формы активных пользователей,
//  // которая принадлежит подсистеме СтандартныеПодсистемы.БазоваяФункциональность.
//  // В обработчиках этого события можно переопределить стандартное поведение.
//	//
//	// Параметры:
//	//  ИмяФормы - Строка - возвращаемое значение.
//	//
//	// Синтаксис:
//	// Процедура ПриОткрытииФормыАктивныхПользователей(ИмяФормы) Экспорт
//	//
//	СерверныеСобытия.Добавить(
//		"СтандартныеПодсистемы.БазоваяФункциональность\ПриОпределенииФормыАктивныхПользователей");
//
// Комментарий можно копировать при создании нового обработчика.
// Раздел "Синтаксис:" используется для создания новой процедуры обработчика.
//
Процедура ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия) Экспорт
	
	// СЕРВЕРНЫЕ СОБЫТИЯ.
	
	ПриДобавленииСлужебныхСобытийБазовойФункциональности(КлиентскиеСобытия, СерверныеСобытия);
	РаботаВБезопасномРежимеСлужебный.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.БизнесПроцессыИЗадачи") Тогда
		МодульБизнесПроцессыИЗадачиСервер = ОбщегоНазначения.ОбщийМодуль("БизнесПроцессыИЗадачиСервер");
		МодульБизнесПроцессыИЗадачиСервер.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
		МодульВариантыОтчетов.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		МодульДополнительныеОтчетыИОбработки.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗавершениеРаботыПользователей") Тогда
		МодульСоединенияИБ = ОбщегоНазначения.ОбщийМодуль("СоединенияИБ");
		МодульСоединенияИБ.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КалендарныеГрафики") Тогда
		МодульКалендарныеГрафики = ОбщегоНазначения.ОбщийМодуль("КалендарныеГрафики");
		МодульКалендарныеГрафики.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.НапоминанияПользователя") Тогда
		МодульНапоминанияПользователяСлужебный = ОбщегоНазначения.ОбщийМодуль("НапоминанияПользователяСлужебный");
		МодульНапоминанияПользователяСлужебный.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		МодульОбменДаннымиСервер.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыСлужебный.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	
	ПользователиСлужебный.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		МодульУправлениеПечатью.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		МодульПрисоединенныеФайлыСлужебный = ОбщегоНазначения.ОбщийМодуль("ПрисоединенныеФайлыСлужебный");
		МодульПрисоединенныеФайлыСлужебный.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		МодульРаботаВМоделиСервиса.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями") Тогда
		МодульОбменСообщениями = ОбщегоНазначения.ОбщийМодуль("ОбменСообщениями");
		МодульОбменСообщениями.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
		МодульИнтерфейсыСообщенийВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ИнтерфейсыСообщенийВМоделиСервиса");
		МодульИнтерфейсыСообщенийВМоделиСервиса.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
		МодульОчередьЗаданийСлужебный = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданийСлужебный");
		МодульОчередьЗаданийСлужебный.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные") Тогда
		МодульПоставляемыеДанные = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеДанные");
		МодульПоставляемыеДанные.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела") Тогда
		МодульТекущиеДелаСлужебный = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСлужебный");
		МодульТекущиеДелаСлужебный.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УдалениеПомеченныхОбъектов") Тогда
		МодульУдалениеПомеченныхОбъектовСлужебный = ОбщегоНазначения.ОбщийМодуль("УдалениеПомеченныхОбъектовСлужебный");
		МодульУдалениеПомеченныхОбъектовСлужебный.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
		МодульУправлениеДоступомСлужебный.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ФайловыеФункции") Тогда
		МодульФайловыеФункцииСлужебный = ОбщегоНазначения.ОбщийМодуль("ФайловыеФункцииСлужебный");
		МодульФайловыеФункцииСлужебный.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	
КонецПроцедуры

// Определяет список обработчиков служебных событий (объявленных в ПриДобавленииСлужебныхСобытий - см. выше).
//
// Параметры:
//  КлиентскиеОбработчики - Соответствие - список обработчиков:
//   * Ключ     - Строка - полное имя события,
//   * Значение - Массив - массив имен клиентских общих модулей с процедурой-обработчиком события.
//
//  СерверныеОбработчики  - Соответствие - список обработчиков:
//   * Ключ     - Строка - полное имя события,
//   * Значение - Массив - массив имен серверных общих модулей с процедурой-обработчиком события.
//
// Имя процедуры-обработчика события совпадает с именем события.
//
// Пример подписки на событие ПриОпределенииФормыАктивныхПользователей подсистемы БазоваяФункциональность:
//
//	СерверныеОбработчики[
//		"СтандартныеПодсистемы.БазоваяФункциональность\ПриОпределенииФормыАктивныхПользователей"
//			].Добавить("СоединенияИБ");
// При этом в общем модуле СоединенияИБ должна быть определена процедура-обработчик
// ПриОпределенииФормыАктивныхПользователей с параметрами, которые соответствуют параметрам события.
//
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	ПриДобавленииОбработчиковСлужебныхСобытийБазовойФункциональности(КлиентскиеОбработчики, СерверныеОбработчики);
	РаботаВБезопасномРежимеСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		МодульАдресныйКлассификаторСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АнализЖурналаРегистрации") Тогда
		МодульАнализЖурналаРегистрацииСлужебный = ОбщегоНазначения.ОбщийМодуль("АнализЖурналаРегистрацииСлужебный");
		МодульАнализЖурналаРегистрацииСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Анкетирование") Тогда
		МодульАнкетирование = ОбщегоНазначения.ОбщийМодуль("Анкетирование");
		МодульАнкетирование.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Банки") Тогда
		МодульРаботаСБанками = ОбщегоНазначения.ОбщийМодуль("РаботаСБанками");
		МодульРаботаСБанками.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.БизнесПроцессыИЗадачи") Тогда
		МодульБизнесПроцессыИЗадачиСервер = ОбщегоНазначения.ОбщийМодуль("БизнесПроцессыИЗадачиСервер");
		МодульБизнесПроцессыИЗадачиСервер.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Валюты") Тогда
		МодульРаботаСКурсамиВалют = ОбщегоНазначения.ОбщийМодуль("РаботаСКурсамиВалют");
		МодульРаботаСКурсамиВалют.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
		МодульВариантыОтчетов.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		МодульВзаимодействия = ОбщегоНазначения.ОбщийМодуль("Взаимодействия");
		МодульВзаимодействия.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
		МодульУправлениеЭлектроннойПочтой = ОбщегоНазначения.ОбщийМодуль("УправлениеЭлектроннойПочтой");
		МодульУправлениеЭлектроннойПочтой.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ГрафикиРаботы") Тогда
		МодульГрафикиРаботы = ОбщегоНазначения.ОбщийМодуль("ГрафикиРаботы");
		МодульГрафикиРаботы.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
		МодульДатыЗапретаИзмененияСлужебный = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзмененияСлужебный");
		МодульДатыЗапретаИзмененияСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		МодульДополнительныеОтчетыИОбработки.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
		МодульДополнительныеОтчетыИОбработкиВБезопасномРежимеСлужебный = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВБезопасномРежимеСлужебный");
		МодульДополнительныеОтчетыИОбработкиВБезопасномРежимеСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗавершениеРаботыПользователей") Тогда
		МодульСоединенияИБ = ОбщегоНазначения.ОбщийМодуль("СоединенияИБ");
		МодульСоединенияИБ.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗаметкиПользователя") Тогда
		МодульЗаметкиПользователяСлужебный = ОбщегоНазначения.ОбщийМодуль("ЗаметкиПользователяСлужебный");
		МодульЗаметкиПользователяСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗащитаПерсональныхДанных") Тогда
		МодульЗащитаПерсональныхДанных = ОбщегоНазначения.ОбщийМодуль("ЗащитаПерсональныхДанных");
		МодульЗащитаПерсональныхДанных.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Интеграция1СБухфон") Тогда
		МодульИнтеграция1СБухфон = ОбщегоНазначения.ОбщийМодуль("Интеграция1СБухфон");
		МодульИнтеграция1СБухфон.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ИнформацияПриЗапуске") Тогда
		МодульИнформацияПриЗапуске = ОбщегоНазначения.ОбщийМодуль("ИнформацияПриЗапуске");
		МодульИнформацияПриЗапуске.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КалендарныеГрафики") Тогда
		МодульКалендарныеГрафики = ОбщегоНазначения.ОбщийМодуль("КалендарныеГрафики");
		МодульКалендарныеГрафики.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейСлужебный");
		МодульУправлениеКонтактнойИнформациейСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.НапоминанияПользователя") Тогда
		МодульНапоминанияПользователяСлужебный = ОбщегоНазначения.ОбщийМодуль("НапоминанияПользователяСлужебный");
		МодульНапоминанияПользователяСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбновлениеВерсииИБ") Тогда
		МодульОбновлениеИнформационнойБазы = ОбщегоНазначения.ОбщийМодуль("ОбновлениеИнформационнойБазыСлужебный");
		МодульОбновлениеИнформационнойБазы.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		МодульОбменДаннымиСервер.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбновлениеКонфигурации") Тогда
		МодульОбновлениеКонфигурации = ОбщегоНазначения.ОбщийМодуль("ОбновлениеКонфигурации");
		МодульОбновлениеКонфигурации.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Организации") Тогда
		МодульОрганизацииСлужебный = ОбщегоНазначения.ОбщийМодуль("ОрганизацииСлужебный");
		МодульОрганизацииСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
		МодульОтправкаSMS = ОбщегоНазначения.ОбщийМодуль("ОтправкаSMS");
		МодульОтправкаSMS.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		МодульОценкаПроизводительностиСлужебный = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительностиСлужебный");
		МодульОценкаПроизводительностиСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЦентрМониторинга") Тогда
		МодульЦентрМониторингаСлужебный = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторингаСлужебный");
		МодульЦентрМониторингаСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		МодульУправлениеПечатью.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПоискИУдалениеДублей") Тогда
		МодульПоискИУдалениеДублей = ОбщегоНазначения.ОбщийМодуль("ПоискИУдалениеДублей");
		МодульПоискИУдалениеДублей.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
		МодульПолнотекстовыйПоискСервер = ОбщегоНазначения.ОбщийМодуль("ПолнотекстовыйПоискСервер");
		МодульПолнотекстовыйПоискСервер.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернетаСлужебный = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернетаСлужебный");
		МодульПолучениеФайловИзИнтернетаСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Пользователи") Тогда
		МодульПользователиСлужебный = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебный");
		МодульПользователиСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		МодульПрисоединенныеФайлыСлужебный = ОбщегоНазначения.ОбщийМодуль("ПрисоединенныеФайлыСлужебный");
		МодульПрисоединенныеФайлыСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		МодульРаботаВМоделиСервиса.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.АдресныйКлассификаторВМоделиСервиса") Тогда
		МодульАдресныйКлассификаторВМоделиСервисаСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторВМоделиСервисаСлужебный");
		МодульАдресныйКлассификаторВМоделиСервисаСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.БанкиВМоделиСервиса") Тогда
		МодульБанкиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("БанкиСлужебныйВМоделиСервиса");
		МодульБанкиСлужебныйВМоделиСервиса.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса") Тогда
		МодульКурсыВалютСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("КурсыВалютСлужебныйВМоделиСервиса");
		МодульКурсыВалютСлужебныйВМоделиСервиса.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.КалендарныеГрафикиВМоделиСервиса") Тогда
		МодульКалендарныеГрафикиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("КалендарныеГрафикиСлужебныйВМоделиСервиса");
		МодульКалендарныеГрафикиСлужебныйВМоделиСервиса.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями") Тогда
		МодульОбменСообщениями = ОбщегоНазначения.ОбщийМодуль("ОбменСообщениями");
		МодульОбменСообщениями.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
		МодульИнтерфейсыСообщенийВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ИнтерфейсыСообщенийВМоделиСервиса");
		МодульИнтерфейсыСообщенийВМоделиСервиса.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса") Тогда
		МодульОбновлениеИнформационнойБазыСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ОбновлениеИнформационнойБазыСлужебныйВМоделиСервиса");
		МодульОбновлениеИнформационнойБазыСлужебныйВМоделиСервиса.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
		
		МодульОчередьЗаданийСлужебный = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданийСлужебный");
		МодульОчередьЗаданийСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
		
		Если ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация() Тогда
			МодульОчередьЗаданийСлужебныйРазделениеДанных = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданийСлужебныйРазделениеДанных");
			МодульОчередьЗаданийСлужебныйРазделениеДанных.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные") Тогда
		МодульПоставляемыеДанные = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеДанные");
		МодульПоставляемыеДанные.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных") Тогда
		МодульРезервноеКопированиеОбластейДанных = ОбщегоНазначения.ОбщийМодуль("РезервноеКопированиеОбластейДанных");
		МодульРезервноеКопированиеОбластейДанных.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.УдаленноеАдминистрирование") Тогда
		МодульУдаленноеАдминистрированиеСлужебный = ОбщегоНазначения.ОбщийМодуль("УдаленноеАдминистрированиеСлужебный");
		МодульУдаленноеАдминистрированиеСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса") Тогда
		МодульУправлениеДоступомСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебныйВМоделиСервиса");
		МодульУправлениеДоступомСлужебныйВМоделиСервиса.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ФайловыеФункцииВМоделиСервиса") Тогда
		МодульФайловыеФункцииСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ФайловыеФункцииСлужебныйВМоделиСервиса");
		МодульФайловыеФункцииСлужебныйВМоделиСервиса.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениямиСлужебный");
		МодульРаботаСПочтовымиСообщениями.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиСлужебный");
		МодульРаботаСФайламиСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетов = ОбщегоНазначения.ОбщийМодуль("РассылкаОтчетов");
		МодульРассылкаОтчетов.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РегламентныеЗадания") Тогда
		МодульРегламентныеЗаданияСлужебный = ОбщегоНазначения.ОбщийМодуль("РегламентныеЗаданияСлужебный");
		МодульРегламентныеЗаданияСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РезервноеКопированиеИБ") Тогда
		МодульРезервноеКопированиеИБСервер = ОбщегоНазначения.ОбщийМодуль("РезервноеКопированиеИБСервер");
		МодульРезервноеКопированиеИБСервер.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствамиСлужебный");
		МодульУправлениеСвойствамиСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УдалениеПомеченныхОбъектов") Тогда
		МодульУдалениеПомеченныхОбъектовСлужебный = ОбщегоНазначения.ОбщийМодуль("УдалениеПомеченныхОбъектовСлужебный");
		МодульУдалениеПомеченныхОбъектовСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
		МодульУправлениеДоступомСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеИтогамиИАгрегатами") Тогда
		МодульУправлениеИтогамиИАгрегатамиСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеИтогамиИАгрегатамиСлужебный");
		МодульУправлениеИтогамиИАгрегатамиСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ФайловыеФункции") Тогда
		МодульФайловыеФункцииСлужебный = ОбщегоНазначения.ОбщийМодуль("ФайловыеФункцииСлужебный");
		МодульФайловыеФункцииСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
		МодульЭлектроннаяПодписьСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСКонтрагентами") Тогда
		МодульПроверкаКонтрагентов = ОбщегоНазначения.ОбщийМодуль("ПроверкаКонтрагентов");
		МодульПроверкаКонтрагентов.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.СклонениеПредставленийОбъектов") Тогда
		МодульСклонениеПредставленийОбъектов = ОбщегоНазначения.ОбщийМодуль("СклонениеПредставленийОбъектов");
		МодульСклонениеПредставленийОбъектов.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	КонецЕсли;
	
КонецПроцедуры

// Определить список справочников, доступных для загрузки с помощью подсистемы "Загрузка данных из файла".
//
// Параметры:
//  ЗагружаемыеСправочники - ТаблицаЗначений - список справочников, в которые возможна загрузка данных.
//      * ПолноеИмя          - Строка - полное имя справочника (как в метаданных).
//      * Представление      - Строка - представление справочника в списке выбора.
//      * ПрикладнаяЗагрузка - Булево - если Истина, значит справочник использует собственный алгоритм загрузки и
//                                      в модуле менеджера справочника определены функции.
//
Процедура ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт
	
	// Загрузка в справочник ИдентификаторыОбъектовМетаданных запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.ИдентификаторыОбъектовМетаданных.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
	// Загрузка в справочник ИдентификаторыОбъектовРасширений запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.ИдентификаторыОбъектовРасширений.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность 
// редактирования реквизитов при групповом изменении.
//
// Параметры:
//   Объекты - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                            подключенного к подсистеме "Групповое изменение объектов". 
//                            Дополнительно в значении могут быть перечислены имена экспортных функций:
//                            "РеквизитыНеРедактируемыеВГрупповойОбработке",
//                            "РеквизитыРедактируемыеВГрупповойОбработке".
//                            Каждое имя должно начинаться с новой строки.
//                            Если указана пустая строка, значит в модуле менеджера определены обе функции.
//
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	
	Объекты.Вставить(Метаданные.Справочники.ИдентификаторыОбъектовМетаданных.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ИдентификаторыОбъектовРасширений.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	
КонецПроцедуры

// Получает идентификатор информационной базы.
// Если идентификатор не заполнен, то устанавливает его значение.
// Константа ИдентификаторИнформационнойБазы не должна входить в составы планов обмена и иметь
// различные значения в каждой информационной базе.
//
Функция ИдентификаторИнформационнойБазы() Экспорт
	
	ИдентификаторИнформационнойБазы = Константы.ИдентификаторИнформационнойБазы.Получить();
	
	Если ПустаяСтрока(ИдентификаторИнформационнойБазы) Тогда
		
		ИдентификаторИнформационнойБазы = Новый УникальныйИдентификатор();
		Константы.ИдентификаторИнформационнойБазы.Установить(Строка(ИдентификаторИнформационнойБазы));
		
	КонецЕсли;
	
	Возврат ИдентификаторИнформационнойБазы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Дополнительная базовая функциональность для анализа параметров клиента на сервере.

// Возвращает фиксированное соответствие, содержащее некоторые параметры клиента:
//  ПараметрЗапуска                    - Строка,
//  СтрокаСоединенияИнформационнойБазы - Строка - строка соединения, полученная на клиенте.
//
// Возвращает пустое фиксированное соответствие, если ТекущийРежимЗапуска() = Неопределено.
//
Функция ПараметрыКлиентаНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПараметрыКлиента.Количество() = 0
	   И ТекущийРежимЗапуска() <> Неопределено Тогда
		
		ВызватьИсключение НСтр("ru = 'Не заполнены параметры клиента на сервере.'");
	КонецЕсли;
	
	Возврат ПараметрыКлиента;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры для установки/обновления/получения параметров работы программы (кэшей).

// Возвращает параметры работы программы для использования (фиксированные данные),
// которые являются, например, кэшем.
//
// Параметры:
//  ИмяКонстанты - Строка - имя константы (имя группы параметров работы программы).
//
Функция ПараметрыРаботыПрограммы(ИмяКонстанты) Экспорт
	
	Возврат СтандартныеПодсистемыПовтИсп.ПараметрыРаботыПрограммы(ИмяКонстанты);
	
КонецФункции

// Проверяет параметры работы программы для использования (фиксированные данные),
// которые являются, например, кэшем.
//
// Параметры:
//  ИмяКонстанты    - Строка - имя константы (имя группы параметров работы программы).
//  ИменаПараметров - Строка - список имен параметров, которые должны быть в константе.
//                    Требуется при получении обновленных данных через модуль повторного использования
//                    для блокировки получения, если не все параметры группы (константы) обновлены.
//                    Не требуется при получении данных с целью обновления.
//  Отказ           - Неопределено - вызвать исключение, если параметры не обновлены.
//                  - Булево - возвращаемое значение - не вызывать исключение,
//                    если параметры не обновлены, а установить Истина.
//
Процедура ПроверитьОбновлениеПараметровРаботыПрограммы(ИмяКонстанты, ИменаПараметров = "", Отказ = Неопределено) Экспорт
	
	Если ИменаПараметров <> "" Тогда
		ТребуетсяОбновление = Ложь;
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			ТребуетсяОбновление =
				ОбновлениеИнформационнойБазыСлужебный.НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы();
		Иначе
			ТребуетсяОбновление =
				ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы();
		КонецЕсли;
		
		Если ТребуетсяОбновление Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			ВсеОбновленныеПараметры = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить(
				"ВсеОбновленныеПараметрыРаботыПрограммы");
			УстановитьПривилегированныйРежим(Ложь);
			
			Если ВсеОбновленныеПараметры <> Неопределено Тогда
				Если ВсеОбновленныеПараметры.Получить("*") <> Неопределено Тогда
					ТребуетсяОбновление = Ложь;
				Иначе
					ОбновленныеПараметры = ВсеОбновленныеПараметры.Получить(ИмяКонстанты);
					Если ОбновленныеПараметры <> Неопределено Тогда
						ТребуетсяОбновление = Ложь;
						ТребуемыеПараметры = Новый Структура(ИменаПараметров);
						Для каждого КлючИЗначение Из ТребуемыеПараметры Цикл
							Если ОбновленныеПараметры.Получить(КлючИЗначение.Ключ) = Неопределено Тогда
								ТребуетсяОбновление = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТребуетсяОбновление Тогда
			Если Отказ <> Неопределено Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			Если ТекущийРежимЗапуска() = Неопределено Тогда
				ВызватьИсключение
					НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением на новую версию.'");
			Иначе
				ВызватьИсключение
					НСтр("ru = 'Недопустимое обращение к необновленным параметрам работы программы
					           |(например, к некоторым параметрам сеанса):
					           |- если это обращение выполняется из формы на начальной странице
					           |  (рабочем столе), то необходимо убедиться, что в ней имеется вызов
					           |  процедуры ОбщегоНазначения.ПриСозданииНаСервере;
					           |- в остальных случаях необходимо перенести вызов прикладного кода
					           |  после обновления параметров работы программы.'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает изменения параметра работы программы с учетом текущей версии
// конфигурации и текущей версии ИБ.
//
// Параметры:
//  Параметры    - значение извлеченное из константы, имя которой передавалось
//                 в процедуру ДобавитьИзмененияПараметраРаботыПрограммы.
//
//  ИмяПараметра - Строка, которая передавалась, как параметр ИмяПараметра
//                 в процедуру ДобавитьИзмененияПараметраРаботыПрограммы.
//
// Возвращаемое значение:
//  Неопределено - означает, что изменилось все. Возвращается
//                 при начальном заполнении ИБ или области данных.
//  Массив       - содержит значения изменений. Может быть несколько, например,
//                 когда область данных давно не обновлялась.
//
Функция ИзмененияПараметраРаботыПрограммы(Параметры, ИмяПараметра) Экспорт
	
	ПоследниеИзменения = Параметры["ИзмененияПараметра" + ИмяПараметра].Получить();
	
	Версия = Метаданные.Версия;
	СледующаяВерсия = СледующаяВерсия(Версия);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
	   И НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		// План обновления областей строится только для областей,
		// которые имеют версию не ниже версии неразделенных данных.
		// Для остальных областей запускаются все обработчики обновления.
		
		// Версия неразделенных (общих) данных.
		ВерсияИБ = ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(Метаданные.Имя, Истина);
	Иначе
		ВерсияИБ = ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(Метаданные.Имя);
	КонецЕсли;
	
	// При начальном заполнении изменение параметров работы программы не определено.
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияИБ, "0.0.0.0") = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбновлениеВнеОбновленияИБ = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияИБ, Версия) = 0;
	
	// Изменения к более старшим версиям не нужны,
	// кроме случая когда обновление выполняется вне обновления ИБ,
	// т.е. версия ИБ равна версии конфигурации.
	// В этом случае дополнительно выбираются изменения к следующей версии.
	
	Индекс = ПоследниеИзменения.Количество()-1;
	Пока Индекс >=0 Цикл
		ВерсияИзменения = ПоследниеИзменения[Индекс].ВерсияКонфигурации;
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияИБ, ВерсияИзменения) >= 0
		   И НЕ (  ОбновлениеВнеОбновленияИБ
		         И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СледующаяВерсия, ВерсияИзменения) = 0) Тогда
			
			ПоследниеИзменения.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат ПоследниеИзменения.ВыгрузитьКолонку("Изменения");
	
КонецФункции

// Устанавливает вспомогательные данные для работы программы, хранимые в неразделенных константах.
//
// Параметры:
//  ИмяКонстанты      - Строка - имя неразделенной константы, в которой сохраняется значение параметра.
//  ИмяПараметра      - Строка - имя параметра, который нужно установить (без приставки ИзмененияПараметра).
//  ЗначениеПараметра - фиксированные данные, которые устанавливаются в качестве значения параметра.
//
Процедура УстановитьПараметрРаботыПрограммы(ИмяКонстанты, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа." + ИмяКонстанты);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Параметры = Константы[ИмяКонстанты].Получить().Получить();
		Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
			Параметры = Новый Структура;
		КонецЕсли;
		
		Параметры.Вставить(ИмяПараметра, ЗначениеПараметра);
		
		МенеджерЗначения = Константы[ИмяКонстанты].СоздатьМенеджерЗначения();
		МенеджерЗначения.ОбменДанными.Загрузка = Истина;
		МенеджерЗначения.ОбменДанными.Получатели.Автозаполнение = Ложь;
		МенеджерЗначения.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		МенеджерЗначения.Значение = Новый ХранилищеЗначения(Параметры);
		МенеджерЗначения.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Добавить изменения вспомогательных данных для работы программы, хранимые в неразделенных константах.
//
// Параметры:
//  ИмяКонстанты       - Строка - имя неразделенной константы, в которой сохраняется значение параметра.
//  ИмяПараметра       - Строка - имя параметра, который нужно установить.
//  ИзмененияПараметра - фиксированные данные, которые регистрируются в качестве изменений параметра.
//                       Изменения не добавляются, если значение ИзменениеПараметра не заполнено.
//
//  Прим.: при начальном заполнении ИБ или неразделенных данных
//         добавление изменений параметров пропускается.
//
Процедура ДобавитьИзмененияПараметраРаботыПрограммы(ИмяКонстанты, ИмяПараметра, Знач ИзмененияПараметра) Экспорт
	
	// Получение версии ИБ или неразделенных данных.
	ВерсияИБ = ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(Метаданные.Имя);
	
	// При переходе на другую программу используется текущая версия конфигурации.
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено()
	   И ОбновлениеИнформационнойБазыСлужебный.РежимОбновленияДанных() = "ПереходСДругойПрограммы" Тогда
		
		ВерсияИБ = Метаданные.Версия;
	КонецЕсли;
	
	// При начальном заполнении добавление изменений параметров пропускается.
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияИБ, "0.0.0.0") = 0 Тогда
		ИзмененияПараметра = Неопределено;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа." + ИмяКонстанты);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		ОбновитьСоставИзменений = Ложь;
		Параметры = СтандартныеПодсистемыПовтИсп.ПараметрыРаботыПрограммы(ИмяКонстанты);
		
		ИмяПараметраХраненияИзменений = "ИзмененияПараметра" + ИмяПараметра;
		
		Если Параметры.Свойство(ИмяПараметраХраненияИзменений) Тогда
			ПоследниеИзменения = Параметры[ИмяПараметраХраненияИзменений].Получить();
			
			Если ТипЗнч(ПоследниеИзменения)              <> Тип("ТаблицаЗначений")
			 ИЛИ ПоследниеИзменения.Колонки.Количество() <> 2
			 ИЛИ ПоследниеИзменения.Колонки[0].Имя       <> "ВерсияКонфигурации"
			 ИЛИ ПоследниеИзменения.Колонки[1].Имя       <> "Изменения" Тогда
				
				ПоследниеИзменения = Неопределено;
			КонецЕсли;
		Иначе
			ПоследниеИзменения = Неопределено;
		КонецЕсли;
		
		Если ПоследниеИзменения = Неопределено Тогда
			ОбновитьСоставИзменений = Истина;
			ПоследниеИзменения = Новый ТаблицаЗначений;
			ПоследниеИзменения.Колонки.Добавить("ВерсияКонфигурации");
			ПоследниеИзменения.Колонки.Добавить("Изменения");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИзмененияПараметра) Тогда
			
			// Если производится обновление вне обновления ИБ,
			// тогда требуется добавить изменения к следующей версии,
			// чтобы при переходе на очередную версию изменения
			// выполненные вне обновления ИБ были учтены.
			Версия = Метаданные.Версия;
			
			ОбновлениеВнеОбновленияИБ =
				ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияИБ , Версия) = 0;
			
			Если ОбновлениеВнеОбновленияИБ Тогда
				Версия = СледующаяВерсия(Версия);
			КонецЕсли;
			
			ОбновитьСоставИзменений = Истина;
			Строка = ПоследниеИзменения.Добавить();
			Строка.Изменения          = ИзмененияПараметра;
			Строка.ВерсияКонфигурации = Версия;
		КонецЕсли;
		
		МинимальнаяВерсияИБ = ОбновлениеИнформационнойБазыСлужебныйПовтИсп.МинимальнаяВерсияИБ();
		
		// Удаление изменений для версий ИБ, которые меньше минимальной
		// вместо версий меньше или равных минимальной, чтобы обеспечить
		// возможность обновления вне обновления ИБ.
		Индекс = ПоследниеИзменения.Количество()-1;
		Пока Индекс >=0 Цикл
			ВерсияИзменения = ПоследниеИзменения[Индекс].ВерсияКонфигурации;
			
			Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(МинимальнаяВерсияИБ, ВерсияИзменения) > 0 Тогда
				ПоследниеИзменения.Удалить(Индекс);
				ОбновитьСоставИзменений = Истина;
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		
		Если ОбновитьСоставИзменений Тогда
			УстановитьПараметрРаботыПрограммы(
				ИмяКонстанты,
				ИмяПараметраХраненияИзменений,
				Новый ХранилищеЗначения(ПоследниеИзменения));
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Регистрирует завершение обновления параметров работы программы
// для возможности использования в сеансе их обновления.
//
Процедура ПодтвердитьОбновлениеПараметраРаботыПрограммы(ИмяКонстанты, ИмяПараметра) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиентаНаСервере = Новый Соответствие(ПараметрыСеанса.ПараметрыКлиентаНаСервере);
	
	ВсеОбновленныеПараметры = ПараметрыКлиентаНаСервере.Получить("ВсеОбновленныеПараметрыРаботыПрограммы");
	Если ВсеОбновленныеПараметры = Неопределено Тогда
		ВсеОбновленныеПараметры = Новый Соответствие;
		ОбновленныеПараметры = Новый Соответствие;
	Иначе
		ОбновленныеПараметры = ВсеОбновленныеПараметры.Получить(ИмяКонстанты);
		ВсеОбновленныеПараметры = Новый Соответствие(ВсеОбновленныеПараметры);
		Если ОбновленныеПараметры = Неопределено Тогда
			ОбновленныеПараметры = Новый Соответствие;
		Иначе
			ОбновленныеПараметры = Новый Соответствие(ОбновленныеПараметры);
		КонецЕсли;
	КонецЕсли;
	ОбновленныеПараметры.Вставить(ИмяПараметра, Истина);
	ВсеОбновленныеПараметры.Вставить(ИмяКонстанты, Новый ФиксированноеСоответствие(ОбновленныеПараметры));
	
	ПараметрыКлиентаНаСервере.Вставить("ВсеОбновленныеПараметрыРаботыПрограммы",
		Новый ФиксированноеСоответствие(ВсеОбновленныеПараметры));
	
	ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ПараметрыКлиентаНаСервере);
	
КонецПроцедуры

// Удаляет вспомогательные данные для работы программы, хранимые в неразделенных константах.
//
// Параметры:
//  ИмяКонстанты - Строка - имя неразделенной константы, в которой сохраняется значение параметра.
//  ИмяПараметра - Строка - имя параметра, который нужно установить (без приставки ИзмененияПараметра).
//
Процедура УдалитьПараметрРаботыПрограммы(ИмяКонстанты, ИмяПараметра) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа." + ИмяКонстанты);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Записать = Ложь;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Параметры = Константы[ИмяКонстанты].Получить().Получить();
		Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		Если Параметры.Свойство(ИмяПараметра) Тогда
			Параметры.Удалить(ИмяПараметра);
			Записать = Истина;
		КонецЕсли;
		
		ИмяПараметраХраненияИзменений = "ИзмененияПараметра" + ИмяПараметра;
		
		Если Параметры.Свойство(ИмяПараметраХраненияИзменений) Тогда
			Параметры.Удалить(ИмяПараметраХраненияИзменений);
			Записать = Истина;
		КонецЕсли;
		
		Если Записать Тогда
			МенеджерЗначения = Константы[ИмяКонстанты].СоздатьМенеджерЗначения();
			МенеджерЗначения.ОбменДанными.Загрузка = Истина;
			МенеджерЗначения.ОбменДанными.Получатели.Автозаполнение = Ложь;
			МенеджерЗначения.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			МенеджерЗначения.Значение = Новый ХранилищеЗначения(Параметры);
			МенеджерЗначения.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если Записать Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ЗагрузитьОбновитьПараметрыРаботыПрограммы(ОшибкаУстановкиМонопольногоРежима = Неопределено, ВФоне = Ложь) Экспорт
	
	МодульОценкаПроизводительностиКлиентСервер = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		МодульОценкаПроизводительностиКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительностиКлиентСервер");
		ВремяНачала = МодульОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени();
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		УстановитьПривилегированныйРежим(Истина);
		ПараметрЗапускаКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
		УстановитьПривилегированныйРежим(Ложь);
		Если СтрНайти(НРег(ПараметрЗапускаКлиента), НРег("ЗапуститьОбновлениеИнформационнойБазы")) > 0 Тогда
			ОчиститьВсеПараметрыРаботыРасширений();
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
	   И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ЗаполнитьВсеПараметрыРаботыРасширений();
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузку = Истина;
	Если НЕ НеобходимоОбновлениеПараметровРаботыПрограммы(ВыполнитьЗагрузку) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СнятьМонопольныйРежим = Ложь;
	Попытка
		Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
			// Есть РИБ-обмен данными и обновление в подчиненном узле ИБ.
			
			// Предварительное обновление кэша служебных событий.
			Константы.ПараметрыСлужебныхСобытий.СоздатьМенеджерЗначения().Обновить();
			
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
				МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
			КонецЕсли;
			
			Если ВыполнитьЗагрузку Тогда
				
				СтандартнаяОбработка = Истина;
				ОбщегоНазначенияПереопределяемый.ПередЗагрузкойПриоритетныхДанныхВПодчиненномРИБУзле(
					СтандартнаяОбработка);
				
				Если СтандартнаяОбработка = Истина
				   И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
					
					Если НЕ МонопольныйРежим() Тогда
						Попытка
							УстановитьМонопольныйРежим(Истина);
							СнятьМонопольныйРежим = Истина;
						Исключение
							Если ОшибкаУстановкиМонопольногоРежима <> Неопределено Тогда
								ОшибкаУстановкиМонопольногоРежима =
									НСтр("ru = 'Невозможно выполнить обновление информационной базы:
									           |- Невозможно установить монопольный режим
									           |- Версия конфигурации не предусматривает обновление без установки монопольного режима.'");
							КонецЕсли;
							ВызватьИсключение ОшибкаУстановкиМонопольногоРежима;
						КонецПопытки;
					КонецЕсли;
					
					// Загрузка предопределенных элементов и идентификаторов объектов метаданных из главного узла.
					МодульОбменДаннымиСервер.ЗагрузитьПриоритетныеДанныеВПодчиненныйУзелРИБ();
				КонецЕсли;
				
				Если ВФоне Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ПрибавкаНаШагеПрогресса=5");
				КонецЕсли;
			КонецЕсли;
			
			// Проверка загрузки идентификаторов объектов метаданных из главного узла.
			СписокКритичныхИзменений = "";
			Попытка
				Справочники.ИдентификаторыОбъектовМетаданных.ВыполнитьОбновлениеДанных(Ложь, Ложь, Истина, , СписокКритичныхИзменений);
			Исключение
				Если ВыполнитьЗагрузку И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
					// Сброс кэша сообщения обмена.
					МодульОбменДаннымиСервер.ВключитьПовторениеЗагрузкиСообщенияОбменаДаннымиПередЗапуском();
				КонецЕсли;
				ВызватьИсключение;
			КонецПопытки;
			
			Если ЗначениеЗаполнено(СписокКритичныхИзменений) Тогда
				
				ИмяСобытия = НСтр("ru = 'Идентификаторы объектов метаданных.Требуется загрузить критичные изменения'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , СписокКритичныхИзменений);
				
				Если ВыполнитьЗагрузку И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
					// Сброс кэша сообщения обмена.
					МодульОбменДаннымиСервер.ВключитьПовторениеЗагрузкиСообщенияОбменаДаннымиПередЗапуском();
				КонецЕсли;
				
				ТекстОшибки =
					НСтр("ru = 'Информационная база не может быть обновлена из-за проблемы в главном узле:
					           |- главный узел был некорректно обновлен (возможно не был увеличен номер версии конфигурации,
					           |  из-за чего не заполнился справочник Идентификаторы объектов метаданных);
					           |- либо были отменены к выгрузке приоритетные данные (элементы
					           |  справочника Идентификаторы объектов метаданных).
					           |
					           |Необходимо заново выполнить обновление главного узла, зарегистрировать к выгрузке
					           |приоритетные данные и повторить синхронизацию данных:
					           |- в главном узле запустите программу с параметром /C ЗапуститьОбновлениеИнформационнойБазы;
					           |%1'");
				
				Если ВыполнитьЗагрузку Тогда
					// Обновление подчиненного узла РИБ.
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
						НСтр("ru = '- затем повторите синхронизацию данных с этой информационной базой
						           | (сначала в главном узле, затем в этой информационной базе после перезапуска).'"));
				Иначе
					// Настройка подчиненного узла РИБ при первом запуске.
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
						НСтр("ru = '- затем повторите создание подчиненного узла.'"));
				КонецЕсли;
				
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			Если ВФоне Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ПрибавкаНаШагеПрогресса=10");
			КонецЕсли;
		КонецЕсли;
		
		// Нет РИБ-обмена данными
		// или обновление в главном узле ИБ
		// или обновление при первом запуске подчиненного узла
		// или обновление после загрузки справочника "Идентификаторы объектов метаданных" из главного узла.
		ОбновитьПараметрыРаботыПрограммы(ОшибкаУстановкиМонопольногоРежима, ВФоне);
		
		// Заполнение параметров работы расширений
		ЗаполнитьВсеПараметрыРаботыРасширений();
	Исключение
		Если СнятьМонопольныйРежим Тогда
			УстановитьМонопольныйРежим(Ложь);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Если МодульОценкаПроизводительностиКлиентСервер <> Неопределено Тогда
		МодульОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("ВремяОбновленияКэшейМетаданных", ВремяНачала);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ЗагрузитьОбновитьПараметрыРаботыПрограммыВФоне(ПараметрыВыполнения, АдресХранилища) Экспорт
	
	Если ПараметрыВыполнения.Свойство("ПараметрыКлиентаНаСервере") Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = ПараметрыВыполнения.ПараметрыКлиентаНаСервере;
		Если ПараметрыВыполнения.Свойство("ХранилищеСвойствРасширений") Тогда
			Справочники.ИдентификаторыОбъектовМетаданных.УстановитьПараметрСеансаАдресСвойствРасширений(
				ПараметрыВыполнения.УстановленныеРасширения, ПараметрыВыполнения.ХранилищеСвойствРасширений);
		КонецЕсли;
		ВФоне = Истина;
	Иначе
		ВФоне = Ложь;
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("КраткоеСообщениеОбОшибке",   Неопределено);
	РезультатВыполнения.Вставить("ПодробноеСообщениеОбОшибке", Неопределено);
	
	ОшибкаУстановкиМонопольногоРежима = "";
	Попытка
		ЗагрузитьОбновитьПараметрыРаботыПрограммы(ОшибкаУстановкиМонопольногоРежима, ВФоне);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		РезультатВыполнения.КраткоеСообщениеОбОшибке   = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		РезультатВыполнения.ПодробноеСообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
	Если ИнформацияОбОшибке = Неопределено
	   И ЗначениеЗаполнено(ОшибкаУстановкиМонопольногоРежима)
	   И ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		ПараметрЗапускаКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
		Если СтрНайти(ПараметрЗапускаКлиента, "РегламентныеЗаданияОтключены") = 0 Тогда
			ОшибкаУстановкиМонопольногоРежима = "ЗаблокироватьВыполнениеРегламентныхЗаданий";
		КонецЕсли;
	КонецЕсли;
	
	РезультатВыполнения.Вставить("ОшибкаУстановкиМонопольногоРежима", ОшибкаУстановкиМонопольногоРежима);
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения.КраткоеСообщениеОбОшибке)
	   И ЗначениеЗаполнено(ОшибкаУстановкиМонопольногоРежима)
	   И ОшибкаУстановкиМонопольногоРежима <> "ЗаблокироватьВыполнениеРегламентныхЗаданий" Тогда
		
		РезультатВыполнения.КраткоеСообщениеОбОшибке   = ОшибкаУстановкиМонопольногоРежима;
		РезультатВыполнения.ПодробноеСообщениеОбОшибке = ОшибкаУстановкиМонопольногоРежима;
	КонецЕсли;
	
	Если ПараметрыВыполнения.Свойство("ПараметрыКлиентаНаСервере") Тогда
		РезультатВыполнения.Вставить("ПараметрыКлиентаНаСервере", ПараметрыСеанса.ПараметрыКлиентаНаСервере);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ЗарегистрироватьИзменениеПриоритетныхДанныхДляПодчиненныхУзловРИБ() Экспорт
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ()
	 Или Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтандартныеПодсистемыПовтИсп.ОтключитьИдентификаторыОбъектовМетаданных() Тогда
		Справочники.ИдентификаторыОбъектовМетаданных.ЗарегистрироватьПолноеИзменениеДляПодчиненныхУзловРИБ();
	КонецЕсли;
	
	УзлыПлановОбменаРИБ = Новый Соответствие;
	Для Каждого ПланОбмена Из Метаданные.ПланыОбмена Цикл
		Если Не ПланОбмена.РаспределеннаяИнформационнаяБаза Тогда
			Продолжить;
		КонецЕсли;
		УзлыРИБ = Новый Массив;
		УзлыПлановОбменаРИБ.Вставить(ПланОбмена.Состав, УзлыРИБ);
		ПланОбменаМенеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПланОбмена.ПолноеИмя());
		Выборка = ПланОбменаМенеджер.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ссылка <> ПланОбменаМенеджер.ЭтотУзел() Тогда
				УзлыРИБ.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если УзлыПлановОбменаРИБ.Количество() > 0 Тогда
		ЗарегистрироватьИзменениеПредопределенных(УзлыПлановОбменаРИБ, Метаданные.Справочники);
		ЗарегистрироватьИзменениеПредопределенных(УзлыПлановОбменаРИБ, Метаданные.ПланыВидовХарактеристик);
		ЗарегистрироватьИзменениеПредопределенных(УзлыПлановОбменаРИБ, Метаданные.ПланыСчетов);
		ЗарегистрироватьИзменениеПредопределенных(УзлыПлановОбменаРИБ, Метаданные.ПланыВидовРасчета);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры для установки/получения параметров работы расширений (кэшей).

// Возвращает хранилище значения параметра для текущей версии расширений.
// Если не заполнен, возвращает Неопределено.
//
// Параметры:
//  ИмяПараметра - Строка - не более 128 символов. Например,
//                 "СтандартныеПодсистемы.ВариантыОтчетов.ОтчетыСНастройками".
//
// Возвращаемое значение:
//  ХранилищеЗначения - если параметр заполнен для текущей версии расширений.
//  Неопределено   - если параметр не заполнен для текущей версии расширений.
//
Функция ПараметрРаботыРасширения(ИмяПараметра) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВерсияРасширений", ПараметрыСеанса.ВерсияРасширений);
	Запрос.УстановитьПараметр("ИмяПараметра", ИмяПараметра);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыРаботыВерсийРасширений.ХранилищеПараметра
	|ИЗ
	|	РегистрСведений.ПараметрыРаботыВерсийРасширений КАК ПараметрыРаботыВерсийРасширений
	|ГДЕ
	|	ПараметрыРаботыВерсийРасширений.ВерсияРасширений = &ВерсияРасширений
	|	И ПараметрыРаботыВерсийРасширений.ИмяПараметра = &ИмяПараметра";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ХранилищеПараметра;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Устанавливает хранилище значения параметра для текущей версии расширений.
// Используется для заполнения значений параметров.
// Перед вызовом требуется установить привилегированный режим.
//
// Параметры:
//  ИмяПараметра - Строка - не более 128 символов. Например,
//                 "СтандартныеПодсистемы.ВариантыОтчетов.ОтчетыСНастройками".
//
//  Хранилище    - ХранилищеЗначения - хранилище, содержащее значение параметра.
//
Процедура УстановитьПараметрРаботыРасширения(ИмяПараметра, Хранилище) Экспорт
	
	ВерсияРасширений = ПараметрыСеанса.ВерсияРасширений;
	
	НаборЗаписей = РегистрыСведений.ПараметрыРаботыВерсийРасширений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВерсияРасширений.Установить(ВерсияРасширений);
	НаборЗаписей.Отбор.ИмяПараметра.Установить(ИмяПараметра);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВерсияРасширений   = ВерсияРасширений;
	НоваяЗапись.ИмяПараметра       = ИмяПараметра;
	НоваяЗапись.ХранилищеПараметра = Хранилище;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Обработчик регламентного задания УдалениеУстаревшихПараметровРаботыВерсийРасширений.
Процедура УдалениеУстаревшихПараметровРаботыВерсийРасширенийОбработчикЗадания() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.УдалениеУстаревшихПараметровРаботыВерсийРасширений);
	
	Справочники.ВерсииРасширений.УдалитьУстаревшиеВерсииПараметров();
	
КонецПроцедуры

// Вызывает принудительное заполнение всех параметров работы для текущей версии расширений.
Процедура ЗаполнитьВсеПараметрыРаботыРасширений()
	
	Если УстановленныеРасширенияНедоступны() Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнить идентификаторы объектов метаданных расширений.
	Если ЗначениеЗаполнено(ПараметрыСеанса.УстановленныеРасширения) Тогда
		СтандартныеПодсистемыПовтИсп.ИдентификаторыОбъектовМетаданныхПроверкаИспользования(Истина, Истина);
	Иначе
		Справочники.ИдентификаторыОбъектовРасширений.ОбновитьДанныеСправочника();
	КонецЕсли;
	
	ИнтеграцияСтандартныхПодсистем.ПриЗаполненииВсехПараметровРаботыРасширений();
	
КонецПроцедуры

// Вызывает принудительную очистку всех параметров работы для текущей версии расширений.
// Очищаются только регистры, справочники не изменяются. Вызывается, чтобы вызвать
// перезаполнение параметров работы расширений, например, при использовании параметра
// запуска ЗапуститьОбновлениеИнформационнойБазы.
// 
// Общий регистр ПараметрыРаботыВерсийРасширений очищается, встраиваться в
// событие ПриОчисткеВсехПараметровРаботыРасширений общего модуля ИнтеграцияСтандартныхПодсистем
// требуется только, если используются собственные регистры сведений, которых хранят версии
// кэшей объектов метаданных расширений.
//
Процедура ОчиститьВсеПараметрыРаботыРасширений()
	
	Если Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		НаборЗаписей = РегистрыСведений.ИдентификаторыОбъектовВерсийРасширений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВерсияРасширений.Установить(ПараметрыСеанса.ВерсияРасширений);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ПараметрыРаботыВерсийРасширений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВерсияРасширений.Установить(ПараметрыСеанса.ВерсияРасширений);
		НаборЗаписей.Записать();
		
		ИнтеграцияСтандартныхПодсистем.ПриОчисткеВсехПараметровРаботыРасширений();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ЗаполнитьВсеПараметрыРаботыРасширенийФоновоеЗадание(Параметры) Экспорт
	
	Справочники.ИдентификаторыОбъектовМетаданных.УстановитьПараметрСеансаАдресСвойствРасширений(
		Параметры.УстановленныеРасширения, Параметры.ХранилищеСвойствРасширений);
	
	ЗаполнитьВсеПараметрыРаботыРасширений();
	
КонецПроцедуры

// Возвращает контрольные суммы всех установленных расширений.
//
// Вызывается при запуске для установки параметра сеанса УстановленныеРасширения,
// который требуется для анализа наличия расширений и контроля динамического обновления,
// а также из формы установки расширений конфигурации в режиме 1С:Предприятия.
//
// Параметры:
//  Расширения - Неопределено - получить контрольные суммы установленных расширений.
//             - ДанныеФормыКоллекция - получить контрольные суммы из указанного списка.
//
// Возвращаемое значение:
//  Строка - строки вида "<Имя расширения> (<Версия расширения>) <Контрольная сумма>".
// 
Функция КонтрольныеСуммыРасширений(Расширения = Неопределено) Экспорт
	
	Если Расширения = Неопределено Тогда
		Расширения = РасширенияКонфигурации.Получить();
	КонецЕсли;
	
	КонтрольныеСуммы = "";
	
	Для Каждого Расширение Из Расширения Цикл
		Если ТипЗнч(Расширение) = Тип("РасширениеКонфигурации") Тогда
			КонтрольнаяСумма = Base64Строка(Расширение.ХешСумма);
		Иначе
			КонтрольнаяСумма = Расширение.КонтрольнаяСумма;
		КонецЕсли;
		КонтрольныеСуммы =  КонтрольныеСуммы + Символы.ПС
			+ Расширение.Имя + " (" + Расширение.Версия + ") " + КонтрольнаяСумма;
	КонецЦикла;
	
	Возврат СокрЛ(КонтрольныеСуммы);
	
КонецФункции

// Только для внутреннего использования.
Функция РасширенияИзмененыДинамически() Экспорт
	
	Если УстановленныеРасширенияНедоступны() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПараметрыСеанса.УстановленныеРасширения <> КонтрольныеСуммыРасширений();
	
КонецФункции

// Расширения подключаются только в разделенном режиме, когда
// вход в область данных выполнен под разделенным пользователем,
// поэтому обновление кэшей недопустимо выполнять только в этом случае.
//
Функция УстановленныеРасширенияНедоступны() Экспорт
	
	Возврат ОбщегоНазначенияПовтИсп.РазделениеВключено()
	      И ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Дополнительная базовая функциональность для обмена данными.

// Выполняет регистрацию изменений объекта на всех узлах плана обмена.
// Для разделенных конфигураций должны выполняться условия:
//  план обмена должен быть разделенным,
//  регистрируемый объект должен быть неразделенным.
//
//  Параметры:
// Объект - Объект данных (СправочникОбъект, ДокументОбъект и пр.). Объект, который требуется зарегистрировать.
// Объект должен быть неразделенным, иначе будет выдано исключение.
//
// ИмяПланаОбмена - Строка. Имя плана обмена, на всех узлах которого требуется выполнить регистрацию объекта.
// План обмена должен быть разделенным, иначе будет выдано исключение.
//
Процедура ЗарегистрироватьОбъектНаВсехУзлах(Знач Объект, Знач ИмяПланаОбмена) Экспорт
	
	Если Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав.Найти(Объект.Метаданные()) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			ВызватьИсключение НСтр("ru = 'Регистрация изменений неразделенных данных в разделенном режиме.'");
		КонецЕсли;
		
		Если Не ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных("ПланОбмена." + ИмяПланаОбмена,
			ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных()) Тогда
				ВызватьИсключение НСтр("ru = 'Регистрация изменений для неразделенных планов обмена не поддерживается.'");
		КонецЕсли;
		
		Если ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных(Объект.Метаданные().ПолноеИмя(),
			ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных()) Тогда
				ВызватьИсключение НСтр("ru = 'Регистрация изменений для разделенных объектов не поддерживается.'");
		КонецЕсли;
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПланОбмена.Ссылка КАК Получатель
		|ИЗ
		|	ПланОбмена.[ИмяПланаОбмена] КАК ПланОбмена
		|ГДЕ
		|	ПланОбмена.РегистрироватьИзменения
		|	И НЕ ПланОбмена.ПометкаУдаления";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяПланаОбмена]", ИмяПланаОбмена);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Получатели = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Получатель");
		
		Для Каждого Получатель Из Получатели Цикл
			
			Объект.ОбменДанными.Получатели.Добавить(Получатель);
			
		КонецЦикла;
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПланОбмена.Ссылка КАК Получатель
		|ИЗ
		|	ПланОбмена.[ИмяПланаОбмена] КАК ПланОбмена
		|ГДЕ
		|	ПланОбмена.Ссылка <> &ЭтотУзел
		|	И НЕ ПланОбмена.ПометкаУдаления";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяПланаОбмена]", ИмяПланаОбмена);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена[ИмяПланаОбмена].ЭтотУзел());
		Запрос.Текст = ТекстЗапроса;
		
		Получатели = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Получатель");
		
		Для Каждого Получатель Из Получатели Цикл
			
			Объект.ОбменДанными.Получатели.Добавить(Получатель);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет ссылку на главный узел в константе ГлавныйУзел для возможности восстановления.
Процедура СохранитьГлавныйУзел() Экспорт
	
	ГлавныйУзелМенеджер = Константы.ГлавныйУзел.СоздатьМенеджерЗначения();
	ГлавныйУзелМенеджер.Значение = ПланыОбмена.ГлавныйУзел();
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ГлавныйУзелМенеджер);
	
КонецПроцедуры

// Проверят, что выполнение происходит на учебной платформе,
// на которой, например, недоступно получение свойства ПользовательОС.
//
Функция ЭтоУчебнаяПлатформа() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Попытка
		ПользовательОС = ТекущийПользователь.ПользовательОС;
	Исключение
		ТекущийПользователь = Неопределено;
	КонецПопытки;
	
	Возврат ТекущийПользователь = Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики отправки и получения данных для обмена в распределенной ИБ.

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхПодчиненному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель) Экспорт
	
	ПодсистемаОбменДаннымиСуществует = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными");
	Если ПодсистемаОбменДаннымиСуществует Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		МодульОбменДаннымиСервер.РассчитатьПроцентВыгрузкиРИБ(Получатель, СозданиеНачальногоОбраза);
	КонецЕсли;
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	// Отправка идентификаторов объектов метаданных выполняется в другой секции сообщения обмена.
	ИгнорироватьОтправкуИдентификаторовОбъектовМетаданных(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза);
	
	ИгнорироватьОтправкуДанныхОбработанныхВЦентральномУзлеРИБПриОбновленииИБ(ЭлементДанных, СозданиеНачальногоОбраза, Получатель);
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	// Вставка кода от подсистемы обмена данными должна быть первой.
	Если ПодсистемаОбменДаннымиСуществует Тогда
		МодульОбменДаннымиСобытия = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСобытия");
		МодульОбменДаннымиСобытия.ПриОтправкеДанныхКорреспонденту(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель, Ложь);
		
		Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхПодчиненному");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриОтправкеДанныхПодчиненному(
			ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель);
		Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// Вставка кода от подсистемы обмена данными в модели сервиса должна быть последней.
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		МодульОбменДаннымиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		МодульОбменДаннымиВМоделиСервиса.ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель);
		
		Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхГлавному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		МодульОбменДаннымиСервер.РассчитатьПроцентВыгрузкиРИБ(Получатель, Ложь);
	КонецЕсли;
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	// Отправка идентификаторов объектов метаданных выполняется в другой секции сообщения обмена.
	ИгнорироватьОтправкуИдентификаторовОбъектовМетаданных(ЭлементДанных, ОтправкаЭлемента);
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	// Вставка кода от подсистемы обмена данными должна быть первой.
	// При отправке данных главному обработчик не вызываем,
	// т.к. ограничение миграции "снизу-вверх" в РИБ по умолчанию не предусмотрено.
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхГлавному");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель);
		Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтПодчиненного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ПодсистемаОбменДаннымиСуществует = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными");
	Если ПодсистемаОбменДаннымиСуществует Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		МодульОбменДаннымиСервер.РассчитатьПроцентЗагрузкиРИБ(Отправитель);
	КонецЕсли;
	
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтПодчиненного");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриПолученииДанныхОтПодчиненного(
			ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель);
		Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// Вставка кода от подсистемы обмена данными должна быть последней.
	Если ПодсистемаОбменДаннымиСуществует Тогда
		МодульОбменДаннымиСобытия = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСобытия");
		МодульОбменДаннымиСобытия.ПриПолученииДанныхОтПодчиненногоВКонце(ЭлементДанных, ПолучениеЭлемента, Отправитель);
	КонецЕсли;
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтГлавного() в синтаксис-помощнике.
// Параметр Отправитель может быть не заполнен, например, при получении сообщения начального образа в АРМе.
// 
Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель = Неопределено) Экспорт
	
	ПодсистемаОбменДаннымиСуществует = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными");
	Если ПодсистемаОбменДаннымиСуществует Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		МодульОбменДаннымиСервер.РассчитатьПроцентЗагрузкиРИБ(Отправитель);
	КонецЕсли;
	
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	// Вставка кода от подсистемы обмена данными должна быть первой.
	Если ПодсистемаОбменДаннымиСуществует Тогда
		МодульОбменДаннымиСобытия = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСобытия");
		МодульОбменДаннымиСобытия.ПриПолученииДанныхОтГлавногоВНачале(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель);
		
		Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтГлавного");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриПолученииДанныхОтГлавного(
			ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель);
		Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// Вставка кода от подсистемы обмена данными должна быть последней.
	Если ПодсистемаОбменДаннымиСуществует
		И Не СозданиеНачальногоОбраза(ЭлементДанных) Тогда
		
		МодульОбменДаннымиСобытия = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСобытия");
		МодульОбменДаннымиСобытия.ПриПолученииДанныхОтГлавногоВКонце(ЭлементДанных, ПолучениеЭлемента, Отправитель);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий базовой функциональности.

// Заполняет переименования тех объектов метаданных, которые невозможно
// автоматически найти по типу, но ссылки на которые требуется сохранять
// в базе данных (например: подсистемы, роли).
//
// Подробнее: см. ОбщегоНазначения.ДобавитьПереименование().
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульОбработкиПанельАдминистрированияБСП = ОбщегоНазначения.ОбщийМодуль("Обработки.ПанельАдминистрированияБСП");
		МодульОбработкиПанельАдминистрированияБСП.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	ДобавитьПараметрыРаботыКлиента(Параметры);
	
КонецПроцедуры

// Заполняет массив типов неразделенных данных, для которых поддерживается сопоставление ссылок
// при загрузке данных в другую информационную базу.
//
// Параметры:
//  Типы - Массив(ОбъектМетаданных).
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Справочники.ИдентификаторыОбъектовМетаданных);
	
КонецПроцедуры

// Заполняет массив типов, исключаемых из выгрузки и загрузки данных.
//
// Параметры:
//  Типы - Массив(Типы).
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Справочники.ВерсииРасширений);
	Типы.Добавить(Метаданные.Справочники.ИдентификаторыОбъектовРасширений);
	Типы.Добавить(Метаданные.РегистрыСведений.ИдентификаторыОбъектовВерсийРасширений);
	Типы.Добавить(Метаданные.РегистрыСведений.ПараметрыРаботыВерсийРасширений);
	Типы.Добавить(Метаданные.РегистрыСведений.СеансыВерсийРасширений);
	
КонецПроцедуры

// Заполняет перечень запросов внешних разрешений, которые обязательно должны быть предоставлены
// при создании информационной базы или обновлении программы.
//
// Параметры:
//  ЗапросыРазрешений - Массив - список значений, возвращенных функцией.
//                      РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов().
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Разрешения = Новый Массив();
	
	Разрешения.Добавить(РаботаВБезопасномРежиме.РазрешениеНаИспользованиеКаталогаВременныхФайлов(Истина, Истина,
		НСтр("ru = 'Для возможности работы программы.'")));
	Разрешения.Добавить(РаботаВБезопасномРежиме.РазрешениеНаИспользованиеПривилегированногоРежима());
	
	ЗапросыРазрешений.Добавить(
		РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения));
	
	ДобавитьЗапросРазрешенийНаИспользованиеРасширений(ЗапросыРазрешений);
	
КонецПроцедуры

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если МодульТекущиеДелаСервер.ДелоОтключено("РекомендацияПоПовышениюСкоростиРаботы") Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = "РекомендацияПоПовышениюСкоростиРаботы";
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор = Идентификатор;
	Дело.ЕстьДела      = ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти();
	Дело.Важное        = Истина;
	Дело.Представление = НСтр("ru = 'Скорость работы снижена'");
	Дело.Форма         = "Обработка.РекомендацияПоПовышениюСкоростиРаботы.Форма.Форма";
	Дело.Владелец      = НСтр("ru = 'Скорость работы программы'");
	
КонецПроцедуры

// См. одноименную процедуру в общем модуле ПользователиПереопределяемый.
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	// ТолькоДляАдминистраторовСистемы.
	НазначениеРолей.ТолькоДляАдминистраторовСистемы.Добавить(
		Метаданные.Роли.АдминистраторСистемы.Имя);
	
	НазначениеРолей.ТолькоДляАдминистраторовСистемы.Добавить(
		Метаданные.Роли.Администрирование.Имя);
	
	НазначениеРолей.ТолькоДляАдминистраторовСистемы.Добавить(
		Метаданные.Роли.ОбновлениеКонфигурацииБазыДанных.Имя);
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено()
	   И ЭтоБазоваяВерсияКонфигурации() Тогда
		
		НазначениеРолей.ТолькоДляАдминистраторовСистемы.Добавить(
			Метаданные.Роли.ПолныеПрава.Имя);
	КонецЕсли;
	
	// ТолькоДляПользователейСистемы.
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(
		Метаданные.Роли.ЗапускТолстогоКлиента.Имя);
	
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(
		Метаданные.Роли.ЗапускВнешнегоСоединения.Имя);
	
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(
		Метаданные.Роли.ЗапускAutomation.Имя);
	
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(
		Метаданные.Роли.РежимВсеФункции.Имя);
	
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(
		Метаданные.Роли.ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок.Имя);
	
	// ТолькоДляВнешнихПользователей.
	НазначениеРолей.ТолькоДляВнешнихПользователей.Добавить(
		Метаданные.Роли.БазовыеПраваВнешнегоПользователя.Имя);
	
	// СовместноДляПользователейИВнешнихПользователей.
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(
		Метаданные.Роли.ЗапускТонкогоКлиента.Имя);
	
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(
		Метаданные.Роли.ЗапускВебКлиента.Имя);
		
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(
		Метаданные.Роли.ВыводНаПринтерФайлБуферОбмена.Имя);
	
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(
		Метаданные.Роли.СохранениеДанныхПользователя.Имя);
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// Дополнительные функции для работы с типами.

// Возвращает тип ссылки или ключа записи указанного объекта метаданных.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - регистр или ссылочный объект.
// 
//  Возвращаемое значение:
//   Тип.
//
Функция ТипСсылкиИлиКлючаЗаписиОбъектаМетаданных(ОбъектМетаданных) Экспорт
	
	Если ОбщегоНазначения.ЭтоРегистр(ОбъектМетаданных) Тогда
		
		Если ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрСведений";
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрНакопления(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрНакопления";
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрБухгалтерии(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрБухгалтерии";
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрРасчета(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрРасчета";
		КонецЕсли;
		Тип = Тип(ВидРегистра + "КлючЗаписи." + ОбъектМетаданных.Имя);
	Иначе
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		Тип = ТипЗнч(Менеджер.ПустаяСсылка());
	КонецЕсли;
	
	Возврат Тип;
	
КонецФункции

// Возвращает тип объекта или набора записей указанного объекта метаданных.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - регистр или ссылочный объект.
// 
//  Возвращаемое значение:
//   Тип.
//
Функция ТипОбъектаИлиНабораЗаписейОбъектаМетаданных(ОбъектМетаданных) Экспорт
	
	Если ОбщегоНазначения.ЭтоРегистр(ОбъектМетаданных) Тогда
		
		Если ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрСведений";
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрНакопления(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрНакопления";
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрБухгалтерии(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрБухгалтерии";
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрРасчета(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрРасчета";
		КонецЕсли;
		Тип = Тип(ВидРегистра + "НаборЗаписей." + ОбъектМетаданных.Имя);
	Иначе
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		ВидОбъекта = ОбщегоНазначения.ВидОбъектаПоТипу(ТипЗнч(Менеджер.ПустаяСсылка()));
		Тип = Тип(ВидОбъекта + "Объект." + ОбъектМетаданных.Имя);
	КонецЕсли;
	
	Возврат Тип;
	
КонецФункции

// Выполняет проверку, что переданный объект имеет тип СправочникОбъект.ИдентификаторыОбъектовМетаданных.
//
Функция ЭтоИдентификаторОбъектаМетаданных(Объект) Экспорт
	
	Возврат ТипЗнч(Объект) = Тип("СправочникОбъект.ИдентификаторыОбъектовМетаданных");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с формами.

// Устанавливает ключ назначения формы (ключ назначения использования и
// ключ сохранения положения окна). При необходимости копирует текущие настройки формы,
// если для соответствующего нового ключа они еще не были записаны.
//
// Параметры:
//  Форма - УправляемаяФорма - форма ПриСозданииНаСервере, которой устанавливается ключ.
//  Ключ  - Строка - новый ключ назначения формы.
//  УстановитьНастройки - Булево - установить новому ключу настройки, сохраненные для текущего ключа.
//
Процедура УстановитьКлючНазначенияФормы(Форма, Ключ, КлючПоложения = "", УстановитьНастройки = Истина) Экспорт
	
	УстановитьКлючНазначенияИспользованияФормы(Форма, Ключ, УстановитьНастройки);
	УстановитьКлючСохраненияПоложенияОкнаФормы(Форма, ?(КлючПоложения = "", Ключ, КлючПоложения), УстановитьНастройки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с файловой системой.

// Добавляет новый каталог временных файлов.
//   Используется в связке с ОчиститьКаталогВременныхФайлов.
//
// Параметры:
//   Расширение - Строка - Расширение каталога.
//       В качестве расширения полезно указывать аббревиатуру подсистемы, чтобы было понятно "кто за собой не убрал".
//       Рекомендуется указывать на английском языке, чтобы исключить ошибки ОС.
//
// Возвращаемое значение:
//   Строка - Полный путь к каталогу с последним слешем.
//
Функция СоздатьКаталогВременныхФайлов(Расширение) Экспорт
	ПутьККаталогу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла(Расширение));
	СоздатьКаталог(ПутьККаталогу);
	Возврат ПутьККаталогу;
КонецФункции

// Добавляет новый каталог временных файлов.
//   Используется в связке с СоздатьКаталогВременныхФайлов.
//
// Параметры:
//   ПутьККаталогу - Строка - Полный путь к каталогу.
//
Процедура ОчиститьКаталогВременныхФайлов(ПутьККаталогу) Экспорт
	Попытка
		УдалитьФайлы(ПутьККаталогу);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Стандартные подсистемы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка очистки каталога временных файлов ""%1"":%2'"),
				ПутьККаталогу,
				Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции.

// Устанавливает использование предопределенного регламентного задания.
//
// Параметры:
//  ЗаданиеМетаданные - ОбъектМетаданных - метаданные предопределенного регламентного задания.
//  Использование     - Булево - Истина, если задание нужно включить, иначе Ложь.
//
Процедура УстановитьИспользованиеПредопределенногоРегламентногоЗадания(ЗаданиеМетаданные, Использование) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			МодульРаботаВМоделиСервиса.УстановитьИспользованиеПредопределенногоРегламентногоЗадания(ЗаданиеМетаданные, Использование);
		КонецЕсли;
	Иначе
		Задание = РегламентныеЗадания.НайтиПредопределенное(ЗаданиеМетаданные);
		
		Если Задание.Использование <> Использование Тогда
			Задание.Использование = Использование;
			Задание.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает уточнения при возникновении проблем с параметрами работы программы.
Функция УточнениеОшибкиПараметровРаботыПрограммыДляРазработчика() Экспорт
	
	Возврат Символы.ПС + Символы.ПС 
		+ НСтр("ru = 'Для разработчика: возможно требуется обновить вспомогательные данные,
					|которые влияют на работу программы. Для выполнения обновления можно:
					|- воспользоваться внешней обработкой
					|  ""Инструменты разработчика: Обновление вспомогательных данных"",
					|- либо запустить программу с параметром командной строки 1С:Предприятия 8
					|  ""/С ЗапуститьОбновлениеИнформационнойБазы"",
					|- либо увеличить номер версии конфигурации, чтобы при очередном запуске
					|  выполнились процедуры обновления данных информационной базы.'");
	
КонецФункции

// Возвращает номер версии Библиотеки стандартных подсистем.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат СтандартныеПодсистемыПовтИсп.ОписанияПодсистем().ПоИменам["СтандартныеПодсистемы"].Версия;
	
КонецФункции

// Возвращает текущего пользователя информационной базы
//
Функция ТекущийПользователь() Экспорт
	
	// Вычисляем актуальное имя пользователя, даже если оно было ранее изменено в текущем сеансе;
	// Например, для подключения к текущей ИБ через внешнее соединение из этого сеанса;
	// Во всех остальных случаях достаточно получить ПользователиИнформационнойБазы.ТекущийПользователь().
	ТекущийПользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
	
	Если ТекущийПользователь = Неопределено Тогда
		ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	КонецЕсли;
	
	Возврат ТекущийПользователь;
	
КонецФункции

// Преобразует строку в допустимое наименование колонки таблицы значений, заменяя недопустимые
// символы на код символа ограниченного символом подчеркивания.
//
// Параметры:
//  Строка - Строка - Строка для преобразования.
// 
// Возвращаемое значение:
//  Строка - Строка, содержащая только допустимые символы для наименования колонок таблицы значений.
//
Функция ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(Строка) Экспорт
	
	НедопустимыеСимволы = ":;!@#$%^&-~`'.,?{}[]+=*/|\ ()_";
	Результат = "";
	Для Индекс = 1 По СтрДлина(Строка) Цикл
		Символ =  Сред(Строка, Индекс, 1);
		Если СтрНайти(НедопустимыеСимволы, Символ) > 0 Тогда
			Результат = Результат + "_" + КодСимвола(Символ) + "_";
		Иначе
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Преобразовать адаптированное наименование колонки, в котором недопустимые
// символы заменены на код символа, ограниченного символом подчеркивания в обычную строку.
//
// Параметры:
//  НаименованиеКолонки - Строка - Адаптированное наименование колонки.
// 
// Возвращаемое значение:
//  Строка - преобразованная строка.
//
Функция ПреобразоватьАдаптированноеНаименованиеКолонкиВСтроку(НаименованиеКолонки) Экспорт
	
	Результат = "";
	Для Индекс = 1 По СтрДлина(НаименованиеКолонки) Цикл
		Символ = Сред(НаименованиеКолонки, Индекс, 1);
		Если Символ = "_" Тогда
			ПозицияЗакрывающегоСимвола = СтрНайти(НаименованиеКолонки, "_", НаправлениеПоиска.СНачала, Индекс + 1);
			КодСимвола = Сред(НаименованиеКолонки, Индекс + 1, ПозицияЗакрывающегоСимвола - Индекс - 1);
			Результат = Результат + Символ(КодСимвола);
			Индекс = ПозицияЗакрывающегоСимвола;
		Иначе
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Условное оформление управляемой формы.

// Формирует структуру, описывающую элемент условного оформления.
//   Используется перед вызовом ДобавитьЭлементУсловногоОформления().
//
// Возвращаемое значение:
//   Структура - Шаблон, описывающий элемент условного оформления.
//       Подробнее см. значение 2го параметра функции ДобавитьЭлементУсловногоОформления().
//
Функция ИнструкцияУсловногоОформления() Экспорт
	Возврат Новый Структура("Отборы, Оформление, Поля", Новый Соответствие, Новый Соответствие, "");
КонецФункции

// Добавляет элемент условного оформления в форму согласно его описанию в параметре Инструкция.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма, в которую необходимо добавить условное оформление.
//   Инструкция - Структура - Описание элемента условного оформления.
//       * Поля - Строка - Имена элементов формы, разделенные запятыми, для которых применяется оформление.
//           Например: "Поле1, Поле2".
//       * Отборы - Соответствие - Фильтр для применения этого оформления.
//           ** Ключ - Строка - Полное имя реквизита формы, по которому выполняется отбор условного оформления.
//           ** Значение - Произвольный - Значение условного оформления.
//               - Произвольный, кроме указанных ниже -
//                   Используется для условия "Равно".
//                   В ПравоеЗначение записывается значение Значение,
//                   а в ВидСравнения устанавливается ВидСравненияКомпоновкиДанных.Равно.
//               - Массив - 
//                   Используется для условия "В списке".
//                   В ПравоеЗначение записывается Значение (массив),
//                   а в ВидСравнения записывается ВидСравненияКомпоновкиДанных.ВСписке.
//               - ВидСравненияКомпоновкиДанных - 
//                   Используется для установки условия без значения (например, ВидСравненияКомпоновкиДанных.Заполнено).
//                   В ПравоеЗначение ничего не записывается,
//                   а в ВидСравнения записывается Значение.
//               - Структура - Используется во всех остальных случаях.
//                   *** Вид - Имя ключа системного перечисления "ВидСравненияКомпоновкиДанных".
//                   *** Значение - Значение, которое будет записано в правое значение.
//                   В ПравоеЗначение записывается Структура.Значение,
//                   а в ВидСравнения записывается ВидСравненияКомпоновкиДанных[Структура.Вид].
//       * Оформление - Соответствие - Как оформлять указанные поля.
//           ** Ключ - Строка - Имя параметра оформления компоновки данных.
//           ** Значение - Произвольный - Значение параметра.
//           Имена параметров и их значения см. в синтакс-помощнике: "ОформлениеКомпоновкиДанных", блок "Описание".
//
// Например:
//   
//   Пример № 1 - подсветка строк серым цветом (таблица называется "ВариантыОтчета").
//	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
//	Инструкция.Поля = "ВариантыОтчета, ВариантыОтчетаНаименование";
//	Инструкция.Отборы.Вставить("ВариантыОтчета.Пользовательский", Ложь);
//	Инструкция.Оформление.Вставить("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
//	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
//   
//   Пример № 2 - скрытие строк дерева (таблица называется "ДеревоВариантовОтчета").
//	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
//	Инструкция.Поля = "ДеревоВариантовОтчета, ДеревоВариантовОтчетаПредставление, ДеревоВариантовОтчетаАвтор";
//	Инструкция.Отборы.Вставить("ДеревоВариантовОтчета.СкрытОтбором", Истина);
//	Инструкция.Оформление.Вставить("Видимость", Ложь);
//	Инструкция.Оформление.Вставить("Отображать", Ложь);
//	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
//   
//   Пример № 3 - недоступность полей.
//	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
//	Инструкция.Отборы.Вставить("Отборы.ЭтоРаздел", Истина);
//	Инструкция.Поля = "ОтборыУсловие, ОтборыЗначение, ОтборыПредставлениеЗначения, ОтборыИндексКартинкиДоступа, ОтборыЗаголовок";
//	Инструкция.Оформление.Вставить("ТолькоПросмотр", Истина);
//	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
//
// Возвращаемое значение:
//   ЭлементУсловногоОформленияКомпоновкиДанных - Добавленный элемент.
//
Функция ДобавитьЭлементУсловногоОформления(Форма, Инструкция) Экспорт
	ЭлементУсловногоОформленияКД = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформленияКД.Использование = Истина;
	
	ДополнитьОтборыИзСтруктуры(ЭлементУсловногоОформленияКД.Отбор, Инструкция.Отборы);
	
	Для Каждого КлючИЗначение Из Инструкция.Оформление Цикл
		ЭлементУсловногоОформленияКД.Оформление.УстановитьЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных(КлючИЗначение.Ключ),
			КлючИЗначение.Значение);
	КонецЦикла;
	
	РежимОтладки = ОбщегоНазначенияКлиентСервер.РежимОтладки();
	
	Поля = Инструкция.Поля;
	Если ТипЗнч(Поля) = Тип("Строка") Тогда
		Поля = СтрРазделить(Поля, ",", Ложь);
	КонецЕсли;
	Для Каждого Поле Из Поля Цикл
		ИмяЭлемента = СокрЛП(Поле);
		ПолеКД = ЭлементУсловногоОформленияКД.Поля.Элементы.Добавить();
		ПолеКД.Использование = Истина;
		ПолеКД.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
		Если РежимОтладки И Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			Шаблон = НСтр("ru = 'Ошибка добавления условного оформления: Не найден элемент ""%1"".'");
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ИмяЭлемента);
			Сообщение.ИдентификаторНазначения = Форма.УникальныйИдентификатор;
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЭлементУсловногоОформленияКД;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы со статистикой использования конфигурации

// Собирает статистику использования конфигурации
//
Процедура СобратьСтатистикуКонфигурации() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЦентрМониторинга") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыСлужебный.СобратьСтатистикуКонфигурации();
	ПользователиСлужебный.СобратьСтатистикуКонфигурации();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.СобратьСтатистикуКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
		МодульВариантыОтчетов.СобратьСтатистикуКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСКонтрагентами") Тогда
		МодульПроверкаКонтрагентов = ОбщегоНазначения.ОбщийМодуль("ПроверкаКонтрагентов");
		МодульПроверкаКонтрагентов.СобратьСтатистикуКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ФайловыеФункции") Тогда
		МодульФайловыеФункции = ОбщегоНазначения.ОбщийМодуль("ФайловыеФункции");
		МодульФайловыеФункции.СобратьСтатистикуКонфигурации();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Отборы.

// Устанавливает отборы по расширенной информации из структуры.
Процедура ДополнитьОтборыИзСтруктуры(Отбор, Структура, РежимОтображения = Неопределено) Экспорт
	Если РежимОтображения = Неопределено Тогда
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	Для Каждого КлючИЗначение Из Структура Цикл
		ИмяПоля = КлючИЗначение.Ключ;
		ОтборПоля = КлючИЗначение.Значение;
		Тип = ТипЗнч(ОтборПоля);
		Если Тип = Тип("Структура") Тогда
			Условие = ВидСравненияКомпоновкиДанных[ОтборПоля.Вид];
			Значение = ОтборПоля.Значение;
		ИначеЕсли Тип = Тип("Массив") Тогда
			Условие = ВидСравненияКомпоновкиДанных.ВСписке;
			Значение = ОтборПоля;
		ИначеЕсли Тип = Тип("СписокЗначений") Тогда
			Условие = ВидСравненияКомпоновкиДанных.ВСписке;
			Значение = ОтборПоля.ВыгрузитьЗначения();
		ИначеЕсли Тип = Тип("ВидСравненияКомпоновкиДанных") Тогда
			Условие = ОтборПоля;
			Значение = Неопределено;
		Иначе
			Условие = ВидСравненияКомпоновкиДанных.Равно;
			Значение = ОтборПоля;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Отбор,
			ИмяПоля,
			Значение,
			Условие,
			,
			Истина,
			РежимОтображения);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// данной подсистемы при запуске конфигурации, т.е. в обработчиках событий.
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы.
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
// Возвращаемое значение:
//   Булево   - Ложь, если дальнейшее заполнение параметров необходимо прервать.
//
Функция ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ЭтоВызовПередНачаломРаботыСистемы = Параметры.ПолученныеПараметрыКлиента <> Неопределено;
	
	// Обязательные параметры для продолжения работы.
	Параметры.Вставить("РазделениеВключено", ОбщегоНазначенияПовтИсп.РазделениеВключено());
	
	Параметры.Вставить("ДоступноИспользованиеРазделенныхДанных", 
		ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
	
	Параметры.Вставить("ЭтоРазделеннаяКонфигурация", ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация());
	Параметры.Вставить("ЕстьДоступДляОбновленияВерсииПлатформы", Пользователи.ЭтоПолноправныйПользователь(,Истина));
	
	Параметры.Вставить("ИменаПодсистем", СтандартныеПодсистемыПовтИсп.ИменаПодсистем());
	Параметры.Вставить("ЭтоБазоваяВерсияКонфигурации", ЭтоБазоваяВерсияКонфигурации());
	Параметры.Вставить("ЭтоУчебнаяПлатформа", ЭтоУчебнаяПлатформа());
	Параметры.Вставить("ИмяТекущегоПользователя", ТекущийПользователь().Имя);
	Параметры.Вставить("ИмяCOMСоединителя", ОбщегоНазначенияКлиентСервер.ИмяCOMСоединителя());
	Параметры.Вставить("КодОсновногоЯзыка", Метаданные.ОсновнойЯзык.КодЯзыка);
	
	ОбщиеПараметры = ОбщегоНазначения.ОбщиеПараметрыБазовойФункциональности();
	Параметры.Вставить("МинимальноНеобходимаяВерсияПлатформы", ОбщиеПараметры.МинимальноНеобходимаяВерсияПлатформы);
	Параметры.Вставить("РаботаВПрограммеЗапрещена",            ОбщиеПараметры.РаботаВПрограммеЗапрещена);
	
	Параметры.Вставить("РекомендуемыйОбъемОперативнойПамяти", ОбщиеПараметры.РекомендуемыйОбъемОперативнойПамяти);
	Параметры.Вставить("ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти", ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти()
		И Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела"));
	
	Параметры.Вставить("ЭтоСеансВнешнегоПользователя", ПользователиСлужебныйПовтИсп.ЭтоСеансВнешнегоПользователя());
	
	Если ЭтоВызовПередНачаломРаботыСистемы Тогда
		Параметры.Вставить("ОпцииИнтерфейса", ОбщегоНазначенияПовтИсп.ОпцииИнтерфейса());
	КонецЕсли;
	
	Если ЭтоВызовПередНачаломРаботыСистемы Тогда
		ОшибкаНедостаточноПравДляВходаВПрограмму = ПользователиСлужебный.ОшибкаНедостаточноПравДляВходаВПрограмму(
			Не Параметры.ПолученныеПараметрыКлиента.Свойство("ОшибкаНедостаточноПравДляВходаВПрограмму"));
		
		Если ЗначениеЗаполнено(ОшибкаНедостаточноПравДляВходаВПрограмму) Тогда
			Параметры.Вставить("ОшибкаНедостаточноПравДляВходаВПрограмму", ОшибкаНедостаточноПравДляВходаВПрограмму);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РегламентныеЗадания") Тогда
		МодульРегламентныеЗаданияСлужебный = ОбщегоНазначения.ОбщийМодуль("РегламентныеЗаданияСлужебный");
		// Форма показывается только администратору.
		ПоказатьФормуБлокировки = МодульРегламентныеЗаданияСлужебный.УстановленаБлокировкаРаботыСВнешнимиРесурсами(
			ЭтоВызовПередНачаломРаботыСистемы, Истина) И Пользователи.ЭтоПолноправныйПользователь();
		Параметры.Вставить("ПоказатьФормуБлокировкиРаботыСВнешнимиРесурсами", ПоказатьФормуБлокировки);
	КонецЕсли;
	
	Если Не ОбновлениеИнформационнойБазыСлужебный.ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры)
	   И ЭтоВызовПередНачаломРаботыСистемы Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ПоказатьНерекомендуемуюВерсиюПлатформы")
	   И ПоказатьНерекомендуемуюВерсиюПлатформы(Параметры) Тогда
		
		Параметры.Вставить("ПоказатьНерекомендуемуюВерсиюПлатформы");
		СтандартныеПодсистемыВызовСервера.СкрытьРабочийСтолПриНачалеРаботыСистемы();
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ВосстановитьСвязьСГлавнымУзлом")
	   И Не ОбщегоНазначенияПовтИсп.РазделениеВключено()
	   И ПланыОбмена.ГлавныйУзел() = Неопределено
	   И ЗначениеЗаполнено(Константы.ГлавныйУзел.Получить()) Тогда
		
		УстановитьПривилегированныйРежим(Ложь);
		Параметры.Вставить("ВосстановитьСвязьСГлавнымУзлом", Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь));
		СтандартныеПодсистемыВызовСервера.СкрытьРабочийСтолПриНачалеРаботыСистемы();
		Возврат Ложь;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЭтоВызовПередНачаломРаботыСистемы
	   И НЕ (Параметры.РазделениеВключено И Не Параметры.ДоступноИспользованиеРазделенныхДанных)
	   И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		ОписаниеОшибки = "";
		МодульРаботаВМоделиСервиса.ПриПроверкеБлокировкиОбластиДанныхПриЗапуске(ОписаниеОшибки);
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			Параметры.Вставить("ОбластьДанныхЗаблокирована", ОписаниеОшибки);
			// Работа будет завершена.
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Параметры.РазделениеВключено
		И ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы()
		И ОбновлениеИнформационнойБазыСлужебный.СтатусНевыполненныхОбработчиков(Истина) = "СтатусНеВыполнено" Тогда
		Параметры.Вставить("НеобходимоВыполнитьОбработчикиОтложенногоОбновления");
	КонецЕсли;
	
	РаботаВБезопасномРежимеСлужебный.ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры, Истина);
	
	Если ЭтоВызовПередНачаломРаботыСистемы
	   И НЕ Параметры.ПолученныеПараметрыКлиента.Свойство("ПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском")
	   И ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ()
	   И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		
		МодульОбменДаннымиВызовСервера = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВызовСервера");
		Если МодульОбменДаннымиВызовСервера.ПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском() Тогда
			Параметры.Вставить("ПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском");
			Попытка
				ПараметрыПрограммныхСобытий = СтандартныеПодсистемыПовтИсп.ПараметрыПрограммныхСобытий();
			Исключение
				ПараметрыПрограммныхСобытий = Неопределено;
				// При первом вызове будет исключение.
				// При втором вызове параметры служебных событий обновляются в форме.
				// ПовторнаяСинхронизацияДанныхПередЗапуском для поддержки настройки параметров
				// подключения синхронизации данных (в том числе для работы профилей безопасности).
			КонецПопытки;
			Если ПараметрыПрограммныхСобытий <> Неопределено Тогда
				Параметры.Вставить("ОбработчикиКлиентскихСобытий", ПараметрыПрограммныхСобытий.ОбработчикиСобытий.НаКлиенте);
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка необходимости предварительного обновления параметров работы программы.
	Если ЭтоВызовПередНачаломРаботыСистемы
	   И НЕ Параметры.ПолученныеПараметрыКлиента.Свойство("НеобходимоОбновлениеПараметровРаботыПрограммы") Тогда
		
		Если НеобходимоОбновлениеПараметровРаботыПрограммы() Тогда
			// Будет выполнено предварительное обновление.
			Параметры.Вставить("НеобходимоОбновлениеПараметровРаботыПрограммы");
			Параметры.Вставить("ИнформационнаяБазаФайловая", ОбщегоНазначения.ИнформационнаяБазаФайловая());
			Возврат Ложь;
		Иначе
			ПодтвердитьОбновлениеПараметраРаботыПрограммы("*", "");
		КонецЕсли;
	КонецЕсли;
	
	// Обязательные параметры для всех режимов работы.
	Параметры.Вставить("ОбработчикиКлиентскихСобытий", СтандартныеПодсистемыПовтИсп.ПараметрыПрограммныхСобытий().ОбработчикиСобытий.НаКлиенте);
	
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);
	
	Если ОбновлениеИнформационнойБазыСлужебный.НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы() Тогда
		Параметры.Вставить("НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы");
	КонецЕсли;
	
	Параметры.Вставить("ОпцииИнтерфейса", ОбщегоНазначенияПовтИсп.ОпцииИнтерфейса());
	
	РаботаВБезопасномРежимеСлужебный.ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры);
	
	Если Параметры.РазделениеВключено И Не Параметры.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Параметры для работы в локальном режиме или
	// в сеансе с установленными значениями разделителей в модели сервиса.
	
	Если ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Параметры.Вставить("НеобходимоОбновлениеИнформационнойБазы");
		СтандартныеПодсистемыВызовСервера.СкрытьРабочийСтолПриНачалеРаботыСистемы();
	КонецЕсли;
	
	Если Не Параметры.РазделениеВключено
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		Если МодульОбменДаннымиСервер.ЗагрузитьСообщениеОбменаДанными() Тогда
			Параметры.Вставить("ЗагрузитьСообщениеОбменаДанными");
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		МодульАвтономнаяРаботаСлужебный = ОбщегоНазначения.ОбщийМодуль("АвтономнаяРаботаСлужебный");
		Если МодульАвтономнаяРаботаСлужебный.ПродолжитьНастройкуАвтономногоРабочегоМеста(Параметры) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	Если ЭтоВызовПередНачаломРаботыСистемы Тогда
		ПользователиСлужебный.ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры, Отказ, Истина);
	КонецЕсли;
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДобавитьОбщиеПараметрыРаботыКлиента(Параметры);
	
	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Параметры.Свойство("НеобходимоОбновлениеИнформационнойБазы") Тогда
		// Не следует добавлять остальные параметры до окончания обновления ИБ,
		// так как они могут рассчитывать, что обновление ИБ уже выполнено.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// данной подсистемы. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиента(Параметры) Экспорт
	
	Параметры.Вставить("ИменаПодсистем", СтандартныеПодсистемыПовтИсп.ИменаПодсистем());
	Параметры.Вставить("ДоступноИспользованиеРазделенныхДанных",
		ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
	Параметры.Вставить("РазделениеВключено", ОбщегоНазначенияПовтИсп.РазделениеВключено());
	
	Параметры.Вставить("ОпцииИнтерфейса", ОбщегоНазначенияПовтИсп.ОпцииИнтерфейса());
	Параметры.Вставить("ЭтоБазоваяВерсияКонфигурации", ЭтоБазоваяВерсияКонфигурации());
	Параметры.Вставить("ЭтоУчебнаяПлатформа", ЭтоУчебнаяПлатформа());
	Параметры.Вставить("ИмяCOMСоединителя", ОбщегоНазначенияКлиентСервер.ИмяCOMСоединителя());
	
	ДобавитьОбщиеПараметрыРаботыКлиента(Параметры);
	
	Параметры.Вставить("ИмяКонфигурации",     Метаданные.Имя);
	Параметры.Вставить("СинонимКонфигурации", Метаданные.Синоним);
	Параметры.Вставить("ВерсияКонфигурации",  Метаданные.Версия);
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);
	Параметры.Вставить("КодОсновногоЯзыка", Метаданные.ОсновнойЯзык.КодЯзыка);
	
	Параметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",
		ЗапрашиватьПодтверждениеПриЗавершенииПрограммы());
	
	ДатаСеанса = ТекущаяДатаСеанса();
	ДатаСеансаУниверсальная = УниверсальноеВремя(ДатаСеанса, ЧасовойПоясСеанса());
	// Записываем серверное время для последующей замены его на разницу с клиентом.
	Параметры.Вставить("ПоправкаКВремениСеанса", ДатаСеанса);
	Параметры.Вставить("ПоправкаКУниверсальномуВремени", ДатаСеансаУниверсальная - ДатаСеанса);
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации и в дальнейшем во время работы с ней. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьОбщиеПараметрыРаботыКлиента(Параметры)
	
	Если Не Параметры.РазделениеВключено Или Параметры.ДоступноИспользованиеРазделенныхДанных Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Параметры.Вставить("АвторизованныйПользователь", Пользователи.АвторизованныйПользователь());
		Параметры.Вставить("ПредставлениеПользователя", Строка(Параметры.АвторизованныйПользователь));
		Параметры.Вставить("ЗаголовокПриложения", СокрЛП(Константы.ЗаголовокСистемы.Получить()));
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Параметры.Вставить("ЭтоГлавныйУзел", НЕ ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ());
	Параметры.Вставить("ИнформационнаяБазаФайловая", ОбщегоНазначения.ИнформационнаяБазаФайловая());
	
	Параметры.Вставить("ТребуетсяОбновлениеКонфигурацииУзлаРИБ",
		ОбщегоНазначения.ТребуетсяОбновлениеКонфигурацииПодчиненногоУзлаРИБ());
	
КонецПроцедуры

// Возвращает массив поддерживаемых подсистемой ИмяПодсистемы названий номеров версий.
//
// Параметры:
// ИмяПодсистемы - Строка - Имя подсистемы.
//
// Возвращаемое значение:
//  Массив - список значений типа Строка.
//
Функция ПоддерживаемыеВерсии(ИмяПодсистемы) Экспорт
	
	МассивВерсий = Неопределено;
	СтруктураПоддерживаемыхВерсий = Новый Структура;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);
	КонецЦикла;
	
	СтруктураПоддерживаемыхВерсий.Свойство(ИмяПодсистемы, МассивВерсий);
	
	Если МассивВерсий = Неопределено Тогда
		Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(Новый Массив);
	Иначе
		Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(МассивВерсий);
	КонецЕсли;
	
КонецФункции

// Возвращает соответствие имен событий массивам их обработчиков.
// 
// Возвращаемое значение:
//  Структура - информация об обработчиках событий:
//   * НаКлиенте - Соответствие -
//     ** Ключ     - Строка - полное имя события,
//     ** Значение - Массив - список структур со свойствами:
//        *** Версия - Строка - версия обработчика (пустая, если не была указана),
//        *** Модуль - Строка - имя модуля, в котором размещен обработчик.
//   * НаСервере - Соответствие -
//     ** Ключ     - Строка - полное имя события,
//     ** Значение - Массив - список структур со свойствами:
//        *** Версия - Строка - версия обработчика (пустая, если не была указана),
//        *** Модуль - Строка - имя модуля, в котором размещен обработчик.
//
Функция ОбработчикиСобытий() Экспорт
	
	ОписанияПодсистем = СтандартныеПодсистемыПовтИсп.ОписанияПодсистем();
	
	// Определение всех доступных событий программы.
	КлиентскиеСобытия = Новый Массив;
	СерверныеСобытия  = Новый Массив;
	КлиентскиеСлужебныеСобытия = Новый Массив;
	СерверныеСлужебныеСобытия  = Новый Массив;
	
	Для каждого Подсистема Из ОписанияПодсистем.Порядок Цикл
		Описание = ОписанияПодсистем.ПоИменам[Подсистема];
		
		Если НЕ Описание.ДобавлятьСобытия
		   И НЕ Описание.ДобавлятьСлужебныеСобытия Тогда
			
			Продолжить;
		КонецЕсли;
		
		Модуль = ОбщегоНазначения.ОбщийМодуль(
			Описание.ОсновнойСерверныйМодуль);
		
		Если Описание.Имя = "СтандартныеПодсистемы" Тогда
			Модуль = СтандартныеПодсистемыСервер;
		КонецЕсли;
		
		Если Описание.ДобавлятьСобытия Тогда
			Модуль.ПриДобавленииСобытий(КлиентскиеСобытия, СерверныеСобытия);
		КонецЕсли;
		
		Если Описание.ДобавлятьСлужебныеСобытия Тогда
			Модуль.ПриДобавленииСлужебныхСобытий(КлиентскиеСлужебныеСобытия, СерверныеСлужебныеСобытия);
		КонецЕсли;
	КонецЦикла;
	
	ПроверкаУникальностиИменСобытий(КлиентскиеСобытия);
	ПроверкаУникальностиИменСобытий(СерверныеСобытия);
	ПроверкаУникальностиИменСобытий(КлиентскиеСлужебныеСобытия);
	ПроверкаУникальностиИменСобытий(СерверныеСлужебныеСобытия);
	
	// Подготовка новых массивов для добавления обработчиков.
	ОбработчикиКлиентскихСобытийПоПодсистемам = Новый Соответствие;
	ОбработчикиСерверныхСобытийПоПодсистемам  = Новый Соответствие;
	ОбработчикиКлиентскихСлужебныхСобытийПоПодсистемам = Новый Соответствие;
	ОбработчикиСерверныхСлужебныхСобытийПоПодсистемам  = Новый Соответствие;
	
	ОбязательныеКлиентскиеСобытия = Новый Соответствие;
	ОбязательныеСерверныеСобытия  = Новый Соответствие;
	ОбязательныеКлиентскиеСлужебныеСобытия = Новый Соответствие;
	ОбязательныеСерверныеСлужебныеСобытия  = Новый Соответствие;
	
	Для каждого Подсистема Из ОписанияПодсистем.Порядок Цикл
		
		ОбработчикиКлиентскихСобытийПоПодсистемам.Вставить(Подсистема,
			ШаблонОбработчиковСобытий(КлиентскиеСобытия, ОбязательныеКлиентскиеСобытия));
		
		ОбработчикиСерверныхСобытийПоПодсистемам.Вставить(Подсистема,
			ШаблонОбработчиковСобытий(СерверныеСобытия, ОбязательныеСерверныеСобытия));
		
		ОбработчикиКлиентскихСлужебныхСобытийПоПодсистемам.Вставить(Подсистема,
			ШаблонОбработчиковСобытий(КлиентскиеСлужебныеСобытия, ОбязательныеКлиентскиеСлужебныеСобытия));
		
		ОбработчикиСерверныхСлужебныхСобытийПоПодсистемам.Вставить(Подсистема,
			ШаблонОбработчиковСобытий(СерверныеСлужебныеСобытия, ОбязательныеСерверныеСлужебныеСобытия));
		
	КонецЦикла;
	
	// Добавление всех обработчиков для требуемых событий программы.
	Для каждого Подсистема Из ОписанияПодсистем.Порядок Цикл
		Описание = ОписанияПодсистем.ПоИменам[Подсистема];
		
		Если НЕ Описание.ДобавлятьОбработчикиСобытий
		   И НЕ Описание.ДобавлятьОбработчикиСлужебныхСобытий Тогда
			
			Продолжить;
		КонецЕсли;
		
		Модуль = ОбщегоНазначения.ОбщийМодуль(
			Описание.ОсновнойСерверныйМодуль);
		
		Если Описание.Имя = "СтандартныеПодсистемы" Тогда
			Модуль = СтандартныеПодсистемыСервер;
		КонецЕсли;
		
		Если Описание.ДобавлятьОбработчикиСобытий Тогда
			Модуль.ПриДобавленииОбработчиковСобытий(
				ОбработчикиКлиентскихСобытийПоПодсистемам[Подсистема],
				ОбработчикиСерверныхСобытийПоПодсистемам[Подсистема]);
		КонецЕсли;
		
		Если Описание.ДобавлятьОбработчикиСлужебныхСобытий Тогда
			Модуль.ПриДобавленииОбработчиковСлужебныхСобытий(
				ОбработчикиКлиентскихСлужебныхСобытийПоПодсистемам[Подсистема],
				ОбработчикиСерверныхСлужебныхСобытийПоПодсистемам[Подсистема]);
		КонецЕсли;
	КонецЦикла;
	
	// Проверка обязательных событий.
	ОбязательныеСобытияБезОбработчиков = Новый Массив;
	
	ДобавитьОбязательныеСобытияБезОбработчиков(ОбязательныеСобытияБезОбработчиков,
		ОбязательныеКлиентскиеСобытия, ОбработчикиКлиентскихСобытийПоПодсистемам);
	
	ДобавитьОбязательныеСобытияБезОбработчиков(ОбязательныеСобытияБезОбработчиков,
		ОбязательныеСерверныеСобытия, ОбработчикиСерверныхСобытийПоПодсистемам);
	
	ДобавитьОбязательныеСобытияБезОбработчиков(ОбязательныеСобытияБезОбработчиков,
		ОбязательныеКлиентскиеСлужебныеСобытия, ОбработчикиКлиентскихСлужебныхСобытийПоПодсистемам);
	
	ДобавитьОбязательныеСобытияБезОбработчиков(ОбязательныеСобытияБезОбработчиков,
		ОбязательныеСерверныеСлужебныеСобытия, ОбработчикиСерверныхСлужебныхСобытийПоПодсистемам);
	
	Если ОбязательныеСобытияБезОбработчиков.Количество() > 0 Тогда
		ИмяСобытия  = НСтр("ru = 'Обработчики событий'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
		Комментарий = НСтр("ru = 'Для следующих обязательных событий не определены обработчики:'")
			+ Символы.ПС + СтрСоединить(ОбязательныеСобытияБезОбработчиков, Символы.ПС);
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		ВызватьИсключение НСтр("ru = 'Для обязательных событий не определены обработчики.
		                             |Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	// Форматирование описаний обработчиков событий программы.
	ВсеОбработчикиСобытий = Новый Структура;
	ВсеОбработчикиСобытий.Вставить("НаКлиенте", Новый Структура);
	ВсеОбработчикиСобытий.Вставить("НаСервере", Новый Структура);
	
	ВсеОбработчикиСобытий.НаКлиенте.Вставить("ОбработчикиСобытий", СтандартноеОписаниеОбработчиковСобытий(
		ОписанияПодсистем, ОбработчикиКлиентскихСобытийПоПодсистемам));
	
	ВсеОбработчикиСобытий.НаСервере.Вставить("ОбработчикиСобытий", СтандартноеОписаниеОбработчиковСобытий(
		ОписанияПодсистем, ОбработчикиСерверныхСобытийПоПодсистемам));
	
	ВсеОбработчикиСобытий.НаКлиенте.Вставить("ОбработчикиСлужебныхСобытий", СтандартноеОписаниеОбработчиковСобытий(
		ОписанияПодсистем, ОбработчикиКлиентскихСлужебныхСобытийПоПодсистемам));
	
	ВсеОбработчикиСобытий.НаСервере.Вставить("ОбработчикиСлужебныхСобытий", СтандартноеОписаниеОбработчиковСобытий(
		ОписанияПодсистем, ОбработчикиСерверныхСлужебныхСобытийПоПодсистемам));
	
	Возврат Новый ФиксированнаяСтруктура(ВсеОбработчикиСобытий);
	
КонецФункции

// Только для внутреннего использования.
Функция НеобходимоОбновлениеПараметровРаботыПрограммы(ВыполнитьЗагрузку = Истина) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Обновление в модели сервиса.
		Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			Если ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
				// Заполнение разделенных параметров работы расширений.
				Возврат Истина;
			КонецЕсли;
			
		ИначеЕсли ОбновлениеИнформационнойБазыСлужебный.НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы() Тогда
			// Обновление неразделенных параметров работы программы.
			Возврат Истина;
		КонецЕсли;
	Иначе
		// Обновление в локальном режиме.
		Если ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		
		// При запуске созданного начального образа подчиненного узла РИБ
		// загрузка не требуется, а обновление нужно выполнить.
		Если МодульОбменДаннымиСервер.НастройкаПодчиненногоУзлаРИБ() Тогда
			ВыполнитьЗагрузку = Ложь;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	// При переходе с предыдущей версии в которой не было БСП
	// или с версии БСП 2.1.1 (и ранее) в которой не было параметров работы программы.
	Попытка
		ПользователиСлужебныйПовтИсп.Параметры();
	Исключение
		ВыполнитьЗагрузку = Ложь;
		Возврат Истина;
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Для справочника ИдентификаторыОбъектовМетаданных.

// Только для внутреннего использования.
Процедура ЗаполнитьИменаОбъектовМетаданныхФоновоеЗадание(АдресВременногоХранилища) Экспорт
	
	Справочники.ИдентификаторыОбъектовМетаданных.ЗаполнитьИменаОбъектовМетаданныхФоновоеЗадание(
		АдресВременногоХранилища);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "СтандартныеПодсистемыСервер.УстановитьКонстантуНеИспользоватьРазделениеПоОбластямДанных";
	Обработчик.Приоритет = 99;
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.МонопольныйРежим = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "СтандартныеПодсистемыСервер.ПометитьЗаписиКэшаВерсийНеактуальными";
	Обработчик.Приоритет = 99;
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.МонопольныйРежим = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.10";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "СтандартныеПодсистемыСервер.ОбновитьПараметрыАдминистрированияИнформационнойБазы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.17";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "СтандартныеПодсистемыСервер.УстановитьЗначениеКонстантыГлавныйУзел";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.18";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "СтандартныеПодсистемыСервер.ПеренестиПаролиВБезопасноеХранилищеОбщиеДанные";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.18";
	Обработчик.ОбщиеДанные = Ложь;
	Обработчик.Процедура = "СтандартныеПодсистемыСервер.ПеренестиПаролиВБезопасноеХранилище";
	
КонецПроцедуры

// Устанавливает корректное значение константе НеИспользоватьРазделениеПоОбластямДанных.
//
Процедура УстановитьКонстантуНеИспользоватьРазделениеПоОбластямДанных(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыеЗначения = Новый Соответствие;
	
	Если Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
		
		НовыеЗначения.Вставить("НеИспользоватьРазделениеПоОбластямДанных", Ложь);
		НовыеЗначения.Вставить("ЭтоАвтономноеРабочееМесто", Ложь)
		
	ИначеЕсли Константы.ЭтоАвтономноеРабочееМесто.Получить() Тогда
		
		НовыеЗначения.Вставить("НеИспользоватьРазделениеПоОбластямДанных", Ложь);
		
	Иначе
		
		НовыеЗначения.Вставить("НеИспользоватьРазделениеПоОбластямДанных", Истина);
		
	КонецЕсли;
	
	Для каждого КлючИЗначения Из НовыеЗначения Цикл
		
		Если Константы[КлючИЗначения.Ключ].Получить() <> КлючИЗначения.Значение Тогда
			
			Если НЕ Параметры.МонопольныйРежим Тогда
				Параметры.МонопольныйРежим = Истина;
				Возврат; // Требуется изменение
			КонецЕсли;
			
			Константы[КлючИЗначения.Ключ].Установить(КлючИЗначения.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сбрасывает дату обновления всех записей кэша версий, таким
// образом все записи кэша начинают считаться неактуальными.
//
Процедура ПометитьЗаписиКэшаВерсийНеактуальными() Экспорт
	
	НачатьТранзакцию();
	
	НаборЗаписей = РегистрыСведений.КэшПрограммныхИнтерфейсов.СоздатьНаборЗаписей();
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("РегистрСведений.КэшПрограммныхИнтерфейсов");
	Блокировка.Заблокировать();
	
	НаборЗаписей.Прочитать();
	Для каждого Запись Из НаборЗаписей Цикл
		Запись.ДатаОбновления = Неопределено;
	КонецЦикла;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Удаляет сохраненные пароли и изменяет структуру хранения настроек.
//
Процедура ОбновитьПараметрыАдминистрированияИнформационнойБазы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтароеЗначениеПараметров = Константы.ПараметрыАдминистрированияИБ.Получить().Получить();
	НовоеЗначениеПараметров = ПараметрыАдминистрированияПоУмолчанию();
	
	Если СтароеЗначениеПараметров <> Неопределено Тогда
		
		Если СтароеЗначениеПараметров.Свойство("ИмяАдминистратораИнформационнойБазы") Тогда
			Возврат; // Обновление уже было выполнено ранее.
		КонецЕсли;
		
		Если СтароеЗначениеПараметров.Свойство("ПортАгентаСервера")
			И ЗначениеЗаполнено(СтароеЗначениеПараметров.ПортАгентаСервера) Тогда
			НовоеЗначениеПараметров.ПортАгентаСервера = СтароеЗначениеПараметров.ПортАгентаСервера;
		КонецЕсли;
		
		Если СтароеЗначениеПараметров.Свойство("ПортКластераСерверов")
			И ЗначениеЗаполнено(СтароеЗначениеПараметров.ПортКластераСерверов) Тогда
			НовоеЗначениеПараметров.ПортКластера = СтароеЗначениеПараметров.ПортКластераСерверов;
		КонецЕсли;
		
		Если СтароеЗначениеПараметров.Свойство("ИмяАдминистратораКластера")
			И Не ПустаяСтрока(СтароеЗначениеПараметров.ИмяАдминистратораКластера) Тогда
			НовоеЗначениеПараметров.ИмяАдминистратораКластера = СтароеЗначениеПараметров.ИмяАдминистратораКластера;
		КонецЕсли;
		
		Если СтароеЗначениеПараметров.Свойство("ИмяАдминистратораИБ")
			И Не ПустаяСтрока(СтароеЗначениеПараметров.ИмяАдминистратораИБ) Тогда
			НовоеЗначениеПараметров.ИмяАдминистратораИнформационнойБазы = СтароеЗначениеПараметров.ИмяАдминистратораИБ;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПараметрыАдминистрирования(НовоеЗначениеПараметров);
	
КонецПроцедуры

// Обновляет значение константы Главный узел в узлах АРМ.
//
Процедура УстановитьЗначениеКонстантыГлавныйУзел() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		СохранитьГлавныйУзел();
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для перевода паролей в безопасное хранилище.
// Используется в обработчике обновления ИБ.
Процедура ПеренестиПаролиВБезопасноеХранилищеОбщиеДанные() Экспорт

	// Обмен данными
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		МодульОбменДаннымиСервер.ПеренестиПаролиВБезопасноеХранилище();
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для перевода паролей в безопасное хранилище.
// Используется в обработчике обновления ИБ.
Процедура ПеренестиПаролиВБезопасноеХранилище() Экспорт
	
	// Аутентификация на пользовательском сайте
	Результат = Новый Структура("Логин,Пароль");
	Результат.Логин = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("АутентификацияНаПользовательскомСайте", "КодПользователя", "");
	Результат.Пароль = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("АутентификацияНаПользовательскомСайте", "Пароль", "");
	Если НЕ ПустаяСтрока(Результат.Логин) Тогда
		Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ИдентификаторыОбъектовМетаданных");
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, Результат.Логин, "Логин");
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, Результат.Пароль);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// Подсистема Отправка SMS
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
		МодульОтправкаSMS = ОбщегоНазначения.ОбщийМодуль("ОтправкаSMS");
		МодульОтправкаSMS.ПеренестиПаролиВБезопасноеХранилище();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениямиСлужебный");
		МодульРаботаСПочтовымиСообщениямиСлужебный.ПеренестиПаролиВБезопасноеХранилище();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетов = ОбщегоНазначения.ОбщийМодуль("РассылкаОтчетов");
		МодульРассылкаОтчетов.ПеренестиПаролиВБезопасноеХранилище();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события.

// Обработчик события ПередЗаписью предопределенных элементов.
Процедура ЗапретитьПометкуУдаленияПредопределенныхЭлементовПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка
	 Или Источник.ИмяПредопределенныхДанных = ""
	 Или Источник.ПометкаУдаления <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		ВызватьИсключение
			НСтр("ru = 'Недопустимо создавать предопределенный элемент помеченный на удаление.'");
	Иначе
		СтарыеСвойства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник.Ссылка, "ПометкаУдаления, ИмяПредопределенныхДанных");
		
		Если СтарыеСвойства.ИмяПредопределенныхДанных <> ""
		   И СтарыеСвойства.ПометкаУдаления <> Истина Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недопустимо помечать на удаление предопределенный элемент:
				           |""%1"".'"),
				Строка(Источник.Ссылка));
			
		ИначеЕсли СтарыеСвойства.ИмяПредопределенныхДанных = ""
		        И СтарыеСвойства.ПометкаУдаления = Истина Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недопустимо связывать с именем предопределенного элемент, помеченный на удаление:
				           |""%1"".'"),
				Строка(Источник.Ссылка));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередУдалением предопределенных элементов.
Процедура ЗапретитьУдалениеПредопределенныхЭлементовПередУдалением(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка
	 Или Источник.ИмяПредопределенныхДанных = "" Тогда
		Возврат;
	КонецЕсли;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Недопустимо удалять предопределенный элемент
		           |""%1"".'"),
		Строка(Источник.Ссылка));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка подписок на события планов обмена РИБ.

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхПодчиненному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхПодчиненномуСобытие(Источник, ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза) Экспорт
	
	ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Источник);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхГлавному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхГлавномуСобытие(Источник, ЭлементДанных, ОтправкаЭлемента) Экспорт
	
	ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Источник);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтПодчиненного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтПодчиненногоСобытие(Источник, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад) Экспорт
	
	ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Источник);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтГлавного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтГлавногоСобытие(Источник, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад) Экспорт
	
	ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Источник);
	
КонецПроцедуры

// Процедура-обработчик подписки на событие ПередЗаписью для ПланОбменаОбъект.
// Используется для вызова обработчика события ПослеПолученияДанных при обмене в распределенной ИБ.
//
Процедура ПослеПолученияДанных(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Метаданные().РаспределеннаяИнформационнаяБаза Тогда
		
		Если Источник.НомерПринятого <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "НомерПринятого") Тогда
			
			Если ПланыОбмена.ГлавныйУзел() = Источник.Ссылка Тогда
				
				ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
					"СтандартныеПодсистемы.БазоваяФункциональность\ПослеПолученияДанныхОтГлавного");
				
				Для каждого Обработчик Из ОбработчикиСобытия Цикл
					Обработчик.Модуль.ПослеПолученияДанныхОтГлавного(Источник, Отказ);
				КонецЦикла;
				
			Иначе
				ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
					"СтандартныеПодсистемы.БазоваяФункциональность\ПослеПолученияДанныхОтПодчиненного");
				
				Для каждого Обработчик Из ОбработчикиСобытия Цикл
					Обработчик.Модуль.ПослеПолученияДанныхОтПодчиненного(Источник, Отказ);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик подписки на событие ПередЗаписью для ПланОбменаОбъект.
// Используется для вызова обработчика события ПослеОтправкиДанных при обмене в распределенной ИБ.
//
Процедура ПослеОтправкиДанных(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Метаданные().РаспределеннаяИнформационнаяБаза Тогда
		
		Если Источник.НомерОтправленного <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "НомерОтправленного") Тогда
			
			Если ПланыОбмена.ГлавныйУзел() = Источник.Ссылка Тогда
				
				ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
					"СтандартныеПодсистемы.БазоваяФункциональность\ПослеОтправкиДанныхГлавному");
				
				Для каждого Обработчик Из ОбработчикиСобытия Цикл
					Обработчик.Модуль.ПослеОтправкиДанныхГлавному(Источник, Отказ);
				КонецЦикла;
				
			Иначе
				
				ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
					"СтандартныеПодсистемы.БазоваяФункциональность\ПослеОтправкиДанныхПодчиненному");
				
				Для каждого Обработчик Из ОбработчикиСобытия Цикл
					Обработчик.Модуль.ПослеОтправкиДанныхПодчиненному(Источник, Отказ);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПередЗапускомПрограммы()
	
	// Привилегированный режим (установлен платформой).
	
	// Проверка основного языка программирования, установленного в конфигурации.
	Если Метаданные.ВариантВстроенногоЯзыка <> Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка.Русский Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Вариант встроенного языка конфигурации ""%1"" не поддерживается.
			           |Необходимо использовать вариант языка ""%2"".'"),
			Метаданные.ВариантВстроенногоЯзыка,
			Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка.Русский);
	КонецЕсли;
		
	// Проверка настройки совместимости конфигурации с версией платформы.
	СистемнаяИнформация = Новый СистемнаяИнформация;
	МинимальнаяВерсияПлатформы = "8.3.6.2041";
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, МинимальнаяВерсияПлатформы) < 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для запуска необходима версия платформы 1С:Предприятие %1 или выше.'"), МинимальнаяВерсияПлатформы);
	КонецЕсли;
	
	Режимы = Метаданные.СвойстваОбъектов.РежимСовместимости;
	ТекущийРежим = Метаданные.РежимСовместимости;
	
	Если ТекущийРежим = Режимы.НеИспользовать Тогда
		НедоступныйРежим = "";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_1 Тогда
		НедоступныйРежим = "8.1"
	ИначеЕсли ТекущийРежим = Режимы.Версия8_2_13 Тогда
		НедоступныйРежим = "8.2.13"
	ИначеЕсли ТекущийРежим = Режимы.Версия8_2_16 Тогда
		НедоступныйРежим = "8.2.16";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_1 Тогда
		НедоступныйРежим = "8.3.1";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_2 Тогда
		НедоступныйРежим = "8.3.2";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_3 Тогда
		НедоступныйРежим = "8.3.3";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_4 Тогда
		НедоступныйРежим = "8.3.4";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_5 Тогда
		НедоступныйРежим = "8.3.5";
	Иначе
		НедоступныйРежим = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НедоступныйРежим) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Режим совместимости конфигурации с 1С:Предприятием версии %1 не поддерживается.
			           |Для запуска установите в конфигурации режим совместимости с 1С:Предприятием
			           |версии не ниже 8.3.6 или ""Не использовать"".'"),
			НедоступныйРежим);
	КонецЕсли;
	
	// Проверка заполнения версии конфигурации.
	Если ПустаяСтрока(Метаданные.Версия) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено свойство конфигурации Версия.'");
	Иначе
		Попытка
			НулеваяВерсия = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Метаданные.Версия, "0.0.0.0") = 0;
		Исключение
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не правильно заполнено свойство конфигурации Версия: ""%1"".
				           |Правильный формат, например: ""1.2.3.45"".'"),
				Метаданные.Версия);
		КонецПопытки;
		Если НулеваяВерсия Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не правильно заполнено свойство конфигурации Версия: ""%1"".
				           |Версия не может быть нулевой.'"),
				Метаданные.Версия);
		КонецЕсли;
	КонецЕсли;
	
	Если (Метаданные.ОсновныеРоли.Количество() <> 2 И Метаданные.ОсновныеРоли.Количество() <> 3)
	 Или Не Метаданные.ОсновныеРоли.Содержит(Метаданные.Роли.АдминистраторСистемы)
	 Или Не Метаданные.ОсновныеРоли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
		ВызватьИсключение
			НСтр("ru = 'В конфигурации в свойстве ОсновныеРоли не указаны стандартные роли
			           |АдминистраторСистемы и ПолныеПрава или указаны лишние роли.'");
	КонецЕсли;
	
	// Проверка возможности выполнения обработчиков установки параметров сеанса для запуска программы.
	РаботаВБезопасномРежиме.ПроверитьВозможностьВыполненияОбработчиковУстановкиПараметровСеанса();
	
	Если Не ЗначениеЗаполнено(ПользователиИнформационнойБазы.ТекущийПользователь().Имя)
	   И (Не ОбщегоНазначенияПовтИсп.РазделениеВключено()
	      Или Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных())
	   И ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ("СтандартныеПодсистемы",
	       ОбщегоНазначенияПовтИсп.РазделениеВключено()) = "0.0.0.0" Тогда
		
		ПользователиСлужебный.УстановитьНачальныеНастройки("");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		МодульРаботаВМоделиСервиса.ПриПроверкеВключенияБезопасногоРежимаРазделенияДанных();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных") Тогда
		// Установка флага активности пользователей в области.
		МодульРезервноеКопированиеОбластейДанных = ОбщегоНазначения.ОбщийМодуль("РезервноеКопированиеОбластейДанных");
		МодульРезервноеКопированиеОбластейДанных.УстановитьФлагАктивностиПользователяВОбласти();
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьОбработчикиУстановкиПараметровСеанса(ИменаПараметровСеанса, Обработчики, УстановленныеПараметры)
	
	Перем ТекстСообщения;
	
	// Массив с ключами параметров сеанса
	// задаются начальным словом в имени параметра сеанса и символом "*".
	ПараметрыСеансаКлючи = Новый Массив;
	
	Для Каждого Запись Из Обработчики Цикл
		Если СтрНайти(Запись.Ключ, "*") > 0 Тогда
			КлючПараметра = СокрЛП(Запись.Ключ);
			ПараметрыСеансаКлючи.Добавить(Лев(КлючПараметра, СтрДлина(КлючПараметра)-1));
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИмяПараметра Из ИменаПараметровСеанса Цикл
		Если УстановленныеПараметры.Найти(ИмяПараметра) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Обработчик = Обработчики.Получить(ИмяПараметра);
		Если Обработчик <> Неопределено Тогда
			ПараметрыОбработчика = Новый Массив();
			ПараметрыОбработчика.Добавить(ИмяПараметра);
			ПараметрыОбработчика.Добавить(УстановленныеПараметры);
			РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации(Обработчик, ПараметрыОбработчика);
			Продолжить;
		КонецЕсли;
		
		Для Каждого ИмяКлючаПараметра Из ПараметрыСеансаКлючи Цикл
			Если СтрНачинаетсяС(ИмяПараметра, ИмяКлючаПараметра) Тогда
				Обработчик = Обработчики.Получить(ИмяКлючаПараметра + "*");
				ПараметрыОбработчика = Новый Массив();
				ПараметрыОбработчика.Добавить(ИмяПараметра);
				ПараметрыОбработчика.Добавить(УстановленныеПараметры);
				РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации(Обработчик, ПараметрыОбработчика);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеОбъектовМетаданных(Объекты)
	
	Результат = Новый Массив;
	
	Для Каждого Объект Из Объекты Цикл
		
		Результат.Добавить(Объект.ПолноеИмя());
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ИгнорироватьОтправкуИдентификаторовОбъектовМетаданных(ЭлементДанных, ОтправкаЭлемента, Знач СозданиеНачальногоОбраза = Ложь)
	
	Если Не СозданиеНачальногоОбраза
		И ОбъектМетаданных(ЭлементДанных) = Метаданные.Справочники.ИдентификаторыОбъектовМетаданных Тогда
		
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОбъектМетаданных(Знач ЭлементДанных)
	
	Возврат ?(ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта"), ЭлементДанных.Ссылка.Метаданные(), ЭлементДанных.Метаданные());
	
КонецФункции

Функция СозданиеНачальногоОбраза(Знач ЭлементДанных)
	
	Возврат ?(ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта"), Ложь, ЭлементДанных.ДополнительныеСвойства.Свойство("СозданиеНачальногоОбраза"));
	
КонецФункции

Функция ПоказатьНерекомендуемуюВерсиюПлатформы(Параметры)
	
	Если Параметры.РазделениеВключено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка, что пользователь не внешний.
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторПользователяИБ",
		ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения,
		Параметры.МинимальноНеобходимаяВерсияПлатформы) < 0;
	
КонецФункции

Функция ПараметрыАдминистрированияПоУмолчанию()
	
	ПараметрыАдминистрированияКластера = АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера();
	ПараметрыАдминистрированияИБ = АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера();
	
	// Объединяем структуры параметров.
	СтруктураПараметровАдминистрирования = ПараметрыАдминистрированияКластера;
	Для Каждого Элемент Из ПараметрыАдминистрированияИБ Цикл
		СтруктураПараметровАдминистрирования.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Возврат СтруктураПараметровАдминистрирования;
	
КонецФункции

Процедура ПрочитатьПараметрыИзСтрокиСоединения(СтруктураПараметровАдминистрирования)
	
	ПодстрокиСтрокиСоединения = СтрРазделить(СтрокаСоединенияИнформационнойБазы(), ";");
	
	СтрокаИмениСервера = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[0], 7));
	СтруктураПараметровАдминистрирования.ИмяВКластере = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[1], 6));
	
	СписокСерверовКластера = СтрРазделить(СтрокаИмениСервера, ",");
	
	ИмяСервера = СписокСерверовКластера[0];
	
	// Протокол может быть только tcp. Можно отбросить.
	Если СтрНачинаетсяС(ВРег(ИмяСервера), "TCP://") Тогда
		ИмяСервера = Сред(ИмяСервера, 7);
	КонецЕсли;
	
	// Если в качестве имени сервера передается адрес IPv6, то порт может быть только после закрывающей квадратной скобки.
	НачальнаяПозиция = СтрНайти(ИмяСервера, "]");
	Если НачальнаяПозиция <> 0 Тогда
		РазделительПорта = СтрНайти(ИмяСервера, ":",, НачальнаяПозиция);
	Иначе
		РазделительПорта = СтрНайти(ИмяСервера, ":");
	КонецЕсли;
	
	Если РазделительПорта > 0 Тогда
		АдресАгентаСервера = Сред(ИмяСервера, 1, РазделительПорта - 1);
		ПортКластера = Число(Сред(ИмяСервера, РазделительПорта + 1));
		Если СтруктураПараметровАдминистрирования.ПортКластера = 1541 Тогда
			СтруктураПараметровАдминистрирования.ПортКластера = ПортКластера;
		КонецЕсли;
	Иначе
		АдресАгентаСервера = ИмяСервера;
	КонецЕсли;
	
	СтруктураПараметровАдминистрирования.АдресАгентаСервера = АдресАгентаСервера;
	
КонецПроцедуры

// Для процедуры ЗарегистрироватьИзменениеПриоритетныхДанныхДляПодчиненныхУзловРИБ.
Процедура ЗарегистрироватьИзменениеПредопределенных(УзлыПлановОбменаРИБ, КоллекцияМетаданных)
	
	Запрос = Новый Запрос;
	
	Для Каждого ОбъектМетаданных Из КоллекцияМетаданных Цикл
		УзлыРИБ = Новый Массив;
		
		Для Каждого УзлыПланаОбмена Из УзлыПлановОбменаРИБ Цикл
			Если Не УзлыПланаОбмена.Ключ.Содержит(ОбъектМетаданных) Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого УзелРИБ Из УзлыПланаОбмена.Значение Цикл
				УзлыРИБ.Добавить(УзелРИБ);
			КонецЦикла;
		КонецЦикла;
		
		Если УзлыРИБ.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущаяТаблица.Ссылка КАК Ссылка
		|ИЗ
		|	&ТекущаяТаблица КАК ТекущаяТаблица
		|ГДЕ
		|	ТекущаяТаблица.Предопределенный";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекущаяТаблица", ОбъектМетаданных.ПолноеИмя());
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(УзлыРИБ, Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры УстановитьКлючНазначенияФормы.
Процедура УстановитьКлючНазначенияИспользованияФормы(Форма, Ключ, УстановитьНастройки)
	
	Если Не ЗначениеЗаполнено(Ключ)
	 Или Форма.КлючНазначенияИспользования = Ключ Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не УстановитьНастройки Тогда
		Форма.КлючНазначенияИспользования = Ключ;
		Возврат;
	КонецЕсли;
	
	ТипыНастроек = Новый Массив;
	// Русский вариант.
	ТипыНастроек.Добавить("/КлючТекущегоВарианта");
	ТипыНастроек.Добавить("/КлючТекущихПользовательскихНастроек");
	ТипыНастроек.Добавить("/ТекущиеПользовательскиеНастройки");
	ТипыНастроек.Добавить("/КлючТекущихНастроекДанных");
	ТипыНастроек.Добавить("/ТекущиеДанные");
	ТипыНастроек.Добавить("/НастройкиФормы");
	// Английский вариант.
	ТипыНастроек.Добавить("/CurrentVariantKey");
	ТипыНастроек.Добавить("/CurrentUserSettingsKey");
	ТипыНастроек.Добавить("/CurrentUserSettings");
	ТипыНастроек.Добавить("/CurrentDataSettingsKey");
	ТипыНастроек.Добавить("/CurrentData");
	ТипыНастроек.Добавить("/FormSettings");
	Если ХранилищеСистемныхНастроек.Загрузить(Ключ, "КлючНазначенияИспользованияФормы") <> Истина 
		 И ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		УстановитьНастройкиДляКлюча(Ключ, ТипыНастроек, Форма.ИмяФормы, Форма.КлючНазначенияИспользования);
		ХранилищеСистемныхНастроек.Сохранить(Ключ, "КлючНазначенияИспользованияФормы", Истина);
	КонецЕсли;
	
	Форма.КлючНазначенияИспользования = Ключ;
	
КонецПроцедуры

// Для процедуры УстановитьКлючНазначенияФормы.
Процедура УстановитьКлючСохраненияПоложенияОкнаФормы(Форма, Ключ, УстановитьНастройки)
	
	Если Не ЗначениеЗаполнено(Ключ)
	 Или Форма.КлючСохраненияПоложенияОкна = Ключ Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не УстановитьНастройки Тогда
		Форма.КлючСохраненияПоложенияОкна = Ключ;
		Возврат;
	КонецЕсли;
	
	ТипыНастроек = Новый Массив;
	// Русский вариант.
	ТипыНастроек.Добавить("/НастройкиОкна");
	ТипыНастроек.Добавить("/Такси/НастройкиОкна");
	ТипыНастроек.Добавить("/НастройкиОкнаВебКлиента");
	ТипыНастроек.Добавить("/Такси/НастройкиОкнаВебКлиента");
	// Английский вариант.
	ТипыНастроек.Добавить("/WindowSettings");
	ТипыНастроек.Добавить("/Taxi/WindowSettings");
	ТипыНастроек.Добавить("/WebClientWindowSettings");
	ТипыНастроек.Добавить("/Taxi/WebClientWindowSettings");
	
	Если ХранилищеСистемныхНастроек.Загрузить(Ключ, "КлючСохраненияПоложенияОкнаФормы") <> Истина 
		И ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		УстановитьНастройкиДляКлюча(Ключ, ТипыНастроек, Форма.ИмяФормы, Форма.КлючСохраненияПоложенияОкна);
		ХранилищеСистемныхНастроек.Сохранить(Ключ, "КлючСохраненияПоложенияОкнаФормы", Истина);
	КонецЕсли;
	
	Форма.КлючСохраненияПоложенияОкна = Ключ;
	
КонецПроцедуры

// Для процедур УстановитьКлючНазначенияИспользованияФормы, УстановитьКлючСохраненияПоложенияОкнаФормы.
Процедура УстановитьНастройкиДляКлюча(Ключ, ТипыНастроек, ИмяФормы, ТекущийКлюч)
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйКлюч = "/" + Ключ;
	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	
	Для каждого ТипНастроек Из ТипыНастроек Цикл
		Отбор.Вставить("КлючОбъекта", ИмяФормы + НовыйКлюч + ТипНастроек);
		Выборка = ХранилищеСистемныхНастроек.Выбрать(Отбор);
		Если Выборка.Следующий() Тогда
			Возврат; // Настройки для ключа уже установлены.
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущийКлюч) Тогда
		ТекущийКлюч = "/" + ТекущийКлюч;
	КонецЕсли;
	
	// Установка начальных настроек ключа копированием от текущего ключа.
	Для Каждого ТипНастроек Из ТипыНастроек Цикл
		Отбор.Вставить("КлючОбъекта", ИмяФормы + ТекущийКлюч + ТипНастроек);
		Выборка = ХранилищеСистемныхНастроек.Выбрать(Отбор);
		КлючОбъекта = ИмяФормы + НовыйКлюч + ТипНастроек;
		Пока Выборка.Следующий() Цикл
			ОписаниеНастроек = Новый ОписаниеНастроек;
			ОписаниеНастроек.Представление = Выборка.Представление;
			ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, Выборка.КлючНастроек,
				Выборка.Настройки, ОписаниеНастроек);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Объявление событий, к которым можно добавлять обработчики.

// Объявляет служебные события подсистемы БазоваяФункциональность:
//
// Клиентские события:
//   ПередНачаломРаботыСистемы,
//   ПриНачалеРаботыСистемы,
//   ПриОбработкеПараметровЗапуска,
//   ПередЗавершениемРаботыСистемы,
//   ПриПолученииСпискаПредупрежденийЗавершенияРаботы.
//
// Серверные события:
//   ПриДобавленииИсключенийПоискаСсылок,
//   ПриДобавленииПереименованийОбъектовМетаданных,
//   ПриДобавленииПараметровРаботыКлиентаПриЗапуске,
//   ПриДобавленииПараметровРаботыКлиента,
//   ПриДобавленииПараметровРаботыКлиентаПриЗавершении,
//   ПриВключенииРазделенияПоОбластямДанных,
//   ПриОтправкеДанныхПодчиненному,
//   ПриОтправкеДанныхГлавному,
//   ПриПолученииДанныхОтПодчиненного,
//   ПриПолученииДанныхОтГлавного,
//   ПослеПолученияДанныхОтПодчиненного,
//   ПослеПолученияДанныхОтГлавного,
//   ПослеОтправкиДанныхГлавному,
//   ПослеОтправкиДанныхПодчиненному,
//   ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов.
//
Процедура ПриДобавленииСлужебныхСобытийБазовойФункциональности(КлиентскиеСобытия, СерверныеСобытия)
	
	// КЛИЕНТСКИЕ СОБЫТИЯ.
	
	// Выполняется перед интерактивным началом работы пользователя с областью данных или в локальном режиме.
	// Соответствует событию ПередНачаломРаботыСистемы модулей приложения.
	//
	// Параметры см. в модуле ОбщегоНазначенияКлиентПереопределяемый.
	//
	// Синтаксис:
	// Процедура ПередНачаломРаботыСистемы(Параметры) Экспорт
	//
	// (То же, что ОбщегоНазначенияКлиентПереопределяемый.ПередНачаломРаботыСистемы).
	КлиентскиеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПередНачаломРаботыСистемы");
	
	// Выполняется при интерактивном начале работы пользователя с областью данных или в локальном режиме.
	// Соответствует событию ПриНачалеРаботыСистемы модулей приложения.
	//
	// Параметры см. в модуле ОбщегоНазначенияКлиентПереопределяемый.
	//
	// Синтаксис:
	// Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт
	//
	// (То же, что ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы).
	КлиентскиеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриНачалеРаботыСистемы");
	
	// Выполняется при интерактивном начале работы пользователя с областью данных или в локальном режиме.
	// Вызывается после завершения действий ПриНачалеРаботыСистемы.
	// Используется для подключения обработчиков ожидания, которые не должны вызываться
	// в случае интерактивных действий перед и при начале работы системы.
	//
	// Параметры см. в модуле ОбщегоНазначенияКлиентПереопределяемый.
	//
	// Синтаксис:
	// Процедура ПослеНачалаРаботыСистемы() Экспорт
	//
	// (То же, что ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы).
	КлиентскиеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПослеНачалаРаботыСистемы");
	
	// Вызывается при интерактивном начале работы пользователя с областью данных или в локальном режиме.
	//
	// Параметры:
	//  ПервыйПараметр   - Строка - первое значение параметра запуска,
	//                     до первого символа ";" в верхнем регистре.
	//  ПараметрыЗапуска - Массив - массив строк разделенных символом ";" в параметре запуска,
	//                     переданным в конфигурацию с помощью ключа командной строки /C.
	//  Отказ            - Булево (возвращаемое значение), если установить Истина,
	//                     обработка события ПриНачалеРаботыСистемы будет прервана.
	//
	// Синтаксис:
	// Процедура ПриОбработкеПараметровЗапуска(ПервыйПараметр, ПараметрыЗапуска, Отказ) Экспорт
	//
	// (То же, что ОбщегоНазначенияКлиентПереопределяемый.ПриОбработкеПараметровЗапуска).
	КлиентскиеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриОбработкеПараметровЗапуска");
	
	// Вызывается перед интерактивным завершением работы пользователя с областью данных или в локальном режиме.
	// Соответствует событию ПередЗавершениемРаботыСистемы модулей приложения.
	//
	// Параметры см. в модуле ОбщегоНазначенияКлиентПереопределяемый.
	//
	// Синтаксис:
	// Процедура ПередЗавершениемРаботыСистемы(Параметры) Экспорт
	//
	// (То же, что ОбщегоНазначенияКлиентПереопределяемый.ПередЗавершениемРаботыСистемы).
	КлиентскиеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПередЗавершениемРаботыСистемы");
	
	// Доопределяет список предупреждений пользователю перед завершением работы системы.
	//
	// Параметры:
	//  Предупреждения - Массив - в массив можно добавить элементы типа Структура,
	//                            свойства которой см. в СтандартныеПодсистемыКлиент.ПредупреждениеПриЗавершениеРаботы.
	//
	// Синтаксис:
	// Процедура ПриПолученииСпискаПредупрежденийЗавершенияРаботы(Предупреждения) Экспорт
	//
	КлиентскиеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииСпискаПредупрежденийЗавершенияРаботы");
	
	// Проверяет возможность выполнения резервного копирования в пользовательском режиме.
	//
	// Параметры:
	//  Результат - Булево (возвращаемое значение).
	//
	// Синтаксис:
	// Процедура ПриПроверкеВозможностиРезервногоКопированияВПользовательскомРежиме(Результат) Экспорт
	//
	КлиентскиеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриПроверкеВозможностиРезервногоКопированияВПользовательскомРежиме");
	
	// Вызывается при предложении создать резервную копию.
	//
	// Синтаксис:
	// Процедура ПриПредложенииПользователюСоздатьРезервнуюКопию() Экспорт
	//
	КлиентскиеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриПредложенииПользователюСоздатьРезервнуюКопию");
	
	// СЕРВЕРНЫЕ СОБЫТИЯ.
	
	// Доопределяет список объектов метаданных, содержимое которых не должно учитывается в бизнес-логике приложения.
	//
	// Описание:
	//   Для документа "Реализация товаров и услуг" настроены подсистемы "Версионирование объектов" и "Свойства".
	//   При этом документ может быть указан в других объектах метаданных - документах или регистрах.
	//   Часть ссылок имеют значение для бизнес-логики (например движения по регистрам) и должны выводиться пользователю.
	//   Другая часть ссылок - "техногенные" ссылки на документ из данных подсистем "Версионирование объектов" и
	//   "Свойства", должны скрываться от пользователя при поиске ссылок на объект.
	//     Например, в обработке удаления помеченных или в подсистеме запрета редактирования ключевых реквизитов.
	//   Список таких "техногенных" объектов нужно перечислить в этой функции.
	//
	// Важно:
	//   Для избежания появления пустых "битых" ссылок рекомендуется предусмотреть процедуру очистки указанных объектов
	//   метаданных.
	//   Для измерений регистров сведений - с помощью установки флажка "Ведущее",
	//     тогда запись регистра сведений будет удалена вместе с удалением ссылки, указанной в измерении.
	//   Для других реквизитов указанных объектов - с помощью подписки на событие ПередУдалением всех типов объектов
	//   метаданных, которые могут быть записаны в реквизиты указанных объектов метаданных.
	//     В обработчике необходимо найти "техногенные" объекты, в реквизитах которых указана ссылка удаляемого объекта,
	//     и выбрать как именно очищать ссылку: очищать значение реквизита, удалять строку таблицы или удалять весь объект.
	//
	// Параметры:
	//   Массив - Объекты метаданных или их реквизиты, содержимое которых не должно учитывается в бизнес-логике приложения.
	//       * ОбъектМетаданных - Объект метаданных или его реквизит.
	//       * Строка - Полное имя объекта метаданных или его реквизита.
	//
	// Например:
	//	Массив.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов);
	//	Массив.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов.Реквизиты.АвторВерсии);
	//	Массив.Добавить("РегистрСведений.ВерсииОбъектов");
	//
	// Синтаксис:
	// Процедура ПриДобавленииИсключенийПоискаСсылок(Исключения) Экспорт
	//
	// (То же, что ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок).
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииИсключенийПоискаСсылок");
	
	// Доопределяет переименования тех объектов метаданных, которые невозможно
	// автоматически найти по типу, но ссылки на которые требуется сохранять
	// в базе данных (например: подсистемы, роли).
	//
	// Подробнее см. комментарий к процедуре ОбщегоНазначения.ДобавитьПереименование().
	//
	// Синтаксис:
	// Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	//
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПереименованийОбъектовМетаданных");
	
	// Доопределяет структуру параметров, необходимых для работы клиентского кода
	// при запуске конфигурации, т.е. в обработчиках событий.
	// - ПередНачаломРаботыСистемы,
	// - ПриНачалеРаботыСистемы.
	//
	// Важно: при запуске недопустимо использовать команды сброса кэша
	// повторно используемых модулей, иначе запуск может привести
	// к непредсказуемым ошибкам или лишним серверным вызовам.
	//
	// Параметры:
	//   Параметры - Структура, в которую можно вставить параметры работы клиента при запуске.
	//                 Ключ     - имя параметра,
	//                 Значение - значение параметра.
	//
	// Пример использования:
	//   Параметры.Вставить(<ИмяПараметра>, <Код получения значения параметра>);
	//
	// Синтаксис:
	// Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	//
	// (То же, что ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиентаПриЗапуске).
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентаПриЗапуске");
	
	// Доопределяет структуру параметров, необходимых для работы клиентского кода
	// конфигурации.
	//
	// Параметры:
	//   Параметры - Структура, в которую можно вставить параметры работы клиента при запуске.
	//                 Ключ     - имя параметра,
	//                 Значение - значение параметра.
	//
	// Пример использования:
	//   Параметры.Вставить(<ИмяПараметра>, <Код получения значения параметра>);
	//
	// Синтаксис:
	// Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	//
	// (То же, что ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиента).
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиента");
	
	// Доопределяет структуру параметров, необходимых для работы клиентского кода
	// конфигурации при завершении, т.е. в обработчиках:
	// - ПередЗавершениемРаботыСистемы,
	// - ПриЗавершенииРаботыСистемы.
	//
	// Параметры:
	//   Параметры - Структура, в которую можно вставить параметры работы клиента при запуске.
	//                 Ключ     - имя параметра,
	//                 Значение - значение параметра.
	//
	// Пример использования:
	//   Параметры.Вставить(<ИмяПараметра>, <Код получения значения параметра>);
	//
	// Синтаксис:
	// Процедура ПриДобавленииПараметровРаботыКлиентаПриЗавершении(Параметры) Экспорт
	//
	// (То же, что ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиентаПриЗавершении).
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентаПриЗавершении");
	
	// Вызывается при включении разделения данных по областям данных.
	//
	// Синтаксис:
	// Процедура ПриВключенииРазделенияПоОбластямДанных() Экспорт
	//
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриВключенииРазделенияПоОбластямДанных");
	
	// Вызывается при загрузке ссылок предопределенных элементов в процессе загрузки важных данных.
	// Позволяет выполнить действия по исправлению или регистрации сведений о не уникальности
	// предопределенных элементов, а также позволяет отказаться от продолжения, если это недопустимо.
	//
	// Параметры:
	//   Объект          - СправочникОбъект, ПланВидовХарактеристикОбъект, ПланСчетовОбъект, ПланВидовРасчетаОбъект -
	//                     объект предопределенного элемента после записи которого обнаружено наличие не уникальности.
	//   ЗаписатьВЖурнал - Булево - возвращаемое значение. Если указать Ложь, тогда сведения о не уникальности не будут
	//                     добавлены в журнал регистрации в общем сообщении.
	//                     Нужно установить Ложь, если не уникальность была устранена автоматически.
	//   Отказ           - Булево - возвращаемое значение. Если указать Истина, будет вызвано общее исключение,
	//                     содержащее все причины отказа.
	//   ОписаниеОтказа  - Строка - возвращаемое значение. Если Отказ установлен в Истина, то описание будет добавлено
	//                     в список причин невозможности продолжения.
	//
	// Синтаксис:
	// Процедура ПриОбнаруженииНеУникальностиПредопределенного(Объект, ЗаписатьВЖурнал, Отказ, ОписаниеОтказа) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПриОбнаруженииНеУникальностиПредопределенного");
	
	// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
	// информационной базе.
	//
	// Параметры:
	// см. описание обработчика события ПриОтправкеДанныхПодчиненному() в синтаксис-помощнике.
	//
	// Синтаксис:
	// Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхПодчиненному");
	
	// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
	// информационной базе.
	//
	// Параметры:
	// см. описание обработчика события ПриОтправкеДанныхГлавному() в синтаксис-помощнике.
	//
	// Синтаксис:
	// Процедура ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхГлавному");
	
	// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
	// информационной базе.
	//
	// Параметры:
	// см. описание обработчика события ПриПолученииДанныхОтПодчиненного() в синтаксис-помощнике.
	//
	// Синтаксис:
	// Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтПодчиненного");
	
	// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
	// информационной базе.
	//
	// Параметры:
	// см. описание обработчика события ПриПолученииДанныхОтГлавного() в синтаксис-помощнике.
	// 
	// Синтаксис:
	// Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтГлавного");
	
	// Процедура-обработчик события после получения данных в главном узле от подчиненного узла распределенной ИБ.
	// Вызывается в момент завершения чтения сообщения обмена, когда все данные из сообщения обмена успешно прочитаны и
	// записаны в ИБ.
	// 
	//  Параметры:
	// Отправитель - ПланОбменаОбъект. Объект узла плана обмена, от которого получены данные.
	// Отказ - Булево. Флаг отказа. Если установить данному параметру значение Истина,
	// то сообщение будет считаться не принятым. Также произойдет отмена транзакции загрузки данных,
	// если все данные были загружены в одной транзакции или отмена последней транзакции загрузки данных,
	// если данные были загружены порциями.
	//
	// Синтаксис:
	// Процедура ПослеПолученияДанныхОтПодчиненного(Отправитель, Отказ) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПослеПолученияДанныхОтПодчиненного");
	
	// Процедура-обработчик события после получения данных в подчиненном узле от главного узла распределенной ИБ.
	// Вызывается в момент завершения чтения сообщения обмена, когда все данные из сообщения обмена успешно прочитаны и
	// записаны в ИБ.
	// 
	//  Параметры:
	// Отправитель - ПланОбменаОбъект. Объект узла плана обмена, от которого получены данные.
	// Отказ - Булево. Флаг отказа. Если установить данному параметру значение Истина,
	// то сообщение будет считаться не принятым. Также произойдет отмена транзакции загрузки данных,
	// если все данные были загружены в одной транзакции или отмена последней транзакции загрузки данных,
	// если данные были загружены порциями.
	//
	// Синтаксис:
	// Процедура ПослеПолученияДанныхОтГлавного(Отправитель, Отказ) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПослеПолученияДанныхОтГлавного");
	
	// Процедура-обработчик события после отправки данных из подчиненного узла в главный узел распределенной ИБ.
	// Вызывается в момент завершения записи сообщения обмена, когда все зарегистрированные изменения данных успешно
	// выгружены в сообщение обмена.
	// 
	//  Параметры:
	// Получатель - ПланОбменаОбъект. Объект узла плана обмена, для которого формируется сообщение обмена.
	// Отказ - Булево. Флаг отказа. Если установить данному параметру значение Истина,
	// то сообщение не будет считаться сформированным и отправленным.
	//
	// Синтаксис:
	// Процедура ПослеОтправкиДанныхГлавному(Получатель, Отказ) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПослеОтправкиДанныхГлавному");
	
	// Процедура-обработчик события после отправки данных из главного узла в подчиненный узел распределенной ИБ.
	// Вызывается в момент завершения записи сообщения обмена, когда все зарегистрированные изменения данных успешно
	// выгружены в сообщение обмена.
	// 
	//  Параметры:
	// Получатель - ПланОбменаОбъект. Объект узла плана обмена, для которого формируется сообщение обмена.
	// Отказ - Булево. Флаг отказа. Если установить данному параметру значение Истина,
	// то сообщение не будет считаться сформированным и отправленным.
	//
	// Синтаксис:
	// Процедура ПослеОтправкиДанныхПодчиненному(Получатель, Отказ) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПослеОтправкиДанныхПодчиненному");
	
	// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию подсистем,
	// используя в качестве ключей названия подсистем.
	// Обеспечивает функциональность Web-сервиса InterfaceVersion.
	// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
	//
	// Параметры:
	// СтруктураПоддерживаемыхВерсий - Структура: 
	//  - Ключи = Названия подсистем. 
	//  - Значения = Массивы названий поддерживаемых версий.
	//
	// Пример реализации:
	//
	//  // СервисПередачиФайлов
	//  МассивВерсий = Новый Массив;
	//  МассивВерсий.Добавить("1.0.1.1");
	//  МассивВерсий.Добавить("1.0.2.1");
	//  СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
	//  // Конец СервисПередачиФайлов
	//
	// Синтаксис:
	// Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(Знач СтруктураПоддерживаемыхВерсий) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов");
	
	// Используется для получения объектов метаданных обязательных для плана обмена.
	// Если подсистема имеет объекты метаданных обязательные для включения в состав плана обмена,
	// то в параметр <Объект> необходимо добавить эти объекты метаданных.
	//
	// Параметры:
	// Объекты - Массив. Массив объектов метаданных конфигурации, которые необходимо включить в состав плана обмена.
	// РаспределеннаяИнформационнаяБаза (только чтение) - Булево. Признак получения объектов для плана обмена РИБ.
	// Истина - требуется получить список объектов плана обмена РИБ;
	// Ложь - требуется получить список для плана обмена НЕ РИБ.
	//
	// Синтаксис:
	// Процедура ПриПолученииОбязательныхОбъектовПланаОбмена(Объекты, Знач РаспределеннаяИнформационнаяБаза) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбязательныхОбъектовПланаОбмена");
	
	// Используется для получения объектов метаданных, которые не следует включать в состав плана обмена.
	// Если подсистема имеет объекты метаданных, которые не следует включать в состав плана обмена,
	// то в параметр <Объект> необходимо добавить эти объекты метаданных.
	//
	// Параметры:
	// Объекты - Массив. Массив объектов метаданных конфигурации, которые не следует включать в состав плана обмена.
	// РаспределеннаяИнформационнаяБаза (только чтение) - Булево. Признак получения объектов для плана обмена РИБ.
	// Истина - требуется получить список объектов-исключений плана обмена РИБ;
	// Ложь - требуется получить список для плана обмена НЕ РИБ.
	//
	// Синтаксис:
	// Процедура ПриПолученииОбъектовИсключенийПланаОбмена(Объекты, Знач РаспределеннаяИнформационнаяБаза) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовИсключенийПланаОбмена");
	
	// Используется для получения объектов метаданных, которые должны входить в состав плана обмена
	// и НЕ должны входить в состав подписок на события регистрации изменений для этого плана обмена.
	// Эти объекты метаданных используются только в момент создания начального образа подчиненного узла
	// и не мигрируют в процессе обмена.
	// Если подсистема имеет объекты метаданных, которые участвуют только в создании начального образа подчиненного узла,
	// то в параметр <Объект> необходимо добавить эти объекты метаданных.
	//
	// Параметры:
	// Объекты - Массив. Массив объектов метаданных конфигурации.
	//
	// Синтаксис:
	// Процедура ПриПолученииОбъектовНачальногоОбразаПланаОбмена(Объекты) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовНачальногоОбразаПланаОбмена");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Добавление обработчиков событий.

// Доопределяет обработчики подсистемы БазоваяФункциональность.
Процедура ПриДобавленииОбработчиковСлужебныхСобытийБазовойФункциональности(КлиентскиеОбработчики, СерверныеОбработчики)
	
	// КЛИЕНТСКИЕ ОБРАБОТЧИКИ.
	
	КлиентскиеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПослеНачалаРаботыСистемы"].Добавить(
		"СтандартныеПодсистемыКлиент");
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики[
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиента"].Добавить(
		"СтандартныеПодсистемыСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"СтандартныеПодсистемыСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПереименованийОбъектовМетаданных"].Добавить(
		"СтандартныеПодсистемыСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам"].Добавить(
		"СтандартныеПодсистемыСервер");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий\ПриПолученииСпискаШаблонов"].Добавить(
			"СтандартныеПодсистемыСервер");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ВыгрузкаЗагрузкаДанных") Тогда
		СерверныеОбработчики[
			"ТехнологияСервиса.ВыгрузкаЗагрузкаДанных\ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке"].Добавить(
				"СтандартныеПодсистемыСервер");
				
		СерверныеОбработчики[
			"ТехнологияСервиса.ВыгрузкаЗагрузкаДанных\ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки"].Добавить(
				"СтандартныеПодсистемыСервер");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.ТекущиеДела\ПриЗаполненииСпискаТекущихДел"].Добавить(
				"СтандартныеПодсистемыСервер");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для функции ОбработчикиСобытий.

Процедура ПроверкаУникальностиИменСобытий(События)
	
	ВсеСобытия    = Новый Соответствие;
	
	Для каждого Событие Из События Цикл
		
		Если ВсеСобытия.Получить(Событие) = Неопределено Тогда
			ВсеСобытия.Вставить(Событие, Истина);
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при подготовке списка событий.
				           |
				           |Событие ""%1""
				           |уже добавлено.'"),
				Событие);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ШаблонОбработчиковСобытий(События, ОбязательныеСобытия)
	
	ОбработчикиСобытий  = Новый Соответствие;
	
	Для каждого Событие Из События Цикл
		
		Если ТипЗнч(Событие) = Тип("Строка") Тогда // Имя события в виде строки.
			ОбработчикиСобытий.Вставить(Событие, Новый Массив);
			
		Иначе	// Описание события в виде структуры
			ОбработчикиСобытий.Вставить(Событие.Имя, Новый Массив);
			Если Событие.Обязательное Тогда
				Если ОбязательныеСобытия.Получить(Событие.Имя) = Неопределено Тогда
					ОбязательныеСобытия.Вставить(Событие.Имя, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбработчикиСобытий;
	
КонецФункции

Процедура ДобавитьОбязательныеСобытияБезОбработчиков(ОбязательныеСобытияБезОбработчиков,
                                                     ОбязательныеСобытия,
                                                     ОбработчикиСобытийПоПодсистемам)
	
	Для каждого ОбязательноеСобытие Из ОбязательныеСобытия Цикл
		
		ОбработчикНайден = Ложь;
		Для каждого ОбработчикиСобытийПодсистемы Из ОбработчикиСобытийПоПодсистемам Цикл
			
			Если ОбработчикиСобытийПодсистемы.Значение.Получить(ОбязательноеСобытие.Ключ).Количество() <> 0 Тогда
				ОбработчикНайден = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ОбработчикНайден Тогда
			ОбязательныеСобытияБезОбработчиков.Добавить(ОбязательноеСобытие.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СтандартноеОписаниеОбработчиковСобытий(ОписанияПодсистем, ОбработчикиСобытийПоПодсистемам)
	
	ОбработчикиСобытий  = Новый Соответствие;
	МодулиОбработчиков  = Новый Соответствие;
	СобытияОбработчиков = Новый Соответствие;
	
	Для каждого Подсистема Из ОписанияПодсистем.Порядок Цикл
		ОбработчикиСобытийПодсистемы = ОбработчикиСобытийПоПодсистемам[Подсистема];
		
		Для каждого КлючИЗначение Из ОбработчикиСобытийПодсистемы Цикл
			Событие              = КлючИЗначение.Ключ;
			ОписанияОбработчиков = КлючИЗначение.Значение;
			
			Обработчики = ОбработчикиСобытий[Событие];
			Если Обработчики = Неопределено Тогда
				Обработчики = Новый Массив;
				ОбработчикиСобытий.Вставить(Событие, Обработчики);
				МодулиОбработчиков.Вставить(Событие, Новый Соответствие);
			КонецЕсли;
			
			Для каждого ОписаниеОбработчика Из ОписанияОбработчиков Цикл
				Если ТипЗнч(ОписаниеОбработчика) = Тип("Структура") Тогда
					Обработчик = ОписаниеОбработчика;
				Иначе
					Обработчик = Новый Структура;
					Обработчик.Вставить("Модуль", ОписаниеОбработчика);
				КонецЕсли;
				Если НЕ Обработчик.Свойство("Версия") Тогда
					Обработчик.Вставить("Версия", "");
				КонецЕсли;
				Обработчик.Вставить("Подсистема", Подсистема);
				
				// Проверка полного имени модуля процедуры обработчика события.
				Если ТипЗнч(Обработчик.Модуль) <> Тип("Строка")
				 ИЛИ НЕ ЗначениеЗаполнено(Обработчик.Модуль) Тогда
					
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка при подготовке обработчиков события
						           |""%1"".
						           |
						           |Ошибка в имени модуля ""%2"".'"),
						Событие,
						Обработчик.Модуль);
				КонецЕсли;
				
				// Проверка, что один и тот же модуль указан для события только раз.
				Если МодулиОбработчиков[Событие].Получить(Обработчик.Модуль) = Неопределено Тогда
					МодулиОбработчиков[Событие].Вставить(Обработчик.Модуль, Истина);
				Иначе
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка при подготовке обработчиков события
						           |""%1"".
						           |
						           |Модуль ""%2"" уже добавлен.'"),
						Событие,
						Обработчик.Модуль);
				КонецЕсли;
				Обработчики.Добавить(Новый ФиксированнаяСтруктура(Обработчик));
				
				// Проверка, что один и тот же обработчик указан для событий только один раз.
				ИмяПроцедуры = Сред(Событие, СтрНайти(Событие, "\") + 1);
				ИмяОбработчика = Обработчик.Модуль + "." + ИмяПроцедуры;
				
				Если СобытияОбработчиков[ИмяОбработчика] = Неопределено Тогда
					СобытияОбработчиков.Вставить(ИмяОбработчика, Событие);
				Иначе
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка при подготовке обработчиков события
						           |""%1"".
						           |
						           |Обработчик ""%2"" уже добавлен для события
						           |""%3"".'"),
						Событие,
						ИмяОбработчика,
						СобытияОбработчиков[ИмяОбработчика]);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Фиксация массивов обработчиков.
	Для каждого КлючИЗначение Из ОбработчикиСобытий Цикл
		ОбработчикиСобытий[КлючИЗначение.Ключ] = Новый ФиксированныйМассив(КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(ОбработчикиСобытий);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Дополнительная базовая функциональность обновления информационной базы.

// Для процедур ЗагрузитьОбновитьПараметрыРаботыПрограммы, ОбновитьВсеПараметрыРаботыПрограммы.
Процедура ОбновитьПараметрыРаботыПрограммы(ОшибкаУстановкиМонопольногоРежима = Неопределено, ВФоне = Ложь)
	
	ЕстьКритичныеИзменения = Ложь;
	РежимОбновления = "Полный";
	СнятьМонопольныйРежим = Ложь;
	
	Если Не МонопольныйРежим() Тогда
		Попытка
			УстановитьМонопольныйРежим(Истина);
			СнятьМонопольныйРежим = Истина;
		Исключение
			СнятьМонопольныйРежим = Ложь;
			РежимОбновления = "Частичный";
		КонецПопытки;
	КонецЕсли;
	
	БезИзменений = Новый Структура;
	Попытка
		ПроверитьОбновитьПараметрыРаботыПрограммы(ЕстьКритичныеИзменения, РежимОбновления, БезИзменений, ВФоне);
	Исключение
		Если СнятьМонопольныйРежим Тогда
			УстановитьМонопольныйРежим(Ложь);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Если СнятьМонопольныйРежим Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
	Если РежимОбновления = "Полный" Или Не ЕстьКритичныеИзменения Тогда
		Возврат;
	КонецЕсли;
	
	РежимОбновления = "Полный";
	
	Попытка
		УстановитьМонопольныйРежим(Истина); // Повторная попытка установки монопольного режима.
	Исключение
		ТекстОшибки =
			НСтр("ru = 'Невозможно выполнить обновление информационной базы:
			           |- Невозможно установить монопольный режим
			           |- Версия конфигурации не предусматривает обновление без установки монопольного режима.'");
		
		Если ОшибкаУстановкиМонопольногоРежима = Неопределено Тогда
			ВызватьИсключение ТекстОшибки;
		Иначе
			ОшибкаУстановкиМонопольногоРежима = ТекстОшибки;
			Возврат;
		КонецЕсли;
	КонецПопытки;
	
	Попытка
		ПроверитьОбновитьПараметрыРаботыПрограммы(ЕстьКритичныеИзменения, РежимОбновления, БезИзменений, ВФоне);
	Исключение
		УстановитьМонопольныйРежим(Ложь);
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьМонопольныйРежим(Ложь);
	
КонецПроцедуры

// Для процедуры ОбновитьПараметрыРаботыПрограммы.
Процедура ПроверитьОбновитьПараметрыРаботыПрограммы(ЕстьКритичныеИзменения, РежимОбновления, БезИзменений, ВФоне)
	
	Если ТипЗнч(БезИзменений) <> Тип("Структура") Тогда
		БезИзменений = Новый Структура;
	КонецЕсли;
	
	ТолькоПроверка = РежимОбновления <> "Полный";
	
	Если Не БезИзменений.Свойство("БазоваяФункциональностьСлужебныеСобытия") Тогда
		ЕстьТекущиеИзменения = Ложь;
		Константы.ПараметрыСлужебныхСобытий.СоздатьМенеджерЗначения().Обновить(ЕстьТекущиеИзменения, ТолькоПроверка);
		Если ЕстьТекущиеИзменения Тогда
			ЕстьКритичныеИзменения = Истина;
			Если ТолькоПроверка Тогда
				Возврат;
			КонецЕсли;
		Иначе
			БезИзменений.Вставить("БазоваяФункциональностьСлужебныеСобытия");
		КонецЕсли;
		Если ВФоне Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ПрибавкаНаШагеПрогресса=20");
		КонецЕсли;
	КонецЕсли;
	
	Если Не БезИзменений.Свойство("БазоваяФункциональностьИдентификаторыОбъектовМетаданных") Тогда
		
		Если СтандартныеПодсистемыПовтИсп.ОтключитьИдентификаторыОбъектовМетаданных() Тогда
			БезИзменений.Вставить("БазоваяФункциональностьИдентификаторыОбъектовМетаданных");
		Иначе
			// Критичные изменения: добавление, удаление или переименование объектов метаданных.
			ЕстьТекущиеИзменения = Ложь;
			Справочники.ИдентификаторыОбъектовМетаданных.ВыполнитьОбновлениеДанных(Ложь, ЕстьТекущиеИзменения, РежимОбновления, ЕстьТекущиеИзменения);
			Если ЕстьТекущиеИзменения Тогда
				ЕстьКритичныеИзменения = Истина;
				Если РежимОбновления <> "Полный" Тогда
					Возврат;
				КонецЕсли;
			Иначе
				БезИзменений.Вставить("БазоваяФункциональностьИдентификаторыОбъектовМетаданных");
			КонецЕсли;
		КонецЕсли;
		Если ВФоне Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ПрибавкаНаШагеПрогресса=50");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ БезИзменений.Свойство("ПользователиПараметрыРаботы") Тогда
		
		ЕстьТекущиеИзменения = Ложь;
		ПользователиСлужебный.ОбновитьПараметрыРаботыПользователей(ЕстьТекущиеИзменения, ТолькоПроверка);
		Если ЕстьТекущиеИзменения Тогда
			ЕстьКритичныеИзменения = Истина;
			Если ТолькоПроверка Тогда
				Возврат;
			КонецЕсли;
		Иначе
			БезИзменений.Вставить("ПользователиПараметрыРаботы");
		КонецЕсли;
		Если ВФоне Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ПрибавкаНаШагеПрогресса=80");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ БезИзменений.Свойство("УправлениеДоступомПараметрыОграниченияДоступа") Тогда
		
		Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			БезИзменений.Вставить("УправлениеДоступомПараметрыОграниченияДоступа");
		Иначе
			МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
			
			ЕстьТекущиеИзменения = Ложь;
			МодульУправлениеДоступомСлужебный.ОбновитьПараметрыОграниченияДоступа(ЕстьТекущиеИзменения, ТолькоПроверка);
			Если ЕстьТекущиеИзменения Тогда
				ЕстьКритичныеИзменения = Истина;
				Если ТолькоПроверка Тогда
					Возврат;
				КонецЕсли;
			Иначе
				БезИзменений.Вставить("УправлениеДоступомПараметрыОграниченияДоступа");
			КонецЕсли;
		КонецЕсли;
		Если ВФоне Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ПрибавкаНаШагеПрогресса=100");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Для функции ИзмененияПараметраРаботыПрограммы.
Функция СледующаяВерсия(Версия)
	
	Массив = СтрРазделить(Версия, ".");
	
	Возврат ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(
		Версия) + "." + Формат(Число(Массив[3]) + 1, "ЧГ=");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Другие процедуры и функции.

// Для процедуры ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
Процедура ДобавитьЗапросРазрешенийНаИспользованиеРасширений(ЗапросыРазрешений)
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
	   И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Возврат;
	КонецЕсли;
	
	Разрешения = Новый Массив;
	ВсеРасширения = РасширенияКонфигурации.Получить();
	
	Для Каждого Расширение Из ВсеРасширения Цикл
		Разрешения.Добавить(РаботаВБезопасномРежиме.РазрешениеНаИспользованиеВнешнегоМодуля(
			Расширение.Имя, Base64Строка(Расширение.ХешСумма)));
	КонецЦикла;
	
	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения,
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("РегистрСведений.ПараметрыРаботыВерсийРасширений")));

КонецПроцедуры

Функция ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти()
	РекомендуемыйОбъем = ОбщегоНазначения.ОбщиеПараметрыБазовойФункциональности().РекомендуемыйОбъемОперативнойПамяти;
	ОперативнаяПамять = ПараметрыКлиентаНаСервере().Получить("ОперативнаяПамять");
	Рекомендация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбщиеНастройкиПользователя", "РекомендацияПоОбъемуОперативнойПамяти");
	
	Возврат Не ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент()
		И ОбщегоНазначения.ИнформационнаяБазаФайловая()
		И (Рекомендация = Неопределено Или Рекомендация.Показывать 
			Или (ТекущаяДатаСеанса() - Рекомендация.ДатаПредыдущегоПоказа) > 60*60*24*60)
		И ОперативнаяПамять < РекомендуемыйОбъем;
КонецФункции

Процедура ИгнорироватьОтправкуДанныхОбработанныхВЦентральномУзлеРИБПриОбновленииИБ(ЭлементДанных, СозданиеНачальногоОбраза, Получатель)
	
	Перем Индекс, СтрокаНабора;
	
	Если Получатель <> Неопределено
		И Не СозданиеНачальногоОбраза
		И ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ДанныеОбработанныеВЦентральномУзлеРИБ") Тогда
		
		Индекс = ЭлементДанных.Количество() - 1;
		
		Пока Индекс > 0 Цикл
			
			СтрокаНабора = ЭлементДанных[Индекс];
			
			Если СтрокаНабора.УзелПланаОбмена <> Получатель Тогда
				ЭлементДанных.Удалить(СтрокаНабора);
			КонецЕсли;
			
			Индекс = Индекс - 1;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// См. одноименную процедуру в общем модуле ОчередьЗаданийПереопределяемый.
Процедура ПриПолученииСпискаШаблонов(Шаблоны) Экспорт
	
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.УдалениеУстаревшихПараметровРаботыВерсийРасширений.Имя);
	
КонецПроцедуры

#КонецОбласти
