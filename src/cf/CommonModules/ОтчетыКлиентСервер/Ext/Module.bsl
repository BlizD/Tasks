////////////////////////////////////////////////////////////////////////////////
// Методы работы с СКД из формы отчета (клиент, сервер).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Настройки формы отчета по умолчанию.
//
// Возвращаемое значение:
//   Структура - Настройки формы отчета.
//       
//       * ФормироватьСразу - Булево - Значение по умолчанию для флажка "Формировать сразу".
//           Когда флажок включен, то отчет будет формироваться:
//             - После открытия;
//             - После выбора пользовательских настроек;
//             - После выбора другого варианта отчета.
//       
//       * ВыводитьСуммуВыделенныхЯчеек - Булево - Если Истина, то в отчете будет выводиться поле автосуммы.
//       
//       * Печать - Структура - Параметры печати табличного документа "по умолчанию".
//           ** ПолеСверху - Число - Отступ сверху при печати (в миллиметрах).
//           ** ПолеСлева  - Число - Отступ слева  при печати (в миллиметрах).
//           ** ПолеСнизу  - Число - Отступ снизу  при печати (в миллиметрах).
//           ** ПолеСправа - Число - Отступ справа при печати (в миллиметрах).
//           ** ОриентацияСтраницы - ОриентацияСтраницы - "Портрет" или "Ландшафт".
//           ** АвтоМасштаб - Булево - Автоматически подгонять масштаб под размер страницы.
//           ** МасштабПечати - Число - Масштаб изображения (в процентах).
//       
//       * События - Структура - События, для которых определены обработчики в модуле объекта отчета.
//           
//           ** ПриСозданииНаСервере - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   Отказ - Передается из параметров обработчика "как есть".
//               //   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//               //
//               // См. также:
//               //   "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//               //   ОтчетыПереопределяемый.ПриСозданииНаСервере().
//               //
//               // Пример 1 - Добавление команды с обработчиком в ОтчетыКлиентПереопределяемый.ОбработчикКоманды:
//               //	Команда = Форма.Команды.Добавить("МояОсобеннаяКоманда");
//               //	Команда.Действие  = "Подключаемый_Команда";
//               //	Команда.Заголовок = НСтр("ru = 'Моя команда...'");
//               //	
//               //	Кнопка = Форма.Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), Форма.Элементы.ГруппаПрограммныйИнтерфейс);
//               //	Кнопка.ИмяКоманды = Команда.Имя;
//               //	
//               //	Форма.ПостоянныеКоманды.Добавить(КомандаСоздать.Имя);
//               //
//               Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПередЗагрузкойНастроекВКомпоновщик - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//               //   Например, если схема отчета зависит от ключа варианта или параметров отчета.
//               //   Чтобы изменения схемы вступили в силу следует вызывать метод ОтчетыСервер.ПодключитьСхему().
//               //
//               // Параметры:
//               //   Контекст - Произвольный - 
//               //       Параметры контекста, в котором используется отчет.
//               //       Используется для передачи в параметрах метода ОтчетыСервер.ПодключитьСхему().
//               //   КлючСхемы - Строка -
//               //       Идентификатор текущей схемы компоновщика настроек.
//               //       По умолчанию не заполнен (это означает что компоновщик инициализирован на основании основной схемы).
//               //       Используется для оптимизации, чтобы переинициализировать компоновщик как можно реже).
//               //       Может не использоваться если переинициализация выполняется безусловно.
//               //   КлючВарианта - Строка, Неопределено -
//               //       Имя предопределенного или уникальный идентификатор пользовательского варианта отчета.
//               //       Неопределено когда вызов для варианта расшифровки или без контекста.
//               //   НовыеНастройкиКД - НастройкиКомпоновкиДанных, Неопределено -
//               //       Настройки варианта отчета, которые будут загружены в компоновщик настроек после его инициализации.
//               //       Неопределено когда настройки варианта не надо загружать (уже загружены ранее).
//               //   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных, Неопределено -
//               //       Пользовательские настройки, которые будут загружены в компоновщик настроек после его инициализации.
//               //       Неопределено когда пользовательские настройки не надо загружать (уже загружены ранее).
//               //
//               // Примеры:
//               // 1. Компоновщик отчета инициализируется на основании схемы из общих макетов:
//               //	Если КлючСхемы <> "1" Тогда
//               //		КлючСхемы = "1";
//               //		СхемаКД = ПолучитьОбщийМакет("МояОбщаяСхемаКомпоновки");
//               //		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКД, КлючСхемы);
//               //	КонецЕсли;
//               //
//               // 2. Схема зависит от значения параметра, выведенного в пользовательские настройки отчета:
//               //	Если ТипЗнч(НовыеПользовательскиеНастройкиКД) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
//               //		ПолноеИмяОбъектаМетаданных = "";
//               //		Для Каждого ЭлементКД Из НовыеПользовательскиеНастройкиКД.Элементы Цикл
//               //			Если ТипЗнч(ЭлементКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
//               //				ИмяПараметра = Строка(ЭлементКД.Параметр);
//               //				Если ИмяПараметра = "ОбъектМетаданных" Тогда
//               //					ПолноеИмяОбъектаМетаданных = ЭлементКД.Значение;
//               //				КонецЕсли;
//               //			КонецЕсли;
//               //		КонецЦикла;
//               //		Если КлючСхемы <> ПолноеИмяОбъектаМетаданных Тогда
//               //			КлючСхемы = ПолноеИмяОбъектаМетаданных;
//               //			СхемаКД = Новый СхемаКомпоновкиДанных;
//               //			// Наполнение схемы...
//               //			ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКД, КлючСхемы);
//               //		КонецЕсли;
//               //	КонецЕсли;
//               //
//               Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПередЗагрузкойВариантаНаСервере - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//               //
//               // См. также:
//               //   "Расширение управляемой формы для отчета.ПередЗагрузкойВариантаНаСервере" в синтакс-помощнике.
//               //   ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере().
//               //
//               Процедура ПередЗагрузкойВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПриЗагрузкеВариантаНаСервере - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//               //
//               // См. также:
//               //   "Расширение управляемой формы для отчета.ПриЗагрузкеВариантаНаСервере" в синтакс-помощнике.
//               //
//               Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПриЗагрузкеПользовательскихНастроекНаСервере - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных -
//               //       Пользовательские настройки для загрузки в компоновщик настроек.
//               //
//               // См. также:
//               //   "Расширение управляемой формы для отчета.ПриЗагрузкеПользовательскихНастроекНаСервере"
//               //    в синтакс-помощнике.
//               //
//               Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПередЗаполнениемПанелиБыстрыхНастроек - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается до перезаполнения панели настроек формы отчета.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   ПараметрыЗаполнения - Структура - Параметры, которые будут загружены в отчет.
//               //
//               Процедура ПередЗаполнениемПанелиБыстрыхНастроек(Форма, ПараметрыЗаполнения) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПослеЗаполненияПанелиБыстрыхНастроек - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается после перезаполнения панели настроек формы отчета.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   ПараметрыЗаполнения - Структура - Параметры, которые будут загружены в отчет.
//               //
//               Процедура ПослеЗаполненияПанелиБыстрыхНастроек(Форма, ПараметрыЗаполнения) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПриОпределенииПараметровВыбора - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается в форме отчета перед выводом настройки.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма, Неопределено - Форма отчета.
//               //   СвойстваНастройки - Структура - Описание настройки отчета, которая будет выведена в форме отчета.
//               //       * ОписаниеТипов - ОписаниеТипов -
//               //           Тип настройки.
//               //       * ЗначенияДляВыбора - СписокЗначений -
//               //           Объекты, которые будут предложены пользователю в списке выбора.
//               //           Дополняет список объектов, уже выбранных пользователем ранее.
//               //       * ЗапросЗначенийВыбора - Запрос -
//               //           Возвращает объекты, которыми необходимо дополнить ЗначенияДляВыбора.
//               //           Первой колонкой (с 0м индексом) должен выбираться объект,
//               //           который следует добавить в ЗначенияДляВыбора.Значение.
//               //           Для отключения автозаполнения
//               //           в свойство ЗапросЗначенийВыбора.Текст следует записать пустую строку.
//               //       * ОграничиватьВыборУказаннымиЗначениями - Булево -
//               //           Когда Истина, то выбор пользователя будет ограничен значениями,
//               //           указанными в ЗначенияДляВыбора (его конечным состоянием).
//               //
//               // См. также:
//               //   ОтчетыПереопределяемый.ПриОпределенииПараметровВыбора().
//               //
//               Процедура ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПриОпределенииИспользуемыхТаблиц - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Список регистров и других объектов метаданных, по которым формируется отчет.
//               //   Используется для проверки что отчет может содержать не обновленные данные.
//               //
//               // Параметры:
//               //   КлючВарианта - Строка, Неопределено -
//               //       Имя предопределенного или уникальный идентификатор пользовательского варианта отчета.
//               //       Неопределено когда вызов для варианта расшифровки или без контекста.
//               //   ИспользуемыеТаблицы - Массив из Строка -
//               //       Полные имена объектов метаданных (регистров, документов и других таблиц),
//               //       данные которых выводятся в отчете.
//               //
//               // Пример:
//               //	ИспользуемыеТаблицы.Добавить(Метаданные.Документы._ДемоЗаказПокупателя.ПолноеИмя());
//               //
//               Процедура ПриОпределенииИспользуемыхТаблиц(КлючВарианта, ИспользуемыеТаблицы) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ДополнитьСвязиОбъектовМетаданных - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Дополнительные связи настроек этого отчета.
//               // В данной процедуре следует описать дополнительные зависимости объектов метаданных
//               //   конфигурации, которые будут использоваться для связи настроек отчетов.
//               //
//               // Параметры:
//               //   СвязиОбъектовМетаданных - ТаблицаЗначений - Таблица связей.
//               //       * ПодчиненныйРеквизит - Строка - Имя реквизита подчиненного объекта метаданных.
//               //       * ПодчиненныйТип      - Тип    - Тип подчиненного объекта метаданных.
//               //       * ВедущийТип          - Тип    - Тип ведущего объекта метаданных.
//               //
//               // См. также:
//               //   ОтчетыПереопределяемый.ДополнитьСвязиОбъектовМетаданных().
//               //
//               Процедура ДополнитьСвязиОбъектовМетаданных(СвязиОбъектовМетаданных) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//
Функция ПолучитьНастройкиОтчетаПоУмолчанию() Экспорт
	Печать = Новый Структура;
	Печать.Вставить("ПолеСверху", 10);
	Печать.Вставить("ПолеСлева", 10);
	Печать.Вставить("ПолеСнизу", 10);
	Печать.Вставить("ПолеСправа", 10);
	Печать.Вставить("ОриентацияСтраницы", ОриентацияСтраницы.Портрет);
	Печать.Вставить("АвтоМасштаб", Истина);
	Печать.Вставить("МасштабПечати", Неопределено);
	
	События = Новый Структура;
	События.Вставить("ПриСозданииНаСервере", Ложь);
	События.Вставить("ПередЗагрузкойНастроекВКомпоновщик", Ложь);
	События.Вставить("ПередЗагрузкойВариантаНаСервере", Ложь);
	События.Вставить("ПриЗагрузкеВариантаНаСервере", Ложь);
	События.Вставить("ПриЗагрузкеПользовательскихНастроекНаСервере", Ложь);
	События.Вставить("ПередЗаполнениемПанелиБыстрыхНастроек", Ложь);
	События.Вставить("ПослеЗаполненияПанелиБыстрыхНастроек", Ложь);
	События.Вставить("ПриОпределенииПараметровВыбора", Ложь);
	События.Вставить("ПриОпределенииИспользуемыхТаблиц", Ложь);
	События.Вставить("ДополнитьСвязиОбъектовМетаданных", Ложь);
	
	Настройки = Новый Структура;
	Настройки.Вставить("ФормироватьСразу", Ложь);
	Настройки.Вставить("ВыводитьСуммуВыделенныхЯчеек", Истина);
	Настройки.Вставить("Печать", Печать);
	Настройки.Вставить("События", События);
	
	// Устарели:
	// Вместо свойства "ПараметрыПечатиПоУмолчанию" следует использовать свойство "Печать".
	Настройки.Вставить("ПараметрыПечатиПоУмолчанию", Печать);
	// Вместо свойства "СоответствиеПериодичностиПараметров" следует использовать событие
	// ПриНажатииКнопкиВыбораПериода общего модуля ОтчетыКлиентПереопределяемый.
	Настройки.Вставить("СоответствиеПериодичностиПараметров", Новый Соответствие);
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Находит параметр в настройках компоновки по его имени.
//   Если пользовательская настройка не найдена (например,
//   если параметр не выведен в пользовательские настройки),
//   то ищет значение параметра в настройках варианта.
//
// Параметры:
//   НастройкиКД - НастройкиКомпоновкиДанных, Неопределено -
//       Настройки варианта отчета, в которых будет осуществляться вторая итерация поиска значения.
//   ПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных, Неопределено -
//       Пользовательские настройки, в которых будет осуществляться первая итерация поиска значения.
//   ИмяПараметра - Строка - Имя параметра. Должно удовлетворять требованиям образования имен переменных.
//
// Возвращаемое значение:
//   Структура - Найденные значения параметров.
//       Ключ - имя параметра;
//       Значение - значение параметра. Неопределено если параметр не найден.
//
Функция НайтиПараметр(НастройкиКД, ПользовательскиеНастройкиКД, ИмяПараметра) Экспорт
	Возврат НайтиПараметры(НастройкиКД, ПользовательскиеНастройкиКД, ИмяПараметра)[ИмяПараметра];
КонецФункции

// Находит параметры в настройках компоновки по его имени.
//   Если параметр не найден в пользовательских настройках,
//   то его поиск выполняется в настройках варианта.
//
// Параметры:
//   НастройкиКД - НастройкиКомпоновкиДанных, Неопределено -
//       Настройки варианта отчета, в которых будет осуществляться вторая итерация поиска значения.
//   ПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных, Неопределено -
//       Пользовательские настройки, в которых будет осуществляться первая итерация поиска значения.
//   ИменаПараметров - Строка - Имена параметров, перечисленные через запятую.
//       Имя каждого параметра должно удовлетворять требованиям образования имен переменных.
//
// Возвращаемое значение:
//   Структура - Найденные значения параметров.
//       Ключ - имя параметра;
//       Значение - найденный параметр. Неопределено если параметр не найден.
//
Функция НайтиПараметры(НастройкиКД, ПользовательскиеНастройкиКД, ИменаПараметров)
	Результат = Новый Структура;
	ИскомыеПараметры = Новый Соответствие;
	МассивИмен = СтрРазделить(ИменаПараметров, ",", Ложь);
	Количество = 0;
	Для Каждого ИмяПараметра Из МассивИмен Цикл
		ИскомыеПараметры.Вставить(СокрЛП(ИмяПараметра), Истина);
		Количество = Количество + 1;
	КонецЦикла;
	
	Если ПользовательскиеНастройкиКД <> Неопределено Тогда
		Для Каждого ЭлементКД Из ПользовательскиеНастройкиКД.Элементы Цикл
			Если ТипЗнч(ЭлементКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ИмяПараметра = Строка(ЭлементКД.Параметр);
				Если ИскомыеПараметры[ИмяПараметра] = Истина Тогда
					Результат.Вставить(ИмяПараметра, ЭлементКД);
					ИскомыеПараметры.Удалить(ИмяПараметра);
					Количество = Количество - 1;
					Если Количество = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Количество > 0 Тогда
		Для Каждого КлючИЗначение Из ИскомыеПараметры Цикл
			Если НастройкиКД <> Неопределено Тогда
				ЭлементКД = НастройкиКД.ПараметрыДанных.Элементы.Найти(КлючИЗначение.Ключ);
			Иначе
				ЭлементКД = Неопределено;
			КонецЕсли;
			Результат.Вставить(КлючИЗначение.Ключ, ЭлементКД);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Находит общую настройку по идентификатору пользовательской настройки.
//
// Параметры:
//   Настройки - НастройкиКомпоновкиДанных - Коллекции настроек.
//   ИдентификаторПользовательскойНастройки - Строка -
//
Функция ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки, ИдентификаторПользовательскойНастройки, Иерархия = Неопределено) Экспорт
	Если Иерархия <> Неопределено Тогда
		Иерархия.Добавить(Настройки);
	КонецЕсли;
	
	ТипНастройки = ТипЗнч(Настройки);
	
	Если ТипНастройки <> Тип("НастройкиКомпоновкиДанных") Тогда
		
		Если Настройки.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			
			Возврат Настройки;
			
		ИначеЕсли ТипНастройки = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			
			Возврат ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Настройки, ИдентификаторПользовательскойНастройки, Иерархия);
			
		ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
			ИЛИ ТипНастройки = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных")
			ИЛИ ТипНастройки = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
			
			Для Каждого ВложенныйЭлемент Из Настройки Цикл
				РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(ВложенныйЭлемент, ИдентификаторПользовательскойНастройки, Иерархия);
				Если РезультатПоиска <> Неопределено Тогда
					Возврат РезультатПоиска;
				КонецЕсли;
			КонецЦикла;
			
			Если Иерархия <> Неопределено Тогда
				Иерархия.Удалить(Иерархия.ВГраница());
			КонецЕсли;
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Настройки.Выбор.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
		Возврат Настройки.Выбор;
	ИначеЕсли Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
		Возврат Настройки.УсловноеОформление;
	КонецЕсли;
	
	Если ТипНастройки <> Тип("ТаблицаКомпоновкиДанных") И ТипНастройки <> Тип("ДиаграммаКомпоновкиДанных") Тогда
		Если Настройки.Отбор.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Возврат Настройки.Отбор;
		ИначеЕсли Настройки.Порядок.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Возврат Настройки.Порядок;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипНастройки = Тип("НастройкиКомпоновкиДанных") Тогда
		РезультатПоиска = НайтиЭлементНастройки(Настройки.ПараметрыДанных, ИдентификаторПользовательскойНастройки);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипНастройки <> Тип("ТаблицаКомпоновкиДанных") И ТипНастройки <> Тип("ДиаграммаКомпоновкиДанных") Тогда
		РезультатПоиска = НайтиЭлементНастройки(Настройки.Отбор, ИдентификаторПользовательскойНастройки);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;
	
	РезультатПоиска = НайтиЭлементНастройки(Настройки.УсловноеОформление, ИдентификаторПользовательскойНастройки);
	Если РезультатПоиска <> Неопределено Тогда
		Возврат РезультатПоиска;
	КонецЕсли;
	
	Если ТипНастройки = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Строки, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Колонки, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
	ИначеЕсли ТипНастройки = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Точки, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Серии, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
	Иначе
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Структура, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Иерархия <> Неопределено Тогда
		Иерархия.Удалить(Иерархия.ВГраница());
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Находит пользовательскую настройку по ее идентификатору.
//
// Параметры:
//   ПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - Коллекция пользовательских настроек.
//   Идентификатор - Строка - Идентификатор настройки, которую нужно найти.
//
// Возвращаемое значение:
//   Неопределено - Когда настройка не найдена.
//   ЭлементОтбораКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных
//     и прочие типы элементов из КоллекцияЭлементовПользовательскихНастроекКомпоновкиДанных - Пользовательская настройка.
//
Функция НайтиПользовательскуюНастройку(ПользовательскиеНастройкиКД, Идентификатор) Экспорт
	Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройкиКД.Элементы Цикл
		Если ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
			Возврат ПользовательскаяНастройка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Находит доступную настройку для отбора или параметра.
//
// Параметры:
//   НастройкиКД - НастройкиКомпоновкиДанных - Коллекции настроек.
//   ЭлементКД - ЭлементОтбораКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных,
//       НастройкиВложенногоОбъектаКомпоновкиДанных - Значение элемента настройки.
//
// Возвращаемое значение:
//   ДоступноеПолеКомпоновкиДанных, ДоступныйПараметрКомпоновкиДанных,
//       ДоступныйОбъектНастройкиКомпоновкиДанных - Найденная доступная настройка.
//   Неопределено - Если доступная настройка не найдена.
//
Функция НайтиДоступнуюНастройку(НастройкиКД, ЭлементКД) Экспорт
	Тип = ТипЗнч(ЭлементКД);
	Если Тип = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Возврат НайтиДоступноеПолеКД(НастройкиКД, ЭлементКД.ЛевоеЗначение);
	ИначеЕсли Тип = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Возврат НайтиДоступныйПараметрКД(НастройкиКД, ЭлементКД.Параметр);
	ИначеЕсли Тип = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат НастройкиКД.ДоступныеОбъекты.Элементы.Найти(ЭлементКД.ИдентификаторОбъекта);
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Находит пользовательскую настройку по имени параметра.
//   Если пользовательская настройка не найдена (например,
//   если параметр не выведен в пользовательские настройки),
//   то получает общую настройку параметра.
//
// Параметры:
//   КомпоновщикНастроекКД - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек.
//   ИмяПараметра          - Строка - Имя параметра.
//
// Возвращаемое значение:
//   ЗначениеПараметраНастроекКомпоновкиДанных - Пользовательская настройка параметра.
//   Неопределено - Если параметр не найден.
//
Функция ПолучитьПараметр(КомпоновщикНастроекКД, ИмяПараметра) Экспорт
	ПараметрКД = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	
	Для Каждого ПользовательскаяНастройка Из КомпоновщикНастроекКД.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ПользовательскаяНастройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И ПользовательскаяНастройка.Параметр = ПараметрКД Тогда
			Возврат ПользовательскаяНастройка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КомпоновщикНастроекКД.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКД);
КонецФункции

// Возвращает вид периода.
Функция ПолучитьВидПериода(НачалоПериода, КонецПериода, ДоступныеПериоды = Неопределено) Экспорт
	
	ВидПериода = Неопределено;
	Если НачалоПериода = НачалоДня(НачалоПериода)
		И КонецПериода = КонецДня(КонецПериода) Тогда
		
		РазностьДней = (КонецПериода - НачалоПериода + 1) / (60*60*24);
		Если РазностьДней = 1 Тогда
			
			ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День");
			
		ИначеЕсли РазностьДней = 7 Тогда
			
			Если НачалоПериода = НачалоНедели(НачалоПериода) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя");
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 11 Тогда
			
			Если (День(НачалоПериода) = 1 И День(КонецПериода) = 10)
				ИЛИ (День(НачалоПериода) = 11 И День(КонецПериода) = 20)
				ИЛИ (День(НачалоПериода) = 21 И КонецПериода = КонецМесяца(НачалоПериода)) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада");
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 31 Тогда
			
			Если НачалоПериода = НачалоМесяца(НачалоПериода) И КонецПериода = КонецМесяца(НачалоПериода) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 92 Тогда
			
			Если НачалоПериода = НачалоКвартала(НачалоПериода) И КонецПериода = КонецКвартала(НачалоПериода) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал");
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 190 Тогда
			
			Если Месяц(НачалоПериода) + 5 = Месяц(КонецПериода)
				И НачалоПериода = НачалоМесяца(НачалоПериода)
				И КонецПериода = КонецМесяца(КонецПериода)
				И (НачалоПериода = НачалоГода(НачалоПериода) ИЛИ КонецПериода = КонецГода(НачалоПериода)) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие");
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 366 Тогда
			
			Если НачалоПериода = НачалоГода(НачалоПериода) И КонецПериода = КонецГода(НачалоПериода) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ВидПериода = Неопределено Тогда
		ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод");
	КонецЕсли;
	
	Если ДоступныеПериоды <> Неопределено И ДоступныеПериоды.НайтиПоЗначению(ВидПериода) = Неопределено Тогда
		ВидПериода = ДоступныеПериоды[0].Значение;
	КонецЕсли;
	
	Возврат ВидПериода;
	
КонецФункции

// Устарела. Следует использовать НайтиДоступнуюНастройку().
Функция ПолучитьДоступноеПоле(ДоступныеПоля, Поле) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		ПолеДоступа = Новый ПолеКомпоновкиДанных(Поле);
	ИначеЕсли ТипЗнч(Поле) = Тип("ПолеКомпоновкиДанных") Тогда
		ПолеДоступа = Поле;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДоступныеПоля.НайтиПоле(ПолеДоступа);
	
КонецФункции

// Устарела. Следует использовать НайтиДоступнуюНастройку().
Функция ПолучитьДоступныйПараметр(ДоступныеПараметры, Параметр) Экспорт
	
	Если ТипЗнч(ДоступныеПараметры) <> Тип("ДоступныеПараметрыКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Параметр) = Тип("Строка") Тогда
		ПараметрДоступа = Новый ПараметрКомпоновкиДанных(Параметр);
	ИначеЕсли ТипЗнч(Параметр) = Тип("ПараметрКомпоновкиДанных") Тогда
		ПараметрДоступа = Параметр;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДоступныеПараметры.НайтиПараметр(ПараметрДоступа);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Находит доступную настройку поля компоновки данных.
//
// Параметры:
//   НастройкиКД - НастройкиКомпоновкиДанных - Коллекции настроек.
//   Поле - Строка, ПолеКомпоновкиДанных - Имя поля.
//
// Возвращаемое значение:
//   Неопределено - Когда доступная настройка поля не найдена.
//   ДоступноеПолеКомпоновкиДанных - Доступная настройка для поля.
//
Функция НайтиДоступноеПолеКД(НастройкиКД, ПолеКД)
	Если ПолеКД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДоступнаяНастройка = НастройкиКД.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
	Если ДоступнаяНастройка <> Неопределено Тогда
		Возврат ДоступнаяНастройка;
	КонецЕсли;
	
	МассивСтруктур = Новый Массив;
	МассивСтруктур.Добавить(НастройкиКД.Структура);
	Пока МассивСтруктур.Количество() > 0 Цикл
		
		СтруктураКД = МассивСтруктур[0];
		МассивСтруктур.Удалить(0);
		
		Для Каждого ЭлементСтруктурыКД Из СтруктураКД Цикл
			
			Если ТипЗнч(ЭлементСтруктурыКД) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				
				ДоступнаяНастройка = ЭлементСтруктурыКД.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
				Если ДоступнаяНастройка <> Неопределено Тогда
					Возврат ДоступнаяНастройка;
				КонецЕсли;
				
				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Настройки.Структура);
				
			ИначеЕсли ТипЗнч(ЭлементСтруктурыКД) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				
				ДоступнаяНастройка = ЭлементСтруктурыКД.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
				Если ДоступнаяНастройка <> Неопределено Тогда
					Возврат ДоступнаяНастройка;
				КонецЕсли;
				
				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Структура);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Находит доступную настройку параметра компоновки данных.
//
// Параметры:
//   НастройкиКД - НастройкиКомпоновкиДанных - Коллекции настроек.
//   ПараметрКД - ПараметрКомпоновкиДанных - Имя параметра.
//
// Возвращаемое значение:
//   ДоступныйПараметрКомпоновкиДанных, Неопределено - Доступная настройка для параметра.
//
Функция НайтиДоступныйПараметрКД(НастройкиКД, ПараметрКД)
	Если ПараметрКД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НастройкиКД.ПараметрыДанных.ДоступныеПараметры <> Неопределено Тогда
		// Настройки, которым принадлежат параметры данных, связаны с источником доступных настроек.
		ДоступнаяНастройка = НастройкиКД.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ПараметрКД);
		Если ДоступнаяНастройка <> Неопределено Тогда
			Возврат ДоступнаяНастройка;
		КонецЕсли;
	КонецЕсли;
	
	МассивСтруктур = Новый Массив;
	МассивСтруктур.Добавить(НастройкиКД.Структура);
	Пока МассивСтруктур.Количество() > 0 Цикл
		
		СтруктураКД = МассивСтруктур[0];
		МассивСтруктур.Удалить(0);
		
		Для Каждого ЭлементСтруктурыКД Из СтруктураКД Цикл
			
			Если ТипЗнч(ЭлементСтруктурыКД) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				
				Если ЭлементСтруктурыКД.Настройки.ПараметрыДанных.ДоступныеПараметры <> Неопределено Тогда
					// Настройки, которым принадлежат параметры данных, связаны с источником доступных настроек.
					ДоступнаяНастройка = ЭлементСтруктурыКД.Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ПараметрКД);
					Если ДоступнаяНастройка <> Неопределено Тогда
						Возврат ДоступнаяНастройка;
					КонецЕсли;
				КонецЕсли;
				
				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Настройки.Структура);
				
			ИначеЕсли ТипЗнч(ЭлементСтруктурыКД) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				
				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Структура);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Добавляет выбранное поле компоновки данных.
//
// Параметры:
//   Куда - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных, ВыбранныеПоляКомпоновкиДанных -
//       Коллекция в которую требуется добавить выбранное поле.
//   ИмяИлиПолеКД - Строка, ПолеКомпоновкиДанных - Имя поля.
//   Заголовок    - Строка - Необязательный. Представление поля.
//
// Возвращаемое значение:
//   ВыбранноеПолеКомпоновкиДанных - Добавленное выбранное поле.
//
Функция ДобавитьВыбранноеПоле(Куда, ИмяИлиПолеКД, Заголовок = "") Экспорт
	
	Если ТипЗнч(Куда) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоляКД = Куда.Настройки.Выбор;
	ИначеЕсли ТипЗнч(Куда) = Тип("НастройкиКомпоновкиДанных") Тогда
		ВыбранныеПоляКД = Куда.Выбор;
	Иначе
		ВыбранныеПоляКД = Куда;
	КонецЕсли;
	
	Если ТипЗнч(ИмяИлиПолеКД) = Тип("Строка") Тогда
		ПолеКД = Новый ПолеКомпоновкиДанных(ИмяИлиПолеКД);
	Иначе
		ПолеКД = ИмяИлиПолеКД;
	КонецЕсли;
	
	ВыбранноеПолеКД = ВыбранныеПоляКД.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеКД.Поле = ПолеКД;
	Если Заголовок <> "" Тогда
		ВыбранноеПолеКД.Заголовок = Заголовок;
	КонецЕсли;
	
	Возврат ВыбранноеПолеКД;
	
КонецФункции

// Приводит значение типа ИспользованиеГруппИЭлементов к типу ГруппыИЭлементы.
//  Для других типов возвращает значение Авто.
//
Функция ПривестиЗначениеКТипуГруппыИЭлементы(ИсходноеЗначение, ЗначениеПоУмолчанию = Неопределено) Экспорт
	Тип = ТипЗнч(ИсходноеЗначение);
	Если Тип = Тип("ГруппыИЭлементы") Тогда
		Возврат ИсходноеЗначение;
	ИначеЕсли Тип = Тип("ИспользованиеГруппИЭлементов") Тогда
		Если ИсходноеЗначение = ИспользованиеГруппИЭлементов.Элементы Тогда
			Возврат ГруппыИЭлементы.Элементы;
		ИначеЕсли ИсходноеЗначение = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
			Возврат ГруппыИЭлементы.ГруппыИЭлементы;
		ИначеЕсли ИсходноеЗначение = ИспользованиеГруппИЭлементов.Группы Тогда
			Возврат ГруппыИЭлементы.Группы;
		КонецЕсли;
	ИначеЕсли Тип = Тип("ВидСравненияКомпоновкиДанных") Тогда
		Если ИсходноеЗначение = ВидСравненияКомпоновкиДанных.ВСписке
			Или ИсходноеЗначение = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
			Или ИсходноеЗначение = ВидСравненияКомпоновкиДанных.НеВСписке
			Или ИсходноеЗначение = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
			Возврат ГруппыИЭлементы.ГруппыИЭлементы;
		ИначеЕсли ИсходноеЗначение = ВидСравненияКомпоновкиДанных.ВИерархии
			Или ИсходноеЗначение = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
			Возврат ГруппыИЭлементы.Группы;
		КонецЕсли;
	КонецЕсли;
	Возврат ?(ЗначениеПоУмолчанию = Неопределено, ГруппыИЭлементы.Авто, ЗначениеПоУмолчанию);
КонецФункции

// Приводит значение типа ГруппыИЭлементы к типу ИспользованиеГруппИЭлементов.
//  Для значения Авто и других типов возвращает значение Неопределено.
//
Функция ПривестиЗначениеКТипуИспользованиеГруппИЭлементов(ИсходноеЗначение) Экспорт
	Если ИсходноеЗначение = ГруппыИЭлементы.Элементы Тогда
		Возврат ИспользованиеГруппИЭлементов.Элементы;
	ИначеЕсли ИсходноеЗначение = ГруппыИЭлементы.ГруппыИЭлементы Тогда
		Возврат ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
	ИначеЕсли ИсходноеЗначение = ГруппыИЭлементы.Группы Тогда
		Возврат ИспользованиеГруппИЭлементов.Группы;
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("ИспользованиеГруппИЭлементов") Тогда
		Возврат ИсходноеЗначение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Определяет полный путь к элементу компоновки данных.
//
// Параметры:
//   НастройкиКД - НастройкиКомпоновкиДанных - Корневой узел настроек, от которого строится полный путь.
//   ЭлементКД - Произвольный - Узел настроек, к которому строится полный путь.
//
// Возвращаемое значение:
//   Строка - полный путь к элементу. Может использоваться в функции НайтиЭлементПоПолномуПути().
//   Неопределено - если не удалось построить полный путь.
//
Функция ПолныйПутьКЭлементу(Знач НастройкиКД, Знач ЭлементКД) Экспорт
	Результат = Новый Массив;
	РодительКД = ЭлементКД;
	Пока РодительКД <> Неопределено И РодительКД <> НастройкиКД Цикл
		ЭлементКД = РодительКД;
		РодительКД = РодительКД.Родитель;
		ТипРодителя = ТипЗнч(РодительКД);
		Если ТипРодителя = Тип("ТаблицаКомпоновкиДанных") Тогда
			Индекс = РодительКД.Строки.Индекс(ЭлементКД);
			Если Индекс = -1 Тогда
				Индекс = РодительКД.Колонки.Индекс(ЭлементКД);
				ИмяКоллекции = "Колонки";
			Иначе
				ИмяКоллекции = "Строки";
			КонецЕсли;
		ИначеЕсли ТипРодителя = Тип("ДиаграммаКомпоновкиДанных") Тогда
			Индекс = РодительКД.Серии.Индекс(ЭлементКД);
			Если Индекс = -1 Тогда
				Индекс = РодительКД.Точки.Индекс(ЭлементКД);
				ИмяКоллекции = "Точки";
			Иначе
				ИмяКоллекции = "Серии";
			КонецЕсли;
		ИначеЕсли ТипРодителя = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			ИмяКоллекции = "Настройки";
			Индекс = Неопределено;
		Иначе
			ИмяКоллекции = "Структура";
			Индекс = РодительКД.Структура.Индекс(ЭлементКД);
		КонецЕсли;
		Если Индекс = -1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если Индекс <> Неопределено Тогда
			Результат.Вставить(0, Индекс);
		КонецЕсли;
		Результат.Вставить(0, ИмяКоллекции);
	КонецЦикла;
	Возврат СтрСоединить(Результат, "/");
КонецФункции

// Находит элемент компоновки данных по полному пути.
//
// Параметры:
//   НастройкиКД - НастройкиКомпоновкиДанных - Корневой узел настроек, в который вложен искомый элемент.
//   ПолныйПутьКЭлементу - Строка - полный путь к элементу. Может быть получена в функции ПолныйПутьКЭлементу().
//
// Возвращаемое значение:
//   ЭлементКД - Произвольный - Найденный узел настроек.
//
Функция НайтиЭлементПоПолномуПути(Знач НастройкиКД, Знач ПолныйПутьКЭлементу) Экспорт
	МассивИндексов = СтрРазделить(ПолныйПутьКЭлементу, "/", Ложь);
	ЭлементКД = НастройкиКД;
	Для Каждого Индекс Из МассивИндексов Цикл
		Если Индекс = "Строки" Тогда
			ЭлементКД = ЭлементКД.Строки;
		ИначеЕсли Индекс = "Колонки" Тогда
			ЭлементКД = ЭлементКД.Колонки;
		ИначеЕсли Индекс = "Серии" Тогда
			ЭлементКД = ЭлементКД.Серии;
		ИначеЕсли Индекс = "Точки" Тогда
			ЭлементКД = ЭлементКД.Точки;
		ИначеЕсли Индекс = "Структура" Тогда
			ЭлементКД = ЭлементКД.Структура;
		ИначеЕсли Индекс = "Настройки" Тогда
			ЭлементКД = ЭлементКД.Настройки;
		Иначе
			ЭлементКД = ЭлементКД[Число(Индекс)];
		КонецЕсли;
	КонецЦикла;
	Возврат ЭлементКД;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции.

// Находит общую настройку компоновки данных по идентификатору.
Функция НайтиЭлементНастройки(ЭлементНастройки, ИдентификаторПользовательскойНастройки)
	// Поиск элемента с заданным значением свойства ИдентификаторПользовательскойНастройки (ИПН).
	
	МассивГрупп = Новый Массив;
	МассивГрупп.Добавить(ЭлементНастройки.Элементы);
	
	Пока МассивГрупп.Количество() > 0 Цикл
		
		КоллекцияЭлементов = МассивГрупп.Получить(0);
		МассивГрупп.Удалить(0);
		
		Для Каждого ПодчиненныйЭлемент Из КоллекцияЭлементов Цикл
			Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				// Не содержит ИПН; Коллекция вложенных элементов не содержит ИПН.
			ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
				// Не содержит ИПН; Коллекция вложенных элементов может содержать ИПН.
				МассивГрупп.Добавить(ПодчиненныйЭлемент.ЗначенияВложенныхПараметров);
			ИначеЕсли ПодчиненныйЭлемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
				// Найден нужный элемент.
				Возврат ПодчиненныйЭлемент;
			Иначе
				// Содержит ИПН; Коллекция вложенных элементов может содержать ИПН.
				Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					МассивГрупп.Добавить(ПодчиненныйЭлемент.Элементы);
				ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					МассивГрупп.Добавить(ПодчиненныйЭлемент.ЗначенияВложенныхПараметров);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Для работы с механизмом периодичности.

// Возвращает дату начала периода.
Функция НачалоПериодаОтчета(ВидПериода, ДатаПериода) Экспорт
	НачалоПериода = ДатаПериода;
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда
		// Действие не требуется
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		НачалоПериода = НачалоГода(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие") Тогда
		Если Месяц(ДатаПериода) >= 7 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), 7, 1);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода), 1, 1);
		КонецЕсли;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		НачалоПериода = НачалоКвартала(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц") Тогда
		НачалоПериода = НачалоМесяца(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада") Тогда
		Если День(ДатаПериода) <= 10 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 1);
		ИначеЕсли День(ДатаПериода) <= 20 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 11);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 21);
		КонецЕсли;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя") Тогда
		НачалоПериода = НачалоНедели(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День") Тогда
		НачалоПериода = НачалоДня(ДатаПериода);
	КонецЕсли;
	
	Возврат НачалоПериода;
	
КонецФункции

// Возвращает дату окончания периода.
Функция КонецПериодаОтчета(ВидПериода, ДатаПериода) Экспорт
	КонецПериода = ДатаПериода;
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда
		// Действие не требуется
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		КонецПериода = КонецГода(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие") Тогда
		Если Месяц(ДатаПериода) >= 7 Тогда
			КонецПериода = КонецГода(ДатаПериода);
		Иначе
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), 6, 30));
		КонецЕсли;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		КонецПериода = КонецКвартала(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц") Тогда
		КонецПериода = КонецМесяца(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада") Тогда
		Если День(ДатаПериода) <= 10 Тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 10));
		ИначеЕсли День(ДатаПериода) <= 20 Тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 20));
		Иначе
			КонецПериода = КонецМесяца(ДатаПериода);
		КонецЕсли;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя") Тогда
		КонецПериода = КонецНедели(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День") Тогда
		КонецПериода = КонецДня(ДатаПериода);
	КонецЕсли;
	
	Возврат КонецПериода;
	
КонецФункции

// Возвращает вид периода. В отличии от функции ПолучитьВидПериода на вход принимает СтандартныйПериод.
Функция ПолучитьВидСтандартногоПериода(СтандартныйПериод, ДоступныеПериоды = Неопределено) Экспорт
	
	Если СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		
		Возврат ПолучитьВидПериода(СтандартныйПериод.ДатаНачала, СтандартныйПериод.ДатаОкончания, ДоступныеПериоды);
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтотГод
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйГод
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийГод
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоГода
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтогоГода
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйГодДоТакойЖеДаты
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийГодДоТакойЖеДаты Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год");
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтоПолугодие
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлоеПолугодие
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующееПолугодие
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоПолугодия
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтогоПолугодия
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлоеПолугодиеДоТакойЖеДаты
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующееПолугодиеДоТакойЖеДаты Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие");
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтотКвартал
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйКвартал
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийКвартал
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоКвартала
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтогоКвартала
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйКварталДоТакойЖеДаты
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийКварталДоТакойЖеДаты Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал");
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтотМесяц
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийМесяц
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Месяц
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоМесяца
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтогоМесяца
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяцДоТакойЖеДаты
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийМесяцДоТакойЖеДаты Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтаДекада
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлаяДекада
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующаяДекада
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтойДекады
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтойДекады
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлаяДекадаДоТакогоЖеНомераДня
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующаяДекадаДоТакогоЖеНомераДня Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада");
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтаНеделя
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлаяНеделя
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующаяНеделя
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтойНедели
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтойНедели
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Последние7Дней
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Следующие7Дней
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлаяНеделяДоТакогоЖеДняНедели
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующаяНеделяДоТакогоЖеДняНедели Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя");
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Сегодня
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Вчера
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Завтра Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День");
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Унификация формы отчета и формы настроек отчета.

Функция ПредставлениеЭлементаУсловногоОформления(ЭлементКД) Экспорт
	ПредставлениеОформления = ПредставлениеОформления(ЭлементКД.Оформление);
	Если ПредставлениеОформления = "" Тогда
		ПредставлениеОформления = НСтр("ru = 'Не оформлять'");
	КонецЕсли;
	
	ПредставлениеПолей = Строка(ЭлементКД.Поля);
	Если ПредставлениеПолей = "" Тогда
		ПредставлениеПолей = НСтр("ru = 'Все поля'");
	Иначе
		ПредставлениеПолей = НСтр("ru = 'Поля:'") + " " + ПредставлениеПолей;
	КонецЕсли;
	
	ПредставлениеОтбора = ПредставлениеОтбора(ЭлементКД.Отбор);
	Если ПредставлениеОтбора = "" Тогда
		Разделитель = "";
	Иначе
		Разделитель = "; ";
		ПредставлениеОтбора = НСтр("ru = 'Условие:'") + " " + ПредставлениеОтбора;
	КонецЕсли;
	
	Возврат ПредставлениеОформления + " (" + ПредставлениеПолей + Разделитель + ПредставлениеОтбора + ")";
КонецФункции

Функция ПредставлениеОформления(ОформлениеКД)
	Представление = "";
	Для Каждого ЭлементКД Из ОформлениеКД.Элементы Цикл
		Если ЭлементКД.Использование Тогда
			ДоступныйПараметрКД = ОформлениеКД.ДоступныеПараметры.НайтиПараметр(ЭлементКД.Параметр);
			Если ДоступныйПараметрКД <> Неопределено И ЗначениеЗаполнено(ДоступныйПараметрКД.Заголовок) Тогда
				ПредставлениеКлюча = ДоступныйПараметрКД.Заголовок;
			Иначе
				ПредставлениеКлюча = Строка(ЭлементКД.Параметр);
			КонецЕсли;
			
			Если ТипЗнч(ЭлементКД.Значение) = Тип("Цвет") Тогда
				ПредставлениеЗначения = ПредставлениеЦвета(ЭлементКД.Значение);
			Иначе
				ПредставлениеЗначения = Строка(ЭлементКД.Значение);
			КонецЕсли;
			
			Представление = Представление
				+ ?(Представление = "", "", ", ")
				+ ПредставлениеКлюча
				+ ?(ПредставлениеЗначения = "", "", ": " + ПредставлениеЗначения);
		КонецЕсли;
	КонецЦикла;
	Возврат Представление;
КонецФункции

Функция ПредставлениеЦвета(Цвет)
	Если Цвет.Вид = ВидЦвета.ЭлементСтиля Тогда
		Представление = Строка(Цвет);
		Представление = Сред(Представление, СтрНайти(Представление, ":")+1);
		Представление = ИмяВПредставление(Представление);
	ИначеЕсли Цвет.Вид = ВидЦвета.WebЦвет
		Или Цвет.Вид = ВидЦвета.WindowsЦвет Тогда
		Представление = СтрЛевДоСимвола(Строка(Цвет), " (");
	ИначеЕсли Цвет.Вид = ВидЦвета.Абсолютный Тогда
		Представление = Строка(Цвет);
		Если Представление = "0, 0, 0" Тогда
			Представление = НСтр("ru = 'Черный'");
		ИначеЕсли Представление = "255, 255, 255" Тогда
			Представление = НСтр("ru = 'Белый'");
		КонецЕсли;
	ИначеЕсли Цвет.Вид = ВидЦвета.АвтоЦвет Тогда
		Представление = НСтр("ru = 'Авто'");
	Иначе
		Представление = "";
	КонецЕсли;
	Возврат Представление;
КонецФункции

Функция ИмяВПредставление(Знач ИсходнаяСтрока) Экспорт
	Результат = "";
	ЭтоПервыйСимвол = Истина;
	Для НомерСимвола = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		КодСимвола = КодСимвола(ИсходнаяСтрока, НомерСимвола);
		Символ = Символ(КодСимвола);
		Если ЭтоПервыйСимвол Тогда
			Если Не ПустаяСтрока(Символ) Тогда
				Результат = Результат + Символ;
				ЭтоПервыйСимвол = Ложь;
			КонецЕсли;
		Иначе
			Если (КодСимвола >= 65 И КодСимвола <= 90)
				Или (КодСимвола >= 1040 И КодСимвола <= 1071) Тогда
				Символ = " " + НРег(Символ);
			ИначеЕсли Символ = "_" Тогда
				Символ = " ";
			КонецЕсли;
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПредставлениеОтбора(УзелКД, НаборСтрокКД = Неопределено)
	Если НаборСтрокКД = Неопределено Тогда
		НаборСтрокКД = УзелКД.Элементы;
	КонецЕсли;
	
	Представление = "";
	
	Для Каждого ЭлементКД Из НаборСтрокКД Цикл
		
		Если ТипЗнч(ЭлементКД) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ПредставлениеГруппы = Строка(ЭлементКД.ТипГруппы);
			ПредставлениеВложенных = ПредставлениеОтбора(УзелКД, ЭлементКД.Элементы);
			Если ПредставлениеВложенных = "" Тогда
				Продолжить;
			КонецЕсли;
			ПредставлениеЭлемента = ПредставлениеГруппы + "(" + ПредставлениеВложенных + ")";
			
		ИначеЕсли ТипЗнч(ЭлементКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			ДоступноеПолеОтбораКД = УзелКД.ДоступныеПоляОтбора.НайтиПоле(ЭлементКД.ЛевоеЗначение);
			Если ДоступноеПолеОтбораКД = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДоступноеПолеОтбораКД.Заголовок) Тогда
				ПредставлениеПоля = ДоступноеПолеОтбораКД.Заголовок;
			Иначе
				ПредставлениеПоля = Строка(ЭлементКД.ЛевоеЗначение);
			КонецЕсли;
			
			ПредставлениеЗначения = Строка(ЭлементКД.ПравоеЗначение);
			
			Если ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ПредставлениеУсловия = "=";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
				ПредставлениеУсловия = "<>";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
				ПредставлениеУсловия = ">";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
				ПредставлениеУсловия = ">=";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
				ПредставлениеУсловия = "<";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
				ПредставлениеУсловия = "<=";
			
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
				ПредставлениеУсловия = НСтр("ru = 'В группе'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
				ПредставлениеУсловия = НСтр("ru = 'Не в группе'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				ПредставлениеУсловия = НСтр("ru = 'В списке'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
				ПредставлениеУсловия = НСтр("ru = 'Не в списке'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
				ПредставлениеУсловия = НСтр("ru = 'В списке включая подчиненные'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
				ПредставлениеУсловия = НСтр("ru = 'Не в списке включая подчиненные'");
			
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
				ПредставлениеУсловия = НСтр("ru = 'Содержит'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
				ПредставлениеУсловия = НСтр("ru = 'Не содержит'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Подобно Тогда
				ПредставлениеУсловия = НСтр("ru = 'Соответствует шаблону'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеПодобно Тогда
				ПредставлениеУсловия = НСтр("ru = 'Не соответствует шаблону'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
				ПредставлениеУсловия = НСтр("ru = 'Начинается с'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
				ПредставлениеУсловия = НСтр("ru = 'Не начинается с'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
				ПредставлениеУсловия = НСтр("ru = 'Заполнено'");
				ПредставлениеЗначения = "";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
				ПредставлениеУсловия = НСтр("ru = 'Не заполнено'");
				ПредставлениеЗначения = "";
			КонецЕсли;
			
			ПредставлениеЭлемента = СокрЛП(ПредставлениеПоля + " " + ПредставлениеУсловия + " " + ПредставлениеЗначения);
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		Представление = Представление + ?(Представление = "", "", ", ") + ПредставлениеЭлемента;
		
	КонецЦикла;
	
	Возврат Представление;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

Функция ТипНастройкиСтрокой(Тип) Экспорт
	Если Тип = Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат "Настройки";
	ИначеЕсли Тип = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат "НастройкиВложенногоОбъекта";
	
	ИначеЕсли Тип = Тип("ОтборКомпоновкиДанных") Тогда
		Возврат "Отбор";
	ИначеЕсли Тип = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Возврат "ЭлементОтбора";
	ИначеЕсли Тип = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		Возврат "ГруппаЭлементовОтбора";
	
	ИначеЕсли Тип = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Возврат "ЗначениеПараметраНастроек";
	
	ИначеЕсли Тип = Тип("ГруппировкаКомпоновкиДанных") Тогда
		Возврат "Группировка";
	ИначеЕсли Тип = Тип("ПоляГруппировкиКомпоновкиДанных") Тогда
		Возврат "ПоляГруппировки";
	ИначеЕсли Тип = Тип("КоллекцияПолейГруппировкиКомпоновкиДанных") Тогда
		Возврат "КоллекцияПолейГруппировки";
	ИначеЕсли Тип = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
		Возврат "ПолеГруппировки";
	ИначеЕсли Тип = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
		Возврат "АвтоПолеГруппировки";
	
	ИначеЕсли Тип = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
		Возврат "ВыбранныеПоля";
	ИначеЕсли Тип = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
		Возврат "ВыбранноеПоле";
	ИначеЕсли Тип = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
		Возврат "ГруппаВыбранныхПолей";
	ИначеЕсли Тип = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
		Возврат "АвтоВыбранноеПоле";
	
	ИначеЕсли Тип = Тип("ПорядокКомпоновкиДанных") Тогда
		Возврат "Порядок";
	ИначеЕсли Тип = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
		Возврат "ЭлементПорядка";
	ИначеЕсли Тип = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
		Возврат "АвтоЭлементПорядка";
	
	ИначеЕсли Тип = Тип("УсловноеОформлениеКомпоновкиДанных") Тогда
		Возврат "УсловноеОформление";
	ИначеЕсли Тип = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
		Возврат "ЭлементУсловногоОформления";
	
	ИначеЕсли Тип = Тип("СтруктураНастроекКомпоновкиДанных") Тогда
		Возврат "СтруктураНастроек";
	ИначеЕсли Тип = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
		Возврат "КоллекцияЭлементовСтруктурыНастроек";
	
	ИначеЕсли Тип = Тип("ТаблицаКомпоновкиДанных") Тогда
		Возврат "Таблица";
	ИначеЕсли Тип = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		Возврат "ГруппировкаТаблицы";
	ИначеЕсли Тип = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
		Возврат "КоллекцияЭлементовСтруктурыТаблицы";
	
	ИначеЕсли Тип = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Возврат "Диаграмма";
	ИначеЕсли Тип = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		Возврат "ГруппировкаДиаграммы";
	ИначеЕсли Тип = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		Возврат "КоллекцияЭлементовСтруктурыДиаграммы";
	
	ИначеЕсли Тип = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
		Возврат "ЗначенияПараметровДанных";
	
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция СкопироватьРекурсивно(Знач Узел, Знач ЧтоКопировать, Знач КудаВставить, Знач Индекс, Соответствие) Экспорт
	ТипЭлемента = ТипЗнч(ЧтоКопировать);
	ПараметрыКопирования = ПараметрыКопирования(ТипЭлемента, КудаВставить);
	
	Если ПараметрыКопирования.НужноУказыватьТипЭлемента Тогда
		Если Индекс = Неопределено Тогда
			НоваяСтрока = КудаВставить.Добавить(ТипЭлемента);
		Иначе
			НоваяСтрока = КудаВставить.Вставить(Индекс, ТипЭлемента);
		КонецЕсли;
	Иначе
		Если Индекс = Неопределено Тогда
			НоваяСтрока = КудаВставить.Добавить();
		Иначе
			НоваяСтрока = КудаВставить.Вставить(Индекс);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСвойстваРекурсивно(Узел, НоваяСтрока, ЧтоКопировать, Соответствие, ПараметрыКопирования);
	
	Возврат НоваяСтрока;
КонецФункции

Функция ПараметрыКопирования(ТипЭлемента, Коллекция)
	Результат = Новый Структура;
	Результат.Вставить("НужноУказыватьТипЭлемента", Ложь);
	Результат.Вставить("КопируетсяДеревоФормы", Ложь);
	Результат.Вставить("ИсключаяСвойства", Неопределено);
	Результат.Вставить("ЕстьНастройки", Ложь);
	Результат.Вставить("ЕстьЭлементы", Ложь);
	Результат.Вставить("ЕстьВыбор", Ложь);
	Результат.Вставить("ЕстьОтбор", Ложь);
	Результат.Вставить("ЕстьПараметрыВывода", Ложь);
	Результат.Вставить("ЕстьПараметрыДанных", Ложь);
	Результат.Вставить("ЕстьПользовательскиеПоля", Ложь);
	Результат.Вставить("ЕстьПоляГруппировки", Ложь);
	Результат.Вставить("ЕстьПорядок", Ложь);
	Результат.Вставить("ЕстьСтруктура", Ложь);
	Результат.Вставить("ЕстьУсловноеОформление", Ложь);
	Результат.Вставить("ЕстьКолонкиИСтроки", Ложь);
	Результат.Вставить("ЕстьСерииИТочки", Ложь);
	Результат.Вставить("ЕстьЗначенияВложенныхПараметров", Ложь);
	Результат.Вставить("ЕстьПоляИОформление", Ложь);
	
	Если ТипЭлемента = Тип("ДанныеФормыЭлементДерева") Тогда
		
		Результат.КопируетсяДеревоФормы = Истина;
		
	ИначеЕсли ТипЭлемента = Тип("ГруппаВыбранныхПолейКомпоновкиДанных")
		Или ТипЭлемента = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		
		Результат.НужноУказыватьТипЭлемента = Истина;
		Результат.ИсключаяСвойства = "Родитель";
		Результат.ЕстьЭлементы = Истина;
		
	ИначеЕсли ТипЭлемента = Тип("ВыбранноеПолеКомпоновкиДанных")
		Или ТипЭлемента = Тип("АвтоВыбранноеПолеКомпоновкиДанных")
		Или ТипЭлемента = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		
		Результат.ИсключаяСвойства = "Родитель";
		Результат.НужноУказыватьТипЭлемента = Истина;
		
	ИначеЕсли ТипЭлемента = Тип("ЗначениеПараметраКомпоновкиДанных")
		Или ТипЭлемента = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		
		Результат.ИсключаяСвойства = "Родитель";
		
	ИначеЕсли ТипЭлемента = Тип("ПолеГруппировкиКомпоновкиДанных")
		Или ТипЭлемента = Тип("АвтоПолеГруппировкиКомпоновкиДанных")
		Или ТипЭлемента = Тип("ЭлементПорядкаКомпоновкиДанных")
		Или ТипЭлемента = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
		
		Результат.НужноУказыватьТипЭлемента = Истина;
		
	ИначеЕсли ТипЭлемента = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
		
		Результат.ЕстьОтбор = Истина;
		Результат.ЕстьПоляИОформление = Истина;
		
	ИначеЕсли ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных")
		Или ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		Или ТипЭлемента = Тип("ГруппировкаДиаграммыКомпоновкиДанных")Тогда
		
		Результат.ИсключаяСвойства = "Родитель";
		ТипКоллекции = ТипЗнч(Коллекция);
		Если ТипКоллекции = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
			Результат.НужноУказыватьТипЭлемента = Истина;
			ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных"); // Подмена типа на поддерживаемый.
		КонецЕсли;
		
		Результат.ЕстьВыбор = Истина;
		Результат.ЕстьОтбор = Истина;
		Результат.ЕстьПараметрыВывода = Истина;
		Результат.ЕстьПоляГруппировки = Истина;
		Результат.ЕстьПорядок = Истина;
		Результат.ЕстьСтруктура = Истина;
		Результат.ЕстьУсловноеОформление = Истина;
		
	ИначеЕсли ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		Результат.ИсключаяСвойства = "Родитель";
		Результат.НужноУказыватьТипЭлемента = Истина;
		
		Результат.ЕстьВыбор = Истина;
		Результат.ЕстьКолонкиИСтроки = Истина;
		Результат.ЕстьПараметрыВывода = Истина;
		
	ИначеЕсли ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		Результат.ИсключаяСвойства = "Родитель";
		Результат.НужноУказыватьТипЭлемента = Истина;
		
		Результат.ЕстьВыбор = Истина;
		Результат.ЕстьСерииИТочки = Истина;
		Результат.ЕстьПараметрыВывода = Истина;
		
	ИначеЕсли ТипЭлемента = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		
		Результат.ИсключаяСвойства = "Родитель";
		Результат.НужноУказыватьТипЭлемента = Истина;
		Результат.ЕстьНастройки = Истина;
		
		Результат.ЕстьВыбор = Истина;
		Результат.ЕстьОтбор = Истина;
		Результат.ЕстьПараметрыВывода = Истина;
		Результат.ЕстьПараметрыДанных = Истина;
		Результат.ЕстьПользовательскиеПоля = Истина;
		Результат.ЕстьПорядок = Истина;
		Результат.ЕстьСтруктура = Истина;
		Результат.ЕстьУсловноеОформление = Истина;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Копирование элементов ""%1"" не поддерживается'"),
			ТипЭлемента);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьСвойстваРекурсивно(Узел, ЧтоЗаполнить, ЧемЗаполнить, Соответствие = Неопределено, ПараметрыКопирования = Неопределено) Экспорт
	Если Соответствие = Неопределено Тогда
		Соответствие = Новый Соответствие;
	КонецЕсли;
	Если ПараметрыКопирования = Неопределено Тогда
		ПараметрыКопирования = ПараметрыКопирования(ТипЗнч(ЧемЗаполнить), Неопределено);
	КонецЕсли;
	
	Если ПараметрыКопирования.ИсключаяСвойства <> "*" Тогда
		ЗаполнитьЗначенияСвойств(ЧтоЗаполнить, ЧемЗаполнить, , ПараметрыКопирования.ИсключаяСвойства);
	КонецЕсли;
	
	Если ПараметрыКопирования.КопируетсяДеревоФормы Тогда
		
		Соответствие.Вставить(ЧемЗаполнить, ЧтоЗаполнить);
		
		КоллекцияВложенных = ЧемЗаполнить.ПолучитьЭлементы();
		Если КоллекцияВложенных.Количество() > 0 Тогда
			НоваяКоллекцияВложенных = ЧтоЗаполнить.ПолучитьЭлементы();
			Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
				СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		СтарыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(ЧемЗаполнить);
		НовыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(ЧтоЗаполнить);
		Соответствие.Вставить(СтарыйИдентификатор, НовыйИдентификатор);
		
		Если ПараметрыКопирования.ЕстьНастройки Тогда
			ЧтоЗаполнить.УстановитьИдентификатор(ЧемЗаполнить.ИдентификаторОбъекта);
			ЧтоЗаполнить = ЧтоЗаполнить.Настройки;
			ЧемЗаполнить = ЧемЗаполнить.Настройки;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьЭлементы Тогда
			//   Элементы (КоллекцияВыбранныхПолейКомпоновкиДанных,
			//       КоллекцияЭлементовОтбораКомпоновкиДанных).
			КоллекцияВложенных = ЧемЗаполнить.Элементы;
			Если КоллекцияВложенных.Количество() > 0 Тогда
				НоваяКоллекцияВложенных = ЧтоЗаполнить.Элементы;
				Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
					СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьВыбор Тогда
			//   Выбор (ВыбранныеПоляКомпоновкиДанных)
			//   Выбор.Элементы (КоллекцияВыбранныхПолейКомпоновкиДанных).
			ЗаполнитьЗначенияСвойств(ЧтоЗаполнить.Выбор, ЧемЗаполнить.Выбор, , "ДоступныеПоляВыбора, Элементы");
			КоллекцияВложенных = ЧемЗаполнить.Выбор.Элементы;
			Если КоллекцияВложенных.Количество() > 0 Тогда
				НоваяКоллекцияВложенных = ЧтоЗаполнить.Выбор.Элементы;
				Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
					СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьОтбор Тогда
			//   Отбор (ОтборКомпоновкиДанных)
			//   Отбор.Элементы (КоллекцияЭлементовОтбораКомпоновкиДанных).
			ЗаполнитьЗначенияСвойств(ЧтоЗаполнить.Отбор, ЧемЗаполнить.Отбор, , "ДоступныеПоляОтбора, Элементы");
			КоллекцияВложенных = ЧемЗаполнить.Отбор.Элементы;
			Если КоллекцияВложенных.Количество() > 0 Тогда
				НоваяКоллекцияВложенных = ЧтоЗаполнить.Отбор.Элементы;
				Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
					СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Новый Соответствие);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьПараметрыВывода Тогда
			//   ПараметрыВывода (ЗначенияПараметровВыводаКомпоновкиДанных,
			//       ЗначенияПараметровВыводаГруппировкиКомпоновкиДанных,
			//       ЗначенияПараметровВыводаГруппировкиТаблицыКомпоновкиДанных,
			//       ЗначенияПараметровВыводаГруппировкиДиаграммыКомпоновкиДанных,
			//       ЗначенияПараметровВыводаТаблицыКомпоновкиДанных,
			//       ЗначенияПараметровВыводаДиаграммыКомпоновкиДанных)
			//   ПараметрыВывода.Элементы (КоллекцияЗначенийПараметровКомпоновкиДанных).
			КоллекцияВложенных = ЧемЗаполнить.ПараметрыВывода.Элементы;
			Если КоллекцияВложенных.Количество() > 0 Тогда
				УзелВложенных = ЧтоЗаполнить.ПараметрыВывода;
				Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
					ЗначениеПараметраКД = УзелВложенных.НайтиЗначениеПараметра(ПодчиненнаяСтрока.Параметр);
					Если ЗначениеПараметраКД <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(ЗначениеПараметраКД, ПодчиненнаяСтрока);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьПараметрыДанных Тогда
			//   ПараметрыДанных (ЗначенияПараметровДанныхКомпоновкиДанных)
			//   ПараметрыДанных.Элементы (КоллекцияЗначенийПараметровКомпоновкиДанных).
			КоллекцияВложенных = ЧемЗаполнить.ПараметрыДанных.Элементы;
			Если КоллекцияВложенных.Количество() > 0 Тогда
				УзелВложенных = ЧтоЗаполнить.ПараметрыДанных;
				Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
					ЗначениеПараметраКД = УзелВложенных.НайтиЗначениеПараметра(ПодчиненнаяСтрока.Параметр);
					Если ЗначениеПараметраКД <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(ЗначениеПараметраКД, ПодчиненнаяСтрока);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьПользовательскиеПоля Тогда
			//   ПользовательскиеПоля (ПользовательскиеПоляКомпоновкиДанных)
			//   ПользовательскиеПоля.Элементы (КоллекцияПользовательскихПолейКомпоновкиДанных).
			КоллекцияВложенных = ЧемЗаполнить.ПользовательскиеПоля.Элементы;
			Если КоллекцияВложенных.Количество() > 0 Тогда
				НоваяКоллекцияВложенных = ЧтоЗаполнить.ПользовательскиеПоля.Элементы;
				Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
					СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьПоляГруппировки Тогда
			//   ПоляГруппировки (ПоляГруппировкиКомпоновкиДанных)
			//   ПоляГруппировки.Элементы (КоллекцияПолейГруппировкиКомпоновкиДанных).
			КоллекцияВложенных = ЧемЗаполнить.ПоляГруппировки.Элементы;
			Если КоллекцияВложенных.Количество() > 0 Тогда
				НоваяКоллекцияВложенных = ЧтоЗаполнить.ПоляГруппировки.Элементы;
				Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
					СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Новый Соответствие);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьПорядок Тогда
			//   Порядок (ПорядокКомпоновкиДанных)
			//   Порядок.Элементы (КоллекцияЭлементовПорядкаКомпоновкиДанных).
			ЗаполнитьЗначенияСвойств(ЧтоЗаполнить.Порядок, ЧемЗаполнить.Порядок, , "ДоступныеПоляПорядка, Элементы");
			КоллекцияВложенных = ЧемЗаполнить.Порядок.Элементы;
			Если КоллекцияВложенных.Количество() > 0 Тогда
				НоваяКоллекцияВложенных = ЧтоЗаполнить.Порядок.Элементы;
				Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
					СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьСтруктура Тогда
			//   Структура (КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных,
			//       КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных,
			//       КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных).
			ЗаполнитьЗначенияСвойств(ЧтоЗаполнить.Структура, ЧемЗаполнить.Структура);
			КоллекцияВложенных = ЧемЗаполнить.Структура;
			Если КоллекцияВложенных.Количество() > 0 Тогда
				НоваяКоллекцияВложенных = ЧтоЗаполнить.Структура;
				Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
					СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьУсловноеОформление Тогда
			//   УсловноеОформление (УсловноеОформлениеКомпоновкиДанных)
			//   УсловноеОформление.Элементы (КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных).
			ЗаполнитьЗначенияСвойств(ЧтоЗаполнить.УсловноеОформление, ЧемЗаполнить.УсловноеОформление, , "ДоступныеПоляОтбора, ДоступныеПоляПолей, Элементы");
			КоллекцияВложенных = ЧемЗаполнить.УсловноеОформление.Элементы;
			Если КоллекцияВложенных.Количество() > 0 Тогда
				НоваяКоллекцияВложенных = ЧтоЗаполнить.УсловноеОформление.Элементы;
				Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
					СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьКолонкиИСтроки Тогда
			//   Колонки (КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных).
			КоллекцияВложенных = ЧемЗаполнить.Колонки;
			НоваяКоллекцияВложенных = ЧтоЗаполнить.Колонки;
			СтарыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(КоллекцияВложенных);
			НовыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(НоваяКоллекцияВложенных);
			Соответствие.Вставить(СтарыйИдентификатор, НовыйИдентификатор);
			Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
				СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
			КонецЦикла;
			//   Строки (КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных).
			КоллекцияВложенных = ЧемЗаполнить.Строки;
			НоваяКоллекцияВложенных = ЧтоЗаполнить.Строки;
			СтарыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(КоллекцияВложенных);
			НовыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(НоваяКоллекцияВложенных);
			Соответствие.Вставить(СтарыйИдентификатор, НовыйИдентификатор);
			Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
				СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьСерииИТочки Тогда
			//   Серии (КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных).
			КоллекцияВложенных = ЧемЗаполнить.Серии;
			НоваяКоллекцияВложенных = ЧтоЗаполнить.Серии;
			СтарыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(КоллекцияВложенных);
			НовыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(НоваяКоллекцияВложенных);
			Соответствие.Вставить(СтарыйИдентификатор, НовыйИдентификатор);
			Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
				СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
			КонецЦикла;
			//   Точки (КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных).
			КоллекцияВложенных = ЧемЗаполнить.Точки;
			НоваяКоллекцияВложенных = ЧтоЗаполнить.Точки;
			СтарыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(КоллекцияВложенных);
			НовыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(НоваяКоллекцияВложенных);
			Соответствие.Вставить(СтарыйИдентификатор, НовыйИдентификатор);
			Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
				СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьЗначенияВложенныхПараметров Тогда
			//   ЗначенияВложенныхПараметров (КоллекцияЗначенийПараметровКомпоновкиДанных).
			Для Каждого ПодчиненнаяСтрока Из ЧемЗаполнить.ЗначенияВложенныхПараметров Цикл
				СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, ЧтоЗаполнить.ЗначенияВложенныхПараметров, Неопределено, Соответствие);
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьПоляИОформление Тогда
			Для Каждого ОформляемоеПоле Из ЧемЗаполнить.Поля.Элементы Цикл
				ЗаполнитьЗначенияСвойств(ЧтоЗаполнить.Поля.Элементы.Добавить(), ОформляемоеПоле);
			КонецЦикла;
			Для Каждого Источник Из ЧемЗаполнить.Оформление.Элементы Цикл
				Приемник = ЧтоЗаполнить.Оформление.НайтиЗначениеПараметра(Источник.Параметр);
				Если Приемник <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Родитель");
					Если Источник.ЗначенияВложенныхПараметров = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого ВложенныйИсточник Из Источник.ЗначенияВложенныхПараметров Цикл
						ВложенныйПриемник = ЧтоЗаполнить.Оформление.НайтиЗначениеПараметра(Источник.Параметр);
						Если ВложенныйПриемник <> Неопределено Тогда
							ЗаполнитьЗначенияСвойств(ВложенныйПриемник, ВложенныйИсточник, , "Родитель");
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЧтоЗаполнить;
КонецФункции

Функция ПриДобавленииВКоллекциюНужноУказыватьТипЭлемента(ТипКоллекции) Экспорт
	Если ТипКоллекции = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
		Или ТипКоллекции = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных")
		Или ТипКоллекции = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

Функция ДобавитьУникальноеЗначениеВСписок(СписокЗначений, Значение, Представление, Использование) Экспорт
	Если Не ЗначениеЗаполнено(Значение) И Не ЗначениеЗаполнено(Представление) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЭлементСписка = СписокЗначений.НайтиПоЗначению(Значение);
	Если ЭлементСписка = Неопределено Тогда
		ЭлементСписка = СписокЗначений.Добавить();
		ЭлементСписка.Значение = Значение;
	КонецЕсли;
	Если ЗначениеЗаполнено(Представление) Тогда
		ЭлементСписка.Представление = Представление;
	ИначеЕсли Не ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
		ЭлементСписка.Представление = Строка(Значение);
	КонецЕсли;
	Если Использование И Не ЭлементСписка.Пометка Тогда
		ЭлементСписка.Пометка = Истина;
	КонецЕсли;
	Возврат ЭлементСписка;
КонецФункции

Функция ЗначенияСписком(Значения) Экспорт
	Если ТипЗнч(Значения) = Тип("СписокЗначений") Тогда
		Возврат Значения;
	Иначе
		СписокЗначений = Новый СписокЗначений;
		Если ТипЗнч(Значения) = Тип("Массив") Тогда
			СписокЗначений.ЗагрузитьЗначения(Значения);
		ИначеЕсли Значения <> Неопределено Тогда
			СписокЗначений.Добавить(Значения);
		КонецЕсли;
		Возврат СписокЗначений;
	КонецЕсли;
КонецФункции

Функция ОписанияТиповСовпадают(ОписаниеТипов1, ОписаниеТипов2)
	Если ОписаниеТипов1 = Неопределено Или ОписаниеТипов2 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ОписаниеТипов1 = ОписаниеТипов2 Или Строка(ОписаниеТипов1) = Строка(ОписаниеТипов2) Тогда
		Возврат Истина;
	КонецЕсли;
	
	#Если Сервер Тогда
		Если ОбщегоНазначения.ЗначениеВСтрокуXML(ОписаниеТипов1) = ОбщегоНазначения.ЗначениеВСтрокуXML(ОписаниеТипов2) Тогда
			Возврат Истина;
		КонецЕсли;
	#КонецЕсли
	
	Возврат Ложь;
КонецФункции

Функция ДополнитьСписок(СписокПриемник, СписокИсточник, КонтролироватьТип = Неопределено, ДобавлятьНовые = Истина) Экспорт
	Если СписокПриемник = Неопределено Или СписокИсточник = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаменятьСуществующие = Истина;
	
	Результат = Новый Структура;
	Результат.Вставить("Всего", 0);
	Результат.Вставить("Добавлено", 0);
	Результат.Вставить("Обновлено", 0);
	Результат.Вставить("Пропущено", 0);
	
	Если КонтролироватьТип = Неопределено Тогда
		КонтролироватьТип = Не ОписанияТиповСовпадают(СписокПриемник.ТипЗначения, СписокИсточник.ТипЗначения);
	КонецЕсли;
	Если КонтролироватьТип Тогда
		ОписаниеТиповПриемника = СписокПриемник.ТипЗначения;
	КонецЕсли;
	Для Каждого ЭлементИсточник Из СписокИсточник Цикл
		Результат.Всего = Результат.Всего + 1;
		Значение = ЭлементИсточник.Значение;
		Если КонтролироватьТип И Не ОписаниеТиповПриемника.СодержитТип(ТипЗнч(Значение)) Тогда
			Результат.Пропущено = Результат.Пропущено + 1;
			Продолжить;
		КонецЕсли;
		ЭлементПриемник = СписокПриемник.НайтиПоЗначению(Значение);
		Если ЭлементПриемник = Неопределено Тогда
			Если ДобавлятьНовые Тогда
				Результат.Добавлено = Результат.Добавлено + 1;
				ЗаполнитьЗначенияСвойств(СписокПриемник.Добавить(), ЭлементИсточник);
			Иначе
				Результат.Пропущено = Результат.Пропущено + 1;
			КонецЕсли;
		Иначе
			Если ЗаменятьСуществующие Тогда
				Результат.Обновлено = Результат.Обновлено + 1;
				ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
			Иначе
				Результат.Пропущено = Результат.Пропущено + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ЗначениеВМассив(Значение) Экспорт
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Возврат Значение;
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(Значение);
		Возврат Массив;
	КонецЕсли;
КонецФункции

Функция АнализТипов(ИсходноеОписаниеТипов, ПривестиКФорме) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("СодержитТипТип",        Ложь);
	Результат.Вставить("СодержитТипДата",       Ложь);
	Результат.Вставить("СодержитТипБулево",     Ложь);
	Результат.Вставить("СодержитТипСтрока",     Ложь);
	Результат.Вставить("СодержитТипЧисло",      Ложь);
	Результат.Вставить("СодержитТипПериод",     Ложь);
	Результат.Вставить("СодержитТипУИД",        Ложь);
	Результат.Вставить("СодержитТипХранилище",  Ложь);
	Результат.Вставить("СодержитОбъектныеТипы", Ложь);
	
	Результат.Вставить("ОграниченнойДлины",     Истина);
	
	Результат.Вставить("КоличествоТипов",            0);
	Результат.Вставить("КоличествоПримитивныхТипов", 0);
	
	Результат.Вставить("ОбъектныеТипы", Новый Массив);
	
	Если ПривестиКФорме Тогда
		ДобавляемыеТипы = Новый Массив;
		ВычитаемыеТипы = Новый Массив;
	КонецЕсли;
	
	МассивТипов = ИсходноеОписаниеТипов.Типы();
	Для Каждого Тип Из МассивТипов Цикл
		Если Тип = Тип("ПолеКомпоновкиДанных") Тогда
			Если ПривестиКФорме Тогда
				ВычитаемыеТипы.Добавить(Тип);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		#Если Сервер Тогда
			Если Тип = Тип("СправочникСсылка.ВнешниеПользователи")
				И Не ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей") Тогда
				Если ПривестиКФорме Тогда
					ВычитаемыеТипы.Добавить(Тип);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		#КонецЕсли
		
		Результат.КоличествоТипов = Результат.КоличествоТипов + 1;
		
		Если Тип = Тип("Тип") Тогда
			Результат.СодержитТипТип = Истина;
		ИначеЕсли Тип = Тип("Дата") Тогда
			Результат.СодержитТипДата = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
		ИначеЕсли Тип = Тип("Булево") Тогда
			Результат.СодержитТипБулево = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
		ИначеЕсли Тип = Тип("Число") Тогда
			Результат.СодержитТипЧисло = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
		ИначеЕсли Тип = Тип("СтандартныйПериод") Тогда
			Результат.СодержитТипПериод = Истина;
		ИначеЕсли Тип = Тип("Строка") Тогда
			Результат.СодержитТипСтрока = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
			Если ИсходноеОписаниеТипов.КвалификаторыСтроки.Длина = 0
				И ИсходноеОписаниеТипов.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Переменная Тогда
				Результат.ОграниченнойДлины = Ложь;
			КонецЕсли;
		ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда
			Результат.СодержитТипУИД = Истина;
		ИначеЕсли Тип = Тип("ХранилищеЗначения") Тогда
			Результат.СодержитТипХранилище = Истина;
		Иначе
			Результат.СодержитОбъектныеТипы = Истина;
			Результат.ОбъектныеТипы.Добавить(Тип);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПривестиКФорме Тогда
		Если ДобавляемыеТипы.Количество() = 0 И ВычитаемыеТипы.Количество() = 0 Тогда
			ОписаниеТиповДляФормы = ИсходноеОписаниеТипов;
		Иначе
			ОписаниеТиповДляФормы = Новый ОписаниеТипов(ИсходноеОписаниеТипов, ДобавляемыеТипы, ВычитаемыеТипы);
		КонецЕсли;
		
		Результат.Вставить("ОписаниеТиповИсходное", ИсходноеОписаниеТипов);
		Результат.Вставить("ОписаниеТиповДляФормы", ОписаниеТиповДляФормы);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПривестиИдентификаторКИмени(Идентификатор) Экспорт
	Возврат СтрЗаменить(СтрЗаменить(Строка(Идентификатор), "-", ""), ".", "_");
КонецФункции

Функция СтрЛевДоСимвола(Строка, Разделитель, Остаток = Неопределено)
	Позиция = СтрНайти(Строка, Разделитель);
	Если Позиция = 0 Тогда
		СтрокаДоТочки = Строка;
		Остаток = "";
	Иначе
		СтрокаДоТочки = Лев(Строка, Позиция - 1);
		Остаток = Сред(Строка, Позиция + 1);
	КонецЕсли;
	Возврат СтрокаДоТочки;
КонецФункции

Функция СписокВыбораВидовСравнения(ОписаниеТипов) Экспорт
	ИнформацияОТипах = АнализТипов(ОписаниеТипов, Ложь);
	
	Список = Новый СписокЗначений;
	
	Если ИнформацияОТипах.ОграниченнойДлины Тогда
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Равно);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеРавно);
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);
		
		Если ИнформацияОТипах.СодержитОбъектныеТипы Тогда
			
			Список.Добавить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии); // НСтр("ru = 'В списке включая подчиненные'")
			Список.Добавить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии); // НСтр("ru = 'Не в списке включая подчиненные'").
			
			Список.Добавить(ВидСравненияКомпоновкиДанных.ВИерархии); // НСтр("ru = 'В группе'")
			Список.Добавить(ВидСравненияКомпоновкиДанных.НеВИерархии); // НСтр("ru = 'Не в группе'")
			
		КонецЕсли;
		
		Если ИнформацияОТипах.КоличествоПримитивныхТипов > 0 Тогда
			
			Список.Добавить(ВидСравненияКомпоновкиДанных.Меньше);
			Список.Добавить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
			
			Список.Добавить(ВидСравненияКомпоновкиДанных.Больше);
			Список.Добавить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИнформацияОТипах.СодержитТипСтрока Тогда
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Содержит);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеСодержит);
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Подобно);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеПодобно);
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.НачинаетсяС);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеНачинаетсяС);
		
	КонецЕсли;
	
	Если ИнформацияОТипах.ОграниченнойДлины Тогда
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Заполнено);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	КонецЕсли;
	
	Возврат Список;
КонецФункции

Функция НайтиСтрокиТаблицы(ТаблицаРеквизит, ДанныеСтроки) Экспорт
	Если ТипЗнч(ТаблицаРеквизит) = Тип("ДанныеФормыКоллекция") Тогда // Таблица значений.
		Возврат ТаблицаРеквизит.НайтиСтроки(ДанныеСтроки);
	ИначеЕсли ТипЗнч(ТаблицаРеквизит) = Тип("ДанныеФормыДерево") Тогда // Дерево значений.
		Возврат НайтиРекурсивно(ТаблицаРеквизит.ПолучитьЭлементы(), ДанныеСтроки);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция НайтиРекурсивно(НаборСтрок, ДанныеСтроки, Найденные = Неопределено)
	Если Найденные = Неопределено Тогда
		Найденные = Новый Массив;
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из НаборСтрок Цикл
		ЗначенияСовпадают = Истина;
		Для Каждого КлючИЗначение Из ДанныеСтроки Цикл
			Если СтрокаТаблицы[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
				ЗначенияСовпадают = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначенияСовпадают Тогда
			Найденные.Добавить(СтрокаТаблицы);
		КонецЕсли;
		НайтиРекурсивно(СтрокаТаблицы.ПолучитьЭлементы(), ДанныеСтроки, Найденные);
	КонецЦикла;
	Возврат Найденные;
КонецФункции

Процедура ПривестиЗначениеКТипу(Значение, ОписаниеТипов) Экспорт
	Если Не ОписаниеТипов.СодержитТип(ТипЗнч(Значение)) Тогда
		Значение = ОписаниеТипов.ПривестиЗначение();
	КонецЕсли;
КонецПроцедуры

// Возвращает список полей группировок всех группировок компоновщика настроек.
//
// Параметры: 
//		КомпоновщикНастроек - компоновщик настроек.
//		БезПользовательскихПолей - признак не включения пользовательских настроек СКД.
//
Функция ПолучитьПоляГруппировок(КомпоновщикНастроек, БезПользовательскихПолей = Ложь) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	ДобавитьПоляГруппировки(Структура, СписокПолей, БезПользовательскихПолей);
	Возврат СписокПолей;
	
КонецФункции

// Добавляет вложенные поля группировки.
Процедура ДобавитьПоляГруппировки(Структура, СписокПолей, БезПользовательскихПолей)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Строки, СписокПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Колонки, СписокПолей, БезПользовательскихПолей);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Серии, СписокПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Точки, СписокПолей, БезПользовательскихПолей);
		Иначе
			Для каждого ТекущееПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				ДоступноеПоле = ЭлементСтруктуры.Выбор.ДоступныеПоляВыбора.НайтиПоле(ТекущееПолеГруппировки.Поле);
				Если ДоступноеПоле <> Неопределено 
				  И (ДоступноеПоле.Родитель = Неопределено ИЛИ Не БезПользовательскихПолей ИЛИ ДоступноеПоле.Родитель.Поле <> Новый ПолеКомпоновкиДанных("UserFields")) Тогда
					СписокПолей.Добавить(Строка(ДоступноеПоле.Поле), ДоступноеПоле.Заголовок);
				КонецЕсли;
			КонецЦикла;
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Структура, СписокПолей, БезПользовательскихПолей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает последний элемент структуры - группировку.
//
// Параметры:
//		ЭлементСтруктурыНастроек - элемент структуры компоновки данных.
//		Строки - признак для получения последний группировки строк (Серий) или колонок (точек).
//
Функция ПолучитьПоследнийЭлементСтруктуры(ЭлементСтруктурыНастроек, Строки = Истина) Экспорт
	
	Если ТипЗнч(ЭлементСтруктурыНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = ЭлементСтруктурыНастроек.Настройки;
	ИначеЕсли ТипЗнч(ЭлементСтруктурыНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = ЭлементСтруктурыНастроек;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Структура = Настройки.Структура;
	Если Структура.Количество() = 0 Тогда
		Возврат Настройки;
	КонецЕсли;
	
	Если Строки Тогда
		ИмяСтруктурыТаблицы = "Строки";
		ИмяСтруктурыДиаграммы = "Серии";
	Иначе
		ИмяСтруктурыТаблицы = "Колонки";
		ИмяСтруктурыДиаграммы = "Точки";
	КонецЕсли;
	
	Пока Истина Цикл
		ЭлементСтруктуры = Структура[0];
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыТаблицы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыДиаграммы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.Структура.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры.Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыТаблицы];
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных")	Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
		Иначе
			Возврат ЭлементСтруктуры;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Структура[0];
	
КонецФункции

#КонецОбласти
