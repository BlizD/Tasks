////////////////////////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация".
// 
////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики[
		"СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"
	].Добавить("УправлениеКонтактнойИнформациейСлужебный");
	
КонецПроцедуры

// Возвращает значение перечисления тип вида контактной информации.
//
//  Параметры:
//    ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - источник данных.
//
Функция ТипВидаКонтактнойИнформации(Знач ВидИнформации) Экспорт
	Результат = Неопределено;
	
	Тип = ТипЗнч(ВидИнформации);
	Если Тип = Тип("ПеречислениеСсылка.ТипыКонтактнойИнформации") Тогда
		Результат = ВидИнформации;
	ИначеЕсли Тип = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		Результат = ВидИнформации.Тип;
	ИначеЕсли ВидИнформации <> Неопределено Тогда
		Данные = Новый Структура("Тип");
		ЗаполнитьЗначенияСвойств(Данные, ВидИнформации);
		Результат = Данные.Тип;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Определить список справочников, доступных для загрузки с помощью подсистемы "Загрузка данных из файла".
//
// Параметры:
//  Обработчики - ТаблицаЗначений - список справочников, в которые возможна загрузка данных.
//      * ПолноеИмя          - Строка - полное имя справочника (как в метаданных).
//      * Представление      - Строка - представление справочника в списке выбора.
//      * ПрикладнаяЗагрузка - Булево - если Истина, значит справочник использует собственный алгоритм загрузки и
//                                      в модуле менеджера справочника определены функции.
//
Процедура ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт
	
	// Загрузка в классификатор стран мира запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.СтраныМира.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность редактирования реквизитов
// с помощью экспортной функции ПолучитьБлокируемыеРеквизитыОбъекта.
//
// Параметры:
//   Объекты - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                            подключенного к подсистеме "Запрет редактирования реквизитов объектов". 
//                            В качестве значения - пустую строку.
//
Процедура ПриОпределенииОбъектовСЗаблокированнымиРеквизитами(Объекты) Экспорт
	
	Объекты.Вставить(Метаданные.Справочники.ВидыКонтактнойИнформации.ПолноеИмя(), "");
	
КонецПроцедуры

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность 
// редактирования реквизитов при групповом изменении.
//
// Параметры:
//   Объекты - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                            подключенного к подсистеме "Групповое изменение объектов". 
//                            Дополнительно в значении могут быть перечислены имена экспортных функций:
//                            "РеквизитыНеРедактируемыеВГрупповойОбработке",
//                            "РеквизитыРедактируемыеВГрупповойОбработке".
//                            Каждое имя должно начинаться с новой строки.
//                            Если указана пустая строка, значит в модуле менеджера определены обе функции.
//
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Справочники.ВидыКонтактнойИнформации.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
КонецПроцедуры

// Возвращает сведения об адресах в виде структуру частей адреса и кодов КЛАДР
//
Функция СведенияОбАдресахВВидеСтруктуры(Адреса, ДополнительныеПараметры) Экспорт
	Результат = Новый Массив;
	Для каждого Адрес Из Адреса Цикл
		Результат.Добавить(СведенияОбАдресеВВидеСтруктуры(Адрес, ДополнительныеПараметры));
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Возвращает сведения об адресе в виде структуру частей адреса и кодов КЛАДР
//
Функция СведенияОбАдресеВВидеСтруктуры(Адрес, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ПолноеНаименованиеСокращений = ?(ДополнительныеПараметры.Свойство("ПолноеНаименованиеСокращений"), ДополнительныеПараметры.ПолноеНаименованиеСокращений, Ложь);
		НаименованиеВключаетСокращение = ?(ДополнительныеПараметры.Свойство("НаименованиеВключаетСокращение"), ДополнительныеПараметры.НаименованиеВключаетСокращение, Ложь);
		ЗаполнятьКоды = ?(ДополнительныеПараметры.Свойство("КодыКЛАДР"), ДополнительныеПараметры.КодыКЛАДР, Ложь);
	Иначе
		НаименованиеВключаетСокращение = Ложь;
		ПолноеНаименованиеСокращений = Ложь;
		ЗаполнятьКоды = Ложь;
	КонецЕсли;
	
	ЗаполнятьКоды = Истина;
	НаименованиеСтраны = "";
	
	Результат = Новый Структура;
	Формат9Запятых = Ложь;
	
	ЭлементыАдреса = Новый Соответствие;
	
	Если ТипЗнч(Адрес) = Тип("Строка") Тогда
		Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес) Тогда
			XDTOАдрес = КонтактнаяИнформацияИзXML(Адрес);
		Иначе
			Если СтрЧислоВхождений(Адрес, ",") = 9 Тогда
				Формат9Запятых = Истина;
				АдресРФ = Адрес;
			Иначе 
				XDTOАдрес = ДесериализацияАдресаОбщая(Адрес, "");
			КонецЕсли;
		КонецЕсли;
	Иначе
		XDTOАдрес = Адрес
	КонецЕсли;

	Если НЕ Формат9Запятых Тогда
		
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		Состав = XDTOАдрес.Состав;
		
		Если Состав = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		XDTOТип = Состав.Тип();
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		Если XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			
			Результат.Вставить("Страна", Состав.Страна);
			Если ПустаяСтрока(Состав.Страна) Тогда
				Страна = Справочники.СтраныМира.Россия;
				НаименованиеСтраны = Страна.Наименование;
				КодСтраны = СокрЛП(Страна.Код);
			Иначе
				Страна = Справочники.СтраныМира.НайтиПоНаименованию(Состав.Страна, Истина);
				НаименованиеСтраны = Страна.Наименование;
				КодСтраны = СокрЛП(Страна.Код);
			КонецЕсли;
			Результат.Вставить("КодСтраны", КодСтраны);
			
			АдресРФ = Состав.Состав;
			
		ИначеЕсли XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
			АдресРФ = Состав;
		Иначе
			Возврат Результат;
		КонецЕсли;
		
		Если ТипЗнч(АдресРФ) = Тип("Строка") Тогда
			Если СтрЧислоВхождений(АдресРФ, ",") = 9 Тогда
				ЭлементыАдреса = СтруктураАдресаПоФормату9Запятых(АдресРФ);
				Формат9Запятых = Истина;
			Иначе
				// адрес в свободной форме (РФ или Иностранный)
				ЭлементыАдреса.Вставить("Страна", НаименованиеСтраны);
				ЭлементыАдреса.Вставить("Индекс", "");
				ЭлементыАдреса.Вставить("Регион", "");
				ЭлементыАдреса.Вставить("Район", "");
				ЭлементыАдреса.Вставить("Город", "");
				ЭлементыАдреса.Вставить("НаселенныйПункт", "");
				ЭлементыАдреса.Вставить("Улица", "");
				ЭлементыАдреса.Вставить("Округ", "");
				ЭлементыАдреса.Вставить("ВнутригРайон", "");
				ЭлементыАдреса.Вставить("Дом","");
				ЭлементыАдреса.Вставить("Корпус", "");
				ЭлементыАдреса.Вставить("Квартира", "");
				ЭлементыАдреса.Вставить("ДополнительнаяТерритория", "");
				ЭлементыАдреса.Вставить("ЭлементДополнительнойТерритории", "");
			КонецЕсли;
		Иначе
			ЭлементыАдреса.Вставить("Страна", НаименованиеСтраны);
			ЭлементыАдреса.Вставить("Индекс", ПочтовыйИндексАдреса(АдресРФ));
			ЭлементыАдреса.Вставить("Регион", АдресРФ.СубъектРФ);
			ЭлементыАдреса.Вставить("Район", РайонАдреса(АдресРФ));
			ЭлементыАдреса.Вставить("Город", АдресРФ.Город);
			ЭлементыАдреса.Вставить("НаселенныйПункт", АдресРФ.НаселПункт);
			ЭлементыАдреса.Вставить("Улица", АдресРФ.Улица);
			ЭлементыАдреса.Вставить("Округ", АдресРФ.Округ);
			ЭлементыАдреса.Вставить("ВнутригРайон", АдресРФ.ВнутригРайон);
			ЭлементыАдреса.Вставить("Дом","");
			ЭлементыАдреса.Вставить("Корпус", "");
			ЭлементыАдреса.Вставить("Квартира", "");
			ЭлементыАдреса.Вставить("ДополнительнаяТерритория", НайтиДополнительныйЭлементАдреса(АдресРФ));
			ЭлементыАдреса.Вставить("ЭлементДополнительнойТерритории", 
				ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(91)));
		КонецЕсли;
	КонецЕсли;
	
	СоответствиеСокращений = Новый Соответствие;
	
	ЭтоРоссийскийАдрес = ?(СтрСравнить(НаименованиеСтраны, Справочники.СтраныМира.Россия.Наименование) = 0, Истина, Ложь);
	Если ЭтоРоссийскийАдрес Тогда
		Результат.Вставить("КодРегиона", КодРегиона(ЭлементыАдреса["Регион"]));
	КонецЕсли;
	
	Результат.Вставить("Индекс", ЭлементыАдреса.Получить("Индекс"));
	
	Регион = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЭлементыАдреса["Регион"]);
	Результат.Вставить("Регион", ?(НаименованиеВключаетСокращение, ЭлементыАдреса["Регион"], Регион.Наименование));
	СоответствиеСокращений.Вставить(1, Регион.Сокращение);
	
	Округ =  УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЭлементыАдреса["Округ"]);
	Результат.Вставить("Округ", ?(НаименованиеВключаетСокращение, ЭлементыАдреса["Округ"], Округ.Наименование));
	СоответствиеСокращений.Вставить(2, Округ.Сокращение);
	
	Район = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЭлементыАдреса["Район"]);
	Результат.Вставить("Район", ?(НаименованиеВключаетСокращение, ЭлементыАдреса["Район"], Район.Наименование));
	СоответствиеСокращений.Вставить(3, Район.Сокращение);
	
	Город = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЭлементыАдреса["Город"]);
	Результат.Вставить("Город", ?(НаименованиеВключаетСокращение, ЭлементыАдреса["Город"], Город.Наименование));
	СоответствиеСокращений.Вставить(4, Город.Сокращение);
	
	ВнутригРайон = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЭлементыАдреса["ВнутригРайон"]);
	Результат.Вставить("ВнутригородскойРайон", ?(НаименованиеВключаетСокращение, ЭлементыАдреса["ВнутригРайон"],  ВнутригРайон.Наименование));
	СоответствиеСокращений.Вставить(5, ВнутригРайон.Сокращение);
	
	НаселПункт = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЭлементыАдреса["НаселенныйПункт"]);
	Результат.Вставить("НаселенныйПункт", ?(НаименованиеВключаетСокращение, ЭлементыАдреса["НаселенныйПункт"], НаселПункт.Наименование));
	СоответствиеСокращений.Вставить(6, НаселПункт.Сокращение);
	
	Улица = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЭлементыАдреса["Улица"]);
	Результат.Вставить("Улица", ?(НаименованиеВключаетСокращение, ЭлементыАдреса["Улица"], Улица.Наименование));
	СоответствиеСокращений.Вставить(7, Улица.Сокращение);
	
	ДополнительнаяТерритория = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЭлементыАдреса["ДополнительнаяТерритория"]);
	Результат.Вставить("ДополнительнаяТерритория", ?(НаименованиеВключаетСокращение, ЭлементыАдреса["ДополнительнаяТерритория"], ДополнительнаяТерритория.Наименование));
	СоответствиеСокращений.Вставить(90, ДополнительнаяТерритория.Сокращение);
	
	ЭлементДополнительнойТерритории = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЭлементыАдреса["ЭлементДополнительнойТерритории"]);
	Результат.Вставить("ЭлементДополнительнойТерритории", ?(НаименованиеВключаетСокращение, ЭлементыАдреса["ЭлементДополнительнойТерритории"], ЭлементДополнительнойТерритории.Наименование));
	СоответствиеСокращений.Вставить(91, ЭлементДополнительнойТерритории.Сокращение);
	
	Если ПолноеНаименованиеСокращений  = Истина Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
			МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
			МодульАдресныйКлассификаторСлужебный.ПолныеНаименованияСокращений(СоответствиеСокращений);
		КонецЕсли;
	КонецЕсли;
	
	Результат.Вставить("РегионСокращение", СоответствиеСокращений[1]);
	Результат.Вставить("ОкругСокращение", СоответствиеСокращений[2]);
	Результат.Вставить("РайонСокращение", СоответствиеСокращений[3]);
	Результат.Вставить("ГородСокращение", СоответствиеСокращений[4]);
	Результат.Вставить("ВнутригородскойРайонСокращение", СоответствиеСокращений[5]);
	Результат.Вставить("НаселенныйПунктСокращение", СоответствиеСокращений[6]);
	Результат.Вставить("УлицаСокращение", СоответствиеСокращений[7]);
	Результат.Вставить("ДополнительнаяТерриторияСокращение", СоответствиеСокращений[90]);
	Результат.Вставить("ЭлементДополнительнойТерриторииСокращение", СоответствиеСокращений[91]);
	Результат.Вставить("Здание", Новый Структура("ТипЗдания, Номер"));
	Результат.Вставить("Корпуса", Новый Массив);
	Результат.Вставить("Помещения", Новый Массив);
	
	Если НЕ Формат9Запятых Тогда
		
		ЗданияИПомещения = ЗданияИПомещенияАдреса(АдресРФ);
		Для каждого Здание Из ЗданияИПомещения.Здания Цикл
			Если Здание.Вид = 1 Тогда
				Результат.Здание.ТипЗдания = Здание.Тип;
				Результат.Здание.Номер = Здание.Значение;
			Иначе
				Результат.Корпуса.Добавить(Новый Структура("ТипКорпуса, Номер", Здание.Тип, Здание.Значение));
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Помещение Из ЗданияИПомещения.Помещения Цикл
			Результат.Помещения.Добавить(Новый Структура("ТипПомещения, Номер", Помещение.Тип, Помещение.Значение));
		КонецЦикла;
		
	Иначе
		Здание = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЭлементыАдреса["Дом"]);
		Результат.Здание.ТипЗдания = Здание.Наименование;
		Результат.Здание.Номер = Здание.Сокращение;
		
		Корпус = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЭлементыАдреса["Корпус"]);
		Результат.Корпуса.Добавить(Новый Структура("ТипКорпуса, Номер", Корпус.Наименование, Корпус.Сокращение));
		
		Квартира = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЭлементыАдреса["Квартира"]);
		Результат.Помещения.Добавить(Новый Структура("ТипПомещения, Номер", Квартира.Наименование, Квартира.Сокращение));
	КонецЕсли;
	
	Если ЗаполнятьКоды И ЭтоРоссийскийАдрес Тогда
		ЗаполнитьКодыАдреса(Результат, Адрес);
		ОпределитьФорматКодов(Результат, АдресРФ);
	КонецЕсли;
	
	// Из XDTO пустые значение приходят как Неопределено
	ЗаменитьВСтруктуреНеопределеноНаПустуюСтроку(Результат);
	Возврат Результат;

КонецФункции

Функция СтруктураАдресаПоФормату9Запятых(АдресВФормате9Запятых)
	Результат = Новый Соответствие;
	АдресМассив = СтрРазделить(АдресВФормате9Запятых, ",", Истина);
	Результат.Вставить("Страна", АдресМассив[0]);
	Результат.Вставить("Индекс", АдресМассив[1]);
	Результат.Вставить("Регион", АдресМассив[2]);
	Результат.Вставить("Район", АдресМассив[3]);
	Результат.Вставить("Город", АдресМассив[4]);
	Результат.Вставить("НаселенныйПункт", АдресМассив[5]);
	Результат.Вставить("Улица", АдресМассив[6]);
	Результат.Вставить("Дом", АдресМассив[7]);
	Результат.Вставить("Корпус", АдресМассив[8]);
	Результат.Вставить("Квартира", АдресМассив[9]);
	
	Результат.Вставить("Округ", Неопределено);
	Результат.Вставить("ВнутригРайон", Неопределено);
	Возврат Результат;

КонецФункции

// Заполняет коды по структуре адреса.
//
Процедура ЗаполнитьКодыАдреса(Результат, Адрес)
	
	КодыКЛАДР = Новый Структура("Регион, Округ, Город, ВнутригородскойРайон, НаселенныйПункт, Улица");
	ДополнительныеКоды = Новый Структура("ОКТМО, ОКАТО, КодИФНСФЛ, КодИФНСЮЛ, КодУчасткаИФНСФЛ, КодУчасткаИФНСЮЛ");
	Результат.Вставить("КодыКЛАДР", КодыКЛАДР);
	Результат.Вставить("ДополнительныеКоды", ДополнительныеКоды);
	
	Если ПустаяСтрока(Результат.Регион) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		АдресныеКоды = МодульАдресныйКлассификаторСлужебный.КодыАдресаИКодыКЛАДР(Адрес);
		Результат.ДополнительныеКоды = АдресныеКоды.КодыАдреса;
		Результат.КодыКЛАДР = АдресныеКоды.КодыКЛАДР;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ОКТОМ в правильном формате 8 или 11 символов.
//
// Параметры:
//  ОКТМО - Строка, Число - Код ОКТМО.
// 
// Возвращаемое значение:
//  Строка - Код ОКТМО.
//
Функция ОКТМО(ОКТМО) Экспорт
	
	ОКТМОСтрока = Формат(ОКТМО, "ЧГ=0");
	
	Если СтрДлина(ОКТМОСтрока) < 8 Тогда
		Возврат Формат(ОКТМО, "ЧЦ=8; ЧВН=; ЧГ=0");
	ИначеЕсли СтрДлина(ОКТМОСтрока) = 10 Тогда
		Возврат Формат(ОКТМО, "ЧЦ=11; ЧВН=; ЧГ=0");
	КонецЕсли;
	
	Возврат ОКТМОСтрока;
	
КонецФункции

// Получить первое значение определенного вида контактной информации у объекта.
//
// Параметры:
//     Ссылка                  - ЛюбаяСсылка - ссылка на объект-владелец контактной информации (организация,
//                                             контрагент, партнер и т.д.).
//     ТипКонтактнойИнформации - Перечисление.ТипыКонтактнойИнформации - параметры обработки.
//
// Возвращаемое значение:
//     Строка - строковое представление значения.
//
Функция ПервоеЗначениеКонтактнойИнформацииОбъектаПоТипу(Ссылка, ТипКонтактнойИнформации) Экспорт

	Результат = "";
	ПолноеИмя = Ссылка.Метаданные().ПолноеИмя();

	Если СтрНачинаетсяС(ПолноеИмя , НСтр("ru = 'Справочник'")) Тогда
		ИмяГруппыКонтактнойИнформации = НСтр("ru = 'Справочник'") + Ссылка.Метаданные().Имя;
	ИначеЕсли СтрНачинаетсяС(ПолноеИмя , НСтр("ru = 'Документ'")) Тогда
		ИмяГруппыКонтактнойИнформации = НСтр("ru = 'Документ'") + Ссылка.Метаданные().Имя;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных КАК Наименование
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.ЭтоГруппа = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		Если РезультатЗапроса.Наименование = ИмяГруппыКонтактнойИнформации Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВидыКонтактнойИнформацииПодчиненный.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформацииПодчиненный
				|		ПО (ВидыКонтактнойИнформацииПодчиненный.Родитель = ВидыКонтактнойИнформации.Ссылка)
				|ГДЕ
				|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных
				|	И ВидыКонтактнойИнформации.ЭтоГруппа = ИСТИНА
				|	И ВидыКонтактнойИнформацииПодчиненный.Тип = &Тип";
			
			Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", ИмяГруппыКонтактнойИнформации);
			Запрос.УстановитьПараметр("Тип", ТипКонтактнойИнформации);
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			Если РезультатЗапроса.Следующий() Тогда
				Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
					Ссылка, РезультатЗапроса.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;

КонецФункции

// Дополняет объект реквизитами, хранящимися отдельно от объекта, либо в служебной части самого объекта,
// не предназначенной для вывода в отчетах.
Процедура ПриПодготовкеДанныхОбъекта(Объект, ДополнительныеРеквизиты) Экспорт 
	
	Если Объект.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено Тогда
		Для Каждого Контакт Из УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(Объект.Ссылка, Неопределено) Цикл
			Если ЗначениеЗаполнено(Контакт.Вид) Тогда
				Реквизит = ДополнительныеРеквизиты.Добавить();
				Реквизит.Наименование = Контакт.Вид;
				Реквизит.Значение = Контакт.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет поля контактной информации из ТаблицыЗначений (например объекта другого вида справочника).
//
// Параметры:
//    Источник - ТаблицаЗначений - таблица значений с контактной информацией.
//    Приемник - УправляемаяФорма - форма объекта. куда надо передать контактную информацию.
//
Процедура ЗаполнитьКонтактнуюИнформацию(Источник, Приемник) Экспорт
	КоллекцияПолейКонтактнойИнформации = Приемник.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Для Каждого ЭлементКоллекцияПолейКонтактнойИнформации Из КоллекцияПолейКонтактнойИнформации Цикл
		
		СтрокаВКИ = Источник.Найти(ЭлементКоллекцияПолейКонтактнойИнформации.Вид, "Вид");
		Если СтрокаВКИ <> Неопределено Тогда
			Приемник[ЭлементКоллекцияПолейКонтактнойИнформации.ИмяРеквизита] = СтрокаВКИ.Представление;
			ЭлементКоллекцияПолейКонтактнойИнформации.ЗначенияПолей          = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(СтрокаВКИ.ЗначенияПолей);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОпределитьФорматКодов(Результат, АдресРФ)
	Если ТипЗнч(АдресРФ) = Тип("ОбъектXDTO") Тогда
		Если ЗначениеЗаполнено(АдресРФ.ОКТМО) Тогда
			Результат.ДополнительныеКоды.ОКТМО = ОКТМО(АдресРФ.ОКТМО);
		КонецЕсли;
		Если ЗначениеЗаполнено(АдресРФ.ОКАТО) Тогда
			Результат.ДополнительныеКоды.ОКАТО = Формат(АдресРФ.ОКАТО, "ЧГ=0");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Разделение стран мира
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия    = "2.1.4.8";
		Обработчик.Процедура = "УправлениеКонтактнойИнформациейСлужебный.ПодготовкаЭталонаРазделенныхСтранМира";
		Обработчик.МонопольныйРежим = Истина;
		Обработчик.ОбщиеДанные      = Истина;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия    = "2.1.4.8";
		Обработчик.Процедура = "УправлениеКонтактнойИнформациейСлужебный.ОбновлениеПоЭталонуРазделенныхСтранМира";
		Обработчик.МонопольныйРежим = Истина;
		Обработчик.ОбщиеДанные      = Ложь;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.2.3.34";
	Обработчик.Процедура = "УправлениеКонтактнойИнформациейСлужебный.ОбновитьСуществующиеСтраныМира";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.ОбщиеДанные      = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.3.1.8";
	Обработчик.Процедура = "УправлениеКонтактнойИнформациейСлужебный.ОбновитьНастройкуДобавочногоНомераТелефона";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.ОбщиеДанные      = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.3.1.15";
	Обработчик.Процедура = "УправлениеКонтактнойИнформациейСлужебный.УстановитьЗначениеПризнакаИспользуется";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.ОбщиеДанные      = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.2.39";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f663ee3c-68b7-45db-bd6c-eebe6665fc7c");
	Обработчик.Процедура = "УправлениеКонтактнойИнформациейСлужебный.УдалитьАдресаСТекстомЗаполнить";
	Обработчик.Комментарий = НСтр("ru = 'Обновление сведений контактной информации.
		|До завершения обработки некоторая контактная информация может отображаться некорректно.'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.НачальноеЗаполнение = Ложь;
	
КонецПроцедуры

// Неразделенный монопольный обработчик для копирования стран мира из нулевой области.
// Сохраняет эталон и список областей данных - адресатов.
//
Процедура ПодготовкаЭталонаРазделенныхСтранМира() Экспорт
	
	// Контроль версии базы
	ИмяРегистраЭталона = "УдалитьСтраныМира";
	Если Метаданные.РегистрыСведений.Найти(ИмяРегистраЭталона) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Запрашиваем данные из нулевой области, создаем эталон с точностью до ссылки.
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, 0);
	Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	Справочник.Ссылка             КАК Ссылка,
		|	Справочник.Код                КАК Код,
		|	Справочник.Наименование       КАК Наименование,
		|	Справочник.КодАльфа2          КАК КодАльфа2,
		|	Справочник.КодАльфа3          КАК КодАльфа3, 
		|	Справочник.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	Справочник.СтраныМира КАК Справочник
		|");
	Эталон = Запрос.Выполнить().Выгрузить();
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	
	// Пишем эталон
	Набор = РегистрыСведений[ИмяРегистраЭталона].СоздатьНаборЗаписей();
	Набор.Добавить().Значение = Новый ХранилищеЗначения(Эталон, Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	
КонецПроцедуры

// Разделенный  обработчик для копирования стран мира из нулевой области.
// Используется эталон, подготовленный на предыдущем шаге.
//
Процедура ОбновлениеПоЭталонуРазделенныхСтранМира() Экспорт
	
	// Контроль версии базы
	ИмяРегистраЭталона = "УдалитьСтраныМира";
	Если Метаданные.РегистрыСведений.Найти(ИмяРегистраЭталона) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Ищем эталон для текущей области.
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Эталон.Значение
		|ИЗ
		|	РегистрСведений.УдалитьСтраныМира КАК Эталон
		|ГДЕ
		|	Эталон.ОбластьДанных = 0
		|");
	Результат = Запрос.Выполнить().Выбрать();
	Если НЕ Результат.Следующий() Тогда
		Возврат;
	КонецЕсли;
	Эталон = Результат.Значение.Получить();
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Данные.Ссылка             КАК Ссылка,
		|	Данные.Код                КАК Код,
		|	Данные.Наименование       КАК Наименование,
		|	Данные.КодАльфа2          КАК КодАльфа2,
		|	Данные.КодАльфа3          КАК КодАльфа3, 
		|	Данные.НаименованиеПолное КАК НаименованиеПолное
		|ПОМЕСТИТЬ
		|	Эталон
		|ИЗ
		|	&Данные КАК Данные
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;///////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	Эталон.Ссылка             КАК Ссылка,
		|	Эталон.Код                КАК Код,
		|	Эталон.Наименование       КАК Наименование,
		|	Эталон.КодАльфа2          КАК КодАльфа2,
		|	Эталон.КодАльфа3          КАК КодАльфа3, 
		|	Эталон.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	Эталон КАК Эталон
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СтраныМира КАК СтраныМира
		|ПО
		|	СтраныМира.Ссылка = Эталон.Ссылка
		|ГДЕ
		|	СтраныМира.Ссылка ЕСТЬ NULL
		|");
	Запрос.УстановитьПараметр("Данные", Эталон);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Страна = Справочники.СтраныМира.СоздатьЭлемент();
		Страна.УстановитьСсылкуНового(Выборка.Ссылка);
		ЗаполнитьЗначенияСвойств(Страна, Выборка, , "Ссылка");
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Страна);
	КонецЦикла;
	
КонецПроцедуры

// Обновляем только существующие элементы стран мира по классификатору.
Процедура ОбновитьСуществующиеСтраныМира() Экспорт
	
	Справочники.СтраныМира.ОбновитьСтраныМираПоКлассификатору();
	
КонецПроцедуры

Процедура ОбновитьНастройкуДобавочногоНомераТелефона() Экспорт
	
	// Устанавливает флаг ТелефонCДобавочнымНомером для обратной совместимости.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Тип =  Значение(Перечисление.ТипыКонтактнойИнформации.Телефон)";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		ВидКонтактнойИнформации = РезультатЗапроса.Ссылка.ПолучитьОбъект();
		ВидКонтактнойИнформации.ТелефонCДобавочнымНомером = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидКонтактнойИнформации);
	КонецЦикла;
	
КонецПроцедуры

// Инициализирует значение реквизита Используется справочника ВидыКонтактнойИнформации.
//
Процедура УстановитьЗначениеПризнакаИспользуется() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	НЕ ВидыКонтактнойИнформации.Используется";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВидКонтактнойИнформацииОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидКонтактнойИнформацииОбъект.Используется = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидКонтактнойИнформацииОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьАдресаСТекстомЗаполнить(Параметры, РазмерПорции = 1000) Экспорт
	
	ОбъектыСАдресом = Неопределено;
	Параметры.Свойство("ОбъектыСАдресом", ОбъектыСАдресом);
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		// получение адресов для обработки
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			| ВидыКонтактнойИнформации.Родитель.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
			|ИЗ
			| Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
			|ГДЕ
			| ВидыКонтактнойИнформации.Тип = &Тип
			| И ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге = &РедактированиеТолькоВДиалоге";
		Запрос.УстановитьПараметр("РедактированиеТолькоВДиалоге", Истина);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ТекстЗапроса = "";
		Разделитель = "";
		ШаблонЗапроса = "ВЫБРАТЬ
			| ТаблицаСКонтактнойИнформацией.Ссылка КАК Ссылка
			|ИЗ
			| %1.%2.КонтактнаяИнформация КАК ТаблицаСКонтактнойИнформацией
			|ГДЕ
			| ТаблицаСКонтактнойИнформацией.Представление = &Заполнить
			|
			|СГРУППИРОВАТЬ ПО
			| ТаблицаСКонтактнойИнформацией.Ссылка";
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если СтрНачинаетсяС(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, "Справочник") Тогда
				ИмяОбъекта = Сред(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, 11);
				Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
					ТекстЗапроса = ТекстЗапроса + Разделитель + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса, "Справочник", ИмяОбъекта);
					Разделитель = " ОБЪЕДИНИТЬ ВСЕ ";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ПустаяСтрока(ТекстЗапроса) Тогда
			Возврат;
		КонецЕсли;
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.Параметры.Вставить("Заполнить", УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки());
		ОбъектыСАдресом = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = ОбъектыСАдресом.Количество();
		Параметры.Вставить("ОбъектыСАдресом", ОбъектыСАдресом);
	КонецЕсли;
	
	Если ОбъектыСАдресом = Неопределено ИЛИ ОбъектыСАдресом.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Позиция = ОбъектыСАдресом.Количество() - 1;
	КоличествоОбработанных = 0;
	
	Пока Позиция >= 0 И КоличествоОбработанных < РазмерПорции Цикл
		ОбъектКонтактнойИнформации = ОбъектыСАдресом.Получить(Позиция).ПолучитьОбъект();
		КонтактнаяИнформация = ОбъектКонтактнойИнформации.КонтактнаяИнформация;
		МассивДляУдаления = Новый Массив;
		Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
			Если СтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
				И СтрокаКонтактнойИнформации.Представление = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
				МассивДляУдаления.Добавить(СтрокаКонтактнойИнформации);
			КонецЕсли;
		КонецЦикла;
		Для каждого СтрокаКонтактнойИнформации Из МассивДляУдаления Цикл
			КонтактнаяИнформация.Удалить(СтрокаКонтактнойИнформации);
		КонецЦикла;
		ОбъектКонтактнойИнформации.Записать();
		ОбъектыСАдресом.Удалить(Позиция);
		Позиция = Позиция - 1;
		КоличествоОбработанных = КоличествоОбработанных + 1;
	КонецЦикла;
	Если ОбъектыСАдресом.Количество() > 0 Тогда
		Параметры.ОбработкаЗавершена = Ложь;
	КонецЕсли;
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + КоличествоОбработанных;
	Параметры.Вставить("ОбъектыСАдресом", ОбъектыСАдресом);
	
КонецПроцедуры


#КонецОбласти

#Область ВзаимодействиеСАдреснымКлассификатором

// Возвращает список всех регионов адресного классификатора.
//
// Возвращаемое значение:
//   ТаблицаЗначений - содержит колонки:
//      * КодСубъектаРФ - Число                   - Код региона.
//      * Идентификатор - УникальныйИдентификатор - Идентификатор региона.
//      * Представление - Строка                  - Наименование и сокращение региона.
//      * Загружено     - Булево                  - Истина, если классификатор по данному региону сейчас загружен.
//      * ДатаВерсии    - Дата                    - UTC версия загруженных данных.
//   Неопределено    - если нет подсистемы адресного классификатора.
// 
Функция ВсеРегионы() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		Возврат МодульАдресныйКлассификаторСлужебный.СведенияОЗагрузкеСубъектовРФ();
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

//  Возвращает наименование региона по его коду.
//
//  Параметры:
//      Код - Строка, Число - код региона.
//
// Возвращаемое значение:
//      Строка - полное наименование региона с сокращением.
//      Неопределено - если нет ни одной подсистемы адресного классификатора.
// 
Функция РегионКода(Знач Код)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификатор");
		Возврат МодульАдресныйКлассификатор.НаименованиеРегионаПоКоду(Код);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//  Возвращает код региона по его полному наименованию.
//
//  Параметры:
//      НаименованиеРегиона - Строка - полное наименование региона с сокращением.
//
// Возвращаемое значение:
//      Строка - код региона из двух цифр. Пустая строка, если наименование определить не удалось.
//      Неопределено - если нет ни одной подсистемы адресного классификатора.
// 
Функция КодРегиона(Знач ПолноеНаименование)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификатор");
		Код = МодульАдресныйКлассификатор.КодРегионаПоНаименованию(ПолноеНаименование);
		Возврат Формат(Код, "ЧЦ=2; ЧН=; ЧВН=");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//  Возвращает адрес по представлению.
//
//  Параметры:
//      Текст                      - Строка - текст автоподбора.
//      СкрыватьНеактуальныеАдреса - Булево - флаг того, что неактуальные адреса не должны попадать в автоподбор.
//      ВыбиратьСтрок              - Число  - ограничение на количество результатов.
//      УточняющаяУлица            - Строка - уточняющее представление улицы.
Функция НаселенныеПунктыПоПредставлению(Знач Текст, Знач СкрыватьНеактуальныеАдреса = Ложь, Знач ВыбиратьСтрок = 50, Знач УточняющаяУлица = "") Экспорт
	
	Результат = Новый СписокЗначений;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		ДанныеАнализа = ЧастиАдресаТаблицей(Текст);
		Если ДанныеАнализа.Количество() = 0 Тогда
			Возврат Результат;
		КонецЕсли;
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		АдресРФ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ"));
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		АдресПоУровням = МодульАдресныйКлассификаторСлужебный.УстановитьСоответствиеЧастейАдресаИхУровнюДляНаселенногоПункта(ДанныеАнализа, УровниАдресныхОбъектов("НаселенныйПункт"));
		Если АдресПоУровням <> Неопределено Тогда
			ПоместитьАдресВXDTO(АдресРФ, АдресПоУровням);
		КонецЕсли;
		
		// Что-то осталось, добавляем это на уровень населенного пункта.
		Фильтр = Новый Структура("Уровень", 0);
		СтрокиСУровнем0 = АдресПоУровням.НайтиСтроки(Фильтр);
		Разделитель = "";
		НаселПункт = "";
		Для каждого ЭлементАдреса Из СтрокиСУровнем0 Цикл
			НаселПункт = НаселПункт + Разделитель + ЭлементАдреса.Значение;
			Разделитель = ", ";
		КонецЦикла;
		Если НЕ ПустаяСтрока(НаселПункт) Тогда 
			НаселПункт = НаселПункт + ?(ЗначениеЗаполнено(АдресРФ.НаселПункт), ", " +АдресРФ.НаселПункт, "");
			УстановитьСвойствоПоXPath(АдресРФ, "НаселПункт", НаселПункт);
		КонецЕсли;
			
		Возврат АдресРФ;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//  Возвращает структуру с полем "ДанныеВыбора", содержащую список вариантов населенных пунктов 
//  по иерархическому представлению младший-старший.
//
//  Параметры:
//      ИдентификаторНаселенногоПункта - УникальныйИдентификатор - код классификатора для ограничения подбора.
//      Текст                          - Текст  - строка автоподбора.
//      СкрыватьНеактуальныеАдреса     - Булево - флаг того, что неактуальные адреса не должны попадать в автоподбор.
//      ВыбиратьСтрок                  - Число  - ограничение на количество результатов.
//
// Возвращаемое значение:
//      Структура - результат поиска данных. Содержит поля:
//         * СлишкомМногоДанных - Булево - признак того, что результирующий список не полон.
//         * ДанныеВыбора       - СписокЗначений - данные для автоподбора.
//
Функция УлицыПоПредставлению(ИдентификаторНаселенногоПункта, Текст, СкрыватьНеактуальныеАдреса = Ложь, ВыбиратьСтрок = 50) Экспорт
	
	Если ЗначениеЗаполнено(ИдентификаторНаселенногоПункта)
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
			ЧастиАдреса = ЧастиАдресаТаблицей(Текст);
			Если ЧастиАдреса.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
			МодульАдресныйКлассификаторСлужебный.УстановитьУровниУлицыПоЧастямАдреса(ИдентификаторНаселенногоПункта, ЧастиАдреса);
			Возврат ЧастиАдреса;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//  Возвращает идентификатор классификатора для объекта, представленного в полях.
//
//  Параметры:
//      ЧастиАдреса          - Структура - описание частей адреса.
//      СкрыватьНеактуальные - Булево - флаг скрытия актуальных.
//
// Возвращаемое значение:
//      УникальныйИдентификатор - идентификатор классификатора.
//
Функция ИдентификаторНаселенногоПунктаПоЧастямАдреса(ЧастиАдреса) Экспорт
	
	// Пробуем взять из части адреса.
	Результат = УправлениеКонтактнойИнформациейКлиентСервер.ИдентификаторЭлементаПоЧастямАдреса(ЧастиАдреса);
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Запрос к классификатору об идентификаторе.
	АдресXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.v8.1c.ru/ssl/contactinfo", "АдресРФ"));
	Для Каждого КлючЗначение Из ЧастиАдреса Цикл
		Часть = КлючЗначение.Значение;
		УстановитьXDTOРеквизитОбъекта(АдресXDTO, Часть.ПутьXPath, Часть.Представление);
	КонецЦикла;
	
	Варианты = Новый Массив;
	Варианты.Добавить(Новый Структура("Адрес, ФорматАдреса", АдресXDTO, "ФИАС"));
	
	МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
	СтруктураДанных = МодульАдресныйКлассификаторСлужебный.РезультатПроверкиАдресовПоКлассификатору(Варианты);
	
	Если Не СтруктураДанных.Отказ Тогда
		Для каждого Элемент Из СтруктураДанных.Данные Цикл
			Варианты = Элемент.Варианты;
			Если Варианты.Количество() > 0 Тогда
				Возврат Варианты[0].Идентификатор;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Не соответствует классификатору или классификатор на обслуживании.
	Возврат Неопределено;
КонецФункции

//  Возвращает структуру, описывающую населенный пункт в иерархии младший-старший
//  для текущего адресного классификатора. Имена ключей структуры зависят от 
//  классификатора.
//
//  Параметры:
//      Идентификатор - УникальныйИдентификатор - Идентификатор объекта. Если указан, то структура 
//                                                заполняется данными для этого объекта.
//      ВариантКлассификатора                   - Строка - Требуемый вид классификатора. 
// 
// Возвращаемое значение:
//      Структура - описание населенного пункта.
//
Функция СписокРеквизитовНаселенныйПункт(Идентификатор = Неопределено, ВариантКлассификатора = "КЛАДР") Экспорт
	
	Результат = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЧастейАдресаНаселенногоПункта(ВариантКлассификатора);
	
	Если Идентификатор = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Заполняем данные по идентификатору.
	МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
	СтруктураДанных = МодульАдресныйКлассификаторСлужебный.АктуальныеАдресныеСведения(Идентификатор);
	
	Если Не СтруктураДанных.Отказ Тогда
		Адрес = СтруктураДанных.Данные;
		Для Каждого КлючЗначение Из Результат Цикл
			Часть = КлючЗначение.Значение;
			Часть.Представление = СокрЛП(ПолучитьXDTOРеквизитОбъекта(Адрес, Часть.ПутьXPath));
			НаименованиеСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(Часть.Представление);
			Часть.Наименование = НаименованиеСокращение.Наименование;
			Часть.Сокращение = НаименованиеСокращение.Сокращение;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//  Устанавливает значения полей населенного пункта в XDTO адресе.
//  
//  Параметры:
//      XDTOАдрес    - ОбъектXDTO - адрес РФ.
//      Идентификатор - УникальныйИдентификатор - Источник данных для заполнения.
//
Процедура УстановитьНаселенныйПунктАдресаПоИдентификатору(XDTOАдрес, Идентификатор) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Возврат;
	КонецЕсли;
	
	МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
	ДанныеАдреса = МодульАдресныйКлассификаторСлужебный.АктуальныеАдресныеСведения(Идентификатор);
	Если ДанныеАдреса.Отказ Тогда
		// Классификатор поломан
		Возврат;
	КонецЕсли;
	
	Эталон = ДанныеАдреса.Данные;
	
	ЧастиАдреса = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЧастейАдресаНаселенногоПункта();
	Для Каждого КлючЗначение Из ЧастиАдреса Цикл
		Если КлючЗначение.Значение.Уровень < 7 Тогда
			Путь = КлючЗначение.Значение.ПутьXPath;
			УстановитьXDTOРеквизитОбъекта(XDTOАдрес, Путь, ПолучитьXDTOРеквизитОбъекта(Эталон, Путь));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает значения полей улицы.
//  
//  Параметры:
//      XDTOАдрес    - ОбъектXDTO - адрес РФ.
//      Идентификатор - УникальныйИдентификатор - Источник данных для заполнения.
//
Процедура УстановитьУлицуАдресаПоИдентификатору(XDTOАдрес, Идентификатор) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Возврат;
	КонецЕсли;
	
	МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
	ДанныеАдреса = МодульАдресныйКлассификаторСлужебный.АктуальныеАдресныеСведения(Идентификатор);
	Если ДанныеАдреса.Отказ Тогда
		// Классификатор поломан
		Возврат;
	КонецЕсли;
	
	Эталон = ДанныеАдреса.Данные;
	
	ЧастиАдреса = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЧастейАдресаНаселенногоПункта();
	Для Каждого КлючЗначение Из ЧастиАдреса Цикл
		Если КлючЗначение.Значение.Уровень > 6 Тогда
			Путь = КлючЗначение.Значение.ПутьXPath;
			УстановитьXDTOРеквизитОбъекта(XDTOАдрес, Путь, ПолучитьXDTOРеквизитОбъекта(Эталон, Путь));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает значения идентификаторов для частей адреса.
//  
//  Параметры:
//      НаселенныйПунктДетально  - Структура - части адреса.
//      ИдентификаторАдреса - УникальныйИдентификатор - Источник данных для заполнения.
//
Процедура ЗаполнитьИдентификаторыНаселенногоПункта(НаселенныйПунктДетально, ИдентификаторНаселенногоПункта = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		МодульАдресныйКлассификаторСлужебный.УстановитьИдентификаторыНаселенногоПункта(НаселенныйПунктДетально, ИдентификаторНаселенногоПункта);
	КонецЕсли;
	
КонецПроцедуры

// Определение режима работы форм ввода.
// 
// Возвращаемое значение:
//     Булево - Истина, если работа с классификатором ведется через веб-сервис.
//
Функция КлассификаторДоступенЧерезВебСервис() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
	Источник = МодульАдресныйКлассификаторСлужебный.ИсточникДанныхАдресногоКлассификатора();
	
	Возврат Не ПустаяСтрока(Источник);
КонецФункции

// Проверка доступности поставщика - локальной базы или сервиса. Запрос версии.
// 
// Возвращаемое значение:
//     Структура - описание состояния.
//       * Отказ                        - Булево - Поставщик не доступен.
//       * ПодробноеПредставлениеОшибки - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * КраткоеПредставлениеОшибки   - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * Данные                       - Строка - Описание версии поставщика.
//
Функция ВерсияПоставщикаДанныхКлассификатора()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		Возврат МодульАдресныйКлассификаторСлужебный.ВерсияПоставщикаДанных();
	КонецЕсли;
	
	Результат = СтруктураОшибкиПоставщикаАдресногоКлассификатора();
	Результат.Вставить("Версия");
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьДоступностьКлассификатора(ДоступностьКлассификатораАдрес) Экспорт
	
	ПоместитьВоВременноеХранилище(ВерсияПоставщикаДанныхКлассификатора(), ДоступностьКлассификатораАдрес);
	
КонецПроцедуры	

Функция ПроверитьАдресВXML(АдресВXML, ПараметрыПроверкиАдреса = Неопределено) Экспорт
	
	РезультатПроверки = Новый Структура("Результат, СписокОшибок");
	РезультатПроверки.СписокОшибок = Новый СписокЗначений;
	
	Если НЕ ЭтоСтрокаXML(АдресВXML) Тогда
		РезультатПроверки.Результат = "СодержитОшибки";
		РезультатПроверки.СписокОшибок.Добавить("ФорматАдреса", НСтр("ru = 'Некорректный формат адреса'"));
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Источник = АдресXMLВXDTO(АдресВXML,, Перечисления.ТипыКонтактнойИнформации.Адрес);
	ЕстьОшибки = Ложь;
	
	ФорматАдреса = "КЛАДР";
	АдресТолькоРоссийский = Истина;
	Если ТипЗнч(ПараметрыПроверкиАдреса) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		ПараметрыПроверки = СтруктураВидаКонтактнойИнформации(ПараметрыПроверкиАдреса);
		ФорматАдреса = ?(ПараметрыПроверки.ПроверятьПоФИАС, "ФИАС", "КЛАДР");
		АдресТолькоРоссийский = ПараметрыПроверки.АдресТолькоРоссийский;
	Иначе 
		ПараметрыПроверки = СтруктураВидаКонтактнойИнформации();
		Если ПараметрыПроверкиАдреса <> Неопределено Тогда
			Если ПараметрыПроверкиАдреса.Свойство("ФорматАдреса") И ЗначениеЗаполнено(ПараметрыПроверкиАдреса.ФорматАдреса) Тогда
				ФорматАдреса = ПараметрыПроверкиАдреса.ФорматАдреса;
			КонецЕсли;
			Если ПараметрыПроверкиАдреса.Свойство("АдресТолькоРоссийский") И ЗначениеЗаполнено(ПараметрыПроверкиАдреса.АдресТолькоРоссийский) Тогда
				АдресТолькоРоссийский = ПараметрыПроверкиАдреса.АдресТолькоРоссийский;
			КонецЕсли;
		КонецЕсли;
		ПараметрыПроверки.ПроверятьКорректность = Истина;
	КонецЕсли;
	
	Если ВРег(ФорматАдреса) = "ФИАС" Тогда
		ПараметрыПроверки.Вставить("ПроверятьПоФИАС", Истина);
	КонецЕсли;

	ПараметрыПроверки.Вставить("ФорматАдреса", ФорматАдреса);
	ПараметрыПроверки.Вставить("АдресТолькоРоссийский ", АдресТолькоРоссийский);
	
	Адрес = Источник.Состав;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Если Адрес <> Неопределено И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		СписокОшибок = ОшибкиЗаполненияАдресаXDTO(Адрес, ПараметрыПроверки);
	КонецЕсли;
	
	Если СписокОшибок.Количество() = 0 Тогда
		РезультатПроверки.Результат = "Корректный";
	Иначе
		Если НЕ СписокОшибок[0].Пометка Тогда
			РезультатПроверки.Результат = "НеПроверен";
		Иначе
			РезультатПроверки.Результат = "СодержитОшибки";
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверки.СписокОшибок = СписокОшибок;
	Возврат РезультатПроверки;
	
КонецФункции

// Возвращает данные классификатора по почтовому индексу.
//
// Параметры:
//     Индекс - Строка, Число - почтовый индекс, для которого необходимо получать данные.
//
//     ДополнительныеПараметры - Структура - Описывает настройки поиска. Состоит из необязательных полей:
//         * СкрыватьНеактуальные - Булево - Флаг исключения из выборки неактуальных адресов. По умолчанию Ложь.
//         * ФорматАдреса - Строка - тип используемого классификатора.
//
// Возвращаемое значение:
//     Структура -  найденные варианты. Содержит поля:
//       * Отказ                        - Булево - Поставщик не доступен.
//       * ПодробноеПредставлениеОшибки - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * КраткоеПредставлениеОшибки   - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * ОбщаяЧастьПредставления      - Строка - Общая часть представлений адреса.
//       * Данные                       - ТаблицаЗначений - Содержит данные для выбора. Колонки:
//                                           ** Неактуален    - Булево - Флаг неактуальности строки данных.
//                                           ** Идентификатор - УникальныйИдентификатор - Код классификатора для поиска
//                                                                                        вариантов по индексу.
//                                           ** Представление - Строка - Представление варианта.
//
Функция АдресаКлассификатораПоПочтовомуИндексу(Знач Индекс, Знач ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		
		ТипЧисло = Новый ОписаниеТипов("Число");
		ИндексЧислом = ТипЧисло.ПривестиЗначение(Индекс);
		
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		Возврат МодульАдресныйКлассификаторСлужебный.АдресаПоПочтовомуИндексуКлассификатора(ИндексЧислом, ДополнительныеПараметры);
		
	КонецЕсли;
	
	Результат = СтруктураОшибкиПоставщикаАдресногоКлассификатора();
	Результат.Вставить("Данные", Новый ТаблицаЗначений);
	Возврат Результат;
	
КонецФункции

// Возвращает данные классификатора поля выбора по уровню.
//
// Параметры:
//     Родитель                - УникальныйИдентификатор - Родительский объект.
//     Уровень                 - Число                   - Требуемый уровень данных. 1-7, 90, 91 - адресные объекты, -1
//                                                         - ориентиры.
//     ДополнительныеПараметры - Структура               - Описание настройке поиска. Поля:
//         * СкрыватьНеактуальные              - Булево - Флаг исключения из выборки неактуальных адресов. По умолчанию
//                                                        Ложь.
//         * ФорматАдреса - Строка - тип используемого классификатора.
//
//         * РазмерПорции - Число                   - Необязательный размер порции возвращаемых данных. Если не указано
//                                                    или 0, то возвращает все элементы.
//         * ПерваяЗапись - УникальныйИдентификатор - Элемент, с которого начинается порция данных. Сам элемент не
//                                                    входит в выборку.
//         * Сортировка   - Строка                  - Направление сортировки для порции.
//
// Возвращаемое значение:
//     Структура -  найденные варианты. Содержит поля:
//       * Отказ                        - Булево - Поставщик не доступен.
//       * ПодробноеПредставлениеОшибки - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * КраткоеПредставлениеОшибки   - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * Заголовок                    - Строка - Строка с предложением выбора.
//       * Данные                       - ТаблицаЗначений - Содержит данные для выбора. Колонки:
//             ** Неактуален    - Булево - Флаг неактуальности строки данных.
//             ** Идентификатор - УникальныйИдентификатор - Код классификатора для поиска вариантов по индексу.
//             ** Представление - Строка - Представление варианта.
//
Функция АдресаДляИнтерактивногоВыбора(Родитель, Уровень, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		Возврат МодульАдресныйКлассификаторСлужебный.АдресаДляИнтерактивногоВыбора(Родитель, Уровень, ДополнительныеПараметры);
	КонецЕсли;
	
	Результат = СтруктураОшибкиПоставщикаАдресногоКлассификатора();
	Результат.Вставить("Заголовок");
	Результат.Вставить("Данные", Новый ТаблицаЗначений);
	Возврат Результат;

КонецФункции

// Возвращает список для автоподбора населенного пункта, поиск по подобию. Список ограничен 20 записями.
//
// Параметры:
//     Текст                   - Строка    - Текст, введенный в поле.
//     ИмяЧастиАдреса          - Строка    - Идентификатор обрабатываемой части адреса.
//     ЧастиАдреса             - Структура - Значения для других частей адреса.
//     ДополнительныеПараметры - Структура - Описание настройке поиска. Поля:
//         * СкрыватьНеактуальные              - Булево      - Флаг исключения из выборки неактуальных адресов. По
//                                                             умолчанию Ложь.
//         * ФорматАдреса - Строка      - Тип используемого классификатора.
//
// Возвращаемое значение:
//     Структура -  найденные варианты. Содержит поля:
//       * Отказ                        - Булево - Поставщик не доступен.
//       * ПодробноеПредставлениеОшибки - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * КраткоеПредставлениеОшибки   - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * Данные                       - СписокЗначений - результат для автоподбора.
//
Функция СписокАвтоподбораЧастиАдреса(Текст, ИмяЧастиАдреса, ЧастиАдреса, ДополнительныеПараметры) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Результат = Новый Структура("Данные", Новый СписокЗначений);
		Возврат СтруктураОшибкиПоставщикаАдресногоКлассификатора(Результат);
	КонецЕсли;
	
	ЧастьАдреса = ЧастиАдреса[ИмяЧастиАдреса];
	Родитель = УправлениеКонтактнойИнформациейКлиентСервер.ИдентификаторРодителяЧастиАдресаЭлемента(ЧастьАдреса, ЧастиАдреса);
	
	Уровни = Новый Массив;
	Уровни.Добавить(ЧастьАдреса.Уровень);
	
	МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
	Результат = МодульАдресныйКлассификаторСлужебный.ВариантыАвтоподбора(Текст, Родитель, Уровни, ДополнительныеПараметры);
	
	ТабличныеДанные = Результат.Данные;
	
	Результат.Данные = Новый СписокЗначений;
	Если Не Результат.Отказ Тогда
		ЗаполнитьСписокАвтоподбораИзТаблицы(Результат.Данные, ТабличныеДанные, Ложь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//  Возвращает структуру с полем "Данные", содержащую список для автоподбора населенного пункта 
//  по иерархическому представлению младший-старший.
//
//  Параметры:
//      Текст                                - Строка - текст автоподбора.
//      ДополнительныеПараметры              - Структура - Описывает настройки поиска. Состоит из необязательных полей:
//         * СкрыватьНеактуальные              - Булево - Флаг исключения из выборки неактуальных адресов. По умолчанию
//                                                        Ложь.
//         * ФорматАдреса - Строка - тип используемого классификатора.
//
// Возвращаемое значение:
//       * Отказ                        - Булево - Поставщик не доступен.
//       * ПодробноеПредставлениеОшибки - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * КраткоеПредставлениеОшибки   - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * ОбщаяЧастьПредставления      - Строка - Общая часть представлений адреса.
//       * Данные                       - СписокЗначений - результат для автоподбора.
//
Функция СписокАвтоподбораНаселенногоПункта(Текст, ДополнительныеПараметры) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Результат = Новый Структура("Данные", Новый СписокЗначений);
		Возврат СтруктураОшибкиПоставщикаАдресногоКлассификатора(Результат);
	КонецЕсли;
	
	ЧастиАдреса = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЧастейАдресаНаселенногоПункта(ДополнительныеПараметры.ФорматАдреса);
	
	Родитель = Неопределено;
	Уровни   = Новый Массив;
	Для Каждого КлючЗначение Из ЧастиАдреса Цикл
		Если КлючЗначение.Значение.Уровень < 7 Тогда
			Уровни.Добавить(КлючЗначение.Значение.Уровень);
		КонецЕсли;
	КонецЦикла;
	
	МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
	Результат = МодульАдресныйКлассификаторСлужебный.ВариантыАвтоподбора(Текст, Родитель, Уровни, ДополнительныеПараметры);
	
	ТабличныеДанные = Результат.Данные;
	
	Результат.Данные = Новый СписокЗначений;
	Если Не Результат.Отказ Тогда
		ЗаполнитьСписокАвтоподбораИзТаблицы(Результат.Данные, ТабличныеДанные, Ложь);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//  Возвращает структуру с полем "Данные", содержащую список для автоподбора улицы
//  по иерархическому представлению младший-старший.
//
//  Параметры:
//      НаселенныйПункт         - УникальныйИдентификатор - Населенный пункт.
//      Текст                   - Строка - Текст автоподбора.
//      ДополнительныеПараметры - Структура - Описывает настройки поиска. Состоит из необязательных полей:
//         * СкрыватьНеактуальные              - Булево - Флаг исключения из выборки неактуальных адресов. По умолчанию
//                                                        Ложь.
//         * ФорматАдреса - Строка - Тип используемого классификатора.
//         * РазмерПорции                      - Число  - Количество возвращаемых данных.
//
// Возвращаемое значение:
//       * Отказ                        - Булево - Поставщик не доступен.
//       * ПодробноеПредставлениеОшибки - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * КраткоеПредставлениеОшибки   - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * ОбщаяЧастьПредставления      - Строка - Общая часть представлений адреса.
//       * Данные                       - СписокЗначений - результат для автоподбора.
//
Функция СписокАвтоподбораУлицы(НаселенныйПункт, Текст, ДополнительныеПараметры) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Результат = Новый Структура("Данные", Новый СписокЗначений);
		Возврат СтруктураОшибкиПоставщикаАдресногоКлассификатора(Результат);
	КонецЕсли;
	
	ЧастиАдреса = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЧастейАдресаНаселенногоПункта(ДополнительныеПараметры.ФорматАдреса);
	
	Уровни = Новый Массив;
	Для Каждого КлючЗначение Из ЧастиАдреса Цикл
		Если КлючЗначение.Значение.Уровень > 6 Тогда 
			Уровни.Добавить(КлючЗначение.Значение.Уровень);
		КонецЕсли;
	КонецЦикла;
	
	МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
	Результат = МодульАдресныйКлассификаторСлужебный.ВариантыАвтоподбора(Текст, НаселенныйПункт, Уровни, ДополнительныеПараметры);
	
	ТабличныеДанные = Результат.Данные;
	
	Результат.Данные = Новый СписокЗначений;
	Если Не Результат.Отказ Тогда
		ЗаполнитьСписокАвтоподбораИзТаблицы(Результат.Данные, ТабличныеДанные, Истина);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//  Возвращает список значение содержащий номера домов для автоподбора.
//
//  Параметры:
//      ИдентификаторАдресногоОбъекта         - УникальныйИдентификатор - Населенный пункт или улица.
//      СтрокаПоиска                   - Строка - Текст автоподбора.
// Возвращаемое значение:
//       СписокЗначений - результат для автоподбора.
//
Функция СписокАвтоподбораНомераДомов(ИдентификаторАдресногоОбъекта, СтрокаПоиска) Экспорт
	
	ВариантыДомов = Новый СписокЗначений;
	
	СписокДомов = СписокДомов(ИдентификаторАдресногоОбъекта, СтрокаПоиска);
	Если СписокДомов <> Неопределено Тогда
		ВариантыДомов = Новый СписокЗначений;
		Для каждого Строка Из СписокДомов Цикл
			ВариантыДомов.Добавить(Строка.Значение, Строка.Представление);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВариантыДомов;
КонецФункции

// Возвращает список домов по идентификатору адресного объекта, поиск по подобию.
//
// Параметры:
//     ИдентификаторАдресногоОбъекта - УникальныйИдентификатор - Родительский объект.
//     СтрокаПоиска                  - Строка                  - Текст, отбора в списке домов.
//
// Возвращаемое значение:
//     ТаблицаЗначений  -  найденные варианты.
//
Функция СписокДомов(ИдентификаторАдресногоОбъекта, СтрокаПоиска = "") Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		СписокДомов = МодульАдресныйКлассификаторСлужебный.СписокДомов(ИдентификаторАдресногоОбъекта, СтрокаПоиска);
		Возврат СписокДомов;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


#КонецОбласти

#Область ОбщиеСлужебныеПроцедурыИФункции

// Функция раскладывает строку с данными об адресе (в формате 9 запятых) на элементы структуры.
Функция РазложитьАдресВСтруктуру(Знач СтрокаАдрес) Экспорт
	
	Страна = "";
	Индекс = "";
	Регион = "";
	Район = "";
	Город = "";
	НаселенныйПункт = "";
	Улица ="";
	Дом ="";
	Корпус ="";
	Квартира ="";

	МассивАдрес = СтрРазделить(СтрокаАдрес, ",", Истина);
	ЭлементовВМассиве = МассивАдрес.Количество();

	Если ЭлементовВМассиве > 0 Тогда
		Страна = СокрЛП(МассивАдрес[0]);
	КонецЕсли;
	Если ЭлементовВМассиве > 1 Тогда
		Индекс = СокрЛП(МассивАдрес[1]);
	КонецЕсли;
	Если ЭлементовВМассиве > 2 Тогда
		Регион = СокрЛП(МассивАдрес[2]);
	КонецЕсли;
	Если ЭлементовВМассиве > 3 Тогда
		Район = СокрЛП(МассивАдрес[3]);
	КонецЕсли;
	Если ЭлементовВМассиве > 4 Тогда
		Город = СокрЛП(МассивАдрес[4]);
	КонецЕсли;
	Если ЭлементовВМассиве > 5 Тогда
		НаселенныйПункт = СокрЛП(МассивАдрес[5]);
	КонецЕсли;
	Если ЭлементовВМассиве > 6 Тогда
		Улица = СокрЛП(МассивАдрес[6]);
	КонецЕсли;
	Если ЭлементовВМассиве > 7 Тогда
		Дом = СокрЛП(МассивАдрес[7]);
	КонецЕсли;
	Если ЭлементовВМассиве > 8 Тогда
		Корпус = СокрЛП(МассивАдрес[8]);
	КонецЕсли;
	Если ЭлементовВМассиве> 9 Тогда
		Квартира = СокрЛП(МассивАдрес[9]);
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Страна",Страна);
	СтруктураВозврата.Вставить("Индекс",Индекс);
	СтруктураВозврата.Вставить("Регион",Регион);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Город",Город);
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Улица",Улица);
	СтруктураВозврата.Вставить("Дом",Дом);
	СтруктураВозврата.Вставить("Корпус",Корпус);
	СтруктураВозврата.Вставить("Квартира",Квартира);

	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает список значений
Функция ДоступныеДляКопированияАдреса(Знач ЗначенияПолейДляАнализа, Знач ВидАдреса) Экспорт
	
	АдресТолькоРоссийский = ВидАдреса.АдресТолькоРоссийский;
	
	Результат = Новый СписокЗначений;
	
	Для Каждого Адрес Из ЗначенияПолейДляАнализа Цикл
		ДопустимыйИсточник = Истина;
		
		Представление = Адрес.Представление;
		Если ПустаяСтрока(Представление) Тогда
			// Не пустое представление
			ДопустимыйИсточник = Ложь;
		Иначе
			Если АдресТолькоРоссийский Тогда
				// В адрес, ограниченный Россией, нельзя копировать иностранный адрес.
				XMLАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(Адрес.ЗначениеПолей, Представление, ВидАдреса);
				XDTOАдрес = КонтактнаяИнформацияИзXML(XMLАдрес, ВидАдреса);
				Если Не ЭтоРоссийскийАдрес(XDTOАдрес) Тогда
					ДопустимыйИсточник = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ДопустимыйИсточник Тогда
			Результат.Добавить(Адрес.Идентификатор, Строка(Адрес.ВидАдреса) + ": " + Представление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Контактная информация'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Возвращает варианты типов домов (по признаку владения).
Функция ВариантыДанныхДом() Экспорт
	
	Возврат Новый Структура("ВариантыТипа, МожноПодбиратьЗначения", 
		УправлениеКонтактнойИнформациейКлиентСервер.НаименованияОбъектовАдресацииПоТипу(1), Ложь);
		
КонецФункции

// Возвращает варианты типов домов (по признаку строения).
Функция ВариантыДанныхСтроение() Экспорт
	
	Возврат Новый Структура("ВариантыТипа, МожноПодбиратьЗначения", 
		УправлениеКонтактнойИнформациейКлиентСервер.НаименованияОбъектовАдресацииПоТипу(2), Ложь);
		
КонецФункции

// Возвращает варианты типов помещений.
Функция ВариантыДанныхПомещение() Экспорт
	
	Возврат Новый Структура("ВариантыТипа, МожноПодбиратьЗначения", 
		УправлениеКонтактнойИнформациейКлиентСервер.НаименованияОбъектовАдресацииПоТипу(3, Ложь), Ложь);
		
КонецФункции

Процедура ЗаполнитьСписокАвтоподбораИзТаблицы(Результат, ТабличныеДанные, ЭтоПодборУлицы)
	
	КартинкаНеактуальности = БиблиотекаКартинок.КонтактнаяИнформацияНеактуально;
	КартинкаАктуальности   = Неопределено;
	
	Для Каждого Строка Из ТабличныеДанные Цикл
		Представление = Строка.Представление;
		
		Если Строка.Неактуален Тогда
			Предупреждение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Адрес ""%1"" неактуален.'"), Представление);
			Пометка        = Истина;
			Картинка       = КартинкаНеактуальности;
		Иначе
			Предупреждение = Неопределено;
			Пометка        = Ложь;
			Картинка       = КартинкаАктуальности;
		КонецЕсли;
		
		ЗначениеЭлемента = Новый Структура;
		ЗначениеЭлемента.Вставить("Идентификатор",  Строка.Идентификатор);
		ЗначениеЭлемента.Вставить("Представление",  Строка.Представление);
		ЗначениеЭлемента.Вставить("Автоподбор", Истина);
		ЗначениеЭлемента.Вставить("РегионЗагружен", Строка.РегионЗагружен);
		Если ЭтоПодборУлицы Тогда
			ЗначениеЭлемента.Вставить("Улица", Строка.Представление);
			ЗначениеЭлемента.Вставить("ДополнительныйЭлемент", "");
			ЗначениеЭлемента.Вставить("ПодчиненныйЭлемент", "");
			
		КонецЕсли;
		
		Результат.Добавить(
			Новый Структура("Предупреждение, Значение", Предупреждение, ЗначениеЭлемента),
			Представление, Пометка, Картинка);
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураОшибкиПоставщикаАдресногоКлассификатора(ИсходнаяСтруктура = Неопределено)
	
	Если ИсходнаяСтруктура = Неопределено Тогда
		ИсходнаяСтруктура = Новый Структура;
	КонецЕсли;
		
	ИсходнаяСтруктура.Вставить("Отказ", Ложь);
	ИсходнаяСтруктура.Вставить("ПодробноеПредставлениеОшибки");
	ИсходнаяСтруктура.Вставить("КраткоеПредставлениеОшибки");

	Возврат ИсходнаяСтруктура;
КонецФункции

// Преобразует контактную информацию XDTO в XML.
//
//  Параметры:
//      ОбъектXDTOИнформации - ОбъектXDTO - контактная информация.
//
// Возвращаемое значение:
//      Строка - результат преобразования в формате XML.
//
Функция КонтактнаяИнформацияXDTOВXML(ОбъектXDTOИнформации) Экспорт
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(Новый ПараметрыЗаписиXML(, , Ложь, Ложь, ""));
	
	Если ОбъектXDTOИнформации <> Неопределено Тогда
		ФабрикаXDTO.ЗаписатьXML(Запись, ОбъектXDTOИнформации);
	КонецЕсли;
	
	Результат = СтрЗаменить(Запись.Закрыть(), Символы.ПС, "&#10;");
	Результат = СтрЗаменить(Результат, "<ВнутригРайон/>", "");// Совместимость с КЛАДР
	
	Возврат Результат;
	
КонецФункции

// Преобразует XML в объект XDTO контактной информации.
//
//  Параметры:
//      Текст            - Строка - строка XML контактной информации.
//      ОжидаемыйВид     - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура
//      РезультатПреобразования - Структура - если задана, то в свойства записываются сведения:
//        * ТекстОшибки - Строка - описание ошибок чтения. При этом возвращаемое значение функции будет 
//                                 корректного типа, но не заполнен.
//
// Возвращаемое значение:
//      ОбъектXDTO - контактная информация, соответствующая XDTO-пакету КонтактнаяИнформация.
//   
Функция КонтактнаяИнформацияИзXML(Знач Текст, Знач ОжидаемыйВид = Неопределено, РезультатПреобразования = Неопределено) Экспорт
	
	ОжидаемыйТип = ТипВидаКонтактнойИнформации(ОжидаемыйВид);
	
	ПеречислениеАдрес                 = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ПеречислениеАдресЭлектроннойПочты = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ПеречислениеSkype                 = Перечисления.ТипыКонтактнойИнформации.Skype;
	ПеречислениеВебСтраница           = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	ПеречислениеТелефон               = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ПеречислениеФакс                  = Перечисления.ТипыКонтактнойИнформации.Факс;
	ПеречислениеДругое                = Перечисления.ТипыКонтактнойИнформации.Другое;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Текст) Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Текст);
		
		ТекстОшибки = Неопределено;
		Попытка
			Результат = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
		Исключение
			// Некорректный формат XML
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , Текст, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Если ТипЗнч(ОжидаемыйВид) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Некорректный формат XML контактной информации для ""%1"", значения полей были очищены.'"),
					Строка(ОжидаемыйВид));
			Иначе
				ТекстОшибки = НСтр("ru = 'Некорректный формат XML контактной информации, значения полей были очищены.'");
			КонецЕсли;
		КонецПопытки;
		
		Если ТекстОшибки = Неопределено Тогда
			// Контролируем соответствие типов.
			НайденТип = ?(Результат.Состав = Неопределено, Неопределено, Результат.Состав.Тип());
			Если ОжидаемыйТип = ПеречислениеАдрес И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается адрес'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеАдресЭлектроннойПочты И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается адрес электронной почты'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеВебСтраница И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается веб-страница'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеТелефон И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается телефон'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеФакс И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается телефон'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеSkype И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "Skype") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается Skype'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеДругое И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "Прочее") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается ""другое""'");
			КонецЕсли;
		КонецЕсли;
		
		Если ТекстОшибки = Неопределено Тогда
			// Успешно прочитано
			Возврат Результат;
		КонецЕсли;
		
		// Проверим ошибку и вернем расширенную информацию.
		Если РезультатПреобразования = Неопределено Тогда
			ВызватьИсключение ТекстОшибки;
		ИначеЕсли ТипЗнч(РезультатПреобразования) <> Тип("Структура") Тогда
			РезультатПреобразования = Новый Структура;
		КонецЕсли;
		РезультатПреобразования.Вставить("ТекстОшибки", ТекстОшибки);
		
		// Будет возвращен пустой объект.
		Текст = "";
	КонецЕсли;
	
	Если ТипЗнч(Текст) = Тип("СписокЗначений") Тогда
		Представление = "";
		ЭтоНовый = Текст.Количество() = 0;
	Иначе
		Представление = Строка(Текст);
		ЭтоНовый = ПустаяСтрока(Текст);
	КонецЕсли;
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	
	// Разбор
	Если ОжидаемыйТип = ПеречислениеАдрес Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
		Иначе
			Результат = АдресXMLВXDTO(Текст, Представление, ОжидаемыйТип);
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип = ПеречислениеТелефон Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
		Иначе
			Результат = ДесериализацияТелефона(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип = ПеречислениеФакс Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса"));
		Иначе
			Результат = ДесериализацияФакса(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип = ПеречислениеАдресЭлектроннойПочты Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта"));
		Иначе
			Результат = ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
	ИначеЕсли ОжидаемыйТип = ПеречислениеSkype Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Skype"));
		Иначе
			Результат = ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
	ИначеЕсли ОжидаемыйТип = ПеречислениеВебСтраница Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт"));
		Иначе
			Результат = ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип = ПеречислениеДругое Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Прочее"));
		Иначе
			Результат = ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)    
		КонецЕсли;
		
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Сведения о виде контактной информации %1 были повреждены или некорректно заполнены,
								|т.к. обязательное поле тип не заполнено.'");
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ?(ЗначениеЗаполнено(ОжидаемыйВид), """" + ОжидаемыйВид.Наименование + """", ""));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Разбирает представление КИ и возвращает XDTO.
//
//  Параметры:
//      Текст        - Строка  - XML
//      ОжидаемыйВид - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура.
//
// Возвращаемое значение:
//      ОбъектXDTO - контактная информация.
//
Функция КонтактнаяИнформацияXDTOПоПредставлению(Текст, ОжидаемыйВид) Экспорт
	
	ОжидаемыйТип = ТипВидаКонтактнойИнформации(ОжидаемыйВид);
	
	Если ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат АдресXMLВXDTO("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Возврат ДесериализацияПрочейКонтактнойИнформации("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Возврат ДесериализацияПрочейКонтактнойИнформации("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат ДесериализацияТелефона("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат ДесериализацияФакса("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Skype Тогда
		Возврат ДесериализацияПрочейКонтактнойИнформации("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Возврат ДесериализацияПрочейКонтактнойИнформации("", Текст, ОжидаемыйТип);
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Преобразует строку в XDTO контактную информацию адреса.
//
//  Параметры:
//      ЗначенияПолей - Строка - сериализованная информация, значения полей.
//      Представление - Строка - представление старший-младший, используется для попытки разбора, если ЗначенияПолей
//                               пусто.
//      ОжидаемыйТип  - ПеречислениеСсылка.ТипыКонтактнойИнформации - необязательный тип для контроля.
//
//  Возвращаемое значение:
//      ОбъектXDTO  - контактной информации.
//
Функция АдресXMLВXDTO(Знач ЗначенияПолей, Знач Представление = "", Знач ОжидаемыйТип = Неопределено) Экспорт
	
	ТипЗначения = ТипЗнч(ЗначенияПолей);
	РазбиратьПоПолям = (ТипЗначения = Тип("СписокЗначений") Или ТипЗначения = Тип("Структура") 
		Или (ТипЗначения = Тип("Строка") И Не ПустаяСтрока(ЗначенияПолей)));
	Если РазбиратьПоПолям Тогда
		// Разбираем из значений полей.
		Возврат ДесериализацияАдресаОбщая(ЗначенияПолей, Представление, ОжидаемыйТип);
	КонецЕсли;
	
	// Разбираем адрес из его представления по классификатору.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Возврат СформироватьАдресПоПредставлению(Представление);
	КонецЕсли;
	
	// Пустой объект с представлением.
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	Результат.Представление = Представление;
	Возврат Результат;
	
КонецФункции

Функция УровниАдресныхОбъектов(ТипАдресногоОбъекта = "Полный")
	Уровни = Новый Массив;
	Если ТипАдресногоОбъекта = "Улица" Тогда
		Уровни.Добавить(7);
		Уровни.Добавить(90);
		Уровни.Добавить(91);
	ИначеЕсли ТипАдресногоОбъекта = "НаселенныйПункт" Тогда
		Уровни.Добавить(1);
		Уровни.Добавить(2);
		Уровни.Добавить(3);
		Уровни.Добавить(4);
		Уровни.Добавить(5);
		Уровни.Добавить(6);
	Иначе
		Уровни.Добавить(1);
		Уровни.Добавить(2);
		Уровни.Добавить(3);
		Уровни.Добавить(4);
		Уровни.Добавить(5);
		Уровни.Добавить(6);
		Уровни.Добавить(7);
		Уровни.Добавить(90);
		Уровни.Добавить(91);
	КонецЕсли;
	
	Возврат Уровни;
КонецФункции

Функция СформироватьАдресПоПредставлению(Представление)
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	Результат.Представление = Представление;
	
	Адрес = Результат.Состав;
	НаименованиеРоссии = СокрЛП(Справочники.СтраныМира.Россия.Наименование);
	
	ДанныеАнализа = ЧастиАдресаТаблицей(Представление);
	Если ДанныеАнализа.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОпределитьСтрануИИндекс(ДанныеАнализа);
	СтрокаСтраны = ДанныеАнализа.Найти(-2, "Уровень");
	Если СтрокаСтраны = Неопределено Тогда
		Адрес.Страна = НаименованиеРоссии;
	Иначе
		Адрес.Страна = СокрЛП(ВРег(СтрокаСтраны.Значение));
		// Проверка наличия страны в справочнике Страны мира и неявное добавление ее в случае отсутствия.
		ДанныеСтраныМира = Справочники.СтраныМира.ДанныеСтраныМира(, Адрес.Страна);
		Если ДанныеСтраныМира <> Неопределено И НЕ ЗначениеЗаполнено(ДанныеСтраныМира.Ссылка) Тогда
			СтранаМира = Справочники.СтраныМира.СсылкаПоДаннымКлассификатора(ДанныеСтраныМира);
		КонецЕсли;
	КонецЕсли;
	
	Если Адрес.Страна = НаименованиеРоссии Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
			ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
			АдресРФ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ"));
			МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
			АдресПоУровням = МодульАдресныйКлассификаторСлужебный.УстановитьСоответствиеЧастейАдресаИхУровню(ДанныеАнализа, УровниАдресныхОбъектов());
			Если АдресПоУровням <> Неопределено Тогда
				ПоместитьАдресВXDTO(АдресРФ, АдресПоУровням);
			КонецЕсли;
			
			Если АдресПоУровням.Найти(0, "Уровень") <> Неопределено Тогда
				// Что-то осталось, считаем адресом в свободной форме.
				АдресРФ.Адрес_По_Документу = Представление;
			КонецЕсли;
			Адрес.Состав = АдресРФ;
		КонецЕсли;
	Иначе
		// Состав без страны, она остается в представлении.
		Позиция = СтрокаСтраны.Начало + СтрокаСтраны.Длина;
		Длина   = СтрДлина(Представление);
		Разделители = "," + Символы.ПС;
		Пока Позиция <= Длина И СтрНайти(Разделители, Сред(Представление, Позиция, 1)) <= 0 Цикл
			Позиция = Позиция + 1;
		КонецЦикла;
		Пока Позиция <= Длина И СтрНайти(Разделители, Сред(Представление, Позиция, 1)) > 0 Цикл
			Позиция = Позиция + 1;
		КонецЦикла;
		Адрес.Состав = СокрЛП(Лев(Представление, СтрокаСтраны.Начало - 1) + " " + СокрЛП(Сред(Представление, Позиция)));

	КонецЕсли;
		
	Возврат Результат;
КонецФункции

Функция ЧастиАдресаТаблицей(Знач Текст)
	
	ТипСтрока = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(128));
	ТипЧисло  = Новый ОписаниеТипов("Число");
	
	Результат = Новый ТаблицаЗначений;
	Колонки = Результат.Колонки;
	Колонки.Добавить("Уровень", ТипЧисло);
	Колонки.Добавить("Позиция", ТипЧисло);
	Колонки.Добавить("Значение", ТипСтрока);
	Колонки.Добавить("Наименование", ТипСтрока);
	Колонки.Добавить("Сокращение", ТипСтрока);
	Колонки.Добавить("Начало", ТипЧисло);
	Колонки.Добавить("Длина", ТипЧисло);
	Колонки.Добавить("Идентификатор", ТипСтрока);
	
	Номер = 1;
	Для Каждого Часть Из СловаТекстаТаблицей(Текст, "," + Символы.ПС) Цикл
		Значение = СокрЛП(Часть.Значение);
		Если ПустаяСтрока(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Строка = Результат.Добавить();
		
		Строка.Уровень = 0;
		Строка.Позиция  = Номер;
		Номер = Номер + 1;
		
		Строка.Начало = Часть.Начало;
		Строка.Длина  = Часть.Длина;
		
		Позиция = СтрДлина(Значение);
		Пока Позиция > 0 Цикл
			Символ = Сред(Значение, Позиция, 1);
			Если ПустаяСтрока(Символ) Тогда
				Строка.Наименование = СокрЛП(Лев(Значение, Позиция-1));
				Прервать;
			КонецЕсли;
			Строка.Сокращение = Символ + Строка.Сокращение;
			Позиция = Позиция - 1;
		КонецЦикла;
		
		Если ПустаяСтрока(Строка.Наименование) Тогда
			Строка.Наименование = СокрЛП(Строка.Сокращение);
			Строка.Сокращение   = "";
		КонецЕсли;
		Строка.Значение = Строка.Наименование + " " + Строка.Сокращение; // Значение;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ОпределитьСтрануИИндекс(ДанныеАдреса)
	
	Классификатор = Справочники.СтраныМира.ТаблицаКлассификатора();
	Для каждого ЭлементАдреса Из ДанныеАдреса Цикл
		Индекс = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЭлементАдреса.Наименование);
		Если Индекс <> Неопределено И Индекс >= 100000 И Индекс < 1000000 Тогда
			ЭлементАдреса.Уровень = -1;
		Иначе
			Если Классификатор.Найти(ВРег(ЭлементАдреса.Наименование), "Наименование") <> Неопределено Тогда
				ЭлементАдреса.Уровень = -2;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоместитьАдресВXDTO(АдресРФ, АдресПоУровням)
	
	ТаблицаЗданийПомещений = Новый ТаблицаЗначений;
	ТаблицаЗданийПомещений.Колонки.Добавить("Тип");
	ТаблицаЗданийПомещений.Колонки.Добавить("Значение");

	Для каждого ЭлементАдреса Из АдресПоУровням Цикл
		// XPath
		Если ЭлементАдреса.Уровень = 1 Тогда
			Путь = "СубъектРФ";
		ИначеЕсли ЭлементАдреса.Уровень = 2 Тогда
			Путь = "Округ";
		ИначеЕсли ЭлементАдреса.Уровень = 3 Тогда
			Путь = "СвРайМО/Район";
		ИначеЕсли ЭлементАдреса.Уровень = 4 Тогда
			Путь = "Город";
		ИначеЕсли ЭлементАдреса.Уровень = 5 Тогда
			Путь = "ВнутригРайон";
		ИначеЕсли ЭлементАдреса.Уровень = 6 Тогда
			Путь = "НаселПункт";
		ИначеЕсли ЭлементАдреса.Уровень = 7 Тогда
			Путь = "Улица";
		ИначеЕсли ЭлементАдреса.Уровень = 90 Тогда
			ДобавитьДополнительныеЭлементыАдреса(АдресРФ, ЭлементАдреса.Значение, 90);
		ИначеЕсли ЭлементАдреса.Уровень = 91 Тогда
			ДобавитьДополнительныеЭлементыАдреса(АдресРФ, ЭлементАдреса.Значение, 91);
		ИначеЕсли ЭлементАдреса.Уровень = -3 Тогда
			Продолжить;
		ИначеЕсли ЭлементАдреса.Уровень = -1 Тогда
			ПочтовыйИндексАдреса(АдресРФ, ЭлементАдреса.Наименование);
		Иначе
			// Проверка на квартиру или здание.
			Тип = СокрЛП(СтрЗаменить(ЭлементАдреса.Наименование, "№", ""));
			Если УправлениеКонтактнойИнформациейКлиентСервер.КодСериализацииОбъектаАдресации(Тип) <> Неопределено Тогда
				 // Вставляем в начало, так как порядок результата запроса у нас обратный.
				НоваяСтрока = ТаблицаЗданийПомещений.Вставить(0);
				НоваяСтрока.Значение = СокрЛП(СтрЗаменить(ЭлементАдреса.Сокращение, "№", ""));
				НоваяСтрока.Тип      = Тип;
				ЭлементАдреса.Уровень = -3;
			КонецЕсли;

			Продолжить;
		КонецЕсли;
		
		Если ЭлементАдреса.Уровень > 0 И ЭлементАдреса.Уровень < 90 Тогда
			УстановитьСвойствоПоXPath(АдресРФ, Путь, ЭлементАдреса.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗданияИПомещения = Новый Структура("Здания, Помещения", ТаблицаЗданийПомещений, ТаблицаЗданийПомещений);
	ЗданияИПомещенияАдреса(АдресРФ, ЗданияИПомещения);
	
КонецПроцедуры

// Установка глубокого свойства объекта.
Процедура УстановитьСвойствоПоXPath(ОбъектXTDO, XPath, Значение)
	
	// Переносов строки в XPath не ожидаем.
	СтрокаСвойств = СтрЗаменить(СтрЗаменить(XPath, "/", Символы.ПС), Символы.ПС + Символы.ПС, "/");
	
	ЧислоСвойств = СтрЧислоСтрок(СтрокаСвойств);
	Если ЧислоСвойств = 1 Тогда
		ОбъектXTDO.Установить(СтрокаСвойств, Значение);
		Возврат;
	ИначеЕсли ЧислоСвойств < 1 Тогда
		Возврат;
	КонецЕсли;
		
	РодительскийОбъект = Неопределено;
	ТекущийОбъект      = ОбъектXTDO;
	Для Индекс = 1 По ЧислоСвойств Цикл
		
		ТекущееИмя = СтрПолучитьСтроку(СтрокаСвойств, Индекс);
		Если ТекущийОбъект.Установлено(ТекущееИмя) Тогда
			РодительскийОбъект = ТекущийОбъект;
			ТекущийОбъект = ТекущийОбъект.ПолучитьXDTO(ТекущееИмя);
		Иначе
			НовыйТип = ТекущийОбъект.Свойства().Получить(ТекущееИмя).Тип;
			ТипТипа = ТипЗнч(НовыйТип);
			Если ТипТипа = Тип("ТипОбъектаXDTO") Тогда
				НовыйОбъект = ФабрикаXDTO.Создать(НовыйТип);
				ТекущийОбъект.Установить(ТекущееИмя, НовыйОбъект);
				РодительскийОбъект = ТекущийОбъект;
				ТекущийОбъект = НовыйОбъект; 
			ИначеЕсли ТипТипа = Тип("ТипЗначенияXDTO") Тогда
				// Непосредственное значение
				ТекущийОбъект.Установить(ТекущееИмя, Значение);
				РодительскийОбъект = Неопределено;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РодительскийОбъект <> Неопределено Тогда
		РодительскийОбъект.Установить(ТекущееИмя, Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция СловаТекстаТаблицей(Знач Текст, Знач Разделители = Неопределено)
	
	// Удаление из текста спец. символов "точек, "номеров".
	Текст = СтрЗаменить(Текст, "№", "");
	
	НачалоСлова = 0;
	Состояние   = 0;
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипЧисло  = Новый ОписаниеТипов("Число");
	
	Результат = Новый ТаблицаЗначений;
	Колонки = Результат.Колонки;
	Колонки.Добавить("Значение", ТипСтрока);
	Колонки.Добавить("Начало",   ТипЧисло);
	Колонки.Добавить("Длина",    ТипЧисло);
	
	Для Позиция = 1 По СтрДлина(Текст) Цикл
		ТекущийСимвол = Сред(Текст, Позиция, 1);
		ЭтоРазделитель = ?(Разделители = Неопределено, ПустаяСтрока(ТекущийСимвол), СтрНайти(Разделители, ТекущийСимвол) > 0);
		
		Если Состояние = 0 И (Не ЭтоРазделитель) Тогда
			НачалоСлова = Позиция;
			Состояние   = 1;
		ИначеЕсли Состояние = 1 И ЭтоРазделитель Тогда
			Строка = Результат.Добавить();
			Строка.Начало = НачалоСлова;
			Строка.Длина  = Позиция-НачалоСлова;
			Строка.Значение = Сред(Текст, Строка.Начало, Строка.Длина);
			Состояние = 0;
		КонецЕсли;
	КонецЦикла;
	
	Если Состояние = 1 Тогда
		Строка = Результат.Добавить();
		Строка.Начало = НачалоСлова;
		Строка.Длина  = Позиция-НачалоСлова;
		Строка.Значение = Сред(Текст, Строка.Начало, Строка.Длина)
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Преобразует строку в XDTO контактную информацию телефона.
//
//      ЗначенияПолей - Строка - сериализованная информация, значения полей.
//      Представление - Строка - представление старший-младший, используется для попытки разбора, если ЗначенияПолей
//                               пусто.
//      ОжидаемыйТип  - ПеречислениеСсылка.ТипыКонтактнойИнформации - необязательный тип для контроля.
//
//  Возвращаемое значение:
//      ОбъектXDTO  - контактной информации.
//
Функция ДесериализацияТелефона(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено) Экспорт
	Возврат ДесериализацияТелефонаФакса(ЗначенияПолей, Представление, ОжидаемыйТип);
КонецФункции

// Преобразует строку в XDTO контактную информацию Факса.
//
//      ЗначенияПолей - Строка - сериализованная информация, значения полей.
//      Представление - Строка - представление старший-младший, используется для попытки разбора, если ЗначенияПолей
//                               пусто.
//      ОжидаемыйТип  - ПеречислениеСсылка.ТипыКонтактнойИнформации - необязательный тип для контроля.
//
//  Возвращаемое значение:
//      ОбъектXDTO  - контактной информации.
//
Функция ДесериализацияФакса(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено) Экспорт
	Возврат ДесериализацияТелефонаФакса(ЗначенияПолей, Представление, ОжидаемыйТип);
КонецФункции

// Преобразует строку в XDTO прочую контактную информацию.
//
// Параметры:
//   ЗначенияПолей - Строка - сериализованная информация, значения полей.
//   Представление - Строка - представление старший-младший, используется для попытки разбора, если ЗначенияПолей пусто.
//   ОжидаемыйТип  - ПеречислениеСсылка.ТипыКонтактнойИнформации - необязательный тип для контроля.
//
// Возвращаемое значение:
//   ОбъектXDTO  - контактной информации.
//
Функция ДесериализацияПрочейКонтактнойИнформации(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено)
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей) Тогда
		// Общий формат контактной информации.
		Возврат КонтактнаяИнформацияИзXML(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Представление = Представление;
	
	Если ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта"));
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт"));
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Skype Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Skype"));
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Прочее"));
		
	ИначеЕсли ОжидаемыйТип <> Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка десериализации контактной информации, ожидается другой тип'");
		
	КонецЕсли;
	
	Результат.Состав.Значение = Представление;
	
	Возврат Результат;
	
КонецФункции

// Возвращает представление контактной информации, сформированное из адреса в формате XML.
//
// Параметры:
//   XMLСтрока    -  Строка - Адрес в формат XML .
//   ФорматКонтактнойИнформации  - Строка             - если указано "КЛАДР", то в представление адреса 
//                                        не включаются округ и внутригородской район.
//    ВидКонтактнойИнформации - Структура - дополнительные параметры формирования представления для адресов:
//      * Тип - Строка - Тип контактной информации;
//      * ВключатьСтрануВПредставление - Булево - в представление будет включена страна адреса;
//      * ФорматАдреса                 - Строка - если указано "КЛАДР", то в представление адреса 
//                                                не включаются округ и внутригородской район.
// Возвращаемое значение:
//      Строка - сформированное представление.
//
Функция ПредставлениеКонтактнойИнформации(Знач XMLСтрока, Знач ФорматКонтактнойИнформации) Экспорт
	
	ЭтоСтрока = ТипЗнч(XMLСтрока) = Тип("Строка");
	Если ЭтоСтрока И Не УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(XMLСтрока) Тогда
		// Предыдущий формат значений полей, возвращаем саму строку.
		Возврат XMLСтрока;
	КонецЕсли;
	
	Вид = Новый Структура("Тип,ВключатьСтрануВПредставление,ФорматАдреса", "", Ложь, "КЛАДР");
	Если ФорматКонтактнойИнформации = Неопределено Тогда
		Вид.Тип = ТипКонтактнойИнформации(?(ЭтоСтрока, XMLСтрока, КонтактнаяИнформацияИзXML(XMLСтрока)));
	Иначе
		ЗаполнитьЗначенияСвойств(Вид, ФорматКонтактнойИнформации);
	КонецЕсли;
	
	ОбъектXDTO = ?(ЭтоСтрока, КонтактнаяИнформацияИзXML(XMLСтрока), XMLСтрока);
	Если Не ПустаяСтрока(ОбъектXDTO.Представление) И Вид.ФорматАдреса = "ФИАС" Тогда
		Возврат ОбъектXDTO.Представление; // Возвращаем ранее сформированное представление.
	КонецЕсли;
	
	Возврат СформироватьПредставлениеКонтактнойИнформации(ОбъектXDTO, Вид);
	
КонецФункции

//  Вычисляет и устанавливает флаг того, что адрес был введен в свободной форме.
//  В качестве флага используется не пустота значения поля "Адрес_по_документу".
//
//  Параметры:
//      XDTOИнформация - ОбъектXDTO, Строка - Контактная информация.
//      НовоеЗначение  - Булево - необязательное устанавливаемое новое значение.
//
//  Возвращаемое значение:
//      Булево - новое значение.
//
Функция АдресВведенВСвободнойФорме(XDTOИнформация, НовоеЗначение = Неопределено) Экспорт
	НадоСериализовать = ТипЗнч(XDTOИнформация) = Тип("Строка");
	Если НадоСериализовать И Не УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(XDTOИнформация) Тогда
		// Старая версия значений полей, не поддерживается.
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектXDTO = ?(НадоСериализовать, КонтактнаяИнформацияИзXML(XDTOИнформация), XDTOИнформация);
	Если Не ЭтоРоссийскийАдрес(ОбъектXDTO) Тогда
		// Не поддерживаем
		Возврат Ложь;
	КонецЕсли;
	
	АдресРФ = ОбъектXDTO.Состав.Состав;
	Если ТипЗнч(НовоеЗначение) <> Тип("Булево") Тогда
		// Читаем
		Возврат Не ПустаяСтрока(АдресРФ.Адрес_по_документу);
	КонецЕсли;
		
	// Устанавливаем
	Если НовоеЗначение Тогда
		АдресРФ.Адрес_по_документу = ОбъектXDTO.Представление;
	Иначе
		АдресРФ.Сбросить("Адрес_по_документу");
	КонецЕсли;
	
	Если НадоСериализовать Тогда
		XDTOИнформация = КонтактнаяИнформацияXDTOВXML(ОбъектXDTO);
	КонецЕсли;
	Возврат НовоеЗначение;
КонецФункции

// Формирует и возвращает представление контактной информации.
//
// Параметры:
//   Информация    - ОбъектXDTO, Строка - контактная информация.
//   ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - параметры для формирования представления.
//   ФорматАдреса  - Строка             - если указано "КЛАДР", то в представление адреса 
//                                        не включаются округ и внутригородской район.
//
// Возвращаемое значение:
//      Строка - сформированное представление.
//
Функция СформироватьПредставлениеКонтактнойИнформации(Информация, ВидИнформации) Экспорт
	
	Если ТипЗнч(Информация) = Тип("ОбъектXDTO") Тогда
		Если Информация.Состав = Неопределено Тогда
			Возврат Информация.Представление;
		КонецЕсли;
		
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		ТипИнформации    = Информация.Состав.Тип();
		Если ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			Возврат ПредставлениеАдреса(Информация.Состав, ВидИнформации);
			
		ИначеЕсли ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
			ПредставлениеТелефона = ПредставлениеТелефона(Информация.Состав);
			Возврат ?(ПустаяСтрока(ПредставлениеТелефона), Информация.Представление, ПредставлениеТелефона);
			
		ИначеЕсли ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса") Тогда
			ПредставлениеФакса = ПредставлениеТелефона(Информация.Состав);
			Возврат ?(ПустаяСтрока(ПредставлениеТелефона), Информация.Представление, ПредставлениеФакса);
			
		ИначеЕсли ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
			Возврат Строка(Информация.Состав.Значение);
		КонецЕсли;
		
		//// Заглушка на другие типы
		Возврат Строка(Информация.Состав.Значение);
	КонецЕсли;
	
	// Старый формат или новый десериализованный.
	Если ВидИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		НоваяИнфо = АдресXMLВXDTO(Информация,,Перечисления.ТипыКонтактнойИнформации.Адрес);
		Возврат СформироватьПредставлениеКонтактнойИнформации(НоваяИнфо, ВидИнформации);
	КонецЕсли;
	
	Возврат СокрЛП(Информация);
КонецФункции

//  Возвращает флаг того, что переданный адрес - российский.
//
//  Параметры:
//      XDTOАдрес - ОбъектXDTO - Контактная информация или XDTO адреса.
//
//  Возвращаемое значение:
//      Булево - результат проверки.
//
Функция ЭтоРоссийскийАдрес(XDTOАдрес) Экспорт
	Возврат РоссийскийАдрес(XDTOАдрес) <> Неопределено;
КонецФункции

//  Возвращает извлеченный XDTO российского адреса или Неопределено для адреса иностранного.
//
//  Параметры:
//      ОбъектИнформации - ОбъектXDTO - Контактная информация или XDTO адреса.
//
//  Возвращаемое значение:
//      ОбъектXDTO - российский адрес.
//      Неопределено - нет российского адреса.
//
Функция РоссийскийАдрес(ОбъектИнформации) Экспорт
	Результат = Неопределено;
	ТипXDTO   = Тип("ОбъектXDTO");
	
	Если ТипЗнч(ОбъектИнформации) = ТипXDTO Тогда
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		
		Если ОбъектИнформации.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация") Тогда
			Адрес = ОбъектИнформации.Состав;
		Иначе
			Адрес = ОбъектИнформации;
		КонецЕсли;
		
		Если ТипЗнч(Адрес) = ТипXDTO И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			Адрес = Адрес.Состав;
		КонецЕсли;
		
		Если ТипЗнч(Адрес) = ТипXDTO И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
			Результат = Адрес;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает значения уровней 90(дополнительный элемент) и 91(подчиненный) из адреса.
//
Функция ЗначениеДополнительныхЭлементов(Знач XDTOАдрес)
	
	Результат = Новый Структура("ДополнительныйЭлемент, ПодчиненныйЭлемент");
	
	АдресРФ = РоссийскийАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	
	ДополнительныйЭлементАдреса = НайтиДополнительныйЭлементАдреса(АдресРФ);

	Результат.ДополнительныйЭлемент = ДополнительныйЭлементАдреса;
	Результат.ПодчиненныйЭлемент = ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(91));
	
	Возврат Результат;
	
КонецФункции

//  Читает и устанавливает почтовый индекс адреса.
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса.
//      НовоеЗначение - Строка     - устанавливаемое значение.
//
//  Возвращаемое значение:
//      Строка - почтовый индекс.
//
Функция ПочтовыйИндексАдреса(XDTOАдрес, НовоеЗначение = Неопределено) Экспорт
	
	АдресРФ = РоссийскийАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НовоеЗначение = Неопределено Тогда
		// Чтение
		Результат = АдресРФ.Получить( УправлениеКонтактнойИнформациейКлиентСервер.XPathПочтовогоИндекса() );
		Если Результат <> Неопределено Тогда
			Результат = Результат.Значение;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	// Запись
	КодИндекса = УправлениеКонтактнойИнформациейКлиентСервер.КодСериализацииПочтовогоИндекса();
	
	ЗаписьИндекса = АдресРФ.Получить(УправлениеКонтактнойИнформациейКлиентСервер.XPathПочтовогоИндекса());
	Если ЗаписьИндекса = Неопределено Тогда
		ЗаписьИндекса = АдресРФ.ДопАдрЭл.Добавить(ФабрикаXDTO.Создать(XDTOАдрес.ДопАдрЭл.ВладеющееСвойство.Тип));
		ЗаписьИндекса.ТипАдрЭл = КодИндекса;
	КонецЕсли;
	
	ЗаписьИндекса.Значение = СокрЛП(НовоеЗначение);
	Возврат НовоеЗначение;
КонецФункции

// Читает дополнительные элемент адреса по его пути.
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса.
//      XPathЭлемента -  Строка - Путь к элементу.
//
//  Возвращаемое значение:
//      Строка - значение элемента.
Функция ДополнительныйЭлементАдреса(XDTOАдрес, XPathЭлемента)
	
	АдресРФ = РоссийскийАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = АдресРФ.Получить(XPathЭлемента);
	Если Результат <> Неопределено Тогда
		Возврат Результат.Значение;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает дополнительный адреса.
//
Функция НайтиДополнительныйЭлементАдреса(АдресРФ) Экспорт
	
	ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(90, "СНТ"));
	Если ДополнительныйЭлементАдреса = Неопределено Тогда
		ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(90, "ГСК"));
		Если ДополнительныйЭлементАдреса = Неопределено Тогда
			ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(90, "ТЕР"));
			Если ДополнительныйЭлементАдреса = Неопределено Тогда
				ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(90));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ДополнительныйЭлементАдреса;
КонецФункции

// Добавляет дополнительные элемент адреса по его пути.
//
Процедура ДобавитьДополнительныеЭлементыАдреса(XDTOАдрес, НовоеЗначение, Уровень) Экспорт
	
	АдресРФ = РоссийскийАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	Если Уровень = 90 Тогда
		НаименованиеИСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(НовоеЗначение);
		КодСериализацииДополнительногоОбъектаАдресации = УправлениеКонтактнойИнформациейКлиентСервер.КодСериализацииДополнительногоОбъектаАдресации(90, НаименованиеИСокращение.Сокращение);
	ИначеЕсли Уровень = 91 Тогда
		КодСериализацииДополнительногоОбъектаАдресации = УправлениеКонтактнойИнформациейКлиентСервер.КодСериализацииДополнительногоОбъектаАдресации(91);
	Иначе
		КодСериализацииДополнительногоОбъектаАдресации = УправлениеКонтактнойИнформациейКлиентСервер.КодСериализацииДополнительногоОбъектаАдресации(0);
	КонецЕсли;

	XPathЭлемента = "ДопАдрЭл[ТипАдрЭл='" + КодСериализацииДополнительногоОбъектаАдресации + "']";
	ЗначениеПоля = АдресРФ.Получить(XPathЭлемента);
	Если ЗначениеПоля = Неопределено Тогда
		ЗначениеПоля = АдресРФ.ДопАдрЭл.Добавить(ФабрикаXDTO.Создать(XDTOАдрес.ДопАдрЭл.ВладеющееСвойство.Тип));
		ЗначениеПоля.ТипАдрЭл = КодСериализацииДополнительногоОбъектаАдресации;
	КонецЕсли;
	ЗначениеПоля.Значение = НовоеЗначение;
	
КонецПроцедуры

//  Возвращает почтовый индекс и ОКТМО для адреса по данным классификатора.
//
//  Параметры:
//      XDTOАдрес - ОбъектXDTO - Контактная информация или XDTO адреса.
//
//  Возвращаемое значение:
//      Структура - почтовый индекс и ОКТМО.
//        * Индекс - почтовый индекс
//        * ОКТМО - ОКТМО
//      Неопределено - индекс не найден или адрес иностранный.
//
Функция ОпределитьПочтовыйИндексИОКТМОАдреса(XDTOАдрес, Идентификатор = Неопределено) Экспорт
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	
	Если XDTOАдрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		XDTOАдресРФ = XDTOАдрес.Состав;
	Иначе 
		XDTOАдресРФ = XDTOАдрес;
	КонецЕсли;
	
	Если XDTOАдресРФ = Неопределено Или XDTOАдресРФ.Тип() <> ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
		Возврат Неопределено;// Иностранный или пустой адрес.
	КонецЕсли;
	
	ИндексИОКМТО = Новый Структура("Индекс, ОКТМО");
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		// Вызов анализа и возврат индекса варианта.
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		ИндексИОКМТО = МодульАдресныйКлассификаторСлужебный.ИндексИОКТМОАдресаПоЧастямАдреса(XDTOАдресРФ, Идентификатор);
	КонецЕсли;
	
	Возврат ИндексИОКМТО;
КонецФункции

//  Читает и устанавливает район адреса.
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса.
//      НовоеЗначение - Строка - устанавливаемое значение.
//
//  Возвращаемое значение:
//      Строка - новое значение.
//
Функция РайонАдреса(XDTOАдрес, НовоеЗначение = Неопределено)
	
	Если НовоеЗначение = Неопределено Тогда
		// Чтение
		
		Результат = Неопределено;
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		
		XDTOТип = XDTOАдрес.Тип();
		Если XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
			АдресРФ = XDTOАдрес;
		Иначе
			АдресРФ = XDTOАдрес.Состав;
		КонецЕсли;
		
		Если ТипЗнч(АдресРФ) = Тип("ОбъектXDTO") Тогда
			Возврат ПолучитьXDTOРеквизитОбъекта(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathРайона());
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	// Запись
	Запись = СвРайМО(XDTOАдрес);
	Запись.Район = НовоеЗначение;
	Возврат НовоеЗначение;
КонецФункции

//  Читает и устанавливает здания и помещения адреса. 
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса.
//      НовоеЗначение - Структура  - устанавливаемое значение. Ожидаются поля:
//                          * Здания - ТаблицаЗначений с колонками:
//                                        ** Тип      - Строка - тип внутреннего классификатора дополнительных адресных
//                                                               объектов. Например "Корпус".
//                                        ** Значение - Строка  - значение номера дома, квартиры и т.п.
//                          * Помещения - ТаблицаЗначений с колонками, аналогично полю Здание.
//
//  Возвращаемое значение:
//      Структура - текущие данные. Содержит поля:
//          * Здания - ТаблицаЗначений с колонками:
//                        ** Тип        - Строка - тип внутреннего классификатора дополнительных адресных объектов.
//                                                 Например "Корпус".
//                        ** Сокращение - Строка - сокращение названия для использования в представлении.
//                        ** Значение   - Строка - значение номера дома, квартиры и т.п.
//                        ** ПутьXPath  - Строка - путь к значению объекта.
//          * Помещения - ТаблицаЗначений с колонками, аналогично полю Здание.
//
Функция ЗданияИПомещенияАдреса(XDTOАдрес, НовоеЗначение = Неопределено) Экспорт
	
	Результат = Новый Структура("Здания, Помещения", 
		ТаблицаЗначений("Тип, Значение, Сокращение, ПутьXPath, Вид", "Тип, Вид"),
		ТаблицаЗначений("Тип, Значение, Сокращение, ПутьXPath, Вид", "Тип, Вид"));
	
	АдресРФ = РоссийскийАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НовоеЗначение <> Неопределено Тогда
		// Запись
		Если НовоеЗначение.Свойство("Здания") Тогда
			Для Каждого Строка Из НовоеЗначение.Здания Цикл
				ВставитьЗданиеПомещение(XDTOАдрес, Строка.Тип, Строка.Значение);
			КонецЦикла;
		КонецЕсли;
		Если НовоеЗначение.Свойство("Помещения") Тогда
			Для Каждого Строка Из НовоеЗначение.Помещения Цикл
				ВставитьЗданиеПомещение(XDTOАдрес, Строка.Тип, Строка.Значение);
			КонецЦикла;
		КонецЕсли;
		Возврат НовоеЗначение
	КонецЕсли;
	
	// Чтение
	Для Каждого ДопЭлемент Из АдресРФ.ДопАдрЭл Цикл
		Если ДопЭлемент.Номер <> Неопределено Тогда
			КодОбъекта = ДопЭлемент.Номер.Тип;
			ТипОбъекта = УправлениеКонтактнойИнформациейКлиентСервер.ТипОбъектаПоКодуСериализации(КодОбъекта);
			Если ТипОбъекта <> Неопределено Тогда
				Вид = ТипОбъекта.Тип;
				Если Вид = 1 Или Вид = 2 Тогда
					НоваяСтрока = Результат.Здания.Добавить();
				ИначеЕсли Вид = 3 Тогда
					НоваяСтрока = Результат.Помещения.Добавить();
				Иначе
					НоваяСтрока = Неопределено;
				КонецЕсли;
				Если НоваяСтрока <> Неопределено Тогда
					НоваяСтрока.Тип        = ТипОбъекта.Наименование;
					НоваяСтрока.Значение   = ДопЭлемент.Номер.Значение;
					НоваяСтрока.Сокращение = ТипОбъекта.Сокращение;
					НоваяСтрока.ПутьXPath  = УправлениеКонтактнойИнформациейКлиентСервер.XPathНомераДополнительногоОбъектаАдресации(НоваяСтрока.Тип);
					НоваяСтрока.Вид        = Вид;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Здания.Сортировать("Вид");
	Результат.Помещения.Сортировать("Вид");
	
	Возврат Результат;
КонецФункции

//  Возвращает представление младший-старший для населенного пункта.
//
//  Параметры:
//      ОбъектАдреса - ОбъектXDTO - адрес РФ.
//
//  Возвращаемое значение:
//      Строка - представление.
//
Функция ПредставлениеНаселенногоПункта(ОбъектАдреса) Экспорт
	
	АдресРФ = РоссийскийАдрес(ОбъектАдреса);
	Если АдресРФ = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если АдресРФ.СвРайМО = Неопределено Тогда
		Район = "";
	ИначеЕсли АдресРФ.СвРайМО.Район <> Неопределено Тогда
		Район = АдресРФ.СвРайМО.Район;
	ИначеЕсли АдресРФ.СвРайМО.СвМО <> Неопределено Тогда
		Районы = Новый Массив(АдресРФ.СвРайМО.СвМО.МунОбр2, АдресРФ.СвРайМО.СвМО.МунОбр1);
		Район = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(Районы);
	Иначе
		Район = "";
	КонецЕсли;
	
	Адрес = Новый Массив;
	Адрес.Добавить(АдресРФ.НаселПункт);
	Адрес.Добавить(АдресРФ.ВнутригРайон);
	Адрес.Добавить(АдресРФ.Город);
	Адрес.Добавить(Район);
	Адрес.Добавить(АдресРФ.Округ);
	Адрес.Добавить(АдресРФ.СубъектРФ);
	
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(Адрес);
	
КонецФункции

//  Возвращает представление младший-старший для населенного пункта.
//
//  Параметры:
//      ОбъектАдреса - ОбъектXDTO - адрес РФ.
//
//  Возвращаемое значение:
//      Строка - представление.
//
Функция ПредставлениеУлицы(ОбъектАдреса) Экспорт
	
	АдресРФ = РоссийскийАдрес(ОбъектАдреса);
	Если АдресРФ = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Адрес = Новый Массив;
	Адрес.Добавить(АдресРФ.Улица);
	
	ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(90, "СНТ"));
	Если ДополнительныйЭлементАдреса = Неопределено Тогда
		ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(90, "ГСК"));
		Если ДополнительныйЭлементАдреса = Неопределено Тогда
			ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(90, "ТЕР"));
			Если ДополнительныйЭлементАдреса = Неопределено Тогда
				ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(90));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Адрес.Добавить(ДополнительныйЭлементАдреса);
	Адрес.Добавить(ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(91)));
	
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(Адрес);
	
КонецФункции

// Формирует представление для адреса по правилу:
// 1) Страна, если надо.
// 2) Индекс, субъект рф, округ, район, город, внутригородской район, населенный пункт, улица.
// 3) Здания, помещения.
//
Функция ПредставлениеАдреса(Знач XDTOАдрес, Знач ВидИнформации) Экспорт
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	АдресРФ          = XDTOАдрес.Состав;
	Страна           = СокрЛП(XDTOАдрес.Страна);
	Если ЭтоРоссийскийАдрес(АдресРФ) Тогда
		
		// Значимые части
		Адрес = Новый Массив;
		Адрес.Добавить(ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathПочтовогоИндекса()));
		Адрес.Добавить(АдресРФ.СубъектРФ);
		Если ВидИнформации.ФорматАдреса = "ФИАС" Тогда
			Адрес.Добавить(АдресРФ.Округ);
		КонецЕсли;
		Адрес.Добавить(РайонАдреса(АдресРФ));
		Адрес.Добавить(АдресРФ.Город);
		Если ВидИнформации.ФорматАдреса = "ФИАС" Тогда
			Адрес.Добавить(АдресРФ.ВнутригРайон);
		КонецЕсли;
		Адрес.Добавить(АдресРФ.НаселПункт);
		Адрес.Добавить(АдресРФ.Улица);
		
		ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(90, "СНТ"));
		Если ДополнительныйЭлементАдреса = Неопределено Тогда
			ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(90, "ГСК"));
			Если ДополнительныйЭлементАдреса = Неопределено Тогда
				ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(90, "ТЕР"));
				Если ДополнительныйЭлементАдреса = Неопределено Тогда
					ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(90));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Адрес.Добавить(ДополнительныйЭлементАдреса);
		Адрес.Добавить(ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(91)));
		
		Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(Адрес);
	
		// Строения и помещения
		НомерНеВыведен = Истина;
		Данные = ЗданияИПомещенияАдреса(АдресРФ);
		Для Каждого Строка Из Данные.Здания Цикл
			Здания = Новый Массив;
			Здания.Добавить(Представление); 
			Здания.Добавить(СокрЛП(Строка.Сокращение + ?(НомерНеВыведен, " № ", " ") + Строка.Значение));
			Представление =  УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(Здания);
			НомерНеВыведен = Ложь;
		КонецЦикла;
		
		Для Каждого Строка Из Данные.Помещения Цикл
			Помещения = Новый Массив;
			Помещения.Добавить(Представление);
			Помещения.Добавить(СокрЛП(Строка.Сокращение + " " + Строка.Значение));
			Представление =  УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(Помещения);
		КонецЦикла;
		
		// При пустом представлении страну нет смысла выводить.
		Если ПустаяСтрока(Представление) Тогда
			Страна = "";
		КонецЕсли;
	Иначе
		// Это иностранный адрес
		Представление = СокрЛП(АдресРФ);
		
		Если СтрЧислоВхождений(Представление, ",") = 9 Тогда
			// Удаляем пустые значения и страну
			ПредставлениеМассивом = СтрРазделить(Представление, ",", Ложь);
			Если ПредставлениеМассивом.Количество() > 0 Тогда
				Для Индекс = 0 По ПредставлениеМассивом.ВГраница() Цикл
					ПредставлениеМассивом[Индекс] = СокрЛП(ПредставлениеМассивом[Индекс]);
				КонецЦикла;
				ПредставлениеМассивом.Удалить(0); // удаляем страну
				Представление = СтрСоединить(ПредставлениеМассивом, ", ");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидИнформации.ВключатьСтрануВПредставление Тогда
		ДобавлениеСтраны = Новый Массив;
		ДобавлениеСтраны.Добавить(Страна);
		ДобавлениеСтраны.Добавить(Представление);
		Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(ДобавлениеСтраны);
	КонецЕсли;
	Возврат Представление;
	
КонецФункции

//  Возвращает перечень ошибок для адреса.
//
// Параметры:
//     XDTOАдрес         - ОбъектXDTO, СписокЗначений, Строка - описание адреса.
//     ВидИнформации     - СправочникСсылка.ВидыКонтактнойИнформации, Структура - ссылка на соответствующий вид
//                         контактной информации.
//     РезультатГруппами - Булево - если указана Истина, то будет возвращен массив групп ошибок, иначе - список
//                                  значений.
//
// Возвращаемое значение:
//     СписокЗначений - если параметр РезультатГруппами равен Ложь. Внутри представление - текст ошибки, значение -
//                      XPath ошибочного поля.
//     Массив         - если параметр РезультатГруппами равен Истина. Содержит структуры с полями:
//                         ** ТипОшибки - Строка - наименование группы (типа) ошибки. Возможные значения:
//                               "ПредставлениеНеСоответствуетНаборуПолей"
//                               "НеЗаполненыОбязательныеПоля"
//                               "НеУказаныСокращенияПолей"
//                               "НедопустимыеСимволыПолей"
//                               "НеСоответствуетДлинаПолей"
//                               "ОшибкиПоКлассификатору".
//                         ** Сообщение - Строка - подробный текст ошибки.
//                         ** Поля      - Массив - содержит структуры описания ошибочных полей. Каждая структура имеет
//                                                 реквизиты:
//                               *** ИмяПоля   - Строка - внутренний идентификатор ошибочного элемента адреса.
//                               *** Сообщение - Строка - подробный текст ошибки для этого поля.
//
Функция ОшибкиЗаполненияАдресаXDTO(XDTOАдрес, ВидИнформации, РезультатГруппами = Ложь) Экспорт
	
	Если ТипЗнч(XDTOАдрес) = Тип("ОбъектXDTO") Тогда
		АдресРФ = XDTOАдрес.Состав;
	Иначе
		XTDOКонтактная = АдресXMLВXDTO(XDTOАдрес);
		Адрес = XTDOКонтактная.Состав;
		АдресРФ = ?(Адрес = Неопределено, Неопределено, Адрес.Состав);
	КонецЕсли;
	
	// Флаги проверки
	Если ТипЗнч(ВидИнформации) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		ФлагиПроверки = СтруктураВидаКонтактнойИнформации(ВидИнформации);
	Иначе
		ФлагиПроверки = ВидИнформации;
	КонецЕсли;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Если ТипЗнч(АдресРФ) <> Тип("ОбъектXDTO") Или АдресРФ.Тип() <> ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
		// Адрес за пределами РФ
		Результат = ?(РезультатГруппами, Новый Массив, Новый СписокЗначений);
		
		Если ФлагиПроверки.АдресТолькоРоссийский Тогда
			ТекстОшибки = НСтр("ru = 'Адрес должен быть только российским.'");
			Если РезультатГруппами Тогда
				Результат.Добавить(Новый Структура("Поля, ТипОшибки, Сообщение", Новый Массив,
					"НеЗаполненыОбязательныеПоля", ТекстОшибки));
			Иначе
				Результат.Добавить("/", ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	// Отдельно проверяем пустой адрес, если необходимо его заполнение.
	Если Не XDTOКонтактнаяИнформацияЗаполнена(АдресРФ) Тогда
		// Адрес пуст
		Если ФлагиПроверки.ОбязательноеЗаполнение Тогда
			// Но должен быть заполнен
			ТекстОшибки = НСтр("ru = 'Адрес не заполнен.'");
			
			Если РезультатГруппами Тогда
				Результат = Новый Массив;
				Результат.Добавить(Новый Структура("Поля, ТипОшибки, Сообщение", Новый Массив,
					"НеЗаполненыОбязательныеПоля", ТекстОшибки));
			Иначе
				Результат = Новый СписокЗначений;
				Результат.Добавить("/", ТекстОшибки);
			КонецЕсли;
			
			Возврат Результат
		КонецЕсли;
		
		// Адрес пуст и не должен быть заполнен - считаем его корректным.
		Возврат ?(РезультатГруппами, Новый Массив, Новый СписокЗначений);
	КонецЕсли;
	
	ВсеОшибки = ОбщиеГруппыОшибокЗаполненияАдреса(АдресРФ, ФлагиПроверки);
	ПроверятьКлассификатор = Истина;
	
	Для Каждого Группа Из ВсеОшибки Цикл
		Если СтрНайти("НеУказаныСокращенияПолей, НедопустимыеСимволыПолей", Группа.ТипОшибки) > 0 Тогда
			// Некорректные данные в полях, проверять их по классификатору нет смысла.
			ПроверятьКлассификатор = Ложь;
			Прервать;
		КонецЕсли
	КонецЦикла;
	
	ОшибкиКлассификатора = Новый СписокЗначений;
	Если ПроверятьКлассификатор И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		ЗаполнитьОшибкиАдресаПоКлассификатору(АдресРФ, ФлагиПроверки, ОшибкиКлассификатора);
	КонецЕсли;
		
	Если РезультатГруппами Тогда
		НаименованиеГруппыОшибки = "ОшибкиПоКлассификатору";
		КоличествоОшибок = ОшибкиКлассификатора.Количество();
		
		Если КоличествоОшибок = 1 И ОшибкиКлассификатора[0].Значение <> Неопределено
			И ОшибкиКлассификатора[0].Значение.ПутьXPath = Неопределено Тогда
			ВсеОшибки.Добавить(ГруппаОшибокАдреса(НаименованиеГруппыОшибки, ОшибкиКлассификатора[0].Представление));
			
		ИначеЕсли КоличествоОшибок > 0 Тогда
			// Подробное описание ошибок
			ВсеОшибки.Добавить(ГруппаОшибокАдреса(НаименованиеГруппыОшибки,
				НСтр("ru = 'Части адреса не соответствуют адресному классификатору:'")));
				
			ГруппаОшибокКлассификатора = ВсеОшибки[ВсеОшибки.ВГраница()];
			
			СписокСущностей = "";
			Для Каждого Элемент Из ОшибкиКлассификатора Цикл
				ЭлементОшибки = Элемент.Значение;
				Если ЭлементОшибки = Неопределено Тогда
					// Абстрактная ошибка
					ДобавитьОшибкуЗаполненияАдреса(ГруппаОшибокКлассификатора, "", Элемент.Представление);
				Иначе
					ДобавитьОшибкуЗаполненияАдреса(ГруппаОшибокКлассификатора, ЭлементОшибки.ПутьXPath, Элемент.Представление);
					СписокСущностей = СписокСущностей + ", " + ЭлементОшибки.СущностьПоля;
				КонецЕсли;
			КонецЦикла;
			
			ГруппаОшибокКлассификатора.Сообщение = ГруппаОшибокКлассификатора.Сообщение + Сред(СписокСущностей, 2);
		КонецЕсли;
		
		Возврат ВсеОшибки;
	КонецЕсли;
	
	// Объединяем все в список
	Результат = Новый СписокЗначений;
	Для Каждого Группа Из ВсеОшибки Цикл
		Для Каждого Поле Из Группа.Поля Цикл
			Результат.Добавить(Поле.ИмяПоля, Поле.Сообщение);
		КонецЦикла;
	КонецЦикла;
	Для Каждого ЭлементСписка Из ОшибкиКлассификатора Цикл
		Результат.Добавить(ЭлементСписка.Значение.ПутьXPath, ЭлементСписка.Представление, ЭлементСписка.Значение.АдресПроверен);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Общие проверки на корректность адреса.
//
//  Параметры:
//      ДанныеАдреса  - Строка, СписокЗначений - XML, XDTO с данными адреса РФ.
//      ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - ссылка на соответствующий вид контактной информации.
//
// Возвращаемое значение:
//      Массив - содержит структуры с полями:
//         * ТипОшибки - Строка - идентификатор группы ошибки. Может принимать значение:
//              "ПредставлениеНеСоответствуетНаборуПолей",
//              "НеЗаполненыОбязательныеПоля"
//              "НеУказаныСокращенияПолей"
//              "НедопустимыеСимволыПолей"
//              "НеСоответствуетДлинаПолей".
//         * Сообщение - Строка - Подробный текст ошибки.
//         * Поля - Массив структур с полями:
//             ** ИмяПоля - внутренний идентификатор ошибочного поля.
//             ** Сообщение - подробный текст ошибки для поля.
//
Функция ОбщиеГруппыОшибокЗаполненияАдреса(Знач ДанныеАдреса, Знач ВидИнформации)
	Результат = Новый Массив;
	
	Если ТипЗнч(ДанныеАдреса) = Тип("ОбъектXDTO") Тогда
		АдресРФ = ДанныеАдреса;
		
	Иначе
		XTDOКонтактная = АдресXMLВXDTO(ДанныеАдреса);
		Адрес = XTDOКонтактная.Состав;
		Если Не ЭтоРоссийскийАдрес(Адрес) Тогда
			Возврат Результат;
		КонецЕсли;
		АдресРФ = Адрес.Состав;
		
		// С) совпадение представления и набора данных.
		Представление = ПредставлениеАдреса(АдресРФ, ВидИнформации);
		Если XTDOКонтактная.Представление <> Представление Тогда
			Результат.Добавить(ГруппаОшибокАдреса("ПредставлениеНеСоответствуетНаборуПолей",
				НСтр("ru = 'Адрес не соответствует значениям в наборе полей.'")));
			ДобавитьОшибкуЗаполненияАдреса(Результат[0], "",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Представление адреса для вида контактной информации ""%1"" отличается от данных в адресе.'"),
				Строка(ВидИнформации.Наименование)));
		КонецЕсли;
	КонецЕсли;
	
	НеЗаполненыОбязательныеПоля = ГруппаОшибокАдреса("НеЗаполненыОбязательныеПоля",
		НСтр("ru = 'Не заполнены обязательные поля:'"));
	Результат.Добавить(НеЗаполненыОбязательныеПоля);
	
	НеУказаныСокращенияПолей = ГруппаОшибокАдреса("НеУказаныСокращенияПолей",
		НСтр("ru = 'Не указано сокращение для полей:'"));
	Результат.Добавить(НеУказаныСокращенияПолей);
	
	НедопустимыеСимволыПолей = ГруппаОшибокАдреса("НедопустимыеСимволыПолей",
		НСтр("ru = 'Найдены недопустимые символы в полях:'"));
	Результат.Добавить(НедопустимыеСимволыПолей);
	
	НеСоответствуетДлинаПолей = ГруппаОшибокАдреса("НеСоответствуетДлинаПолей",
		НСтр("ru = 'Не соответствует установленной длина полей:'"));
	Результат.Добавить(НеСоответствуетДлинаПолей);
	
	// 2) Индекс, Регион, Дом должны быть заполнены.
	Индекс = ПочтовыйИндексАдреса(АдресРФ);
	Если ПустаяСтрока(Индекс) Тогда
		ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, УправлениеКонтактнойИнформациейКлиентСервер.XPathПочтовогоИндекса(),
			НСтр("ru = 'Не указан почтовый индекс.'"), "Индекс");
	КонецЕсли;
	
	Регион = АдресРФ.СубъектРФ;
	Если ПустаяСтрока(Регион) Тогда
		ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, "СубъектРФ",
			НСтр("ru = 'Не указан регион.'"), "Регион");
	КонецЕсли;
	
	ЗданияПомещения = ЗданияИПомещенияАдреса(АдресРФ);
	Если ИсключатьПроверкуДомаВАдресе(АдресРФ) Тогда
		// Должно быть заполнено хоть какое-нибудь здание.
		
		ЗданиеНеУказано = Истина;
		Для Каждого ДанныеДома Из ЗданияПомещения.Здания Цикл
			Если Не ПустаяСтрока(ДанныеДома.Значение) Тогда
				ЗданиеНеУказано = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗданиеНеУказано Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, 
				УправлениеКонтактнойИнформациейКлиентСервер.XPathНомераДополнительногоОбъектаАдресации("Дом"),
				НСтр("ru = 'Не указан дом или корпус'"), 
				НСтр("ru = 'Дом'"));
		КонецЕсли;
			
	Иначе
		// Должен быть указан дом (владение и т.п) с возможным уточнением корпусом, строением и т.п.
		
		ДанныеДома = ЗданияПомещения.Здания.Найти(1, "Вид");	// 1 - Вид по признаку владения.
		Если ДанныеДома = Неопределено Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, 
				УправлениеКонтактнойИнформациейКлиентСервер.XPathНомераДополнительногоОбъектаАдресации("Дом"),
				НСтр("ru = 'Не указан дом или владение (домовладение).'"),
				НСтр("ru = 'Дом'"));
		ИначеЕсли ПустаяСтрока(ДанныеДома.Значение) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, ДанныеДома.ПутьXPath,
				НСтр("ru = 'Не заполнено значение дома или владения (домовладения).'"),
				НСтр("ru = 'Дом'"));
		КонецЕсли;
		
	КонецЕсли;
	
	// 3) Регион, Район, Город, НаселенныйПункт, Улица должны:    
	//      - иметь сокращение
	//      - не длинней 50 символов
	//      - только кириллица.
	
	ДопустимоКромеКириллицы = "/,-. 0123456789_N";
	
	// Регион
	Если Не ПустаяСтрока(Регион) Тогда
		Поле = "СубъектРФ";
		Если ПустаяСтрока(УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(Регион)) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, "СубъектРФ",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указано сокращение в названии региона ""%1"".'"), Регион), НСтр("ru = 'Регион'"));
		КонецЕсли;
		Если СтрДлина(Регион) > 50 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Название региона ""%1"" должно быть короче 50 символов.'"),Регион), НСтр("ru = 'Регион'"));
		КонецЕсли;
		Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Регион, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В названии региона ""%1"" есть не кириллические символы.'"), Регион), НСтр("ru = 'Регион'"));
		КонецЕсли
	КонецЕсли;
	
	// Район
	Район = РайонАдреса(АдресРФ);
	Если Не ПустаяСтрока(Район) Тогда
		Поле = УправлениеКонтактнойИнформациейКлиентСервер.XPathРайона();
		Если ПустаяСтрока(УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(Район)) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указано сокращение в названии района ""%1"".'"), Район), НСтр("ru = 'Район'"));
		КонецЕсли;
		Если СтрДлина(Район) > 50 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Название района ""%1"" должно быть короче 50 символов.'"), Район), НСтр("ru = 'Район'"));
		КонецЕсли;
		Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Район, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В названии района ""%1"" есть не кириллические символы.'"), Район), НСтр("ru = 'Район'"));
		КонецЕсли;
	КонецЕсли;
	
	// Город
	Город = АдресРФ.Город;
	Если Не ПустаяСтрока(Город) Тогда
		Поле = "Город";
		Если ПустаяСтрока(УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(Город)) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указано сокращение в названии города ""%1"".'"), Город), НСтр("ru = 'Город'"));
		КонецЕсли;
		Если СтрДлина(Город) > 50 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Название города ""%1"" должно быть короче 50 символов.'"), Город), НСтр("ru = 'Город'"));
		КонецЕсли;
		Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Город, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В названии города ""%1"" есть не кириллические символы.'"), Город), НСтр("ru = 'Город'"));
		КонецЕсли;
	КонецЕсли;
	
	// Населенный пункт
	НаселенныйПункт = АдресРФ.НаселПункт;
	Если Не ПустаяСтрока(НаселенныйПункт) Тогда
		Поле = "НаселПункт";
		Если ПустаяСтрока(УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(НаселенныйПункт)) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указано сокращение в названии населенного пункта ""%1"".'"), НаселенныйПункт),
					НСтр("ru = 'Населенный пункт'"));
		КонецЕсли;
		Если СтрДлина(НаселенныйПункт) > 50 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Название населенного пункта ""%1"" должно быть короче 50 символов.'"), НаселенныйПункт),
				НСтр("ru = 'Населенный пункт'"));
		КонецЕсли;
		Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(НаселенныйПункт, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В названии населенного пункта ""%1"" есть не кириллические символы.'"), НаселенныйПункт),
					НСтр("ru = 'Населенный пункт'"));
		КонецЕсли;
	КонецЕсли;
	
	// Улица
	Улица = АдресРФ.Улица;
	Если Не ПустаяСтрока(Улица) Тогда
		Поле = "Улица";
		Если ПустаяСтрока(УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(Улица)) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указано сокращение в названии улицы ""%1"".'"), Улица), НСтр("ru = 'Улица'"));
		КонецЕсли;
		Если СтрДлина(Район) > 50 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Название улицы ""%1"" должно быть короче 50 символов.'"), Улица), НСтр("ru = 'Улица'"));
		КонецЕсли;
		Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Улица, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В названии улицы ""%1"" есть не кириллические символы.'"), Улица), НСтр("ru = 'Улица'"));
		КонецЕсли;
	КонецЕсли;
	
	// Дополнительный элемент
	ДополнительныйЭлемент = НайтиДополнительныйЭлементАдреса(АдресРФ);
	Если ЗначениеЗаполнено(ДополнительныйЭлемент) Тогда
		Поле = "Улица";
		Если ПустаяСтрока(УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(ДополнительныйЭлемент)) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указано сокращение у дополнительного элемента ""%1"".'"), ДополнительныйЭлемент),
				НСтр("ru = 'Улица'"));
		КонецЕсли;
		Если СтрДлина(Район) > 50 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Название дополнительного элемента ""%1"" должно быть короче 50 символов.'"), ДополнительныйЭлемент),
				НСтр("ru = 'ДополнительныйЭлемент'"));
		КонецЕсли;
		Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(ДополнительныйЭлемент, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В названии дополнительного элемента ""%1"" есть не кириллические символы.'"), ДополнительныйЭлемент),
				НСтр("ru = 'ДополнительныйЭлемент'"));
		КонецЕсли;
	КонецЕсли;
	
	// 4) Индекс - если есть, то 6 цифр.
	Если Не ПустаяСтрока(Индекс) Тогда
		Поле = УправлениеКонтактнойИнформациейКлиентСервер.XPathПочтовогоИндекса();
		Если СтрДлина(Индекс) <> 6 Или Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Индекс) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле,
				НСтр("ru = 'Почтовый индекс должен состоять из 6 цифр.'"),
				НСтр("ru = 'Индекс'"));
		КонецЕсли;
	КонецЕсли;
	
	// 5) Дом, Корпус, Квартира не длинней 10 символов.
	Для Каждого ДанныеЗдания Из ЗданияПомещения.Здания Цикл
		Если СтрДлина(ДанныеЗдания.Значение) > 10 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, ДанныеЗдания.ПутьXPath,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Значение поля ""%1"" должно быть короче 10 символов.'"), ДанныеЗдания.Тип), ДанныеЗдания.Тип);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ДанныеПомещения Из ЗданияПомещения.Помещения Цикл
		Если СтрДлина(ДанныеПомещения.Значение) > 10 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, ДанныеПомещения.ПутьXPath,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Значение поля ""%1"" должно быть короче 10 символов.'"), ДанныеПомещения.Тип), ДанныеПомещения.Тип);
		КонецЕсли;
	КонецЦикла;
	
	// 6) Поля Город и НаселенныйПункт могут быть одновременно пустые только в регионе - городе ФЗ.
	Если ПустаяСтрока(Город) И ПустаяСтрока(НаселенныйПункт) Тогда
		Если НазванияГородовФедеральногоЗначения().Найти(ВРег(Регион)) = Неопределено Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, "Город",
				НСтр("ru = 'Город может быть не указан только в регионе - городе федерального значения.'"),
				НСтр("ru = 'Город'"));
			ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, "НаселПункт",
				НСтр("ru = 'Населенный пункт может быть не указан только в регионе - городе федерального значения.'"),
				НСтр("ru = 'Населенный пункт'"));
		КонецЕсли;
	КонецЕсли;
	
	// 7) Улица не может быть пустой если НаселенныйПункт пустой.
	Если Не ИсключатьПроверкуУлицыВАдресе(АдресРФ) Тогда
		
		Если ПустаяСтрока(НаселенныйПункт) И ПустаяСтрока(Улица) И НЕ ЗначениеЗаполнено(ДополнительныйЭлемент) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, "Улица",
				НСтр("ru = 'Город или населенный пункт должен содержать название улицы.'"), 
				НСтр("ru = 'Улица'"));
		КонецЕсли;
		
	КонецЕсли;
	
	// Все. Убираем пустые результаты, корректируем сообщение группы.
	Для Индекс = 1-Результат.Количество() По 0 Цикл
		Группа = Результат[-Индекс];
		Поля = Группа.Поля;
		СписокСущностей = "";
		Для ИндексПоля = 1-Поля.Количество() По 0 Цикл
			Поле = Поля[-ИндексПоля];
			Если ПустаяСтрока(Поле.Сообщение) Тогда
				Поля.Удалить(-ИндексПоля);
			Иначе
				СписокСущностей = ", " + Поле.СущностьПоля + СписокСущностей;
				Поле.Удалить("СущностьПоля");
			КонецЕсли;
		КонецЦикла;
		Если Поля.Количество() = 0 Тогда
			Результат.Удалить(-Индекс);
		ИначеЕсли Не ПустаяСтрока(СписокСущностей) Тогда
			Группа.Сообщение = Группа.Сообщение + Сред(СписокСущностей, 2);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Локальные исключения при проверке адреса.
//
Функция ИсключатьПроверкуДомаВАдресе(Знач АдресРФ)
	Результат = Ложь;
	
	// В Зеленограде может быть указан непосредственно корпус, без дома/владения.
	Если ВРег(СокрЛП(АдресРФ.СубъектРФ)) = НСтр("ru = 'МОСКВА Г'") И ВРег(СокрЛП(АдресРФ.Город)) = НСтр("ru = 'ЗЕЛЕНОГРАД Г'") Тогда
		Результат = Истина;
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

// Локальные исключения при проверке адреса.
//
Функция ИсключатьПроверкуУлицыВАдресе(Знач АдресРФ)
	Результат = Ложь;
	
	// В Зеленограде улицы не проверяем.
	Если ВРег(СокрЛП(АдресРФ.СубъектРФ)) = НСтр("ru = 'МОСКВА Г'") И ВРег(СокрЛП(АдресРФ.Город)) = НСтр("ru = 'ЗЕЛЕНОГРАД Г'") Тогда
		Результат = Истина;
	КонецЕсли;
	
	// Дополнительные элементы адреса могут быть без улиц.
	ДополнительныеЭлементы = ЗначениеДополнительныхЭлементов(АдресРФ);
	Если ЗначениеЗаполнено(ДополнительныеЭлементы.ДополнительныйЭлемент) Тогда
		Результат = Истина;
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

//  Возвращает массив наименований регионов - городов федерального значения.
Функция НазванияГородовФедеральногоЗначения()
	
	Результат = Новый Массив;
	Результат.Добавить("МОСКВА Г");
	Результат.Добавить("САНКТ-ПЕТЕРБУРГ Г");
	Результат.Добавить("СЕВАСТОПОЛЬ Г");
	Результат.Добавить("БАЙКОНУР Г");
	
	Возврат Результат;
КонецФункции

Функция ПредставлениеТелефона(XDTOДанные) Экспорт
	
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
		СократитьНеЦифры(XDTOДанные.КодСтраны), 
		XDTOДанные.КодГорода,
		XDTOДанные.Номер,
		XDTOДанные.Добавочный,
		"");
		
КонецФункции

//  Возвращает представление факса.
//
//  Параметры:
//      XDTOДанные    - ОбъектXDTO - контактная информация.
//      ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - ссылка на соответствующий вид контактной информации.
//
// Возвращаемое значение:
//      Строка - представление.
//
Функция ПредставлениеФакса(XDTOДанные, ВидИнформации = Неопределено) Экспорт
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
		СократитьНеЦифры(XDTOДанные.КодСтраны), 
		XDTOДанные.КодГорода,
		XDTOДанные.Номер,
		XDTOДанные.Добавочный,
		"");
КонецФункции    

// Возвращает флаг того, что текущий пользователь может загружать или очищать адресный классификатор.
//
// Возвращаемое значение:
//     Булево- результат проверки.
//
Функция ЕстьВозможностьИзмененияАдресногоКлассификатора() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		ОбъектКонтроля = Метаданные.РегистрыСведений.Найти("АдресныеОбъекты");
		Возврат ОбъектКонтроля <> Неопределено И ПравоДоступа("Изменение", ОбъектКонтроля) И НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Конструктор структуры, совместимой по полям со справочникам видов КИ.
//
// Параметры:
//     Источник - СправочникСсылка.ВидыКонтактнойИнформации - необязательный источник данных для заполнения.
//
// Возвращаемое значение:
//     Структура - совместимая по полям со справочникам видов КИ.
//
Функция СтруктураВидаКонтактнойИнформации(Знач Источник = Неопределено) Экспорт
	
	МетаданныеРеквизитов = Метаданные.Справочники.ВидыКонтактнойИнформации.Реквизиты;
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		Реквизиты = "Наименование";
		Для Каждого МетаданныеРеквизита Из МетаданныеРеквизитов Цикл
			Реквизиты = Реквизиты + "," + МетаданныеРеквизита.Имя;
		КонецЦикла;
		
		Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, Реквизиты);
	КонецЕсли;
	
	Результат = Новый Структура("Наименование", "");
	Для Каждого МетаданныеРеквизита Из МетаданныеРеквизитов Цикл
		Результат.Вставить(МетаданныеРеквизита.Имя, МетаданныеРеквизита.Тип.ПривестиЗначение());
	КонецЦикла;
	Если Источник <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, Источник);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Обновляет агрегатное поле ВидДляСписка контактной информацию у объекта.
//
// Параметры:
//  Объект - СправочникОбъект - Объект с табличной часть КонтактнаяИнформация.
//
Процедура ОбновитьКонтактнуюИнформациюДляСписковДляОбъекта(Объект) Экспорт
	
	КонтактнаяИнформация = Объект.КонтактнаяИнформация;
	
	Если КонтактнаяИнформация.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = КонтактнаяИнформация.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Если НЕ ЗначениеЗаполнено(КонтактнаяИнформация[Индекс].Вид) Тогда
			КонтактнаяИнформация.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс -1;
	КонецЦикла;
	
	КолонкаДействуетСОтсутствует = (Объект.Метаданные().ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ДействуетС") = Неопределено);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	КонтактнаяИнформация.Вид КАК Вид" + ?(КолонкаДействуетСОтсутствует, "", ", КонтактнаяИнформация.ДействуетС КАК ДействуетС") + "
		|ПОМЕСТИТЬ КонтактнаяИнформация
		|ИЗ
		|	&КонтактнаяИнформация КАК КонтактнаяИнформация
		|;");
	
	Если КолонкаДействуетСОтсутствует Тогда
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	КОЛИЧЕСТВО(КонтактнаяИнформация.Вид) КАК Количество
		|ИЗ
		|	КонтактнаяИнформация КАК КонтактнаяИнформация
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Представление ИТОГИ ПО Вид";
	Иначе
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	МАКСИМУМ(КонтактнаяИнформация.ДействуетС) КАК ДействуетС
		|ПОМЕСТИТЬ АктуальнаяКонтактнаяИнформация
		|ИЗ
		|	КонтактнаяИнформация КАК КонтактнаяИнформация
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтактнаяИнформация.Вид
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	КонтактнаяИнформация.ДействуетС КАК ДействуетС,
		|	КОЛИЧЕСТВО(КонтактнаяИнформация.Вид) КАК Количество
		|ИЗ
		|	АктуальнаяКонтактнаяИнформация КАК АктуальнаяКонтактнаяИнформация
		|		ЛЕВОЕ СОЕДИНЕНИЕ КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО АктуальнаяКонтактнаяИнформация.ДействуетС = КонтактнаяИнформация.ДействуетС
		|			И АктуальнаяКонтактнаяИнформация.Вид = КонтактнаяИнформация.Вид
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Представление,
		| КонтактнаяИнформация.ДействуетС
		|ИТОГИ ПО
		|	Вид, ДействуетС"; 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КонтактнаяИнформация", КонтактнаяИнформация);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаВид = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВид.Следующий() Цикл
		ВыборкаДетальныеЗаписи = ВыборкаВид.Выбрать();
		Если ВыборкаВид.Количество = 1 Тогда
			Если КолонкаДействуетСОтсутствует Тогда
				СтрокаТаблиц = КонтактнаяИнформация.Найти(ВыборкаВид.Вид, "Вид");
				СтрокаТаблиц.ВидДляСписка = ВыборкаВид.Вид;
			Иначе
				ДействуетС = Дата(1,1,1);
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ЗначениеЗаполнено(ВыборкаВид.ДействуетС) Тогда
						ДействуетС = ВыборкаВид.ДействуетС;
					КонецЕсли;
				КонецЦикла;
				Для каждого СтрокаСКонтактнойИнформацией Из КонтактнаяИнформация Цикл
					Если СтрокаСКонтактнойИнформацией.Вид = ВыборкаВид.Вид 
						И СтрокаСКонтактнойИнформацией.ДействуетС = ДействуетС Тогда
						СтрокаСКонтактнойИнформацией.ВидДляСписка = ВыборкаВид.Вид;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ВыборкаВид.Количество > 1 Тогда
			СтрокаТаблиц = КонтактнаяИнформация.Добавить();
			СтрокаТаблиц.ВидДляСписка = ВыборкаВид.Вид;
			Разделитель = "";
			Представление = "";
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Представление = Представление +Разделитель + ВыборкаДетальныеЗаписи.Представление;
				Разделитель = ", ";
			КонецЦикла;
			СтрокаТаблиц.Представление = Представление;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обновляет агрегатное поле ВидДляСписка в табличных частях КонтактнаяИнформация у всех объекта.
//
Процедура ОбновитьКонтактнуюИнформациюДляСписков() Экспорт
	
	ОбъектыСКолонкойВидДляСписка = ОбъектыСодержащиеВидДляСписка();
	
	Для каждого ОбъектСсылка Из ОбъектыСКолонкойВидДляСписка Цикл
		Объект = ОбъектСсылка.ПолучитьОбъект();
		КонтактнаяИнформация = Объект.КонтактнаяИнформация;
		
		Отбор = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.ПустаяСсылка());
		СтрокиДляУдаления = КонтактнаяИнформация.НайтиСтроки(Отбор);
		Для каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			КонтактнаяИнформация.Удалить(СтрокаДляУдаления);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление КАК Представление,
			|	КонтактнаяИнформация.Вид КАК Вид
			|ПОМЕСТИТЬ КонтактнаяИнформация
			|ИЗ
			|	&КонтактнаяИнформация КАК КонтактнаяИнформация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление КАК Представление,
			|	КонтактнаяИнформация.Вид КАК Вид,
			|	КОЛИЧЕСТВО(КонтактнаяИнформация.Вид) КАК Количество
			|ИЗ
			|	КонтактнаяИнформация КАК КонтактнаяИнформация
			|
			|СГРУППИРОВАТЬ ПО
			|	КонтактнаяИнформация.Вид,
			|	КонтактнаяИнформация.Представление ИТОГИ ПО Вид";
		
		Запрос.УстановитьПараметр("КонтактнаяИнформация", КонтактнаяИнформация);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаВид = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаВид.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыборкаВид.Выбрать();
			Если ВыборкаВид.Количество = 1 Тогда
				СтрокаТаблиц = КонтактнаяИнформация.Найти(ВыборкаВид.Вид, "Вид");
				СтрокаТаблиц.ВидДляСписка = ВыборкаВид.Вид;
			ИначеЕсли ВыборкаВид.Количество > 1 Тогда
				СтрокаТаблиц = КонтактнаяИнформация.Добавить();
				СтрокаТаблиц.ВидДляСписка = ВыборкаВид.Вид;
				Разделитель = "";
				Представление = "";
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Представление = Представление +Разделитель + ВыборкаДетальныеЗаписи.Представление;
					Разделитель = ", ";
				КонецЦикла;
				СтрокаТаблиц.Представление = Представление;
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;

КонецПроцедуры

Функция ОбъектыСодержащиеВидДляСписка()
	
	ОбъектыМетаданных = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.ЭтоГруппа = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если СтрНачинаетсяС(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, "Справочник") Тогда
			ИмяОбъекта = Сред(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, 11);
			Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда 
				КонтактнаяИнформация = Метаданные.Справочники[ИмяОбъекта].ТабличныеЧасти.КонтактнаяИнформация;
				Если КонтактнаяИнформация.Реквизиты.Найти("ВидДляСписка") <> Неопределено Тогда
					ОбъектыМетаданных.Добавить(Справочники[ИмяОбъекта].ПустаяСсылка());
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрНачинаетсяС(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, "Документ") Тогда
			ИмяОбъекта = Сред(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, 9);
			Если Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда
				КонтактнаяИнформация = Метаданные.Документы[ИмяОбъекта].ТабличныеЧасти.КонтактнаяИнформация;
				Если КонтактнаяИнформация.Реквизиты.Найти("ВидДляСписка") <> Неопределено Тогда
					ОбъектыМетаданных.Добавить(Документы[ИмяОбъекта].ПустаяСсылка());
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Разделитель = "";
	ТекстЗапроса = "";
	Для каждого Объект Из ОбъектыМетаданных Цикл
		ТекстЗапроса = ТекстЗапроса + Разделитель + " ВЫБРАТЬ
		|	КонтактнаяИнформация.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник." + Объект.Метаданные().Имя + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтактнаяИнформация.Ссылка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(КонтактнаяИнформация.Вид) > 0 ";
		Разделитель = " ОБЪЕДИНИТЬ ВСЕ ";
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Возврат РезультатЗапроса;

КонецФункции

// Проверяет корректность параметров вида контактной информации.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - Проверяемый вид контактной информации.
//
// Возвращаемое значение:
//  Структура - Результат проверки вида контактной информации
//   * ЕстьОшибки    - Булево - признак наличия ошибок в виде контактной информации.
//   * ТекстОшибки   - Строка - информация об ошибке.
Функция ПроверитьПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформации) Экспорт
	
	Результат = Новый Структура("ЕстьОшибки, ТекстОшибки", Ложь, "");
	
	Если НЕ ЗначениеЗаполнено(ВидКонтактнойИнформации.Тип) Тогда
		Результат.ЕстьОшибки = Истина;
		Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполонено обязательное поле тип у вида контактной информации ""%1"".'"),
			Строка(ВидКонтактнойИнформации.Наименование));
		Возврат Результат;
	КонецЕсли;
	
	Разделитель = "";
	Если ВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		
		Если НЕ ВидКонтактнойИнформации.АдресТолькоРоссийский
			И (ВидКонтактнойИнформации.ПроверятьКорректность
			ИЛИ ВидКонтактнойИнформации.СкрыватьНеактуальныеАдреса) Тогда
				Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Некорректно заполнены настройки проверки адреса у вида контактной информации %1.
					| Проверка корректности адреса доступна только для российских адресов'"), Строка(ВидКонтактнойИнформации.Наименование));
					Разделитель = Символы.ПС;
			КонецЕсли;
			
		Если ВидКонтактнойИнформации.РазрешитьВводНесколькихЗначений
			И ВидКонтактнойИнформации.ХранитьИсториюИзменений Тогда
				Результат.ТекстОшибки = Результат.ТекстОшибки + Разделитель + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Некорректно заполнены настройки адреса у вида контактной информации %1.
					| Не допускается возможность ввода нескольких значений контактной информации при включенной истории хранения изменений.'"),
						Строка(ВидКонтактнойИнформации.Наименование));
		КонецЕсли;
	КонецЕсли;
	
	Результат.ЕстьОшибки = ЗначениеЗаполнено(Результат.ТекстОшибки);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииДляСовместимости

// Возвращает поля контактной информации.
//
// Параметры:
//   XDTOКонтактнаяИнформация - ОбъектXDTO, Строка - контактная информация или строка XML.
//   СтарыйСоставПолей        - Булево - необязательный флаг того, что из состава полей будут исключены
//                                          поля, отсутствующие в версиях БСП младше 2.1.3.
//
// Возвращаемое значение:
//   Структура - данные. Содержит поля:
//     * Представление        - Строка - представление адреса.
//     * ЗначенияПолей        - СписокЗначений - значения. Состав значений для адреса:
//        ** Страна           - Строка - текстовое представление страны.
//        ** КодСтраны        - Строка - код страны по ОКСМ.
//        ** Индекс           - Строка - почтовый индекс (только для адресов РФ).
//        ** Регион           - Строка - текстовое представление региона РФ (только для адресов РФ).
//        ** КодРегиона       - Строка - код региона РФ (только для адресов РФ).
//        ** РегионСокращение - Строка - сокращение региона (если СтарыйСоставПолей = Ложь).
//        ** Район            - Строка - текстовое представление района (только для адресов РФ).
//        ** РайонСокращение  - Строка - сокращение района (если СтарыйСоставПолей = Ложь).
//        ** Город            - Строка - текстовое представление города (только для адресов РФ).
//        ** ГородСокращение  - Строка - сокращение города (только для адресов РФ).
//        ** НаселенныйПункт  - Строка - текстовое представление населенного пункта (только для адресов РФ).
//        ** НаселенныйПунктСокращение - сокращение населенного пункта (если СтарыйСоставПолей = Ложь).
//        ** ТипДома          - Строка - см. ТипыОбъектовАдресацииАдресаРФ().
//        ** Дом              - Строка - текстовое представление дома (только для адресов РФ).
//        ** ТипКорпуса       - Строка - см. ТипыОбъектовАдресацииАдресаРФ().
//        ** Корпус           - Строка - текстовое представление корпуса (только для адресов РФ).
//        ** ТипКвартиры      - Строка - см. ТипыОбъектовАдресацииАдресаРФ().
//        ** Квартира         - Строка - текстовое представление квартиры (только для адресов РФ).
//       Состав значений для телефона:
//        ** КодСтраны        - Строка - код страны. Например, +7.
//        ** КодГорода        - Строка - код города. Например, 495.
//        ** НомерТелефона    - Строка - номер телефона.
//        ** Добавочный       - Строка - добавочный номер телефона.
//
Функция КонтактнаяИнформацияВСтаруюСтруктуру(XDTOКонтактнаяИнформация, СтарыйСоставПолей = Ложь) Экспорт
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(XDTOКонтактнаяИнформация) Тогда
		XDTOКонтактная = КонтактнаяИнформацияИзXML(XDTOКонтактнаяИнформация);
	Иначе
		XDTOКонтактная = XDTOКонтактнаяИнформация
	КонецЕсли;
	
	Результат = Новый Структура("Представление, ЗначенияПолей", XDTOКонтактная.Представление, Новый СписокЗначений);
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Состав = XDTOКонтактная.Состав;
	
	Если Состав = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Тип = Состав.Тип();
	Если Тип = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		Результат.ЗначенияПолей = АдресВСтарыйСписокПолей(Состав, Не СтарыйСоставПолей);
		Результат.ЗначенияПолей.Добавить(Результат.Представление, "Представление");
		
	ИначеЕсли Тип = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
		Результат.ЗначенияПолей = НомерТелефонаВСтарыйСписокПолей(Состав);
		Результат.ЗначенияПолей.Добавить(XDTOКонтактная.Комментарий, "Комментарий");
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Преобразует адрес формата XDTO в старый список полей типа СписокЗначений.
//
// Параметры:
//     XDTOАдрес               - ОбъектXDTO, Строка - контактная информация или строка XML.
//     РасширенныйСоставПолей - Булево - необязательный флаг того, что состав полей будет сокращен для совместимости
//                                     с обменом БСП 2.1.2.
//
//  Возвращаемое значение:
//     СписокЗначений 
//
Функция АдресВСтарыйСписокПолей(XDTOАдрес, РасширенныйСоставПолей = Истина)
	Список = Новый СписокЗначений;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	XDTOТип = XDTOАдрес.Тип();
	Если XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		
		// Страна с кодом
		ДобавитьЗначение(Список, "Страна", XDTOАдрес.Страна);
		Если ПустаяСтрока(XDTOАдрес.Страна) Тогда
			КодСтраны = "";
		Иначе
			Страна = Справочники.СтраныМира.НайтиПоНаименованию(XDTOАдрес.Страна, Истина);
			КодСтраны = СокрЛП(Страна.Код);
		КонецЕсли;
		ДобавитьЗначение(Список, "КодСтраны", КодСтраны);
		
		Если Не ЭтоРоссийскийАдрес(XDTOАдрес) Тогда
			Возврат Список;
		КонецЕсли;
		
		АдресРФ = XDTOАдрес.Состав;
		
	ИначеЕсли XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
		АдресРФ = XDTOАдрес;
		
	Иначе
		Возврат Список;
		
	КонецЕсли;
	
	ДобавитьЗначение(Список, "Индекс", ПочтовыйИндексАдреса(АдресРФ) );
	
	ДобавитьЗначение(Список, "Регион", АдресРФ.СубъектРФ);
	ДобавитьЗначение(Список, "КодРегиона", КодРегиона(АдресРФ.СубъектРФ) );
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "РегионСокращение", УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(АдресРФ.СубъектРФ));
	КонецЕсли;
	
	Район = РайонАдреса(АдресРФ);
	ДобавитьЗначение(Список, "Район", Район);
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "РайонСокращение", УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(Район));
	КонецЕсли;
	
	ДобавитьЗначение(Список, "Город", АдресРФ.Город);
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "ГородСокращение", УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(АдресРФ.Город));
	КонецЕсли;
	
		// преобразование ФИАС в КЛАДР
	НаселПункт = АдресРФ.НаселПункт;
	Улица = АдресРФ.Улица;
	ДополнительныйЭлементАдреса = НайтиДополнительныйЭлементАдреса(АдресРФ);
	ПодчиненныйЭлементЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, 
	УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(91));
	
	ЕстьУлица = ЗначениеЗаполнено(Улица);
	ЕстьДополнительныйЭлементАдреса = ЗначениеЗаполнено(ДополнительныйЭлементАдреса);
	ЕстьПодчиненныйЭлементЭлементАдреса = ЗначениеЗаполнено(ПодчиненныйЭлементЭлементАдреса);
	
	Если ЕстьДополнительныйЭлементАдреса Тогда
		Если ЕстьПодчиненныйЭлементЭлементАдреса Тогда
			НаселПункт = ДополнительныйЭлементАдреса;
			Улица = ПодчиненныйЭлементЭлементАдреса;
		Иначе
			Улица = ДополнительныйЭлементАдреса;
		КонецЕсли;
	ИначеЕсли ЕстьПодчиненныйЭлементЭлементАдреса Тогда
		Улица = ПодчиненныйЭлементЭлементАдреса;
	КонецЕсли;
	
	ДобавитьЗначение(Список, "НаселенныйПункт", НаселПункт);
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "НаселенныйПунктСокращение", УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(НаселПункт));
	КонецЕсли;

	ДобавитьЗначение(Список, "Улица", Улица);
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "УлицаСокращение", УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(Улица));
	КонецЕсли;
	
	// Дом и корпус
	ЗданияИПомещения = ЗданияИПомещенияАдреса(АдресРФ);
	
	ПараметрыОбъекта = ЗначениеЗданияИлиПомещения(ЗданияИПомещения.Здания, ВариантыДанныхДом(), РасширенныйСоставПолей);
	Если ПараметрыОбъекта.Количество() = 0 Тогда
		ДобавитьЗначение(Список, "ТипДома", "");
		ДобавитьЗначение(Список, "Дом",     "");
	Иначе
		Для Каждого СтрокаОбъекта Из ПараметрыОбъекта Цикл
			ДобавитьЗначение(Список, "ТипДома", СтрокаОбъекта.Тип,      РасширенныйСоставПолей);
			ДобавитьЗначение(Список, "Дом",     СтрокаОбъекта.Значение, РасширенныйСоставПолей);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОбъекта = ЗначениеЗданияИлиПомещения(ЗданияИПомещения.Здания, ВариантыДанныхСтроение(), РасширенныйСоставПолей);
	Если ПараметрыОбъекта.Количество() = 0 Тогда
		ДобавитьЗначение(Список, "ТипКорпуса", "");
		ДобавитьЗначение(Список, "Корпус",     "");
	ИначеЕсли ПараметрыОбъекта.Количество() = 1 Тогда
		СтрокаОбъекта  = ПараметрыОбъекта[0];
		ДобавитьЗначение(Список, "ТипКорпуса", СтрокаОбъекта.Тип,      РасширенныйСоставПолей);
		ДобавитьЗначение(Список, "Корпус",     СтрокаОбъекта.Значение, РасширенныйСоставПолей);
	Иначе
		ТипКорпуса  = ПараметрыОбъекта[0].Тип;
		ЗначениеКорпуса = "";
		Разделитель = "";
		Сокращения = УправлениеКонтактнойИнформациейКлиентСервер.СокращенияОбъектовАдресацииАдресаРФ();
		Для Каждого СтрокаОбъекта Из ПараметрыОбъекта Цикл
			ИмяЗдания = ?(ЗначениеЗаполнено(Сокращения[СтрокаОбъекта.Тип]), Сокращения[СтрокаОбъекта.Тип], СтрокаОбъекта.Тип);
			ЗначениеКорпуса  = ЗначениеКорпуса  + Разделитель + ИмяЗдания + " " + СтрокаОбъекта.Значение;
			Разделитель = ", " ;
		КонецЦикла;
		ДобавитьЗначение(Список, "ТипКорпуса", ТипКорпуса,      РасширенныйСоставПолей);
		ДобавитьЗначение(Список, "Корпус",     ЗначениеКорпуса  , РасширенныйСоставПолей);
	КонецЕсли;
	
	ПараметрыОбъекта = ЗначениеЗданияИлиПомещения(ЗданияИПомещения.Помещения, ВариантыДанныхПомещение(), РасширенныйСоставПолей);
	Если ПараметрыОбъекта.Количество() = 0 Тогда
		ДобавитьЗначение(Список, "ТипКвартиры", "");
		ДобавитьЗначение(Список, "Квартира",    "");
	ИначеЕсли ПараметрыОбъекта.Количество() = 1 Тогда
		СтрокаОбъекта  = ПараметрыОбъекта[0];
		ДобавитьЗначение(Список, "ТипКвартиры", СтрокаОбъекта.Тип,      РасширенныйСоставПолей);
		ДобавитьЗначение(Список, "Квартира",    СтрокаОбъекта.Значение, РасширенныйСоставПолей);
	Иначе
		ТипПомещения  = ПараметрыОбъекта[0].Тип;
		ЗначениеПомещения = "";
		Разделитель = "";
		Сокращения = УправлениеКонтактнойИнформациейКлиентСервер.СокращенияОбъектовАдресацииАдресаРФ();
		Для Каждого СтрокаОбъекта Из ПараметрыОбъекта Цикл
			ИмяПомещения = ?(ЗначениеЗаполнено(Сокращения[СтрокаОбъекта.Тип]), Сокращения[СтрокаОбъекта.Тип], СтрокаОбъекта.Тип);
			ЗначениеПомещения = ЗначениеПомещения + Разделитель + ИмяПомещения + " " + СтрокаОбъекта.Значение;
			Разделитель = ", " ;
		КонецЦикла;
		ДобавитьЗначение(Список, "ТипКвартиры", ТипПомещения,      РасширенныйСоставПолей);
		ДобавитьЗначение(Список, "Квартира",    ЗначениеПомещения, РасширенныйСоставПолей);
	КонецЕсли;
	
	Возврат Список;
КонецФункции

Процедура ДобавитьЗначение(Список, ИмяПоля, Значение, РазрешитьДубли = Ложь)
	
	Если Не РазрешитьДубли Тогда
		Для Каждого Элемент Из Список Цикл
			Если Элемент.Представление = ИмяПоля Тогда
				Элемент.Значение = Строка(Значение);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Список.Добавить(Строка(Значение), ИмяПоля);
КонецПроцедуры

Функция ЗначениеЗданияИлиПомещения(Данные, Варианты, ВсеЗначенияВарианта)
	Результат = ТаблицаЗначений("Тип, Значение");
	
	Для Каждого Вариант Из Варианты.ВариантыТипа Цикл
		Для Каждого Строка Из Данные.НайтиСтроки(Новый Структура("Тип", Вариант)) Цикл
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка);
			Если Не ВсеЗначенияВарианта Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция НомерТелефонаВСтарыйСписокПолей(XDTOТелефон)
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(XDTOТелефон.КодСтраны,  "КодСтраны");
	Результат.Добавить(XDTOТелефон.КодГорода,  "КодГорода");
	Результат.Добавить(XDTOТелефон.Номер,      "НомерТелефона");
	Результат.Добавить(XDTOТелефон.Добавочный, "Добавочный");
	
	Возврат Результат;
КонецФункции

Функция ГруппаОшибокАдреса(ТипОшибки, Сообщение)
	Возврат Новый Структура("ТипОшибки, Сообщение, Поля", ТипОшибки, Сообщение, Новый Массив);
КонецФункции

Процедура ДобавитьОшибкуЗаполненияАдреса(Группа, ИмяПоля = "", Сообщение = "", СущностьПоля = "")
	Группа.Поля.Добавить(Новый Структура("ИмяПоля, Сообщение, СущностьПоля", ИмяПоля, Сообщение, СущностьПоля));
КонецПроцедуры

Процедура ЗаполнитьОшибкиАдресаПоКлассификатору(XDTOАдресРФ, ФлагиПроверки, Результат)
	
	Адреса = Новый Массив;
	
	Если ФлагиПроверки.ПроверятьПоФИАС Тогда
		Адреса.Добавить( Новый Структура("Адрес, ФорматАдреса", XDTOАдресРФ, "ФИАС") );
	ИначеЕсли ФлагиПроверки.ПроверятьКорректность Тогда
		Адреса.Добавить( Новый Структура("Адрес, ФорматАдреса", XDTOАдресРФ, "КЛАДР") );
	КонецЕсли;
	
	Если Адреса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
	РезультатыАнализа = МодульАдресныйКлассификаторСлужебный.РезультатПроверкиАдресовПоКлассификатору(Адреса);
	Если РезультатыАнализа.Отказ Тогда
		Результат.Добавить( Новый Структура("ПутьXPath, СущностьПоля, АдресПроверен", "/",, Ложь), РезультатыАнализа.КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	// Только уникальные ошибки - мы могли проверить адрес два раза.
	Обработанные = Новый Соответствие;
	Для Каждого РезультатПроверки Из РезультатыАнализа.Данные Цикл
		Если РезультатПроверки.АдресПроверен Тогда
			Для Каждого ОшибкаАдреса Из РезультатПроверки.Ошибки Цикл
				Ключ = ОшибкаАдреса.Ключ;
				Если Обработанные[Ключ] = Неопределено Тогда
					Результат.Добавить(Новый Структура("ПутьXPath, СущностьПоля, АдресПроверен", Ключ,, РезультатПроверки.АдресПроверен), 
						СокрЛП(ОшибкаАдреса.Текст + Символы.ПС + ОшибкаАдреса.Подсказка));
					Обработанные[Ключ] = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Конструктор таблицы значений.
//
Функция ТаблицаЗначений(СписокКолонок, СписокИндексов = "")
	ТаблицаРезультата = Новый ТаблицаЗначений;
	
	Для Каждого КлючЗначение Из (Новый Структура(СписокКолонок)) Цикл
		ТаблицаРезультата.Колонки.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	СтрокиИндексов = СтрЗаменить(СписокИндексов, "|", Символы.ПС);
	Для НомерИндекса = 1 По СтрЧислоСтрок(СтрокиИндексов) Цикл
		КолонкиИндекса = СокрЛП(СтрПолучитьСтроку(СтрокиИндексов, НомерИндекса));
		Для Каждого КлючЗначение Из (Новый Структура(КолонкиИндекса)) Цикл
			ТаблицаРезультата.Индексы.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаРезультата;
КонецФункции

// Внутреннее для сериализации.
Функция ДесериализацияАдресаОбщая(Знач ЗначенияПолей, Знач Представление, Знач ОжидаемыйТип = Неопределено)
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей) Тогда
		// Общий формат контактной информации.
		Возврат КонтактнаяИнформацияИзXML(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;
	
	Если ОжидаемыйТип <> Неопределено Тогда
		Если ОжидаемыйТип <> Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка десериализации контактной информации, ожидается адрес'");
		КонецЕсли;
	КонецЕсли;
	
	// Старый формат через разделитель строк и равенство.
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	
	Результат.Комментарий = "";
	Результат.Состав      = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	
	НазваниеРоссии  = ВРег(Справочники.СтраныМира.Россия.Наименование);
	ЭлементКвартира = Неопределено;
	ЭлементКорпус   = Неопределено;
	ЭлементДом      = Неопределено;
	
	// Российский
	АдресРФ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ"));
	
	// Общий состав
	Адрес = Результат.Состав;
	Адрес.Страна = НазваниеРоссии; // Страна по умолчанию Россия
	АдресРоссийский = Истина;
	
	ТипЗначенийПолей = ТипЗнч(ЗначенияПолей);
	Если ТипЗначенийПолей = Тип("СписокЗначений") Тогда
		СписокПолей = ЗначенияПолей;
	ИначеЕсли ТипЗначенийПолей = Тип("Структура") Тогда
		СписокПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(
			УправлениеКонтактнойИнформациейКлиентСервер.СтрокаПолей(ЗначенияПолей, Ложь));
	Иначе
		// Уже преобразовано в строку
		СписокПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(ЗначенияПолей);
	КонецЕсли;
	
	ТипКвартирыНеопределен = Истина;
	ТипКорпусаНеопределен  = Истина;
	ТипДомаНеопределен     = Истина;
	ПолеПредставления      = "";
	
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		ИмяПоля = ВРег(ЭлементСписка.Представление);
		
		Если ИмяПоля="ИНДЕКС" Тогда
			ЭлементИндекс = СоздатьДопАдрЭлемента(АдресРФ);
			ЭлементИндекс.ТипАдрЭл = УправлениеКонтактнойИнформациейКлиентСервер.КодСериализацииПочтовогоИндекса();
			ЭлементИндекс.Значение = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "СТРАНА" Тогда
			Адрес.Страна = ЭлементСписка.Значение;
			Если ВРег(ЭлементСписка.Значение) <> НазваниеРоссии Тогда
				АдресРоссийский = Ложь;
			КонецЕсли;
			
		ИначеЕсли ИмяПоля = "КОДСТРАНЫ" Тогда
			// действия не требуется
			
		ИначеЕсли ИмяПоля = "КОДРЕГИОНА" Тогда
			АдресРФ.СубъектРФ = РегионКода(ЭлементСписка.Значение);
			
		ИначеЕсли ИмяПоля = "РЕГИОН" Тогда
			АдресРФ.СубъектРФ = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "РАЙОН" Тогда
			Если АдресРФ.СвРайМО = Неопределено Тогда
				АдресРФ.СвРайМО = ФабрикаXDTO.Создать( АдресРФ.Тип().Свойства.Получить("СвРайМО").Тип )
			КонецЕсли;
			АдресРФ.СвРайМО.Район = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ГОРОД" Тогда
			АдресРФ.Город = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "НАСЕЛЕННЫЙПУНКТ" Тогда
			АдресРФ.НаселПункт = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "УЛИЦА" Тогда
			АдресРФ.Улица = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ТИПДОМА" Тогда
			Если ЭлементДом = Неопределено Тогда
				ЭлементДом = СоздатьНомерДопАдрЭлемента(АдресРФ);
			КонецЕсли;
			ЭлементДом.Тип = УправлениеКонтактнойИнформациейКлиентСервер.КодСериализацииОбъектаАдресации(ЭлементСписка.Значение);
			ТипДомаНеопределен = Ложь;
			
		ИначеЕсли ИмяПоля = "ДОМ" Тогда
			Если ЭлементДом = Неопределено Тогда
				ЭлементДом = СоздатьНомерДопАдрЭлемента(АдресРФ);
			КонецЕсли;
			ЭлементДом.Значение = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ТИПКОРПУСА" Тогда
			Если ЭлементКорпус = Неопределено Тогда
				ЭлементКорпус = СоздатьНомерДопАдрЭлемента(АдресРФ);
			КонецЕсли;
			ЭлементКорпус.Тип = УправлениеКонтактнойИнформациейКлиентСервер.КодСериализацииОбъектаАдресации(ЭлементСписка.Значение);
			ТипКорпусаНеопределен = Ложь;
			
		ИначеЕсли ИмяПоля = "КОРПУС" Тогда
			Если ЭлементКорпус = Неопределено Тогда
				ЭлементКорпус = СоздатьНомерДопАдрЭлемента(АдресРФ);
			КонецЕсли;
			ЭлементКорпус.Значение = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ТИПКВАРТИРЫ" Тогда
			Если ЭлементКвартира = Неопределено Тогда
				ЭлементКвартира = СоздатьНомерДопАдрЭлемента(АдресРФ);
			КонецЕсли;
			ЭлементКвартира.Тип = УправлениеКонтактнойИнформациейКлиентСервер.КодСериализацииОбъектаАдресации(ЭлементСписка.Значение);
			ТипКвартирыНеопределен = Ложь;
			
		ИначеЕсли ИмяПоля = "КВАРТИРА" Тогда
			Если ЭлементКвартира = Неопределено Тогда
				ЭлементКвартира = СоздатьНомерДопАдрЭлемента(АдресРФ);
			КонецЕсли;
			ЭлементКвартира.Значение = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ПРЕДСТАВЛЕНИЕ" Тогда
			ПолеПредставления = СокрЛП(ЭлементСписка.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Умолчания
	Если ТипДомаНеопределен И ЭлементДом <> Неопределено Тогда
		ЭлементДом.Тип = УправлениеКонтактнойИнформациейКлиентСервер.КодСериализацииОбъектаАдресации("Дом");
	КонецЕсли;
	
	Если ТипКорпусаНеопределен И ЭлементКорпус <> Неопределено Тогда
		ЭлементКорпус.Тип = УправлениеКонтактнойИнформациейКлиентСервер.КодСериализацииОбъектаАдресации("Корпус");
	КонецЕсли;
	
	Если ТипКвартирыНеопределен И ЭлементКвартира <> Неопределено Тогда
		ЭлементКвартира.Тип = УправлениеКонтактнойИнформациейКлиентСервер.КодСериализацииОбъектаАдресации("Квартира");
	КонецЕсли;
	
	// Представление с приоритетами.
	Если Не ПустаяСтрока(Представление) Тогда
		Результат.Представление = Представление;
	Иначе
		Результат.Представление = ПолеПредставления;
	КонецЕсли;
	
	Адрес.Состав = ?(АдресРоссийский, АдресРФ, Результат.Представление);
	
	Возврат Результат;
КонецФункции

// Возвращает флаг того, что переданных объект КИ содержит данные.
//
// Параметры:
//     XDTOДанные - ОбъектXDTO - проверяемые данные контактной информации.
//
// Возвращаемое значение:
//     Булево - флаг наличия данных.
//
Функция XDTOКонтактнаяИнформацияЗаполнена(Знач XDTOДанные) Экспорт
	
	Возврат ЕстьЗаполненныеСвойстваXDTOКонтактнойИнформации(XDTOДанные);
	
КонецФункции

// Параметры: Владелец - ОбъектXDTO, Неопределено
//
Функция ЕстьЗаполненныеСвойстваXDTOКонтактнойИнформации(Знач Владелец)
	
	Если Владелец = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Список игнорируемых при сравнении свойств текущего владельца - особенности контактной информации.
	Игнорируемые = Новый Соответствие;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	ТипВладельца     = Владелец.Тип();
	
	Если ТипВладельца = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		// Страна не влияет на заполнение при остальных пустых. Игнорируем.
		Игнорируемые.Вставить(Владелец.Свойства().Получить("Страна"), Истина);
		
	ИначеЕсли ТипВладельца = ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
		// Игнорируем список с пустыми значениями и возможно непустыми типами.
		Список = Владелец.ПолучитьСписок("ДопАдрЭл");
		Если Список <> Неопределено Тогда
			Для Каждого СвойствоСписка Из Список Цикл
				Если ПустаяСтрока(СвойствоСписка.Значение) Тогда
					Игнорируемые.Вставить(СвойствоСписка, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Свойство Из Владелец.Свойства() Цикл
		
		Если Не Владелец.Установлено(Свойство) Или Игнорируемые[Свойство] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Свойство.ВерхняяГраница > 1 Или Свойство.ВерхняяГраница < 0 Тогда
			Список = Владелец.ПолучитьСписок(Свойство);
			
			Если Список <> Неопределено Тогда
				Для Каждого ЭлементСписка Из Список Цикл
					Если Игнорируемые[ЭлементСписка] = Неопределено 
						И ЕстьЗаполненныеСвойстваXDTOКонтактнойИнформации(ЭлементСписка) Тогда
						Возврат Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Значение = Владелец.Получить(Свойство);
		Если ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
			Если ЕстьЗаполненныеСвойстваXDTOКонтактнойИнформации(Значение) Тогда
				Возврат Истина;
			КонецЕсли;
			
		ИначеЕсли Не ПустаяСтрока(Значение) Тогда
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Ложь;
КонецФункции

Процедура ВставитьЗданиеПомещение(XDTOАдрес, Тип, Значение)
	Если ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Запись = XDTOАдрес.Получить(УправлениеКонтактнойИнформациейКлиентСервер.XPathНомераДополнительногоОбъектаАдресации(Тип) );
	Если Запись = Неопределено Тогда
		Запись = XDTOАдрес.ДопАдрЭл.Добавить( ФабрикаXDTO.Создать(XDTOАдрес.ДопАдрЭл.ВладеющееСвойство.Тип) );
		Запись.Номер = ФабрикаXDTO.Создать(Запись.Свойства().Получить("Номер").Тип);
		Запись.Номер.Значение = Значение;
		
		КодТипа = УправлениеКонтактнойИнформациейКлиентСервер.КодСериализацииОбъектаАдресации(Тип);
		Если КодТипа = Неопределено Тогда
			КодТипа = Тип;
		КонецЕсли;
		Запись.Номер.Тип = КодТипа
	Иначе        
		Запись.Значение = Значение;
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьНомерДопАдрЭлемента(АдресРФ)
	ДопАдрЭл = СоздатьДопАдрЭлемента(АдресРФ);
	ДопАдрЭл.Номер = ФабрикаXDTO.Создать(ДопАдрЭл.Тип().Свойства.Получить("Номер").Тип);
	Возврат ДопАдрЭл.Номер;
КонецФункции

Функция СоздатьДопАдрЭлемента(АдресРФ)
	СвойствоДопАдрЭлемента = АдресРФ.ДопАдрЭл.ВладеющееСвойство;
	ДопАдрЭлемента = ФабрикаXDTO.Создать(СвойствоДопАдрЭлемента.Тип);
	АдресРФ.ДопАдрЭл.Добавить(ДопАдрЭлемента);
	Возврат ДопАдрЭлемента;
КонецФункции

Функция СвРайМО(АдресРФ)
	Если АдресРФ.СвРайМО <> Неопределено Тогда
		Возврат АдресРФ.СвРайМО;
	КонецЕсли;
	
	АдресРФ.СвРайМО = ФабрикаXDTO.Создать( АдресРФ.Свойства().Получить("СвРайМО").Тип );
	Возврат АдресРФ.СвРайМО;
КонецФункции

Процедура ЗаменитьВСтруктуреНеопределеноНаПустуюСтроку(Результат)
	
	Для каждого КлючЗначение Из Результат Цикл
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура")Тогда
			ЗаменитьВСтруктуреНеопределеноНаПустуюСтроку(Результат[КлючЗначение.Ключ]);
		ИначеЕсли КлючЗначение.Значение = Неопределено Тогда
			Результат[КлючЗначение.Ключ] = "";
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ДесериализацияТелефонаФакса(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено)
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей) Тогда
		// Общий формат контактной информации.
		Возврат КонтактнаяИнформацияИзXML(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	
	Если ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
		
	ИначеЕсли ОжидаемыйТип=Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса"));
		
	ИначеЕсли ОжидаемыйТип=Неопределено Тогда
		// Считаем телефоном
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
		
	Иначе
		ВызватьИсключение НСтр("ru='Ошибка десериализации контактной информации, ожидается телефон или факс'");
	КонецЕсли;
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав        = Данные;
	
	// Из пар ключ-значение
	СписокЗначенийПолей = Неопределено;
	Если ТипЗнч(ЗначенияПолей)=Тип("СписокЗначений") Тогда
		СписокЗначенийПолей = ЗначенияПолей;
	ИначеЕсли Не ПустаяСтрока(ЗначенияПолей) Тогда
		СписокЗначенийПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(ЗначенияПолей);
	КонецЕсли;
	
	ПолеПредставления = "";
	Если СписокЗначенийПолей <> Неопределено Тогда
		Для Каждого ЗначениеПоля Из СписокЗначенийПолей Цикл
			Поле = ВРег(ЗначениеПоля.Представление);
			
			Если Поле = "КОДСТРАНЫ" Тогда
				Данные.КодСтраны = ЗначениеПоля.Значение;
				
			ИначеЕсли Поле = "КОДГОРОДА" Тогда
				Данные.КодГорода = ЗначениеПоля.Значение;
				
			ИначеЕсли Поле = "НОМЕРТЕЛЕФОНА" Тогда
				Данные.Номер = ЗначениеПоля.Значение;
				
			ИначеЕсли Поле = "ДОБАВОЧНЫЙ" Тогда
				Данные.Добавочный = ЗначениеПоля.Значение;
				
			ИначеЕсли Поле = "ПРЕДСТАВЛЕНИЕ" Тогда
				ПолеПредставления = СокрЛП(ЗначениеПоля.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Представление с приоритетами.
		Если Не ПустаяСтрока(Представление) Тогда
			Результат.Представление = Представление;
		Иначе
			Результат.Представление = ПолеПредставления;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	// Разбираем из представления.
	
	// Группы цифр, разделенные символами - не цифрами: страна, город, номер, добавочный. 
	// Добавочный включает в себя непробельные символы слева и справа.
	Позиция = 1;
	Данные.КодСтраны  = НайтиПодстрокуЦифр(Представление, Позиция);
	НачалоГорода = Позиция;
	
	Данные.КодГорода  = НайтиПодстрокуЦифр(Представление, Позиция);
	Данные.Номер      = НайтиПодстрокуЦифр(Представление, Позиция, " -");
	
	Добавочный = СокрЛП(Сред(Представление, Позиция));
	Если СтрНачинаетсяС(Добавочный, ",") Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 2));
	КонецЕсли;
	Если ВРег(Лев(Добавочный, 3 ))= "ДОБ" Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 4));
	КонецЕсли;
	Если ВРег(Лев(Добавочный, 1 ))= "." Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 2));
	КонецЕсли;
	Данные.Добавочный = СокрЛП(Добавочный);
	
	// Корректируем возможные ошибки.
	Если ПустаяСтрока(Данные.Номер) Тогда
		Если СтрНачинаетсяС(СокрЛ(Представление), "+") Тогда
			// Была попытка явно указать код страны, оставляем страну в покое.
			Данные.КодГорода  = "";
			Данные.Номер      = СократитьНеЦифры(Сред(Представление, НачалоГорода));
			Данные.Добавочный = "";
		Иначе
			Данные.КодСтраны  = "";
			Данные.КодГорода  = "";
			Данные.Номер      = Представление;
			Данные.Добавочный = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат.Представление = Представление;
	Возврат Результат;
КонецФункции  

// Возвращает первую подстроку из цифр в строке. Параметр ПозицияНачала изменяется на первую не цифру.
//
Функция НайтиПодстрокуЦифр(Текст, ПозицияНачала = Неопределено, ДопустимоКромеЦифр = "")
	
	Если ПозицияНачала = Неопределено Тогда
		ПозицияНачала = 1;
	КонецЕсли;
	
	Результат = "";
	ПозицияКонца = СтрДлина(Текст);
	ПоискНачала  = Истина;
	
	Пока ПозицияНачала <= ПозицияКонца Цикл
		Символ = Сред(Текст, ПозицияНачала, 1);
		ЭтоЦифра = Символ >= "0" И Символ <= "9";
		
		Если ПоискНачала Тогда
			Если ЭтоЦифра Тогда
				Результат = Результат + Символ;
				ПоискНачала = Ложь;
			КонецЕсли;
		Иначе
			Если ЭтоЦифра Или СтрНайти(ДопустимоКромеЦифр, Символ) > 0 Тогда
				Результат = Результат + Символ;    
			Иначе
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		ПозицияНачала = ПозицияНачала + 1;
	КонецЦикла;
	
	// Убираем возможные висящие разделители справа.
	Возврат СократитьНеЦифры(Результат, ДопустимоКромеЦифр, Ложь);
	
КонецФункции

Функция СократитьНеЦифры(Текст, ДопустимоКромеЦифр = "", Направление = Истина)
	
	Длина = СтрДлина(Текст);
	Если Направление Тогда
		// Сокращение слева
		Индекс = 1;
		Конец  = 1 + Длина;
		Шаг    = 1;
	Иначе
		// Сокращение справа    
		Индекс = Длина;
		Конец  = 0;
		Шаг    = -1;
	КонецЕсли;
	
	Пока Индекс <> Конец Цикл
		Символ = Сред(Текст, Индекс, 1);
		ЭтоЦифра = (Символ >= "0" И Символ <= "9") Или СтрНайти(ДопустимоКромеЦифр, Символ) = 0;
		Если ЭтоЦифра Тогда
			Прервать;
		КонецЕсли;
		Индекс = Индекс + Шаг;
	КонецЦикла;
	
	Если Направление Тогда
		// Сокращение слева
		Возврат Прав(Текст, Длина - Индекс + 1);
	КонецЕсли;
	
	// Сокращение справа
	Возврат Лев(Текст, Индекс);
	
КонецФункции

// Получение глубокого свойства объекта.
//
Функция ПолучитьXDTOРеквизитОбъекта(ОбъектXTDO, XPath) Экспорт
	
	// Переносов строки в XPath не ожидаем.
	СтрокаСвойств = СтрЗаменить(СтрЗаменить(XPath, "/", Символы.ПС), Символы.ПС + Символы.ПС, "/");
	
	ЧислоСвойств = СтрЧислоСтрок(СтрокаСвойств);
	Если ЧислоСвойств = 1 Тогда
		Результат = ОбъектXTDO.Получить(СтрокаСвойств);
		Если ТипЗнч(Результат) = Тип("ОбъектXDTO") Тогда 
			Возврат Результат.Значение;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Результат = ?(ЧислоСвойств = 0, Неопределено, ОбъектXTDO);
	Для Индекс = 1 По ЧислоСвойств Цикл
		Результат = Результат.Получить(СтрПолучитьСтроку(СтрокаСвойств, Индекс));
		Если Результат = Неопределено Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Устанавливает в XDTO адресе значение по XPath.
//
Процедура УстановитьXDTOРеквизитОбъекта(ОбъектXDTO, ПутьXPath, Значение) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Части XPath
	ЧастиПути  = СтрЗаменить(ПутьXPath, "/", Символы.ПС);
	ЧастейПути = СтрЧислоСтрок(ЧастиПути);
	
	ВедущийОбъект = ОбъектXDTO;
	Объект        = ОбъектXDTO;
	
	Для Позиция = 1 По ЧастейПути Цикл
		ЧастьПути = СтрПолучитьСтроку(ЧастиПути, Позиция);
		Если ЧастейПути = 1 Тогда
			Прервать;
		КонецЕсли;
		
		Свойство = Объект.Свойства().Получить(ЧастьПути);
		Если Не Объект.Установлено(Свойство) Тогда
			Объект.Установить(Свойство, ФабрикаXDTO.Создать(Свойство.Тип));
		КонецЕсли;
		ВедущийОбъект = Объект;
		Объект        = Объект[ЧастьПути];
	КонецЦикла;
	
	Если Объект <> Неопределено Тогда
		
		Если СтрНайти(ЧастьПути, "ДопАдрЭл") = 0 Тогда
			Объект[ЧастьПути] = Значение;
		Иначе
			КодПутьXPath = Сред(ЧастьПути, 20, 8);
			ЗначениеПоля = Объект.ДопАдрЭл.Добавить(ФабрикаXDTO.Создать(Объект.ДопАдрЭл.ВладеющееСвойство.Тип));
			ЗначениеПоля.ТипАдрЭл = КодПутьXPath;
			ЗначениеПоля.Значение = Значение;
		КонецЕсли;
		
	ИначеЕсли ВедущийОбъект <> Неопределено Тогда
		ВедущийОбъект[ЧастьПути] =  Значение;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииПоРаботеСXML

// Возвращает соответствующее значение перечисления "ТипыКонтактнойИнформации" по строке XML.
//
// Параметры:
//    XMLСтрока - Строка, описывающая контактную информацию.
//
// Возвращаемое значение:
//     ПеречислениеСсылка.ТипыКонтактнойИнформации - результат.
//
Функция ТипКонтактнойИнформации(Знач XMLСтрока) Экспорт
	Возврат ЗначениеИзСтрокиXML( XSLT_ТипКонтактнойИнформацииПоСтрокеXML(XMLСтрока) );
КонецФункции

// Читает строку состава из значения контактной информации.
// Если значение состава сложного типа, то возвращает неопределено.
//
// Параметры:
//    Текст  Строка - XML строка контактной информации. Может быть модифицирован.
//
// Возвращаемое значение:
//    Строка       - XML значение состава.
//    Неопределено - Свойство "Состав" не найдено.
//
Функция СтрокаСоставаКонтактнойИнформации(Знач Текст, Знач НовоеЗначение = Неопределено) Экспорт
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Текст);
	ОбъектXDTO= ФабрикаXDTO.ПрочитатьXML(Чтение, 
		ФабрикаXDTO.Тип(УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен(), "КонтактнаяИнформация"));
	
	Состав = ОбъектXDTO.Состав;
	Если Состав <> Неопределено 
		И Состав.Свойства().Получить("Значение") <> Неопределено
		И ТипЗнч(Состав.Значение) = Тип("Строка") Тогда
		Возврат Состав.Значение;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Сравнивает два экземпляра контактной информации.
//
// Параметры:
//    Данные1 - ОбъектXTDO - объект с контактной информацией.
//            - Строка     - контактная информация в формате XML.
//            - Структура  - описание контактной информацию. Ожидаются поля:
//                 * ЗначенияПолей - Строка, Структура, СписокЗначений, Соответствие - поля контактной информации.
//                 * Представление - Строка - Представление. Используется в случае, если не удалось вычислить 
//                                            представление из ЗначенияПолей (отсутствие в них поля Представление).
//                 * Комментарий - Строка - комментарий. Используется в случае, если не удалось вычислить  комментарий
//                                          из ЗначенияПолей.
//                 * ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура
//                                             Используется в случае, если не удалось вычислить  тип из ЗначенияПолей.
//    Данные2 - ОбъектXTDO, Строка, Структура - аналогично Данные1.
//
// Возвращаемое значение:
//     ТаблицаЗначений: - таблица отличающихся полей со следующими колонками:
//        * Путь      - Строка - XPath, идентифицирующий различающееся значение. Значение "ТипКонтактнойИнформации"
//                               означает, что переданные экземпляры контактной информации различаются типом.
//        * Описание  - Строка - описание отличающегося реквизита в терминах предметной области.
//        * Значение1 - Строка - значение, соответствующая объекту, переданному в параметре Данные1.
//        * Значение2 - Строка - значение, соответствующая объекту, переданному в параметре Данные2.
//
Функция РазличияКонтактнойИнформации(Знач Данные1, Знач Данные2) Экспорт
	ДанныеКИ1 = ПривестиКонтактнуюИнформациюXML(Данные1);
	ДанныеКИ2 = ПривестиКонтактнуюИнформациюXML(Данные2);
	
	ТипКонтактнойИнформации = ДанныеКИ1.ТипКонтактнойИнформации;
	Если ТипКонтактнойИнформации <> ДанныеКИ2.ТипКонтактнойИнформации Тогда
		// Различные типы, дальше не сравниваем.
		Результат = Новый ТаблицаЗначений;
		Колонки   = Результат.Колонки;
		СтрокаРезультата = Результат.Добавить();
		СтрокаРезультата[Колонки.Добавить("Путь").Имя]      = "ТипКонтактнойИнформации";
		СтрокаРезультата[Колонки.Добавить("Значение1").Имя] = ДанныеКИ1.ТипКонтактнойИнформации;
		СтрокаРезультата[Колонки.Добавить("Значение2").Имя] = ДанныеКИ2.ТипКонтактнойИнформации;
		СтрокаРезультата[Колонки.Добавить("Описание").Имя]  = НСтр("ru = 'Различные типы контактной информации'");
		Возврат Результат;
	КонецЕсли;
	
	ТекстРазличияXML = XSLT_ТаблицаЗначенийРазличияXML(ДанныеКИ1.ДанныеXML, ДанныеКИ2.ДанныеXML);
	
	// Отдаем интерпретацию в зависимости от типа.
	Возврат ЗначениеИзСтрокиXML( XSLT_ИнтерпретацияРазличияXMLКонтактнойИнформации(
			ТекстРазличияXML, ТипКонтактнойИнформации));
	
КонецФункции

// Преобразует контактную информацию в вид XML.
//
// Параметры:
//    Данные - Строка     - описание контактной информации.
//           - ОбъектXTDO - описание контактной информации.
//           - Структура  - описание контактной информации. Ожидаются поля:
//                 * ЗначенияПолей - Строка, Структура, СписокЗначений, Соответствие - поля контактной информации.
//                 * Представление - Строка - Представление. Используется в случае, если не удалось вычислить 
//                                            представление из ЗначенияПолей (отсутствие в них поля Представление).
//                 * Комментарий - Строка - комментарий. Используется в случае, если не удалось вычислить комментарий
//                                          из ЗначенияПолей.
//                 * ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура
//                                             Используется в случае, если не удалось вычислить тип из ЗначенияПолей.
//
// Возвращаемое значение:
//     Структура - содержит поля:
//        * ТипКонтактнойИнформации - Перечисление.ТипыКонтактнойИнформации
//        * ДанныеXML               - Строка - текст XML.
//
Функция ПривестиКонтактнуюИнформациюXML(Знач Данные) Экспорт
	Если ЭтоСтрокаXML(Данные) Тогда
		Возврат Новый Структура("ДанныеXML, ТипКонтактнойИнформации",
			Данные, ЗначениеИзСтрокиXML( XSLT_ТипКонтактнойИнформацииПоСтрокеXML(Данные) ));
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ОбъектXDTO") Тогда
		ДанныеXML = КонтактнаяИнформацияXDTOВXML(Данные);
		Возврат Новый Структура("ДанныеXML, ТипКонтактнойИнформации",
			ДанныеXML, ЗначениеИзСтрокиXML( XSLT_ТипКонтактнойИнформацииПоСтрокеXML(ДанныеXML) ));
		
	КонецЕсли;
		
	// Ожидаем структуру
	Комментарий = Неопределено;
	Данные.Свойство("Комментарий", Комментарий);
	
	ЗначенияПолей = Данные.ЗначенияПолей;
	Если ЭтоСтрокаXML(ЗначенияПолей) Тогда 
		// Возможно необходимо переопределить комментарий.
		Если Не ПустаяСтрока(Комментарий) Тогда
			УправлениеКонтактнойИнформацией.УстановитьКомментарийКонтактнойИнформации(ЗначенияПолей, Комментарий);
		КонецЕсли;
		
		Возврат Новый Структура("ДанныеXML, ТипКонтактнойИнформации",
			ЗначенияПолей, ЗначениеИзСтрокиXML( XSLT_ТипКонтактнойИнформацииПоСтрокеXML(ЗначенияПолей) ));
		
	КонецЕсли;
	
	// Разбираем по ЗначенияПолей, ВидКонтактнойИнформации, Представление.
	ТипЗначенийПолей = ТипЗнч(ЗначенияПолей);
	Если ТипЗначенийПолей = Тип("Строка") Тогда
		// Текст из пар ключ-значение
		СтрокаXMLСтруктуры = XSLT_СтрокаКлючЗначениеВСтруктуру(ЗначенияПолей)
		
	ИначеЕсли ТипЗначенийПолей = Тип("СписокЗначений") Тогда
		// Список значений
		СтрокаXMLСтруктуры = XSLT_СписокЗначенийВСтруктуру( ЗначениеВСтрокуXML(ЗначенияПолей) );
		
	ИначеЕсли ТипЗначенийПолей = Тип("Соответствие") Тогда
		// Соответствие
		СтрокаXMLСтруктуры = XSLT_СоответствиеВСтруктуру( ЗначениеВСтрокуXML(ЗначенияПолей) );
		
	ИначеЕсли ТипЗначенийПолей = Тип("ОбъектXDTO") Тогда
		// Ожидаем структуру
		Если ЗначенияПолей.Состав.Страна = Неопределено Тогда
			ЗначенияПолей.Состав.Страна = "";
		КонецЕсли;
		Если ЗначенияПолей.Состав.Состав = Неопределено Тогда
			ЗначенияПолей.Состав.Состав = "";
		КонецЕсли;
		
		СтрокаXMLСтруктуры = ЗначениеВСтрокуXML(ЗначенияПолей);
	Иначе
		// Ожидаем структуру
		СтрокаXMLСтруктуры = ЗначениеВСтрокуXML(ЗначенияПолей);
		
	КонецЕсли;
	
	// Разбираем по ВидКонтактнойИнформации.
	ТипКонтактнойИнформации = ТипВидаКонтактнойИнформации(Данные.ВидКонтактнойИнформации);
	
	Результат = Новый Структура("ТипКонтактнойИнформации, ДанныеXML", ТипКонтактнойИнформации);
	
	ВсеТипы = Перечисления.ТипыКонтактнойИнформации;
	Если ТипКонтактнойИнформации = ВсеТипы.Адрес Тогда
		Результат.ДанныеXML = XSLT_СтруктураВАдрес(СтрокаXMLСтруктуры, Данные.Представление, Комментарий);
		
	ИначеЕсли ТипКонтактнойИнформации = ВсеТипы.АдресЭлектроннойПочты Тогда
		Результат.ДанныеXML = XSLT_СтруктураВАдресЭлектроннойПочты(СтрокаXMLСтруктуры, Данные.Представление, Комментарий);
		
	ИначеЕсли ТипКонтактнойИнформации = ВсеТипы.ВебСтраница Тогда
		Результат.ДанныеXML = XSLT_СтруктураВВебСтраницу(СтрокаXMLСтруктуры, Данные.Представление, Комментарий);
		
	ИначеЕсли ТипКонтактнойИнформации = ВсеТипы.Телефон Тогда
		Результат.ДанныеXML = XSLT_СтруктураВТелефон(СтрокаXMLСтруктуры, Данные.Представление, Комментарий);
		
	ИначеЕсли ТипКонтактнойИнформации = ВсеТипы.Факс Тогда
		Результат.ДанныеXML = XSLT_СтруктураВФакс(СтрокаXMLСтруктуры, Данные.Представление, Комментарий);
		
	ИначеЕсли ТипКонтактнойИнформации = ВсеТипы.Другое Тогда
		Результат.ДанныеXML = XSLT_СтруктураВДругое(СтрокаXMLСтруктуры, Данные.Представление, Комментарий);
		
	ИначеЕсли ТипКонтактнойИнформации = ВсеТипы.Skype Тогда
		Результат.ДанныеXML = XSLT_СтруктураВДругое(СтрокаXMLСтруктуры, Данные.Представление, Комментарий);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Ошибка параметров преобразования, не определен тип контактной информации'");
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииПоРаботеСXSLT

// Производит сравнение двух строк XML.
// Проверяются только строки и атрибуты, без пробельных, CDATA и т.п. Порядок важен.
//
// Параметры:
//    Текст1 - Строка - Строка XML
//    Текст2 - Строка - Строка XML.
//
// Возвращаемое значение:
//    Строка - сериализованый ValueTable (http://v8.1c.ru/8.1/data/core), в котором три колонки:
//       * Путь      - Строка - путь к месту различия.
//       * Значение1 - Строка - значение в XML из параметра Текст1.
//       * Значение2 - Строка - значение в XML из параметра Текст2.
//
Функция XSLT_ТаблицаЗначенийРазличияXML(Текст1, Текст2)
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_ТаблицаЗначенийРазличияXML();
	
	Построитель = Новый ТекстовыйДокумент;
	Построитель.ДобавитьСтроку("<dn><f>");
	Построитель.ДобавитьСтроку( XSLT_УдалитьОписаниеXML(Текст1) );
	Построитель.ДобавитьСтроку("</f><s>");
	Построитель.ДобавитьСтроку( XSLT_УдалитьОписаниеXML(Текст2) );
	Построитель.ДобавитьСтроку("</s></dn>");
	
	Возврат Преобразователь.ПреобразоватьИзСтроки(Построитель.ПолучитьТекст());
	
КонецФункции

// Преобразует текст с парами Ключ = Значение, разделенных переносами строк (см формат адреса) в XML.
// В случае повторных ключей все включаются в результат, но при десериализации будет использован 
// последний (особенность работы сериализатора платформы).
//
// Параметры:
//    Текст - Строка - пары Ключ = Значение.
//
// Возвращаемое значение:
//     Строка  - XML сериализованной структуры.
//
Функция XSLT_СтрокаКлючЗначениеВСтруктуру(Знач Текст) 
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_СтрокаКлючЗначениеВСтруктуру();
	Возврат Преобразователь.ПреобразоватьИзСтроки(XSLT_УзелСтрокиПараметра(Текст));
	
КонецФункции

// Преобразует список значений в структуру. Представление преобразуется в ключ.
//
// Параметры:
//    Текст - Строка - сериализованная список значений.
//
// Возвращаемое значение:
//    Строка - результат преобразования.
//
Функция XSLT_СписокЗначенийВСтруктуру(Текст)
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_СписокЗначенийВСтруктуру();
	Возврат Преобразователь.ПреобразоватьИзСтроки(Текст);
	
КонецФункции

// Преобразует соответствие в структуру. Ключ преобразуется в ключ, значение - в значение.
//
// Параметры:
//    Текст - Строка - сериализованное соответствие.
//
// Возвращаемое значение:
//    Строка - результат преобразования.
//
Функция XSLT_СоответствиеВСтруктуру(Текст)
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_СоответствиеВСтруктуру();
	Возврат Преобразователь.ПреобразоватьИзСтроки(Текст);
	
КонецФункции

// Анализирует таблицу Путь-Значение1-Значение2 для указанного вида контактной информации.
//
// Параметры:
//    Текст                   - Строка - строка XML с ValueTable из результата сравнения XML.
//    ТипКонтактнойИнформации - ПеречислениеСсылка.ТипыКонтактнойИнформации  - значение перечисления типа.
//
// Возвращаемое значение:
//    Строка - сериализованную таблицу значений отличающихся полей.
//
Функция XSLT_ИнтерпретацияРазличияXMLКонтактнойИнформации(Знач Текст, Знач ТипКонтактнойИнформации) 
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_ИнтерпретацияРазличияXMLКонтактнойИнформации(
		ТипКонтактнойИнформации);
	Возврат Преобразователь.ПреобразоватьИзСтроки(Текст);
	
КонецФункции

// Преобразует структуру в XML контактной информации.
//
// Параметры:
//    Текст         - Строка - сериализованная структура.
//    Представление - Строка - необязательное представление. Используется, только если в структуре нет поля
//                             представления.
//    Комментарий   - Строка - необязательный комментарий. Используется, только если в структуре нет поля комментария.
//
// Возвращаемое значение:
//    Строка - XML контактной информации.
//
Функция XSLT_СтруктураВАдрес(Знач Текст, Знач Представление = Неопределено, Знач Комментарий = Неопределено)
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_ПреобразованиеXSL();
	Возврат XSLT_КонтрольПредставленияИКомментария(
		Преобразователь.ПреобразоватьИзСтроки(Текст),
		Представление, Комментарий);
		
КонецФункции

// Преобразует структуру в XML контактной информации.
//
// Параметры:
//    Текст         - Строка - сериализованная структура.
//    Представление - Строка - необязательное представление. Используется, только если в структуре нет поля
//                             представления.
//    Комментарий   - Строка - необязательный комментарий. Используется, только если в структуре нет поля комментария.
//
// Возвращаемое значение:
//    Строка - XML контактной информации.
//
Функция XSLT_СтруктураВАдресЭлектроннойПочты(Знач Текст, Знач Представление = Неопределено, Знач Комментарий = Неопределено)
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_СтруктураВАдресЭлектроннойПочты();
	Возврат XSLT_КонтрольПредставленияИКомментария(
		XSLT_КонтрольСтроковогоЗначенияПростогоТипа(Преобразователь.ПреобразоватьИзСтроки(Текст), Представление), 
		Представление, Комментарий);
		
КонецФункции

// Преобразует структуру в XML контактной информации.
//
// Параметры:
//    Текст         - Строка - сериализованная структура.
//    Представление - Строка - необязательное представление. Используется, только если в структуре нет поля
//                             представления.
//    Комментарий   - Строка - необязательный комментарий. Используется, только если в структуре нет поля комментария.
//
// Возвращаемое значение:
//    Строка - XML контактной информации.
//
Функция XSLT_СтруктураВВебСтраницу(Знач Текст, Знач Представление = Неопределено, Знач Комментарий = Неопределено)
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_СтруктураВВебСтраницу();
	
	Возврат XSLT_КонтрольПредставленияИКомментария(
		XSLT_КонтрольСтроковогоЗначенияПростогоТипа( Преобразователь.ПреобразоватьИзСтроки(Текст), Представление),
		Представление, Комментарий);
		
КонецФункции

// Преобразует структуру в XML контактной информации.
//
// Параметры:
//    Текст         - Строка - сериализованная структура.
//    Представление - Строка - необязательное представление. Используется, только если в структуре нет поля
//                             представления.
//    Комментарий   - Строка - необязательный комментарий. Используется, только если в структуре нет поля комментария.
//
// Возвращаемое значение:
//    Строка - XML контактной информации.
//
Функция XSLT_СтруктураВТелефон(Знач Текст, Знач Представление = Неопределено, Знач Комментарий = Неопределено)
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_СтруктураВТелефон();
	Возврат XSLT_КонтрольПредставленияИКомментария(
		Преобразователь.ПреобразоватьИзСтроки(Текст),
		Представление, Комментарий);
КонецФункции

// Преобразует структуру в XML контактной информации.
//
// Параметры:
//    Текст         - Строка - сериализованная структура.
//    Представление - Строка - необязательное представление. Используется, только если в структуре нет поля
//                             представления.
//    Комментарий   - Строка - необязательный комментарий. Используется, только если в структуре нет поля комментария.
//
// Возвращаемое значение:
//    Строка - XML контактной информации.
//
Функция XSLT_СтруктураВФакс(Знач Текст, Знач Представление = Неопределено, Знач Комментарий = Неопределено)
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_СтруктураВФакс();
	Возврат XSLT_КонтрольПредставленияИКомментария(
		Преобразователь.ПреобразоватьИзСтроки(Текст),
		Представление, Комментарий);
		
КонецФункции

// Преобразует структуру в XML контактной информации.
//
// Параметры:
//    Текст         - Строка - сериализованная структура.
//    Представление - Строка - необязательное представление. Используется, только если в структуре нет поля
//                             представления.
//    Комментарий   - Строка - необязательный комментарий. Используется, только если в структуре нет поля комментария.
//
// Возвращаемое значение:
//    Строка - XML контактной информации.
//
Функция XSLT_СтруктураВДругое(Знач Текст, Знач Представление = Неопределено, Знач Комментарий = Неопределено)
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_СтруктураВДругое();
	Возврат XSLT_КонтрольПредставленияИКомментария(
		XSLT_КонтрольСтроковогоЗначенияПростогоТипа( Преобразователь.ПреобразоватьИзСтроки(Текст), Представление),
		Представление, Комментарий);
		
КонецФункции

// Устанавливает в контактной информации представление и комментарий, если они не заполнены.
//
// Параметры:
//    Текст         - Строка - сериализованная структура.
//    Представление - Строка - необязательное представление. Используется, только если в структуре нет поля
//                             представления.
//    Комментарий   - Строка - необязательный комментарий. Используется, только если в структуре нет поля комментария.
//
// Возвращаемое значение:
//    Строка - XML контактной информации.
//
Функция XSLT_КонтрольПредставленияИКомментария(Знач Текст, Знач Представление = Неопределено, Знач Комментарий = Неопределено)
	
	Если Представление = Неопределено И Комментарий = Неопределено Тогда
		Возврат Текст;
	КонецЕсли;
	
	XSLT_Текст = Новый ТекстовыйДокумент;
	XSLT_Текст.ДобавитьСтроку("
		|<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform""
		|  xmlns:tns=""http://www.v8.1c.ru/ssl/contactinfo""
		|  xmlns=""http://www.v8.1c.ru/ssl/contactinfo"" 
		|>
		|  <xsl:output method=""xml"" omit-xml-declaration=""yes"" indent=""yes"" encoding=""utf-8""/>
		|
		|  <xsl:template match=""node() | @*"">
		|    <xsl:copy>
		|      <xsl:apply-templates select=""node() | @*"" />
		|    </xsl:copy>
		|  </xsl:template>
		|");
		
	Если Представление <> Неопределено Тогда
		XSLT_Текст.ДобавитьСтроку("
		|  <xsl:template match=""tns:КонтактнаяИнформация/@Представление"">
		|    <xsl:attribute name=""Представление"">
		|      <xsl:choose>
		|        <xsl:when test="".=''"">" + НормализованнаяСтрокаXML(Представление) + "</xsl:when>
		|        <xsl:otherwise>
		|          <xsl:value-of select="".""/>
		|        </xsl:otherwise>
		|      </xsl:choose>
		|    </xsl:attribute>
		|  </xsl:template>
		|");
	КонецЕсли;
	
	Если Комментарий <> Неопределено Тогда
		XSLT_Текст.ДобавитьСтроку("
		|  <xsl:template match=""tns:КонтактнаяИнформация/tns:Комментарий"">
		|    <xsl:element name=""Комментарий"">
		|      <xsl:choose>
		|        <xsl:when test="".=''"">" + НормализованнаяСтрокаXML(Комментарий) + "</xsl:when>
		|        <xsl:otherwise>
		|          <xsl:value-of select="".""/>
		|        </xsl:otherwise>
		|      </xsl:choose>
		|    </xsl:element>
		|  </xsl:template>
		|");
	КонецЕсли;
		XSLT_Текст.ДобавитьСтроку("
		|</xsl:stylesheet>
		|");
		
	Преобразователь = Новый ПреобразованиеXSL;
	Преобразователь.ЗагрузитьИзСтроки( XSLT_Текст.ПолучитьТекст() );
	
	Возврат Преобразователь.ПреобразоватьИзСтроки(Текст);
КонецФункции

// Устанавливает в контактной информации Состав.Значение на переданное представление.
// Если Представление равно неопределено, то никаких действий не производит. Иначе проверяет на пустоту.
// Состав. Если там ничего нет и атрибут "Состав.Значение" пуст, то ставим в состав значение представления.
//
// Параметры:
//    Текст         - Строка - XML контактной информации.
//    Представление - Строка - устанавливаемое представление.
//
// Возвращаемое значение:
//    Строка - XML контактной информации.
//
Функция XSLT_КонтрольСтроковогоЗначенияПростогоТипа(Знач Текст, Знач Представление)
	
	Если Представление = Неопределено Тогда
		Возврат Текст;
	КонецЕсли;
	
	Преобразователь = Новый ПреобразованиеXSL;
	Преобразователь.ЗагрузитьИзСтроки("
		|<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform""
		|  xmlns:tns=""http://www.v8.1c.ru/ssl/contactinfo""
		|>
		|  <xsl:output method=""xml"" omit-xml-declaration=""yes"" indent=""yes"" encoding=""utf-8""/>
		|  
		|  <xsl:template match=""node() | @*"">
		|    <xsl:copy>
		|      <xsl:apply-templates select=""node() | @*"" />
		|    </xsl:copy>
		|  </xsl:template>
		|  
		|  <xsl:template match=""tns:КонтактнаяИнформация/tns:Состав/@Значение"">
		|    <xsl:attribute name=""Значение"">
		|      <xsl:choose>
		|        <xsl:when test="".=''"">" + НормализованнаяСтрокаXML(Представление) + "</xsl:when>
		|        <xsl:otherwise>
		|          <xsl:value-of select="".""/>
		|        </xsl:otherwise>
		|      </xsl:choose>
		|    </xsl:attribute>
		|  </xsl:template>
		|
		|</xsl:stylesheet>
		|");
	
	Возврат Преобразователь.ПреобразоватьИзСтроки(Текст);
КонецФункции

// Возвращает фрагмент XML для подстановки строки в виде <Узел>Строка<Узел>.
//
// Параметры:
//    Текст       - Строка - вставка в XML.
//    ИмяЭлемента - Строка - необязательное имя для внешнего узла.
//
// Возвращаемое значение:
//    Строка - результирующий XML.
//
Функция XSLT_УзелСтрокиПараметра(Знач Текст, Знач ИмяЭлемента = "ExternalParamNode")
	
	// Через запись xml для маскировки спецсимволов.
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	Запись.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	Запись.ЗаписатьТекст(Текст);
	Запись.ЗаписатьКонецЭлемента();
	Возврат Запись.Закрыть();
	
КонецФункции

// Возвращает XML без описания <?xml...> для включения внутрь другого XML.
//
// Параметры:
//    Текст - Строка - исходный XML.
//
// Возвращаемое значение:
//    Строка - результирующий XML.
//
Функция XSLT_УдалитьОписаниеXML(Знач Текст)
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_УдалитьОписаниеXML();
	Возврат Преобразователь.ПреобразоватьИзСтроки(СокрЛ(Текст));
	
КонецФункции

// Преобразует текст XML контактной информации в перечисление типа.
//
// Параметры:
//    Текст - Строка - исходный XML.
//
// Возвращаемое значение:
//    Строка - сериализованное значение перечисления ТипыКонтактнойИнформации.
//
Функция XSLT_ТипКонтактнойИнформацииПоСтрокеXML(Знач Текст)
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_ТипКонтактнойИнформацииПоСтрокеXML();
	Возврат Преобразователь.ПреобразоватьИзСтроки(СокрЛ(Текст));
	
КонецФункции

//  Возвращает признак того, является ли текст XML.
//
//  Параметры:
//      Текст - Строка - проверяемый текст.
//
// Возвращаемое значение:
//      Булево - результат проверки.
//
Функция ЭтоСтрокаXML(Текст)
	
	Возврат ТипЗнч(Текст) = Тип("Строка") И Лев(СокрЛ(Текст),1) = "<";
	
КонецФункции

// Десериализатор известных платформе типов.
Функция ЗначениеИзСтрокиXML(Знач Текст)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Текст);
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	
КонецФункции

// Сериализатор известных платформе типов.
Функция ЗначениеВСтрокуXML(Знач Значение)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(Новый ПараметрыЗаписиXML(, , Ложь, Ложь, ""));
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	// Платформенный сериализатор позволяет записать в значение атрибутов перенос строки.
	Возврат СтрЗаменить(ЗаписьXML.Закрыть(), Символы.ПС, "&#10;");
	
КонецФункции

// Для работы с атрибутами содержащими переносы строк.
//
// Параметры:
//     Текст - Строка - Корректируемая строка XML.
//
// Возвращаемое значение:
//     Строка - Нормализованная строка.
//
Функция МногострочнаяСтрокаXML(Знач Текст)
	
	Возврат СтрЗаменить(Текст, Символы.ПС, "&#10;");
	
КонецФункции

// Подготавливает строку для включения в текст XML, убирая спецсимволы.
//
// Параметры:
//     Текст - Строка - Корректируемая строка XML.
//
// Возвращаемое значение:
//     Строка - Нормализованная строка.
//
Функция НормализованнаяСтрокаXML(Знач Текст)
	
	Результат = СтрЗаменить(Текст,     """", "&quot;");
	Результат = СтрЗаменить(Результат, "&",  "&amp;");
	Результат = СтрЗаменить(Результат, "'",  "&apos;");
	Результат = СтрЗаменить(Результат, "<",  "&lt;");
	Результат = СтрЗаменить(Результат, ">",  "&gt;");
	Возврат МногострочнаяСтрокаXML(Результат);
	
КонецФункции


#КонецОбласти

#КонецОбласти
