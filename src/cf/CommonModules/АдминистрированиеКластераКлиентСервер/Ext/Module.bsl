////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
// Клиентские и серверные процедуры и функции общего назначения:
// - Программный интерфейс для администрированию кластера серверов.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область КонструкторыПараметровПрограммногоИнтерфейса

// Конструктор структуры, описывающей параметры подключения к администрируемому
//  кластеру серверов.
//
// Возвращаемое значение: Структура, поля:
//  ТипПодключения - Строка, возможные значения:
//    "COM" - при подключении к агенту сервера с использованием COM-объекта V8*.ComConnector,
//    "RAS" - при подключении к серверу администрирования (ras) с использованием консольного
//      клиента сервера администрирования (rac),
//  АдресАгентаСервера - Строка, сетевой адрес агента сервера (только при ТипПодключения = "COM"),
//  ПортАгентаСервера - Число, сетевой порт агента сервера (только при ТипПодключения = "COM"),
//    типичное значение - 1540,
//  АдресСервераАдминистрирования - Строка, сетевой адрес сервера администрирования ras (только.
//    При ТипПодключения = "RAS"),
//  ПортСервераАдминистрирования - Число, сетевой порт сервера администрирования ras (только при.
//    ТипПодключения = "RAS"), типичное значение - 1545,
//  ПортКластера - Число, сетевой порт менеджера администрируемого кластера, типичное значение -1541,
//  ИмяАдминистратораКластера - Строка, имя учетной записи администратора кластера (если для кластера
//    не задан список администраторов - используется пустая строка),
//  ПарольАдминистратораКластера - Строка, пароль учетной записи администратора кластера (если
//    для кластера не задан список администраторов или для учетной записи не установлен пароль -
//    используется пустая строка).
//
Функция ПараметрыАдминистрированияКластера() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("ТипПодключения", "COM"); // "COM" или "RAS"
	
	// Только для "COM"
	Результат.Вставить("АдресАгентаСервера", "");
	Результат.Вставить("ПортАгентаСервера", 1540);
	
	// Только для "RAS"
	Результат.Вставить("АдресСервераАдминистрирования", "");
	Результат.Вставить("ПортСервераАдминистрирования", 1545);
	
	Результат.Вставить("ПортКластера", 1541);
	Результат.Вставить("ИмяАдминистратораКластера", "");
	Результат.Вставить("ПарольАдминистратораКластера", "");
	
	Возврат Результат;
	
КонецФункции

// Конструктор структуры, описывающей параметры подключения к администрируемой информационной
//  базе кластера.
//
// Возвращаемое значение: Структура, поля:
//  ИмяВКластере - Строка, имя администрируемой информационной базы в кластере серверов,
//  ИмяАдминистратораИнформационнойБазы - Строка, имя пользователя информационной базы с правами
//    администратора (если для информационной базы не задан список пользователей ИБ - используется
//    пустая строка),
//  ПарольАдминистратораИнформационнойБазы - Строка, пароль пользователя информационной базы
//    с правами администратора (если для информационной базы не задан список пользователей ИБ или
//    для пользователя ИБ не установлен пароль - используется пустая строка).
//
Функция ПараметрыАдминистрированияИнформационнойБазыКластера() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("ИмяВКластере", "");
	Результат.Вставить("ИмяАдминистратораИнформационнойБазы", "");
	Результат.Вставить("ПарольАдминистратораИнформационнойБазы", "");
	
	Возврат Результат;
	
КонецФункции

// Проверяет корректность параметров администрирования.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  ПараметрыАдминистрированияИБ - Структура, описывающая параметры подключения к информационной базе,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера().
//    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
//    в качестве значения параметра ПараметрыАдминистрированияКластера,
//  ПроверятьПараметрыАдминистрированияКластера - Булево, флаг необходимости проверки параметров администрирования
//                                                кластера,
//  ПроверятьПараметрыАдминистрированияИнформационнойБазы - Булево, флаг необходимости проверки параметров
//                                                          администрирования кластера.
//
Процедура ПроверитьПараметрыАдминистрирования(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено,
	ПроверятьПараметрыАдминистрированияКластера = Истина,
	ПроверятьПараметрыАдминистрированияИнформационнойБазы = Истина) Экспорт
	
	Если ПараметрыАдминистрированияИБ = Неопределено Тогда
		ПараметрыАдминистрированияИБ = ПараметрыАдминистрированияКластера;
	КонецЕсли;
	
	МенеджерАдминистрирования = МенеджерАдминистрирования(ПараметрыАдминистрированияКластера);
	МенеджерАдминистрирования.ПроверитьПараметрыАдминистрирования(ПараметрыАдминистрированияКластера, ПараметрыАдминистрированияИБ, ПроверятьПараметрыАдминистрированияИнформационнойБазы, ПроверятьПараметрыАдминистрированияКластера);
	
КонецПроцедуры

#КонецОбласти

#Область БлокировкаСеансовИРегламентныхЗаданий

// Конструктор структуры, описывающей свойства блокировки сеансов и регламентных заданий
//  информационной базы.
//
// Возвращаемое значение: Структура, поля:
//  БлокировкаСеансов - Булево, флаг установки блокировки новых сеансов с информационной базой,
//  ДатаС - Дата(Дата и время) - момент начала блокировки новых сеансов с информационной базой,
//  ДатаПо - Дата(Дата и время) - момент окончания блокировки новых сеансов с информационной базой,
//  Сообщение - Строка, сообщение, отображаемое пользователю при попытке установки нового сеанса
//    с информационной базой при установленной блокировке новых сеансов,
//  КодРазрешения - Строка, код обхода блокировки новых сеансов с информационной базой,
//  БлокировкаРегламентныхЗаданий - Булево, флаг блокировки выполнения регламентных заданий
//    информационной базы.
//
Функция СвойстваБлокировкиСеансовИРегламентныхЗаданий() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("БлокировкаСеансов");
	Результат.Вставить("ДатаС");
	Результат.Вставить("ДатаПо");
	Результат.Вставить("Сообщение");
	Результат.Вставить("КодРазрешения");
	Результат.Вставить("ПараметрБлокировки");
	Результат.Вставить("БлокировкаРегламентныхЗаданий");
	
	Возврат Результат;
	
КонецФункции

// Возвращает текущее состояние блокировки сеансов и регламентных заданий для информационной базы.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  ПараметрыАдминистрированияИБ - Структура, описывающая параметры подключения к информационной базе,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера().
//    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
//    в качестве значения параметра ПараметрыАдминистрированияКластера.
//
// Возвращаемое значение: Структура, описывающая состояние блокировки сеансов и регламентных заданий,
//  описание - см. АдминистрированиеКластераКлиентСервер.СвойстваБлокировкиСеансовИРегламентныхЗаданий().
//
Функция БлокировкаСеансовИЗаданийИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено) Экспорт
	
	Если ПараметрыАдминистрированияИБ = Неопределено Тогда
		ПараметрыАдминистрированияИБ = ПараметрыАдминистрированияКластера;
	КонецЕсли;
	
	МенеджерАдминистрирования = МенеджерАдминистрирования(ПараметрыАдминистрированияКластера);
	
	Результат = МенеджерАдминистрирования.БлокировкаСеансовИЗаданийИнформационнойБазы(
		ПараметрыАдминистрированияКластера,
		ПараметрыАдминистрированияИБ);
	
	Возврат Результат;
	
КонецФункции

// Устанавливает новое состояние блокировки сеансов и регламентных заданий для информационной базы.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  ПараметрыАдминистрированияИБ - Структура, описывающая параметры подключения к информационной базе,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера(),
//    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
//    в качестве значения параметра ПараметрыАдминистрированияКластера.
//  СвойстваБлокировкиСеансовИЗаданий - Структура, описывающая состояние блокировки сеансов и регламентных заданий,
//    описание - см. АдминистрированиеКластераКлиентСервер.СвойстваБлокировкиСеансовИРегламентныхЗаданий().
//
Процедура УстановитьБлокировкуСеансовИЗаданийИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ, Знач СвойстваБлокировкиСеансовИЗаданий) Экспорт
	
	Если ПараметрыАдминистрированияИБ = Неопределено Тогда
		ПараметрыАдминистрированияИБ = ПараметрыАдминистрированияКластера;
	КонецЕсли;
	
	МенеджерАдминистрирования = МенеджерАдминистрирования(ПараметрыАдминистрированияКластера);
	
	МенеджерАдминистрирования.УстановитьБлокировкуСеансовИЗаданийИнформационнойБазы(
		ПараметрыАдминистрированияКластера,
		ПараметрыАдминистрированияИБ,
		СвойстваБлокировкиСеансовИЗаданий);
	
КонецПроцедуры

// Снимает блокировку сеансов и регламентных заданий для информационной базы.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  ПараметрыАдминистрированияИБ - Структура, описывающая параметры подключения к информационной базе,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера(),
//    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
//    в качестве значения параметра ПараметрыАдминистрированияКластера.
//
Процедура СнятьБлокировкуСеансовИЗаданийИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено) Экспорт
	
	Если ПараметрыАдминистрированияИБ = Неопределено Тогда
		ПараметрыАдминистрированияИБ = ПараметрыАдминистрированияКластера;
	КонецЕсли;
	
	СвойстваБлокировки = СвойстваБлокировкиСеансовИРегламентныхЗаданий();
	СвойстваБлокировки.БлокировкаСеансов = Ложь;
	СвойстваБлокировки.ДатаС = Неопределено;
	СвойстваБлокировки.ДатаПо = Неопределено;
	СвойстваБлокировки.Сообщение = "";
	СвойстваБлокировки.КодРазрешения = "";
	СвойстваБлокировки.БлокировкаРегламентныхЗаданий = Ложь;
	
	УстановитьБлокировкуСеансовИЗаданийИнформационнойБазы(
		ПараметрыАдминистрированияКластера,
		ПараметрыАдминистрированияИБ,
		СвойстваБлокировки);
	
КонецПроцедуры

#КонецОбласти

#Область БлокировкаРегламентныхЗаданий

// Возвращает текущее состояние блокировки регламентных заданий для информационной базы.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  ПараметрыАдминистрированияИБ - Структура, описывающая параметры подключения к информационной базе,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера().
//    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
//    в качестве значения параметра ПараметрыАдминистрированияКластера.
//
// Возвращаемое значение: Булево.
//
Функция БлокировкаРегламентныхЗаданийИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено) Экспорт
	
	Если ПараметрыАдминистрированияИБ = Неопределено Тогда
		ПараметрыАдминистрированияИБ = ПараметрыАдминистрированияКластера;
	КонецЕсли;
	
	МенеджерАдминистрирования = МенеджерАдминистрирования(ПараметрыАдминистрированияКластера);
	
	Результат = МенеджерАдминистрирования.БлокировкаРегламентныхЗаданийИнформационнойБазы(
		ПараметрыАдминистрированияКластера,
		ПараметрыАдминистрированияИБ);
	
	Возврат Результат;
	
КонецФункции

// Устанавливает новое состояние блокировки регламентных заданий для информационной базы.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  ПараметрыАдминистрированияИБ - Структура, описывающая параметры подключения к информационной базе,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера(),
//    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
//    в качестве значения параметра ПараметрыАдминистрированияКластера.
//  БлокировкаРегламентныхЗаданий - Булево, флаг установки блокировки регламентных заданий информационной базы.
//
Процедура УстановитьБлокировкуРегламентныхЗаданийИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ, Знач БлокировкаРегламентныхЗаданий) Экспорт
	
	Если ПараметрыАдминистрированияИБ = Неопределено Тогда
		ПараметрыАдминистрированияИБ = ПараметрыАдминистрированияКластера;
	КонецЕсли;
	
	МенеджерАдминистрирования = МенеджерАдминистрирования(ПараметрыАдминистрированияКластера);
	
	МенеджерАдминистрирования.УстановитьБлокировкуРегламентныхЗаданийИнформационнойБазы(
		ПараметрыАдминистрированияКластера,
		ПараметрыАдминистрированияИБ,
		БлокировкаРегламентныхЗаданий);
	
КонецПроцедуры

#КонецОбласти

#Область СеансыИнформационнойБазы

// Конструктор структуры, описывающей свойства сеанса информационной базы.
//
// Возвращаемое значение: Структура, поля:
//  Номер - Число, номер сеанса. Уникален среди всех сеансов информационной базы,
//  ИмяПользователя - Строка, имя аутентифицированного пользователя информационной базы,
//  ИмяКлиентскогоКомпьютера - Строка, имя или сетевой адрес компьютера, установившего
//    сеанс с информационной базой,
//  ИдентификаторКлиентскогоПриложения - Строка, идентификатор приложения, установившего сеанс.
//    Возможные значения - см. описание к функции глобального контекста ПредставлениеПриложения(),
//  ИдентификаторЯзыка - Строка, идентификатор языка интерфейса,
//  МоментСозданияСеанса - Дата(Дата и время) - момент установки сеанса,
//  МоментПоследнейАктивностиСеанса - Дата(Дата и время) - момент последней активности сеанса,
//  Блокировка - Число, номер сеанса, который является причиной ожидания управляемой транзакционной
//    блокировки, в том случае, если сеанс выполняет установку управляемых транзакционных блокировок
//    и ожидает снятия блокировок, установленных другим сеансом (иначе - значение равно 0),
//  БлокировкаСУБД - Число, номер сеанса, который является причиной ожидания транзакционной
//    блокировки, в том случае, если сеанс исполняет запрос к СУБД и ожидает транзакционную
//    блокировку, установленную другим сеансом (иначе - значение равно 0),
//  Передано - Число, объем данных, переданных меду сервером 1С:Предприятия и клиентским приложением
//    данного сеанса с момента начала сеанса (в байтах),
//  ПереданоЗа5Минут - Число, объем данных, переданных между сервером 1С:Предприятия и клиентским
//    приложением данного сеанса за последние 5 минут (в байтах),
//  СерверныхВызовов - Число, количество вызовов сервера 1С:Предприятия от имена данного сеанса с
//    момента начала сеанса,
//  СерверныхВызововЗа5Минут - Число, количество вызовов сервера 1С:Предприятия от имени данного сеанса
//    за последние 5 минут,
//  ДлительностьСерверныхВызовов - Число, время исполнения вызовов сервера 1С:Предприятия от имени
//    данного сеанса с момента начала сеанса (в секундах),
//  ДлительностьТекущегоСерверногоВызова - Число, интервал времени в миллисекундах, прошедший с момента начала
//    обращения, в случае, если сеанс выполняется вызов сервера 1С:Предприятия (иначе - значение равно 0),
//  ДлительностьСерверныхВызововЗа5Минут - Число, время исполнения вызовов сервера 1С:Предприятия от имени
//    данного сеанса за последние 5 минут (в миллисекундах),
//  ПереданоСУБД - Число, количество данных, переданных и полученных от СУБД от имени данного сеанса с
//    момента начала сеанса (в байтах),
//  ПереданоСУБДЗа5Минут - Число, количество данных, переданных и полученных от СУБД от имени данного сеанса
//    за последние 5 минут (в байтах),
//  ДлительностьВызововСУБД - Число, время исполнения запросов к СУБД от имени данного сеанса с момента начала
//    сеанса (в миллисекундах),
//  ДлительностьТекущегоВызоваСУБД - Число, интервал времени в миллисекундах, прошедший с начала выполнения
//    запроса в случае, если сеанс выполняет запрос к СУБД (иначе - значение равно 0),
//  ДлительностьВызововСУБДЗа5Минут - Число, суммарное время исполнения запросов к СУБД от имени данного сеанса
//    за последние 5 минут (в миллисекундах).
//  СоединениеСУБД - Строка, номер соединения с СУБД в терминах СУБД в том случае, если в момент получения списка
//    сеансов выполняется запрос к СУБД, открыта транзакция или определены временные таблицы (т.е. захвачено
//    соединение с СУБД). Если соединение с СУБД не захвачено - значение равно пустой строке,
//  ВремяСоединенияСУБД - Число, время соединения с СУБД с момента захвата (в миллисекундах). Если соединение с.
//    СУБД не захвачено - значение равно 0,
//  МоментЗахватаСоединенияСУБД - Дата(Дата и время), момент времени, когда соединение с СУБД было последний раз
//    захвачено другим сеансом.
//
Функция СвойстваСеанса() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("Номер");
	Результат.Вставить("ИмяПользователя");
	Результат.Вставить("ИмяКлиентскогоКомпьютера");
	Результат.Вставить("ИдентификаторКлиентскогоПриложения");
	Результат.Вставить("ИдентификаторЯзыка");
	Результат.Вставить("МоментСозданияСеанса");
	Результат.Вставить("МоментПоследнейАктивностиСеанса");
	Результат.Вставить("Блокировка");
	Результат.Вставить("БлокировкаСУБД");
	Результат.Вставить("Передано");
	Результат.Вставить("ПереданоЗа5Минут");
	Результат.Вставить("СерверныхВызовов");
	Результат.Вставить("СерверныхВызововЗа5Минут");
	Результат.Вставить("ДлительностьСерверныхВызовов");
	Результат.Вставить("ДлительностьТекущегоСерверногоВызова");
	Результат.Вставить("ДлительностьСерверныхВызововЗа5Минут");
	Результат.Вставить("ПереданоСУБД");
	Результат.Вставить("ПереданоСУБДЗа5Минут");
	Результат.Вставить("ДлительностьВызововСУБД");
	Результат.Вставить("ДлительностьТекущегоВызоваСУБД");
	Результат.Вставить("ДлительностьВызововСУБДЗа5Минут");
	Результат.Вставить("СоединениеСУБД");
	Результат.Вставить("ВремяСоединенияСУБД");
	Результат.Вставить("МоментЗахватаСоединенияСУБД");
	
	Возврат Результат;
	
КонецФункции

// Возвращает описания сеансов информационной базы.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  ПараметрыАдминистрированияИБ - Структура, описывающая параметры подключения к информационной базе,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера(),
//    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
//    в качестве значения параметра ПараметрыАдминистрированияКластера.
//  Фильтр - Описание условия фильтрации сеансов, описания которых требуется получить.
//    Варианты:
//      1. Массив структур, описывающих условия фильтрации сеансов. Поля структур, входящих в массив:
//        Свойство - Строка, имя свойства, по которому осуществляется фильтрация. Допустимые значения - см.
//          Возвращаемое значение функции АдминистрированиеКластераКлиентСервер.СвойстваСеанса(),
//        ВидСравнения - значение системного перечисления ВидСравнения, вид сравнения значений сеансов с указанным
//          в условии фильтра. Допустимые значения:
//            ВидСравнения.Равно,
//            ВидСравнения.НеРавно,
//            ВидСравнения.Больше (только для числовых значений),
//            ВидСравнения.БольшеИлиРавно (только для числовых значений),
//            ВидСравнения.Меньше (только для числовых значений),
//            ВидСравнения.МеньшеИлиРавно (только для числовых значений),
//            ВидСравнения.ВСписке,
//            ВидСравнения.НеВСписке,
//            ВидСравнения.Интервал (только для числовых значений),
//            ВидСравнения.ИнтервалВключаяГраницы (только для числовых значений),
//            ВидСравнения.ИнтервалВключаяНачало (только для числовых значений),
//            ВидСравнения.ИнтервалВключаяОкончание (только для числовых значений),
//        Значение - Число, Строка, Дата, Булево, СписокЗначений, Массив, Структура - значение, с которым
//          сравнивается значение соответствующего свойства сеанса. При ВидСравнения.ВСписке и ВидСравнения.НеВСписке
//          в качестве значения должны передаваться СписокЗначений или Массив, содержащие набор значений, с которыми
//          будет выполняться сравнение. При ВидСравнения.Интервал, ВидСравнения.ИнтервалВключаяГраницы,
//          ВидСравнения.ИнтервалВключаяНачало и ВидСравнения.ИнтервалВключаяОкончание в качестве значения должны
//          передаваться структуры с полями С и По, значения которых образуют интервал, с которым будет выполняться
//          соответствующее сравнение,
//    2. Структура (упрощенный вариант), ключ - Имя свойства сеанса (см. выше), значение - значение, с которым
//    выполняется сравнение. При использовании данного варианта описания фильтра сравнение всегда выполняется на
//    равенство.
//
// Возвращаемое значение: Массив(Структура), массив структур, описывающих свойства сеансов. Описание структур -
//  см. АдминистрированиеКластераКлиентСервер.СвойстваСеанса().
//
Функция СеансыИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено, Знач Фильтр = Неопределено) Экспорт
	
	Если ПараметрыАдминистрированияИБ = Неопределено Тогда
		ПараметрыАдминистрированияИБ = ПараметрыАдминистрированияКластера;
	КонецЕсли;
	
	МенеджерАдминистрирования = МенеджерАдминистрирования(ПараметрыАдминистрированияКластера);
	
	Возврат МенеджерАдминистрирования.СеансыИнформационнойБазы(
		ПараметрыАдминистрированияКластера,
		ПараметрыАдминистрированияИБ,
		Фильтр);
	
КонецФункции

// Удаляет сеансы с информационной базой по фильтру.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  ПараметрыАдминистрированияИБ - Структура, описывающая параметры подключения к информационной базе,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера(),
//    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
//    в качестве значения параметра ПараметрыАдминистрированияКластера.
//  Фильтр - Описание условия фильтрации сеансов, которые требуется удалить.
//    Варианты:
//      1. Массив структур, описывающих условия фильтрации сеансов. Поля структур, входящих в массив:
//        Свойство - Строка, имя свойства, по которому осуществляется фильтрация. Допустимые значения - см.
//          Возвращаемое значение функции АдминистрированиеКластераКлиентСервер.СвойстваСеанса(),
//        ВидСравнения - значение системного перечисления ВидСравнения, вид сравнения значений сеансов с указанным
//          в условии фильтра. Допустимые значения:
//            ВидСравнения.Равно,
//            ВидСравнения.НеРавно,
//            ВидСравнения.Больше (только для числовых значений),
//            ВидСравнения.БольшеИлиРавно (только для числовых значений),
//            ВидСравнения.Меньше (только для числовых значений),
//            ВидСравнения.МеньшеИлиРавно (только для числовых значений),
//            ВидСравнения.ВСписке,
//            ВидСравнения.НеВСписке,
//            ВидСравнения.Интервал (только для числовых значений),
//            ВидСравнения.ИнтервалВключаяГраницы (только для числовых значений),
//            ВидСравнения.ИнтервалВключаяНачало (только для числовых значений),
//            ВидСравнения.ИнтервалВключаяОкончание (только для числовых значений),
//        Значение - Число, Строка, Дата, Булево, СписокЗначений, Массив, Структура - значение, с которым
//          сравнивается значение соответствующего свойства сеанса. При ВидСравнения.ВСписке и ВидСравнения.НеВСписке
//          в качестве значения должны передаваться СписокЗначений или Массив, содержащие набор значений, с которыми
//          будет выполняться сравнение. При ВидСравнения.Интервал, ВидСравнения.ИнтервалВключаяГраницы,
//          ВидСравнения.ИнтервалВключаяНачало и ВидСравнения.ИнтервалВключаяОкончание в качестве значения должны
//          передаваться структуры с полями С и По, значения которых образуют интервал, с которым будет выполняться
//          соответствующее сравнение,
//    2. Структура (упрощенный вариант), ключ - Имя свойства сеанса (см. выше), значение - значение, с которым
//    выполняется сравнение. При использовании данного варианта описания фильтра сравнение всегда выполняется на
//    равенство.
//
Процедура УдалитьСеансыИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено, Знач Фильтр = Неопределено) Экспорт
	
	Если ПараметрыАдминистрированияИБ = Неопределено Тогда
		ПараметрыАдминистрированияИБ = ПараметрыАдминистрированияКластера;
	КонецЕсли;
	
	МенеджерАдминистрирования = МенеджерАдминистрирования(ПараметрыАдминистрированияКластера);
	
	МенеджерАдминистрирования.УдалитьСеансыИнформационнойБазы(
		ПараметрыАдминистрированияКластера,
		ПараметрыАдминистрированияИБ,
		Фильтр);
	
КонецПроцедуры

#КонецОбласти

#Область СоединенияСИнформационнойБазой

// Конструктор структуры, описывающей свойства соединения с информационной базой.
//
// Возвращаемое значение: Структура, поля:
//  Номер - Число, номер соединения с информационной базой,
//  ИмяПользователя - Строка, имя пользователя 1С:Предприятия, подсоединенного к информационной базе,
//  ИмяКлиентскогоКомпьютера - Строка, имя компьютера, с которого установлено соединение,
//  ИдентификаторКлиентскогоПриложения - Строка, идентификатор приложения, установившего соединение.
//    Возможные значения - см. описание к функции глобального контекста ПредставлениеПриложения(),
//  МоментУстановкиСоединения - Дата(Дата и время), момент установки соединения,
//  РежимСоединенияСИнформационнойБазой - Число, режим соединения с информационной базой (0 -
//    разделяемый, 1 - монопольный),
//  РежимСоединенияСБазойДанных - Число, режим соединения с базой данных (0 - соединение не установлено,
//    1 - разделяемый, 2 - монопольный),
//  БлокировкаСУБД - Число, идентификатор соединения, блокирующего работу данного соединения в СУБД,
//  Передано - Число, объем данных, полученных и отправленных соединением,
//  ПереданоЗа5Минут - Число, объем данных, полученных и отправленных соединением за последние 5 минут,
//  СерверныхВызовов - Число, количество серверных вызовов,
//  СерверныхВызововЗа5Минут - Число, количество серверных вызовов соединения за последние 5 минут,
//  ПереданоСУБД - Число, объем данных, переданных между сервером 1С:Предприятия и сервером баз данных,
//    с момента установки данного соединения,
//  ПереданоСУБДЗа5Минут - Число, объем данных, переданных между сервером 1С:Предприятия и сервером баз
//    данных за последние 5 минут,
//  СоединениеСУБД - Строка, идентификатор процесса соединения с СУБД (если на момент получения списка
//    соединений данное соединение выполняло обращение к серверу СУБД, в противном случае - значение равно пустой
//    строке). Идентификатор возвращается в терминах сервера СУБД.
//  ВремяСУБД - Число, время в секундах, в течении которого выполняется обращение к серверу СУБД (если на момент
//    получения списка соединений данное соединение выполняло обращение к серверу СУБД, в противном случае - значение
//    равно 0),
//  МоментЗахватаСоединенияСУБД - Дата(Дата и время) - момент последнего захвата соединения с сервером СУБД,
//  ДлительностьСерверныхВызовов - Число, длительность всех серверных вызовов соединения,
//  ДлительностьВызововСУБД - Число, время вызовов СУБД, инициированных соединением,
//  ДлительностьТекущегоСерверногоВызова - Число, длительность текущего серверного вызова,
//  ДлительностьТекущегоВызоваСУБД - Число, длительность текущего вызова сервера СУБД,
//  ДлительностьСерверныхВызововЗа5Минут - Число, длительность серверных вызовов соединения за последние 5 минут,
//  ДлительностьВызововСУБДЗа5Минут - Число, длительность вызовов соединения СУБД за последние 5 минут.
//
Функция СвойстваСоединения() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("Номер");
	Результат.Вставить("ИмяПользователя");
	Результат.Вставить("ИмяКлиентскогоКомпьютера");
	Результат.Вставить("ИдентификаторКлиентскогоПриложения");
	Результат.Вставить("МоментУстановкиСоединения");
	Результат.Вставить("РежимСоединенияСИнформационнойБазой");
	Результат.Вставить("РежимСоединенияСБазойДанных");
	Результат.Вставить("БлокировкаСУБД");
	Результат.Вставить("Передано");
	Результат.Вставить("ПереданоЗа5Минут");
	Результат.Вставить("СерверныхВызовов");
	Результат.Вставить("СерверныхВызововЗа5Минут");
	Результат.Вставить("ПереданоСУБД");
	Результат.Вставить("ПереданоСУБДЗа5Минут");
	Результат.Вставить("СоединениеСУБД");
	Результат.Вставить("ВремяСУБД");
	Результат.Вставить("МоментЗахватаСоединенияСУБД");
	Результат.Вставить("ДлительностьСерверныхВызовов");
	Результат.Вставить("ДлительностьВызововСУБД");
	Результат.Вставить("ДлительностьТекущегоСерверногоВызова");
	Результат.Вставить("ДлительностьТекущегоВызоваСУБД");
	Результат.Вставить("ДлительностьСерверныхВызововЗа5Минут");
	Результат.Вставить("ДлительностьВызововСУБДЗа5Минут");
	
	Возврат Результат;
	
КонецФункции

// Возвращает описания соединений с информационной базой.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  ПараметрыАдминистрированияИБ - Структура, описывающая параметры подключения к информационной базе,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера(),
//    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
//    в качестве значения параметра ПараметрыАдминистрированияКластера.
//  Фильтр - Описание условия фильтрации соединения, описания которых требуется получить.
//    Варианты:
//      1. Массив структур, описывающих условия фильтрации соединений. Поля структур, входящих в массив:
//        Свойство - Строка, имя свойства, по которому осуществляется фильтрация. Допустимые значения - см.
//          Возвращаемое значение функции АдминистрированиеКластераКлиентСервер.СвойстваСоединения(),
//        ВидСравнения - значение системного перечисления ВидСравнения, вид сравнения значений соединений с указанным
//          в условии фильтра. Допустимые значения:
//            ВидСравнения.Равно,
//            ВидСравнения.НеРавно,
//            ВидСравнения.Больше (только для числовых значений),
//            ВидСравнения.БольшеИлиРавно (только для числовых значений),
//            ВидСравнения.Меньше (только для числовых значений),
//            ВидСравнения.МеньшеИлиРавно (только для числовых значений),
//            ВидСравнения.ВСписке,
//            ВидСравнения.НеВСписке,
//            ВидСравнения.Интервал (только для числовых значений),
//            ВидСравнения.ИнтервалВключаяГраницы (только для числовых значений),
//            ВидСравнения.ИнтервалВключаяНачало (только для числовых значений),
//            ВидСравнения.ИнтервалВключаяОкончание (только для числовых значений),
//        Значение - Число, Строка, Дата, Булево, СписокЗначений, Массив, Структура - значение, с которым
//          сравнивается значение соответствующего свойства соединения. При ВидСравнения.ВСписке и
//          ВидСравнения.НеВСписке в качестве значения должны передаваться СписокЗначений или Массив, содержащие набор
//          значений, с которыми будет выполняться сравнение. При ВидСравнения.Интервал,
//          ВидСравнения.ИнтервалВключаяГраницы,
//          ВидСравнения.ИнтервалВключаяНачало и ВидСравнения.ИнтервалВключаяОкончание в качестве значения должны
//          передаваться структуры с полями С и По, значения которых образуют интервал, с которым будет выполняться
//          соответствующее сравнение,
//    2. Структура (упрощенный вариант), ключ - Имя свойства соединения (см. выше), значение - значение, с которым
//    выполняется сравнение. При использовании данного варианта описания фильтра сравнение всегда выполняется на
//    равенство.
//
// Возвращаемое значение: Массив(Структура), массив структур, описывающих свойства соединений. Описание структур -
//  см. АдминистрированиеКластераКлиентСервер.СвойстваСоединения().
//
Функция СоединенияСИнформационнойБазой(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено, Знач Фильтр = Неопределено) Экспорт
	
	Если ПараметрыАдминистрированияИБ = Неопределено Тогда
		ПараметрыАдминистрированияИБ = ПараметрыАдминистрированияКластера;
	КонецЕсли;
	
	МенеджерАдминистрирования = МенеджерАдминистрирования(ПараметрыАдминистрированияКластера);
	
	Возврат МенеджерАдминистрирования.СоединенияСИнформационнойБазой(
		ПараметрыАдминистрированияКластера,
		ПараметрыАдминистрированияИБ,
		Фильтр);
	
КонецФункции

// Разрывает соединения с информационной базой по фильтру.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  ПараметрыАдминистрированияИБ - Структура, описывающая параметры подключения к информационной базе,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера(),
//    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
//    в качестве значения параметра ПараметрыАдминистрированияКластера.
//  Фильтр - Описание условия фильтрации соединений, которые требуется завершить.
//    Варианты:
//      1. Массив структур, описывающих условия фильтрации разрываемых соединений. Поля структур, входящих в массив:
//        Свойство - Строка, имя свойства, по которому осуществляется фильтрация. Допустимые значения - см.
//          Возвращаемое значение функции АдминистрированиеКластераКлиентСервер.СвойстваСоединения(),
//        ВидСравнения - значение системного перечисления ВидСравнения, вид сравнения значений соединений с указанным
//          в условии фильтра. Допустимые значения:
//            ВидСравнения.Равно,
//            ВидСравнения.НеРавно,
//            ВидСравнения.Больше (только для числовых значений),
//            ВидСравнения.БольшеИлиРавно (только для числовых значений),
//            ВидСравнения.Меньше (только для числовых значений),
//            ВидСравнения.МеньшеИлиРавно (только для числовых значений),
//            ВидСравнения.ВСписке,
//            ВидСравнения.НеВСписке,
//            ВидСравнения.Интервал (только для числовых значений),
//            ВидСравнения.ИнтервалВключаяГраницы (только для числовых значений),
//            ВидСравнения.ИнтервалВключаяНачало (только для числовых значений),
//            ВидСравнения.ИнтервалВключаяОкончание (только для числовых значений),
//        Значение - Число, Строка, Дата, Булево, СписокЗначений, Массив, Структура - значение, с которым
//          сравнивается значение соответствующего свойства соединения. При ВидСравнения.ВСписке и
//          ВидСравнения.НеВСписке в качестве значения должны передаваться СписокЗначений или Массив, содержащие набор
//          значений, с которыми будет выполняться сравнение. При ВидСравнения.Интервал,
//          ВидСравнения.ИнтервалВключаяГраницы,
//          ВидСравнения.ИнтервалВключаяНачало и ВидСравнения.ИнтервалВключаяОкончание в качестве значения должны
//          передаваться структуры с полями С и По, значения которых образуют интервал, с которым будет выполняться
//          соответствующее сравнение,
//    2. Структура (упрощенный вариант), ключ - Имя свойства соединения (см. выше), значение - значение, с которым
//    выполняется сравнение. При использовании данного варианта описания фильтра сравнение всегда выполняется на
//    равенство.
//
Процедура РазорватьСоединенияСИнформационнойБазой(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено, Знач Фильтр = Неопределено) Экспорт
	
	Если ПараметрыАдминистрированияИБ = Неопределено Тогда
		ПараметрыАдминистрированияИБ = ПараметрыАдминистрированияКластера;
	КонецЕсли;
	
	МенеджерАдминистрирования = МенеджерАдминистрирования(ПараметрыАдминистрированияКластера);
	
	МенеджерАдминистрирования.РазорватьСоединенияСИнформационнойБазой(
		ПараметрыАдминистрированияКластера,
		ПараметрыАдминистрированияИБ,
		Фильтр);
	
КонецПроцедуры

#КонецОбласти

#Область ПрофилиБезопасности

// Возвращает имя профиля безопасности, назначенного для информационной базы.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  ПараметрыАдминистрированияИБ - Структура, описывающая параметры подключения к информационной базе,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера().
//    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
//    в качестве значения параметра ПараметрыАдминистрированияКластера.
//
// Возвращаемое значение: Строка, имя профиля безопасности, назначенного для информационной базы. Если
//  для информационной базы не назначен профиль безопасности - возвращается пустая строка.
//
Функция ПрофильБезопасностиИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено) Экспорт
	
	Если ПараметрыАдминистрированияИБ = Неопределено Тогда
		ПараметрыАдминистрированияИБ = ПараметрыАдминистрированияКластера;
	КонецЕсли;
	
	МенеджерАдминистрирования = МенеджерАдминистрирования(ПараметрыАдминистрированияКластера);
	
	Возврат МенеджерАдминистрирования.ПрофильБезопасностиИнформационнойБазы(
		ПараметрыАдминистрированияКластера,
		ПараметрыАдминистрированияИБ);
	
КонецФункции

// Возвращает имя профиля безопасности, назначенного для информационной базы в качестве профиля безопасности
//  безопасного режима.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  ПараметрыАдминистрированияИБ - Структура, описывающая параметры подключения к информационной базе,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера().
//    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
//    в качестве значения параметра ПараметрыАдминистрированияКластера.
//
// Возвращаемое значение: Строка, имя профиля безопасности, назначенного для информационной базы в качестве профиля
//  безопасности безопасного режима. Если для информационной базы не назначен профиль безопасности - возвращается
//  пустая строка.
//
Функция ПрофильБезопасностиБезопасногоРежимаИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено) Экспорт
	
	Если ПараметрыАдминистрированияИБ = Неопределено Тогда
		ПараметрыАдминистрированияИБ = ПараметрыАдминистрированияКластера;
	КонецЕсли;
	
	МенеджерАдминистрирования = МенеджерАдминистрирования(ПараметрыАдминистрированияКластера);
	
	Возврат МенеджерАдминистрирования.ПрофильБезопасностиБезопасногоРежимаИнформационнойБазы(
		ПараметрыАдминистрированияКластера,
		ПараметрыАдминистрированияИБ);
	
КонецФункции

// Назначает для информационной базы использование профиля безопасности.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  ПараметрыАдминистрированияИБ - Структура, описывающая параметры подключения к информационной базе,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера(),
//    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
//    в качестве значения параметра ПараметрыАдминистрированияКластера.
//  ИмяПрофиля - Строка, имя профиля безопасности. Если передана пустая строка - для информационной базы будет
//    отключено использование профиля безопасности.
//
Процедура УстановитьПрофильБезопасностиИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено, Знач ИмяПрофиля = "") Экспорт
	
	Если ПараметрыАдминистрированияИБ = Неопределено Тогда
		ПараметрыАдминистрированияИБ = ПараметрыАдминистрированияКластера;
	КонецЕсли;
	
	МенеджерАдминистрирования = МенеджерАдминистрирования(ПараметрыАдминистрированияКластера);
	
	МенеджерАдминистрирования.УстановитьПрофильБезопасностиИнформационнойБазы(
		ПараметрыАдминистрированияКластера,
		ПараметрыАдминистрированияИБ,
		ИмяПрофиля);
	
КонецПроцедуры

// Назначает для информационной базы использование профиля безопасности безопасного режима.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  ПараметрыАдминистрированияИБ - Структура, описывающая параметры подключения к информационной базе,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера(),
//    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
//    в качестве значения параметра ПараметрыАдминистрированияКластера.
//  ИмяПрофиля - Строка, имя профиля безопасности. Если передана пустая строка - для информационной базы будет
//    отключено использование профиля безопасности безопасного режима.
//
Процедура УстановитьПрофильБезопасностиБезопасногоРежимаИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено, Знач ИмяПрофиля = "") Экспорт
	
	Если ПараметрыАдминистрированияИБ = Неопределено Тогда
		ПараметрыАдминистрированияИБ = ПараметрыАдминистрированияКластера;
	КонецЕсли;
	
	МенеджерАдминистрирования = МенеджерАдминистрирования(ПараметрыАдминистрированияКластера);
	
	МенеджерАдминистрирования.УстановитьПрофильБезопасностиБезопасногоРежимаИнформационнойБазы(
		ПараметрыАдминистрированияКластера,
		ПараметрыАдминистрированияИБ,
		ИмяПрофиля);
	
КонецПроцедуры

// Проверяет существование в кластере серверов профиля безопасности.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  ИмяПрофиля - Строка, имя профиля безопасности, существование которого проверяется.
//
Функция ПрофильБезопасностиСуществует(Знач ПараметрыАдминистрированияКластера, Знач ИмяПрофиля) Экспорт
	
	МенеджерАдминистрирования = МенеджерАдминистрирования(ПараметрыАдминистрированияКластера);
	
	Возврат МенеджерАдминистрирования.ПрофильБезопасностиСуществует(
		ПараметрыАдминистрированияКластера,
		ИмяПрофиля);
	
КонецФункции

// Конструктор структуры, описывающей свойства профиля безопасности.
//
// Возвращаемое значение: Структура, поля:
//  Имя - Строка, имя профиля безопасности,
//  Описание - Строка, описание профиля безопасности,
//  ПрофильБезопасногоРежима - Булево, определяет возможность использования профиля безопасности
//    в качестве профиля безопасности безопасного режима (как при указании в качестве профиля
//    безопасного режима для информационной базы, так и при вызове.
//    УстановитьБезопасныйРежим(<Имя профиля>) из кода конфигурации,
//  ПолныйДоступКПривилегированномуРежиму - Булево, определяет возможность установки
//    привилегированного режима из безопасного режима данного профиля безопасности,
//  ПолныйДоступКФайловойСистеме - Булево, определяет наличие ограничений на доступ к файловой
//    системе. При установке значения равным Ложь, доступ будет предоставлен только к каталогам файловой
//    системы, перечисленным в свойстве ВиртуальныеКаталоги,
//  ПолныйДоступКCOMОбъектам - Булево, определяет наличие ограничений на доступ к использованию.
//    COMОбъектов. При установке значения равным Ложь, доступ будет предоставлен только к COM-классам,
//    перечисленным в свойстве COMКлассы,
//  ПолныйДоступКВнешнимКомпонентам - Булево, определяет наличие ограничений на доступ к использованию
//    внешних компонент. При установке значения равным Ложь, доступ будет предоставлен только к внешним
//    компонентам, перечисленным в свойстве ВнешниеКомпоненты,
//  ПолныйДоступКВнешнимМодулям - Булево, определяет наличие ограничений на доступ к использованию
//    внешних модулей (внешние отчеты и обработки, вызовы Выполнить() и Вычислить()) в небезопасном режиме.
//    При установке значения равным Ложь, будет предоставлена возможность использовать в небезопасном
//    режиме только внешние модули, перечисленные в свойстве ВнешниеМодули,
//  ПолныйДоступКПриложениямОперационнойСистемы - Булево, определяет наличие ограничений на доступ к
//    использованию приложений операционной системы. При установке значения равным Ложь, будет предоставлена
//    возможность использовать только приложения операционной системы, перечисленные в свойстве ПриложенияОС,
//  ПолныйДоступКИнтернетРесурсам - Булево, определяет наличие ограничений на доступ к использованию.
//    Интернет-ресурсов. При установке значения равным Ложь, будет предоставлена возможность использовать
//    только Интернет-ресурсы, перечисленные в свойстве ИнтернетРесурсы,
//  ВиртуальныеКаталоги - Массив(Структура), массив структур, описывающих виртуальные каталоги, к которых
//    предоставляется доступ при установке ПолныйДоступКФайловойСистеме = Ложь. Описания полей структур -
//    см. АдминистрированиеКластераКлиентСервер.СвойстваВиртуальногоКаталога(),
//  COMКлассы - Массив(Структура), массив структур, описывающих COM-классы, к которым предоставляется
//    доступ при установке ПолныйДоступКCOMОбъектам = Ложь. Описания полей структур - см.
//    АдминистрированиеКластераКлиентСервер.СвойстваCOMКласса(),
//  ВнешниеКомпоненты - Массив(Структура), массив структур, описывающих внешние компоненты, к которым предоставляется
//    доступ при установке ПолныйДоступКВнешнимКомпонентам = Ложь. Описания полей структур - см.
//    АдминистрированиеКластераКлиентСервер.СвойстваВнешнейКомпоненты(),
//  ВнешниеМодули - Массив(Структура), массив структур, описывающих внешние модули, к которым предоставляется
//    доступ в небезопасном режиме при  установке ПолныйДоступКВнешнимМодулям = Ложь. Описания полей структур - см.
//    АдминистрированиеКластераКлиентСервер.СвойстваВнешнегоМодуля(),
//  ПриложенияОС - Массив(Структура), массив структур, описывающих приложения операционной системы, к которым
//    предоставляется доступ при установке ПолныйДоступКПриложениямОперационнойСистемы = Ложь. Описания полей
//    структур - см. АдминистрированиеКластераКлиентСервер.СвойстваПриложенияОС(),
//  ИнтернетРесурсы - Массив(Структура), массив структур, описывающих Интернет-ресурсы, к которым предоставляется
//    доступ при установке ПолныйДоступКИнтернетРесурсам = Ложь. Описания полей структур - см.
//    АдминистрированиеКластераКлиентСервер.СвойстваИнтернетРесурса().
//
Функция СвойстваПрофиляБезопасности() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("Имя", "");
	Результат.Вставить("Описание", "");
	Результат.Вставить("ПрофильБезопасногоРежима", Ложь);
	Результат.Вставить("ПолныйДоступКПривилегированномуРежиму", Ложь);
	
	Результат.Вставить("ПолныйДоступКФайловойСистеме", Ложь);
	Результат.Вставить("ПолныйДоступКCOMОбъектам", Ложь);
	Результат.Вставить("ПолныйДоступКВнешнимКомпонентам", Ложь);
	Результат.Вставить("ПолныйДоступКВнешнимМодулям", Ложь);
	Результат.Вставить("ПолныйДоступКПриложениямОперационнойСистемы", Ложь);
	Результат.Вставить("ПолныйДоступКИнтернетРесурсам", Ложь);
	
	Результат.Вставить("ВиртуальныеКаталоги", Новый Массив());
	Результат.Вставить("COMКлассы", Новый Массив());
	Результат.Вставить("ВнешниеКомпоненты", Новый Массив());
	Результат.Вставить("ВнешниеМодули", Новый Массив());
	Результат.Вставить("ПриложенияОС", Новый Массив());
	Результат.Вставить("ИнтернетРесурсы", Новый Массив());
	
	Возврат Результат;
	
КонецФункции

// Конструктор структуры, описывающей свойства виртуального каталога.
//
// Возвращаемое значение: Структура, поля:
//  ЛогическийURL - Строка, логический URL каталога,
//  ФизическийURL - Строка, физический URL каталога на сервере для размещения данных
//    виртуального каталога.
//  Описание - Строка, описание виртуального каталога,
//  ЧтениеДанных - Булево, флаг разрешения чтения данных из виртуального каталога,
//  ЗаписьДанных - Булево, флаг разрешения записи данных в виртуальный каталог.
//
Функция СвойстваВиртуальногоКаталога() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("ЛогическийURL");
	Результат.Вставить("ФизическийURL");
	
	Результат.Вставить("Описание");
	
	Результат.Вставить("ЧтениеДанных");
	Результат.Вставить("ЗаписьДанных");
	
	Возврат Результат;
	
КонецФункции

// Конструктор структуры, описывающей свойства COM-класса.
//
// Возвращаемое значение: Структура, поля:
//  Имя - Строка, имя COM-класса, используется в качестве ключа при поиске,
//  Описание - Строка, описание COM-класса,
//  ФайлМоникер - Строка, имя файла, по которому создается объект методом глобального контекста.
//    ПолучитьCOMОбъект() с пустым значением второго параметра,
//  CLSID - Строка, представление идентификатора COM-класса в формате системного реестра MS Windows
//    без фигурных скобок, по которому он может быть создан операционной системой,
//  Компьютер - Строка, имя компьютера, на котором может быть создан COM-объект.
//
Функция СвойстваCOMКласса() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("Имя");
	Результат.Вставить("Описание");
	
	Результат.Вставить("ФайлМоникер");
	Результат.Вставить("CLSID");
	Результат.Вставить("Компьютер");
	
	Возврат Результат;
	
КонецФункции

// Конструктор структуры, описывающей свойства внешней компоненты.
//
// Возвращаемое значение: Структура, поля:
//  Имя - Строка, имя внешней компоненты, используется в качестве ключа для поиска,
//  Описание - Строка, описание внешней компоненты,
//  ХэшСумма - Строка, контрольная сумма разрешенной внешней компоненты, вычисленная алгоритмом.
//    SHA-1 и преобразованная к строке base64.
//
Функция СвойстваВнешнейКомпоненты() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("Имя");
	Результат.Вставить("Описание");
	
	Результат.Вставить("ХэшСумма");
	
	Возврат Результат;
	
КонецФункции

// Конструктор структуры, описывающей свойства внешнего модуля.
//
// Возвращаемое значение: Структура, поля:
//  Имя - Строка, имя внешнего модуля, используется в качестве ключа для поиска,
//  Описание - Строка, описание внешнего модуля,
//  ХэшСумма - Строка, контрольная сумма разрешенного внешнего модуля, вычисленная алгоритмом.
//    SHA-1 и преобразованная к строке base64.
//
Функция СвойстваВнешнегоМодуля() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("Имя");
	Результат.Вставить("Описание");
	
	Результат.Вставить("ХэшСумма");
	
	Возврат Результат;
	
КонецФункции

// Конструктор структуры, описывающей свойства приложения операционной системы.
//
// Возвращаемое значение: Структура, поля:
//  Имя - Строка, имя приложения операционной системы, используется в качестве ключа для поиска,
//  Описание - Строка, описание приложения операционной системы,
//  ШаблонСтрокиЗапуска - Строка, шаблон строки запуска приложения (состоит из последовательности
//    шаблонных слов, разделенных пробелами).
//
Функция СвойстваПриложенияОС() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("Имя");
	Результат.Вставить("Описание");
	
	Результат.Вставить("ШаблонСтрокиЗапуска");
	
	Возврат Результат;
	
КонецФункции

// Конструктор структуры, описывающей Интернет-ресурс.
//
// Возвращаемое значение: Структура, поля:
//  Имя - Строка, имя Интернет-ресурса, используется в качестве ключа для поиска,
//  Описание - Строка, описание Интернет-ресурса,
//  Протокол - Строка, разрешаемый сетевой протокол. Возможные значения:
//    HTTP,
//    HTTPS,
//    FTP,
//    FTPS,
//    POP3,
//    SMTP,
//    IMAP,
//  Адрес - Строка, сетевой адрес Интернет-ресурса без указания протокола и порта,
//  Порт - Число, сетевой порт Интернет-ресурса.
//
Функция СвойстваИнтернетРесурса() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("Имя");
	Результат.Вставить("Описание");
	
	Результат.Вставить("Протокол");
	Результат.Вставить("Адрес");
	Результат.Вставить("Порт");
	
	Возврат Результат;
	
КонецФункции

// Возвращает свойства профиля безопасности.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  ИмяПрофиля - Строка, имя профиля безопасности.
//
// Возвращаемое значение: Структура, описывающая профиль безопасности, описание - см.
//  АдминистрированиеКластераКлиентСервер.СвойстваПрофиляБезопасности().
//
Функция ПрофильБезопасности(Знач ПараметрыАдминистрированияКластера, Знач ИмяПрофиля) Экспорт
	
	МенеджерАдминистрирования = МенеджерАдминистрирования(ПараметрыАдминистрированияКластера);
	
	Возврат МенеджерАдминистрирования.ПрофильБезопасности(
		ПараметрыАдминистрированияКластера,
		ИмяПрофиля);
	
КонецФункции

// Создает профиль безопасности по переданному описанию.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  СвойстваПрофиляБезопасности - Структура, описывающая свойства создаваемого профиля безопасности,
//    описание - см. АдминистрированиеКластераКлиентСервер.СвойстваПрофиляБезопасности().
//
Процедура СоздатьПрофильБезопасности(Знач ПараметрыАдминистрированияКластера, Знач СвойстваПрофиляБезопасности) Экспорт
	
	МенеджерАдминистрирования = МенеджерАдминистрирования(ПараметрыАдминистрированияКластера);
	
	МенеджерАдминистрирования.СоздатьПрофильБезопасности(
		ПараметрыАдминистрированияКластера,
		СвойстваПрофиляБезопасности);
	
КонецПроцедуры

// Устанавливает свойства для существующего профиля безопасности по переданному описанию.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  СвойстваПрофиляБезопасности - Структура, описывающая устанавливаемые для профиля безопасности свойства,
//    описание - см. АдминистрированиеКластераКлиентСервер.СвойстваПрофиляБезопасности().
//
Процедура УстановитьСвойстваПрофиляБезопасности(Знач ПараметрыАдминистрированияКластера, Знач СвойстваПрофиляБезопасности)  Экспорт
	
	МенеджерАдминистрирования = МенеджерАдминистрирования(ПараметрыАдминистрированияКластера);
	
	МенеджерАдминистрирования.УстановитьСвойстваПрофиляБезопасности(
		ПараметрыАдминистрированияКластера,
		СвойстваПрофиляБезопасности);
	
КонецПроцедуры

// Удаляет профиль безопасности.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  ИмяПрофиля - Строка, имя профиля безопасности.
//
Процедура УдалитьПрофильБезопасности(Знач ПараметрыАдминистрированияКластера, Знач ИмяПрофиля) Экспорт
	
	МенеджерАдминистрирования = МенеджерАдминистрирования(ПараметрыАдминистрированияКластера);
	
	МенеджерАдминистрирования.УдалитьПрофильБезопасности(
		ПараметрыАдминистрированияКластера,
		ИмяПрофиля);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет к фильтру новое условие.
//
Процедура ДобавитьУсловиеФильтра(Фильтр, Знач Свойство, Знач ВидСравненияЗначений, Знач Значение) Экспорт
	
	Если Фильтр = Неопределено Тогда
		
		Если ВидСравненияЗначений = ВидСравнения.Равно Тогда
			
			Фильтр = Новый Структура;
			Фильтр.Вставить(Свойство, Значение);
			
		Иначе
			
			Фильтр = Новый Массив;
			ДобавитьУсловиеФильтра(Фильтр, Свойство, ВидСравненияЗначений, Значение);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Фильтр) = Тип("Структура") Тогда
		
		НовыйФильтр = Новый Массив;
		
		Для каждого КлючИЗначение Из Фильтр Цикл
			
			ДобавитьУсловиеФильтра(НовыйФильтр, КлючИЗначение.Ключ, ВидСравнения.Равно, КлючИЗначение.Значение);
			
		КонецЦикла;
		
		ДобавитьУсловиеФильтра(НовыйФильтр, Свойство, ВидСравненияЗначений, Значение);
		
		Фильтр = НовыйФильтр;
		
	ИначеЕсли ТипЗнч(Фильтр) = Тип("Массив") Тогда
		
		Фильтр.Добавить(Новый Структура("Свойство, ВидСравнения, Значение", Свойство, ВидСравненияЗначений, Значение));
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Некорректно задано описание фильтра!'");
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет значения свойств объекта на соответствие условиям, указанным в фильтре.
//
// Параметры:
//  ПроверяемыйОбъект - Структура:
//    Ключ - Имя свойства,значение которого сравнивается с фильтром,
//    Значение - Значение свойства, которое сравнивается с фильтром,
//  Фильтр - Описание условия фильтрации объектов.
//    Варианты:
//      1. Массив структур, описывающих условия фильтра. Поля структур, входящих в массив:
//        Свойство - Строка, имя свойства, по которому осуществляется фильтрация,
//        ВидСравнения - значение системного перечисления ВидСравнения, вид сравнения значений с указанным
//          в условии фильтра. Допустимые значения:
//            ВидСравнения.Равно,
//            ВидСравнения.НеРавно,
//            ВидСравнения.Больше (только для числовых значений),
//            ВидСравнения.БольшеИлиРавно (только для числовых значений),
//            ВидСравнения.Меньше (только для числовых значений),
//            ВидСравнения.МеньшеИлиРавно (только для числовых значений),
//            ВидСравнения.ВСписке,
//            ВидСравнения.НеВСписке,
//            ВидСравнения.Интервал (только для числовых значений),
//            ВидСравнения.ИнтервалВключаяГраницы (только для числовых значений),
//            ВидСравнения.ИнтервалВключаяНачало (только для числовых значений),
//            ВидСравнения.ИнтервалВключаяОкончание (только для числовых значений),
//        Значение - Число, Строка, Дата, Булево, СписокЗначений, Массив, Структура - значение, с которым
//          сравнивается значение соответствующего свойства. При ВидСравнения.ВСписке и ВидСравнения.НеВСписке
//          в качестве значения должны передаваться СписокЗначений или Массив, содержащие набор значений, с которыми
//          будет выполняться сравнение. При ВидСравнения.Интервал, ВидСравнения.ИнтервалВключаяГраницы,
//          ВидСравнения.ИнтервалВключаяНачало и ВидСравнения.ИнтервалВключаяОкончание в качестве значения должны
//          передаваться структуры с полями С и По, значения которых образуют интервал, с которым будет выполняться
//          соответствующее сравнение,
//    2. Структура (упрощенный вариант), ключ - Имя свойства (см. выше), значение - значение, с которым выполняется
//      сравнение. При использовании данного варианта описания фильтра сравнение всегда выполняется на равенство.
//
// Возвращаемое значение: Булево, Истина если значения свойств объекта удовлетворяют условиям, указанным в фильтре,
//  Ложь - если не удовлетворяют.
//
Функция ПроверитьУсловияФильтра(Знач ПроверяемыйОбъект, Знач Фильтр = Неопределено) Экспорт
	
	Если Фильтр = Неопределено Или Фильтр.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВыполненоУсловий = 0;
	
	Для Каждого Условие Из Фильтр Цикл
		
		Если ТипЗнч(Условие) = Тип("Структура") Тогда
			
			Поле = Условие.Свойство;
			ТребуемоеЗначение = Условие.Значение;
			ВидСравненияЗначений = Условие.ВидСравнения;
			
		ИначеЕсли ТипЗнч(Условие) = Тип("КлючИЗначение") Тогда
			
			Поле = Условие.Ключ;
			ТребуемоеЗначение = Условие.Значение;
			ВидСравненияЗначений = ВидСравнения.Равно;
			
		Иначе
			
			ВызватьИсключение НСтр("ru = 'Некорректно задан фильтр!'");
			
		КонецЕсли;
		
		ПроверяемоеЗначение = ПроверяемыйОбъект[Поле];
		УсловиеВыполнено = ПроверитьУсловиеФильтра(ПроверяемоеЗначение, ВидСравненияЗначений, ТребуемоеЗначение);
		
		Если УсловиеВыполнено Тогда
			ВыполненоУсловий = ВыполненоУсловий + 1;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыполненоУсловий = Фильтр.Количество();
	
КонецФункции

// Проверяет значения на соответствие условиям, указанным в фильтре.
//
// Параметры:
//  ПроверяемоеЗначение - Число, Строка, Дата, Булево - значение, которое сравнивается с условием,
//  ВидСравненияЗначений - значение системного перечисления ВидСравнения, вид сравнения значений с указанным
//    в условии фильтра. Допустимые значения:
//      ВидСравнения.Равно,
//      ВидСравнения.НеРавно,
//      ВидСравнения.Больше (только для числовых значений),
//      ВидСравнения.БольшеИлиРавно (только для числовых значений),
//      ВидСравнения.Меньше (только для числовых значений),
//      ВидСравнения.МеньшеИлиРавно (только для числовых значений),
//      ВидСравнения.ВСписке,
//      ВидСравнения.НеВСписке,
//      ВидСравнения.Интервал (только для числовых значений),
//      ВидСравнения.ИнтервалВключаяГраницы (только для числовых значений),
//      ВидСравнения.ИнтервалВключаяНачало (только для числовых значений),
//      ВидСравнения.ИнтервалВключаяОкончание (только для числовых значений),
//  Значение - Число, Строка, Дата, Булево, СписокЗначений, Массив, Структура - значение, с которым
//    сравнивается проверяемое значение. При ВидСравнения.ВСписке и ВидСравнения.НеВСписке
//    качестве значения должны передаваться СписокЗначений или Массив, содержащие набор значений, с которыми
//    будет выполняться сравнение. При ВидСравнения.Интервал, ВидСравнения.ИнтервалВключаяГраницы,
//    ВидСравнения.ИнтервалВключаяНачало и ВидСравнения.ИнтервалВключаяОкончание в качестве значения должны
//    передаваться структуры с полями С и По, значения которых образуют интервал, с которым будет выполняться
//    соответствующее сравнение.
//
// Возвращаемое значение: Булево, Истина если значение удовлетворяет условиям, Ложь - если не удовлетворяет.
//
Функция ПроверитьУсловиеФильтра(Знач ПроверяемоеЗначение, Знач ВидСравненияЗначений, Знач Значение)
	
	Если ВидСравненияЗначений = ВидСравнения.Равно Тогда
		
		Возврат ПроверяемоеЗначение = Значение;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.НеРавно Тогда
		
		Возврат ПроверяемоеЗначение <> Значение;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.Больше Тогда
		
		Возврат ПроверяемоеЗначение > Значение;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.БольшеИлиРавно Тогда
		
		Возврат ПроверяемоеЗначение >= Значение;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.Меньше Тогда
		
		Возврат ПроверяемоеЗначение < Значение;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.МеньшеИлиРавно Тогда
		
		Возврат ПроверяемоеЗначение <= Значение;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.ВСписке Тогда
		
		Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			
			Возврат Значение.НайтиПоЗначению(ПроверяемоеЗначение) <> Неопределено;
			
		ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
			
			Возврат Значение.Найти(ПроверяемоеЗначение) <> Неопределено;
			
		КонецЕсли;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.НеВСписке Тогда
		
		Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			
			Возврат Значение.НайтиПоЗначению(ПроверяемоеЗначение) = Неопределено;
			
		ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
			
			Возврат Значение.Найти(ПроверяемоеЗначение) = Неопределено;
			
		КонецЕсли;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.Интервал Тогда
		
		Возврат ПроверяемоеЗначение > Значение.С И ПроверяемоеЗначение < Значение.По;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.ИнтервалВключаяГраницы Тогда
		
		Возврат ПроверяемоеЗначение >= Значение.С И ПроверяемоеЗначение <= Значение.По;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.ИнтервалВключаяНачало Тогда
		
		Возврат ПроверяемоеЗначение >= Значение.С И ПроверяемоеЗначение < Значение.По;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.ИнтервалВключаяОкончание Тогда
		
		Возврат ПроверяемоеЗначение > Значение.С И ПроверяемоеЗначение <= Значение.По;
		
	КонецЕсли;
	
КонецФункции

// Возвращает общий модуль, реализующий программный интерфейс для администрирования кластера
// серверов, соответствующий типу подключения к администрируемому кластеру серверов.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера().
//
// Возвращаемое значение: ОбщийМодуль.
//
Функция МенеджерАдминистрирования(Знач ПараметрыАдминистрирования)
	
	Если ПараметрыАдминистрирования.ТипПодключения = "COM" Тогда
		
		Возврат АдминистрированиеКластераCOMКлиентСервер;
		
	ИначеЕсли ПараметрыАдминистрирования.ТипПодключения = "RAS" Тогда
		
		Возврат АдминистрированиеКластераRASКлиентСервер;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестный тип подключения: %1!'"), ПараметрыАдминистрирования.ТипПодключения);
		
	КонецЕсли;
	
КонецФункции

// Возвращает дату, соответствующую пустой дате в реестре кластера серверов.
//
// Возвращаемое значение: Дата(Дата и время).
//
Функция ПустаяДата() Экспорт
	
	Возврат Дата(1, 1, 1, 0, 0, 0);
	
КонецФункции

#КонецОбласти


