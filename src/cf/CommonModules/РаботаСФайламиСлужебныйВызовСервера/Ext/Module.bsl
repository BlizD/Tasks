
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с файлами".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Создает новый файл по аналогии с указанным и возвращает ссылку на него.
// Параметры:
//  ИсходныйФайл  - СправочникСсылка.Файлы - существующий файл.
//  ВладелецНовогоФайла - ЛюбаяСсылка - владелец файла.
//
// Возвращаемое значение:
//   СправочникСсылка.Файлы - новый файл.
//
Функция СкопироватьФайл(ИсходныйФайл, ВладелецНовогоФайла)
	
	Если ИсходныйФайл = Неопределено Или ИсходныйФайл.Пустая() Или ИсходныйФайл.ТекущаяВерсия.Пустая()Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.Комментарий = ИсходныйФайл.Описание;
	СведенияОФайле.ИмяБезРасширения = ИсходныйФайл.ПолноеНаименование;
	СведенияОФайле.ХранитьВерсии = ИсходныйФайл.ХранитьВерсии;

	НовыйФайл = СоздатьФайл(ВладелецНовогоФайла, СведенияОФайле);
		
	ХранилищеФайла = Неопределено;
	Если ИсходныйФайл.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда 
		ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(ИсходныйФайл.ТекущаяВерсия);
	КонецЕсли;
		
	СведенияОФайле.Размер = ИсходныйФайл.ТекущаяВерсия.Размер;
	СведенияОФайле.РасширениеБезТочки = ИсходныйФайл.ТекущаяВерсия.Расширение;
	СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
	СведенияОФайле.АдресВременногоХранилищаТекста = ИсходныйФайл.ТекущаяВерсия.ТекстХранилище;
	СведенияОФайле.СсылкаНаВерсиюИсточник = ИсходныйФайл.ТекущаяВерсия;
	
	Версия = СоздатьВерсию(НовыйФайл, СведенияОФайле);
	ОбновитьВерсиюВФайле(НовыйФайл, Версия, ИсходныйФайл.ТекущаяВерсия.ТекстХранилище);
	
	ВерсияОбъект = НовыйФайл.ТекущаяВерсия.ПолучитьОбъект();
	
	ЧислоПодписей = 0;
	Для Каждого Строка Из ИсходныйФайл.ТекущаяВерсия.ЭлектронныеПодписи Цикл
		НоваяСтрока = ВерсияОбъект.ЭлектронныеПодписи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ЧислоПодписей = ЧислоПодписей + 1;
	КонецЦикла;
	
	Если ЧислоПодписей <>  0 Тогда
		ФайлОбъект = НовыйФайл.ПолучитьОбъект();
		ФайлОбъект.ПодписанЭП = Истина;
		ФайлОбъект.Записать();
		
		ВерсияОбъект.ПодписанЭП = Истина;
		ВерсияОбъект.Записать();
	КонецЕсли;
	
	Если ИсходныйФайл.Зашифрован Тогда
		
		ФайлОбъект = НовыйФайл.ПолучитьОбъект();
		ФайлОбъект.Зашифрован = Истина;
		
		Для Каждого Строка Из ИсходныйФайл.СертификатыШифрования Цикл
			НоваяСтрока = ФайлОбъект.СертификатыШифрования.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
		// Чтобы прошла запись ранее подписанного объекта.
		ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		ФайлОбъект.Записать();
		
		ВерсияОбъект = НовыйФайл.ТекущаяВерсия.ПолучитьОбъект();
		ВерсияОбъект.Зашифрован = Истина;
		// Чтобы прошла запись ранее подписанного объекта.
		ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		ВерсияОбъект.Записать();
		
	КонецЕсли;
	
	РаботаСФайламиПереопределяемый.ЗаполнитьРеквизитыФайлаИзИсходногоФайла(НовыйФайл, ИсходныйФайл);
	
	Возврат НовыйФайл;
	
КонецФункции

// Процедура добавляет настройки специфичные для подсистемы Работа с файлами.
//
// Параметры:
//  ОбщиеНастройки        - Структура - настройки общие для всех пользователей.
//  ПерсональныеНастройки - Структура - настройки различные для разных пользователей.
//  
Процедура ДобавитьНастройкиРаботыСФайлами(ОбщиеНастройки, ПерсональныеНастройки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПерсональныеНастройки.Вставить("ДействиеПоДвойномуЩелчкуМыши", ДействиеПоДвойномуЩелчкуМыши());
	ПерсональныеНастройки.Вставить("СпособСравненияВерсийФайлов",  СпособСравненияВерсийФайлов());
	
	ПерсональныеНастройки.Вставить("СпрашиватьРежимРедактированияПриОткрытииФайла",
		СпрашиватьРежимРедактированияПриОткрытииФайла());
	
	ПерсональныеНастройки.Вставить("ЭтоПолноправныйПользователь",
		Пользователи.ЭтоПолноправныйПользователь(,, Ложь));
	
	ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы");
	
	Если ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = Неопределено Тогда
		ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = Истина;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиПрограммы",
			"ПоказыватьЗанятыеФайлыПриЗавершенииРаботы",
			ПоказыватьЗанятыеФайлыПриЗавершенииРаботы);
	КонецЕсли;
	
	ПерсональныеНастройки.Вставить("ПоказыватьЗанятыеФайлыПриЗавершенииРаботы",
		ПоказыватьЗанятыеФайлыПриЗавершенииРаботы);
	
	КонецПроцедуры

// Вернет размер файлов на томе - в байтах.
Функция ПодсчитатьРазмерФайловНаТоме(СсылкаТома) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Версии.Размер), 0) КАК РазмерФайлов
	|ИЗ
	|	Справочник.ВерсииФайлов КАК Версии
	|ГДЕ
	|	Версии.Том = &Том";
	
	Запрос.Параметры.Вставить("Том", СсылкаТома);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Число(Выборка.РазмерФайлов);
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Читает кодировку версии файла.
//
// Параметры:
// ВерсияСсылка - ссылка на версию файла.
//
// Возвращаемое значение:
//   Строка кодировки
Функция ПолучитьКодировкуВерсииФайла(ВерсияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.КодировкиВерсийФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВерсияФайла = ВерсияСсылка;
	МенеджерЗаписи.Прочитать();
	
	Возврат МенеджерЗаписи.Кодировка;
	
КонецФункции

// Получает данные файла и его двоичные данные.
//
// Параметры:
//  ФайлИлиВерсияСсылка - СправочникСсылка.Файлы, СправочникСсылка.ВерсииФайлов - файл или версия файла.
//  АдресПодписи - Строка - навигационная ссылка, содержащая адрес файла подписи во временном хранилище.
//  ИдентификаторФормы  - УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Структура - ДанныеФайла и сам файл как ДвоичныеДанные и подпись файла как ДвоичныеДанные.
//
Функция ДанныеФайлаИДвоичныеДанные(ФайлИлиВерсияСсылка, АдресПодписи = Неопределено, ИдентификаторФормы = Неопределено) Экспорт
	
	ДанныеФайла = ДанныеФайла(ФайлИлиВерсияСсылка);
	Если ТипЗнч(ФайлИлиВерсияСсылка) = Тип("СправочникСсылка.Файлы") Тогда
		ВерсияСсылка = ФайлИлиВерсияСсылка.ТекущаяВерсия;
	Иначе
		ВерсияСсылка = ФайлИлиВерсияСсылка;
	КонецЕсли;
	
	ДвоичныеДанные = Неопределено;
	
	ТипХраненияФайла = ВерсияСсылка.ТипХраненияФайла;
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Если НЕ ВерсияСсылка.Том.Пустая() Тогда
			ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу; 
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
			Исключение
				// Запись в журнал регистрации.
				СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(
					ИнформацияОбОшибке(), ВерсияСсылка.Владелец);
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Файлы.Открытие файла'",
					     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.Файлы,
					ВерсияСсылка.Владелец,
					СообщениеОбОшибке);
				
				ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
					ВерсияСсылка.ПолноеНаименование + "." + ВерсияСсылка.Расширение);
			КонецПопытки;
		КонецЕсли;
	Иначе
		ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияСсылка);
		ДвоичныеДанные = ХранилищеФайла.Получить();
	КонецЕсли;

	ДвоичныеДанныеПодписи = Неопределено;
	Если АдресПодписи <> Неопределено Тогда
		ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(АдресПодписи);
	КонецЕсли;
	
	Если ИдентификаторФормы <> Неопределено Тогда
		ДвоичныеДанные = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура("ДанныеФайла, ДвоичныеДанные, ДвоичныеДанныеПодписи",
		ДанныеФайла, ДвоичныеДанные, ДвоичныеДанныеПодписи);
	
	Возврат СтруктураВозврата;
КонецФункции

// Получает все подчиненные файлы.
// Параметры:
//  ВладелецФайла - ЛюбаяСсылка - владелец файла.
//
// Возвращаемое значение:
//   Массив - массив файлов
Функция ПолучитьВсеПодчиненныеФайлы(ВладелецФайла) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Читает ХранилищеФайла из информационной базы.
//
// Параметры:
// ВерсияСсылка - ссылка на версию файла.
//
// Возвращаемое значение:
//   ХранилищеЗначения, с двоичными данными файла.
Функция ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ХранимыеФайлыВерсий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВерсияФайла = ВерсияСсылка;
	МенеджерЗаписи.Прочитать();
	
	Возврат МенеджерЗаписи.ХранимыйФайл;
	
КонецФункции

// Создать папку файлов
// Параметры:
// Имя - Строка - имя папки
// Родитель - СправочникСсылка.ПапкиФайлов - родительская папка.
// Пользователь - СправочникСсылка.Пользователи - ответственный за папку.
//
// Возвращаемое значение:
//   СправочникСсылка.ПапкиФайлов.
//
Функция СправочникиПапкиСоздатьЭлемент(Имя, Родитель, Пользователь = Неопределено) Экспорт
	
	Папка = Справочники.ПапкиФайлов.СоздатьЭлемент();
	Папка.Наименование = Имя;
	Папка.Родитель = Родитель;
	Папка.ДатаСоздания = ТекущаяДатаСеанса();
	
	Если Пользователь = Неопределено Тогда
		Папка.Ответственный = Пользователи.ТекущийПользователь();
	Иначе	
		Папка.Ответственный = Пользователь;
	КонецЕсли;
	
	Папка.Заполнить(Неопределено);
	Папка.Записать();
	Возврат Папка.Ссылка;
	
КонецФункции

// Создает версию сохраняемого файла для сохранения в ИБ.
//
// Параметры:
//   ФайлСсылка     - СправочникСсылка.Файлы - файл, для которого создается новая версия.
//   СведенияОФайле - Структура - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме "ФайлСВерсией".
//
// Возвращаемое значение:
//   СправочникСсылка.ВерсииФайлов - созданная версия.
//
Функция СоздатьВерсию(ФайлСсылка, СведенияОФайле) Экспорт
	
	ХранилищеФайла = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(СведенияОФайле.ВремяИзмененияУниверсальное)
		Или СведенияОФайле.ВремяИзмененияУниверсальное > ТекущаяУниверсальнаяДата() Тогда
		
		СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СведенияОФайле.ВремяИзменения)
		Или УниверсальноеВремя(СведенияОФайле.ВремяИзменения) > СведенияОФайле.ВремяИзмененияУниверсальное Тогда
		
		СведенияОФайле.ВремяИзменения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(СведенияОФайле.РасширениеБезТочки);
	
	Версия = Справочники.ВерсииФайлов.СоздатьЭлемент();
	
	Если СведенияОФайле.НоваяВерсияНомерВерсии = Неопределено Тогда
		Версия.НомерВерсии = НайтиМаксимальныйНомерВерсии(ФайлСсылка) + 1;
	Иначе
		Версия.НомерВерсии = СведенияОФайле.НоваяВерсияНомерВерсии;
	КонецЕсли;
	
	Версия.Владелец = ФайлСсылка;
	Версия.ДатаМодификацииУниверсальная = СведенияОФайле.ВремяИзмененияУниверсальное;
	Версия.ДатаМодификацииФайла = СведенияОФайле.ВремяИзменения;
	
	Версия.Комментарий = СведенияОФайле.НоваяВерсияКомментарий;
	
	Если СведенияОФайле.НоваяВерсияАвтор = Неопределено Тогда
		Версия.Автор = Пользователи.ТекущийПользователь();
	Иначе
		Версия.Автор = СведенияОФайле.НоваяВерсияАвтор;
	КонецЕсли;
	
	Если СведенияОФайле.НоваяВерсияДатаСоздания = Неопределено Тогда
		Версия.ДатаСоздания = ТекущаяДатаСеанса();
	Иначе
		Версия.ДатаСоздания = СведенияОФайле.НоваяВерсияДатаСоздания;
	КонецЕсли;
	
	Версия.ПолноеНаименование = СведенияОФайле.ИмяБезРасширения;
	Версия.Размер = СведенияОФайле.Размер;
	Версия.Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СведенияОФайле.РасширениеБезТочки);
	
	ТипХраненияФайлов = ФайловыеФункцииСлужебный.ТипХраненияФайлов();
	Версия.ТипХраненияФайла = ТипХраненияФайлов;

	Если СведенияОФайле.СсылкаНаВерсиюИсточник <> Неопределено Тогда // создание Файла из шаблона
		
		ТипХраненияФайловШаблона = СведенияОФайле.СсылкаНаВерсиюИсточник.ТипХраненияФайла;
		
		Если ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			// И шаблон, и новый Файл - в базе.
			// При создании Файла из шаблона хранилище значения копируется напрямую.
			ХранилищеФайла = СведенияОФайле.АдресВременногоХранилищаФайла;
			
		ИначеЕсли ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			//  И шаблон, и новый Файл - на диске - просто копируем файл.
			
			Если Не СведенияОФайле.СсылкаНаВерсиюИсточник.Том.Пустая() Тогда
				ПолныйПутьФайлаШаблона = ФайловыеФункцииСлужебный.ПолныйПутьТома(СведенияОФайле.СсылкаНаВерсиюИсточник.Том) 
					+ СведенияОФайле.СсылкаНаВерсиюИсточник.ПутьКФайлу; 
				
				Сведения = ФайловыеФункцииСлужебный.ДобавитьФайлВТом(ПолныйПутьФайлаШаблона, СведенияОФайле.ВремяИзмененияУниверсальное,
					СведенияОФайле.ИмяБезРасширения, СведенияОФайле.РасширениеБезТочки, Версия.НомерВерсии, СведенияОФайле.СсылкаНаВерсиюИсточник.Зашифрован); 
				Версия.Том = Сведения.Том;
				Версия.ПутьКФайлу = Сведения.ПутьКФайлу;
			КонецЕсли;
			
		ИначеЕсли ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			// Шаблон в базе, новый Файл - на диске.
			// В этом случае в АдресВременногоХранилищаФайла находится ХранилищеЗначения с файлом.
			Сведения = ФайловыеФункцииСлужебный.ДобавитьФайлВТом(СведенияОФайле.АдресВременногоХранилищаФайла.Получить(),
				СведенияОФайле.ВремяИзмененияУниверсальное, СведенияОФайле.ИмяБезРасширения, СведенияОФайле.РасширениеБезТочки,
				Версия.НомерВерсии, СведенияОФайле.СсылкаНаВерсиюИсточник.Зашифрован); 
			Версия.Том = Сведения.Том;
			Версия.ПутьКФайлу = Сведения.ПутьКФайлу;
			
		ИначеЕсли ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			// Шаблон на диске, новый Файл - в базе.
			Если Не СведенияОФайле.СсылкаНаВерсиюИсточник.Том.Пустая() Тогда
				ПолныйПутьФайлаШаблона = ФайловыеФункцииСлужебный.ПолныйПутьТома(СведенияОФайле.СсылкаНаВерсиюИсточник.Том) + СведенияОФайле.СсылкаНаВерсиюИсточник.ПутьКФайлу; 
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПутьФайлаШаблона);
				ХранилищеФайла = Новый ХранилищеЗначения(ДвоичныеДанные);
			КонецЕсли;
			
		КонецЕсли;
	Иначе // Создание объекта Файл на основе выбранного файла с диска.
		
		Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			
			ХранилищеФайла = Новый ХранилищеЗначения(
				ПолучитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла));
				
			Если Версия.Размер = 0 Тогда
				ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
				Версия.Размер = ДвоичныеДанныеФайла.Размер();
				
				ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРазмерФайлаДляЗагрузки(Версия);
			КонецЕсли;
				
		Иначе // хранение на диске
			
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла);
			
			Если Версия.Размер = 0 Тогда
				Версия.Размер = ДвоичныеДанные.Размер();
				ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРазмерФайлаДляЗагрузки(Версия);
			КонецЕсли;
			
			Сведения = ФайловыеФункцииСлужебный.ДобавитьФайлВТом(ДвоичныеДанные,
				СведенияОФайле.ВремяИзмененияУниверсальное, СведенияОФайле.ИмяБезРасширения, СведенияОФайле.РасширениеБезТочки,
				Версия.НомерВерсии); 
			Версия.Том = Сведения.Том;
			Версия.ПутьКФайлу = Сведения.ПутьКФайлу;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;

	Если ТипЗнч(СведенияОФайле.АдресВременногоХранилищаТекста) = Тип("ХранилищеЗначения") Тогда
		// При создании Файла из шаблона хранилище значения копируется напрямую.
		Версия.ТекстХранилище = СведенияОФайле.АдресВременногоХранилищаТекста;
		Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
	ИначеЕсли Не ПустаяСтрока(СведенияОФайле.АдресВременногоХранилищаТекста) Тогда
		Текст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаТекста);
		Версия.ТекстХранилище = Новый ХранилищеЗначения(Текст);
		Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
	КонецЕсли;
		
	Если Версия.Размер = 0 Тогда
		Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
			Версия.Размер = ДвоичныеДанныеФайла.Размер();
		КонецЕсли;
	КонецЕсли;

	Версия.Заполнить(Неопределено);
	Версия.Записать();
	
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		ЗаписатьФайлВИнформационнуюБазу(Версия.Ссылка, ХранилищеФайла);
	КонецЕсли;
	
	Возврат Версия.Ссылка;
	
КонецФункции

// Создает файл в ИБ вместе с версией.
//
// Параметры:
//   Владелец       - СправочникСсылка.ПапкиФайлов, ЛюбаяСсылка - будет установлен в реквизит ВладелецФайла у
//                    созданного файла.
//   СведенияОФайле - Структура - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме "ФайлСВерсией".
//
// Возвращаемое значение:
//    СправочникСсылка.Файлы - созданный файл.
//
Функция СоздатьФайлСВерсией(ВладелецФайла, СведенияОФайле) Экспорт
	
	НачатьТранзакцию();
	Попытка
	
		// Создадим карточку Файла в БД.
		ФайлСсылка = СоздатьФайл(ВладелецФайла, СведенияОФайле);
		// Создадим версию сохраняемого файла для сохранения в карточке Файла.
		Версия = СоздатьВерсию(ФайлСсылка, СведенияОФайле);
		// Подставим ссылку на версию в карточку Файла.
		ОбновитьВерсиюВФайле(ФайлСсылка, Версия, СведенияОФайле.АдресВременногоХранилищаТекста);
		
		Если СведенияОФайле.Кодировка <> Неопределено Тогда
			ЗаписатьКодировкуВерсииФайла(Версия, СведенияОФайле.Кодировка);
		КонецЕсли;
		
		ЕстьПравоСохранения = ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
		Если СведенияОФайле.ЗаписатьВИсторию И ЕстьПравоСохранения Тогда
			НавигационнаяСсылкаФайла = ПолучитьНавигационнуюСсылку(ФайлСсылка);
			ИсторияРаботыПользователя.Добавить(НавигационнаяСсылкаФайла);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	РаботаСФайламиПереопределяемый.ПриСозданииФайла(ФайлСсылка);
	
	Возврат ФайлСсылка;
	
КонецФункции

// Освобождает файл.
//
// Параметры:
//   ДанныеФайла - Структура - см. ДанныеФайла.
//   УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы.
//
Процедура ОсвободитьФайл(ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
	
	ЗаблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, , УникальныйИдентификатор);
	ФайлОбъект.Редактирует = Справочники.Пользователи.ПустаяСсылка();
	ФайлОбъект.ДатаЗаема = Дата("00010101000000");
	ФайлОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
	
	РаботаСФайламиПереопределяемый.ПриОсвобожденииФайла(ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

// Занимает файл на редактирование (checkout).
//
// Параметры:
//  ДанныеФайла  - структура с данными файла.
//  СтрокаОшибки - строка, в которой возвращается причина ошибки в случае неуспеха (скажем "Файл занят другим
//                 пользователем").
//  УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция.
//
Функция ЗанятьФайл(ДанныеФайла, СтрокаОшибки = "", УникальныйИдентификатор = Неопределено, Пользователь = Неопределено) Экспорт
	
	СтрокаОшибки = "";
	РаботаСФайламиПереопределяемый.ПриПопыткеЗанятьФайл(ДанныеФайла, СтрокаОшибки);
	Если Не ПустаяСтрока(СтрокаОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
	
	ЗаблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, , УникальныйИдентификатор);
	Если Пользователь = Неопределено Тогда
		ФайлОбъект.Редактирует = Пользователи.ТекущийПользователь();
	Иначе
		ФайлОбъект.Редактирует = Пользователь;
	КонецЕсли;
	ФайлОбъект.ДатаЗаема = ТекущаяДатаСеанса();
	ФайлОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);

	НавигационнаяСсылкаТекущейВерсии = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
	РабочийКаталогВладельца = ДанныеФайла.РабочийКаталогВладельца;
	
	ДанныеФайла = ДанныеФайла(ДанныеФайла.Версия);
	ДанныеФайла.НавигационнаяСсылкаТекущейВерсии = НавигационнаяСсылкаТекущейВерсии;
	ДанныеФайла.РабочийКаталогВладельца = РабочийКаталогВладельца;
	
	РаботаСФайламиПереопределяемый.ПриЗахватеФайла(ДанныеФайла, УникальныйИдентификатор);
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает структуру, содержащую различные сведения о файле и версии.
//
// Параметры:
//  ФайлИлиВерсияСсылка  - СправочникСсылка.Файлы, СправочникСсылка.ВерсииФайлов - файл или версия файла.
//
// Возвращаемое значение:
//   Структура - структура с данными файла.
//
Функция ДанныеФайла(ФайлИлиВерсияСсылка) Экспорт
	
	Если ТипЗнч(ФайлИлиВерсияСсылка) = Тип("СправочникСсылка.Файлы") Тогда
		ФайлСсылка = ФайлИлиВерсияСсылка;
		ВерсияСсылка = Неопределено;
	Иначе
		ФайлСсылка = Неопределено;
		ВерсияСсылка = ФайлИлиВерсияСсылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ФайлСсылка <> Неопределено Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.Код КАК Код,
		|	Файлы.Редактирует КАК Редактирует,
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
		|	Файлы.ВладелецФайла КАК ВладелецФайла,
		|	Файлы.ХранитьВерсии КАК ХранитьВерсии,
		|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
		|	ВерсииФайлов.ПолноеНаименование КАК ПолноеНаименование,
		|	ВерсииФайлов.Расширение КАК Расширение,
		|	ВерсииФайлов.Размер КАК Размер,
		|	ВерсииФайлов.НомерВерсии КАК НомерВерсии,
		|	ВерсииФайлов.ПутьКФайлу КАК ПутьКФайлу,
		|	ВерсииФайлов.Том КАК Том,
		|	ВерсииФайлов.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
		|	ВерсииФайлов.Автор КАК Автор,
		|	ВерсииФайлов.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста,
		|	Файлы.Зашифрован КАК Зашифрован,
		|	Файлы.ДатаЗаема КАК ДатаЗаема
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ПО Файлы.ТекущаяВерсия = ВерсииФайлов.Ссылка";
		
		Если ТипЗнч(ФайлСсылка) = Тип("Массив") Тогда 
			Запрос.Текст = Запрос.Текст + " ГДЕ Файлы.Ссылка В (&Файл) ";
		Иначе
			Запрос.Текст = Запрос.Текст + " ГДЕ Файлы.Ссылка = &Файл ";
		КонецЕсли;
		
		Запрос.Параметры.Вставить("Файл", ФайлСсылка);
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.Код КАК Код,
		|	Файлы.Редактирует КАК Редактирует,
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
		|	Файлы.ВладелецФайла КАК ВладелецФайла,
		|	Файлы.ХранитьВерсии КАК ХранитьВерсии,
		|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
		|	ВерсииФайлов.ПолноеНаименование КАК ПолноеНаименование,
		|	ВерсииФайлов.Расширение КАК Расширение,
		|	ВерсииФайлов.Размер КАК Размер,
		|	ВерсииФайлов.НомерВерсии КАК НомерВерсии,
		|	ВерсииФайлов.ПутьКФайлу КАК ПутьКФайлу,
		|	ВерсииФайлов.Том КАК Том,
		|	ВерсииФайлов.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
		|	ВерсииФайлов.Автор КАК Автор,
		|	ВерсииФайлов.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста,
		|	Файлы.Зашифрован КАК Зашифрован,
		|	Файлы.ДатаЗаема КАК ДатаЗаема
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВерсииФайлов.Ссылка = &Версия
		|	И Файлы.Ссылка = ВерсииФайлов.Владелец";
		
		Запрос.Параметры.Вставить("Версия", ВерсияСсылка);
		
	КонецЕсли;
	
	МассивДанныеФайла = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("Ссылка", Выборка.Ссылка);
		ДанныеФайла.Вставить("КодФайла", Выборка.Код);
		ДанныеФайла.Вставить("Редактирует", Выборка.Редактирует);
		ДанныеФайла.Вставить("Владелец", Выборка.ВладелецФайла);
		ДанныеФайла.Вставить("НавигационнаяСсылка", ПолучитьНавигационнуюСсылку(Выборка.Ссылка));
		
		Если ВерсияСсылка <> Неопределено Тогда
			ДанныеФайла.Вставить("Версия", ВерсияСсылка);
		Иначе
			ДанныеФайла.Вставить("Версия", Выборка.ТекущаяВерсия);
		КонецЕсли;	

		ДанныеФайла.Вставить("ТекущаяВерсия", Выборка.ТекущаяВерсия);
		
		СтруктураКлюча = Новый Структура("ВерсияФайла", ДанныеФайла.ТекущаяВерсия);
		КлючЗаписи = РегистрыСведений.ХранимыеФайлыВерсий.СоздатьКлючЗаписи(СтруктураКлюча);
		НавигационнаяСсылкаТекущейВерсии = ПолучитьНавигационнуюСсылку(КлючЗаписи, "ХранимыйФайл");
		ДанныеФайла.Вставить("НавигационнаяСсылкаТекущейВерсии", НавигационнаяСсылкаТекущейВерсии);
		
		КодировкаТекущейВерсии = ПолучитьКодировкуВерсииФайла(ДанныеФайла.ТекущаяВерсия);
		ДанныеФайла.Вставить("КодировкаТекущейВерсии", КодировкаТекущейВерсии);
		
		ДанныеФайла.Вставить("Размер", Выборка.Размер);
		ДанныеФайла.Вставить("НомерВерсии", Выборка.НомерВерсии);
		ДанныеФайла.Вставить("ДатаМодификацииУниверсальная", Выборка.ДатаМодификацииУниверсальная);
		ДанныеФайла.Вставить("Расширение", Выборка.Расширение);
		ДанныеФайла.Вставить("ПолноеНаименованиеВерсии", СокрЛП(Выборка.ПолноеНаименование));
		ДанныеФайла.Вставить("ХранитьВерсии", Выборка.ХранитьВерсии);
		ДанныеФайла.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
		ДанныеФайла.Вставить("АвторТекущейВерсии", Выборка.Автор);
		ДанныеФайла.Вставить("Зашифрован", Выборка.Зашифрован);
		ДанныеФайла.Вставить("ДатаЗаема", Выборка.ДатаЗаема);
		
		Если ДанныеФайла.Зашифрован Тогда
			МассивСертификатовШифрования = ПолучитьМассивСертификатовШифрования(ДанныеФайла.Ссылка);
			ДанныеФайла.Вставить("МассивСертификатовШифрования", МассивСертификатовШифрования);
		КонецЕсли;
		
		НаЧтение = ДанныеФайла.Редактирует <> Пользователи.ТекущийПользователь();
		ДанныеФайла.Вставить("НаЧтение", НаЧтение);
		
		ВРабочемКаталогеНаЧтение = Истина;
		ВРабочемКаталогеВладельца = Ложь;
		ИмяКаталога = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", "ПутьКЛокальномуКэшуФайлов");
		Если ИмяКаталога = Неопределено Тогда
			ИмяКаталога = "";
		КонецЕсли;

		Если ВерсияСсылка <> Неопределено Тогда
			ПолноеИмяФайлаВРабочемКаталоге = ПолучитьПолноеИмяФайлаИзРегистра(ВерсияСсылка, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		Иначе
			ПолноеИмяФайлаВРабочемКаталоге = ПолучитьПолноеИмяФайлаИзРегистра(Выборка.ТекущаяВерсия, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;

		ДанныеФайла.Вставить("ПолноеИмяФайлаВРабочемКаталоге", ПолноеИмяФайлаВРабочемКаталоге);
		ДанныеФайла.Вставить("ВРабочемКаталогеНаЧтение", ВРабочемКаталогеНаЧтение);
		ДанныеФайла.Вставить("РабочийКаталогВладельца", "");
		
		РедактируетТекущийПользователь = (ДанныеФайла.Редактирует = Пользователи.ТекущийПользователь());
		ДанныеФайла.Вставить("РедактируетТекущийПользователь", РедактируетТекущийПользователь);
		
		СтатусИзвлеченияТекстаСтрока = "НеИзвлечен";
		Если Выборка.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен Тогда
			СтатусИзвлеченияТекстаСтрока = "НеИзвлечен";
		ИначеЕсли Выборка.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен Тогда
			СтатусИзвлеченияТекстаСтрока = "Извлечен";
		ИначеЕсли Выборка.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось Тогда
			СтатусИзвлеченияТекстаСтрока = "ИзвлечьНеУдалось";
		КонецЕсли;
		ДанныеФайла.Вставить("СтатусИзвлеченияТекста", СтатусИзвлеченияТекстаСтрока);
		
		МассивДанныеФайла.Добавить(ДанныеФайла);
		
	КонецЦикла;
	
	// Если был передан массив - возвращаем массив.
	Если ТипЗнч(ФайлСсылка) = Тип("Массив") Тогда 
		Возврат МассивДанныеФайла;
	КонецЕсли;

	Если МассивДанныеФайла.Количество() > 0 Тогда 
		Возврат МассивДанныеФайла[0];
	Иначе
		Возврат Новый Структура;
	КонецЕсли;
	
КонецФункции

// Обновляет или создает версию Файла и возвращает ссылку на обновленную версию (или Ложь, если файл бинарно не
// изменен).
//
// Параметры:
//   ФайлСсылка     - СправочникСсылка.Файлы        - файл, для которого создается новая версия.
//   СведенияОФайле - Структура                     - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме
//                                                    "ФайлСВерсией".
//   ВерсияСсылка   - СправочникСсылка.ВерсииФайлов - версия файла, которую надо обновить.
//   УникальныйИдентификаторФормы                   - УникальныйИдентификатор - уникальный идентификатор формы, 
//                                                    в контексте которой выполняется операция.
//
// Возвращаемое значение:
//   СправочникСсылка.ВерсииФайлов - созданная или измененная версия; Неопределено, если файл бинарно не был изменен.
//
Функция ОбновитьВерсиюФайла(ФайлСсылка,
	СведенияОФайле,
	ВерсияСсылка = Неопределено,
	УникальныйИдентификаторФормы = Неопределено,
	Пользователь = Неопределено) Экспорт
	
	ЕстьПравоСохранения = ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВремяИзмененияУниверсальное = СведенияОФайле.ВремяИзмененияУниверсальное;
	Если НЕ ЗначениеЗаполнено(ВремяИзмененияУниверсальное)
		ИЛИ ВремяИзмененияУниверсальное > ТекущаяУниверсальнаяДата() Тогда
		ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	ВремяИзменения = СведенияОФайле.ВремяИзменения;
	Если НЕ ЗначениеЗаполнено(ВремяИзменения)
		ИЛИ УниверсальноеВремя(ВремяИзменения) > ВремяИзмененияУниверсальное Тогда
		ВремяИзменения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(СведенияОФайле.РасширениеБезТочки);
	
	ТекущаяВерсияРазмер = 0;
	ДвоичныеДанные = Неопределено;
	ТекущаяВерсияТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	ТекущаяВерсияТом = Неопределено;
	ТекущаяВерсияПутьКФайлу = Неопределено;
	
	ВерсияСсылкаДляСравненияРазмера = ВерсияСсылка;
	Если ВерсияСсылка <> Неопределено Тогда
		ВерсияСсылкаДляСравненияРазмера = ВерсияСсылка;
	Иначе
		ВерсияСсылкаДляСравненияРазмера = ФайлСсылка.ТекущаяВерсия;
	КонецЕсли;
	
	КодировкаПредВерсии = ПолучитьКодировкуВерсииФайла(ВерсияСсылкаДляСравненияРазмера);
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияСсылкаДляСравненияРазмера, 
		"Размер, ТипХраненияФайла, Том, ПутьКФайлу");
	ТекущаяВерсияРазмер = СтруктураРеквизитов.Размер;
	ТекущаяВерсияТипХраненияФайла = СтруктураРеквизитов.ТипХраненияФайла;
	ТекущаяВерсияТом = СтруктураРеквизитов.Том;
	ТекущаяВерсияПутьКФайлу = СтруктураРеквизитов.ПутьКФайлу;
	
	ХранилищеФайла = Неопределено;
	Если СведенияОФайле.Размер = ТекущаяВерсияРазмер Тогда
		ДвоичныеДанныеПредыдущейВерсии = Неопределено;
		
		Если ТекущаяВерсияТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			Если НЕ ТекущаяВерсияТом.Пустая() Тогда
				ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ТекущаяВерсияТом) + ТекущаяВерсияПутьКФайлу; 
				ДвоичныеДанныеПредыдущейВерсии = Новый ДвоичныеДанные(ПолныйПуть);
			КонецЕсли;
		Иначе
			ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияСсылкаДляСравненияРазмера);
			ДвоичныеДанныеПредыдущейВерсии = ХранилищеФайла.Получить();
		КонецЕсли;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла);
		
		Если ДвоичныеДанныеПредыдущейВерсии = ДвоичныеДанные Тогда
			Возврат Неопределено; // Файл бинарно не изменен - вернем Ложь.
		КонецЕсли;
	КонецЕсли;
	
	СтарыйТипХранения = Неопределено;
	ВерсияЗаблокирована = Ложь;
	Версия = Неопределено;
	
	Если СведенияОФайле.ХранитьВерсии Тогда
		Версия = Справочники.ВерсииФайлов.СоздатьЭлемент();
		Версия.РодительскаяВерсия = ФайлСсылка.ТекущаяВерсия;
		Версия.НомерВерсии = НайтиМаксимальныйНомерВерсии(ФайлСсылка) + 1;
	Иначе
		
		Если ВерсияСсылка = Неопределено Тогда
			Версия = ФайлСсылка.ТекущаяВерсия.ПолучитьОбъект();
		Иначе
			Версия = ВерсияСсылка.ПолучитьОбъект();
		КонецЕсли;
	
		ЗаблокироватьДанныеДляРедактирования(Версия.Ссылка, , УникальныйИдентификаторФормы);
		ВерсияЗаблокирована = Истина;
		
		// Удалим файл с диска - мы заместим его новым.
		Если Версия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			Если НЕ Версия.Том.Пустая() Тогда
				ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(Версия.Том) + Версия.ПутьКФайлу; 
				ФайлНаДиске = Новый Файл(ПолныйПуть);
				Если ФайлНаДиске.Существует() Тогда
					ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
					УдалитьФайлы(ПолныйПуть);
				КонецЕсли;
				ПутьСПодкаталогом = ФайлНаДиске.Путь;
				МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, "*.*");
				Если МассивФайловВКаталоге.Количество() = 0 Тогда
					УдалитьФайлы(ПутьСПодкаталогом);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Версия.Владелец = ФайлСсылка;
	Если Пользователь = Неопределено Тогда
		Версия.Автор = Пользователи.ТекущийПользователь();
	Иначе
		Версия.Автор = Пользователь;
	КонецЕсли;
	Версия.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
	Версия.ДатаМодификацииФайла = ВремяИзменения;
	Версия.ДатаСоздания = ТекущаяДатаСеанса();
	Версия.Размер = СведенияОФайле.Размер;
	Версия.ПолноеНаименование = СведенияОФайле.ИмяБезРасширения;
	Версия.Комментарий = СведенияОФайле.Комментарий;
	Версия.Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СведенияОФайле.РасширениеБезТочки);
	
	ТипХраненияФайлов = ФайловыеФункцииСлужебный.ТипХраненияФайлов();
	Версия.ТипХраненияФайла = ТипХраненияФайлов;
	
	Если ДвоичныеДанные = Неопределено Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла);
	КонецЕсли;
	
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		
		ХранилищеФайла = Новый ХранилищеЗначения(ДвоичныеДанные);
			
		Если Версия.Размер = 0 Тогда
			ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
			Версия.Размер = ДвоичныеДанныеФайла.Размер();
			
			ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРазмерФайлаДляЗагрузки(Версия);
		КонецЕсли;
		
		// очистим поля
		Версия.ПутьКФайлу = "";
		Версия.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	Иначе // хранение на диске
		
		Если Версия.Размер = 0 Тогда
			Версия.Размер = ДвоичныеДанные.Размер();
			ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРазмерФайлаДляЗагрузки(Версия);
		КонецЕсли;
		
		ФайлЗашифрован = Ложь;
		Если СведенияОФайле.Зашифрован <> Неопределено Тогда
			ФайлЗашифрован = СведенияОФайле.Зашифрован;
		КонецЕсли;	
		
		Сведения = ФайловыеФункцииСлужебный.ДобавитьФайлВТом(ДвоичныеДанные,
			ВремяИзмененияУниверсальное, СведенияОФайле.ИмяБезРасширения, Версия.Расширение,
			Версия.НомерВерсии, ФайлЗашифрован); 
		Версия.Том = Сведения.Том;
		Версия.ПутьКФайлу = Сведения.ПутьКФайлу;
		ХранилищеФайла = Новый ХранилищеЗначения(Неопределено); // очистим ХранилищеЗначения
		
	КонецЕсли;
	
	Если СведенияОФайле.АдресВременногоХранилищаТекста <> Неопределено Тогда
		Если ФайловыеФункцииСлужебный.ИзвлекатьТекстыФайловНаСервере() Тогда
			Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
		Иначе
			Текст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаТекста);
			Версия.ТекстХранилище = Новый ХранилищеЗначения(Текст);
			Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		КонецЕсли;
	Иначе
		Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	КонецЕсли;
	
	Если СведенияОФайле.НовыйСтатусИзвлеченияТекста <> Неопределено Тогда
		Версия.СтатусИзвлеченияТекста = СведенияОФайле.НовыйСтатусИзвлеченияТекста;
	КонецЕсли;

	Если Версия.Размер = 0 Тогда
		Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
			Версия.Размер = ДвоичныеДанныеФайла.Размер();
		КонецЕсли;
	КонецЕсли;
	
	Если СведенияОФайле.Зашифрован <> Неопределено Тогда
		Версия.Зашифрован = СведенияОФайле.Зашифрован;
	КонецЕсли;
	
	Версия.Заполнить(Неопределено);
	Версия.Записать();
	
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		ЗаписатьФайлВИнформационнуюБазу(Версия.Ссылка, ХранилищеФайла);
	КонецЕсли;
	
	Если ВерсияЗаблокирована Тогда
		РазблокироватьДанныеДляРедактирования(Версия.Ссылка, УникальныйИдентификаторФормы);
	КонецЕсли;
	
	ЗаписатьКодировкуВерсииФайла(Версия.Ссылка, КодировкаПредВерсии);

	Если ЕстьПравоСохранения Тогда
		НавигационнаяСсылкаФайла = ПолучитьНавигационнуюСсылку(ФайлСсылка);
		ИсторияРаботыПользователя.Добавить(НавигационнаяСсылкаФайла);
	КонецЕсли;
	
	Возврат Версия.Ссылка;
	
КонецФункции

// Подставляет ссылку на версию в карточку Файла.
//
// Параметры:
// ФайлСсылка - СправочникСсылка.Файлы - Файл, в котором создается версия.
// Версия  - СправочникСсылка.ВерсииФайлов - версия файла.
// АдресВременногоХранилищаТекста - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с
//                                           файлом текста или ХранилищеЗначения - непосредственно содержит  двоичные
//                                           данные с файлом текста.
//  УникальныйИдентификатор - уникальный идентификатор формы.
//
Процедура ОбновитьВерсиюВФайле(ФайлСсылка,
                               Версия,
                               Знач АдресВременногоХранилищаТекста,
                               УникальныйИдентификатор = Неопределено) Экспорт
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, , УникальныйИдентификатор);
	
	ФайлОбъект.ТекущаяВерсия = Версия.Ссылка;
	
	Если ТипЗнч(АдресВременногоХранилищаТекста) = Тип("ХранилищеЗначения") Тогда
		// При создании Файла из шаблона хранилище значения копируется напрямую.
		ФайлОбъект.ТекстХранилище = АдресВременногоХранилищаТекста;
	Иначе
		Текст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
		ФайлОбъект.ТекстХранилище = Новый ХранилищеЗначения(Текст);
	КонецЕсли;
	
	ФайлОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Переносит Файл в другую папку.
//
// Параметры:
//  ДанныеФайла  - структура с данными файла.
//  Папка - СправочникСсылка.ПапкиФайлов - ссылка на папку, куда нужно переместить файл.
//
Процедура ПеренестиФайл(ДанныеФайла, Папка) 
	
	ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
	ФайлОбъект.Заблокировать();
	ФайлОбъект.ВладелецФайла = Папка;
	ФайлОбъект.Записать();
	
КонецПроцедуры

// Переносит Файлы в другую папку.
//
// Параметры:
//  ОбъектыСсылка - Массив - массив ссылок на файлы.
//  Папка - СправочникСсылка.ПапкиФайлов - ссылка на папку, куда нужно переместить файлы.
//
Функция ПеренестиФайлы(ОбъектыСсылка, Папка) Экспорт 
	
	ДанныеФайлов = Новый Массив;
	
	Для Каждого ФайлСсылка Из ОбъектыСсылка Цикл
		ПеренестиФайл(ФайлСсылка, Папка);
		ДанныеФайла = ДанныеФайла(ФайлСсылка);
		ДанныеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;
	
	Возврат ДанныеФайлов;
	
КонецФункции

// Создает файл в ИБ.
//
// Параметры:
//   Владелец       - СправочникСсылка.ПапкиФайлов, ЛюбаяСсылка - будет установлен в реквизит ВладелецФайла у
//                    созданного файла.
//   СведенияОФайле - Структура - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме "Файл".
//
// Возвращаемое значение:
//    СправочникСсылка.Файлы - созданный файл.
//
Функция СоздатьФайл(Знач Владелец, Знач СведенияОФайле)
	
	Файл = Справочники.Файлы.СоздатьЭлемент();
	Файл.ВладелецФайла = Владелец;
	Файл.Наименование = СведенияОФайле.ИмяБезРасширения;
	Файл.ПолноеНаименование = СведенияОФайле.ИмяБезРасширения;
	Файл.Автор = ?(СведенияОФайле.Автор <> Неопределено, СведенияОФайле.Автор, Пользователи.ТекущийПользователь());
	Файл.ДатаСоздания = ТекущаяДатаСеанса();
	Файл.Описание = СведенияОФайле.Комментарий;
	Файл.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Неопределено);
	Файл.ХранитьВерсии = СведенияОФайле.ХранитьВерсии;
	
	Если ТипЗнч(СведенияОФайле.АдресВременногоХранилищаТекста) = Тип("ХранилищеЗначения") Тогда
		// При создании Файла из шаблона хранилище значения копируется напрямую.
		Файл.ТекстХранилище = СведенияОФайле.АдресВременногоХранилищаТекста;
	ИначеЕсли Не ПустаяСтрока(СведенияОФайле.АдресВременногоХранилищаТекста) Тогда
		Текст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаТекста);
		Файл.ТекстХранилище = Новый ХранилищеЗначения(Текст);
	КонецЕсли;
	
	Файл.Заполнить(Неопределено);
	Файл.Записать();
	Возврат Файл.Ссылка;
	
КонецФункции

// Находит максимальный номер версии для данного объекта Файл. Если нет версий - то 0.
// Параметры:
//  ФайлСсылка  - СправочникСсылка.Файлы - ссылка на файл.
//
// Возвращаемое значение:
//   Число  - максимальный номер версии.
//
Функция НайтиМаксимальныйНомерВерсии(ФайлСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(Версии.НомерВерсии), 0) КАК МаксимальныйНомер
	|ИЗ
	|	Справочник.ВерсииФайлов КАК Версии
	|ГДЕ
	|	Версии.Владелец = &Файл";
	
	Запрос.Параметры.Вставить("Файл", ФайлСсылка);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если Выборка.МаксимальныйНомер = Null Тогда
			Возврат 0;
		КонецЕсли;
		
		Возврат Число(Выборка.МаксимальныйНомер);
	КонецЕсли;
	
	Возврат 0;
КонецФункции

// Обновляет текстовую порцию из файла в карточке файла.
//
// Параметры:
// ФайлСсылка - СправочникСсылка.Файлы - Файл, в котором создается версия.
// АдресВременногоХранилищаТекста - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с
//                                           файлом текста или ХранилищеЗначения - непосредственно содержит  двоичные
//                                           данные с файлом текста.
//  УникальныйИдентификатор - уникальный идентификатор формы.
//
Процедура ОбновитьТекстВФайле(ФайлСсылка,
                              Знач АдресВременногоХранилищаТекста,
                              УникальныйИдентификатор = Неопределено)
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, , УникальныйИдентификатор);
	
	Текст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
	ФайлОбъект.ТекстХранилище = Новый ХранилищеЗначения(Текст);
	
	ФайлОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

// Обновляет или создает версию файла и снимает блокировку. 
//
// Параметры:
//   ДанныеФайла                  - Структура - структура с данными файла.
//   СведенияОФайле               - Структура - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме "ФайлСВерсией".
//   НеМенятьЗаписьВРабочемКаталоге - Булево  - не менять запись в регистре сведений ФайлыВРабочемКаталоге.
//   ПолныйПутьКФайлу             - Строка    - указывается, если НеМенятьЗаписьВРабочемКаталоге = Ложь.
//   РабочийКаталогПользователя   - Строка    - указывается, если НеМенятьЗаписьВРабочемКаталоге = Ложь.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Булево - Истина, если создание версии выполнено (и файл бинарно изменен).
//
Функция СохранитьИзмененияИОсвободитьФайл(ДанныеФайла, СведенияОФайле,
	НеМенятьЗаписьВРабочемКаталоге, ПолныйПутьКФайлу, РабочийКаталогПользователя, 
	УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	ДанныеФайлаТекущие = ДанныеФайла(ДанныеФайла.Ссылка);
	Если Не ДанныеФайлаТекущие.РедактируетТекущийПользователь Тогда
		ВызватьИсключение НСтр("ru = 'Файл не занят текущим пользователем'");
	КонецЕсли;
	
	ВерсияНеСоздана = Ложь;
	
	НачатьТранзакцию();
	Попытка
		ПредыдущаяВерсия = ДанныеФайла.ТекущаяВерсия;
		СведенияОФайле.Зашифрован = ДанныеФайла.Зашифрован;
		НоваяВерсия = ОбновитьВерсиюФайла(ДанныеФайла.Ссылка, СведенияОФайле,, УникальныйИдентификаторФормы);
		Если НоваяВерсия <> Неопределено Тогда
			Если СведенияОФайле.ХранитьВерсии Тогда
				ОбновитьВерсиюВФайле(ДанныеФайла.Ссылка, НоваяВерсия, СведенияОФайле.АдресВременногоХранилищаТекста, УникальныйИдентификаторФормы);
			Иначе
				ОбновитьТекстВФайле(ДанныеФайла.Ссылка, СведенияОФайле.АдресВременногоХранилищаТекста, УникальныйИдентификаторФормы);
			КонецЕсли;
			ДанныеФайла.ТекущаяВерсия = НоваяВерсия;
		КонецЕсли;
		
		ОсвободитьФайл(ДанныеФайла, УникальныйИдентификаторФормы);
		
		Если СведенияОФайле.Кодировка <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(ПолучитьКодировкуВерсииФайла(ДанныеФайла.ТекущаяВерсия)) Тогда
				ЗаписатьКодировкуВерсииФайла(ДанныеФайла.ТекущаяВерсия, СведенияОФайле.Кодировка);
			КонецЕсли;
		КонецЕсли;
		
		Если НоваяВерсия <> Неопределено И НЕ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() И Не НеМенятьЗаписьВРабочемКаталоге Тогда
			УдалитьВерсиюИЗанестиИнформациюФайлаВРегистр(ПредыдущаяВерсия, НоваяВерсия,
				ПолныйПутьКФайлу, РабочийКаталогПользователя, ДанныеФайла.РабочийКаталогВладельца <> "");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НоваяВерсия <> Неопределено;
	
КонецФункции

// Получает данные файла, затем обновляет или создает версию Файла и снимает блокировку.
// Нужно для случаев, когда на клиенте нет ДанныеФайла (из соображений экономии вызовов клиент-сервер).
//
// Параметры:
//   ФайлСсылка       - СправочникСсылка.Файлы - файл, в котором обновляется версия.
//   СведенияОФайле   - Структура - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме "ФайлСВерсией".
//   ПолныйПутьКФайлу             - Строка
//   РабочийКаталогПользователя   - Строка
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Структура - со свойствами:
//     * Успешно     - Булево    - Истина, если создание версии выполнено (и файл бинарно изменен).
//     * ДанныеФайла - Структура - структура с данными файла.
//
Функция СохранитьИзмененияИОсвободитьФайлПоСсылке(ФайлСсылка, СведенияОФайле, 
	ПолныйПутьКФайлу, РабочийКаталогПользователя, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	ДанныеФайла = ДанныеФайла(ФайлСсылка);
	ВерсияСоздана = СохранитьИзмененияИОсвободитьФайл(ДанныеФайла, СведенияОФайле, Ложь, ПолныйПутьКФайлу, РабочийКаталогПользователя,
		УникальныйИдентификаторФормы);
	Возврат Новый Структура("Успешно,ДанныеФайла", ВерсияСоздана, ДанныеФайла);
	
КонецФункции

// Предназначена для записи изменений файла без его освобождения.
//
// Параметры:
//   ДанныеФайла                  - Структура - структура с данными файла.
//   СведенияОФайле               - Структура - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме "ФайлСВерсией".
//   НеМенятьЗаписьВРабочемКаталоге - Булево  - не менять запись в регистре сведений ФайлыВРабочемКаталоге.
//   ОтносительныйПутьКФайлу      - Строка    - относительный путь без пути рабочего каталога, например
//                                              "А1/Приказ.doc"; указывается, если НеМенятьЗаписьВРабочемКаталоге =
//                                              Ложь.
//   ПолныйПутьКФайлу             - Строка    - путь на клиенте в рабочем каталоге; указывается, если
//                                              НеМенятьЗаписьВРабочемКаталоге = Ложь.
//   ВРабочемКаталогеВладельца    - Булево    - файл находится в рабочем каталоге владельца.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Булево  - Истина, если создание версии выполнено (и файл бинарно изменен).
//
Функция СохранитьИзмененияФайла(ФайлСсылка, СведенияОФайле, 
	НеМенятьЗаписьВРабочемКаталоге, ОтносительныйПутьКФайлу, ПолныйПутьКФайлу, ВРабочемКаталогеВладельца,
	УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	ДанныеФайлаТекущие = ДанныеФайла(ФайлСсылка);
	Если Не ДанныеФайлаТекущие.РедактируетТекущийПользователь Тогда
		ВызватьИсключение НСтр("ru = 'Файл не занят текущим пользователем'");
	КонецЕсли;
	
	ВерсияНеСоздана = Ложь;
	ТекущаяВерсия = ДанныеФайлаТекущие.ТекущаяВерсия;
	
	НачатьТранзакцию();
	Попытка
		
		СтараяВерсия = ФайлСсылка.ТекущаяВерсия;
		СведенияОФайле.Зашифрован = ДанныеФайлаТекущие.Зашифрован;
		НоваяВерсия = ОбновитьВерсиюФайла(ФайлСсылка, СведенияОФайле, ,	УникальныйИдентификаторФормы);
		
		Если НоваяВерсия <> Неопределено Тогда
			ТекущаяВерсия = НоваяВерсия;
			Если СведенияОФайле.ХранитьВерсии Тогда
				ОбновитьВерсиюВФайле(ФайлСсылка, НоваяВерсия, СведенияОФайле.АдресВременногоХранилищаТекста, УникальныйИдентификаторФормы);
			Иначе
				ОбновитьТекстВФайле(ФайлСсылка, СведенияОФайле.АдресВременногоХранилищаТекста, УникальныйИдентификаторФормы);
			КонецЕсли;
		
			Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() И Не НеМенятьЗаписьВРабочемКаталоге Тогда
				УдалитьИзРегистра(СтараяВерсия);
				ЗаписатьПолноеИмяФайлаВРегистр(НоваяВерсия, ОтносительныйПутьКФайлу, Ложь, ВРабочемКаталогеВладельца);
			КонецЕсли;
		КонецЕсли;
		
		Если СведенияОФайле.Кодировка <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(ПолучитьКодировкуВерсииФайла(ТекущаяВерсия)) Тогда
				ЗаписатьКодировкуВерсииФайла(ТекущаяВерсия, СведенияОФайле.Кодировка);
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НоваяВерсия <> Неопределено;
	
КонецФункции

// Получает РедактируетТекущийПользователь - в привилегированном режиме.
// Параметры:
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла.
//
// Возвращаемое значение:
//   Булево - Истина, если файл редактирует текущий пользователь.
//
Функция ПолучитьРедактируетТекущийПользователь(ВерсияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Редактирует КАК Редактирует
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ВерсииФайлов.Ссылка = &Версия
	|	И Файлы.Ссылка = ВерсииФайлов.Владелец";
	
	Запрос.Параметры.Вставить("Версия", ВерсияСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РедактируетТекущийПользователь = (Выборка.Редактирует = Пользователи.ТекущийПользователь());
		Возврат РедактируетТекущийПользователь;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Получает данные файла и делает заем (checkout) - для экономии вызовов 
// клиент сервер поместили ПолучитьДанныеФайла и ЗанятьФайл в одну функцию.
// Параметры:
//  ФайлСсылка  - СправочникСсылка.Файлы - файл.
//  ДанныеФайла  - Структура - структура с данными файла.
//  СтрокаОшибки - строка, в которой возвращается причина ошибки в случае неуспеха (скажем "Файл занят другим
//                 пользователем").
//  УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция.
//
Функция ПолучитьДанныеФайлаИЗанятьФайл(ФайлСсылка, ДанныеФайла, СтрокаОшибки, УникальныйИдентификатор = Неопределено) Экспорт

	ДанныеФайла = ДанныеФайла(ФайлСсылка);

	СтрокаОшибки = "";
	Если НЕ РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ДанныеФайла.Редактирует) Тогда
		
		СтрокаОшибки = "";
		Если Не ЗанятьФайл(ДанныеФайла, СтрокаОшибки, УникальныйИдентификатор) Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Получает ДанныеФайла для файлов и помещает в МассивДанныхФайла.
//  МассивФайлов - массив ссылок на файлы.
//  МассивДанныхФайла - массив структур с данными файлов.
//
Процедура ПолучитьДанныеДляМассиваФайлов(Знач МассивФайлов, МассивДанныхФайла) Экспорт
	
	Для Каждого Файл Из МассивФайлов Цикл
		ДанныеФайла = ДанныеФайла(Файл);
		МассивДанныхФайла.Добавить(ДанныеФайла);
	КонецЦикла;
	
КонецПроцедуры

// Получает данные файла для открытия и делает заем (checkout) - для экономии вызовов 
// клиент сервер поместили ДанныеФайлаДляОткрытия и ЗанятьФайл в одну функцию.
// Параметры:
//  ФайлСсылка  - СправочникСсылка.Файлы - файл.
//  ДанныеФайла  - Структура - структура с данными файла.
//  СтрокаОшибки - строка, в которой возвращается причина ошибки в случае неуспеха (скажем "Файл занят другим
//                 пользователем").
//  УникальныйИдентификатор - уникальный идентификатор формы.
//  РабочийКаталогВладельца - Строка - рабочий каталог владельца файла.
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция.
//
Функция ПолучитьДанныеФайлаДляОткрытияИЗанятьФайл(ФайлСсылка,
	ДанныеФайла, СтрокаОшибки, УникальныйИдентификатор = Неопределено, РабочийКаталогВладельца = Неопределено) Экспорт

	ДанныеФайла = ДанныеФайлаДляОткрытия(ФайлСсылка, УникальныйИдентификатор, РабочийКаталогВладельца);

	СтрокаОшибки = "";
	Если НЕ РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеФайла.Редактирует) Тогда
		
		СтрокаОшибки = "";
		Если Не ЗанятьФайл(ДанныеФайла, СтрокаОшибки, УникальныйИдентификатор) Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Выполняет ПоместитьВоВременноеХранилище (если файл хранится на диске) и возвращает нужную ссылку.
// Параметры:
// ВерсияСсылка - версия файла.
//  ИдентификаторФормы - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Строка  - навигационная ссылка во временном хранилище.
//
Функция ПолучитьНавигационнуюСсылкуДляОткрытия(ВерсияСсылка, ИдентификаторФормы = Неопределено) Экспорт
	
	Адрес = "";
	
	ТипХраненияФайла = ВерсияСсылка.ТипХраненияФайла;
	
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Если НЕ ВерсияСсылка.Том.Пустая() Тогда
			ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу; 
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
			Исключение
				// Запись в журнал регистрации.
				СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(
					ИнформацияОбОшибке(), ВерсияСсылка.Владелец);
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Файлы.Открытие файла'",
					     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.Файлы,
					ВерсияСсылка.Владелец,
					СообщениеОбОшибке);
				
				ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
					ВерсияСсылка.ПолноеНаименование + "." + ВерсияСсылка.Расширение);
			КонецПопытки;
		КонецЕсли;
	Иначе
		СтруктураКлюча = Новый Структура("ВерсияФайла", ВерсияСсылка);
		КлючЗаписи = РегистрыСведений.ХранимыеФайлыВерсий.СоздатьКлючЗаписи(СтруктураКлюча);
		Адрес = ПолучитьНавигационнуюСсылку(КлючЗаписи, "ХранимыйФайл");
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

// Выполняет ДанныеФайла и вычисляет РабочийКаталогВладельца.
//
// Параметры:
//  ФайлИлиВерсияСсылка     - СправочникСсылка.Файлы, СправочникСсылка.ВерсииФайлов - файл или версия файла.
//  РабочийКаталогВладельца - Строка - в ней возвращается рабочий каталог владельца файла.
//
// Возвращаемое значение:
//   Структура - структура с данными файла.
//
Функция ДанныеФайлаИРабочийКаталог(ФайлИлиВерсияСсылка, РабочийКаталогВладельца = Неопределено) Экспорт
	
	ДанныеФайла = ДанныеФайла(ФайлИлиВерсияСсылка);
	Если ТипЗнч(ФайлИлиВерсияСсылка) = Тип("СправочникСсылка.Файлы") Тогда
		ФайлСсылка = ФайлИлиВерсияСсылка;
		ВерсияСсылка = Неопределено;
	Иначе
		ФайлСсылка = Неопределено;
		ВерсияСсылка = ФайлИлиВерсияСсылка;
	КонецЕсли;
	
	Если РабочийКаталогВладельца = Неопределено Тогда
		РабочийКаталогВладельца = РабочийКаталогПапки(ДанныеФайла.Владелец);
	КонецЕсли;
	ДанныеФайла.Вставить("РабочийКаталогВладельца", РабочийКаталогВладельца);
	
	Если ДанныеФайла.РабочийКаталогВладельца <> "" Тогда
		
		ПолноеИмяФайлаВРабочемКаталоге = "";
		ИмяКаталога = ""; // Путь к локальному кэш здесь не используется.
		ВРабочемКаталогеНаЧтение = Истина; // не используется 
		ВРабочемКаталогеВладельца = Истина;
		
		Если ВерсияСсылка <> Неопределено Тогда
			ПолноеИмяФайлаВРабочемКаталоге = ПолучитьПолноеИмяФайлаИзРегистра(ВерсияСсылка, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		Иначе
			ПолноеИмяФайлаВРабочемКаталоге = ПолучитьПолноеИмяФайлаИзРегистра(ФайлСсылка.ТекущаяВерсия, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;	
		
		ДанныеФайла.Вставить("ПолноеИмяФайлаВРабочемКаталоге", ПолноеИмяФайлаВРабочемКаталоге);
	КонецЕсли;
	
	Возврат ДанныеФайла;
КонецФункции

// Делает ПолучитьДанныеФайла и вычисляет количество версий файла.
// Параметры:
//  ФайлСсылка  - СправочникСсылка.Файлы - файл.
//
// Возвращаемое значение:
//   Структура - структура с данными файла.
//
Функция ПолучитьДанныеФайлаИКоличествоВерсий(ФайлСсылка) Экспорт
	
	ДанныеФайла = ДанныеФайла(ФайлСсылка);
	КоличествоВерсий = ПолучитьКоличествоВерсий(ФайлСсылка);
	ДанныеФайла.Вставить("КоличествоВерсий", КоличествоВерсий);
	
	Возврат ДанныеФайла;
	
КонецФункции

// Формирует текст ошибки для помещения в журнал регистрации.
// Параметры:
//  ИнформацияОбОшибкеФункции  - ИнформацияОбОшибке
//  ФайлСсылка  - СправочникСсылка.Файлы - файл.
//
// Возвращаемое значение:
//   Строка - описание ошибки
//
Функция СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(ИнформацияОбОшибкеФункции, ФайлСсылка)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ссылка на файл: ""%1"".
		           |""%2"".'"),
		ПолучитьНавигационнуюСсылку(ФайлСсылка),
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибкеФункции));
	
КонецФункции

// Функция возвращает структуру, содержащую различные сведения о Файле и версии.
//
// Параметры:
//  ФайлВерсияСсылка        - СправочникСсылка.Файлы, СправочникСсылка.ВерсииФайлов - файл или версия файла.
//  ИдентификаторФормы      - УникальныйИдентификатор - уникальный идентификатор формы.
//  РабочийКаталогВладельца - Строка - в ней возвращается рабочий каталог владельца файла.
//  ПредыдущийАдресФайла    - Строка - в ней возвращается рабочий каталог владельца файла.
//
// Возвращаемое значение:
//   Структура - структура с данными файла. См. ПолучитьДанныеФайла.
//
Функция ДанныеФайлаДляОткрытия(ФайлИлиВерсияСсылка, ИдентификаторФормы = Неопределено,
	РабочийКаталогВладельца = Неопределено, ПредыдущийАдресФайла = Неопределено) Экспорт
	
	Если ПредыдущийАдресФайла <> Неопределено Тогда
		Если НЕ ПустаяСтрока(ПредыдущийАдресФайла) И ЭтоАдресВременногоХранилища(ПредыдущийАдресФайла) Тогда
			УдалитьИзВременногоХранилища(ПредыдущийАдресФайла);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ФайлИлиВерсияСсылка) = Тип("СправочникСсылка.Файлы") Тогда
		ФайлСсылка = ФайлИлиВерсияСсылка;
		ВерсияСсылка = Неопределено;
	Иначе
		ФайлСсылка = Неопределено;
		ВерсияСсылка = ФайлИлиВерсияСсылка;
	КонецЕсли;
	ДанныеФайла = ДанныеФайла(ФайлИлиВерсияСсылка);
	
	Если РабочийКаталогВладельца = Неопределено Тогда
		РабочийКаталогВладельца = РабочийКаталогПапки(ДанныеФайла.Владелец);
	КонецЕсли;
	ДанныеФайла.Вставить("РабочийКаталогВладельца", РабочийКаталогВладельца);
	
	Если ДанныеФайла.РабочийКаталогВладельца <> "" Тогда
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		ПолноеИмяФайлаВРабочемКаталоге = РабочийКаталогВладельца + ИмяФайла;
		ДанныеФайла.Вставить("ПолноеИмяФайлаВРабочемКаталоге", ПолноеИмяФайлаВРабочемКаталоге);
	КонецЕсли;
	
	ТипХраненияФайла = ДанныеФайла.Версия.ТипХраненияФайла;
	
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ДанныеФайла.Версия <> Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииФайлов.ПутьКФайлу КАК ПутьКФайлу,
		|	ВерсииФайлов.Том КАК Том
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.Ссылка = &Версия";
		
		Запрос.Параметры.Вставить("Версия", ДанныеФайла.Версия);
		
		ДанныеФайлаТом = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
		ДанныеФайлаПутьКФайлу = "";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеФайлаТом = Выборка.Том;
			ДанныеФайлаПутьКФайлу = Выборка.ПутьКФайлу;
		КонецЕсли;
		
		Если НЕ ДанныеФайлаТом.Пустая() Тогда
			ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ДанныеФайлаТом) + ДанныеФайлаПутьКФайлу; 
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				// Работаем только с текущей версией - для не-текущей ссылку получаем в ПолучитьНавигационнуюСсылкуДляОткрытия.
				ДанныеФайла.НавигационнаяСсылкаТекущейВерсии = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
			Исключение
				// Запись в журнал регистрации.
				СсылкаНаФайл = ?(ФайлСсылка <> Неопределено, ФайлСсылка, ВерсияСсылка);
				СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(
					ИнформацияОбОшибке(), СсылкаНаФайл);
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Файлы.Открытие файла'",
					     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.Файлы,
					ФайлСсылка,
					СообщениеОбОшибке);
				
				ТипВладельцаФайла = ТипЗнч(ДанныеФайла.Владелец);
				Если ТипВладельцаФайла = Тип("СправочникСсылка.ПапкиФайлов") Тогда
					ПредставлениеВладельца = ПолныйПутьПапки(ДанныеФайла.Владелец);
				Иначе
					ПредставлениеВладельца = ДанныеФайла.Владелец;
				КонецЕсли;
				ПредставлениеВладельцаФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Присоединен к %1 : %2'"),
					Строка(ТипВладельцаФайла),
					ПредставлениеВладельца);
				
				ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
					ДанныеФайла.ПолноеНаименованиеВерсии + "." + ДанныеФайла.Расширение,
					,
					ПредставлениеВладельцаФайла);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ПредыдущийАдресФайла = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
	
	Возврат ДанныеФайла;
	
КонецФункции

Функция ПолныйПутьПапки(Папка)
	
	ПолныйПуть = "";
	
	ПапкаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Папка.Ссылка, "Родитель");
	
	Если ЗначениеЗаполнено(ПапкаРодитель) Тогда
	
		ПолныйПуть = "";
		Пока ЗначениеЗаполнено(ПапкаРодитель) Цикл
			
			ПолныйПуть = Строка(ПапкаРодитель) + "\" + ПолныйПуть;
			ПапкаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПапкаРодитель, "Родитель");
			Если Не ЗначениеЗаполнено(ПапкаРодитель) Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ПолныйПуть = ПолныйПуть + Строка(Папка.Ссылка);
		
		Если Не ПустаяСтрока(ПолныйПуть) Тогда
			ПолныйПуть = """" + ПолныйПуть + """";
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ПолныйПуть;
	
КонецФункции

// Функция возвращает структуру, содержащую различные сведения о Файлах и версиях.
//
// Параметры:
//  МассивФайлов        - массив файлов или версий файлов.
//  ИдентификаторФормы  - УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   ДанныеФайлов - массив с данными файлов. См. ПолучитьДанныеФайла.
//
Функция ДанныеФайловДляОткрытия(МассивФайлов, ИдентификаторФормы = Неопределено,
	РабочийКаталогВладельца = Неопределено, ПредыдущийАдресФайла = Неопределено) Экспорт
	
	ДанныеФайлов = Новый Массив;
	Для Каждого Файл Из МассивФайлов Цикл
		ДанныеФайла = ДанныеФайлаДляОткрытия(Файл, ИдентификаторФормы);
		ДанныеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;
	
	Возврат ДанныеФайлов;
	
КонецФункции

// Освобождение Файла с получением данных.
// Параметры:
//  ФайлСсылка  - СправочникСсылка.Файлы - файл.
//  ДанныеФайла  - структура с данными файла.
//  УникальныйИдентификатор - уникальный идентификатор формы.
//
Процедура ПолучитьДанныеФайлаИОсвободитьФайл(ФайлСсылка, ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	ДанныеФайла = ДанныеФайла(ФайлСсылка);
	ОсвободитьФайл(ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

// Для записи изменений файла без его освобождения.
//
// Параметры:
//   ФайлСсылка                   - Структура - структура с данными файла.
//   СведенияОФайле               - Структура - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме "ФайлСВерсией".
//   ОтносительныйПутьКФайлу      - Строка    - относительный путь без пути рабочего каталога, например
//                                              "А1/Приказ.doc"; указывается, если НеМенятьЗаписьВРабочемКаталоге =
//                                              Ложь.
//   ПолныйПутьКФайлу             - Строка    - путь на клиенте в рабочем каталоге; указывается, если
//                                              НеМенятьЗаписьВРабочемКаталоге = Ложь.
//   ВРабочемКаталогеВладельца    - Булево    - файл находится в рабочем каталоге владельца.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Структура - со свойствами:
//     * Успешно     - Булево    - Истина, если создание версии выполнено (и файл бинарно изменен).
//     * ДанныеФайла - Структура - структура с данными файла.
//
Функция ПолучитьДанныеФайлаИСохранитьИзмененияФайла(ФайлСсылка, СведенияОФайле, 
	ОтносительныйПутьКФайлу, ПолныйПутьКФайлу, ВРабочемКаталогеВладельца,
	УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	ДанныеФайла = ДанныеФайла(ФайлСсылка);
	Если Не ДанныеФайла.РедактируетТекущийПользователь Тогда
		ВызватьИсключение НСтр("ru = 'Файл не занят текущим пользователем'");
	КонецЕсли;
	
	ВерсияСоздана = СохранитьИзмененияФайла(ФайлСсылка, СведенияОФайле, 
		Ложь, ОтносительныйПутьКФайлу, ПолныйПутьКФайлу, ВРабочемКаталогеВладельца,
		УникальныйИдентификаторФормы);
	Возврат Новый Структура("Успешно,ДанныеФайла", ВерсияСоздана, ДанныеФайла);	
	
КонецФункции

// Получает синтетический рабочий каталог папки на диске (он может прийти от родительской папки).
// Параметры:
//  СсылкаПапки  - СправочникСсылка.ПапкиФайлов - владелец файла.
//
// Возвращаемое значение:
//   Строка  - рабочий каталог.
//
Функция РабочийКаталогПапки(СсылкаПапки) Экспорт
	
	Если ТипЗнч(СсылкаПапки) <> Тип("СправочникСсылка.ПапкиФайлов") Тогда
		Возврат ""
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РабочийКаталог = "";
	
	// Подготовить структуру отбора по измерениям.
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Папка", СсылкаПапки);
	СтруктураОтбора.Вставить("Пользователь", Пользователи.ТекущийПользователь());
	
	// Получить структуру с данными ресурсов записи.
	СтруктураРесурсов = РегистрыСведений.РабочиеКаталогиФайлов.Получить(СтруктураОтбора);
	
	// Получить путь из регистра
	РабочийКаталог = СтруктураРесурсов.Путь;
	
	Если НЕ ПустаяСтрока(РабочийКаталог) Тогда
		// Добавляем слэш в конце, если его нет.
		РабочийКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог);
	КонецЕсли;
	
	Возврат РабочийКаталог;
	
КонецФункции

// Сохраняет в регистре сведений рабочий каталог папки.
// Параметры:
//  СсылкаПапки  - СправочникСсылка.ПапкиФайлов - владелец файла.
//  РабочийКаталогВладельца - Строка - рабочий каталог папки.
//
Процедура СохранитьРабочийКаталогПапки(СсылкаПапки, РабочийКаталогПапки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.РабочиеКаталогиФайлов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Папка.Установить(СсылкаПапки);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Папка = СсылкаПапки;
	НоваяЗапись.Пользователь = Пользователи.ТекущийПользователь();
	НоваяЗапись.Путь = РабочийКаталогПапки;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Сохраняет в регистре сведений рабочий каталог папки и
// заменяет пути в регистре сведений ФайлыВРабочемКаталоге.
//
// Параметры:
//  СсылкаПапки  - СправочникСсылка.ПапкиФайлов - владелец файла.
//  РабочийКаталогПапки - Строка - рабочий каталог папки.
//  ИмяКаталогаПрежнееЗначение - Строка - прежнее значение рабочего каталога.
//
Процедура СохранитьРабочийКаталогПапкиИЗаменитьПутиВРегистре(СсылкаПапки,
                                                        РабочийКаталогПапки,
                                                        ИмяКаталогаПрежнееЗначение) Экспорт
	
	СохранитьРабочийКаталогПапки(СсылкаПапки, РабочийКаталогПапки);
	
	// Ниже заменяем пути в регистре сведений ФайлыВРабочемКаталоге.
	УстановитьПривилегированныйРежим(Истина);
	
	СписокДляЗамены = Новый Массив;
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	// Для каждой нашей записи находим запись в регистре сведений - оттуда берем поле Версия и Редактирует.
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("Пользователь", ТекущийПользователь);
	ЗапросВРегистр.УстановитьПараметр("Путь", ИмяКаталогаПрежнееЗначение + "%");
	ЗапросВРегистр.Текст =
	"ВЫБРАТЬ
	|	ФайлыВРабочемКаталоге.Версия КАК Версия,
	|	ФайлыВРабочемКаталоге.Путь КАК Путь,
	|	ФайлыВРабочемКаталоге.Размер КАК Размер,
	|	ФайлыВРабочемКаталоге.ДатаПомещенияВРабочийКаталог КАК ДатаПомещенияВРабочийКаталог,
	|	ФайлыВРабочемКаталоге.НаЧтение КАК НаЧтение
	|ИЗ
	|	РегистрСведений.ФайлыВРабочемКаталоге КАК ФайлыВРабочемКаталоге
	|ГДЕ
	|	ФайлыВРабочемКаталоге.Пользователь = &Пользователь
	|	И ФайлыВРабочемКаталоге.ВРабочемКаталогеВладельца = ИСТИНА
	|	И ФайлыВРабочемКаталоге.Путь ПОДОБНО &Путь";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовыйПуть = Выборка.Путь;
		НовыйПуть = СтрЗаменить(НовыйПуть, ИмяКаталогаПрежнееЗначение, РабочийКаталогПапки);
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Версия",                       Выборка.Версия);
		СтруктураЗаписи.Вставить("Путь",                         НовыйПуть);
		СтруктураЗаписи.Вставить("Размер",                       Выборка.Размер);
		СтруктураЗаписи.Вставить("ДатаПомещенияВРабочийКаталог", Выборка.ДатаПомещенияВРабочийКаталог);
		СтруктураЗаписи.Вставить("НаЧтение",                     Выборка.НаЧтение);
		
		СписокДляЗамены.Добавить(СтруктураЗаписи);
		
	КонецЦикла;
	
	Для Каждого СтруктураЗаписи Из СписокДляЗамены Цикл
		
		ВРабочемКаталогеВладельца = Истина;
		ЗаписатьСтруктуруЗаписиВРегистр(
			СтруктураЗаписи.Версия,
			СтруктураЗаписи.Путь,
			СтруктураЗаписи.Размер,
			СтруктураЗаписи.ДатаПомещенияВРабочийКаталог,
			СтруктураЗаписи.НаЧтение,
			ВРабочемКаталогеВладельца);
		
	КонецЦикла;
	
КонецПроцедуры

// После смены пути запишем заново - с теми же значениями остальных полей.
// Параметры:
//  Версия - СправочникСсылка.ВерсииФайлов - версия.
//  Путь - Строка - относительный путь внутри рабочего каталога.
//  Размер  - размер файла в байтах.
//  ДатаПомещенияВРабочийКаталог - Дата - дата помещения файла в рабочий каталог.
//  НаЧтение - Булево - файл помещен на чтение.
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге).
//
Процедура ЗаписатьСтруктуруЗаписиВРегистр(Версия,
                                          Путь,
                                          Размер,
                                          ДатаПомещенияВРабочийКаталог,
                                          НаЧтение,
                                          ВРабочемКаталогеВладельца)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Версия.Установить(Версия);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Версия = Версия;
	НоваяЗапись.Путь = Путь;
	НоваяЗапись.Размер = Размер;
	НоваяЗапись.ДатаПомещенияВРабочийКаталог = ДатаПомещенияВРабочийКаталог;
	НоваяЗапись.Пользователь = Пользователи.ТекущийПользователь();

	НоваяЗапись.НаЧтение = НаЧтение;
	НоваяЗапись.ВРабочемКаталогеВладельца = ВРабочемКаталогеВладельца;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Очищает в регистре сведений рабочий каталог папки.
// Параметры:
//  СсылкаПапки  - СправочникСсылка.ПапкиФайлов - владелец файла.
//
Процедура ОчиститьРабочийКаталог(СсылкаПапки) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.РабочиеКаталогиФайлов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Папка.Установить(СсылкаПапки);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());
	
	// Не добавляем записи в набор - чтобы все стереть.
	НаборЗаписей.Записать();
	
	// Для дочерних папок очищаем рабочие каталоги.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПапкиФайлов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПапкиФайлов КАК ПапкиФайлов
	|ГДЕ
	|	ПапкиФайлов.Родитель = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаПапки);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОчиститьРабочийКаталог(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Находит запись в регистре сведений ФайлыВРабочемКаталоге по пути файла на диске (относительному).
//
// Параметры:
//  ИмяФайла - Строка - имя файла с относительным путем (без пути к рабочему каталогу).
//
// Возвращаемое значение:
//  Структура со свойствами:
//    Версия            - СправочникСсылка.ВерсииФайлов - найденная версия.
//    ДатаПомещения     - Дата помещения файла в рабочий каталог.
//    Владелец          - Ссылка - владелец файла.
//    НомерВерсии       - Число - номер версии.
//    ВРегистреНаЧтение - Булево - значение ресурса НаЧтение.
//    ВРегистреКодФайла - Число сюда помещается код файла.
//    ВРегистреПапка    - СправочникСсылка.ПапкиФайлов - папка файла.
//
Функция НайтиВРегистреПоПути(ИмяФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныеСвойства = Новый Структура;
	НайденныеСвойства.Вставить("ФайлЕстьВРегистре", Ложь);
	НайденныеСвойства.Вставить("Версия", Справочники.ВерсииФайлов.ПолучитьСсылку());
	НайденныеСвойства.Вставить("ДатаПомещения");
	НайденныеСвойства.Вставить("Владелец");
	НайденныеСвойства.Вставить("НомерВерсии");
	НайденныеСвойства.Вставить("ВРегистреНаЧтение");
	НайденныеСвойства.Вставить("ВРегистреКодФайла");
	НайденныеСвойства.Вставить("ВРегистреПапка");
	
	// Для каждого по пути находим запись в регистре сведений - оттуда берем поле.
	// Версия и Размер и ДатаПомещенияВРабочийКаталог.
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("ИмяФайла", ИмяФайла);
	ЗапросВРегистр.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	ЗапросВРегистр.Текст =
	"ВЫБРАТЬ
	|	ФайлыВРабочемКаталоге.Версия КАК Версия,
	|	ФайлыВРабочемКаталоге.ДатаПомещенияВРабочийКаталог КАК ДатаПомещения,
	|	ФайлыВРабочемКаталоге.НаЧтение КАК ВРегистреНаЧтение,
	|	ФайлыВРабочемКаталоге.Версия.Владелец КАК Владелец,
	|	ФайлыВРабочемКаталоге.Версия.НомерВерсии КАК НомерВерсии,
	|	ФайлыВРабочемКаталоге.Версия.Владелец.Код КАК ВРегистреКодФайла,
	|	ФайлыВРабочемКаталоге.Версия.Владелец.ВладелецФайла КАК ВРегистреПапка
	|ИЗ
	|	РегистрСведений.ФайлыВРабочемКаталоге КАК ФайлыВРабочемКаталоге
	|ГДЕ
	|	ФайлыВРабочемКаталоге.Путь = &ИмяФайла
	|	И ФайлыВРабочемКаталоге.Пользователь = &Пользователь";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		НайденныеСвойства.ФайлЕстьВРегистре = Истина;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(НайденныеСвойства, Выборка);
	КонецЕсли;
	
	Возврат НайденныеСвойства;
	
КонецФункции

// Находит в регистре сведений ФайлыВРабочемКаталоге информацию о ВерсииФайла (путь к файлу версии в рабочем каталоге,
// и статус - на чтение или на редактирование).
// Параметры:
//  Версия - СправочникСсылка.ВерсииФайлов - версия.
//  ИмяКаталога - путь рабочего каталога.
//  ВРабочемКаталогеНаЧтение - Булево - файл помещен на чтение.
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге).
//
Функция ПолучитьПолноеИмяФайлаИзРегистра(Версия,
                                         ИмяКаталога,
                                         ВРабочемКаталогеНаЧтение,
                                         ВРабочемКаталогеВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПолноеИмяФайла = "";
	
	// Подготовить структуру отбора по измерениям.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Версия", Версия.Ссылка);
	СтруктураОтбора.Вставить("Пользователь", Пользователи.ТекущийПользователь());
	   
	// Получить структуру с данными ресурсов записи.
	СтруктураРесурсов = РегистрыСведений.ФайлыВРабочемКаталоге.Получить(СтруктураОтбора);
	   
	// Получить путь из регистра
	ПолноеИмяФайла = СтруктураРесурсов.Путь;
	ВРабочемКаталогеНаЧтение = СтруктураРесурсов.НаЧтение;
	ВРабочемКаталогеВладельца = СтруктураРесурсов.ВРабочемКаталогеВладельца;
	Если ПолноеИмяФайла <> "" И ВРабочемКаталогеВладельца = Ложь Тогда
		ПолноеИмяФайла = ИмяКаталога + ПолноеИмяФайла;
	КонецЕсли;
	
	Возврат ПолноеИмяФайла;
	
КонецФункции

// Записать в регистр сведений ФайлыВРабочемКаталоге информацию о пути файла.
// Параметры:
//  ТекущаяВерсия - СправочникСсылка.ВерсииФайлов - версия.
//  ПолноеИмяФайла - имя с путем в рабочем каталоге.
//  НаЧтение - Булево - файл помещен на чтение.
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге).
//
Процедура ЗаписатьПолноеИмяФайлаВРегистр(ТекущаяВерсия,
                                         ПолноеИмяФайла,
                                         НаЧтение,
                                         ВРабочемКаталогеВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Версия.Установить(ТекущаяВерсия.Ссылка);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Версия = ТекущаяВерсия.Ссылка;
	НоваяЗапись.Путь = ПолноеИмяФайла;
	НоваяЗапись.Размер = ТекущаяВерсия.Размер;
	НоваяЗапись.ДатаПомещенияВРабочийКаталог = ТекущаяДатаСеанса();
	НоваяЗапись.Пользователь = Пользователи.ТекущийПользователь();

	НоваяЗапись.НаЧтение = НаЧтение;
	НоваяЗапись.ВРабочемКаталогеВладельца = ВРабочемКаталогеВладельца;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удалить из регистра сведений ФайлыВРабочемКаталоге запись о данной версии файла.
// Параметры:
//  Версия - СправочникСсылка.ВерсииФайлов - версия.
//
Процедура УдалитьИзРегистра(Версия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Версия.Установить(Версия);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удалить из регистра сведений ФайлыВРабочемКаталоге все записи,
// кроме записей о файлах занятых текущим пользователем.
//
Процедура ОчиститьВсеСвоиКромеЗанятых() Экспорт
	
	// Отбираем все в регистре сведений. Перебираем - находим те, что не заняты текущим пользователем -
	//  и все удаляем - считаем, что на диске они уже удалены.
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокУдалить = Новый Массив;
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	// Для каждой нашей записи находим запись в регистре сведений - оттуда берем поле Версия и Редактирует.
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("Пользователь", ТекущийПользователь);
	ЗапросВРегистр.Текст =
	"ВЫБРАТЬ
	|	ФайлыВРабочемКаталоге.Версия КАК Версия,
	|	ФайлыВРабочемКаталоге.Версия.Владелец.Редактирует КАК Редактирует
	|ИЗ
	|	РегистрСведений.ФайлыВРабочемКаталоге КАК ФайлыВРабочемКаталоге
	|ГДЕ
	|	ФайлыВРабочемКаталоге.Пользователь = &Пользователь
	|	И ФайлыВРабочемКаталоге.ВРабочемКаталогеВладельца = ЛОЖЬ";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
				
			Если Выборка.Редактирует <> ТекущийПользователь Тогда
				СписокУдалить.Добавить(Выборка.Версия);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого Версия Из СписокУдалить Цикл
		// Создать набор записей
		НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Версия.Установить(Версия);
		НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
		
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Удалить из регистра сведений ФайлыВРабочемКаталоге запись о старой версии и внести запись о новой.
// Параметры:
//  СтараяВерсия - СправочникСсылка.ВерсииФайлов - старая версия.
//  НоваяВерсия - СправочникСсылка.ВерсииФайлов - новая версия.
//  ПолноеИмяФайла - имя с путем в рабочем каталоге.
//  ИмяКаталога - путь рабочего каталога.
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге).
//
Процедура УдалитьВерсиюИЗанестиИнформациюФайлаВРегистр(СтараяВерсия,
                                                       НоваяВерсия,
                                                       ПолноеИмяФайла,
                                                       ИмяКаталога,
                                                       ВРабочемКаталогеВладельца)
	
	УдалитьИзРегистра(СтараяВерсия);
	НаЧтение = Истина;
	ЗанестиИнформациюФайлаВРегистр(НоваяВерсия, ПолноеИмяФайла, ИмяКаталога, НаЧтение, 0, ВРабочемКаталогеВладельца);
	
КонецПроцедуры

// Записать в регистр сведений ФайлыВРабочемКаталоге информацию о пути файла.
//  Версия - СправочникСсылка.ВерсииФайлов - версия.
//  ПолныйПуть - Строка - полный путь файла.
//  ИмяКаталога - путь рабочего каталога.
//  НаЧтение - Булево - файл помещен на чтение.
//  РазмерФайла  - размер файла в байтах.
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге).
//
Процедура ЗанестиИнформациюФайлаВРегистр(Версия,
                                         ПолныйПуть,
                                         ИмяКаталога,
                                         НаЧтение,
                                         РазмерФайла,
                                         ВРабочемКаталогеВладельца) Экспорт
	ПолноеИмяФайла = ПолныйПуть;
	
	Если ВРабочемКаталогеВладельца = Ложь Тогда
		Если СтрНайти(ПолныйПуть, ИмяКаталога) = 1 Тогда
			ПолноеИмяФайла = Сред(ПолныйПуть, СтрДлина(ИмяКаталога) + 1);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Версия.Установить(Версия.Ссылка);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Версия = Версия.Ссылка;
	НоваяЗапись.Путь = ПолноеИмяФайла;

	Если РазмерФайла <> 0 Тогда
		НоваяЗапись.Размер = РазмерФайла;
	Иначе
		НоваяЗапись.Размер = Версия.Размер;
	КонецЕсли;

	НоваяЗапись.ДатаПомещенияВРабочийКаталог = ТекущаяДатаСеанса();
	НоваяЗапись.Пользователь = Пользователи.ТекущийПользователь();
	НоваяЗапись.НаЧтение = НаЧтение;
	НоваяЗапись.ВРабочемКаталогеВладельца = ВРабочемКаталогеВладельца;

	НаборЗаписей.Записать();
	
КонецПроцедуры

// Формирует отчет для файлов с ошибками.
//
// Параметры:
//   МассивИменФайловСОшибками - массив строк путей к файлам.
//
// Возвращаемое значение:
//   ТабличныйДокумент с отчетом.
//
Функция ИмпортФайловСформироватьОтчет(МассивИменФайловСОшибками) Экспорт
	
	Документ = Новый ТабличныйДокумент;
	Макет = Справочники.Файлы.ПолучитьМакет("МакетОтчета");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.Описание = НСтр("ru = 'Не удалось загрузить следующие файлы:'");
	Документ.Вывести(ОбластьЗаголовок);
	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");

	Для Каждого Выборка Из МассивИменФайловСОшибками Цикл
		ОбластьСтрока.Параметры.Название = Выборка.ИмяФайла;
		ОбластьСтрока.Параметры.Ошибка = Выборка.Ошибка;
		Документ.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	Отчет = Новый ТабличныйДокумент;
	Отчет.Вывести(Документ);

	Возврат Отчет;
	
КонецФункции

// Сортирует массив структур по полю Дата - на сервере, т.к. на тонком клиенте нет ТаблицаЗначений.
//
// Параметры:
// МассивСтруктур - массив структур описаний файлов.
//
Процедура СортироватьМассивСтруктур(МассивСтруктур) Экспорт
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("Путь");
	ТаблицаФайлов.Колонки.Добавить("Версия");
	ТаблицаФайлов.Колонки.Добавить("Размер");
	
	ТаблицаФайлов.Колонки.Добавить("ДатаПомещенияВРабочийКаталог", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Строка Из МассивСтруктур Цикл
		НоваяСтрока = ТаблицаФайлов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Путь, Размер, Версия, ДатаПомещенияВРабочийКаталог");
	КонецЦикла;
	
	// Сортировка по дате - в начале будут самые давно помещенные в рабочий каталог.
	ТаблицаФайлов.Сортировать("ДатаПомещенияВРабочийКаталог Возр");  
	
	МассивСтруктурВозврат = Новый Массив;
	
	Для Каждого Строка Из ТаблицаФайлов Цикл
		Запись = Новый Структура;
		Запись.Вставить("Путь", Строка.Путь);
		Запись.Вставить("Размер", Строка.Размер);
		Запись.Вставить("Версия", Строка.Версия);
		Запись.Вставить("ДатаПомещенияВРабочийКаталог", Строка.ДатаПомещенияВРабочийКаталог);
		МассивСтруктурВозврат.Добавить(Запись);
	КонецЦикла;
	
	МассивСтруктур = МассивСтруктурВозврат;
	
КонецПроцедуры

// Возвращает настройку - Спрашивать режим редактирования при открытии файла.
// Возвращаемое значение:
//   Булево - Спрашивать режим редактирования при открытии файла.
//
Функция СпрашиватьРежимРедактированияПриОткрытииФайла()
	СпрашиватьРежимРедактированияПриОткрытииФайла = 
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла");
	Если СпрашиватьРежимРедактированияПриОткрытииФайла = Неопределено Тогда
		СпрашиватьРежимРедактированияПриОткрытииФайла = Истина;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", СпрашиватьРежимРедактированияПриОткрытииФайла);
	КонецЕсли;
	
	Возврат СпрашиватьРежимРедактированияПриОткрытииФайла;
КонецФункции

// Считаем ДействиеПоДвойномуЩелчкуМыши - если первый раз - поставим правильное значение.
//
// Возвращаемое значение:
//   Строка - Действие по двойному щелчку мыши.
//
Функция ДействиеПоДвойномуЩелчкуМыши()
	
	КакОткрывать = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши");
	
	Если КакОткрывать = Неопределено
	 ИЛИ КакОткрывать = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ПустаяСсылка() Тогда
		
		КакОткрывать = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши", КакОткрывать);
	КонецЕсли;
	
	Если КакОткрывать = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл Тогда
		Возврат "ОткрыватьФайл";
	Иначе
		Возврат "ОткрыватьКарточку";
	КонецЕсли;
	
КонецФункции

// Считаем из настроек СпособСравненияВерсийФайлов.
//
// Возвращаемое значение:
//   Строка - Способ сравнения версий файлов.
//
Функция СпособСравненияВерсийФайлов()
	
	СпособСравнения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиСравненияФайлов", "СпособСравненияВерсийФайлов");
	
	Если СпособСравнения = Перечисления.СпособыСравненияВерсийФайлов.MicrosoftOfficeWord Тогда
		Возврат "MicrosoftOfficeWord";
		
	ИначеЕсли СпособСравнения = Перечисления.СпособыСравненияВерсийФайлов.OpenOfficeOrgWriter Тогда
		Возврат "OpenOfficeOrgWriter";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает количество Файлов, занятых текущим пользователем
// в разрезе владельца.
// Параметры:
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла.
//
// Возвращаемое значение:
//   Число  - количество занятых файлов.
//
Функция КоличествоФайловЗанятыхТекущимПользователем(ВладелецФайла) Экспорт
	
	КоличествоЗанятыхФайлов = ПолучитьКоличествоЗанятыхФайлов(ВладелецФайла, Пользователи.АвторизованныйПользователь());
	Возврат КоличествоЗанятыхФайлов;
	
КонецФункции

// Получает значение настройки  ПоказыватьКолонкуРазмер.
// Возвращаемое значение:
//   Булево - Показывать колонку размер.
//
Функция ПолучитьПоказыватьКолонкуРазмер() Экспорт
	ПоказыватьКолонкуРазмер = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПоказыватьКолонкуРазмер");
	Если ПоказыватьКолонкуРазмер = Неопределено Тогда
		ПоказыватьКолонкуРазмер = Ложь;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПоказыватьКолонкуРазмер", ПоказыватьКолонкуРазмер);
	КонецЕсли;
	
	Возврат ПоказыватьКолонкуРазмер;
	
КонецФункции

// Функция меняет ВладелецФайла объектам типа Справочник.Файл, вернет Истина при успехе.
// Параметры:
//  МассивСсылокНаФайлы - Массив - массив файлов.
//  НовыйВладелецФайла  - ЛюбаяСсылка - новый владелец файла.
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция.
//
Функция УстановитьВладельцаФайла(МассивСсылокНаФайлы, НовыйВладелецФайла) Экспорт
	Если МассивСсылокНаФайлы.Количество() = 0 Или Не ЗначениеЗаполнено(НовыйВладелецФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Тот же родитель - ничего делать не надо.
	Если МассивСсылокНаФайлы.Количество() > 0 И (МассивСсылокНаФайлы[0].ВладелецФайла = НовыйВладелецФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
	
		Для Каждого ФайлПринятый Из МассивСсылокНаФайлы Цикл
			ФайлОбъект = ФайлПринятый.ПолучитьОбъект();
			ФайлОбъект.Заблокировать();
			ФайлОбъект.ВладелецФайла = НовыйВладелецФайла;
			ФайлОбъект.Записать();
		КонецЦикла;
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Вернет Истина если есть зацикливание (если одну из папок переносим в ее же дочернюю папку).
// Параметры:
//  МассивСсылокНаФайлы - Массив - массив файлов.
//  НовыйРодитель  - ЛюбаяСсылка - новый владелец файла.
//
// Возвращаемое значение:
//   Булево  - есть зацикливание.
//
Функция ЕстьЗацикливание(Знач МассивСсылокНаФайлы, НовыйРодитель)
	
	Если МассивСсылокНаФайлы.Найти(НовыйРодитель) <> Неопределено Тогда
		Возврат Истина; // нашли зацикливание
	КонецЕсли;
	
	Родитель = НовыйРодитель.Родитель;
	Если Родитель.Пустая() Тогда // дошли до корня
		Возврат Ложь;
	КонецЕсли;
	
	Если ЕстьЗацикливание(МассивСсылокНаФайлы, Родитель) Тогда
		Возврат Истина; // нашли зацикливание
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция меняет свойство Родитель объектам типа Справочник.ПапкиФайла, вернет Истина при успехе, 
// в переменной НайденоЗацикливание вернет Истина, если одну из папок переносим в ее же дочернюю папку.
//
// Параметры:
//  МассивСсылокНаФайлы - Массив - массив файлов.
//  НовыйРодитель  - ЛюбаяСсылка - новый владелец файла.
//  НайденоЗацикливание - Булево - возвращает Истина, если найдено зацикливание.
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция.
//
Функция СменитьРодителяПапок(МассивСсылокНаФайлы, НовыйРодитель, НайденоЗацикливание) Экспорт
	НайденоЗацикливание = Ложь;
	
	Если МассивСсылокНаФайлы.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Тот же родитель - ничего делать не надо.
	Если МассивСсылокНаФайлы.Количество() = 1 И (МассивСсылокНаФайлы[0].Родитель = НовыйРодитель) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЕстьЗацикливание(МассивСсылокНаФайлы, НовыйРодитель) Тогда
		НайденоЗацикливание = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
	
		Для Каждого ФайлПринятый Из МассивСсылокНаФайлы Цикл
			ФайлОбъект = ФайлПринятый.ПолучитьОбъект();
			ФайлОбъект.Заблокировать();
			ФайлОбъект.Родитель = НовыйРодитель;
			ФайлОбъект.Записать();
		КонецЦикла;
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Вернет Истина, если в указанном элементе справочника ПапкиФайлов есть дочерний элемент с таким именем.
// Параметры:
//  ИмяФайла  - имя папки
//  Родитель - СправочникСсылка.ПапкиФайлов - Родитель папки.
//  ПерваяПапкаСТакимЖеИменем - СправочникСсылка.ПапкиФайлов - первая же найденная папка с указанным именем.
//
// Возвращаемое значение:
//   Булево  - есть дочерний элемент с таким именем.
//
Функция ЕстьПапкаСТакимИменем(ИмяФайла, Родитель, ПерваяПапкаСТакимЖеИменем) Экспорт
	
	ПерваяПапкаСТакимЖеИменем = Справочники.ПапкиФайлов.ПустаяСсылка();
	
	ЗапросВПапки = Новый Запрос;
	ЗапросВПапки.УстановитьПараметр("Наименование", ИмяФайла);
	ЗапросВПапки.УстановитьПараметр("Родитель", Родитель);
	ЗапросВПапки.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПапкиФайлов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПапкиФайлов КАК ПапкиФайлов
	|ГДЕ
	|	ПапкиФайлов.Наименование = &Наименование
	|	И ПапкиФайлов.Родитель = &Родитель";
	
	РезультатЗапроса = ЗапросВПапки.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выгрузить();
		ПерваяПапкаСТакимЖеИменем = ВыборкаЗапроса[0].Ссылка;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Вернет Истина, если в указанном элементе справочника Файлы есть файл с таким именем.
// Параметры:
//  ИмяФайла  - имя файла
//  Родитель - ЛюбаяСсылка - владелец файла.
//  ПерваяПапкаСТакимЖеИменем - СправочникСсылка.ПапкиФайлов - первая же найденная папка с указанным именем.
//
// Возвращаемое значение:
//   Булево  - есть дочерний элемент с таким именем.
//
Функция ЕстьФайлСТакимИменем(ИмяФайла, Родитель) Экспорт
	
	ЗапросВПапки = Новый Запрос;
	ЗапросВПапки.УстановитьПараметр("Наименование", ИмяФайла);
	ЗапросВПапки.УстановитьПараметр("Родитель", Родитель);
	ЗапросВПапки.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Файлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ПолноеНаименование = &Наименование
	|	И Файлы.ВладелецФайла = &Родитель";
	
	РезультатЗапроса = ЗапросВПапки.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Для справочника ВерсииФайлов переименует файл на диске, если ТипХраненияФайла = ВТомахНаДиске.
// Параметры:
//  Версия  - СправочникСсылка.ВерсииФайлов - версия файла.
//  СтароеНаименование - Строка - старое наименование.
//  НовоеНаименование - Строка - новое наименование.
//
Процедура ПереименоватьФайлВерсииНаДиске(Версия,
                                         СтароеНаименование,
                                         НовоеНаименование,
                                         УникальныйИдентификатор = Неопределено) Экспорт
	
	Если НЕ Версия.Том.Пустая() Тогда
		ВерсияОбъект = Версия.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(Версия, , УникальныйИдентификатор);
		
		СтарыйПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(Версия.Том) + Версия.ПутьКФайлу; 
		
		ФайлНаДиске = Новый Файл(СтарыйПолныйПуть);
		ПолныйПуть = ФайлНаДиске.Путь;
		ИмяБезРасширения = ФайлНаДиске.ИмяБезРасширения;
		Расширение = ФайлНаДиске.Расширение;
		НовоеИмяБезРасширения = СтрЗаменить(ИмяБезРасширения, СтароеНаименование, НовоеНаименование);
		
		НовыйПолныйПуть = ПолныйПуть + НовоеИмяБезРасширения + Расширение;
		ПолныйПутьКТому = ФайловыеФункцииСлужебный.ПолныйПутьТома(Версия.Том);
		НовыйЧастичныйПуть = Прав(НовыйПолныйПуть, СтрДлина(НовыйПолныйПуть) - СтрДлина(ПолныйПутьКТому));
	
		ПереместитьФайл(СтарыйПолныйПуть, НовыйПолныйПуть);
		ВерсияОбъект.ПутьКФайлу = НовыйЧастичныйПуть;
		ВерсияОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(Версия, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество занятых файлов.
// Параметры:
// ВладелецФайла - ЛюбаяСсылка - владелец файла.
// Редактирует - СправочникСсылка.Пользователи - ссылка на пользователя, занявшего файл.
// 
// Возвращаемое значение:
//   Число  - число занятых файлов.
//
Функция ПолучитьКоличествоЗанятыхФайлов(ВладелецФайла = Неопределено, Редактирует = Неопределено) Экспорт
	
	Количество = 0;
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.Файлы) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.Представление КАК Представление
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.Редактирует <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
	
	Если Редактирует <> Неопределено Тогда 
		Запрос.Текст = Запрос.Текст + " И Файлы.Редактирует = &Редактирует ";
		Запрос.УстановитьПараметр("Редактирует", Редактирует);
	КонецЕсли;
	
	Если ВладелецФайла <> Неопределено Тогда 
		Запрос.Текст = Запрос.Текст + " И Файлы.ВладелецФайла = &ВладелецФайла ";
		Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Количество = Количество + 1;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

// Получает данные для переноса файла из одного списка приложенных файлов в другой.
//
// Параметры:
// ФайлМассив - массив ссылок на файлы или СправочникСсылка.Файлы.
// ВладелецФайла - ЛюбаяСсылка - владелец файла.
//
// Возвращаемое значение:
//   ТаблицаЗначений - описания файлов.
//
Функция ПолучитьДанныеДляПереносаВПриложенныеФайлы(ФайлМассив, ВладелецФайла) Экспорт

	Если ТипЗнч(ФайлМассив) = Тип("Массив") Тогда 
		МассивФайлов = ФайлМассив;
	Иначе
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ФайлМассив);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ПолноеНаименование КАК ПолноеНаименование
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	ТаблРезультат = Запрос.Выполнить().Выгрузить();
	
	Результат = Новый Соответствие;
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		Если ТаблРезультат.Найти(ФайлСсылка, "Ссылка") <> Неопределено Тогда 
			Результат.Вставить(ФайлСсылка, "Пропустить");
		ИначеЕсли ТаблРезультат.Найти(ФайлСсылка.ПолноеНаименование, "ПолноеНаименование") <> Неопределено Тогда 
			Результат.Вставить(ФайлСсылка, "Обновить");
		Иначе
			Результат.Вставить(ФайлСсылка, "Скопировать");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Копирует файлы при переносе из одного списка приложенных файлов в другой.
//
// Параметры:
//   ФайлМассив - Массив - массив ссылок на файлы или СправочникСсылка.Файлы.
//   ВладелецФайла - ЛюбаяСсылка - владелец файла.
//
// Возвращаемое значение:
//   СправочникСсылка.Файлы - скопированный файл.
//
Функция СкопироватьФайлВПриложенных(ФайлМассив, ВладелецФайла) Экспорт
	
	Если ТипЗнч(ФайлМассив) = Тип("Массив") Тогда 
		МассивФайлов = ФайлМассив;
	Иначе
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ФайлМассив);
	КонецЕсли;
	
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		Источник = ФайлСсылка;
		ИсточникОбъект = Источник.ПолучитьОбъект();
		
		ПриемникОбъект = ИсточникОбъект.Скопировать();
		ПриемникОбъект.ВладелецФайла = ВладелецФайла;
		ПриемникОбъект.Записать();
		
		Приемник = ПриемникОбъект.Ссылка;
		
		Если Не Источник.ТекущаяВерсия.Пустая() Тогда
			
			ХранилищеФайла = Неопределено;
			Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда 
				ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(Источник.ТекущаяВерсия);
			КонецЕсли;
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.ИмяБезРасширения = Приемник.Наименование;
			СведенияОФайле.Размер = Источник.ТекущаяВерсия.Размер;
			СведенияОФайле.РасширениеБезТочки = Источник.ТекущаяВерсия.Расширение;
			СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
			СведенияОФайле.АдресВременногоХранилищаТекста = Источник.ТекущаяВерсия.ТекстХранилище;
			СведенияОФайле.СсылкаНаВерсиюИсточник = Источник.ТекущаяВерсия;
			Версия = СоздатьВерсию(Приемник, СведенияОФайле);
			ОбновитьВерсиюВФайле(Приемник, Версия, Источник.ТекущаяВерсия.ТекстХранилище);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Приемник;
	
КонецФункции

// Обновляет версии одноименных файлов при переносе из одного списка приложенных файлов в другой.
//
// Параметры:
//   ФайлМассив - массив ссылок на файлы или СправочникСсылка.Файлы.
//   ВладелецФайла - ЛюбаяСсылка - владелец файла.
//
// Возвращаемое значение:
//   СправочникСсылка.Файлы - скопированный файл.
//
Функция ОбновитьФайлВПриложенных(ФайлМассив, ВладелецФайла) Экспорт
	
	Если ТипЗнч(ФайлМассив) = Тип("Массив") Тогда 
		МассивФайлов = ФайлМассив;
	Иначе
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ФайлМассив);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ПолноеНаименование КАК ПолноеНаименование
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	ТаблРезультат = Запрос.Выполнить().Выгрузить();
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		НайденнаяСтрока = ТаблРезультат.Найти(ФайлСсылка.ПолноеНаименование, "ПолноеНаименование");
		
		Источник = ФайлСсылка;
		Приемник = НайденнаяСтрока.Ссылка;
		
		Если Не Источник.ТекущаяВерсия.Пустая() Тогда
			
			ХранилищеФайла = Неопределено;
			Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда 
				ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(Источник.ТекущаяВерсия);
			КонецЕсли;
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.ИмяБезРасширения = Приемник.Наименование;
			СведенияОФайле.Размер = Источник.ТекущаяВерсия.Размер;
			СведенияОФайле.РасширениеБезТочки = Источник.ТекущаяВерсия.Расширение;
			СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
			СведенияОФайле.АдресВременногоХранилищаТекста = Источник.ТекущаяВерсия.ТекстХранилище;
			СведенияОФайле.СсылкаНаВерсиюИсточник = Источник.ТекущаяВерсия;
			Версия = СоздатьВерсию(Приемник, СведенияОФайле);
			ОбновитьВерсиюВФайле(Приемник, Версия, Источник.ТекущаяВерсия.ТекстХранилище);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Приемник;
	
КонецФункции

// Есть ли дублирующийся элемент в условном оформлении списка.
// Параметры:
// Элементы - массив элементов условного оформления списка.
// ЭлементПоиска - элемент условного оформления списка.
//
// Возвращаемое значение:
//   Булево - есть дублирующийся элемент.
//
Функция ЕстьДублирующийсяЭлемент(Элементы, ЭлементПоиска)
	
	Для Каждого Элемент Из Элементы Цикл
		Если Элемент <> ЭлементПоиска Тогда
			
			Если Элемент.Оформление.Элементы.Количество() <> ЭлементПоиска.Оформление.Элементы.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			НайденОтличающийсяЭлемент = Ложь;
			
			// Обходим все элементы оформления - если есть хоть один отличающийся - делаем Продолжить;
			ЧислоЭлементов = Элемент.Оформление.Элементы.Количество();
			Для Индекс = 0 По ЧислоЭлементов - 1 Цикл
				Элемент1 = Элемент.Оформление.Элементы[Индекс];
				Элемент2 = ЭлементПоиска.Оформление.Элементы[Индекс];
				
				Если Элемент1.Использование И Элемент2.Использование Тогда
					Если Элемент1.Параметр <> Элемент2.Параметр ИЛИ Элемент1.Значение <> Элемент2.Значение Тогда
						НайденОтличающийсяЭлемент = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если НайденОтличающийсяЭлемент Тогда
				Продолжить;
			КонецЕсли;
			
			Если Элемент.Отбор.Элементы.Количество() <> ЭлементПоиска.Отбор.Элементы.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			// Обходим все элементы отбора - если есть хоть один отличающийся - делаем Продолжить;
			ЧислоЭлементов = Элемент.Отбор.Элементы.Количество();
			Для Индекс = 0 По ЧислоЭлементов - 1 Цикл
				Элемент1 = Элемент.Отбор.Элементы[Индекс];
				Элемент2 = ЭлементПоиска.Отбор.Элементы[Индекс];
				
				Если Элемент1.Использование И Элемент2.Использование Тогда
					Если Элемент1.ВидСравнения <> Элемент2.ВидСравнения
						ИЛИ Элемент1.ЛевоеЗначение <> Элемент2.ЛевоеЗначение
						ИЛИ Элемент1.ПравоеЗначение <> Элемент2.ПравоеЗначение Тогда
						
						НайденОтличающийсяЭлемент = Истина;
						Прервать;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если НайденОтличающийсяЭлемент Тогда
				Продолжить;
			КонецЕсли;
			
			// Обошли все элементы оформления и отбора - они все одинаковы - это дубль.
			Возврат Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Заполняет условное оформление списка файлов.
//
// Параметры:
// Список - динамический список.
//
Процедура ЗаполнитьУсловноеОформлениеСпискаФайлов(Список) Экспорт
	
	УсловноеОформлениеКД = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	УсловноеОформлениеКД.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	
	Элемент = УсловноеОформлениеКД.Элементы.Добавить();
	Элемент.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Редактирует");
	
	Если ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, Элемент) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(Элемент);
	КонецЕсли;
	
	Элемент = УсловноеОформлениеКД.Элементы.Добавить();
	Элемент.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ФайлЗанятыйТекущимПользователем);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Редактирует");
	Отбор.ПравоеЗначение = Пользователи.ТекущийПользователь();
	
	Если ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, Элемент) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условное оформление списка папок.
//
// Параметры:
// Список - динамический список.
//
Процедура ЗаполнитьУсловноеОформлениеСпискаПапок(Папки) Экспорт
	
	УсловноеОформлениеКД = Папки.КомпоновщикНастроек.Настройки.УсловноеОформление;
	УсловноеОформлениеКД.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	
	Элемент = УсловноеОформлениеКД.Элементы.Добавить();
	Элемент.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПапкаСинхронизируется");
	Отбор.ПравоеЗначение = Истина;
	
	Если ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, Элемент) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Получает данные файла для открытия и читает из общих настроек ПапкаДляСохранитьКак.
//
// Параметры:
//  ФайлИлиВерсияСсылка     - СправочникСсылка.Файлы, СправочникСсылка.ВерсииФайлов - файл или версия файла.
//  ИдентификаторФормы      - УникальныйИдентификатор - уникальный идентификатор формы.
//  РабочийКаталогВладельца - Строка - рабочий каталог владельца файла.
//
// Возвращаемое значение:
//   Структура - структура с данными файла.
//
Функция ДанныеФайлаДляСохранения(ФайлИлиВерсияСсылка, ИдентификаторФормы = Неопределено, РабочийКаталогВладельца = Неопределено) Экспорт

	ДанныеФайла = ДанныеФайлаДляОткрытия(ФайлИлиВерсияСсылка, ИдентификаторФормы, РабочийКаталогВладельца);
	
	ПапкаДляСохранитьКак = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохранитьКак");
	ДанныеФайла.Вставить("ПапкаДляСохранитьКак", ПапкаДляСохранитьКак);

	Возврат ДанныеФайла;
КонецФункции

// Получает количество версий файла.
// Параметры:
//  ФайлСсылка - СправочникСсылка.Файлы - файл.
//
// Возвращаемое значение:
//   Число - число версий
Функция ПолучитьКоличествоВерсий(ФайлСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	ВерсииФайлов.Владелец = &ФайлСсылка";
	
	Запрос.УстановитьПараметр("ФайлСсылка", ФайлСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Число(Выборка.Количество);
	
КонецФункции

// Получает ДанныеФайла и НавигационнуюСсылкуВерсии всех подчиненных файлов.
// Параметры:
//  ФайлСсылка - СправочникСсылка.Файлы - файл.
//  ИдентификаторФормы - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Массив - массив структур с данными файлов.
Функция ДанныеФайлаИНавигационнаяСсылкаВсехВерсийФайла(ФайлСсылка, ИдентификаторФормы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВерсииФайлов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.Владелец = &ФайлСсылка";
	
	Запрос.УстановитьПараметр("ФайлСсылка", ФайлСсылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивВозврата = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		ВерсияСсылка = Выборка.Ссылка;
		ДанныеФайла = ДанныеФайла(ВерсияСсылка);
		НавигационнаяСсылкаВерсии = ПолучитьНавигационнуюСсылкуВоВременномХранилище(ВерсияСсылка, ИдентификаторФормы);
		
		СтруктураВозврата = Новый Структура("ДанныеФайла, НавигационнаяСсылкаВерсии, ВерсияСсылка", 
			ДанныеФайла, НавигационнаяСсылкаВерсии, ВерсияСсылка);
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;
	
	Возврат МассивВозврата;
КонецФункции

// Помещает шифрованные файлы в базу и ставит признак Зашифрован файлу и всем версиям.
// Параметры:
//  ФайлСсылка - СправочникСсылка.Файлы - файл.
//  Зашифровать - Булево - зашифровать файл, если Истина - иначе расшифровать.
//  МассивДанныхДляЗанесенияВБазу - массив структур.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИмяРабочегоКаталога - Строка - рабочий каталог.
//  МассивФайловВРабочемКаталогеДляУдаления - Массив - файлы, которые надо удалить из регистра.
//  МассивОтпечатков  - Массив - массив отпечатков сертификатов, использованных для шифрования.
Процедура ЗанестиИнформациюОШифровании(ФайлСсылка, Зашифровать, МассивДанныхДляЗанесенияВБазу, УникальныйИдентификатор, 
	ИмяРабочегоКаталога, МассивФайловВРабочемКаталогеДляУдаления, МассивОтпечатков) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		АдресВременногоХранилищаТекстаТекущейВерсии = "";
		
		Для Каждого ДанныеДляЗаписиНаСервере Из МассивДанныхДляЗанесенияВБазу Цикл
			
			АдресВременногоХранилища = ДанныеДляЗаписиНаСервере.АдресВременногоХранилища;
			ВерсияСсылка = ДанныеДляЗаписиНаСервере.ВерсияСсылка;
			АдресВременногоХранилищаТекста = ДанныеДляЗаписиНаСервере.АдресВременногоХранилищаТекста;
			
			Если ВерсияСсылка = ФайлСсылка.ТекущаяВерсия Тогда
				АдресВременногоХранилищаТекстаТекущейВерсии = АдресВременногоХранилищаТекста;
			КонецЕсли;
			
			ПолноеИмяФайлаВРабочемКаталоге = "";
			ВРабочемКаталогеНаЧтение = Истина; // не используется 
			ВРабочемКаталогеВладельца = Истина;
			ПолноеИмяФайлаВРабочемКаталоге = ПолучитьПолноеИмяФайлаИзРегистра(ВерсияСсылка, ИмяРабочегоКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
			Если НЕ ПустаяСтрока(ПолноеИмяФайлаВРабочемКаталоге) Тогда
				МассивФайловВРабочемКаталогеДляУдаления.Добавить(ПолноеИмяФайлаВРабочемКаталоге);
			КонецЕсли;
			
			УдалитьИзРегистра(ВерсияСсылка);
			
			СтатусИзвлеченияТекста = Неопределено;
			Если Зашифровать = Ложь Тогда
				СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
			КонецЕсли;
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.ИмяБезРасширения = ВерсияСсылка.ПолноеНаименование;
			СведенияОФайле.Комментарий = ВерсияСсылка.Комментарий;
			СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилища;
			СведенияОФайле.РасширениеБезТочки = ВерсияСсылка.Расширение;
			СведенияОФайле.ВремяИзменения = ВерсияСсылка.ДатаСоздания;
			СведенияОФайле.ВремяИзмененияУниверсальное = ВерсияСсылка.ДатаМодификацииУниверсальная;
			СведенияОФайле.Размер = ВерсияСсылка.Размер;
			СведенияОФайле.ВремяИзмененияУниверсальное = ВерсияСсылка.ДатаМодификацииУниверсальная;
			СведенияОФайле.НовыйСтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
			СведенияОФайле.Зашифрован = Зашифровать;
			СведенияОФайле.ХранитьВерсии = Ложь;
			ОбновитьВерсиюФайла(ФайлСсылка, СведенияОФайле, ВерсияСсылка, УникальныйИдентификатор);
			
			// Для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения.
			Если НЕ ПустаяСтрока(ДанныеДляЗаписиНаСервере.АдресФайла) И ЭтоАдресВременногоХранилища(ДанныеДляЗаписиНаСервере.АдресФайла) Тогда
				УдалитьИзВременногоХранилища(ДанныеДляЗаписиНаСервере.АдресФайла);
			КонецЕсли;
				
		КонецЦикла;
		
		ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ФайлСсылка, , УникальныйИдентификатор);
		
		ФайлОбъект.Зашифрован = Зашифровать;
		ФайлОбъект.ТекстХранилище = Новый ХранилищеЗначения(""); // очистим извлеченный текст
		// Чтобы прошла запись ранее подписанного объекта.
		ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		
		Если Зашифровать Тогда
			Для Каждого ОтпечатокСтруктура Из МассивОтпечатков Цикл
				НоваяСтрока = ФайлОбъект.СертификатыШифрования.Добавить();
				НоваяСтрока.Отпечаток = ОтпечатокСтруктура.Отпечаток;
				НоваяСтрока.Представление = ОтпечатокСтруктура.Представление;
				НоваяСтрока.Сертификат = Новый ХранилищеЗначения(ОтпечатокСтруктура.Сертификат);
			КонецЦикла;
		Иначе
			ФайлОбъект.СертификатыШифрования.Очистить();
		КонецЕсли;
		
		Если АдресВременногоХранилищаТекстаТекущейВерсии <> "" Тогда
			Текст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекстаТекущейВерсии);
			ФайлОбъект.ТекстХранилище = Новый ХранилищеЗначения(Текст);
		КонецЕсли;
		
		ФайлОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ФайлСсылка, УникальныйИдентификатор);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Делает ПоместитьВоВременноеХранилище (если файл хранится на диске) и возвращает нужную ссылку.
// Параметры:
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла.
//  ИдентификаторФормы - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Строка - навигационная ссылка.
Функция ПолучитьНавигационнуюСсылкуВоВременномХранилище(ВерсияСсылка, ИдентификаторФормы = Неопределено) Экспорт
	Адрес = "";
	
	ТипХраненияФайла = ВерсияСсылка.ТипХраненияФайла;
	
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Если НЕ ВерсияСсылка.Том.Пустая() Тогда
			ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу; 
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
			Исключение
				// Запись в журнал регистрации.
				СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(
					ИнформацияОбОшибке(), ВерсияСсылка.Владелец);
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Файлы.Открытие файла'",
					     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.Файлы,
					ВерсияСсылка.Владелец,
					СообщениеОбОшибке);
				
				ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
					ВерсияСсылка.ПолноеНаименование + "." + ВерсияСсылка.Расширение);
			КонецПопытки;
		КонецЕсли;
	Иначе
		ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияСсылка);
		ДвоичныеДанные = ХранилищеФайла.Получить();
		
		Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

// Получает массив сертификатов шифрования.
// Параметры:
//  Ссылка  - СправочникСсылка.Файлы - файл.
//
// Возвращаемое значение:
//   Массив - массив структур
Функция ПолучитьМассивСертификатовШифрования(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СертификатыШифрования.Представление КАК Представление,
	|	СертификатыШифрования.Отпечаток КАК Отпечаток,
	|	СертификатыШифрования.Сертификат КАК Сертификат
	|ИЗ
	|	Справочник.Файлы.СертификатыШифрования КАК СертификатыШифрования
	|ГДЕ
	|	СертификатыШифрования.Ссылка = &ОбъектСсылка";
	
	Запрос.Параметры.Вставить("ОбъектСсылка", Ссылка);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	МассивСертификатовШифрования = Новый Массив;
	Пока ВыборкаЗапроса.Следующий() Цикл
		ОтпечатокСтруктура = Новый Структура("Отпечаток, Представление, Сертификат",
			ВыборкаЗапроса.Отпечаток, ВыборкаЗапроса.Представление, ВыборкаЗапроса.Сертификат.Получить());
		МассивСертификатовШифрования.Добавить(ОтпечатокСтруктура);
	КонецЦикла;
	
	Возврат МассивСертификатовШифрования;
	
КонецФункции

// Добавляет подпись к версии файла и отмечает файл, как подписанный.
Процедура ДобавитьПодписьКФайлу(ФайлСсылка, СвойстваПодписи, ИдентификаторФормы) Экспорт
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлСсылка, "Редактирует, Зашифрован");
	
	Редактирует = СтруктураРеквизитов.Редактирует;
	Если ЗначениеЗаполнено(Редактирует) Тогда
		ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла(ФайлСсылка);
	КонецЕсли;
	
	Зашифрован = СтруктураРеквизитов.Зашифрован;
	Если Зашифрован Тогда
		СтрокаИсключения = ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла(ФайлСсылка);
		ВызватьИсключение СтрокаИсключения;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
	
	ВерсияСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ТекущаяВерсия");
	
	НачатьТранзакцию();
	Попытка
		МодульЭлектроннаяПодпись.ДобавитьПодпись(ВерсияСсылка, СвойстваПодписи, ИдентификаторФормы);
		
		ФайлСсылкаПодписан = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ПодписанЭП");
		Если ФайлСсылкаПодписан = Ложь Тогда
			ФайлОбъект = ФайлСсылка.ПолучитьОбъект(); 
			ЗаблокироватьДанныеДляРедактирования(ФайлСсылка, , ИдентификаторФормы);
			ФайлОбъект.ПодписанЭП = Истина;
			
			ФайлОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ФайлСсылка, ИдентификаторФормы);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Удаляет записи из табличной части ЭП.
//
// Параметры:
//  ВерсияСсылка - СправочникСсылка.ВерсииФайлов - ссылка на версию файла.
//  ИндексыСтрок  - Массив - индекс строки табличной части.
//  РеквизитПодписанИзменен - Булево - возвращаемое значение - если удалена последняя подпись, 
//     РеквизитПодписанИзменен примет значение Истина.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы.
Процедура УдалитьПодписиВерсииФайла(ВерсияСсылка, ИндексыСтрок, РеквизитПодписанИзменен,
	УникальныйИдентификатор = Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
	
	НачатьТранзакцию();
	Попытка
		
		ЗаписанныйОбъект = Неопределено;
		МодульЭлектроннаяПодпись.УдалитьПодпись(ВерсияСсылка,
			ИндексыСтрок, УникальныйИдентификатор, , ЗаписанныйОбъект);
		
		ФайлСсылка = ЗаписанныйОбъект.Владелец;
		ФайлСсылкаПодписан = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ПодписанЭП");
		
		Если ФайлСсылкаПодписан = Истина И ЗаписанныйОбъект.ЭлектронныеПодписи.Количество() = 0 Тогда
			РеквизитПодписанИзменен = Истина;
			ФайлОбъект = ФайлСсылка.ПолучитьОбъект(); 
			ЗаблокироватьДанныеДляРедактирования(ФайлСсылка, , УникальныйИдентификатор);
			ФайлОбъект.ПодписанЭП = Ложь;
			ФайлОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ФайлСсылка, УникальныйИдентификатор);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры


// Добавляет файл в тома при выполнении команды "разместить файлы начального образа".
// Параметры:
//  СоответствиеПутейФайлов - Соответствие - соответствие УникальногоИдентификатора файла и пути на диске к файлу.
//  ТипХраненияФайла - Перечисления.ТипыХраненияФайлов - тип хранения файлов.
Процедура ДобавитьФайлыВТомаПриРазмещении(СоответствиеПутейФайлов, ТипХраненияФайла) Экспорт
	
	Выборка = Справочники.ВерсииФайлов.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.ПолучитьОбъект();
		
		Если Объект.ТипХраненияФайла <> Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			Продолжить;
		КонецЕсли;
		
		УникальныйИдентификатор = Строка(Объект.Ссылка.УникальныйИдентификатор());
		
		ПолныйПутьФайлаНаДиске = СоответствиеПутейФайлов.Получить(УникальныйИдентификатор);
		ПолныйПутьНовый = "";
		
		Если ПолныйПутьФайлаНаДиске = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ХранилищеФайла = Неопределено;
		
		// В базе-приемнике файлы должны храниться в информационной базе - значит там их и разместим (даже если в исходной
		// базе они были в томах).
		Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			
			Объект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
			Объект.ПутьКФайлу = "";
			Объект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПутьФайлаНаДиске);
			ХранилищеФайла = Новый ХранилищеЗначения(ДвоичныеДанные);
			
		Иначе // В базе-приемнике файлы должны храниться в томах на диске - переместим разархивированный файл на том.
			
			ФайлИсходный = Новый Файл(ПолныйПутьФайлаНаДиске);
			ПолныйПутьНовый = ФайлИсходный.Путь + Объект.Наименование + "." + Объект.Расширение;
			ПереместитьФайл(ПолныйПутьФайлаНаДиске, ПолныйПутьНовый);
			
			// Добавить в один из томов (где есть свободное место).
			СведенияОФайле = ФайловыеФункцииСлужебный.ДобавитьФайлВТом(ПолныйПутьНовый, Объект.ДатаМодификацииУниверсальная,
				Объект.Наименование, Объект.Расширение, Объект.НомерВерсии, Объект.Зашифрован); 
			Объект.Том = СведенияОФайле.Том;
			Объект.ПутьКФайлу = СведенияОФайле.ПутьКФайлу;
			
		КонецЕсли;
		
		Объект.ДополнительныеСвойства.Вставить("РазмещениеФайловВТомах", Истина); // Чтобы прошла запись подписанных файлов.
		Объект.Записать();
		
		Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			ЗаписатьФайлВИнформационнуюБазу(Объект.Ссылка, ХранилищеФайла);	
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПолныйПутьНовый) Тогда
			УдалитьФайлы(ПолныйПутьНовый);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет регистрацию изменений - после размещения в томах.
// Параметры:
//  ПланОбменаСсылка - ПланОбмена.Ссылка - план обмена.
Процедура УдалитьРегистрациюИзменений(ПланОбменаСсылка) Экспорт
	
	ПланыОбмена.УдалитьРегистрациюИзменений(ПланОбменаСсылка, Метаданные.Справочники.ВерсииФайлов);
	ПланыОбмена.УдалитьРегистрациюИзменений(ПланОбменаСсылка, Метаданные.Справочники.Файлы);
	ПланыОбмена.УдалитьРегистрациюИзменений(ПланОбменаСсылка, Метаданные.РегистрыСведений.ХранимыеФайлыВерсий);
	
КонецПроцедуры

// Заполняет текст запроса для получения файлов у которых не извлечен текст.
// В качестве параметра может прийти другой запрос, с которым следует сделать объединение.
//
// Параметры:
//  ТекстЗапроса - Строка (возвращаемое значение), варианты передаваемых значений:
//                   Пустая строка   - будет возвращен требуемый текст запроса.
//                   Непустая строка - будет возвращен требуемый текст запроса, добавленный
//                                     к переданному тексту посредством "ОБЪЕДИНИТЬ ВСЕ".
// 
//  ПолучитьВсеФайлы - Булево - начальное значение Ложь. Позволяет отключить выборку
//                     файлов по частям, если передать Истина.
//
Процедура ПриОпределенииТекстаЗапросаДляИзвлеченияТекста(ТекстЗапроса, ПолучитьВсеФайлы = Ложь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	ВерсииФайлов.Ссылка КАК Ссылка,
	|	ВерсииФайлов.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста,
	|	ВерсииФайлов.ТипХраненияФайла КАК ТипХраненияФайла,
	|	ВерсииФайлов.Расширение КАК Расширение,
	|	ВерсииФайлов.Владелец.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	ВерсииФайлов.СтатусИзвлеченияТекста В (ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен), ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка))";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	И НЕ ВерсииФайлов.Зашифрован";
	КонецЕсли;
	
	Если ПолучитьВсеФайлы Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 100", "");
	КонецЕсли;
	
КонецПроцедуры

// Получает полный путь к файлу на диске.
// Параметры:
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла.
//
// Возвращаемое значение:
//   Строка - полный путь к файлу на диске.
Функция ПолучитьИмяФайлаСПутемКДвоичнымДанным(ВерсияСсылка, ПустойПутьДляПустыхДанных = Ложь) Экспорт
	
	ПолноеИмяФайла = "";
	
	Если ВерсияСсылка.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		
		ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияСсылка);
		ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
		
		Если ПустойПутьДляПустыхДанных И ТипЗнч(ДвоичныеДанныеФайла) <> Тип("ДвоичныеДанные") Тогда
			Возврат "";
		КонецЕсли;
		
		ПолноеИмяФайла = ПолучитьИмяВременногоФайла(ВерсияСсылка.Расширение);
		ДвоичныеДанныеФайла.Записать(ПолноеИмяФайла);
	Иначе
		Если НЕ ВерсияСсылка.Том.Пустая() Тогда
			ПолноеИмяФайла = ФайловыеФункцииСлужебный.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПолноеИмяФайла;
	
КонецФункции

// Записывает извлеченный текст.
//
// Параметры:
//  ТекущаяВерсия  - СправочникСсылка.ВерсииФайлов - версия файла.
//
Процедура ПриЗаписиИзвлеченногоТекста(ТекущаяВерсия) Экспорт
	
	ФайлЗаблокирован = Ложь;
	
	Файл = ТекущаяВерсия.Владелец;
	Если Файл.ТекущаяВерсия = ТекущаяВерсия.Ссылка Тогда
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Файл);
			ФайлЗаблокирован = Истина;
		Исключение
			// Исключение, если объект уже заблокирован, в том числе и методом Заблокировать.
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ТекущаяВерсия.ОбменДанными.Загрузка = Истина;
		ТекущаяВерсия.Записать();
		
		Если Файл.ТекущаяВерсия = ТекущаяВерсия.Ссылка Тогда
			ФайлОбъект = Файл.ПолучитьОбъект();
			ФайлОбъект.ТекстХранилище = ТекущаяВерсия.ТекстХранилище;
			ФайлОбъект.ОбменДанными.Загрузка = Истина;
			ФайлОбъект.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Если ФайлЗаблокирован Тогда
			РазблокироватьДанныеДляРедактирования(Файл);
		КонецЕсли;
		
		ВызватьИсключение;
	КонецПопытки;
	
	Если ФайлЗаблокирован Тогда
		РазблокироватьДанныеДляРедактирования(Файл);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество файлов в томах.
// Возвращаемое значение:
//   Число - число файлов в томах.
//
Функция ПодсчитатьКоличествоФайловВТомах()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(Версии.Ссылка), 0) КАК КоличествоФайлов
	|ИЗ
	|	Справочник.ВерсииФайлов КАК Версии
	|ГДЕ
	|	Версии.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Число(Выборка.КоличествоФайлов);
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Возвращает в параметре КоличествоФайловВТомах количество файлов в томах.
Процедура ОпределитьКоличествоФайловВТомах(КоличествоФайловВТомах) Экспорт
	
	КоличествоФайловВТомах = КоличествоФайловВТомах + ПодсчитатьКоличествоФайловВТомах();
	
КонецПроцедуры

// Возвращает Истина в параметре ЕстьХранимыеФайлы, если есть хранимые файлы к объекту ВнешнийОбъект.
//
Процедура ОпределитьНаличиеХранимыхФайлов(ВнешнийОбъект, ЕстьХранимыеФайлы) Экспорт
	
	Если ЕстьХранимыеФайлы = Истина Тогда
		Возврат;
	КонецЕсли;
	ТипыВладельцев = Метаданные.ОбщиеКоманды.ПрисоединенныеФайлы.ТипПараметраКоманды.Типы();
	Если ТипыВладельцев.Найти(ТипЗнч(ВнешнийОбъект)) <> Неопределено Тогда
		МассивФайлов = ПолучитьВсеПодчиненныеФайлы(ВнешнийОбъект);
		ЕстьХранимыеФайлы = МассивФайлов.Количество() <> 0;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает в параметре ХранимыеФайлы массив хранимых файлов к объекту ВнешнийОбъект.
//
Процедура ПолучитьХранимыеФайлы(ВнешнийОбъект, ХранимыеФайлы) Экспорт
	
	ТипыВладельцев = Метаданные.ОбщиеКоманды.ПрисоединенныеФайлы.ТипПараметраКоманды.Типы();
	Если ТипыВладельцев.Найти(ТипЗнч(ВнешнийОбъект)) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = ПолучитьВсеПодчиненныеФайлы(ВнешнийОбъект);
	Для Каждого Файл Из МассивФайлов Цикл
		ДанныеФайла = Новый Структура("ДатаМодификацииУниверсальная, Размер, Наименование, Расширение, ДвоичныеДанныеФайла, Текст");
		
		ДанныеФайла.ДатаМодификацииУниверсальная = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл.ТекущаяВерсия, "ДатаМодификацииУниверсальная");
		ДанныеФайла.Размер = Файл.ТекущаяВерсияРазмер;
		ДанныеФайла.Наименование = Файл.Наименование;
		ДанныеФайла.Расширение = Файл.ТекущаяВерсияРасширение;
		
		ДанныеДляОткрытия = ПолучитьНавигационнуюСсылкуВоВременномХранилище(Файл.ТекущаяВерсия);
		ДанныеФайла.ДвоичныеДанныеФайла = ДанныеДляОткрытия;
		
		ДанныеФайла.Текст = Файл.ТекстХранилище.Получить();
		
		ХранимыеФайлы.Добавить(ДанныеФайла);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.2"; // При обновлении на 1.0.5.2 сработает обработчик.
	Обработчик.Процедура = "РаботаСФайламиСлужебныйВызовСервера.ЗаполнитьНомерВерсииИзКодаСправочника";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.2"; // При обновлении на 1.0.5.2 сработает обработчик.
	Обработчик.Процедура = "РаботаСФайламиСлужебныйВызовСервера.ЗаполнитьТипХраненияФайлаВБазе";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.7"; // При обновлении на 1.0.5.7 сработает обработчик.
	Обработчик.Процедура = "РаботаСФайламиСлужебныйВызовСервера.СменитьИндексПиктограммы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.3"; // При обновлении на 1.0.6.3 сработает обработчик.
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "РаботаСФайламиСлужебныйВызовСервера.ЗаполнитьПутиТома";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.1";
	Обработчик.Процедура = "РаботаСФайламиСлужебныйВызовСервера.ПерезаписатьВсеФайлы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.2";
	Обработчик.Процедура = "РаботаСФайламиСлужебныйВызовСервера.ЗаполнитьДатуМодификацииФайла";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.1.2";
	Обработчик.Процедура = "РаботаСФайламиСлужебныйВызовСервера.ПереместитьФайлыИзИнформационнойБазыВРегистрСведений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.1.2";
	Обработчик.Процедура = "РаботаСФайламиСлужебныйВызовСервера.ЗаполнитьДатуЗаема";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.15";
	Обработчик.Процедура = "РаботаСФайламиСлужебныйВызовСервера.ЗаменитьПраваВНастройкахПравПапокФайлов";
	
КонецПроцедуры

// В справочнике ВерсииФайлов из данных в Код(Строка) заполняет НомерВерсии(Число).
Процедура ЗаполнитьНомерВерсииИзКодаСправочника() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВерсииФайлов.Ссылка,
	|	ВерсииФайлов.ПометкаУдаления,
	|	ВерсииФайлов.Код,
	|	ВерсииФайлов.НомерВерсии,
	|	ВерсииФайлов.Владелец.ПометкаУдаления КАК ВладелецПометкаУдаления,
	|	ВерсииФайлов.Владелец.ТекущаяВерсия
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НомерВерсии = 0 Тогда 
			
			ОписаниеТипов = Новый ОписаниеТипов("Число");
			КодЧисло = ОписаниеТипов.ПривестиЗначение(Выборка.Код);
			Если КодЧисло <> 0 Тогда
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				Объект.НомерВерсии = КодЧисло;
				
				// Коррекция ситуации, допустимой ранее, но недопустимой сейчас - активная версия помечена на удаление, а владелец
				// - нет.
				Если Выборка.ПометкаУдаления = Истина И Выборка.ВладелецПометкаУдаления = Ложь И Выборка.ТекущаяВерсия = Выборка.Ссылка Тогда
					Объект.ПометкаУдаления = Ложь;
				КонецЕсли;
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			КонецЕсли
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// В справочнике ВерсииФайлов заполняет ТипХраненияФайла значением ВБазе.
Процедура ЗаполнитьТипХраненияФайлаВБазе() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВерсииФайлов.Ссылка
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Объект.ТипХраненияФайла.Пустая() Тогда
			Объект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// В справочнике ВерсииФайлов и Файлы ИндексКартинки увеличивает в 2 раза.
Процедура СменитьИндексПиктограммы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВерсииФайлов.Ссылка
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Объект.Расширение);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.ИндексКартинки = Объект.ТекущаяВерсия.ИндексКартинки;
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при обновлении на 1.0.6.3 - заполняет пути ТомаХраненияФайлов.
Процедура ЗаполнитьПутиТома() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТомаХраненияФайлов.Ссылка
	|ИЗ
	|	Справочник.ТомаХраненияФайлов КАК ТомаХраненияФайлов";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ПолныйПутьLinux = Объект.ПолныйПутьWindows;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
	
КонецПроцедуры

// В справочнике Файлы перезаписывает все элементы.
Процедура ПерезаписатьВсеФайлы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// В справочнике ВерсииФайлов заполняет ДатаМодификацииФайла - из даты создания.
Процедура ЗаполнитьДатуМодификацииФайла() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Объект.ДатаМодификацииФайла = Дата("00010101000000") Тогда
			Объект.ДатаМодификацииФайла = Объект.ДатаСоздания;
			Объект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	ПерезаписатьВсеФайлы(); // Чтобы перенеслись значения реквизита ДатаМодификацииФайла из версии в файл.
	
КонецПроцедуры

// Создает новые файлы по аналогии с указанными.
// Параметры:
//  МассивФайлов  - Массив - массив объектов СправочникСсылка.Файлы - существующие файлы.
//  ВладелецНовогоФайла - ЛюбаяСсылка - владелец файла.
//
Процедура СкопироватьФайлы(МассивФайлов, ВладелецНовогоФайла) Экспорт
	
	Для каждого Файл Из МассивФайлов Цикл
		НовыйФайл = СкопироватьФайл(Файл, ВладелецНовогоФайла);
	КонецЦикла;
	
КонецПроцедуры

// Записывает ХранилищеФайла в информационную базу.
//
// Параметры:
// ВерсияСсылка - ссылка на версию файла.
// ХранилищеФайла - ХранилищеЗначения, с двоичными данными файла, которые требуется записать.
//
Процедура ЗаписатьФайлВИнформационнуюБазу(ВерсияСсылка, ХранилищеФайла)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ХранимыеФайлыВерсий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВерсияФайла = ВерсияСсылка;
	МенеджерЗаписи.ХранимыйФайл = ХранилищеФайла;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Удаляет запись в регистре ХранимыеФайлыВерсий.
//
// Параметры:
// ВерсияСсылка - ссылка на версию файла.
//
Процедура УдалитьЗаписьИзРегистраХранимыеФайлыВерсий(ВерсияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ХранимыеФайлыВерсий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВерсияФайла.Установить(ВерсияСсылка);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Переносит бинарный файл из ФайлХранилище справочника ВерсииФайлов в регистр сведений ХранимыеФайлыВерсий.
Процедура ПереместитьФайлыИзИнформационнойБазыВРегистрСведений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВерсииФайлов.Ссылка
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	ВерсииФайлов.ТипХраненияФайла = &ТипХраненияФайла";
		
	Запрос.УстановитьПараметр("ТипХраненияФайла", Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе);	

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДанныеВХранилище = Объект.ФайлХранилище.Получить();
		Если ТипЗнч(ДанныеВХранилище) = Тип("ДвоичныеДанные") Тогда
			ЗаписатьФайлВИнформационнуюБазу(Выборка.Ссылка, Объект.ФайлХранилище);
			Объект.ФайлХранилище = Новый ХранилищеЗначения(""); // очищаем значение
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет поле ДатаЗаема текущей датой.
Процедура ЗаполнитьДатуЗаема() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаЗаема = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка.Редактирует) Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			// Чтобы прошла запись ранее подписанного объекта.
			Объект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
			Объект.ДатаЗаема = ДатаЗаема;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Переименовывает старые права в новые.
Процедура ЗаменитьПраваВНастройкахПравПапокФайлов() Экспорт
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
	
	ТаблицаЗамены = МодульУправлениеДоступом.ТаблицаЗаменыПравВНастройкахПравОбъектов();
	
	Строка = ТаблицаЗамены.Добавить();
	Строка.ТипВладельцев = Справочники.ПапкиФайлов.ПустаяСсылка();
	Строка.СтароеИмя = "ЧтениеПапокИФайлов";
	Строка.НовоеИмя  = "Чтение";
	
	Строка = ТаблицаЗамены.Добавить();
	Строка.ТипВладельцев = Справочники.ПапкиФайлов.ПустаяСсылка();
	Строка.СтароеИмя = "ДобавлениеПапокИФайлов";
	Строка.НовоеИмя  = "ДобавлениеФайлов";
	
	Строка = ТаблицаЗамены.Добавить();
	Строка.ТипВладельцев = Справочники.ПапкиФайлов.ПустаяСсылка();
	Строка.СтароеИмя = "ИзменениеПапокИФайлов";
	Строка.НовоеИмя  = "ИзменениеФайлов";
	
	Строка = ТаблицаЗамены.Добавить();
	Строка.ТипВладельцев = Справочники.ПапкиФайлов.ПустаяСсылка();
	Строка.СтароеИмя = "ИзменениеПапокИФайлов";
	Строка.НовоеИмя  = "ИзменениеПапок";
	
	Строка = ТаблицаЗамены.Добавить();
	Строка.ТипВладельцев = Справочники.ПапкиФайлов.ПустаяСсылка();
	Строка.СтароеИмя = "ПометкаУдаленияПапокИФайлов";
	Строка.НовоеИмя  = "ПометкаУдаленияФайлов";
	
	МодульУправлениеДоступом.ЗаменитьПраваВНастройкахПравОбъектов(ТаблицаЗамены);
	
КонецПроцедуры

// Ставит файлу признак Зашифрован.
Процедура УстановитьПризнакЗашифрован(ФайлСсылка, Зашифрован, УникальныйИдентификатор = Неопределено) Экспорт
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ФайлСсылка, , УникальныйИдентификатор);
	
	ФайлОбъект.Зашифрован = Зашифрован;
	// Чтобы прошла запись ранее подписанного объекта.
	ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
	ФайлОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ФайлСсылка, УникальныйИдентификатор);
	
КонецПроцедуры

// Обновляет размер файла и текущей версии. Нужно при загрузке шифрованного файла в почте.
Процедура ОбновитьРазмерФайлаИВерсии(ДанныеФайла, РазмерФайла, УникальныйИдентификатор) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ВерсияОбъект = ДанныеФайла.Версия.ПолучитьОбъект();
		ВерсияОбъект.Заблокировать();
		ВерсияОбъект.Размер = РазмерФайла;
		// Чтобы прошла запись ранее подписанного объекта.
		ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		ВерсияОбъект.Записать();
		ВерсияОбъект.Разблокировать();
		
		ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, , УникальныйИдентификатор);
		// Чтобы прошла запись ранее подписанного объекта.
		ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		ФайлОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Получает количество версий с неизвлеченным текстом.
Функция ПолучитьКоличествоВерсийСНеизвлеченнымТекстом() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК ЧислоВерсий
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	ВерсииФайлов.СтатусИзвлеченияТекста В (ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен), ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка))";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И НЕ ВерсииФайлов.Зашифрован";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Выборка.ЧислоВерсий;
	
	Возврат Результат;
	
КонецФункции

// Записывает кодировку версии файла.
//
// Параметры:
// ВерсияСсылка - СправочникСсылка.ВерсииФайлов - ссылка на версию файла.
// Кодировка - Строка - новая кодировка версии файла.
//
Процедура ЗаписатьКодировкуВерсииФайла(ВерсияСсылка, Кодировка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.КодировкиВерсийФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВерсияФайла = ВерсияСсылка;
	МенеджерЗаписи.Кодировка = Кодировка;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Записывает кодировку версии файла.
//
// Параметры:
// ВерсияСсылка - ссылка на версию файла.
// Кодировка - Строка кодировки.
// ИзвлеченныйТекст - текст, извлеченный из файла.
//
Процедура ЗаписатьКодировкуВерсииФайлаИИзвлеченныйТекст(ВерсияСсылка, Кодировка, ИзвлеченныйТекст) Экспорт
	
	ЗаписатьКодировкуВерсииФайла(ВерсияСсылка, Кодировка);
	ЗаписатьРезультатИзвлеченияТекста(ВерсияСсылка, Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен, 
		ИзвлеченныйТекст);
	
КонецПроцедуры

// Записывает на сервер результат извлечения текста - извлеченный текст и СтатусИзвлеченияТекста.
Процедура ЗаписатьРезультатИзвлеченияТекста(ВерсияСсылка, РезультатИзвлечения, АдресВременногоХранилищаТекста)
	
	ФайлЗаблокирован = Ложь;
	Файл = ВерсияСсылка.Владелец;
	
	Если Файл.ТекущаяВерсия = ВерсияСсылка Тогда
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Файл);
			ФайлЗаблокирован = Истина;
		Исключение
			// Исключение, если объект уже заблокирован, в том числе и методом Заблокировать.
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	Текст = "";
	
	ВерсияОбъект = ВерсияСсылка.ПолучитьОбъект();
	
	Если Не ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
		
		Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаТекста) Тогда
			Текст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
		Иначе	
			Текст = АдресВременногоХранилищаТекста;
		КонецЕсли;
		
		ВерсияОбъект.ТекстХранилище = Новый ХранилищеЗначения(Текст);
		ВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		
	КонецЕсли;
	
	Если РезультатИзвлечения = "НеИзвлечен" Тогда
		ВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	ИначеЕсли РезультатИзвлечения = "Извлечен" Тогда
		ВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
	ИначеЕсли РезультатИзвлечения = "ИзвлечьНеУдалось" Тогда
		ВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		// Чтобы прошла запись ранее подписанного объекта.
		ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		ВерсияОбъект.Записать();
		
		Если Файл.ТекущаяВерсия = ВерсияСсылка Тогда
			ФайлОбъект = Файл.ПолучитьОбъект();
			ФайлОбъект.ТекстХранилище = ВерсияОбъект.ТекстХранилище;
			// Чтобы прошла запись ранее подписанного объекта.
			ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
			ФайлОбъект.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Если ФайлЗаблокирован Тогда
			РазблокироватьДанныеДляРедактирования(Файл);
		КонецЕсли;
		
		ВызватьИсключение;
	КонецПопытки;
	
	Если ФайлЗаблокирован Тогда
		РазблокироватьДанныеДляРедактирования(Файл);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
