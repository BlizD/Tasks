///////////////////////////////////////////////////////////////////////////////////
// Подсистема "Управление итогами и агрегатами".
//
///////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Добавление обработчиков служебных событий (подписок).

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"УправлениеИтогамиИАгрегатамиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПослеОбновленияИнформационнойБазы"].Добавить(
		"УправлениеИтогамиИАгрегатамиСлужебный");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий\ПриПолученииСпискаШаблонов"].Добавить(
			"УправлениеИтогамиИАгрегатамиСлужебный");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.ТекущиеДела\ПриЗаполненииСпискаТекущихДел"].Добавить(
			"УправлениеИтогамиИАгрегатамиСлужебный");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий.

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.3.7";
	Обработчик.Процедура = "УправлениеИтогамиИАгрегатамиСлужебный.УстановитьИспользованиеРегламентныхЗаданий";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 75;
	
КонецПроцедуры

// Вызывается после завершения монопольного обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия подсистемы до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия подсистемы после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления
//                                             подсистемы, сгруппированных по номеру версии.
//                            Процедура обхода выполненных обработчиков:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
//   ВыводитьОписаниеОбновлений - Булево (возвращаемое значение)- если установить Истина,
//                                тогда выводить форму с описанием обновлений.
//   МонопольныйРежим           - Булево - признак выполнения обновления в монопольном режиме.
//                                Истина - обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	Если НЕ РежимРаботыЛокальныйФайловый() Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьПараметрыИтоговИАгрегатов();
	
КонецПроцедуры

// Обработчик события ПриПолученииСпискаШаблонов.
//
// Формирует список шаблонов заданий очереди.
//
// Параметры:
//  Шаблоны - Массив строк. В параметр следует добавить имена предопределенных
//   неразделенных регламентных заданий, которые должны использоваться в качестве
//   шаблонов для заданий очереди.
//
Процедура ПриПолученииСпискаШаблонов(Шаблоны) Экспорт
	
	Шаблоны.Добавить("ОбновлениеАгрегатов");
	Шаблоны.Добавить("ПерестроениеАгрегатов");
	Шаблоны.Добавить("УстановкаПериодаРассчитанныхИтогов");
	
КонецПроцедуры

// Заполняет список текущих дел пользователя.
//
// Параметры:
//   ТекущиеДела - ТаблицаЗначений - см. возвращаемое значение ТекущиеДелаСлужебный.СписокТекущихДелПользователя().
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	Если Не РежимРаботыЛокальныйФайловый() Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаМетаданные = Метаданные.Обработки.СдвигГраницыИтогов;
	Если Не ПравоДоступа("Использование", ОбработкаМетаданные) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаПолноеИмя = ОбработкаМетаданные.ПолноеИмя();
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(ОбработкаПолноеИмя);
	
	Прототип = Новый Структура("ЕстьДела, Важное, Форма, Представление, Подсказка");
	Прототип.ЕстьДела = НадоСдвинутьГраницуИтогов();
	Прототип.Важное   = Истина;
	Прототип.Форма    = ОбработкаПолноеИмя + ".Форма";
	Прототип.Представление = НСтр("ru = 'Оптимизировать программу'");
	Прототип.Подсказка     = НСтр("ru = 'Ускорить проведение документов и формирование отчетов.
		|Обязательная ежемесячная процедура, может занять некоторое время.'");
	
	Для Каждого Раздел Из Разделы Цикл
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = СтрЗаменить(Прототип.Форма, ".", "") + СтрЗаменить(Раздел.ПолноеИмя(), ".", "");
		Дело.Владелец       = Раздел;
		ЗаполнитьЗначенияСвойств(Дело, Прототип);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов.

// Рассчитывает итоги всех регистров бухгалтерии и накопления, у которых они включены.
Процедура РассчитатьИтоги() Экспорт
	
	ДатаСеанса = ТекущаяДатаСеанса();
	РегистрНакопленияПериод  = КонецМесяца(ДобавитьМесяц(ДатаСеанса, -1)); // Конец прошлого месяца.
	РегистрБухгалтерииПериод = КонецМесяца(ДатаСеанса); // Конец текущего месяца.
	
	Кэш = КэшПроверкиРазделения();
	
	// Расчет итогов для регистров накопления.
	ВидОстатки = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки;
	Для Каждого РегистрМетаданные Из Метаданные.РегистрыНакопления Цикл
		Если РегистрМетаданные.ВидРегистра <> ВидОстатки Тогда
			Продолжить;
		КонецЕсли;
		Если Не ОбъектМетаданныхДоступенПоРазделению(Кэш, РегистрМетаданные) Тогда
			Продолжить;
		КонецЕсли;
		РегистрНакопленияМенеджер = РегистрыНакопления[РегистрМетаданные.Имя];
		Если РегистрНакопленияМенеджер.ПолучитьМаксимальныйПериодРассчитанныхИтогов() >= РегистрНакопленияПериод Тогда
			Продолжить;
		КонецЕсли;
		РегистрНакопленияМенеджер.УстановитьМаксимальныйПериодРассчитанныхИтогов(РегистрНакопленияПериод);
		Если Не РегистрНакопленияМенеджер.ПолучитьИспользованиеТекущихИтогов() Тогда
			Продолжить;
		КонецЕсли;
		РегистрНакопленияМенеджер.ПересчитатьТекущиеИтоги();
	КонецЦикла;
	
	// Расчет итогов для регистров бухгалтерии.
	Для Каждого РегистрМетаданные Из Метаданные.РегистрыБухгалтерии Цикл
		Если Не ОбъектМетаданныхДоступенПоРазделению(Кэш, РегистрМетаданные) Тогда
			Продолжить;
		КонецЕсли;
		РегистрБухгалтерииМенеджер = РегистрыБухгалтерии[РегистрМетаданные.Имя];
		Если РегистрБухгалтерииМенеджер.ПолучитьМаксимальныйПериодРассчитанныхИтогов() >= РегистрБухгалтерииПериод Тогда
			Продолжить;
		КонецЕсли;
		РегистрБухгалтерииМенеджер.УстановитьМаксимальныйПериодРассчитанныхИтогов(РегистрБухгалтерииПериод);
		Если Не РегистрБухгалтерииМенеджер.ПолучитьИспользованиеТекущихИтогов() Тогда
			Продолжить;
		КонецЕсли;
		РегистрБухгалтерииМенеджер.ПересчитатьТекущиеИтоги();
	КонецЦикла;
	
	// Регистрация даты.
	Если РежимРаботыЛокальныйФайловый() Тогда
		ПараметрыИтогов = ПараметрыИтоговИАгрегатов();
		ПараметрыИтогов.ДатаРасчетаИтогов = НачалоМесяца(ДатаСеанса);
		ЗаписатьПараметрыИтоговИАгрегатов(ПараметрыИтогов);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Выполнение регламентных заданий.

// Обработчик регламентного задания "УстановкаПериодаРассчитанныхИтогов".
Процедура УстановкаПериодаРассчитанныхИтоговОбработчикЗадания() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УстановкаПериодаРассчитанныхИтогов);
	
	РассчитатьИтоги();
	
КонецПроцедуры

// Обработчик регламентного задания "ОбновлениеАгрегатов".
Процедура ОбновлениеАгрегатовОбработчикЗадания() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеАгрегатов);
	
	ОбновитьАгрегаты();
	
КонецПроцедуры

// Обработчик регламентного задания "ПерестроениеАгрегатов".
Процедура ПерестроениеАгрегатовОбработчикЗадания() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПерестроениеАгрегатов);
	
	ПерестроитьАгрегаты();
	
КонецПроцедуры

// Для внутреннего использования.
Процедура ОбновитьАгрегаты()
	
	Кэш = КэшПроверкиРазделения();
	
	// Обновление агрегатов для оборотных регистров накопления.
	ВидОбороты = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты;
	Для Каждого РегистрМетаданные Из Метаданные.РегистрыНакопления Цикл
		Если РегистрМетаданные.ВидРегистра <> ВидОбороты Тогда
			Продолжить;
		КонецЕсли;
		Если Не ОбъектМетаданныхДоступенПоРазделению(Кэш, РегистрМетаданные) Тогда
			Продолжить;
		КонецЕсли;
		РегистрНакопленияМенеджер = РегистрыНакопления[РегистрМетаданные.Имя];
		Если Не РегистрНакопленияМенеджер.ПолучитьРежимАгрегатов()
			Или Не РегистрНакопленияМенеджер.ПолучитьИспользованиеАгрегатов() Тогда
			Продолжить;
		КонецЕсли;
		// Обновление агрегатов.
		РегистрНакопленияМенеджер.ОбновитьАгрегаты();
	КонецЦикла;
КонецПроцедуры

// Для внутреннего использования.
Процедура ПерестроитьАгрегаты()
	
	Кэш = КэшПроверкиРазделения();
	
	// Перестроение агрегатов для оборотных регистров накопления.
	ВидОбороты = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты;
	Для Каждого РегистрМетаданные Из Метаданные.РегистрыНакопления Цикл
		Если РегистрМетаданные.ВидРегистра <> ВидОбороты Тогда
			Продолжить;
		КонецЕсли;
		Если Не ОбъектМетаданныхДоступенПоРазделению(Кэш, РегистрМетаданные) Тогда
			Продолжить;
		КонецЕсли;
		РегистрНакопленияМенеджер = РегистрыНакопления[РегистрМетаданные.Имя];
		Если Не РегистрНакопленияМенеджер.ПолучитьРежимАгрегатов()
			Или Не РегистрНакопленияМенеджер.ПолучитьИспользованиеАгрегатов() Тогда
			Продолжить;
		КонецЕсли;
		// Перестроение агрегатов.
		РегистрНакопленияМенеджер.ПерестроитьИспользованиеАгрегатов();
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для работы в файловом режиме.

// Возвращает Истина если ИБ работает в файловом режиме и разделение отключено.
Функция РежимРаботыЛокальныйФайловый()
	Возврат ОбщегоНазначения.ИнформационнаяБазаФайловая() И НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено();
КонецФункции

// Определяет актуальность итогов и агрегатов. Если нет регистров, то возвращает Истина.
Функция НадоСдвинутьГраницуИтогов() Экспорт
	Параметры = ПараметрыИтоговИАгрегатов();
	Возврат Параметры.ЕстьРегистрыИтогов И ДобавитьМесяц(Параметры.ДатаРасчетаИтогов, 2) < ТекущаяДатаСеанса();
КонецФункции

// Получает значение константы "ПараметрыИтоговИАгрегатов".
Функция ПараметрыИтоговИАгрегатов()
	УстановитьПривилегированныйРежим(Истина);
	Параметры = Константы.ПараметрыИтоговИАгрегатов.Получить().Получить();
	Если ТипЗнч(Параметры) <> Тип("Структура") ИЛИ НЕ Параметры.Свойство("ЕстьРегистрыИтогов") Тогда
		Параметры = СформироватьПараметрыИтоговИАгрегатов();
	КонецЕсли;
	Возврат Параметры;
КонецФункции

// Перезаполняет константу "ПараметрыИтоговИАгрегатов".
Функция СформироватьПараметрыИтоговИАгрегатов()
	Параметры = Новый Структура;
	Параметры.Вставить("ЕстьРегистрыИтогов", Ложь);
	Параметры.Вставить("ДатаРасчетаИтогов",  '39991231235959'); // М1.12.3999 23:59:59, максимальная дата.
	
	ВидОстатки = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки;
	Для Каждого РегистрМетаданные Из Метаданные.РегистрыНакопления Цикл
		Если РегистрМетаданные.ВидРегистра = ВидОстатки Тогда
			Дата = РегистрыНакопления[РегистрМетаданные.Имя].ПолучитьМаксимальныйПериодРассчитанныхИтогов() + 1;
			Параметры.ЕстьРегистрыИтогов = Истина;
			Параметры.ДатаРасчетаИтогов  = Мин(Параметры.ДатаРасчетаИтогов, Дата);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Параметры.ЕстьРегистрыИтогов Тогда
		Параметры.Вставить("ДатаРасчетаИтогов", '00010101');
	КонецЕсли;
	
	ЗаписатьПараметрыИтоговИАгрегатов(Параметры);
	
	Возврат Параметры;
КонецФункции

// Записывает значение константы "ПараметрыИтоговИАгрегатов".
Процедура ЗаписатьПараметрыИтоговИАгрегатов(Параметры) Экспорт
	Константы.ПараметрыИтоговИАгрегатов.Установить(Новый ХранилищеЗначения(Параметры));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// Устанавливает расписания и использование регламентных заданий подсистемы
// в значения по умолчанию. Используется только при перехода на версию 
// 2.1.3 библиотеки.
//
Процедура УстановитьИспользованиеРегламентныхЗаданий() Экспорт
	
	ПустоеРасписание = РасписаниеЗаданияПоУмолчанию("");
	
	ПроверятьИспользование = НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
	ИменаЗаданий = Новый Массив;
	ИменаЗаданий.Добавить("ОбновлениеАгрегатов");
	ИменаЗаданий.Добавить("ПерестроениеАгрегатов");
	ИменаЗаданий.Добавить("УстановкаПериодаРассчитанныхИтогов");
	
	Для каждого ИмяЗадания Из ИменаЗаданий Цикл
		Задание = РегламентныеЗадания.НайтиПредопределенное(ИмяЗадания);
		
		Если ПроверятьИспользование И Задание.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ОбщегоНазначенияКлиентСервер.РасписанияОдинаковые(ПустоеРасписание, Задание.Расписание) Тогда
			Продолжить;
		КонецЕсли;
		
		Задание.Расписание = РасписаниеЗаданияПоУмолчанию(ИмяЗадания);
		Если ПроверятьИспользование Тогда
			Задание.Использование = Истина;
		КонецЕсли;
		
		Задание.Записать();
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Другие

Функция РасписаниеЗаданияПоУмолчанию(Знач Имя)
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Если Имя = "" Тогда
		Возврат Расписание;
	КонецЕсли;
	Расписание.ПериодПовтораДней = 1;
	
	Если Имя = "ОбновлениеАгрегатов" Тогда
		Расписание.ВремяНачала = Дата(1, 1, 1, 01, 00, 00);
		ДобавитьДетальноеРасписание(Расписание, "ВремяНачала", Дата(1, 1, 1, 01, 00, 00));
		ДобавитьДетальноеРасписание(Расписание, "ВремяНачала", Дата(1, 1, 1, 14, 00, 00));
	ИначеЕсли Имя = "ПерестроениеАгрегатов" Тогда
		Расписание.ВремяНачала = Дата(1, 1, 1, 03, 00, 00);
		УстановитьДниНедели(Расписание, "6");
	ИначеЕсли Имя = "УстановкаПериодаРассчитанныхИтогов" Тогда
		Расписание.ВремяНачала = Дата(1, 1, 1, 01, 00, 00);
		Расписание.ДеньВМесяце = 5;
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестное имя задания %1'"), Имя);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	Возврат Расписание;
КонецФункции

Процедура ДобавитьДетальноеРасписание(Расписание, Ключ, Значение)
	ДетальноеРасписание = Новый РасписаниеРегламентногоЗадания;
	ЗаполнитьЗначенияСвойств(ДетальноеРасписание, Новый Структура(Ключ, Значение));
	Массив = Расписание.ДетальныеРасписанияДня;
	Массив.Добавить(ДетальноеРасписание);
	Расписание.ДетальныеРасписанияДня = Массив;
КонецПроцедуры

Процедура УстановитьДниНедели(Расписание, ДниНеделиВСтроке)
	ДниНедели = Новый Массив;
	МассивСтрок = СтрРазделить(ДниНеделиВСтроке, ",", Ложь);
	Для Каждого СтрокаНомерДняНедели Из МассивСтрок Цикл
		ДниНедели.Добавить(Число(СокрЛП(СтрокаНомерДняНедели)));
	КонецЦикла;
	Расписание.ДниНедели = ДниНедели;
КонецПроцедуры

Функция КэшПроверкиРазделения()
	Кэш = Новый Структура;
	Кэш.Вставить("МодельСервиса", ОбщегоНазначенияПовтИсп.РазделениеВключено());
	Если Кэш.МодельСервиса Тогда
		Кэш.Вставить("ВОбластиДанных", ОбщегоНазначения.ИспользованиеРазделителяСеанса());
		Кэш.Вставить("РазделительОсновныхДанных",        ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных());
		Кэш.Вставить("РазделительВспомогательныхДанных", ОбщегоНазначенияПовтИсп.РазделительВспомогательныхДанных());
	КонецЕсли;
	Возврат Кэш;
КонецФункции

Функция ОбъектМетаданныхДоступенПоРазделению(Кэш, ОбъектМетаданных)
	Если Не Кэш.МодельСервиса Тогда
		Возврат Истина;
	КонецЕсли;
	ОбъектМетаданныхРазделен =
		ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(ОбъектМетаданных, Кэш.РазделительОсновныхДанных)
		Или ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(ОбъектМетаданных, Кэш.РазделительВспомогательныхДанных);
	Возврат Кэш.ВОбластиДанных = ОбъектМетаданныхРазделен;
КонецФункции

#КонецОбласти
