////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с файлами".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Открывает форму папки со списком файлов.
//
// Параметры:
//   СтандартнаяОбработка - Булево - Передается "как есть" из параметров обработчика "Открытие".
//   Папка - СправочникСсылка.Файлы - Открываемая папка.
//
// Места использования:
//   Справочник.РассылкиОтчетов.Форма.ФормаЭлемента.ПапкаОткрытие().
//
Процедура РассылкаОтчетовПросмотрПапки(СтандартнаяОбработка, Папка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Папка", Папка);
	ОткрытьФорму("Справочник.Файлы.Форма.Файлы", ПараметрыФормы, , Папка);
	
КонецПроцедуры

// Формирует список предупреждений для пользователя при завершении работы программы.
//
// Параметры:
//  см. ПриПолученииСпискаПредупрежденийЗавершенияРаботы.
//
Процедура ПриЗавершенииРаботыСистемы(Предупреждения)
	
	Ответ = ПроверитьЗанятыеФайлыПриЗавершенииРаботы();
	Если Ответ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Ответ) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПредупреждениеПользователю = СтандартныеПодсистемыКлиент.ПредупреждениеПриЗавершениеРаботы();
	ПредупреждениеПользователю.ТекстГиперссылки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Открыть список редактируемых файлов (%1)'"),
		Ответ.КоличествоЗанятыхФайлов);
	
	ДействиеПриНажатииГиперссылки = ПредупреждениеПользователю.ДействиеПриНажатииГиперссылки;
	
	ПрикладнаяФормаПредупреждения = Неопределено;
	Ответ.Свойство("ПрикладнаяФормаПредупреждения", ПрикладнаяФормаПредупреждения);
	ПараметрыПрикладнойФормыПредупреждения = Неопределено;
	Ответ.Свойство("ПараметрыПрикладнойФормыПредупреждения", ПараметрыПрикладнойФормыПредупреждения);
	
	Форма = Неопределено;
	Ответ.Свойство("Форма", Форма);
	ПараметрыФормы = Неопределено;
	Ответ.Свойство("ПараметрыФормы", ПараметрыФормы);
	
	Если ПрикладнаяФормаПредупреждения <> Неопределено Тогда 
		ДействиеПриНажатииГиперссылки.ПрикладнаяФормаПредупреждения = ПрикладнаяФормаПредупреждения;
		ДействиеПриНажатииГиперссылки.ПараметрыПрикладнойФормыПредупреждения = ПараметрыПрикладнойФормыПредупреждения;
	КонецЕсли;
	Если Форма <> Неопределено Тогда 
		ДействиеПриНажатииГиперссылки.Форма = Форма;
		ДействиеПриНажатииГиперссылки.ПараметрыФормы = ПараметрыФормы;
	КонецЕсли;
	
	Предупреждения.Добавить(ПредупреждениеПользователю);
	
КонецПроцедуры	

Процедура ПеренестиВсеФайлыВТома() Экспорт
	
	ОткрытьФорму("Обработка.ПереносФайловВТома.Форма");
	
КонецПроцедуры	

// На основе переданного пути к файлу на диске создает Файл его и открывает карточку.
//
//  ПараметрыДобавления - Структура:
//       * ОбработчикРезультата - ОписаниеОповещения, Неопределено.
//             - Описание процедуры, принимающей результат работы метода.
//       * ПолноеИмяФайла - Строка - Необязательный. Полный путь и имя файла на клиенте.
//             Если не указан, то будет открыт диалог для выбора файла.
//       * ВладелецФайла - ЛюбаяСсылка - владелец файла.
//       * ФормаВладелец - УправляемаяФорма из которой вызвано создание файла.
//       * НеОткрыватьКарточкуПослеСозданияИзФайла - Булево.
//             - Истина когда карточка файла не открывается после создания.
//       * ИмяСоздаваемогоФайла - Строка - Необязательный. Новое имя файла.
//
Процедура ДобавитьИзФайловойСистемыСРасширением(ПараметрыВыполнения) Экспорт
	
	Результат = ДобавитьИзФайловойСистемыСРасширениемСинхронно(ПараметрыВыполнения);
	Если Не Результат.ФайлДобавлен Тогда
		Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, Результат.ТекстОшибки, Неопределено);
		Иначе
			ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполнения.НеОткрыватьКарточкуПослеСозданияИзФайла <> Истина Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Результат.ФайлСсылка);
		ПараметрыФормы.Вставить("КарточкаОткрытаПослеСозданияФайла", Истина);
		
		ОбработчикДиалога = ПодготовитьОбработчикДляДиалога(ПараметрыВыполнения.ОбработчикРезультата);
		ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", ПараметрыФормы, ПараметрыВыполнения.ФормаВладелец, , , , ОбработчикДиалога);
	Иначе
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Результат);
	КонецЕсли;
	
КонецПроцедуры

// На основе переданного пути к файлу на диске создает Файл его и открывает карточку.
//
//  ПараметрыДобавления - Структура:
//       * ПолноеИмяФайла - Строка - Необязательный. Полный путь и имя файла на клиенте.
//             Если не указан, то будет открыт синхронный диалог для выбора файла.
//       * ВладелецФайла - ЛюбаяСсылка - владелец файла.
//       * УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы для хранения файла.
//       * ИмяСоздаваемогоФайла - Строка - Необязательный. Новое имя файла.
//
// Возвращаемое значение:
//   Структура - Результат.
//       * ФайлДобавлен - Булево - успешно ли выполнена операция.
//       * ФайлСсылка - СправочникСсылка.Файлы
//       * ТекстОшибки - Строка.
//
Функция ДобавитьИзФайловойСистемыСРасширениемСинхронно(ПараметрыВыполнения) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ФайлДобавлен", Ложь);
	Результат.Вставить("ФайлСсылка",   Неопределено);
	Результат.Вставить("ТекстОшибки",  "");
	
	Если Не ПараметрыВыполнения.Свойство("ПолноеИмяФайла") Тогда
		// Загрузить из файловой системы с расширением работы с файлами.
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.МножественныйВыбор = Ложь;
		ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выбор файла'");
		ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Все файлы (*.*)|*.*'");
		ДиалогВыбораФайла.Каталог = РаботаСФайламиСлужебныйВызовСервера.РабочийКаталогПапки(ПараметрыВыполнения.ВладелецФайла);
		Если НЕ ДиалогВыбораФайла.Выбрать() Тогда
			Возврат Результат;
		КонецЕсли;
		ПараметрыВыполнения.Вставить("ПолноеИмяФайла", ДиалогВыбораФайла.ПолноеИмяФайла);
	КонецЕсли;
	
	Если Не ПараметрыВыполнения.Свойство("ИмяСоздаваемогоФайла") Тогда
		ПараметрыВыполнения.Вставить("ИмяСоздаваемогоФайла", Неопределено);
	КонецЕсли;
	
	ФайлКлиента = Новый Файл(ПараметрыВыполнения.ПолноеИмяФайла);
	
	ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьВозможностьЗагрузкиФайла(ФайлКлиента);
	
	ОбщиеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами();
	ИзвлекатьТекстыФайловНаКлиенте = НЕ ОбщиеНастройки.ИзвлекатьТекстыФайловНаСервере;
	Если ИзвлекатьТекстыФайловНаКлиенте Тогда
		АдресВременногоХранилищаТекста = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
			ФайлКлиента.ПолноеИмя,
			ПараметрыВыполнения.ФормаВладелец.УникальныйИдентификатор);
	Иначе
		АдресВременногоХранилищаТекста = "";
	КонецЕсли;
	
	Если ПараметрыВыполнения.ИмяСоздаваемогоФайла <> Неопределено Тогда
		ИмяСоздания = ПараметрыВыполнения.ИмяСоздаваемогоФайла;
	Иначе
		ИмяСоздания = ФайлКлиента.ИмяБезРасширения;
	КонецЕсли;
	
	ИмяФайла  = ИмяСоздания + ФайлКлиента.Расширение;
	РазмерВМб = ФайлКлиента.Размер() / (1024 * 1024);
	
	ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Идет сохранение файла ""%1"" (%2 Мб).
		           |Пожалуйста, подождите...'"),
		ИмяФайла,
		ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	Состояние(ТекстСостояния);
	
	// Помещение файла во временное хранилище.
	АдресВременногоХранилищаФайла = "";
	
	ПомещаемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(ФайлКлиента.ПолноеИмя, "");
	ПомещаемыеФайлы.Добавить(Описание);
	
	ПомещенныеФайлы = Новый Массив;
	ФайлыПомещены = ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ПараметрыВыполнения.ФормаВладелец.УникальныйИдентификатор);
	Если НЕ ФайлыПомещены Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 1 Тогда
		АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
	КонецЕсли;
	
	// Создание карточки Файла в БД.
	Попытка
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией", ФайлКлиента);
		СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
		СведенияОФайле.АдресВременногоХранилищаТекста = АдресВременногоХранилищаТекста;
		СведенияОФайле.ЗаписатьВИсторию = Истина;
		СведенияОФайле.ИмяБезРасширения = ИмяСоздания;
		Результат.ФайлСсылка = РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(ПараметрыВыполнения.ВладелецФайла, СведенияОФайле);
		Результат.ФайлДобавлен = Истина;
	Исключение
		Результат.ТекстОшибки = ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(ИнформацияОбОшибке());
	КонецПопытки;
	Состояние();
	
	Если Результат.ТекстОшибки <> "" Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Владелец", ПараметрыВыполнения.ВладелецФайла);
	ПараметрыОповещения.Вставить("Файл",     Результат.ФайлСсылка);
	ПараметрыОповещения.Вставить("Событие",  "СозданФайл");
	Оповестить("Запись_Файл", ПараметрыОповещения);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Создание:'"),
		ПолучитьНавигационнуюСсылку(Результат.ФайлСсылка),
		Результат.ФайлСсылка,
		БиблиотекаКартинок.Информация32);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет можно ли освободить Файл.
//
// Параметры:
//  ОбъектСсылка - СправочникСсылка.Файлы - файл.
//
//  РедактируетТекущийПользователь - Булево -
//                 файл редактирует текущий пользователь.
//
//  Редактирует  - СправочникСсылка.Пользователи - тот, кто занял файл.
//
//  СтрокаОшибки - Строка, в которой возвращается причина ошибки в случае неуспеха
//                 (например, "Файл занят другим пользователем").
//
// Возвращаемое значение:
//  Булево. Истина, если файл можно освободить.
//
Функция ВозможностьОсвободитьФайл(ОбъектСсылка,
                                  РедактируетТекущийПользователь,
                                  Редактирует,
                                  СтрокаОшибки = "")
	
	Если РедактируетТекущийПользователь Тогда 
		Возврат Истина;
	ИначеЕсли Не ЗначениеЗаполнено(Редактирует) Тогда
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно освободить файл ""%1"",
			           |т.к. он никем не занят.'"),
			Строка(ОбъектСсылка));
		Возврат Ложь;
	Иначе
		Если ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ЭтоПолноправныйПользователь Тогда
			Возврат Истина;
		КонецЕсли;
		
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно освободить файл ""%1"",
			           |т.к. он занят пользователем ""%2"".'"),
			Строка(ОбъектСсылка),
			Строка(Редактирует));
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Освобождает файл без обновления.
//
// Параметры:
//  ДанныеФайла             - Структура с данными файла.
//  УникальныйИдентификатор - УникальныйИдентификатор управляемой формы.
//
Процедура ОсвободитьФайлБезВопроса(ДанныеФайла, УникальныйИдентификатор = Неопределено)
	
	РаботаСФайламиСлужебныйВызовСервера.ОсвободитьФайл(ДанныеФайла, УникальныйИдентификатор);
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	Если РасширениеПодключено Тогда
		ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, Истина, ДанныеФайла.РабочийКаталогВладельца <> "");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Файл освобожден'"),
		ДанныеФайла.НавигационнаяСсылка, ДанныеФайла.ПолноеНаименованиеВерсии, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Перемещает файлы в указанную папку.
//
// Параметры:
//  ОбъектыСсылка - Массив - массив файлов.
//
//  Папка         - СправочникСсылка.ПапкиФайлов - папка,
//                  в которую требуется перенести файлы.
//
Процедура ПеренестиФайлыВПапку(ОбъектыСсылка, Папка) Экспорт
	
	ДанныеФайлов = РаботаСФайламиСлужебныйВызовСервера.ПеренестиФайлы(ОбъектыСсылка, Папка);
	
	Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Перенос файла'"),
			ДанныеФайла.НавигационнаяСсылка,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файл ""%1""
				           |перенесен в папку ""%2"".'"),
				Строка(ДанныеФайла.Ссылка),
				Строка(Папка)),
			БиблиотекаКартинок.Информация32);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Завершение редактирования Файла и помещение его на сервер.

// Завершить редактирования Файла и поместить его на сервер.
//
// Параметры:
//   Параметры - Структура - см. ПараметрыОбновленияФайла.
//
Процедура ЗакончитьРедактирование(Параметры)
	
	Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеПослеУстановкиРасширения", ЭтотОбъект, Параметры);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	ПараметрыВыполнения.Вставить("ДанныеФайла", Неопределено);
	
	Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		ЗакончитьРедактированиеСРасширением(ПараметрыВыполнения);
	Иначе
		ЗакончитьРедактированиеБезРасширения(ПараметрыВыполнения);
	КонецЕсли;
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеСРасширением(ПараметрыВыполнения)
	// Веб-клиент с расширением для работы с файлами,
	// Тонкий клиент,
	// Толстый клиент.
	
	ПараметрыВыполнения.ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИРабочийКаталог(ПараметрыВыполнения.ОбъектСсылка);
	
	// Проверка возможности освобождения файла.
	ТекстОшибки = "";
	МожноОсвободитьФайл = ВозможностьОсвободитьФайл(
		ПараметрыВыполнения.ДанныеФайла.Ссылка,
		ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь,
		ПараметрыВыполнения.ДанныеФайла.Редактирует,
		ТекстОшибки);
	Если Не МожноОсвободитьФайл Тогда
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("ПолныйПутьКФайлу", ПараметрыВыполнения.ПереданныйПолныйПутьКФайлу);
	Если ПараметрыВыполнения.ПолныйПутьКФайлу = "" Тогда
		ПараметрыВыполнения.ПолныйПутьКФайлу = ПараметрыВыполнения.ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге;
	КонецЕсли;
	
	// Проверка наличия файла на диске.
	ПараметрыВыполнения.Вставить("ФайлНовойВерсии", Новый Файл(ПараметрыВыполнения.ПолныйПутьКФайлу));
	Если Не ПараметрыВыполнения.ФайлНовойВерсии.Существует() Тогда
		Если ПараметрыВыполнения.ПрименитьКоВсем = Ложь Тогда
			Если Не ПустаяСтрока(ПараметрыВыполнения.ПолныйПутьКФайлу) Тогда
				СтрокаПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось поместить файл
					           |""%1"" (%2),
					           |в хранилище файлов, т.к. он не найден в рабочем каталоге.
					           |
					           |Освободить файл?'"),
					Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка),
					ПараметрыВыполнения.ПолныйПутьКФайлу);
			Иначе
				СтрокаПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось поместить файл ""%1"",
					           |в хранилище файлов, т.к. он не найден в рабочем каталоге.
					           |
					           |Освободить файл?'"),
					Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка));
				СтрокаПредупреждения = СтрокаПредупреждения + ".";
			КонецЕсли;
			
			Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеСРасширениемПослеОтветаНаВопросОсвободитьФайл", ЭтотОбъект, ПараметрыВыполнения);
			ПоказатьВопрос(Обработчик, СтрокаПредупреждения, РежимДиалогаВопрос.ДаНет);
		Иначе
			ЗакончитьРедактированиеСРасширениемПослеОтветаНаВопросОсвободитьФайл(-1, ПараметрыВыполнения)
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Попытка
		ТолькоЧтение = ПараметрыВыполнения.ФайлНовойВерсии.ПолучитьТолькоЧтение();
		ПараметрыВыполнения.ФайлНовойВерсии.УстановитьТолькоЧтение(Не ТолькоЧтение);
		ПараметрыВыполнения.ФайлНовойВерсии.УстановитьТолькоЧтение(ТолькоЧтение);
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось поместить файл ""%1"" в хранилище файлов,
			|возможно он заблокирован другой программой.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка));
		ВызватьИсключение ТекстОшибки + Символы.ПС + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	// Запрос комментария и признака хранения версии.
	Если ПараметрыВыполнения.СоздатьНовуюВерсию = Неопределено Тогда
		ФормаВозврата = РаботаСФайламиСлужебныйКлиентПовтИсп.ФормаВозвратаФайла();
		
		ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
		СоздатьНовуюВерсиюДоступность = Истина;
		
		Если ПараметрыВыполнения.ДанныеФайла.ХранитьВерсии Тогда
			ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
			
			// Если автор текущей версии не текущий пользователь, тогда
			// отключается доступность флажка «Не создавать новую версию».
			Если ПараметрыВыполнения.ДанныеФайла.АвторТекущейВерсии <> ПараметрыВыполнения.ДанныеФайла.Редактирует Тогда
				СоздатьНовуюВерсиюДоступность = Ложь;
			Иначе
				СоздатьНовуюВерсиюДоступность = Истина;
			КонецЕсли;
		Иначе
			ПараметрыВыполнения.СоздатьНовуюВерсию = Ложь;
			СоздатьНовуюВерсиюДоступность = Ложь;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ФайлСсылка",                    ПараметрыВыполнения.ДанныеФайла.Ссылка);
		СтруктураПараметров.Вставить("КомментарийКВерсии",            "");
		СтруктураПараметров.Вставить("СоздатьНовуюВерсию",            ПараметрыВыполнения.СоздатьНовуюВерсию);
		СтруктураПараметров.Вставить("СоздатьНовуюВерсиюДоступность", СоздатьНовуюВерсиюДоступность);
		
		ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
		
		Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеСРасширениемПослеПомещенияФайлаНаСервер", ЭтотОбъект, ПараметрыВыполнения);
		УстановитьОповещениеФормы(ФормаВозврата, Обработчик);
		
		ФормаВозврата.Открыть();
		
	Иначе // Параметры СоздатьНовуюВерсию и КомментарийКВерсии переданы извне.
		
		Если ПараметрыВыполнения.ДанныеФайла.ХранитьВерсии Тогда
			
			// Если автор текущей версии не текущий пользователь, тогда
			// отключается доступность флажка «Не создавать новую версию».
			Если ПараметрыВыполнения.ДанныеФайла.АвторТекущейВерсии <> ПараметрыВыполнения.ДанныеФайла.Редактирует Тогда
				ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
			КонецЕсли;
			
		Иначе
			ПараметрыВыполнения.СоздатьНовуюВерсию = Ложь;
		КонецЕсли;
		
		ЗакончитьРедактированиеСРасширениемПослеПроверкиНовойВерсии(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеСРасширениемПослеОтветаНаВопросОсвободитьФайл(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ <> -1 Тогда
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПараметрыВыполнения.ОсвобождатьФайлы = Истина;
		Иначе
			ПараметрыВыполнения.ОсвобождатьФайлы = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыполнения.ОсвобождатьФайлы Тогда
		ОсвободитьФайлБезВопроса(ПараметрыВыполнения.ДанныеФайла, ПараметрыВыполнения.ИдентификаторФормы);
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	Иначе
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
	КонецЕсли;
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеСРасширениемПослеПомещенияФайлаНаСервер(Результат, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	Если Результат.КодВозврата <> КодВозвратаДиалога.ОК Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.СоздатьНовуюВерсию = Результат.СоздатьНовуюВерсию;
	ПараметрыВыполнения.КомментарийКВерсии = Результат.КомментарийКВерсии;
	
	ЗакончитьРедактированиеСРасширениемПослеПроверкиНовойВерсии(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеСРасширениемПослеПроверкиНовойВерсии(ПараметрыВыполнения)
	
	СтараяВерсия = ПараметрыВыполнения.ДанныеФайла.ТекущаяВерсия;
	
	Если Не ПараметрыВыполнения.ДанныеФайла.Зашифрован Тогда
		ЗакончитьРедактированиеСРасширениемПослеПроверкиЗашифрован(, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	// Файл с признаком шифрован снова шифруется для тех же сертификатов.
	
	ПараметрыВыполнения.Вставить("ОповещениеПослеШифрования", Новый ОписаниеОповещения(
		"ЗакончитьРедактированиеСРасширениемПослеПроверкиЗашифрован", ЭтотОбъект, ПараметрыВыполнения));
	
	ЗашифроватьФайлПередПомещениемВХранилищеФайлов(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеСРасширениемПослеПроверкиЗашифрован(Неопределен, ПараметрыВыполнения) Экспорт
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией", ПараметрыВыполнения.ФайлНовойВерсии);
	СведенияОФайле.Комментарий = ПараметрыВыполнения.КомментарийКВерсии;
	СведенияОФайле.ХранитьВерсии = ПараметрыВыполнения.СоздатьНовуюВерсию;
	
	Если ПараметрыВыполнения.Свойство("АдресПослеШифрования") Тогда
		СведенияОФайле.АдресВременногоХранилищаФайла = ПараметрыВыполнения.АдресПослеШифрования;
	Иначе
		РазмерВМб = СведенияОФайле.Размер / (1024 * 1024);
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполняется передача файла ""%1"" (%2 Мб)...
			           |Пожалуйста, подождите.'"),
			СведенияОФайле.ИмяБезРасширения,
			ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
		Состояние(ТекстПояснения);
		
		ПомещаемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ПараметрыВыполнения.ПолныйПутьКФайлу, "");
		ПомещаемыеФайлы.Добавить(Описание);
		
		ПомещенныеФайлы = Новый Массив;
		Попытка
			ФайлыПомещены = ПоместитьФайлы(ПомещаемыеФайлы,	ПомещенныеФайлы,, Ложь, ПараметрыВыполнения.ИдентификаторФормы);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось поместить файл в хранилище файлов по причине:
				|""%1"".
				|
				|Повторить операцию?'"),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			
			Оповещение  = Новый ОписаниеОповещения("ЗакончитьРедактированиеСРасширениемПослеПроверкиЗашифрованПовтор", ЭтотОбъект, ПараметрыВыполнения);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ПовторитьОтмена);
			Возврат;
		КонецПопытки;

		Состояние();
		Если Не ФайлыПомещены Тогда
			ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
			Возврат;
		КонецЕсли;
		
		Если ПомещенныеФайлы.Количество() = 1 Тогда
			СведенияОФайле.АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
		КонецЕсли;
	КонецЕсли;
	
	ОбщиеНастройкиРаботыСФайлами = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами();
	Если Не ОбщиеНастройкиРаботыСФайлами.ИзвлекатьТекстыФайловНаСервере Тогда
		Попытка
			СведенияОФайле.АдресВременногоХранилищаТекста = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
				ПараметрыВыполнения.ПолныйПутьКФайлу, ПараметрыВыполнения.ИдентификаторФормы,, ПараметрыВыполнения.Кодировка);
		Исключение
			ЗакончитьРедактированиеСРасширениемОбработкаИсключения(ИнформацияОбОшибке(), ПараметрыВыполнения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ВРабочемКаталогеВладельца = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "";
	
	НеМенятьЗаписьВРабочемКаталоге = Ложь;
	Если ПараметрыВыполнения.ПереданныйПолныйПутьКФайлу <> "" Тогда
		НеМенятьЗаписьВРабочемКаталоге = Истина;
	КонецЕсли;
	
	Попытка
		ВерсияОбновлена = РаботаСФайламиСлужебныйВызовСервера.СохранитьИзмененияИОсвободитьФайл(ПараметрыВыполнения.ДанныеФайла, СведенияОФайле, 
			НеМенятьЗаписьВРабочемКаталоге, ПараметрыВыполнения.ПолныйПутьКФайлу, ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя(), 
			ПараметрыВыполнения.ИдентификаторФормы);
	Исключение
		ЗакончитьРедактированиеСРасширениемОбработкаИсключения(ИнформацияОбОшибке(), ПараметрыВыполнения);
		Возврат;
	КонецПопытки;
	
	ПараметрыВыполнения.Вставить("ВерсияОбновлена", ВерсияОбновлена);
	НоваяВерсия = ПараметрыВыполнения.ДанныеФайла.ТекущаяВерсия;
	
	Если ПараметрыВыполнения.ПереданныйПолныйПутьКФайлу = "" Тогда
		
		УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования =
			ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования;
		
		Если УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования = Неопределено Тогда
			УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования = Ложь;
		КонецЕсли;
		
		Если ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "" Тогда
			УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования = Ложь;
		КонецЕсли;
		
		Если УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования Тогда
			Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеСРасширениемПослеУдаленияФайлаИзРабочегоКаталога", ЭтотОбъект, ПараметрыВыполнения);
			УдалитьФайлИзРабочегоКаталога(Обработчик, НоваяВерсия);
			Возврат;
		Иначе
			Файл = Новый Файл(ПараметрыВыполнения.ПолныйПутьКФайлу);
			Файл.УстановитьТолькоЧтение(Истина);
		КонецЕсли;
	КонецЕсли;
	
	ЗакончитьРедактированиеСРасширениемПослеУдаленияФайлаИзРабочегоКаталога(-1, ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
//
Процедура ЗакончитьРедактированиеСРасширениемПослеПроверкиЗашифрованПовтор(Результат, Параметр) Экспорт
	Если Результат = КодВозвратаДиалога.Повторить Тогда
		ЗакончитьРедактированиеСРасширениемПослеПроверкиЗашифрован(, Параметр);
	КонецЕсли;
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеСРасширениемПослеУдаленияФайлаИзРабочегоКаталога(Результат, ПараметрыВыполнения) Экспорт
	
	Если ПараметрыВыполнения.ПоказыватьОповещение Тогда
		Если ПараметрыВыполнения.ВерсияОбновлена Тогда
			ШаблонПояснения = НСтр("ru = 'Файл ""%1""
			                             |обновлен и освобожден.'");
		Иначе
			ШаблонПояснения = НСтр("ru = 'Файл ""%1""
			                             |не изменился и освобожден.'");
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Редактирование закончено'"),
			ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылка,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонПояснения, Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка)),
			БиблиотекаКартинок.Информация32);
		
		Если Не ПараметрыВыполнения.ВерсияОбновлена Тогда
			Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеСРасширениемПослеПоказаОповещения", ЭтотОбъект, ПараметрыВыполнения);
			ПоказатьИнформациюФайлНеБылИзменен(Обработчик);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗакончитьРедактированиеСРасширениемПослеПоказаОповещения(-1, ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеСРасширениемПослеПоказаОповещения(Результат, ПараметрыВыполнения) Экспорт
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеСРасширениемОбработкаИсключения(ИнформацияОбОшибке, ПараметрыВыполнения)
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось поместить файл ""%1""
		           |в хранилище файлов по причине
		           |""%2"".
		           |
		           |Повторить операцию?'"),
		Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка),
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
	Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеСРасширениемПослеОтветаНаВопросПовторить", ЭтотОбъект, ПараметрыВыполнения);
	ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ПовторитьОтмена);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеСРасширениемПослеОтветаНаВопросПовторить(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	ЗакончитьРедактированиеСРасширениемПослеПроверкиЗашифрован(, ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеБезРасширения(ПараметрыВыполнения)
	// Веб-клиент без расширения для работы с файлами.
	
	Если ПараметрыВыполнения.ДанныеФайла = Неопределено Тогда
		ПараметрыВыполнения.ДанныеФайла  = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(ПараметрыВыполнения.ОбъектСсылка);
		ПараметрыВыполнения.ХранитьВерсии                  = ПараметрыВыполнения.ДанныеФайла.ХранитьВерсии;
		ПараметрыВыполнения.РедактируетТекущийПользователь = ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь;
		ПараметрыВыполнения.Редактирует                    = ПараметрыВыполнения.ДанныеФайла.Редактирует;
		ПараметрыВыполнения.АвторТекущейВерсии             = ПараметрыВыполнения.ДанныеФайла.АвторТекущейВерсии;
		ПараметрыВыполнения.Кодировка                      = ПараметрыВыполнения.ДанныеФайла.КодировкаТекущейВерсии;
	КонецЕсли;
	
	// Проверка возможности освобождения файла.
	ТекстОшибки = "";
	МожноОсвободитьФайл = ВозможностьОсвободитьФайл(
		ПараметрыВыполнения.ОбъектСсылка,
		ПараметрыВыполнения.РедактируетТекущийПользователь,
		ПараметрыВыполнения.Редактирует,
		ТекстОшибки);
	Если Не МожноОсвободитьФайл Тогда
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("ПолныйПутьКФайлу", "");
	
	Если ПараметрыВыполнения.СоздатьНовуюВерсию = Неопределено Тогда
		ФормаВозврата = РаботаСФайламиСлужебныйКлиентПовтИсп.ФормаВозвратаФайла();
		
		ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
		СоздатьНовуюВерсиюДоступность = Истина;
		
		Если ПараметрыВыполнения.ХранитьВерсии Тогда
			ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
			
			// Если автор текущей версии не текущий пользователь, тогда
			// отключается доступность флажка «Не создавать новую версию».
			Если ПараметрыВыполнения.АвторТекущейВерсии <> ПараметрыВыполнения.Редактирует Тогда
				СоздатьНовуюВерсиюДоступность = Ложь;
			Иначе
				СоздатьНовуюВерсиюДоступность = Истина;
			КонецЕсли;
		Иначе
			ПараметрыВыполнения.СоздатьНовуюВерсию = Ложь;
			СоздатьНовуюВерсиюДоступность = Ложь;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ФайлСсылка",                    ПараметрыВыполнения.ОбъектСсылка);
		СтруктураПараметров.Вставить("КомментарийКВерсии",            "");
		СтруктураПараметров.Вставить("СоздатьНовуюВерсию",            ПараметрыВыполнения.СоздатьНовуюВерсию);
		СтруктураПараметров.Вставить("СоздатьНовуюВерсиюДоступность", СоздатьНовуюВерсиюДоступность);
		
		ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
		
		Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеБезРасширенияПослеПомещенияФайлаНаСервер", ЭтотОбъект, ПараметрыВыполнения);
		УстановитьОповещениеФормы(ФормаВозврата, Обработчик);
		
		ФормаВозврата.Открыть();
		
	Иначе // Параметры СоздатьНовуюВерсию и КомментарийКВерсии переданы извне.
		
		Если ПараметрыВыполнения.ХранитьВерсии Тогда
			
			// Если автор текущей версии не текущий пользователь, тогда
			// отключается доступность флажка «Не создавать новую версию».
			Если ПараметрыВыполнения.АвторТекущейВерсии <> ПараметрыВыполнения.Редактирует Тогда
				ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
			КонецЕсли;
			
		Иначе
			ПараметрыВыполнения.СоздатьНовуюВерсию = Ложь;
		КонецЕсли;
		
		ЗакончитьРедактированиеБезРасширенияПослеПроверкиНовойВерсии(ПараметрыВыполнения)
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеБезРасширенияПослеПомещенияФайлаНаСервер(Результат, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	Если Результат.КодВозврата <> КодВозвратаДиалога.ОК Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.СоздатьНовуюВерсию = Результат.СоздатьНовуюВерсию;
	ПараметрыВыполнения.КомментарийКВерсии = Результат.КомментарийКВерсии;
	
	ЗакончитьРедактированиеБезРасширенияПослеПроверкиНовойВерсии(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеБезРасширенияПослеПроверкиНовойВерсии(ПараметрыВыполнения)
	
	Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеБезРасширенияПослеНапоминания", ЭтотОбъект, ПараметрыВыполнения);
	ПоказатьНапоминаниеПередПоместитьФайл(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеБезРасширенияПослеНапоминания(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Или Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеБезРасширенияПослеЗагрузкиФайла", ЭтотОбъект, ПараметрыВыполнения);
	НачатьПомещениеФайла(Обработчик, , ПараметрыВыполнения.ПолныйПутьКФайлу, , ПараметрыВыполнения.ИдентификаторФормы);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеБезРасширенияПослеЗагрузкиФайла(Помещен, Адрес, ВыбранноеИмяФайла, ПараметрыВыполнения) Экспорт
	
	Если Не Помещен Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("АдресЗагруженногоФайла", Адрес);
	ПараметрыВыполнения.Вставить("ВыбранноеИмяФайла", ВыбранноеИмяФайла);
	
	Если ПараметрыВыполнения.ДанныеФайла = Неопределено Тогда
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(ПараметрыВыполнения.ОбъектСсылка);
	Иначе
		ДанныеФайла = ПараметрыВыполнения.ДанныеФайла;
	КонецЕсли;
	Если Не ДанныеФайла.Зашифрован Тогда
		ЗакончитьРедактированиеБезРасширенияПослеШифрованияФайла(Null, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	Если СертификатыНеУказаны(ДанныеФайла.МассивСертификатовШифрования) Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	// Не нужно ПредложитьУстановкуРасширенияРаботыСФайлами(), т.к. все делается в памяти через ДвоичныеДанные.
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Шифрование файла'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("Данные",              Адрес);
	ОписаниеДанных.Вставить("Представление",       ПараметрыВыполнения.ОбъектСсылка);
	ОписаниеДанных.Вставить("НаборСертификатов",   ПараметрыВыполнения.ОбъектСсылка);
	ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
	ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ЗакончитьРедактированиеБезРасширенияПослеШифрованияФайла",
		ЭтотОбъект, ПараметрыВыполнения);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.Зашифровать(ОписаниеДанных, , ОбработчикПродолжения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеБезРасширенияПослеШифрованияФайла(ОписаниеДанных, ПараметрыВыполнения) Экспорт
	
	Если ОписаниеДанных = Null Тогда
		Адрес = ПараметрыВыполнения.АдресЗагруженногоФайла;
		
	ИначеЕсли Не ОписаниеДанных.Успех Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	Иначе
		Если ТипЗнч(ОписаниеДанных.ЗашифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
			Адрес = ПоместитьВоВременноеХранилище(ОписаниеДанных.ЗашифрованныеДанные,
				ПараметрыВыполнения.ИдентификаторФормы);
		Иначе
			Адрес = ОписаниеДанных.ЗашифрованныеДанные;
		КонецЕсли;
	КонецЕсли;
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	
	СведенияОФайле.АдресВременногоХранилищаФайла = Адрес;
	СведенияОФайле.Комментарий = ПараметрыВыполнения.КомментарийКВерсии;
	
	СтруктураПути = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПараметрыВыполнения.ВыбранноеИмяФайла);
	Если Не ПустаяСтрока(СтруктураПути.Расширение) Тогда
		СведенияОФайле.РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураПути.Расширение);
		СведенияОФайле.ИмяБезРасширения = СтруктураПути.ИмяБезРасширения;
	КонецЕсли;
	СведенияОФайле.ХранитьВерсии = ПараметрыВыполнения.СоздатьНовуюВерсию;
	
	Попытка
		Результат = РаботаСФайламиСлужебныйВызовСервера.СохранитьИзмененияИОсвободитьФайлПоСсылке(ПараметрыВыполнения.ОбъектСсылка,
			СведенияОФайле, ПараметрыВыполнения.ПолныйПутьКФайлу, ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя(), 
			ПараметрыВыполнения.ИдентификаторФормы);
		ПараметрыВыполнения.ДанныеФайла = Результат.ДанныеФайла;
	Исключение
		ЗакончитьРедактированиеОбработчикИсключения(ИнформацияОбОшибке(), ПараметрыВыполнения);
		Возврат;
	КонецПопытки;
	
	НоваяВерсия = ПараметрыВыполнения.ДанныеФайла.ТекущаяВерсия;
	Если ПараметрыВыполнения.ПоказыватьОповещение Тогда
		Если Результат.Успешно Тогда
			ШаблонПояснения = НСтр("ru = 'Файл ""%1""
			                             |обновлен и освобожден.'");
		Иначе
			ШаблонПояснения = НСтр("ru = 'Файл ""%1""
			                             |не изменился и освобожден.'");
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Редактирование закончено'"),
			ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылка,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонПояснения, Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка)),
			БиблиотекаКартинок.Информация32);
		
		Если Не Результат.Успешно Тогда
			Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеБезРасширенияПослеПоказаОповещения", ЭтотОбъект, ПараметрыВыполнения);
			ПоказатьИнформациюФайлНеБылИзменен(Обработчик);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗакончитьРедактированиеБезРасширенияПослеПоказаОповещения(-1, ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеБезРасширенияПослеПоказаОповещения(Результат, ПараметрыВыполнения) Экспорт
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеОбработчикИсключения(ИнформацияОбОшибке, ПараметрыВыполнения)
	
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось поместить файл ""%1""
		           |в хранилище файлов по причине
		           |""%2"".
		           |
		           |Повторить операцию?'"),
		Строка(ПараметрыВыполнения.ОбъектСсылка),
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
	Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеБезРасширенияПослеОтветаНаВопросПовторить", ЭтотОбъект, ПараметрыВыполнения);
	ПоказатьВопрос(Обработчик, ТекстОшибки, РежимДиалогаВопрос.ПовторитьОтмена);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеБезРасширенияПослеОтветаНаВопросПовторить(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
	Иначе
		ЗакончитьРедактированиеБезРасширенияПослеПроверкиНовойВерсии(ПараметрыВыполнения);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Выбор файла и создание из него новой версии.

// Выбирает на диске файл и создает из него новую версию.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ДанныеФайла - структура с данными файла.
//  ИдентификаторФормы - уникальный идентификатор формы.
//
// Возвращаемое значение:
//  Булево. Истина, если операция выполнена успешно.
//
Процедура ОбновитьИзФайлаНаДиске(ОбработчикРезультата, ДанныеФайла, ИдентификаторФормы)
	
	Если Не ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		ВернутьРезультат(ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
		
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Если Не ПустаяСтрока(ДанныеФайла.РабочийКаталогВладельца) Тогда
		ПутьВыбора = ДанныеФайла.РабочийКаталогВладельца;
	Иначе
		ПутьВыбора = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляОбновитьИзФайла");
	КонецЕсли;
	
	Если ПутьВыбора = Неопределено Или ПутьВыбора = "" Тогда
		#Если Не ВебКлиент Тогда
			Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Данная команда не поддерживается в базовой версии.'"));
				ВернутьРезультат(ОбработчикРезультата, Ложь);
				Возврат;
			КонецЕсли;
		#КонецЕсли
		ПутьВыбора = ФайловыеФункцииСлужебныйКлиент.КаталогМоиДокументы();
	КонецЕсли;
	
	Диалог.Заголовок                   = НСтр("ru = 'Выбор файла'");
	Диалог.ПредварительныйПросмотр     = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Ложь;
	Диалог.МножественныйВыбор          = Ложь;
	Диалог.Каталог                     = ПутьВыбора;
	
	Диалог.ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение); 
	
	
	РасширениеДляЗашифрованныхФайлов = "";
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодписьКлиентСервер =
			ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиентСервер");
		
		Если МодульЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().ИспользоватьШифрование Тогда
			РасширениеДляЗашифрованныхФайлов =
				МодульЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки().РасширениеДляЗашифрованныхФайлов;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РасширениеДляЗашифрованныхФайлов) Тогда
		Фильтр = НСтр("ru = 'Файл (*.%1)|*.%1|Зашифрованный файл (*.%2)|*.%2|Все файлы (*.*)|*.*'");
		Диалог.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Фильтр, ДанныеФайла.Расширение, РасширениеДляЗашифрованныхФайлов);
	Иначе
		Фильтр = НСтр("ru = 'Файл (*.%1)|*.%1|Все файлы (*.*)|*.*'");
		Диалог.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Фильтр, ДанныеФайла.Расширение);
	КонецЕсли;
	
	Если Не Диалог.Выбрать() Тогда
		ВернутьРезультат(ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	ПутьВыбораПрежний = ПутьВыбора;
	ФайлНаДиске = Новый Файл(Диалог.ПолноеИмяФайла);
	ПутьВыбора = ФайлНаДиске.Путь;
	
	Если ПустаяСтрока(ДанныеФайла.РабочийКаталогВладельца) Тогда
		Если ПутьВыбораПрежний <> ПутьВыбора Тогда
			ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПапкаДляОбновитьИзФайла",  ПутьВыбора);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ДанныеФайла",          ДанныеФайла);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы",   ИдентификаторФормы);
	ПараметрыВыполнения.Вставить("ДиалогПолноеИмяФайла", Диалог.ПолноеИмяФайла);
	ПараметрыВыполнения.Вставить("СоздатьНовуюВерсию",   Неопределено);
	ПараметрыВыполнения.Вставить("КомментарийКВерсии",   Неопределено);
	
	ПараметрыВыполнения.Вставить("ФайлНаДиске", Новый Файл(ПараметрыВыполнения.ДиалогПолноеИмяФайла));
	ПараметрыВыполнения.Вставить("ИмяИРасширениеФайлаНаДиске", ПараметрыВыполнения.ФайлНаДиске.Имя);
	ПараметрыВыполнения.Вставить("ИмяФайла", ПараметрыВыполнения.ФайлНаДиске.ИмяБезРасширения);
	
	ПараметрыВыполнения.Вставить("ВремяИзмененияВыбранное",
		ПараметрыВыполнения.ФайлНаДиске.ПолучитьУниверсальноеВремяИзменения());
	
	ПараметрыВыполнения.Вставить("РасширениеФайлаНаДиске",
		ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ПараметрыВыполнения.ФайлНаДиске.Расширение));
	
	ПараметрыВыполнения.Вставить("РасширениеДляЗашифрованныхФайлов", РасширениеДляЗашифрованныхФайлов);
	
	ПараметрыВыполнения.Вставить("ФайлЗашифрован", НРег(ПараметрыВыполнения.РасширениеФайлаНаДиске)
		= НРег(ПараметрыВыполнения.РасширениеДляЗашифрованныхФайлов));
	
	Если Не ПараметрыВыполнения.ФайлЗашифрован Тогда
		ОбновитьИзФайлаНаДискеПродолжение(ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	// отрезаем .p7m в конце
	Позиция = СтрНайти(ПараметрыВыполнения.ИмяИРасширениеФайлаНаДиске, ПараметрыВыполнения.РасширениеФайлаНаДиске);
	ПараметрыВыполнения.ИмяИРасширениеФайлаНаДиске = Лев(ПараметрыВыполнения.ИмяИРасширениеФайлаНаДиске, Позиция - 2);
	
	// отрезаем .p7m в конце
	ПараметрыВыполнения.Вставить("ДиалогПолноеИмяФайлаПрежнее", ПараметрыВыполнения.ДиалогПолноеИмяФайла);
	Позиция = СтрНайти(ПараметрыВыполнения.ДиалогПолноеИмяФайла, ПараметрыВыполнения.РасширениеФайлаНаДиске);
	ПараметрыВыполнения.ДиалогПолноеИмяФайла = Лев(ПараметрыВыполнения.ДиалогПолноеИмяФайла, Позиция - 2);
	
	ВременныйФайлНешифрованный = Новый Файл(ПараметрыВыполнения.ДиалогПолноеИмяФайла);
	
	ПараметрыВыполнения.РасширениеФайлаНаДиске = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(
		ВременныйФайлНешифрованный.Расширение);
	
	ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(
		ПараметрыВыполнения.РасширениеФайлаНаДиске);
	
	// Тут расшифровать и поставить ту же дату изменения, что и ДиалогПолноеИмяФайлаПрежнее.
	
	ПомещаемыеФайлы = Новый Массив;
	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ПараметрыВыполнения.ДиалогПолноеИмяФайлаПрежнее);
	ПомещаемыеФайлы.Добавить(ОписаниеФайла);
	
	НачатьПомещениеФайлов(Новый ОписаниеОповещения("ОбновитьИзФайлаНаДискеПередРасшифровкой", ЭтотОбъект, ПараметрыВыполнения),
		ПомещаемыеФайлы, , Ложь, ПараметрыВыполнения.ИдентификаторФормы);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОбновитьИзФайлаНаДискеПередРасшифровкой(ПомещаемыеФайлы, ПараметрыВыполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(ПомещаемыеФайлы) Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",              НСтр("ru = 'Расшифровка файла'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",       НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("Данные",                ПомещаемыеФайлы[0].Хранение);
	ОписаниеДанных.Вставить("Представление",         ПараметрыВыполнения.ДанныеФайла.Ссылка);
	ОписаниеДанных.Вставить("СертификатыШифрования", Новый Массив);
	ОписаниеДанных.Вставить("СообщитьОЗавершении",   Ложь);
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ОбновитьИзФайлаНаДискеПослеРасшифровки",
		ЭтотОбъект, ПараметрыВыполнения);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработчикПродолжения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОбновитьИзФайлаНаДискеПослеРасшифровки(ОписаниеДанных, ПараметрыВыполнения) Экспорт
	
	Если Не ОписаниеДанных.Успех Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеДанных.РасшифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
		АдресФайла = ПоместитьВоВременноеХранилище(ОписаниеДанных.РасшифрованныеДанные,
			ПараметрыВыполнения.ИдентификаторФормы);
	Иначе
		АдресФайла = ОписаниеДанных.РасшифрованныеДанные;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("АдресФайла", АдресФайла);
	
	ПередаваемыеФайлы = Новый Массив;
	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ПараметрыВыполнения.ДиалогПолноеИмяФайла, АдресФайла);
	ПередаваемыеФайлы.Добавить(ОписаниеФайла);
	
	Если Не ПолучитьФайлы(ПередаваемыеФайлы, , , Ложь) Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	ВременныйФайлНешифрованный = Новый Файл(ПараметрыВыполнения.ДиалогПолноеИмяФайла);
	ВременныйФайлНешифрованный.УстановитьУниверсальноеВремяИзменения(ПараметрыВыполнения.ВремяИзмененияВыбранное);
	
	ПараметрыВыполнения.ФайлЗашифрован = Ложь;
	
	ОбновитьИзФайлаНаДискеПродолжение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОбновитьИзФайлаНаДискеПродолжение(ПараметрыВыполнения)
	
	// Данные файла могли измениться - обновим.
	ПараметрыВыполнения.ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИРабочийКаталог(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
	ПредыдущаяВерсия = ПараметрыВыполнения.ДанныеФайла.Версия;
	
	ИмяИРасширениеФайлаВБазе = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, ПараметрыВыполнения.ДанныеФайла.Расширение);
	
	ПараметрыВыполнения.Вставить("ДатаФайлаВБазе", ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная);
	
	Если ПараметрыВыполнения.ВремяИзмененияВыбранное < ПараметрыВыполнения.ДатаФайлаВБазе Тогда // В хранилище более новый.
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл ""%1""
			           |в хранилище файлов имеет более позднюю дату изменения (%2),
			           |чем выбранный файл (%3).
			           |
			           |Операция прервана.'"),
			Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка),
			МестноеВремя(ПараметрыВыполнения.ДатаФайлаВБазе),
			МестноеВремя(ПараметрыВыполнения.ВремяИзмененияВыбранное));
		
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
	КонецЕсли;
	
	// Проверка наличия файла в рабочем каталоге.
	ВРабочемКаталогеНаЧтение = Истина;
	ВРабочемКаталогеВладельца = Ложь;
	ПолноеИмяФайла = "";
	ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(
		Неопределено,
		ПредыдущаяВерсия,
		ПолноеИмяФайла,
		ВРабочемКаталогеНаЧтение,
		ВРабочемКаталогеВладельца);
	
	Если ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь Тогда // Файл уже был занят.
		
		Если ФайлВРабочемКаталоге = Истина Тогда
			ФайлВКэше = Новый Файл(ПолноеИмяФайла);
			ВремяИзмененияВКэше = ФайлВКэше.ПолучитьУниверсальноеВремяИзменения();
			
			Если ПараметрыВыполнения.ВремяИзмененияВыбранное < ВремяИзмененияВКэше Тогда // В рабочем каталоге более новый.
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Файл ""%1""
					           |в рабочем каталоге имеет более позднюю дату изменения (%2),
					           |чем выбранный файл (%3).
					           |
					           |Операция прервана.'"),
					Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка),
					МестноеВремя(ВремяИзмененияВКэше),
					МестноеВремя(ПараметрыВыполнения.ВремяИзмененияВыбранное));
				
				ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
				Возврат;
			КонецЕсли;
			
			#Если Не ВебКлиент Тогда
				// Проверка, что файл не занят приложением.
				Попытка
					ТекстовыйДокумент = Новый ТекстовыйДокумент;
					ТекстовыйДокумент.Прочитать(ПолноеИмяФайла);
				Исключение
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Файл ""%1""
						           |в рабочем каталоге открыт для редактирования.
						           |
						           |Закончите редактирование перед выполнением
						           |обновления из файла на диске.'"),
						ПолноеИмяФайла);
					ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Неопределено);
					Возврат;
				КонецПопытки;
			#КонецЕсли
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФайлВРабочемКаталоге И ПараметрыВыполнения.ИмяИРасширениеФайлаНаДиске <> ИмяИРасширениеФайлаВБазе Тогда
		Обработчик = Новый ОписаниеОповещения("ОбновитьИзФайлаНаДискеПослеУдаленияФайлаИзРабочегоКаталога", ЭтотОбъект, ПараметрыВыполнения);
		УдалитьФайлИзРабочегоКаталога(Обработчик, ПараметрыВыполнения.ДанныеФайла.ТекущаяВерсия, Истина);
		Возврат;
	КонецЕсли;
	
	ОбновитьИзФайлаНаДискеПослеУдаленияФайлаИзРабочегоКаталога(-1, ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОбновитьИзФайлаНаДискеПослеУдаленияФайлаИзРабочегоКаталога(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат <> -1 Тогда
		Если Результат.Успех <> Истина Тогда
			ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("РедактируетТекущийПользователь", ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь);
	
	Если Не ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь Тогда
		
		ТекстОшибки = "";
		МожноЗанятьФайл = РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ПараметрыВыполнения.ДанныеФайла, ТекстОшибки);
		Если Не МожноЗанятьФайл Тогда
			ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Неопределено);
			Возврат;
		КонецЕсли;
		
		ТекстОшибки = "";
		ФайлЗанят = РаботаСФайламиСлужебныйВызовСервера.ЗанятьФайл(ПараметрыВыполнения.ДанныеФайла, ТекстОшибки, 
			ПараметрыВыполнения.ИдентификаторФормы);
		Если Не ФайлЗанят Тогда 
			ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Неопределено);
			Возврат;
		КонецЕсли;
		
		НаЧтение = Ложь;
		ВРабочемКаталогеВладельца = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "";
		ПеререгистрироватьФайлВРабочемКаталоге(ПараметрыВыполнения.ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
		
	КонецЕсли;
	
	НовоеПолноеИмяФайла = "";
	ПараметрыВыполнения.ДанныеФайла.Вставить("ПутьОбновленияИзФайлаНаДиске", ПараметрыВыполнения.ДиалогПолноеИмяФайла);
	ПараметрыВыполнения.ДанныеФайла.Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ПараметрыВыполнения.РасширениеФайлаНаДиске);
	
	// Помещение в рабочий каталог из выбранного файла на диске,
	// т.к. указано свойство ПутьОбновленияИзФайлаНаДиске.
	Обработчик = Новый ОписаниеОповещения("ОбновитьИзФайлаНаДискеПослеПолученияФайлаВРабочийКаталог", ЭтотОбъект, ПараметрыВыполнения);
	ПолучитьФайлВерсииВРабочийКаталог(Обработчик, ПараметрыВыполнения.ДанныеФайла, НовоеПолноеИмяФайла, ПараметрыВыполнения.ИдентификаторФормы);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОбновитьИзФайлаНаДискеПослеПолученияФайлаВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	// Обработка результата не требуется.
	Если ПараметрыВыполнения.ФайлЗашифрован Тогда
		РаботаСФайламиСлужебныйВызовСервера.УстановитьПризнакЗашифрован(ПараметрыВыполнения.ДанныеФайла.Ссылка, ПараметрыВыполнения.ФайлЗашифрован);
	КонецЕсли;
	
	ПереданныйПолныйПутьКФайлу = "";
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьИзФайлаНаДискеПослеЗавершенияРедактирования", ЭтотОбъект, ПараметрыВыполнения);
	Если ПараметрыВыполнения.РедактируетТекущийПользователь Тогда // Файл уже был занят.
		ПараметрыОбработчика = ПараметрыОбновленияФайла(Обработчик, ПараметрыВыполнения.ДанныеФайла.Ссылка, ПараметрыВыполнения.ИдентификаторФормы);
		ПараметрыОбработчика.ПереданныйПолныйПутьКФайлу = ПереданныйПолныйПутьКФайлу;
		ПараметрыОбработчика.СоздатьНовуюВерсию = ПараметрыВыполнения.СоздатьНовуюВерсию;
		ПараметрыОбработчика.КомментарийКВерсии = ПараметрыВыполнения.КомментарийКВерсии;
		СохранитьИзмененияФайла(ПараметрыОбработчика);
	Иначе
		ПараметрыОбработчика = ПараметрыОбновленияФайла(Обработчик, ПараметрыВыполнения.ДанныеФайла.Ссылка, ПараметрыВыполнения.ИдентификаторФормы);
		ПараметрыОбработчика.ХранитьВерсии = ПараметрыВыполнения.ДанныеФайла.ХранитьВерсии;
		ПараметрыОбработчика.РедактируетТекущийПользователь = ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь;
		ПараметрыОбработчика.Редактирует = ПараметрыВыполнения.ДанныеФайла.Редактирует;
		ПараметрыОбработчика.АвторТекущейВерсии = ПараметрыВыполнения.ДанныеФайла.АвторТекущейВерсии;
		ПараметрыОбработчика.ПереданныйПолныйПутьКФайлу = ПереданныйПолныйПутьКФайлу;
		ПараметрыОбработчика.СоздатьНовуюВерсию = ПараметрыВыполнения.СоздатьНовуюВерсию;
		ПараметрыОбработчика.КомментарийКВерсии = ПараметрыВыполнения.КомментарийКВерсии;
		ЗакончитьРедактирование(ПараметрыОбработчика);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОбновитьИзФайлаНаДискеПослеЗавершенияРедактирования(РезультатРедактирования, ПараметрыВыполнения) Экспорт
	
	Если ПараметрыВыполнения.ФайлЗашифрован Тогда
		УдалитьФайлБезПодтверждения(ПараметрыВыполнения.ДиалогПолноеИмяФайла);
	КонецЕсли;
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Пометка файла как занятого для редактирования.

// Помечает файл, как занятый для редактирования.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ОбъектСсылка            - СправочникСсылка.Файлы - файл.
//  УникальныйИдентификатор - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//  Булево. Истина, если операция выполнена успешно.
//
Процедура ЗанятьФайлПоСсылке(ОбработчикРезультата, ОбъектСсылка, УникальныйИдентификатор = Неопределено)
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	ПараметрыОбработчика.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Обработчик = Новый ОписаниеОповещения("ЗанятьФайлПоСсылкеПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОбработчика);
	
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗанятьФайлПоСсылкеПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения.Вставить("ДанныеФайла", Неопределено);
	
	ТекстОшибки = "";
	ДанныеФайлаПолученыИОнЗанят = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИЗанятьФайл(ПараметрыВыполнения.ОбъектСсылка,
		ПараметрыВыполнения.ДанныеФайла, ТекстОшибки, ПараметрыВыполнения.УникальныйИдентификатор);
	Если Не ДанныеФайлаПолученыИОнЗанят Тогда // Если занять нельзя, тогда выводится сообщение об ошибке.
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		НаЧтение = Ложь;
		ВРабочемКаталогеВладельца = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "";
		ПеререгистрироватьФайлВРабочемКаталоге(ПараметрыВыполнения.ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Редактирование файла'"),
		ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылка,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл ""%1""
			           |занят для редактирования.'"), Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка)),
		БиблиотекаКартинок.Информация32);
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Пометка файлов как занятых для редактирования.

// Помечает файлы, как занятые для редактирования.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  МассивФайлов - Массив - массив файлов.
//
Процедура ЗанятьФайлыПоСсылкам(ОбработчикРезультата, Знач МассивФайлов)
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("МассивФайлов", МассивФайлов);
	
	Обработчик = Новый ОписаниеОповещения("ЗанятьФайлыПоСсылкамПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОбработчика);
	
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗанятьФайлыПоСсылкамПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	// Получение массива данных файлов.
	ДанныеФайлов = Новый Массив;
	РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеДляМассиваФайлов(ПараметрыВыполнения.МассивФайлов, ДанныеФайлов);
	ВГраницаМассива  = ДанныеФайлов.ВГраница();
	
	Для Инд = 0 По ВГраницаМассива Цикл
		ДанныеФайла = ДанныеФайлов[ВГраницаМассива - Инд];
		
		СтрокаОшибки = "";
		Если Не РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки)
		 Или ЗначениеЗаполнено(ДанныеФайла.Редактирует) Тогда // Занять невозможно.
			
			ДанныеФайлов.Удалить(ВГраницаМассива - Инд);
		КонецЕсли;
	КонецЦикла;
	
	// Занять файлы.
	КоличествоЗанятых = 0;
	
	Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
		
		Если Не РаботаСФайламиСлужебныйВызовСервера.ЗанятьФайл(ДанныеФайла, "") Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
			НаЧтение = Ложь;
			ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
			ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		КоличествоЗанятых = КоличествоЗанятых + 1;
	КонецЦикла;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Занять файлы'"),
		,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файлы (%1 из %2) заняты для редактирования.'"),
			КоличествоЗанятых,
			ПараметрыВыполнения.МассивФайлов.Количество()),
		БиблиотекаКартинок.Информация32);
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Открытие файла для редактирования по ссылке.

// Открывает файл для редактирования.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ОбъектСсылка            - СправочникСсылка.Файлы - файл.
//  УникальныйИдентификатор - УникальныйИдентификатор формы.
//  РабочийКаталогВладельца - Строка - рабочий каталог владельца.
//
// Возвращаемое значение:
//  Булево. Истина, если операция выполнена успешно.
//
Процедура РедактироватьФайлПоСсылке(ОбработчикРезультата,
	ОбъектСсылка,
	УникальныйИдентификатор = Неопределено,
	РабочийКаталогВладельца = Неопределено)
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	ПараметрыОбработчика.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОбработчика.Вставить("РабочийКаталогВладельца", РабочийКаталогВладельца);
	
	Обработчик = Новый ОписаниеОповещения("РедактироватьФайлПоСсылкеПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОбработчика);
	
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура РедактироватьФайлПоСсылкеПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения.Вставить("ДанныеФайла", Неопределено);
	ПараметрыВыполнения.Вставить("РасширениеПодключено", ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено());
	
	ТекстОшибки = "";
	ДанныеПолучены = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаДляОткрытияИЗанятьФайл(ПараметрыВыполнения.ОбъектСсылка,
		ПараметрыВыполнения.ДанныеФайла, ТекстОшибки, ПараметрыВыполнения.УникальныйИдентификатор, ПараметрыВыполнения.РабочийКаталогВладельца);
	
	Если Не ДанныеПолучены Тогда
		СтандартнаяОбработка = Истина;
		РаботаСФайламиКлиентПереопределяемый.ПриОшибкеЗахватаФайла(ПараметрыВыполнения.ДанныеФайла, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка Тогда
			// Если занять нельзя, тогда выводится сообщение об ошибке.
			ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
			Возврат;
		КонецЕсли;
		
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполнения.РасширениеПодключено Тогда
		НаЧтение = Ложь;
		ВРабочемКаталогеВладельца = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "";
		ПеререгистрироватьФайлВРабочемКаталоге(ПараметрыВыполнения.ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Редактирование файла'"),
		ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылка,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл ""%1""
			           |занят для редактирования.'"), Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка)),
			БиблиотекаКартинок.Информация32);
	
	// Если Файл без файла, тогда открывается карточка.
	Если ПараметрыВыполнения.ДанныеФайла.Версия.Пустая() Тогда 
		ВернутьРезультатПослеПоказаЗначения(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения.ДанныеФайла.Ссылка, Истина);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполнения.РасширениеПодключено Тогда
		Обработчик = Новый ОписаниеОповещения("РедактироватьФайлПоСсылкеСРасширениемПослеПолученияФайлаВРабочийКаталог", ЭтотОбъект, ПараметрыВыполнения);
		ПолучитьФайлВерсииВРабочийКаталог(
			Обработчик,
			ПараметрыВыполнения.ДанныеФайла,
			"",
			ПараметрыВыполнения.УникальныйИдентификатор);
	Иначе
		ЗаполнитьВременныйИдентификаторФормы(ПараметрыВыполнения.УникальныйИдентификатор, ПараметрыВыполнения);
		
		Обработчик = Новый ОписаниеОповещения("РедактироватьФайлПоСсылкеЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		ОткрытьФайлБезРасширения(Обработчик, ПараметрыВыполнения.ДанныеФайла, ПараметрыВыполнения.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура РедактироватьФайлПоСсылкеСРасширениемПослеПолученияФайлаВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен = Истина Тогда
		ОткрытьФайлПриложением(ПараметрыВыполнения.ДанныеФайла, Результат.ПолноеИмяФайла, ПараметрыВыполнения.ОбработчикРезультата);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Результат.ФайлПолучен = Истина);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура РедактироватьФайлПоСсылкеЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	ОчиститьВременныйИдентификаторФормы(ПараметрыВыполнения);
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Результат = Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Открытие файла для редактирования.

// Открывает файл для редактирования.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ДанныеФайла             - Структура с данными файла.
//  УникальныйИдентификатор - УникальныйИдентификатор формы.
//
Процедура РедактироватьФайл(ОбработчикРезультата, ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Обработчик = Новый ОписаниеОповещения("РедактироватьФайлПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОбработчика);
	
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура РедактироватьФайлПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	ТекстОшибки = "";
	МожноЗанятьФайл = РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(
		ПараметрыВыполнения.ДанныеФайла,
		ТекстОшибки);
	Если Не МожноЗанятьФайл Тогда
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
	КонецЕсли;
	
	// Если Файл не занят, тогда занять файл.
	Если Не ЗначениеЗаполнено(ПараметрыВыполнения.ДанныеФайла.Редактирует) Тогда
		Обработчик = Новый ОписаниеОповещения("РедактироватьФайлПослеЗанятияФайла", ЭтотОбъект, ПараметрыВыполнения);
		ЗанятьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
		Возврат;
	КонецЕсли;
	
	РедактироватьФайлПослеЗанятияФайла(-1, ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура РедактироватьФайлПослеЗанятияФайла(ДанныеФайла, ПараметрыВыполнения) Экспорт
	
	Если ДанныеФайла = Неопределено Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ДанныеФайла <> -1 Тогда
		ПараметрыВыполнения.ДанныеФайла = ДанныеФайла;
	КонецЕсли;
	
	// Если Файл без файла, тогда открыть карточку.
	Если ПараметрыВыполнения.ДанныеФайла.Версия.Пустая() Тогда 
		ВернутьРезультатПослеПоказаЗначения(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения.ДанныеФайла.Ссылка, Истина);
		Возврат;
	КонецЕсли;
	
	Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		Обработчик = Новый ОписаниеОповещения("РедактироватьФайлСРасширениемПослеПолученияФайлаВРабочийКаталог", ЭтотОбъект, ПараметрыВыполнения);
		ПолучитьФайлВерсииВРабочийКаталог(
			Обработчик,
			ПараметрыВыполнения.ДанныеФайла,
			"",
			ПараметрыВыполнения.УникальныйИдентификатор);
	Иначе
		ЗаполнитьВременныйИдентификаторФормы(ПараметрыВыполнения.УникальныйИдентификатор, ПараметрыВыполнения);
		
		Обработчик = Новый ОписаниеОповещения("РедактироватьФайлБезРасширенияЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		ОткрытьФайлБезРасширения(Обработчик, ПараметрыВыполнения.ДанныеФайла, ПараметрыВыполнения.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура РедактироватьФайлСРасширениемПослеПолученияФайлаВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен = Истина Тогда
		ОткрытьФайлПриложением(ПараметрыВыполнения.ДанныеФайла, Результат.ПолноеИмяФайла);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Результат.ФайлПолучен = Истина);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура РедактироватьФайлБезРасширенияЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	ОчиститьВременныйИдентификаторФормы(ПараметрыВыполнения);
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Результат = Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Открытие версии файла.

// Открыть версию файла.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ДанныеФайла             - Структура с данными файла.
//  УникальныйИдентификатор - УникальныйИдентификатор формы.
//
Процедура ОткрытьВерсиюФайла(ОбработчикРезультата, ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Обработчик = Новый ОписаниеОповещения("ОткрытьВерсиюФайлаПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОбработчика);
	
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОткрытьВерсиюФайлаПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		Обработчик = Новый ОписаниеОповещения("ОткрытьВерсиюФайлаПослеПолученияФайлаВРабочийКаталог", ЭтотОбъект, ПараметрыВыполнения);
		ПолучитьФайлВерсииВРабочийКаталог(
			Обработчик,
			ПараметрыВыполнения.ДанныеФайла,
			"",
			ПараметрыВыполнения.УникальныйИдентификатор);
	Иначе
		Адрес = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(
			ПараметрыВыполнения.ДанныеФайла.Версия, ПараметрыВыполнения.УникальныйИдентификатор);
		
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, ПараметрыВыполнения.ДанныеФайла.Расширение);
		
		ПолучитьФайл(Адрес, ИмяФайла, Истина);
		
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОткрытьВерсиюФайлаПослеПолученияФайлаВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен Тогда
		ОткрытьФайлПриложением(ПараметрыВыполнения.ДанныеФайла, Результат.ПолноеИмяФайла);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Освобождение файлов без обновления.

// Освобождает файлы без обновления.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  МассивФайлов - Массив - массив файлов.
//
Процедура ОсвободитьФайлыПоСсылкам(ОбработчикРезультата, Знач МассивФайлов)
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("МассивФайлов", МассивФайлов);
	
	Обработчик = Новый ОписаниеОповещения("ОсвободитьФайлыПоСсылкамПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОбработчика);
	
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОсвободитьФайлыПоСсылкамПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	// Получение массива данных файлов.
	ПараметрыВыполнения.Вставить("ДанныеФайлов", Новый Массив);
	РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеДляМассиваФайлов(ПараметрыВыполнения.МассивФайлов, ПараметрыВыполнения.ДанныеФайлов);
	ВГраницаМассива = ПараметрыВыполнения.ДанныеФайлов.ВГраница();
	
	// Проверка возможности освобождения файлов.
	Для Инд = 0 По ВГраницаМассива Цикл
		ДанныеФайла = ПараметрыВыполнения.ДанныеФайлов[ВГраницаМассива - Инд];
		
		ТекстОшибки = "";
		МожноОсвободитьФайл = ВозможностьОсвободитьФайл(
			ДанныеФайла.Ссылка,
			ДанныеФайла.РедактируетТекущийПользователь,
			ДанныеФайла.Редактирует,
			ТекстОшибки);
		Если Не МожноОсвободитьФайл Тогда
			ПараметрыВыполнения.ДанныеФайлов.Удалить(ВГраницаМассива - Инд);
		КонецЕсли;
		
	КонецЦикла;
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	
	Обработчик = Новый ОписаниеОповещения("ОсвободитьФайлыПоСсылкамПослеОтветаНаВопросОтменитьРедактирование", ЭтотОбъект, ПараметрыВыполнения);
	
	ПоказатьВопрос(
		Обработчик,
		НСтр("ru = 'Отмена редактирования файлов может
		           |привести к потере Ваших изменений.
		           |
		           |Продолжить?'"),
		РежимДиалогаВопрос.ДаНет,
		,
		КодВозвратаДиалога.Нет);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОсвободитьФайлыПоСсылкамПослеОтветаНаВопросОтменитьРедактирование(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	// Занятие файлов.
	Для Каждого ДанныеФайла Из ПараметрыВыполнения.ДанныеФайлов Цикл
		
		Параметры = ПараметрыОсвобожденияФайла(Неопределено, ДанныеФайла.Ссылка);
		Параметры.ХранитьВерсии = ДанныеФайла.ХранитьВерсии;
		Параметры.РедактируетТекущийПользователь = ДанныеФайла.РедактируетТекущийПользователь;
		Параметры.Редактирует = ДанныеФайла.Редактирует;
		Параметры.НеЗадаватьВопрос = Истина;
		ОсвободитьФайл(Параметры);
		
	КонецЦикла;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Отменить редактирование файлов'"),,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отменено редактирование файлов (%1 из %2).'"),
			ПараметрыВыполнения.ДанныеФайлов.Количество(),
			ПараметрыВыполнения.МассивФайлов.Количество()),
		БиблиотекаКартинок.Информация32);
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Освобождение файла без обновления.

// Возвращаемое значение:
//   Структура - со свойствами:
//    * ОбработчикРезультата    - ОписаниеОповещения, Неопределено - описание процедуры, принимающей результат работы
//                                метода.
//    * ОбъектСсылка            - СправочникСсылка.Файлы - файл.
//    * Версия                  - СправочникСсылка.ВерсииФайлов - версия файла.
//    * ХранитьВерсии           - Булево - хранить версии.
//    * РедактируетТекущийПользователь - Булево - файл редактирует текущий пользователь.
//    * Редактирует             - СправочникСсылка.Пользователи - кто занял файл.
//    * УникальныйИдентификатор - УникальныйИдентификатор - идентификатор управляемой формы.
//    * НеЗадаватьВопрос        - Булево - не задавать вопрос "Отмена редактирования файла
//                                         может привести к потере Ваших изменений. Продолжить?".
//
Функция ПараметрыОсвобожденияФайла(ОбработчикРезультата, ОбъектСсылка) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	ПараметрыОбработчика.Вставить("Версия");
	ПараметрыОбработчика.Вставить("ХранитьВерсии");
	ПараметрыОбработчика.Вставить("РедактируетТекущийПользователь");
	ПараметрыОбработчика.Вставить("Редактирует");
	ПараметрыОбработчика.Вставить("УникальныйИдентификатор");
	ПараметрыОбработчика.Вставить("НеЗадаватьВопрос", Ложь);
	Возврат ПараметрыОбработчика;
	
КонецФункции	

// Освобождает файл без обновления.
//
// Параметры:
//  ПараметрыОсвобожденияФайла - Структура - см. ПараметрыОсвобожденияФайла.
//
Процедура ОсвободитьФайл(ПараметрыОсвобожденияФайла)
	
	Обработчик = Новый ОписаниеОповещения("ОсвободитьФайлПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОсвобожденияФайла);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОсвободитьФайлПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения.Вставить("ДанныеФайла", Неопределено);
	ПараметрыВыполнения.Вставить("ПродолжитьРаботу", Истина);
	
	Если ПараметрыВыполнения.ХранитьВерсии = Неопределено Тогда
		ПараметрыВыполнения.ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(
			?(ПараметрыВыполнения.ОбъектСсылка <> Неопределено, ПараметрыВыполнения.ОбъектСсылка, ПараметрыВыполнения.Версия));
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектСсылка) Тогда
			ПараметрыВыполнения.ОбъектСсылка = ПараметрыВыполнения.ДанныеФайла.Ссылка;
		КонецЕсли;
		ПараметрыВыполнения.ХранитьВерсии                  = ПараметрыВыполнения.ДанныеФайла.ХранитьВерсии;
		ПараметрыВыполнения.РедактируетТекущийПользователь = ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь;
		ПараметрыВыполнения.Редактирует                    = ПараметрыВыполнения.ДанныеФайла.Редактирует;
	КонецЕсли;
	
	// Проверка возможности освобождения файла.
	ТекстОшибки = "";
	МожноОсвободитьФайл = ВозможностьОсвободитьФайл(
		ПараметрыВыполнения.ОбъектСсылка,
		ПараметрыВыполнения.РедактируетТекущийПользователь,
		ПараметрыВыполнения.Редактирует,
		ТекстОшибки);
	
	Если Не МожноОсвободитьФайл Тогда
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполнения.НеЗадаватьВопрос = Ложь Тогда
		ПараметрыВыполнения.ОбработчикРезультата = ПодготовитьОбработчикДляДиалога(ПараметрыВыполнения.ОбработчикРезультата);
		Обработчик = Новый ОписаниеОповещения("ОсвободитьФайлПослеОтветаНаВопросОтменаРедактирования", ЭтотОбъект, ПараметрыВыполнения);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отмена редактирования файла
			           |""%1""
			           |может привести к потере ваших изменений.
			           |
			           |Продолжить?'"),
			Строка(ПараметрыВыполнения.ОбъектСсылка));
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	ОсвободитьФайлПослеОтветаНаВопросОтменаРедактирования(-1, ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОсвободитьФайлПослеОтветаНаВопросОтменаРедактирования(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ <> -1 Тогда
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПараметрыВыполнения.ПродолжитьРаботу = Истина;
		Иначе
			ПараметрыВыполнения.ПродолжитьРаботу = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыполнения.ПродолжитьРаботу Тогда
		
		РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИОсвободитьФайл(ПараметрыВыполнения.ОбъектСсылка,
			ПараметрыВыполнения.ДанныеФайла, ПараметрыВыполнения.УникальныйИдентификатор);
		
		Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
			НаЧтение = Истина;
			ВРабочемКаталогеВладельца = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "";
			ПеререгистрироватьФайлВРабочемКаталоге(ПараметрыВыполнения.ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		Если Не ПараметрыВыполнения.НеЗадаватьВопрос Тогда
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Файл освобожден'"),
				ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылка,
				ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии,
				БиблиотекаКартинок.Информация32);
		КонецЕсли;
		
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Запись изменений файла.

Функция ПараметрыОбновленияФайла(ОбработчикРезультата, ОбъектСсылка, ИдентификаторФормы) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	ПараметрыОбработчика.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	ПараметрыОбработчика.Вставить("ХранитьВерсии");
	ПараметрыОбработчика.Вставить("РедактируетТекущийПользователь");
	ПараметрыОбработчика.Вставить("Редактирует");
	ПараметрыОбработчика.Вставить("АвторТекущейВерсии");
	ПараметрыОбработчика.Вставить("ПереданныйПолныйПутьКФайлу", "");
	ПараметрыОбработчика.Вставить("СоздатьНовуюВерсию");
	ПараметрыОбработчика.Вставить("КомментарийКВерсии");
	ПараметрыОбработчика.Вставить("ПоказыватьОповещение", Истина);
	ПараметрыОбработчика.Вставить("ПрименитьКоВсем", Ложь);
	ПараметрыОбработчика.Вставить("ОсвобождатьФайлы", Истина);
	ПараметрыОбработчика.Вставить("Кодировка");
	Возврат ПараметрыОбработчика;
	
КонецФункции	

// Начало записи изменений файла.
//
// Параметры:
//   ПараметрыОбновленияФайла - Структура - см. ПараметрыОбновленияФайла.
//
Процедура СохранитьИзмененияФайла(ПараметрыОбновленияФайла) 
	
	Обработчик = Новый ОписаниеОповещения("СохранитьИзмененияФайлаПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОбновленияФайла);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
		
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения.Вставить("ДанныеФайла", Неопределено);
	ПараметрыВыполнения.Вставить("АдресВременногоХранилища", Неопределено);
	ПараметрыВыполнения.Вставить("ПолныйПутьКФайлу", Неопределено);
	
	Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		СохранитьИзмененияФайлаСРасширением(ПараметрыВыполнения);
	Иначе
		СохранитьИзмененияФайлаБезРасширения(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаСРасширением(ПараметрыВыполнения)
	// Код для тонкого клиента, толстого клиента и веб-клиента с подключенным расширением.
	
	ПараметрыВыполнения.ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИРабочийКаталог(ПараметрыВыполнения.ОбъектСсылка);
	
	ПараметрыВыполнения.ХранитьВерсии = ПараметрыВыполнения.ДанныеФайла.ХранитьВерсии;
	
	// Проверка возможности освобождения файла.
	ТекстОшибки = "";
	МожноОсвободитьФайл = ВозможностьОсвободитьФайл(
		ПараметрыВыполнения.ДанныеФайла.Ссылка,
		ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь,
		ПараметрыВыполнения.ДанныеФайла.Редактирует,
		ТекстОшибки);
	Если Не МожноОсвободитьФайл Тогда
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.ПолныйПутьКФайлу = ПараметрыВыполнения.ПереданныйПолныйПутьКФайлу;
	Если ПараметрыВыполнения.ПолныйПутьКФайлу = "" Тогда
		ПараметрыВыполнения.ПолныйПутьКФайлу = ПараметрыВыполнения.ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге;
	КонецЕсли;
	
	// Проверка наличия файла на диске.
	ПараметрыВыполнения.Вставить("ФайлНовойВерсии", Новый Файл(ПараметрыВыполнения.ПолныйПутьКФайлу));
	Если Не ПараметрыВыполнения.ФайлНовойВерсии.Существует() Тогда
		Если Не ПустаяСтрока(ПараметрыВыполнения.ПолныйПутьКФайлу) Тогда
			СтрокаПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось поместить файл ""%1"" в хранилище файлов:
				           |Файл не найден в рабочем каталоге:
				           |%2.
				           |
				           |Освободить файл?'"),
				Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка),
				ПараметрыВыполнения.ПолныйПутьКФайлу);
		Иначе
			СтрокаПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось поместить файл ""%1"" в хранилище файлов:
				           |Файл не найден в рабочем каталоге.
				           |
				           |Освободить файл?'"),
				Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка));
		КонецЕсли;
		
		Обработчик = Новый ОписаниеОповещения("СохранитьИзмененияФайлаСРасширениемПослеОтветаНаВопросОсвободитьФайл", ЭтотОбъект, ПараметрыВыполнения);
		ПоказатьВопрос(Обработчик, СтрокаПредупреждения, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	// Запрос комментария и признака хранения версии.
	Если ПараметрыВыполнения.СоздатьНовуюВерсию = Неопределено Тогда
		
		ФормаВозврата = РаботаСФайламиСлужебныйКлиентПовтИсп.ФормаВозвратаФайла();
		
		ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
		СоздатьНовуюВерсиюДоступность = Истина;
		
		Если ПараметрыВыполнения.ДанныеФайла.ХранитьВерсии Тогда
			ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
			
			// Если автор текущей версии не текущий пользователь, тогда
			// отключается доступность флажка «Не создавать новую версию».
			Если ПараметрыВыполнения.ДанныеФайла.АвторТекущейВерсии <> ПараметрыВыполнения.ДанныеФайла.Редактирует Тогда
				СоздатьНовуюВерсиюДоступность = Ложь;
			Иначе
				СоздатьНовуюВерсиюДоступность = Истина;
			КонецЕсли;
		Иначе
			ПараметрыВыполнения.СоздатьНовуюВерсию = Ложь;
			СоздатьНовуюВерсиюДоступность = Ложь;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ФайлСсылка",                    ПараметрыВыполнения.ДанныеФайла.Ссылка);
		СтруктураПараметров.Вставить("КомментарийКВерсии",            "");
		СтруктураПараметров.Вставить("СоздатьНовуюВерсию",            ПараметрыВыполнения.СоздатьНовуюВерсию);
		СтруктураПараметров.Вставить("СоздатьНовуюВерсиюДоступность", СоздатьНовуюВерсиюДоступность);
		
		ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
		
		Обработчик = Новый ОписаниеОповещения("СохранитьИзмененияФайлаСРасширениемПослеПомещенияФайлаНаСервер", ЭтотОбъект, ПараметрыВыполнения);
		УстановитьОповещениеФормы(ФормаВозврата, Обработчик);
		
		ФормаВозврата.Открыть();
		
	Иначе // Параметры СоздатьНовуюВерсию и КомментарийКВерсии переданы извне.
		
		Если ПараметрыВыполнения.ХранитьВерсии Тогда
			
			// Если автор текущей версии не текущий пользователь, тогда
			// отключается доступность флажка «Не создавать новую версию».
			Если ПараметрыВыполнения.АвторТекущейВерсии <> ПараметрыВыполнения.Редактирует Тогда
				ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
			КонецЕсли;
			
		Иначе
			ПараметрыВыполнения.СоздатьНовуюВерсию = Ложь;
		КонецЕсли;
		
		СохранитьИзмененияФайлаСРасширениемПослеПроверкиНовойВерсии(ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаСРасширениемПослеОтветаНаВопросОсвободитьФайл(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОсвободитьФайлБезВопроса(ПараметрыВыполнения.ДанныеФайла, ПараметрыВыполнения.ИдентификаторФормы);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаСРасширениемПослеПомещенияФайлаНаСервер(Результат, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	КодВозврата = Результат.КодВозврата;
	Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.СоздатьНовуюВерсию = Результат.СоздатьНовуюВерсию;
	ПараметрыВыполнения.КомментарийКВерсии = Результат.КомментарийКВерсии;
	
	СохранитьИзмененияФайлаСРасширениемПослеПроверкиНовойВерсии(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаСРасширениемПослеПроверкиНовойВерсии(ПараметрыВыполнения)
	
	Если Не ПараметрыВыполнения.ДанныеФайла.Зашифрован Тогда
		СохранитьИзмененияФайлаСРасширениемПослеПроверкиЗашифрован(, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	// Файл с признаком шифрован снова шифруется для тех же сертификатов.
	
	ПараметрыВыполнения.Вставить("ОповещениеПослеШифрования", Новый ОписаниеОповещения(
		"СохранитьИзмененияФайлаСРасширениемПослеПроверкиЗашифрован", ЭтотОбъект, ПараметрыВыполнения));
	
	ЗашифроватьФайлПередПомещениемВХранилищеФайлов(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаСРасширениемПослеПроверкиЗашифрован(Неопределен, ПараметрыВыполнения) Экспорт
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией", ПараметрыВыполнения.ФайлНовойВерсии);
	СведенияОФайле.Комментарий = ПараметрыВыполнения.КомментарийКВерсии;
	СведенияОФайле.ХранитьВерсии = ПараметрыВыполнения.СоздатьНовуюВерсию;
	
	Если ПараметрыВыполнения.Свойство("АдресПослеШифрования") Тогда
		СведенияОФайле.АдресВременногоХранилищаФайла = ПараметрыВыполнения.АдресПослеШифрования;
	Иначе
		РазмерВМб = СведенияОФайле.Размер / (1024 * 1024);
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполняется передача файла ""%1"" (%2 Мб)...
			           |Пожалуйста, подождите.'"),
			СведенияОФайле.ИмяБезРасширения,
			ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
		Состояние(ТекстПояснения);
		
		ПомещаемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ПараметрыВыполнения.ПолныйПутьКФайлу, "");
		ПомещаемыеФайлы.Добавить(Описание);
		
		ПомещенныеФайлы = Новый Массив;
		ФайлыПомещены = ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ПараметрыВыполнения.ИдентификаторФормы);
		
		Состояние();
		Если Не ФайлыПомещены Тогда
			ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
			Возврат;
		КонецЕсли;
		
		Если ПомещенныеФайлы.Количество() = 1 Тогда
			СведенияОФайле.АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
		КонецЕсли;
	КонецЕсли;
	
	ОбщиеНастройкиРаботыСФайлами = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами();
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	ОтносительныйПутьКФайлу = "";
	Если ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "" Тогда // Есть рабочий каталог.
		ОтносительныйПутьКФайлу = ПараметрыВыполнения.ПолныйПутьКФайлу;
	Иначе
		Позиция = СтрНайти(ПараметрыВыполнения.ПолныйПутьКФайлу, ИмяКаталога);
		Если Позиция <> 0 Тогда
			ОтносительныйПутьКФайлу = Сред(ПараметрыВыполнения.ПолныйПутьКФайлу, СтрДлина(ИмяКаталога) + 1);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОбщиеНастройкиРаботыСФайлами.ИзвлекатьТекстыФайловНаСервере Тогда
		АдресВременногоХранилищаТекста = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
			ПараметрыВыполнения.ПолныйПутьКФайлу,
			ПараметрыВыполнения.ИдентификаторФормы);
	Иначе
		АдресВременногоХранилищаТекста = "";
	КонецЕсли;
	
	НеМенятьЗаписьВРабочемКаталоге = Ложь;
	Если ПараметрыВыполнения.ПереданныйПолныйПутьКФайлу <> "" Тогда
		НеМенятьЗаписьВРабочемКаталоге = Истина;
	КонецЕсли;
	
	ВерсияОбновлена = РаботаСФайламиСлужебныйВызовСервера.СохранитьИзмененияФайла(ПараметрыВыполнения.ДанныеФайла.Ссылка, СведенияОФайле, 
		НеМенятьЗаписьВРабочемКаталоге, ОтносительныйПутьКФайлу, ПараметрыВыполнения.ПолныйПутьКФайлу, 
		ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "", ПараметрыВыполнения.ИдентификаторФормы);
	Если ПараметрыВыполнения.ПоказыватьОповещение Тогда
		Если ВерсияОбновлена Тогда
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Новая версия сохранена'"),
				ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылка,
				ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии,
				БиблиотекаКартинок.Информация32);
		Иначе
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Новая версия не сохранена'"),,
				НСтр("ru = 'Файл не изменился'"),
				БиблиотекаКартинок.Информация32);
			Обработчик = Новый ОписаниеОповещения("СохранитьИзмененияФайлаСРасширениемПослеПоказаОповещения", ЭтотОбъект, ПараметрыВыполнения);
			ПоказатьИнформациюФайлНеБылИзменен(Обработчик);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СохранитьИзмененияФайлаСРасширениемПослеПоказаОповещения(-1, ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаСРасширениемПослеПоказаОповещения(Результат, ПараметрыВыполнения) Экспорт
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаБезРасширения(ПараметрыВыполнения)
	
	Если ПараметрыВыполнения.ХранитьВерсии = Неопределено Тогда
		ПараметрыВыполнения.ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(ПараметрыВыполнения.ОбъектСсылка);
		ПараметрыВыполнения.ХранитьВерсии                  = ПараметрыВыполнения.ДанныеФайла.ХранитьВерсии;
		ПараметрыВыполнения.РедактируетТекущийПользователь = ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь;
		ПараметрыВыполнения.Редактирует                    = ПараметрыВыполнения.ДанныеФайла.Редактирует;
		ПараметрыВыполнения.АвторТекущейВерсии             = ПараметрыВыполнения.ДанныеФайла.АвторТекущейВерсии;
	КонецЕсли;
	
	// Проверка возможности освобождения файла.
	ТекстОшибки = "";
	МожноОсвободитьФайл = ВозможностьОсвободитьФайл(
		ПараметрыВыполнения.ОбъектСсылка,
		ПараметрыВыполнения.РедактируетТекущийПользователь,
		ПараметрыВыполнения.Редактирует,
		ТекстОшибки);
	Если Не МожноОсвободитьФайл Тогда
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.ПолныйПутьКФайлу = "";
	Если ПараметрыВыполнения.СоздатьНовуюВерсию = Неопределено Тогда
		
		// Запрос комментария и признака хранения версии.
		ФормаВозврата = РаботаСФайламиСлужебныйКлиентПовтИсп.ФормаВозвратаФайла();
		
		ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
		СоздатьНовуюВерсиюДоступность = Истина;
		
		Если ПараметрыВыполнения.ХранитьВерсии Тогда
			ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
			
			// Если автор текущей версии не текущий пользователь, тогда
			// отключается доступность флажка «Не создавать новую версию».
			Если ПараметрыВыполнения.АвторТекущейВерсии <> ПараметрыВыполнения.Редактирует Тогда
				СоздатьНовуюВерсиюДоступность = Ложь;
			Иначе
				СоздатьНовуюВерсиюДоступность = Истина;
			КонецЕсли;
		Иначе
			ПараметрыВыполнения.СоздатьНовуюВерсию = Ложь;
			СоздатьНовуюВерсиюДоступность = Ложь;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ФайлСсылка",                    ПараметрыВыполнения.ОбъектСсылка);
		СтруктураПараметров.Вставить("КомментарийКВерсии",            "");
		СтруктураПараметров.Вставить("СоздатьНовуюВерсию",            ПараметрыВыполнения.СоздатьНовуюВерсию);
		СтруктураПараметров.Вставить("СоздатьНовуюВерсиюДоступность", СоздатьНовуюВерсиюДоступность);
		
		ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
		
		Обработчик = Новый ОписаниеОповещения("СохранитьИзмененияФайлаБезРасширенияПослеПомещенияФайлаНаСервер", ЭтотОбъект, ПараметрыВыполнения);
		УстановитьОповещениеФормы(ФормаВозврата, Обработчик);
		
		ФормаВозврата.Открыть();
		
	Иначе // Параметры СоздатьНовуюВерсию и КомментарийКВерсии переданы извне.
		
		Если ПараметрыВыполнения.ХранитьВерсии Тогда
			
			// Если автор текущей версии не текущий пользователь, тогда
			// отключается доступность флажка «Не создавать новую версию».
			Если ПараметрыВыполнения.АвторТекущейВерсии <> ПараметрыВыполнения.Редактирует Тогда
				ПараметрыВыполнения.СоздатьНовуюВерсию = Истина;
			КонецЕсли;
			
		Иначе
			ПараметрыВыполнения.СоздатьНовуюВерсию = Ложь;
		КонецЕсли;
		
		СохранитьИзмененияФайлаБезРасширенияПослеПроверкиНовойВерсии(ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаБезРасширенияПослеПомещенияФайлаНаСервер(Результат, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	Если Результат.КодВозврата <> КодВозвратаДиалога.ОК Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.СоздатьНовуюВерсию = Результат.СоздатьНовуюВерсию;
	ПараметрыВыполнения.КомментарийКВерсии = Результат.КомментарийКВерсии;
	
	СохранитьИзмененияФайлаБезРасширенияПослеПроверкиНовойВерсии(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаБезРасширенияПослеПроверкиНовойВерсии(ПараметрыВыполнения)
	
	Обработчик = Новый ОписаниеОповещения("СохранитьИзмененияФайлаБезРасширенияПослеНапоминания", ЭтотОбъект, ПараметрыВыполнения);
	ПоказатьНапоминаниеПередПоместитьФайл(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаБезРасширенияПослеНапоминания(Результат, ПараметрыВыполнения) Экспорт
	
	Обработчик = Новый ОписаниеОповещения("СохранитьИзмененияФайлаБезРасширенияПослеЗагрузкиФайла", ЭтотОбъект, ПараметрыВыполнения);
	НачатьПомещениеФайла(Обработчик, , ПараметрыВыполнения.ПолныйПутьКФайлу, , ПараметрыВыполнения.ИдентификаторФормы);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаБезРасширенияПослеЗагрузкиФайла(Помещен, Адрес, ВыбранноеИмяФайла, ПараметрыВыполнения) Экспорт
	
	Если Не Помещен Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("АдресЗагруженногоФайла", Адрес);
	ПараметрыВыполнения.Вставить("ВыбранноеИмяФайла", ВыбранноеИмяФайла);
	
	Если ПараметрыВыполнения.ДанныеФайла = Неопределено Тогда
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(ПараметрыВыполнения.ОбъектСсылка);
	Иначе
		ДанныеФайла = ПараметрыВыполнения.ДанныеФайла;
	КонецЕсли;
	Если Не ДанныеФайла.Зашифрован Тогда
		СохранитьИзмененияФайлаБезРасширенияПослеШифрованияФайла(Null, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	Если СертификатыНеУказаны(ДанныеФайла.МассивСертификатовШифрования) Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	// Не нужно ПредложитьУстановкуРасширенияРаботыСФайлами(), т.к. все делается в памяти через ДвоичныеДанные.
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Шифрование файла'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("Данные",              Адрес);
	ОписаниеДанных.Вставить("Представление",       ПараметрыВыполнения.ОбъектСсылка);
	ОписаниеДанных.Вставить("НаборСертификатов",   ПараметрыВыполнения.ОбъектСсылка);
	ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
	ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("СохранитьИзмененияФайлаБезРасширенияПослеШифрованияФайла",
		ЭтотОбъект, ПараметрыВыполнения);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.Зашифровать(ОписаниеДанных, , ОбработчикПродолжения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаБезРасширенияПослеШифрованияФайла(ОписаниеДанных, ПараметрыВыполнения) Экспорт
	
	Если ОписаниеДанных = Null Тогда
		Адрес = ПараметрыВыполнения.АдресЗагруженногоФайла;
		
	ИначеЕсли Не ОписаниеДанных.Успех Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	Иначе
		Если ТипЗнч(ОписаниеДанных.ЗашифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
			Адрес = ПоместитьВоВременноеХранилище(ОписаниеДанных.ЗашифрованныеДанные,
				ПараметрыВыполнения.ИдентификаторФормы);
		Иначе
			Адрес = ОписаниеДанных.ЗашифрованныеДанные;
		КонецЕсли;
	КонецЕсли;
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	ПараметрыВыполнения.АдресВременногоХранилища = Адрес;
	СведенияОФайле.АдресВременногоХранилищаФайла = Адрес;
	СведенияОФайле.ХранитьВерсии = ПараметрыВыполнения.СоздатьНовуюВерсию;
	
	СтруктураПути = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПараметрыВыполнения.ВыбранноеИмяФайла);
	Если Не ПустаяСтрока(СтруктураПути.Расширение) Тогда
		СведенияОФайле.РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураПути.Расширение);
		СведенияОФайле.ИмяБезРасширения = СтруктураПути.ИмяБезРасширения;
	КонецЕсли;
	
	Результат = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИСохранитьИзмененияФайла(ПараметрыВыполнения.ОбъектСсылка, СведенияОФайле, 
		"", ПараметрыВыполнения.ПолныйПутьКФайлу, Ложь, ПараметрыВыполнения.ИдентификаторФормы);
	ПараметрыВыполнения.ДанныеФайла = Результат.ДанныеФайла;
	Если ПараметрыВыполнения.ПоказыватьОповещение Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Новая версия сохранена'"),
			ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылка,
			ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры


// Для процедур СохранитьИзмененияФайла, ЗакончитьРедактирование.
Процедура ЗашифроватьФайлПередПомещениемВХранилищеФайлов(ПараметрыВыполнения)
	
	Если СертификатыНеУказаны(ПараметрыВыполнения.ДанныеФайла.МассивСертификатовШифрования) Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	// Не нужно ПредложитьУстановкуРасширенияРаботыСФайлами(), т.к. все делается в памяти через ДвоичныеДанные.
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Шифрование файла'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("Данные",              ПараметрыВыполнения.ПолныйПутьКФайлу);
	ОписаниеДанных.Вставить("Представление",       ПараметрыВыполнения.ОбъектСсылка);
	ОписаниеДанных.Вставить("НаборСертификатов",   ПараметрыВыполнения.ОбъектСсылка);
	ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
	ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ЗашифроватьФайлПередПомещениемВХранилищеФайловПослеШифрованияФайла",
		ЭтотОбъект, ПараметрыВыполнения);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.Зашифровать(ОписаниеДанных, , ОбработчикПродолжения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗашифроватьФайлПередПомещениемВХранилищеФайловПослеШифрованияФайла(ОписаниеДанных, ПараметрыВыполнения) Экспорт
	
	Если ОписаниеДанных = Null Тогда
		Адрес = ПараметрыВыполнения.АдресЗагруженногоФайла;
		
	ИначеЕсли Не ОписаниеДанных.Успех Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	Иначе
		Если ТипЗнч(ОписаниеДанных.ЗашифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
			Адрес = ПоместитьВоВременноеХранилище(ОписаниеДанных.ЗашифрованныеДанные,
				ПараметрыВыполнения.ИдентификаторФормы);
		Иначе
			Адрес = ОписаниеДанных.ЗашифрованныеДанные;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("АдресПослеШифрования", Адрес);
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПослеШифрования);
	
КонецПроцедуры


// Для процедур СохранитьИзмененияФайла, ЗакончитьРедактирование.
Функция СертификатыНеУказаны(МассивСертификатов)
	
	Если МассивСертификатов.Количество() = 0 Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'У зашифрованного файла не указаны сертификаты.
			           |Расшифруйте файл и зашифруйте заново.'"));
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Пометка файла как занятого для редактирования.

// Пометка файла как занятого для редактирования.
//
// Параметры:
//   ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//   ДанныеФайла - структура с данными файла.
//
// Возвращаемое значение:
//   * Неопределено - Если файл не занят.
//   * Структура с данными файла - Если файл занят.
//
Процедура ЗанятьФайл(ОбработчикРезультата, ДанныеФайла)
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("ДанныеФайла",           ДанныеФайла);
	
	Обработчик = Новый ОписаниеОповещения("ЗанятьФайлПослеУстановкиРасширения", ЭтотОбъект, ПараметрыОбработчика);
	
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗанятьФайлПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	ТекстОшибки = "";
	МожноЗанятьФайл = РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(
		ПараметрыВыполнения.ДанныеФайла,
		ТекстОшибки);
	Если Не МожноЗанятьФайл Тогда
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Неопределено);
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	ФайлЗанят = РаботаСФайламиСлужебныйВызовСервера.ЗанятьФайл(ПараметрыВыполнения.ДанныеФайла, ТекстОшибки);
	Если Не ФайлЗанят Тогда
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстОшибки, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		НаЧтение = Ложь;
		ВРабочемКаталогеВладельца = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "";
		ПеререгистрироватьФайлВРабочемКаталоге(ПараметрыВыполнения.ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Редактирование файла'"),
		ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылка,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл ""%1""
			           |занят для редактирования.'"),
			Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка)),
		БиблиотекаКартинок.Информация32);
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения.ДанныеФайла);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Освобождение файлов без обновления.

////////////////////////////////////////////////////////////////////////////////
// Удаление файла. Перед удалением снимается атрибут "Только для чтения".

// Удаление файла со снятием атрибута readonly без диалогов.
//
// Параметры:
//  ПолноеИмяФайла - Строка -  Полное имя файла.
//
Процедура УдалитьФайлБезПодтверждения(ПолноеИмяФайла)
	
	Файл = Новый Файл(ПолноеИмяФайла);
	Если Файл.Существует() Тогда
		Файл.УстановитьТолькоЧтение(Ложь);
		УдалитьФайлы(ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

// Удаление файла со снятием атрибута readonly.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Структура, Неопределено - Описание процедуры, принимающей результат
//                         работы метода.
//  ПолноеИмяФайла - Строка -  Полное имя файла.
//  ЗадаватьВопрос - Булево- Задавать вопрос об удалении.
//  ШапкаВопроса - Строка - Шапка вопроса - добавляет текст к вопросу об удалении.
//
Процедура УдалитьФайл(ОбработчикРезультата, ПолноеИмяФайла, ЗадаватьВопрос = Неопределено, ШапкаВопроса = Неопределено)
	
	Если ЗадаватьВопрос = Неопределено Тогда
		ПерсональныеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
		ЗадаватьВопрос = ПерсональныеНастройки.ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	
	Если ЗадаватьВопрос = Истина Тогда
		ТекстВопроса =
			НСтр("ru = 'Удалить файл ""%1""
			           |из рабочего каталога?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", ПолноеИмяФайла);
		Если ШапкаВопроса <> Неопределено Тогда
			ТекстВопроса = ШапкаВопроса + Символы.ПС + Символы.ПС + ТекстВопроса;
		КонецЕсли;
		ПараметрыВыполнения.ОбработчикРезультата = ПодготовитьОбработчикДляДиалога(ПараметрыВыполнения.ОбработчикРезультата);
		Обработчик = Новый ОписаниеОповещения("УдалитьФайлПослеОтветаНаВопрос", ЭтотОбъект, ПараметрыВыполнения);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	УдалитьФайлПослеОтветаНаВопрос(-1, ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура УдалитьФайлПослеОтветаНаВопрос(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ <> -1 Тогда
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УдалитьФайлБезПодтверждения(ПараметрыВыполнения.ПолноеИмяФайла);
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение файла из хранилища в рабочий каталог.

// Получает Файл из хранилища файлов в рабочий каталог
// и возвращает путь к этому файлу.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ДанныеФайла        - Структура с данными файла.
//  ПолноеИмяФайла     - Строка.
//  НаЧтение           - Булево - Ложь - для чтения, Истина для редактирования.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//   Структура - Результат.
//       * ФайлПолучен - Булево - Успешно ли выполнена операция.
//       * ПолноеИмяФайла - Строка - Полное имя файла.
//
Процедура ПолучитьФайлВерсииВЛокальныйКэшФайлов(
	ОбработчикРезультата,
	ДанныеФайла,
	НаЧтение,
	ИдентификаторФормы,
	ДополнительныеПараметры)
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыВыполнения.Вставить("НаЧтение", НаЧтение);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	ПараметрыВыполнения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ПолучитьФайлВерсииВЛокальныйКэшФайловЗапуск(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьФайлВерсииВЛокальныйКэшФайловЗапуск(ПараметрыВыполнения)
	
	ПараметрыВыполнения.Вставить("ПолноеИмяФайла", "");
	ПараметрыВыполнения.Вставить("ФайлПолучен", Ложь);
	
	ДатаФайлаВБазе   = ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная;
	РазмерФайлаВБазе = ПараметрыВыполнения.ДанныеФайла.Размер;
	
	ВРабочемКаталогеНаЧтение = Истина;
	ВРабочемКаталогеВладельца = Ложь;
	
	ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(
		ПараметрыВыполнения.ДанныеФайла,
		ПараметрыВыполнения.ДанныеФайла.Версия,
		ПараметрыВыполнения.ПолноеИмяФайла,
		ВРабочемКаталогеНаЧтение,
		ВРабочемКаталогеВладельца);
	
	Если ФайлВРабочемКаталоге = Ложь Тогда
		ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(
			ПараметрыВыполнения.ОбработчикРезультата,
			ПараметрыВыполнения.ДанныеФайла,
			ПараметрыВыполнения.ПолноеИмяФайла,
			ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная,
			ПараметрыВыполнения.НаЧтение,
			ПараметрыВыполнения.ИдентификаторФормы,
			ПараметрыВыполнения.ДополнительныеПараметры);
		Возврат;
	КонецЕсли;

	// Получаем путь файла в рабочем каталоге - с проверкой на уникальность.
	Если ПараметрыВыполнения.ПолноеИмяФайла = "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Ошибка получения файла из хранилища файлов
			           |в рабочий каталог.'"));
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	// Выяснено, что Файл в рабочем каталоге есть.
	// Проверка даты изменения и принятие решения, что делать дальше.
	Обработчик = Новый ОписаниеОповещения("ПолучитьФайлВерсииВЛокальныйКэшФайловПослеВыбораДействия", ЭтотОбъект, ПараметрыВыполнения);
	
	ФайловыеФункцииСлужебныйКлиент.ДействиеПриОткрытииФайлаВРабочемКаталоге(
		Обработчик,
		ПараметрыВыполнения.ПолноеИмяФайла,
		ПараметрыВыполнения.ДанныеФайла);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьФайлВерсииВЛокальныйКэшФайловПослеВыбораДействия(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = "ВзятьИзХранилищаИОткрыть" Тогда
		
		Обработчик = Новый ОписаниеОповещения("ПолучитьФайлВерсииВЛокальныйКэшФайловПослеУдаления", ЭтотОбъект, ПараметрыВыполнения);
		УдалитьФайл(Обработчик, ПараметрыВыполнения.ПолноеИмяФайла);
		
	ИначеЕсли Результат = "ОткрытьСуществующий" Тогда
		
		Если ПараметрыВыполнения.ДанныеФайла.ВРабочемКаталогеНаЧтение <> ПараметрыВыполнения.НаЧтение Тогда
			ВРабочемКаталогеВладельца = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "";
			
			ПеререгистрироватьВРабочемКаталоге(
				ПараметрыВыполнения.ДанныеФайла.Версия,
				ПараметрыВыполнения.ПолноеИмяФайла,
				ПараметрыВыполнения.НаЧтение,
				ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		ПараметрыВыполнения.ФайлПолучен = Истина;
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
		
	Иначе // Результат = "Отмена".
		ПараметрыВыполнения.ПолноеИмяФайла = "";
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьФайлВерсииВЛокальныйКэшФайловПослеУдаления(ФайлУдален, ПараметрыВыполнения) Экспорт
	
	ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(
		ПараметрыВыполнения.ОбработчикРезультата,
		ПараметрыВыполнения.ДанныеФайла,
		ПараметрыВыполнения.ПолноеИмяФайла,
		ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная,
		ПараметрыВыполнения.НаЧтение,
		ПараметрыВыполнения.ИдентификаторФормы,
		ПараметрыВыполнения.ДополнительныеПараметры);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение файла из программы на диск.

// Получить Файл из информационной базы на локальный диск и возвращает путь
// к этому файлу в параметре.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ДанныеФайла  - структура с данными файла.
//  ПолноеИмяФайла - Строка - здесь возвращается полное имя файла.
//  ИдентификаторФормы - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Структура - Результат получения файла.
//       * ФайлПолучен - Булево - Успешно ли выполнена операция.
//       * ПолноеИмяФайла - Строка - Полное имя файла.
//
Процедура ПолучитьФайлВерсииВРабочийКаталог(
		ОбработчикРезультата,
		ДанныеФайла,
		ПолноеИмяФайла,
		ИдентификаторФормы = Неопределено,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	Если ИмяКаталога = Неопределено Или ПустаяСтрока(ИмяКаталога) Тогда
		ВернутьРезультат(ОбработчикРезультата, Новый Структура("ФайлПолучен, ПолноеИмяФайла", Ложь, ПолноеИмяФайла));
		Возврат;
	КонецЕсли;
	
	Если ДанныеФайла.РабочийКаталогВладельца = "" Или ДанныеФайла.Версия <> ДанныеФайла.ТекущаяВерсия Тогда
		ПолучитьФайлВерсииВЛокальныйКэшФайлов(
			ОбработчикРезультата,
			ДанныеФайла,
			ДанныеФайла.НаЧтение,
			ИдентификаторФормы,
			ДополнительныеПараметры);
	Иначе
		ПолучитьФайлВерсииВРабочийКаталогПапки(
			ОбработчикРезультата,
			ДанныеФайла,
			ПолноеИмяФайла,
			ДанныеФайла.НаЧтение,
			ИдентификаторФормы,
			ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Открытие проводника с позиционированием на файле.

// Процедура открывает проводник Windows, позиционируясь на Файл.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ДанныеФайла  - структура с данными файла.
//
Процедура КаталогФайла(ОбработчикРезультата, ДанныеФайла) Экспорт
	
	// Если Файл без файла  - эта операция не имеет смысла.
	Если ДанныеФайла.Версия.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Если НЕ ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
			ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(ОбработчикРезультата);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	ПолноеИмяФайла = ПолучитьПутьФайлаВРабочемКаталоге(ДанныеФайла);
	Если ФайловыеФункцииСлужебныйКлиент.ОткрытьПроводникСФайлом(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ИмяФайла", ИмяФайла);
	ПараметрыОбработчика.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	Обработчик = Новый ОписаниеОповещения("КаталогФайлаПослеОтветаНаВопросПолучитьФайл", ЭтотОбъект, ПараметрыОбработчика);
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить(КодВозвратаДиалога.Да, НСтр("ru= 'Сохранить и открыть каталог'"));
	КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет, НСтр("ru= 'Отмена'"));
	ПоказатьВопрос(Обработчик,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Каталог файла не существует. Возможно, на данном компьютере файл ""%1"" еще не открывался.
			|Сохранить файл на компьютер и открыть его каталог?'"),
			ИмяФайла),
		КнопкиВопроса);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура КаталогФайлаПослеОтветаНаВопросПолучитьФайл(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Обработчик = Новый ОписаниеОповещения("КаталогФайлаПослеПолученияФайлаВРабочийКаталог", ЭтотОбъект, ПараметрыВыполнения);
		ПолучитьФайлВерсииВРабочийКаталог(Обработчик, ПараметрыВыполнения.ДанныеФайла, ПараметрыВыполнения.ПолноеИмяФайла);
	Иначе
		КаталогФайлаПослеПолученияФайлаВРабочийКаталог(-1, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура КаталогФайлаПослеПолученияФайлаВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат <> -1 Тогда
		ПараметрыВыполнения.ПолноеИмяФайла = Результат.ПолноеИмяФайла;
		ФайловыеФункцииСлужебныйКлиент.ОткрытьПроводникСФайлом(ПараметрыВыполнения.ПолноеИмяФайла);
	КонецЕсли;
	
	// Для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения.
	Если ЭтоАдресВременногоХранилища(ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылкаТекущейВерсии) Тогда
		УдалитьИзВременногоХранилища(ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылкаТекущейВерсии);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Удаление файла с диска и из регистра сведений.

// Удалить с диска и из регистра сведений.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  Ссылка  - СправочникСсылка.Файлы - файл.
//  УдалитьВРабочемКаталоге - Булево - Удалить даже в рабочем каталоге.
//
// Возвращаемое значение:
//   Структура - Результат удаления файла с диска и регистра сведений.
//       * Успех - Булево - успешно ли выполнена операция.
//
Процедура УдалитьФайлИзРабочегоКаталога(ОбработчикРезультата, Ссылка, УдалитьВРабочемКаталоге = Ложь) Экспорт
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("Ссылка", Ссылка);
	ПараметрыВыполнения.Вставить("Успех", Ложь);
	ПараметрыВыполнения.Вставить("ИмяКаталога", ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя());
	
	ПараметрыВыполнения.Вставить("ПолноеИмяФайлаИзРегистра", Неопределено);
	
	ВРабочемКаталогеВладельца = Ложь;
	ПараметрыВыполнения.ПолноеИмяФайлаИзРегистра = РаботаСФайламиСлужебныйВызовСервера.ПолучитьПолноеИмяФайлаИзРегистра(
		ПараметрыВыполнения.Ссылка, ПараметрыВыполнения.ИмяКаталога, Ложь, ВРабочемКаталогеВладельца);
	
	Если ПараметрыВыполнения.ПолноеИмяФайлаИзРегистра <> "" Тогда
		
		// Обычно в рабочем каталоге не удаляем - только если передан УдалитьВРабочемКаталоге.
		Если Не ВРабочемКаталогеВладельца ИЛИ УдалитьВРабочемКаталоге = Истина Тогда
			
			ФайлНаДиске = Новый Файл(ПараметрыВыполнения.ПолноеИмяФайлаИзРегистра);
			
			Если ФайлНаДиске.Существует() Тогда
				ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
				
				ЗарегистрироватьОписаниеОбработчика(
					ПараметрыВыполнения, ЭтотОбъект, "УдалитьФайлИзРабочегоКаталогаПослеУдаленияФайла");
				
				УдалитьФайл(ПараметрыВыполнения, ПараметрыВыполнения.ПолноеИмяФайлаИзРегистра);
				Если ПараметрыВыполнения.АсинхронныйДиалог.Открыт = Истина Тогда
					Возврат;
				КонецЕсли;
				
				УдалитьФайлИзРабочегоКаталогаПослеУдаленияФайла(
					ПараметрыВыполнения.АсинхронныйДиалог.РезультатКогдаНеОткрыт, ПараметрыВыполнения);
				Возврат;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УдалитьФайлИзРабочегоКаталогаЗавершение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура УдалитьФайлИзРабочегоКаталогаПослеУдаленияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	ПутьСПодкаталогом = ПараметрыВыполнения.ИмяКаталога;
	Позиция = СтрНайти(ПараметрыВыполнения.ПолноеИмяФайлаИзРегистра, ПолучитьРазделительПути());
	Если Позиция <> 0 Тогда
		ПутьСПодкаталогом = ПутьСПодкаталогом + Лев(ПараметрыВыполнения.ПолноеИмяФайлаИзРегистра, Позиция);
	КонецЕсли;
	
	МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, "*");
	Если МассивФайловВКаталоге.Количество() = 0 Тогда
		Если ПутьСПодкаталогом <> ПараметрыВыполнения.ИмяКаталога Тогда
			УдалитьФайлы(ПутьСПодкаталогом);
		КонецЕсли;
	КонецЕсли;
	
	УдалитьФайлИзРабочегоКаталогаЗавершение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура УдалитьФайлИзРабочегоКаталогаЗавершение(ПараметрыВыполнения)
	
	Если ПараметрыВыполнения.ПолноеИмяФайлаИзРегистра = "" Тогда
		РаботаСФайламиСлужебныйВызовСервера.УдалитьИзРегистра(ПараметрыВыполнения.Ссылка);
	Иначе
		ФайлНаДиске = Новый Файл(ПараметрыВыполнения.ПолноеИмяФайлаИзРегистра);
		Если НЕ ФайлНаДиске.Существует() Тогда
			РаботаСФайламиСлужебныйВызовСервера.УдалитьИзРегистра(ПараметрыВыполнения.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполнения.Успех = Истина;
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Очистка рабочего каталога.

// Освободить место для помещения файла - если место есть, ничего не делает.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  РеквизитыВерсии  - структура с реквизитами версии.
//
Процедура ОсвободитьМестоВРабочемКаталоге(ОбработчикРезультата, РеквизитыВерсии)

	#Если ВебКлиент Тогда
		// В веб-клиенте нельзя определить количество свободного места на диске.
		ВернутьРезультатПослеПоказаПредупреждения(
			ОбработчикРезультата,
			НСтр("ru = 'Очистка рабочего каталога не поддерживается в веб-клиенте.'"),
			Неопределено);
		Возврат;
	#КонецЕсли
	
	МаксРазмер =
		ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().МаксимальныйРазмерЛокальногоКэшаФайлов;
	
	// Если размер РабочийКаталог установлен равным 0,
	// то считается, что никакого ограничения нет и умолчание в 10 Мб не используется.
	Если МаксРазмер = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	МассивФайлов = НайтиФайлы(ИмяКаталога, "*.*");
	
	РазмерФайловВРабочемКаталоге = 0;
	КоличествоСуммарное = 0;
	// Вычисление полного размера файлов в рабочем каталоге.
	ФайловыеФункцииСлужебныйКлиент.ОбходФайловРазмер(ИмяКаталога, МассивФайлов, РазмерФайловВРабочемКаталоге, КоличествоСуммарное);
	
	Размер = РеквизитыВерсии.Размер;
	Если РазмерФайловВРабочемКаталоге + Размер > МаксРазмер Тогда
		ОчиститьРабочийКаталог(ОбработчикРезультата, РазмерФайловВРабочемКаталоге, Размер, Ложь); // ОчищатьВсе = Ложь.
	КонецЕсли;
	
КонецПроцедуры

// Очистка рабочего каталога - для освобождения места - в первую очередь удаляет файлы 
// наиболее давно помещенные в рабочий каталог.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  РазмерФайловВРабочемКаталоге  - Число - размер файлов в рабочем каталоге.
//  РазмерДобавляемогоФайла - Число - Размер добавляемого файла.
//  ОчищатьВсе - Булево - Удалять все файлы в каталоге (а не только до освобождения нужного объема места на диске).
//
Процедура ОчиститьРабочийКаталог(ОбработчикРезультата, РазмерФайловВРабочемКаталоге, РазмерДобавляемогоФайла, ОчищатьВсе) Экспорт
	
	#Если ВебКлиент Тогда
		ВернутьРезультатПослеПоказаПредупреждения(ОбработчикРезультата, НСтр("ru = 'Очистка рабочего каталога не поддерживается в веб-клиенте.'"), Неопределено);
		Возврат;
	#КонецЕсли
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("РазмерФайловВРабочемКаталоге", РазмерФайловВРабочемКаталоге);
	ПараметрыОбработчика.Вставить("РазмерДобавляемогоФайла", РазмерДобавляемогоФайла);
	ПараметрыОбработчика.Вставить("ОчищатьВсе", ОчищатьВсе);
	
	ОчиститьРабочийКаталогЗапуск(ПараметрыОбработчика);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОчиститьРабочийКаталогЗапуск(ПараметрыВыполнения)
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	ТаблицаФайлов = Новый Массив;
	МассивФайлов = НайтиФайлы(ИмяКаталога, "*");
	ОбходФайловТаблица(ИмяКаталога, МассивФайлов, ТаблицаФайлов);
	
	// Вызов сервера - для сортировки
	//  сортировка по дате - в начале будут самые давно помещенные в рабочий каталог.
	РаботаСФайламиСлужебныйВызовСервера.СортироватьМассивСтруктур(ТаблицаФайлов);
	
	ПерсональныеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
	МаксРазмер = ПерсональныеНастройки.МаксимальныйРазмерЛокальногоКэшаФайлов;
	
	СреднийРазмерФайла = 1000;
	Если ТаблицаФайлов.Количество() <> 0 Тогда
		СреднийРазмерФайла = ПараметрыВыполнения.РазмерФайловВРабочемКаталоге / ТаблицаФайлов.Количество();
	КонецЕсли;
	
	СколькоНадоОсвободитьМеста = МаксРазмер / 10;
	Если СреднийРазмерФайла * 3 / 2 > СколькоНадоОсвободитьМеста Тогда
		СколькоНадоОсвободитьМеста = СреднийРазмерФайла * 3 / 2;
	КонецЕсли;
	
	СколькоОсталось = ПараметрыВыполнения.РазмерФайловВРабочемКаталоге + ПараметрыВыполнения.РазмерДобавляемогоФайла;
	
	ПараметрыВыполнения.Вставить("ИмяКаталога", ИмяКаталога);
	ПараметрыВыполнения.Вставить("МаксРазмер", МаксРазмер);
	ПараметрыВыполнения.Вставить("СколькоОсталось", СколькоОсталось);
	ПараметрыВыполнения.Вставить("СколькоНадоОсвободитьМеста", СколькоНадоОсвободитьМеста);
	
	ПараметрыВыполнения.Вставить("ТаблицаФайлов", ТаблицаФайлов);
	ПараметрыВыполнения.Вставить("НомерЭлемента", 1);
	ПараметрыВыполнения.Вставить("КоличествоЭлементов", ТаблицаФайлов.Количество());
	ПараметрыВыполнения.Вставить("Элемент", Неопределено);
	ПараметрыВыполнения.Вставить("ДаДляВсех", Ложь);
	ПараметрыВыполнения.Вставить("НетДляВсех", Ложь);
	
	ПараметрыВыполнения.Вставить("НомерШага", 0);
	ПараметрыВыполнения.Вставить("ПрерватьЦикл", Ложь);
	
	ЗарегистрироватьОписаниеОбработчика(ПараметрыВыполнения, ЭтотОбъект, "ОчиститьРабочийКаталогОбработчикДиалогаВЦикле");
	
	ОчиститьРабочийКаталогЗапускЦикла(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОчиститьРабочийКаталогЗапускЦикла(ПараметрыВыполнения)
	
	Пока ПараметрыВыполнения.НомерЭлемента <= ПараметрыВыполнения.КоличествоЭлементов Цикл
		ПараметрыВыполнения.Элемент = ПараметрыВыполнения.ТаблицаФайлов[ПараметрыВыполнения.НомерЭлемента - 1];
		ПараметрыВыполнения.НомерЭлемента = ПараметрыВыполнения.НомерЭлемента + 1;
		
		ПараметрыВыполнения.НомерШага = 1;
		ОчиститьРабочийКаталогОбработчикЦикла(ПараметрыВыполнения);
		Если ПараметрыВыполнения.АсинхронныйДиалог.Открыт Тогда
			Возврат; // Пауза цикла. Стек очищается.
		КонецЕсли;
		Если ПараметрыВыполнения.ПрерватьЦикл Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Действия после цикла.
	Если ПараметрыВыполнения.ОчищатьВсе Тогда
		РаботаСФайламиСлужебныйВызовСервера.ОчиститьВсеСвоиКромеЗанятых();
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОчиститьРабочийКаталогОбработчикЦикла(ПараметрыВыполнения)
	
	Если ПараметрыВыполнения.НомерШага = 1 Тогда
		Если Не ПараметрыВыполнения.ДаДляВсех
			И ПараметрыВыполнения.Элемент.Версия.Пустая() Тогда
			
			Если ПараметрыВыполнения.НетДляВсех Тогда
				Возврат; // По отношению к циклу это равносильно ключевому слову "Продолжить".
			КонецЕсли;
			
			Если ПараметрыВыполнения.ОчищатьВсе = Ложь Тогда
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Выполняется очистка рабочего каталога при добавлении файла.
					           |
					           |В хранилище файлов не найден файл
					           |""%1"".
					           |
					           |Удалить его из рабочего каталога?'"),
					ПараметрыВыполнения.ИмяКаталога + ПараметрыВыполнения.Элемент.Путь);
			Иначе
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В хранилище файлов не найден файл
					           |""%1"".
					           |
					           |Удалить его из рабочего каталога?'"),
					ПараметрыВыполнения.ИмяКаталога + ПараметрыВыполнения.Элемент.Путь);
			КонецЕсли;
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("Да",         НСтр("ru = 'Да'"));
			Кнопки.Добавить("ДаДляВсех",  НСтр("ru = 'Да для всех'"));
			Кнопки.Добавить("Нет",        НСтр("ru = 'Нет'"));
			Кнопки.Добавить("НетДляВсех", НСтр("ru = 'Нет для всех'"));
			
			ПоказатьВопрос(ПодготовитьОбработчикДляДиалога(ПараметрыВыполнения), ТекстВопроса, Кнопки);
			Возврат;
		КонецЕсли;
		
		ПараметрыВыполнения.НомерШага = 2;
	КонецЕсли;
	
	Если ПараметрыВыполнения.НомерШага = 2 Тогда
		ПолныйПуть = ПараметрыВыполнения.ИмяКаталога + ПараметрыВыполнения.Элемент.Путь;
		ФайлНаДиске = Новый Файл(ПолныйПуть);
		ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
		Если ПараметрыВыполнения.ОчищатьВсе = Ложь Тогда
			ШапкаВопроса = НСтр("ru = 'Выполняется очистка рабочего каталога при добавлении файла.'");
		Иначе
			ШапкаВопроса = НСтр("ru = 'Выполняется очистка рабочего каталога.'");
		КонецЕсли;
		
		УдалитьФайл(ПараметрыВыполнения, ПолныйПуть, Неопределено, ШапкаВопроса);
		Если ПараметрыВыполнения.АсинхронныйДиалог.Открыт Тогда
			Возврат; // Пауза цикла. Стек очищается.
		КонецЕсли;
		
		ПараметрыВыполнения.НомерШага = 3;
	КонецЕсли;
	
	Если ПараметрыВыполнения.НомерШага = 3 Тогда
		
		ПутьСПодкаталогом = ПараметрыВыполнения.ИмяКаталога;
		Позиция = СтрНайти(ПараметрыВыполнения.Элемент.Путь, ПолучитьРазделительПути());
		Если Позиция <> 0 Тогда
			ПутьСПодкаталогом = ПараметрыВыполнения.ИмяКаталога + Лев(ПараметрыВыполнения.Элемент.Путь, Позиция);
		КонецЕсли;
		
		// Если каталог стал пуст - удалить его.
		МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, "*");
		Если МассивФайловВКаталоге.Количество() = 0 Тогда
			Если ПутьСПодкаталогом <> ПараметрыВыполнения.ИмяКаталога Тогда
				УдалитьФайлы(ПутьСПодкаталогом);
			КонецЕсли;
		КонецЕсли;
		
		// Удаление из регистра сведений.
		РаботаСФайламиСлужебныйВызовСервера.УдалитьИзРегистра(ПараметрыВыполнения.Элемент.Версия);
		
		ПараметрыВыполнения.СколькоОсталось = ПараметрыВыполнения.СколькоОсталось - ПараметрыВыполнения.Элемент.Размер;
		Если ПараметрыВыполнения.СколькоОсталось < ПараметрыВыполнения.МаксРазмер - ПараметрыВыполнения.СколькоНадоОсвободитьМеста Тогда
			Если Не ПараметрыВыполнения.ОчищатьВсе Тогда
				// Освободили достаточно - выход из цикла.
				ПараметрыВыполнения.ПрерватьЦикл = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОчиститьРабочийКаталогОбработчикДиалогаВЦикле(Результат, ПараметрыВыполнения) Экспорт
	
	Если ПараметрыВыполнения.НомерШага = 1 Тогда
		Если Результат = "Нет" Тогда
			ПродолжитьВыполнение = Ложь;
		ИначеЕсли Результат = "НетДляВсех" Тогда
			ПродолжитьВыполнение = Ложь;
			ПараметрыВыполнения.НетДляВсех = Истина;
		ИначеЕсли Результат = "Да" Тогда
			ПродолжитьВыполнение = Истина;
		ИначеЕсли Результат = "ДаДляВсех" Тогда
			ПродолжитьВыполнение = Истина;
			ПараметрыВыполнения.ДаДляВсех = Истина;
		КонецЕсли;
	ИначеЕсли ПараметрыВыполнения.НомерШага = 2 Тогда
		ПродолжитьВыполнение = Истина;
	КонецЕсли;
	
	// Продолжение удаления файла
	Если ПродолжитьВыполнение Тогда
		ПараметрыВыполнения.НомерШага = ПараметрыВыполнения.НомерШага + 1;
		ПараметрыВыполнения.АсинхронныйДиалог.Открыт = Ложь;
		ОчиститьРабочийКаталогОбработчикЦикла(ПараметрыВыполнения);
		Если ПараметрыВыполнения.АсинхронныйДиалог.Открыт Тогда
			Возврат; // Пауза цикла. Стек очищается.
		КонецЕсли;
	КонецЕсли;
	
	// Продолжение цикла.
	ПараметрыВыполнения.АсинхронныйДиалог.Открыт = Ложь;
	ОчиститьРабочийКаталогЗапускЦикла(ПараметрыВыполнения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение файла с сервера и регистрация в локальном кэше.

// Получить Файл с сервера и зарегистрировать в локальном кэше.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ДанныеФайла  - структура с данными файла.
//  ПолноеИмяФайлаВРабочемКаталоге - Строка - здесь возвращается полное имя файла.
//  ДатаФайлаВБазе - Дата - дата файла в базе.
//  НаЧтение - Булево - файл помещен на чтение.
//  ИдентификаторФормы - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Структура - Результат.
//       * ФайлПолучен - Булево - Успешно ли выполнена операция.
//       * ПолноеИмяФайла - Строка - Полное имя файла.
//
Процедура ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ОбработчикРезультата,
	ДанныеФайла,
	ПолноеИмяФайла,
	ВремяИзмененияУниверсальное,
	НаЧтение,
	ИдентификаторФормы,
	ДополнительныеПараметры = Неопределено)
	
	// Переменные параметризации:
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыВыполнения.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	ПараметрыВыполнения.Вставить("ВремяИзмененияУниверсальное", ВремяИзмененияУниверсальное);
	ПараметрыВыполнения.Вставить("НаЧтение", НаЧтение);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	ПараметрыВыполнения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловЗапуск(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловЗапуск(ПараметрыВыполнения)
	
	// Переменные выполнения:
	ПараметрыВыполнения.Вставить("ВРабочемКаталогеВладельца", ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "");
	ПараметрыВыполнения.Вставить("ИмяКаталога", "");
	ПараметрыВыполнения.Вставить("ИмяКаталогаПрежнееЗначение", "");
	ПараметрыВыполнения.Вставить("ИмяФайла", "");
	ПараметрыВыполнения.Вставить("МаксимальнаяДлинаПолногоПути", 260);
	ПараметрыВыполнения.Вставить("ФайлПолучен", Ложь);
	
	Если ПараметрыВыполнения.ПолноеИмяФайла = "" Тогда
		ПараметрыВыполнения.ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		ПараметрыВыполнения.ИмяКаталогаПрежнееЗначение = ПараметрыВыполнения.ИмяКаталога;
		
		// Формирование имени файла с расширением.
		ПараметрыВыполнения.ИмяФайла = ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии;
		Если Не ПустаяСтрока(ПараметрыВыполнения.ДанныеФайла.Расширение) Тогда 
			ПараметрыВыполнения.ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ПараметрыВыполнения.ИмяФайла, ПараметрыВыполнения.ДанныеФайла.Расширение);
		КонецЕсли;
		
		ПараметрыВыполнения.ПолноеИмяФайла = "";
		Если Не ПустаяСтрока(ПараметрыВыполнения.ИмяФайла) Тогда
			ПараметрыВыполнения.ПолноеИмяФайла = ПараметрыВыполнения.ИмяКаталога + ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьУникальноеИмяСПутем(
				ПараметрыВыполнения.ИмяКаталога,
				ПараметрыВыполнения.ИмяФайла);
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыполнения.ИмяФайла) Тогда
			ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
			Возврат;
		КонецЕсли;
		
		ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути = 260;
		Если НРег(ПараметрыВыполнения.ДанныеФайла.Расширение) = "xls" Или НРег(ПараметрыВыполнения.ДанныеФайла.Расширение) = "xlsx" Тогда
			// Excel Длина имени файла вместе с путем не должна превышать 218 знака.
			ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути = 218;
		КонецЕсли;
		
		МаксимальнаяДлинаИмениФайла = ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути - 5; // 5 - минимум для "C:\1\"
		
		Если ПараметрыВыполнения.ВРабочемКаталогеВладельца = Ложь Тогда
#Если Не ВебКлиент Тогда
			Если СтрДлина(ПараметрыВыполнения.ПолноеИмяФайла) > ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути Тогда
				ПутьКаталогаПользователя = КаталогДанныхПользователя();
				МаксимальнаяДлинаИмениФайла = ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути - СтрДлина(ПутьКаталогаПользователя);
				
				// Если  имя  файла плюс 5 превышает 260 - пишем "Измените имя  файла на более короткое. ОК" и выходим.
				Если СтрДлина(ПараметрыВыполнения.ИмяФайла) > МаксимальнаяДлинаИмениФайла Тогда
					ТекстСообщения =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Длина пути к файлу (рабочий каталог плюс имя файла) превышает %1 символов
						           |%2'"),
						ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути,
						ПараметрыВыполнения.ПолноеИмяФайла);
					
					ТекстСообщения = ТекстСообщения + Символы.ВК + Символы.ВК
						+ НСтр("ru = 'Измените имя файла на более короткое.'");
					ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстСообщения, ПараметрыВыполнения);
					Возврат;
				КонецЕсли;
				
				ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПредложитьВыборКаталога(-1, ПараметрыВыполнения);
				Возврат;
			КонецЕсли;
#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПродолжение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПредложитьВыборКаталога(Ответ, ПараметрыВыполнения)
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Длина пути к файлу превышает %1 символов:
		|%2
		|
		|Выбрать другой основной рабочий каталог?'"),
		ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути,
		ПараметрыВыполнения.ПолноеИмяФайла);
	Обработчик = Новый ОписаниеОповещения("ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловНачатьВыборКаталога", ЭтотОбъект, ПараметрыВыполнения);
	ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловНачатьВыборКаталога(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	// Выбираем другой путь к рабочему каталогу.
	Заголовок = НСтр("ru = 'Выберите другой основной рабочий каталог'");
	КаталогВыбран = ВыбратьПутьКРабочемуКаталогу(ПараметрыВыполнения.ИмяКаталога, Заголовок, Ложь);
	Если Не КаталогВыбран Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.ПолноеИмяФайла = ПараметрыВыполнения.ИмяКаталога + ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьУникальноеИмяСПутем(
		ПараметрыВыполнения.ИмяКаталога,
		ПараметрыВыполнения.ИмяФайла);
	
	// уложились в 260 символов
	Если СтрДлина(ПараметрыВыполнения.ПолноеИмяФайла) <= ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути Тогда
		Обработчик = Новый ОписаниеОповещения("ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПослеПереносаСодержимогоРабочегоКаталога", ЭтотОбъект, ПараметрыВыполнения);
		ПеренестиСодержимоеРабочегоКаталога(Обработчик, ПараметрыВыполнения.ИмяКаталогаПрежнееЗначение, ПараметрыВыполнения.ИмяКаталога);
	Иначе
		ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПредложитьВыборКаталога(-1, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПослеПереносаСодержимогоРабочегоКаталога(СодержимоеПеренесено, ПараметрыВыполнения) Экспорт
	
	Если СодержимоеПеренесено Тогда
		ФайловыеФункцииСлужебныйКлиент.УстановитьРабочийКаталогПользователя(ПараметрыВыполнения.ИмяКаталога);
		ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПродолжение(ПараметрыВыполнения);
	Иначе
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПродолжение(ПараметрыВыполнения)
	
	#Если Не ВебКлиент Тогда
		Если ПараметрыВыполнения.ВРабочемКаталогеВладельца = Ложь Тогда
			ОсвободитьМестоВРабочемКаталоге(, ПараметрыВыполнения.ДанныеФайла);
		КонецЕсли;
	#КонецЕсли
	
	РазмерФайла = 0;
	
	// Запись Файл в каталог
	ПараметрыВыполнения.ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии,
		ПараметрыВыполнения.ДанныеФайла.Расширение);
	
	РазмерВМб = ПараметрыВыполнения.ДанныеФайла.Размер / (1024 * 1024);
	
	ФайлНаДискеПоИмени = Новый Файл(ПараметрыВыполнения.ПолноеИмяФайла);
	ИмяИРасширениеВПути = ФайлНаДискеПоИмени.Имя;
	Позиция = СтрНайти(ПараметрыВыполнения.ПолноеИмяФайла, ИмяИРасширениеВПути);
	ПутьКФайлу = "";
	Если Позиция <> 0 Тогда
		ПутьКФайлу = Лев(ПараметрыВыполнения.ПолноеИмяФайла, Позиция - 1); // -1 - вычет слэша
	КонецЕсли;
	
	ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу);
	ПараметрыВыполнения.Вставить("ПараметрПутьКФайлу", ПутьКФайлу);
	
	ПараметрыВыполнения.ПолноеИмяФайла = ПутьКФайлу + ПараметрыВыполнения.ИмяФайла; // могло смениться расширение
	
	ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполняется передача файла ""%1"" (%2 Мб)...
		           |Пожалуйста, подождите.'"),
		ПараметрыВыполнения.ИмяФайла,
		ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	
	Состояние(ТекстПояснения);
	
	Если ПараметрыВыполнения.ДанныеФайла.Свойство("ПутьОбновленияИзФайлаНаДиске") Тогда
		
		КопироватьФайл(ПараметрыВыполнения.ДанныеФайла.ПутьОбновленияИзФайлаНаДиске, ПараметрыВыполнения.ПолноеИмяФайла);
		
		Состояние();
		ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловЗавершение(ПараметрыВыполнения);
		
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполнения.ДанныеФайла.Зашифрован Тогда
		
		Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьВременныйИдентификаторФормы(ПараметрыВыполнения.ИдентификаторФормы, ПараметрыВыполнения);
		
		СтруктураВозврата = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(
			ПараметрыВыполнения.ДанныеФайла.Версия,, ПараметрыВыполнения.ИдентификаторФормы);
		
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("Операция",              НСтр("ru = 'Расшифровка файла'"));
		ОписаниеДанных.Вставить("ЗаголовокДанных",       НСтр("ru = 'Файл'"));
		ОписаниеДанных.Вставить("Данные",                СтруктураВозврата.ДвоичныеДанные);
		ОписаниеДанных.Вставить("Представление",         ПараметрыВыполнения.ДанныеФайла.Ссылка);
		ОписаниеДанных.Вставить("СертификатыШифрования", ПараметрыВыполнения.ДанныеФайла.Ссылка);
		ОписаниеДанных.Вставить("СообщитьОЗавершении",   Ложь);
		
		ОбработчикПродолжения = Новый ОписаниеОповещения(
			"ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПослеРасшифровки",
			ЭтотОбъект,
			ПараметрыВыполнения);
		
		МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
		МодульЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработчикПродолжения);
		
		Возврат;
	КонецЕсли;
	
	ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПередачаФайла(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПослеРасшифровки(ОписаниеДанных, ПараметрыВыполнения) Экспорт
	
	Если Не ОписаниеДанных.Успех Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеДанных.РасшифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
		АдресФайла = ПоместитьВоВременноеХранилище(ОписаниеДанных.РасшифрованныеДанные,
			ПараметрыВыполнения.ИдентификаторФормы);
	Иначе
		АдресФайла = ОписаниеДанных.РасшифрованныеДанные;
	КонецЕсли;
	
	ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПередачаФайла(ПараметрыВыполнения, АдресФайла);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловПередачаФайла(ПараметрыВыполнения, АдресФайла = Неопределено)
	
	Если АдресФайла = Неопределено Тогда
		Если ПараметрыВыполнения.ДанныеФайла.Версия <> ПараметрыВыполнения.ДанныеФайла.ТекущаяВерсия Тогда
			АдресФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(
				ПараметрыВыполнения.ДанныеФайла.Версия, ПараметрыВыполнения.ИдентификаторФормы);
		Иначе
			АдресФайла = ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(ПараметрыВыполнения.ИмяФайла, АдресФайла);
	ПередаваемыеФайлы.Добавить(Описание);
	
	#Если ВебКлиент Тогда
		Если ПараметрыВыполнения.ДополнительныеПараметры <> Неопределено И ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ОткрытьФайл") Тогда
			
		МассивОпераций = Новый Массив;
		
		ОписаниеВызова = Новый Массив;
		ОписаниеВызова.Добавить("ПолучитьФайлы");
		ОписаниеВызова.Добавить(ПередаваемыеФайлы);
		ОписаниеВызова.Добавить(Неопределено);  // Не используется.
		ОписаниеВызова.Добавить(ПараметрыВыполнения.ПараметрПутьКФайлу);
		ОписаниеВызова.Добавить(Ложь);          // Интерактивно = Ложь.
		МассивОпераций.Добавить(ОписаниеВызова);
		
		ОписаниеВызова = Новый Массив;
		ОписаниеВызова.Добавить("ЗапуститьПриложение");
		ОписаниеВызова.Добавить(ПараметрыВыполнения.ПолноеИмяФайла);
		МассивОпераций.Добавить(ОписаниеВызова);
		
		Если Не ЗапроситьРазрешениеПользователя(МассивОпераций) Тогда
			// Пользователь не дал разрешения.
			ОчиститьВременныйИдентификаторФормы(ПараметрыВыполнения);
			ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
			Возврат;
		КонецЕсли;
		
		КонецЕсли;
	#КонецЕсли
	
	Если Не ПолучитьФайлы(ПередаваемыеФайлы,, ПараметрыВыполнения.ПараметрПутьКФайлу, Ложь) Тогда
		ОчиститьВременныйИдентификаторФормы(ПараметрыВыполнения);
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	// Для варианта с хранением файлов на диске (на сервере)
	// файл удаляется из временного хранилища после получения.
	Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
		УдалитьИзВременногоХранилища(АдресФайла);
	КонецЕсли;
	
	Состояние();
	
	// Установим время изменения файла таким, как оно стоит в текущей версии.
	ФайлНаДиске = Новый Файл(ПараметрыВыполнения.ПолноеИмяФайла);
	ФайлНаДиске.УстановитьУниверсальноеВремяИзменения(ПараметрыВыполнения.ВремяИзмененияУниверсальное);
	
	ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловЗавершение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайловЗавершение(ПараметрыВыполнения)
	
	ФайлНаДиске = Новый Файл(ПараметрыВыполнения.ПолноеИмяФайла);
	
	// Т.к. размер на диске может отличаться от размера в базе (при добавлении из веб клиента).
	РазмерФайла = ФайлНаДиске.Размер();
	
	ФайлНаДиске.УстановитьТолькоЧтение(ПараметрыВыполнения.НаЧтение);
	
	ПараметрыВыполнения.ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	РаботаСФайламиСлужебныйВызовСервера.ЗанестиИнформациюФайлаВРегистр(ПараметрыВыполнения.ДанныеФайла.Версия,
		ПараметрыВыполнения.ПолноеИмяФайла,	ПараметрыВыполнения.ИмяКаталога, ПараметрыВыполнения.НаЧтение, РазмерФайла,
		ПараметрыВыполнения.ВРабочемКаталогеВладельца);
	
	Если ПараметрыВыполнения.ДанныеФайла.Размер <> РазмерФайла Тогда
		// При обновлении из файла на диске коррекция не нужна.
		Если Не ПараметрыВыполнения.ДанныеФайла.Свойство("ПутьОбновленияИзФайлаНаДиске") Тогда
			
			РаботаСФайламиСлужебныйВызовСервера.ОбновитьРазмерФайлаИВерсии(ПараметрыВыполнения.ДанныеФайла, 
				РазмерФайла, ПараметрыВыполнения.ИдентификаторФормы);
			
			ОповеститьОбИзменении(ПараметрыВыполнения.ДанныеФайла.Ссылка);
			ОповеститьОбИзменении(ПараметрыВыполнения.ДанныеФайла.Версия);
			
			Оповестить("Запись_Файл",
			           Новый Структура("Событие", "ДанныеФайлаИзменены"),
			           ПараметрыВыполнения.ДанныеФайла.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьВременныйИдентификаторФормы(ПараметрыВыполнения);
	
	ПараметрыВыполнения.ФайлПолучен = Истина;
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение файла из хранилища в рабочий каталог.

// Получает Файл из хранилища файлов в рабочий каталог папки
// и возвращает путь к этому файлу.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ДанныеФайла        - Структура с данными файла.
//  ПолноеИмяФайла     - Строка (возвращаемое значение).
//  НаЧтение           - Булево - Ложь - для чтения, Истина для редактирования.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//   Структура - Результат.
//       * ФайлПолучен - Булево - Успешно ли выполнена операция.
//       * ПолноеИмяФайла - Строка - Полное имя файла.
//
Процедура ПолучитьФайлВерсииВРабочийКаталогПапки(ОбработчикРезультата,
	ДанныеФайла,
	ПолноеИмяФайла,
	НаЧтение,
	ИдентификаторФормы,
	ДополнительныеПараметры)
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыВыполнения.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	ПараметрыВыполнения.Вставить("НаЧтение", НаЧтение);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	ПараметрыВыполнения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ПолучитьФайлВерсииВРабочийКаталогПапкиЗапуск(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьФайлВерсииВРабочийКаталогПапкиЗапуск(ПараметрыВыполнения)
	Перем Версия;
	Перем ДатаПомещения;
	
	ПараметрыВыполнения.Вставить("ФайлПолучен", Ложь);
	
	ВРабочемКаталогеВладельца = Истина;
	
	// Формирование имени файла с расширением.
	ИмяФайла = ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии;
	Если Не ПустаяСтрока(ПараметрыВыполнения.ДанныеФайла.Расширение) Тогда 
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ИмяФайла, ПараметрыВыполнения.ДанныеФайла.Расширение);
	КонецЕсли;
	
	Если ПараметрыВыполнения.ПолноеИмяФайла = "" Тогда
		ПараметрыВыполнения.ПолноеИмяФайла = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца + ИмяФайла;
		Обработчик = Новый ОписаниеОповещения("ПолучитьФайлВерсииВРабочийКаталогПапкиПослеПроверкиДлиныПути", ЭтотОбъект, ПараметрыВыполнения);
		ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталоге(Обработчик, ПараметрыВыполнения.ДанныеФайла, ПараметрыВыполнения.ПолноеИмяФайла, ИмяФайла);
	Иначе
		ПолучитьФайлВерсииВРабочийКаталогПапкиПродолжение(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьФайлВерсииВРабочийКаталогПапкиПослеПроверкиДлиныПути(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Ложь Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	Иначе
		ПолучитьФайлВерсииВРабочийКаталогПапкиПродолжение(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьФайлВерсииВРабочийКаталогПапкиПродолжение(ПараметрыВыполнения)
	
	// Поиск регистрации файла в рабочем каталоге (полное имя с путем).
	НайденныеСвойства = РаботаСФайламиСлужебныйВызовСервера.НайтиВРегистреПоПути(ПараметрыВыполнения.ПолноеИмяФайла);
	ПараметрыВыполнения.Вставить("ФайлЕстьВРегистре", НайденныеСвойства.ФайлЕстьВРегистре);
	Версия            = НайденныеСвойства.Версия;
	ДатаПомещения     = ?(ПараметрыВыполнения.ФайлЕстьВРегистре, НайденныеСвойства.ДатаПомещения, ДатаПомещения);
	Владелец          = НайденныеСвойства.Владелец;
	НомерВерсии       = НайденныеСвойства.НомерВерсии;
	ВРегистреНаЧтение = НайденныеСвойства.ВРегистреНаЧтение;
	ВРегистреКодФайла = НайденныеСвойства.ВРегистреКодФайла;
	ВРегистреПапка    = НайденныеСвойства.ВРегистреПапка;
	
	ФайлНаДиске = Новый Файл(ПараметрыВыполнения.ПолноеИмяФайла);
	ФайлНаДискеСуществует = ФайлНаДиске.Существует();
	
	// Удаление регистрации файла, если он не существует.
	Если ПараметрыВыполнения.ФайлЕстьВРегистре И Не ФайлНаДискеСуществует Тогда
		РаботаСФайламиСлужебныйВызовСервера.УдалитьИзРегистра(Версия);
		ПараметрыВыполнения.ФайлЕстьВРегистре = Ложь;
	КонецЕсли;
	
	Если Не ПараметрыВыполнения.ФайлЕстьВРегистре И Не ФайлНаДискеСуществует Тогда
		ПолучитьССервераИЗарегистрироватьВРабочемКаталогеПапки(
			ПараметрыВыполнения.ОбработчикРезультата,
			ПараметрыВыполнения.ДанныеФайла,
			ПараметрыВыполнения.ПолноеИмяФайла,
			ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная,
			ПараметрыВыполнения.НаЧтение,
			ПараметрыВыполнения.ИдентификаторФормы,
			ПараметрыВыполнения.ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	// Установлено, что в рабочем каталоге файл существует.
	
	Если ПараметрыВыполнения.ФайлЕстьВРегистре И Версия <> ПараметрыВыполнения.ДанныеФайла.ТекущаяВерсия Тогда
		
		Если Владелец = ПараметрыВыполнения.ДанныеФайла.Ссылка И ВРегистреНаЧтение = Истина Тогда
			// Если владелец версий файла совпадает и
			// существующий файл в рабочем каталоге зарегистрирован для чтения,
			// тогда можно заменить его другим файлом из хранилища.
			ПолучитьССервераИЗарегистрироватьВРабочемКаталогеПапки(
				ПараметрыВыполнения.ОбработчикРезультата,
				ПараметрыВыполнения.ДанныеФайла,
				ПараметрыВыполнения.ПолноеИмяФайла,
				ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная,
				ПараметрыВыполнения.НаЧтение,
				ПараметрыВыполнения.ИдентификаторФормы,
				ПараметрыВыполнения.ДополнительныеПараметры);
			Возврат;
		КонецЕсли;
		
		Если ПараметрыВыполнения.ДанныеФайла.Владелец = ВРегистреПапка Тогда // Одна и та же папка.
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В рабочем каталоге уже есть файл
				           |""%1"",
				           |связанный с другим файлом в информационной базе.
				           |
				           |Код файла в хранилище файлов: %2.
				           |Код файла в рабочем каталоге: %3.
				           |
				           |Переименуйте один из файлов в информационной базе.'"),
				ПараметрыВыполнения.ПолноеИмяФайла,
				ПараметрыВыполнения.ДанныеФайла.КодФайла,
				ВРегистреКодФайла);
		Иначе
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В рабочем каталоге уже есть файл
				           |""%1"",
				           |связанный с другим файлом информационной базы.
				           |
				           |Код файла в хранилище файлов: %2.
				           |Код файла в рабочем каталоге: %3.
				           |
				           |В информационной базе измените рабочий каталог одной из папок.
				           |(У двух папок не должно быть одинакового рабочего каталога).'"),
				ПараметрыВыполнения.ПолноеИмяФайла,
				ПараметрыВыполнения.ДанныеФайла.КодФайла,
				ВРегистреКодФайла);
		КонецЕсли;
		
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстПредупреждения, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	// Выяснено, что Файл в рабочем каталоге есть.
	// Либо файл незарегистрирован, либо зарегистрирован и версия совпадает.
	
	// Проверка даты изменения и принятие решения, что делать дальше.
	Обработчик = Новый ОписаниеОповещения("ПолучитьФайлВерсииВРабочийКаталогПапкиПослеВыбораДействия", ЭтотОбъект, ПараметрыВыполнения);
	
	ФайловыеФункцииСлужебныйКлиент.ДействиеПриОткрытииФайлаВРабочемКаталоге(
		Обработчик,
		ПараметрыВыполнения.ПолноеИмяФайла,
		ПараметрыВыполнения.ДанныеФайла);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьФайлВерсииВРабочийКаталогПапкиПослеВыбораДействия(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = "ВзятьИзХранилищаИОткрыть" Тогда
		
		// В рабочем каталоге папки настройка подтверждения при удалении не используется.
		УдалитьФайлБезПодтверждения(ПараметрыВыполнения.ПолноеИмяФайла);
		ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(
			ПараметрыВыполнения.ОбработчикРезультата,
			ПараметрыВыполнения.ДанныеФайла,
			ПараметрыВыполнения.ПолноеИмяФайла,
			ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная,
			ПараметрыВыполнения.НаЧтение,
			ПараметрыВыполнения.ИдентификаторФормы,
			ПараметрыВыполнения.ДополнительныеПараметры);
		
	ИначеЕсли Результат = "ОткрытьСуществующий" Тогда
		
		Если ПараметрыВыполнения.ДанныеФайла.ВРабочемКаталогеНаЧтение <> ПараметрыВыполнения.НаЧтение
			Или Не ПараметрыВыполнения.ФайлЕстьВРегистре Тогда
			
			ВРабочемКаталогеВладельца = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "";
			
			ПеререгистрироватьВРабочемКаталоге(
				ПараметрыВыполнения.ДанныеФайла.Версия,
				ПараметрыВыполнения.ПолноеИмяФайла,
				ПараметрыВыполнения.НаЧтение,
				ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		ПараметрыВыполнения.ФайлПолучен = Истина;
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
		
	Иначе // Результат = "Отмена".
		ПараметрыВыполнения.ПолноеИмяФайла = "";
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение файла с сервера и регистрация в рабочем каталоге.

// Получить Файл с сервера и зарегистрировать в рабочем каталоге.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ДанныеФайла  - структура с данными файла.
//  ПолноеИмяФайлаВРабочемКаталоге - Строка - здесь возвращается полное имя файла.
//  ДатаФайлаВБазе - Дата - дата файла в базе.
//  НаЧтение - Булево - файл помещен на чтение.
//  ИдентификаторФормы - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Структура - Результат.
//       * ФайлПолучен - Булево - Успешно ли выполнена операция.
//       * ПолноеИмяФайла - Строка - Полное имя файла.
//
Процедура ПолучитьССервераИЗарегистрироватьВРабочемКаталогеПапки(
	ОбработчикРезультата,
	ДанныеФайла,
	ПолноеИмяФайлаВРабочемКаталогеПапки,
	ДатаФайлаВБазе,
	НаЧтение,
	ИдентификаторФормы,
	ДополнительныеПараметры)
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыВыполнения.Вставить("ПолноеИмяФайлаВРабочемКаталогеПапки", ПолноеИмяФайлаВРабочемКаталогеПапки);
	ПараметрыВыполнения.Вставить("ДатаФайлаВБазе", ДатаФайлаВБазе);
	ПараметрыВыполнения.Вставить("НаЧтение", НаЧтение);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	ПараметрыВыполнения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ПолучитьССервераИЗарегистрироватьВРабочемКаталогеПапкиЗапуск(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьССервераИЗарегистрироватьВРабочемКаталогеПапкиЗапуск(ПараметрыВыполнения)
	
	ПараметрыВыполнения.Вставить("ПолноеИмяФайла", "");
	ПараметрыВыполнения.Вставить("ФайлПолучен", Ложь);
	
	ВРабочемКаталогеНаЧтение = Истина;
	ВРабочемКаталогеВладельца = Ложь;
	
	ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(
		ПараметрыВыполнения.ДанныеФайла,
		ПараметрыВыполнения.ДанныеФайла.Версия,
		ПараметрыВыполнения.ПолноеИмяФайла,
		ВРабочемКаталогеНаЧтение,
		ВРабочемКаталогеВладельца);
	
	Если ФайлВРабочемКаталоге = Ложь Тогда
		ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(
			ПараметрыВыполнения.ОбработчикРезультата,
			ПараметрыВыполнения.ДанныеФайла,
			ПараметрыВыполнения.ПолноеИмяФайлаВРабочемКаталогеПапки,
			ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная,
			ПараметрыВыполнения.НаЧтение,
			ПараметрыВыполнения.ИдентификаторФормы,
			ПараметрыВыполнения.ДополнительныеПараметры);
		Возврат;
	КонецЕсли;

	// Получаем путь файла в рабочем каталоге - с проверкой на уникальность.
	Если ПараметрыВыполнения.ПолноеИмяФайла = "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Ошибка получения файла из хранилища файлов
			           |в рабочий каталог.'"));
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	// Выяснено, что Файл в рабочем каталоге есть.
	// Проверка даты изменения и принятие решения, что делать дальше.
	Обработчик = Новый ОписаниеОповещения("ПолучитьССервераИЗарегистрироватьВРабочемКаталогеПапкиПослеВыбораДействия", ЭтотОбъект, ПараметрыВыполнения);
	
	ФайловыеФункцииСлужебныйКлиент.ДействиеПриОткрытииФайлаВРабочемКаталоге(
		Обработчик,
		ПараметрыВыполнения.ПолноеИмяФайла,
		ПараметрыВыполнения.ДанныеФайла);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПолучитьССервераИЗарегистрироватьВРабочемКаталогеПапкиПослеВыбораДействия(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = "ВзятьИзХранилищаИОткрыть" Тогда
		
		// В рабочем каталоге папки настройка подтверждения при удалении не используется.
		УдалитьФайлБезПодтверждения(ПараметрыВыполнения.ПолноеИмяФайла);
		
		ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(
			ПараметрыВыполнения.ОбработчикРезультата,
			ПараметрыВыполнения.ДанныеФайла,
			ПараметрыВыполнения.ПолноеИмяФайла,
			ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная,
			ПараметрыВыполнения.НаЧтение,
			ПараметрыВыполнения.ИдентификаторФормы,
			ПараметрыВыполнения.ДополнительныеПараметры);
		
	ИначеЕсли Результат = "ОткрытьСуществующий" Тогда
		
		Если ПараметрыВыполнения.ДанныеФайла.ВРабочемКаталогеНаЧтение <> ПараметрыВыполнения.НаЧтение Тогда
			ВРабочемКаталогеВладельца = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца <> "";
			
			ПеререгистрироватьВРабочемКаталоге(
				ПараметрыВыполнения.ДанныеФайла.Версия,
				ПараметрыВыполнения.ПолноеИмяФайла,
				ПараметрыВыполнения.НаЧтение,
				ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		ПараметрыВыполнения.ФайлПолучен = Истина;
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
		
	Иначе // Результат = "Отмена".
		ПараметрыВыполнения.ПолноеИмяФайла = "";
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проверка максимальной длины рабочего каталога с заменой и переносом файлов.

// Проверяет максимальную длину, если нужно - меняет рабочий каталог и переносит файлы.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ДанныеФайла  - структура с данными файла.
//  ПолноеИмяФайла - Строка - полное имя файла.
//  НормальноеИмяФайла - Строка - имя файла (без пути).
//
// Возвращаемое значение:
//   Булево - Успешно ли выполнена операция.
//       * Истина если длина полного имени файла не превышает 260.
//
Процедура ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталоге(ОбработчикРезультата,
		ДанныеФайла, ПолноеИмяФайла, НормальноеИмяФайла)
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыВыполнения.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	ПараметрыВыполнения.Вставить("НормальноеИмяФайла", НормальноеИмяФайла);
	
	ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталогеЗапуск(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталогеЗапуск(ПараметрыВыполнения)
	
	#Если ВебКлиент Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
		Возврат;
	#КонецЕсли
	
	ПараметрыВыполнения.Вставить("ИмяКаталогаПрежнееЗначение", ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца);
	ПараметрыВыполнения.Вставить("МаксимальнаяДлинаПолногоПути", 260);
	Если НРег(ПараметрыВыполнения.ДанныеФайла.Расширение) = "xls" Или НРег(ПараметрыВыполнения.ДанныеФайла.Расширение) = "xlsx" Тогда
		// Excel Длина имени файла вместе с путем не должна превышать 218 знака.
		ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути = 218;
	КонецЕсли;
	
	МаксимальнаяДлинаИмениФайла = ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути - 5; // 5 - минимум для "C:\1\"
	
	Если СтрДлина(ПараметрыВыполнения.ПолноеИмяФайла) <= ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Длина полного пути к файлу (рабочий каталог плюс имя файла) превышает %1 символов
		           |""%2"".'"),
		ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути,
		ПараметрыВыполнения.ПолноеИмяФайла);
	
	ПутьКаталогаПользователя = КаталогДанныхПользователя();
	МаксимальнаяДлинаИмениФайла = ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути - СтрДлина(ПутьКаталогаПользователя);
	
	// Если  имя  файла плюс 5 превышает 260 - пишем "Измените имя  файла на более короткое. ОК" и выходим.
	Если СтрДлина(ПараметрыВыполнения.НормальноеИмяФайла) > МаксимальнаяДлинаИмениФайла Тогда
		ТекстСообщения = ТекстСообщения + Символы.ВК + Символы.ВК
			+ НСтр("ru = 'Измените имя файла на более короткое.'");
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстСообщения, Ложь);
		Возврат;
	КонецЕсли;
	
	// Если структура папок (путь к рабочему каталогу текущей папки) превышает 260-5 (1.txt), пишем "Измените имена папок
	// или перенесите текущую папку в другую папку".
	Если СтрДлина(ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца) > ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути - 5 Тогда
		ТекстСообщения = ТекстСообщения + Символы.ВК + Символы.ВК
			+ НСтр("ru = 'Измените имена папок или перенесите текущую папку в другую папку.'");
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстСообщения, Ложь);
		Возврат;
	КонецЕсли;
	
	ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталогеПредложитьВыборКаталога(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталогеПредложитьВыборКаталога(ПараметрыВыполнения)
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Длина полного пути к файлу (рабочий каталог плюс имя файла) превышает %1 символов
		|""%2"".
		|
		|Выбрать другой основной рабочий каталог?
		|(Содержимое рабочего каталога будет перенесено в выбранный каталог).'"),
		ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути, ПараметрыВыполнения.ПолноеИмяФайла);
	Обработчик = Новый ОписаниеОповещения("ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталогеНачатьВыборКаталога", ЭтотОбъект, ПараметрыВыполнения);
	ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталогеНачатьВыборКаталога(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	// Выбираем другой путь к рабочему каталогу.
	Заголовок = НСтр("ru = 'Выберите другой рабочий каталог'");
	КаталогВыбран = ВыбратьПутьКРабочемуКаталогу(ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца, Заголовок, Истина);
	Если Не КаталогВыбран Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.ПолноеИмяФайла = ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца + ПараметрыВыполнения.НормальноеИмяФайла;
	
	// уложились в 260 символов
	Если СтрДлина(ПараметрыВыполнения.ПолноеИмяФайла) <= ПараметрыВыполнения.МаксимальнаяДлинаПолногоПути Тогда
		Обработчик = Новый ОписаниеОповещения("ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталогеПослеПереносаСодержимогоРабочегоКаталога", ЭтотОбъект, ПараметрыВыполнения);
		ПеренестиСодержимоеРабочегоКаталога(Обработчик, ПараметрыВыполнения.ИмяКаталогаПрежнееЗначение, ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца);
	Иначе
		ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталогеПредложитьВыборКаталога(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталогеПослеПереносаСодержимогоРабочегоКаталога(СодержимоеПеренесено, ПараметрыВыполнения) Экспорт
	
	Если СодержимоеПеренесено Тогда
		// Регистр сведений ФайлыВРабочемКаталоге - сейчас там полный путь к файлу -
		// надо его менять - выделять общую часть и replace. -просто SQL запросом -
		// для текущего пользователя.
		РаботаСФайламиСлужебныйВызовСервера.СохранитьРабочийКаталогПапкиИЗаменитьПутиВРегистре(
			ПараметрыВыполнения.ДанныеФайла.Владелец,
			ПараметрыВыполнения.ДанныеФайла.РабочийКаталогВладельца,
			ПараметрыВыполнения.ИмяКаталогаПрежнееЗначение);
	КонецЕсли;
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, СодержимоеПеренесено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Копирование содержимого из одного каталога в другой.

// Копирует все файлы в указанном каталоге в другой каталог.
//
// Параметры:
//   ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//   КаталогИсточника  - Строка - прежнее имя каталога.
//   КаталогПриемника  - Строка - новое имя каталога.
//
// Возвращаемое значение:
//   Структура - Результат копирования.
//       * ВозниклаОшибка           - Булево - Истина когда все файлы скопированы.
//       * ИнформацияОбОшибке       - ИнформацияОбОшибке - Информация об ошибке.
//       * ПолноеИмяСбойногоФайла   - Строка - Полное имя файла, при копировании которого возникла ошибка.
//       * СкопированныеФайлыИПапки - Массив - Полные имена файлов и папок приемника.
//       * ОригинальныеФайлыИПапки  - Массив - Полные имена файлов и папок источника.
//
Процедура СкопироватьСодержимоеКаталога(ОбработчикРезультата, Знач КаталогИсточника, Знач КаталогПриемника)
	
	Результат = Новый Структура;
	Результат.Вставить("ВозниклаОшибка",           Ложь);
	Результат.Вставить("ПолноеИмяСбойногоФайла",   "");
	Результат.Вставить("ИнформацияОбОшибке",       "");
	Результат.Вставить("СкопированныеФайлыИПапки", Новый Массив);
	Результат.Вставить("ОригинальныеФайлыИПапки",  Новый Массив);
	
	КопироватьСодержимоеКаталога(Результат, КаталогИсточника, КаталогПриемника);
	
	Если Результат.ВозниклаОшибка Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось скопировать файл
			           |""%1"".
			           |Возможно он занят другим приложением.
			           |
			           |Повторить операцию?'"),
			Результат.ПолноеИмяСбойногоФайла);
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
		ПараметрыВыполнения.Вставить("КаталогИсточника", КаталогИсточника);
		ПараметрыВыполнения.Вставить("КаталогПриемника", КаталогПриемника);
		ПараметрыВыполнения.Вставить("Результат", Результат);
		
		Обработчик = Новый ОписаниеОповещения(
			"СкопироватьСодержимоеКаталогаПослеОтветаНаВопрос", ЭтотОбъект, ПараметрыВыполнения);
		
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВернутьРезультат(ОбработчикРезультата, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СкопироватьСодержимоеКаталогаПослеОтветаНаВопрос(Ответ, ПараметрыВыполнения)
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения.Результат);
	Иначе
		СкопироватьСодержимоеКаталога(
			ПараметрыВыполнения.ОбработчикРезультата,
			ПараметрыВыполнения.КаталогИсточника,
			ПараметрыВыполнения.КаталогПриемника);
	КонецЕсли;
	
КонецПроцедуры

// Копирует все файлы в указанном каталоге в другой каталог.
//
// Параметры:
//   Результат - Структура - Результат копирования. См. СкопироватьСодержимоеКаталога(), возвращаемое значение.
//   КаталогИсточника  - Строка - прежнее имя каталога.
//   КаталогПриемника  - Строка - новое имя каталога.
//
Процедура КопироватьСодержимоеКаталога(Результат, КаталогИсточника, КаталогПриемника)
	
	КаталогПриемника = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогПриемника);
	КаталогИсточника = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогИсточника);
	
	СоздатьКаталог(КаталогПриемника);
	
	Результат.СкопированныеФайлыИПапки.Добавить(КаталогПриемника);
	Результат.ОригинальныеФайлыИПапки.Добавить(КаталогИсточника);
	
	ФайлыИсточника = НайтиФайлы(КаталогИсточника, "*");
	
	Для Каждого ФайлИсточника Из ФайлыИсточника Цикл
		
		ФайлИсточникаПолноеИмя = ФайлИсточника.ПолноеИмя;
		ФайлИсточникаИмя       = ФайлИсточника.Имя;
		ФайлПриемникаПолноеИмя = КаталогПриемника + ФайлИсточникаИмя;
		
		Если ФайлИсточника.ЭтоКаталог() Тогда
			
			КопироватьСодержимоеКаталога(Результат, ФайлИсточникаПолноеИмя, ФайлПриемникаПолноеИмя);
			Если Результат.ВозниклаОшибка Тогда
				Возврат;
			КонецЕсли;
			
		Иначе
			
			Результат.ОригинальныеФайлыИПапки.Добавить(ФайлИсточникаПолноеИмя);
			
			ФайлПриемника = Новый Файл(ФайлПриемникаПолноеИмя);
			Если ФайлПриемника.Существует() Тогда
				// Это нужно для обратного копирования - в этом случае файлы уже могут существовать.
				Результат.СкопированныеФайлыИПапки.Добавить(ФайлПриемникаПолноеИмя);
			Иначе
				Попытка
					КопироватьФайл(ФайлИсточникаПолноеИмя, ФайлПриемникаПолноеИмя);
				Исключение
					Результат.ВозниклаОшибка         = Истина;
					Результат.ИнформацияОбОшибке     = ИнформацияОбОшибке();
					Результат.ПолноеИмяСбойногоФайла = ФайлИсточникаПолноеИмя;
					Возврат;
				КонецПопытки;
				Результат.СкопированныеФайлыИПапки.Добавить(ФайлПриемникаПолноеИмя);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Перенос содержимого рабочего каталога в новый.

// Переносит все файлы в рабочем каталоге в другой каталог (в том числе и взятые на редактирование).
//
// Параметры:
//   ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//   КаталогИсточника - Строка - Прежнее имя каталога.
//   КаталогПриемника - Строка - Новое имя каталога.
//
// Возвращаемое значение:
//   Булево - Успешно ли выполнена операция.
//
Процедура ПеренестиСодержимоеРабочегоКаталога(ОбработчикРезультата, КаталогИсточника, КаталогПриемника) Экспорт
	
	// Новый путь является подмножеством старого. Это запрещено, т.к. может привести к зацикливанию.
	Если СтрНайти(НРег(КаталогПриемника), НРег(КаталогИсточника)) <> 0 Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выбранный рабочий каталог
			           |""%1""
			           |входит в старый рабочий каталог
			           |""%2"".'"),
			КаталогПриемника,
			КаталогИсточника);
		ВернутьРезультатПослеПоказаПредупреждения(ОбработчикРезультата, ТекстПредупреждения, Ложь);
		Возврат;
	КонецЕсли;
	
	// Копирование файлов из старого каталога в новый.
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыОбработчика.Вставить("КаталогИсточника", КаталогИсточника);
	ПараметрыОбработчика.Вставить("КаталогПриемника", КаталогПриемника);
	Обработчик = Новый ОписаниеОповещения("ПеренестиСодержимоеРабочегоКаталогаПослеКопированияВНовыйКаталог", ЭтотОбъект, ПараметрыОбработчика);
	
	СкопироватьСодержимоеКаталога(Обработчик, КаталогИсточника, КаталогПриемника);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПеренестиСодержимоеРабочегоКаталогаПослеКопированияВНовыйКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ВозниклаОшибка Тогда
		// Возникла ошибка копирования, затем пользователь отменил операцию.
		
		Обработчик = Новый ОписаниеОповещения(
			"ПеренестиСодержимоеРабочегоКаталогаПослеОтменыИОчисткиПриемника",
			ЭтотОбъект,
			ПараметрыВыполнения);
		
		УдалитьСодержимоеКаталога(Обработчик, Результат.СкопированныеФайлыИПапки); // Очистка папки приемника.
	Иначе
		// Копирование прошло успешно. Очистка старого каталога.
		Обработчик = Новый ОписаниеОповещения(
			"ПеренестиСодержимоеРабочегоКаталогаПослеУспехаИОчисткиИсточника",
			ЭтотОбъект,
			ПараметрыВыполнения);
		
		УдалитьСодержимоеКаталога(Обработчик, Результат.ОригинальныеФайлыИПапки);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПеренестиСодержимоеРабочегоКаталогаПослеОтменыИОчисткиПриемника(КаталогПриемникаОчищен, ПараметрыВыполнения) Экспорт
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПеренестиСодержимоеРабочегоКаталогаПослеУспехаИОчисткиИсточника(КаталогИсточникаОчищен, ПараметрыВыполнения) Экспорт
	
	Если КаталогИсточникаОчищен Тогда
		// Старый каталог очищен. Все шаги операции успешно завершены.
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	Иначе
		// Старый каталог не очищен. Откат всей операции.
		Обработчик = Новый ОписаниеОповещения("ПеренестиСодержимоеРабочегоКаталогаПослеУспехаИОтменыОчистки", ЭтотОбъект, ПараметрыВыполнения);
		СкопироватьСодержимоеКаталога(Обработчик, ПараметрыВыполнения.КаталогПриемника, ПараметрыВыполнения.КаталогИсточника);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПеренестиСодержимоеРабочегоКаталогаПослеУспехаИОтменыОчистки(Результат, ПараметрыВыполнения) Экспорт
	
	// Откат операции.
	Если Результат.ВозниклаОшибка Тогда
		// Надо предупредить, что даже во время отката операции произошла ошибка.
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось скопировать обратно содержимое каталога
			           |""%1""
			           |в каталог
			           |""%2"".'"),
			ПараметрыВыполнения.КаталогПриемника,
			ПараметрыВыполнения.КаталогИсточника);
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстПредупреждения, Ложь);
	Иначе
		// Откат операции прошел успешно.
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Удаление массива путей переданных папок и файлов.

// Удаляет все файлы и папки из переданного массива.
//   Обход с конца.
//
// Параметры:
//   ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//   СкопированныеФайлыИПапки - Массив - (Строка) Массив путей файлов и папок.
//
// Возвращаемое значение:
//   Булево - Успешно ли выполнена операция.
//
Процедура УдалитьСодержимоеКаталога(ОбработчикРезультата, СкопированныеФайлыИПапки)
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("СкопированныеФайлыИПапки", СкопированныеФайлыИПапки);
	ПараметрыВыполнения.Вставить("ВГраница", СкопированныеФайлыИПапки.Количество() - 1);
	ПараметрыВыполнения.Вставить("Индекс", 0);
	
	УдалитьСодержимоеКаталогаЗапуск(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура УдалитьСодержимоеКаталогаЗапуск(ПараметрыВыполнения)
	
	Для Индекс = ПараметрыВыполнения.Индекс По ПараметрыВыполнения.ВГраница Цикл
		Путь = ПараметрыВыполнения.СкопированныеФайлыИПапки[ПараметрыВыполнения.ВГраница - Индекс];
		Файл = Новый Файл(Путь);
		Если Не Файл.Существует() Тогда
			Продолжить; // Например временный файл Word ~aaa.doc мог быть удален при закрытии Word.
		КонецЕсли;
		
		Попытка
			Если Файл.ЭтоФайл() И Файл.ПолучитьТолькоЧтение() Тогда
				Файл.УстановитьТолькоЧтение(Ложь);
			КонецЕсли;
			УдалитьФайлы(Путь);
			ФайлУдален = Истина;
		Исключение
			ФайлУдален = Ложь;
		КонецПопытки;
		
		Если Не ФайлУдален Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось удалить файл
				           |""%1"".
				           |Возможно он занят другим приложением.
				           |
				           |Повторить операцию?'"),
				Путь);
			ПараметрыВыполнения.Индекс = Индекс;
			Обработчик = Новый ОписаниеОповещения("УдалитьСодержимоеКаталогаПослеОтветаНаВопросПовторить", ЭтотОбъект, ПараметрыВыполнения);
			ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Истина);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура УдалитьСодержимоеКаталогаПослеОтветаНаВопросПовторить(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
	Иначе
		УдалитьСодержимоеКаталогаЗапуск(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Импорт файлов с проверкой размера.

// Импорт - с вспомогательными операциями типа проверки предельного размера и впоследствии удаления файлов и показа
//          ошибок при импорте только одной папки - вернет на нее ссылку.
//
// Параметры:
//  ПараметрыВыполнения - Структура - см. ПараметрыИмпортаФайлов.
//
// Возвращаемое значение:
//   Неопределено - Если импорт не выполнен.
//   Структура - Если импорт выполнен.
//       * ПапкаДляДобавленияТекущая - СправочникСсылка.ПапкиФайлов - Папка для добавления.
//
Процедура ВыполнитьИмпортФайлов(Знач ПараметрыВыполнения) Экспорт
	
	СлужебныеПараметры = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыполнения);
	Обработчик = Новый ОписаниеОповещения("ИмпортФайловПослеПроверкиРазмеров", ЭтотОбъект, СлужебныеПараметры);
	ПроверитьПредельныйРазмерФайлов(Обработчик, СлужебныеПараметры);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ИмпортФайловПослеПроверкиРазмеров(Результат, ПараметрыВыполнения) Экспорт
	
	Состояние();
	
	Если Результат.Успех = Ложь Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("КоличествоСуммарное", Результат.КоличествоСуммарное);
	Если ПараметрыВыполнения.КоличествоСуммарное = 0 Тогда
		Если ПараметрыВыполнения.РежимЗагрузки Тогда
			ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
		Иначе
			ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, НСтр("ru = 'Нет файлов для добавления'"), Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("ПерваяПапкаСТакимЖеИменем", Неопределено);
	ПараметрыВыполнения.Вставить("ПапкаДляДобавленияТекущая", Неопределено);
	ПараметрыВыполнения.Вставить("ВыбранныеФайлыВГраница", ПараметрыВыполнения.ВыбранныеФайлы.Количество()-1);
	ПараметрыВыполнения.Вставить("ВыбранныеФайлыИндекс", -1);
	ПараметрыВыполнения.Вставить("Индикатор", 0);
	ПараметрыВыполнения.Вставить("Счетчик", 0);
	ПараметрыВыполнения.Вставить("МассивФайлов", Новый Массив);
	ПараметрыВыполнения.Вставить("МассивИменФайловСОшибками", Новый Массив);
	ПараметрыВыполнения.Вставить("МассивСтруктурВсехФайлов", Новый Массив);
	ПараметрыВыполнения.Вставить("МассивВсехПапок", Новый Массив);
	ПараметрыВыполнения.Вставить("МассивФайловЭтогоКаталога", Неопределено);
	ПараметрыВыполнения.Вставить("ИмяПапки", Неопределено);
	ПараметрыВыполнения.Вставить("Путь", Неопределено);
	ПараметрыВыполнения.Вставить("ПапкаУжеНайдена", Неопределено);
	ЗарегистрироватьОписаниеОбработчика(ПараметрыВыполнения, ЭтотОбъект, "ИмпортФайловЦиклПродолжитьИмпортПослеВопросовВРекурсии");
	ИмпортФайловЦикл(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ИмпортФайловЦикл(ПараметрыВыполнения)
	
	ПараметрыВыполнения.ВыбранныеФайлыИндекс = ПараметрыВыполнения.ВыбранныеФайлыИндекс + 1;
	Для Индекс = ПараметрыВыполнения.ВыбранныеФайлыИндекс По ПараметрыВыполнения.ВыбранныеФайлыВГраница Цикл
		ПараметрыВыполнения.ВыбранныеФайлыИндекс = Индекс;
		ИмяФайла = ПараметрыВыполнения.ВыбранныеФайлы[Индекс];
		
		ВыбранныйФайл = Новый Файл(ИмяФайла.Значение);
		
		ВыбранКаталог = Ложь;
		Если ВыбранныйФайл.Существует() Тогда
			ВыбранКаталог = ВыбранныйФайл.ЭтоКаталог();
		КонецЕсли;
		
		Если ВыбранКаталог Тогда
			ПараметрыВыполнения.Путь = ИмяФайла.Значение;
			ПараметрыВыполнения.МассивФайловЭтогоКаталога = ФайловыеФункцииСлужебныйКлиентСервер.НайтиФайлыПсевдо(ПараметрыВыполнения.ПсевдоФайловаяСистема, ПараметрыВыполнения.Путь);
			
			ПараметрыВыполнения.ИмяПапки = ВыбранныйФайл.Имя;
			
			ПараметрыВыполнения.ПапкаУжеНайдена = Ложь;
			
			Если РаботаСФайламиСлужебныйВызовСервера.ЕстьПапкаСТакимИменем(ПараметрыВыполнения.ИмяПапки, ПараметрыВыполнения.Владелец, ПараметрыВыполнения.ПерваяПапкаСТакимЖеИменем) Тогда
				Если ПараметрыВыполнения.РежимЗагрузки Тогда
					ПараметрыВыполнения.ПапкаУжеНайдена = Истина;   
					ПараметрыВыполнения.ПапкаДляДобавленияТекущая = ПараметрыВыполнения.ПерваяПапкаСТакимЖеИменем;
				Иначе
					ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Папка ""%1"" уже существует.
						           |
						           |Продолжить импорт папки?'"),
						ПараметрыВыполнения.ИмяПапки);
					Обработчик = Новый ОписаниеОповещения("ИмпортФайловЦиклПослеОтветаНаВопросПродолжить", ЭтотОбъект, ПараметрыВыполнения);
					ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			ИмпортФайловЦиклПродолжитьИмпорт(ПараметрыВыполнения);
			Если ПараметрыВыполнения.АсинхронныйДиалог.Открыт = Истина Тогда
				Возврат;
			КонецЕсли;
		Иначе
			ПараметрыВыполнения.МассивФайлов.Добавить(ВыбранныйФайл);
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыВыполнения.МассивФайлов.Количество() <> 0 Тогда
		// Собственно импорт 
		ЗарегистрироватьОписаниеОбработчика(ПараметрыВыполнения, ЭтотОбъект, "ИмпортФайловПослеЦиклаПослеВопросовВРекурсии");
		ИмпортФайловРекурсивно(ПараметрыВыполнения.Владелец, ПараметрыВыполнения.МассивФайлов, ПараметрыВыполнения);
		
		Если ПараметрыВыполнения.АсинхронныйДиалог.Открыт = Истина Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмпортФайловПослеЦиклаПродолжение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ИмпортФайловЦиклПослеОтветаНаВопросПродолжить(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Нет Тогда
		ИмпортФайловЦиклПродолжитьИмпорт(ПараметрыВыполнения);
	КонецЕсли;
	
	ИмпортФайловЦикл(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ИмпортФайловЦиклПродолжитьИмпорт(ПараметрыВыполнения)
	
	Если Не ПараметрыВыполнения.ПапкаУжеНайдена Тогда
		ПараметрыВыполнения.ПапкаДляДобавленияТекущая = РаботаСФайламиСлужебныйВызовСервера.СправочникиПапкиСоздатьЭлемент(
			ПараметрыВыполнения.ИмяПапки, ПараметрыВыполнения.Владелец);
	КонецЕсли;
	
	// Собственно импорт
	ИмпортФайловРекурсивно(ПараметрыВыполнения.ПапкаДляДобавленияТекущая, ПараметрыВыполнения.МассивФайловЭтогоКаталога, ПараметрыВыполнения);
	Если ПараметрыВыполнения.АсинхронныйДиалог.Открыт = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.МассивВсехПапок.Добавить(ПараметрыВыполнения.Путь);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ИмпортФайловЦиклПродолжитьИмпортПослеВопросовВРекурсии(Результат, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения.АсинхронныйДиалог.Открыт = Ложь;
	ПараметрыВыполнения.МассивВсехПапок.Добавить(ПараметрыВыполнения.Путь);
	ИмпортФайловЦикл(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ИмпортФайловПослеЦиклаПослеВопросовВРекурсии(Результат, ПараметрыВыполнения) Экспорт
	
	ИмпортФайловПослеЦиклаПродолжение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ИмпортФайловПослеЦиклаПродолжение(ПараметрыВыполнения)
	
	Если ПараметрыВыполнения.МассивСтруктурВсехФайлов.Количество() > 1 Тогда
		
		ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Импорт файлов завершен. Импортировано файлов: %1'"), Строка(ПараметрыВыполнения.МассивСтруктурВсехФайлов.Количество()) );
			
		Если ПараметрыВыполнения.РежимЗагрузки Тогда
			ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загрузка файлов завершена. Загружено файлов: %1'"), Строка(ПараметрыВыполнения.МассивСтруктурВсехФайлов.Количество()) );
		КонецЕсли;
		
		Состояние(ТекстСостояния);
	Иначе
		Состояние();
	КонецЕсли;
	
	Если ПараметрыВыполнения.УдалятьФайлыПослеДобавления = Истина Тогда
		ФайловыеФункцииСлужебныйКлиентСервер.УдалитьФайлыПослеДобавления(
			ПараметрыВыполнения.МассивСтруктурВсехФайлов, ПараметрыВыполнения.МассивВсехПапок, ПараметрыВыполнения.РежимЗагрузки);
	КонецЕсли;
	
	Если ПараметрыВыполнения.МассивСтруктурВсехФайлов.Количество() = 1 Тогда
		Элемент0 = ПараметрыВыполнения.МассивСтруктурВсехФайлов[0];
		Ссылка = ПолучитьНавигационнуюСсылку(Элемент0.Файл);
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"),
			Ссылка,
			Элемент0.Файл,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	// Вывод сообщений об ошибках
	Если ПараметрыВыполнения.МассивИменФайловСОшибками.Количество() <> 0 Тогда
		Параметры = Новый Структура;
		Параметры.Вставить("МассивИменФайловСОшибками", ПараметрыВыполнения.МассивИменФайловСОшибками);
		Если ПараметрыВыполнения.РежимЗагрузки Тогда
			Параметры.Вставить("Заголовок", НСтр("ru = 'Отчет о загрузке файлов'"));
		КонецЕсли;
		
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаОтчета", Параметры);
	КонецЕсли;
	
	Если ПараметрыВыполнения.ВыбранныеФайлы.Количество() <> 1 Тогда
		ПараметрыВыполнения.ПапкаДляДобавленияТекущая = Неопределено;
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сохранение Файла на диск

// Сохранение на диск Файла
// 
// Параметры:
//   ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//   ДанныеФайла  - структура с данными файла.
//   УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Строка - выбранный полный путь файла.
//
Процедура СохранитьКак(ОбработчикРезультата, ДанныеФайла, УникальныйИдентификатор) Экспорт
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыВыполнения.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		СохранитьКакСРасширением(ПараметрыВыполнения);
	Иначе
		СохранитьКакБезРасширения(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьКакСРасширением(ПараметрыВыполнения)
	
	// Проверим - если файл уже есть в кэше, и он новее чем в базе - дадим диалог с выбором.
	ПараметрыВыполнения.Вставить("ПутьКФайлуВКэше", "");
	Если ПараметрыВыполнения.ДанныеФайла.РедактируетТекущийПользователь Тогда
		ВРабочемКаталогеНаЧтение = Истина;
		ВРабочемКаталогеВладельца = Ложь;
		ПараметрыВыполнения.Вставить("ПолноеИмяФайла", "");
		ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(ПараметрыВыполнения.ДанныеФайла, ПараметрыВыполнения.ДанныеФайла.Версия, ПараметрыВыполнения.ПолноеИмяФайла, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		
		Если ФайлВРабочемКаталоге = Истина Тогда
			
			ДатаФайлаВБазе = ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная;
			
			ФайлВерсии = Новый Файл(ПараметрыВыполнения.ПолноеИмяФайла);
			ДатаФайлаНаДиске = ФайлВерсии.ПолучитьУниверсальноеВремяИзменения();
			
			Если ДатаФайлаНаДиске > ДатаФайлаВБазе Тогда // В рабочем каталоге более новый (изменен пользователем со стороны).
				ПараметрыОткрытияФормы = Новый Структура;
				ПараметрыОткрытияФормы.Вставить("Файл", ПараметрыВыполнения.ПолноеИмяФайла);
				
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Дата изменения файла ""%1""
					           |в рабочем каталоге более поздняя (новее), чем в хранилище файлов.
					           |Возможно, файл был изменен.'"),
					Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка));
				
				ПараметрыОткрытияФормы.Вставить("Сообщение", Сообщение);
				
				Обработчик = Новый ОписаниеОповещения("СохранитьКакСРасширениемПослеОтветаНаВопросДатаНовее", ЭтотОбъект, ПараметрыВыполнения);
				ОткрытьФорму("Справочник.Файлы.Форма.РежимСозданияФайлаДляСохранитьКак", ПараметрыОткрытияФормы, , , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СохранитьКакСРасширениемПродолжение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьКакСРасширениемПослеОтветаНаВопросДатаНовее(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Или Ответ = Неопределено Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, "");
		Возврат;
	КонецЕсли;
	
	Если Ответ = 1 Тогда // На основе файла на локальном компьютере.
		ПараметрыВыполнения.ПутьКФайлуВКэше = ПараметрыВыполнения.ПолноеИмяФайла;
	КонецЕсли;
	
	СохранитьКакСРасширениемПродолжение(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьКакСРасширениемПродолжение(ПараметрыВыполнения)
	
	ПараметрыВыполнения.Вставить("ПутьВыбора", ПараметрыВыполнения.ДанныеФайла.ПапкаДляСохранитьКак);
	Если ПараметрыВыполнения.ПутьВыбора = Неопределено Или ПараметрыВыполнения.ПутьВыбора = "" Тогда
		#Если Не ВебКлиент Тогда
			Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Данная команда не поддерживается в базовой версии.'"));
				ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, "");
				Возврат;
			КонецЕсли;
		#КонецЕсли
		
		ПараметрыВыполнения.ПутьВыбора = ФайловыеФункцииСлужебныйКлиент.КаталогМоиДокументы();
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("СохранятьСРасшифровкой", Ложь);
	ПараметрыВыполнения.Вставить("РасширениеДляЗашифрованныхФайлов", "");
	
	Если ПараметрыВыполнения.ДанныеФайла.Зашифрован Тогда
		Обработчик = Новый ОписаниеОповещения("СохранитьКакСРасширениемПослеВыбораРежимаСохранения",
			ЭтотОбъект, ПараметрыВыполнения);
		
		ОткрытьФорму("Справочник.Файлы.Форма.ВыборСохраненияШифрованногоФайла", , , , , ,
			Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		СохранитьКакСРасширениемПослеВыбораРежимаСохранения(-1, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьКакСРасширениемПослеВыбораРежимаСохранения(Результат, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ПараметрыВыполнения.РасширениеДляЗашифрованныхФайлов = Результат.РасширениеДляЗашифрованныхФайлов;
		
		Если Результат.СохранятьСРасшифровкой = 1 Тогда
			ПараметрыВыполнения.СохранятьСРасшифровкой = Истина;
		Иначе
			ПараметрыВыполнения.СохранятьСРасшифровкой = Ложь;
		КонецЕсли;
		
	ИначеЕсли Результат <> -1 Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, "");
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыВыполнения.СохранятьСРасшифровкой Тогда
		СохранитьКакСРасширениемПослеРасшифровки(-1, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(ПараметрыВыполнения.ДанныеФайла.Версия,, 
		ПараметрыВыполнения.УникальныйИдентификатор);
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",              НСтр("ru = 'Расшифровка файла'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",       НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("Данные",                СтруктураВозврата.ДвоичныеДанные);
	ОписаниеДанных.Вставить("Представление",         ПараметрыВыполнения.ДанныеФайла.Ссылка);
	ОписаниеДанных.Вставить("СертификатыШифрования", ПараметрыВыполнения.ДанныеФайла.Ссылка);
	ОписаниеДанных.Вставить("СообщитьОЗавершении",   Ложь);
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("СохранитьКакСРасширениемПослеРасшифровки", ЭтотОбъект, ПараметрыВыполнения);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработчикПродолжения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьКакСРасширениемПослеРасшифровки(ОписаниеДанных, ПараметрыВыполнения) Экспорт
	
	Если ОписаниеДанных <> -1 Тогда
		Если Не ОписаниеДанных.Успех Тогда
			ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
			Возврат;
		КонецЕсли;
	
		Если ТипЗнч(ОписаниеДанных.РасшифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
			АдресФайла = ПоместитьВоВременноеХранилище(ОписаниеДанных.РасшифрованныеДанные,
				ПараметрыВыполнения.УникальныйИдентификатор);
		Иначе
			АдресФайла = ОписаниеДанных.РасшифрованныеДанные;
		КонецЕсли;
	Иначе
		АдресФайла = ПараметрыВыполнения.ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
		
		Если ПараметрыВыполнения.ДанныеФайла.ТекущаяВерсия <> ПараметрыВыполнения.ДанныеФайла.Версия Тогда
			АдресФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(
				ПараметрыВыполнения.ДанныеФайла.Версия, ПараметрыВыполнения.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ИмяСРасширением = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, ПараметрыВыполнения.ДанныеФайла.Расширение);
	
	Расширение = ПараметрыВыполнения.ДанныеФайла.Расширение;
	
	Если ПараметрыВыполнения.ДанныеФайла.Зашифрован
	   И Не ПараметрыВыполнения.СохранятьСРасшифровкой Тогда
		
		Если Не ПустаяСтрока(ПараметрыВыполнения.РасширениеДляЗашифрованныхФайлов) Тогда
			ИмяСРасширением = ИмяСРасширением + "." + ПараметрыВыполнения.РасширениеДляЗашифрованныхФайлов;
			Расширение = ПараметрыВыполнения.РасширениеДляЗашифрованныхФайлов;
		КонецЕсли;
	КонецЕсли;
	
	// Выбираем путь к файлу на диске.
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ВыборФайла.МножественныйВыбор = Ложь;
	ВыборФайла.ПолноеИмяФайла = ИмяСРасширением;
	ВыборФайла.Расширение = Расширение;
	Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Все файлы (*.%1)|*.%1'"), Расширение);
	ВыборФайла.Фильтр = Фильтр;
	ВыборФайла.Каталог = ПараметрыВыполнения.ПутьВыбора;
	
	Если Не ВыборФайла.Выбрать() Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Новый Структура);
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = ВыборФайла.ПолноеИмяФайла;
	
	Файл = Новый Файл(ПолноеИмяФайла);
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, ПараметрыВыполнения.ДанныеФайла.Расширение);
	
	РазмерВМб = ПараметрыВыполнения.ДанныеФайла.Размер / (1024 * 1024);
	
	ТекстПояснения =
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполняется сохранение файла ""%1"" (%2 Мб)...
			       |Пожалуйста, подождите.'"),
		ИмяФайла, 
		ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
		
	Состояние(ТекстПояснения);
	
	Если Файл.Существует() Тогда
		Если ПараметрыВыполнения.ПутьКФайлуВКэше <> ПолноеИмяФайла Тогда
			Файл.УстановитьТолькоЧтение(Ложь);
			УдалитьФайлы(ВыборФайла.ПолноеИмяФайла);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыполнения.ПутьКФайлуВКэше <> "" Тогда
		Если ПараметрыВыполнения.ПутьКФайлуВКэше <> ПолноеИмяФайла Тогда
			КопироватьФайл(ПараметрыВыполнения.ПутьКФайлуВКэше, ВыборФайла.ПолноеИмяФайла);
		КонецЕсли;
	Иначе
		ПередаваемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, АдресФайла);
		ПередаваемыеФайлы.Добавить(Описание);
		
		ПутьКФайлу = Файл.Путь;
		ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу);
		
		// Сохраним Файл из БД на диск.
		Если ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь) Тогда
			
			// Для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения.
			Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
				УдалитьИзВременногоХранилища(АдресФайла);
			КонецЕсли;
			
			НовыйФайл = Новый Файл(ПолноеИмяФайла);
			
			НовыйФайл.УстановитьУниверсальноеВремяИзменения(
				ПараметрыВыполнения.ДанныеФайла.ДатаМодификацииУниверсальная);
			
		КонецЕсли;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Файл успешно сохранен'"), , ПолноеИмяФайла);
	
	ПутьВыбораПрежний = ПараметрыВыполнения.ПутьВыбора;
	ПараметрыВыполнения.ПутьВыбора = Файл.Путь;
	Если ПутьВыбораПрежний <> ПараметрыВыполнения.ПутьВыбора Тогда
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПапкаДляСохранитьКак", ПараметрыВыполнения.ПутьВыбора);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Новый Структура("ПолноеИмяФайла", ПолноеИмяФайла));
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьКакБезРасширения(ПараметрыВыполнения)
	
	ПараметрыВыполнения.Вставить("СохранятьСРасшифровкой", Ложь);
	ПараметрыВыполнения.Вставить("РасширениеДляЗашифрованныхФайлов", "");
	
	Если ПараметрыВыполнения.ДанныеФайла.Зашифрован Тогда
		Обработчик = Новый ОписаниеОповещения("СохранитьКакБезРасширенияПослеВыбораРежимаСохранения",
			ЭтотОбъект, ПараметрыВыполнения);
		
		ОткрытьФорму("Справочник.Файлы.Форма.ВыборСохраненияШифрованногоФайла", , , , , ,
			Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		СохранитьКакБезРасширенияПослеВыбораРежимаСохранения(-1, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьКакБезРасширенияПослеВыбораРежимаСохранения(Результат, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ПараметрыВыполнения.РасширениеДляЗашифрованныхФайлов = Результат.РасширениеДляЗашифрованныхФайлов;
		
		Если Результат.СохранятьСРасшифровкой = 1 Тогда
			ПараметрыВыполнения.СохранятьСРасшифровкой = Истина;
		Иначе
			ПараметрыВыполнения.СохранятьСРасшифровкой = Ложь;
		КонецЕсли;
		
	ИначеЕсли Результат <> -1 Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, "");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьВременныйИдентификаторФормы(ПараметрыВыполнения.УникальныйИдентификатор, ПараметрыВыполнения);
	
	Обработчик = Новый ОписаниеОповещения("СохранитьКакБезРасширенияЗавершение", ЭтотОбъект, ПараметрыВыполнения);
	ОткрытьФайлБезРасширения(Обработчик, ПараметрыВыполнения.ДанныеФайла, ПараметрыВыполнения.УникальныйИдентификатор,
		Ложь, ПараметрыВыполнения.СохранятьСРасшифровкой, ПараметрыВыполнения.РасширениеДляЗашифрованныхФайлов);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьКакБезРасширенияЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	ОчиститьВременныйИдентификаторФормы(ПараметрыВыполнения);
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыВыполнения.СохранятьСРасшифровкой
	   И ПараметрыВыполнения.ДанныеФайла.Зашифрован
	   И ЗначениеЗаполнено(ПараметрыВыполнения.РасширениеДляЗашифрованныхФайлов) Тогда
		
		Расширение = ПараметрыВыполнения.РасширениеДляЗашифрованныхФайлов;
	Иначе
		Расширение = ПараметрыВыполнения.ДанныеФайла.Расширение;
	КонецЕсли;
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, Расширение);
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Новый Структура("ПолноеИмяФайла", ИмяФайла));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Показывает напоминание перед помещением файла, если оно настроено.

// Покажет напоминание - если стоит настройка.
//
// Параметры:
//   ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//
Процедура ПоказатьНапоминаниеПередПоместитьФайл(ОбработчикРезультата)
	
	ПерсональныеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
	Если ПерсональныеНастройки.ПоказыватьПодсказкиПриРедактированииФайлов = Истина Тогда
		Если Не ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
			// Кэшируем форму на клиенте
			Форма = РаботаСФайламиСлужебныйКлиентПовтИсп.ФормаНапоминанияПередПоместитьФайл();
			УстановитьОповещениеФормы(Форма, ОбработчикРезультата);
			Форма.Открыть();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ВернутьРезультат(ОбработчикРезультата, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проверяет размер файлов.

// Проверить Предельный Размер Файлов - вернет Ложь, если есть файлы, превышающие предельный размер,
//   и пользователь в диалоге предупреждения о наличии таких файлов выбрал "Отмена".
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ПараметрыПроверки - Структура - со свойствами:
//    * ВыбранныеФайлы - Массив - массив объектов "Файл".
//    * Рекурсивно - Булево - Рекурсивно обходить подкаталоги.
//    * ПсевдоФайловаяСистема - Соответствие - эмуляция файловой системы - для строки (каталога) возвращает массив
//                                             строк (подкаталоги и файлы).
//    * РежимЗагрузки - Булево - Режим загрузки (из фонового задания ЗагрузкаФайлов).
//
// Возвращаемое значение:
//   Структура - результат:
//       * Успех               - Булево - Успешно ли выполнена операция.
//       * КоличествоСуммарное - Число  - Количество импортированных файлов.
//
Процедура ПроверитьПредельныйРазмерФайлов(ОбработчикРезультата, ПараметрыПроверки)
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("КоличествоСуммарное", 0);
	ПараметрыВыполнения.Вставить("Успех", Ложь);
	
	МассивСлишкомБольшихФайлов = Новый Массив;
	
	Путь = "";
	
	МассивФайлов = Новый Массив;
	
	Для Каждого ИмяФайла Из ПараметрыПроверки.ВыбранныеФайлы Цикл
		
		Путь = ИмяФайла.Значение;
		ВыбранныйФайл = Новый Файл(Путь);
		
		ВыбранныйФайл = Новый Файл(ИмяФайла.Значение);
		ВыбранКаталог = Ложь;
		
		Если ВыбранныйФайл.Существует() Тогда
			ВыбранКаталог = ВыбранныйФайл.ЭтоКаталог();
		КонецЕсли;
		
		Если ВыбранКаталог Тогда
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Идет сбор информации о каталоге
				           |""%1"".
				           |Пожалуйста, подождите.'"),
				Путь));
			
			МассивФайловЭтогоКаталога = ФайловыеФункцииСлужебныйКлиентСервер.НайтиФайлыПсевдо(ПараметрыПроверки.ПсевдоФайловаяСистема, Путь);
			НайтиСлишкомБольшиеФайлы(МассивФайловЭтогоКаталога, МассивСлишкомБольшихФайлов, ПараметрыПроверки.Рекурсивно, 
				ПараметрыВыполнения.КоличествоСуммарное, ПараметрыПроверки.ПсевдоФайловаяСистема);
		Иначе
			МассивФайлов.Добавить(ВыбранныйФайл);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивФайлов.Количество() <> 0 Тогда
		НайтиСлишкомБольшиеФайлы(МассивФайлов, МассивСлишкомБольшихФайлов, ПараметрыПроверки.Рекурсивно, 
			ПараметрыВыполнения.КоличествоСуммарное, ПараметрыПроверки.ПсевдоФайловаяСистема);
	КонецЕсли;
	
	// Был хоть один слишком большой файл.
	Если МассивСлишкомБольшихФайлов.Количество() <> 0 Тогда 
		ФайлыБольшие = Новый СписокЗначений;
		Параметры = Новый Структура;
		
		Для Каждого Файл Из МассивСлишкомБольшихФайлов Цикл
			БольшойФайл = Новый Файл(Файл);
			РазмерФайлаВМб = Цел(БольшойФайл.Размер() / (1024 * 1024));
			ТекстСтроки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2 МБ)'"), Строка(Файл), Строка(РазмерФайлаВМб));
			ФайлыБольшие.Добавить(ТекстСтроки);
		КонецЦикла;
		
		Параметры.Вставить("ФайлыБольшие", ФайлыБольшие);
		Параметры.Вставить("РежимЗагрузки", ПараметрыПроверки.РежимЗагрузки);
		Параметры.Вставить("Заголовок", НСтр("ru = 'Предупреждение при загрузке файлов'"));
		
		Обработчик = Новый ОписаниеОповещения("ПроверитьПредельныйРазмерФайловПослеОтветаНаВопрос", ЭтотОбъект, ПараметрыВыполнения);
		ОткрытьФорму("Справочник.Файлы.Форма.ВопросПриИмпортеФайлов", Параметры, , , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.Успех = Истина;
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПроверитьПредельныйРазмерФайловПослеОтветаНаВопрос(Ответ, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения.Успех = (Ответ = КодВозвратаДиалога.ОК);
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Показывает информацию о том, что файл не был изменен.

// Покажет напоминание - если стоит настройка.
//
// Параметры:
//   ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//
Процедура ПоказатьИнформациюФайлНеБылИзменен(ОбработчикРезультата)
	
	ПерсональныеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
	Если ПерсональныеНастройки.ПоказыватьИнформациюЧтоФайлНеБылИзменен = Истина Тогда
		ОткрытьФорму("Справочник.Файлы.Форма.ИнформацияФайлНеБылИзменен", , , , , , ОбработчикРезультата, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ВернутьРезультат(ОбработчикРезультата, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Загружает отредактированный файл в программу, снимает блокировку и рассылает оповещение.

// Сохраняет отредактированный файл в ИБ и снимает с него блокировку.
//
// Параметры:
//   Параметры - Структура - см. ПараметрыОбновленияФайла.
//
Процедура ЗакончитьРедактированиеСОповещением(Параметры) Экспорт
	
	Если Параметры.ОбъектСсылка = Неопределено Тогда
		ВернутьРезультат(Параметры.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", Параметры.ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ПараметрКоманды", Параметры.ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("ЗакончитьРедактированиеСОповещениемЗавершение", ЭтотОбъект, ПараметрыВыполнения);
	
	ПараметрыОбработчика = ПараметрыОбновленияФайла(Обработчик, Параметры.ОбъектСсылка, Параметры.ИдентификаторФормы);
	ПараметрыОбработчика.ХранитьВерсии = Параметры.ХранитьВерсии;
	ПараметрыОбработчика.РедактируетТекущийПользователь = Параметры.РедактируетТекущийПользователь;
	ПараметрыОбработчика.Редактирует = Параметры.Редактирует;
	ПараметрыОбработчика.АвторТекущейВерсии = Параметры.АвторТекущейВерсии;
	ПараметрыОбработчика.Кодировка = Параметры.Кодировка;
	ЗакончитьРедактирование(ПараметрыОбработчика);

КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗакончитьРедактированиеСОповещениемЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		Оповестить("Запись_Файл", Новый Структура("Событие", "ЗаконченоРедактирование"), ПараметрыВыполнения.ПараметрКоманды);
		ОповеститьОбИзменении(ПараметрыВыполнения.ПараметрКоманды);
		Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ПараметрыВыполнения.ПараметрКоманды);
		Оповестить("Запись_Файл", Новый Структура("Событие", "ВерсияСохранена"), ПараметрыВыполнения.ПараметрКоманды);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Захватывает файл, открывает диалог редактирования и рассылает оповещение.

// Блокирует файл для редактирования и открывает его.
Процедура РедактироватьСОповещением(
	ОбработчикРезультата,
	ОбъектСсылка,
	УникальныйИдентификатор = Неопределено,
	РабочийКаталогВладельца = Неопределено) Экспорт
	
	Если ОбъектСсылка = Неопределено Тогда
		ВернутьРезультат(ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("РедактироватьСОповещениемЗавершение", ЭтотОбъект, ПараметрыВыполнения);
	РедактироватьФайлПоСсылке(Обработчик, ОбъектСсылка, УникальныйИдентификатор, РабочийКаталогВладельца);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура РедактироватьСОповещениемЗавершение(ФайлОтредактирован, ПараметрыВыполнения) Экспорт
	
	Если ФайлОтредактирован Тогда
		ОповеститьОбИзменении(ПараметрыВыполнения.ОбъектСсылка);
		Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ПараметрыВыполнения.ОбъектСсылка);
		Оповестить("Запись_Файл", Новый Структура("Событие", "ФайлРедактировался"), ПараметрыВыполнения.ОбъектСсылка);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Захватывает файл или несколько файлов и рассылает оповещение.

// Выполняет блокировку файла или нескольких файлов.
//
// Параметры:
//   ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//   ПараметрКоманды - либо ссылка на файл, либо массив ссылок на файлы.
//   УникальныйИдентификатор.
//
Процедура ЗанятьСОповещением(ОбработчикРезультата, ПараметрКоманды, УникальныйИдентификатор = Неопределено) Экспорт
	
	Если ПараметрКоманды = Неопределено Тогда
		ВернутьРезультат(ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ПараметрКоманды", ПараметрКоманды);
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		Обработчик = Новый ОписаниеОповещения("ЗанятьСОповещениемМассивФайловЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		ЗанятьФайлыПоСсылкам(Обработчик, ПараметрКоманды);
	Иначе
		Обработчик = Новый ОписаниеОповещения("ЗанятьСОповещениемОдинФайлЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		ЗанятьФайлПоСсылке(Обработчик, ПараметрКоманды, УникальныйИдентификатор)
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗанятьСОповещениемМассивФайловЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.Файлы"));
	Для Каждого ФайлСсылка Из ПараметрыВыполнения.ПараметрКоманды Цикл
		Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ФайлСсылка);
	КонецЦикла;
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ЗанятьСОповещениемОдинФайлЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		ОповеститьОбИзменении(ПараметрыВыполнения.ПараметрКоманды);
		Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ПараметрыВыполнения.ПараметрКоманды);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Снимает блокировку файла и рассылает оповещение.

// Освобождает занятый ранее файл.
//
// Параметры:
//   Параметры - Структура - см. ПараметрыОсвобожденияФайла.
//
Процедура ОсвободитьФайлСОповещением(Параметры) Экспорт
	
	Если Параметры.ОбъектСсылка = Неопределено Тогда
		ВернутьРезультат(Параметры.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", Параметры.ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ПараметрКоманды", Параметры.ОбъектСсылка);
	Если ТипЗнч(Параметры.ОбъектСсылка) = Тип("Массив") Тогда
		Обработчик = Новый ОписаниеОповещения("ОсвободитьФайлСОповещениемМассивФайловЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		ОсвободитьФайлыПоСсылкам(Обработчик, Параметры.ОбъектСсылка);
	Иначе
		Обработчик = Новый ОписаниеОповещения("ОсвободитьФайлСОповещениемОдинФайлЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		Параметры = ПараметрыОсвобожденияФайла(Обработчик, Параметры.ОбъектСсылка);
		Параметры.ХранитьВерсии = Параметры.ХранитьВерсии;
		Параметры.РедактируетТекущийПользователь = Параметры.РедактируетТекущийПользователь;
		Параметры.Редактирует = Параметры.Редактирует;
		Параметры.УникальныйИдентификатор = Параметры.УникальныйИдентификатор;
		ОсвободитьФайл(Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОсвободитьФайлСОповещениемМассивФайловЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.Файлы"));
	Для Каждого ФайлСсылка Из ПараметрыВыполнения.ПараметрКоманды Цикл
		Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ФайлСсылка);
	КонецЦикла;
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОсвободитьФайлСОповещениемОдинФайлЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		ОповеститьОбИзменении(ПараметрыВыполнения.ПараметрКоманды);
		Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ПараметрыВыполнения.ПараметрКоманды);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Открывает файл и рассылает оповещение.

// Открывает файл.
//
// Параметры:
//   ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//   ДанныеФайла             - Структура с данными файла.
//   УникальныйИдентификатор - УникальныйИдентификатор - Формы.
//
Процедура ОткрытьФайлСОповещением(ОбработчикРезультата, ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыВыполнения.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	// Если Файл без файла, тогда открыть карточку.
	Если ПараметрыВыполнения.ДанныеФайла.Версия.Пустая() Тогда
		Обработчик = Новый ОписаниеОповещения("ОткрытьФайлСОповещениемЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		ПоказатьЗначение(Обработчик, ПараметрыВыполнения.ДанныеФайла.Ссылка);
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОткрытьФайлСОповещениемПослеУстановкиРасширения", ЭтотОбъект, ПараметрыВыполнения);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОткрытьФайлСОповещениемПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		Обработчик = Новый ОписаниеОповещения("ОткрытьФайлСОповещениемСРасширениемПослеПолученияВерсииВРабочийКаталог", ЭтотОбъект, ПараметрыВыполнения);
		ПолучитьФайлВерсииВРабочийКаталог(
			Обработчик,
			ПараметрыВыполнения.ДанныеФайла,
			"",
			ПараметрыВыполнения.УникальныйИдентификатор,
			Новый Структура("ОткрытьФайл", Истина));
	Иначе
		ЗаполнитьВременныйИдентификаторФормы(ПараметрыВыполнения.УникальныйИдентификатор, ПараметрыВыполнения);
		
		Обработчик = Новый ОписаниеОповещения("ОткрытьФайлСОповещениемЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		ОткрытьФайлБезРасширения(Обработчик, ПараметрыВыполнения.ДанныеФайла, ПараметрыВыполнения.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОткрытьФайлСОповещениемСРасширениемПослеПолученияВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен = Истина Тогда
		ОткрытьФайлПриложением(ПараметрыВыполнения.ДанныеФайла, Результат.ПолноеИмяФайла);
	КонецЕсли;
	
	ОткрытьФайлСОповещениемЗавершение(Результат.ФайлПолучен = Истина, ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОткрытьФайлСОповещениемЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	ОчиститьВременныйИдентификаторФормы(ПараметрыВыполнения);
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Событие", "ФайлОткрыт");
	Оповестить("ФайлОткрыт", ПараметрыОповещения, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
КонецПроцедуры


Процедура ОткрытьФайлБезРасширения(Оповещение, ДанныеФайла, ИдентификаторФормы,
		СПредупреждением = Истина, СохранятьСРасшифровкой = Истина, РасширениеДляЗашифрованныхФайлов = "")
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение",             Оповещение);
	Контекст.Вставить("ДанныеФайла",            ДанныеФайла);
	Контекст.Вставить("ИдентификаторФормы",     ИдентификаторФормы);
	Контекст.Вставить("СПредупреждением",       СПредупреждением);
	Контекст.Вставить("СохранятьСРасшифровкой", СохранятьСРасшифровкой);
	Контекст.Вставить("РасширениеДляЗашифрованныхФайлов", РасширениеДляЗашифрованныхФайлов);
	
	Если Контекст.СохранятьСРасшифровкой
	   И ДанныеФайла.Зашифрован Тогда
		
		Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
			ВыполнитьОбработкуОповещения(Контекст.Оповещение, Ложь);
			Возврат;
		КонецЕсли;
		
		СтруктураВозврата = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(
			ДанныеФайла.Версия,, ИдентификаторФормы);
		
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("Операция",              НСтр("ru = 'Расшифровка файла'"));
		ОписаниеДанных.Вставить("ЗаголовокДанных",       НСтр("ru = 'Файл'"));
		ОписаниеДанных.Вставить("Данные",                СтруктураВозврата.ДвоичныеДанные);
		ОписаниеДанных.Вставить("Представление",         ДанныеФайла.Ссылка);
		ОписаниеДанных.Вставить("СертификатыШифрования", ДанныеФайла.Ссылка);
		ОписаниеДанных.Вставить("СообщитьОЗавершении",   Ложь);
		
		ОбработчикПродолжения = Новый ОписаниеОповещения(
			"ОткрытьФайлБезРасширенияПослеРасшифровки", ЭтотОбъект, Контекст);
		
		МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
		МодульЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработчикПродолжения);
		
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("АдресФайла", ДанныеФайла.НавигационнаяСсылкаТекущейВерсии);
	
	ОткрытьФайлБезРасширенияНапоминание(Контекст);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОткрытьФайлБезРасширенияПослеРасшифровки(ОписаниеДанных, Контекст) Экспорт
	
	Если Не ОписаниеДанных.Успех Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеДанных.РасшифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
		АдресФайла = ПоместитьВоВременноеХранилище(ОписаниеДанных.РасшифрованныеДанные,
			Контекст.ИдентификаторФормы);
	Иначе
		АдресФайла = ОписаниеДанных.РасшифрованныеДанные;
	КонецЕсли;
	
	Контекст.Вставить("АдресФайла", АдресФайла);
	
	ОткрытьФайлБезРасширенияНапоминание(Контекст);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОткрытьФайлБезРасширенияНапоминание(Контекст)
	
	Если Контекст.СПредупреждением
	   И Контекст.ДанныеФайла.РедактируетТекущийПользователь Тогда
		
		ФайловыеФункцииСлужебныйКлиент.ВывестиНапоминаниеПриРедактировании(Новый ОписаниеОповещения(
			"ОткрытьФайлБезРасширенияПередачаФайла", ЭтотОбъект, Контекст));
	Иначе
		ОткрытьФайлБезРасширенияПередачаФайла(Истина, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОткрытьФайлБезРасширенияПередачаФайла(Результат, Контекст) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Или Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Контекст.СохранятьСРасшифровкой
	   И Контекст.ДанныеФайла.Зашифрован
	   И ЗначениеЗаполнено(Контекст.РасширениеДляЗашифрованныхФайлов) Тогда
		
		Расширение = Контекст.РасширениеДляЗашифрованныхФайлов;
	Иначе
		Расширение = Контекст.ДанныеФайла.Расширение;
	КонецЕсли;
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		Контекст.ДанныеФайла.ПолноеНаименованиеВерсии, Расширение);
	
	ПолучитьФайл(Контекст.АдресФайла, ИмяФайла, Истина);
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Истина);
	
КонецПроцедуры

// Заполняет временный идентификатор формы для случаев, когда не требуется
// возвращать данные во временном хранилище в вызывающий код, например,
// как в процедурах Открыть, ОткрытьКаталогФайла в общем модуле РаботаСФайламиКлиент.
//
Процедура ЗаполнитьВременныйИдентификаторФормы(ИдентификаторФормы, ПараметрыВыполнения)
	
	Если ЗначениеЗаполнено(ИдентификаторФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("ВременнаяФорма", ПолучитьФорму("Справочник.Файлы.Форма.ФормаВопроса"));
	ИдентификаторФормы = ПараметрыВыполнения.ВременнаяФорма.УникальныйИдентификатор;
	СтандартныеПодсистемыКлиент.УстановитьХранениеФормы(ПараметрыВыполнения.ВременнаяФорма, Истина);
	
КонецПроцедуры

// Отменяет хранение временного идентификатора, заполненного ранее.
Процедура ОчиститьВременныйИдентификаторФормы(ПараметрыВыполнения)
	
	Если ПараметрыВыполнения.Свойство("ВременнаяФорма") Тогда
		СтандартныеПодсистемыКлиент.УстановитьХранениеФормы(ПараметрыВыполнения.ВременнаяФорма, Ложь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Загружает файл в программу и рассылает оповещение.

// Сохраняет файл в информационной базе, но не освобождает его.
Процедура СохранитьИзмененияФайлаСОповещением(ОбработчикРезультата, ПараметрКоманды, ИдентификаторФормы) Экспорт
	
	Если ПараметрКоманды = Неопределено Тогда
		ВернутьРезультат(ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ПараметрКоманды", ПараметрКоманды);
	
	Обработчик = Новый ОписаниеОповещения("СохранитьИзмененияФайлаСОповещениемЗавершение", ЭтотОбъект, ПараметрыВыполнения);
	ПараметрыОбработчика = ПараметрыОбновленияФайла(Обработчик, ПараметрКоманды, ИдентификаторФормы);
	СохранитьИзмененияФайла(ПараметрыОбработчика);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура СохранитьИзмененияФайлаСОповещениемЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ПараметрыВыполнения.ПараметрКоманды);
		Оповестить("Запись_Файл", Новый Структура("Событие", "ВерсияСохранена"), ПараметрыВыполнения.ПараметрКоманды);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Показывает диалог выбора файла на диске, загружает выбранный файл в программу как версию и рассылает оповещение.

// Выбирает на  диске файл и создает из него новую версию.
Процедура ОбновитьИзФайлаНаДискеСОповещением(ОбработчикРезультата, ДанныеФайла, ИдентификаторФормы) Экспорт
	
	Если Не ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(ОбработчикРезультата);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("ОбновитьИзФайлаНаДискеСОповещениемЗавершение", ЭтотОбъект, ПараметрыВыполнения);
	ОбновитьИзФайлаНаДиске(Обработчик, ДанныеФайла, ИдентификаторФормы);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ОбновитьИзФайлаНаДискеСОповещениемЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		ОповеститьОбИзменении(ПараметрыВыполнения.ДанныеФайла.Ссылка);
		Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ПараметрыВыполнения.ДанныеФайла.Ссылка);
		Оповестить("Запись_Файл", Новый Структура("Событие", "ВерсияСохранена"), ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Шифрование файла.

// Зашифровать файл.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ДанныеФайла - Структура с данными файла.
//  УникальныйИдентификатор - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//   Структура - Результат.
//       * Успех - Булево - успешно ли выполнена операция.
//       * МассивДанныхДляЗанесенияВБазу - Массив - Массив данных для записи в программу.
//       * МассивОтпечатков - Массив - Массив отпечатков.
//
Процедура Зашифровать(ОбработчикРезультата, ДанныеФайла, УникальныйИдентификатор) Экспорт
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыВыполнения.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыВыполнения.Вставить("Успех", Ложь);
	ПараметрыВыполнения.Вставить("МассивДанныхДляЗанесенияВБазу", Новый Массив);
	ПараметрыВыполнения.Вставить("МассивОтпечатков", Новый Массив);
	
	Если ПараметрыВыполнения.ДанныеФайла.Зашифрован Тогда
		ТекстПредупреждения = НСтр("ru = 'Файл ""%1"" уже зашифрован.'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка));
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстПредупреждения, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ДанныеФайла.Редактирует) Тогда
		ТекстПредупреждения = НСтр("ru = 'Нельзя зашифровать занятый файл.'");
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстПредупреждения, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	// Не нужно ПредложитьУстановкуРасширенияРаботыСФайлами(), т.к. все делается в памяти через ДвоичныеДанные.
	
	МассивВерсий = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИНавигационнаяСсылкаВсехВерсийФайла(ПараметрыВыполнения.ДанныеФайла.Ссылка,
		ПараметрыВыполнения.УникальныйИдентификатор);
	
	Если МассивВерсий.Количество() = 0 Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.МассивДанныхДляЗанесенияВБазу = Новый Массив;
	
	ПредставлениеФайла = Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	Если ПараметрыВыполнения.ДанныеФайла.КоличествоВерсий > 1 Тогда
		ПредставлениеФайла = ПредставлениеФайла + " (" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Версий: %1'"), ПараметрыВыполнения.ДанныеФайла.КоличествоВерсий) + ")";
	КонецЕсли;
	СписокПредставлений = Новый СписокЗначений;
	СписокПредставлений.Добавить(ПараметрыВыполнения.ДанныеФайла.Ссылка, ПредставлениеФайла);
	
	НаборДанных = Новый Массив;
	
	Для каждого СвойстваВерсии Из МассивВерсий Цикл
		
		ТекущиеПараметрыВыполнения = Новый Структура;
		ТекущиеПараметрыВыполнения.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
		ТекущиеПараметрыВыполнения.Вставить("ВерсияСсылка", СвойстваВерсии.ВерсияСсылка);
		ТекущиеПараметрыВыполнения.Вставить("АдресФайла",   СвойстваВерсии.НавигационнаяСсылкаВерсии);
		
		ЭлементДанных = Новый Структура;
		ЭлементДанных.Вставить("Данные", СвойстваВерсии.НавигационнаяСсылкаВерсии);
		
		ЭлементДанных.Вставить("РазмещениеРезультата", Новый ОписаниеОповещения(
			"ПриПолученииЗашифрованныхДанных", ЭтотОбъект, ТекущиеПараметрыВыполнения));
		
		НаборДанных.Добавить(ЭлементДанных);
	КонецЦикла;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Шифрование файла'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("НаборДанных",         НаборДанных);
	ОписаниеДанных.Вставить("ПредставлениеНабора", НСтр("ru = 'Файлы (%1)'"));
	ОписаниеДанных.Вставить("СписокПредставлений", СписокПредставлений);
	ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ПослеШифрованияФайла", ЭтотОбъект, ПараметрыВыполнения);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.Зашифровать(ОписаниеДанных, , ОбработчикПродолжения);
	
КонецПроцедуры

// Продолжение процедуры Зашифровать. Вызывается из подсистемы ЭлектроннаяПодпись.
Процедура ПриПолученииЗашифрованныхДанных(Параметры, ТекущиеПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения = ТекущиеПараметрыВыполнения.ПараметрыВыполнения;
	
	ЗашифрованныеДанные = Параметры.ОписаниеДанных.ТекущийЭлементНабораДанных.ЗашифрованныеДанные;
	Если ТипЗнч(ЗашифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ЗашифрованныеДанные,
			ПараметрыВыполнения.УникальныйИдентификатор);
	Иначе
		АдресВременногоХранилища = ЗашифрованныеДанные;
	КонецЕсли;
	
	ДанныеДляЗаписиНаСервере = Новый Структура;
	ДанныеДляЗаписиНаСервере.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	ДанныеДляЗаписиНаСервере.Вставить("ВерсияСсылка", ТекущиеПараметрыВыполнения.ВерсияСсылка);
	ДанныеДляЗаписиНаСервере.Вставить("АдресФайла",   ТекущиеПараметрыВыполнения.АдресФайла);
	ДанныеДляЗаписиНаСервере.Вставить("АдресВременногоХранилищаТекста", "");
	
	ПараметрыВыполнения.МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеДляЗаписиНаСервере);
	
	ВыполнитьОбработкуОповещения(Параметры.Оповещение, Новый Структура);
	
КонецПроцедуры

// Завершение процедуры Зашифровать. Вызывается из подсистемы ЭлектроннаяПодпись.
Процедура ПослеШифрованияФайла(ОписаниеДанных, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения.Успех = ОписаниеДанных.Успех;
	
	Если ОписаниеДанных.Успех Тогда
		Если ТипЗнч(ОписаниеДанных.СертификатыШифрования) = Тип("Строка") Тогда
			ПараметрыВыполнения.Вставить("МассивОтпечатков", ПолучитьИзВременногоХранилища(
				ОписаниеДанных.СертификатыШифрования));
		Иначе
			ПараметрыВыполнения.Вставить("МассивОтпечатков", ОписаниеДанных.СертификатыШифрования);
		КонецЕсли;
		ОповеститьОбИзмененииФайла(ПараметрыВыполнения.ДанныеФайла);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Расшифровка файла.

// Расшифрует объект - Файл, Версия.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ФайлСсылка  - СправочникСсылка.Файлы - файл.
//  УникальныйИдентификатор - уникальный идентификатор формы.
//  ДанныеФайла  - структура с данными файла.
//
// Возвращаемое значение:
//   Структура - Результат.
//       * Успех - Булево - успешно ли выполнена операция.
//       * МассивДанныхДляЗанесенияВБазу - Массив структур.
//
Процедура Расшифровать(ОбработчикРезультата, ФайлСсылка, УникальныйИдентификатор, ДанныеФайла) Экспорт
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ФайлСсылка", ФайлСсылка);
	ПараметрыВыполнения.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыВыполнения.Вставить("Успех", Ложь);
	ПараметрыВыполнения.Вставить("МассивДанныхДляЗанесенияВБазу", Новый Массив);
	
	// Не нужно ПредложитьУстановкуРасширенияРаботыСФайлами(), т.к. все делается в памяти через ДвоичныеДанные.
	
	МассивВерсий = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИНавигационнаяСсылкаВсехВерсийФайла(
		ПараметрыВыполнения.ФайлСсылка, ПараметрыВыполнения.УникальныйИдентификатор);
	
	ПараметрыВыполнения.МассивДанныхДляЗанесенияВБазу = Новый Массив;
	
	ПараметрыВыполнения.Вставить("ИзвлекатьТекстыФайловНаСервере",
		ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами().ИзвлекатьТекстыФайловНаСервере);
	
	ПредставлениеФайла = Строка(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	Если ПараметрыВыполнения.ДанныеФайла.КоличествоВерсий > 1 Тогда
		ПредставлениеФайла = ПредставлениеФайла + " (" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Версий: %1'"), ПараметрыВыполнения.ДанныеФайла.КоличествоВерсий) + ")";
	КонецЕсли;
	СписокПредставлений = Новый СписокЗначений;
	СписокПредставлений.Добавить(ПараметрыВыполнения.ДанныеФайла.Ссылка, ПредставлениеФайла);
	
	СертификатыШифрования = Новый Массив;
	СертификатыШифрования.Добавить(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
	НаборДанных = Новый Массив;
	
	Для каждого СвойстваВерсии Из МассивВерсий Цикл
		
		ТекущиеПараметрыВыполнения = Новый Структура;
		ТекущиеПараметрыВыполнения.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
		ТекущиеПараметрыВыполнения.Вставить("ВерсияСсылка", СвойстваВерсии.ВерсияСсылка);
		ТекущиеПараметрыВыполнения.Вставить("АдресФайла",   СвойстваВерсии.НавигационнаяСсылкаВерсии);
		
		ЭлементДанных = Новый Структура;
		ЭлементДанных.Вставить("Данные", СвойстваВерсии.НавигационнаяСсылкаВерсии);
		
		ЭлементДанных.Вставить("РазмещениеРезультата", Новый ОписаниеОповещения(
			"ПриПолученииРасшифрованныхДанных", ЭтотОбъект, ТекущиеПараметрыВыполнения));
		
		НаборДанных.Добавить(ЭлементДанных);
	КонецЦикла;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",              НСтр("ru = 'Расшифровка файла'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",       НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("НаборДанных",           НаборДанных);
	ОписаниеДанных.Вставить("ПредставлениеНабора",   НСтр("ru = 'Файлы (%1)'"));
	ОписаниеДанных.Вставить("СписокПредставлений",   СписокПредставлений);
	ОписаниеДанных.Вставить("СертификатыШифрования", СертификатыШифрования);
	ОписаниеДанных.Вставить("СообщитьОЗавершении",   Ложь);
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ПослеРасшифровкиФайла", ЭтотОбъект, ПараметрыВыполнения);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработчикПродолжения);
	
КонецПроцедуры

// Продолжение процедуры Расшифровать. Вызывается из подсистемы ЭлектроннаяПодпись.
Процедура ПриПолученииРасшифрованныхДанных(Параметры, ТекущиеПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения = ТекущиеПараметрыВыполнения.ПараметрыВыполнения;
	
	РасшифрованныеДанные = Параметры.ОписаниеДанных.ТекущийЭлементНабораДанных.РасшифрованныеДанные;
	Если ТипЗнч(РасшифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(РасшифрованныеДанные,
			ПараметрыВыполнения.УникальныйИдентификатор);
		#Если Не ВебКлиент Тогда
			ДвоичныеДанныеРасшифрованные = РасшифрованныеДанные;
		#КонецЕсли
	Иначе
		АдресВременногоХранилища = РасшифрованныеДанные;
		#Если Не ВебКлиент Тогда
			ДвоичныеДанныеРасшифрованные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		#КонецЕсли
	КонецЕсли;
	
	АдресВременногоХранилищаТекста = "";
	#Если Не ВебКлиент Тогда
		Если Не ПараметрыВыполнения.ИзвлекатьТекстыФайловНаСервере Тогда
			ПолныйПутьКФайлу = ПолучитьИмяВременногоФайла(ПараметрыВыполнения.ДанныеФайла.Расширение);
			ДвоичныеДанныеРасшифрованные.Записать(ПолныйПутьКФайлу);
			
			АдресВременногоХранилищаТекста = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
				ПолныйПутьКФайлу, ПараметрыВыполнения.УникальныйИдентификатор);
				
			УдалитьФайлы(ПолныйПутьКФайлу);
		Иначе
			АдресВременногоХранилищаТекста = "";
		КонецЕсли;
	#КонецЕсли
	
	ДанныеДляЗаписиНаСервере = Новый Структура;
	ДанныеДляЗаписиНаСервере.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	ДанныеДляЗаписиНаСервере.Вставить("ВерсияСсылка", ТекущиеПараметрыВыполнения.ВерсияСсылка);
	ДанныеДляЗаписиНаСервере.Вставить("АдресФайла",   ТекущиеПараметрыВыполнения.АдресФайла);
	ДанныеДляЗаписиНаСервере.Вставить("АдресВременногоХранилищаТекста", АдресВременногоХранилищаТекста);
	
	ПараметрыВыполнения.МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеДляЗаписиНаСервере);
	
	ВыполнитьОбработкуОповещения(Параметры.Оповещение, Новый Структура);
	
КонецПроцедуры

// Завершение процедуры Расшифровать. Вызывается из подсистемы ЭлектроннаяПодпись.
Процедура ПослеРасшифровкиФайла(ОписаниеДанных, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения.Успех = ОписаниеДанных.Успех;
	
	Если ОписаниеДанных.Успех Тогда
		ОповеститьОбИзмененииФайла(ПараметрыВыполнения.ДанныеФайла);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Создает новый файл.

// Создает новый файл интерактивно с вызовом диалога выбора режима создания Файла.
//
// Параметры:
//   см. РаботаСФайламиКлиент.ДобавитьФайл().
//
Процедура ДобавитьФайл(
	ОбработчикРезультата,
	ВладелецФайла,
	ФормаВладелец,
	РежимСоздания = 1,
	НеОткрыватьКарточкуПослеСозданияИзФайла = Неопределено) Экспорт
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("ВладелецФайла", ВладелецФайла);
	ПараметрыВыполнения.Вставить("ФормаВладелец", ФормаВладелец);
	ПараметрыВыполнения.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", НеОткрыватьКарточкуПослеСозданияИзФайла);
	ПараметрыВыполнения.Вставить("ЭтоФайл", Истина);
	
	ФормаВозврата = РаботаСФайламиСлужебныйКлиентПовтИсп.ФормаВыбораВариантаСозданияНовогоФайла();
	ФормаВозврата.УстановитьПараметрыИспользования(РежимСоздания);
	
	Обработчик = Новый ОписаниеОповещения("ДобавитьПослеВыбораРежимаСоздания", ЭтотОбъект, ПараметрыВыполнения);
	УстановитьОповещениеФормы(ФормаВозврата, Обработчик);
	
	ФормаВозврата.Открыть();
	
КонецПроцедуры

// Создает новый файл интерактивно указанным образом.
//
// Параметры:
//   РежимСоздания - Число - Режим создания файла.
//       И 1 - из шаблона (копированием другого файла),
//       * 2 - с диска (из файловой системы клиента),
//       * 3 - со сканера.
//   ПараметрыВыполнения - Структура - типы значений и описания см. в РаботаСФайламиКлиент.ДобавитьФайл().
//       * ОбработчикРезультата.
//       * ВладелецФайла.
//       * ФормаВладелец
//       * НеОткрыватьКарточкуПослеСозданияИзФайла.
//
Процедура ДобавитьПослеВыбораРежимаСоздания(РежимСоздания, ПараметрыВыполнения) Экспорт
	
	Если РежимСоздания = 1 Тогда // Скопировать другой файла.
		ДобавитьНаОсновеШаблона(ПараметрыВыполнения);
	ИначеЕсли РежимСоздания = 2 Тогда // Загрузить из файловой системы.
		Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
			ДобавитьИзФайловойСистемыСРасширением(ПараметрыВыполнения);
		Иначе
			ДобавитьИзФайловойСистемыБезРасширения(ПараметрыВыполнения);
		КонецЕсли;
	ИначеЕсли РежимСоздания = 3 Тогда // Считать со сканера.
		ФайловыеФункцииСлужебныйКлиент.ДобавитьСоСканера(ПараметрыВыполнения);
	Иначе
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ДобавитьНаОсновеШаблона(ПараметрыВыполнения) Экспорт
	
	// Скопировать другой файла.
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыборШаблона", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ПредопределенноеЗначение("Справочник.ПапкиФайлов.Шаблоны"));
	Обработчик = Новый ОписаниеОповещения("ДобавитьНаОсновеШаблонаПослеВыбораШаблона", ЭтотОбъект, ПараметрыВыполнения);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбора", ПараметрыФормы, , , , , Обработчик, РежимОткрытия);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ДобавитьНаОсновеШаблонаПослеВыбораШаблона(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Неопределено Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФайлОснование", Результат);
	ПараметрыФормы.Вставить("ВладелецФайла", ПараметрыВыполнения.ВладелецФайла);
	ПараметрыФормы.Вставить("РежимСоздания", "ИзШаблона");
	ОбработчикРезультата = ПодготовитьОбработчикДляДиалога(ПараметрыВыполнения.ОбработчикРезультата);
	ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", ПараметрыФормы, ПараметрыВыполнения.ФормаВладелец, , , , ОбработчикРезультата);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ДобавитьИзФайловойСистемыБезРасширения(ПараметрыВыполнения) Экспорт
	
	// Загрузить из файловой системы без расширения работы с файлами (веб-клиент).
	Обработчик = Новый ОписаниеОповещения("ДобавитьИзФайловойСистемыБезРасширенияПослеЗагрузкиФайла", ЭтотОбъект, ПараметрыВыполнения);
	НачатьПомещениеФайла(Обработчик, , , , ПараметрыВыполнения.ФормаВладелец.УникальныйИдентификатор);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ДобавитьИзФайловойСистемыБезРасширенияПослеЗагрузкиФайла(Помещен, Адрес, ВыбранноеИмяФайла, ПараметрыВыполнения) Экспорт
	
	Если Не Помещен Тогда
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ФайлДобавлен", Ложь);
	Результат.Вставить("ФайлСсылка",   Неопределено);
	Результат.Вставить("ТекстОшибки",  "");
	
	СтруктураПути = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыбранноеИмяФайла);
	Если ПустаяСтрока(СтруктураПути.Расширение) Тогда
		ТекстВопроса = НСтр("ru = 'Необходимо указать файл с расширением.'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Повторить, НСтр("ru = 'Выбрать другой файл'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		Обработчик = Новый ОписаниеОповещения("ДобавитьИзФайловойСистемыБезРасширенияПослеОтветаНаВопросПовторить", ЭтотОбъект, ПараметрыВыполнения);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки);
		Возврат;
	КонецЕсли;
	
	// Создание карточки файла в БД.
	Попытка
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		СведенияОФайле.АдресВременногоХранилищаФайла = Адрес;
		СведенияОФайле.ИмяБезРасширения = СтруктураПути.ИмяБезРасширения;
		СведенияОФайле.РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураПути.Расширение);
		Результат.ФайлСсылка = РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(ПараметрыВыполнения.ВладелецФайла, СведенияОФайле);
		Результат.ФайлДобавлен = Истина;
	Исключение
		Результат.ТекстОшибки = ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(ИнформацияОбОшибке());
	КонецПопытки;
	Если Результат.ТекстОшибки <> "" Тогда
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, Результат.ТекстОшибки, Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Владелец", ПараметрыВыполнения.ВладелецФайла);
	ПараметрыОповещения.Вставить("Файл", Результат.ФайлСсылка);
	ПараметрыОповещения.Вставить("Событие", "СозданФайл");
	Оповестить("Запись_Файл", ПараметрыОповещения);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Создание:'"),
		ПолучитьНавигационнуюСсылку(Результат.ФайлСсылка),
		Результат.ФайлСсылка,
		БиблиотекаКартинок.Информация32);
	
	Если ПараметрыВыполнения.НеОткрыватьКарточкуПослеСозданияИзФайла <> Истина Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Результат.ФайлСсылка);
		ПараметрыФормы.Вставить("КарточкаОткрытаПослеСозданияФайла", Истина);
		
		ОбработчикРезультата = ПодготовитьОбработчикДляДиалога(ПараметрыВыполнения.ОбработчикРезультата);
		ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", ПараметрыФормы, ПараметрыВыполнения.ФормаВладелец, , , , ОбработчикРезультата);
	Иначе
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ДобавитьИзФайловойСистемыБезРасширенияПослеОтветаНаВопросПовторить(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Повторить Тогда
		ДобавитьИзФайловойСистемыБезРасширения(ПараметрыВыполнения);
	Иначе
		ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Рассылает оповещение о завершении шифрования или расшифровки файла.

// По окончании Зашифровать нотифицирует.
// Параметры:
//  МассивФайловВРабочемКаталогеДляУдаления - Массив - массив строк - путей к файлам.
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла.
//  ФайлСсылка  - СправочникСсылка.Файлы - файл.
Процедура ИнформироватьОШифровании(МассивФайловВРабочемКаталогеДляУдаления,
                                   ВладелецФайла,
                                   ФайлСсылка) Экспорт
	
	ОповеститьОбИзменении(ФайлСсылка);
	Оповестить("Запись_Файл", Новый Структура("Событие", "ПрисоединенныйФайлЗашифрован"), ВладелецФайла);
	Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ФайлСсылка);
	
	// Удаляем из рабочего каталога все версии файла.
	Для Каждого ПолноеИмяФайла Из МассивФайловВРабочемКаталогеДляУдаления Цикл
		УдалитьФайлБезПодтверждения(ПолноеИмяФайла);
	КонецЦикла;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.ИнформироватьОШифрованииОбъекта(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл: %1'"), ФайлСсылка));
	
КонецПроцедуры

// По окончании Расшифровать нотифицирует.
// Параметры:
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла.
//  ФайлСсылка  - СправочникСсылка.Файлы - файл.
Процедура ИнформироватьОРасшифровке(ВладелецФайла, ФайлСсылка) Экспорт
	
	ОповеститьОбИзменении(ФайлСсылка);
	Оповестить("Запись_Файл", Новый Структура("Событие", "ПрисоединенныйФайлЗашифрован"), ВладелецФайла);
	Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ФайлСсылка);
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.ИнформироватьОРасшифровкеОбъекта(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл: %1'"), ФайлСсылка));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с электронными подписями.

// Подписывает текущую версию файла с помощью подсистемы ЭлектроннаяПодпись.
Процедура ПодписатьФайл(МассивФайлов, ИдентификаторФормы, ОбработчикЗавершения) Экспорт
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	НаборДанных = Новый Массив;
	МассивДанныхФайлов = Новый Массив;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	ПараметрыВыполнения.Вставить("МассивДанныхФайлов", МассивДанныхФайлов);
	
	Для каждого Файл Из МассивФайлов Цикл
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИРабочийКаталог(Файл);
	
		Если ЗначениеЗаполнено(ДанныеФайла.Редактирует) Тогда
			ТекстПредупреждения = ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла(Файл);
			ВернутьРезультатПослеПоказаПредупреждения(ОбработчикЗавершения, ТекстПредупреждения, ПараметрыВыполнения);
			Возврат;
		КонецЕсли;
		
		Если ДанныеФайла.Зашифрован Тогда
			ТекстПредупреждения = ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла(Файл);
			ВернутьРезультатПослеПоказаПредупреждения(ОбработчикЗавершения, ТекстПредупреждения, ПараметрыВыполнения);
			Возврат;
		КонецЕсли;
		
		МассивДанныхФайлов.Добавить(ДанныеФайла);
		
		ТекущиеПараметрыВыполнения = Новый Структура;
		ТекущиеПараметрыВыполнения.Вставить("ИдентификаторФормы", ИдентификаторФормы);
		ТекущиеПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
		
		ЭлементДанных = Новый Структура;
		ЭлементДанных.Вставить("Представление", ДанныеФайла.Ссылка);
		ЭлементДанных.Вставить("Данные",
			Новый ОписаниеОповещения("ПриЗапросеДвоичныхДанныхФайла", ЭтотОбъект, ТекущиеПараметрыВыполнения));
		ЭлементДанных.Вставить("Объект",
			Новый ОписаниеОповещения("ПриПолученииПодписи", ЭтотОбъект, ТекущиеПараметрыВыполнения));
		НаборДанных.Добавить(ЭлементДанных);
		
	КонецЦикла;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Истина);
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Подписание файла'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("НаборДанных",         НаборДанных);
	ОписаниеДанных.Вставить("ПредставлениеНабора", НСтр("ru = 'Файлы (%1)'"));
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ПослеПодписанияФайлов", ЭтотОбъект, ПараметрыВыполнения);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОбработчикПродолжения);
	
КонецПроцедуры

// Продолжение процедуры ПодписатьФайл.
// Вызывается из подсистемы ЭлектроннаяПодпись при запросе данных для подписания.
//
Процедура ПриЗапросеДвоичныхДанныхФайла(Параметры, Контекст) Экспорт
	
	Данные = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(
		Контекст.ДанныеФайла.Ссылка).ДвоичныеДанные;
	
	ВыполнитьОбработкуОповещения(Параметры.Оповещение, Новый Структура("Данные", Данные));
	
КонецПроцедуры

// Продолжение процедуры ПодписатьФайл.
// Вызывается из подсистемы ЭлектроннаяПодпись после подписания данных для нестандартного
// способа добавления подписи в объект.
//
Процедура ПриПолученииПодписи(Параметры, Контекст) Экспорт
	
	РаботаСФайламиСлужебныйВызовСервера.ДобавитьПодписьКФайлу(
		Контекст.ДанныеФайла.Ссылка,
		Параметры.ОписаниеДанных.ТекущийЭлементНабораДанных.СвойстваПодписи,
		Контекст.ИдентификаторФормы);
	
	ВыполнитьОбработкуОповещения(Параметры.Оповещение, Новый Структура);
	
КонецПроцедуры

// Завершение процедуры ПодписатьФайл.
Процедура ПослеПодписанияФайлов(ОписаниеДанных, ПараметрыВыполнения) Экспорт
	
	Если ОписаниеДанных.Успех Тогда
		Для каждого ДанныеФайла Из ПараметрыВыполнения.МассивДанныхФайлов Цикл
			ОповеститьОбИзмененииФайла(ДанныеФайла);
		КонецЦикла;
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикЗавершения, ОписаниеДанных.Успех);
	
КонецПроцедуры


// Добавляет электронные подписи к файлу-объекту из файлов-подписей на диске.
Процедура ДобавитьПодписьИзФайла(Файл, ИдентификаторФормы, ОбработчикЗавершения) Экспорт
	
	СвойстваФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(Файл, , ИдентификаторФормы);
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	ПараметрыВыполнения.Вставить("ДанныеФайла", СвойстваФайла.ДанныеФайла);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ДанныеФайла.Редактирует) Тогда
		ТекстПредупреждения = ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла();
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикРезультата, ТекстПредупреждения, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполнения.ДанныеФайла.Зашифрован Тогда
		ТекстПредупреждения = ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла();
		ВернутьРезультатПослеПоказаПредупреждения(ПараметрыВыполнения.ОбработчикЗавершения, ТекстПредупреждения, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("Представление",       ПараметрыВыполнения.ДанныеФайла.Ссылка);
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Истина);
	ОписаниеДанных.Вставить("Данные",              СвойстваФайла.ДвоичныеДанные);
	
	ОписаниеДанных.Вставить("Объект",
		Новый ОписаниеОповещения("ПриПолученииПодписей", ЭтотОбъект, ПараметрыВыполнения));
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ПослеПодписанияФайла",
		ЭтотОбъект, ПараметрыВыполнения);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.ДобавитьПодписьИзФайла(ОписаниеДанных,, ОбработчикПродолжения);
	
КонецПроцедуры

// Продолжение процедуры ДобавитьПодписьИзФайла.
// Вызывается из подсистемы ЭлектроннаяПодпись после подготовки подписей из файлов для нестандартного
// способа добавления подписи в объект.
//
Процедура ПриПолученииПодписей(Параметры, Контекст) Экспорт
	
	РаботаСФайламиСлужебныйВызовСервера.ДобавитьПодписьКФайлу(
		Контекст.ДанныеФайла.Ссылка,
		Параметры.ОписаниеДанных.Подписи,
		Контекст.ИдентификаторФормы);
	
	ВыполнитьОбработкуОповещения(Параметры.Оповещение, Новый Структура);
	
КонецПроцедуры

// Завершение процедуры ДобавитьПодписьИзФайла.
Процедура ПослеПодписанияФайла(ОписаниеДанных, ПараметрыВыполнения) Экспорт
	
	Если ОписаниеДанных.Успех Тогда
		ОповеститьОбИзмененииФайла(ПараметрыВыполнения.ДанныеФайла);
	КонецЕсли;
	
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикЗавершения, ОписаниеДанных.Успех);
	
КонецПроцедуры

// Для процедур ПослеПодписанияФайла, ПослеПодписанияФайлов.
Процедура ОповеститьОбИзмененииФайла(ДанныеФайла)
	
	ОповеститьОбИзменении(ДанныеФайла.Ссылка);
	ОповеститьОбИзменении(ДанныеФайла.ТекущаяВерсия);
	
	ОповещениеПараметр = Новый Структура("Событие", "ПрисоединенныйФайлПодписан");
	Оповестить("Запись_Файл", ОповещениеПараметр, ДанныеФайла.Владелец);
	
КонецПроцедуры


// Сохраняет файл с электронной подписью.
Процедура СохранитьФайлВместеСПодписью(Файл, ИдентификаторФормы) Экспорт
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляСохранения(Файл);
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("Представление",       ПараметрыВыполнения.ДанныеФайла.Ссылка);
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Истина);
	ОписаниеДанных.Вставить("Объект",              ПараметрыВыполнения.ДанныеФайла.ТекущаяВерсия);
	
	ОписаниеДанных.Вставить("Данные",
		Новый ОписаниеОповещения("ПриСохраненииДанныхФайла", ЭтотОбъект, ПараметрыВыполнения));
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.СохранитьДанныеВместеСПодписью(ОписаниеДанных);
	
КонецПроцедуры

// Продолжение процедуры СохранитьФайлВместеСПодписями.
// Вызывается из подсистемы ЭлектроннаяПодпись после выбора подписей для сохранения.
//
Процедура ПриСохраненииДанныхФайла(Параметры, Контекст) Экспорт
	
	СохранитьКак(Параметры.Оповещение, Контекст.ДанныеФайла, Контекст.ИдентификаторФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Загружает структуру файлов и каталогов с диска в программу.

// Возвращаемое значение:
//  Структура - со свойствами:
//    * ОбработчикРезультата      - ОписаниеОповещения - обработчик, которому нужно передать результат импорта.
//    * Владелец                  - ЛюбаяСсылка - объект-владелец, к которому добавляются импортированные файлы.
//    * ВыбранныеФайлы            - СписокЗначений - импортируемые объекты Файл.
//    * Индикатор                 - Число - число от 0 до 100 - прогресс выполнения.
//    * Комментарий               - Строка - Комментарий.
//    * ХранитьВерсии             - Булево - Хранить версии.
//    * УдалятьФайлыПослеДобавления - Булево - Удалять файлы ВыбранныеФайлы после завершения импорта.
//    * Рекурсивно                - Булево - Рекурсивно обходить подкаталоги.
//    * ИдентификаторФормы        - УникальныйИдентификатор - идентификатор формы.
//    * ПсевдоФайловаяСистема     - Соответствие - эмуляция файловой системы - для строки (каталога) возвращает массив
//                                                 строк (подкаталоги и файлы).
//    * РежимЗагрузки             - Булево - Режим загрузки (из фонового задания ЗагрузкаФайлов).
//    * Кодировка                 - Строка - кодировка для текстовых файлов.
//    * ДобавленныеФайлы          - Массив - Добавленные файлы, выходной параметр.
//
Функция ПараметрыИмпортаФайлов() Экспорт
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата");
	ПараметрыВыполнения.Вставить("Владелец");      
	ПараметрыВыполнения.Вставить("ВыбранныеФайлы"); 
	ПараметрыВыполнения.Вставить("Комментарий");
	ПараметрыВыполнения.Вставить("ХранитьВерсии");
	ПараметрыВыполнения.Вставить("УдалятьФайлыПослеДобавления");
	ПараметрыВыполнения.Вставить("Рекурсивно");
	ПараметрыВыполнения.Вставить("ИдентификаторФормы");
	ПараметрыВыполнения.Вставить("ПсевдоФайловаяСистема", Новый Соответствие);
	ПараметрыВыполнения.Вставить("РежимЗагрузки", Ложь);
	ПараметрыВыполнения.Вставить("Кодировка");
	ПараметрыВыполнения.Вставить("ДобавленныеФайлы", Новый Массив);
	Возврат ПараметрыВыполнения;
КонецФункции

// Рекурсивная функция импорта файлов с диска - принимает массив файлов (или каталогов)
// - если файл, просто добавляет его, если каталог - создает группу и рекурсивно вызывает саму себя.
//
// Параметры:
//  ПараметрыВыполнения   - Структура - со свойствами:
//    * ОбработчикРезультата      - ОписаниеОповещения, Структура - обработчик, которому нужно передать результат
//                                  импорта.
//    * Владелец                  - ЛюбаяСсылка - владелец файла.
//    * ВыбранныеФайлы            - Массив, СписокЗначений - объекты Файл.
//    * Индикатор                 - Число - число от 0 до 100 - прогресс выполнения.
//    * МассивИменФайловСОшибками - Массив - Массив имен файлов с ошибками.
//    * МассивСтруктурВсехФайлов  - Массив - Массив структур всех файлов.
//    * Комментарий               - Строка - Комментарий.
//    * ХранитьВерсии             - Булево - Хранить версии.
//    * УдалятьФайлыПослеДобавления - Булево - Удалять файлы ВыбранныеФайлы после завершения импорта.
//    * Рекурсивно                - Булево - Рекурсивно обходить подкаталоги.
//    * КоличествоСуммарное       - Число - Количество суммарное импортированных файлов.
//    * Счетчик                   - Число - Счетчик обработанных файлов (не обязательно файл будет загружен).
//    * ИдентификаторФормы        - УникальныйИдентификатор - идентификатор формы.
//    * ПсевдоФайловаяСистема     - Соответствие - эмуляция файловой системы - для строки (каталога) возвращает массив
//                                                 строк (подкаталоги и файлы).
//    * ДобавленныеФайлы          - Массив - Добавленные файлы, выходной параметр.
//    * МассивВсехПапок           - Массив - Массив всех папок.
//    * РежимЗагрузки             - Булево - Режим загрузки (из фонового задания ЗагрузкаФайлов).
//    * Кодировка                 - Строка - кодировка для текстовых файлов.
//
Процедура ИмпортФайловРекурсивно(Владелец, ВыбранныеФайлы, ПараметрыВыполнения)
	
	СлужебныеПараметры = Новый Структура;
	Для Каждого КлючИЗначение Из ПараметрыВыполнения Цикл
		СлужебныеПараметры.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	СлужебныеПараметры.ОбработчикРезультата = ПараметрыВыполнения;
	СлужебныеПараметры.Владелец = Владелец;
	СлужебныеПараметры.ВыбранныеФайлы = ВыбранныеФайлы;
	
	СлужебныеПараметры.Вставить("МассивПапокДляВопросаПапкаУжеСуществует", Новый Массив);
	ИмпортФайловРекурсивноБезДиалогов(СлужебныеПараметры.Владелец, СлужебныеПараметры.ВыбранныеФайлы, СлужебныеПараметры, Истина); 
	Если СлужебныеПараметры.МассивПапокДляВопросаПапкаУжеСуществует.Количество() = 0 Тогда
		// Задавать вопрос не требуется.
		ВернутьРезультат(СлужебныеПараметры.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	// По мере ответов на вопросы папки из ПараметрыВыполнения.МассивПапокДляВопросаПапкаУжеСуществует 
	// записываются в ПараметрыВыполнения.ВыбранныеФайлы.
	// Затем рекурсия перезапускается.
	СлужебныеПараметры.ВыбранныеФайлы = Новый Массив;
	СлужебныеПараметры.Вставить("ПапкаДляДобавленияВВыбранныеФайлы", Неопределено);
	ИмпортФайловРекурсивноЗадатьСледующийВопрос(СлужебныеПараметры);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ИмпортФайловРекурсивноЗадатьСледующийВопрос(ПараметрыВыполнения)
	
	ПараметрыВыполнения.ОбработчикРезультата = ПодготовитьОбработчикДляДиалога(ПараметрыВыполнения.ОбработчикРезультата);
	ПараметрыВыполнения.ПапкаДляДобавленияВВыбранныеФайлы = ПараметрыВыполнения.МассивПапокДляВопросаПапкаУжеСуществует[0];
	ПараметрыВыполнения.МассивПапокДляВопросаПапкаУжеСуществует.Удалить(0);
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Папка ""%1"" уже существует.
		           |Продолжить импорт папки?'"),
		ПараметрыВыполнения.ПапкаДляДобавленияВВыбранныеФайлы.Имя);
	
	Обработчик = Новый ОписаниеОповещения("ИмпортФайловРекурсивноПослеОтветаНаВопрос", ЭтотОбъект, ПараметрыВыполнения);
	
	ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ИмпортФайловРекурсивноПослеОтветаНаВопрос(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Нет Тогда
		ПараметрыВыполнения.ВыбранныеФайлы.Добавить(ПараметрыВыполнения.ПапкаДляДобавленияВВыбранныеФайлы);
	КонецЕсли;
	
	// После ответов на все вопросы рекурсия перезапускается.
	Если ПараметрыВыполнения.МассивПапокДляВопросаПапкаУжеСуществует.Количество() = 0 Тогда
		ИмпортФайловРекурсивноБезДиалогов(ПараметрыВыполнения.Владелец,	ПараметрыВыполнения.ВыбранныеФайлы, ПараметрыВыполнения,
			Ложь); // ЗадаватьВопросПапкаУжеСуществует (используется только для первого уровня рекурсии).
		
		Если ПараметрыВыполнения.МассивПапокДляВопросаПапкаУжеСуществует.Количество() = 0 Тогда
			// Вопросов больше не возникло.
			ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
			Возврат;
		Иначе
			// Возникли еще вопросы.
			ПараметрыВыполнения.ВыбранныеФайлы = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	ИмпортФайловРекурсивноЗадатьСледующийВопрос(ПараметрыВыполнения);
	
КонецПроцедуры

// Рекурсивная функция импорта файлов с диска - принимает массив файлов (или каталогов)
// - если файл, просто добавляет его, если каталог - создает группу и рекурсивно вызывает саму себя.
//
// Параметры:
//  Владелец            - ЛюбаяСсылка - владелец файла.
//  ВыбранныеФайлы      - Массив - массив объектов Файл.
//  ПараметрыВыполнения - Структура - см. одноименный параметр в ИмпортФайловРекурсивно.
//  ЗадаватьВопросПапкаУжеСуществует - Булево - Истина только для первого уровня рекурсии.
//
Процедура ИмпортФайловРекурсивноБезДиалогов(Знач Владелец, Знач ВыбранныеФайлы, Знач ПараметрыВыполнения, Знач ЗадаватьВопросПапкаУжеСуществует)
	
	Перем ПерваяПапкаСТакимЖеИменем;
	
	Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
		
		Если Не ВыбранныйФайл.Существует() Тогда
			Запись = Новый Структура;
			Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
			Запись.Вставить("Ошибка", НСтр("ru = 'Файл отсутствует на диске.'"));
			ПараметрыВыполнения.МассивИменФайловСОшибками.Добавить(Запись);
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			Если ВыбранныйФайл.Расширение = ".lnk" Тогда
				ВыбранныйФайл = РазыменоватьLnkФайл(ВыбранныйФайл);
			КонецЕсли;
			
			Если ВыбранныйФайл.ЭтоКаталог() Тогда
				
				Если ПараметрыВыполнения.Рекурсивно = Истина Тогда
					НовыйПуть = Строка(ВыбранныйФайл.Путь);
					НовыйПуть = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(НовыйПуть);
					НовыйПуть = НовыйПуть + Строка(ВыбранныйФайл.Имя);
					МассивФайлов = ФайловыеФункцииСлужебныйКлиентСервер.НайтиФайлыПсевдо(ПараметрыВыполнения.ПсевдоФайловаяСистема, НовыйПуть);
					
					// Создаем группу в справочнике - эквивалент папки на диске.
					Если МассивФайлов.Количество() <> 0 Тогда
						ИмяФайла = ВыбранныйФайл.Имя;
						
						ПапкаУжеНайдена = Ложь;
						
						Если РаботаСФайламиСлужебныйВызовСервера.ЕстьПапкаСТакимИменем(ИмяФайла, Владелец, ПерваяПапкаСТакимЖеИменем) Тогда
							
							Если ПараметрыВыполнения.РежимЗагрузки Тогда
								ПапкаУжеНайдена = Истина;
								ПапкаФайловСсылка = ПерваяПапкаСТакимЖеИменем;
							Иначе
								Если ЗадаватьВопросПапкаУжеСуществует Тогда
									ПараметрыВыполнения.МассивПапокДляВопросаПапкаУжеСуществует.Добавить(ВыбранныйФайл);
									Продолжить;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						Если Не ПапкаУжеНайдена Тогда
							ПапкаФайловСсылка = РаботаСФайламиСлужебныйВызовСервера.СправочникиПапкиСоздатьЭлемент(ИмяФайла, Владелец);
						КонецЕсли;
						
						// Параметр ЗадаватьВопросПапкаУжеСуществует нужен, чтобы не задавать вопрос на 1 уровне рекурсии,
						// когда обходятся папки, для которых уже получен положительный ответ.
						ИмпортФайловРекурсивноБезДиалогов(ПапкаФайловСсылка, МассивФайлов, ПараметрыВыполнения, Истина); 
						ПараметрыВыполнения.МассивВсехПапок.Добавить(НовыйПуть);
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			Если Не ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьВозможностьЗагрузкиФайла(
			          ВыбранныйФайл, Ложь, ПараметрыВыполнения.МассивИменФайловСОшибками) Тогда
				Продолжить;
			КонецЕсли;
			
			// Обновим индикатор прогресса.
			ПараметрыВыполнения.Счетчик = ПараметрыВыполнения.Счетчик + 1;
			// Считаем проценты
			ПараметрыВыполнения.Индикатор = ПараметрыВыполнения.Счетчик * 100 / ПараметрыВыполнения.КоличествоСуммарное;
			РазмерВМб = ВыбранныйФайл.Размер() / (1024 * 1024);
			НадписьПодробнее = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Обрабатывается файл ""%1"" (%2 Мб)...'"),
				ВыбранныйФайл.Имя, 
				ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
				
			ТекстСостояния = НСтр("ru = 'Импорт файлов с диска...'");
			Если ПараметрыВыполнения.РежимЗагрузки Тогда
				ТекстСостояния = НСтр("ru = 'Загрузка файлов с диска...'");
			КонецЕсли;
			
			Состояние(ТекстСостояния,
				ПараметрыВыполнения.Индикатор,
				НадписьПодробнее,
				БиблиотекаКартинок.Информация32);
			
			// Создаем Элемент справочника Файлы.
			ИмяБезРасширения = ВыбранныйФайл.ИмяБезРасширения;
			Расширение = ВыбранныйФайл.Расширение;
			
			Если ПараметрыВыполнения.РежимЗагрузки Тогда
				Если РаботаСФайламиСлужебныйВызовСервера.ЕстьФайлСТакимИменем(ИмяБезРасширения, Владелец) Тогда
					Запись = Новый Структура;
					Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
					Запись.Вставить("Ошибка", НСтр("ru = 'Файл с таким именем уже есть в хранилище файлов.'"));
					ПараметрыВыполнения.МассивИменФайловСОшибками.Добавить(Запись);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			АдресВременногоХранилищаФайла = "";
			
			ПомещаемыеФайлы = Новый Массив;
			Описание = Новый ОписаниеПередаваемогоФайла(ВыбранныйФайл.ПолноеИмя, "");
			ПомещаемыеФайлы.Добавить(Описание);
			
			ПомещенныеФайлы = Новый Массив;
			
			Если Не ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ПараметрыВыполнения.ИдентификаторФормы) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка помещения файла
					           |""%1""
					           |во временное хранилище.'"),
					ВыбранныйФайл.ПолноеИмя);
			КонецЕсли;
			
			Если ПомещенныеФайлы.Количество() = 1 Тогда
				АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
			КонецЕсли;
			
			Если НЕ ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами().ИзвлекатьТекстыФайловНаСервере Тогда
				АдресВременногоХранилищаТекста =
					ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
						ВыбранныйФайл.ПолноеИмя, ПараметрыВыполнения.ИдентификаторФормы, , ПараметрыВыполнения.Кодировка);
			Иначе
				АдресВременногоХранилищаТекста = "";
			КонецЕсли;
			
			// Создаем элемент справочника Файлы.
			ИмпортироватьФайл(ВыбранныйФайл, Владелец, ПараметрыВыполнения, АдресВременногоХранилищаФайла, АдресВременногоХранилищаТекста);
				
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(РаботаСФайламиКлиентСервер.СобытиеЖурналаРегистрации(),
				"Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),,Истина);
			
			Запись = Новый Структура;
			Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
			Запись.Вставить("Ошибка", СообщениеОбОшибке);
			ПараметрыВыполнения.МассивИменФайловСОшибками.Добавить(Запись);
			
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИмпортироватьФайл(Знач ВыбранныйФайл, Знач Владелец, Знач ПараметрыВыполнения, Знач АдресВременногоХранилищаФайла, Знач АдресВременногоХранилищаТекста) 
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией", ВыбранныйФайл);
	СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
	СведенияОФайле.АдресВременногоХранилищаТекста = АдресВременногоХранилищаТекста;
	СведенияОФайле.Комментарий = ПараметрыВыполнения.Комментарий;
	СведенияОФайле.Кодировка = ПараметрыВыполнения.Кодировка;

	ФайлСсылка = РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(Владелец, СведенияОФайле);
	
	УдалитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
	Если Не ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
		УдалитьИзВременногоХранилища(АдресВременногоХранилищаТекста);
	КонецЕсли;
	
	ДобавленныйФайлИПуть = Новый Структура("ФайлСсылка, Путь", ФайлСсылка, ВыбранныйФайл.Путь);	
	ПараметрыВыполнения.ДобавленныеФайлы.Добавить(ДобавленныйФайлИПуть);
	
	Запись = Новый Структура;
	Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
	Запись.Вставить("Файл", ФайлСсылка);
	ПараметрыВыполнения.МассивСтруктурВсехФайлов.Добавить(Запись);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции.

// При переименовании Файл и ВерсияФайла обновляет информацию
// в рабочем каталоге (имя файла на диске и в регистре).
//
// Параметры:
//  ТекущаяВерсия  - СправочникСсылка.ВерсииФайлов - версия файла.
//  НовоеИмя       - Строка - Новое имя файла.
//
Процедура ОбновитьИнформациюВРабочемКаталоге(ТекущаяВерсия, НовоеИмя) Экспорт
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	ПолноеИмяФайла = "";
	
	ВРабочемКаталогеНаЧтение = Истина;
	ВРабочемКаталогеВладельца = Ложь;
	
	ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(
		Неопределено,
		ТекущаяВерсия,
		ПолноеИмяФайла,
		ВРабочемКаталогеНаЧтение,
		ВРабочемКаталогеВладельца);
	
	Если ФайлВРабочемКаталоге = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ПолноеИмяФайла);
	ТолькоИмя = Файл.Имя;
	РазмерФайла = Файл.Размер();
	ПутьБезИмени = Лев(ПолноеИмяФайла, СтрДлина(ПолноеИмяФайла) - СтрДлина(ТолькоИмя));
	НовоеПолноеИмя = ПутьБезИмени + НовоеИмя + Файл.Расширение;
	ПереместитьФайл(ПолноеИмяФайла, НовоеПолноеИмя);
	
	РаботаСФайламиСлужебныйВызовСервера.УдалитьИзРегистра(ТекущаяВерсия);
	РаботаСФайламиСлужебныйВызовСервера.ЗанестиИнформациюФайлаВРегистр(ТекущаяВерсия,
		НовоеПолноеИмя, ИмяКаталога, ВРабочемКаталогеНаЧтение, РазмерФайла, ВРабочемКаталогеВладельца);
	
КонецПроцедуры

// Перерегистрировать В рабочем каталоге с другим флагом НаЧтение - если там вообще есть такой Файл.
// Параметры:
//  ДанныеФайла  - структура с данными файла.
//  НаЧтение - Булево - файл помещен на чтение.
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге).
Процедура ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца)
	
	// Если Файл без файла - ничего не делаем в рабочем каталоге.
	Если ДанныеФайла.Версия.Пустая() Тогда 
		Возврат;
	КонецЕсли;

	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	ПолноеИмяФайла = "";
	
	ВРабочемКаталогеНаЧтение = Истина;
	ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(ДанныеФайла, ДанныеФайла.ТекущаяВерсия, ПолноеИмяФайла, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
	Если ФайлВРабочемКаталоге = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйВызовСервера.ЗанестиИнформациюФайлаВРегистр(ДанныеФайла.ТекущаяВерсия, ПолноеИмяФайла, ИмяКаталога, НаЧтение, 0, ВРабочемКаталогеВладельца);
	Файл = Новый Файл(ПолноеИмяФайла);
	Файл.УстановитьТолькоЧтение(НаЧтение);
	
КонецПроцедуры

// Функция предназначена для открытия файла соответствующим приложением.
//
// Параметры:
//  ДанныеФайла  - структура с данными файла.
//  ИмяОткрываемогоФайла - Строка - полное имя файла.
Процедура ОткрытьФайлПриложением(ДанныеФайла, ИмяОткрываемогоФайла, ОбработчикРезультата = Неопределено)
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	Если РасширениеПодключено Тогда
		
		ПерсональныеНастройкиРаботыСФайлами =
			ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
		
		ТекстовыеФайлыСпособОткрытия = ПерсональныеНастройкиРаботыСФайлами.ТекстовыеФайлыСпособОткрытия;
		Если ТекстовыеФайлыСпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособыОткрытияФайлаНаПросмотр.ВоВстроенномРедакторе") Тогда
			
			ТекстовыеФайлыРасширение = ПерсональныеНастройкиРаботыСФайлами.ТекстовыеФайлыРасширение;
			Если ФайловыеФункцииСлужебныйКлиентСервер.РасширениеФайлаВСписке(ТекстовыеФайлыРасширение, ДанныеФайла.Расширение) Тогда
				
				ПараметрыФормы = Новый Структура("Файл, ДанныеФайла, ИмяОткрываемогоФайла", 
					ДанныеФайла.Ссылка, ДанныеФайла, ИмяОткрываемогоФайла);
					
				ОткрытьФорму("Справочник.Файлы.Форма.РедактированиеТекстовогоФайла", 
					ПараметрыФормы, , ДанныеФайла.КодФайла);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НРег(ДанныеФайла.Расширение) = НРег("grs") Тогда
			
			Схема = Новый ГрафическаяСхема; 
			Схема.Прочитать(ИмяОткрываемогоФайла);
			
			ЗаголовокСтрока = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
				ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
			
			Схема.Показать(ЗаголовокСтрока, ИмяОткрываемогоФайла);
			Возврат;
			
		КонецЕсли;
		
		Если НРег(ДанныеФайла.Расширение) = НРег("mxl") Тогда
			
			ПомещаемыеФайлы = Новый Массив;
			ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяОткрываемогоФайла));
			ПомещенныеФайлы = Новый Массив;
			Если Не ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь) Тогда
				Возврат;
			КонецЕсли;
			ТабличныйДокумент = ПомещенныеФайлы[0].Хранение;
			
			ЗаголовокСтрока = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
				ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
				
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ИмяДокумента", ЗаголовокСтрока);
			ПараметрыОткрытия.Вставить("ПутьКФайлу", ИмяОткрываемогоФайла);
			ПараметрыОткрытия.Вставить("ТабличныйДокумент", ТабличныйДокумент);
			
			ОткрытьФорму("ОбщаяФорма.РедактированиеТабличногоДокумента", ПараметрыОткрытия);
			
			Возврат;
			
		КонецЕсли;
		
		// Открыть Файл
		ЗапуститьПриложение(ИмяОткрываемогоФайла);
	КонецЕсли;
	
КонецПроцедуры

// Переносит файл из одного списка приложенных файлов в другой.
// Параметры:
//  ФайлСсылка  - СправочникСсылка.Файлы - файл.
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла.
Процедура ПеренестиФайлВПриложенныеФайлы(ФайлСсылка, ВладелецФайла) Экспорт

	Результат = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеДляПереносаВПриложенныеФайлы(ФайлСсылка, ВладелецФайла).Получить(ФайлСсылка);
	
	Если Результат = "Скопировать" Тогда
		
		СозданФайл = РаботаСФайламиСлужебныйВызовСервера.СкопироватьФайлВПриложенных(
			ФайлСсылка, ВладелецФайла);
		
		Оповестить("Запись_Файл", Новый Структура("Владелец, Файл, Событие", ВладелецФайла, СозданФайл, "СозданФайл"));
		
		ПоказатьОповещениеПользователя(
				"Создание:", 
				ПолучитьНавигационнуюСсылку(СозданФайл),
				Строка(СозданФайл),
				БиблиотекаКартинок.Информация32);
		
	ИначеЕсли Результат = "Обновить" Тогда
		
		ОбновленФайл = РаботаСФайламиСлужебныйВызовСервера.ОбновитьФайлВПриложенных(ФайлСсылка, ВладелецФайла);
			
		ПоказатьОповещениеПользователя(
				"Изменение:", 
				ПолучитьНавигационнуюСсылку(ОбновленФайл),
				Строка(ОбновленФайл),
				БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

// Переносит файлы из одного списка приложенных файлов в другой.
// Параметры:
//  МассивФайлов - Массив - массив файлов.
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла.
Процедура ПеренестиФайлыВПриложенныеФайлы(МассивФайлов, ВладелецФайла) Экспорт
	
	Если МассивФайлов.Количество() = 1 Тогда 
		ПеренестиФайлВПриложенныеФайлы(МассивФайлов[0], ВладелецФайла);
	Иначе
		
		Результат = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеДляПереносаВПриложенныеФайлы(МассивФайлов, ВладелецФайла);
		
		МассивОбновить = Новый Массив;
		МассивСкопировать = Новый Массив;
		Для Каждого ФайлСсылка Из МассивФайлов Цикл
			Если Результат.Получить(ФайлСсылка) = "Скопировать" Тогда
				МассивСкопировать.Добавить(ФайлСсылка);
			ИначеЕсли Результат.Получить(ФайлСсылка) = "Обновить" Тогда
				МассивОбновить.Добавить(ФайлСсылка);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСкопировать.Количество() > 0 Тогда 
			РаботаСФайламиСлужебныйВызовСервера.СкопироватьФайлВПриложенных(
				МассивСкопировать, ВладелецФайла);
		КонецЕсли;
		
		Если МассивОбновить.Количество() > 0 Тогда 
			РаботаСФайламиСлужебныйВызовСервера.ОбновитьФайлВПриложенных(МассивОбновить, ВладелецФайла);
		КонецЕсли;
		
		ОбщееКоличество = МассивСкопировать.Количество() + МассивОбновить.Количество();
		Если ОбщееКоличество > 0 Тогда 
			
			ПолноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файлы (%1 шт) перенесены в %2'"),
				ОбщееКоличество,
				ВладелецФайла);
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Файлы перенесены'"),
				,
				ПолноеОписание,
				БиблиотекаКартинок.Информация32);
				
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры для работы с занятыми файлами.
// Возвращает:
//	Неопределено - если нет редактируемых файлов или работать с ними не надо.
//	Структуру - структура с передаваемыми параметрами.
// 
Функция ПроверитьЗанятыеФайлыПриЗавершенииРаботы()
	
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоказыватьЗанятыеФайлыПриЗавершенииРаботы =
		ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ПоказыватьЗанятыеФайлыПриЗавершенииРаботы;
	
	Если Не ПоказыватьЗанятыеФайлыПриЗавершенииРаботы Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	КоличествоЗанятыхФайлов = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗавершении().РаботаСФайлами.КоличествоЗанятыхФайлов;
	Если КоличествоЗанятыхФайлов = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПрикладнойФормыПредупреждения = Новый Структура;
	ПараметрыПрикладнойФормыПредупреждения.Вставить("СообщениеВопрос",      НСтр("ru = 'Завершить работу с программой?'"));
	ПараметрыПрикладнойФормыПредупреждения.Вставить("СообщениеЗаголовок",   НСтр("ru = 'Следующие файлы заняты вами для редактирования:'"));
	ПараметрыПрикладнойФормыПредупреждения.Вставить("Заголовок",            НСтр("ru = 'Завершение работы'"));
	ПараметрыПрикладнойФормыПредупреждения.Вставить("Редактирует",          ТекущийПользователь);
	
	ПрикладнаяФормаПредупреждения = "Справочник.Файлы.Форма.СписокЗанятыхСВопросом";
	Форма                         = "Справочник.Файлы.Форма.РедактируемыеФайлы";
	
	ВозвращаемыеПараметры = Новый Структура;
	ВозвращаемыеПараметры.Вставить("ПрикладнаяФормаПредупреждения", ПрикладнаяФормаПредупреждения);
	ВозвращаемыеПараметры.Вставить("ПараметрыПрикладнойФормыПредупреждения", ПараметрыПрикладнойФормыПредупреждения);
	ВозвращаемыеПараметры.Вставить("Форма", Форма);
	ВозвращаемыеПараметры.Вставить("ПрикладнаяФормаПредупреждения", ПрикладнаяФормаПредупреждения);
	ВозвращаемыеПараметры.Вставить("КоличествоЗанятыхФайлов", КоличествоЗанятыхФайлов);
	
	Возврат ВозвращаемыеПараметры;
	
КонецФункции

// Рекурсивный обход файлов в рабочем каталоге и сбор информации о них.
// Параметры:
//  Путь - Строка - путь рабочего каталога.
//  МассивФайлов - Массив - массив объектов "Файл".
//  ТаблицаФайлов - Массив - массив структур файлов.
Процедура ОбходФайловТаблица(Путь, МассивФайлов, ТаблицаФайлов)
	
#Если Не ВебКлиент Тогда
	Перем Версия;
	Перем ДатаПомещения;
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		
		Если ВыбранныйФайл.ЭтоКаталог() Тогда
			НовыйПуть = Строка(Путь);
			НовыйПуть = НовыйПуть + ПолучитьРазделительПути();
			НовыйПуть = НовыйПуть + Строка(ВыбранныйФайл.Имя);
			МассивФайловВКаталоге = НайтиФайлы(НовыйПуть, "*.*");
			
			Если МассивФайловВКаталоге.Количество() <> 0 Тогда
				ОбходФайловТаблица(НовыйПуть, МассивФайловВКаталоге, ТаблицаФайлов);
			КонецЕсли;
		
			Продолжить;
		КонецЕсли;
		
		// Временные файлы Word не удаляем из рабочего каталога.
		Если СтрНачинаетсяС(ВыбранныйФайл.Имя, "~") И ВыбранныйФайл.ПолучитьНевидимость() Тогда
			Продолжить;
		КонецЕсли;
		
		ОтносительныйПуть = Сред(ВыбранныйФайл.ПолноеИмя, СтрДлина(ИмяКаталога) + 1);
		
		// Если не найдем на диске - то минимальная дата 
		//  будет самой старой - и удалится при очистке из рабочего каталога самых старых файлов.
		ДатаПомещения = Дата('00010101');
		
		НайденныеСвойства = РаботаСФайламиСлужебныйВызовСервера.НайтиВРегистреПоПути(ОтносительныйПуть);
		ФайлЕстьВРегистре = НайденныеСвойства.ФайлЕстьВРегистре;
		Версия            = НайденныеСвойства.Версия;
		ДатаПомещения     = ?(ФайлЕстьВРегистре, НайденныеСвойства.ДатаПомещения, ДатаПомещения);
		Владелец          = НайденныеСвойства.Владелец;
		НомерВерсии       = НайденныеСвойства.НомерВерсии;
		ВРегистреНаЧтение = НайденныеСвойства.ВРегистреНаЧтение;
		ВРегистреКодФайла = НайденныеСвойства.ВРегистреКодФайла;
		ВРегистреПапка    = НайденныеСвойства.ВРегистреПапка;
		
		Если ФайлЕстьВРегистре Тогда
			РедактируетТекущийПользователь = РаботаСФайламиСлужебныйВызовСервера.ПолучитьРедактируетТекущийПользователь(Версия);
			
			// Если не занят текущим пользователем, можно удалить.
			Если Не РедактируетТекущийПользователь Тогда
				Запись = Новый Структура;
				Запись.Вставить("Путь", ОтносительныйПуть);
				Запись.Вставить("Размер", ВыбранныйФайл.Размер());
				Запись.Вставить("Версия", Версия);
				Запись.Вставить("ДатаПомещенияВРабочийКаталог", ДатаПомещения);
				ТаблицаФайлов.Добавить(Запись);
			КонецЕсли;
		Иначе
			Запись = Новый Структура;
			Запись.Вставить("Путь", ОтносительныйПуть);
			Запись.Вставить("Размер", ВыбранныйФайл.Размер());
			Запись.Вставить("Версия", Версия);
			Запись.Вставить("ДатаПомещенияВРабочийКаталог", ДатаПомещения);
			ТаблицаФайлов.Добавить(Запись);
		КонецЕсли;
		
	КонецЦикла;
#КонецЕсли
	
КонецПроцедуры

// Получает относительный путь к файлу в рабочем каталоге - если есть в регистре сведений - оттуда,
// если нет - сгенерируем - и запишем в регистр сведений.
//
// Параметры:
//  ДанныеФайла  - структура с данными файла.
//
// Возвращаемое значение:
//   Строка  - путь файла
Функция ПолучитьПутьФайлаВРабочемКаталоге(ДанныеФайла)
	
	ПутьДляВозврата = "";
	ПолноеИмяФайла = "";
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	// Сперва пытаемся найти такую запись в регистре сведений.
	ПолноеИмяФайла = ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге;
	ВРабочемКаталогеНаЧтение = ДанныеФайла.ВРабочемКаталогеНаЧтение;
	
	Если ПолноеИмяФайла <> "" Тогда
		// Тут надо еще на наличие на диске проверять.
		ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
		Если ФайлНаДиске.Существует() Тогда
			Возврат ПолноеИмяФайла;
		КонецЕсли;
	КонецЕсли;
	
	// Формирование имени файла с расширением.
	ИмяФайла = ДанныеФайла.ПолноеНаименованиеВерсии;
	Расширение = ДанныеФайла.Расширение;
	Если Не ПустаяСтрока(Расширение) Тогда 
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ИмяФайла, Расширение);
	КонецЕсли;
	
	ПолноеИмяФайла = "";
	Если Не ПустаяСтрока(ИмяФайла) Тогда
		Если Не ПустаяСтрока(ДанныеФайла.РабочийКаталогВладельца) Тогда
			ПолноеИмяФайла = ДанныеФайла.РабочийКаталогВладельца + ДанныеФайла.ПолноеНаименованиеВерсии + "." + ДанныеФайла.Расширение;
		Иначе
			ПолноеИмяФайла = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьУникальноеИмяСПутем(ИмяКаталога, ИмяФайла);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		Возврат "";
	КонецЕсли;
	
	// Запишем в регистр имя файла.
	НаЧтение = Истина;
	ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
	РаботаСФайламиСлужебныйВызовСервера.ЗаписатьПолноеИмяФайлаВРегистр(ДанныеФайла.Версия, ПолноеИмяФайла, НаЧтение, ВРабочемКаталогеВладельца);
	
	Если ДанныеФайла.РабочийКаталогВладельца = "" Тогда
		ПутьДляВозврата = ИмяКаталога + ПолноеИмяФайла;
	Иначе
		ПутьДляВозврата = ПолноеИмяФайла;
	КонецЕсли;
	
	Возврат ПутьДляВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий подсистем БСП.

// Доопределяет список предупреждений пользователю перед завершением работы системы.
//
// Параметры:
//  Предупреждения - Массив - в массив можно добавить элементы типа Структура,
//                            свойства которой см. в СтандартныеПодсистемыКлиент.ПредупреждениеПриЗавершениеРаботы.
//
Процедура ПриПолученииСпискаПредупрежденийЗавершенияРаботы(Предупреждения) Экспорт
	
	ПриЗавершенииРаботыСистемы(Предупреждения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Находится ли в рабочем каталоге Файл для данной версии.
// Параметры:
//  ДанныеФайла  - структура с данными файла.
//
// Возвращаемое значение:
//  Булево  - файл находится в рабочем каталоге.
//  ТекущаяВерсия  - СправочникСсылка.ВерсииФайлов - версия файла.
//  ПолноеИмяФайла - Строка - имя файла с путем.
//  ВРабочемКаталогеНаЧтение - Булево - файл помещен на чтение.
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге).
Функция ФайлНаходитсяВЛокальномКэшеФайлов(ДанныеФайла, ТекущаяВерсия, ПолноеИмяФайла, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца)
	ПолноеИмяФайла = "";
	
	// Если это активная версия - берем из ДанныеФайла.
	Если ДанныеФайла <> Неопределено И ДанныеФайла.ТекущаяВерсия = ТекущаяВерсия Тогда
		ПолноеИмяФайла = ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге;
		ВРабочемКаталогеНаЧтение = ДанныеФайла.ВРабочемКаталогеНаЧтение;
	Иначе
		ВРабочемКаталогеНаЧтение = Истина;
		ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		// Пытаемся найти такую запись в регистре сведений.
		ПолноеИмяФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьПолноеИмяФайлаИзРегистра(ТекущаяВерсия, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
	КонецЕсли;
	
	Если ПолноеИмяФайла <> "" Тогда
		// Тут надо еще на наличие на диске проверять.
		ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
		Если ФайлНаДиске.Существует() Тогда
			Возврат Истина;
		Иначе
			ПолноеИмяФайла = "";
			// Тут же удалим из регистра - т.к. в регистре есть, а на диске нет.
			РаботаСФайламиСлужебныйВызовСервера.УдалитьИзРегистра(ТекущаяВерсия);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Выбрать путь к рабочему каталогу.
// Параметры:
//  ИмяКаталога  - Строка - прежнее имя каталога.
//  Заголовок  - Строка - заголовок формы выбора пути каталога.
//  РабочийКаталогВладельца - Строка-  Рабочий каталог владельца.
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция.
Функция ВыбратьПутьКРабочемуКаталогу(ИмяКаталога, Заголовок, РабочийКаталогВладельца) Экспорт
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.Каталог = ИмяКаталога;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = Заголовок;
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		ИмяКаталога = ДиалогОткрытияФайла.Каталог;
		ИмяКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталога);
		
		// Создать каталог для файлов
		Попытка
			СоздатьКаталог(ИмяКаталога);
			ИмяКаталогаТестовое = ИмяКаталога + "ПроверкаДоступа\";
			СоздатьКаталог(ИмяКаталогаТестовое);
			УдалитьФайлы(ИмяКаталогаТестовое);
		Исключение
			// Нет прав на создание каталога, или такой путь отсутствует.
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверный путь или отсутствуют права на запись в каталог
				           |""%1"".'"),
				ИмяКаталога);
			ПоказатьПредупреждение(, ТекстОшибки);
			Возврат Ложь;
		КонецПопытки;
		
		Если РабочийКаталогВладельца = Ложь Тогда
#Если Не ВебКлиент Тогда
			МассивФайловВКаталоге = НайтиФайлы(ИмяКаталога, "*.*");
			Если МассивФайловВКаталоге.Количество() <> 0 Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В выбранном рабочем каталоге
					           |""%1""
					           |уже есть файлы.
					           |
					           |Выберите другой каталог.'"),
					ИмяКаталога);
				ПоказатьПредупреждение(, ТекстОшибки);
				Возврат Ложь;
			КонецЕсли;
#КонецЕсли
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Перерегистрировать В рабочем каталоге с другим флагом НаЧтение.
// Параметры:
//  ТекущаяВерсия  - СправочникСсылка.ВерсииФайлов - версия файла.
//  ПолноеИмяФайла - Строка - полное имя файла.
//  НаЧтение - Булево - файл помещен на чтение.
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге).
Процедура ПеререгистрироватьВРабочемКаталоге(ТекущаяВерсия, ПолноеИмяФайла, НаЧтение, ВРабочемКаталогеВладельца)
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	РаботаСФайламиСлужебныйВызовСервера.ЗанестиИнформациюФайлаВРегистр(ТекущаяВерсия, ПолноеИмяФайла, ИмяКаталога, НаЧтение, 0, ВРабочемКаталогеВладельца);
	Файл = Новый Файл(ПолноеИмяФайла);
	Файл.УстановитьТолькоЧтение(НаЧтение);
	
КонецПроцедуры

// Обход Файлов рекурсивный - для определения размера файлов.
// Параметры:
//  МассивФайлов - Массив - массив объектов "Файл".
//  МассивСлишкомБольшихФайлов - Массив - массив файлов.
//  Рекурсивно - Булево - Рекурсивно обходить подкаталоги.
//  КоличествоСуммарное - Число - Количество суммарное импортированных файлов.
//  ПсевдоФайловаяСистема - Соответствие - эмуляция файловой системы - для строки (каталога) возвращает массив строк
//                                         (подкаталоги и файлы).
//
Процедура НайтиСлишкомБольшиеФайлы(
				МассивФайлов,
				МассивСлишкомБольшихФайлов,
				Рекурсивно,
				КоличествоСуммарное,
				Знач ПсевдоФайловаяСистема) 
	
	МаксРазмерФайла = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами().МаксимальныйРазмерФайла;
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		
		Если ВыбранныйФайл.Существует() Тогда
			
			Если ВыбранныйФайл.Расширение = ".lnk" Тогда
				ВыбранныйФайл = РазыменоватьLnkФайл(ВыбранныйФайл);
			КонецЕсли;
			
			Если ВыбранныйФайл.ЭтоКаталог() Тогда
				
				Если Рекурсивно Тогда
					НовыйПуть = Строка(ВыбранныйФайл.Путь);
					НовыйПуть = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(НовыйПуть);
					НовыйПуть = НовыйПуть + Строка(ВыбранныйФайл.Имя);
					МассивФайловВКаталоге = ФайловыеФункцииСлужебныйКлиентСервер.НайтиФайлыПсевдо(ПсевдоФайловаяСистема, НовыйПуть);
					
					// Рекурсия
					Если МассивФайловВКаталоге.Количество() <> 0 Тогда
						НайтиСлишкомБольшиеФайлы(МассивФайловВКаталоге, МассивСлишкомБольшихФайлов, Рекурсивно, КоличествоСуммарное, ПсевдоФайловаяСистема);
					КонецЕсли;
				КонецЕсли;
			
				Продолжить;
			КонецЕсли;
			
			КоличествоСуммарное = КоличествоСуммарное + 1;
			
			// Размер файла слишком большой.
			Если ВыбранныйФайл.Размер() > МаксРазмерФайла Тогда
				МассивСлишкомБольшихФайлов.Добавить(ВыбранныйФайл.ПолноеИмя);
				Продолжить;
			КонецЕсли;
		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Разыменовать lnk файл
// Параметры:
//  ВыбранныйФайл - Файл - объект типа Файл.
//
// Возвращаемое значение:
//   Строка - на что ссылается lnk  файл.
Функция РазыменоватьLnkФайл(ВыбранныйФайл)
	
#Если Не ВебКлиент Тогда
	Если Не СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
		ShellApp = Новый COMОбъект("shell.application");
		FolderObj = ShellApp.NameSpace(ВыбранныйФайл.Путь);// Полный (только) путь на lnk-файл.
		FolderObjItem = FolderObj.items().item(ВыбранныйФайл.Имя); 	// только имя lnk-файла
		Link = FolderObjItem.GetLink();
		Возврат Новый Файл(Link.path);
	КонецЕсли;
#КонецЕсли
	
	Возврат ВыбранныйФайл;
	
КонецФункции

// Функция предназначена для открытия файла соответствующим приложением.
//
// Параметры:
//  ИмяОткрываемогоФайла - Строка - полное имя файла.
Процедура ВыполнитьЗапускПриложения(ИмяОткрываемогоФайла) Экспорт
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	Если РасширениеПодключено Тогда
		// Открыть Файл
		СистемнаяИнфо = Новый СистемнаяИнформация;
		Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 Или СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ИмяОткрываемогоФайла = СтрЗаменить(ИмяОткрываемогоФайла, "/", "\");
		КонецЕсли;
		
		ЗапуститьПриложение(ИмяОткрываемогоФайла);
	КонецЕсли;
	
КонецПроцедуры

// Сравнивает 2 файла (txt doc doc odt) с помощью MS Office или OpenOffice.
Процедура СравнитьФайлы(ПутьКФайлу1, ПутьКФайлу2, СпособСравненияВерсийФайлов) Экспорт
	
	Попытка
		Если СпособСравненияВерсийФайлов = "MicrosoftOfficeWord" Тогда
			ОбъектWord = Новый COMОбъект("Word.Application");
			ОбъектWord.Visible = 0;
			
			Документ = ОбъектWord.Documents.Open(ПутьКФайлу1);
			
			Документ.Merge(ПутьКФайлу2, 0, 0, 0); // MergeTarget:=wdMergeTargetSelected, DetectFormatChanges:=False, UseFormattingFrom:=wdFormattingFromCurrent
			
			ОбъектWord.Visible = 1;
			ОбъектWord.Activate(); 	
			
			Документ.Close();
		ИначеЕсли СпособСравненияВерсийФайлов = "OpenOfficeOrgWriter" Тогда 
			
			// Снимем readonly - иначе не сработает.
			Файл1 = Новый Файл(ПутьКФайлу1);
			Файл1.УстановитьТолькоЧтение(Ложь);
			
			Файл2 = Новый Файл(ПутьКФайлу2);
			Файл2.УстановитьТолькоЧтение(Ложь);
			
			// Открыть OpenOffice
			ServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
			Reflection = ServiceManager.createInstance("com.sun.star.reflection.CoreReflection");
			Desktop = ServiceManager.createInstance("com.sun.star.frame.Desktop");
			Dispatcher = ServiceManager.createInstance("com.sun.star.frame.DispatchHelper");
			
			// Открыть документ OpenOffice.
			Args = Новый COMSafeArray("VT_DISPATCH", 1);
			OOДокумент = Desktop.loadComponentFromURL(ПреобразоватьВURL(ПутьКФайлу2), "_blank", 0, Args);
			
			frame = Desktop.getCurrentFrame();
			
			// установить показ изменений
			ПараметрыСравнения = Новый COMSafeArray("VT_VARIANT", 1);
			ПараметрыСравнения.SetValue(0, ПрисвоитьЗначениеСвойству(ServiceManager, "ShowTrackedChanges", Истина));
			dispatcher.executeDispatch(frame, ".uno:ShowTrackedChanges", "", 0, ПараметрыСравнения);
			
			// сравнить с документом
			ПараметрыВызова = Новый COMSafeArray("VT_VARIANT", 1);
			ПараметрыВызова.SetValue(0, ПрисвоитьЗначениеСвойству(ServiceManager, "URL", ПреобразоватьВURL(ПутьКФайлу1)));
			dispatcher.executeDispatch(frame, ".uno:CompareDocuments", "", 0, ПараметрыВызова);
			
			OOДокумент = Неопределено;
		КонецЕсли;
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке() ));
	КонецПопытки;
	
КонецПроцедуры

// Функция преобразует Windows имя файла в URL OpenOffice.
Функция ПреобразоватьВURL(ИмяФайла)
	
	Возврат "file:///" + СтрЗаменить(ИмяФайла, "\", "/");
	
КонецФункции

// Создание структуры для параметров OpenOffice.
Функция ПрисвоитьЗначениеСвойству(Объект, ИмяСвойства, ЗначениеСвойства)
	
	Свойства = Объект.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
	Свойства.Name = ИмяСвойства;
	Свойства.Value = ЗначениеСвойства;
	
	Возврат Свойства;
	
КонецФункции

// Возвращает каталог данных пользователя внутри стандартного каталога данных приложения.
// Этот каталог может использоваться для хранения файлов, захваченных текущим пользователем.
// Для работы метода на веб-клиенте необходимо предварительно подключить расширение работы с файлами.
//
Функция КаталогДанныхПользователя()
	
	#Если ВебКлиент Тогда
		Возврат РабочийКаталогДанныхПользователя();
	#Иначе
		Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
			Возврат РабочийКаталогДанныхПользователя();
		Иначе
			Оболочка = Новый COMОбъект("WScript.Shell");
			КаталогДанныхПользователя = Оболочка.ExpandEnvironmentStrings("%APPDATA%");
			Возврат ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогДанныхПользователя);
		КонецЕсли;
	#КонецЕсли
	
КонецФункции

// Открывает форму перетаскивания.
Процедура ОткрытьФормуПеретаскиванияИзвне(ПапкаДляДобавления, МассивИменФайлов) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПапкаДляДобавления", ПапкаДляДобавления);
	ПараметрыФормы.Вставить("МассивИменФайлов",   МассивИменФайлов);
	
	ОткрытьФорму("Справочник.Файлы.Форма.ФормаПеретаскивания", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции для асинхронных методов.
//
// Общее описание параметров:
//   Обработчик - ОписаниеОповещения, Неопределено, Структура - Процедура-обработчик асинхронного метода.
//       * Неопределено       - Обработка не требуется.
//       * ОписаниеОповещения - Описание процедуры-обработчика.
//     В редких случаях может потребоваться прерывать выполнение кода только тогда,
//     когда необходимо показать асинхронный диалог (в циклах например).
//     В таких случаях в Обработчик передается Структура параметров вызывающего кода
//     с обязательным ключом АсинхронныйДиалог,
//     который используется при прерывании кода и открытии асинхронного диалога:
//       * Структура - Структура параметров вызывающего кода.
//           ** АсинхронныйДиалог - Структура - 
//               *** Открыт       - Булево - Истина если диалог был открыт.
//               *** ИмяПроцедуры - Строка - Имя процедуры обработчика вызывающего кода.
//               *** Модуль       - ОбщийМодуль, УправляемаяФорма - Модуль обработчика вызывающего кода.
//             В этом случае ОписаниеОповещения формируется из ключей "ИмяПроцедуры" и "Модуль".
//             Внимание. Не все асинхронные процедуры поддерживают передачу типа Структура. Читайте состав типов.
//
//   Результат - Произвольный - Результат, который необходимо вернуть в Обработчик.
//

// Показывает окно предупреждение, а после его закрытия вызывает обработчик с заданным результатом.
Процедура ВернутьРезультатПослеПоказаПредупреждения(Обработчик, ТекстПредупреждения, Результат)
	
	Если Обработчик <> Неопределено Тогда
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Обработчик", ПодготовитьОбработчикДляДиалога(Обработчик));
		ПараметрыОбработчика.Вставить("Результат", Результат);
		Обработчик = Новый ОписаниеОповещения("ВернутьРезультатПослеЗакрытияПростогоДиалога", ЭтотОбъект, ПараметрыОбработчика);
		ПоказатьПредупреждение(Обработчик, ТекстПредупреждения);
	Иначе
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// Показывает окно просмотра значения, а после его закрытия вызывает обработчик с заданным результатом.
Процедура ВернутьРезультатПослеПоказаЗначения(Обработчик, Значение, Результат)
	
	Если Обработчик <> Неопределено Тогда
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Обработчик", ПодготовитьОбработчикДляДиалога(Обработчик));
		ПараметрыОбработчика.Вставить("Результат", Результат);
		Обработчик = Новый ОписаниеОповещения("ВернутьРезультатПослеЗакрытияПростогоДиалога", ЭтотОбъект, ПараметрыОбработчика);
		ПоказатьЗначение(Обработчик, Значение);
	Иначе
		ПоказатьЗначение(, Значение);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ВернутьРезультатПослеЗакрытияПростогоДиалога(Структура) Экспорт
	
	Если ТипЗнч(Структура.Обработчик) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(Структура.Обработчик, Структура.Результат);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат прямого вызова, когда не было открыто диалогов.
Процедура ВернутьРезультат(Обработчик, Результат) Экспорт
	
	Обработчик = ПодготовитьОбработчикДляПрямогоВызова(Обработчик, Результат);
	Если ТипЗнч(Обработчик) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(Обработчик, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Записывает информацию, необходимую для подготовки обработчика асинхронного диалога.
Процедура ЗарегистрироватьОписаниеОбработчика(ПараметрыВыполнения, Модуль, ИмяПроцедуры) Экспорт
	
	ПараметрыВыполнения.Вставить("АсинхронныйДиалог", Новый Структура);
	ПараметрыВыполнения.АсинхронныйДиалог.Вставить("Модуль",                 Модуль);
	ПараметрыВыполнения.АсинхронныйДиалог.Вставить("ИмяПроцедуры",           ИмяПроцедуры);
	ПараметрыВыполнения.АсинхронныйДиалог.Вставить("Открыт",                 Ложь);
	ПараметрыВыполнения.АсинхронныйДиалог.Вставить("РезультатКогдаНеОткрыт", Неопределено);
	
КонецПроцедуры

// Подготовка обработчика асинхронного диалога.
Функция ПодготовитьОбработчикДляДиалога(ОбработчикИлиСтруктура) Экспорт
	
	Если ТипЗнч(ОбработчикИлиСтруктура) = Тип("Структура") Тогда
		// Рекурсивная регистрация всех обработчиков вызывающего кода.
		Если ОбработчикИлиСтруктура.Свойство("ОбработчикРезультата") Тогда
			ОбработчикИлиСтруктура.ОбработчикРезультата = ПодготовитьОбработчикДляДиалога(ОбработчикИлиСтруктура.ОбработчикРезультата);
		КонецЕсли;
		Если ОбработчикИлиСтруктура.Свойство("АсинхронныйДиалог") Тогда
			// Регистрация открытого диалога.
			ОбработчикИлиСтруктура.АсинхронныйДиалог.Открыт = Истина;
			// Формирование обработчика (при этом фиксируется вся структура параметров).
			Обработчик = Новый ОписаниеОповещения(
				ОбработчикИлиСтруктура.АсинхронныйДиалог.ИмяПроцедуры,
				ОбработчикИлиСтруктура.АсинхронныйДиалог.Модуль,
				ОбработчикИлиСтруктура);
		Иначе
			Обработчик = Неопределено;
		КонецЕсли;
	Иначе
		Обработчик = ОбработчикИлиСтруктура;
	КонецЕсли;
	
	Возврат Обработчик;
	
КонецФункции

// Подготовка обработчика прямого вызова без открытия диалога.
Функция ПодготовитьОбработчикДляПрямогоВызова(ОбработчикИлиСтруктура, Результат)
	
	Если ТипЗнч(ОбработчикИлиСтруктура) = Тип("Структура") Тогда
		Если ОбработчикИлиСтруктура.Свойство("АсинхронныйДиалог") Тогда
			ОбработчикИлиСтруктура.АсинхронныйДиалог.РезультатКогдаНеОткрыт = Результат;
		КонецЕсли;
		Возврат Неопределено; // Обработчик не был подготовлен для диалога => Вызывающий код не остановился.
	Иначе
		Возврат ОбработчикИлиСтруктура;
	КонецЕсли;
	
КонецФункции

// Устанавливает обработчик закрытия формы, полученной при помощи ПолучитьФорму().
Процедура УстановитьОповещениеФормы(Форма, Обработчик) Экспорт
	
	Если Обработчик <> Неопределено Тогда
		// Установка обработчика закрытия формы.
		Форма.ОписаниеОповещенияОЗакрытии = Обработчик;
		// Форма, возвращающая значение, должна:
		Если Форма.ВладелецФормы = Неопределено Тогда
			// Без установленного владельца - блокировать весь интерфейс.
			Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		Иначе
			// С установленным владельцем - блокировать окно владельца или весь интерфейс.
			Если Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый Тогда
				Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
