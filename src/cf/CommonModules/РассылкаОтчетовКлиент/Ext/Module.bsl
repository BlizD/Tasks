////////////////////////////////////////////////////////////////////////////////
// Подсистема "Рассылка отчетов" (клиент).
// 
// Выполняется на клиенте.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов.

// Обработчик команды формы отчета.
//
// Параметры:
//   Форма     - УправляемаяФорма - Форма отчета.
//   Команда   - КомандаФормы     - Команда, которая была вызвана.
//   Результат - Булево           - Истина, если вызов команды обработан.
//
// Места использования:
//   ОбщаяФорма.ФормаОтчета.Подключаемый_Команда().
//
Процедура ФормаОтчетаОбработчикКоманды(Форма, Команда, Результат) Экспорт
	
	Если Результат = Истина Тогда
		
		// Действие не требуется
		
	ИначеЕсли Команда.Имя = "РассылкаОтчетовСоздатьНовую" Тогда
		
		ОткрытьРассылкуИзФормыОтчета(Форма);
		
		Результат = Истина;
		
	ИначеЕсли Команда.Имя = "РассылкаОтчетовПрисоединитьКСуществующей" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
		ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
		
		ОткрытьФорму("Справочник.РассылкиОтчетов.ФормаВыбора", ПараметрыФормы, Форма);
		
		Результат = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик выбора формы отчета.
//
// Параметры:
//   Форма             - УправляемаяФорма - Форма отчета.
//   ВыбранноеЗначение - Произвольный     - Результат выбора в подчиненной форме.
//   ИсточникВыбора    - УправляемаяФорма - Форма, где осуществлен выбор.
//   Результат         - Булево           - Истина, если результат выбора обработан.
//
// Места использования:
//   ОбщаяФорма.ФормаОтчета.ОбработкаВыбора().
//
Процедура ФормаОтчетаОбработкаВыбора(Форма, ВыбранноеЗначение, ИсточникВыбора, Результат) Экспорт
	
	Если Результат = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.РассылкиОтчетов") Тогда
		
		ОткрытьРассылкуИзФормыОтчета(Форма, ВыбранноеЗначение);
		
		Результат = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует список получателей рассылки, предлагает пользователю выбрать
//   конкретного получателя или всех получателей рассылки и возвращает
//   результат выбора пользователя.
// Вызывается из формы элемента.
//
Процедура ВыбратьПолучателя(ОбработчикРезультата, Объект, МножественныйВыбор, ВозвращатьСоответствие) Экспорт
	
	Если Объект.Личная = Истина Тогда
		НаборПараметров = "Ссылка, ВидПочтовогоАдресаПолучателей, Личная, Автор";
	Иначе
		НаборПараметров = "Ссылка, ВидПочтовогоАдресаПолучателей, Личная, ТипПолучателейРассылки, Получатели";
	КонецЕсли;
	
	ПараметрыПолучателей = Новый Структура(НаборПараметров);
	ЗаполнитьЗначенияСвойств(ПараметрыПолучателей, Объект);
	РезультатВыполнения = РассылкаОтчетовВызовСервера.СформироватьСписокПолучателейРассылки(ПараметрыПолучателей);
	
	Если РезультатВыполнения.БылиКритичныеОшибки Тогда
		СтандартныеПодсистемыКлиент.ВывестиПредупреждение(Неопределено, РезультатВыполнения, ОбработчикРезультата);
		Возврат;
	КонецЕсли;
	
	Получатели = РезультатВыполнения.Получатели;
	
	ВозможныеПолучатели = Новый СписокЗначений;
	Если МножественныйВыбор Тогда
		ВозможныеПолучатели.Добавить(Неопределено, НСтр("ru = 'Всем получателям'"));
	КонецЕсли;
	Для Каждого КлючИЗначение Из Получатели Цикл
		ВозможныеПолучатели.Добавить(КлючИЗначение.Ключ, Строка(КлючИЗначение.Ключ) +" <"+ КлючИЗначение.Значение +">");
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ДополнительныеПараметры.Вставить("Получатели", Получатели);
	ДополнительныеПараметры.Вставить("ВозвращатьСоответствие", ВозвращатьСоответствие);
	
	Обработчик = Новый ОписаниеОповещения("ВыбратьПолучателяЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Количество = ВозможныеПолучатели.Количество();
	
	Если Объект.Личная И ВозможныеПолучатели.Количество() = 1 Тогда
		ВыполнитьОбработкуОповещения(Обработчик, ВозможныеПолучатели[0]);
	Иначе
		ВозможныеПолучатели.ПоказатьВыборЭлемента(Обработчик, НСтр("ru = 'Выбор получателя'"));
	КонецЕсли;
КонецПроцедуры

// Обработчик результата работы процедуры ВыбратьПолучателя.
Процедура ВыбратьПолучателяЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		Результат = Неопределено;
	Иначе
		Если ДополнительныеПараметры.ВозвращатьСоответствие Тогда
			Если ВыбранныйЭлемент.Значение = Неопределено Тогда
				Результат = ДополнительныеПараметры.Получатели;
			Иначе
				Результат = Новый Соответствие;
				Результат.Вставить(ВыбранныйЭлемент.Значение, ДополнительныеПараметры.Получатели[ВыбранныйЭлемент.Значение]);
			КонецЕсли;
		Иначе
			Результат = Новый Структура("Получатель, ПочтовыйАдрес", ВыбранныйЭлемент.Значение, ДополнительныеПараметры.Получатели[ВыбранныйЭлемент.Значение]);
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Результат);
КонецПроцедуры

// Контролирует состояние фонового задания и выводит пользователю его результат.
Процедура ПроверитьВыполнениеФоновогоЗадания(Форма) Экспорт
	
	ИдентификаторЗадания    = Форма.ПараметрыФоновогоЗадания[0].Значение;
	АдресХранилища          = Форма.ПараметрыФоновогоЗадания[1].Значение;
	ПараметрыОбработчика    = Форма.ПараметрыФоновогоЗадания[2].Значение;
	ФормаДлительнойОперации = Форма.ПараметрыФоновогоЗадания[3].Значение;
	
	Результат = РассылкаОтчетовВызовСервера.ПроверитьВыполнениеФоновогоЗадания(ИдентификаторЗадания, АдресХранилища);
	Если Результат.Статус = "ВыполненоУспешно" Тогда
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(Форма, Результат.Детали);
		Форма.ПараметрыФоновогоЗадания.Очистить();
	ИначеЕсли Результат.Статус = "Исключение" Тогда
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Рассылки не выполнены из-за ошибки,
			|Подробности см. в журнале регистрации.'"));
	ИначеЕсли Результат.Статус = "Выполняется" Тогда
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", ПараметрыОбработчика.ТекущийИнтервал, Истина);
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(Форма.ПараметрыФоновогоЗадания[2].Значение);
	КонецЕсли;
	
КонецПроцедуры

// Открывает рассылку отчетов из формы отчета.
//
// Параметры:
//   Форма  - УправляемаяФорма - Форма отчета.
//   Ссылка - СправочникСсылка.РассылкиОтчетов - Необязательный. Ссылка рассылки отчетов.
//
Процедура ОткрытьРассылкуИзФормыОтчета(Форма, Ссылка = Неопределено)
	НастройкиОтчета = Форма.НастройкиОтчета;
	
	СтрокаОтчетыПараметры = Новый Структура("ОтчетПолноеИмя, КлючВарианта, ВариантСсылка, Настройки");
	СтрокаОтчетыПараметры.ОтчетПолноеИмя = НастройкиОтчета.ПолноеИмя;
	СтрокаОтчетыПараметры.КлючВарианта   = Форма.КлючТекущегоВарианта;
	СтрокаОтчетыПараметры.ВариантСсылка  = НастройкиОтчета.ВариантСсылка;
	Если Форма.РежимВариантаОтчета Тогда
		СтрокаОтчетыПараметры.Настройки = Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	КонецЕсли;
	
	ПрисоединяемыеОтчеты = Новый Массив;
	ПрисоединяемыеОтчеты.Добавить(СтрокаОтчетыПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПрисоединяемыеОтчеты", ПрисоединяемыеОтчеты);
	Если Ссылка <> Неопределено Тогда
		ПараметрыФормы.Вставить("Ключ", Ссылка);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.РассылкиОтчетов.ФормаОбъекта", ПараметрыФормы, , Строка(Форма.УникальныйИдентификатор) + ".ОткрытьРассылкуОтчетов");
	
КонецПроцедуры

#КонецОбласти
