////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обмен данными".
// Процедуры и функции для выгрузки и загрузки данных в XML-схему.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ИнициализацияОбмена
// Добавляет строку в таблицу правил конвертации и инициализирует значение в колонке "Свойства".
// Используется в модуле менеджера обмена при заполнении таблицы правил конвертации объектов.
//
// Параметры:
//  ПравилаКонвертации - таблица значений.
//
// Возвращаемое значение
//  Строка таблицы значений правил конвертации.
//
Функция ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации) Экспорт
	
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.Свойства = ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
	Возврат ПравилоКонвертации;
	
КонецФункции

// Инициализирует компоненты обмена.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//
// Возвращаемое значение
//  Структура. Содержит компоненты обмена: правила обмена и параметры обмена.
//
Функция ИнициализироватьКомпонентыОбмена(НаправлениеОбмена) Экспорт
	
	КомпонентыОбмена = Новый Структура("
		|ВерсияФорматаОбмена,
		|XMLСхема,
		|МенеджерОбмена,
		|УзелКорреспондента,
		|УзелКорреспондентаОбъект");
		
	КомпонентыОбмена.Вставить("НаправлениеОбмена", НаправлениеОбмена);
	КомпонентыОбмена.Вставить("ЭтоОбменЧерезПланОбмена", Истина);
	КомпонентыОбмена.Вставить("ФлагОшибки", Ложь);
	КомпонентыОбмена.Вставить("СтрокаСообщенияОбОшибке", "");
	КомпонентыОбмена.Вставить("КлючСообщенияЖурналаРегистрации", ОбменДаннымиСервер.СобытиеЖурналаРегистрацииОбменДанными());
	КомпонентыОбмена.Вставить("ИспользоватьКвитирование", Истина);
	
	СостояниеОбменаДанными = Новый Структура;
	СостояниеОбменаДанными.Вставить("УзелИнформационнойБазы");
	СостояниеОбменаДанными.Вставить("ДействиеПриОбмене");
	СостояниеОбменаДанными.Вставить("ДатаНачала");
	СостояниеОбменаДанными.Вставить("ДатаОкончания");
	СостояниеОбменаДанными.Вставить("РезультатВыполненияОбмена");
	
	КомпонентыОбмена.Вставить("СостояниеОбменаДанными", СостояниеОбменаДанными);
	
	ВедениеПротоколаДанных = Новый Структура;
	ВедениеПротоколаДанных.Вставить("ФайлПротоколаДанных", Неопределено);
	ВедениеПротоколаДанных.Вставить("ВыводВПротоколИнформационныхСообщений", Ложь);
	ВедениеПротоколаДанных.Вставить("ДописыватьДанныеВПротоколОбмена", Истина);
	КомпонентыОбмена.Вставить("ВедениеПротоколаДанных", ВедениеПротоколаДанных);
	
	КомпонентыОбмена.Вставить("ИспользоватьТранзакции", Истина);
	
	Если НаправлениеОбмена = "Отправка" Тогда
		
		КомпонентыОбмена.Вставить("ВыгруженныеОбъекты", Новый Массив);
		КомпонентыОбмена.Вставить("КоличествоОбъектовКВыгрузке", 0);
		КомпонентыОбмена.Вставить("СчетчикВыгруженныхОбъектов", 0);
		КомпонентыОбмена.Вставить("СоответствиеРегистрацияПоНеобходимости", Новый Соответствие);
		КомпонентыОбмена.Вставить("ВыгруженныеПоСсылкеОбъекты", Новый Массив);
		
		КомпонентыОбмена.Вставить("СценарийВыгрузки");
		
		КомпонентыОбмена.Вставить("ТаблицаПравилаРегистрацииОбъектов");
		КомпонентыОбмена.Вставить("СвойстваУзлаПланаОбмена");
		
	Иначе
		
		КомпонентыОбмена.Вставить("НомерВходящегоСообщения");
		КомпонентыОбмена.Вставить("НомерСообщенияПолученногоКорреспондентом");
		
		КомпонентыОбмена.Вставить("РежимЗагрузкиДанныхВИнформационнуюБазу", Истина);
		КомпонентыОбмена.Вставить("СчетчикЗагруженныхОбъектов", 0);
		КомпонентыОбмена.Вставить("КоличествоОбъектовНаТранзакцию", 0);
		КомпонентыОбмена.Вставить("КоличествоОбъектовКЗагрузке", 0);
		КомпонентыОбмена.Вставить("РазмерФайлаСообщенияОбмена", 0);
		
		ДокументыДляОтложенногоПроведения = Новый ТаблицаЗначений;
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументСсылка");
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДатаДокумента",           Новый ОписаниеТипов("Дата"));
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументПроведенУспешно", Новый ОписаниеТипов("Булево"));
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ЭтоКоллизия", Новый ОписаниеТипов("Число"));
		КомпонентыОбмена.Вставить("ДокументыДляОтложенногоПроведения", ДокументыДляОтложенногоПроведения);
		
		ЗагруженныеОбъекты = Новый ТаблицаЗначений;
		ЗагруженныеОбъекты.Колонки.Добавить("ИмяОбработчика");
		ЗагруженныеОбъекты.Колонки.Добавить("Объект");
		ЗагруженныеОбъекты.Колонки.Добавить("Параметры");
		ЗагруженныеОбъекты.Колонки.Добавить("СсылкаНаОбъект");
		КомпонентыОбмена.Вставить("ЗагруженныеОбъекты", ЗагруженныеОбъекты);
		
		ТаблицаОбъектовСозданныхПоСсылкам = Новый ТаблицаЗначений();
		ТаблицаОбъектовСозданныхПоСсылкам.Колонки.Добавить("СсылкаНаОбъект");
		КомпонентыОбмена.Вставить("ТаблицаОбъектовСозданныхПоСсылкам", ТаблицаОбъектовСозданныхПоСсылкам);
		
		КомпонентыОбмена.Вставить("ТаблицаДанныхЗаголовкаПакета", НоваяТаблицаДанныхЗаголовкаПакета());
		КомпонентыОбмена.Вставить("ТаблицыДанныхСообщенияОбмена", Новый Соответствие);
		
		КомпонентыОбмена.Вставить("ОбъектыДляОтложеннойЗаписи", Новый Соответствие);
		
	КонецЕсли;
	
	Возврат КомпонентыОбмена;
	
КонецФункции

// Инициализирует таблицы значений с правилами обмена и помещает их в КомпонентыОбмена.
//
// Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//
Процедура ИнициализироватьТаблицыПравилОбмена(КомпонентыОбмена) Экспорт
	
	НаправлениеОбмена = КомпонентыОбмена.НаправлениеОбмена;
	XMLСхема = КомпонентыОбмена.XMLСхема;
	МенеджерОбмена = КомпонентыОбмена.МенеджерОбмена;
	
	// Инициализация таблиц правил обмена.
	КомпонентыОбмена.Вставить("ПравилаОбработкиДанных", ТаблицаПравилОбработкиДанных(XMLСхема, МенеджерОбмена, НаправлениеОбмена));
	КомпонентыОбмена.Вставить("ПравилаКонвертацииОбъектов", ТаблицаПравилКонвертации(
		XMLСхема, МенеджерОбмена, НаправлениеОбмена, КомпонентыОбмена.ПравилаОбработкиДанных));
	
	КомпонентыОбмена.Вставить("ПравилаКонвертацииПредопределенныхДанных",
		ТаблицаПравилКонвертацииПредопределенныхДанных(XMLСхема, МенеджерОбмена, НаправлениеОбмена));
	
	КомпонентыОбмена.Вставить("ПараметрыКонвертации", СтруктураПараметровКонвертации(МенеджерОбмена));
	
КонецПроцедуры

// Инициализирует таблицу значений для хранения правил конвертации свойств объекта.
//
// Возвращаемое значение:
//  Таблица значений 
//
Функция ИнициализироватьТаблицуСвойствДляПравилаКонвертации() Экспорт
	
	ТаблицаПКС = Новый ТаблицаЗначений;
	ТаблицаПКС.Колонки.Добавить("СвойствоКонфигурации", Новый ОписаниеТипов("Строка"));
	ТаблицаПКС.Колонки.Добавить("СвойствоФормата", Новый ОписаниеТипов("Строка"));
	ТаблицаПКС.Колонки.Добавить("ПравилоКонвертацииСвойства", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	ТаблицаПКС.Колонки.Добавить("ИспользуетсяАлгоритмКонвертации", Новый ОписаниеТипов("Булево"));
	ТаблицаПКС.Колонки.Добавить("ОбработкаКлючевогоСвойства", Новый ОписаниеТипов("Булево"));
	ТаблицаПКС.Колонки.Добавить("ОбработкаПоисковогоСвойства", Новый ОписаниеТипов("Булево"));
	ТаблицаПКС.Колонки.Добавить("ИмяТЧ", Новый ОписаниеТипов("Строка"));

	Возврат ТаблицаПКС;
	
КонецФункции

#КонецОбласти

#Область ВедениеПротокола
// Создает объект для записи протокола обмена и помещает его в КомпонентыОбмена.
//
// Параметры:
//  КомпонентыОбмена        - Структура - содержит все правила и параметры обмена.
//  ИмяФайлаПротоколаОбмена - Строка, содержит полное имя файла протокола.
//
Процедура ИнициализироватьВедениеПротоколаОбмена(КомпонентыОбмена, ИмяФайлаПротоколаОбмена) Экспорт
	
	КомпонентыОбмена.ВедениеПротоколаДанных.ФайлПротоколаДанных = Неопределено;
	Если Не ПустаяСтрока(ИмяФайлаПротоколаОбмена) Тогда
		
		// Попытка записи в файл протокола обмена.
		Попытка
			КомпонентыОбмена.ВедениеПротоколаДанных.ФайлПротоколаДанных = Новый ЗаписьТекста(
				ИмяФайлаПротоколаОбмена,
				КодировкаТекста.ANSI,,
				КомпонентыОбмена.ВедениеПротоколаОбмена.ДописыватьДанныеВПротоколОбмена);
		Исключение
			
			СтрокаСообщения = НСтр("ru = 'Ошибка при попытке записи в файл протокола данных: %1. Описание ошибки: %2'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ИмяФайлаПротоколаОбмена, ОписаниеОшибки());
			
			ЗаписьЖурналаРегистрацииОбменДанными(СтрокаСообщения, КомпонентыОбмена, УровеньЖурналаРегистрации.Предупреждение);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Завершает запись в протокол обмена.
//
// Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//
Процедура ЗавершитьВедениеПротоколаОбмена(КомпонентыОбмена) Экспорт
	
	Если КомпонентыОбмена.ВедениеПротоколаДанных.ФайлПротоколаДанных <> Неопределено Тогда
		
		КомпонентыОбмена.ВедениеПротоколаДанных.ФайлПротоколаДанных.Закрыть();
		КомпонентыОбмена.ВедениеПротоколаДанных.ФайлПротоколаДанных = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет в протокол выполнения (или выводит на экран) сообщения указанной структуры.
//
// Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//  Код               - Число. Код сообщения.
//  СтруктураЗаписи   - Структура. Структура записи протокола.
//  ВзвестиФлагОшибок - Если истина, то - это сообщение об ошибке. Взводится ФлагОшибки.
//  Уровень           - Число - отступ слева, количество табуляций.
//  Выравнивание      - Число - отступ в тексте, для выравнивания текста выводимого в виде Ключ - Значение.
//  БезусловнаяЗаписьВПротоколОбмена - Булево - флаг безусловной записи информации в протокол.
//
Функция ЗаписатьВПротоколВыполнения(КомпонентыОбмена,
									Код = "",
									СтруктураЗаписи=Неопределено,
									ВзвестиФлагОшибок=Истина,
									Уровень=0,
									Выравнивание=22,
									БезусловнаяЗаписьВПротоколОбмена = Ложь) Экспорт
	
	ФайлПротоколаДанных = КомпонентыОбмена.ВедениеПротоколаДанных.ФайлПротоколаДанных;
	ВыводВПротоколИнформационныхСообщений = КомпонентыОбмена.ВедениеПротоколаДанных.ВыводВПротоколИнформационныхСообщений;
	
	Отступ = "";
	Для Сч = 0 По Уровень-1 Цикл
		Отступ = Отступ + Символы.Таб;
	КонецЦикла; 
	
	Если ТипЗнч(Код) = Тип("Число") Тогда
		
		СообщенияОбОшибках = ОбменДаннымиПовтИсп.СообщенияОбОшибках();
		
		Стр = СообщенияОбОшибках[Код];
		
	Иначе
		
		Стр = Строка(Код);
		
	КонецЕсли;

	Стр = Отступ + Стр;
	
	Если СтруктураЗаписи <> Неопределено Тогда
		
		Для каждого Поле Из СтруктураЗаписи Цикл
			
			Значение = Поле.Значение;
			Если Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			Ключ = Поле.Ключ;
			Стр  = Стр + Символы.ПС + Отступ + Символы.Таб
				+ СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Поле.Ключ, Выравнивание, " ", "Справа") + " =  " + Строка(Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЛитералПеревода = ?(ПустаяСтрока(КомпонентыОбмена.СтрокаСообщенияОбОшибке), "", Символы.ПС);
	КомпонентыОбмена.СтрокаСообщенияОбОшибке = КомпонентыОбмена.СтрокаСообщенияОбОшибке + ЛитералПеревода + Стр;
	
	Если ВзвестиФлагОшибок Тогда
		
		КомпонентыОбмена.ФлагОшибки = Истина;
		Если КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Неопределено Тогда
			КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФайлПротоколаДанных <> Неопределено Тогда
		
		Если ВзвестиФлагОшибок Тогда
			
			ФайлПротоколаДанных.ЗаписатьСтроку(Символы.ПС + "Ошибка.");
			
		КонецЕсли;
		
		Если ВзвестиФлагОшибок
			Или БезусловнаяЗаписьВПротоколОбмена
			Или ВыводВПротоколИнформационныхСообщений Тогда
			
			ФайлПротоколаДанных.ЗаписатьСтроку(Символы.ПС + КомпонентыОбмена.СтрокаСообщенияОбОшибке);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатВыполненияОбменаОшибка(КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена) Тогда
		
		УровеньЖР = УровеньЖурналаРегистрации.Ошибка;
		
	ИначеЕсли РезультатВыполненияОбменаПредупреждение(КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена) Тогда
		
		УровеньЖР = УровеньЖурналаРегистрации.Предупреждение;
		
	Иначе
		
		УровеньЖР = УровеньЖурналаРегистрации.Информация;
		
	КонецЕсли;
	
	ПозицияСсылки = Найти(КомпонентыОбмена.СтрокаСообщенияОбОшибке, "e1cib/data/");
	Если ПозицияСсылки > 0 Тогда
		ПозицияУИД = Найти(КомпонентыОбмена.СтрокаСообщенияОбОшибке, "?ref=");
		СтрокаСсылки = Сред(КомпонентыОбмена.СтрокаСообщенияОбОшибке, ПозицияСсылки, ПозицияУИД - ПозицияСсылки + 37);
		ПерваяТочка = Найти(СтрокаСсылки, "e1cib/data/");
		ВтораяТочка = Найти(СтрокаСсылки, "?ref=");
		ПредставлениеТипа = Сред(СтрокаСсылки, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
		ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
		ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(СтрокаСсылки, ВтораяТочка + 5));
		СсылкаНаОбъект = ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
	Иначе
		СсылкаНаОбъект = Неопределено;
	КонецЕсли;
	
	// Фиксируем событие в журнале регистрации.
	ЗаписьЖурналаРегистрацииОбменДанными(
		КомпонентыОбмена.СтрокаСообщенияОбОшибке,
		КомпонентыОбмена,
		УровеньЖР,
		СсылкаНаОбъект);
	
	Возврат КомпонентыОбмена.СтрокаСообщенияОбОшибке;
	
КонецФункции

#КонецОбласти

#Область ПоискПравилОбмена
// Выполняет поиск правила конвертации объекта по имени.
//
// Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//  Имя              - Строка, имя правила.
//
// Возвращаемое значение:
//  Строка таблицы правил обмена, в которой содержится искомое правило.
//
Функция ПКОПоИмени(КомпонентыОбмена, Имя) Экспорт
	
	ПравилоКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти(Имя, "ИмяПКО");
	
	Если ПравилоКонвертации = Неопределено Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найдено ПКО с именем %1'"), Имя);
			
	Иначе
		Возврат ПравилоКонвертации;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ОтправкаДанных
// Выполняет выгрузку данных в соответствии с правилами и параметрами обмена.
//
// Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//
Процедура ПроизвестиВыгрузкуДанных(КомпонентыОбмена) Экспорт
	
	УзелДляОбмена = КомпонентыОбмена.УзелКорреспондента;
	
	Попытка
		КомпонентыОбмена.МенеджерОбмена.ПередКонвертацией(КомпонентыОбмена);
	Исключение
		ТекстОшибки = Символы.ПС + СтрШаблон(НСтр("ru = 'Событие: %1.
				|Обработчик: ПередКонвертацией.
				|
				|Ошибка выполнения обработчика.
				|%2.'"),
			КомпонентыОбмена.НаправлениеОбмена,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КомпонентыОбмена.СтрокаСообщенияОбОшибке = "";
		ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СокрЛП(ТекстОшибки));
	КонецПопытки;
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
	
		НомерОтправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелДляОбмена, "НомерОтправленного") + 1;
		
		Попытка
			ВыполнитьВыгрузкуЗарегистрированныхДанных(КомпонентыОбмена, НомерОтправленного);
		Исключение
			КомпонентыОбмена.СтрокаСообщенияОбОшибке = "";
			ЗаписатьВПротоколВыполнения(КомпонентыОбмена, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		// Назначаем номер отправленного сообщения для объектов, выгруженных по ссылке.
		Если КомпонентыОбмена.ВыгруженныеПоСсылкеОбъекты.Количество() > 0 Тогда
			
			// Выполняем регистрацию объектов на текущем узле, которые были выгружены по ссылке.
			Для Каждого Элемент Из КомпонентыОбмена.ВыгруженныеПоСсылкеОбъекты Цикл
				
				ПланыОбмена.ЗарегистрироватьИзменения(УзелДляОбмена, Элемент);
				
			КонецЦикла;
			
			ОбменДаннымиСервер.ВыбратьИзменения(УзелДляОбмена, НомерОтправленного, КомпонентыОбмена.ВыгруженныеПоСсылкеОбъекты);
			
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			Получатель = УзелДляОбмена.ПолучитьОбъект();
			Получатель.НомерОтправленного = НомерОтправленного;
			Получатель.ДополнительныеСвойства.Вставить("Загрузка");
			Получатель.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		
		РазблокироватьДанныеДляРедактирования(УзелДляОбмена);
		
	Иначе
		
		Для Каждого Строка Из КомпонентыОбмена.СценарийВыгрузки Цикл
			
			ПравилоОбработки = ПОДПоИмени(КомпонентыОбмена, Строка.ИмяПОД);
			
			ВыборкаДанных = ВыборкаДанных(КомпонентыОбмена, ПравилоОбработки);
			
			Для Каждого ОбъектВыборки Из ВыборкаДанных Цикл
				ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ОбъектВыборки, ПравилоОбработки);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Попытка
		КомпонентыОбмена.МенеджерОбмена.ПослеКонвертации(КомпонентыОбмена);
	Исключение
		ТекстОшибки = Символы.ПС + СтрШаблон(НСтр("ru = 'Событие: %1.
				|Обработчик: ПослеКонвертации.
				|
				|Ошибка выполнения обработчика.
				|%2.'"),
			КомпонентыОбмена.НаправлениеОбмена,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КомпонентыОбмена.СтрокаСообщенияОбОшибке = "";
		ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СокрЛП(ТекстОшибки));
	КонецПопытки;
	
	КомпонентыОбмена.ФайлОбмена.ЗаписатьКонецЭлемента(); // Body
	КомпонентыОбмена.ФайлОбмена.ЗаписатьКонецЭлемента(); // Message
	
	// Фиксация успешного завершения обмена.
	Если КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Неопределено Тогда
		КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет выгрузку объекта информационной базы.
//
// Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//  Объект           - Ссылка на объект информационной базы.
//  ПравилоОбработки - Строка таблицы значений правил обработки данных, 
//                     соответствующая правилу обработки типа выгружаемого объекта.
//                     Если ПравилоОбработки не задано, оно будет найдено по объекту метаданных выгружаемого объекта.
//
Процедура ВыгрузкаОбъектаВыборки(КомпонентыОбмена, Объект, ПравилоОбработки = Неопределено) Экспорт
	
	ЗаписьXML = КомпонентыОбмена.ФайлОбмена;
	Если ТипЗнч(Объект) <> Тип("Структура") Тогда
		Попытка
			ТекОбъект = Объект.Ссылка;
		Исключение
			ТекОбъект = Объект;
		КонецПопытки;
		
		КомпонентыОбмена.ВыгруженныеОбъекты.Добавить(ТекОбъект);
		
		ОбъектМетаданныхТекущий = Объект.Метаданные();
		Попытка
			ПравилоОбработки = ПОДПоОбъектуМетаданных(КомпонентыОбмена, ОбъектМетаданныхТекущий);
		Исключение
			ТекстОшибки = Символы.ПС + СтрШаблон(НСтр("ru = 'Событие: %1.
					|Объект: %2.
					|
					|%3.'"),
				КомпонентыОбмена.НаправлениеОбмена,
				ПредставлениеОбъектаДляПротокола(ТекОбъект),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КомпонентыОбмена.СтрокаСообщенияОбОшибке = "";
			ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СокрЛП(ТекстОшибки));
			Возврат;
		КонецПопытки;
	Иначе
		КомпонентыОбмена.ВыгруженныеОбъекты.Добавить(Объект);
	КонецЕсли;
	
	// Отработка ПОД
	ИспользованиеПКО = Новый Структура;
	Для Каждого ИмяПКО Из ПравилоОбработки.ИспользуемыеПКО Цикл
		ИспользованиеПКО.Вставить(ИмяПКО, Истина);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПравилоОбработки.ПриОбработке) Тогда
		ПриОбработкеПОД(
			КомпонентыОбмена,
			ПравилоОбработки,
			Объект,
			ИспользованиеПКО);
	КонецЕсли;
	
	// Отработка ПКО
	НесколькоПКО = (ПравилоОбработки.ИспользуемыеПКО.Количество() > 1);
	
	Для Каждого ТекущееПКО Из ИспользованиеПКО Цикл
		Попытка
			Если Не ТекущееПКО.Значение Тогда
				// Если правил конвертации несколько, и некоторые из них не используются -
				//	необходимо выгрузить удаление объекта на случай если  ранее он был выгружен по этим правилам.
				
				Если НесколькоПКО Тогда
					ПравилоКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти(ТекущееПКО.Ключ, "ИмяПКО");
					ВыгрузитьУдаление(КомпонентыОбмена, Объект.Ссылка, ПравилоКонвертации);
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			// 1. Поиск правила конвертации.
			
			ПравилоКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти(ТекущееПКО.Ключ, "ИмяПКО");
			
			// 2. Конвертируем Данные в Структуру по правилам конвертации.
			ДанныеXDTO = ДанныеXDTOИзДанныхИБ(КомпонентыОбмена, Объект, ПравилоКонвертации, Неопределено);
			
			// 3. Конвертируем Структуру в ОбъектXDTO.
			СсылкиИзОбъекта = Новый Массив;
			ОбъектXDTO = ОбъектXDTOИзДанныхXDTO(КомпонентыОбмена, ДанныеXDTO, ПравилоКонвертации.ТипXDTO,,СсылкиИзОбъекта);
			
			ОбъектXDTO.Проверить();
			
			Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
				
				Для Каждого ЗначениеСсылки Из СсылкиИзОбъекта Цикл
					
					Если КомпонентыОбмена.ВыгруженныеОбъекты.Найти(ЗначениеСсылки) = Неопределено
						И ВыгружатьОбъектПоНеобходимости(КомпонентыОбмена, ЗначениеСсылки) Тогда
						
						Если Не РегистрыСведений.ДанныеОбъектовДляРегистрацииВОбменах.ОбъектЕстьВРегистре(
							ЗначениеСсылки, КомпонентыОбмена.УзелКорреспондента) Тогда
							
							ОбъектВыгружаемыйПоСсылке = Неопределено;
							
							Если ОбщегоНазначения.СсылкаСуществует(ЗначениеСсылки) Тогда
								ОбъектВыгружаемыйПоСсылке = ЗначениеСсылки.ПолучитьОбъект();
							КонецЕсли;
							
							Если ОбъектВыгружаемыйПоСсылке <> Неопределено Тогда
								
								ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ОбъектВыгружаемыйПоСсылке);
								КомпонентыОбмена.ВыгруженныеПоСсылкеОбъекты.Добавить(ЗначениеСсылки);
								РегистрыСведений.ДанныеОбъектовДляРегистрацииВОбменах.ДобавитьОбъектВФильтрРазрешенныхОбъектов(
									ЗначениеСсылки, КомпонентыОбмена.УзелКорреспондента);
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
				
			// 4. Записываем ОбъектXDTO в XML-файл.
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
		Исключение
			ТекстОшибки = Символы.ПС + СтрШаблон(НСтр("ru = 'Событие: %1.
					|ПОД: %2.
					|ПКО: %3.
					|Объект: %4.
					|
					|%5'"),
				КомпонентыОбмена.НаправлениеОбмена,
				ПравилоОбработки.Имя,
				ТекущееПКО.Ключ,
				ПредставлениеОбъектаДляПротокола(Объект),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КомпонентыОбмена.СтрокаСообщенияОбОшибке = "";
			ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СокрЛП(ТекстОшибки));
			Возврат;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет преобразование структуры с данными в объект XDTO указанного типа в соответствии с правилами.
//
// Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//  Источник         - Структура - источник данных, которые необходимо преобразовать в объект XDTO.
//  ТипXDTO          - Строка - тип объекта или тип значения XDTO, к которому надо преобразовать данные.
//  Приемник         - ОбъектXDTO - объект, в который будет помещен результат.
//  СсылкиИзОбъекта  - Массив - содержит общий список выгруженных по ссылкам объектов.
//  ПроведеноЗаполнениеСвойств - Булево - параметр для определения заполненности общих составных свойств.
// 
Функция ОбъектXDTOИзДанныхXDTO(
		КомпонентыОбмена,
		Знач Источник,
		Знач ТипXDTO,
		Приемник = Неопределено,
		СсылкиИзОбъекта = Неопределено,
		ПроведеноЗаполнениеСвойств = Ложь) Экспорт
	
	Если СсылкиИзОбъекта = Неопределено Тогда
		СсылкиИзОбъекта = Новый Массив;
	КонецЕсли;
	
	ПравилаКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов;
	УзелКорреспондента = КомпонентыОбмена.УзелКорреспондента;
	
	Если Приемник = Неопределено Тогда
		Приемник = ФабрикаXDTO.Создать(ТипXDTO);
	КонецЕсли;
	
	Для Каждого Свойство Из ТипXDTO.Свойства Цикл
		
		ЗначениеСвойства = Неопределено;
		СвойствоНайдено = Ложь;
		
		Если ТипЗнч(Источник) = Тип("Структура") Тогда
			СвойствоНайдено = Источник.Свойство(Свойство.Имя, ЗначениеСвойства);
		ИначеЕсли ТипЗнч(Источник) = Тип("СтрокаТаблицыЗначений")
			И Источник.Владелец().Колонки.Найти(Свойство.Имя) <> Неопределено Тогда
			СвойствоНайдено = Истина;
			ЗначениеСвойства = Источник[Свойство.Имя];
		КонецЕсли;
		
		ТипСвойства = Неопределено;
		Если ТипЗнч(Свойство.Тип) = Тип("ТипЗначенияXDTO") Тогда
			ТипСвойства = "ОбычноеСвойство";
		ИначеЕсли ТипЗнч(Свойство.Тип) = Тип("ТипОбъектаXDTO") Тогда
			
			Если Свойство.Имя = "AdditionalInfo" Тогда
				ТипСвойства = "AdditionalInfo";
			ИначеЕсли ЭтоТаблицаОбъекта(Свойство) Тогда
				ТипСвойства = "Таблица";
			ИначеЕсли Свойство.Имя = "КлючевыеСвойства"
				Или СтрНайти(Свойство.Тип.Имя, "КлючевыеСвойства") > 0 Тогда
				ТипСвойства = "КлючевыеСвойства";
			Иначе
				Если СвойствоНайдено Тогда
					ТипСвойства = "СвойствоСоставногоТипа";
				Иначе
					ТипСвойства = "ОбщееСоставноеСвойство";
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Неизвестный тип свойства <%1>. Тип объекта: %2'"), Свойство.Имя, Строка(ТипXDTO));
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Попытка
			Если ТипСвойства = "ОбщееСоставноеСвойство" Тогда
				
				ПроведеноЗаполнениеВложенныхСвойств = Ложь;
				ЗначениеXDTO = ОбъектXDTOИзДанныхXDTO(КомпонентыОбмена, Источник, Свойство.Тип,, СсылкиИзОбъекта, ПроведеноЗаполнениеВложенныхСвойств);
				Если Не ПроведеноЗаполнениеВложенныхСвойств Тогда
					Продолжить;
				КонецЕсли;
				
			Иначе
				
				Если Не СвойствоНайдено Тогда
					Продолжить;
				КонецЕсли;
				
				// Проверка на заполненность
				Если ЗначениеСвойства = Null
					Или Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда
					
					Если Свойство.ВозможноПустое Тогда
						Приемник[Свойство.Имя] = Неопределено;
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				ЗначениеXDTO = Неопределено;
				Если ТипСвойства = "КлючевыеСвойства" Тогда
					ЗначениеXDTO = ОбъектXDTOИзДанныхXDTO(КомпонентыОбмена, ЗначениеСвойства, Свойство.Тип,,СсылкиИзОбъекта);
				ИначеЕсли ТипСвойства = "ОбычноеСвойство" Тогда
					
					Если ЭтоСсылкаXDTO(Свойство.Тип) Тогда // Конвертация ссылки
						
						ЗначениеXDTO = КонвертироватьСсылкуВXDTO(КомпонентыОбмена, ЗначениеСвойства, Свойство.Тип);
						
						Если СсылкиИзОбъекта.Найти(ЗначениеСвойства) = Неопределено Тогда
							СсылкиИзОбъекта.Добавить(ЗначениеСвойства);
						КонецЕсли;
						
					ИначеЕсли Свойство.Тип.Фасеты <> Неопределено
						И Свойство.Тип.Фасеты.Перечисления <> Неопределено
						И Свойство.Тип.Фасеты.Перечисления.Количество() > 0 Тогда // Конвертация перечисления
						ЗначениеXDTO = КонвертироватьПеречислениеВXDTO(КомпонентыОбмена, ЗначениеСвойства, Свойство.Тип);
					Иначе // Конвертация обычного значения.
						ЗначениеXDTO = ФабрикаXDTO.Создать(Свойство.Тип, ЗначениеСвойства);
					КонецЕсли;
				ИначеЕсли ТипСвойства = "AdditionalInfo" Тогда
					ЗначениеXDTO = СериализаторXDTO.ЗаписатьXDTO(ЗначениеСвойства);
					
				ИначеЕсли ТипСвойства = "Таблица" Тогда
					
					ЗначениеXDTO = ФабрикаXDTO.Создать(Свойство.Тип);
					
					ТипТаблицы = Свойство.Тип.Свойства[0].Тип;
					
					ИмяСвойстваСтроки = Свойство.Тип.Свойства[0].Имя;
					
					Для Каждого ИсточникСтрока Из ЗначениеСвойства Цикл
						
						ПриемникСтрока = ОбъектXDTOИзДанныхXDTO(КомпонентыОбмена, ИсточникСтрока, ТипТаблицы,,СсылкиИзОбъекта);
						
						ЗначениеXDTO[ИмяСвойстваСтроки].Добавить(ПриемникСтрока);
						
					КонецЦикла;
					
				ИначеЕсли ТипСвойства = "СвойствоСоставногоТипа" Тогда
					
					Для Каждого СвойствоСоставногоТипа Из Свойство.Тип.Свойства Цикл
						
						СоставноеЗначениеXDTO = Неопределено;
						Если ТипЗнч(ЗначениеСвойства) = Тип("Структура")
							И ЗначениеСвойства.ТипСоставногоСвойства = СвойствоСоставногоТипа.Тип Тогда
							
							// Свойство составного типа, содержащие элементы только типа КлючевыеСвойства.
							СоставноеЗначениеXDTO = ОбъектXDTOИзДанныхXDTO(КомпонентыОбмена, ЗначениеСвойства, СвойствоСоставногоТипа.Тип,,СсылкиИзОбъекта);
						// Свойство составного типа простое, и значение простое.
						ИначеЕсли (ТипЗнч(ЗначениеСвойства) = Тип("Строка")
							И СтрНайти(СвойствоСоставногоТипа.Тип.Имя,"string")>0)
							ИЛИ (ТипЗнч(ЗначениеСвойства) = Тип("Число")
							И СтрНайти(СвойствоСоставногоТипа.Тип.Имя,"decimal")>0)
							ИЛИ (ТипЗнч(ЗначениеСвойства) = Тип("Булево")
							И СтрНайти(СвойствоСоставногоТипа.Тип.Имя,"boolean")>0)
							ИЛИ (ТипЗнч(ЗначениеСвойства) = Тип("Дата")
							И СтрНайти(СвойствоСоставногоТипа.Тип.Имя,"date")>0) Тогда
							СоставноеЗначениеXDTO = ЗначениеСвойства;

						ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("Строка")
							И ТипЗнч(СвойствоСоставногоТипа.Тип) = Тип("ТипЗначенияXDTO")
							И СвойствоСоставногоТипа.Тип.Фасеты <> Неопределено Тогда
							Если СвойствоСоставногоТипа.Тип.Фасеты.Количество() = 0 Тогда
								СоставноеЗначениеXDTO = ЗначениеСвойства;
							Иначе
								
								Для Каждого Фасет Из СвойствоСоставногоТипа.Тип.Фасеты Цикл
									Если Фасет.Значение = ЗначениеСвойства Тогда
										СоставноеЗначениеXDTO = ЗначениеСвойства;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								
							КонецЕсли;
						КонецЕсли;
						
						Если СоставноеЗначениеXDTO <> Неопределено Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					// Если передается значение с типом, которое не поддерживается в формате - не передаем.
					Если СоставноеЗначениеXDTO = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ЗначениеXDTO = ФабрикаXDTO.Создать(Свойство.Тип);
					ЗначениеXDTO.Установить(СвойствоСоставногоТипа, СоставноеЗначениеXDTO);
				КонецЕсли;
				
			КонецЕсли;
		Исключение
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка формирования объекта XDTO: Тип свойства <%1>. Имя свойства: <%2>.'"), ТипСвойства, Свойство.Имя)
				+ Символы.ПС + Символы.ПС + ПредставлениеОшибки;
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		
		Приемник[Свойство.Имя] = ЗначениеXDTO;
		ПроведеноЗаполнениеСвойств = Истина;
		
	КонецЦикла;
	
	Возврат Приемник;
КонецФункции

// Выполняет преобразование данных информационной базы в структуру с данными в соответствии с правилами.
//
// Параметры:
//  КомпонентыОбмена    - Структура - содержит все правила и параметры обмена.
//  Источник            - Ссылка на выгружаемый объект информационной базы.
//  ПравилоКонвертации  - Строка таблицы правил конвертации объектов, в соответствии с которой выполняется
//                        преобразование.
//  СтекВыгрузки        - массив, содержит ссылки на выгружаемые объекты с учетом вложенности.
//
Функция ДанныеXDTOИзДанныхИБ(КомпонентыОбмена, Источник, Знач ПравилоКонвертации, СтекВыгрузки = Неопределено) Экспорт
	
	Приемник = Новый Структура;
	
	Если СтекВыгрузки = Неопределено Тогда
		СтекВыгрузки = Новый Массив;
	КонецЕсли;
	
	Если ПравилоКонвертации.ЭтоСсылочныйТип Тогда
		
		ПозицияВСтеке = СтекВыгрузки.Найти(Источник.Ссылка);
		
		// Проверяем, выгружался ли объект по ссылке, чтобы не допустить зацикливания.
		Если ПозицияВСтеке <> Неопределено Тогда
			
			Если ПозицияВСтеке > 0 Тогда
				Возврат Неопределено;
			Иначе
				// Необходимо искать перебором.
				ПерваяИтерация = Истина;
				Для Каждого ЭлементСтека Из СтекВыгрузки Цикл
					Если ПерваяИтерация Тогда
						ПерваяИтерация = Ложь;
						Продолжить;
					КонецЕсли;
					Если ЭлементСтека = Источник.Ссылка Тогда
						Возврат Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		СтекВыгрузки.Добавить(Источник.Ссылка);
	Иначе
		СтекВыгрузки.Добавить(Источник);
	КонецЕсли;
	
	Если ПравилоКонвертации.ЭтоКонстанта Тогда
		
		Если ПравилоКонвертации.ТипXDTO.Свойства.Количество() = 1 Тогда
			
			Приемник.Вставить(ПравилоКонвертации.ТипXDTO.Свойства[0].Имя, Источник.Значение);
			
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка XML-схемы. Для приемника должно быть задано одно свойство.
				|Тип источника: %1
				|Тип приемника: %2'"),
				Строка(ТипЗнч(Источник)),
				ПравилоКонвертации.ТипXDTO);
		КонецЕсли;
		
	Иначе
		
		// Выполнение ПКС, 1-й этап
		Для Каждого ПКС Из ПравилоКонвертации.Свойства Цикл
			
			Если ПравилоКонвертации.ОбъектДанных <> Неопределено
				И ПКС.СвойствоКонфигурации = ""
				И ПКС.ИспользуетсяАлгоритмКонвертации Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтекВыгрузки.Количество() > 1 И Не ПКС.ОбработкаКлючевогоСвойства Тогда
				Продолжить;
			КонецЕсли;
			
			ВыгрузитьСвойство(
				КомпонентыОбмена,
				Источник,
				Приемник,
				ПКС,
				СтекВыгрузки,
				1);
		КонецЦикла;
		
		// {Обработчик: ПриОтправкеДанных} Начало
		Если ПравилоКонвертации.ЕстьОбработчикПриОтправкеДанных Тогда
			
			Если Не Приемник.Свойство("КлючевыеСвойства") Тогда
				Приемник.Вставить("КлючевыеСвойства", Новый Структура);
			КонецЕсли;
			
			ПриОтправкеДанных(Источник, Приемник, ПравилоКонвертации.ПриОтправкеДанных, КомпонентыОбмена, СтекВыгрузки);
			
			Если СтекВыгрузки.Количество() > 1 Тогда
				Для Каждого КлючевоеСвойство Из Приемник.КлючевыеСвойства Цикл
					Приемник.Вставить(КлючевоеСвойство.Ключ, КлючевоеСвойство.Значение);
				КонецЦикла;
				Приемник.Удалить("КлючевыеСвойства");
			КонецЕсли;
			
			// Выполнение ПКС, 2-й этап
			Для Каждого ПКС Из ПравилоКонвертации.Свойства Цикл
				Если ПКС.СвойствоФормата = "" 
					ИЛИ (СтекВыгрузки.Количество() > 1 И Не ПКС.ОбработкаКлючевогоСвойства) Тогда
					Продолжить;
				КонецЕсли;
				
				// Выполняем конвертацию, если в свойство помещена инструкция.
				Если СтекВыгрузки.Количество() = 1 И ПКС.ОбработкаКлючевогоСвойства Тогда
					ЗначениеСвойства = Приемник.КлючевыеСвойства[ПКС.СвойствоФормата];
				Иначе
					ЗначениеСвойства = Приемник[ПКС.СвойствоФормата];
				КонецЕсли;
				
				Если ПКС.ИспользуетсяАлгоритмКонвертации Тогда
					
					Если ТипЗнч(ЗначениеСвойства) = Тип("Структура")
						И ЗначениеСвойства.Свойство("Значение")
						И ЗначениеСвойства.Свойство("ИмяПКО")
						Или ПКС.ПравилоКонвертацииСвойства <> ""
						И ТипЗнч(ЗначениеСвойства) <> Тип("Структура") Тогда
						
						ВыгрузитьСвойство(
							КомпонентыОбмена,
							Источник,
							Приемник,
							ПКС,
							СтекВыгрузки,
							2);
							
					КонецЕсли;
						
				КонецЕсли;
			КонецЦикла;
			
			// Выполнение ПКС для ТЧ
			Если СтекВыгрузки.Количество() = 1 Тогда
				
				Для Каждого ТЧИСвойства Из ПравилоКонвертации.СвойстваТабличныхЧастей Цикл
					
					ПКСДляТЧ = ТЧИСвойства.Значение;
					ИмяТЧПриемника = ТЧИСвойства.Ключ;
					ТЧПриемника = Неопределено;
					Если Не Приемник.Свойство(ИмяТЧПриемника, ТЧПриемника) Тогда
						Продолжить;
					КонецЕсли;
					
					// Убираем лишние колонки, которые могли добавить в приемнике.
					УдаляемыеКолонки = Новый Массив;
					Для Каждого Колонка Из ТЧПриемника.Колонки Цикл
						Если ПКСДляТЧ.Найти(Колонка.Имя, "СвойствоФормата") = Неопределено Тогда
							УдаляемыеКолонки.Добавить(Колонка);
						КонецЕсли;
					КонецЦикла;
					Для Каждого Колонка Из УдаляемыеКолонки Цикл
						ТЧПриемника.Колонки.Удалить(Колонка);
					КонецЦикла;
					
					// Создаем новую ТЗ, в которой нет ограничений типа для колонок и копируем в нее данные.
					НоваяТЧПриемника = Новый ТаблицаЗначений;
					Для Каждого ПКС Из ПКСДляТЧ Цикл
						ИмяКолонки = ПКС.СвойствоФормата;
						НоваяТЧПриемника.Колонки.Добавить(ИмяКолонки);
					КонецЦикла;
					Для Каждого СтрокаТЧПриемника Из ТЧПриемника Цикл
						СтрокаНовойТЧПриемника = НоваяТЧПриемника.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаНовойТЧПриемника, СтрокаТЧПриемника);
					КонецЦикла;
					Приемник[ИмяТЧПриемника] = НоваяТЧПриемника;
					
					Для Каждого Строка Из НоваяТЧПриемника Цикл
						
						Для Каждого ПКС Из ПКСДляТЧ Цикл
							
							ВыгрузитьСвойство(
								КомпонентыОбмена,
								Источник,
								Строка,
								ПКС,
								СтекВыгрузки,
								2);
								
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		// {Обработчик: ПриОтправкеДанных} Окончание
		
		Если СтекВыгрузки.Количество() > 1 Тогда
			Приемник.Вставить("ТипСоставногоСвойства", ПравилоКонвертации.ТипКлючевыхСвойствОбъектаXDTO);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

// Выгружает свойство объекта информационной базы в соответствии с правилами.
//
// Параметры:
//  КомпонентыОбмена   - Структура - содержит все правила и параметры обмена.
//  ДанныеИБ           - Ссылка на выгружаемый объект информационной базы.
//  ПолучательСвойства - Структура, в которой должно храниться значение выгруженного свойства.
//  ПКС                - Строка таблицы правил конвертации свойств, в соответствии с которой выполняется преобразование.
//  СтекВыгрузки       - Массив, содержит ссылки на выгружаемые объекты с учетом вложенности.
//  ЭтапВыгрузки       - Число 
//     1 - выгрузка до выполнения алгоритма ПриОтправкеДанных, 
//     2 - выгрузка после выполнения алгоритма ПриОтправкеДанных.
//
Процедура ВыгрузитьСвойство(КомпонентыОбмена, ДанныеИБ, ПолучательСвойства, ПКС, СтекВыгрузки, ЭтапВыгрузки = 1) Экспорт
	// Свойство формата не указано - данное ПКС используется только при загрузке.
	Если СокрЛП(ПКС.СвойствоФормата) = "" Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСвойства = Неопределено;
	Если ЭтапВыгрузки = 1 Тогда
		Если ЗначениеЗаполнено(ПКС.СвойствоКонфигурации) Тогда
			ЗначениеСвойства = ДанныеИБ[ПКС.СвойствоКонфигурации];
		ИначеЕсли Не ДанныеИБ.Свойство(ПКС.СвойствоФормата, ЗначениеСвойства) Тогда
			// Это ПКС из ПКО с источником-структурой и в источнике не нашлось нужного свойства.
			Возврат;
		КонецЕсли;
	Иначе
		
		Если ТипЗнч(ПолучательСвойства) = Тип("СтрокаТаблицыЗначений") Тогда
			
			Если ПолучательСвойства.Владелец().Колонки.Найти(ПКС.СвойствоФормата) = Неопределено Тогда
				Возврат;
			Иначе
				ЗначениеСвойства = ПолучательСвойства[ПКС.СвойствоФормата];
			КонецЕсли;
		
		ИначеЕсли Не ПолучательСвойства.Свойство(ПКС.СвойствоФормата, ЗначениеСвойства)
			И Не (СтекВыгрузки.Количество() = 1 И ПолучательСвойства.КлючевыеСвойства.Свойство(ПКС.СвойствоФормата, ЗначениеСвойства)) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	ПравилоКонвертацииСвойства = ПКС.ПравилоКонвертацииСвойства;
	
	// Значение может быть в формате инструкции.
	Если ТипЗнч(ЗначениеСвойства) = Тип("Структура") Тогда
		Если ЗначениеСвойства.Свойство("ИмяПКО") Тогда
			ПравилоКонвертацииСвойства = ЗначениеСвойства.ИмяПКО;
		КонецЕсли;
		Если ЗначениеСвойства.Свойство("Значение") Тогда
			ЗначениеСвойства = ЗначениеСвойства.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
	
		Если СокрЛП(ПравилоКонвертацииСвойства) <> "" Тогда
			
			ПКПД = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти(ПравилоКонвертацииСвойства, "ИмяПКПД");
			Если ПКПД <> Неопределено Тогда
				ЗначениеСвойства = ПКПД.КонвертацииЗначенийПриОтправке.Получить(ЗначениеСвойства);
			Иначе
			
				ПравилоКонвертации = ПКОПоИмени(КомпонентыОбмена, ПравилоКонвертацииСвойства);
				
				ОтветвлениеСтекаВыгрузки = Новый Массив;
				Для Каждого Элемент Из СтекВыгрузки Цикл
					ОтветвлениеСтекаВыгрузки.Добавить(Элемент);
				КонецЦикла;
				
				ЗначениеСвойства = ДанныеXDTOИзДанныхИБ(
					КомпонентыОбмена,
					ЗначениеСвойства,
					ПравилоКонвертации,
					ОтветвлениеСтекаВыгрузки);
					
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ЗначениеСвойства = Неопределено;
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() = 1 И ПКС.ОбработкаКлючевогоСвойства Тогда
		Если Не ПолучательСвойства.Свойство("КлючевыеСвойства") Тогда
			ПолучательСвойства.Вставить("КлючевыеСвойства", Новый Структура);
		КонецЕсли;
		ПолучательСвойства.КлючевыеСвойства.Вставить(ПКС.СвойствоФормата, ЗначениеСвойства);
	Иначе
		Если ТипЗнч(ПолучательСвойства) = Тип("СтрокаТаблицыЗначений") Тогда
			ПолучательСвойства[ПКС.СвойствоФормата] = ЗначениеСвойства;
		Иначе
			ПолучательСвойства.Вставить(ПКС.СвойствоФормата, ЗначениеСвойства);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанных

// Возвращает объект информационной базы, соответствующий полученным данным.
// 
// Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//  ДанныеXDTO       - Структура - структура, имитирующая объект XDTO.
//
//  ПравилоКонвертации - СтрокаТаблицыЗначений - параметры текущего правила конвертации.
//
//  Действие - Строка - определяет цель получения объекта ИБ:
//           "ПолучитьСсылку" - идентификация объекта,
//           "КонвертироватьИЗаписать" - полноценная загрузка объекта.
//
// Возвращаемое значение:
//  - Объект - объект ИБ, если передано действие "КонвертироватьИЗаписать",
//             либо если передано действие "ПолучитьСсылку" и в процессе ее получения был создан объект.
//  - Ссылка - ссылка на объект ИБ или пустая ссылка заданного типа, если было передано действие "ПолучитьСсылку"
//             и в процессе ее получения объект не был создан.
//
Функция СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO, ПравилоКонвертации, Действие = "КонвертироватьИЗаписать") Экспорт
	
	ДанныеИБ = Неопределено;
	ПолученныеДанные = ИнициализироватьПолученныеДанные(ПравилоКонвертации);
	ПолученныеДанныеСсылка = ПолученныеДанные.Ссылка;
	СоставСвойств = "Все";
	ДанныеXDTOСодержатСсылку = ДанныеXDTO.Свойство("Ссылка");
	Если ПравилоКонвертации.ЭтоСсылочныйТип Тогда
		ВариантИдентификации = СокрЛП(ПравилоКонвертации.ВариантИдентификации);
		Если ДанныеXDTOСодержатСсылку
			И (ВариантИдентификации = "ПоУникальномуИдентификатору"
				Или ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска") Тогда
			
			ПолученныеДанныеСсылка = СсылкаОбъектаПоУИДОбъектаXDTO(
				ДанныеXDTO.Ссылка.Значение,
				ПравилоКонвертации.ТипДанных,
				КомпонентыОбмена);
				
			ПолученныеДанные.УстановитьСсылкуНового(ПолученныеДанныеСсылка);
			
			Если Действие = "ПолучитьСсылку" Тогда
				
				Если ВариантИдентификации = "ПоУникальномуИдентификатору" Тогда
					// Задача: получение ссылки.
					// Идентификация: по УИД.
					// Объект с полученной ссылкой (или с таким публичным идентификатором) не найден.
					Возврат ПолученныеДанныеСсылка;
				ИначеЕсли ОбщегоНазначения.СсылкаСуществует(ПолученныеДанныеСсылка) Тогда
					// Задача: получение ссылки.
					// Идентификация: по УИД или УИД + поля поиска.
					// Объект с полученной ссылкой (или с таким публичным идентификатором) существует.
					Возврат ПолученныеДанныеСсылка;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ПолученныеДанныеСсылка = ПравилоКонвертации.МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор());
			ПолученныеДанные.УстановитьСсылкуНового(ПолученныеДанныеСсылка);
		КонецЕсли;
		// Определяем, какие свойства нужно конвертировать.
		СоставСвойств = ?(Действие = "ПолучитьСсылку", "СвойстваПоиска", "Все");
	КонецЕсли;
	
	// Конвертация свойств, для которых не нужно выполнение обработчика.
	КонвертацияСвойствСтруктурыОбъектаXDTO(
		КомпонентыОбмена,
		ДанныеXDTO,
		ПолученныеДанные,
		ПравилоКонвертации,
		1,
		СоставСвойств);
		
	Если Действие = "ПолучитьСсылку" Тогда
		ДанныеXDTO = Новый Структура("КлючевыеСвойства", ДанныеXDTO);
	КонецЕсли;
	
	ПриКонвертацииДанныхXDTO(
		ДанныеXDTO,
		ПолученныеДанные,
		КомпонентыОбмена,
		ПравилоКонвертации.ПриКонвертацииДанныхXDTO);
		
	Если Действие = "ПолучитьСсылку" Тогда
		ДанныеXDTO = ДанныеXDTO.КлючевыеСвойства;
	КонецЕсли;
		
	КонвертацияСвойствСтруктурыОбъектаXDTO(
		КомпонентыОбмена,
		ДанныеXDTO,
		ПолученныеДанные,
		ПравилоКонвертации,
		2,
		СоставСвойств);
		
	// В результате конвертации свойств объект мог быть записан в случае наличия циклической ссылки.
	Если ОбщегоНазначения.СсылкаСуществует(ПолученныеДанныеСсылка) Тогда
		ДанныеИБ = ПолученныеДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		Если ПравилоКонвертации.ЭтоРегистр Тогда
			// Идентификация не производится, отбор набора записей выполняется в алгоритмах правил.
			ДанныеИБ = Неопределено;
		ИначеЕсли ВариантИдентификации = "ПоПолямПоиска"
			Или ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска" Тогда
			
			ДанныеИБ = СсылкаОбъектаПоСвойствамОбъектаXDTO(
				ПравилоКонвертации,
				ПолученныеДанные,
				ДанныеXDTOСодержатСсылку,
				КомпонентыОбмена.УзелКорреспондента);
			Если Не ЗначениеЗаполнено(ДанныеИБ) Тогда
				ДанныеИБ = Неопределено;
			КонецЕсли;
			
			Если ДанныеИБ <> Неопределено И ПравилоКонвертации.ЭтоСсылочныйТип Тогда
				Если Действие = "ПолучитьСсылку" Тогда
					
					// Задача: получение ссылки.
					// Идентификация: по УИД + поля поиска.
					// Объект найден по полям поиска.
					Возврат ДанныеИБ;
				Иначе
					ДанныеИБ = ДанныеИБ.ПолучитьОбъект();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписыватьОбъектВИБ = ?(Действие = "КонвертироватьИЗаписать", Истина, Ложь);
	
	Если КомпонентыОбмена.РежимЗагрузкиДанныхВИнформационнуюБазу
		И (ВариантИдентификации = "ПоПолямПоиска"
			Или ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска") Тогда
		// Объекты, при идентификации которых используются поля поиска,
		// должны быть записаны в информационную базу с целью получения одной и той же ссылки на объект при каждом поиске.
		ЗаписыватьОбъектВИБ = Истина;
	КонецЕсли;
	
	Если ЗаписыватьОбъектВИБ Тогда
		
		#Область ЗаписьОбъекта
		
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена
			И ПравилоКонвертации.ЭтоСсылочныйТип
			И ДанныеXDTOСодержатСсылку Тогда
			
			ЗаписатьПриНеобходимостиПубличныйИдентификатор(
				ДанныеИБ,
				ПолученныеДанные.ПолучитьСсылкуНового(),
				ДанныеXDTO.Ссылка.Значение,
				КомпонентыОбмена.УзелКорреспондента,
				ПравилоКонвертации);
				
		КонецЕсли;
		
		Если ПравилоКонвертации.ЕстьОбработчикПередЗаписьюПолученныхДанных Тогда
			
			ПередЗаписьюПолученныхДанных(
				ПолученныеДанные,
				ДанныеИБ,
				КомпонентыОбмена,
				ПравилоКонвертации.ПередЗаписьюПолученныхДанных,
				ПравилоКонвертации.Свойства);
			
		КонецЕсли;
		
		Если ДанныеИБ = Неопределено Тогда
			ДанныеДляЗаписиВИБ = ПолученныеДанные;
		Иначе
			Если ПолученныеДанные <> Неопределено Тогда
				ЗаполнитьДанныеИБПоПолученнымДанным(ДанныеИБ, ПолученныеДанные, ПравилоКонвертации);
			КонецЕсли;
			ДанныеДляЗаписиВИБ = ДанныеИБ;
		КонецЕсли;
		Если ПравилоКонвертации.ЭтоСсылочныйТип Тогда
			ПровестиГенерациюКодаНомераПриНеобходимости(ДанныеДляЗаписиВИБ);
		КонецЕсли;
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена И НЕ ПравилоКонвертации.ЭтоРегистр Тогда
			
			#Область СистемныйОбработчикПриПолученииДанныхОтПодчиненного
				ПолучениеЭлемента = ПолучениеЭлементаДанных.Авто;
				ОтправкаНазад = Ложь;
				СтандартныеПодсистемыСервер.ПриПолученииДанныхОтГлавного(
					ДанныеДляЗаписиВИБ, ПолучениеЭлемента, ОтправкаНазад, КомпонентыОбмена.УзелКорреспондентаОбъект);
				ДанныеДляЗаписиВИБ.ДополнительныеСвойства.Вставить("ПолучениеЭлементаДанных", ПолучениеЭлемента);
				
				Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
					Возврат ДанныеДляЗаписиВИБ;
				КонецЕсли;
				
			#КонецОбласти
			
		КонецЕсли;
		Если ПравилоКонвертации.ЭтоСсылочныйТип И ДанныеДляЗаписиВИБ.ПометкаУдаления Тогда
			ДанныеДляЗаписиВИБ.ПометкаУдаления = Ложь;
		КонецЕсли;
		
		Если ПравилоКонвертации.ЭтоДокумент Тогда
			
			Попытка
			
				Если ДанныеДляЗаписиВИБ.Проведен Тогда
					
					ДанныеДляЗаписиВИБ.Проведен = Ложь;
					Если Не ДанныеДляЗаписиВИБ.ЭтоНовый()
						И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляЗаписиВИБ.Ссылка, "Проведен") Тогда
						// Записываем новую версию документа с отменой проведения.
						Результат = ОтменитьПроведениеОбъектаВИБ(ДанныеДляЗаписиВИБ, КомпонентыОбмена.УзелКорреспондента);
					Иначе
						// Записываем новую версию документа.
						ЗаписатьОбъектВИБ(КомпонентыОбмена, ДанныеДляЗаписиВИБ, ПравилоКонвертации.ТипДанных);
					КонецЕсли;
					
					СтрокаТаблицы = КомпонентыОбмена.ДокументыДляОтложенногоПроведения.Добавить();
					СтрокаТаблицы.ДокументСсылка = ДанныеДляЗаписиВИБ.Ссылка;
					СтрокаТаблицы.ДатаДокумента  = ДанныеДляЗаписиВИБ.Дата;
					
				Иначе
					Если ДанныеДляЗаписиВИБ.ЭтоНовый() Тогда
						ЗаписатьОбъектВИБ(КомпонентыОбмена, ДанныеДляЗаписиВИБ, ПравилоКонвертации.ТипДанных);
					Иначе
						ОтменитьПроведениеОбъектаВИБ(ДанныеДляЗаписиВИБ, КомпонентыОбмена.УзелКорреспондента);
					КонецЕсли;
				КонецЕсли;
				
			Исключение
				ЗаписатьВПротоколВыполнения(КомпонентыОбмена, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		Иначе
			
			ЗаписатьОбъектВИБ(КомпонентыОбмена, ДанныеДляЗаписиВИБ, ПравилоКонвертации.ТипДанных);
			Если ПравилоКонвертации.ЭтоСсылочныйТип Тогда
				КомпонентыОбмена.ОбъектыДляОтложеннойЗаписи.Вставить(
					ДанныеДляЗаписиВИБ.Ссылка, 
					ДанныеДляЗаписиВИБ.ДополнительныеСвойства);
			КонецЕсли;
		КонецЕсли;
		
		ЗапомнитьОбъектДляОтложенногоЗаполнения(ДанныеДляЗаписиВИБ, ПравилоКонвертации, КомпонентыОбмена);
		
		#КонецОбласти
		
	Иначе
		
		ДанныеДляЗаписиВИБ = ПолученныеДанные;
		
	КонецЕсли;
	
	// Объекты, создаваемые по ссылке, запоминаем в таблицу,
	// чтобы после загрузки всех данных удалить объекты, 
	// которые так и не были загружены полностью ("временные объекты").
	// При загрузке объектов "целиком" удаляем объекты из таблицы,
	// переводя их из состояния "временных" в "постоянные".
	ТаблицаОбъектовСозданныхПоСсылкам = КомпонентыОбмена.ТаблицаОбъектовСозданныхПоСсылкам;
		
	Если Действие = "ПолучитьСсылку" И ЗаписыватьОбъектВИБ
		И Не ПравилоКонвертации.РазрешитьСоздаватьОбъектИзСтруктуры Тогда
		
		СтрокаОбъекта = ТаблицаОбъектовСозданныхПоСсылкам.Найти(ДанныеДляЗаписиВИБ.Ссылка, "СсылкаНаОбъект");
		
		Если СтрокаОбъекта = Неопределено Тогда
			НоваяСтрока = ТаблицаОбъектовСозданныхПоСсылкам.Добавить();
			НоваяСтрока.СсылкаНаОбъект = ДанныеДляЗаписиВИБ.Ссылка;
		КонецЕсли;
		
	ИначеЕсли Действие = "КонвертироватьИЗаписать" Тогда
		
		СтрокаОбъекта = ТаблицаОбъектовСозданныхПоСсылкам.Найти(ДанныеДляЗаписиВИБ.Ссылка, "СсылкаНаОбъект");
		
		Если СтрокаОбъекта <> Неопределено Тогда
			ТаблицаОбъектовСозданныхПоСсылкам.Удалить(СтрокаОбъекта);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеДляЗаписиВИБ;
	
КонецФункции

// Выполняет чтение файла данных при загрузке.
//
// Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//
Процедура ПроизвестиЧтениеДанных(КомпонентыОбмена, ТаблицыДляЗагрузки = Неопределено) Экспорт
	
	КомпонентыОбмена.ТаблицаОбъектовСозданныхПоСсылкам.Очистить();
	
	Если ТипЗнч(ТаблицыДляЗагрузки) = Тип("ТаблицаЗначений")
		И ТаблицыДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена
		И КомпонентыОбмена.УзелКорреспондентаОбъект = Неопределено Тогда
		КомпонентыОбмена.УзелКорреспондентаОбъект = КомпонентыОбмена.УзелКорреспондента.ПолучитьОбъект();
	КонецЕсли;
	
	МассивОбъектовКУдалению = Новый Массив;
	МассивЗагруженныхОбъектов = Новый Массив;
	
	Попытка
		КомпонентыОбмена.МенеджерОбмена.ПередКонвертацией(КомпонентыОбмена);
	Исключение
		ТекстОшибки = Символы.ПС + СтрШаблон(НСтр("ru = 'Событие: %1.
				|Обработчик: ПередКонвертацией.
				|
				|Ошибка выполнения обработчика.
				|%2.'"),
			КомпонентыОбмена.НаправлениеОбмена,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КомпонентыОбмена.СтрокаСообщенияОбОшибке = "";
		ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СокрЛП(ТекстОшибки));
	КонецПопытки;
	
	Пока КомпонентыОбмена.ФайлОбмена.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		Попытка
			#Область ЧтениеЭлементаXDTO
			ОтправкаНазад = Ложь;
			ДанныеИБ = Неопределено;
			
			// Получаем из файла ОбъектXDTO.
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(
				КомпонентыОбмена.ФайлОбмена,
				ФабрикаXDTO.Тип(КомпонентыОбмена.ФайлОбмена.URIПространстваИмен, КомпонентыОбмена.ФайлОбмена.ЛокальноеИмя));
			
			// Загрузка признака удаления объекта - специфичная логика.
			Если ОбъектXDTO.Тип().Имя = "УдалениеОбъекта" Тогда
				
				ПрочитатьУдаление(КомпонентыОбмена, ОбъектXDTO, МассивОбъектовКУдалению, ТаблицыДляЗагрузки);
				
			Иначе
				
				// Отработка ПОД
				// Ищем правило обработки данных.
				ПравилоОбработки = ПОДПоТипуОбъектаXDTO(КомпонентыОбмена, ОбъектXDTO.Тип().Имя, Истина);
				
				Если Не ЗначениеЗаполнено(ПравилоОбработки) Тогда
					Продолжить;
				КонецЕсли;

				// Конвертируем ОбъектXDTO в Структуру.
				ДанныеXDTO = ОбъектXDTOВСтруктуру(ОбъектXDTO);
				
				ИспользованиеПКО = Новый Структура;
				Для Каждого ИмяПКО Из ПравилоОбработки.ИспользуемыеПКО Цикл
					ИспользованиеПКО.Вставить(ИмяПКО, Истина);
				КонецЦикла;
			#КонецОбласти
				
				#Область ПриОбработке
				Если ЗначениеЗаполнено(ПравилоОбработки.ПриОбработке) Тогда
					ПриОбработкеПОД(
						КомпонентыОбмена,
						ПравилоОбработки,
						ДанныеXDTO,
						ИспользованиеПКО);
				КонецЕсли;
				#КонецОбласти
				
				// Массив нужен для "свертки" ПКО по видам объектов метаданных.
				ОбработанныеТипыОбъектовМетаданных = Новый Массив;
				
				// 1. Поиск правила конвертации.
				Для Каждого ТекущееПКО Из ИспользованиеПКО Цикл
					
					ПравилоКонвертации = ПКОПоИмени(КомпонентыОбмена, ТекущееПКО.Ключ);
					
					#Область ПроверкаСоответствияТаблицеДляЗагрузки
					Если ТаблицыДляЗагрузки <> Неопределено Тогда
						ТипОбъектаСтрокой = ПравилоКонвертации.ТипПолученныхДанныхСтрокой;
						
						ТипИсточникаСтрокой = ОбъектXDTO.Тип().Имя;
						ТипПриемникаСтрокой = ПравилоКонвертации.ТипПолученныхДанныхСтрокой;
						
						КлючТаблицыДанных = ОбменДаннымиСервер.КлючТаблицыДанных(ТипИсточникаСтрокой, ТипПриемникаСтрокой, Ложь);
						
						Если ТаблицыДляЗагрузки.Найти(КлючТаблицыДанных) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					#КонецОбласти
					
					ВариантИдентификации = СокрЛП(ПравилоКонвертации.ВариантИдентификации);
					СинхронизироватьПоИдентификатору = (ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска"
						Или ВариантИдентификации = "ПоУникальномуИдентификатору") И ДанныеXDTO.Свойство("Ссылка");
					
					Если ТекущееПКО.Значение Тогда
						
						ПолученныеДанныеСсылка = Неопределено;
						Если СинхронизироватьПоИдентификатору Тогда
							ПолученныеДанныеСсылка = СсылкаОбъектаПоУИДОбъектаXDTO(ДанныеXDTO.Ссылка.Значение,
								ПравилоКонвертации.ТипДанных, КомпонентыОбмена);
						КонецЕсли;
						
						Если КомпонентыОбмена.РежимЗагрузкиДанныхВИнформационнуюБазу Тогда
							
							ДанныеДляЗаписиВИБ = СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO, ПравилоКонвертации, "КонвертироватьИЗаписать");
							
							Если ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска"
								Или ВариантИдентификации = "ПоУникальномуИдентификатору" Тогда
								
								МассивЗагруженныхОбъектов.Добавить(ДанныеДляЗаписиВИБ.Ссылка);
								
							КонецЕсли;
							
							// Пропускаем объект, если он не может быть загружен, например, из-за даты запрета загрузки.
							ПолучениеЭлемента = ПолучениеЭлементаДанных.Авто;
							ДанныеДляЗаписиВИБ.ДополнительныеСвойства.Свойство("ПолучениеЭлементаДанных", ПолучениеЭлемента);
							Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
								КомпонентыОбмена.СчетчикЗагруженныхОбъектов = КомпонентыОбмена.СчетчикЗагруженныхОбъектов + 1;
								ОбменДаннымиСервер.РассчитатьПроцентЗагрузки(КомпонентыОбмена.СчетчикЗагруженныхОбъектов,
									КомпонентыОбмена.КоличествоОбъектовКЗагрузке, КомпонентыОбмена.РазмерФайлаСообщенияОбмена);
								Продолжить;
							КонецЕсли;
							
						ИначеЕсли ТаблицыДляЗагрузки <> Неопределено Тогда
							
							ДанныеДляЗаписиВИБ = СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO, ПравилоКонвертации, "Конвертировать");
							
							ПровестиГенерациюКодаНомераПриНеобходимости(ДанныеДляЗаписиВИБ);
							
							ТаблицаДанныхСообщенияОбмена = КомпонентыОбмена.ТаблицыДанныхСообщенияОбмена.Получить(КлючТаблицыДанных);
							
							УникальныйИдентификаторСтрокой = "";
							СтрокаТаблицы = Неопределено;
							Если ДанныеXDTO.Свойство("Ссылка") Тогда
								УникальныйИдентификаторСтрокой = ДанныеXDTO.Ссылка.Значение;
								СтрокаТаблицы = ТаблицаДанныхСообщенияОбмена.Найти(УникальныйИдентификаторСтрокой, "УникальныйИдентификатор");
							КонецЕсли;
							
							Если СтрокаТаблицы = Неопределено Тогда
								
								СтрокаТаблицы = ТаблицаДанныхСообщенияОбмена.Добавить();
								
								СтрокаТаблицы.ТипСтрокой              = ТипПриемникаСтрокой;
								СтрокаТаблицы.УникальныйИдентификатор = УникальныйИдентификаторСтрокой;
								
							КонецЕсли;
							
							// Заполняем значения свойств объекта.
							ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеДляЗаписиВИБ);
							СтрокаТаблицы.Ссылка = ПолученныеДанныеСсылка;
							
						КонецЕсли;
						
						КомпонентыОбмена.СчетчикЗагруженныхОбъектов = КомпонентыОбмена.СчетчикЗагруженныхОбъектов + 1;
						ОбменДаннымиСервер.РассчитатьПроцентЗагрузки(КомпонентыОбмена.СчетчикЗагруженныхОбъектов, КомпонентыОбмена.КоличествоОбъектовКЗагрузке, КомпонентыОбмена.РазмерФайлаСообщенияОбмена);
						
					ИначеЕсли СинхронизироватьПоИдентификатору Тогда
						
						СсылкаКУдалению = СсылкаОбъектаПоУИДОбъектаXDTO(ДанныеXDTO.Ссылка.Значение,
							ПравилоКонвертации.ТипДанных, КомпонентыОбмена);
						Если МассивОбъектовКУдалению.Найти(СсылкаКУдалению) = Неопределено Тогда
							МассивОбъектовКУдалению.Добавить(СсылкаКУдалению);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		Исключение
			ТекстОшибки = Символы.ПС + СтрШаблон(НСтр("ru = 'Событие: %1.
					|Объект XDTO: %2.
					|
					|%3'"),
				КомпонентыОбмена.НаправлениеОбмена,
				ПредставлениеОбъектаДляПротокола(ОбъектXDTO),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КомпонентыОбмена.СтрокаСообщенияОбОшибке = "";
			ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СокрЛП(ТекстОшибки),,,,, Истина);
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Если НЕ КомпонентыОбмена.ФлагОшибки И КомпонентыОбмена.РежимЗагрузкиДанныхВИнформационнуюБазу Тогда
		ПрименитьУдалениеОбъектов(КомпонентыОбмена, МассивОбъектовКУдалению, МассивЗагруженныхОбъектов);
		УдалитьВременныеОбъектыСозданныеПоСсылкам(КомпонентыОбмена);
		ОтложенноеЗаполнениеОбъектов(КомпонентыОбмена);
		Если НЕ КомпонентыОбмена.ФлагОшибки Тогда
			Попытка
				КомпонентыОбмена.МенеджерОбмена.ПослеКонвертации(КомпонентыОбмена);
			Исключение
				ТекстОшибки = Символы.ПС + СтрШаблон(НСтр("ru = 'Событие: %1.
						|Обработчик: ПослеКонвертации.
						|
						|Ошибка выполнения обработчика.
						|%2.'"),
					КомпонентыОбмена.НаправлениеОбмена,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КомпонентыОбмена.СтрокаСообщенияОбОшибке = "";
				ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СокрЛП(ТекстОшибки),,,,, Истина);
			КонецПопытки;
		КонецЕсли;
		Если НЕ КомпонентыОбмена.ФлагОшибки Тогда
			ВыполнитьОтложенноеПроведениеДокументов(КомпонентыОбмена);
			ВыполнитьОтложеннуюЗаписьОбъектов(КомпонентыОбмена);
		КонецЕсли;
	КонецЕсли;
	
	// Фиксация успешного завершения обмена.
	Если КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Неопределено Тогда
		КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет чтение файла данных при загрузке в режиме анализа (при интерактивной синхронизации данных).
//
// Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//
Процедура ПроизвестиЧтениеДанныхВРежимеАнализа(КомпонентыОбмена, ПараметрыАнализа = Неопределено) Экспорт
	
	// Параметры по умолчанию
	ПараметрыСбораСтатистики = Новый Структура("СобиратьСтатистикуКлассификаторов", Ложь);
	Если ПараметрыАнализа <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыСбораСтатистики, ПараметрыАнализа);
	КонецЕсли;
	
	Попытка
		КомпонентыОбмена.МенеджерОбмена.ПередКонвертацией(КомпонентыОбмена);
	Исключение
		ТекстОшибки = Символы.ПС + СтрШаблон(НСтр("ru = 'Событие: %1.
				|Обработчик: ПередКонвертацией.
				|
				|Ошибка выполнения обработчика.
				|%2.'"),
			КомпонентыОбмена.НаправлениеОбмена,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КомпонентыОбмена.СтрокаСообщенияОбОшибке = "";
		ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СокрЛП(ТекстОшибки));
	КонецПопытки;
	
	// Параметры по умолчанию
	ПараметрыСбораСтатистики = Новый Структура("СобиратьСтатистикуКлассификаторов", Ложь);
	Если ПараметрыАнализа <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыСбораСтатистики, ПараметрыАнализа);
	КонецЕсли;
	
	МассивОбъектовКУдалению = Новый Массив;
	МассивЗагруженныхОбъектов = Новый Массив;
	Пока КомпонентыОбмена.ФайлОбмена.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		Попытка
			// Получаем из файла ОбъектXDTO.
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(
				КомпонентыОбмена.ФайлОбмена,
				ФабрикаXDTO.Тип(КомпонентыОбмена.ФайлОбмена.URIПространстваИмен, КомпонентыОбмена.ФайлОбмена.ЛокальноеИмя));
			
			Если ОбъектXDTO.Тип().Имя = "УдалениеОбъекта" Тогда
				
				ПрочитатьУдаление(КомпонентыОбмена, ОбъектXDTO, МассивОбъектовКУдалению);
				
			Иначе
			
				ПравилоОбработки = ПОДПоТипуОбъектаXDTO(КомпонентыОбмена, ОбъектXDTO.Тип().Имя, Истина);
				
				Если Не ЗначениеЗаполнено(ПравилоОбработки) Тогда
					Возврат;
				КонецЕсли;
				
				// Конвертируем ОбъектXDTO в Структуру.
				ДанныеXDTO = ОбъектXDTOВСтруктуру(ОбъектXDTO);
				
				ИспользованиеПКО = Новый Структура;
				Для Каждого ИмяПКО Из ПравилоОбработки.ИспользуемыеПКО Цикл
					ИспользованиеПКО.Вставить(ИмяПКО, Истина);
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ПравилоОбработки.ПриОбработке) Тогда
					ПриОбработкеПОД(
						КомпонентыОбмена,
						ПравилоОбработки,
						ДанныеXDTO,
						ИспользованиеПКО);
				КонецЕсли;
				
				// 1. Поиск правила конвертации.
				Для Каждого ТекущееПКО Из ИспользованиеПКО Цикл
					
					ПравилоКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти(ТекущееПКО.Ключ, "ИмяПКО");
					
					ВариантИдентификации = СокрЛП(ПравилоКонвертации.ВариантИдентификации);
					СинхронизироватьПоИдентификатору = (ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска"
						Или ВариантИдентификации = "ПоУникальномуИдентификатору") И ДанныеXDTO.Свойство("Ссылка");
					
					Если ТекущееПКО.Значение Тогда
						
						СтрокаТаблицы = КомпонентыОбмена.ТаблицаДанныхЗаголовкаПакета.Добавить();
						
						СтрокаТаблицы.ТипОбъектаСтрокой = ПравилоКонвертации.ТипПолученныхДанныхСтрокой;
						СтрокаТаблицы.КоличествоОбъектовВИсточнике = 1;
						
						СтрокаТаблицы.ТипПриемникаСтрокой = ПравилоКонвертации.ТипПолученныхДанныхСтрокой;
						СтрокаТаблицы.ТипИсточникаСтрокой = ОбъектXDTO.Тип().Имя;
						
						СтрокаТаблицы.ПоляПоиска  = ПравилоКонвертации.ПоляПредставленияОбъекта;
						СтрокаТаблицы.ПоляТаблицы = СтрСоединить(ПравилоКонвертации.РеквизитыШапкиПолученныхДанных, ",");
						
						СтрокаТаблицы.СинхронизироватьПоИдентификатору = СинхронизироватьПоИдентификатору;
						
						СтрокаТаблицы.ИспользоватьПредварительныйПросмотр = СтрокаТаблицы.СинхронизироватьПоИдентификатору;
						СтрокаТаблицы.ЭтоКлассификатор                    = ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
						СтрокаТаблицы.ЭтоУдалениеОбъекта = Ложь;
						
						Если СтрокаТаблицы.СинхронизироватьПоИдентификатору Тогда
							МассивЗагруженныхОбъектов.Добавить(СсылкаОбъектаПоУИДОбъектаXDTO(ДанныеXDTO.Ссылка.Значение, ПравилоКонвертации.ТипДанных, КомпонентыОбмена));
						КонецЕсли;
						
					ИначеЕсли СинхронизироватьПоИдентификатору Тогда
						
						СсылкаКУдалению = СсылкаОбъектаПоУИДОбъектаXDTO(ДанныеXDTO.Ссылка.Значение,
							ПравилоКонвертации.ТипДанных, КомпонентыОбмена);
						Если МассивОбъектовКУдалению.Найти(СсылкаКУдалению) = Неопределено Тогда
							МассивОбъектовКУдалению.Добавить(СсылкаКУдалению);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		Исключение
			ТекстОшибки = Символы.ПС + СтрШаблон(НСтр("ru = 'Событие: %1.
					|Объект XDTO: %2.
					|
					|%3'"),
				КомпонентыОбмена.НаправлениеОбмена,
				ПредставлениеОбъектаДляПротокола(ОбъектXDTO),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КомпонентыОбмена.СтрокаСообщенияОбОшибке = "";
			ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СокрЛП(ТекстОшибки),,,,, Истина);
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	ПрименитьУдалениеОбъектов(КомпонентыОбмена, МассивОбъектовКУдалению, МассивЗагруженныхОбъектов);
	
КонецПроцедуры

// Открывает файл выгрузки данных, записывает заголовок файла в соответствие с форматом обмена.
//
// Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//  ИмяФайлаОбмена - строка.
//
Процедура ОткрытьФайлВыгрузки(КомпонентыОбмена, ИмяФайлаОбмена = "") Экспорт

	ФайлОбмена = Новый ЗаписьXML;
	Если ИмяФайлаОбмена <> "" Тогда
		ФайлОбмена.ОткрытьФайл(ИмяФайлаОбмена);
	Иначе
		ФайлОбмена.УстановитьСтроку();
	КонецЕсли;
	ФайлОбмена.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = Неопределено;
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда

		ЗаписьСообщения = Новый Структура("НомерПринятого, НомерСообщения, Получатель");
		ЗаписьСообщения.Получатель = КомпонентыОбмена.УзелКорреспондента;
		
		Если ТранзакцияАктивна() Тогда
			ВызватьИсключение НСтр("ru = 'Блокировка на обмен данными не может быть установлена в активной транзакции.'");
		КонецЕсли;
		
		// Устанавливаем блокировку на узел получателя.
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ЗаписьСообщения.Получатель);
		Исключение
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка установки блокировки на обмен данными.
				|Возможно, обмен данными выполняется другим сеансом.
				|
				|Подробности:
				|%1'"),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		ДанныеПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаписьСообщения.Получатель, "НомерОтправленного, НомерПринятого, Код");
		
		ЗаписьСообщения.НомерСообщения = ДанныеПолучателя.НомерОтправленного + 1;
		ЗаписьСообщения.НомерПринятого = ДанныеПолучателя.НомерПринятого;
		
	КонецЕсли;
	
	// Записываем элемент <Message>
	ФайлОбмена.ЗаписатьНачалоЭлемента("Message");
	ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("msg", "http://www.1c.ru/SSL/Exchange/Message");
	ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	
	// Записываем элемент <Header>
	Header = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLБазоваяСхема(), "Header"));
	Header.Format = КомпонентыОбмена.XMLСхема;
	Header.CreationDate = ТекущаяУниверсальнаяДата();
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		
		Confirmation = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLБазоваяСхема(), "Confirmation"));
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
			Confirmation.ExchangePlan = ЗаписьСообщения.Получатель.Метаданные().Имя;
			Confirmation.To = СокрЛП(ДанныеПолучателя.Код);
			Confirmation.From = СокрЛП(ОбменДаннымиПовтИсп.ПолучитьКодЭтогоУзлаДляПланаОбмена(Confirmation.ExchangePlan));
			Confirmation.MessageNo = ЗаписьСообщения.НомерСообщения;
			Confirmation.ReceivedNo = ЗаписьСообщения.НомерПринятого;
		КонецЕсли;
		Header.Confirmation = Confirmation;
		
	КонецЕсли;
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		Для Каждого ВерсияФормата Из ВерсииФорматаОбменаМассив(КомпонентыОбмена.УзелКорреспондента) Цикл
			Header.AvailableVersion.Добавить(ВерсияФормата);
		КонецЦикла;
	Иначе
		Header.AvailableVersion.Добавить(КомпонентыОбмена.ВерсияФорматаОбмена);
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, Header);
	
	// Записываем элемент <Body>
	ФайлОбмена.ЗаписатьНачалоЭлемента("Body");
	ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("", КомпонентыОбмена.XMLСхема);
	
	КомпонентыОбмена.Вставить("ФайлОбмена", ФайлОбмена);
	
КонецПроцедуры

// Открывает файл загрузки данных, записывает заголовок файла в соответствие с форматом обмена.
//
// Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//  ИмяФайлаОбмена - строка.
//
Процедура ОткрытьФайлЗагрузки(КомпонентыОбмена, ИмяФайлаОбмена) Экспорт
	
	ЭтоОбменЧерезПланОбмена = КомпонентыОбмена.ЭтоОбменЧерезПланОбмена;
	
	ЧтениеXML = Новый ЧтениеXML;
	
	НомерИтерации = 0;
	КомпонентыОбмена.ФлагОшибки = Истина;
	Пока НомерИтерации = 0 Цикл
		
		НомерИтерации = 1;
		
		Попытка
			ЧтениеXML.ОткрытьФайл(ИмяФайлаОбмена);
			ЧтениеXML.Прочитать(); // Message
			КомпонентыОбмена.Вставить("ФайлОбмена", ЧтениеXML);
		Исключение
			
			СтрокаСообщенияОбОшибке = НСтр("ru = 'Ошибка при загрузке данных: %1'");
			СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ОписаниеОшибки());
			ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СтрокаСообщенияОбОшибке);
			Прервать;
			
		КонецПопытки;
		
		Если (ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			Или ЧтениеXML.ЛокальноеИмя <> "Message") Тогда
			Если СообщениеОтНеобновленнойНастройки(ЧтениеXML) Тогда
				СтрокаСообщенияОбОшибке = НСтр("ru = 'Получение данных от источника, в котором не выполнено
					|обновление настройки синхронизации данных. Необходимо:'")
					+ Символы.ПС + НСтр("ru = '1) Выполнить повторную синхронизацию данных через некоторое время.'")
					+ Символы.ПС + НСтр("ru = '2) Выполнить синхронизацию данных на стороне источника, после этого 
					|повторно выполнить синхронизацию данных в этой информационной базе.'")
					+ Символы.ПС + НСтр("ru = '(1 - для вида транспорта Через интернет, 2 - для вида транспорта Другое)'");
				ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СтрокаСообщенияОбОшибке);
			Иначе
				ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 9);
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
		ЧтениеXML.Прочитать(); // Header
		Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			Или ЧтениеXML.ЛокальноеИмя <> "Header" Тогда
			ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 9);
			Прервать;
		КонецЕсли;
		
		Header = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип(XMLБазоваяСхема(), "Header"));
		Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			Или ЧтениеXML.ЛокальноеИмя <> "Body" Тогда
			ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 9);
			Прервать;
		КонецЕсли;
		
		КомпонентыОбмена.XMLСхема = Header.Format;
		
		ФорматОбмена = РазложитьФорматОбмена(Header.Format);
		КомпонентыОбмена.ВерсияФорматаОбмена = ФорматОбмена.Версия;
		КомпонентыОбмена.МенеджерОбмена      = МенеджерОбменаВерсииФормата(КомпонентыОбмена.УзелКорреспондента,
		                                                                   КомпонентыОбмена.ВерсияФорматаОбмена);
		
		Если ЭтоОбменЧерезПланОбмена Тогда
			
			Если Не Header.Установлено("Confirmation") Тогда
				ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 9);
				Прервать;
			КонецЕсли;
			
			Confirmation = Header.Confirmation;
			
			КодОтКого = Confirmation.From;
			КодКому = Confirmation.To;
			ИмяПланаОбмена = Confirmation.ExchangePlan;
			КомпонентыОбмена.НомерВходящегоСообщения = Confirmation.MessageNo;
			КомпонентыОбмена.НомерСообщенияПолученногоКорреспондентом = Confirmation.ReceivedNo;
			
			Если КомпонентыОбмена.НомерВходящегоСообщения <= 0 Тогда
				КомпонентыОбмена.ИспользоватьКвитирование = Ложь;
			КонецЕсли;
			
			Если Метаданные.ПланыОбмена.Найти(ИмяПланаОбмена) = Неопределено Тогда
				ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 177);
				Прервать;
			КонецЕсли;
			
			ПолучательИзСообщения = ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(КодКому);
			Если ПолучательИзСообщения <> ПланыОбмена[ИмяПланаОбмена].ЭтотУзел() Тогда
				ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 178);
				Прервать;
			КонецЕсли;
			
			ОтправительИзСообщения = ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(КодОтКого);
			Если ОтправительИзСообщения.Пустая()
				Или ОтправительИзСообщения <> КомпонентыОбмена.УзелКорреспондента Тогда
				
				СтрокаСообщения = НСтр("ru = 'Не найден узел обмена для загрузки данных. План обмена: %1, Код: %2'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ИмяПланаОбмена, КодОтКого);
				ВызватьИсключение СтрокаСообщения;
				
			КонецЕсли;
			
			// Проверяем базовый формат
			МенеджерПланаОбмена = МенеджерПланаОбмена(КомпонентыОбмена.УзелКорреспондента);
			Если МенеджерПланаОбмена.ФорматОбмена() <> ФорматОбмена.БазовыйФормат Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Формат сообщения обмена <%1> не соответствует формату плана обмена <%2>.'"),
					ФорматОбмена.БазовыйФормат,
					МенеджерПланаОбмена.ФорматОбмена());
			КонецЕсли;
			
			// Проверяем версию формата сообщения обмена.
			Если ВерсииФорматаОбменаМассив(КомпонентыОбмена.УзелКорреспондента).Найти(ФорматОбмена.Версия) = Неопределено Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Версия формата сообщения обмена <%1> не поддерживается.'"),
					ФорматОбмена.Версия);
			КонецЕсли;
			
			Если КомпонентыОбмена.ИспользоватьКвитирование Тогда
				
				Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КомпонентыОбмена.УзелКорреспондента, "НомерПринятого") >= КомпонентыОбмена.НомерВходящегоСообщения Тогда
				
					// Номер сообщения меньше либо равен ранее принятому.
					КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена =
						Перечисления.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято;
						
					ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 174,,,,, Истина);
					Прервать;
				КонецЕсли;
				
				// Добавляем публичные идентификаторы для ссылочных объектов, о получении которых отчитался узел-корреспондент.
				ДобавитьВыгруженныеОбъектыВРегистрПубличныеИдентификаторы(КомпонентыОбмена);
				
				// Удаляем регистрацию изменений, о получении которых отчитался узел-корреспондент.
				ПланыОбмена.УдалитьРегистрациюИзменений(КомпонентыОбмена.УзелКорреспондента, КомпонентыОбмена.НомерСообщенияПолученногоКорреспондентом);
				
				// Снимаем признак начальной выгрузки данных.
				РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.СнятьПризнакНачальнойВыгрузкиДанных(
					КомпонентыОбмена.УзелКорреспондента, КомпонентыОбмена.НомерСообщенияПолученногоКорреспондентом);
				
			КонецЕсли;
			
			// Проверяем возможность увеличения версии.
			ДоступныеВерсииОтправителя = Header.AvailableVersion;
			ДоступныеВерсииПолучателя  = ВерсииФорматаОбменаМассив(КомпонентыОбмена.УзелКорреспондента);
			НомерВерсииКорреспондента  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КомпонентыОбмена.УзелКорреспондента, "ВерсияФорматаОбмена");
			МаксимальнаяОбщаяВерсия    = НомерВерсииКорреспондента;
			
			Для Каждого ДоступнаяВерсияОтправителя Из ДоступныеВерсииОтправителя Цикл
				Если ДоступныеВерсииПолучателя.Найти(ДоступнаяВерсияОтправителя) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				РезультатСравненияВерсий = СравнитьВерсии(СокрЛП(ДоступнаяВерсияОтправителя), СокрЛП(МаксимальнаяОбщаяВерсия));
				Если РезультатСравненияВерсий > 0 Тогда
					МаксимальнаяОбщаяВерсия = ДоступнаяВерсияОтправителя;
				КонецЕсли;
			КонецЦикла;
			
			Если МаксимальнаяОбщаяВерсия <> НомерВерсииКорреспондента Тогда
				// Обнаружена более свежая общая версия.
				УзелКорреспондентаОбъект = КомпонентыОбмена.УзелКорреспондента.ПолучитьОбъект();
				УзелКорреспондентаОбъект.ВерсияФорматаОбмена = МаксимальнаяОбщаяВерсия;
				УзелКорреспондентаОбъект.Записать();
				ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 
				                            НСтр("ru = 'Изменен номер версии формата обмена.'"),,Ложь,,, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		ЧтениеXML.Прочитать(); // Body
		
		КомпонентыОбмена.ФлагОшибки = Ложь;
		
	КонецЦикла;
	
	Если КомпонентыОбмена.ФлагОшибки Тогда
		ЧтениеXML.Закрыть();
	Иначе
		КомпонентыОбмена.Вставить("ФайлОбмена", ЧтениеXML);
	КонецЕсли;
	
КонецПроцедуры

Функция СообщениеОтНеобновленнойНастройки(ЧтениеXML)
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		И ЧтениеXML.ЛокальноеИмя = "ФайлОбмена" Тогда
		Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
			Если ЧтениеXML.ЛокальноеИмя = "ВерсияФормата" 
				ИЛИ ЧтениеXML.ЛокальноеИмя = "ВерсияКонфигурацииИсточника" Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

// Выполняет преобразование объекта XDTO в структуру с данными.
//
// Параметры:
//  ОбъектXDTO - Значение типа ОбъектXDTO, которое необходимо преобразовать.
//
// Возвращаемое значение:
//  Структура - Структура, имитирующая объект XDTO.
//    Ключи структуры соответствуют свойствам объекта XDTO.
//    Значения соответствуют значениям свойств объекта XDTO.
//
Функция ОбъектXDTOВСтруктуру(ОбъектXDTO) Экспорт
	
	Приемник = Новый Структура;
	
	Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
		
		КонвертацияСвойстваXDTOВЭлементСтруктуры(ОбъектXDTO, Свойство, Приемник);
		
	КонецЦикла;
	
	Если Приемник.Свойство("КлючевыеСвойства")
		И Приемник.КлючевыеСвойства.Свойство("Ссылка") Тогда
		Приемник.Вставить("Ссылка", Приемник.КлючевыеСвойства.Ссылка);
	КонецЕсли;
	
	Возврат Приемник;
КонецФункции

// Преобразует строковое представление УИД в ссылку на объект текущей информационной базы.
// Если объект с такой ссылкой существует, она возвращается в качестве результата.
// Если объекта с такой ссылкой нет, выполняется поиск УИД в регистре
// ПубличныеИдентификаторыСинхронизируемыхОбъектов.
// При удачном поиске возвращается ссылка из регистра, при неудачном возвращается изначальная ссылка.
// 
// Параметры:
//  УИДОбъектаXDTO       - Строка - Уникальный идентификатор объекта XDTO, для которого необходимо 
//                                  получить ссылку соответствующего объекта информационной базы.
//
//  ТипЗначенияОбъектаИБ - Тип - Тип объекта информационной базы, которому должна соответствовать
//                               получаемая ссылка.
//
//  КомпонентыОбмена     - Структура - Содержит все необходимые данные, инициализированные при начале
//                                     выполнения обмена (ПКО, ПКПД, ПОД и т.д.).
//
// Возвращаемое значение:
//  Ссылка на объект информационной базы.
// 
Функция СсылкаОбъектаПоУИДОбъектаXDTO(УИДОбъектаXDTO, ТипЗначенияОбъектаИБ, КомпонентыОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Определение ссылки на объект через публичную ссылку.
	ПубличнаяСсылка = НайтиСсылкуПоПубличномуИдентификатору(УИДОбъектаXDTO, КомпонентыОбмена, ТипЗначенияОбъектаИБ);
	Если ПубличнаяСсылка <> Неопределено Тогда
		// Найден публичный идентификатор.
		Возврат ПубличнаяСсылка;
	КонецЕсли;
	
	// Поиск ссылки по исходному УИД.
	СсылкаПоУИД = СсылкаПоУИД(ТипЗначенияОбъектаИБ, УИДОбъектаXDTO, КомпонентыОбмена.УзелКорреспондента);
	
	// Найдена ссылка по УИД или создана новая ссылка.
	Возврат СсылкаПоУИД;
	
КонецФункции

// Записывает объект в информационную базу.
//
// Параметры:
//  Объект - Записываемый объект.
//  Тип - Строка - Тип объекта строкой.
// 
Процедура ЗаписатьОбъектВИБ(КомпонентыОбмена, Объект, Тип, ЗаписатьОбъект = Ложь, Знач ОтправкаНазад = Ложь, УникальныйИдентификаторСтрокой = "") Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных()
		И Не ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных(Объект.Метаданные().ПолноеИмя(), ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных())
		И Не ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных(Объект.Метаданные().ПолноеИмя(), ОбщегоНазначенияПовтИсп.РазделительВспомогательныхДанных()) Тогда
		
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Попытка изменение неразделенных данных (%1) в разделенном режиме.'");
		СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, Объект.Метаданные().ПолноеИмя());
		
		КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями;
		ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СтрокаСообщенияОбОшибке,, Ложь);
		
		Возврат;
		
	КонецЕсли;
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		// Устанавливаем режим загрузки данных для объекта.
		ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(Объект,, ОтправкаНазад, КомпонентыОбмена.УзелКорреспондента);
	Иначе
		ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(Объект,, ОтправкаНазад);
	КонецЕсли;
	
	// Выполняем проверку на пометку удаления предопределенного элемента.
	СнятьПометкуУдаленияСПредопределенногоЭлемента(Объект, Тип, КомпонентыОбмена);
	
	НачатьТранзакцию();
	Попытка
		
		// Записываем объект в транзакцию.
		Объект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписатьОбъект = Ложь;
		
		ЗП         = ПолучитьСтруктуруЗаписиПротокола(26, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗП.Объект  = Объект;
		
		Если Тип <> Неопределено Тогда
			ЗП.ТипОбъекта = Тип;
		КонецЕсли;
		
		ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 26, ЗП);
		
		ВызватьИсключение КомпонентыОбмена.СтрокаСообщенияОбОшибке;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет отложенное проведение загруженных документов после загрузки всех данных.
//
// Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//
Процедура ВыполнитьОтложенноеПроведениеДокументов(КомпонентыОбмена) Экспорт
	
	ДокументыДляОтложенногоПроведения = КомпонентыОбмена.ДокументыДляОтложенногоПроведения;
	Если ДокументыДляОтложенногоПроведения.Количество() = 0 Тогда
		Возврат // нет документов в очереди
	КонецЕсли;
	
	// Сворачиваем таблицу по уникальным полям.
	ДокументыДляОтложенногоПроведения.Свернуть("ДокументСсылка, ДатаДокумента, ДокументПроведенУспешно", "ЭтоКоллизия");
	
	// Сортируем документы по возрастанию даты документов.
	ДокументыДляОтложенногоПроведения.Сортировать("ДатаДокумента");
	
	ОбменДаннымиСервер.ПропуститьПроверкуЗапретаИзменения();
	
	Для Каждого СтрокаТаблицы Из ДокументыДляОтложенногоПроведения Цикл
		
		Если СтрокаТаблицы.ДокументСсылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = СтрокаТаблицы.ДокументСсылка.ПолучитьОбъект();
		
		Если Объект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВыполнитьПроведениеДокументаПриЗагрузке(КомпонентыОбмена, Объект, Истина);
		
		СтрокаТаблицы.ДокументПроведенУспешно = Не Объект.Проведен;
		
	КонецЦикла;
	
	ОбменДаннымиСервер.ПропуститьПроверкуЗапретаИзменения(Ложь);
	
КонецПроцедуры

// Выполняет проведение документа при его загрузке в информационную базу.
//
// Параметры:
//  КомпонентыОбмена                         - Структура - содержит все правила и параметры обмена.
//  Объект                                   - ДокументОбъект (загруженный документ).
//  РегистрироватьПроблемыВРезультатахОбмена - Булево.
//
Процедура ВыполнитьПроведениеДокументаПриЗагрузке(
		КомпонентыОбмена,
		Объект,
		РегистрироватьПроблемыВРезультатахОбмена = Ложь) Экспорт
	
	ОписаниеОшибки = "";
	ДокументПроведенУспешно = Ложь;
	
	КлючСообщенияЖурналаРегистрации = КомпонентыОбмена.КлючСообщенияЖурналаРегистрации;
	УзелКорреспондента = КомпонентыОбмена.УзелКорреспондента;
	
	// Устанавливаем узел-отправитель для предотвращения регистрации объекта на узле, для которого производим загрузку
	// проведение выполняем не в режиме загрузки.
	ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(Объект, Ложь, Ложь, УзелКорреспондента);
	
	Попытка
		
		Объект.ДополнительныеСвойства.Вставить("ОтложенноеПроведение");
		
		Если Объект.ПроверитьЗаполнение() Тогда
			
			// При проведении документа снимаем запрет на выполнение ПРО,
			// т.к. ПРО были проигнорированы при обычной записи документа с целью оптимизации скорости загрузки данных.
			Если Объект.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
				Объект.ДополнительныеСвойства.Удалить("ОтключитьМеханизмРегистрацииОбъектов");
			КонецЕсли;
			
			Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
			
			СведенияОВерсииОбъекта = Новый Структура;
			СведенияОВерсииОбъекта.Вставить("ОтложеннаяОбработка", Истина);
			СведенияОВерсииОбъекта.Вставить("ТипВерсииОбъекта", "ИзмененоПользователем");
			СведенияОВерсииОбъекта.Вставить("АвторВерсии", УзелКорреспондента);
			Объект.ДополнительныеСвойства.Вставить("СведенияОВерсииОбъекта", СведенияОВерсииОбъекта);
			
			// Выполняем попытку проведения документа.
			Объект.Записать(РежимЗаписиДокумента.Проведение);
			
			ДокументПроведенУспешно = Объект.Проведен;
			
		КонецЕсли;
		
	Исключение
		
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Если Не ДокументПроведенУспешно Тогда
		
		ОбменДаннымиСервер.ЗарегистрироватьОшибкуПроведенияДокумента(Объект, УзелКорреспондента, ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

// Отменяет проведение объекта в информационной базе.
//
// Параметры:
//  Объект      - ДокументОбъект (документ для отмены проведения).
//  Отправитель - Ссылка на узел плана обмена, который является отправителем данных.
//
Функция ОтменитьПроведениеОбъектаВИБ(Объект, Отправитель) Экспорт
	
	РегистрыСведений.РезультатыОбменаДанными.ЗарегистрироватьУстранениеПроблемы(Объект,
		Перечисления.ТипыПроблемОбменаДанными.НепроведенныйДокумент);
	
	// Устанавливаем режим загрузки данных для объекта.
	ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(Объект, Истина, Ложь, Отправитель);
	
	// Проверка на коллизии дат запрета загрузки.
	Отказ = Ложь;
	
	Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
	
	ПроведениеДокументаОтменено = Ложь;
	
	НачатьТранзакцию();
	Попытка
		
		// Отменяем проведение документа.
		Объект.Проведен = Ложь;
		Объект.Записать();
		
		ОбменДаннымиСервер.УдалитьДвиженияУДокумента(Объект);
		ПроведениеДокументаОтменено = Истина;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат ПроведениеДокументаОтменено;
	
КонецФункции

// Процедура заполняет табличную часть объекта с учетом предыдущей версии табличной части (до загрузки данных).
//
// Параметры:
//  ТабличнаяЧастьОбъектаПослеОбработки - Табличная часть, которая содержит измененные данные.
//  ТабличнаяЧастьОбъектаДоОбработки    - Таблица значений, содержимое табличной части объекта до загрузки данных.
//  КлючевыеПоля                        - Колонки, по которым происходит поиск строк в табличной части (строка через
//                                        запятую).
//  КолонкиДляВключения                 - Другие колонки (кроме ключевых), значения которых должны измениться (строка
//                                        через запятую).
//  КолонкиДляИсключения                - Колонки, значения которых не должны измениться (строка через запятую).
//
Процедура ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
	ТабличнаяЧастьОбъектаПослеОбработки, 
	ТабличнаяЧастьОбъектаДоОбработки,
	Знач КлючевыеПоля = "",
	КолонкиДляВключения = "", 
	КолонкиДляИсключения = "") Экспорт
	
	Если ТипЗнч(КлючевыеПоля) = Тип("Строка") Тогда
		Если КлючевыеПоля = "" Тогда
			Возврат; // Без ключевых полей нельзя получить соответствие новых и старых данных.
		Иначе
			КлючевыеПоля = СтрРазделить(КлючевыеПоля, ",");
		КонецЕсли;
	КонецЕсли;
	
	СоответствиеСтарыхИНовыхДанныхТЧ = СоответствиеСтарыхИНовыхДанныхТЧ(
		ТабличнаяЧастьОбъектаПослеОбработки, 
		ТабличнаяЧастьОбъектаДоОбработки,
		КлючевыеПоля);
	
	Для Каждого СтрокаНовойТЧ Из ТабличнаяЧастьОбъектаПослеОбработки Цикл
		СтрокаСтаройТЧ = СоответствиеСтарыхИНовыхДанныхТЧ.Получить(СтрокаНовойТЧ);
		Если СтрокаСтаройТЧ <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаНовойТЧ, СтрокаСтаройТЧ, КолонкиДляВключения, КолонкиДляИсключения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнициализацияОбмена
// Создает таблицу значений для хранения заголовка пакета с данными.
//
// Возвращаемое значение:
//  Таблица значений
//
Функция НоваяТаблицаДанныхЗаголовкаПакета() Экспорт
	
	ТаблицаДанныхЗаголовкаПакета = Новый ТаблицаЗначений;
	Колонки = ТаблицаДанныхЗаголовкаПакета.Колонки;
	
	Колонки.Добавить("ТипОбъектаСтрокой",            Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("КоличествоОбъектовВИсточнике", Новый ОписаниеТипов("Число"));
	Колонки.Добавить("ПоляПоиска",                   Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ПоляТаблицы",                  Новый ОписаниеТипов("Строка"));
	
	Колонки.Добавить("ТипИсточникаСтрокой", Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ТипПриемникаСтрокой", Новый ОписаниеТипов("Строка"));
	
	Колонки.Добавить("СинхронизироватьПоИдентификатору", Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("ЭтоУдалениеОбъекта", Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("ЭтоКлассификатор", Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("ИспользоватьПредварительныйПросмотр", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаДанныхЗаголовкаПакета;
	
КонецФункции

// Получает правила регистрации объектов для плана обмена.
//
// Возвращаемое значение:
//  Таблица значений
//
Функция ПравилаРегистрацииОбъектов(УзелПланаОбмена) Экспорт
	ПравилаРегистрацииОбъектов = ОбменДаннымиВызовСервера.ПараметрыСеансаПравилаРегистрацииОбъектов().Получить();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяПланаОбмена", ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелПланаОбмена));
	
	ТаблицаПравилаРегистрацииОбъектов = ПравилаРегистрацииОбъектов.Скопировать(Отбор, "ОбъектМетаданныхИмя, ИмяРеквизитаФлага");
	ТаблицаПравилаРегистрацииОбъектов.Индексы.Добавить("ОбъектМетаданныхИмя");
	
	Возврат ТаблицаПравилаРегистрацииОбъектов;
	
КонецФункции

// Получает свойства узла плана обмена.
//
// Возвращаемое значение:
//  Структура (ключ соответствует имени свойства, а значение - значению свойства).
Функция СвойстваУзлаПланаОбмена(Узел) Экспорт
	
	СвойстваУзлаПланаОбмена = Новый Структура;
	
	// получаем имена реквизитов
	ИменаРеквизитов = ОбщегоНазначения.ИменаРеквизитовПоТипу(Узел, Тип("ПеречислениеСсылка.РежимыВыгрузкиОбъектовОбмена"));
	
	// Получаем значения реквизитов.
	Если Не ПустаяСтрока(ИменаРеквизитов) Тогда
		
		СвойстваУзлаПланаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Узел, ИменаРеквизитов);
		
	КонецЕсли;
	
	Возврат СвойстваУзлаПланаОбмена;
КонецФункции

#КонецОбласти

#Область ПолучениеДанные

// Функция проверяет формат сообщения обмена: соответствует ли он формату обмена через EnterpriseData.
//
// Параметры:
//  ЧтениеXML - ЧтениеXML - сообщение обмена.
//
// Возвращаемое значение
//  Истина - формат соответствует, ложь - не соответствует.
Функция ПроверитьФорматСообщенияОбмена(ЧтениеXML) Экспорт
	Если (ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "Message") Тогда
		Возврат Ложь;
	КонецЕсли;
		
	ЧтениеXML.Прочитать(); // Header
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "Header" Тогда
		Возврат Ложь;
	КонецЕсли;
	Попытка
		Header = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип("http://www.1c.ru/SSL/Exchange/Message", "Header"));
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "Body" Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Не Header.Установлено("Confirmation") Тогда
		Возврат Ложь;
	КонецЕсли;
	Confirmation = Header.Confirmation;
	
	ИмяПланаОбмена = Confirmation.ExchangePlan;
	
	Если Метаданные.ПланыОбмена.Найти(ИмяПланаОбмена) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииВерсионированияФорматаОбмена
// Возвращает менеджер обмена данными, соответствующий указанной версии формата обмена.
//
// Параметры:
//  УзелИнформационнойБазы - ссылка на узел - корреспондент.
//  ВерсияФормата - Строка.
//
Функция МенеджерОбменаВерсииФормата(Знач УзелИнформационнойБазы, Знач ВерсияФормата) Экспорт
	
	Результат = ВерсииФорматаОбмена(УзелИнформационнойБазы).Получить(ВерсияФормата);
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не определен Менеджер конвертации для версии формата обмена <%1>.'"),
			ВерсияФормата);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку с форматом обмена.
// Формат обмена включает: 
//  Базовый формат, предусмотренный для плана обмена.
//  Версию базового формата.
//
// Параметры:
//  УзелИнформационнойБазы - ссылка на узел - корреспондент.
//  ВерсияФормата - Строка.
//
Функция ФорматОбмена(Знач УзелИнформационнойБазы, Знач ВерсияФормата) Экспорт
	
	ФорматОбмена = МенеджерПланаОбмена(УзелИнформационнойБазы).ФорматОбмена();
	ЭлементыФормата = СтрРазделить(ФорматОбмена, "/");
	ЭлементыФормата.Добавить(ВерсияФормата);
	
	Возврат СтрСоединить(ЭлементыФормата, "/");
КонецФункции

// Возвращает строку с номером версии формата обмена, поддерживаемой получателем данных.
//
// Параметры:
//  Получатель - ссылка на узел плана обмена, в который производится выгрузка данных.
//
Функция ВерсияФорматаОбменаПриВыгрузке(Знач Получатель) Экспорт
	
	Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Получатель, "ВерсияФорматаОбмена");
	Если Не ЗначениеЗаполнено(Результат) Тогда
		
		// Если версия формата обмена не задана, то используем минимальную версию.
		Результат = МинимальнаяВерсияФорматаОбмена(Получатель);
		
	КонецЕсли;
	
	Возврат СокрЛП(Результат);
КонецФункции

// Сравнить две строки версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате 0.0.0 либо 0.0.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//             Меньше 0 если СтрокаВерсии1 < СтрокаВерсии2.
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2)
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0", СтрокаВерсии2);
	Версия1 = СтрРазделить(Строка1, ".");
	Если Версия1.Количество() < 2 ИЛИ Версия1.Количество() > 3 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии1);
	КонецЕсли;
	Версия2 = СтрРазделить(Строка2, ".");
	Если Версия2.Количество() < 2 ИЛИ Версия2.Количество() > 3 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии2: %1'"), СтрокаВерсии2);
	КонецЕсли;
	
	Результат = 0;
	Если СокрЛП(СтрокаВерсии1) = СокрЛП(СтрокаВерсии2) Тогда
		Возврат 0;
	КонецЕсли;
	
	// В последнем разряде может быть beta - это минимальная версия, не совместимая ни с какой другой.
	Если Версия1.Количество() = 3 И СокрЛП(Версия1[2]) = "beta" Тогда
		Возврат -1;
	ИначеЕсли Версия2.Количество() = 3 И СокрЛП(Версия2[2]) = "beta" Тогда
		Возврат 1;
	КонецЕсли;
	// Значимыми при сравнении являются первые 2 разряда (всегда число).
	Для Разряд = 0 По 1 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Процедура добавляет объект информационной базы в фильтр разрешенных объектов.
// Параметры:
//  Данные     - ссылка на объект ИБ, который необходимо добавить в фильтр разрешенных объектов.
//  Получатель - ПланОбменаСсылка - ссылка на план обмена, для которого выполняется проверка объекта.
//
Процедура ДобавитьОбъектВФильтрРазрешенныхОбъектов(Данные, Получатель) Экспорт
	
	РегистрыСведений.ДанныеОбъектовДляРегистрацииВОбменах.ДобавитьОбъектВФильтрРазрешенныхОбъектов(Данные, Получатель);
	
КонецПроцедуры

// Функция возвращает массив узлов, в которые объект ранее выгружался.
//
// Параметры:
//  Ссылка            - Ссылка на объект ИБ, для которого необходимо получить массив узлов.
//  ИмяПланаОбмена    - Строка - имя плана обмена, как объекта метаданных, по которому определяются узлы.
//  ИмяРеквизитаФлага - Строка - имя реквизита плана обмена, по которому устанавливается фильтр на выборку узлов.
// Возвращаемое значение:
//  МассивУзлов - Массив узлов плана обмена, для которых установлен признак «Выгружать при необходимости», изначально
//                пуст.
//
Функция МассивУзловДляРегистрацииВыгружатьПриНеобходимости(Ссылка, ИмяПланаОбмена, ИмяРеквизитаФлага) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШапкаПланаОбмена.Ссылка КАК Узел
	|ИЗ
	|	ПланОбмена.[ИмяПланаОбмена] КАК ШапкаПланаОбмена
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ДанныеОбъектовДляРегистрацииВОбменах КАК ДанныеОбъектовДляРегистрацииВОбменах
	|ПО
	|	ШапкаПланаОбмена.Ссылка = ДанныеОбъектовДляРегистрацииВОбменах.УзелИнформационнойБазы
	|	И ДанныеОбъектовДляРегистрацииВОбменах.Ссылка = &Объект
	|ГДЕ
	|	     НЕ ШапкаПланаОбмена.ЭтотУзел
	|	И    ШапкаПланаОбмена.[ИмяРеквизитаФлага] = ЗНАЧЕНИЕ(Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости)
	|	И НЕ ШапкаПланаОбмена.ПометкаУдаления
	|	И    ДанныеОбъектовДляРегистрацииВОбменах.Ссылка = &Объект
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяПланаОбмена]",    ИмяПланаОбмена);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяРеквизитаФлага]", ИмяРеквизитаФлага);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Объект",   Ссылка);
	
	МассивУзлов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Узел");
	
	Возврат МассивУзлов;
	
КонецФункции

// Выполняет запись сообщения в журнал регистрации.
//
// Параметры:
//  Комментарий      - Строка, комментарий для записи в журнал регистрации.
//  Уровень          - Уровень сообщения журнала регистрации (по умолчанию Ошибка).
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//
Процедура ЗаписьЖурналаРегистрацииОбменДанными(Комментарий, КомпонентыОбмена, Уровень = Неопределено, СсылкаНаОбъект = Неопределено) Экспорт
	
	УзелКорреспондента = КомпонентыОбмена.УзелКорреспондента;
	КлючСообщенияЖурналаРегистрации = КомпонентыОбмена.КлючСообщенияЖурналаРегистрации;
	
	Если Уровень = Неопределено Тогда
		Уровень = УровеньЖурналаРегистрации.Ошибка;
	КонецЕсли;
	
	ОбъектМетаданных = Неопределено;
	
	Если     УзелКорреспондента <> Неопределено
		И Не УзелКорреспондента.Пустая() Тогда
		
		ОбъектМетаданных = УзелКорреспондента.Метаданные();
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, Уровень, ОбъектМетаданных, СсылкаНаОбъект, Комментарий);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияОбмена
Функция ТаблицаПравилОбработкиДанных(XMLСхема, МенеджерОбмена , НаправлениеОбмена)
	
	// Инициализация таблицы правил обработки данных.
	ПравилаОбработкиДанных = Новый ТаблицаЗначений;
	ПравилаОбработкиДанных.Колонки.Добавить("Имя");
	ПравилаОбработкиДанных.Колонки.Добавить("ОбъектВыборкиФормат");
	ПравилаОбработкиДанных.Колонки.Добавить("ТипСсылкиXDTO");
	ПравилаОбработкиДанных.Колонки.Добавить("ОбъектВыборкиМетаданные");
	ПравилаОбработкиДанных.Колонки.Добавить("ВыборкаДанных");
	ПравилаОбработкиДанных.Колонки.Добавить("ИмяТаблицыДляВыборки");
	ПравилаОбработкиДанных.Колонки.Добавить("ПриОбработке",    Новый ОписаниеТипов("Строка"));
	
	// ИспользуемыеПКО - массив, содержащий в себе имена ПКО, в которые может быть направлен объект из данного ПОД.
	ПравилаОбработкиДанных.Колонки.Добавить("ИспользуемыеПКО",    Новый ОписаниеТипов("Массив"));
	
	МенеджерОбмена.ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных);
	
	КоличествоСтрок = ПравилаОбработкиДанных.Количество();
	Для НомерИтерации = 1 По КоличествоСтрок Цикл
		
		ИндексСтроки = КоличествоСтрок - НомерИтерации;
		ПОД = ПравилаОбработкиДанных.Получить(ИндексСтроки);
		
		Если НаправлениеОбмена = "Получение" Тогда
			
			ТипXDTO = ФабрикаXDTO.Тип(XMLСхема, ПОД.ОбъектВыборкиФормат);
			
			Если ТипXDTO = Неопределено Тогда
				ПравилаОбработкиДанных.Удалить(ПОД);
				Продолжить;
			КонецЕсли;
			
			КлючевыеСвойства = ТипXDTO.Свойства.Получить("КлючевыеСвойства");
			Если КлючевыеСвойства <> Неопределено Тогда
				
				ТипКлючевыхСвойствОбъектаXDTO = КлючевыеСвойства.Тип;
				СвойствоСсылкаXDTO = ТипКлючевыхСвойствОбъектаXDTO.Свойства.Получить("Ссылка");
				Если СвойствоСсылкаXDTO <> Неопределено Тогда
					ПОД.ТипСсылкиXDTO = СвойствоСсылкаXDTO.Тип;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ПОД.ОбъектВыборкиМетаданные <> Неопределено Тогда
			ПОД.ИмяТаблицыДляВыборки = ПОД.ОбъектВыборкиМетаданные.ПолноеИмя();
		КонецЕсли;
		
		
	КонецЦикла;
	
	Возврат ПравилаОбработкиДанных;
КонецФункции

Функция ТаблицаПравилКонвертации(XMLСхема, МенеджерОбмена , НаправлениеОбмена, ПравилаОбработкиДанных)
	
	// Инициализация таблицы правил конвертации.
	ПравилаКонвертации = Новый ТаблицаЗначений;
	ПравилаКонвертации.Колонки.Добавить("ИмяПКО", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	ПравилаКонвертации.Колонки.Добавить("ОбъектДанных");
	ПравилаКонвертации.Колонки.Добавить("ОбъектФормата",                         Новый ОписаниеТипов("Строка"));
	ПравилаКонвертации.Колонки.Добавить("ТипПолученныхДанныхСтрокой",            Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(300)));
	ПравилаКонвертации.Колонки.Добавить("ИмяТаблицыПолученныхДанных",            Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(300)));
	ПравилаКонвертации.Колонки.Добавить("ПредставлениеТипаПолученныхДанных",     Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(300)));
	ПравилаКонвертации.Колонки.Добавить("Свойства",                              Новый ОписаниеТипов("ТаблицаЗначений"));
	ПравилаКонвертации.Колонки.Добавить("ПоляПоиска",                            Новый ОписаниеТипов("Массив"));
	ПравилаКонвертации.Колонки.Добавить("СвойстваТабличныхЧастей",               Новый ОписаниеТипов("Структура"));
	ПравилаКонвертации.Колонки.Добавить("ПоляПредставленияОбъекта",              Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(300)));
	ПравилаКонвертации.Колонки.Добавить("РеквизитыШапкиПолученныхДанных",        Новый ОписаниеТипов("Массив"));
	ПравилаКонвертации.Колонки.Добавить("ПриОтправкеДанных",                     Новый ОписаниеТипов("Строка"));
	ПравилаКонвертации.Колонки.Добавить("ПриКонвертацииДанныхXDTO",              Новый ОписаниеТипов("Строка"));
	ПравилаКонвертации.Колонки.Добавить("ПередЗаписьюПолученныхДанных",          Новый ОписаниеТипов("Строка"));
	ПравилаКонвертации.Колонки.Добавить("ПослеЗагрузкиВсехДанных",               Новый ОписаниеТипов("Строка"));
	ПравилаКонвертации.Колонки.Добавить("РасширеннаяСсылка",                     Новый ОписаниеТипов("Булево"));
	ПравилаКонвертации.Колонки.Добавить("ПравилоДляГруппыСправочника",           Новый ОписаниеТипов("Булево"));
	ПравилаКонвертации.Колонки.Добавить("ВариантИдентификации",                  Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(60)));
	ПравилаКонвертации.Колонки.Добавить("РазрешитьСоздаватьОбъектИзСтруктуры",   Неопределено);
	
	МенеджерОбмена.ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации);
	
	Если НаправлениеОбмена = "Получение" Тогда
		
		// Отберем строки правил конвертации, у которых не заполнен реквизит "РазрешитьСоздаватьОбъектИзСтруктуры".
		ПараметрыОтбора = Новый Структура("РазрешитьСоздаватьОбъектИзСтруктуры", Неопределено);
		СтрокиДляОбработки = ПравилаКонвертации.НайтиСтроки(ПараметрыОтбора);
		
		// Для найденных строк необходимо заполнить реквизит "РазрешитьСоздаватьОбъектИзСтруктуры".
		// Реквизит заполняется по следующему алгоритму:
		// если правило конвертации объекта формата не указано
		// в правилах обработки данных для данного объекта формата, 
		// тогда реквизит заполняется значением "Истина", 
		// т.к. полученные по этому ПКО данные не смогут быть загружены самостоятельно,
		// иначе заполняем значением "Ложь".
		Для Каждого СтрокаОбработки Из СтрокиДляОбработки Цикл
			СтрокаОбработки.РазрешитьСоздаватьОбъектИзСтруктуры = Истина;
			СтрокаПравилОбработкиДанных = ПравилаОбработкиДанных.Найти(СтрокаОбработки.ОбъектФормата, "ОбъектВыборкиФормат");
			Если СтрокаПравилОбработкиДанных <> Неопределено Тогда
				МассивИспользуемыхПКО = СтрокаПравилОбработкиДанных.ИспользуемыеПКО;
				СтрокаОбработки.РазрешитьСоздаватьОбъектИзСтруктуры = МассивИспользуемыхПКО.Найти(СтрокаОбработки.ИмяПКО) = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Добавляем служебные поля таблицы правил конвертации.
	ПравилаКонвертации.Колонки.Добавить("ТипXDTO");
	ПравилаКонвертации.Колонки.Добавить("ТипСсылкиXDTO");
	ПравилаКонвертации.Колонки.Добавить("ТипКлючевыхСвойствОбъектаXDTO");
	ПравилаКонвертации.Колонки.Добавить("ТипДанных");
	
	ПравилаКонвертации.Колонки.Добавить("МенеджерОбъекта");
	ПравилаКонвертации.Колонки.Добавить("ПолноеИмя");
	
	ПравилаКонвертации.Колонки.Добавить("ЭтоДокумент");
	ПравилаКонвертации.Колонки.Добавить("ЭтоРегистр");
	ПравилаКонвертации.Колонки.Добавить("ЭтоСправочник");
	ПравилаКонвертации.Колонки.Добавить("ЭтоПеречисление");
	ПравилаКонвертации.Колонки.Добавить("ЭтоПланВидовХарактеристик");
	ПравилаКонвертации.Колонки.Добавить("ЭтоБизнесПроцесс");
	ПравилаКонвертации.Колонки.Добавить("ЭтоЗадача");
	ПравилаКонвертации.Колонки.Добавить("ЭтоПланСчетов");
	ПравилаКонвертации.Колонки.Добавить("ЭтоПланВидовРасчета");
	ПравилаКонвертации.Колонки.Добавить("ЭтоКонстанта");
	
	ПравилаКонвертации.Колонки.Добавить("ЭтоСсылочныйТип");
	
	ПравилаКонвертации.Колонки.Добавить("ЕстьОбработчикПриОтправкеДанных", Новый ОписаниеТипов("Булево"));
	ПравилаКонвертации.Колонки.Добавить("ЕстьОбработчикПриКонвертацииДанныхXDTO", Новый ОписаниеТипов("Булево"));
	ПравилаКонвертации.Колонки.Добавить("ЕстьОбработчикПередЗаписьюПолученныхДанных", Новый ОписаниеТипов("Булево"));
	ПравилаКонвертации.Колонки.Добавить("ЕстьОбработчикПослеЗагрузкиВсехДанных", Новый ОписаниеТипов("Булево"));
	
	КоличествоСтрок = ПравилаКонвертации.Количество();
	Для НомерИтерации = 1 По КоличествоСтрок Цикл
		
		ИндексСтроки = КоличествоСтрок - НомерИтерации;
		ПравилоКонвертации = ПравилаКонвертации.Получить(ИндексСтроки);
		
		Если ЗначениеЗаполнено(ПравилоКонвертации.ОбъектФормата) Тогда
			ПравилоКонвертации.ТипXDTO = ФабрикаXDTO.Тип(XMLСхема, ПравилоКонвертации.ОбъектФормата);
			Если ПравилоКонвертации.ТипXDTO = Неопределено Тогда
				ПравилаКонвертации.Удалить(ПравилоКонвертации);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если НаправлениеОбмена = "Получение" Тогда
			
			МетаданныеОбъекта = ПравилоКонвертации.ОбъектДанных;
		
			ПравилоКонвертации.ИмяТаблицыПолученныхДанных = МетаданныеОбъекта.ПолноеИмя();
			ПравилоКонвертации.ПредставлениеТипаПолученныхДанных = МетаданныеОбъекта.Представление();
			ПравилоКонвертации.ТипПолученныхДанныхСтрокой = ИмяТипаДанныхПоОбъектуМетаданных(ПравилоКонвертации.ОбъектДанных);
		
			ПравилоКонвертации.ПоляПредставленияОбъекта = ?(ПравилоКонвертации.ПоляПоиска.Количество() = 0, "", ПравилоКонвертации.ПоляПоиска[0]);
			
			// Реквизиты объекта получаемых данных.
			РеквизитыМассив = Новый Массив;
			Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
				Если Реквизит.Имя = "Наименование"
					ИЛИ Реквизит.Имя = "Код"
					ИЛИ Реквизит.Имя = "ЭтоГруппа"
					ИЛИ Реквизит.Имя = "Родитель"
					ИЛИ Реквизит.Имя = "Владелец"
					ИЛИ Реквизит.Имя = "Дата"
					ИЛИ Реквизит.Имя = "Номер" Тогда
					РеквизитыМассив.Добавить(Реквизит.Имя);
				КонецЕсли;
			КонецЦикла;
			Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
				РеквизитыМассив.Добавить(Реквизит.Имя);
			КонецЦикла;

			ПравилоКонвертации.РеквизитыШапкиПолученныхДанных = РеквизитыМассив;
			
			ПравилоКонвертации.ЕстьОбработчикПриКонвертацииДанныхXDTO     = Не ПустаяСтрока(ПравилоКонвертации.ПриКонвертацииДанныхXDTO);
			ПравилоКонвертации.ЕстьОбработчикПередЗаписьюПолученныхДанных = Не ПустаяСтрока(ПравилоКонвертации.ПередЗаписьюПолученныхДанных);
			ПравилоКонвертации.ЕстьОбработчикПослеЗагрузкиВсехДанных      = Не ПустаяСтрока(ПравилоКонвертации.ПослеЗагрузкиВсехДанных);
			
		Иначе
			ПравилоКонвертации.ЕстьОбработчикПриОтправкеДанных            = Не ПустаяСтрока(ПравилоКонвертации.ПриОтправкеДанных);
		КонецЕсли;
		
		Если ПравилоКонвертации.ОбъектДанных <> Неопределено Тогда
			
			ПравилоКонвертации.ПолноеИмя                  = ПравилоКонвертации.ОбъектДанных.ПолноеИмя();
			ПравилоКонвертации.МенеджерОбъекта            = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПравилоКонвертации.ПолноеИмя);
			
			ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ПравилоКонвертации.ОбъектДанных);
			
			ПравилоКонвертации.ТипДанных = Тип(ИмяТипаДанныхПоОбъектуМетаданных(ПравилоКонвертации.ОбъектДанных));
			
		Иначе
			ИмяБазовогоТипа = "";
		КонецЕсли;
		
		Если ПравилоКонвертации.ОбъектДанных <> Неопределено Тогда
			ПравилоКонвертации.ЭтоРегистр = ОбщегоНазначения.ЭтоРегистр(ПравилоКонвертации.ОбъектДанных);
		Иначе
			ПравилоКонвертации.ЭтоРегистр = Ложь;
		КонецЕсли;
		
		ПравилоКонвертации.ЭтоДокумент               = (ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаДокументы());
		ПравилоКонвертации.ЭтоСправочник             = (ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаСправочники());
		ПравилоКонвертации.ЭтоПеречисление           = (ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПеречисления());
		ПравилоКонвертации.ЭтоПланВидовХарактеристик = (ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыВидовХарактеристик());
		ПравилоКонвертации.ЭтоБизнесПроцесс          = (ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаБизнесПроцессы());
		ПравилоКонвертации.ЭтоЗадача                 = (ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаЗадачи());
		ПравилоКонвертации.ЭтоПланСчетов             = (ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыСчетов());
		ПравилоКонвертации.ЭтоПланВидовРасчета       = (ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыВидовРасчета());
		ПравилоКонвертации.ЭтоКонстанта              = (ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаКонстанты());
		
		ПравилоКонвертации.ЭтоСсылочныйТип = ПравилоКонвертации.ЭтоДокумент
			Или ПравилоКонвертации.ЭтоСправочник
			Или ПравилоКонвертации.ЭтоПланВидовХарактеристик
			Или ПравилоКонвертации.ЭтоБизнесПроцесс
			Или ПравилоКонвертации.ЭтоЗадача
			Или ПравилоКонвертации.ЭтоПланСчетов
			Или ПравилоКонвертации.ЭтоПланВидовРасчета;
		
		Если ЗначениеЗаполнено(ПравилоКонвертации.ОбъектФормата) Тогда
			КлючевыеСвойства = ПравилоКонвертации.ТипXDTO.Свойства.Получить("КлючевыеСвойства");
			Если КлючевыеСвойства <> Неопределено Тогда
				
				ТипКлючевыхСвойствОбъектаXDTO = КлючевыеСвойства.Тип;
				ПравилоКонвертации.ТипКлючевыхСвойствОбъектаXDTO = ТипКлючевыхСвойствОбъектаXDTO;
				
				ТаблицаПКС = ПравилоКонвертации.Свойства;
				Для Каждого ПКС Из ТаблицаПКС Цикл
					
					Если ТипКлючевыхСвойствОбъектаXDTO.Свойства.Получить(ПКС.СвойствоФормата) <> Неопределено Тогда
						ПКС.ОбработкаКлючевогоСвойства = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
				СвойствоСсылкаXDTO = ТипКлючевыхСвойствОбъектаXDTO.Свойства.Получить("Ссылка");
				Если СвойствоСсылкаXDTO <> Неопределено Тогда
					
					ПравилоКонвертации.ТипСсылкиXDTO = СвойствоСсылкаXDTO.Тип;
					
					Если ПравилоКонвертации.ЭтоСсылочныйТип
						И НаправлениеОбмена = "Отправка" Тогда
						ПКСДляСсылки = ТаблицаПКС.Добавить();
						ПКСДляСсылки.СвойствоКонфигурации = "Ссылка";
						ПКСДляСсылки.СвойствоФормата = "Ссылка";
						ПКСДляСсылки.ОбработкаКлючевогоСвойства = "Истина";
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска"
			Или ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска" Тогда
			
			ТаблицаПКС = ПравилоКонвертации.Свойства;
			Для Каждого ПКС Из ТаблицаПКС Цикл
				
				Если ЗначениеЗаполнено(ПравилоКонвертации.ПоляПоиска) Тогда
					Для Каждого ЭлементПолейПоиска Из ПравилоКонвертации.ПоляПоиска Цикл
						ПоляПоискаМассивом = СтрРазделить(ЭлементПолейПоиска, ",");
						Для Каждого ПолеПоиска Из ПоляПоискаМассивом Цикл
							ПолеПоиска = СокрЛП(ПолеПоиска);
							Если ПолеПоиска = ПКС.СвойствоКонфигурации Тогда
								ПКС.ОбработкаПоисковогоСвойства = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого ТЧ Из ПравилоКонвертации.СвойстваТабличныхЧастей Цикл
			Для Каждого ПКС Из ТЧ.Значение Цикл
				
				ПКС.ИмяТЧ = ТЧ.Ключ;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	// Добавляем индексы таблицы правил конвертации.
	Если НаправлениеОбмена = "Отправка" Тогда
		
		ПравилаКонвертации.Индексы.Добавить("ТипДанных");
		ПравилаКонвертации.Индексы.Добавить("ТипXDTO");
		ПравилаКонвертации.Индексы.Добавить("РасширеннаяСсылка");
		
	Иначе
		
		ПравилаКонвертации.Индексы.Добавить("ТипXDTO");
		ПравилаКонвертации.Индексы.Добавить("ТипСсылкиXDTO");
		ПравилаКонвертации.Индексы.Добавить("ТипДанных");
		
	КонецЕсли;
	
	Возврат ПравилаКонвертации;
КонецФункции

Функция ТаблицаПравилКонвертацииПредопределенныхДанных(XMLСхема, МенеджерОбмена , НаправлениеОбмена)
	
	// Инициализация таблицы правил конвертации.
	ПравилаКонвертации = Новый ТаблицаЗначений;
	ПравилаКонвертации.Колонки.Добавить("ТипДанных");
	ПравилаКонвертации.Колонки.Добавить("ТипXDTO");
	ПравилаКонвертации.Колонки.Добавить("КонвертацииЗначенийПриПолучении");
	ПравилаКонвертации.Колонки.Добавить("КонвертацииЗначенийПриОтправке");
	
	ПравилаКонвертации.Колонки.Добавить("ИмяПКПД", Новый ОписаниеТипов("Строка"));
	
	МенеджерОбмена.ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации);
	
	Для Каждого ПравилоКонвертации Из ПравилаКонвертации Цикл
	
		ПравилоКонвертации.ТипXDTO = ФабрикаXDTO.Тип(XMLСхема, ПравилоКонвертации.ТипXDTO);
		ПравилоКонвертации.ТипДанных = Тип(ИмяТипаДанныхПоОбъектуМетаданных(ПравилоКонвертации.ТипДанных));
		
	КонецЦикла;
	
	// Добавляем индексы таблицы правил конвертации.
	Если НаправлениеОбмена = "Отправка" Тогда
		
		ПравилаКонвертации.Индексы.Добавить("ТипДанных");
		ПравилаКонвертации.Индексы.Добавить("ТипXDTO");
		
	Иначе
		
		ПравилаКонвертации.Индексы.Добавить("ТипXDTO");
		ПравилаКонвертации.Индексы.Добавить("ТипДанных");
		
	КонецЕсли;
	
	Возврат ПравилаКонвертации;
	
КонецФункции

Функция СтруктураПараметровКонвертации(МенеджерОбмена)
	// Инициализация структуры с параметрами конвертации.
	//	Возможно, в будущем понадобится не структура, а таблица (если потребуется передавать параметры из одной базы в
	//	другую).
	ПараметрыКонвертации = Новый Структура();
	МенеджерОбмена.ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации);
	Возврат ПараметрыКонвертации;
КонецФункции

#КонецОбласти

#Область ОтправкаДанных

Процедура ВыполнитьВыгрузкуЗарегистрированныхДанных(КомпонентыОбмена, НомерСообщения)
	
	УзелДляОбмена = КомпонентыОбмена.УзелКорреспондента;
	
	НачальнаяВыгрузкаДанных = ОбменДаннымиСервер.УстановленПризнакНачальнойВыгрузкиДанных(УзелДляОбмена);
	
	// Получаем выборку измененных данных.
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелДляОбмена, НомерСообщения);
	
	КоличествоОбъектовКВыгрузке = 0;
	Пока ВыборкаИзменений.Следующий() Цикл
		КоличествоОбъектовКВыгрузке = КоличествоОбъектовКВыгрузке + 1;
	КонецЦикла;
	КомпонентыОбмена.Вставить("КоличествоОбъектовКВыгрузке", КоличествоОбъектовКВыгрузке);
	ВыборкаИзменений.Сбросить();
	
	УзелДляОбменаОбъект = УзелДляОбмена.ПолучитьОбъект();
	
	//  Алгоритм выгрузки данных в XML-файл:
	// 1. Получаем Данные из ИБ
	// 2. Отправляем информацию об удалении либо выгружаем данные.
	// 3. Конвертируем Данные в Структуру по правилу конвертации.
	// 4. Конвертируем Данные в Структуру в обработчике ПриОтправкеДанных.
	// 5. Конвертируем Структуру в ОбъектXDTO.
	// 6. Записываем ОбъектXDTO в XML-файл.
	
	Пока ВыборкаИзменений.Следующий() Цикл
		Попытка
			КомпонентыОбмена.СчетчикВыгруженныхОбъектов = КомпонентыОбмена.СчетчикВыгруженныхОбъектов + 1;
			ОбменДаннымиСервер.РассчитатьПроцентВыгрузки(КомпонентыОбмена.СчетчикВыгруженныхОбъектов, КомпонентыОбмена.КоличествоОбъектовКВыгрузке);
			
			// 1. Получаем Данные из ИБ
			Данные = ВыборкаИзменений.Получить();
			
			// 2. Отправляем информацию об удалении либо выгружаем данные.
			Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
				ВыгрузитьУдаление(КомпонентыОбмена, Данные.Ссылка);
			Иначе
				
				ОтправкаЭлемента = ОтправкаЭлементаДанных.Авто;
				ОбменДаннымиСобытия.ПриОтправкеДанныхКорреспонденту(Данные, ОтправкаЭлемента, НачальнаяВыгрузкаДанных, УзелДляОбменаОбъект, Ложь);
				
				// Удаление регистра отсылаем в виде пустого набора записей.
				Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить
					И ОбщегоНазначения.ЭтоРегистр(Данные.Метаданные()) Тогда
					ОтправкаЭлемента = ОтправкаЭлементаДанных.Авто;
				КонецЕсли;
				
				Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить Тогда
					ВыгрузитьУдаление(КомпонентыОбмена, Данные.Ссылка);
				ИначеЕсли ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
					// Ситуация, когда объект не соответствует условиям фильтра, но его не нужно отправлять как удаление.
					// Возникает в случае первоначальной выгрузки данных.
					Продолжить;
				Иначе
					ВыгрузкаОбъектаВыборки(КомпонентыОбмена, Данные);
				КонецЕсли;
				
			КонецЕсли;
		Исключение
			ТекстОшибки = Символы.ПС + СтрШаблон(НСтр("ru = 'Событие: %1.
					|Объект: %2.
					|
					|%3'"),
				КомпонентыОбмена.НаправлениеОбмена,
				ПредставлениеОбъектаДляПротокола(Данные.Ссылка),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоСсылкаXDTO(Знач Тип)
	
	Возврат ФабрикаXDTO.Тип(XMLБазоваяСхема(), "Ref").ЭтоПотомок(Тип);
	
КонецФункции

Функция ВыгружатьОбъектПоНеобходимости(КомпонентыОбмена, Объект)
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Получаем настройку из КЭШа
	РегистрацияПоНеобходимости = КомпонентыОбмена.СоответствиеРегистрацияПоНеобходимости.Получить(ОбъектМетаданных);
	Если РегистрацияПоНеобходимости <> Неопределено Тогда
		Возврат РегистрацияПоНеобходимости;
	КонецЕсли;
	
	РегистрацияПоНеобходимости = Ложь;
	
	Отбор = Новый Структура("ОбъектМетаданныхИмя", ОбъектМетаданных.ПолноеИмя());
	МассивПравил = КомпонентыОбмена.ТаблицаПравилаРегистрацииОбъектов.НайтиСтроки(Отбор);
	
	Для Каждого Правило Из МассивПравил Цикл
		
		Если Не ПустаяСтрока(Правило.ИмяРеквизитаФлага) Тогда
			
			ЗначениеРеквизитаФлага = Неопределено;
			КомпонентыОбмена.СвойстваУзлаПланаОбмена.Свойство(Правило.ИмяРеквизитаФлага, ЗначениеРеквизитаФлага);
			
			РегистрацияПоНеобходимости = (ЗначениеРеквизитаФлага = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости
				Или ЗначениеРеквизитаФлага = Перечисления.РежимыВыгрузкиОбъектовОбмена.ПустаяСсылка());

			Если РегистрацияПоНеобходимости Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Сохраняем полученное значение в кэше.
	КомпонентыОбмена.СоответствиеРегистрацияПоНеобходимости.Вставить(ОбъектМетаданных, РегистрацияПоНеобходимости);
	Возврат РегистрацияПоНеобходимости;
	
КонецФункции

Процедура ЗаписатьУдалениеОбъектаXDTO(КомпонентыОбмена, Ссылка, ТипСсылкиXDTO)
	
	УИДОбъектаXDTO = РегистрыСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов.ПубличныйИдентификаторПоСсылкеОбъекта(
		КомпонентыОбмена.УзелКорреспондента, Ссылка);
		
	Если НЕ ЗначениеЗаполнено(УИДОбъектаXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	XMLСхема = КомпонентыОбмена.XMLСхема;
	ТипXDTO = ФабрикаXDTO.Тип(XMLСхема, "УдалениеОбъекта");
	
	Для Каждого Свойство Из ТипXDTO.Свойства[0].Тип.Свойства[0].Тип.Свойства Цикл
		Если Свойство.Тип = ТипСсылкиXDTO Тогда
			
			ЗначениеXDTOЛюбаяСсылка = ФабрикаXDTO.Создать(Свойство.Тип, УИДОбъектаXDTO);
			ЛюбаяСсылкаОбъект = ФабрикаXDTO.Создать(ТипXDTO.Свойства[0].Тип);
			ЛюбаяСсылкаОбъект.СсылкаНаОбъект = ФабрикаXDTO.Создать(ТипXDTO.Свойства[0].Тип.Свойства[0].Тип);
			ЛюбаяСсылкаОбъект.СсылкаНаОбъект.Установить(Свойство, ЗначениеXDTOЛюбаяСсылка);
			
			ДанныеXDTO = ФабрикаXDTO.Создать(ТипXDTO);
			ДанныеXDTO.СсылкаНаОбъект = ФабрикаXDTO.Создать(ТипXDTO.Свойства[0].Тип);
			ДанныеXDTO.Установить(ТипXDTO.Свойства[0], ЛюбаяСсылкаОбъект);
			ФабрикаXDTO.ЗаписатьXML(КомпонентыОбмена.ФайлОбмена, ДанныеXDTO);
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//   КомпонентыОбмена - структура, содержит все ключевые данные для обмена (ПКО, ПКПД, ПОД и т.д.).
//   Ссылка - удаленный объект.
//   ПравилоКонвертации  - Строка таблицы правил конвертации объектов, в соответствии с которой выполняется преобразование.
//
Процедура ВыгрузитьУдаление(КомпонентыОбмена, Ссылка, ПравилоКонвертации = Неопределено)
	
	Если ПравилоКонвертации <> Неопределено Тогда
		// ПКО передали явно (при вызове удаления для конкретного ПКО).
		ЗаписатьУдалениеОбъектаXDTO(КомпонентыОбмена, Ссылка, ПравилоКонвертации.ТипСсылкиXDTO);
	Иначе
		
		// Поиск ПКО
		МассивИменПКО = ПОДПоОбъектуМетаданных(КомпонентыОбмена, Ссылка.Метаданные()).ИспользуемыеПКО;
		
		// Массив нужен для "свертки" ПКО по типам XDTO.
		ОбработанныеТипыСсылокXDTO = Новый Массив;
		
		Для Каждого ПравилоКонвертацииИмя Из МассивИменПКО Цикл
			
			ПравилоКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти(ПравилоКонвертацииИмя, "ИмяПКО");
			
			Если ПравилоКонвертации = Неопределено Тогда
				// Допустимо указание ПКО, не предназначенного для текущей версии формата данных.
				Продолжить;
			КонецЕсли;
			
			// "Свертка" ПКО по типу ссылки XDTO.
			ТипСсылкиXDTO = ПравилоКонвертации.ТипСсылкиXDTO;
			Если ОбработанныеТипыСсылокXDTO.Найти(ТипСсылкиXDTO) = Неопределено Тогда
				ОбработанныеТипыСсылокXDTO.Добавить(ТипСсылкиXDTO);
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЗаписатьУдалениеОбъектаXDTO(КомпонентыОбмена, Ссылка, ТипСсылкиXDTO);
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

Функция КонвертироватьПеречислениеВXDTO(КомпонентыОбмена, ЗначениеПеречисления, ТипПеречисленияXDTO)
	Если ТипЗнч(ЗначениеПеречисления) = Тип("Строка") Тогда
	
		ЗначениеXDTO = ФабрикаXDTO.Создать(ТипПеречисленияXDTO, ЗначениеПеречисления);
		
	Иначе
	
		ПравилаКонвертацииПредопределенныхДанных = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных;
		
		ПравилоКонвертации = НайтиПравилоКонвертацииДляЗначения(
			ПравилаКонвертацииПредопределенныхДанных, ТипЗнч(ЗначениеПеречисления), ТипПеречисленияXDTO);
		
		ЗначениеXDTO = ФабрикаXDTO.Создать(ТипПеречисленияXDTO,
			ЗначениеПеречисленияXDTO(ПравилоКонвертации.КонвертацииЗначенийПриОтправке, ЗначениеПеречисления));
		
	КонецЕсли;
	Возврат ЗначениеXDTO;
КонецФункции

Функция НайтиПравилоКонвертацииДляЗначения(ПравилаКонвертацииПредопределенныхДанных, Знач Тип, Знач ТипXDTO = Неопределено)
	
	Если ТипXDTO = Неопределено Тогда
		
		НайденныеПравила = ПравилаКонвертацииПредопределенныхДанных.НайтиСтроки(Новый Структура("ТипДанных", Тип));
		
		Если НайденныеПравила.Количество() = 1 Тогда
			
			ПравилоКонвертации = НайденныеПравила[0];
			
			Возврат ПравилоКонвертации;
			
		ИначеЕсли НайденныеПравила.Количество() > 1 Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка правил конвертации предопределенных данных.
				|Задано более одного правила конвертации для типа источника <%1>.'"),
				Строка(Тип));
			
		КонецЕсли;
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка правил конвертации предопределенных данных.
			|Правило конвертации не определено для типа источника <%1>.'"),
			Строка(Тип));
			
	Иначе
		
		НайденныеПравила = ПравилаКонвертацииПредопределенныхДанных.НайтиСтроки(Новый Структура("ТипДанных, ТипXDTO", Тип, ТипXDTO, Ложь));
		
		Если НайденныеПравила.Количество() = 1 Тогда
			
			ПравилоКонвертации = НайденныеПравила[0];
			
			Возврат ПравилоКонвертации;
			
		ИначеЕсли НайденныеПравила.Количество() > 1 Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка правил конвертации предопределенных данных.
				|Задано более одного правила конвертации для типа источника <%1> и типа приемника <%2>.'"),
				Строка(Тип),
				Строка(ТипXDTO));
			
		КонецЕсли;
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка правил конвертации предопределенных данных.
			|Правило конвертации не определено для типа источника <%1> и типа приемника <%2>.'"),
			Строка(Тип),
			Строка(ТипXDTO));
		
	КонецЕсли;
	
КонецФункции

Функция ЗначениеПеречисленияXDTO(Знач КонвертацииЗначений, Знач Значение)
	
	ЗначениеXDTO = КонвертацииЗначений.Получить(Значение);
	
	Если ЗначениеXDTO = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдено правило конвертации для значения предопределенных данных.
			|Тип значения источника: <%1>
			|Значение источника: <%2>'"),
			ТипЗнч(Значение),
			Строка(Значение));
	КонецЕсли;
	
	Возврат ЗначениеXDTO;
КонецФункции

Функция КонвертироватьСсылкуВXDTO(КомпонентыОбмена, ЗначениеСсылки, ТипСсылкиXDTO)
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
	
		УИДОбъектаXDTO = РегистрыСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов.ПубличныйИдентификаторПоСсылкеОбъекта(
			КомпонентыОбмена.УзелКорреспондента, ЗначениеСсылки);
		ЗначениеXDTO = ФабрикаXDTO.Создать(ТипСсылкиXDTO, УИДОбъектаXDTO);
			
		Возврат ЗначениеXDTO;
		
	Иначе
		Возврат СокрЛП(ЗначениеСсылки.УникальныйИдентификатор());
	КонецЕсли;
	
КонецФункции

Функция ЭтоТаблицаОбъекта(Знач СвойствоXDTO)
	
	Если ТипЗнч(СвойствоXDTO.Тип) = Тип("ТипОбъектаXDTO")
		И СвойствоXDTO.Тип.Свойства.Количество() = 1 Тогда
		
		Возврат СвойствоXDTO.Тип.Свойства[0].ВерхняяГраница <> 1;
		
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область ПолучениеДанных

#Область КонвертацияОбъектов

#Область КонвертацияXDTOВСтруктуру

Процедура КонвертацияСвойстваXDTOВЭлементСтруктуры(Источник, Свойство, Приемник, ИмяДляСвойстваСоставногоТипа = "")
	
	Если Не Источник.Установлено(Свойство) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСвойства = ?(ИмяДляСвойстваСоставногоТипа = "", Свойство.Имя, ИмяДляСвойстваСоставногоТипа);
	
	ЗначениеXDTO = Источник.ПолучитьXDTO(Свойство);
	
	Попытка
		
		Если ТипЗнч(ЗначениеXDTO) = Тип("ЗначениеXDTO") Тогда
			
			Значение = ПрочитатьЗначениеXDTO(ЗначениеXDTO);
			
			Если ТипЗнч(Приемник) = Тип("Структура") Тогда
				Приемник.Вставить(ИмяСвойства, Значение);
			Иначе
				Если ТипЗнч(Приемник) = Тип("СтрокаТаблицыЗначений")
					И Приемник.Владелец().Колонки.Найти(ИмяСвойства) = Неопределено Тогда
					Возврат;
				КонецЕсли;
				Приемник[ИмяСвойства] = Значение;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЗначениеXDTO) = Тип("ОбъектXDTO") Тогда
			
			// В свойстве могут находиться:
			// - дополнительная информация
			// - табличная часть
			// - набор ключевых свойств
			// - набор общих свойств
			// - свойство составного типа.
			
			Если ИмяСвойства = "AdditionalInfo" Тогда // Дополнительная информация
				
				Значение = СериализаторXDTO.ПрочитатьXDTO(ЗначениеXDTO);
				Приемник.Вставить(ИмяСвойства, Значение);
				
			ИначеЕсли ЭтоТаблицаОбъекта(Свойство) Тогда
				
				// Инициализируем таблицу значений, которая отображает табличную часть объекта.
				Значение = ТаблицаОбъектаПоТипу(Свойство.Тип.Свойства[0].Тип);
				
				ТабличнаяЧастьXDTO = Источник[ИмяСвойства].Строка;
				
				Для Индекс = 0 По ТабличнаяЧастьXDTO.Количество() - 1 Цикл
					
					СтрокаТЧ = Значение.Добавить();
					СтрокаXDTO = ТабличнаяЧастьXDTO.ПолучитьXDTO(Индекс);
					Для Каждого СвойствоСтрокиТЧ Из СтрокаXDTO.Свойства() Цикл
						
						КонвертацияСвойстваXDTOВЭлементСтруктуры(СтрокаXDTO, СвойствоСтрокиТЧ, СтрокаТЧ);
						
					КонецЦикла;
					
				КонецЦикла;
				
				Приемник.Вставить(ИмяСвойства, Значение);
				
			ИначеЕсли СтрНайти(ЗначениеXDTO.Тип().Имя, "КлючевыеСвойства") > 0 Тогда
				
				Значение = Новый Структура("ЭтоНаборКлючевыхСвойств");
				Значение.Вставить("ТипЗначения", СтрЗаменить(ЗначениеXDTO.Тип().Имя, "КлючевыеСвойства", ""));
				Для Каждого КлючевоеСвойство Из ЗначениеXDTO.Свойства() Цикл
					КонвертацияСвойстваXDTOВЭлементСтруктуры(ЗначениеXDTO, КлючевоеСвойство, Значение);
				КонецЦикла;
				
				
				Если ТипЗнч(Приемник) = Тип("Структура") Тогда
					Приемник.Вставить(ИмяСвойства, Значение);
				Иначе
					Приемник[ИмяСвойства] = Значение;
				КонецЕсли;
				
			ИначеЕсли СтрНайти(ЗначениеXDTO.Тип().Имя, "ОбщиеСвойства") > 0 Тогда
				
				Для Каждого ПодСвойство Из ЗначениеXDTO.Свойства() Цикл
					
					КонвертацияСвойстваXDTOВЭлементСтруктуры(ЗначениеXDTO, ПодСвойство, Приемник);
					
				КонецЦикла;
				
			Иначе
				
				// Свойство составного типа 
				Значение = Неопределено;
				Для Каждого ПодСвойство Из ЗначениеXDTO.Свойства() Цикл
					
					Если НЕ ЗначениеXDTO.Установлено(ПодСвойство) Тогда
						Продолжить;
					КонецЕсли;
					
					КонвертацияСвойстваXDTOВЭлементСтруктуры(ЗначениеXDTO, ПодСвойство, Приемник, ИмяСвойства);
					Прервать;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка чтения объекта XDTO, имя свойства: <%1>.'"), ИмяСвойства)
			+ Символы.ПС + Символы.ПС + ПредставлениеОшибки;
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры

Функция ПрочитатьЗначениеXDTO(ЗначениеXDTO)
	
	Если ЗначениеXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЭтоСсылкаXDTO(ЗначениеXDTO.Тип()) Тогда // Конвертация ссылки
		Значение = ПрочитатьЗначениеXDTOСложногоТипа(ЗначениеXDTO, "Ссылка");
	ИначеЕсли ЗначениеXDTO.Тип().Фасеты <> Неопределено
		И ЗначениеXDTO.Тип().Фасеты.Перечисления <> Неопределено
		И ЗначениеXDTO.Тип().Фасеты.Перечисления.Количество() > 0 Тогда // Конвертация перечисления
		
		Значение = ПрочитатьЗначениеXDTOСложногоТипа(ЗначениеXDTO, "Перечисление");
	Иначе // Конвертация обычного значения.
		
		Значение = ЗначениеXDTO.Значение;
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПрочитатьЗначениеXDTOСложногоТипа(ЗначениеXDTO, СложныйТип)
	
	СтруктураXDTO = Новый Структура;
	СтруктураXDTO.Вставить("ЭтоСсылка", СложныйТип = "Ссылка");
	СтруктураXDTO.Вставить("ЭтоПеречисление", СложныйТип = "Перечисление");
	СтруктураXDTO.Вставить("ТипЗначенияXDTO", ЗначениеXDTO.Тип());
	СтруктураXDTO.Вставить("Значение", ЗначениеXDTO.Значение);

	Возврат СтруктураXDTO;
	
КонецФункции

Функция ТаблицаОбъектаПоТипу(Знач Тип)
	
	Результат = Новый ТаблицаЗначений;
	
	Для Каждого Колонка Из Тип.Свойства Цикл
		
		Если СтрНайти(Колонка.Тип.Имя, "ОбщиеСвойства") > 0 Тогда
			
			Для Каждого ПодКолонка Из Колонка.Тип.Свойства Цикл
				
				Результат.Колонки.Добавить(ПодКолонка.Имя);
				
			КонецЦикла;
			
		Иначе
			Результат.Колонки.Добавить(Колонка.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область КонвертацияСтруктурыВДанныеИБ

Процедура КонвертацияСвойствСтруктурыОбъектаXDTO(
		КомпонентыОбмена,
		ДанныеXDTO,
		ПолученныеДанные,
		ПравилоКонвертации,
		НомерЭтапа = 1,
		СоставСвойств = "Все")
	
	Попытка
		Для Каждого ПКС Из ПравилоКонвертации.Свойства Цикл
			
			Если СоставСвойств = "СвойстваПоиска"
				И Не ПКС.ОбработкаПоисковогоСвойства Тогда
				Продолжить;
			КонецЕсли;
			
			КонвертацияСвойстваСтруктурыОбъектаXDTO(
				КомпонентыОбмена,
				ДанныеXDTO,
				ПолученныеДанные.ДополнительныеСвойства,
				ПолученныеДанные,
				ПКС,
				НомерЭтапа);
			
		КонецЦикла;
			
		Если СоставСвойств = "СвойстваПоиска" Или НомерЭтапа = 1 Тогда
			// Табличные части конвертируются только после выполнения обработчика ПКО.
			Возврат;
		КонецЕсли;
			
		Для Каждого ТЧ Из ПравилоКонвертации.СвойстваТабличныхЧастей Цикл
			
			Если ПолученныеДанные.ДополнительныеСвойства.Свойство(ТЧ.Ключ) Тогда
				
				МассивСтруктурСДаннымиСтрок = ПолученныеДанные.ДополнительныеСвойства[ТЧ.Ключ];
				Для НомерСтроки = 1 По МассивСтруктурСДаннымиСтрок.Количество() Цикл
					
					СтруктураСДаннымиСтроки = МассивСтруктурСДаннымиСтрок[НомерСтроки - 1];
					
					Если НомерЭтапа = 2 Тогда
						СтрокаТЧ = ПолученныеДанные[ТЧ.Ключ].Добавить();
					КонецЕсли;
					
					Для Каждого ПКС Из ТЧ.Значение Цикл
						
						КонвертацияСвойстваСтруктурыОбъектаXDTO(
							КомпонентыОбмена,
							ДанныеXDTO,
							ПолученныеДанные.ДополнительныеСвойства,
							СтрокаТЧ,
							ПКС,
							НомерЭтапа);
						
					КонецЦикла;
					
				КонецЦикла;
				
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
	Исключение
		ТекстОшибки = Символы.ПС + СтрШаблон(НСтр("ru = 'Событие: %1.
				|Объект: %2.
				|
				|Ошибка конвертации свойств.
				|%3.'"),
			КомпонентыОбмена.НаправлениеОбмена,
			ПредставлениеОбъектаДляПротокола(ПолученныеДанные),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры

Процедура КонвертацияСвойстваСтруктурыОбъектаXDTO(
		КомпонентыОбмена,
		ДанныеXDTO,
		ДополнительныеСвойства,
		ПриемникДанных,
		ПКС,
		НомерЭтапа = 1)
	// Обрабатывается ПКС где указано только свойство формата - оно используется только при выгрузке.
	Если СокрЛП(ПКС.СвойствоКонфигурации) = "" Тогда
		Возврат;
	КонецЕсли;
	
	ПравилоКонвертацииСвойства = ПКС.ПравилоКонвертацииСвойства;
	
	ЗначениеСвойства = "";
	Попытка
		Если НомерЭтапа = 1 Тогда
			
			Если Не ЗначениеЗаполнено(ПКС.СвойствоФормата) Тогда
				Возврат;
			КонецЕсли;
			
			Если ПКС.ОбработкаКлючевогоСвойства
				И Не ДанныеXDTO.Свойство("ЭтоНаборКлючевыхСвойств") Тогда
				ИсточникДанных = ДанныеXDTO.КлючевыеСвойства;
			Иначе
				ИсточникДанных = ДанныеXDTO;
			КонецЕсли;
			
			Если ИсточникДанных.Свойство(ПКС.СвойствоФормата) Тогда
				ЗначениеСвойства = ИсточникДанных[ПКС.СвойствоФормата];
			КонецЕсли;
			
		ИначеЕсли НомерЭтапа = 2 Тогда
			
			Если НомерЭтапа = 2 И Не ПКС.ИспользуетсяАлгоритмКонвертации Тогда
				Возврат;
			КонецЕсли;
			
			// На 2-м этапе значения свойств получаются из дополнительных свойств объекта полученных данных
			// и представляют из себя структуру, содержащую инструкцию для конвертации, либо значение XDTO.
			// Если приемником значения является строка табличной части, то значение свойства располагается
			// в ДополнительныеСвойства[ИмяТабличнойЧасти][ИндексСтроки].
			Если ЗначениеЗаполнено(ПКС.ИмяТЧ) Тогда
				ИсточникДанных = ДополнительныеСвойства[ПКС.ИмяТЧ][ПриемникДанных.НомерСтроки - 1];
			Иначе
				ИсточникДанных = ДополнительныеСвойства;
			КонецЕсли;
			
			Если ИсточникДанных.Свойство(ПКС.СвойствоКонфигурации) Тогда
				ЗначениеСвойства = ИсточникДанных[ПКС.СвойствоКонфигурации];
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда
			Возврат;
		КонецЕсли;
		
		// Значением является инструкция.
		Если ТипЗнч(ЗначениеСвойства) = Тип("Структура")
			И ЗначениеСвойства.Количество() < 3 Тогда
			
			Если ЗначениеСвойства.Свойство("ИмяПКО") Тогда
				ПравилоКонвертацииСвойства = ЗначениеСвойства.ИмяПКО;
			КонецЕсли;
			
			Если ЗначениеСвойства.Свойство("Значение") Тогда
				ЗначениеСвойства = ЗначениеСвойства.Значение;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеСвойства) = Тип("Структура") Тогда
			
			ПКПД = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти(ПравилоКонвертацииСвойства, "ИмяПКПД");
			Если ПКПД <> Неопределено Тогда
				
				Значение = ПКПД.КонвертацииЗначенийПриПолучении.Получить(ЗначениеСвойства.Значение);
				ПриемникДанных[ПКС.СвойствоКонфигурации] = Значение;
				Возврат;
				
			Иначе
				ПравилоКонвертацииСвойства = ПКОПоИмени(КомпонентыОбмена, ПравилоКонвертацииСвойства);
			КонецЕсли;
		Иначе
			// Конвертацию простых свойств выполняем только на 1-м этапе.
			ПриемникДанных[ПКС.СвойствоКонфигурации] = ЗначениеСвойства;
			Возврат;
		КонецЕсли;
		
		ДанныеДляЗаписиВИБ = СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ЗначениеСвойства, ПравилоКонвертацииСвойства, "ПолучитьСсылку");
		
		ПриемникДанных[ПКС.СвойствоКонфигурации] = ДанныеДляЗаписиВИБ.Ссылка;
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка конвертации свойства объекта XDTO, имя свойства: <%2>.'"), ЗначениеСвойства)
			+ Символы.ПС + Символы.ПС + ПредставлениеОшибки;
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры

Функция СсылкаОбъектаПоСвойствамОбъектаXDTO(ПравилоКонвертации, ПолученныеДанные, ДанныеXDTOСодержатСсылку, УзелОбмена)
	
	Результат = Неопределено;
	// ПравилоКонвертации.ПоляПоискаОбъекта - массив, содержит разные варианты поиска
	//	элементы массива - таблица значений с полями поиска.
	Если ПравилоКонвертации.ПоляПоиска = Неопределено
		ИЛИ ТипЗнч(ПравилоКонвертации.ПоляПоиска) <> Тип("Массив") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ПопыткаПоиска Из ПравилоКонвертации.ПоляПоиска Цикл
		ПоляПоиска = Новый Структура(ПопыткаПоиска);
		ЗаполнитьЗначенияСвойств(ПоляПоиска, ПолученныеДанные);
		
		// Если хотя бы одно поле поиска не заполнено, вариант поиска пропускается.
		// Вариант поиска является полноценным, если заполнены все поля.
		// В противном случае должен сработать другой вариант поиска.
		ЕстьНезаполненныеПоля = Ложь;
		Для Каждого ПолеПоиска Из ПоляПоиска Цикл
			Если Не ЗначениеЗаполнено(ПолеПоиска.Значение) Тогда
				ЕстьНезаполненныеПоля = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьНезаполненныеПоля Тогда
			// Переход к следующему варианту поиска.
			Продолжить;
		КонецЕсли;
		
		ВариантИдентификации = СокрЛП(ПравилоКонвертации.ВариантИдентификации);
		АнализироватьПубличныеИдентификаторы = ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска"
			И ДанныеXDTOСодержатСсылку
			И ЗначениеЗаполнено(УзелОбмена);
			
		ПоискЗапросом = Ложь;
		Если АнализироватьПубличныеИдентификаторы Тогда
			ПоискЗапросом = Истина;
		Иначе
			// Возможно, поиск можно выполнить платформенными методами.
			Если ПравилоКонвертации.ЭтоДокумент
				И ПоляПоиска.Количество() = 2
				И ПоляПоиска.Свойство("Дата")
				И ПоляПоиска.Свойство("Номер") Тогда
				Результат = ПравилоКонвертации.МенеджерОбъекта.НайтиПоНомеру(ПоляПоиска.Номер, ПоляПоиска.Дата);
				Результат = ?(Результат.Пустая(), Неопределено, Результат);
			ИначеЕсли ПравилоКонвертации.ЭтоСправочник
				И ПоляПоиска.Количество() = 1
				И ПоляПоиска.Свойство("Наименование") Тогда
				Результат = ПравилоКонвертации.МенеджерОбъекта.НайтиПоНаименованию(ПоляПоиска.Наименование, Истина);
			ИначеЕсли ПравилоКонвертации.ЭтоСправочник
				И ПоляПоиска.Количество() = 1
				И ПоляПоиска.Свойство("Код") Тогда
				Результат = ПравилоКонвертации.МенеджерОбъекта.НайтиПоКоду(ПоляПоиска.Код);
			Иначе
				ПоискЗапросом = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ПоискЗапросом Тогда
			Запрос = Новый Запрос;
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Таблица.Ссылка КАК Ссылка
			|ИЗ
			|	[ПолноеИмя] КАК Таблица
			|ГДЕ
			|	[УсловиеОтбора]";
			
			Отбор = Новый Массив;
			
			Для Каждого ПолеПоиска Из ПоляПоиска Цикл
				
				Если ОбменДаннымиПовтИсп.ЭтоСтроковыйРеквизитНеограниченнойДлины(ПравилоКонвертации.ПолноеИмя, ПолеПоиска.Ключ) Тогда
					
					ОтборСтрокой = "ВЫРАЗИТЬ(Таблица.[Ключ] КАК СТРОКА([ДлинаСтроки])) = &[Ключ]";
					ОтборСтрокой = СтрЗаменить(ОтборСтрокой, "[Ключ]", ПолеПоиска.Ключ);
					ОтборСтрокой = СтрЗаменить(ОтборСтрокой, "[ДлинаСтроки]", Формат(СтрДлина(ПолеПоиска.Значение), "ЧГ=0"));
					Отбор.Добавить(ОтборСтрокой);
					
				Иначе
					
					Отбор.Добавить(СтрЗаменить("Таблица.[Ключ] = &[Ключ]", "[Ключ]", ПолеПоиска.Ключ));
					
				КонецЕсли;
				
				Запрос.УстановитьПараметр(ПолеПоиска.Ключ, ПолеПоиска.Значение);
				
			КонецЦикла;
			
			УсловиеОтбора = СтрСоединить(Отбор, " И ");
			
			Если АнализироватьПубличныеИдентификаторы Тогда
				// Из поиска необходимо исключить уже сопоставленные ранее объекты.
				ТекстСоединения = "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов КАК ПУБ
					|	ПО ПУБ.Ссылка = Таблица.Ссылка И ПУБ.УзелИнформационнойБазы = &УзелОбмена";
				УсловиеОтбора = УсловиеОтбора + Символы.ПС + "	И ПУБ.Ссылка is null";
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,  "ГДЕ", ТекстСоединения + Символы.ПС + "	ГДЕ");
				Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
			КонецЕсли;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[УсловиеОтбора]", УсловиеОтбора);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмя]", ПравилоКонвертации.ПолноеИмя);
			Запрос.Текст = ТекстЗапроса;
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				
				Результат = Выборка.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		Если ЗначениеЗаполнено(Результат) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьДанныеИБПоПолученнымДанным(ДанныеИБ, ПолученныеДанные, ПравилоКонвертации)
	
	ПоляКопии = ПравилоКонвертации.Свойства.ВыгрузитьКолонку("СвойствоКонфигурации");
	Если ПоляКопии.Количество() > 0 Тогда
		
		Для НомерПоля = 1 По ПоляКопии.Количество() Цикл
			ПоляКопии[НомерПоля - 1] = СокрЛП(ПоляКопии[НомерПоля - 1]);
		КонецЦикла;
		
		ПоляКопии = СтрСоединить(ПоляКопии, ",");
		ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные, ПоляКопии);
	КонецЕсли;
	
	Для Каждого ТабличнаяЧасть Из ПравилоКонвертации.СвойстваТабличныхЧастей Цикл
		ДанныеИБ[ТабличнаяЧасть.Ключ].Очистить();
		ДанныеИБ[ТабличнаяЧасть.Ключ].Загрузить(ПолученныеДанные[ТабличнаяЧасть.Ключ].Выгрузить());
	КонецЦикла;
КонецПроцедуры

Функция ИнициализироватьПолученныеДанные(ПравилоКонвертации)
	
	Если ПравилоКонвертации.ЭтоДокумент Тогда
		ПолученныеДанные = ПравилоКонвертации.МенеджерОбъекта.СоздатьДокумент();
	ИначеЕсли ПравилоКонвертации.ЭтоСправочник
		Или ПравилоКонвертации.ЭтоПланВидовХарактеристик Тогда
		Если ПравилоКонвертации.ПравилоДляГруппыСправочника Тогда
			ПолученныеДанные = ПравилоКонвертации.МенеджерОбъекта.СоздатьГруппу();
		Иначе
			ПолученныеДанные = ПравилоКонвертации.МенеджерОбъекта.СоздатьЭлемент();
		КонецЕсли;
	ИначеЕсли ПравилоКонвертации.ЭтоРегистр Тогда
		ПолученныеДанные = ПравилоКонвертации.МенеджерОбъекта.СоздатьНаборЗаписей();
	КонецЕсли;
	
	Возврат ПолученныеДанные
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СервисныеПроцедурыИФункции

Процедура ПровестиГенерациюКодаНомераПриНеобходимости(Объект)
	
	ИмяТипаОбъекта = ОбщегоНазначения.ВидОбъектаПоТипу(ТипЗнч(Объект.Ссылка));
	
	// По типу документа смотрим заполнен код или номер.
	Если ИмяТипаОбъекта = "Документ"
		Или ИмяТипаОбъекта = "БизнесПроцесс"
		Или ИмяТипаОбъекта = "Задача" Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Номер) Тогда
			
			Объект.УстановитьНовыйНомер();
			
		КонецЕсли;
		
	ИначеЕсли ИмяТипаОбъекта = "Справочник"
		Или ИмяТипаОбъекта = "ПланВидовХарактеристик" Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Код)
			И Объект.Метаданные().Автонумерация Тогда
			
			Объект.УстановитьНовыйКод();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СнятьПометкуУдаленияСПредопределенногоЭлемента(Объект, ТипОбъекта, КомпонентыОбмена)
	
	Попытка
		ПометкаУдаления = Объект.ПометкаУдаления;
	Исключение
		ПометкаУдаления = Ложь;
	КонецПопытки;
	
	Если ПометкаУдаления Тогда
		
		Попытка
			Предопределенный = Объект.Предопределенный;
		Исключение
			Предопределенный = Ложь;
		КонецПопытки;
		
		Если Предопределенный Тогда
			
			Объект.ПометкаУдаления = Ложь;
			
			// фиксируем событие в ЖР
			ЗП            = ПолучитьСтруктуруЗаписиПротокола(80);
			ЗП.ТипОбъекта = ТипОбъекта;
			ЗП.Объект     = Строка(Объект);
			
			КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена =
				Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями;
			ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 80, ЗП, Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтложенныеОперации
Процедура ЗапомнитьОбъектДляОтложенногоЗаполнения(ДанныеДляЗаписиВИБ, ПравилоКонвертации, КомпонентыОбмена)
	
	Если ПравилоКонвертации.ЕстьОбработчикПослеЗагрузкиВсехДанных Тогда
		
		// Занесем данные об объекте в таблицу отложенной обработки.
		НоваяСтрока = КомпонентыОбмена.ЗагруженныеОбъекты.Добавить();
		НоваяСтрока.ИмяОбработчика = ПравилоКонвертации.ПослеЗагрузкиВсехДанных;
		НоваяСтрока.Объект         = ДанныеДляЗаписиВИБ;
		НоваяСтрока.СсылкаНаОбъект = ДанныеДляЗаписиВИБ.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьВременныеОбъектыСозданныеПоСсылкам(КомпонентыОбмена) Экспорт
	
	ТаблицаОбъектовСозданныхПоСсылкам = КомпонентыОбмена.ТаблицаОбъектовСозданныхПоСсылкам;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОбъектовСозданныхПоСсылкам Цикл
		
		СсылкаНаОбъект = СтрокаТаблицы.СсылкаНаОбъект;
		
		// Необходимо удалить ссылку на объект из таблицы для отложенного заполнения объектов.
		СтрокаТаблицыОтложенногоЗаполнения = КомпонентыОбмена.ЗагруженныеОбъекты.Найти(СсылкаНаОбъект, "СсылкаНаОбъект");
		Если СтрокаТаблицыОтложенногоЗаполнения <> Неопределено Тогда
			КомпонентыОбмена.ЗагруженныеОбъекты.Удалить(СтрокаТаблицыОтложенногоЗаполнения);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			
			ОбъектСозданныйПоСсылке = СсылкаНаОбъект.ПолучитьОбъект();
			ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(ОбъектСозданныйПоСсылке, Истина, Ложь, КомпонентыОбмена.УзелКорреспондента);
			УдалитьОбъект(ОбъектСозданныйПоСсылке, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаОбъектовСозданныхПоСсылкам.Очистить();
	
КонецПроцедуры

Процедура ОтложенноеЗаполнениеОбъектов(КомпонентыОбмена)
	
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	ЗагруженныеОбъекты = КомпонентыОбмена.ЗагруженныеОбъекты;
	
	Попытка
		КомпонентыОбмена.МенеджерОбмена.ПередОтложеннымЗаполнением(КомпонентыОбмена);
	Исключение
		ТекстОшибки = Символы.ПС + СтрШаблон(НСтр("ru = 'Событие: %1.
				|Обработчик: ПередОтложеннымЗаполнением.
				|
				|Ошибка выполнения обработчика.
				|%2.'"),
			КомпонентыОбмена.НаправлениеОбмена,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КомпонентыОбмена.СтрокаСообщенияОбОшибке = "";
		ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СокрЛП(ТекстОшибки),,,,, Истина);
		Возврат;
	КонецПопытки;
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеОбъекты Цикл
		
		Если СтрокаТаблицы.Объект.ЭтоНовый() Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = СтрокаТаблицы.Объект.Ссылка.ПолучитьОбъект();
		
		// Перенос дополнительных свойств.
		Для Каждого Свойство Из СтрокаТаблицы.Объект.ДополнительныеСвойства Цикл
			Объект.ДополнительныеСвойства.Вставить(Свойство.Ключ, Свойство.Значение);
		КонецЦикла;
		
		ИмяОбработчика = СтрокаТаблицы.ИмяОбработчика;
		
		МенеджерОбмена = КомпонентыОбмена.МенеджерОбмена;
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Объект", Объект);
		СтруктураПараметров.Вставить("КомпонентыОбмена", КомпонентыОбмена);
		СтруктураПараметров.Вставить("ОбъектМодифицирован", Истина);
		
		Попытка
			МенеджерОбмена.ВыполнитьПроцедуруМодуляМенеджера(ИмяОбработчика, СтруктураПараметров);
		Исключение
			ТекстОшибки = Символы.ПС + СтрШаблон(НСтр("ru = 'Событие: %1.
					|Обработчик: ОтложенноеЗаполнениеОбъектов.
					|Объект: %2.
					|
					|Ошибка выполнения обработчика.
					|%3.'"),
				КомпонентыОбмена.НаправлениеОбмена,
				ПредставлениеОбъектаДляПротокола(Объект.Ссылка),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КомпонентыОбмена.СтрокаСообщенияОбОшибке = "";
			ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СокрЛП(ТекстОшибки),,,,, Истина);
			Возврат;
		КонецПопытки;
		
		ОбъектМодифицирован = СтруктураПараметров.ОбъектМодифицирован;
		
		Если ОбъектМодифицирован Тогда
			ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(Объект, Истина, Ложь, КомпонентыОбмена.УзелКорреспондента);
			Объект.Записать();
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьОтложеннуюЗаписьОбъектов(КомпонентыОбмена)
	
	Если КомпонентыОбмена.ОбъектыДляОтложеннойЗаписи.Количество() = 0 Тогда
		Возврат // Нет объектов в очереди
	КонецЕсли;
	
	Для Каждого ОбъектСоответствия Из КомпонентыОбмена.ОбъектыДляОтложеннойЗаписи Цикл
		
		Если ОбъектСоответствия.Ключ.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = ОбъектСоответствия.Ключ.ПолучитьОбъект();
		
		Если Объект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Устанавливаем узел-отправитель для предотвращения регистрации объекта на узле, для которого производим загрузку
		// проведение выполняем не в режиме загрузки.
		ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(Объект, Ложь, Ложь, КомпонентыОбмена.УзелКорреспондента);
		
		ОписаниеОшибки = "";
		ОбъектЗаписанУспешно = Ложь;
		
		Попытка
			
			ДополнительныеСвойства = ОбъектСоответствия.Значение;
			
			Для Каждого Свойство Из ДополнительныеСвойства Цикл
				
				Объект.ДополнительныеСвойства.Вставить(Свойство.Ключ, Свойство.Значение);
				
			КонецЦикла;
			
			Объект.ДополнительныеСвойства.Вставить("ОтложеннаяЗапись");
			
			Если Объект.ПроверитьЗаполнение() Тогда
				
				// При проведении документа снимаем запрет на выполнение ПРО,
				// т.к. ПРО были проигнорированы при обычной записи с целью оптимизации скорости загрузки данных.
				Если Объект.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
					Объект.ДополнительныеСвойства.Удалить("ОтключитьМеханизмРегистрацииОбъектов");
				КонецЕсли;
				
				ОбменДаннымиСервер.ПропуститьПроверкуЗапретаИзменения();
				Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
				
				СведенияОВерсииОбъекта = Новый Структура;
				СведенияОВерсииОбъекта.Вставить("ОтложеннаяОбработка", Истина);
				СведенияОВерсииОбъекта.Вставить("ТипВерсииОбъекта", "ИзмененоПользователем");
				СведенияОВерсииОбъекта.Вставить("АвторВерсии", КомпонентыОбмена.УзелКорреспондента);
				Объект.ДополнительныеСвойства.Вставить("СведенияОВерсииОбъекта", СведенияОВерсииОбъекта);
				
				// Выполняем попытку записи объекта.
				Объект.Записать();
				
				ОбъектЗаписанУспешно = Истина;
				
			Иначе
				
				ОбъектЗаписанУспешно = Ложь;
				
				ОписаниеОшибки = НСтр("ru = 'Ошибка проверки заполнения реквизитов'");
				
			КонецЕсли;
			
		Исключение
			
			ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ОбъектЗаписанУспешно = Ложь;
			
		КонецПопытки;
		
		ОбменДаннымиСервер.ПропуститьПроверкуЗапретаИзменения(Ложь);
		
		Если Не ОбъектЗаписанУспешно Тогда
			
			ОбменДаннымиСервер.ЗарегистрироватьОшибкуЗаписиОбъекта(Объект, КомпонентыОбмена.УзелКорреспондента, ОписаниеОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция СоответствиеСтарыхИНовыхДанныхТЧ(ТабличнаяЧастьОбъектаПослеОбработки, ТабличнаяЧастьОбъектаДоОбработки, МассивКлючевыхПолей)
	
	СоответствиеСтрокНовойТЧСтрокамСтаройТЧ = Новый Соответствие;
	
	Для Каждого СтрокаНовойТЧ Из ТабличнаяЧастьОбъектаПослеОбработки Цикл
		
		НайденнаяСтрокаСтаройТЧ = Неопределено;
		
		СтруктураПоиска = Новый Структура;
		Для Каждого КлючевоеПоле Из МассивКлючевыхПолей Цикл
			СтруктураПоиска.Вставить(КлючевоеПоле, СтрокаНовойТЧ[КлючевоеПоле]);
		КонецЦикла;
		
		НайденныеСтрокиНовойТЧ = ТабличнаяЧастьОбъектаПослеОбработки.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтрокиНовойТЧ.Количество() = 1 Тогда
			
			НайденныеСтрокиСтаройТЧ = ТабличнаяЧастьОбъектаДоОбработки.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтрокиСтаройТЧ.Количество() = 1 Тогда
				НайденнаяСтрокаСтаройТЧ = НайденныеСтрокиСтаройТЧ[0];
			КонецЕсли;
			
		КонецЕсли;
		
		СоответствиеСтрокНовойТЧСтрокамСтаройТЧ.Вставить(СтрокаНовойТЧ, НайденнаяСтрокаСтаройТЧ);
		
	КонецЦикла;
	
	Возврат СоответствиеСтрокНовойТЧСтрокамСтаройТЧ;
	
КонецФункции

Функция РазложитьФорматОбмена(Знач ФорматОбмена)
	
	Результат = Новый Структура("БазовыйФормат, Версия");
	
	ЭлементыФормата = СтрРазделить(ФорматОбмена, "/");
	
	Если ЭлементыФормата.Количество() = 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неканоническое имя формата обмена <%1>'"), ФорматОбмена);
	КонецЕсли;
	
	Результат.Версия = ЭлементыФормата[ЭлементыФормата.ВГраница()];
	
	ПроверитьВерсию(Результат.Версия);
	
	ЭлементыФормата.Удалить(ЭлементыФормата.ВГраница());
	
	Результат.БазовыйФормат = СтрСоединить(ЭлементыФормата, "/");
	
	Возврат Результат;
КонецФункции

Функция СсылкаПоУИД(ТипЗначенияОбъектаИБ, УИДОбъектаXDTO, УзелОбмена)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипЗначенияОбъектаИБ);
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	ПустаяСсылка = ОписаниеТипов.ПривестиЗначение();

	МенеджерОбъектаМетаданных = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПустаяСсылка);
	
	НайденнаяСсылка = МенеджерОбъектаМетаданных.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДОбъектаXDTO));
	Если Не ЗначениеЗаполнено(УзелОбмена)
		Или НайденнаяСсылка.Пустая()
		Или Не ОбщегоНазначения.СсылкаСуществует(НайденнаяСсылка) Тогда
		Возврат НайденнаяСсылка;
	КонецЕсли;
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Ссылка", НайденнаяСсылка);
	СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
	
	Если Не РегистрыСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов.ЗаписьЕстьВРегистре(СтруктураЗаписи) Тогда
		Возврат НайденнаяСсылка;
	КонецЕсли;
	// Данному УИД уже сопоставлен другой объект. Нужно создавать ссылку с другим УИДом.
	НоваяСсылка = МенеджерОбъектаМетаданных.ПолучитьСсылку();
	
	Возврат НоваяСсылка;
	
КонецФункции

Функция НайтиСсылкуПоПубличномуИдентификатору(УИДОбъектаXDTO, КомпонентыОбмена, ТипЗначенияОбъектаИБ)
	
	Если НЕ ЗначениеЗаполнено(КомпонентыОбмена.УзелКорреспондента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов
		|ГДЕ УзелИнформационнойБазы = &УзелИнформационнойБазы
		|	И Идентификатор = &Идентификатор");
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", КомпонентыОбмена.УзелКорреспондента);
	Запрос.УстановитьПараметр("Идентификатор", УИДОбъектаXDTO);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		КоличествоСсылокПодходящегоТипа = 0;
		НайденнаяСсылка = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если ТипЗнч(Выборка.Ссылка) = ТипЗначенияОбъектаИБ Тогда
				НайденнаяСсылка = Выборка.Ссылка;
				КоличествоСсылокПодходящегоТипа = КоличествоСсылокПодходящегоТипа + 1;
				Если КоличествоСсылокПодходящегоТипа > 1 Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если  КоличествоСсылокПодходящегоТипа > 1 Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для уникального идентификатора <%1> и узла <%2> назначено несколько ссылок.'"),
				Строка(УИДОбъектаXDTO), Строка(КомпонентыОбмена.УзелКорреспондента));
		Иначе
			Возврат НайденнаяСсылка;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Чтение и обработка данных об удалении объекта.
//
// Параметры:
//  КомпонентыОбмена        - Структура - содержит все правила и параметры обмена.
//  ОбъектXDTO              - Объект пакета XDTO "УдалениеОбъекта", который содержит информацию об удаленном объекте
//                            информационной базы.
//  МассивОбъектовКУдалению - Массив, в который будет помещена ссылка на объект, подлежащий удалению.
//                            Собственно удаление объектов происходит после загрузки всех данных, при этом учитывается
//                            какие объекты были загружены (не удаляются ссылки, которые были загружены как другие
//                            ОбъектыXDTO).
//
Процедура ПрочитатьУдаление(КомпонентыОбмена, ОбъектXDTO, МассивОбъектовКУдалению, ТаблицыДляЗагрузки=Неопределено)
	
	ТипСсылкиXDTO = Неопределено;
	
	Если Не ОбъектXDTO.Установлено("СсылкаНаОбъект") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СвойствоXDTO Из ОбъектXDTO.СсылкаНаОбъект.СсылкаНаОбъект.Свойства() Цикл
		
		Если НЕ ОбъектXDTO.СсылкаНаОбъект.СсылкаНаОбъект.Установлено(СвойствоXDTO) Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеСвойстваXDTO = ОбъектXDTO.СсылкаНаОбъект.СсылкаНаОбъект.ПолучитьXDTO(СвойствоXDTO);
		ЗначениеСсылкиXDTO = ПрочитатьЗначениеXDTOСложногоТипа(ЗначениеСвойстваXDTO, "Ссылка");
		// Определим тип ссылки
		ТипСсылкиXDTO = ЗначениеСсылкиXDTO.ТипЗначенияXDTO;
		УникальныйИдентификаторСтрокой = ЗначениеСсылкиXDTO.Значение;
		Прервать;
		
	КонецЦикла;
	
	Если ТипСсылкиXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Поиск ПКО
	ПОД = ПОДПоТипуСсылкиXDTO(КомпонентыОбмена, ТипСсылкиXDTO, Истина);
	
	Если ЗначениеЗаполнено(ПОД) Тогда
		
		МассивИменПКО = ПОД.ИспользуемыеПКО;
		
		Для Каждого ПравилоКонвертацииИмя Из МассивИменПКО Цикл
			
			ПравилоКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти(ПравилоКонвертацииИмя, "ИмяПКО");
			Если ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска"
				Или ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору" Тогда
				
				Если ТаблицыДляЗагрузки <> Неопределено Тогда
					ТипОбъектаСтрокой = ПравилоКонвертации.ТипПолученныхДанныхСтрокой;
					
					ТипИсточникаСтрокой = ОбъектXDTO.Тип().Имя;
					ТипПриемникаСтрокой = ПравилоКонвертации.ТипПолученныхДанныхСтрокой;
					
					КлючТаблицыДанных = ОбменДаннымиСервер.КлючТаблицыДанных(ТипИсточникаСтрокой, ТипПриемникаСтрокой, Ложь);
					
					Если ТаблицыДляЗагрузки.Найти(КлючТаблицыДанных) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				СсылкаКУдалению = СсылкаОбъектаПоУИДОбъектаXDTO(УникальныйИдентификаторСтрокой,
					ПравилоКонвертации.ТипДанных, КомпонентыОбмена);
				Если МассивОбъектовКУдалению.Найти(СсылкаКУдалению) = Неопределено Тогда
					МассивОбъектовКУдалению.Добавить(СсылкаКУдалению);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьУдалениеОбъектов(КомпонентыОбмена, МассивОбъектовКУдалению, МассивЗагруженныхОбъектов)
	
	Для Каждого ЗагруженныйОбъект Из МассивЗагруженныхОбъектов Цикл
		Пока МассивОбъектовКУдалению.Найти(ЗагруженныйОбъект) <> Неопределено Цикл
			МассивОбъектовКУдалению.Удалить(МассивОбъектовКУдалению.Найти(ЗагруженныйОбъект));
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ЭлементКУдалению Из МассивОбъектовКУдалению Цикл
		
		// Собственно удаление ссылки.
		Объект = ЭлементКУдалению.ПолучитьОбъект();
		Если Объект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		
		Если КомпонентыОбмена.РежимЗагрузкиДанныхВИнформационнуюБазу Тогда
			Если ОбменДаннымиСобытия.ЗагрузкаЗапрещена(Объект, КомпонентыОбмена.УзелКорреспондентаОбъект) Тогда
				Возврат;
			КонецЕсли;
			Если Метаданные.Документы.Содержит(Объект.Метаданные()) И Объект.Проведен Тогда
				ЕстьРезультат = ОтменитьПроведениеОбъектаВИБ(Объект, КомпонентыОбмена.УзелКорреспондента);
				Если НЕ ЕстьРезультат Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(Объект, Истина, Ложь, КомпонентыОбмена.УзелКорреспондента);
			УдалитьОбъект(Объект, Ложь);
		Иначе
			
			ТипПолученныхДанныхСтрокой = ИмяТипаДанныхПоОбъектуМетаданных(Объект.Метаданные());
			
			СтрокаТаблицы = КомпонентыОбмена.ТаблицаДанныхЗаголовкаПакета.Добавить();
			
			СтрокаТаблицы.ТипОбъектаСтрокой =ТипПолученныхДанныхСтрокой;
			СтрокаТаблицы.КоличествоОбъектовВИсточнике = 1;
			СтрокаТаблицы.ТипПриемникаСтрокой = ТипПолученныхДанныхСтрокой;
			СтрокаТаблицы.ЭтоУдалениеОбъекта = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьОбъект(Объект, УдалитьНепосредственно)
	
	Попытка
		
		Предопределенный = Объект.Предопределенный;
		
	Исключение
		
		Предопределенный = Ложь;
		
	КонецПопытки;
	
	Если Предопределенный Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если УдалитьНепосредственно Тогда
		
		Объект.Удалить();
		
	Иначе
		
		УстановитьПометкуУдаленияУОбъекта(Объект);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает пометку удаления.
//
// Параметры:
//  Объект          - Объект для установки пометки.
//  ПометкаУдаления - Булево - Флаг пометки удаления.
//  ИмяТипаОбъекта  - Строка - Тип объекта строкой.
//
Процедура УстановитьПометкуУдаленияУОбъекта(Объект)
	
	Если Объект.ДополнительныеСвойства.Свойство("НайденЗапретЗагрузкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(Объект.Метаданные());
	
	Если ИмяБазовогоТипа = "Документы" Тогда
		ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(Объект, Ложь);
		РегистрыСведений.РезультатыОбменаДанными.ЗарегистрироватьУстранениеПроблемы(Объект,
			Перечисления.ТипыПроблемОбменаДанными.НепроведенныйДокумент);
	КонецЕсли;
	
	ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(Объект);
	
	// Дли иерархических объектов пометку удаления ставим только у конкретного объекта.
	Если ИмяБазовогоТипа = "Справочники"
		Или ИмяБазовогоТипа = "ПланыВидовХарактеристик"
		Или ИмяБазовогоТипа = "ПланыСчетов" Тогда
		Объект.УстановитьПометкуУдаления(Истина, Ложь);
	Иначе
		Объект.УстановитьПометкуУдаления(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПоискПравилОбмена

Функция ПОДПоТипуСсылкиXDTO(КомпонентыОбмена, ТипСсылкиXDTO, ВозвращатьПустоеЗначение = Ложь)
	
	ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти(ТипСсылкиXDTO, "ТипСсылкиXDTO");
	Если ПравилоОбработки = Неопределено Тогда
		
		Если ВозвращатьПустоеЗначение Тогда
			Возврат ПравилоОбработки;
		Иначе
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найдено ПОД для типа ссылки XDTO.
					|Тип ссылки XDTO: %1
					|Описание ошибки: %2'"),
				Строка(ТипСсылкиXDTO),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецЕсли;
		
	Иначе
		Возврат ПравилоОбработки;
	КонецЕсли;
	
КонецФункции

Функция ПОДПоТипуОбъектаXDTO(КомпонентыОбмена, ТипОбъектаXDTO, ВозвращатьПустоеЗначение = Ложь)
	
	ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти(ТипОбъектаXDTO, "ОбъектВыборкиФормат");
	Если ПравилоОбработки = Неопределено Тогда
		
		Если ВозвращатьПустоеЗначение Тогда
			Возврат ПравилоОбработки;
		Иначе
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найдено ПОД для типа объекта XDTO.
					|Тип объекта XDTO: %1
					|Описание ошибки: %2'"),
				Строка(ТипОбъектаXDTO),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецЕсли;
		
	Иначе
		Возврат ПравилоОбработки;
	КонецЕсли;
	
КонецФункции

Функция ПОДПоОбъектуМетаданных(КомпонентыОбмена, ОбъектМетаданных)
	
	ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти(ОбъектМетаданных, "ОбъектВыборкиМетаданные");
	
	Если ПравилоОбработки = Неопределено Тогда
		ТекстОшибки = Символы.ПС + СтрШаблон(НСтр("ru = 'Не найдено ПОД для объекта метаданных.
				|Объект метаданных: %3.'"),
			Строка(ОбъектМетаданных));
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат ПравилоОбработки;

КонецФункции

Функция ПОДПоИмени(КомпонентыОбмена, Имя)
	
	ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти(Имя, "Имя");
	
	Если ПравилоОбработки = Неопределено Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найдено ПОД с именем %1'"), Имя);
			
	Иначе
		Возврат ПравилоОбработки;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийПравилОбмена

#Область ОбработчикиСобытийПравилОбработкиДанных
// Процедура - "обертка" вызова обработчика ПОД ПриОбработке.
//
// Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//  ПравилоОбработки - Строка таблицы правил обработки данных, соответствующая обрабатываемому ПОД
//  ОбъектОбработки  - Ссылка на объект, подлежащий обработке
//                     либо структура, соответствующая объекту XDTO (при загрузке), 
//                     либо ссылка на объект информационной базы (при выгрузке).
//  ИспользованиеПКО - Структура, определяющая по каким ПКО будет выгружен объект
//                     ключи соответствуют именам ПКО, 
//                     значения - признак использования ПКО для конкретного объекта обработки.
//
Процедура ПриОбработкеПОД(КомпонентыОбмена, ПравилоОбработки, Знач ОбъектОбработки, ИспользованиеПКО)

	МенеджерОбмена = КомпонентыОбмена.МенеджерОбмена;
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ОбъектОбработки", ОбъектОбработки);
	СтруктураПараметров.Вставить("ИспользованиеПКО", ИспользованиеПКО);
	СтруктураПараметров.Вставить("КомпонентыОбмена", КомпонентыОбмена);

	Попытка
		МенеджерОбмена.ВыполнитьПроцедуруМодуляМенеджера(ПравилоОбработки.ПриОбработке, СтруктураПараметров);
	Исключение
		ТекстОшибки = Символы.ПС + СтрШаблон(НСтр("ru = 'Событие: %1.
				|Обработчик: ПриОбработкеПОД.
				|ПОД: %2.
				|Объект: %3.
				|
				|Ошибка выполнения обработчика.
				|%4.'"),
			КомпонентыОбмена.НаправлениеОбмена,
			ПравилоОбработки.Имя,
			ПредставлениеОбъектаДляПротокола(ОбъектОбработки),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	ОбъектОбработки  = СтруктураПараметров.ОбъектОбработки;
	ИспользованиеПКО = СтруктураПараметров.ИспользованиеПКО;
	КомпонентыОбмена = СтруктураПараметров.КомпонентыОбмена;
	
КонецПроцедуры

// Функция - "обертка" вызова обработчика ПОД ВыборкаДанных.
//
// Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//  ПравилоОбработки - Строка таблицы правил обработки данных, соответствующая обрабатываемому ПОД.
//
// Возвращаемое значение - то что вернет обработчик ВыборкаДанных (например, выборка результата запроса).
//
Функция ВыборкаДанных(КомпонентыОбмена, ПравилоОбработки)
	
	АлгоритмВыборки = ПравилоОбработки.ВыборкаДанных;
	Если ЗначениеЗаполнено(АлгоритмВыборки) Тогда
		
		МенеджерОбмена = КомпонентыОбмена.МенеджерОбмена;
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("КомпонентыОбмена", КомпонентыОбмена);
		
		Попытка
			ВыборкаДанных = МенеджерОбмена.ВыполнитьФункциюМодуляМенеджера(ПравилоОбработки.ВыборкаДанных, СтруктураПараметров);
		Исключение
			ТекстОшибки = Символы.ПС + СтрШаблон(НСтр("ru = 'Событие: %1.
					|Обработчик: ВыборкаДанных.
					|ПОД: %2.
					|
					|Ошибка выполнения обработчика.
					|%3.'"),
				КомпонентыОбмена.НаправлениеОбмена,
				ПравилоОбработки.Имя,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	" + ПравилоОбработки.ИмяТаблицыДляВыборки;
		
		ВыборкаДанных = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Возврат ВыборкаДанных;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийПравилКонвертации
// Функция - "обертка" вызова обработчика ПКО ПриОтправкеДанных.
//
// Параметры:
//  ДанныеИБ         - Ссылка на выгружаемый объект информационной базы.
//                     Может быть также структура ключевых свойств, если выгружается не объект, а ссылка.
//  ДанныеXDTO       - Структура, в которую выгружаются данные. По составу идентичная объекту XDTO.
//  ИмяОбработчика   - Строка, имя процедуры-обработчика в модуле менеджера.
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//  СтекВыгрузки     - Массив, содержит ссылки на выгружаемые объекты с учетом вложенности.
//
Процедура ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, Знач ИмяОбработчика, КомпонентыОбмена, СтекВыгрузки)
	МенеджерОбмена = КомпонентыОбмена.МенеджерОбмена;
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДанныеИБ", ДанныеИБ);
	СтруктураПараметров.Вставить("ДанныеXDTO", ДанныеXDTO);
	СтруктураПараметров.Вставить("КомпонентыОбмена", КомпонентыОбмена);
	СтруктураПараметров.Вставить("СтекВыгрузки", СтекВыгрузки);

	Попытка
		МенеджерОбмена.ВыполнитьПроцедуруМодуляМенеджера(ИмяОбработчика, СтруктураПараметров);
	Исключение
		ТекстОшибки = Символы.ПС + СтрШаблон(НСтр("ru = 'Событие: %1.
				|Обработчик: ПриОтправкеДанных.
				|Объект: %2.
				|
				|Ошибка выполнения обработчика.
				|%3.'"),
			КомпонентыОбмена.НаправлениеОбмена,
			ПредставлениеОбъектаДляПротокола(ДанныеИБ),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	ДанныеXDTO       = СтруктураПараметров.ДанныеXDTO;
	КомпонентыОбмена = СтруктураПараметров.КомпонентыОбмена;
	СтекВыгрузки     = СтруктураПараметров.СтекВыгрузки;
	
КонецПроцедуры

// Функция - "обертка" вызова обработчика ПКО ПриКонвертацииДанныхXDTO.
//
// Параметры:
//  ПолученныеДанные - Объект информационной базы, в который происходит загрузка данных.
//  ДанныеXDTO       - Структура, из которой загружаются данные. По составу идентичная загружаемому объекту XDTO.
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//  ИмяОбработчика   - Строка, имя процедуры-обработчика в модуле менеджера.
//
Процедура ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена, Знач ИмяОбработчика)
	
	МенеджерОбмена = КомпонентыОбмена.МенеджерОбмена;
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДанныеXDTO", ДанныеXDTO);
	СтруктураПараметров.Вставить("ПолученныеДанные", ПолученныеДанные);
	СтруктураПараметров.Вставить("КомпонентыОбмена", КомпонентыОбмена);
	
	Попытка
		МенеджерОбмена.ВыполнитьПроцедуруМодуляМенеджера(ИмяОбработчика, СтруктураПараметров);
	Исключение
		ТекстОшибки = Символы.ПС + СтрШаблон(НСтр("ru = 'Событие: %1.
				|Обработчик: ПриКонвертацииДанныхXDTO.
				|Объект: %2.
				|
				|Ошибка выполнения обработчика.
				|%3.'"),
			КомпонентыОбмена.НаправлениеОбмена,
			ПредставлениеОбъектаДляПротокола(ПолученныеДанные),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	ДанныеXDTO               = СтруктураПараметров.ДанныеXDTO;
	ПолученныеДанные         = СтруктураПараметров.ПолученныеДанные;
	КомпонентыОбмена         = СтруктураПараметров.КомпонентыОбмена;
	
КонецПроцедуры

// Функция - "обертка" вызова обработчика ПКО ПередЗаписьюПолученныхДанных.
//
// Параметры:
//  ПолученныеДанные   - Объект информационной базы, в который происходит загрузка данных.
//  ДанныеИБ           - Объект информационной базы, который найден при идентификации загружаемых данных. 
//                       Если объект соответствующий загружаемому не найден, ДанныеИБ = Неопределено.
//  КомпонентыОбмена   - Структура - содержит все правила и параметры обмена.
//  ИмяОбработчика     - Строка, имя процедуры-обработчика в модуле менеджера.
//  КонвертацияСвойств - Таблица значений, правила конвертации свойств объекта.
//                       Используется для определения состава свойств, подлежащих переносу из ПолученныеДанные в
//                       ДанныеИБ.
//
Процедура ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена, ИмяОбработчика, КонвертацияСвойств)
	
	МенеджерОбмена = КомпонентыОбмена.МенеджерОбмена;
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДанныеИБ", ДанныеИБ);
	СтруктураПараметров.Вставить("ПолученныеДанные", ПолученныеДанные);
	СтруктураПараметров.Вставить("КомпонентыОбмена", КомпонентыОбмена);
	СтруктураПараметров.Вставить("КонвертацияСвойств", КонвертацияСвойств);

	Попытка
		МенеджерОбмена.ВыполнитьПроцедуруМодуляМенеджера(ИмяОбработчика, СтруктураПараметров);
	Исключение
		ТекстОшибки = Символы.ПС + СтрШаблон(НСтр("ru = 'Событие: %1.
				|Обработчик: ПередЗаписьюПолученныхДанных.
				|Объект: %2.
				|
				|Ошибка выполнения обработчика.
				|%3.'"),
			КомпонентыОбмена.НаправлениеОбмена,
			ПредставлениеОбъектаДляПротокола(?(ДанныеИБ <> Неопределено, ДанныеИБ, ПолученныеДанные)),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	ДанныеИБ                 = СтруктураПараметров.ДанныеИБ;
	ПолученныеДанные         = СтруктураПараметров.ПолученныеДанные;
	КомпонентыОбмена         = СтруктураПараметров.КомпонентыОбмена;
	КонвертацияСвойств       = СтруктураПараметров.КонвертацияСвойств;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВедениеПротокола

// Возвращает объект типа структура, содержащий все возможные поля
// записи протокола выполнения (сообщения об ошибках и т.п.).
//
// Параметры:
//  КСообщенияОбОшибках - Строка, содержит код ошибки.
//  СтрокаОшибки        - Строка, содержит строку модуля где возникла ошибка.
//
// Возвращаемое значение:
//  Объект типа структура
// 
Функция ПолучитьСтруктуруЗаписиПротокола(КСообщенияОбОшибках = "", Знач СтрокаОшибки = "")

	СтруктураОшибки = Новый Структура();
	СтруктураОшибки.Вставить("ТипОбъекта");
	СтруктураОшибки.Вставить("Объект");
	СтруктураОшибки.Вставить("ОписаниеОшибки");
	СтруктураОшибки.Вставить("ПозицияМодуля");
	СтруктураОшибки.Вставить("КСообщенияОбОшибках");
	
	СтрокаМодуля              = ОтделитьРазделителем(СтрокаОшибки, "{");
	ОписаниеОшибки            = ОтделитьРазделителем(СтрокаМодуля, "}: ");
	
	Если ОписаниеОшибки <> "" Тогда
		
		СтруктураОшибки.ОписаниеОшибки         = ОписаниеОшибки;
		СтруктураОшибки.ПозицияМодуля          = СтрокаМодуля;
		
	КонецЕсли;
	
	Если СтруктураОшибки.КСообщенияОбОшибках <> "" Тогда
		
		СтруктураОшибки.КСообщенияОбОшибках           = КСообщенияОбОшибках;
		
	КонецЕсли;
	
	Возврат СтруктураОшибки;
	
КонецФункции

Функция РезультатВыполненияОбменаОшибка(РезультатВыполненияОбмена)
	
	Возврат РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка
		Или РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
	
КонецФункции

Функция РезультатВыполненияОбменаПредупреждение(РезультатВыполненияОбмена)
	
	Возврат РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями
		Или РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято;
	
КонецФункции

// Функция формирует представление объекта, для записи в протокол обмена.
//
// Параметры:
//   Объект - Ссылка - ссылка на любой ОМД.
//          - Объект - ОМД.
//          - ОбъектXDTO - объект XDTO/
//          - Структура.
//
// Возвращаемое значение:
//   Строка - строковое представление объекта.
//
Функция ПредставлениеОбъектаДляПротокола(Объект)
	
	ТипОбъекта = ТипЗнч(Объект);
	ПредставлениеОбъекта = Строка(Объект);
	НавигационнаяСсылка = "";
	Если ОбщегоНазначения.ЭтоСсылка(ТипОбъекта) Тогда
		НавигационнаяСсылка = " (" + ПолучитьНавигационнуюСсылку(Объект) + ")";
	Иначе
		Если ТипОбъекта = Тип("ОбъектXDTO") Тогда
			КоллекцияСвойств = Объект.Свойства();
			ПредставлениеОбъекта = "";
			ТипОбъекта = Объект.Тип().Имя;
			Если КоллекцияСвойств.Количество() > 0 И КоллекцияСвойств.Получить("КлючевыеСвойства") <> Неопределено Тогда
				КлючевыеСвойства = Объект.Получить("КлючевыеСвойства");
				КоллекцияСвойств = КлючевыеСвойства.Свойства();
				Наименование = "";
				Номер = "";
				Дата = "";
				Код = "";
				Если КоллекцияСвойств.Получить("Наименование") <> Неопределено Тогда
					Наименование = СокрЛП(КлючевыеСвойства.Получить("Наименование"));
				КонецЕсли;
				Если КоллекцияСвойств.Получить("Номер") <> Неопределено Тогда
					Номер = СокрЛП(КлючевыеСвойства.Получить("Номер"));
				КонецЕсли;
				Если КоллекцияСвойств.Получить("Дата") <> Неопределено Тогда
					Дата = КлючевыеСвойства.Получить("Дата");
				КонецЕсли;
				Если КоллекцияСвойств.Получить("Код") <> Неопределено Тогда
					Код = СокрЛП(КлючевыеСвойства.Получить("Код"));
				ИначеЕсли КоллекцияСвойств.Получить("КодВПрограмме") <> Неопределено Тогда
					Код = СокрЛП(КлючевыеСвойства.Получить("КодВПрограмме"));
				КонецЕсли;
				Если ЗначениеЗаполнено(Номер) Тогда
					ПредставлениеОбъекта = СтрШаблон(НСтр("ru = '%1 №%2 от %3'"), Наименование, Номер, Дата);
				ИначеЕсли ЗначениеЗаполнено(Код) Тогда
					ПредставлениеОбъекта = СтрШаблон(НСтр("ru = '%1, %2'"), Наименование, Код);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипОбъекта = Тип("Структура") Тогда
			Если Объект.Свойство("Ссылка") Тогда
				ТипОбъекта = ТипЗнч(Объект.Ссылка);
				ПредставлениеОбъекта = Строка(Объект.Ссылка);
				НавигационнаяСсылка = " (" + ПолучитьНавигационнуюСсылку(Объект.Ссылка) + ")";
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипОбъекта) Тогда
			Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
				НавигационнаяСсылка = " (" + ПолучитьНавигационнуюСсылку(Объект) + ")";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ШаблонПредставления = НСтр("ru = '%1, %2%3'");
	ПредставлениеОбъекта = СтрШаблон(ШаблонПредставления, ТипОбъекта, ПредставлениеОбъекта, НавигационнаяСсылка);
	
	Возврат ПредставлениеОбъекта;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииВерсионированияФорматаОбмена

Функция ВерсииФорматаОбмена(Знач УзелИнформационнойБазы)
	
	ВерсииФорматаОбмена = Новый Соответствие;
	
	Если ЗначениеЗаполнено(УзелИнформационнойБазы) Тогда
		МенеджерПланаОбмена(УзелИнформационнойБазы).ПолучитьВерсииФорматаОбмена(ВерсииФорматаОбмена);
	Иначе
		ОбменДаннымиПереопределяемый.ПриПолученииДоступныхВерсийФормата(ВерсииФорматаОбмена);
	КонецЕсли;
	
	Если ВерсииФорматаОбмена.Количество() = 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не заданы версии формата обмена.
			|Имя плана обмена: %1
			|Процедура: ПолучитьВерсииФорматаОбмена(<ВерсииФорматаОбмена>)'"),
			УзелИнформационнойБазы.Метаданные().Имя);
	КонецЕсли;
	
	Результат = Новый Соответствие;
	
	Для Каждого Версия Из ВерсииФорматаОбмена Цикл
		
		Результат.Вставить(СокрЛП(Версия.Ключ), Версия.Значение);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СортироватьВерсииФормата(Знач ВерсииФормата)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Версия");
	
	Для Каждого Версия Из ВерсииФормата Цикл
		
		Результат.Добавить().Версия = Версия.Ключ;
		
	КонецЦикла;
	
	Результат.Сортировать("Версия Убыв");
	
	Возврат Результат.ВыгрузитьКолонку("Версия");
КонецФункции

Процедура ПроверитьВерсию(Знач Версия)
	
	Версии = СтрРазделить(Версия, ".");
	
	Если Версии.Количество() = 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неканоническое представление версии формата обмена: <%1>.'"), Версия);
	КонецЕсли;
	
КонецПроцедуры

Функция МинимальнаяВерсияФорматаОбмена(Знач УзелИнформационнойБазы)
	
	Результат = Неопределено;
	
	ВерсииФормата = ВерсииФорматаОбмена(УзелИнформационнойБазы);
	
	Для Каждого ВерсияФормата Из ВерсииФормата Цикл
		
		Если Результат = Неопределено Тогда
			Результат = ВерсияФормата.Ключ;
			Продолжить;
		КонецЕсли;
		Если СравнитьВерсии(СокрЛП(Результат), СокрЛП(ВерсияФормата.Ключ)) > 0 Тогда
			Результат = ВерсияФормата.Ключ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Получает массив версий формата обмена, сортированные по убыванию.
// Параметры:
//  УзелИнформационнойБазы - ссылка на узел-корреспондент.
//
Функция ВерсииФорматаОбменаМассив(Знач УзелИнформационнойБазы)
	
	Возврат СортироватьВерсииФормата(ВерсииФорматаОбмена(УзелИнформационнойБазы));
	
КонецФункции

#КонецОбласти

#Область Прочее

// Разбирает строку на две части: до подстроки разделителя и после.
//
// Параметры:
//  Стр          - разбираемая строка;
//  Разделитель  - подстрока-разделитель:
//  Режим        - 0 - разделитель в возвращаемые подстроки не включается;
//                 1 - разделитель включается в левую подстроку;
//                 2 - разделитель включается в правую подстроку.
//
// Возвращаемое значение:
//  Правая часть строки - до символа-разделителя.
// 
Функция ОтделитьРазделителем(Стр, Знач Разделитель, Режим=0)

	ПраваяЧасть         = "";
	ПозРазделителя      = СтрНайти(Стр, Разделитель);
	ДлинаРазделителя    = СтрДлина(Разделитель);
	Если ПозРазделителя > 0 Тогда
		ПраваяЧасть	 = Сред(Стр, ПозРазделителя + ?(Режим=2, 0, ДлинаРазделителя));
		Стр          = СокрЛП(Лев(Стр, ПозРазделителя - ?(Режим=1, -ДлинаРазделителя + 1, 1)));
	КонецЕсли;

	Возврат(ПраваяЧасть);

КонецФункции // ОтделитьРазделителем()

// Возвращает строковое представление типа, свойственного для данных,
// соответствующих переданному объекту метаданных.
// Может быть использован как значение параметра встроенной функции Тип().
//
// Параметры:
//  ОбъектМетаданных - объект метаданных, по которому необходимо определить имя типа;
//
// Возвращаемое значение:
//  Строка - например, "СправочникСсылка.Номенклатура".
//
Функция ИмяТипаДанныхПоОбъектуМетаданных(Знач ОбъектМетаданных)
	
	ЛитералыТипа = СтрРазделить(ОбъектМетаданных.ПолноеИмя(), ".");
	ТипТаблицы = ЛитералыТипа[0];
	ИмяТаблицы = ЛитералыТипа[1];
	
	Если ТипТаблицы = "Константа" Тогда
		
		ШаблонИмениТипа = "[ТипТаблицы]МенеджерЗначения.[ИмяТаблицы]";
		
	ИначеЕсли ТипТаблицы = "РегистрСведений"
		Или ТипТаблицы = "РегистрНакопления"
		Или ТипТаблицы = "РегистрБухгалтерии"
		Или ТипТаблицы = "РегистрРасчета" Тогда
		
		ШаблонИмениТипа = "[ТипТаблицы]НаборЗаписей.[ИмяТаблицы]";
		
	Иначе
		ШаблонИмениТипа = "[ТипТаблицы]Ссылка.[ИмяТаблицы]";
	КонецЕсли;
	
	ШаблонИмениТипа = СтрЗаменить(ШаблонИмениТипа, "[ТипТаблицы]", ЛитералыТипа[0]);
	Результат = СтрЗаменить(ШаблонИмениТипа, "[ИмяТаблицы]", ЛитералыТипа[1]);
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьПриНеобходимостиПубличныйИдентификатор(
		ДанныеДляЗаписиВИБ,
		ПолученныеДанныеСсылка,
		УИДСтрокой,
		УзелОбмена,
		ПравилоКонвертации)
	
	ВариантИдентификации = СокрЛП(ПравилоКонвертации.ВариантИдентификации);
	Если Не (ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска"
		Или ВариантИдентификации = "ПоУникальномуИдентификатору")
		Или Не ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
	СтруктураЗаписи.Вставить("Ссылка", ?(ДанныеДляЗаписиВИБ = Неопределено, ПолученныеДанныеСсылка, ДанныеДляЗаписиВИБ.Ссылка));
	
	Если ДанныеДляЗаписиВИБ <> Неопределено
		И РегистрыСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов.ЗаписьЕстьВРегистре(СтруктураЗаписи) Тогда
		Возврат;
	КонецЕсли;
	
	ПубличныйИдентификатор = ?(ЗначениеЗаполнено(УИДСтрокой), УИДСтрокой, ПолученныеДанныеСсылка.УникальныйИдентификатор());
	СтруктураЗаписи.Вставить("Идентификатор", ПубличныйИдентификатор);
	
	РегистрыСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов.ДобавитьЗапись(СтруктураЗаписи, Истина);
	
КонецПроцедуры

Процедура ДобавитьВыгруженныеОбъектыВРегистрПубличныеИдентификаторы(КомпонентыОбмена)
	УзелДляОбмена = КомпонентыОбмена.УзелКорреспондента;
	СоставПланаОбмена = УзелДляОбмена.Метаданные().Состав;
	ТекстЗапроса = "ВЫБРАТЬ 
	|	ТаблицаИзменений.Ссылка
	|ИЗ 
	|	#ПолноеИмя#.Изменения КАК ТаблицаИзменений
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов КАК РПИ
	|ПО РПИ.УзелИнформационнойБазы = &Узел И РПИ.Ссылка = ТаблицаИзменений.Ссылка
	|ГДЕ ТаблицаИзменений.Узел = &Узел И ТаблицаИзменений.НомерСообщения <= &НомерСообщения
	|	И РПИ.Идентификатор ЕСТЬ NULL";
	Для Каждого ЭлементСостава Из СоставПланаОбмена Цикл
		Если НЕ ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ЭлементСостава.Метаданные) Тогда
			Продолжить;
		КонецЕсли;
		ПолноеИмяОбъекта = ЭлементСостава.Метаданные.ПолноеИмя();
		Запрос = Новый Запрос;
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#ПолноеИмя#", ПолноеИмяОбъекта);
		Запрос.УстановитьПараметр("Узел", УзелДляОбмена);
		Запрос.УстановитьПараметр("НомерСообщения", КомпонентыОбмена.НомерСообщенияПолученногоКорреспондентом);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("Ссылка", Выборка.Ссылка);
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", КомпонентыОбмена.УзелКорреспондента);
			СтруктураЗаписи.Вставить("Идентификатор", Выборка.Ссылка.УникальныйИдентификатор());
			РегистрыСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов.ДобавитьЗапись(СтруктураЗаписи, Истина);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция XMLБазоваяСхема()
	
	Возврат "http://www.1c.ru/SSL/Exchange/Message";
	
КонецФункции

Функция МенеджерПланаОбмена(Знач УзелИнформационнойБазы)
	
	Возврат ПланыОбмена[УзелИнформационнойБазы.Метаданные().Имя];
	
КонецФункции

#КонецОбласти

#КонецОбласти

