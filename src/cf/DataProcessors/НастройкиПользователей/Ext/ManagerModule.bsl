#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, отвечающие за получение настроек форм.

// Получить список настроек форм для указанного пользователя Пользователь.
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя информационной базы, для которого нужно
//                              получить настройки форм.
// 
// Возвращаемое значение
//   СписокЗначений - Список форм, для которых у переданного пользователя есть настройки.
//
Функция НастройкиВсехФорм(ИмяПользователя)
	
	СписокФорм = ФормыОбъектовМетаданных();
	
	// Добавление стандартных форм в список.
	СписокФорм.Добавить("ВнешняяОбработка.StandardEventLog.Форма.EventsJournal", 
		НСтр("ru='Стандартные.Журнал регистрации'") , Ложь, БиблиотекаКартинок.Форма);
	СписокФорм.Добавить("ВнешняяОбработка.StandardEventLog.Форма.EventForm", 
		НСтр("ru='Стандартные.Журнал регистрации, Событие'") , Ложь, БиблиотекаКартинок.Форма);
	СписокФорм.Добавить("ВнешняяОбработка.StandardEventLog.Форма.EventsJournalFilter", 
		НСтр("ru='Стандартные.Журнал регистрации, Настройка отбора событий'") , Ложь, БиблиотекаКартинок.Форма);
	СписокФорм.Добавить("ВнешняяОбработка.StandardFindByRef.Форма.MainForm", 
		НСтр("ru='Стандартные.Поиск ссылок на объект'") , Ложь, БиблиотекаКартинок.Форма);
	СписокФорм.Добавить("ВнешняяОбработка.StandardFullTextSearchManagement.Форма.MainForm", 
		НСтр("ru='Стандартные.Управление полнотекстовым поиском'") , Ложь, БиблиотекаКартинок.Форма);
	СписокФорм.Добавить("ВнешняяОбработка.StandardDocumentsPosting.Форма.MainForm", 
		НСтр("ru='Стандартные.Проведение документов'") , Ложь, БиблиотекаКартинок.Форма);
	СписокФорм.Добавить("ВнешняяОбработка.StandardDeleteMarkedObjects.Форма.Form", 
		НСтр("ru='Стандартные.Удаление помеченных объектов'") , Ложь, БиблиотекаКартинок.Форма);
	СписокФорм.Добавить("ВнешняяОбработка.StandardExternalDataSourceManagement.Форма.Form", 
		НСтр("ru='Стандартные.Управление внешними источниками данных'") , Ложь, БиблиотекаКартинок.Форма);
	СписокФорм.Добавить("ВнешняяОбработка.StandardTotalsManagement.Форма.MainForm", 
		НСтр("ru='Стандартные.Управление итогами'") , Ложь, БиблиотекаКартинок.Форма);
	СписокФорм.Добавить("ВнешняяОбработка.StandardActiveUsers.Форма.ActiveUsersListForm", 
		НСтр("ru='Стандартные.Активные пользователи'") , Ложь, БиблиотекаКартинок.Форма);
		
	Возврат СписокНастроекФорм(СписокФорм, ИмяПользователя);
	
КонецФункции

// Получает список форм, в конфигурации, при этом заполняются следующие поля:
// Значение - имя формы, идентифицирующее ее.
// Представление - синоним формы.
// Картинка - картинка соответствующая объекту, к которому форма имеет отношение.
//
// Параметры:
// Список - СписокЗначений - список значений, в который будут добавлены описания форм.
//
// Возвращаемое значение
// СписокЗначений - Список всех форм объектов метаданных.
//
Функция ФормыОбъектовМетаданных()
	
	СписокФорм = Новый СписокЗначений;
	
	Для Каждого Форма Из Метаданные.ОбщиеФормы Цикл
		СписокФорм.Добавить("ОбщаяФорма." + Форма.Имя, Форма.Синоним, Ложь, БиблиотекаКартинок.Форма);
	КонецЦикла;

	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("Форма");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.КритерииОтбора, "КритерийОтбора", НСтр("ru='Критерий отбора'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.КритерийОтбора, СписокФорм);
		
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.ХранилищаНастроек, "ХранилищеНастроек", НСтр("ru='Хранилище настроек'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.ХранилищеНастроек, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаОбъекта");
	ИменаСтандартныхФорм.Добавить("ФормаГруппы");
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбораГруппы");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.Справочники, "Справочник", НСтр("ru='Справочник'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.Справочник, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаОбъекта");
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.Документы, "Документ", НСтр("ru='Документ'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.Документ, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("Форма");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.ЖурналыДокументов, "ЖурналДокументов", НСтр("ru='Журнал документов'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.ЖурналДокументов, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.Перечисления, "Перечисление", НСтр("ru='Перечисление'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.Перечисление, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("Форма");
	ИменаСтандартныхФорм.Добавить("ФормаНастроек");
	ИменаСтандартныхФорм.Добавить("ФормаВарианта");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.Отчеты, "Отчет", НСтр("ru='Отчет'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.Отчет, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("Форма");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.Обработки, "Обработка", НСтр("ru='Обработка'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.Обработка, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаОбъекта");
	ИменаСтандартныхФорм.Добавить("ФормаГруппы");
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбораГруппы");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.ПланыВидовХарактеристик, "ПланВидовХарактеристик", НСтр("ru='План видов характеристик'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.ПланВидовХарактеристик, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаОбъекта");
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.ПланыСчетов, "ПланСчетов", НСтр("ru='План счетов'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.ПланСчетов, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаОбъекта");
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.ПланыВидовРасчета, "ПланВидовРасчета", НСтр("ru='План видов расчета'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.ПланВидовРасчета, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаЗаписи");
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.РегистрыСведений, "РегистрСведений", НСтр("ru='Регистр сведений'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.РегистрСведений, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.РегистрыНакопления, "РегистрНакопления", НСтр("ru='Регистр накопления'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.РегистрНакопления, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.РегистрыБухгалтерии, "РегистрБухгалтерии", НСтр("ru='Регистр бухгалтерии'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.РегистрБухгалтерии, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.РегистрыРасчета, "РегистрРасчета", НСтр("ru='Регистр расчета'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.РегистрРасчета, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаОбъекта");
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.БизнесПроцессы, "БизнесПроцесс", НСтр("ru='Бизнес-процесс'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.БизнесПроцесс, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаОбъекта");
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.Задачи, "Задача", НСтр("ru='Задача'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.Задача, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаЗаписи");
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.ВнешниеИсточникиДанных, "ВнешнийИсточникДанных", НСтр("ru='Внешние источники данных'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица, СписокФорм);

	Возврат СписокФорм;
КонецФункции

// Возвращает список настроек для указанных форм СписокФормы и указанного пользователя Пользователь. 
//
Функция СписокНастроекФорм(СписокФорм, ИмяПользователя)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Значение",      Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Пометка",       Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Картинка",      Новый ОписаниеТипов("Картинка"));
	Результат.Колонки.Добавить("СписокКлючей",  Новый ОписаниеТипов("СписокЗначений"));
	
	СтрокаРезультата = Неопределено;
	ОписаниеФормы    = Неопределено;
	
	Настройки     = ЧтениеНастроекИзХранилища(ХранилищеСистемныхНастроек, ИмяПользователя);
	КлючиНастроек = Настройки.ВыгрузитьКолонку("КлючОбъекта");
	
	ТекущееИмяФормы = "";
	Для Каждого КлючОбъекта Из КлючиНастроек Цикл
		ЧастиКлючаОбъекта = СтрРазделить(КлючОбъекта, "/");
		Если ЧастиКлючаОбъекта.Количество() < 2 Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиИмени = СтрРазделить(ЧастиКлючаОбъекта[0], ".", Ложь);
		Если ЧастиИмени.Количество() > 4 Тогда
			ИмяФормы = ЧастиИмени[0] + "." + ЧастиИмени[1] + "." + ЧастиИмени[2] + "." + ЧастиИмени[3];
		Иначе
			ИмяФормы = ЧастиКлючаОбъекта[0];
		КонецЕсли;
		Если ЗначениеЗаполнено(ИмяФормы) И ИмяФормы = ТекущееИмяФормы Тогда
			СтрокаРезультата.СписокКлючей.Добавить(КлючОбъекта, "", ОписаниеФормы.Пометка);
			Продолжить;
		КонецЕсли;
		
		ОписаниеФормы = СписокФорм.НайтиПоЗначению(ИмяФормы);
		Если ОписаниеФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРезультата = Результат.Добавить();
		СтрокаРезультата.Значение      = ОписаниеФормы.Значение;
		СтрокаРезультата.Представление = ОписаниеФормы.Представление;
		СтрокаРезультата.Пометка       = ОписаниеФормы.Пометка;
		СтрокаРезультата.Картинка      = ОписаниеФормы.Картинка;
		СтрокаРезультата.СписокКлючей.Добавить(КлючОбъекта, "", ОписаниеФормы.Пометка);
		
		ТекущееИмяФормы = ИмяФормы;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьСписокФормОбъектаМетаданных(СписокОбъектовМетаданных, ТипОбъектаМетаданных,
	ПредставлениеОбъектаМетаданных, ИменаСтандартныхФорм, Картинка, СписокФорм)
	
	Для Каждого Объект Из СписокОбъектовМетаданных Цикл
		
		Если ТипОбъектаМетаданных = "ВнешнийИсточникДанных" Тогда
			ПолучитьСписокФормВнешнихИсточниковДанных(Объект, ТипОбъектаМетаданных, ПредставлениеОбъектаМетаданных, Картинка, СписокФорм);
			Продолжить;
		КонецЕсли;
		
		ПрефиксИмени = ТипОбъектаМетаданных + "." + Объект.Имя;
		ПрефиксПредставления = Объект.Синоним + ".";
		
		Для Каждого Форма Из Объект.Формы Цикл
			ПредставлениеФормыИПометка = ПредставлениеФормы(Объект, Форма, ТипОбъектаМетаданных);
			ПредставлениеФормы = ПредставлениеФормыИПометка.ИмяФормы;
			Пометка = ПредставлениеФормыИПометка.ФормаОткрываемая;
			СписокФорм.Добавить(ПрефиксИмени + ".Форма." + Форма.Имя, ПрефиксПредставления + ПредставлениеФормы, Пометка, Картинка);
		КонецЦикла;
		
		Для Каждого ИмяСтандартнойФормы Из ИменаСтандартныхФорм Цикл
			
			Если Объект["Основная" + ИмяСтандартнойФормы] = Неопределено Тогда
				ПредставлениеФормыИПометка = ПредставлениеАвтогенерируемойФормы(Объект, ИмяСтандартнойФормы.Значение, ТипОбъектаМетаданных);
				ПредставлениеФормы = ПредставлениеФормыИПометка.ИмяФормы;
				Пометка = ПредставлениеФормыИПометка.ФормаОткрываемая;
				СписокФорм.Добавить(ПрефиксИмени + "." + ИмяСтандартнойФормы.Значение, ПрефиксПредставления + ПредставлениеФормы, Пометка, Картинка);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСписокФормВнешнихИсточниковДанных(Объект, ТипОбъектаМетаданных, 
	ПредставлениеОбъектаМетаданных, Картинка, СписокФорм)
	
	Для Каждого Таблица Из Объект.Таблицы Цикл
		
		ПрефиксИмени = ТипОбъектаМетаданных + "." + Объект.Имя + ".Таблица.";
		ПрефиксПредставления = Таблица.Синоним + ".";
		
		Для Каждого Форма Из Таблица.Формы Цикл
			ПредставлениеФормы = ПредставлениеФормы(Таблица, Форма, ТипОбъектаМетаданных).ИмяФормы;
			СписокФорм.Добавить(ПрефиксИмени + Таблица.Имя + ".Форма." + Форма.Имя, ПрефиксПредставления + ПредставлениеФормы, Ложь, Картинка);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, отвечающие за копирование и удаление всех настроек пользователя.

// Удаляет настройки пользователей из хранилища.
//
// Параметры:
// ОчищаемыеНастройки - Массив, где элемент массива - тип настроек, которые необходимо
//                      очистить. Например, НастройкиОтчетов или НастройкиВнешнегоВида.
// Источники - Массив, где элемент массива - Справочник.ПользовательСсылка. Массив пользователей,
//             у которых необходимо очистить настройки.
//
Процедура УдалитьНастройкиПользователей(ОчищаемыеНастройки, Источники, ТаблицаПользовательскихВариантовОтчетов = Неопределено) Экспорт
	
	СоответствиеНастройкаХранилище = Новый Соответствие;
	СоответствиеНастройкаХранилище.Вставить("НастройкиОтчетов", ХранилищеПользовательскихНастроекОтчетов);
	СоответствиеНастройкаХранилище.Вставить("НастройкиВнешнегоВида", ХранилищеСистемныхНастроек);
	СоответствиеНастройкаХранилище.Вставить("ДанныеФорм", ХранилищеНастроекДанныхФорм);
	СоответствиеНастройкаХранилище.Вставить("ПерсональныеНастройки", ХранилищеОбщихНастроек);
	СоответствиеНастройкаХранилище.Вставить("Избранное", ХранилищеСистемныхНастроек);
	СоответствиеНастройкаХранилище.Вставить("НастройкиПечати", ХранилищеСистемныхНастроек);
	
	Для Каждого ОчищаемаяНастройка Из ОчищаемыеНастройки Цикл
		МенеджерНастроек = СоответствиеНастройкаХранилище[ОчищаемаяНастройка];
		
		Для Каждого Источник Из Источники Цикл
			
			Если ОчищаемаяНастройка = "ПрочиеПользовательскиеНастройки" Тогда
				// Получение пользовательских настроек.
				СведенияОПользователе = Новый Структура;
				СведенияОПользователе.Вставить("ПользовательСсылка", Источник);
				СведенияОПользователе.Вставить("ИмяПользователяИнформационнойБазы", ИмяПользователяИБ(Источник));
				ПрочиеНастройкиПользователей = Новый Структура;
				ПользователиСлужебный.ПриПолученииПрочихНастроек(СведенияОПользователе, ПрочиеНастройкиПользователей);
				Ключи = Новый СписокЗначений;
				МассивПрочихНастроек = Новый Массив;
				Если ПрочиеНастройкиПользователей.Количество() <> 0 Тогда
					
					Для Каждого ПрочаяНастройка Из ПрочиеНастройкиПользователей Цикл
						ПрочиеНастройкиСтруктура = Новый Структура;
						Если ПрочаяНастройка.Ключ = "НастройкаБыстрогоДоступа" Тогда
							СписокНастроек = ПрочаяНастройка.Значение.СписокНастроек;
							Для Каждого Элемент Из СписокНастроек Цикл
								Ключи.Добавить(Элемент.Объект, Элемент.Идентификатор);
							КонецЦикла;
							ПрочиеНастройкиСтруктура.Вставить("ИдентификаторНастройки", "НастройкаБыстрогоДоступа");
							ПрочиеНастройкиСтруктура.Вставить("ЗначениеНастройки", Ключи);
						Иначе
							ПрочиеНастройкиСтруктура.Вставить("ИдентификаторНастройки", ПрочаяНастройка.Ключ);
							ПрочиеНастройкиСтруктура.Вставить("ЗначениеНастройки", ПрочаяНастройка.Значение.СписокНастроек);
						КонецЕсли;
						
						ПользователиСлужебный.ПриУдаленииПрочихНастроек(СведенияОПользователе, ПрочиеНастройкиСтруктура);
					КонецЦикла;
					
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			ПользовательИБ = ИмяПользователяИБ(Источник);
			
			Если ОчищаемаяНастройка = "НастройкиОтчетов" Тогда
				
				Если ТаблицаПользовательскихВариантовОтчетов = Неопределено Тогда
					ТаблицаПользовательскихВариантовОтчетов = ПользовательскиеВариантыОтчетов(ПользовательИБ);
				КонецЕсли;
				
				Для Каждого ВариантОтчета Из ТаблицаПользовательскихВариантовОтчетов Цикл
					
					СтандартнаяОбработка = Истина;
					
					ИнтеграцияСтандартныхПодсистем.ПриУдаленииПользовательскихВариантовОтчета(ВариантОтчета,
						ПользовательИБ, СтандартнаяОбработка);
					
					Если СтандартнаяОбработка Тогда
						ХранилищеВариантовОтчетов.Удалить(ВариантОтчета.КлючОбъекта, ВариантОтчета.КлючВарианта, ПользовательИБ);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			НастройкиИзХранилища = СписокНастроек(ПользовательИБ, МенеджерНастроек, ОчищаемаяНастройка);
			УдалитьНастройки(МенеджерНастроек, НастройкиИзХранилища, ПользовательИБ);
			
			ПользователиСлужебный.УстановитьНачальныеНастройки(ПользовательИБ, Источник);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьНастройки(МенеджерНастроек, НастройкиИзХранилища, ИмяПользователя)
	
	Для Каждого Настройка Из НастройкиИзХранилища Цикл
		КлючОбъекта = Настройка.КлючОбъекта;
		КлючНастроек = Настройка.КлючНастроек;
		МенеджерНастроек.Удалить(КлючОбъекта, КлючНастроек, ИмяПользователя);
	КонецЦикла;
	
КонецПроцедуры

Функция КопированиеНастроекПользователей(ПользовательИсточникСсылка, ПользователиПриемник, КопируемыеНастройки,
										НеСкопированныеНастройкиОтчетов = Неопределено) Экспорт
	
	СоответствиеНастройкаХранилище = Новый Соответствие;
	СоответствиеНастройкаХранилище.Вставить("НастройкиОтчетов", ХранилищеПользовательскихНастроекОтчетов);
	СоответствиеНастройкаХранилище.Вставить("НастройкиВнешнегоВида", ХранилищеСистемныхНастроек);
	СоответствиеНастройкаХранилище.Вставить("ДанныеФорм", ХранилищеНастроекДанныхФорм);
	СоответствиеНастройкаХранилище.Вставить("ПерсональныеНастройки", ХранилищеОбщихНастроек);
	СоответствиеНастройкаХранилище.Вставить("Избранное", ХранилищеСистемныхНастроек);
	СоответствиеНастройкаХранилище.Вставить("НастройкиПечати", ХранилищеСистемныхНастроек);
	СоответствиеНастройкаХранилище.Вставить("ВариантыОтчетов", ХранилищеВариантовОтчетов);
	ЕстьНастройки = Ложь;
	ТаблицаВариантовОтчетов = Неопределено;
	ПользовательИсточник = ИмяПользователяИБ(ПользовательИсточникСсылка);
	
	// Получение пользовательских настроек.
	СведенияОПользователе = Новый Структура;
	СведенияОПользователе.Вставить("ПользовательСсылка", ПользовательИсточникСсылка);
	СведенияОПользователе.Вставить("ИмяПользователяИнформационнойБазы", ПользовательИсточник);
	ПрочиеНастройкиПользователей = Новый Структура;
	ПользователиСлужебный.ПриПолученииПрочихНастроек(СведенияОПользователе, ПрочиеНастройкиПользователей);
	Ключи = Новый СписокЗначений;
	МассивПрочихНастроек = Новый Массив;
	Если ПрочиеНастройкиПользователей.Количество() <> 0 Тогда
		
		Для Каждого ПрочаяНастройка Из ПрочиеНастройкиПользователей Цикл
			ПрочиеНастройкиСтруктура = Новый Структура;
			Если ПрочаяНастройка.Ключ = "НастройкаБыстрогоДоступа" Тогда
				СписокНастроек = ПрочаяНастройка.Значение.СписокНастроек;
				Для Каждого Элемент Из СписокНастроек Цикл
					Ключи.Добавить(Элемент.Объект, Элемент.Идентификатор);
				КонецЦикла;
				ПрочиеНастройкиСтруктура.Вставить("ИдентификаторНастройки", "НастройкаБыстрогоДоступа");
				ПрочиеНастройкиСтруктура.Вставить("ЗначениеНастройки", Ключи);
			Иначе
				ПрочиеНастройкиСтруктура.Вставить("ИдентификаторНастройки", ПрочаяНастройка.Ключ);
				ПрочиеНастройкиСтруктура.Вставить("ЗначениеНастройки", ПрочаяНастройка.Значение.СписокНастроек);
			КонецЕсли;
			МассивПрочихНастроек.Добавить(ПрочиеНастройкиСтруктура);
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого КопируемаяНастройка Из КопируемыеНастройки Цикл
		МенеджерНастроек = СоответствиеНастройкаХранилище[КопируемаяНастройка];
		
		Если КопируемаяНастройка = "ПрочиеПользовательскиеНастройки" Тогда
			Для Каждого ПользовательПриемник Из ПользователиПриемник Цикл
				СведенияОПользователе = Новый Структура;
				СведенияОПользователе.Вставить("ПользовательСсылка", ПользовательПриемник);
				СведенияОПользователе.Вставить("ИмяПользователяИнформационнойБазы", ИмяПользователяИБ(ПользовательПриемник));
				Для Каждого ЭлементМассива Из МассивПрочихНастроек Цикл
					ПользователиСлужебный.ПриСохраненииПрочихНастроек(СведенияОПользователе, ЭлементМассива);
				КонецЦикла;
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		Если КопируемаяНастройка = "НастройкиОтчетов" Тогда
			
			Если ТипЗнч(СоответствиеНастройкаХранилище["ВариантыОтчетов"]) = Тип("СтандартноеХранилищеНастроекМенеджер") Тогда
				ТаблицаВариантовОтчетов = ПользовательскиеВариантыОтчетов(ПользовательИсточник);
				ТаблицаКлючейИТиповВариантовОтчетов = ПолучениеКлючейВариантовОтчетов(ТаблицаВариантовОтчетов);
				КопируемыеНастройки.Добавить("ВариантыОтчетов");
			КонецЕсли;
			
		КонецЕсли;
		
		НастройкиИзХранилища = СписокНастроек(
			ПользовательИсточник, МенеджерНастроек, КопируемаяНастройка, ТаблицаКлючейИТиповВариантовОтчетов, Истина);
		
		Если НастройкиИзХранилища.Количество() <> 0 Тогда
			ЕстьНастройки = Истина;
		КонецЕсли;
		
		Для Каждого ПользовательПриемник Из ПользователиПриемник Цикл
			СкопироватьНастройки(
				МенеджерНастроек, НастройкиИзХранилища, ПользовательИсточник, ПользовательПриемник, НеСкопированныеНастройкиОтчетов);
			ТаблицаВариантовОтчетов = Неопределено;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЕстьНастройки;
	
КонецФункции

Функция СписокНастроек(ИмяПользователя, МенеджерНастроек, 
						КопируемаяНастройка, ТаблицаКлючейИТиповВариантовОтчетов = Неопределено, ДляКопирования = Ложь)
	
	ПолучитьИзбранное = Ложь;
	ПолучитьНастройкиПечати = Ложь;
	Если КопируемаяНастройка = "Избранное" Тогда
		ПолучитьИзбранное = Истина;
	КонецЕсли;
	
	Если КопируемаяНастройка = "НастройкиПечати" Тогда
		ПолучитьНастройкиПечати = Истина;
	КонецЕсли;
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("КлючОбъекта");
	ТаблицаНастроек.Колонки.Добавить("КлючНастроек");
	
	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", ИмяПользователя);
	
	ВыборкаНастроек = МенеджерНастроек.Выбрать(Отбор);
	
	Пропустить = Ложь;
	Пока СледующаяНастройка(ВыборкаНастроек, Пропустить) Цикл
		
		Если Пропустить Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПолучитьИзбранное
			И СтрНайти(ВыборкаНастроек.КлючОбъекта, "ИзбранноеРаботыПользователя") <> 0 Тогда
			Продолжить;
		ИначеЕсли ПолучитьИзбранное Тогда
			
			Если СтрНайти(ВыборкаНастроек.КлючОбъекта, "ИзбранноеРаботыПользователя") = 0 Тогда
				Продолжить;
			ИначеЕсли СтрНайти(ВыборкаНастроек.КлючОбъекта, "ИзбранноеРаботыПользователя") <> 0 Тогда
				ДобавитьСтрокуВТаблицуЗначений(ТаблицаНастроек, ВыборкаНастроек);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПолучитьНастройкиПечати
			И СтрНайти(ВыборкаНастроек.КлючОбъекта, "НастройкиПечатиТабличногоДокумента") <> 0 Тогда
			Продолжить;
		ИначеЕсли ПолучитьНастройкиПечати Тогда
			
			Если СтрНайти(ВыборкаНастроек.КлючОбъекта, "НастройкиПечатиТабличногоДокумента") = 0 Тогда
				Продолжить;
			ИначеЕсли СтрНайти(ВыборкаНастроек.КлючОбъекта, "НастройкиПечатиТабличногоДокумента") <> 0 Тогда
				ДобавитьСтрокуВТаблицуЗначений(ТаблицаНастроек, ВыборкаНастроек);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТаблицаКлючейИТиповВариантовОтчетов <> Неопределено Тогда
			
			НайденныйВариантОтчета = ТаблицаКлючейИТиповВариантовОтчетов.Найти(ВыборкаНастроек.КлючОбъекта, "КлючВарианта");
			Если НайденныйВариантОтчета <> Неопределено Тогда
				
				Если Не НайденныйВариантОтчета.Пометка Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДляКопирования И ПропуститьНастройку(ВыборкаНастроек.КлючОбъекта, ВыборкаНастроек.КлючНастроек) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьСтрокуВТаблицуЗначений(ТаблицаНастроек, ВыборкаНастроек);
	КонецЦикла;
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Функция СледующаяНастройка(ВыборкаНастроек, Пропустить)
	
	Попытка 
		Пропустить = Ложь;
		Возврат ВыборкаНастроек.Следующий();
	Исключение
		Пропустить = Истина;
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Процедура СкопироватьНастройки(МенеджерНастроек, ТаблицаНастроек, ПользовательИсточник,
								ПользовательПриемник, НеСкопированныеНастройкиОтчетов)
	
	ПользовательПриемникИБ = ИмяПользователяИБ(ПользовательПриемник);
	ТекущийПользователь = Неопределено;
	Для Каждого Настройка Из ТаблицаНастроек Цикл
		
		КлючОбъекта = Настройка.КлючОбъекта;
		КлючНастройки = Настройка.КлючНастроек;
		
		Если МенеджерНастроек = ХранилищеПользовательскихНастроекОтчетов
			Или МенеджерНастроек = ХранилищеВариантовОтчетов Тогда
			
			МассивДоступныхОтчетов = ОтчетыДоступныеПользователю(ПользовательПриемникИБ);
			КлючОтчета = СтрРазделить(КлючОбъекта, "/", Ложь);
			Если МассивДоступныхОтчетов.Найти(КлючОтчета[0]) = Неопределено Тогда
				
				Если МенеджерНастроек = ХранилищеПользовательскихНастроекОтчетов
					И НеСкопированныеНастройкиОтчетов <> Неопределено Тогда
					
					Если ТекущийПользователь = Неопределено Тогда
						СтрокаТаблицы = НеСкопированныеНастройкиОтчетов.Добавить();
						СтрокаТаблицы.Пользователь = ПользовательПриемник.Наименование;
						ТекущийПользователь = ПользовательПриемник.Наименование;
					КонецЕсли;
					
					Если СтрокаТаблицы.СписокОтчетов.НайтиПоЗначению(КлючОтчета[0]) = Неопределено Тогда
						СтрокаТаблицы.СписокОтчетов.Добавить(КлючОтчета[0]);
					КонецЕсли;
					
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			Значение = МенеджерНастроек.Загрузить(КлючОбъекта, КлючНастройки, , ПользовательИсточник);
		Исключение
			Продолжить;
		КонецПопытки;
		ОписаниеНастроек = МенеджерНастроек.ПолучитьОписание(КлючОбъекта, КлючНастройки, ПользовательИсточник);
		МенеджерНастроек.Сохранить(КлючОбъекта, КлючНастройки, Значение,
			ОписаниеНастроек, ПользовательПриемникИБ);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, отвечающие за копирование и удаление выбранных настроек настроек.

// Копирует пользовательские настройки отчетов.
// 
// Параметры:
// ПользовательИсточник - Строка - Имя пользователя информационной базы, от которого берутся настройки для копирования.
// ПользователиПриемник - Массив элементов ПользовательСсылка - Пользователи, которым необходимо скопировать выбранные
//                        настройки.
// МассивНастроекДляКопирования - Массив - элемент массива - СписокЗначений, в котором содержатся ключи выбранных
//                                         настроек.
//
Процедура СкопироватьНастройкиОтчетовИПерсональныеНастройки(МенеджерНастроек, ПользовательИсточник,
		ПользователиПриемник, МассивНастроекДляКопирования, НеСкопированныеНастройкиОтчетов = Неопределено) Экспорт
	
	Для Каждого ПользовательПриемник Из ПользователиПриемник Цикл
		ТекущийПользователь = Неопределено;
		
		Для Каждого Элемент Из МассивНастроекДляКопирования Цикл
				
			Для Каждого ЭлементНастроек Из Элемент Цикл
				
				КлючНастроек = ЭлементНастроек.Представление;
				КлючОбъекта = ЭлементНастроек.Значение;
				Если ПропуститьНастройку(КлючОбъекта, КлючНастроек) Тогда
					Продолжить;
				КонецЕсли;
				Настройка = МенеджерНастроек.Загрузить(КлючОбъекта, КлючНастроек, , ПользовательИсточник);
				ОписаниеНастройки = МенеджерНастроек.ПолучитьОписание(КлючОбъекта, КлючНастроек, ПользовательИсточник);
				
				Если Настройка <> Неопределено Тогда
					
					ПользовательПриемникИБ = Обработки.НастройкиПользователей.ИмяПользователяИБ(ПользовательПриемник);
					
					Если МенеджерНастроек = ХранилищеПользовательскихНастроекОтчетов Тогда
						МассивДоступныхОтчетов = ОтчетыДоступныеПользователю(ПользовательПриемникИБ);
						КлючОтчета = СтрРазделить(КлючОбъекта, "/", Ложь);
						
						Если МассивДоступныхОтчетов.Найти(КлючОтчета[0]) = Неопределено Тогда
							
							Если ТекущийПользователь = Неопределено Тогда
								СтрокаТаблицы = НеСкопированныеНастройкиОтчетов.Добавить();
								СтрокаТаблицы.Пользователь = ПользовательПриемник.Наименование;
								ТекущийПользователь = ПользовательПриемник.Наименование;
							КонецЕсли;
							
							Если СтрокаТаблицы.СписокОтчетов.НайтиПоЗначению(КлючОтчета[0]) = Неопределено Тогда
								СтрокаТаблицы.СписокОтчетов.Добавить(КлючОтчета[0]);
							КонецЕсли;
								
							Продолжить;
						КонецЕсли;
						
					КонецЕсли;
					
					МенеджерНастроек.Сохранить(КлючОбъекта, КлючНастроек, Настройка, ОписаниеНастройки, ПользовательПриемникИБ);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Копирует настройки внешнего вида.
// 
// Параметры:
// ПользовательИсточник - Строка - Имя пользователя информационной базы, от которого берутся настройки для копирования.
// ПользователиПриемник - Массив элементов ПользовательСсылка - Пользователи, которым необходимо скопировать выбранные
//                        настройки.
// МассивНастроекДляКопирования - Массив - элемент массива - СписокЗначений, в котором содержатся ключи выбранных
//                                         настроек.
//
Процедура СкопироватьНастройкиВнешнегоВида(ПользовательИсточник, ПользователиПриемник, МассивНастроекДляКопирования) Экспорт
	
	Для Каждого Элемент Из МассивНастроекДляКопирования Цикл
		
		Для Каждого ЭлементНастроек Из Элемент Цикл
			КлючНастроек = ЭлементНастроек.Представление;
			КлючОбъекта = ЭлементНастроек.Значение;
			
			Если КлючНастроек = "Интерфейс"
				Или КлючНастроек = "Прочие" Тогда
				СкопироватьНастройкиРабочегоСтола(КлючОбъекта, ПользовательИсточник, ПользователиПриемник);
				Продолжить;
			КонецЕсли;
			
			Настройка = ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта, КлючНастроек, , ПользовательИсточник);
			Если Настройка <> Неопределено Тогда
				
				Для Каждого ПользовательПриемник Из ПользователиПриемник Цикл
					ПользовательПриемникИБ = Обработки.НастройкиПользователей.ИмяПользователяИБ(ПользовательПриемник);
					ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, КлючНастроек, Настройка, , ПользовательПриемникИБ);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьНастройкиРабочегоСтола(КлючОбъекта, ПользовательИсточник, ПользователиПриемник)
	
	Настройка = ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта, "", , ПользовательИсточник);
	Если Настройка <> Неопределено Тогда
		
		Для Каждого ПользовательПриемник Из ПользователиПриемник Цикл
			ПользовательПриемникИБ = Обработки.НастройкиПользователей.ИмяПользователяИБ(ПользовательПриемник);
			ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, "", Настройка, , ПользовательПриемникИБ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьНастройкиВыбраннымПользователям(Пользователи, МассивНастроекДляУдаления, НазваниеХранилища) Экспорт
	
	Для Каждого Пользователь Из Пользователи Цикл
		ПользовательИнформационнойБазы = Обработки.НастройкиПользователей.ИмяПользователяИБ(Пользователь);
		
		СведенияОПользователе = Новый Структура;
		СведенияОПользователе.Вставить("ИмяПользователяИнформационнойБазы", ПользовательИнформационнойБазы);
		СведенияОПользователе.Вставить("ПользовательСсылка", Пользователь);
		УдалитьВыбранныеНастройки(СведенияОПользователе, МассивНастроекДляУдаления, НазваниеХранилища);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьВыбранныеНастройки(СведенияОПользователе, МассивНастроекДляУдаления, ИмяХранилища) Экспорт
	
	ПользовательИБ     = СведенияОПользователе.ИмяПользователяИнформационнойБазы;
	ПользовательСсылка = СведенияОПользователе.ПользовательСсылка;
	
	МенеджерНастроек = ХранилищеНастроекПоИмени(ИмяХранилища);
	Если ИмяХранилища = "ХранилищеПользовательскихНастроекОтчетов" Или ИмяХранилища = "ХранилищеОбщихНастроек" Тогда
		
		Для Каждого Элемент Из МассивНастроекДляУдаления Цикл
			
			Для Каждого Настройка Из Элемент Цикл
				МенеджерНастроек.Удалить(Настройка.Значение, Настройка.Представление, ПользовательИБ);
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяХранилища = "ХранилищеСистемныхНастроек" Тогда
		
		УстановитьНачальныеНастройки = Ложь;
		
		Для Каждого Элемент Из МассивНастроекДляУдаления Цикл
			
			Для Каждого Настройка Из Элемент Цикл
				
				Если Настройка.Представление = "Интерфейс" Или Настройка.Представление = "Прочие" Тогда
					
					МенеджерНастроек.Удалить(Настройка.Значение, , ПользовательИБ);
					
					Если Настройка.Значение = "Общее/НастройкиКлиентскогоПриложения" 
						Или Настройка.Значение = "Общее/ПанельРазделов/НастройкиКомандногоИнтерфейса" 
						Или Настройка.Значение = "Общее/НастройкиИнтерфейсаКлиентскогоПриложения" Тогда
						
						УстановитьНачальныеНастройки = Истина;
						
					КонецЕсли;
					
				Иначе
					
					МенеджерНастроек.Удалить(Настройка.Значение, Настройка.Представление, ПользовательИБ);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если УстановитьНачальныеНастройки Тогда
			ПользователиСлужебный.УстановитьНачальныеНастройки(ПользовательИБ, ПользовательСсылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьВариантыОтчетов(МассивВариантовОтчетов, ТаблицаПользовательскихВариантовОтчетов, ПользовательИнформационнойБазы) Экспорт
	
	Для Каждого Настройка Из МассивВариантовОтчетов Цикл
		
		КлючОбъекта = СтрРазделить(Настройка[0].Значение, "/", Ложь);
		КлючОтчета = КлючОбъекта[0];
		КлючВарианта = КлючОбъекта[1];
		
		ПараметрыОтбора = Новый Структура("КлючВарианта", КлючВарианта);
		НайденныйВариантОтчета = ТаблицаПользовательскихВариантовОтчетов.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныйВариантОтчета.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтандартнаяОбработка = Истина;
		
		ИнтеграцияСтандартныхПодсистем.ПриУдаленииПользовательскихВариантовОтчета(НайденныйВариантОтчета[0],
			ПользовательИнформационнойБазы, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка Тогда
			ХранилищеВариантовОтчетов.Удалить(КлючОтчета, КлючВарианта, ПользовательИнформационнойБазы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьВариантыОтчетов(МассивВариантовОтчетов, ТаблицаПользовательскихВариантовОтчетов,
										ПользовательИнформационнойБазы, ПользователиПолучатели) Экспорт
		
		Если ТипЗнч(ПользовательИнформационнойБазы) <> Тип("Строка") Тогда
			ПользовательИнформационнойБазы = ИмяПользователяИБ(ПользовательИнформационнойБазы);
		КонецЕсли;
		
		Для Каждого Настройка Из МассивВариантовОтчетов Цикл
		
		КлючОбъекта = СтрРазделить(Настройка[0].Значение, "/", Ложь);
		КлючОтчета = КлючОбъекта[0];
		КлючВарианта = КлючОбъекта[1];
		
		ПараметрыОтбора = Новый Структура("КлючВарианта", КлючВарианта);
		НайденныйВариантОтчета = ТаблицаПользовательскихВариантовОтчетов.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныйВариантОтчета[0].СтандартнаяОбработка Тогда
			
			Попытка
			Значение = ХранилищеВариантовОтчетов.Загрузить(КлючОтчета, КлючВарианта, , ПользовательИнформационнойБазы);
			Исключение
				Продолжить;
			КонецПопытки;
			ОписаниеНастройки = ХранилищеВариантовОтчетов.ПолучитьОписание(КлючОтчета, КлючВарианта, ПользовательИнформационнойБазы);
			
			Для Каждого ПолучательНастроек Из ПользователиПолучатели Цикл
				ПолучательНастроек = ИмяПользователяИБ(ПолучательНастроек);
				ХранилищеВариантовОтчетов.Сохранить(КлючОтчета, КлючВарианта, Значение, ОписаниеНастройки, ПолучательНастроек);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для получения списка пользователей и групп пользователей.

// Получает список пользователей из справочника Пользователи, отсеивая недействительных пользователей, неразделенных
// пользователей при включенном разделителе, а так же пользователей с пустым идентификатором.
// 
// Параметры:
// ПользовательИсточник - СправочникСсылка - Пользователь, которого необходимо убрать из итоговой таблицы пользователей.
// ТаблицаПользователей - ТаблицаЗначений - Таблица, в которую записываются отобранные пользователи.
// ПользовательВнешний - Булево - Если Истина, то отбираются пользователи из справочника ВнешниеПользователи.
//
Функция ПользователиДляКопирования(ПользовательИсточник, ТаблицаПользователей, ПользовательВнешний, Очистка = Ложь) Экспорт
	
	СписокПользователей = ?(ПользовательВнешний, СписокВсехВнешнихПользователей(ПользовательИсточник),
		СписокВсехПользователей(ПользовательИсточник, Очистка));
	Для Каждого ПользовательСсылка Из СписокПользователей Цикл
		СтрокаТаблицыПользователей = ТаблицаПользователей.Добавить();
		СтрокаТаблицыПользователей.Пользователь = ПользовательСсылка.Пользователь;
	КонецЦикла;
	ТаблицаПользователей.Сортировать("Пользователь Возр");
	
	Возврат ТаблицаПользователей;
	
КонецФункции

Функция СписокВсехПользователей(ПользовательИсточник, Очистка)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.Недействителен"
	+ ?(Очистка И Не ОбщегоНазначенияПовтИсп.РазделениеВключено(),"", Символы.ПС + "	И НЕ Пользователи.Служебный")
	+ ?(Очистка,"", Символы.ПС + "	И НЕ Пользователи.ПометкаУдаления") + Символы.ПС
	+ "	И Пользователи.Ссылка <> &ПользовательИсточник
	|	И Пользователи.ИдентификаторПользователяИБ <> &ПустойИдентификаторПользователяИБ";
	Запрос.Параметры.Вставить("ПользовательИсточник", ПользовательИсточник);
	Запрос.Параметры.Вставить("ПустойИдентификаторПользователяИБ", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция СписокВсехВнешнихПользователей(ПользовательИсточник)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.ПометкаУдаления
	|	И Пользователи.Ссылка <> &ПользовательИсточник
	|	И Пользователи.ИдентификаторПользователяИБ <> &ПустойИдентификаторПользователяИБ";
	Запрос.Параметры.Вставить("ПользовательИсточник", ПользовательИсточник);
	Запрос.Параметры.Вставить("ПустойИдентификаторПользователяИБ", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Формирует дерево значений групп пользователей.
// 
// Параметры:
// ДеревоГрупп - ДеревоЗначений - Дерево, которое заполняется группами пользователей.
// ПользовательВнешний - Булево - Если Истина, то отбираются пользователи из справочника ГруппыВнешнихПользователей.
Процедура ЗаполнитьДеревоГрупп(ДеревоГрупп, ПользовательВнешний) Экспорт
	
	ГруппыМассив = Новый Массив;
	МассивГруппРодителей = Новый Массив;
	СписокГруппИПолныйСостав = ГруппыПользователей(ПользовательВнешний);
	ГруппыПользователейСписок = СписокГруппИПолныйСостав.ГруппыПользователейСписок;
	ТаблицаГруппыИСостав = СписокГруппИПолныйСостав.ТаблицаГруппыИСостав;
	
	Если ПользовательВнешний Тогда
		ПустаяГруппа = Справочники.ГруппыВнешнихПользователей.ПустаяСсылка();
	Иначе
		ПустаяГруппа = Справочники.ГруппыПользователей.ПустаяСсылка();
	КонецЕсли;
	
	СформироватьОтбор(ГруппыПользователейСписок, ПустаяГруппа, ГруппыМассив);
	
	Пока ГруппыМассив.Количество() > 0 Цикл
		МассивГруппРодителей.Очистить();
		
		Для Каждого Группа Из ГруппыМассив Цикл
			
			Если Группа.Родитель = ПустаяГруппа Тогда
				НоваяСтрокаГрупп = ДеревоГрупп.Строки.Добавить();
				НоваяСтрокаГрупп.Группа = Группа.Ссылка;
				СоставГруппы = СоставГруппыПользователей(Группа.Ссылка, ПользовательВнешний);
				ПолныйСоставГруппы = ПолныйСоставГруппыПользователей(ТаблицаГруппыИСостав, Группа.Ссылка);
				НоваяСтрокаГрупп.Состав = СоставГруппы;
				НоваяСтрокаГрупп.ПолныйСостав = ПолныйСоставГруппы;
				НоваяСтрокаГрупп.Картинка = 3;
			Иначе
				ГруппаРодитель = ДеревоГрупп.Строки.НайтиСтроки(Новый Структура("Группа", Группа.Родитель), Истина);
				НоваяСтрокаПодчиненныхГрупп = ГруппаРодитель[0].Строки.Добавить();
				НоваяСтрокаПодчиненныхГрупп.Группа = Группа.Ссылка;
				СоставГруппы = СоставГруппыПользователей(Группа.Ссылка, ПользовательВнешний);
				ПолныйСоставГруппы = ПолныйСоставГруппыПользователей(ТаблицаГруппыИСостав, Группа.Ссылка);
				НоваяСтрокаПодчиненныхГрупп.Состав = СоставГруппы;
				НоваяСтрокаПодчиненныхГрупп.ПолныйСостав = ПолныйСоставГруппы;
				НоваяСтрокаПодчиненныхГрупп.Картинка = 3;
			КонецЕсли;
			
			МассивГруппРодителей.Добавить(Группа.Ссылка);
		КонецЦикла;
		ГруппыМассив.Очистить();
		
		Для Каждого Элемент Из МассивГруппРодителей Цикл
			СформироватьОтбор(ГруппыПользователейСписок, Элемент, ГруппыМассив);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ГруппыПользователей(ПользовательВнешний)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправочникГруппыПользователей.Ссылка КАК Ссылка,
	|	СправочникГруппыПользователей.Родитель КАК Родитель
	|ИЗ
	|	Справочник.ГруппыПользователей КАК СправочникГруппыПользователей";
	Если ПользовательВнешний Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ГруппыПользователей", "Справочник.ГруппыВнешнихПользователей");
	КонецЕсли;
	
	ГруппыПользователейСписок = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаПользователей,
	|	СоставыГруппПользователей.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппаПользователей";
	
	ГруппыПользователейСостав = Запрос.Выполнить().Выгрузить();
	
	ТаблицаГруппыИСостав = ПолныйСоставГруппПользователей(ГруппыПользователейСостав);
	
	Возврат Новый Структура("ГруппыПользователейСписок, ТаблицаГруппыИСостав",
							ГруппыПользователейСписок, ТаблицаГруппыИСостав);
КонецФункции

Функция ПолныйСоставГруппПользователей(ГруппыПользователейСостав)
	
	ТаблицаГруппыИСостав = Новый ТаблицаЗначений;
	ТаблицаГруппыИСостав.Колонки.Добавить("Группа");
	ТаблицаГруппыИСостав.Колонки.Добавить("Состав");
	СоставГруппы = Новый СписокЗначений;
	ТекущаяГруппа = Неопределено;
	
	Для Каждого СтрокаСостава Из ГруппыПользователейСостав Цикл
		
		Если ТипЗнч(СтрокаСостава.ГруппаПользователей) = Тип("СправочникСсылка.ГруппыПользователей")
			Или ТипЗнч(СтрокаСостава.ГруппаПользователей) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
			
			Если ТекущаяГруппа <> СтрокаСостава.ГруппаПользователей 
				И Не ТекущаяГруппа = Неопределено Тогда
				СтрокаТаблицаГруппыИСостав = ТаблицаГруппыИСостав.Добавить();
				СтрокаТаблицаГруппыИСостав.Группа = ТекущаяГруппа;
				СтрокаТаблицаГруппыИСостав.Состав = СоставГруппы.Скопировать();
				СоставГруппы.Очистить();
			КонецЕсли;
			СоставГруппы.Добавить(СтрокаСостава.Пользователь);
			
		ТекущаяГруппа = СтрокаСостава.ГруппаПользователей;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаТаблицаГруппыИСостав = ТаблицаГруппыИСостав.Добавить();
	СтрокаТаблицаГруппыИСостав.Группа = ТекущаяГруппа;
	СтрокаТаблицаГруппыИСостав.Состав = СоставГруппы.Скопировать();
	
	Возврат ТаблицаГруппыИСостав;
КонецФункции

Функция СоставГруппыПользователей(ГруппаСсылка, ПользовательВнешний)
	
	СоставГруппы = Новый СписокЗначений;
	Для Каждого Элемент Из ГруппаСсылка.Состав Цикл
		
		Если ПользовательВнешний Тогда
			СоставГруппы.Добавить(Элемент.ВнешнийПользователь);
		Иначе
			СоставГруппы.Добавить(Элемент.Пользователь);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоставГруппы;
КонецФункции

Функция ПолныйСоставГруппыПользователей(ТаблицаГруппыИСостав, ГруппаСсылка)
	
	ПолныйСоставГруппы = ТаблицаГруппыИСостав.НайтиСтроки(Новый Структура("Группа", ГруппаСсылка));
	Если ПолныйСоставГруппы.Количество() <> 0 Тогда
		Возврат ПолныйСоставГруппы[0].Состав;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

// Формирует массив отчетов, доступных переданному пользователю.
//
// Параметры:
//  ПользовательИнформационнойБазы - Строка - имя пользователя информационной базы, у которого проверяются
//                                   права доступа на отчет.
//
// Возвращаемое значение:
//   Результат - Массив - ключи отчетов, доступных переданному пользователю.
//
Функция ОтчетыДоступныеПользователю(ПользовательПриемник)
	Результат = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИнформационнойБазы = ПользователиИнформационнойБазы.НайтиПоИмени(ПользовательПриемник);
	Для Каждого ОтчетМетаданные Из Метаданные.Отчеты Цикл
		
		Если ПравоДоступа("Просмотр", ОтчетМетаданные, ПользовательИнформационнойБазы) Тогда
			Результат.Добавить("Отчет." + ОтчетМетаданные.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает имя пользователя информационной базы по переданной ссылке
// справочника.
// Параметры:
// ПользовательСсылка - СправочникСсылка - Пользователь, для которого нужно получить
// имя пользователя информационной базы.
//
// Возвращаемое значение
// Строка - Имя пользователя информационной базы. Если Пользователь ИБ не найден - Неопределено.
// 
Функция ИмяПользователяИБ(ПользовательСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательСсылка, "ИдентификаторПользователяИБ");
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
	
	Если ПользовательИБ <> Неопределено Тогда
		Возврат ПользовательИБ.Имя;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеФормы(Объект, Форма, ТипОбъектаМетаданных)
	
	ФормаОткрываемая = Ложь;
	
	Если ТипОбъектаМетаданных = "КритерийОтбора"
		Или ТипОбъектаМетаданных = "ЖурналДокументов" Тогда
		
		Если Форма = Объект.ОсновнаяФорма Тогда
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ФормаОткрываемая = Истина;
		Иначе 
			ИмяФормы = Форма.Синоним;
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаМетаданных = "РегистрНакопления"
		Или ТипОбъектаМетаданных = "РегистрБухгалтерии"
		Или ТипОбъектаМетаданных = "РегистрРасчета" Тогда
		
		Если Форма = Объект.ОсновнаяФормаСписка Тогда
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ФормаОткрываемая = Истина;
		Иначе 
			ИмяФормы = Форма.Синоним;
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаМетаданных = "РегистрСведений" Тогда
		
		Если Форма = Объект.ОсновнаяФормаЗаписи Тогда
			
			Если Не ПустаяСтрока(Объект.РасширенноеПредставлениеЗаписи) Тогда
				ИмяФормы = Объект.РасширенноеПредставлениеЗаписи;
			ИначеЕсли Не ПустаяСтрока(Объект.ПредставлениеЗаписи) Тогда
				ИмяФормы = Объект.ПредставлениеЗаписи;
			Иначе
				ИмяФормы = Объект.Представление();
			КонецЕсли;
			
		ИначеЕсли Форма = Объект.ОсновнаяФормаСписка Тогда
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ФормаОткрываемая = Истина;
		Иначе 
			ИмяФормы = Форма.Синоним;
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаМетаданных = "Отчет"
		Или ТипОбъектаМетаданных = "Обработка" Тогда
		
		Если Форма = Объект.ОсновнаяФорма Тогда
			Если Не ПустаяСтрока(Объект.РасширенноеПредставление) Тогда
				ИмяФормы = Объект.РасширенноеПредставление;
			Иначе
				ИмяФормы = Объект.Представление();
			КонецЕсли;
			ФормаОткрываемая = Истина;
		Иначе
			ИмяФормы = Форма.Синоним;
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаМетаданных = "ХранилищеНастроек" Тогда
		ИмяФормы = Форма.Синоним;
	ИначеЕсли ТипОбъектаМетаданных = "Перечисление" Тогда
		
		Если Форма = Объект.ОсновнаяФормаСписка
			Или Форма = Объект.ОсновнаяФормаДляВыбора Тогда
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ФормаОткрываемая = ?(Форма = Объект.ОсновнаяФормаСписка, Истина, Ложь);
		Иначе
			ИмяФормы = Форма.Синоним;
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаМетаданных = "Справочник"
		Или ТипОбъектаМетаданных = "ПланВидовХарактеристик" Тогда
		
		Если Форма = Объект.ОсновнаяФормаСписка
			Или Форма = Объект.ОсновнаяФормаДляВыбора
			Или Форма = Объект.ОсновнаяФормаГруппы 
			Или Форма = Объект.ОсновнаяФормаДляВыбораГруппы Тогда
			
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ДобавитьТипФормыВПредставление(Объект, Форма, ИмяФормы);
			ФормаОткрываемая = ?(Форма = Объект.ОсновнаяФормаСписка, Истина, Ложь);
			
		ИначеЕсли Форма = Объект.ОсновнаяФормаОбъекта Тогда
			ИмяФормы = ПредставлениеФормыОбъекта(Объект);
		Иначе
			ИмяФормы = Форма.Синоним;
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаМетаданных = "ВнешнийИсточникДанных" Тогда
		
		Если Форма = Объект.ОсновнаяФормаСписка Тогда
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ФормаОткрываемая = Истина;
		ИначеЕсли Форма = Объект.ОсновнаяФормаЗаписи Тогда
			
			Если Не ПустаяСтрока(Объект.РасширенноеПредставлениеЗаписи) Тогда
				ИмяФормы = Объект.РасширенноеПредставлениеЗаписи ;
			ИначеЕсли Не ПустаяСтрока(Объект.ПредставлениеЗаписи) Тогда
				ИмяФормы = Объект.ПредставлениеЗаписи;
			Иначе
				ИмяФормы = Объект.Представление();
			КонецЕсли;
			
		ИначеЕсли Форма = Объект.ОсновнаяФормаОбъекта Тогда
			ПредставлениеФормыОбъекта(Объект);
		Иначе
			ИмяФормы = Форма.Синоним;
		КонецЕсли;
		
	Иначе // Получение представления формы для Документа, Плана счетов, Плана видов расчета, Бизнес-процесса и Задачи.
		
		Если Форма = Объект.ОсновнаяФормаСписка
			Или Форма = Объект.ОсновнаяФормаДляВыбора Тогда
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ФормаОткрываемая = ?(Форма = Объект.ОсновнаяФормаСписка, Истина, Ложь);
		ИначеЕсли Форма = Объект.ОсновнаяФормаОбъекта Тогда
			ИмяФормы = ПредставлениеФормыОбъекта(Объект);
		Иначе
			ИмяФормы = Форма.Синоним;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("ИмяФормы, ФормаОткрываемая", ИмяФормы, ФормаОткрываемая);
	
КонецФункции

Функция ПредставлениеАвтогенерируемойФормы(Объект, Форма, ТипОбъектаМетаданных)
	
	ФормаОткрываемая = Ложь;
	
	Если ТипОбъектаМетаданных = "КритерийОтбора"
		Или ТипОбъектаМетаданных = "ЖурналДокументов" Тогда
		
		ИмяФормы = ПредставлениеФормыСписка(Объект);
		ФормаОткрываемая = Истина;
		
	ИначеЕсли ТипОбъектаМетаданных = "РегистрНакопления"
		Или ТипОбъектаМетаданных = "РегистрБухгалтерии"
		Или ТипОбъектаМетаданных = "РегистрРасчета" Тогда
		
		ИмяФормы = ПредставлениеФормыСписка(Объект);
		ФормаОткрываемая = Истина;
		
	ИначеЕсли ТипОбъектаМетаданных = "РегистрСведений" Тогда
		
		Если Форма = "ФормаЗаписи" Тогда
			
			Если Не ПустаяСтрока(Объект.РасширенноеПредставлениеЗаписи) Тогда
				ИмяФормы = Объект.РасширенноеПредставлениеЗаписи;
			ИначеЕсли Не ПустаяСтрока(Объект.ПредставлениеЗаписи) Тогда
				ИмяФормы = Объект.ПредставлениеЗаписи;
			Иначе
				ИмяФормы = Объект.Представление();
			КонецЕсли;
			
		ИначеЕсли Форма = "ФормаСписка" Тогда
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ФормаОткрываемая = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаМетаданных = "Отчет"
		Или ТипОбъектаМетаданных = "Обработка" Тогда
		
		Если Не ПустаяСтрока(Объект.РасширенноеПредставление) Тогда
			ИмяФормы = Объект.РасширенноеПредставление;
		Иначе
			ИмяФормы = Объект.Представление();
		КонецЕсли;
		ФормаОткрываемая = Истина;
		
	ИначеЕсли ТипОбъектаМетаданных = "Перечисление" Тогда
		
		ИмяФормы = ПредставлениеФормыСписка(Объект);
		ФормаОткрываемая = ?(Форма = "ФормаСписка", Истина, Ложь);
		
	ИначеЕсли ТипОбъектаМетаданных = "Справочник"
		Или ТипОбъектаМетаданных = "ПланВидовХарактеристик" Тогда
		
		Если Форма = "ФормаСписка"
			Или Форма = "ФормаДляВыбора"
			Или Форма = "ФормаГруппы" 
			Или Форма = "ФормаДляВыбораГруппы" Тогда
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ДобавитьТипФормыВПредставлениеАвтогенерируемойФормы(Объект, Форма, ИмяФормы);
			ФормаОткрываемая = ?(Форма = "ФормаСписка", Истина, Ложь);
		ИначеЕсли Форма = "ФормаОбъекта" Тогда
			ИмяФормы = ПредставлениеФормыОбъекта(Объект);
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаМетаданных = "ВнешнийИсточникДанных" Тогда
		
		Если Форма = "ФормаСписка" Тогда
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ФормаОткрываемая = Истина;
		ИначеЕсли Форма = "ФормаЗаписи" Тогда
			Если Не ПустаяСтрока(Объект.РасширенноеПредставлениеЗаписи) Тогда
				ИмяФормы = Объект.РасширенноеПредставлениеЗаписи ;
			ИначеЕсли Не ПустаяСтрока(Объект.ПредставлениеЗаписи) Тогда
				ИмяФормы = Объект.ПредставлениеЗаписи;
			Иначе
				ИмяФормы = Объект.Представление();
			КонецЕсли;
		ИначеЕсли Форма = "ФормаОбъекта" Тогда
			ПредставлениеФормыОбъекта(Объект);
		КонецЕсли;
		
	Иначе // Получение представления формы для Документа, Плана счетов, Плана видов расчета, Бизнес-процесса и Задачи.
		
		Если Форма = "ФормаСписка"
			Или Форма = "ФормаДляВыбора" Тогда
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ФормаОткрываемая = ?(Форма = "ФормаСписка", Истина, Ложь);
		ИначеЕсли Форма = "ФормаОбъекта" Тогда
			ИмяФормы = ПредставлениеФормыОбъекта(Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("ИмяФормы, ФормаОткрываемая", ИмяФормы, ФормаОткрываемая);
	
КонецФункции

Функция ПредставлениеФормыСписка(Объект)
	
	Если Не ПустаяСтрока(Объект.РасширенноеПредставлениеСписка) Тогда
		ИмяФормы = Объект.РасширенноеПредставлениеСписка;
	ИначеЕсли Не ПустаяСтрока(Объект.ПредставлениеСписка) Тогда
		ИмяФормы = Объект.ПредставлениеСписка;
	Иначе
		ИмяФормы = Объект.Представление();
	КонецЕсли;
	
	Возврат ИмяФормы;
КонецФункции

Функция ПредставлениеФормыОбъекта(Объект)
	
	Если Не ПустаяСтрока(Объект.РасширенноеПредставлениеОбъекта) Тогда
		ИмяФормы = Объект.РасширенноеПредставлениеОбъекта;
	ИначеЕсли Не ПустаяСтрока(Объект.ПредставлениеОбъекта) Тогда
		ИмяФормы = Объект.ПредставлениеОбъекта;
	Иначе
		ИмяФормы = Объект.Представление();
	КонецЕсли;;
	
	Возврат ИмяФормы;
КонецФункции

Процедура ДобавитьТипФормыВПредставление(Объект, Форма, ИмяФормы)
	
	Если Форма = Объект.ОсновнаяФормаСписка Тогда
		ИмяФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (список)'"), ИмяФормы);
	ИначеЕсли Форма = Объект.ОсновнаяФормаДляВыбора Тогда
		ИмяФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (выбор)'"), ИмяФормы);
	ИначеЕсли Форма = Объект.ОсновнаяФормаГруппы Тогда
		ИмяФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (группа)'"), ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьТипФормыВПредставлениеАвтогенерируемойФормы(Объект, Форма, ИмяФормы)
	
	Если Форма = "ФормаСписка" Тогда
		ИмяФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (список)'"), ИмяФормы);
	ИначеЕсли Форма = "ФормаДляВыбора" Тогда
		ИмяФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (выбор)'"), ИмяФормы);
	ИначеЕсли Форма = "ФормаДляВыбораГруппы" Тогда
		ИмяФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (группа)'"), ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицуЗначений(ТаблицаНастроек, ВыборкаНастроек)
	
	Если СтрНайти(ВыборкаНастроек.КлючОбъекта, "ВнешнийОтчет.") <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаНастроек.Добавить();
	НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
	НоваяСтрока.КлючНастроек = ВыборкаНастроек.КлючНастроек;
	
КонецПроцедуры

Функция ПредставлениеВариантаОтчета(НастройкаКлюч, ИмяВариантаОтчета)
	
	ИмяОтчета = СтрРазделить(ИмяВариантаОтчета[0], ".", Ложь);
	Отчет = Метаданные.Отчеты.Найти(ИмяОтчета[1]);
	
	Если Отчет = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеВариантов = Отчет.ХранилищеВариантов;
	
	Если ХранилищеВариантов = Неопределено Тогда
		ХранилищеВариантов = Метаданные.ХранилищеВариантовОтчетов;
	КонецЕсли;
	
	Если ХранилищеВариантов = Неопределено Тогда
		ХранилищеВариантов = ХранилищеВариантовОтчетов;
	Иначе
		ХранилищеВариантов = ХранилищаНастроек[ХранилищеВариантов.Имя];
	КонецЕсли;
	
	Если ИмяВариантаОтчета.Количество() = 1 Тогда
		ИдентификаторВарианта = ИмяОтчета[1];
	Иначе
		ИдентификаторВарианта = ИмяВариантаОтчета[1];
	КонецЕсли;
	
	ПредставлениеВариантаОтчета = ХранилищеВариантов.ПолучитьОписание(ИмяВариантаОтчета[0], ИдентификаторВарианта);
	
	Если ПредставлениеВариантаОтчета <> Неопределено Тогда
		Возврат ПредставлениеВариантаОтчета.Представление;
	Иначе
		Возврат ИмяОтчета[1];
	КонецЕсли;
	
КонецФункции

Функция ЧтениеНастроекИзХранилища(МенеджерНастроек, Пользователь)
	
	Настройки = Новый ТаблицаЗначений;
	Настройки.Колонки.Добавить("КлючОбъекта");
	Настройки.Колонки.Добавить("КлючНастроек");
	Настройки.Колонки.Добавить("Представление");
	
	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", Пользователь);
	
	Пропустить = Ложь;
	ВыборкаНастроек = МенеджерНастроек.Выбрать(Отбор);
	Пока СледующаяНастройка(ВыборкаНастроек, Пропустить) Цикл
		
		Если Пропустить Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Настройки.Добавить();
		НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
		НоваяСтрока.КлючНастроек = ВыборкаНастроек.КлючНастроек;
		НоваяСтрока.Представление = ВыборкаНастроек.Представление;
		
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

Функция ПользовательскиеВариантыОтчетов(ПользовательИнформационнойБазы)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ТекущийПользовательИБ = ИмяПользователяИБ(ТекущийПользователь);
	
	ТаблицаВариантовОтчетов = Новый ТаблицаЗначений;
	ТаблицаВариантовОтчетов.Колонки.Добавить("КлючОбъекта");
	ТаблицаВариантовОтчетов.Колонки.Добавить("КлючВарианта");
	ТаблицаВариантовОтчетов.Колонки.Добавить("Представление");
	ТаблицаВариантовОтчетов.Колонки.Добавить("СтандартнаяОбработка");
	
	ДоступныеОтчеты = ОтчетыДоступныеПользователю(ТекущийПользовательИБ);
	
	Для Каждого ОтчетМетаданные Из Метаданные.Отчеты Цикл
		
		СтандартнаяОбработка = Истина;
		
		Если ДоступныеОтчеты.Найти("Отчет." + ОтчетМетаданные.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИнтеграцияСтандартныхПодсистем.ПриПолученииПользовательскихВариантовОтчетов(ОтчетМетаданные,
			ПользовательИнформационнойБазы, ТаблицаВариантовОтчетов, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка Тогда
			ВариантыОтчета = ХранилищеВариантовОтчетов.ПолучитьСписок("Отчет." + ОтчетМетаданные.Имя, ПользовательИнформационнойБазы);
			Для Каждого ВариантОтчета Из ВариантыОтчета Цикл
				СтрокаВариантовОтчетов = ТаблицаВариантовОтчетов.Добавить();
				СтрокаВариантовОтчетов.КлючОбъекта = "Отчет." + ОтчетМетаданные.Имя;
				СтрокаВариантовОтчетов.КлючВарианта = ВариантОтчета.Значение;
				СтрокаВариантовОтчетов.Представление = ВариантОтчета.Представление;
				СтрокаВариантовОтчетов.СтандартнаяОбработка = Истина;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаВариантовОтчетов;
	
КонецФункции

Функция КлючиПользовательскихНастроек()
	
	МассивКлючей = Новый Массив;
	МассивКлючей.Добавить("КлючТекущегоВарианта");
	МассивКлючей.Добавить("КлючТекущихПользовательскихНастроек");
	МассивКлючей.Добавить("ТекущиеПользовательскиеНастройки");
	МассивКлючей.Добавить("КлючТекущихНастроекДанных");
	МассивКлючей.Добавить("НастройкиКлиентскогоПриложения");
	МассивКлючей.Добавить("НастройкиВнешнейКомпоненты");
	МассивКлючей.Добавить("НастройкиСправки");
	МассивКлючей.Добавить("НастройкиСравнения");
	МассивКлючей.Добавить("ПараметрыПоискаТаблиц");
	
	Возврат МассивКлючей;
КонецФункции

Функция ХранилищеНастроекПоИмени(НазваниеХранилища)
	
	Если НазваниеХранилища = "ХранилищеПользовательскихНастроекОтчетов" Тогда
		Возврат ХранилищеПользовательскихНастроекОтчетов;
	ИначеЕсли НазваниеХранилища = "ХранилищеОбщихНастроек" Тогда
		Возврат ХранилищеОбщихНастроек;
	Иначе
		Возврат ХранилищеСистемныхНастроек;
	КонецЕсли;
	
КонецФункции

Процедура СформироватьОтбор(ГруппыПользователейСписок, ГруппаСсылка, ГруппыМассив)
	
	ПараметрыОтбора = Новый Структура("Родитель", ГруппаСсылка);
	ОтобранныеСтроки = ГруппыПользователейСписок.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого Элемент Из ОтобранныеСтроки Цикл 
		ГруппыМассив.Добавить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучениеКлючейВариантовОтчетов(ТаблицаВариантовОтчетов)
	
	ТаблицаКлючейИТиповВариантовОтчетов = Новый ТаблицаЗначений;
	ТаблицаКлючейИТиповВариантовОтчетов.Колонки.Добавить("КлючВарианта");
	ТаблицаКлючейИТиповВариантовОтчетов.Колонки.Добавить("Пометка");
	Для Каждого СтрокаТаблицы Из ТаблицаВариантовОтчетов Цикл
		СтрокаТаблицыЗначений = ТаблицаКлючейИТиповВариантовОтчетов.Добавить();
		СтрокаТаблицыЗначений.КлючВарианта = СтрокаТаблицы.КлючОбъекта + "/" + СтрокаТаблицы.КлючВарианта;
		СтрокаТаблицыЗначений.Пометка = СтрокаТаблицы.СтандартнаяОбработка;
	КонецЦикла;
	
	Возврат ТаблицаКлючейИТиповВариантовОтчетов;
КонецФункции

Функция ФормированиеОтчетаОКопировании(НеСкопированныеНастройкиОтчетов,
										ТаблицаПользовательскихВариантовОтчетов = Неопределено) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабМакет = Обработки.НастройкиПользователей.ПолучитьМакет("МакетОтчета");
	
	ОтчетНеПустой = Ложь;
	Если ТаблицаПользовательскихВариантовОтчетов <> Неопределено
		И ТаблицаПользовательскихВариантовОтчетов.Количество() <> 0 Тогда
		ОбластьЗаголовок = ТабМакет.ПолучитьОбласть("Заголовок");
		ОбластьЗаголовок.Параметры.Описание = 
			НСтр("ru = 'Невозможно скопировать личные варианты отчетов.
			|Для того чтобы личный вариант отчета стал доступен другим пользователям,
			|необходимо его пересохранить со снятой пометкой ""Только для автора"".
			|Список пропущенных вариантов отчетов:'");
		ТабДок.Вывести(ОбластьЗаголовок);
		
		ТабДок.Вывести(ТабМакет.ПолучитьОбласть("ПустаяСтрока"));
		
		ОбластьСодержание = ТабМакет.ПолучитьОбласть("СодержаниеОтчета");
		
		Для Каждого СтрокаТаблицы Из ТаблицаПользовательскихВариантовОтчетов Цикл
			
			Если Не СтрокаТаблицы.СтандартнаяОбработка Тогда
				ОбластьСодержание.Параметры.Название = СтрокаТаблицы.Представление;
				ТабДок.Вывести(ОбластьСодержание);
			КонецЕсли;
			
		КонецЦикла;
		
		ОтчетНеПустой = Истина;
	КонецЕсли;
	
	Если НеСкопированныеНастройкиОтчетов.Количество() <> 0 Тогда
		ОбластьЗаголовок = ТабМакет.ПолучитьОбласть("Заголовок");
		ОбластьЗаголовок.Параметры.Описание = 
			НСтр("ru = 'У следующих пользователей недостаточно прав на отчеты:'");
		ТабДок.Вывести(ОбластьЗаголовок);
		
		ОбластьСодержание = ТабМакет.ПолучитьОбласть("СодержаниеОтчета");
		
		Для Каждого СтрокаТаблицы Из НеСкопированныеНастройкиОтчетов Цикл
			ТабДок.Вывести(ТабМакет.ПолучитьОбласть("ПустаяСтрока"));
			ОбластьСодержание.Параметры.Название = СтрокаТаблицы.Пользователь + ":";
			ТабДок.Вывести(ОбластьСодержание);
			Для Каждого НазваниеОтчета Из СтрокаТаблицы.СписокОтчетов Цикл
				ОбластьСодержание.Параметры.Название = НазваниеОтчета.Значение;
				ТабДок.Вывести(ОбластьСодержание);
			КонецЦикла;
			
		КонецЦикла;
		
	ОтчетНеПустой = Истина;
	КонецЕсли;
	
	Если ОтчетНеПустой Тогда
		Отчет = Новый ТабличныйДокумент;
		Отчет.Вывести(ТабДок);
		
		Возврат Отчет;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПропуститьНастройку(КлючОбъекта, КлючНастроек)
	
	ИсключенияПоКлючуОбъекта = Новый Массив;
	ИсключенияПоКлючуНастроек = Новый Массив;
	
	// Исключения. Настройки, которые нельзя копировать.
	ИсключенияПоКлючуОбъекта.Добавить("ЛокальныйКэшФайлов");
	ИсключенияПоКлючуНастроек.Добавить("ПутьКЛокальномуКэшуФайлов");
	
	Если ИсключенияПоКлючуОбъекта.Найти(КлючОбъекта) <> Неопределено
		И ИсключенияПоКлючуНастроек.Найти(КлючНастроек) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для форм НастройкиПользователей и ВыборНастроек.

Процедура ЗаполнитьСпискиНастроек(Форма) Экспорт
	
	ЗаполнитьСписокНастроекОтчетов(Форма);
	ЗаполнитьСписокНастроекВнешнегоВида(Форма);
	ЗаполнитьСписокПрочихНастроек(Форма);
	
КонецПроцедуры

Процедура ЗаполнитьСписокНастроекОтчетов(Форма)
	
	ИмяФормы = СтрРазделить(Форма.ИмяФормы, ".", Ложь);
	Форма.НастройкиОтчетов.ПолучитьЭлементы().Очистить();
	НастройкиОтчетовДерево = Форма.РеквизитФормыВЗначение("НастройкиОтчетов");
	ТаблицаВариантовОтчетов = ПользовательскиеВариантыОтчетов(Форма.ПользовательИнформационнойБазы);
	ПользовательскиеВариантыОтчетов = Форма.РеквизитФормыВЗначение("ТаблицаПользовательскихВариантовОтчетов");
	ПользовательскиеВариантыОтчетов.Очистить();
	ПользовательскиеВариантыОтчетов = ТаблицаВариантовОтчетов.Скопировать();
	
	Настройки = ЧтениеНастроекИзХранилища(
		ХранилищеПользовательскихНастроекОтчетов, Форма.ПользовательИнформационнойБазы);
	
	ТекущийОбъект = Неопределено;
	
	Для Каждого Настройка Из Настройки Цикл
		НастройкаОбъект = Настройка.КлючОбъекта;
		НастройкаКлюч = Настройка.КлючНастроек;
		НазваниеНастройки = Настройка.Представление;
		
		ИмяВариантаОтчета = СтрРазделить(НастройкаОбъект, "/", Ложь);
		Если ИмяВариантаОтчета.Количество() < 2 Тогда
			Продолжить; // Некорректная настройка.
		КонецЕсли;
		
		ПредставлениеВариантаОтчета = ПредставлениеВариантаОтчета(НастройкаКлюч, ИмяВариантаОтчета);
		
		// Если вариант отчета (отчет) удалили, а настройка осталась - не выводим ее пользователю.
		Если ПредставлениеВариантаОтчета = ""
			Или ПредставлениеВариантаОтчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверяем, является ли вариант отчета пользовательским.
		НайденныйВариантОтчета = ТаблицаВариантовОтчетов.Найти(ИмяВариантаОтчета[1], "КлючВарианта");
		// Если открыта форма для выбора настроек, то скрываем настройки, которые нельзя скопировать.
		Если ИмяФормы[3] = "ВыборНастроек"
			И НайденныйВариантОтчета <> Неопределено
			И Не НайденныйВариантОтчета.СтандартнаяОбработка Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(Форма.Поиск) Тогда
			Если СтрНайти(ВРег(ПредставлениеВариантаОтчета), ВРег(Форма.Поиск)) = 0
				И СтрНайти(ВРег(НазваниеНастройки), ВРег(Форма.Поиск)) = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Заполняем строку варианта отчета.
		Если ТекущийОбъект <> ПредставлениеВариантаОтчета Тогда
			НоваяСтрокаВариантОтчета = НастройкиОтчетовДерево.Строки.Добавить();
			НоваяСтрокаВариантОтчета.Настройка = ПредставлениеВариантаОтчета;
			НоваяСтрокаВариантОтчета.Картинка = БиблиотекаКартинок.Отчет;
			НоваяСтрокаВариантОтчета.Тип =
				?(НайденныйВариантОтчета <> Неопределено, 
					?(Не НайденныйВариантОтчета.СтандартнаяОбработка, "ВариантЛичный", "СтандартныйВариантЛичный"), "СтандартныйВариантОтчета");
			НоваяСтрокаВариантОтчета.ТипСтроки = "Отчет" + ПредставлениеВариантаОтчета;
		КонецЕсли;
		// Заполняем строку настройки
		НоваяСтрокаНастройка = НоваяСтрокаВариантОтчета.Строки.Добавить();
		НоваяСтрокаНастройка.Настройка = ?(Не ПустаяСтрока(НазваниеНастройки), НазваниеНастройки, ПредставлениеВариантаОтчета);
		НоваяСтрокаНастройка.Картинка = БиблиотекаКартинок.Форма;
		НоваяСтрокаНастройка.Тип = 
			?(НайденныйВариантОтчета <> Неопределено,
				?(Не НайденныйВариантОтчета.СтандартнаяОбработка, "НастройкаЛичная", "СтандартнаяНастройкаЛичная"), "НастройкаСтандартногоОтчета");
		НоваяСтрокаНастройка.ТипСтроки = ПредставлениеВариантаОтчета + НазваниеНастройки;
		НоваяСтрокаНастройка.Ключи.Добавить(НастройкаОбъект, НастройкаКлюч);
		// Заполняем ключ объекта и ключ настройки для варианта отчета.
		НоваяСтрокаВариантОтчета.Ключи.Добавить(НастройкаОбъект, НастройкаКлюч);
		
		ТекущийОбъект = ПредставлениеВариантаОтчета;
		
		// Удаляем в списке пользовательских вариантов отчетов те, для которых есть настройки.
		Если НайденныйВариантОтчета <> Неопределено Тогда
			ТаблицаВариантовОтчетов.Удалить(НайденныйВариантОтчета);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ВариантОтчета Из ТаблицаВариантовОтчетов Цикл
		
		Если ИмяФормы[3] = "ВыборНастроек"
			И Форма.ДействиеСНастройками = "Копирование"
			И Не ВариантОтчета.СтандартнаяОбработка Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(Форма.Поиск) Тогда
			
			Если СтрНайти(ВРег(ВариантОтчета.Представление), ВРег(Форма.Поиск)) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрокаВариантОтчета = НастройкиОтчетовДерево.Строки.Добавить();
		НоваяСтрокаВариантОтчета.Настройка = ВариантОтчета.Представление;
		НоваяСтрокаВариантОтчета.Картинка = БиблиотекаКартинок.Отчет;
		НоваяСтрокаВариантОтчета.Ключи.Добавить(ВариантОтчета.КлючОбъекта + "/" + ВариантОтчета.КлючВарианта);
		НоваяСтрокаВариантОтчета.Тип = ?(Не ВариантОтчета.СтандартнаяОбработка, "ВариантЛичный", "СтандартныйВариантЛичный");
		НоваяСтрокаВариантОтчета.ТипСтроки = "Отчет" + ВариантОтчета.Представление;
		
	КонецЦикла;
	
	НастройкиОтчетовДерево.Строки.Сортировать("Настройка Возр", Истина);
	Форма.ЗначениеВРеквизитФормы(НастройкиОтчетовДерево, "НастройкиОтчетов");
	Форма.ЗначениеВРеквизитФормы(ПользовательскиеВариантыОтчетов, "ТаблицаПользовательскихВариантовОтчетов");
	
КонецПроцедуры

Процедура ДобавитьНастройкиРабочегоСтолаИКомандногоИнтерфейса(Форма, ДеревоНастроек)
	
	Если Не ПустаяСтрока(Форма.Поиск) Тогда
		Если СтрНайти(ВРег(НСтр("ru = 'Командный интерфейс и начальная страница'")), ВРег(Форма.Поиск)) = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Настройки = ЧтениеНастроекИзХранилища(ХранилищеСистемныхНастроек, Форма.ПользовательИнформационнойБазы);
	КлючиНастроекРабочегоСтола = Новый СписокЗначений;
	КлючиНастроекИнтерфейса = Новый СписокЗначений;
	КлючиВсехНастроек = Новый СписокЗначений; 
	
	Для Каждого Настройка Из Настройки Цикл
		ИмяНастройки = СтрРазделить(Настройка.КлючОбъекта, "/", Ложь);
		ЧастьИмениНастройки = СтрРазделить(ИмяНастройки[0], ".", Ложь);
		Если ЧастьИмениНастройки[0] = "Подсистема" Тогда
			
			КлючиНастроекИнтерфейса.Добавить(Настройка.КлючОбъекта, "Интерфейс");
			КлючиВсехНастроек.Добавить(Настройка.КлючОбъекта, "Интерфейс");
			
		ИначеЕсли ИмяНастройки[0] = "Общее" Тогда
			
			Если ИмяНастройки[1] = "ПанельРазделов"
			 Или ИмяНастройки[1] = "ПанельДействий" 
			 Или ИмяНастройки[1] = "НастройкиКлиентскогоПриложения" 
			 Или ИмяНастройки[1] = "НастройкиИнтерфейсаКлиентскогоПриложения" Тогда
				
				КлючиНастроекИнтерфейса.Добавить(Настройка.КлючОбъекта, "Интерфейс");
				КлючиВсехНастроек.Добавить(Настройка.КлючОбъекта, "Интерфейс");
				
			ИначеЕсли ИмяНастройки[1] = "НастройкиРабочегоСтола"
			      Или ИмяНастройки[1] = "НастройкиНачальнойСтраницы" Тогда
				
				КлючиНастроекРабочегоСтола.Добавить(Настройка.КлючОбъекта, "Интерфейс");
				КлючиВсехНастроек.Добавить(Настройка.КлючОбъекта, "Интерфейс");
			КонецЕсли;
			
		ИначеЕсли ИмяНастройки[0] = "РабочийСтол" Тогда
			
			Если ИмяНастройки[1] = "НастройкиОкна" Тогда
				КлючиНастроекРабочегоСтола.Добавить(Настройка.КлючОбъекта, "Интерфейс");
				КлючиВсехНастроек.Добавить(Настройка.КлючОбъекта, "Интерфейс");
			Иначе
				КлючиНастроекИнтерфейса.Добавить(Настройка.КлючОбъекта, "Интерфейс");
				КлючиВсехНастроек.Добавить(Настройка.КлючОбъекта, "Интерфейс");
			КонецЕсли;
			
		ИначеЕсли ИмяНастройки[0] = "НачальнаяСтраница" Тогда
			
			// Настройки окна.
			КлючиНастроекРабочегоСтола.Добавить(Настройка.КлючОбъекта, "Интерфейс");
			КлючиВсехНастроек.Добавить(Настройка.КлючОбъекта, "Интерфейс");
			
		ИначеЕсли ИмяНастройки[0] = "ОсновнойРаздел" Тогда
			
			КлючиНастроекИнтерфейса.Добавить(Настройка.КлючОбъекта, "Интерфейс");
			КлючиВсехНастроек.Добавить(Настройка.КлючОбъекта, "Интерфейс");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КлючиВсехНастроек.Количество() > 0 Тогда
		// Добавление группы верхнего уровня для настроек рабочего стола и интерфейса.
		НоваяСтрокаИнтерфейса = ДеревоНастроек.Строки.Добавить();
		НоваяСтрокаИнтерфейса.Настройка = НСтр("ru = 'Командный интерфейс и начальная страница'");
		НоваяСтрокаИнтерфейса.Картинка = БиблиотекаКартинок.Картинка;
		НоваяСтрокаИнтерфейса.ТипСтроки = НСтр("ru = 'Командный интерфейс и начальная страница'");
		НоваяСтрокаИнтерфейса.Тип = "НастройкаВнешнегоВида";
		НоваяСтрокаИнтерфейса.Ключи = КлючиВсехНастроек.Скопировать();
	КонецЕсли;
	
	Если КлючиНастроекРабочегоСтола.Количество() > 0 Тогда
		// Добавление строки настроек рабочего стола.
		НоваяПодстрокаИнтерфейса = НоваяСтрокаИнтерфейса.Строки.Добавить();
		НоваяПодстрокаИнтерфейса.Настройка = НСтр("ru = 'Начальная страница'");
		НоваяПодстрокаИнтерфейса.Картинка = БиблиотекаКартинок.Картинка;
		НоваяПодстрокаИнтерфейса.ТипСтроки = "НастройкиРабочегоСтола";
		НоваяПодстрокаИнтерфейса.Тип = "НастройкаВнешнегоВида";
		НоваяПодстрокаИнтерфейса.Ключи = КлючиНастроекРабочегоСтола.Скопировать();
	КонецЕсли;
	
	Если КлючиНастроекИнтерфейса.Количество() > 0 Тогда
		// Добавление строки настроек интерфейса.
		НоваяПодстрокаИнтерфейса = НоваяСтрокаИнтерфейса.Строки.Добавить();
		НоваяПодстрокаИнтерфейса.Настройка = НСтр("ru = 'Командный интерфейс'");
		НоваяПодстрокаИнтерфейса.Картинка = БиблиотекаКартинок.Картинка;
		НоваяПодстрокаИнтерфейса.ТипСтроки = "НастройкиКомандногоИнтерфейса";
		НоваяПодстрокаИнтерфейса.Тип = "НастройкаВнешнегоВида";
		НоваяПодстрокаИнтерфейса.Ключи = КлючиНастроекИнтерфейса.Скопировать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокНастроекВнешнегоВида(Форма)
	
	Форма.ВнешнийВид.ПолучитьЭлементы().Очистить();
	НастройкиВнешнегоВида = Форма.РеквизитФормыВЗначение("ВнешнийВид");
	
	ТекущийОбъект = Неопределено;
	НастройкиФорм = НастройкиВсехФорм(Форма.ПользовательИнформационнойБазы);
	
	Для Каждого НастройкаФормы Из НастройкиФорм Цикл
		ИмяОбъектаМетаданных = СтрРазделить(НастройкаФормы.Значение, ".", Ложь);
		ПредставлениеОбъектаМетаданных = СтрРазделить(НастройкаФормы.Представление, ".", Ложь);
		
		Если Не ПустаяСтрока(Форма.Поиск) Тогда
			
			Если СтрНайти(ВРег(НастройкаФормы.Представление), ВРег(Форма.Поиск)) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;

		Если ИмяОбъектаМетаданных[0] = "ОбщаяФорма" Тогда
			НоваяСтрокаОбщиеФормы = НастройкиВнешнегоВида.Строки.Добавить();
			НоваяСтрокаОбщиеФормы.Настройка = НастройкаФормы.Представление;
			НоваяСтрокаОбщиеФормы.Картинка = БиблиотекаКартинок.Форма;
			ОбъединитьСпискиЗначений(НоваяСтрокаОбщиеФормы.Ключи, НастройкаФормы.СписокКлючей);
			НоваяСтрокаОбщиеФормы.Тип = "НастройкаВнешнегоВида";
			НоваяСтрокаОбщиеФормы.ТипСтроки = "ОбщаяФорма" + ИмяОбъектаМетаданных[1];
		ИначеЕсли ИмяОбъектаМетаданных[0] = "ХранилищеНастроек" Тогда
			НоваяСтрокаХранилищеНастроек = НастройкиВнешнегоВида.Строки.Добавить();
			НоваяСтрокаХранилищеНастроек.Настройка = НастройкаФормы.Представление;
			НоваяСтрокаХранилищеНастроек.Картинка = БиблиотекаКартинок.Форма;
			ОбъединитьСпискиЗначений(НоваяСтрокаХранилищеНастроек.Ключи, НастройкаФормы.СписокКлючей);
			НоваяСтрокаХранилищеНастроек.ТипСтроки = "ХранилищеНастроек" + ИмяОбъектаМетаданных[2];
			НоваяСтрокаХранилищеНастроек.Тип = "НастройкаВнешнегоВида";
		ИначеЕсли ПредставлениеОбъектаМетаданных[0] = НСтр("ru = 'Стандартные'") Тогда
			
			// Группа дерева настроек
			Если ТекущийОбъект <> ПредставлениеОбъектаМетаданных[0] Тогда
				НоваяСтрокаОбъектМетаданных = НастройкиВнешнегоВида.Строки.Добавить();
				НоваяСтрокаОбъектМетаданных.Настройка = ПредставлениеОбъектаМетаданных[0];
				НоваяСтрокаОбъектМетаданных.Картинка = НастройкаФормы.Картинка;
				НоваяСтрокаОбъектМетаданных.ТипСтроки = "Объект" + ИмяОбъектаМетаданных[1];
				НоваяСтрокаОбъектМетаданных.Тип = "НастройкаВнешнегоВида";
			КонецЕсли;
			
			// Элемент дерева настроек
			НоваяСтрокаВнешнегоВидаФорм = НоваяСтрокаОбъектМетаданных.Строки.Добавить();
			НоваяСтрокаВнешнегоВидаФорм.Настройка = ПредставлениеОбъектаМетаданных[1];
			НоваяСтрокаВнешнегоВидаФорм.Картинка = БиблиотекаКартинок.Форма;
			НоваяСтрокаВнешнегоВидаФорм.ТипСтроки = ИмяОбъектаМетаданных[1] + ИмяОбъектаМетаданных[2];
			НоваяСтрокаВнешнегоВидаФорм.Тип = "НастройкаВнешнегоВида";
			ОбъединитьСпискиЗначений(НоваяСтрокаВнешнегоВидаФорм.Ключи, НастройкаФормы.СписокКлючей);
			ОбъединитьСпискиЗначений(НоваяСтрокаОбъектМетаданных.Ключи, НастройкаФормы.СписокКлючей);
			
			ТекущийОбъект = ПредставлениеОбъектаМетаданных[0];
			
		Иначе
			
			// Группа дерева настроек
			Если ТекущийОбъект <> ИмяОбъектаМетаданных[1] Тогда
				НоваяСтрокаОбъектМетаданных = НастройкиВнешнегоВида.Строки.Добавить();
				НоваяСтрокаОбъектМетаданных.Настройка = ПредставлениеОбъектаМетаданных[0];
				НоваяСтрокаОбъектМетаданных.Картинка = НастройкаФормы.Картинка;
				НоваяСтрокаОбъектМетаданных.ТипСтроки = "Объект" + ИмяОбъектаМетаданных[1];
				НоваяСтрокаОбъектМетаданных.Тип = "НастройкаВнешнегоВида";
			КонецЕсли;
			
			// Элемент дерева настроек
			Если ИмяОбъектаМетаданных.Количество() = 3 Тогда
				ИмяФормы = ИмяОбъектаМетаданных[2];
			Иначе
				ИмяФормы = ИмяОбъектаМетаданных[3];
			КонецЕсли;
			
			НоваяСтрокаВнешнегоВидаФорм = НоваяСтрокаОбъектМетаданных.Строки.Добавить();
			Если ПредставлениеОбъектаМетаданных.Количество() = 1 Тогда
				НоваяСтрокаВнешнегоВидаФорм.Настройка = ПредставлениеОбъектаМетаданных[0];
			Иначе
				НоваяСтрокаВнешнегоВидаФорм.Настройка = ПредставлениеОбъектаМетаданных[1];
			КонецЕсли;
			НоваяСтрокаВнешнегоВидаФорм.Картинка = БиблиотекаКартинок.Форма;
			НоваяСтрокаВнешнегоВидаФорм.ТипСтроки = ИмяОбъектаМетаданных[1] + ИмяФормы;
			НоваяСтрокаВнешнегоВидаФорм.Тип = "НастройкаВнешнегоВида";
			ОбъединитьСпискиЗначений(НоваяСтрокаВнешнегоВидаФорм.Ключи, НастройкаФормы.СписокКлючей);
			ОбъединитьСпискиЗначений(НоваяСтрокаОбъектМетаданных.Ключи, НастройкаФормы.СписокКлючей);
			
			ТекущийОбъект = ИмяОбъектаМетаданных[1];
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьНастройкиРабочегоСтолаИКомандногоИнтерфейса(Форма, НастройкиВнешнегоВида);
	
	НастройкиВнешнегоВида.Строки.Сортировать("Настройка Возр", Истина);
	
	Настройка = НСтр("ru = 'Командный интерфейс и начальная страница'");
	РабочийСтолИКомандныйИнтерфейс = НастройкиВнешнегоВида.Строки.Найти(Настройка, "Настройка");
	
	Если РабочийСтолИКомандныйИнтерфейс <> Неопределено Тогда
		ИндексСтроки = НастройкиВнешнегоВида.Строки.Индекс(РабочийСтолИКомандныйИнтерфейс);
		НастройкиВнешнегоВида.Строки.Сдвинуть(ИндексСтроки, -ИндексСтроки);
	КонецЕсли;
	
	Форма.ЗначениеВРеквизитФормы(НастройкиВнешнегоВида, "ВнешнийВид");
	
КонецПроцедуры

Процедура ОбъединитьСпискиЗначений(СписокПриемник, СписокИсточник)
	Для Каждого Элемент Из СписокИсточник Цикл
		ЗаполнитьЗначенияСвойств(СписокПриемник.Добавить(), Элемент);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьСписокПрочихНастроек(Форма)
	
	Форма.ПрочиеНастройки.ПолучитьЭлементы().Очистить();
	ПрочиеНастройкиДерево = Форма.РеквизитФормыВЗначение("ПрочиеНастройки");
	Настройки = ЧтениеНастроекИзХранилища(ХранилищеОбщихНастроек, Форма.ПользовательИнформационнойБазы);
	Ключи = Новый СписокЗначений;
	ПрочиеКлючи = Новый СписокЗначений;
	
	// Заполнение персональных настроек.
	Для Каждого Настройка Из Настройки Цикл
		Ключи.Добавить(Настройка.КлючОбъекта, Настройка.КлючНастроек);
	КонецЦикла;
	
	ВыводитьНастройку = Истина;
	Если Ключи.Количество() > 0 Тогда
		
		Если Не ПустаяСтрока(Форма.Поиск) Тогда
			Если СтрНайти(ВРег(НСтр("ru='Персональные настройки'")), ВРег(Форма.Поиск)) = 0 Тогда
				ВыводитьНастройку = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыводитьНастройку Тогда
			Настройка = НСтр("ru='Персональные настройки'");
			ТипНастройки = "ПерсональныеНастройки";
			Картинка = БиблиотекаКартинок.СостояниеПользователя02;
			ДобавитьСтрокуДерева(ПрочиеНастройкиДерево, Настройка, Картинка, Ключи, ТипНастройки);
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение настроек избранного и печати.
	Настройки = ЧтениеНастроекИзХранилища(ХранилищеСистемныхНастроек, Форма.ПользовательИнформационнойБазы);
	
	Ключи.Очистить();
	ЕстьИзбранное = Ложь;
	ЕстьНастройкиПечати = Ложь;
	ОкончанияКлючей = КлючиПользовательскихНастроек();
	Для Каждого Настройка Из Настройки Цикл
		
		ИмяНастройки = СтрРазделить(Настройка.КлючОбъекта, "/", Ложь);
		Если ИмяНастройки.Количество() = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОкончанияКлючей.Найти(ИмяНастройки[1]) <> Неопределено Тогда
			ПрочиеКлючи.Добавить(Настройка.КлючОбъекта, "Прочие");
		КонецЕсли;
		
		Если ИмяНастройки[1] = "ИзбранноеРаботыПользователя" Тогда
			ЕстьИзбранное = Истина;
		ИначеЕсли ИмяНастройки[1] = "НастройкиПечатиТабличногоДокумента" Тогда
			Ключи.Добавить(Настройка.КлючОбъекта, "Прочие");
			ЕстьНастройкиПечати = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление строки дерева "Настройки печати".
	ВыводитьНастройку = Истина;
	Если Не ПустаяСтрока(Форма.Поиск) Тогда
		
		Если СтрНайти(ВРег(НСтр("ru='Настройки печати табличных документов'")), ВРег(Форма.Поиск)) = 0 Тогда
			ВыводитьНастройку = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьНастройкиПечати
		И ВыводитьНастройку Тогда
		Настройка = НСтр("ru='Настройки печати табличных документов'");
		Картинка = БиблиотекаКартинок.Печать;
		ТипНастройки = "ПрочаяНастройка";
		ДобавитьСтрокуДерева(ПрочиеНастройкиДерево, Настройка, Картинка, Ключи, ТипНастройки);
	КонецЕсли;
	
	// Добавление строки дерева "Избранное".
	ВыводитьНастройку = Истина;
	Если Не ПустаяСтрока(Форма.Поиск) Тогда
		
		Если СтрНайти(ВРег(НСтр("ru='Избранное'")), ВРег(Форма.Поиск)) = 0 Тогда
			ВыводитьНастройку = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьИзбранное
		И ВыводитьНастройку Тогда
		
		Настройка = НСтр("ru='Избранное'");
		Картинка = БиблиотекаКартинок.ДобавитьВИзбранное;
		Ключи.Очистить();
		Ключи.Добавить("Общее/ИзбранноеРаботыПользователя", "Прочие");
		ТипНастройки = "ПрочаяНастройка";
		ДобавитьСтрокуДерева(ПрочиеНастройкиДерево, Настройка, Картинка, Ключи, ТипНастройки);
		
	КонецЕсли;
	
	// Добавление прочих настроек, предусмотренных в конфигурации.
	ПрочиеНастройки = Новый Структура;
	СведенияОПользователе = Новый Структура;
	СведенияОПользователе.Вставить("ПользовательСсылка", Форма.ПользовательСсылка);
	СведенияОПользователе.Вставить("ИмяПользователяИнформационнойБазы", Форма.ПользовательИнформационнойБазы);
	
	ПользователиСлужебный.ПриПолученииПрочихНастроек(СведенияОПользователе, ПрочиеНастройки);
	Ключи = Новый СписокЗначений;
	
	Если ПрочиеНастройки <> Неопределено Тогда
		
		Для Каждого ПрочаяНастройка Из ПрочиеНастройки Цикл
			
			Результат = ПрочаяНастройка.Значение;
			Если Результат.СписокНастроек.Количество() <> 0 Тогда
				
				ВыводитьНастройку = Истина;
				Если Не ПустаяСтрока(Форма.Поиск) Тогда
					
					Если СтрНайти(ВРег(Результат.НазваниеНастройки), ВРег(Форма.Поиск)) = 0 Тогда
						ВыводитьНастройку = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ВыводитьНастройку Тогда
					
					Если ПрочаяНастройка.Ключ = "НастройкаБыстрогоДоступа" Тогда
						Для Каждого Элемент Из Результат.СписокНастроек Цикл
							ЗначениеНастройки = Элемент[0];
							ИдентификаторНастройки = Элемент[1];
							Ключи.Добавить(ЗначениеНастройки, ИдентификаторНастройки);
						КонецЦикла;
					Иначе
						Ключи = Результат.СписокНастроек.Скопировать();
					КонецЕсли;
					
					Настройка = Результат.НазваниеНастройки;
					Если Результат.КартинкаНастройки = "" Тогда
						Картинка = БиблиотекаКартинок.ПрочиеПользовательскиеНастройки;
					Иначе
						Картинка = Результат.КартинкаНастройки;
					КонецЕсли;
					Тип = "ПрочаяПользовательскаяНастройка";
					ТипНастройки = ПрочаяНастройка.Ключ;
					ДобавитьСтрокуДерева(ПрочиеНастройкиДерево, Настройка, Картинка, Ключи, Тип, ТипНастройки);
					Ключи.Очистить();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Прочие настройки, не попавшие в другие разделы.
	ВыводитьНастройку = Истина;
	Если Не ПустаяСтрока(Форма.Поиск) Тогда
		
		Если СтрНайти(ВРег(НСтр("ru='Прочие настройки'")), ВРег(Форма.Поиск)) = 0 Тогда
			ВыводитьНастройку = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПрочиеКлючи.Количество() <> 0
		И ВыводитьНастройку Тогда
		Настройка = НСтр("ru='Прочие настройки'");
		Картинка = БиблиотекаКартинок.ПрочиеПользовательскиеНастройки;
		ТипНастройки = "ПрочаяНастройка";
		ДобавитьСтрокуДерева(ПрочиеНастройкиДерево, Настройка, Картинка, ПрочиеКлючи, ТипНастройки);
	КонецЕсли;
	
	Форма.ЗначениеВРеквизитФормы(ПрочиеНастройкиДерево, "ПрочиеНастройки");
	
КонецПроцедуры

Процедура ДобавитьСтрокуДерева(ДеревоЗначений, Настройка, Картинка, Ключи, Тип = "", ТипСтроки = "")
	
	НоваяСтрока = ДеревоЗначений.Строки.Добавить();
	НоваяСтрока.Настройка = Настройка;
	НоваяСтрока.Картинка = Картинка;
	НоваяСтрока.Тип = Тип;
	НоваяСтрока.ТипСтроки = ?(ТипСтроки <> "", ТипСтроки, Тип);
	НоваяСтрока.Ключи = Ключи.Скопировать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли