&НаКлиенте
Перем ПараметрыОбработчика;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьУсловноеОформление();
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		ТекстОшибки = НСтр("ru = 'Недостаточно прав для выполнения операции.'");
		Возврат; // Отказ устанавливается в ПриОткрытии.
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И Не ОбщегоНазначения.ИспользованиеРазделителяСеанса() Тогда
		ТекстОшибки = НСтр("ru = 'Для удаления помеченных необходимо войти в область данных.'");
		Возврат; // Отказ устанавливается в ПриОткрытии.
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПоискИУдалениеДублей") Тогда
		Элементы.НеУдаленныеЗаменитьНа.Видимость = Ложь;
		Элементы.НеУдаленныеЗаменитьНаИзМеню.Видимость = Ложь;
	КонецЕсли;
	
	БыстрыйПоиск = Новый Структура;
	БыстрыйПоиск.Вставить("ПолныеИменаОбъектовМетаданных", Новый Соответствие);
	
	РежимУдаления = "Полный";
	ПриСозданииНаСервереУстановитьТекстПоясненияКОбработке();
	ВидимостьДоступность(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ВидимостьДоступность(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ПоказатьПредупреждение(, ТекстОшибки);
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация Тогда
		Отказ = Истина;
		ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
		Обработчик = Новый ОписаниеОповещения("ПередЗакрытиемОтветНаВопрос", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Удаление помеченных еще выполняется.
		|Прервать?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Прервать);
		Кнопки.Добавить(КодВозвратаДиалога.Пропустить, НСтр("ru = 'Не прерывать'"));
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, 60, КодВозвратаДиалога.Пропустить);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемОтветНаВопрос(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ = КодВозвратаДиалога.Прервать Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыборРежимаУдаления; // Чтобы пропустить вопрос.
		Закрыть(); // Отмена фонового задания выполняется в обработчике ПриЗакрытии().
	Иначе
		ФоновоеЗаданиеПроверитьНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если ФоновоеЗаданиеИдентификатор <> Неопределено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор, Монопольно);
		ФоновоеЗаданиеИдентификатор = Неопределено;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимУдаленияПриИзменении(Элемент)
	ВидимостьДоступность(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеКОбработкеОбработкаНавигационнойСсылки(Элемент, Ссылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ОтборИмяПриложения", "1CV8,1CV8C,WebClient");
	СтандартныеПодсистемыКлиент.ОткрытьСписокАктивныхПользователей(ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура СсылкаПодробнееНажатие(Элемент)
	СтандартныеПодсистемыКлиент.ПоказатьПодробнуюИнформацию(Неопределено, ПодробныйТекстОшибки);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПомеченныхНаУдаление

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеПометкаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоПомеченныхНаУдаление.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДеревоПомеченныхНаУдалениеУстановитьПометкуВСписке(ТекущиеДанные, ТекущиеДанные.Пометка, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьОбъектТаблицы(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНеУдаленные

&НаКлиенте
Процедура НеУдаленныеПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ПоказатьСвязиНеУдаленныхНаКлиенте", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НеУдаленныеПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ПоказатьОбъектТаблицы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НеУдаленныеПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ПометитьВыделенныеОбъектыТаблицыНаУдаление(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НеУдаленныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьОбъектТаблицы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НеУдаленныеПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьОбъектТаблицы(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСвязиНеУдаленных

&НаКлиенте
Процедура СвязиНеУдаленныхПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ПоказатьОбъектТаблицы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СвязиНеУдаленныхПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ПометитьВыделенныеОбъектыТаблицыНаУдаление(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СвязиНеУдаленныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьОбъектТаблицы(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	ФоновоеЗаданиеЗапуститьНаКлиенте(1);
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыборРежимаУдаления;
	ВидимостьДоступность(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеУстановитьВсе(Команда)
	
	ЭлементыСписка = ДеревоПомеченныхНаУдаление.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыСписка Цикл
		ДеревоПомеченныхНаУдалениеУстановитьПометкуВСписке(Элемент, Истина, Истина);
		Родитель = Элемент.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			ДеревоПомеченныхНаУдалениеПроверитьРодителя(Элемент)
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеСнятьВсе(Команда)
	
	ЭлементыСписка = ДеревоПомеченныхНаУдаление.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыСписка Цикл
		ДеревоПомеченныхНаУдалениеУстановитьПометкуВСписке(Элемент, Ложь, Истина);
		Родитель = Элемент.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			ДеревоПомеченныхНаУдалениеПроверитьРодителя(Элемент)
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеИзменить(Команда)
	ПоказатьОбъектТаблицы(Элементы.ДеревоПомеченныхНаУдаление);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеОбновить(Команда)
	ФоновоеЗаданиеЗапуститьНаКлиенте(2);
КонецПроцедуры

&НаКлиенте
Процедура НеУдаленныеЗаменитьНа(Команда)
	МассивИдентификаторов = Элементы.НеУдаленные.ВыделенныеСтроки;
	Если МассивИдентификаторов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		СтрокаТаблицы = НеУдаленные.НайтиПоИдентификатору(Идентификатор);
		Если ТипЗнч(СтрокаТаблицы.УдаляемыйСсылка) = Тип("Строка") Тогда
			Продолжить; // Пропуск групп.
		КонецЕсли;
		МассивСсылок.Добавить(СтрокаТаблицы.УдаляемыйСсылка);
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите объекты'"));
		Возврат;
	КонецЕсли;
	
	// Проверка подсистемы выполняется в ПриСозданииНаСервере.
	МодульПоискИУдалениеДублейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПоискИУдалениеДублейКлиент");
	МодульПоискИУдалениеДублейКлиент.ЗаменитьВыделенные(МассивСсылок);
КонецПроцедуры

&НаКлиенте
Процедура НеУдаленныеУдалить(Команда)
	ПометитьВыделенныеОбъектыТаблицыНаУдаление(Элементы.НеУдаленные);
КонецПроцедуры

&НаКлиенте
Процедура СвязиНеУдаленныхУдалить(Команда)
	ПометитьВыделенныеОбъектыТаблицыНаУдаление(Элементы.СвязиНеУдаленных);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Поля = "СвязиНеУдаленных, СвязиНеУдаленныхПредставление";
	Инструкция.Отборы.Вставить("СвязиНеУдаленных.Видимость", Ложь);
	Инструкция.Оформление.Вставить("Видимость", Ложь);
	Инструкция.Оформление.Вставить("Отображать", Ложь);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	Результат = ФоновоеЗаданиеПолучитьРезультат();
	Если Результат.ФоновоеЗаданиеВыполнено Тогда
		СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(ЭтотОбъект, Результат);
		Если Результат.Свойство("РазвернутьУзлыДерева") Тогда
			РазвернутьУзлыДерева = Результат.РазвернутьУзлыДерева;
			Если РазвернутьУзлыДерева.Использование Тогда
				Элементы[РазвернутьУзлыДерева.Имя].Развернуть(РазвернутьУзлыДерева.Идентификатор, РазвернутьУзлыДерева.СПодчиненными);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеЗапуститьНаКлиенте(Действие)
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИскатьПомеченные", Ложь);
	ПараметрыЗадания.Вставить("УдалятьПомеченные", Ложь);
	ПараметрыЗадания.Вставить("ПрочитатьПомеченныеСоСтраницыРезультатов", Ложь);
	ПараметрыЗадания.Вставить("ПрочитатьПомеченныеСоСтраницыУстановкиФлажков", Ложь);
	
	Если Действие = 1 Тогда
		ТекущаяСтраница = Элементы.СтраницыФормы.ТекущаяСтраница;
		Если ТекущаяСтраница = Элементы.СтраницаВыборРежимаУдаления Тогда
			Если РежимУдаления = "Полный" Тогда
				ПараметрыЗадания.ИскатьПомеченные = Истина;
				ПараметрыЗадания.УдалятьПомеченные = Истина;
			Иначе
				ПараметрыЗадания.ИскатьПомеченные = Истина;
			КонецЕсли;
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПомеченныеНаУдаление Тогда
			ПараметрыЗадания.ПрочитатьПомеченныеСоСтраницыУстановкиФлажков = Истина;
			ПараметрыЗадания.УдалятьПомеченные = Истина;
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПричиныНевозможностиУдаления Тогда
			Если РежимУдаления = "Полный" Тогда
				ПараметрыЗадания.ИскатьПомеченные = Истина;
			Иначе
				ПараметрыЗадания.ПрочитатьПомеченныеСоСтраницыРезультатов = Истина;
			КонецЕсли;
			ПараметрыЗадания.УдалятьПомеченные = Истина;
		КонецЕсли;
	ИначеЕсли Действие = 2 Тогда
		ПараметрыЗадания.ИскатьПомеченные = Истина;
		ПараметрыЗадания.ПрочитатьПомеченныеСоСтраницыУстановкиФлажков = Истина;
	КонецЕсли;
	
	Текст = НСтр("ru = 'Удаляются объекты, помеченные на удаление...'");
	Если ПараметрыЗадания.ИскатьПомеченные И ПараметрыЗадания.УдалятьПомеченные Тогда
		Состояние(НСтр("ru = 'Поиск и удаление помеченных объектов...'"));
	ИначеЕсли ПараметрыЗадания.ИскатьПомеченные Тогда
		Текст = НСтр("ru = 'Поиск помеченных на удаление объектов...'");
		Состояние(Текст);
	Иначе
		Состояние(НСтр("ru = 'Удаление выбранных объектов...'"));
	КонецЕсли;
	Элементы.НадписьДлительнаяОперация.Заголовок = Текст;
	
	Результат = ФоновоеЗаданиеЗапустить(ПараметрыЗадания);
	Если Результат.ФоновоеЗаданиеЗапущено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 1, Истина);
		ПараметрыОбработчика.МаксимальныйИнтервал = 5;
	ИначеЕсли Результат.ОшибкаПриУстановкеМонопольногоРежима Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЗавершениеРаботыПользователей") Тогда
			Оповещение = Новый ОписаниеОповещения("ФоновоеЗаданиеЗапуститьПослеУстановкиМонопольногоРежима", ЭтотОбъект, Действие);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("УдалениеПомеченныхОбъектов", Истина);
			МодульСоединенияИБКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СоединенияИБКлиент");
			МодульСоединенияИБКлиент.ПриОткрытииФормыОшибкиУстановкиМонопольногоРежима(Оповещение, ПараметрыФормы);
		Иначе
			СтандартныеПодсистемыКлиентСервер.ВывестиПредупреждение(
				Результат,
				НСтр("ru = 'Не удалось запустить удаление помеченных объектов'"),
				Результат.ТекстОшибкиУстановкиМонопольногоРежима);
		КонецЕсли;
	КонецЕсли;
	СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(ЭтотОбъект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСвязиНеУдаленныхНаКлиенте()
	СтрокаДерева = Элементы.НеУдаленные.ТекущиеДанные;
	ПоказыватьТекстОшибки = Истина;
	ТекстОшибки = "";
	ПодробныйТекстОшибки = "";
	Если СтрокаДерева = Неопределено Или СтрокаДерева.НомерКартинки < 1 Тогда
		// Ничего не выбрано или выбрана группа.
		НеУдаленныеПодсказка = НСтр("ru = 'Выберите объект, чтобы узнать причину,
		|по которой его не удалось удалить.'");
	Иначе
		// Выбрана ссылка не удаленного объекта.
		Скрываемые = СвязиНеУдаленных.НайтиСтроки(Новый Структура("Видимость", Истина));
		Для Каждого СтрокаТаблицы Из Скрываемые Цикл
			СтрокаТаблицы.Видимость = Ложь;
		КонецЦикла;
		
		НеУдаленныеПодсказка = " ";
		Показываемые = СвязиНеУдаленных.НайтиСтроки(Новый Структура("УдаляемыйСсылка", СтрокаДерева.УдаляемыйСсылка));
		Для Каждого СтрокаТаблицы Из Показываемые Цикл
			СтрокаТаблицы.Видимость = Истина;
			Если СтрокаТаблицы.ЭтоОшибка Тогда
				ТекстОшибки = СтрокаТаблицы.ОбнаруженныйСсылка;
				ПодробныйТекстОшибки = СтрокаТаблицы.Представление;
			Иначе
				Если ПоказыватьТекстОшибки Тогда
					Элементы.СвязиНеУдаленных.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
					ПоказыватьТекстОшибки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ПоказыватьТекстОшибки Тогда
		ТекущаяСтраница = Элементы.СтраницаТекстОшибки;
		Элементы.СсылкаПодробнее.Видимость = ЗначениеЗаполнено(ПодробныйТекстОшибки);
	Иначе
		ТекущаяСтраница = Элементы.СтраницаПричиныНеУдаления;
		Шаблон = НСтр("ru = 'Места использования объекта ""%1"" (%2):'");
		НеУдаленныеПодсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаДерева.Представление, Формат(СтрокаДерева.КоличествоСвязей, "ЧН=0; ЧГ="));
	КонецЕсли;
	Если Элементы.СтраницыВариантовОтображенияПричин.ТекущаяСтраница <> ТекущаяСтраница Тогда
		Элементы.СтраницыВариантовОтображенияПричин.ТекущаяСтраница = ТекущаяСтраница;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОбъектТаблицы(ТаблицаЭлемент)
	СтрокаТаблицы = ТаблицаЭлемент.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Значение = Неопределено;
	Если Не СтрокаТаблицы.Свойство("Значение", Значение)
		И Не СтрокаТаблицы.Свойство("ОбнаруженныйСсылка", Значение)
		И Не СтрокаТаблицы.Свойство("УдаляемыйСсылка", Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Если СтрокаТаблицы.Свойство("ЭтоКонстанта") И СтрокаТаблицы.ЭтоКонстанта Тогда
			ПутьКФорме = Значение + ".ФормаКонстант";
		Иначе
			ПутьКФорме = Значение + ".ФормаСписка";
		КонецЕсли;
		ОткрытьФорму(ПутьКФорме);
	Иначе
		ПолноеИмяОМ = БыстрыйПоиск.ПолныеИменаОбъектовМетаданных[ТипЗнч(Значение)];
		Если ТипЗнч(ПолноеИмяОМ) = Тип("Строка") Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ПоказатьКарточку", Истина);
			ПараметрыФормы.Вставить("Ключ", Значение);
			ВидОМ = СтрРазделить(ПолноеИмяОМ, ".")[0];
			Если ВидОМ = "РЕГИСТРСВЕДЕНИЙ"
				Или ВидОМ = "РЕГИСТРНАКОПЛЕНИЯ"
				Или ВидОМ = "РЕГИСТРБУХГАЛТЕРИИ"
				Или ВидОМ = "РЕГИСТРРАСЧЕТА" Тогда
				ПолноеИмяФормы = ПолноеИмяОМ + ".ФормаЗаписи";
			Иначе
				ПолноеИмяФормы = ПолноеИмяОМ + ".ФормаОбъекта";
			КонецЕсли;
			ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы);
		Иначе
			ПоказатьЗначение(, Значение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВыделенныеОбъектыТаблицыНаУдаление(ТаблицаЭлемент)
	Перем Значение;
	
	МассивИдентификаторов = ТаблицаЭлемент.ВыделенныеСтроки;
	КоличествоВыделено = МассивИдентификаторов.Количество();
	Если КоличествоВыделено = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаИмя = ТаблицаЭлемент.Имя;
	Если ТаблицаИмя = "ДеревоПомеченныхНаУдаление" Тогда
		ИмяРеквизитаЗначение = "Значение";
		ЭтоСвязиНеУдаленных = Ложь;
	ИначеЕсли ТаблицаИмя = "НеУдаленные" Тогда
		ИмяРеквизитаЗначение = "УдаляемыйСсылка";
		ЭтоСвязиНеУдаленных = Ложь;
	ИначеЕсли ТаблицаИмя = "СвязиНеУдаленных" Тогда
		ИмяРеквизитаЗначение = "ОбнаруженныйСсылка";
		ЭтоСвязиНеУдаленных = Истина;
	КонецЕсли;
	
	ТаблицаРеквизит = ЭтотОбъект[ТаблицаИмя];
	МассивСтрокТаблицы = Новый Массив;
	МассивСсылокПомеченныхНаУдаление = Новый Массив;
	МассивСсылокНеПомеченныхНаУдаление = Новый Массив;
	УстанавливатьПометку = Ложь;
	ЕстьЗаписиРегистров = Ложь;
	ЕстьКонстанты = Ложь;
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		СтрокаТаблицы = ТаблицаРеквизит.НайтиПоИдентификатору(Идентификатор);
		Если ЭтоСвязиНеУдаленных Тогда
			Если Не СтрокаТаблицы.Видимость Тогда
				Продолжить; // Обход особенности с CTRL+A.
			ИначеЕсли СтрокаТаблицы.ЭтоКонстанта Тогда
				ЕстьКонстанты = Истина;
				Продолжить;
			ИначеЕсли Не СтрокаТаблицы.СсылочногоТипа Тогда
				ЕстьЗаписиРегистров = Истина;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СтрокаТаблицы.Свойство(ИмяРеквизитаЗначение, Значение);
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			КоличествоВыделено = КоличествоВыделено - 1; // Группы не должны считаться выделенными.
			Продолжить; // Пропуск групп.
		КонецЕсли;
		Если СтрокаТаблицы.ПометкаУдаления Тогда
			МассивСсылокПомеченныхНаУдаление.Добавить(Значение);
		Иначе
			УстанавливатьПометку = Истина;
			МассивСсылокНеПомеченныхНаУдаление.Добавить(Значение);
		КонецЕсли;
		Если ТипЗнч(ТаблицаРеквизит) = Тип("ДанныеФормыКоллекция") Тогда
			Найденные = ТаблицаРеквизит.НайтиСтроки(Новый Структура(ИмяРеквизитаЗначение, Значение));
			Для Каждого СтрокаПоСсылке Из Найденные Цикл
				МассивСтрокТаблицы.Добавить(СтрокаПоСсылке);
			КонецЦикла;
		Иначе
			МассивСтрокТаблицы.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	МассивСсылок = ?(УстанавливатьПометку, МассивСсылокНеПомеченныхНаУдаление, МассивСсылокПомеченныхНаУдаление);
	КоличествоМожноУдалить = МассивСсылок.Количество();
	Если КоличествоМожноУдалить = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Выберите объект.'");
		Если КоличествоВыделено = 1 Тогда
			Если ЕстьЗаписиРегистров Тогда
				ТекстОшибки = НСтр("ru = 'Удаление записи регистра выполняется из ее карточки.'");
			ИначеЕсли ЕстьКонстанты Тогда
				ТекстОшибки = НСтр("ru = 'Очистка значения константы выполняется из ее карточки.'");
			КонецЕсли;
		Иначе
			Если ЕстьЗаписиРегистров Или ЕстьКонстанты Тогда
				ТекстОшибки = НСтр("ru = 'Удаление записей регистров или очистка значений констант выполняется из их карточек.'");
			КонецЕсли;
		КонецЕсли;
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ТаблицаИмя", ТаблицаИмя);
	ПараметрыОбработчика.Вставить("МассивСтрокТаблицы", МассивСтрокТаблицы);
	ПараметрыОбработчика.Вставить("МассивСсылок", МассивСсылок);
	ПараметрыОбработчика.Вставить("ИмяРеквизитаЗначение", ИмяРеквизитаЗначение);
	ПараметрыОбработчика.Вставить("УстанавливатьПометку", УстанавливатьПометку);
	
	Обработчик = Новый ОписаниеОповещения("ПометитьВыделенныеОбъектыТаблицыНаУдалениеЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	Если КоличествоМожноУдалить = 1 Тогда
		Если УстанавливатьПометку Тогда
			ТекстВопроса = НСтр("ru = 'Пометить ""%1"" на удаление?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Снять с ""%1"" пометку на удаление?'");
		КонецЕсли;
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, МассивСтрокТаблицы[0].Представление);
	Иначе
		Если УстанавливатьПометку Тогда
			ТекстВопроса = НСтр("ru = 'Пометить выделенные объекты (%1) на удаление?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Снять с выделенных объектов (%1) пометку на удаление?'");
		КонецЕсли;
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, Формат(КоличествоМожноУдалить, "ЧН=0; ЧГ="));
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да);
	Кнопки.Добавить(КодВозвратаДиалога.Нет);
	
	ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, 60, КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВыделенныеОбъектыТаблицыНаУдалениеЗавершение(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ПометкаУдаления = ПараметрыВыполнения.УстанавливатьПометку;
	РезультатРаботыСервера = ИзменитьПометкуУдаленияОбъектов(ПараметрыВыполнения.МассивСсылок, ПометкаУдаления);
	СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(ЭтотОбъект, РезультатРаботыСервера);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеУстановитьПометкуВСписке(Данные, Пометка, ПроверятьРодителя)
	
	// Устанавливаем подчиненным
	ЭлементыСтроки = Данные.ПолучитьЭлементы();
	
	Для Каждого Элемент Из ЭлементыСтроки Цикл
		Элемент.Пометка = Пометка;
		ДеревоПомеченныхНаУдалениеУстановитьПометкуВСписке(Элемент, Пометка, Ложь);
	КонецЦикла;
	
	// Проверяем родителя
	Родитель = Данные.ПолучитьРодителя();
	
	Если ПроверятьРодителя И Родитель <> Неопределено Тогда 
		ДеревоПомеченныхНаУдалениеПроверитьРодителя(Родитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеПроверитьРодителя(Родитель)
	
	ПометкаРодителя = Истина;
	ЭлементыСтроки = Родитель.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыСтроки Цикл
		Если Не Элемент.Пометка Тогда
			ПометкаРодителя = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Родитель.Пометка = ПометкаРодителя;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Клиент, Сервер

&НаКлиентеНаСервереБезКонтекста
Процедура ВидимостьДоступность(Форма)
	Элементы = Форма.Элементы;
	ТекущаяСтраница = Элементы.СтраницыФормы.ТекущаяСтраница;
	
	Элементы.КнопкаДалее.Заголовок = НСтр("ru = 'Удалить'");
	Элементы.КнопкаЗакрыть.Заголовок = НСтр("ru = 'Закрыть'");
	Элементы.КнопкаНазад.Заголовок = НСтр("ru = '< В начало'");
	
	Если ТекущаяСтраница = Элементы.СтраницаВыборРежимаУдаления Тогда
		Элементы.КнопкаНазад.Видимость = Ложь;
		Элементы.КнопкаДалее.Видимость = Истина;
		Если Форма.РежимУдаления <> "Полный" Тогда
			Элементы.КнопкаДалее.Заголовок = НСтр("ru = 'Далее >'");
		КонецЕсли;
		Элементы.КнопкаДалее.КнопкаПоУмолчанию = Истина;
		Элементы.КнопкаЗакрыть.Заголовок = НСтр("ru = 'Отмена'");
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПомеченныеНаУдаление Тогда
		Элементы.КнопкаНазад.Видимость = Истина;
		Элементы.КнопкаНазад.Заголовок = НСтр("ru = '< Назад'");
		Элементы.КнопкаДалее.Видимость = Истина;
		Элементы.КнопкаДалее.Заголовок = НСтр("ru = 'Удалить'");
		Элементы.КнопкаДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация Тогда
		Элементы.КнопкаНазад.Видимость = Ложь;
		Элементы.КнопкаДалее.Видимость = Ложь;
		Элементы.КнопкаЗакрыть.Заголовок = НСтр("ru = 'Прервать и закрыть'");
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПричиныНевозможностиУдаления Тогда
		Элементы.КнопкаНазад.Видимость = Истина;
		Элементы.КнопкаДалее.Видимость = Истина;
		Элементы.КнопкаДалее.Заголовок = НСтр("ru = 'Повторить удаление'");
		Элементы.КнопкаДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаУдалениеНеТребуется Тогда
		Элементы.КнопкаНазад.Видимость = Истина;
		Элементы.КнопкаДалее.Видимость = Ложь;
		Элементы.КнопкаЗакрыть.КнопкаПоУмолчанию = Истина;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаУспешноЗавершено Тогда
		Элементы.КнопкаНазад.Видимость = Истина;
		Элементы.КнопкаДалее.Видимость = Ложь;
		Элементы.КнопкаЗакрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		Если ТекущаяСтраница = Элементы.СтраницаПричиныНевозможностиУдаления Тогда
			Элементы.СтраницаПричиныНевозможностиУдаления.Видимость = Истина;
		Иначе
			Элементы.СтраницаПричиныНевозможностиУдаления.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НомерКартинки(СсылкаИлиДанные, СсылочногоТипа, Вид, ПометкаУдаления)
	Если СсылочногоТипа Тогда
		Если Вид = "СПРАВОЧНИК"
			Или Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
			НомерКартинки = 3;
		ИначеЕсли Вид = "ДОКУМЕНТ" Тогда
			НомерКартинки = 12;
		ИначеЕсли Вид = "ПЛАНСЧЕТОВ" Тогда
			НомерКартинки = 15;
		ИначеЕсли Вид = "ПЛАНВИДОВРАСЧЕТА" Тогда
			НомерКартинки = 17;
		ИначеЕсли Вид = "БИЗНЕСПРОЦЕСС" Тогда
			НомерКартинки = 19;
		ИначеЕсли Вид = "ЗАДАЧА" Тогда
			НомерКартинки = 21;
		ИначеЕсли Вид = "ПЛАНОБМЕНА" Тогда
			НомерКартинки = 23;
		Иначе
			НомерКартинки = -2;
		КонецЕсли;
		Если ПометкаУдаления Тогда
			НомерКартинки = НомерКартинки + 1;
		КонецЕсли;
	Иначе
		Если Вид = "КОНСТАНТА" Тогда
			НомерКартинки = 25;
		ИначеЕсли Вид = "РЕГИСТРСВЕДЕНИЙ" Тогда
			НомерКартинки = 26;
		ИначеЕсли Вид = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
			НомерКартинки = 28;
		ИначеЕсли Вид = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
			НомерКартинки = 34;
		ИначеЕсли Вид = "РЕГИСТРРАСЧЕТА" Тогда
			НомерКартинки = 38;
		ИначеЕсли СсылкаИлиДанные = Неопределено Тогда
			НомерКартинки = 11;
		Иначе
			НомерКартинки = 8;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерКартинки;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера, Сервер

&НаСервере
Функция ПомеченныеНаУдалениеСоСтраницыРезультатов()
	Результат = Новый Массив;
	
	ДеревоЗначений = РеквизитФормыВЗначение("НеУдаленные");
	Найденные = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("ПометкаУдаления", Истина), Истина);
	Для Каждого СтрокаДерева Из Найденные Цикл
		Если ТипЗнч(СтрокаДерева.УдаляемыйСсылка) <> Тип("Строка")
			И Результат.Найти(СтрокаДерева.УдаляемыйСсылка) = Неопределено Тогда
			Результат.Добавить(СтрокаДерева.УдаляемыйСсылка);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗначений = РеквизитФормыВЗначение("СвязиНеУдаленных");
	Если РежимУдаления = "Полный" Тогда
		Фильтр = Новый Структура("ПометкаУдаления", Истина);
	Иначе
		Фильтр = Новый Структура("ПометкаУдаления, ПометкаУдаленияМодифицирована", Истина, Истина);
	КонецЕсли;
	Найденные = ТаблицаЗначений.НайтиСтроки(Фильтр);
	Для Каждого СтрокаДерева Из Найденные Цикл
		Если ТипЗнч(СтрокаДерева.ОбнаруженныйСсылка) <> Тип("Строка")
			И Результат.Найти(СтрокаДерева.ОбнаруженныйСсылка) = Неопределено Тогда
			Результат.Добавить(СтрокаДерева.ОбнаруженныйСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПомеченныеНаУдалениеСоСтраницыУстановкиФлажков()
	Результат = Новый Массив;
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоПомеченныхНаУдаление");
	Найденные = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("Пометка", Истина), Истина);
	Для Каждого СтрокаДерева Из Найденные Цикл
		Если ТипЗнч(СтрокаДерева.Значение) <> Тип("Строка") Тогда
			Результат.Добавить(СтрокаДерева.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеПолучитьРезультат()
	Результат = Новый Структура;
	Результат.Вставить("ФоновоеЗаданиеВыполнено", Ложь);
	Результат.ФоновоеЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор);
	Если Результат.ФоновоеЗаданиеВыполнено Тогда
		ФоновоеЗаданиеЗагрузитьРезультат(Результат);
	Иначе
		ФоновоеЗаданиеПрочитатьПромежуточныйРезультат(Результат);
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеЗапустить(Знач ПараметрыЗадания)
	Результат = Новый Структура;
	Результат.Вставить("ФоновоеЗаданиеЗапущено", Ложь);
	Результат.Вставить("ОшибкаПриУстановкеМонопольногоРежима", Ложь);
	Результат.Вставить("ТекстОшибкиУстановкиМонопольногоРежима", Неопределено);
	
	Если ПараметрыЗадания.УдалятьПомеченные И Монопольно Тогда
		ИнформацияОбОшибке = Неопределено;
		Попытка
			ОбщегоНазначения.ЗаблокироватьИБ();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
		КонецПопытки;
		Если ИнформацияОбОшибке <> Неопределено Тогда
			Результат.ОшибкаПриУстановкеМонопольногоРежима   = Истина;
			Результат.ТекстОшибкиУстановкиМонопольногоРежима = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	// Запуск фонового задания
	Если Не ПараметрыЗадания.ИскатьПомеченные Тогда
		Если ПараметрыЗадания.ПрочитатьПомеченныеСоСтраницыРезультатов Тогда
			ПользовательскиеОбъекты = ПомеченныеНаУдалениеСоСтраницыРезультатов();
		ИначеЕсли ПараметрыЗадания.ПрочитатьПомеченныеСоСтраницыУстановкиФлажков Тогда
			ПользовательскиеОбъекты = ПомеченныеНаУдалениеСоСтраницыУстановкиФлажков();
		КонецЕсли;
		Если ПользовательскиеОбъекты.Количество() = 0 Тогда
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаУдалениеНеТребуется;
			ВидимостьДоступность(ЭтотОбъект);
			Возврат Результат;
		КонецЕсли;
		ПараметрыЗадания.Вставить("ПользовательскиеОбъекты", ПользовательскиеОбъекты);
	КонецЕсли;
	
	ПараметрыЗадания.Вставить("ПериодЗаписи", 1); // Секунд
	ПараметрыЗадания.Вставить("Монопольно", Монопольно);
	
	РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.УдалениеПомеченныхОбъектов.УдалитьПомеченныеОбъектыИнтерактивно",
		ПараметрыЗадания,
		НСтр("ru = 'Удаление помеченных объектов (интерактивное)'"));
	
	ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
	ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
	
	Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		ФоновоеЗаданиеЗагрузитьРезультат(Результат);
		Результат.ФоновоеЗаданиеЗапущено = Ложь;
	Иначе
		ФоновоеЗаданиеПоказатьСтраницуДлительнойОперации(ПараметрыЗадания);
		ФоновоеЗаданиеПрочитатьПромежуточныйРезультат(Результат);
		Результат.ФоновоеЗаданиеЗапущено = Истина;
	КонецЕсли;
	ВидимостьДоступность(ЭтотОбъект);
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(Знач ФоновоеЗаданиеИдентификатор, Знач Монопольно)
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
	Если Монопольно Тогда
		СнятьМонопольныйРежим();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ИзменитьПометкуУдаленияОбъектов(МассивСсылок, ПометкаУдаления)
	Результат = Новый Структура;
	Количество = МассивСсылок.Количество();
	Для Номер = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Номер;
		ИзменяемыйОбъект = МассивСсылок[ОбратныйИндекс].ПолучитьОбъект();
		Если ИзменяемыйОбъект = Неопределено Тогда
			МассивСсылок.Удалить(ОбратныйИндекс);
		Иначе
			ИзменяемыйОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоОбъектов = МассивСсылок.Количество();
	
	Если КоличествоОбъектов > 0 Тогда
		ДеревоЗначений = РеквизитФормыВЗначение("НеУдаленные");
		ТаблицаЗначений = РеквизитФормыВЗначение("СвязиНеУдаленных");
		
		Для Каждого Ссылка Из МассивСсылок Цикл
			Найденные = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("УдаляемыйСсылка", Ссылка), Истина);
			Для Каждого СтрокаДерева Из Найденные Цикл
				Если СтрокаДерева.ПометкаУдаления = ПометкаУдаления Тогда
					Продолжить;
				КонецЕсли;
				СтрокаДерева.ПометкаУдаления = ПометкаУдаления;
				СтрокаДерева.НомерКартинки   = СтрокаДерева.НомерКартинки + ?(ПометкаУдаления, 1, -1);
			КонецЦикла;
			
			Найденные = ТаблицаЗначений.НайтиСтроки(Новый Структура("ОбнаруженныйСсылка", Ссылка));
			Для Каждого СтрокаТаблицы Из Найденные Цикл
				Если СтрокаТаблицы.ПометкаУдаления = ПометкаУдаления Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТаблицы.ПометкаУдаления = ПометкаУдаления;
				СтрокаТаблицы.НомерКартинки   = СтрокаТаблицы.НомерКартинки + ?(ПометкаУдаления, 1, -1);
				СтрокаТаблицы.ПометкаУдаленияМодифицирована = Истина;
			КонецЦикла;
		КонецЦикла;
		
		ЗагрузитьКоллекцию("НеУдаленные", ДеревоЗначений, "УдаляемыйСсылка");
		ЗагрузитьКоллекцию("СвязиНеУдаленных", ТаблицаЗначений, "УдаляемыйСсылка, ОбнаруженныйСсылка");
		СтандартныеПодсистемыКлиентСервер.РазвернутьУзлыДерева(Результат, "НеУдаленные", "*", Истина);
	КонецЕсли;
	
	СтандартныеПодсистемыКлиентСервер.ОповеститьДинамическиеСписки(
		Результат,
		МассивСсылок,
		Новый Структура("ПометкаУдаления", ПометкаУдаления));
	
	ОповещениеТекст = Неопределено;
	ОповещениеСсылка = Неопределено;
	Если КоличествоОбъектов = 0 Тогда
		ОповещениеЗаголовок = НСтр("ru = 'Объект не найден'");
	Иначе
		Если ПометкаУдаления Тогда
			ОповещениеЗаголовок = НСтр("ru = 'Пометка удаления установлена'");
		Иначе
			ОповещениеЗаголовок = НСтр("ru = 'Пометка удаления снята'");
		КонецЕсли;
		Если КоличествоОбъектов = 1 Тогда
			ОповещениеСсылка = МассивСсылок[0];
			ОповещениеТекст  = Строка(ОповещениеСсылка);
		Иначе
			ОповещениеЗаголовок = ОповещениеЗаголовок + " (" + Формат(КоличествоОбъектов, "ЧН=0; ЧГ=") + ")";
		КонецЕсли;
	КонецЕсли;
	СтандартныеПодсистемыКлиентСервер.ВывестиОповещение(Результат, ОповещениеЗаголовок, ОповещениеТекст, , ОповещениеСсылка);
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗагрузитьКоллекцию(ИмяТаблицы, ДанныеТаблицы, КлючевыеКолонки)
	ВыделенныеСтроки = ЗапомнитьВыделенныеСтроки(ИмяТаблицы, КлючевыеКолонки);
	ЗначениеВРеквизитФормы(ДанныеТаблицы, ИмяТаблицы);
	ВосстановитьВыделенныеСтроки(ИмяТаблицы, ВыделенныеСтроки);
КонецПроцедуры

&НаСервере
Функция ЗапомнитьВыделенныеСтроки(ИмяТаблицы, КлючевыеКолонки)
	ТаблицаРеквизит = ЭтотОбъект[ИмяТаблицы];
	ТаблицаЭлемент = Элементы[ИмяТаблицы];
	
	Результат = Новый Структура;
	Результат.Вставить("Выделенные", Новый Массив);
	Результат.Вставить("Текущая", Неопределено);
	
	ТекущаяИдентификатор = ТаблицаЭлемент.ТекущаяСтрока;
	Если ТекущаяИдентификатор <> Неопределено Тогда
		СтрокаТаблицы = ТаблицаРеквизит.НайтиПоИдентификатору(ТекущаяИдентификатор);
		Если СтрокаТаблицы <> Неопределено Тогда
			ДанныеСтроки = Новый Структура(КлючевыеКолонки);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
			Результат.Текущая = ДанныеСтроки;
		КонецЕсли;
	КонецЕсли;
	
	ВыделенныеСтроки = ТаблицаЭлемент.ВыделенныеСтроки;
	Если ВыделенныеСтроки <> Неопределено Тогда
		Для Каждого ВыделеннаяИдентификатор Из ВыделенныеСтроки Цикл
			Если ВыделеннаяИдентификатор = ТекущаяИдентификатор Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы = ТаблицаРеквизит.НайтиПоИдентификатору(ВыделеннаяИдентификатор);
			Если СтрокаТаблицы <> Неопределено Тогда
				ДанныеСтроки = Новый Структура(КлючевыеКолонки);
				ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
				Результат.Выделенные.Добавить(ДанныеСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ВосстановитьВыделенныеСтроки(ИмяТаблицы, СтрокиТаблицы)
	ТаблицаРеквизит = ЭтотОбъект[ИмяТаблицы];
	ТаблицаЭлемент = Элементы[ИмяТаблицы];
	
	ТаблицаЭлемент.ВыделенныеСтроки.Очистить();
	
	Если СтрокиТаблицы.Текущая <> Неопределено Тогда
		Найденные = НайтиСтрокиТаблицы(ТаблицаРеквизит, СтрокиТаблицы.Текущая);
		Если Найденные <> Неопределено И Найденные.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из Найденные Цикл
				Если СтрокаТаблицы <> Неопределено Тогда
					Идентификатор = СтрокаТаблицы.ПолучитьИдентификатор();
					ТаблицаЭлемент.ТекущаяСтрока = Идентификатор;
					ТаблицаЭлемент.ВыделенныеСтроки.Добавить(Идентификатор);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ДанныеСтроки Из СтрокиТаблицы.Выделенные Цикл
		Найденные = НайтиСтрокиТаблицы(ТаблицаРеквизит, ДанныеСтроки);
		Если Найденные <> Неопределено И Найденные.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из Найденные Цикл
				Если СтрокаТаблицы <> Неопределено Тогда
					ТаблицаЭлемент.ВыделенныеСтроки.Добавить(СтрокаТаблицы.ПолучитьИдентификатор());
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция НайтиСтрокиТаблицы(ТаблицаРеквизит, ДанныеСтроки)
	Если ТипЗнч(ТаблицаРеквизит) = Тип("ДанныеФормыКоллекция") Тогда // Таблица значений.
		Возврат ТаблицаРеквизит.НайтиСтроки(ДанныеСтроки);
	ИначеЕсли ТипЗнч(ТаблицаРеквизит) = Тип("ДанныеФормыДерево") Тогда // Дерево значений.
		Возврат НайтиРекурсивно(ТаблицаРеквизит.ПолучитьЭлементы(), ДанныеСтроки);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Функция НайтиРекурсивно(НаборСтрок, ДанныеСтроки, Найденные = Неопределено)
	Если Найденные = Неопределено Тогда
		Найденные = Новый Массив;
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из НаборСтрок Цикл
		ЗначенияСовпадают = Истина;
		Для Каждого КлючИЗначение Из ДанныеСтроки Цикл
			Если СтрокаТаблицы[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
				ЗначенияСовпадают = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначенияСовпадают Тогда
			Найденные.Добавить(СтрокаТаблицы);
		КонецЕсли;
		НайтиРекурсивно(СтрокаТаблицы.ПолучитьЭлементы(), ДанныеСтроки, Найденные);
	КонецЦикла;
	Возврат Найденные;
КонецФункции

&НаСервереБезКонтекста
Процедура СнятьМонопольныйРежим()
	ОбщегоНазначения.РазблокироватьИБ();
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗавершениеРаботыПользователей") Тогда
		МодульСоединенияИБ = ОбщегоНазначения.ОбщийМодуль("СоединенияИБ");
		МодульСоединенияИБ.РазрешитьРаботуПользователей();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеЗапуститьПослеУстановкиМонопольногоРежима(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Ложь Тогда // Монопольный режим был установлен.
		ФоновоеЗаданиеЗапуститьНаКлиенте(ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура ПриСозданииНаСервереУстановитьТекстПоясненияКОбработке()
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		КоличествоСоединений = 0;
		ВыводитьПодпись = Ложь;
		ВыводитьКоличество = Ложь;
	ИначеЕсли ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		КоличествоСоединений = 0;
		НомерЭтогоСеанса = НомерСеансаИнформационнойБазы();
		Для Каждого СеансИнформационнойБазы Из ПолучитьСеансыИнформационнойБазы() Цикл
			Если СеансИнформационнойБазы.НомерСеанса = НомерЭтогоСеанса Тогда
				Продолжить;
			КонецЕсли;
			Если СеансИнформационнойБазы.ИмяПриложения = "1CV8" // Толстый клиент.
				Или СеансИнформационнойБазы.ИмяПриложения = "1CV8C" // Тонкий клиент.
				Или СеансИнформационнойБазы.ИмяПриложения = "WebClient" Тогда // Веб-клиент.
				КоличествоСоединений = КоличествоСоединений + 1;
			КонецЕсли;
		КонецЦикла;
		ВыводитьПодпись = (КоличествоСоединений > 0);
		ВыводитьКоличество = Истина;
	Иначе
		КоличествоСоединений = 0;
		ВыводитьПодпись = Истина;
		ВыводитьКоличество = Ложь;
	КонецЕсли;
	
	ШаблонЗаголовка = Элементы.ПояснениеКОбработке.Заголовок;
	Если Не ВыводитьПодпись Тогда
		Элементы.ПояснениеКОбработке.Заголовок = Лев(ШаблонЗаголовка, СтрНайти(ШаблонЗаголовка, "<1/>") - 1);
		КлючСохраненияПоложенияОкна = "1";
	Иначе
		Остаток = СтрЗаменить(ШаблонЗаголовка, "<1/>", "");
		МассивСтрок = Новый Массив;
		
		Позиция = СтрНайти(Остаток, "<a");
		МассивСтрок.Добавить(Лев(Остаток, Позиция - 1));
		Остаток = Сред(Остаток, Позиция);
		
		Позиция = СтрНайти(Остаток, "</a>");
		ОпределениеСсылки = Лев(Остаток, Позиция -1);
		Остаток = Сред(Остаток, Позиция + 4);
		
		Позиция = СтрНайти(ОпределениеСсылки, """");
		ОпределениеСсылки = Сред(ОпределениеСсылки, Позиция + 1);
		
		Позиция = СтрНайти(ОпределениеСсылки, """");
		АдресСсылки = Лев(ОпределениеСсылки, Позиция - 1);
		ТекстСсылки = Сред(ОпределениеСсылки, Позиция + 2);
		Если ВыводитьКоличество Тогда
			ТекстСсылки = ТекстСсылки + " (" + Формат(КоличествоСоединений, "ЧГ=") + ")";
		КонецЕсли;
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстСсылки, , , , АдресСсылки));
		МассивСтрок.Добавить(Остаток);
		
		Элементы.ПояснениеКОбработке.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		КлючСохраненияПоложенияОкна = "2";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеПоказатьСтраницуДлительнойОперации(ПараметрыЗадания)
	ПредставлениеРежима = Элементы.РежимУдаления.СписокВыбора.НайтиПоЗначению(РежимУдаления).Представление;
	
	ПоказыватьБублик = ПараметрыЗадания.УдалятьПомеченные И Монопольно;
	Элементы.ФоновоеЗаданиеАнимация.Видимость = ПоказыватьБублик;
	Элементы.ФоновоеЗаданиеПроцент.Видимость  = Не ПоказыватьБублик;
	Элементы.СтраницыФормы.ТекущаяСтраница    = Элементы.СтраницаДлительнаяОперация;
	Если ПоказыватьБублик Тогда
		Элементы.НадписьДлительнаяОперация.Заголовок = НСтр("ru = 'Пожалуйста, подождите...'");
		Элементы.НадписьДлительнаяОперация.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		Элементы.ФоновоеЗаданиеСостояние.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	ИначеЕсли ПараметрыЗадания.УдалятьПомеченные Тогда
		Элементы.НадписьДлительнаяОперация.Заголовок = НСтр("ru = 'Удаляются объекты, помеченные на удаление...'");
		Элементы.НадписьДлительнаяОперация.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		Элементы.ФоновоеЗаданиеСостояние.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	Иначе
		Элементы.НадписьДлительнаяОперация.Заголовок = НСтр("ru = 'Поиск объектов, помеченных на удаление...'");
		Элементы.НадписьДлительнаяОперация.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		Элементы.ФоновоеЗаданиеСостояние.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеПрочитатьПромежуточныйРезультат(Результат)
	Прогресс = ДлительныеОперации.ПрочитатьПрогресс(ФоновоеЗаданиеИдентификатор);
	Если Прогресс <> Неопределено Тогда
		ФоновоеЗаданиеПроцент   = Прогресс.Процент;
		ФоновоеЗаданиеСостояние = Прогресс.Текст;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеЗагрузитьРезультат(Результат)
	Если Монопольно Тогда
		СнятьМонопольныйРежим();
	КонецЕсли;
	
	// Получение результата.
	РезультатВыполненияВФоне = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	Если РезультатВыполненияВФоне = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполненияВФоне.УдалятьПомеченные Тогда
		
		// Подготовка оповещения для динамических списков.
		СтандартныеПодсистемыКлиентСервер.ОповеститьДинамическиеСписки(
			Результат,
			РезультатВыполненияВФоне.Удаленные,
			Новый Структура("УдалениеПомеченных", Истина));
		
		УдаленныеКоличество = РезультатВыполненияВФоне.Удаленные.Количество();
		НеУдаленныеКоличество = РезультатВыполненияВФоне.НеУдаленные.Количество();
		
		ОповещениеТекст = Неопределено;
		ОповещениеКартинка = Неопределено;
		
		Если УдаленныеКоличество = 0 И НеУдаленныеКоличество = 0 Тогда
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаУдалениеНеТребуется;
		ИначеЕсли НеУдаленныеКоличество = 0 Тогда
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаУспешноЗавершено;
			ОповещениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Удаление помеченных объектов успешно завершено.
					|Удалено объектов: %1.'"),
				Формат(УдаленныеКоличество, "ЧН=0; ЧГ="));
			Элементы.НадписьУспешноЗавершено.Заголовок = ОповещениеТекст;
		Иначе
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПричиныНевозможностиУдаления;
			ОповещениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Удаление помеченных объектов завершено.
					|Удалено объектов: %1,
					|Не удалено: %2.'"),
				Формат(УдаленныеКоличество, "ЧН=0; ЧГ="),
				Формат(НеУдаленныеКоличество, "ЧН=0; ЧГ="));
			ОповещениеКартинка = БиблиотекаКартинок.Предупреждение32;
			
			Если УдаленныеКоличество = 0 Тогда
				Элементы.НадписьИтогиЧастичногоУдаления.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не получилось удалить объекты, помеченные на удаление (%1):'"),
					Формат(НеУдаленныеКоличество, "ЧН=0; ЧГ="));
			Иначе
				Элементы.НадписьИтогиЧастичногоУдаления.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Успешно удалено: %1 из %2, остальные объекты не удалены (%3):'"),
					Формат(УдаленныеКоличество, "ЧН=0; ЧГ="),
					Формат(УдаленныеКоличество+НеУдаленныеКоличество, "ЧН=0; ЧГ="),
					Формат(НеУдаленныеКоличество, "ЧН=0; ЧГ="));
			КонецЕсли;
			
			Шаблон = Элементы.ГруппаНеУдаленные.Заголовок;
			Шаблон = Лев(Шаблон, СтрНайти(Шаблон, "("));
			Элементы.ГруппаНеУдаленные.Заголовок = Шаблон + Формат(НеУдаленныеКоличество, "ЧН=0; ЧГ=") + ")";
			
			ЗаполнитьКоллекцииОставшихсяОбъектов(РезультатВыполненияВФоне);
			
			ГруппыНеУдаленных = НеУдаленные.ПолучитьЭлементы();
			Если ГруппыНеУдаленных.Количество() > 0 Тогда
				ЭлементыПервойГруппы = ГруппыНеУдаленных[0].ПолучитьЭлементы();
				Если ЭлементыПервойГруппы.Количество() > 0 Тогда
					Элементы.НеУдаленные.ТекущаяСтрока = ЭлементыПервойГруппы[0].ПолучитьИдентификатор();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОповещениеТекст <> Неопределено Тогда
			СтандартныеПодсистемыКлиентСервер.ВывестиОповещение(
				Результат,
				НСтр("ru = 'Удаление помеченных'"),
				ОповещениеТекст,
				ОповещениеКартинка,
				НавигационнаяСсылка);
		КонецЕсли;
		
	Иначе
		
		// Заполнение дерева помеченных на удаление.
		Отмеченные = ПомеченныеНаУдалениеСоСтраницыРезультатов();
		ПометкиУстанавливаютсяВыборочно = (Отмеченные.Количество() > 0);
		
		ОбработкаМенеджер = Обработки.УдалениеПомеченныхОбъектов;
		
		ДеревоЗначений = РеквизитФормыВЗначение("ДеревоПомеченныхНаУдаление");
		ДеревоЗначений.Строки.Очистить();
		ДеревоЗначений.Колонки.Добавить("Количество");
		
		УзлыПервогоУровня = Новый Соответствие;
		
		ПользовательскиеОбъекты = РезультатВыполненияВФоне.ПользовательскиеОбъекты;
		Для Каждого УдаляемыйСсылка Из ПользовательскиеОбъекты Цикл
			ТипУдаляемого = ТипЗнч(УдаляемыйСсылка);
			УдаляемыйИнформация = ОбработкаМенеджер.СформироватьИнформациюОТипах(РезультатВыполненияВФоне, ТипУдаляемого);
			
			УзелТипа = УзлыПервогоУровня.Получить(ТипУдаляемого);
			Если УзелТипа = Неопределено Тогда
				УдаляемыйМетаданные = УдаляемыйСсылка.Метаданные();
				УзелТипа = ДеревоЗначений.Строки.Добавить();
				УзелТипа.Значение      = УдаляемыйИнформация.ПолноеИмя;
				УзелТипа.Представление = УдаляемыйИнформация.ПредставлениеСписка;
				УзелТипа.Пометка       = Истина;
				УзелТипа.Количество    = 0;
				УзелТипа.НомерКартинки = -1;
				УзлыПервогоУровня.Вставить(ТипУдаляемого, УзелТипа);
				БыстрыйПоиск.ПолныеИменаОбъектовМетаданных.Вставить(ТипУдаляемого, УдаляемыйИнформация.ПолноеИмя);
			КонецЕсли;
			УзелТипа.Количество = УзелТипа.Количество + 1;
			
			УзелУдаляемого = УзелТипа.Строки.Добавить();
			УзелУдаляемого.Значение      = УдаляемыйСсылка;
			УзелУдаляемого.Представление = Строка(УдаляемыйСсылка);
			УзелУдаляемого.Пометка       = Истина;
			УзелУдаляемого.НомерКартинки = НомерКартинки(УдаляемыйСсылка, Истина, УдаляемыйИнформация.Вид, Истина);
			
			Если ПометкиУстанавливаютсяВыборочно И Отмеченные.Найти(УдаляемыйСсылка) = Неопределено Тогда
				УзелУдаляемого.Пометка = Ложь;
				УзелТипа.Пометка       = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого УзелТипа Из ДеревоЗначений.Строки Цикл
			УзелТипа.Представление = УзелТипа.Представление + " (" + УзелТипа.Количество + ")";
		КонецЦикла;
		
		ДеревоЗначений.Колонки.Удалить(ДеревоЗначений.Колонки.Количество);
		ДеревоЗначений.Строки.Сортировать("Представление", Истина);
		
		ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоПомеченныхНаУдаление");
		
		КоличествоТипов = УзлыПервогоУровня.Количество();
		
		Если КоличествоТипов = 0 Тогда
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаУдалениеНеТребуется;
		Иначе
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПомеченныеНаУдаление;
			Если КоличествоТипов = 1 Тогда
				СтандартныеПодсистемыКлиентСервер.РазвернутьУзлыДерева(Результат, "ДеревоПомеченныхНаУдаление");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	ФоновоеЗаданиеАдресХранилища = Неопределено;
	ФоновоеЗаданиеИдентификатор  = Неопределено;
	ВидимостьДоступность(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоллекцииОставшихсяОбъектов(РезультатВыполненияВФоне)
	
	ПрепятствующиеУдалению = РезультатВыполненияВФоне.ПрепятствующиеУдалению;
	ИнформацияОТипах = РезультатВыполненияВФоне.ИнформацияОТипах;
	
	ДеревоНеУдаленные = РеквизитФормыВЗначение("НеУдаленные");
	ДеревоНеУдаленные.Строки.Очистить();
	ТаблицаСвязиНеУдаленных = РеквизитФормыВЗначение("СвязиНеУдаленных");
	ТаблицаСвязиНеУдаленных.Очистить();
	
	ГруппыНеУдаленных = Новый Соответствие;
	СтрокиНеУдаленных = Новый Соответствие;
	
	ОбнаруженыСсылочныеНеОтмеченные = Ложь;
	ОбнаруженыРегистры = Ложь;
	
	Для Каждого Причина Из ПрепятствующиеУдалению Цикл
		СтрокаНеУдаленного = СтрокиНеУдаленных.Получить(Причина.УдаляемыйСсылка);
		Если СтрокаНеУдаленного = Неопределено Тогда
			УдаляемыйИнформация = ИнформацияОТипах.Получить(Причина.УдаляемыйТип);
			Если УдаляемыйИнформация.Технический Тогда
				Продолжить;
			КонецЕсли;
			
			ГруппаНеУдаленного = ГруппыНеУдаленных.Получить(Причина.УдаляемыйТип);
			Если ГруппаНеУдаленного = Неопределено Тогда
				ГруппаНеУдаленного = ДеревоНеУдаленные.Строки.Добавить();
				ГруппаНеУдаленного.НомерКартинки   = -1;
				ГруппаНеУдаленного.УдаляемыйСсылка = УдаляемыйИнформация.ПолноеИмя;
				ГруппаНеУдаленного.Представление   = УдаляемыйИнформация.ПредставлениеСписка;
				
				ГруппыНеУдаленных.Вставить(Причина.УдаляемыйТип, ГруппаНеУдаленного);
				БыстрыйПоиск.ПолныеИменаОбъектовМетаданных.Вставить(Причина.УдаляемыйТип, УдаляемыйИнформация.ПолноеИмя);
			КонецЕсли;
			
			ГруппаНеУдаленного.КоличествоСвязей = ГруппаНеУдаленного.КоличествоСвязей + 1;
			
			СтрокаНеУдаленного = ГруппаНеУдаленного.Строки.Добавить();
			СтрокаНеУдаленного.УдаляемыйСсылка = Причина.УдаляемыйСсылка;
			СтрокаНеУдаленного.Представление   = Строка(Причина.УдаляемыйСсылка);
			СтрокаНеУдаленного.ПометкаУдаления = Истина;
			
			СтрокаНеУдаленного.НомерКартинки = НомерКартинки(
				СтрокаНеУдаленного.УдаляемыйСсылка,
				Истина,
				УдаляемыйИнформация.Вид,
				СтрокаНеУдаленного.ПометкаУдаления);
			
			СтрокиНеУдаленных.Вставить(Причина.УдаляемыйСсылка, СтрокаНеУдаленного);
		КонецЕсли;
		
		СтрокаНеУдаленного.КоличествоСвязей = СтрокаНеУдаленного.КоличествоСвязей + 1;
		
		СтрокаПрепятствующегоУдалению = ТаблицаСвязиНеУдаленных.Добавить();
		СтрокаПрепятствующегоУдалению.УдаляемыйСсылка    = Причина.УдаляемыйСсылка;
		СтрокаПрепятствующегоУдалению.ОбнаруженныйСсылка = Причина.ОбнаруженныйСсылка;
		СтрокаПрепятствующегоУдалению.ПометкаУдаления    = Причина.ОбнаруженныйПометкаУдаления;
		СтрокаПрепятствующегоУдалению.ЭтоОшибка          = (Причина.ОбнаруженныйТип = Тип("Строка"));
		
		Если СтрокаПрепятствующегоУдалению.ЭтоОшибка Тогда
			СтрокаПрепятствующегоУдалению.Представление = Причина.Подробно;
		Иначе
			ОбнаруженныйИнформация = ИнформацияОТипах.Получить(Причина.ОбнаруженныйТип);
			
			СтрокаПрепятствующегоУдалению.СсылочногоТипа = ОбнаруженныйИнформация.Ссылочный;
			
			Если ОбнаруженныйИнформация.Вид = "РЕГИСТРСВЕДЕНИЙ"
				Или ОбнаруженныйИнформация.Вид = "РЕГИСТРНАКОПЛЕНИЯ"
				Или ОбнаруженныйИнформация.Вид = "РЕГИСТРБУХГАЛТЕРИИ"
				Или ОбнаруженныйИнформация.Вид = "РЕГИСТРРАСЧЕТА" Тогда
				ОбнаруженыРегистры = Истина;
			КонецЕсли;
			
			Если Не ОбнаруженыСсылочныеНеОтмеченные // Оптимизация.
				И ОбнаруженныйИнформация.Ссылочный
				И РезультатВыполненияВФоне.НеУдаленные.Найти(Причина.ОбнаруженныйСсылка) = Неопределено Тогда
				ОбнаруженыСсылочныеНеОтмеченные = Ложь;
			КонецЕсли;
			
			Если Причина.ОбнаруженныйСсылка = Неопределено Тогда // Константа
				СтрокаПрепятствующегоУдалению.ОбнаруженныйСсылка = ОбнаруженныйИнформация.ПолноеИмя;
				СтрокаПрепятствующегоУдалению.ЭтоКонстанта = Истина;
				СтрокаПрепятствующегоУдалению.Представление = ОбнаруженныйИнформация.ПредставлениеЭлемента + " (" + НСтр("ru = 'Константа'") + ")";
			Иначе
				СтрокаПрепятствующегоУдалению.Представление = Строка(Причина.ОбнаруженныйСсылка) + " (" + ОбнаруженныйИнформация.ПредставлениеЭлемента + ")";
				БыстрыйПоиск.ПолныеИменаОбъектовМетаданных.Вставить(Причина.ОбнаруженныйТип, ОбнаруженныйИнформация.ПолноеИмя);
			КонецЕсли;
			
			СтрокаПрепятствующегоУдалению.НомерКартинки = НомерКартинки(
				СтрокаПрепятствующегоУдалению.ОбнаруженныйСсылка,
				СтрокаПрепятствующегоУдалению.СсылочногоТипа,
				ОбнаруженныйИнформация.Вид,
				СтрокаПрепятствующегоУдалению.ПометкаУдаления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ГруппаНеУдаленного Из ДеревоНеУдаленные.Строки Цикл
		ГруппаНеУдаленного.Представление = ГруппаНеУдаленного.Представление + " (" + Формат(ГруппаНеУдаленного.КоличествоСвязей, "ЧН=0; ЧГ=") + ")";
	КонецЦикла;
	
	ЗаголовокПодвала = Элементы.НадписьВПодвале.Заголовок;
	ПодписьДобавлена = (СтрЧислоВхождений(ЗаголовокПодвала, ".") = 2);
	Если ОбнаруженыРегистры И Не ОбнаруженыСсылочныеНеОтмеченные Тогда
		Если Не ПодписьДобавлена Тогда
			Элементы.НадписьВПодвале.Заголовок = ЗаголовокПодвала + " "
				+ НСтр("ru = 'Для устранения сложных зависимостей рекомендуется повторить удаление с включенным флажком ""Заблокировать всю работу в программе и ускорить удаление"" (нажмите кнопку ""< В начало"").'");
		КонецЕсли;
	Иначе
		Если ПодписьДобавлена Тогда
			Элементы.НадписьВПодвале.Заголовок = Лев(ЗаголовокПодвала, СтрНайти(ЗаголовокПодвала, "."));
		КонецЕсли;
	КонецЕсли;
	
	ДеревоНеУдаленные.Строки.Сортировать("Представление", Истина);
	ТаблицаСвязиНеУдаленных.Сортировать("УдаляемыйСсылка, Представление");
	
	ЗначениеВРеквизитФормы(ДеревоНеУдаленные,       "НеУдаленные");
	ЗначениеВРеквизитФормы(ТаблицаСвязиНеУдаленных, "СвязиНеУдаленных");
КонецПроцедуры

#КонецОбласти
