// Форма параметризуется двумя способами:
//
// Вариант 1
//     Параметры: 
//         УзелИнформационнойБазы             - ПланОбменаСсылка - узел плана обмена, для которого выполняется помощник.
//         РасширенныйРежимДополненияВыгрузки - Булево           - флаг включения механизма настройки дополнения
//                                                                 выгрузки по сценарию узла.
//
// Вариант 2:
//     Параметры: 
//         УзелИнформационнойБазы             - ПланОбменаСсылка - плана обмена, для которого выполняется помощник.
//         РасширенныйРежимДополненияВыгрузки - Булево           - флаг включения механизма настройки дополнения
//                                                                 выгрузки по сценарию узла.
//         ИмяПланаОбмена                     - Строка           - имя менеджера плана обмена  которого используется
//                                                                 для поиска узла плана обмена с кодом, заданными в
//                                                                 параметре КодУзлаИнформационнойБазы.
//

&НаКлиенте
Перем ПропускатьКонтрольОтказаТекущейСтраницы;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем КодУзлаИнформационнойБазы;
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("АктивизироватьсяПриЗакрытииПомощникаСозданияОбменаДанными", АктивизироватьсяПриЗакрытииПомощникаСозданияОбменаДанными);
	
	ЭтоЗапускИзДругогоПриложения = Ложь;
	
	Если Параметры.Свойство("УзелИнформационнойБазы", Объект.УзелИнформационнойБазы) Тогда
		
		Объект.ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(Объект.УзелИнформационнойБазы);
		
	ИначеЕсли Параметры.Свойство("КодУзлаИнформационнойБазы", КодУзлаИнформационнойБазы) Тогда
		
		ЭтоЗапускИзДругогоПриложения = Истина;
		
		Объект.УзелИнформационнойБазы = ПланыОбмена[Параметры.ИмяПланаОбмена].НайтиПоКоду(КодУзлаИнформационнойБазы);
		
		Если Объект.УзелИнформационнойБазы.Пустая() Тогда
			
			ОбменДаннымиСервер.СообщитьОбОшибке(НСтр("ru = 'Настройка обмена данными не найдена.'"), Отказ);
			Возврат;
			
		КонецЕсли;
		
		Объект.ИмяПланаОбмена = Параметры.ИмяПланаОбмена;
		
	Иначе
		
		ОбменДаннымиСервер.СообщитьОбОшибке(НСтр("ru = 'Непосредственное открытие помощника не предусмотрено.'"), Отказ);
		Возврат;
		
	КонецЕсли;
	
	Если Не ОбменДаннымиПовтИсп.ЭтоУзелУниверсальногоОбменаДанными(Объект.УзелИнформационнойБазы) Тогда
		
		// Интерактивное выполнение обмена данными поддерживается только для универсальных обменов с использованием правил
		// конвертации объектов.
		ОбменДаннымиСервер.СообщитьОбОшибке(
			НСтр("ru = 'Для выбранного узла выполнение обмена данными с настройкой не предусмотрено.'"), Отказ);
		Возврат;
		
	КонецЕсли;
	
	МассивУзлов = ОбменДаннымиПовтИсп.ПолучитьМассивУзловПланаОбмена(Объект.ИмяПланаОбмена);
	
	// Проверяем настройку обмена на соответствие фильтру.
	Если МассивУзлов.Найти(Объект.УзелИнформационнойБазы) = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для выбранного узла сопоставление данных не предусмотрено.'"),,,, Отказ);
		Возврат;
		
	КонецЕсли;
	
	Параметры.Свойство("ВидТранспортаСообщенийОбмена", Объект.ВидТранспортаСообщенийОбмена);
	
	// Задание вида транспорта сообщений обмена, если значение не было передано.
	Если Не ЗначениеЗаполнено(Объект.ВидТранспортаСообщенийОбмена) Тогда
		
		НастройкиТранспортаОбмена = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспорта(Объект.УзелИнформационнойБазы);
		Объект.ВидТранспортаСообщенийОбмена = НастройкиТранспортаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию;
		Если Не ЗначениеЗаполнено(Объект.ВидТранспортаСообщенийОбмена) Тогда
			Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьДанные = Истина;
	ОтправитьДанные = Истина;
	ПроверятьРасхождениеВерсий = Истина;
	
	Если Параметры.Свойство("ПолучитьДанные") Тогда
		ПолучитьДанные = Параметры.ПолучитьДанные;
	КонецЕсли;
	
	Если Параметры.Свойство("ОтправитьДанные") Тогда
		ОтправитьДанные = Параметры.ОтправитьДанные;
	КонецЕсли;
	
	ОбменДаннымиСервер.ЗаполнитьСписокВыбораДоступнымиВидамиТранспорта(Объект.УзелИнформационнойБазы, Элементы.ВидТранспортаСообщенийОбмена);
	Параметры.Свойство("ВыполнитьСопоставлениеПриОткрытии", ВыполнитьСопоставлениеПриОткрытии);
	ВариантРаботыМастера = "ВыполнитьСопоставление";
	
	СобытиеЖурналаРегистрацииЗагрузкаДанных = ОбменДаннымиСервер.ПолучитьКлючСообщенияЖурналаРегистрации(Объект.УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	
	Заголовок = СтрЗаменить(Заголовок, "%1", Объект.УзелИнформационнойБазы);
	
	// Дополнение выгрузки
	ИнициализироватьРеквизитыДополненияВыгрузки();
	
	// Флаг пропуска страницы транспорта.
	ПропускатьСтраницуТранспорта = ДополнениеВыгрузкиРасширенныйРежим Или ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент();
	
	ОбновитьСтраницыНастроекТранспорта();
	
	// Различие интерфейсов
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		УстановитьШрифтЗаголовкаГруппы(Элементы.ЗаголовокСтраницы);
		УстановитьШрифтЗаголовкаГруппы(Элементы.ЗаголовокСтраницыИнформацииСтатистики);
		УстановитьШрифтЗаголовкаГруппы(Элементы.ЗаголовокСтраницыОкончанияСопоставления);
		УстановитьШрифтЗаголовкаГруппы(Элементы.ЗаголовокСтраницыДополненияВыгрузки);
		УстановитьШрифтЗаголовкаГруппы(Элементы.ЗаголовокСтраницыОжиданияАнализаДанных);
		УстановитьШрифтЗаголовкаГруппы(Элементы.ЗаголовокСтраницыОжиданияСинхронизацииДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗакрытьФормуБезусловно = Ложь;
	
	ПорядковыйНомерПерехода = 1;
	УстановитьПорядковыйНомерПерехода(1);
	
	// Анализ страницы транспорта, пропускаем если не требует настроек.
	СледующаяСтраница = Ложь;
	ИзменитьЗаголовок = Элементы.ВидТранспортаСообщенийОбмена.СписокВыбора.Количество()=1;
	
	Если ВыполнитьСопоставлениеПриОткрытии Тогда
		СледующаяСтраница = Истина;
	ИначеЕсли ПропускатьСтраницуТранспорта Тогда
		// Идем на следующую страницу только если не требуется пароль.
		Если ОбменЧерезВебСервис И Не WSЗапомнитьПароль Тогда
			// Требуется пароль, скрываем лишние реквизиты.
			Элементы.ГруппаВыборВидаТранспортаИзДоступных.Видимость = Ложь;
			Элементы.КаталогОбменаИнформацией.Видимость = Ложь;
			ИзменитьЗаголовок = Истина;
		Иначе
			// Пароль не требуется, пропускаем.
			СледующаяСтраница = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИзменитьЗаголовок Тогда
		Элементы.ЗаголовокСтраницы.Заголовок = НСтр("ru='Параметры подключения'");
	КонецЕсли;
	
	Если СледующаяСтраница И ЗначениеЗаполнено(Объект.ВидТранспортаСообщенийОбмена) Тогда
		// Переходим сразу к следующей странице - загрузки информации - статистики.
		ВыполнитьПереходДалее();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если ЗакрытьФормуБезусловно Тогда
		Возврат;
	КонецЕсли;

	ТекущаяСтраница = Элементы.ПанельОсновная.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.СтраницаНачала Тогда
		ТекстПодтверждения = НСтр("ru='Отменить синхронизацию данных?'");
		
	Иначе
		ТекстПодтверждения = НСтр("ru='Прервать синхронизацию данных?'");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(ЭтотОбъект, Отказ, ТекстПодтверждения,
		"ЗакрытьФормуБезусловно");
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если ДлительнаяОперация Тогда
		ЗавершитьВыполнениеДлительнойОперации(ИдентификаторЗадания);
	КонецЕсли;
	// удаляем временный каталог
	УдалитьВременныйКаталогСообщенийОбмена(Объект.ИмяВременногоКаталогаСообщенийОбмена);
	Если ЗначениеЗаполнено(ПараметрыПовторногоОткрытияФормы)
		И ПараметрыПовторногоОткрытияФормы.Свойство("НоваяНастройкаСинхронизацииДанных") Тогда
		НоваяНастройкаСинхронизацииДанных = ПараметрыПовторногоОткрытияФормы.НоваяНастройкаСинхронизацииДанных;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УзелИнформационнойБазы", НоваяНастройкаСинхронизацииДанных);
		ПараметрыФормы.Вставить("РасширенныйРежимДополненияВыгрузки", Истина);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ОбменДаннымиКлиент.ОткрытьФормуПослеЗакрытияТекущей(ЭтотОбъект, "Обработка.ПомощникИнтерактивногоОбменаДанными.Форма", ПараметрыФормы, ПараметрыОткрытия);
	Иначе
		Оповестить("ЗакрытаФормаПомощникаСопоставленияОбъектов");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// Проверяем на событие дополнения выгрузки. 
	Если ОбменДаннымиКлиент.ОбработкаВыбораДополненияВыгрузки(ВыбранноеЗначение, ИсточникВыбора, ДополнениеВыгрузки) Тогда
		// Событие обработано, обновим отображение типовых.
		УстановитьОписаниеОтборовДополненияВыгрузки();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытиеФормыСопоставленияОбъектов" Тогда
		
		Отказ = Ложь;
		
		Состояние(НСтр("ru = 'Выполняется сбор информации сопоставления...'"));
		
		ОбновитьДанныеСтатистикиСопоставленияНаСервере(Отказ, Параметр);
		
		Если Отказ Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'При получении информации статистики возникли ошибки.'"));
		Иначе
			
			РазвернутьДеревоИнформацииСтатистики(Параметр.КлючУникальности);
			
			Состояние(НСтр("ru = 'Сбор информации завершен'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаНачала

&НаКлиенте
Процедура ВидТранспортаСообщенийОбменаПриИзменении(Элемент)
	
	ВидТранспортаСообщенийОбменаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогОбменаИнформациейНажатие(Элемент)
	
	ОткрытьКаталогОбменаИнформациейУзла();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаВопросОСоставеВыгрузки

&НаКлиенте
Процедура ДополнениеВыгрузкиВариантВыгрузкиПриИзменении(Элемент)
	ДополнениеВыгрузкиВариантВыгрузкиУстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиПериодОтбораСценарияУзлаПриИзменении(Элемент)
	ДополнениеВыгрузкиИзменениеПериодаСценарияУзла();
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиОбщийПериодДокументовОчистка(Элемент, СтандартнаяОбработка)
	// Запрещаем очистку периода
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиПериодОтбораСценарияУзлаОчистка(Элемент, СтандартнаяОбработка)
	// Запрещаем очистку периода
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоИнформацииСтатистики

&НаКлиенте
Процедура ДеревоИнформацииСтатистикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФормуСопоставления(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	// Обновляем все открытые динамические списки.
	ОбменДаннымиКлиент.ОбновитьВсеОткрытыеДинамическиеСписки();
	
	ЗакрытьФормуБезусловно = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуРасписания(Команда)
	ПараметрыФормы = Новый Структура("УзелИнформационнойБазы", Объект.УзелИнформационнойБазы);
	ОткрытьФорму("Справочник.СценарииОбменовДанными.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСинхронизацию(Команда)
	
	ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаНачала

&НаКлиенте
Процедура ВыполнитьПереходДалее()
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогОбменаИнформацией(Команда)
	
	ОткрытьКаталогОбменаИнформациейУзла();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыТранспортаСообщенийОбмена(Команда)
	
	Отбор              = Новый Структура("Узел", Объект.УзелИнформационнойБазы);
	ЗначенияЗаполнения = Новый Структура("Узел", Объект.УзелИнформационнойБазы);
	
	Оповещение = Новый ОписаниеОповещения("НастроитьПараметрыТранспортаСообщенийОбменаЗавершение", ЭтотОбъект);
	ОбменДаннымиКлиент.ОткрытьФормуЗаписиРегистраСведенийПоОтбору(Отбор, ЗначенияЗаполнения, "НастройкиТранспортаОбмена", ЭтотОбъект,,, Оповещение);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаИнформацииСтатистики

&НаКлиенте
Процедура ОбновитьИнформациюСопоставленияПолностью(Команда)
	
	ТекущиеДанные = Элементы.ДеревоИнформацииСтатистики.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		КлючТекущейСтроки = ТекущиеДанные.Ключ;
		
	КонецЕсли;
	
	Отказ = Ложь;
	
	КлючиСтрок = Новый Массив;
	
	ПолучитьКлючиВсехСтрок(КлючиСтрок, ДеревоИнформацииСтатистики.ПолучитьЭлементы());
	
	Если КлючиСтрок.Количество() > 0 Тогда
		
		Состояние(НСтр("ru = 'Выполняется сбор информации сопоставления...'"));
		
		ОбновитьИнформациюСопоставленияПоСтрокеНаСервере(Отказ, КлючиСтрок);
		
	КонецЕсли;
	
	Если Отказ Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'При получении информации статистики возникли ошибки.'"));
	Иначе
		
		РазвернутьДеревоИнформацииСтатистики(КлючТекущейСтроки);
		
		Состояние(НСтр("ru = 'Сбор информации завершен'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхДляСтроки(Команда)
	
	Отказ = Ложь;
	
	ВыделенныеСтроки = Элементы.ДеревоИнформацииСтатистики.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		НСтрока = НСтр("ru = 'Выберите имя таблицы в поле статистической информации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,"ДеревоИнформацииСтатистики",, Отказ);
		Возврат;
	КонецЕсли;
	
	ЕстьНесопоставленныеОбъекты = Ложь;
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		СтрокаДерева = ДеревоИнформацииСтатистики.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ПустаяСтрока(СтрокаДерева.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.КоличествоОбъектовНесопоставленных <> 0 Тогда
			ЕстьНесопоставленныеОбъекты = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьНесопоставленныеОбъекты Тогда
		НСтрока = НСтр("ru = 'Имеются несопоставленные объекты.
		                     |При загрузке данных будут созданы дубли несопоставленных объектов. Продолжить?'");
		
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗагрузкуДанныхДляСтрокиВопросНесопоставленные", ЭтотОбъект, Новый Структура);
		Оповещение.ДополнительныеПараметры.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
		ПоказатьВопрос(Оповещение, НСтрока, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуДанныхДляСтрокиПродолжение(ВыделенныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСопоставления(Команда)
	
	ТекущиеДанные = Элементы.ДеревоИнформацииСтатистики.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.Ключ) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ИспользоватьПредварительныйПросмотр Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для типа данных нельзя выполнить сопоставление объектов.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяТаблицыПриемника",            ТекущиеДанные.ИмяТаблицыПриемника);
	ПараметрыФормы.Вставить("ИмяТипаОбъектаТаблицыИсточника", ТекущиеДанные.ТипОбъектаСтрокой);
	ПараметрыФормы.Вставить("ПоляТаблицыПриемника",           ТекущиеДанные.ПоляТаблицы);
	ПараметрыФормы.Вставить("ПоляПоискаТаблицыПриемника",     ТекущиеДанные.ПоляПоиска);
	ПараметрыФормы.Вставить("ТипИсточникаСтрокой",            ТекущиеДанные.ТипИсточникаСтрокой);
	ПараметрыФормы.Вставить("ТипПриемникаСтрокой",            ТекущиеДанные.ТипПриемникаСтрокой);
	ПараметрыФормы.Вставить("ЭтоУдалениеОбъекта",             ТекущиеДанные.ЭтоУдалениеОбъекта);
	ПараметрыФормы.Вставить("ДанныеУспешноЗагружены",         ТекущиеДанные.ДанныеУспешноЗагружены);
	ПараметрыФормы.Вставить("Ключ",                           ТекущиеДанные.Ключ);
	ПараметрыФормы.Вставить("Синоним",                        ТекущиеДанные.Синоним);
	
	ПараметрыФормы.Вставить("УзелИнформационнойБазы",               Объект.УзелИнформационнойБазы);
	ПараметрыФормы.Вставить("ИмяФайлаСообщенияОбмена",              Объект.ИмяФайлаСообщенияОбмена);
	
	ОткрытьФорму("Обработка.СопоставлениеОбъектовИнформационныхБаз.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаОкончанияСопоставления

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийЗагрузкиДанных(Команда)
	
	ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(Объект.УзелИнформационнойБазы, ЭтотОбъект, "ЗагрузкаДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийВыгрузкиДанных(Команда)
	
	ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(Объект.УзелИнформационнойБазы, ЭтотОбъект, "ВыгрузкаДанных");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаВопросОСоставеВыгрузки

&НаКлиенте
Процедура ДополнениеВыгрузкиОбщийОтборДокументов(Команда)
	ОбменДаннымиКлиент.ОткрытьФормуДополненияВыгрузкиВсеДокументы(ДополнениеВыгрузки, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиДетальныйОтбор(Команда)
	ОбменДаннымиКлиент.ОткрытьФормуДополненияВыгрузкиДетальныйОтбор(ДополнениеВыгрузки, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиОтборПоСценариюУзла(Команда)
	ОбменДаннымиКлиент.ОткрытьФормуДополненияВыгрузкиСценарийУзла(ДополнениеВыгрузки, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиСоставВыгрузки(Команда)
	ОбменДаннымиКлиент.ОткрытьФормуДополненияВыгрузкиСоставДанных(ДополнениеВыгрузки, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиОчисткаОбщегоОтбора(Команда)
	
	ТекстЗаголовка = НСтр("ru='Подтверждение'");
	ТекстВопроса   = НСтр("ru='Очистить общий отбор?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ДополнениеВыгрузкиОчисткаОбщегоОтбораЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,,ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиОчисткаДетальногоОтбора(Команда)
	ТекстЗаголовка = НСтр("ru='Подтверждение'");
	ТекстВопроса   = НСтр("ru='Очистить детальный отбор?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ДополнениеВыгрузкиОчисткаДетальногоОтбораЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,,ТекстЗаголовка);
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиИсторияОтборов(Команда)
	// Организуем выбор из меню-списка, все варианты сохраненных настроек.
	СписокВариантов = ДополнениеВыгрузкиИсторияНастроекСервер();
	
	// Добавляем вариант сохранения текущих.
	Текст = НСтр("ru='Сохранить текущую настройку...'");
	СписокВариантов.Добавить(1, Текст, , БиблиотекаКартинок.СохранитьНастройкиОтчета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДополнениеВыгрузкиИсторияОтборовВыборИзМеню", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВариантов, Элементы.ДополнениеВыгрузкиИсторияОтборов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьШрифтЗаголовкаГруппы(Знач ЭлементГруппы)
	
	ЭлементГруппы.ШрифтЗаголовка = Новый Шрифт(ШрифтыСтиля.КрупныйШрифтТекста, , , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыТранспортаСообщенийОбменаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОбновитьСтраницыНастроекТранспорта();
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДополнениеВыгрузкиИсторияОтборовЗавершение(Ответ, ПредставлениеНастройки) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДополнениеВыгрузкиУстановитьНастройкиСервер(ПредставлениеНастройки);
		ДополнениеВыгрузкиВариантВыгрузкиУстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиОчисткаОбщегоОтбораЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДополнениеВыгрузкиОчисткаОбщегоОтбораСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиОчисткаДетальногоОтбораЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДополнениеВыгрузкиОчисткаДетальногоОтбораСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиИсторияОтборовВыборИзМеню(Знач ВыбранныйЭлемент, Знач ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ПредставлениеНастройки = ВыбранныйЭлемент.Значение;
	Если ТипЗнч(ПредставлениеНастройки)=Тип("Строка") Тогда
		// Выбрали вариант - имя ранее сохраненной настройки.
		
		ТекстЗаголовка = НСтр("ru='Подтверждение'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Восстановить настройки ""%1""?'"), ПредставлениеНастройки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДополнениеВыгрузкиИсторияОтборовЗавершение", ЭтотОбъект, ПредставлениеНастройки);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,,ТекстЗаголовка);
		
	ИначеЕсли ПредставлениеНастройки=1 Тогда
		// Выбран вариант сохранения, открываем форму всех настроек.
		ОбменДаннымиКлиент.ОткрытьФормуДополненияВыгрузкиСохранениеНастроек(ДополнениеВыгрузки, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхДляСтрокиВопросНесопоставленные(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуДанныхДляСтрокиПродолжение(ДополнительныеПараметры.ВыделенныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхДляСтрокиПродолжение(Знач ВыделенныеСтроки) 

	КлючиСтрок = ПолучитьКлючиВыделенныхСтрок(ВыделенныеСтроки);
	Если КлючиСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется загрузка данных...'"));
	
	Отказ = Ложь;
	ВыполнитьЗагрузкуДанныхНаСервере(Отказ, КлючиСтрок);
	
	Если Отказ Тогда
		НСтрока = НСтр("ru = 'При загрузке данных возникли ошибки.
		                     |Перейти в журнал регистрации?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПерейтиВЖурналРегистрации", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
		
	РазвернутьДеревоИнформацииСтатистики(КлючиСтрок[КлючиСтрок.ВГраница()]);
	Состояние(НСтр("ru = 'Загрузка данных завершена.'"));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогОбменаИнформациейУзла()
	
	// Вызов сервера без контекста.
	ИмяКаталога = ПолучитьИмяКаталогаНаСервере(Объект.ВидТранспортаСообщенийОбмена, Объект.УзелИнформационнойБазы);
	
	Если ПустаяСтрока(ИмяКаталога) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не задан каталог обмена информацией.'"));
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяКаталога", ИмяКаталога);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиРасширенияРаботыСФайлами", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстПредложения = НСтр("ru = 'Для открытия каталога необходимо необходимо установить расширение работы с файлами.'");
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстПредложения);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ПослеПроверкиРасширенияРаботыСФайлами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
	
		Файл = Новый Файл();
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьСуществованиеФайла", ЭтотОбъект, ДополнительныеПараметры);
		Файл.НачатьИнициализацию(ОписаниеОповещения, ДополнительныеПараметры.ИмяКаталога);
	
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Расширение для работы с файлами не установлено, открытие каталога не возможно.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ПроверитьСуществованиеФайла(Файл, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Вставить("Файл", Файл);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОпределенияСуществованияФайла", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ПослеОпределенияСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		Файл = ДополнительныеПараметры.Файл;
		ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьЭтоКаталог", ЭтотОбъект, ДополнительныеПараметры);
		Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	Иначе
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Каталог ""%1"" не существует или к нему нет доступа.'"),
			ДополнительныеПараметры.ИмяКаталога);
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ОпределитьЭтоКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если ЭтоКаталог Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьКаталогСФайлом", ЭтотОбъект, ДополнительныеПараметры);
		НачатьЗапускПриложения(ОписаниеОповещения, ДополнительныеПараметры.ИмяКаталога);
	Иначе
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '""%1"" является файлом, а не каталогом.'"),
			ДополнительныеПараметры.ИмяКаталога);
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ОткрытьКаталогСФайлом(КодВозврата, ДополнительныеПараметры) Экспорт
	// Обработка не требуется.
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрации(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(Объект.УзелИнформационнойБазы, ЭтотОбъект, "ЗагрузкаДанных");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюСопоставленияПоСтрокеНаСервере(Отказ, КлючиСтрок)
	
	ИндексыСтрок = ПолучитьИндексыСтрокТаблицыИнформацииСтатистики(КлючиСтрок);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	// Получаем статистическую информацию по сопоставлению.
	ОбработкаОбъект.ПолучитьСтатистикуСопоставленияОбъектовПоСтроке(Отказ, ИндексыСтрок);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ПолучитьДеревоИнформацииСтатистики(ОбработкаОбъект.ТаблицаИнформацииСтатистики());
	
	ВсеДанныеСопоставлены = Обработки.ПомощникИнтерактивногоОбменаДанными.ВсеДанныеСопоставлены(ОбработкаОбъект.ТаблицаИнформацииСтатистики());
	
	УстановитьВидимостьГруппыДополнительнойИнформации();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуДанныхНаСервере(Отказ, КлючиСтрок)
	
	ИндексыСтрок = ПолучитьИндексыСтрокТаблицыИнформацииСтатистики(КлючиСтрок);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	// выполняем загрузку данных
	ОбработкаОбъект.ВыполнитьЗагрузкуДанных(Отказ, ИндексыСтрок);
	
	// Получаем статистическую информацию по сопоставлению.
	ОбработкаОбъект.ПолучитьСтатистикуСопоставленияОбъектовПоСтроке(Отказ, ИндексыСтрок);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ПолучитьДеревоИнформацииСтатистики(ОбработкаОбъект.ТаблицаИнформацииСтатистики());
	
	ВсеДанныеСопоставлены = Обработки.ПомощникИнтерактивногоОбменаДанными.ВсеДанныеСопоставлены(ОбработкаОбъект.ТаблицаИнформацииСтатистики());
	
	УстановитьВидимостьГруппыДополнительнойИнформации();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСтатистикиСопоставленияНаСервере(Отказ, ПараметрыОповещения)
	
	СтрокиТаблицы = Объект.ИнформацияСтатистики.НайтиСтроки(Новый Структура("Ключ", ПараметрыОповещения.КлючУникальности));
	
	ЗаполнитьЗначенияСвойств(СтрокиТаблицы[0], ПараметрыОповещения, "ДанныеУспешноЗагружены");
	
	КлючиСтрок = Новый Массив;
	КлючиСтрок.Добавить(ПараметрыОповещения.КлючУникальности);
	
	ОбновитьИнформациюСопоставленияПоСтрокеНаСервере(Отказ, КлючиСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДеревоИнформацииСтатистики(ИнформацияСтатистики)
	
	КоллекцияЭлементовДерева = ДеревоИнформацииСтатистики.ПолучитьЭлементы();
	КоллекцияЭлементовДерева.Очистить();
	
	ОбщегоНазначения.ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(КоллекцияЭлементовДерева,
		ОбменДаннымиСервер.ПолучитьДеревоИнформацииСтатистики(ИнформацияСтатистики));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГруппыДополнительнойИнформации()
	
	Элементы.СтраницыСтатусаСопоставленияДанных.ТекущаяСтраница = ?(ВсеДанныеСопоставлены,
		Элементы.СтатусСопоставленияВсеДанныеСопоставлены,
		Элементы.СтатусСопоставленияЕстьНесопоставленныеДанные);
КонецПроцедуры

&НаСервере
Процедура ВидТранспортаСообщенийОбменаПриИзмененииНаСервере()
	
	ОбменЧерезВнешнееСоединение = (Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.COM);
	ОбменЧерезВебСервис         = (Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	
	ОбменЧерезПодключениеККорреспонденту = ОбменЧерезВнешнееСоединение ИЛИ ОбменЧерезВебСервис;
	
	СтруктураПараметровПодключенияВнешнегоСоединения = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспорта(Объект.УзелИнформационнойБазы);
	СтруктураПараметровПодключенияВнешнегоСоединения = УдалитьПрефиксВКлючахКоллекции(СтруктураПараметровПодключенияВнешнегоСоединения, "COM");
	
	Если ЭтоЗапускИзДругогоПриложения Тогда
		
		Элементы.ИнформационнаяНадписьНастройкиРасписания.Видимость = Ложь;
		
		ОткрытьПомощникСозданияСценарияОбменаДанными = Ложь;
		
	Иначе
		
		УзелИспользуетсяВСценарииОбмена = УзелИнформационнойБазыИспользуетсяВСценарииОбмена(Объект.УзелИнформационнойБазы);
		
		Элементы.ИнформационнаяНадписьНастройкиРасписания.Видимость = Не УзелИспользуетсяВСценарииОбмена
			И ОбменДаннымиСервер.ЕстьПраваНаАдминистрированиеОбменов();
		
		ОткрытьПомощникСозданияСценарияОбменаДанными = ОбменДаннымиСервер.ЕстьПраваНаАдминистрированиеОбменов();
		
		Элементы.ИнформационнаяНадписьНастройкиРасписания.Видимость = ОткрытьПомощникСозданияСценарияОбменаДанными;
	КонецЕсли;
	
	// Устанавливаем текущую таблицу переходов.
	Если ОбменЧерезПодключениеККорреспонденту Тогда
		
		Если ПолучитьДанные И ОтправитьДанные Тогда
			
			ПолучениеИОтправкаДанныхЧерезВнешнееСоединениеИлиВебСервис();
			
		ИначеЕсли ПолучитьДанные Тогда
			
			ПолучениеДанныхЧерезВнешнееСоединениеИлиВебСервис();;
			
		ИначеЕсли ОтправитьДанные Тогда
			
			ОтправкаДанныхЧерезВнешнееСоединениеИлиВебСервис();
			
		Иначе
			
			ВызватьИсключение НСтр("ru = 'Заданный сценарий синхронизации данных не поддерживается.'");
			
		КонецЕсли;
		
	Иначе
		
		Если ПолучитьДанные И ОтправитьДанные Тогда
			
			ПолучениеИОтправкаДанныхЧерезОбычныеКаналыСвязи();
			
		ИначеЕсли ПолучитьДанные Тогда
			
			ПолучениеДанныхЧерезОбычныеКаналыСвязи();
			
		ИначеЕсли ОтправитьДанные Тогда
			
			ОтправкаДанныхЧерезОбычныеКаналыСвязи();
			
		Иначе
			
			ВызватьИсключение НСтр("ru = 'Заданный сценарий синхронизации данных не поддерживается.'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьКнопкиОткрытияКаталогаОбмена();
	
	Элементы.WSПароль.Видимость          = Ложь;
	Элементы.НадписьWSПароль.Заголовок   = "";
	Элементы.WSЗапомнитьПароль.Видимость = Ложь;

	Если ОбменЧерезВебСервис Тогда
		
		// Получаем настройки подключения к веб-сервису корреспондента.
		// Настройки нужны, например, для периодического опроса корреспондента на предмет окончания длительной операции
		// выгрузки данных.
		СтруктураНастроек = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспортаWS(Объект.УзелИнформационнойБазы);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек, "WSURLВебСервиса, WSИмяПользователя, WSПароль, WSЗапомнитьПароль");
		
        Элементы.WSПароль.Видимость = Не WSЗапомнитьПароль;
        Элементы.WSЗапомнитьПароль.Видимость = Не WSЗапомнитьПароль;		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет заданный литерал (префикс) в именах ключей переданной структуры.
// Создает новую структуру.
//
// Параметры:
//  Структура - Структура - Структура элементов, на основании которой необходимо создать новую структуру с ключами без
//                          заданного литерала.
//  Литерал - Строка - Строка символов, которую необходимо исключить из имени ключей переданной структуры.
//
// Возвращаемое значение:
//  Структура - получается на основании копирования исходной структуры.
//
&НаСервере
Функция УдалитьПрефиксВКлючахКоллекции(Структура, Литерал)
	
	Результат = Новый Структура;
	
	Для Каждого Элемент Из Структура Цикл
		
		Результат.Вставить(СтрЗаменить(Элемент.Ключ, Литерал, ""), Элемент.Значение);
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьИндексыСтрокТаблицыИнформацииСтатистики(КлючиСтрок)
	
	ИндексыСтрок = Новый Массив;
	
	Для Каждого Ключ Из КлючиСтрок Цикл
		
		СтрокиТаблицы = Объект.ИнформацияСтатистики.НайтиСтроки(Новый Структура("Ключ", Ключ));
		
		ИндексСтроки = Объект.ИнформацияСтатистики.Индекс(СтрокиТаблицы[0]);
		
		ИндексыСтрок.Добавить(ИндексСтроки);
		
	КонецЦикла;
	
	Возврат ИндексыСтрок;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьСостоянияОбменовДанными(РезультатЗагрузкиДанных, РезультатВыгрузкиДанных, Знач УзелИнформационнойБазы)
	
	СостоянияОбменовДанными = ОбменДаннымиСервер.СостоянияОбменовДаннымиДляУзлаИнформационнойБазы(УзелИнформационнойБазы);
	
	РезультатЗагрузкиДанных = СостоянияОбменовДанными["РезультатЗагрузкиДанных"];
	Если ПустаяСтрока(РезультатВыгрузкиДанных) Тогда
		РезультатВыгрузкиДанных = СостоянияОбменовДанными["РезультатВыгрузкиДанных"];
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьВременныйКаталогСообщенийОбмена(ИмяВременногоКаталога)
	
	Если Не ПустаяСтрока(ИмяВременногоКаталога) Тогда
		
		Попытка
			УдалитьФайлы(ИмяВременногоКаталога);
			ИмяВременногоКаталога = "";
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗавершитьВыполнениеДлительнойОперации(ИдентификаторЗадания)
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВЖурналРегистрации(СтрокаСообщенияОбОшибке, Событие)
	
	ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяКаталогаНаСервере(ВидТранспортаСообщенийОбмена, УзелИнформационнойБазы)
	
	Возврат РегистрыСведений.НастройкиТранспортаОбмена.ИмяКаталогаОбменаИнформацией(ВидТранспортаСообщенийОбмена, УзелИнформационнойБазы);
	
КонецФункции

&НаСервереБезКонтекста
Функция УзелИнформационнойБазыИспользуетсяВСценарииОбмена(УзелИнформационнойБазы)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1 1
	|ИЗ
	|	Справочник.СценарииОбменовДанными.НастройкиОбмена КАК СценарииОбменовДаннымиНастройкиОбмена
	|ГДЕ
	|		 СценарииОбменовДаннымиНастройкиОбмена.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И НЕ СценарииОбменовДаннымиНастройкиОбмена.Ссылка.ПометкаУдаления
	|";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", УзелИнформационнойБазы);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыНаСервере(Отказ)
	
	ДатаНачалаОперации = ТекущаяДатаСеанса();
	
	// Сохраняем настройки дополнения выгрузки.
	ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиСохранитьНастройки(ДополнениеВыгрузки, 
		ОбменДаннымиСервер.ДополнениеВыгрузкиИмяАвтоСохраненияНастроек());
	
	// Дополнительно регистрируем данные.
	ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиЗарегистрироватьДополнительныеДанные(ДополнениеВыгрузки);

	ПараметрыОбмена = ОбменДаннымиСервер.ПараметрыОбмена();
	ПараметрыОбмена.ВидТранспортаСообщенийОбмена = Объект.ВидТранспортаСообщенийОбмена;
	ПараметрыОбмена.ВыполнятьЗагрузку = Ложь;
	ПараметрыОбмена.ВыполнятьВыгрузку = Истина;
	
	ПараметрыОбмена.ДлительнаяОперацияРазрешена = Истина;
	ПараметрыОбмена.ДлительнаяОперация          = ДлительнаяОперация;
	ПараметрыОбмена.ИдентификаторОперации       = ИдентификаторОперации;
	ПараметрыОбмена.ИдентификаторФайла          = ИдентификаторФайла;
	ПараметрыОбмена.ПараметрыАутентификации     = WSПароль;
	
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Объект.УзелИнформационнойБазы, ПараметрыОбмена, Отказ);
	
	ДлительнаяОперация    = ПараметрыОбмена.ДлительнаяОперация;
	ИдентификаторОперации = ПараметрыОбмена.ИдентификаторОперации;
	ИдентификаторФайла    = ПараметрыОбмена.ИдентификаторФайла;
	WSПароль              = ПараметрыОбмена.ПараметрыАутентификации;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтраницыНастроекТранспорта()
	
	РольДоступнаДобавлениеИзменениеОбменовДанными = ОбменДаннымиСервер.ЕстьПраваНаАдминистрированиеОбменов();
	
	Элементы.НастроитьПараметрыТранспортаСообщенийОбмена.Видимость = РольДоступнаДобавлениеИзменениеОбменовДанными;
	
	ВидТранспортаСообщенийОбменаПоУмолчанию = РегистрыСведений.НастройкиТранспортаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию(Объект.УзелИнформационнойБазы);
	НастроенныеВидыТранспорта               = РегистрыСведений.НастройкиТранспортаОбмена.НастроенныеВидыТранспорта(Объект.УзелИнформационнойБазы);
	ТекущийВидТранспорта                     = Объект.ВидТранспортаСообщенийОбмена;
	
	ОбменДаннымиСервер.ЗаполнитьСписокВыбораДоступнымиВидамиТранспорта(Объект.УзелИнформационнойБазы, Элементы.ВидТранспортаСообщенийОбмена, НастроенныеВидыТранспорта);
	
	СписокВыбораТранспорта = Элементы.ВидТранспортаСообщенийОбмена.СписокВыбора;
	
	Элементы.ВидТранспортаСообщенияОбменаСтрокой.ЦветТекста = Новый Цвет;
	
	Если СписокВыбораТранспорта.НайтиПоЗначению(ТекущийВидТранспорта)<>Неопределено Тогда
		// Не меняем
		
	ИначеЕсли СписокВыбораТранспорта.НайтиПоЗначению(ВидТранспортаСообщенийОбменаПоУмолчанию)<>Неопределено Тогда
		
		Объект.ВидТранспортаСообщенийОбмена = ВидТранспортаСообщенийОбменаПоУмолчанию;
		
	ИначеЕсли СписокВыбораТранспорта.Количество()>0 Тогда
		Объект.ВидТранспортаСообщенийОбмена = СписокВыбораТранспорта[0].Значение;
		
	Иначе
		// Ничего нет
		Объект.ВидТранспортаСообщенийОбмена = Неопределено;
		
		СписокВыбораТранспорта.Очистить();
		СписокВыбораТранспорта.Добавить(Неопределено, НСтр("ru='подключение не настроено'") );
		
		Элементы.ВидТранспортаСообщенияОбменаСтрокой.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст
	КонецЕсли;
	
	Элементы.ВидТранспортаСообщенияОбменаСтрокой.Заголовок = СписокВыбораТранспорта[0].Представление;
	Элементы.ВидТранспортаСообщенияОбменаСтрокой.Видимость = СписокВыбораТранспорта.Количество()=1;
	Элементы.ВидТранспортаСообщенийОбмена.Видимость= Не Элементы.ВидТранспортаСообщенияОбменаСтрокой.Видимость;
	
	ВидТранспортаСообщенийОбменаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКнопкиОткрытияКаталогаОбмена()
	
	ВидимостьКнопки = Объект.ВидТранспортаСообщенийОбмена=Перечисления.ВидыТранспортаСообщенийОбмена.FILE
	Или Объект.ВидТранспортаСообщенийОбмена=Перечисления.ВидыТранспортаСообщенийОбмена.FTP;
	
	Элементы.КаталогОбменаИнформацией.Видимость = ВидимостьКнопки;
	Если ВидимостьКнопки Тогда
		Элементы.КаталогОбменаИнформацией.Заголовок = ПолучитьИмяКаталогаНаСервере(Объект.ВидТранспортаСообщенийОбмена, Объект.УзелИнформационнойБазы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуРасхожденияВерсий()
	
	Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаОшибкаРасхожденияВерсий;
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы.СтраницаНавигацииОшибкаРасхожденияВерсий;
	Элементы.ПродолжитьСинхронизацию.КнопкаПоУмолчанию = Истина;
	Элементы.ДекорацияОшибкаРасхожденияВерсий.Заголовок = ОшибкаРасхожденияВерсийПриПолученииДанных.ТекстОшибки;
	ОшибкаРасхожденияВерсийПриПолученииДанных = Неопределено;
	ПроверятьРасхождениеВерсий = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики ожидания

&НаКлиенте
Процедура ОбработчикОжиданияДлительнойОперации()
	
	ДлительнаяОперацияЗавершенаСОшибкой = Ложь;
	ДлительнаяОперацияСтрокаСообщенияОбОшибке = "";
	
	СостояниеОперации = ОбменДаннымиВызовСервера.СостояниеДлительнойОперации(ИдентификаторОперации,
																		WSURLВебСервиса,
																		WSИмяПользователя,
																		WSПароль,
																		ДлительнаяОперацияСтрокаСообщенияОбОшибке);
	
	Если СостояниеОперации = "Active" Тогда
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	Иначе
		
		Если СостояниеОперации <> "Completed" Тогда
			
			ДлительнаяОперацияЗавершенаСОшибкой = Истина;
			
		КонецЕсли;
		
		ДлительнаяОперация = Ложь;
		ДлительнаяОперацияЗавершена = Истина;
		
		ВыполнитьПереходДалее();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияФоновогоЗадания()
	
	ДлительнаяОперацияЗавершенаСОшибкой = Ложь;
	
	Состояние = ОбменДаннымиВызовСервера.СостояниеЗадания(ИдентификаторЗадания);
	ОтображаетсяПрогрессБар = Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаОжиданияСинхронизацииДанныхПрогрессБарЗагрузка
			ИЛИ Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаОжиданияСинхронизацииДанныхПрогрессБарВыгрузка;
	Если Состояние = "Активно" Тогда
		Если ИспользоватьПрогрессБар И ОтображаетсяПрогрессБар Тогда
			ФоновоеЗаданиеПрочитатьПромежуточныйРезультат();
		КонецЕсли;
		ПодключитьОбработчикОжидания("ОбработчикОжиданияФоновогоЗадания", 2, Истина);
		
	Иначе // Завершено, ЗавершеноАварийно
		
		Если Состояние <> "Завершено" Тогда
			
			ДлительнаяОперацияЗавершенаСОшибкой = Истина;
			
		КонецЕсли;
		
		ДлительнаяОперация = Ложь;
		ДлительнаяОперацияЗавершена = Истина;
		ПрочитатьСообщенияПользователю();
		Если ЗакрытьФормуБезусловно Тогда
			ЭтотОбъект.Закрыть();
		КонецЕсли;
		Если ИспользоватьПрогрессБар И ОтображаетсяПрогрессБар Тогда
			ПроцентВыполнения = 100;
			ДопИнформацияВыполнение = "";
			// Переход далее с задержкой 1 сек.
			ПодключитьОбработчикОжидания("ЗапуститьПереходДалее", 1, Истина);
		Иначе
			ВыполнитьПереходДалее();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПереходДалее()
	ВыполнитьПереходДалее();
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСообщенияПользователю()
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если Задание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МассивСообщений = Задание.ПолучитьСообщенияПользователю(Истина);

	Если МассивСообщений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Количество = МассивСообщений.Количество();
	Если Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Сообщение = МассивСообщений[Количество-1];
	ТекстСообщения = Сообщение.Текст;
	// При необходимости из сообщения удаляется идентификатор подсистемы.
	Если СтрНачинаетсяС(ТекстСообщения, "{ВыполненПереходНаНовыйОбмен}") Тогда

		Результат = ОбщегоНазначения.ЗначениеИзСтрокиXML(ТекстСообщения);
		Если Результат <> Неопределено
			И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			ИмяПланаОбмена = Результат.ИмяПланаОбменаДляПереходаНаНовыйОбмен;
			КодУзлаПланаОбмена = Результат.Код;
			НоваяНастройкаСинхронизацииДанных = ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(КодУзлаПланаОбмена);
			
			ПараметрыПовторногоОткрытияФормы = Новый Структура("НоваяНастройкаСинхронизацииДанных",
				НоваяНастройкаСинхронизацииДанных);
			ЗакрытьФормуБезусловно = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// Обработчик ОбработкаДлительнойОперации.
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		РезультатВычисления = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			Если ОшибкаРасхожденияВерсийПриПолученииДанных <> Неопределено
				И ОшибкаРасхожденияВерсийПриПолученииДанных.ЕстьОшибка Тогда
				
				ОбработатьОшибкуРасхожденияВерсий();
				Возврат;
				
			КонецЕсли;
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции мастера.

&НаКлиенте
Функция ПолучитьКлючиВыделенныхСтрок(ВыделенныеСтроки)
	
	// Возвращаемое значение функции.
	КлючиСтрок = Новый Массив;
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаДерева = ДеревоИнформацииСтатистики.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если Не ПустаяСтрока(СтрокаДерева.Ключ) Тогда
			
			КлючиСтрок.Добавить(СтрокаДерева.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КлючиСтрок;
КонецФункции

&НаКлиенте
Процедура ПолучитьКлючиВсехСтрок(КлючиСтрок, КоллекцияЭлементовДерева)
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл
		
		Если Не ПустаяСтрока(СтрокаДерева.Ключ) Тогда
			
			КлючиСтрок.Добавить(СтрокаДерева.Ключ);
			
		КонецЕсли;
		
		КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
		
		Если КоллекцияЭлементов.Количество() > 0 Тогда
			
			ПолучитьКлючиВсехСтрок(КлючиСтрок, КоллекцияЭлементов);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеЭлементовСтатусаОбменаДанными()
	
	Элементы.СтраницыСтатусаЗагрузкиДанных.ТекущаяСтраница = Элементы[ОбменДаннымиКлиент.СтраницыСтатусаЗагрузкиДанных()[РезультатЗагрузкиДанных]];
	Если Элементы.СтраницыСтатусаЗагрузкиДанных.ТекущаяСтраница=Элементы.СтатусЗагрузкиНеопределено Тогда
		Элементы.ПерейтиВЖурналРегистрацииСобытийЗагрузкиДанных.Заголовок = НСтр("ru='Загрузка данных не произведена'");
	Иначе
		Элементы.ПерейтиВЖурналРегистрацииСобытийЗагрузкиДанных.Заголовок = ОбменДаннымиКлиент.ЗаголовкиГиперссылокЗагрузкиДанных()[РезультатЗагрузкиДанных];
	КонецЕсли;
	
	Элементы.СтраницыСтатусаВыгрузкиДанных.ТекущаяСтраница = Элементы[ОбменДаннымиКлиент.СтраницыСтатусаВыгрузкиДанных()[РезультатВыгрузкиДанных]];
	Если Элементы.СтраницыСтатусаВыгрузкиДанных.ТекущаяСтраница=Элементы.СтатусВыгрузкиНеопределено Тогда
		Элементы.ПерейтиВЖурналРегистрацииСобытийВыгрузкиДанных.Заголовок = НСтр("ru='Выгрузка данных не произведена'");
	Иначе
		Элементы.ПерейтиВЖурналРегистрацииСобытийВыгрузкиДанных.Заголовок = ОбменДаннымиКлиент.ЗаголовкиГиперссылокВыгрузкиДанных()[РезультатВыгрузкиДанных];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоИнформацииСтатистики(КлючСтроки = "")
	
	КоллекцияЭлементов = ДеревоИнформацииСтатистики.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементов Цикл
		
		Элементы.ДеревоИнформацииСтатистики.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		
	КонецЦикла;
	
	// Позиционирование курсора в дереве значений.
	Если Не ПустаяСтрока(КлючСтроки) Тогда
		
		ИдентификаторСтроки = 0;
		
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Ключ", ИдентификаторСтроки, ДеревоИнформацииСтатистики.ПолучитьЭлементы(), КлючСтроки, Ложь);
		
		Элементы.ДеревоИнформацииСтатистики.ТекущаяСтрока = ИдентификаторСтроки;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Внутренние процедуры и функции.

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода.
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц.
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	// Устанавливаем текущую кнопку по умолчанию.
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов.
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// Обработчик ПриПереходеДалее.
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			РезультатВычисления = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		РезультатВычисления = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "")
									
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = Ложь;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = "";
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовНоваяСтрокаДлительнаяОперация(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ДлительнаяОперация = Ложь,
									ИмяОбработчикаДлительнойОперации = "")
	
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = "";
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = "";
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И Элемент.ИмяКоманды = ИмяКоманды Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Обработчики событий переходов.

&НаКлиенте
Функция Подключаемый_СтраницаНачала_ПриПереходеДалее(Отказ)
	
	// Выполняем проверки заполнения реквизитов формы.
	Если Объект.УзелИнформационнойБазы.Пустая() Тогда
		
		НСтрока = НСтр("ru = 'Укажите узел информационной базы'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.УзелИнформационнойБазы",, Отказ);
		
	ИначеЕсли Объект.ВидТранспортаСообщенийОбмена.Пустая() Тогда
		
		НСтрока = НСтр("ru = 'Укажите вариант подключения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.ВидТранспортаСообщенийОбмена",, Отказ);
		
	ИначеЕсли ОбменЧерезВебСервис И ПустаяСтрока(WSПароль) Тогда
		
		НСтрока = НСтр("ru = 'Не указан пароль.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "WSПароль",, Отказ);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжиданияПроверкиПодключения_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ОбменЧерезВебСервис Тогда
		
		ПроверитьПодключениеИСохранитьНастройки(Отказ);
		
		Если Отказ Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Не удалось выполнить операцию.'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПроверитьПодключениеИСохранитьНастройки(Отказ)
	
	ПараметрыПодключения = ОбменДаннымиСервер.СтруктураПараметровWS();
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, ЭтотОбъект);
	
	СообщениеПользователю = "";
	WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси(ПараметрыПодключения,, СообщениеПользователю);
	Если WSПрокси = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю,,"WSПароль",, Отказ);
		Возврат;
	КонецЕсли;
	
	Если WSЗапомнитьПароль Тогда
		
		Попытка
			
			УстановитьПривилегированныйРежим(Истина);
			
			// обновляем запись в РС
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("Узел", Объект.УзелИнформационнойБазы);
			СтруктураЗаписи.Вставить("WSЗапомнитьПароль", Истина);
			СтруктураЗаписи.Вставить("WSПароль", WSПароль);
			РегистрыСведений.НастройкиТранспортаОбмена.ОбновитьЗапись(СтруктураЗаписи);
			
		Исключение
			ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииОбменДанными(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,,, Отказ);
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Получение данных (транспорт сообщения обмена).

&НаКлиенте
Функция Подключаемый_СтраницаОжиданияАнализаДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ТранспортСообщенияОбмена();
	
КонецФункции

&НаСервере
Процедура ТранспортСообщенияОбмена()
	
	Попытка
		
		ПропуститьПолучениеДанных = Ложь;
		
		ДлительнаяОперация = Ложь;
		ДлительнаяОперацияЗавершена = Ложь;
		ДлительнаяОперацияЗавершенаСОшибкой = Ложь;
		ИдентификаторФайла = "";
		ИдентификаторОперации = "";
		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		
		Отказ = Ложь;
		
		ОбработкаОбъект.ПолучитьСообщениеОбменаВоВременныйКаталог(
				Отказ,
				ИдентификаторФайлаПакетаДанных,
				ИдентификаторФайла,
				ДлительнаяОперация,
				ИдентификаторОперации,
				WSПароль);
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		
		Если Отказ Тогда
			ПропуститьПолучениеДанных = Истина;
		КонецЕсли;
		
	Исключение
		ПропуститьПолучениеДанных = Истина;
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			НСтр("ru = 'Помощник интерактивного обмена данными.Транспорт сообщения обмена'"));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_СтраницаОжиданияАнализаДанныхДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ПропуститьПолучениеДанных Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжиданияАнализаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ПропуститьПолучениеДанных Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДлительнаяОперацияЗавершена Тогда
		
		Если ДлительнаяОперацияЗавершенаСОшибкой Тогда
			
			ПропуститьПолучениеДанных = Истина;
			
			ЗаписатьОшибкуВЖурналРегистрации(ДлительнаяОперацияСтрокаСообщенияОбОшибке, СобытиеЖурналаРегистрацииЗагрузкаДанных);
			
		Иначе
			
			ТранспортСообщенияОбменаДлительнаяОперацияОкончание();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ТранспортСообщенияОбменаДлительнаяОперацияОкончание()
	
	Попытка
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		
		Отказ = Ложь;
		
		ОбработкаОбъект.ПолучитьСообщениеОбменаВоВременныйКаталогОкончаниеДлительнойОперации(
			Отказ,
			ИдентификаторФайлаПакетаДанных,
			ИдентификаторФайла,
			WSПароль);
		
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		
		Если Отказ Тогда
			ПропуститьПолучениеДанных = Истина;
		КонецЕсли;
		
	Исключение
		ПропуститьПолучениеДанных = Истина;
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			НСтр("ru = 'Помощник интерактивного обмена данными.Транспорт сообщения обмена'"));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Анализ данных
// Автоматическое сопоставление данных.

&НаКлиенте
Функция Подключаемый_АнализДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ПропуститьПолучениеДанных Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АнализДанных();
	
	Если ОшибкаРасхожденияВерсийПриПолученииДанных <> Неопределено
		И ОшибкаРасхожденияВерсийПриПолученииДанных.ЕстьОшибка Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура АнализДанных()
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ИдентификаторЗадания = Неопределено;
	АдресВременногоХранилища = "";
	
	Попытка
		
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("УзелИнформационнойБазы", Объект.УзелИнформационнойБазы);
		ПараметрыМетода.Вставить("ИмяФайлаСообщенияОбмена", Объект.ИмяФайлаСообщенияОбмена);
		ПараметрыМетода.Вставить("ИмяВременногоКаталогаСообщенийОбмена", Объект.ИмяВременногоКаталогаСообщенийОбмена);
		ПараметрыМетода.Вставить("ПроверятьРасхождениеВерсий", ПроверятьРасхождениеВерсий);
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.ПомощникИнтерактивногоОбменаДанными.ВыполнитьАвтоматическоеСопоставлениеДанных",
			ПараметрыМетода,
			НСтр("ru = 'Анализ данных сообщения обмена'"));
		
		Если Результат.ЗаданиеВыполнено Тогда
			ПослеАнализаДанных(ПолучитьИзВременногоХранилища(Результат.АдресХранилища));
		Иначе
			ДлительнаяОперация = Истина;
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
			АдресВременногоХранилища = Результат.АдресХранилища;
		КонецЕсли;
		
	Исключение
		
		ПропуститьПолучениеДанных = Истина;
		ОбменДаннымиВызовСервера.ЗафиксироватьЗавершениеОбменаСОшибкой(
			Объект.УзелИнформационнойБазы,
			"ЗагрузкаДанных",
			ТекущаяДатаСеанса(),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_АнализДанныхДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ПропуститьПолучениеДанных Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияФоновогоЗадания", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_АнализДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ПропуститьПолучениеДанных Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДлительнаяОперацияЗавершена Тогда
		
		Если ДлительнаяОперацияЗавершенаСОшибкой Тогда
			
			ПропуститьПолучениеДанных = Истина;
			
		Иначе
			
			АнализДанныхДлительнаяОперацияОкончание();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПропуститьПолучениеДанных Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РазвернутьДеревоИнформацииСтатистики();
	
КонецФункции

&НаСервере
Процедура АнализДанныхДлительнаяОперацияОкончание()
	
	Попытка
		ПослеАнализаДанных(ПолучитьИзВременногоХранилища(АдресВременногоХранилища));
	Исключение
		ПропуститьПолучениеДанных = Истина;
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			НСтр("ru = 'Помощник интерактивного обмена данными.Анализ данных'"));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПослеАнализаДанных(Знач РезультатАнализа)
	
	Если РезультатАнализа.Свойство("ТекстОшибки") Тогда
		ОшибкаРасхожденияВерсийПриПолученииДанных = РезультатАнализа;
	ИначеЕсли РезультатАнализа.Свойство("Отказ") Тогда
		ПропуститьПолучениеДанных = Истина;
		ЗафиксироватьОшибку = Истина;
		Если РезультатАнализа.Свойство("РезультатВыполненияОбмена") Тогда
			Если РезультатАнализа.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято Тогда
				СтруктураНастроекОбмена = Новый Структура;
				СтруктураНастроекОбмена.Вставить("УзелИнформационнойБазы", Объект.УзелИнформационнойБазы);
				СтруктураНастроекОбмена.Вставить("РезультатВыполненияОбмена", РезультатАнализа.РезультатВыполненияОбмена);
				СтруктураНастроекОбмена.Вставить("ДействиеПриОбмене", "ЗагрузкаДанных");
				СтруктураНастроекОбмена.Вставить("КоличествоОбъектовОбработано", 0);
				СтруктураНастроекОбмена.Вставить("КлючСообщенияЖурналаРегистрации", ОбменДаннымиСервер.ПолучитьКлючСообщенияЖурналаРегистрации(Объект.УзелИнформационнойБазы, "ЗагрузкаДанных"));
				СтруктураНастроекОбмена.Вставить("ДатаНачала", ТекущаяДатаСеанса());
				СтруктураНастроекОбмена.Вставить("ДатаОкончания", ТекущаяДатаСеанса());
				СтруктураНастроекОбмена.Вставить("ЭтоОбменВРИБ", ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(Объект.УзелИнформационнойБазы));
				
				ОбменДаннымиСервер.ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
				ЗафиксироватьОшибку = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ЗафиксироватьОшибку Тогда
			ОбменДаннымиВызовСервера.ЗафиксироватьЗавершениеОбменаСОшибкой(
				Объект.УзелИнформационнойБазы,
				"ЗагрузкаДанных",
				ТекущаяДатаСеанса(),
				НСтр("ru = 'Не удалось загрузить данные из ""%1"" (этап анализа данных).'"));
		КонецЕсли;
	Иначе
		
		ВсеДанныеСопоставлены = РезультатАнализа.ВсеДанныеСопоставлены;
		СтатистикаПустая      = РезультатАнализа.СтатистикаПустая;
		Объект.ИнформацияСтатистики.Загрузить(РезультатАнализа.ИнформацияСтатистики);
		Объект.ИнформацияСтатистики.Сортировать("Представление");
		
		ПолучитьДеревоИнформацииСтатистики(Объект.ИнформацияСтатистики.Выгрузить());
		
		УстановитьВидимостьГруппыДополнительнойИнформации();
		
	КонецЕсли;
	
КонецПроцедуры

// Сопоставление данных пользователем.

&НаКлиенте
Функция Подключаемый_СтраницаИнформацииСтатистики_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если СтатистикаПустая ИЛИ ПропуститьПолучениеДанных Тогда
		ПропуститьСтраницу = Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаИнформацииСтатистики_ПриПереходеДалее(Отказ)
	
	Если СтатистикаПустая Или ПропуститьПолучениеДанных Или ВсеДанныеСопоставлены Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Истина = ПропускатьКонтрольОтказаТекущейСтраницы Тогда
		ПропускатьКонтрольОтказаТекущейСтраницы = Неопределено;
		Возврат Неопределено;
	КонецЕсли;
	
	// Движение вперед будет из подтверждения.
	Отказ = Истина;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да,  НСтр("ru = 'Продолжить'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
	
	Сообщение = НСтр("ru = 'Не все данные сопоставлены. Наличие несопоставленных данных
	                       |может привести к появлению одинаковых элементов справочников (дублей).
	                       |Продолжить?'");
	
	Оповещение = Новый ОписаниеОповещения("СтраницаИнформацииСтатистики_ПриПереходеДалееЗавершениеВопроса", ЭтотОбъект);
	
	ПоказатьВопрос(Оповещение, Сообщение, Кнопки,, КодВозвратаДиалога.Да);
КонецФункции

&НаКлиенте
Процедура СтраницаИнформацииСтатистики_ПриПереходеДалееЗавершениеВопроса(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПерейтиНаШагВпередОтложеннойОбработкой", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиНаШагВпередОтложеннойОбработкой()
	
	// Двигаемся на шаг вперед принудительно.
	ПропускатьКонтрольОтказаТекущейСтраницы = Истина;
	ИзменитьПорядковыйНомерПерехода( +1 );
	
КонецПроцедуры
	
// Загрузка данных

&НаКлиенте
Функция Подключаемый_ЗагрузкаДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ПропуститьПолучениеДанных Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗагрузкаДанных();
	
	// Переходим на следующую страницу вне зависимости от результата загрузки данных.
	
КонецФункции

&НаСервере
Процедура ЗагрузкаДанных()
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ИдентификаторЗадания = Неопределено;
	
	Попытка
		
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("УзелИнформационнойБазы", Объект.УзелИнформационнойБазы);
		ПараметрыМетода.Вставить("ИмяФайлаСообщенияОбмена", Объект.ИмяФайлаСообщенияОбмена);
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.ПомощникИнтерактивногоОбменаДанными.ВыполнитьЗагрузкуДанных",
			ПараметрыМетода,
			НСтр("ru = 'Загрузка данных из сообщения обмена'"));
		
		Если Результат.ЗаданиеВыполнено Тогда
			
			УдалитьВременныйКаталогСообщенийОбмена(Объект.ИмяВременногоКаталогаСообщенийОбмена);
			ОтображаетсяПрогрессБар = Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаОжиданияСинхронизацииДанныхПрогрессБарЗагрузка
				ИЛИ Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаОжиданияСинхронизацииДанныхПрогрессБарВыгрузка;

			Если ИспользоватьПрогрессБар И ОтображаетсяПрогрессБар Тогда
				ПроцентВыполнения = 100;
				ДопИнформацияВыполнение = "";
			КонецЕсли;
		Иначе
			
			ДлительнаяОперация = Истина;
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
			
		КонецЕсли;
		
		
	Исключение
		ПропуститьПолучениеДанных = Истина;
		УдалитьВременныйКаталогСообщенийОбмена(Объект.ИмяВременногоКаталогаСообщенийОбмена);
		ОбменДаннымиВызовСервера.ЗафиксироватьЗавершениеОбменаСОшибкой(
			Объект.УзелИнформационнойБазы,
			"ЗагрузкаДанных",
			ТекущаяДатаСеанса(),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_ЗагрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ПропуститьПолучениеДанных Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияФоновогоЗадания", 2, Истина);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ФоновоеЗаданиеПрочитатьПромежуточныйРезультат()
	
	Прогресс = ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания);
	Если Прогресс <> Неопределено Тогда
		ПроцентВыполнения = Прогресс.Процент;
		ДопИнформацияВыполнение = Прогресс.Текст;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_ЗагрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	ПроцентВыполнения = 0;
	ДопИнформацияВыполнение = "";
	
	Если ПропуститьПолучениеДанных Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДлительнаяОперацияЗавершена Тогда
		
		УдалитьВременныйКаталогСообщенийОбмена(Объект.ИмяВременногоКаталогаСообщенийОбмена);
		
	КонецЕсли;
	
КонецФункции

// Дополнительная выгрузка

&НаКлиенте
Функция Подключаемый_СтраницаВопросОСоставеВыгрузки_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если ДополнениеВыгрузки.ВариантВыгрузки<0 Тогда
		// Согласно настройкам узла дополнение выгрузки не производится, переходим на следующую страницу.
		ПропуститьСтраницу = Истина;
	КонецЕсли;
	
КонецФункции

// Выгрузка данных

&НаКлиенте
Функция Подключаемый_СтраницаОжиданияВыгрузкиДанныхОбычныеКаналы_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)

	ПроцентВыполнения = 0;
	ДопИнформацияВыполнение = "";
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ДлительнаяОперацияЗавершенаСОшибкой = Ложь;
	ИдентификаторФайла = "";
	ИдентификаторОперации = "";
	
	ВыгрузкаДанных();
	
КонецФункции

&НаСервере
Процедура ВыгрузкаДанных()
	
	ИдентификаторЗадания = Неопределено;
	
	ДатаНачалаОперации = ТекущаяДатаСеанса();
	
	// Сохраняем настройки дополнения выгрузки.
	ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиСохранитьНастройки(ДополнениеВыгрузки, 
		ОбменДаннымиСервер.ДополнениеВыгрузкиИмяАвтоСохраненияНастроек());
	
	// Дополнительно регистрируем данные.
	ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиЗарегистрироватьДополнительныеДанные(ДополнениеВыгрузки);
	
	Попытка
		
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("УзелИнформационнойБазы", Объект.УзелИнформационнойБазы);
		ПараметрыМетода.Вставить("ИмяФайлаСообщенияОбмена", Объект.ИмяФайлаСообщенияОбмена);
		ПараметрыМетода.Вставить("ВидТранспортаСообщенийОбмена", Объект.ВидТранспортаСообщенийОбмена);
		ПараметрыМетода.Вставить("ИдентификаторОперации", ИдентификаторОперации);
		ПараметрыМетода.Вставить("ИдентификаторФайла", ИдентификаторФайла);
		ПараметрыМетода.Вставить("WSПароль", WSПароль);
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.ПомощникИнтерактивногоОбменаДанными.ВыполнитьВыгрузкуДанных",
			ПараметрыМетода,
			НСтр("ru = 'Выгрузка данных из сообщения обмена'"));
		
		Если Результат.ЗаданиеВыполнено Тогда
			УдалитьВременныйКаталогСообщенийОбмена(Объект.ИмяВременногоКаталогаСообщенийОбмена);
			ОтображаетсяПрогрессБар = Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаОжиданияСинхронизацииДанныхПрогрессБарЗагрузка
				ИЛИ Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаОжиданияСинхронизацииДанныхПрогрессБарВыгрузка;

			Если ИспользоватьПрогрессБар И ОтображаетсяПрогрессБар Тогда
				ПроцентВыполнения = 100;
				ДопИнформацияВыполнение = "";
			КонецЕсли;
		Иначе
			
			ДлительнаяОперация = Истина;
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
			
		КонецЕсли;
		
	Исключение
		УдалитьВременныйКаталогСообщенийОбмена(Объект.ИмяВременногоКаталогаСообщенийОбмена);
		ОбменДаннымиВызовСервера.ЗафиксироватьЗавершениеОбменаСОшибкой(
			Объект.УзелИнформационнойБазы,
			"ВыгрузкаДанных",
			ТекущаяДатаСеанса(),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_СтраницаОжиданияВыгрузкиДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ДлительнаяОперацияЗавершенаСОшибкой = Ложь;
	ИдентификаторФайла = "";
	ИдентификаторОперации = "";
	
	// Не следующую страницу переходим безусловно.
	ПромежуточныйОтказ = Ложь;
	ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыНаСервере(ПромежуточныйОтказ);
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжиданияВыгрузкиДанныхДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		Если ИспользоватьПрогрессБар Тогда
			ПодключитьОбработчикОжидания("ОбработчикОжиданияФоновогоЗадания", 2, Истина);
		Иначе
			ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжиданияВыгрузкиДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперацияЗавершена Тогда
		
		Если ДлительнаяОперацияЗавершенаСОшибкой Тогда
			
			ОбменДаннымиВызовСервера.ЗафиксироватьЗавершениеОбменаСОшибкой(
									Объект.УзелИнформационнойБазы,
									"ВыгрузкаДанных",
									ДатаНачалаОперации,
									ДлительнаяОперацияСтрокаСообщенияОбОшибке);
			
		Иначе
			
			ОбменДаннымиВызовСервера.ЗафиксироватьВыполнениеВыгрузкиДанныхВРежимеДлительнойОперации(Объект.УзелИнформационнойБазы, ДатаНачалаОперации);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Итоги

&НаКлиенте
Функция Подключаемый_СтраницаОкончанияСопоставления_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	ПолучитьСостоянияОбменовДанными(РезультатЗагрузкиДанных, РезультатВыгрузкиДанных, Объект.УзелИнформационнойБазы);
	
	ОбновитьОтображениеЭлементовСтатусаОбменаДанными();
	
	Возврат Неопределено;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с дополнением выгрузки.

&НаСервере
Процедура ИнициализироватьРеквизитыДополненияВыгрузки()
	
	// Читаем параметр в реквизит формы.
	Параметры.Свойство("РасширенныйРежимДополненияВыгрузки", ДополнениеВыгрузкиРасширенныйРежим);
	
	// Получаем настройки в виде структуры, настройки будут неявно сохранены во временном хранилище формы.
	НастройкиДополненияВыгрузки = ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузки(
		Объект.УзелИнформационнойБазы, ЭтотОбъект.УникальныйИдентификатор, ДополнениеВыгрузкиРасширенныйРежим);
		
	// Настраиваем форму.
	// Преобразуем в реквизит формы типа ОбработкаОбъект. Используется для упрощения связи данных с формой.
	ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиРеквизитПоНастройкам(ЭтотОбъект, НастройкиДополненияВыгрузки, "ДополнениеВыгрузки");
	
	ПараметрыСценарияДополнения = ДополнениеВыгрузки.ПараметрыСценарияДополнения;
	
	// Перестраиваем интерфейс по уточненному сценарию.
	
	// Особые случаи
	ТиповыеВариантыЗапрещены = Не ПараметрыСценарияДополнения.ВариантБезДополнения.Использование
		И Не ПараметрыСценарияДополнения.ВариантВсеДокументы.Использование
		И Не ПараметрыСценарияДополнения.ВариантПроизвольныйОтбор.Использование;
		
	Если ТиповыеВариантыЗапрещены Тогда
		Если ПараметрыСценарияДополнения.ВариантДополнительно.Использование Тогда
			// Остается один вариант по сценарию узла.
			Элементы.ДополнениеВыгрузкиВариантВыгрузкиУзелСтрокой.Видимость = Истина;
			Элементы.ДополнениеВыгрузкиВариантВыгрузкиУзел.Видимость        = Ложь;
			Элементы.ДекорацияОтступГруппыНастраиваемый.Видимость           = Ложь;
			ДополнениеВыгрузки.ВариантВыгрузки = 3;
		Иначе
			// Нет ни одного варианта, поднимаем флаг пропуска страницы и выходим.
			ДополнениеВыгрузки.ВариантВыгрузки = -1;
			Элементы.ВариантыДополненияВыгрузки.Видимость = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Устанавливаем типовые поля ввода.
	Элементы.ТиповойВариантДополненияНет.Видимость = ПараметрыСценарияДополнения.ВариантБезДополнения.Использование;
	Если Не ПустаяСтрока(ПараметрыСценарияДополнения.ВариантБезДополнения.Заголовок) Тогда
		Элементы.ДополнениеВыгрузкиВариантВыгрузки0.СписокВыбора[0].Представление = ПараметрыСценарияДополнения.ВариантБезДополнения.Заголовок;
	КонецЕсли;
	Элементы.ТиповойВариантДополненияНетПояснение.Заголовок = ПараметрыСценарияДополнения.ВариантБезДополнения.Пояснение;
	Если ПустаяСтрока(Элементы.ТиповойВариантДополненияНетПояснение.Заголовок) Тогда
		Элементы.ТиповойВариантДополненияНетПояснение.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ТиповойВариантДополненияДокументы.Видимость = ПараметрыСценарияДополнения.ВариантВсеДокументы.Использование;
	Если Не ПустаяСтрока(ПараметрыСценарияДополнения.ВариантВсеДокументы.Заголовок) Тогда
		Элементы.ДополнениеВыгрузкиВариантВыгрузки1.СписокВыбора[0].Представление = ПараметрыСценарияДополнения.ВариантВсеДокументы.Заголовок;
	КонецЕсли;
	Элементы.ТиповойВариантДополненияДокументыПояснение.Заголовок = ПараметрыСценарияДополнения.ВариантВсеДокументы.Пояснение;
	Если ПустаяСтрока(Элементы.ТиповойВариантДополненияДокументыПояснение.Заголовок) Тогда
		Элементы.ТиповойВариантДополненияДокументыПояснение.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ТиповойВариантДополненияПроизвольный.Видимость = ПараметрыСценарияДополнения.ВариантПроизвольныйОтбор.Использование;
	Если Не ПустаяСтрока(ПараметрыСценарияДополнения.ВариантПроизвольныйОтбор.Заголовок) Тогда
		Элементы.ДополнениеВыгрузкиВариантВыгрузки2.СписокВыбора[0].Представление = ПараметрыСценарияДополнения.ВариантПроизвольныйОтбор.Заголовок;
	КонецЕсли;
	Элементы.ТиповойВариантДополненияПроизвольныйПояснение.Заголовок = ПараметрыСценарияДополнения.ВариантПроизвольныйОтбор.Пояснение;
	Если ПустаяСтрока(Элементы.ТиповойВариантДополненияПроизвольныйПояснение.Заголовок) Тогда
		Элементы.ТиповойВариантДополненияПроизвольныйПояснение.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.НастраиваемыйВариантДополнения.Видимость           = ПараметрыСценарияДополнения.ВариантДополнительно.Использование;
	Элементы.ГруппаПериодВыгрузкиСценарийУзла.Видимость         = ПараметрыСценарияДополнения.ВариантДополнительно.ИспользоватьПериодОтбора;
	Элементы.ДополнениеВыгрузкиОтборПоСценариюУзла.Видимость    = Не ПустаяСтрока(ПараметрыСценарияДополнения.ВариантДополнительно.ИмяФормыОтбора);
	
	Элементы.ДополнениеВыгрузкиВариантВыгрузкиУзел.СписокВыбора[0].Представление = ПараметрыСценарияДополнения.ВариантДополнительно.Заголовок;
	Элементы.ДополнениеВыгрузкиВариантВыгрузкиУзелСтрокой.Заголовок              = ПараметрыСценарияДополнения.ВариантДополнительно.Заголовок;
	
	Элементы.НастраиваемыйВариантДополненияПояснение.Заголовок = ПараметрыСценарияДополнения.ВариантДополнительно.Пояснение;
	Если ПустаяСтрока(Элементы.НастраиваемыйВариантДополненияПояснение.Заголовок) Тогда
		Элементы.НастраиваемыйВариантДополненияПояснение.Видимость = Ложь;
	КонецЕсли;
	
	// Заголовки команды
	Если Не ПустаяСтрока(ПараметрыСценарияДополнения.ВариантДополнительно.ЗаголовокКомандыФормы) Тогда
		Элементы.ДополнениеВыгрузкиОтборПоСценариюУзла.Заголовок = ПараметрыСценарияДополнения.ВариантДополнительно.ЗаголовокКомандыФормы;
	КонецЕсли;
	
	// Выстраиваем доступные в нужном порядке.
	ПорядокГруппДополнения = Новый СписокЗначений;
	Если Элементы.ТиповойВариантДополненияНет.Видимость Тогда
		ПорядокГруппДополнения.Добавить(Элементы.ТиповойВариантДополненияНет, 
			Формат(ПараметрыСценарияДополнения.ВариантБезДополнения.Порядок, "ЧЦ=10; ЧН=; ЧВН=; ЧГ="));
	КонецЕсли;
	Если Элементы.ТиповойВариантДополненияДокументы.Видимость Тогда
		ПорядокГруппДополнения.Добавить(Элементы.ТиповойВариантДополненияДокументы, 
			Формат(ПараметрыСценарияДополнения.ВариантВсеДокументы.Порядок, "ЧЦ=10; ЧН=; ЧВН=; ЧГ="));
	КонецЕсли;
	Если Элементы.ТиповойВариантДополненияПроизвольный.Видимость Тогда
		ПорядокГруппДополнения.Добавить(Элементы.ТиповойВариантДополненияПроизвольный, 
			Формат(ПараметрыСценарияДополнения.ВариантПроизвольныйОтбор.Порядок, "ЧЦ=10; ЧН=; ЧВН=; ЧГ="));
	КонецЕсли;
	Если Элементы.НастраиваемыйВариантДополнения.Видимость Тогда
		ПорядокГруппДополнения.Добавить(Элементы.НастраиваемыйВариантДополнения, 
			Формат(ПараметрыСценарияДополнения.ВариантДополнительно.Порядок, "ЧЦ=10; ЧН=; ЧВН=; ЧГ="));
	КонецЕсли;
	ПорядокГруппДополнения.СортироватьПоПредставлению();
	Для Каждого ЭлементГруппыДополнения Из ПорядокГруппДополнения Цикл
		Элементы.Переместить(ЭлементГруппыДополнения.Значение, Элементы.ВариантыДополненияВыгрузки);
	КонецЦикла;
	
	// С настройками можно работать только есть право.
	ЕстьПравоНаНастройки = ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
	Элементы.ГруппаЗагрузкаТиповыхВариантовНастроек.Видимость = ЕстьПравоНаНастройки;
	Если ЕстьПравоНаНастройки Тогда
		// Восстанавливаем предопределенные настройки.
		УстанавливатьПервыйЭлемент = Не ДополнениеВыгрузкиУстановитьНастройкиСервер(ОбменДаннымиСервер.ДополнениеВыгрузкиИмяАвтоСохраненияНастроек());
		ДополнениеВыгрузки.ПредставлениеТекущейНастройки = "";
	Иначе
		УстанавливатьПервыйЭлемент = Истина;
	КонецЕсли;
		
	УстанавливатьПервыйЭлемент = УстанавливатьПервыйЭлемент
		Или ДополнениеВыгрузки.ВариантВыгрузки<0 
		Или ( (ДополнениеВыгрузки.ВариантВыгрузки=0) И (Не ПараметрыСценарияДополнения.ВариантБезДополнения.Использование) )
		Или ( (ДополнениеВыгрузки.ВариантВыгрузки=1) И (Не ПараметрыСценарияДополнения.ВариантВсеДокументы.Использование) )
		Или ( (ДополнениеВыгрузки.ВариантВыгрузки=2) И (Не ПараметрыСценарияДополнения.ВариантПроизвольныйОтбор.Использование) )
		Или ( (ДополнениеВыгрузки.ВариантВыгрузки=3) И (Не ПараметрыСценарияДополнения.ВариантДополнительно.Использование) );
	
	Если УстанавливатьПервыйЭлемент Тогда
		Для Каждого ЭлементГруппыДополнения Из ПорядокГруппДополнения[0].Значение.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(ЭлементГруппыДополнения)=Тип("ПолеФормы") И ЭлементГруппыДополнения.Вид = ВидПоляФормы.ПолеПереключателя Тогда
				ДополнениеВыгрузки.ВариантВыгрузки = ЭлементГруппыДополнения.СписокВыбора[0].Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Начальное отображение, аналог клиентской ДополнениеВыгрузкиВариантВыгрузкиУстановитьВидимость.
	Элементы.ГруппаОтборВсеДокументы.Доступность  = ДополнениеВыгрузки.ВариантВыгрузки=1;
	Элементы.ГруппаОтборДетальный.Доступность     = ДополнениеВыгрузки.ВариантВыгрузки=2;
	Элементы.ГруппаОтборНастраиваемый.Доступность = ДополнениеВыгрузки.ВариантВыгрузки=3;
	
	// Описание начальных типовых отборов.
	УстановитьОписаниеОтборовДополненияВыгрузки();
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиВариантВыгрузкиУстановитьВидимость()
	Элементы.ГруппаОтборВсеДокументы.Доступность  = ДополнениеВыгрузки.ВариантВыгрузки=1;
	Элементы.ГруппаОтборДетальный.Доступность     = ДополнениеВыгрузки.ВариантВыгрузки=2;
	Элементы.ГруппаОтборНастраиваемый.Доступность = ДополнениеВыгрузки.ВариантВыгрузки=3;
КонецПроцедуры

&НаСервере
Процедура ДополнениеВыгрузкиИзменениеПериодаСценарияУзла()
	ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиУстановитьПериодаСценарияУзла(ДополнениеВыгрузки);
КонецПроцедуры

&НаСервере
Процедура ДополнениеВыгрузкиОчисткаОбщегоОтбораСервер()
	ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиОчисткаОбщегоОтбора(ДополнениеВыгрузки);
	УстановитьОписаниеДополненияОбщегоОтбора();
КонецПроцедуры

&НаСервере
Процедура ДополнениеВыгрузкиОчисткаДетальногоОтбораСервер()
	ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиОчисткаДетально(ДополнениеВыгрузки);
	УстановитьОписаниеДополненияДетально();
КонецПроцедуры

&НаСервере
Процедура УстановитьОписаниеОтборовДополненияВыгрузки()
	УстановитьОписаниеДополненияОбщегоОтбора();
	УстановитьОписаниеДополненияДетально();
КонецПроцедуры

&НаСервере
Процедура УстановитьОписаниеДополненияОбщегоОтбора()
	
	Текст = ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиОписаниеДополненияОбщегоОтбора(ДополнениеВыгрузки);
	НетОтбора = ПустаяСтрока(Текст);
	Если НетОтбора Тогда
		Текст = НСтр("ru='Все документы'");
	КонецЕсли;
	
	Элементы.ДополнениеВыгрузкиОбщийОтборДокументов.Заголовок = Текст;
	Элементы.ДополнениеВыгрузкиОчисткаОбщегоОтбора.Видимость = Не НетОтбора;
КонецПроцедуры

&НаСервере
Процедура УстановитьОписаниеДополненияДетально()
	
	Текст = ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиОписаниеДетальногоОтбора(ДополнениеВыгрузки);
	НетОтбора = ПустаяСтрока(Текст);
	Если НетОтбора Тогда
		Текст = НСтр("ru='Дополнительные данные не выбраны'");
	КонецЕсли;
	
	Элементы.ДополнениеВыгрузкиДетальныйОтбор.Заголовок = Текст;
	Элементы.ДополнениеВыгрузкиОчисткаДетальногоОтбора.Видимость = Не НетОтбора;
КонецПроцедуры

// Возвращает булево - успешно/нет (настройка не найдена).
&НаСервере 
Функция ДополнениеВыгрузкиУстановитьНастройкиСервер(ПредставлениеНастройки)
	Результат = ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиВосстановитьНастройки(ДополнениеВыгрузки, ПредставлениеНастройки);
	УстановитьОписаниеОтборовДополненияВыгрузки();
	Возврат Результат;
КонецФункции

&НаСервере 
Функция ДополнениеВыгрузкиИсторияНастроекСервер() 
	Возврат ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиИсторияНастроек(ДополнениеВыгрузки);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Инициализация переходов помощника.

&НаСервере
Процедура ПолучениеДанныхЧерезОбычныеКаналыСвязи()
	
	ТаблицаПереходов.Очистить();
	
	// Начало.
	ТаблицаПереходовНоваяСтрока(1, "СтраницаНачала", "СтраницаНавигацииНачало",, "СтраницаНачала_ПриПереходеДалее");
	
	// Получение данных (транспорт сообщения обмена).
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(2, "СтраницаОжиданияАнализаДанных", "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияАнализаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(3, "СтраницаОжиданияАнализаДанных", "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияАнализаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(4, "СтраницаОжиданияАнализаДанных", "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияАнализаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Анализ данных.
	// Автоматическое сопоставление данных.
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(5, "СтраницаОжиданияАнализаДанных", "СтраницаНавигацииОжидание", Истина, "АнализДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(6, "СтраницаОжиданияАнализаДанных", "СтраницаНавигацииОжидание", Истина, "АнализДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(7, "СтраницаОжиданияАнализаДанных", "СтраницаНавигацииОжидание", Истина, "АнализДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Сопоставление данных пользователем.
	ТаблицаПереходовНоваяСтрока(8, "СтраницаИнформацииСтатистики", "СтраницаНавигацииПродолжение", "СтраницаИнформацииСтатистики_ПриОткрытии", "СтраницаИнформацииСтатистики_ПриПереходеДалее");
	
	// Загрузка данных.
	Если ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(Объект.УзелИнформационнойБазы) Тогда
		ТаблицаПереходовНоваяСтрокаДлительнаяОперация(9,  "СтраницаОжиданияСинхронизацииДанных", "СтраницаНавигацииОжидание", Истина, "ЗагрузкаДанных_ОбработкаДлительнойОперации");
		ТаблицаПереходовНоваяСтрокаДлительнаяОперация(10, "СтраницаОжиданияСинхронизацииДанных", "СтраницаНавигацииОжидание", Истина, "ЗагрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
		ТаблицаПереходовНоваяСтрокаДлительнаяОперация(11, "СтраницаОжиданияСинхронизацииДанных", "СтраницаНавигацииОжидание", Истина, "ЗагрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	Иначе
		ИспользоватьПрогрессБар = Истина;
		ТаблицаПереходовНоваяСтрокаДлительнаяОперация(9,  "СтраницаОжиданияСинхронизацииДанныхПрогрессБарЗагрузка", "СтраницаНавигацииОжидание", Истина, "ЗагрузкаДанных_ОбработкаДлительнойОперации");
		ТаблицаПереходовНоваяСтрокаДлительнаяОперация(10, "СтраницаОжиданияСинхронизацииДанныхПрогрессБарЗагрузка", "СтраницаНавигацииОжидание", Истина, "ЗагрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
		ТаблицаПереходовНоваяСтрокаДлительнаяОперация(11, "СтраницаОжиданияСинхронизацииДанныхПрогрессБарЗагрузка", "СтраницаНавигацииОжидание", Истина, "ЗагрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	КонецЕсли;
	
	// Итоги.
	ТаблицаПереходовНоваяСтрока(12, "СтраницаОкончанияСопоставления", "СтраницаНавигацииОкончание", "СтраницаОкончанияСопоставления_ПриОткрытии");
	
КонецПроцедуры

&НаСервере
Процедура ПолучениеДанныхЧерезВнешнееСоединениеИлиВебСервис()
	
	ТаблицаПереходов.Очистить();
	
	// Проверка подключения.
	ТаблицаПереходовНоваяСтрока(1, "СтраницаНачала", "СтраницаНавигацииНачало",, "СтраницаНачала_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(2, "СтраницаОжиданияАнализаДанных",      "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияПроверкиПодключения_ОбработкаДлительнойОперации");
	
	// Получение данных (транспорт сообщения обмена).
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(3, "СтраницаОжиданияАнализаДанных", "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияАнализаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(4, "СтраницаОжиданияАнализаДанных", "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияАнализаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(5, "СтраницаОжиданияАнализаДанных", "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияАнализаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Анализ данных.
	// Автоматическое сопоставление данных.
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(6, "СтраницаОжиданияАнализаДанных", "СтраницаНавигацииОжидание", Истина, "АнализДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(7, "СтраницаОжиданияАнализаДанных", "СтраницаНавигацииОжидание", Истина, "АнализДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(8, "СтраницаОжиданияАнализаДанных", "СтраницаНавигацииОжидание", Истина, "АнализДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Сопоставление данных пользователем.
	ТаблицаПереходовНоваяСтрока(9, "СтраницаИнформацииСтатистики", "СтраницаНавигацииПродолжение", "СтраницаИнформацииСтатистики_ПриОткрытии", "СтраницаИнформацииСтатистики_ПриПереходеДалее");
	
	// Загрузка данных.
	Если ОбменЧерезВебСервис Тогда
		ИмяСтраницыСинхронизация = "СтраницаОжиданияСинхронизацииДанных";
	Иначе
		ИспользоватьПрогрессБар = Истина;
		ИмяСтраницыСинхронизация = "СтраницаОжиданияСинхронизацииДанныхПрогрессБарЗагрузка";
	КонецЕсли;

	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(10, ИмяСтраницыСинхронизация, "СтраницаНавигацииОжидание", Истина, "ЗагрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(11, ИмяСтраницыСинхронизация, "СтраницаНавигацииОжидание", Истина, "ЗагрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(12, ИмяСтраницыСинхронизация, "СтраницаНавигацииОжидание", Истина, "ЗагрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Итоги.
	ТаблицаПереходовНоваяСтрока(13, "СтраницаОкончанияСопоставления", "СтраницаНавигацииОкончание", "СтраницаОкончанияСопоставления_ПриОткрытии");
	
КонецПроцедуры

&НаСервере
Процедура ОтправкаДанныхЧерезОбычныеКаналыСвязи()
	
	ТаблицаПереходов.Очистить();
	
	// Начало.
	ТаблицаПереходовНоваяСтрока(1, "СтраницаНачала", "СтраницаНавигацииНачало",, "СтраницаНачала_ПриПереходеДалее");
	
	// Настройка выгрузки данных.
	РезультатВыгрузкиДанных = "";
	ТаблицаПереходовНоваяСтрока(2, "СтраницаВопросОСоставеВыгрузки",  "СтраницаНавигацииПродолжение", "СтраницаВопросОСоставеВыгрузки_ПриОткрытии");
	
	// Выгрузка данных.
	Если ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(Объект.УзелИнформационнойБазы) Тогда
		ИмяСтраницыСинхронизация = "СтраницаОжиданияСинхронизацииДанных";
		ИмяПроцедуры = "СтраницаОжиданияВыгрузкиДанных_ОбработкаДлительнойОперации";
	Иначе
		ИспользоватьПрогрессБар = Истина;
		ИмяСтраницыСинхронизация = "СтраницаОжиданияСинхронизацииДанныхПрогрессБарВыгрузка";
		ИмяПроцедуры = "СтраницаОжиданияВыгрузкиДанныхОбычныеКаналы_ОбработкаДлительнойОперации";
	КонецЕсли;
	
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(3, ИмяСтраницыСинхронизация, "СтраницаНавигацииОжидание", Истина, ИмяПроцедуры);
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(4, ИмяСтраницыСинхронизация, "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияВыгрузкиДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(5, ИмяСтраницыСинхронизация, "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияВыгрузкиДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Итоги.
	ТаблицаПереходовНоваяСтрока(6, "СтраницаОкончанияСопоставления", "СтраницаНавигацииОкончание", "СтраницаОкончанияСопоставления_ПриОткрытии");
	
КонецПроцедуры

&НаСервере
Процедура ОтправкаДанныхЧерезВнешнееСоединениеИлиВебСервис()
	
	ТаблицаПереходов.Очистить();
	
	// Проверка подключения.
	ТаблицаПереходовНоваяСтрока(1, "СтраницаНачала", "СтраницаНавигацииНачало",, "СтраницаНачала_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(2, "СтраницаОжиданияСинхронизацииДанных", "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияПроверкиПодключения_ОбработкаДлительнойОперации");
	
	// Настройка выгрузки данных.
	РезультатВыгрузкиДанных = "";
	ТаблицаПереходовНоваяСтрока(3, "СтраницаВопросОСоставеВыгрузки", "СтраницаНавигацииПродолжение", "СтраницаВопросОСоставеВыгрузки_ПриОткрытии");
	
	// Выгрузка данных.
	Если ОбменЧерезВебСервис Тогда
		ИмяСтраницыСинхронизация = "СтраницаОжиданияСинхронизацииДанных";
		ИмяПроцедуры = "СтраницаОжиданияВыгрузкиДанных_ОбработкаДлительнойОперации";
	Иначе
		ИспользоватьПрогрессБар = Истина;
		ИмяСтраницыСинхронизация = "СтраницаОжиданияСинхронизацииДанныхПрогрессБарВыгрузка";
		ИмяПроцедуры = "СтраницаОжиданияВыгрузкиДанныхОбычныеКаналы_ОбработкаДлительнойОперации";
	КонецЕсли;

	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(4, ИмяСтраницыСинхронизация, "СтраницаНавигацииОжидание", Истина, ИмяПроцедуры);
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(5, ИмяСтраницыСинхронизация, "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияВыгрузкиДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(6, ИмяСтраницыСинхронизация, "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияВыгрузкиДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Итоги.
	ТаблицаПереходовНоваяСтрока(7, "СтраницаОкончанияСопоставления", "СтраницаНавигацииОкончание", "СтраницаОкончанияСопоставления_ПриОткрытии");
	
КонецПроцедуры

&НаСервере
Процедура ПолучениеИОтправкаДанныхЧерезОбычныеКаналыСвязи()
	
	ТаблицаПереходов.Очистить();
	
	// Начало.
	ТаблицаПереходовНоваяСтрока(1, "СтраницаНачала", "СтраницаНавигацииНачало",, "СтраницаНачала_ПриПереходеДалее");
	
	// Получение данных (транспорт сообщения обмена).
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(2, "СтраницаОжиданияАнализаДанных", "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияАнализаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(3, "СтраницаОжиданияАнализаДанных", "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияАнализаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(4, "СтраницаОжиданияАнализаДанных", "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияАнализаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Анализ данных.
	// Автоматическое сопоставление данных.
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(5, "СтраницаОжиданияАнализаДанных", "СтраницаНавигацииОжидание", Истина, "АнализДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(6, "СтраницаОжиданияАнализаДанных", "СтраницаНавигацииОжидание", Истина, "АнализДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(7, "СтраницаОжиданияАнализаДанных", "СтраницаНавигацииОжидание", Истина, "АнализДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Сопоставление данных пользователем.
	ТаблицаПереходовНоваяСтрока(8, "СтраницаИнформацииСтатистики", "СтраницаНавигацииПродолжение", "СтраницаИнформацииСтатистики_ПриОткрытии", "СтраницаИнформацииСтатистики_ПриПереходеДалее");
	Если ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(Объект.УзелИнформационнойБазы) Тогда
		ИмяСтраницыСинхронизацияЗагрузка = "СтраницаОжиданияСинхронизацииДанных";
		ИмяСтраницыСинхронизацияВыгрузка = "СтраницаОжиданияСинхронизацииДанных";
		ИмяПроцедурыВыгрузка = "СтраницаОжиданияВыгрузкиДанных_ОбработкаДлительнойОперации";
	Иначе
		ИспользоватьПрогрессБар = Истина;
		ИмяСтраницыСинхронизацияЗагрузка = "СтраницаОжиданияСинхронизацииДанныхПрогрессБарЗагрузка";
		ИмяСтраницыСинхронизацияВыгрузка = "СтраницаОжиданияСинхронизацииДанныхПрогрессБарВыгрузка";
		ИмяПроцедурыВыгрузка = "СтраницаОжиданияВыгрузкиДанныхОбычныеКаналы_ОбработкаДлительнойОперации";
	КонецЕсли;
	
	// Загрузка данных.
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(9,  ИмяСтраницыСинхронизацияЗагрузка, "СтраницаНавигацииОжидание", Истина, "ЗагрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(10, ИмяСтраницыСинхронизацияЗагрузка, "СтраницаНавигацииОжидание", Истина, "ЗагрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(11, ИмяСтраницыСинхронизацияЗагрузка, "СтраницаНавигацииОжидание", Истина, "ЗагрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Настройка выгрузки данных.
	РезультатВыгрузкиДанных = "";
	ТаблицаПереходовНоваяСтрока(12, "СтраницаВопросОСоставеВыгрузки",  "СтраницаНавигацииПродолжение", "СтраницаВопросОСоставеВыгрузки_ПриОткрытии");
	
	// Выгрузка данных.
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(13, ИмяСтраницыСинхронизацияВыгрузка, "СтраницаНавигацииОжидание", Истина, ИмяПроцедурыВыгрузка);
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(14, ИмяСтраницыСинхронизацияВыгрузка, "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияВыгрузкиДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(15, ИмяСтраницыСинхронизацияВыгрузка, "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияВыгрузкиДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Итоги.
	ТаблицаПереходовНоваяСтрока(16, "СтраницаОкончанияСопоставления", "СтраницаНавигацииОкончание", "СтраницаОкончанияСопоставления_ПриОткрытии");
	
КонецПроцедуры

&НаСервере
Процедура ПолучениеИОтправкаДанныхЧерезВнешнееСоединениеИлиВебСервис()
	
	ТаблицаПереходов.Очистить();
	
	// Проверка подключения.
	ТаблицаПереходовНоваяСтрока(1, "СтраницаНачала", "СтраницаНавигацииНачало",, "СтраницаНачала_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(2, "СтраницаОжиданияАнализаДанных",      "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияПроверкиПодключения_ОбработкаДлительнойОперации");
	
	// Получение данных (транспорт сообщения обмена).
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(3, "СтраницаОжиданияАнализаДанных",      "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияАнализаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(4, "СтраницаОжиданияАнализаДанных",      "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияАнализаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(5, "СтраницаОжиданияАнализаДанных",      "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияАнализаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Анализ данных.
	// Автоматическое сопоставление данных.
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(6, "СтраницаОжиданияАнализаДанных", "СтраницаНавигацииОжидание", Истина, "АнализДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(7, "СтраницаОжиданияАнализаДанных", "СтраницаНавигацииОжидание", Истина, "АнализДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(8, "СтраницаОжиданияАнализаДанных", "СтраницаНавигацииОжидание", Истина, "АнализДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Сопоставление данных пользователем.
	ТаблицаПереходовНоваяСтрока(9, "СтраницаИнформацииСтатистики", "СтраницаНавигацииПродолжение", "СтраницаИнформацииСтатистики_ПриОткрытии", "СтраницаИнформацииСтатистики_ПриПереходеДалее");
	
	// Загрузка данных.
	Если ОбменЧерезВебСервис Тогда
		ИмяСтраницыСинхронизацияЗагрузка = "СтраницаОжиданияСинхронизацииДанных";
		ИмяСтраницыСинхронизацияВыгрузка = "СтраницаОжиданияСинхронизацииДанных";
		ИмяПроцедурыВыгрузка = "СтраницаОжиданияВыгрузкиДанных_ОбработкаДлительнойОперации";
	Иначе
		ИспользоватьПрогрессБар = Истина;
		ИмяСтраницыСинхронизацияЗагрузка = "СтраницаОжиданияСинхронизацииДанныхПрогрессБарЗагрузка";
		ИмяСтраницыСинхронизацияВыгрузка = "СтраницаОжиданияСинхронизацииДанныхПрогрессБарВыгрузка";
		ИмяПроцедурыВыгрузка = "СтраницаОжиданияВыгрузкиДанныхОбычныеКаналы_ОбработкаДлительнойОперации";
	КонецЕсли;
	
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(10, ИмяСтраницыСинхронизацияЗагрузка, "СтраницаНавигацииОжидание", Истина, "ЗагрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(11, ИмяСтраницыСинхронизацияЗагрузка, "СтраницаНавигацииОжидание", Истина, "ЗагрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(12, ИмяСтраницыСинхронизацияЗагрузка, "СтраницаНавигацииОжидание", Истина, "ЗагрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Настройка выгрузки данных.
	РезультатВыгрузкиДанных = "";
	ТаблицаПереходовНоваяСтрока(13, "СтраницаВопросОСоставеВыгрузки", "СтраницаНавигацииПродолжение", "СтраницаВопросОСоставеВыгрузки_ПриОткрытии");
	
	// Выгрузка данных.
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(14, ИмяСтраницыСинхронизацияВыгрузка, "СтраницаНавигацииОжидание", Истина, ИмяПроцедурыВыгрузка);
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(15, ИмяСтраницыСинхронизацияВыгрузка, "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияВыгрузкиДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрокаДлительнаяОперация(16, ИмяСтраницыСинхронизацияВыгрузка, "СтраницаНавигацииОжидание", Истина, "СтраницаОжиданияВыгрузкиДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Итоги.
	ТаблицаПереходовНоваяСтрока(17, "СтраницаОкончанияСопоставления", "СтраницаНавигацииОкончание", "СтраницаОкончанияСопоставления_ПриОткрытии");
	
КонецПроцедуры

#КонецОбласти
