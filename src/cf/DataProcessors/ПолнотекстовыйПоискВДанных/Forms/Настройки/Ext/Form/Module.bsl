#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ОбластиПоиска", ОбластиПоиска);
	Параметры.Свойство("ИскатьВРазделах", ИскатьВРазделах);
	ЗаполнитьДеревоРазделовПоиска();
	Элементы.ДеревоРазделовПоиска.Доступность = ИскатьВРазделах = 1;
	
	ДанныеТекущегоРаздела = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПолнотекстовыйПоискТекущийРаздел", "");
	Если ДанныеТекущегоРаздела <> Неопределено 
		И ТипЗнч(ДанныеТекущегоРаздела) = Тип("Структура") Тогда
		
		ТекущийРаздел = ДанныеТекущегоРаздела.ТекущийРаздел;
		ИдентификаторСтроки = ДанныеТекущегоРаздела.ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Перейдем к разделу, с которым работали при предыдущих настройках
	Если Не ПустаяСтрока(ТекущийРаздел) И ИдентификаторСтроки <> 0 Тогда
		РазделПоиска = ДеревоРазделовПоиска.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если РазделПоиска = Неопределено Или РазделПоиска.Раздел <> ТекущийРаздел Тогда
			Возврат;
		КонецЕсли;
		РодительРаздела = РазделПоиска.ПолучитьРодителя();
		Если РодительРаздела <> Неопределено Тогда
			Пока РодительРаздела <> Неопределено Цикл
				Элементы.ДеревоРазделовПоиска.Развернуть(РодительРаздела.ПолучитьИдентификатор());
				РодительРаздела = РодительРаздела.ПолучитьРодителя();
			КонецЦикла;
		КонецЕсли;
		Элементы.ДеревоРазделовПоиска.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьПоискаПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРазделовПоиска

&НаКлиенте
Процедура ДеревоРазделовПоискаПометкаПриИзменении(Элемент)
	ЗначениеПометки = Элементы.ДеревоРазделовПоиска.ТекущиеДанные.Пометка;
	
	Родитель = Элементы.ДеревоРазделовПоиска.ТекущиеДанные.ПолучитьРодителя();
	Пока Родитель <> Неопределено Цикл
		Если Не ЕстьВозможностьИзмененияПометки(Родитель, ЗначениеПометки) Тогда
			Прервать;
		КонецЕсли;
		Родитель.Пометка = ЗначениеПометки;
		Родитель = Родитель.ПолучитьРодителя();
	КонецЦикла;
	
	ДочерниеЭлементы = Элементы.ДеревоРазделовПоиска.ТекущиеДанные.ПолучитьЭлементы();
	Если ДочерниеЭлементы.Количество() > 0 Тогда
		УстановитьПометкуВДочернихУзлах(ДочерниеЭлементы, ЗначениеПометки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ТекущийРаздел = "";
	ТекущиеДанные = Элементы.ДеревоРазделовПоиска.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийРаздел = ТекущиеДанные.Раздел;
	КонецЕсли;
	СохранитьТекущийПутьРаздела(ТекущийРаздел, Элементы.ДеревоРазделовПоиска.ТекущаяСтрока);
	
	НастройкиПоиска = Новый Структура;
	НастройкиПоиска.Вставить("ОбластиПоиска", СписокОбластей());
	НастройкиПоиска.Вставить("ИскатьВРазделах", ИскатьВРазделах = 1);

	Закрыть(НастройкиПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	УстановитьПометкуВДочернихУзлах(ДеревоРазделовПоиска.ПолучитьЭлементы(), Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	УстановитьПометкуВДочернихУзлах(ДеревоРазделовПоиска.ПолучитьЭлементы(), Истина);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	ДеревоФормы = Элементы.ДеревоРазделовПоиска;
	Для Каждого Элемент Из ДеревоРазделовПоиска.ПолучитьЭлементы() Цикл
		ДеревоФормы.Свернуть(Элемент.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	ДеревоФормы = Элементы.ДеревоРазделовПоиска;
	Для Каждого Элемент Из ДеревоРазделовПоиска.ПолучитьЭлементы() Цикл
		Элементы.ДеревоРазделовПоиска.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция СписокОбластей()
	
	Список = Новый СписокЗначений;
	
	ДеревоОМ = РеквизитФормыВЗначение("ДеревоРазделовПоиска");
	
	ЗаполнитьСписокОбластей(ДеревоОМ.Строки, Список);
	
	Возврат Список;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокОбластей(Строки, Список)
	
	Для Каждого Раздел Из Строки Цикл
		Если Раздел.Пометка Тогда
			
			Если Раздел.ЭтоОбъектМетаданных Тогда
				Список.Добавить(Раздел.ОбъектМД, Раздел.ПутьКДанным);
			КонецЕсли;
			
			Если Раздел.Строки.Количество() > 0 Тогда
				ЗаполнитьСписокОбластей(Раздел.Строки, Список);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРазделовПоиска()
	
	МетаданныеПодсистемы = Метаданные.Подсистемы;
	МетаданныеЖурналыДокументов = Метаданные.ЖурналыДокументов;
	ТаблицаСправочники = СвязанныеСправочники();
	
	ДеревоОМ = РеквизитФормыВЗначение("ДеревоРазделовПоиска");
	
	ДобавитьОбъектыПодсистемы(МетаданныеПодсистемы, ДеревоОМ, ТаблицаСправочники);
	
	ПолнотекстовыйПоискСерверПереопределяемый.ПриПолученииРазделовПолнотекстовогоПоиска(ДеревоОМ);
	
	ДеревоОМ.Строки.Сортировать("Раздел");
	
	Для Каждого Область Из ОбластиПоиска Цикл
		Если ПустаяСтрока(Область.Представление) Тогда
			СтрокаДерева = ДеревоОМ.Строки.Найти(Область.Значение ,"Раздел");
			Если СтрокаДерева <> Неопределено Тогда
				СтрокаДерева.Пометка = Истина;
			КонецЕсли;
		Иначе
			// Если есть путь к разделу, ставим отметку, начиная с корневого
			МассивОбластейСПутями = СтрРазделить(Область.Представление, ",", Ложь);
			СтрокиПоиска = ДеревоОМ.Строки;
			Для Каждого ОбластьСПутем Из МассивОбластейСПутями Цикл
				СтрокаДерева = СтрокиПоиска.Найти(ОбластьСПутем ,"Раздел");
				Если СтрокаДерева <> Неопределено Тогда
					СтрокаДерева.Пометка = Истина;
					СтрокиПоиска = СтрокаДерева.Строки;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоОМ, "ДеревоРазделовПоиска");

КонецПроцедуры

&НаСервере
Процедура ДобавитьОбъектыПодсистемы(Подсистемы, ЭлементДерева, ТаблицаСправочники, ПутьКДанным = "")
	
	Для Каждого Подсистема Из Подсистемы Цикл
		
		Если Подсистема.ВключатьВКомандныйИнтерфейс 
			И ПравоДоступа("Просмотр", Подсистема)
			И ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Подсистема) Тогда
			
			НоваяПодсистема = ЭлементДерева.Строки.Добавить();
			НоваяПодсистема.Раздел = Подсистема;
			
			ПутьКДаннымОбъекта = ПутьКДанным + Подсистема + ",";
			
			Для Каждого ОбъектПодсистемы Из Подсистема.Состав Цикл
				
				Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектПодсистемы) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ОбщегоНазначения.ЭтоСправочник(ОбъектПодсистемы)
					Или ОбщегоНазначения.ЭтоДокумент(ОбъектПодсистемы)
					Или ОбщегоНазначения.ЭтоРегистрСведений(ОбъектПодсистемы)
					Или ОбщегоНазначения.ЭтоЗадача(ОбъектПодсистемы) Тогда
					
					Если ОбъектПодсистемы.ПолнотекстовыйПоиск = Метаданные.СвойстваОбъектов.ИспользованиеПолнотекстовогоПоиска.НеИспользовать Тогда
						Продолжить;
					КонецЕсли;
					
					ПредставлениеОбъекта = ПредставлениеФормыСписка(ОбъектПодсистемы);
					НовыйОбъект = НоваяПодсистема.Строки.Добавить();
					НовыйОбъект.Раздел = ПредставлениеОбъекта;
					НовыйОбъект.ЭтоОбъектМетаданных = Истина;
					НовыйОбъект.ОбъектМД = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектПодсистемы);
					НовыйОбъект.ПутьКДанным = ПутьКДаннымОбъекта + ПредставлениеОбъекта + ",";
					
					Отбор = Новый Структура;
					Отбор.Вставить("Владелец", ОбъектПодсистемы);
					
					НайденныеОбъекты = ТаблицаСправочники.НайтиСтроки(Отбор);
					Для Каждого Стр Из НайденныеОбъекты Цикл
						
						Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Стр.Объект) Тогда
							Продолжить;
						КонецЕсли;
						
						ПредставлениеОбъекта = ПредставлениеФормыСписка(Стр.Объект);
						НовыйВспомогательныйОбъект = НовыйОбъект.Строки.Добавить();
						НовыйВспомогательныйОбъект.Раздел = ПредставлениеОбъекта;
						НовыйВспомогательныйОбъект.ЭтоОбъектМетаданных = Истина;
						НовыйВспомогательныйОбъект.ОбъектМД = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Стр.Объект);
						НовыйВспомогательныйОбъект.ПутьКДанным = НовыйОбъект.ПутьКДанным + ПредставлениеОбъекта;
					КонецЦикла;
				ИначеЕсли ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектПодсистемы) Тогда
					ЖурналДокументовСоздан = Ложь;
					Для Каждого Документ Из ОбъектПодсистемы.РегистрируемыеДокументы Цикл
						
						Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Документ) Тогда
							Продолжить;
						КонецЕсли;
						
						Если Документ.ПолнотекстовыйПоиск = Метаданные.СвойстваОбъектов.ИспользованиеПолнотекстовогоПоиска.НеИспользовать Тогда
							Продолжить;
						КонецЕсли;
						Если Не ЖурналДокументовСоздан Тогда
							НовыйОбъект = НоваяПодсистема.Строки.Добавить();
							НовыйОбъект.Раздел = ОбъектПодсистемы;
							НовыйОбъект.ПутьКДанным = ПутьКДаннымОбъекта + ОбъектПодсистемы + ",";
							ЖурналДокументовСоздан = Истина;
						КонецЕсли;
						
						ПредставлениеОбъекта = ПредставлениеФормыСписка(Документ);
						НовыйВспомогательныйОбъект = НовыйОбъект.Строки.Добавить();
						НовыйВспомогательныйОбъект.Раздел = ПредставлениеОбъекта;
						НовыйВспомогательныйОбъект.ЭтоОбъектМетаданных = Истина;
						НовыйВспомогательныйОбъект.ОбъектМД = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ);
						НовыйВспомогательныйОбъект.ПутьКДанным = НовыйОбъект.ПутьКДанным + ПредставлениеОбъекта;
					КонецЦикла;
					Если ЖурналДокументовСоздан Тогда
						НовыйОбъект.Строки.Сортировать("Раздел");
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Подсистема.Подсистемы.Количество() > 0 Тогда
				ДобавитьОбъектыПодсистемы(Подсистема.Подсистемы, НоваяПодсистема, ТаблицаСправочники, ПутьКДаннымОбъекта);
			КонецЕсли;
			
			Если НоваяПодсистема.Строки.Количество() = 0 Тогда
				ЭлементДерева.Строки.Удалить(НоваяПодсистема);
			Иначе
				НоваяПодсистема.Строки.Сортировать("Раздел");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СвязанныеСправочники()
	
	МетаданныеСправочники = Метаданные.Справочники;
	
	ТаблицаСправочники = Новый ТаблицаЗначений;
	ТаблицаСправочники.Колонки.Добавить("ТипОбъекта");
	ТаблицаСправочники.Колонки.Добавить("Объект");
	ТаблицаСправочники.Колонки.Добавить("Владелец");
	
	Для Каждого Справочник Из МетаданныеСправочники Цикл
		Если Справочник.ПолнотекстовыйПоиск = Метаданные.СвойстваОбъектов.ИспользованиеПолнотекстовогоПоиска.Использовать Тогда
			Если Справочник.Владельцы.Количество() = 1 Тогда
				НоваяСтрока = ТаблицаСправочники.Добавить();
				НоваяСтрока.ТипОбъекта = "Справочник";
				НоваяСтрока.Объект = Справочник;
				Для Каждого Владелец Из Справочник.Владельцы Цикл
					НоваяСтрока.Владелец = Владелец;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаСправочники;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьЭлементовФормы()
	Элементы.ДеревоРазделовПоиска.Доступность = ИскатьВРазделах = 1;
КонецПроцедуры

&НаКлиенте
Функция УстановитьПометкуВДочернихУзлах(ЭлементыДерева, ЗначениеПометки)
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Элемент.Пометка = ЗначениеПометки;
		ДочерниеЭлементы = Элемент.ПолучитьЭлементы();
		Если ДочерниеЭлементы.Количество() > 0 Тогда
			УстановитьПометкуВДочернихУзлах(ДочерниеЭлементы, ЗначениеПометки);
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаКлиенте
Функция ЕстьВозможностьИзмененияПометки(Родитель, ЗначениеПометки)
	ВозможностьИзменения = Истина;
	
	Если ЗначениеПометки Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭлементыДерева = Родитель.ПолучитьЭлементы();
	Если Родитель.ЭтоОбъектМетаданных И ЭлементыДерева.Количество() = 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Если Элемент.Пометка <> ЗначениеПометки Тогда
			ВозможностьИзменения = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозможностьИзменения;
КонецФункции

&НаСервере
Функция ПредставлениеФормыСписка(Объект)
	
	Если Не ПустаяСтрока(Объект.РасширенноеПредставлениеСписка) Тогда
		Представление = Объект.РасширенноеПредставлениеСписка;
	ИначеЕсли Не ПустаяСтрока(Объект.ПредставлениеСписка) Тогда
		Представление = Объект.ПредставлениеСписка;
	Иначе
		Представление = Объект.Представление();
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьТекущийПутьРаздела(ТекущийРаздел, ИдентификаторСтроки)
	
	ПараметрыТекущегоРаздела = Новый Структура;
	ПараметрыТекущегоРаздела.Вставить("ТекущийРаздел", ТекущийРаздел);
	ПараметрыТекущегоРаздела.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПолнотекстовыйПоискТекущийРаздел", "", ПараметрыТекущегоРаздела);
	
КонецПроцедуры

#КонецОбласти

