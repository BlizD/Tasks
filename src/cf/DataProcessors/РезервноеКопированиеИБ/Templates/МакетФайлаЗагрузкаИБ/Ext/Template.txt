#Область ОбластьПараметров
// Параметры процедуры обновления
var now = new Date();
var outFileName = "log" + now.valueOf() + ".txt"; // Путь к log-файлу

var TempCatalog = [КаталогВременныхФайлов]; // каталог для копирования .cd файла при доп. копировании.
var v8exe = [ИмяИсполняемогоФайлаПрограммы]; // Путь к исполняемому файлу 1С:Предприятия 8
var infoBasePath = [ПараметрПутиКИнформационнойБазе]; 
var BaseFileName = [СтрокаПутиКФайлуИнформационнойБазы]; 
var connectionString = [СтрокаСоединенияИнформационнойБазы] + ';С="РазрешитьРаботуПользователей"; UC=РезервноеКопирование';
var adminName = [ИмяАдминистратораОбновления];  // имя администратора, инициировавшего обновление
var backupFileCopyName = [КаталогРезервнойКопии2] + '1Cv8' + now.valueOf() + '.zip';  // Файл резервной копии
var backupFileName = [КаталогРезервнойКопии];  // Файл резервной копии
var eventLogID = [СобытиеЖурналаРегистрации];
var comConnectorName = [ИмяCOMСоединителя];  // имя COM-класса для работы с 1С:Предприятием 8 через COM-соединение
var useComConnector = [ИспользоватьCOMСоединитель];  // флаг использования COM-соединения для работы с 1С:Предприятием 8
var tempLogFileName = "templog.txt";
var retryCount = 0;
#КонецОбласти

#Область ОбластьРезервногоКопирования
// Инициализация
var oFileSystemObject = new ActiveXObject("Scripting.FileSystemObject");

var thisFileName;
var thisFileDir;
var InfoBasePassword;

thisFileName = eval("oHTA.commandLine");
thisFileDir = thisFileName.substr(1, thisFileName.lastIndexOf("\\") - 1);
InfoBasePassword = thisFileName.substr(thisFileName.indexOf("[p1]") + 4, thisFileName.indexOf("[/p1]") - thisFileName.indexOf("[p1]") - 4);
InfoBasePassword = fromUnicode(InfoBasePassword);
thisFileName = thisFileName.substr(1, thisFileName.indexOf("[p1]") - 3);

var infoBaseAuthorization = format('/N\"{0}\" /P\"{1}\" /WA-', adminName, InfoBasePassword);
connectionString = format(connectionString, adminName, InfoBasePassword);

var oShell = new ActiveXObject("WScript.Shell"); 
var oShellApplication = new ActiveXObject("Shell.Application");
oShell.CurrentDirectory = thisFileDir;

var errorMarker = "{ERR}";
var successMarker = "{OK }";

// Переменные состояния
var backupCreated = false;
var logging1C = false;
var ComConnection = null;

// Открыть файл sFilePath.
function runApp(sFilePath, sFileArgs, show, bWaitOnReturn) 
{ 
	if (bWaitOnReturn == undefined)
	    bWaitOnReturn = false;
	if (show == undefined)
	    show = SW_SHOW;
	if (sFileArgs == undefined)
	    sFileArgs = "";
	var ret = -1;
	log(format("Запускается: {0}; параметры: {1}; окно: {2}; ожидание: {3}", 
	    sFilePath, sFileArgs, SWtoString(show), bWaitOnReturn));
	if (oFileSystemObject.FileExists(sFilePath))
	{
        try
        {
	        ret = oShell.Run(format('"{0}" {1}', sFilePath, sFileArgs), show, bWaitOnReturn); 
	    }
        catch(e) 
        { 
            log(format("Исключение в runApp: {0}, {1}.", e.name, e.message), true);
            return -1;
        }
   		log(format("Код возврата: {0}", ret), ret != 0);
   		return ret;
    }
    else
		log(format("Запускаемый файл не существует: {0}", sFilePath), true);
	return ret;
}

function clearLogFile()
{
    var outFile = oFileSystemObject.OpenTextFile(outFileName, ForWriting, true, TristateTrue);
    outFile.Close();
}

// Записать текст в лог
function log(text, failed)
{
	if (failed == undefined)
	    failed = false;
	logFile(text, failed);
}

// Записать текст в лог-файл
function logFile(text, failed)
{
	var now = new Date();
    var f;
    try
    {
        f = oFileSystemObject.OpenTextFile(outFileName, ForAppending, true, TristateTrue);
    }
    catch(e) { return; }    
	try
	{
    	var status = (failed == false ? successMarker : errorMarker);
	    f.WriteLine(format("{0} {1} {2}", now, status, text));
	}
	finally
	{
	    try
	    {
	        f.Close();
	    }
	    catch(e) { return; }
	}
}

// Записать текст из временного лог-файла
function appendLog()
{
	var f;
	var outf;
	var text;
	try
	{
		f = oFileSystemObject.OpenTextFile(tempLogFileName, ForReading, false, TristateFalse);
		outf = oFileSystemObject.OpenTextFile(outFileName, ForAppending, true, TristateTrue);
	}
    catch(e) { return; }    
    try
    {
    	var oldAtEndOfStream = f.AtEndOfStream;
		if (!oldAtEndOfStream)
		{
			text = f.ReadAll();
    		outf.WriteLine(text);
		}
	}
	finally
	{
		try
		{
			f.Close();
			outf.Close();
		}
	    catch(e) { return; }
    }
}

// Записать текст в журнал регистрации
function log1C(text, failed)
{
    if (logging1C)
        return;
    var connection = createConnection();
    if (connection == null)
        return;
    try
    {
        log1CInternal(connection, text, failed);
    }
    finally
    {
        connection = null;
    }
}

// Записать текст в журнал регистрации
function log1CInternal(connection, text, failed)
{
    if (logging1C)
        return;
    logging1C = true;
    try
    {
        try
        {
            var eventLogLevel = failed ? connection.EventLogLevel.Error : connection.EventLogLevel.Information;
            connection.WriteLogEvent(eventLogID, eventLogLevel, null, null, text, 
                connection.EventLogEntryTransactionMode.Independent);
        }
        catch(e) 
        { 
            log(format("Исключение в log1CInternal: {0}, {1}.", e.name, e.message), true);
            return;
        }
    }
    finally
    {
        logging1C = false;
    }
}

// Инициализация
function initialize()
{
    clearLogFile();
    log(format("Файл скрипта: {0}", thisFileName));
     return 0; 
}

// Финализация
function finalize(success)
{
    if (success == undefined)
        success = false;

    // Запись результата обновления в Event Log
    writeEventLog(success);

    if (!success)
    {
            allowConnections(); // Разрешение подключений
    }

    write1CEventLog();      // Запись всей информации из log-файла в журнал регистрации
    setResult(success);

    // очистка глобального COM-соединения
    ComConnection = null;

}

function createConnection()
{
    if (!useComConnector)
    	return null;
    
    if (!ComConnection == null)	
    	return ComConnection;
    		
    try
    {
        var ComConnector = new ActiveXObject(comConnectorName);
        ComConnection = ComConnector.Connect(connectionString);
        return ComConnection;
    }
    catch(e)
    {
        log(format("Исключение в createConnection: {0}, {1}", e.name, e.message), true);
        return null;
    }
    
}


// Записать весь log-файл в журнал регистрации
function write1CEventLog()
{
    if (!oFileSystemObject.FileExists(outFileName))
        return;
        
    var connection = createConnection();
    if (connection == null)
        return;
    try
    {
        var f = oFileSystemObject.OpenTextFile(outFileName, ForReading, false, TristateTrue);
        
        var text;
        while (!f.AtEndOfStream)
        {
            text = f.ReadLine();
            while ((text.indexOf(successMarker) < 0) && (text.indexOf(errorMarker) < 0) && !f.AtEndOfStream)
               text += "\n" + f.ReadLine();

            var failed = text.indexOf(errorMarker) > 0;
            log1CInternal(connection, text, failed);
        }
    }
    catch(e) 
    { 
        log(format("Исключение в write1CEventLog: {0}, {1}.", e.name, e.message), true);
        return;
    }
    finally
    {
        connection = null;
    }
}

function doSetResult(success)
{
    var connection = createConnection();
    if (connection == null)
        return (useComConnector ? 1 : 0);
    var res = 0;
    try
    {
        connection.РезервноеКопированиеИБСервер.ЗавершитьВосстановление(success);
    
    }
    catch(e)
    {
        log(format("Исключение при вызове РезервноеКопированиеИБСервер.ЗавершитьВосстановление: {0}, {1}.", e.name, e.message), true);
        res = 2;
    }
    return res;
}


// Передать в приложение результат выполнения 
function setResult(success)
{
    
    var result = doSetResult(success);
    CollectGarbage();   // освобождает соединения с COM-объектом
    return result;
}

// Записать результат выполнения процедуры обновления в Event Log
function writeEventLog(success)
{
    try
    {
        var eventKind = success ? EVENT_SUCCESS : EVENT_CRITICAL;
        var message;
        if (success)
            message = "Восстановление информационной базы прошло успешно.";
        else
            message = "Ошибка при восстановлении информационной базы.";
        message += format(" Параметры информационной базы: {0}.", infoBasePath);
        if (!success)
            message += " Протокол восстановления сохранен в журнал регистрации.";
        oShell.LogEvent(eventKind, message);
    }
    catch(e)
    {
        log(format("Исключение в writeEventLog: {0}, {1}.", e.name, e.message), true);
    }
}

// Восстановление БД
function backupDB()
{
	var oShellApplication = new ActiveXObject("Shell.Application");
	var ZIPFile = oFileSystemObject.GetAbsolutePathName(backupFileName);
	var dFolder = oShellApplication.NameSpace(ZIPFile);
	var file = oFileSystemObject.GetAbsolutePathName(BaseFileName);
	var Folder = oShellApplication.Namespace(file);
	var FileObject	= oFileSystemObject.GetFile(BaseFileName + '1Cv8.1CD');
	var FileObject2 = new ActiveXObject("Scripting.FileSystemObject");
	
	// сначала переместим cd-файл базы во временный каталог
	if (FileObject2.FileExists(TempCatalog + '1Cv8.1CD')) {
		FileObject2.DeleteFile(TempCatalog + '1Cv8.1CD');
	}
	try
	{
		FileObject.Move(TempCatalog);
	}
	catch(e)
	{
		retryCount++;
		CollectGarbage();   // предотвращает исключение out of memory
		if (retryCount > 5)
		{
			log(format("Ошибка переноса файла базы во временный каталог (возможно есть активные сеансы к файлу базы): {0}, {1}.", e.name, e.message), true);
			return 1;
		}
		else
		{
			log(format("Попытка переноса файла базы во временный каталог ({0} из 5): {1}, {2}.", retryCount, e.name, e.message));
			return -1;
		}
	}
	
	try
	{
        Folder.CopyHere(dFolder.Items());
        
		
        ret = 0;
   		log(format("Восстановление базы данных проведено: {0}", ret), ret != 0);
	}
	catch(e)
	{
		CollectGarbage();   // предотвращает исключение out of memory
		log(format("Исключение при восстановлении базы из резервной копии: {0}, {1}.", e.name, e.message), true);
		ret = 1;
	}
	if (ret == 0)
	    backupCreated = true;
	    	
   	
	return ret;
}

function WaitUntilFinish()
{
	FileName = BaseFileName+ '\\1Cv8.1CD';

	var FileArchiveObject = new ActiveXObject("Scripting.FileSystemObject");
	FileArchive = FileArchiveObject.GetFile(FileName);
	
	FileSize = FileArchive.size / 1024;
	
	if (FileSize < 5)
		return -1;
	
	return 0;
}

// Восстановление информационной базы из резервной копии
function restoreDB()
{
    if (!backupCreated)
        return 0;
	try
	{
		oFileSystemObject.CopyFile(backupFileName, BaseFileName, true);
		ret = 0;
		log(format("База данных восстановлена из резервной копии", ret), ret != 0);
	}
	catch(e)
	{
		CollectGarbage();   // предотвращает исключение out of memory
		log(format("Исключение при восстановлении базы из резервной копии", e.name, e.message), true);
		ret = -1;
	}
	return ret;
}

function doAllowConnections()
{
	var BlockFilePath = BaseFileName + '1Cv8.cdn';
	if (oFileSystemObject.FileExists(BlockFilePath))
	{
		try
		{
			oFileSystemObject.DeleteFile(BaseFileName + '1Cv8.cdn');
		}
		catch(e)
		{
			log(format("Ошибка при удалении файла блокировок 1Cv8.cdn: {0}, {1}.", e.name, e.message), true);
			return 3;
		}
	}
	return 0;
}

// Первоначальное заполнение информационной базы, разрешение подключений новых соединений, 
// и оповещение о результате обновления
function allowConnections()
{
    var result = doAllowConnections();
    CollectGarbage();   // освобождает соединения с COM-объектом
    return result;
}

function fromUnicode(text){
    var str = "";
    for(var i=0; i<text.length/4; i++ ){
        str = str + String.fromCharCode(text.slice(4*i, 4*i+4));
    }
    str = str.replace(/"/g, '""');
    return str;
}

// Интерактивный запуск "1С:Предприятие"
function runEnterprise()
{
	return runApp(v8exe, format('ENTERPRISE {0} {1}', infoBasePath, infoBaseAuthorization), SW_SHOW, false);
}
#КонецОбласти