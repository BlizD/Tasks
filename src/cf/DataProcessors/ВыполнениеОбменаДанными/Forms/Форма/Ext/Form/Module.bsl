
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	АдресДляВосстановленияПароляУчетнойЗаписи = Параметры.АдресДляВосстановленияПароляУчетнойЗаписи;
	ЗакрытьПриУспешнойСинхронизации           = Параметры.ЗакрытьПриУспешнойСинхронизации;
	УзелИнформационнойБазы                    = Параметры.УзелИнформационнойБазы;
	ЗавершениеРаботыСистемы                   = Параметры.ЗавершениеРаботыСистемы;
	
	Если Не ЗначениеЗаполнено(УзелИнформационнойБазы) Тогда
		
		Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() Тогда
			УзелИнформационнойБазы = ОбменДаннымиСервер.ГлавныйУзел();
		Иначе
			ОбменДаннымиСервер.СообщитьОбОшибке(НСтр("ru = 'Не заданы параметры формы. Форма не может быть открыта.'"), Отказ);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьОшибки = ((ОбменДаннымиСервер.ГлавныйУзел() = УзелИнформационнойБазы) И КонфигурацияИзменена());
	
	// Устанавливаем заголовок формы.
	Заголовок = НСтр("ru = 'Синхронизация данных с ""%1""'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, Строка(УзелИнформационнойБазы));
	
	РольДоступнаДобавлениеИзменениеОбменовДанными = ОбменДаннымиСервер.ЕстьПраваНаАдминистрированиеОбменов();
	РольДоступнаПолныеПрава = Пользователи.ЭтоПолноправныйПользователь();
	
	Элементы.ПанельТребуетсяОбновление.ТекущаяСтраница           = ?(РольДоступнаПолныеПрава, Элементы.ТребуетсяОбновлениеПолныеПрава, Элементы.ТребуетсяОбновлениеОграниченныеПрава);
	Элементы.ТекстТребуетсяОбновлениеПолныеПрава.Заголовок       = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Элементы.ТекстТребуетсяОбновлениеПолныеПрава.Заголовок, УзелИнформационнойБазы);
	Элементы.ТекстТребуетсяОбновлениеОграниченныеПрава.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Элементы.ТекстТребуетсяОбновлениеОграниченныеПрава.Заголовок, УзелИнформационнойБазы);
	
	Элементы.ЗабылиПароль.Видимость = Не ПустаяСтрока(АдресДляВосстановленияПароляУчетнойЗаписи);
	
	СинхронизацияДанныхОтключена = Ложь;
	ВыполнитьОтправкуДанных      = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса")
		И ОбменДаннымиПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		
		МодульАвтономнаяРаботаСлужебный = ОбщегоНазначения.ОбщийМодуль("АвтономнаяРаботаСлужебный");
		НеНапоминатьОДолгойСинхронизации = Не МодульАвтономнаяРаботаСлужебный.ФлагНастройкиВопросаОДолгойСинхронизации();
		
	Иначе
		НеНапоминатьОДолгойСинхронизации = Истина;
	КонецЕсли;
	
	ВидТранспортаСообщений = РегистрыСведений.НастройкиТранспортаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию(УзелИнформационнойБазы);
	
	// При обмене в распределенной информационной базе через веб-сервис всегда переопределяем параметры аутентификации
	// (пользователь и пароль), сохраненные в информационной базе.
	// При обмене через веб-сервис для не-РИБ обменов параметры аутентификации (пароль) переопределяем (запрашиваем)
	// только, если пароль не сохранен в информационной базе.
	
	ИспользоватьТекущегоПользователяДляАутентификации = Ложь;
	ИспользоватьСохраненныеПараметрыАутентификации    = Ложь;
	ПарольСинхронизацииЗадан                          = Ложь;
	WSПароль                                          = "";
	
	Если ВидТранспортаСообщений = Перечисления.ВидыТранспортаСообщенийОбмена.WS Тогда
		
		Если ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(УзелИнформационнойБазы) Тогда
			// Это РИБ и обмен по WS, используем текущего пользователя и пароль из сессии.
			ИспользоватьТекущегоПользователяДляАутентификации = Истина;
			ПарольСинхронизацииЗадан = ОбменДаннымиСервер.ПарольСинхронизацииДанныхЗадан(УзелИнформационнойБазы);
			Если ПарольСинхронизацииЗадан Тогда
				WSПароль = ОбменДаннымиСервер.ПарольСинхронизацииДанных(УзелИнформационнойБазы);
			КонецЕсли;
			
		Иначе
			// Это не РИБ, читаем данные из настроек транспорта.
			НастройкиТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспортаWS(УзелИнформационнойБазы);
			ПарольСинхронизацииЗадан = НастройкиТранспорта.WSЗапомнитьПароль;
			Если ПарольСинхронизацииЗадан Тогда
				ИспользоватьСохраненныеПараметрыАутентификации = Истина;
				WSПароль = НастройкиТранспорта.WSПароль;
			Иначе
				// Используем данные из сессии, только если их нет в регистре.
				ПарольСинхронизацииЗадан = ОбменДаннымиСервер.ПарольСинхронизацииДанныхЗадан(УзелИнформационнойБазы);
				Если ПарольСинхронизацииЗадан Тогда
					ИспользоватьСохраненныеПараметрыАутентификации = Истина;
					WSПароль = ОбменДаннымиСервер.ПарольСинхронизацииДанных(УзелИнформационнойБазы);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	// Устанавливаем текущий сценарий работы обмена.
	Если ЕстьОшибки Тогда
		СценарийКогдаЕстьОшибкиПриНачалеРаботы();
		
	ИначеЕсли ВидТранспортаСообщений <> Перечисления.ВидыТранспортаСообщенийОбмена.WS Тогда
		// Вид транспорта - не веб
		СценарийОбменаОбычный();
		
	Иначе
		
		ВыполнитьОтправкуДанных = РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.ВыполнитьОтправкуДанных(УзелИнформационнойБазы);
		
		Элементы.ГруппаПредупрежденияДолгойСинхронизации.Видимость = Не НеНапоминатьОДолгойСинхронизации;
		Элементы.ГруппаЗапросаПароля.Видимость                     = Не ПарольСинхронизацииЗадан;
		
		Если ПарольСинхронизацииЗадан И НеНапоминатьОДолгойСинхронизации Тогда
			// Сразу на выполнение обмена
			Если ВыполнитьОтправкуДанных Тогда
				СценарийОбменаЧерезВебСервис_ОтправкаПолучениеОтправка();
			Иначе
				СценарийОбменаЧерезВебСервис();
			КонецЕсли;
			
		Иначе
			Если ВыполнитьОтправкуДанных Тогда
				СценарийОбменаЧерезВебСервисСЗапросомПароля_ОтправкаПолучениеОтправка();
			Иначе
				СценарийОбменаЧерезВебСервисСЗапросомПароля();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОбменДаннымиПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		ПроверятьРасхождениеВерсий = Истина;
	КонецЕсли;
	
	КлючСохраненияПоложенияОкна = ?(ПарольСинхронизацииЗадан И НеНапоминатьОДолгойСинхронизации, "ПарольСинхронизацииЗадан", "") + "/" + ?(НеНапоминатьОДолгойСинхронизации, "НеНапоминатьОДолгойСинхронизации", "");
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если ДлительнаяОперация Тогда
		ЗавершитьВыполнениеДлительнойОперации(ФоновоеЗаданиеИдентификатор);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыПовторногоОткрытияФормы)
		И ПараметрыПовторногоОткрытияФормы.Свойство("НоваяНастройкаСинхронизацииДанных") Тогда
		НоваяНастройкаСинхронизацииДанных = ПараметрыПовторногоОткрытияФормы.НоваяНастройкаСинхронизацииДанных;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УзелИнформационнойБазы", НоваяНастройкаСинхронизацииДанных);
		ПараметрыФормы.Вставить("АдресДляВосстановленияПароляУчетнойЗаписи", АдресДляВосстановленияПароляУчетнойЗаписи);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ОбменДаннымиКлиент.ОткрытьФормуПослеЗакрытияТекущей(ЭтотОбъект,
			"Обработка.ВыполнениеОбменаДанными.Форма.Форма", ПараметрыФормы, ПараметрыОткрытия);
	Иначе
		СохранитьФлагВопросаОДолгойСинхронизации();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерейтиВЖурналРегистрации(Команда)
	
	ПараметрыФормы = ПолучитьСтруктуруДанныхОтбораЖурналаРегистрации(УзелИнформационнойБазы);
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОбновление(Команда)
	Закрыть();
	ОбменДаннымиКлиент.УстановитьОбновлениеКонфигурации(ЗавершениеРаботыСистемы);
КонецПроцедуры

&НаКлиенте
Процедура ЗабылиПароль(Команда)
	
	ОбменДаннымиКлиент.ПриОткрытииИнструкцииКакИзменитьПарольСинхронизацииДанных(АдресДляВосстановленияПароляУчетнойЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	ВыполнитьПереходДалее();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСинхронизацию(Команда)
	
	ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПОСТАВЛЯЕМАЯ ЧАСТЬ
////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ВыполнитьПереходДалее()
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода.
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц.
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ВыполнениеОбменаДанными.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов.
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеДалее.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
				
				Отказ = Ложь;
				
				РезультатВычисления = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеНазад.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
				
				Отказ = Ложь;
				
				РезультатВычисления = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		РезультатВычисления = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// Обработчик ОбработкаДлительнойОперации.
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		РезультатВычисления = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			Если ОшибкаРасхожденияВерсийПриПолученииДанных.ЕстьОшибка Тогда
				
				ОбработатьОшибкуРасхожденияВерсий();
				Возврат;
				
			КонецЕсли;
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет новую строку в конец текущей таблицы переходов.
//
// Параметры:
//
//  ПорядковыйНомерПерехода (обязательный) - Число. Порядковый номер перехода, который соответствует текущему шагу
//  перехода.
//  ИмяОсновнойСтраницы (обязательный) - Строка. Имя страницы панели "ПанельОсновная", которая соответствует текущему
//  номеру перехода.
//  ИмяОбработчикаПриОткрытии (необязательный) - Строка. Имя функции-обработчика события открытия текущей страницы
//  помощника.

//  ДлительнаяОперация (необязательный) - Булево. Признак отображения страницы длительной операции.
//  Истина - отображается страница длительной операции; Ложь - отображается обычная страница. Значение по умолчанию -
//           Ложь.
// 
&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(
									ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяОбработчикаПриОткрытии = "",
									ДлительнаяОперация = Ложь,
									ИмяОбработчикаДлительнойОперации = "")
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = "";
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = "";
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры

// Добавляет новую строку в конец текущей таблицы переходов с переходом далее.
//
// Параметры:
//
//  ПорядковыйНомерПерехода (обязательный) - Число. Порядковый номер перехода, который соответствует текущему шагу
//  перехода.
//  ИмяОсновнойСтраницы (обязательный) - Строка. Имя страницы панели "ПанельОсновная", которая соответствует текущему
//  номеру перехода.
//  ИмяОбработчикаПриОткрытии (необязательный) - Строка. Имя функции-обработчика события открытия текущей страницы
//  помощника.
//  ИмяОбработчикаПриПереходеДалее (необязательный) - Строка. Имя функции-обработчика события перехода на следующую
//  страницу помощника.
//  ДлительнаяОперация (необязательный) - Булево. Признак отображения страницы длительной операции.
//  Истина - отображается страница длительной операции; Ложь - отображается обычная страница. Значение по умолчанию -
//           Ложь.
// 
&НаСервере
Процедура ТаблицаПереходовНоваяСтрокаПереходДалее(
									ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "")
	
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = Ложь;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = "";
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕОПРЕДЕЛЯЕМАЯ ЧАСТЬ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбработчикОжиданияДлительнойОперации()
	
	ДлительнаяОперацияЗавершенаСОшибкой = Ложь;
	СообщениеОбОшибке = "";
	
	ПараметрыАутентификации = ?(ИспользоватьСохраненныеПараметрыАутентификации,
		Неопределено,
		Новый Структура("ИспользоватьТекущегоПользователя", ИспользоватьТекущегоПользователяДляАутентификации));
	
	СостояниеОперации = ОбменДаннымиВызовСервера.СостояниеДлительнойОперацииДляУзлаИнформационнойБазы(
		ИдентификаторДлительнойОперации,
		УзелИнформационнойБазы,
		ПараметрыАутентификации,
		СообщениеОбОшибке);
	
	Если СостояниеОперации = "Active" Тогда
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	Иначе
		
		Если СостояниеОперации <> "Completed" Тогда
			
			ДлительнаяОперацияЗавершенаСОшибкой = Истина;
			
			ЕстьОшибки = Истина;
			
		КонецЕсли;
		
		ДлительнаяОперация = Ложь;
		ДлительнаяОперацияЗавершена = Истина;
		
		ВыполнитьПереходДалее();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДанныхОтбораЖурналаРегистрации(УзелИнформационнойБазы)
	
	ОтбираемыеСобытия = Новый Массив;
	ОтбираемыеСобытия.Добавить(ОбменДаннымиСервер.ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных));
	ОтбираемыеСобытия.Добавить(ОбменДаннымиСервер.ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных));
	
	СостоянияОбменовДаннымиЗагрузка = ОбменДаннымиСервер.СостоянияОбменовДанными(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СостоянияОбменовДаннымиВыгрузка = ОбменДаннымиСервер.СостоянияОбменовДанными(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	
	Результат = Новый Структура;
	Результат.Вставить("СобытиеЖурналаРегистрации", ОтбираемыеСобытия);
	Результат.Вставить("ДатаНачала",    Мин(СостоянияОбменовДаннымиЗагрузка.ДатаНачала, СостоянияОбменовДаннымиВыгрузка.ДатаНачала));
	Результат.Вставить("ДатаОкончания", Макс(СостоянияОбменовДаннымиЗагрузка.ДатаОкончания, СостоянияОбменовДаннымиВыгрузка.ДатаОкончания));
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СохранитьФлагВопросаОДолгойСинхронизации()
	
	Настройки = Неопределено;
	Если СохранитьФлагВопросаОДолгойСинхронизацииСервер(Не НеНапоминатьОДолгойСинхронизации, Настройки) Тогда
		ИзмененныеНастройки = Новый Массив;
		ИзмененныеНастройки.Добавить(Настройки);
		Оповестить("ИзмененыНастройкиПользователя", ИзмененныеНастройки, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СохранитьФлагВопросаОДолгойСинхронизацииСервер(Знач Флаг, Настройки = Неопределено)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса")
		И ОбменДаннымиПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		
		МодульАвтономнаяРаботаСлужебный = ОбщегоНазначения.ОбщийМодуль("АвтономнаяРаботаСлужебный");
		НадоСохранять = Флаг <> МодульАвтономнаяРаботаСлужебный.ФлагНастройкиВопросаОДолгойСинхронизации();
		
		Если НадоСохранять Тогда
			МодульАвтономнаяРаботаСлужебный.ФлагНастройкиВопросаОДолгойСинхронизации(Флаг, Настройки);
		КонецЕсли;
		
	Иначе
		НадоСохранять = Ложь;
	КонецЕсли;
	
	Возврат НадоСохранять;
КонецФункции

&НаКлиенте
Процедура ОбработатьОшибкуРасхожденияВерсий()
	
	Элементы.ВыполнениеОбменаДанными.ТекущаяСтраница = Элементы.ЗавершениеОбмена;
	Элементы.СтатусЗавершенияОбмена.ТекущаяСтраница = Элементы.ОшибкаРасхожденияВерсий;
	Элементы.ПанельДействий.ТекущаяСтраница = Элементы.ДействияПродолжитьОтмена;
	Элементы.ПродолжитьСинхронизацию.КнопкаПоУмолчанию = Истина;
	Элементы.ДекорацияОшибкаРасхожденияВерсий.Заголовок = ОшибкаРасхожденияВерсийПриПолученииДанных.ТекстОшибки;
	ПроверятьРасхождениеВерсий = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗавершитьВыполнениеДлительнойОперации(ИдентификаторЗадания)
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ОБРАБОТЧИКОВ СОБЫТИЙ ПЕРЕХОДОВ

// Обмен через обычные каналы связи.

&НаКлиенте
Функция Подключаемый_ОбычнаяЗагрузкаДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	ПроцентВыполнения = 0;
	ДопИнформацияВыполнение = "";
	ПерейтиДалее = Ложь;
	ФоновоеЗаданиеЗапуститьНаКлиенте(1, Отказ);
КонецФункции

&НаКлиенте
Функция Подключаемый_ОбычнаяВыгрузкаДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	ПроцентВыполнения = 0;
	ДопИнформацияВыполнение = "";
	ПерейтиДалее = Ложь;
	ФоновоеЗаданиеЗапуститьНаКлиенте(2, Отказ);
КонецФункции


&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	Результат = ФоновоеЗаданиеПолучитьРезультат();
	Если Результат.ФоновоеЗаданиеВыполнено Тогда
		// Выполнен переход на новый обмен. Необходимо закрыть форму и открыть ее заново с другими параметрами.
		Если Результат.Свойство("ЗакрытьФормуБезусловно") И Результат.ЗакрытьФормуБезусловно Тогда
			ПараметрыПовторногоОткрытияФормы = Результат.ПараметрыПовторногоОткрытияФормы;
			ЭтотОбъект.Закрыть();
		КонецЕсли;
		ПроцентВыполнения = 100;
		ДопИнформацияВыполнение = "";
		Если ОшибкаРасхожденияВерсийПриПолученииДанных <> Неопределено
			И ОшибкаРасхожденияВерсийПриПолученииДанных.ЕстьОшибка = Истина Тогда
			Отказ = Истина;
		Иначе
			ЕстьОшибки = ЕстьОшибки ИЛИ Результат.Отказ;
			Отказ = Ложь;
		КонецЕсли;
		ДлительнаяОперация = Ложь;
		// Переход дальше с задержкой на 1 секунду.
		ПодключитьОбработчикОжидания("ЗапуститьПереходДалее", 1, Истина);
		
	Иначе
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 2, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПереходДалее()
	ПроцентВыполнения = 0;
	ПерейтиДалее = Истина;
	ВыполнитьПереходДалее();
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеЗапуститьНаКлиенте(Действие, Отказ)
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Отказ", Отказ);
	ПараметрыЗадания.Вставить("УзелИнформационнойБазы", УзелИнформационнойБазы);
	Если Действие = 1 Тогда
		// Загрузка.
		ПараметрыЗадания.Вставить("ВыполнятьЗагрузку", Истина);
		ПараметрыЗадания.Вставить("ВыполнятьВыгрузку", Ложь);
	ИначеЕсли Действие = 2 Тогда
		// Выгрузка.
		ПараметрыЗадания.Вставить("ВыполнятьЗагрузку", Ложь);
		ПараметрыЗадания.Вставить("ВыполнятьВыгрузку", Истина);
	КонецЕсли;
	ПараметрыЗадания.Вставить("ВидТранспортаСообщенийОбмена", ВидТранспортаСообщений);
	
	Результат = ФоновоеЗаданиеЗапустить(ПараметрыЗадания, ОшибкаРасхожденияВерсийПриПолученииДанных, ПроверятьРасхождениеВерсий);
	Если Результат.ФоновоеЗаданиеЗапущено Тогда
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 2, Истина);
		ДлительнаяОперация = Истина;
	Иначе
		// Переход далее с задержкой в 1 сек.
		ПроцентВыполнения = 100;
		ДопИнформацияВыполнение = "";
		ПодключитьОбработчикОжидания("ЗапуститьПереходДалее", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеЗапустить(Знач ПараметрыЗадания, ОшибкаРасхожденияВерсийПриПолученииДанных, ПроверятьРасхождениеВерсий)
	Если ПараметрыЗадания.ВыполнятьЗагрузку Тогда
		ОбменДаннымиСервер.ИнициализироватьПараметрыПроверкиРасхожденияВерсий(ПроверятьРасхождениеВерсий);
		НаименованиеЗадания = НСтр("ru = 'Загрузка данных'");
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Выгрузка данных'");
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ФоновоеЗаданиеЗапущено", Ложь);
	Результат.Вставить("Отказ", Ложь);
	// Запуск фонового задания
	Попытка
		РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.ВыполнениеОбменаДанными.ВыполнитьЗапускОбменаДанными",
			ПараметрыЗадания,
			НаименованиеЗадания);
		ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
		ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
		
		Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
			ФоновоеЗаданиеЗагрузитьРезультат(Результат);
			Результат.ФоновоеЗаданиеЗапущено = Ложь;
			// Выполнен переход на новый обмен. Необходимо закрыть форму и открыть ее заново с другими параметрами.
			Если Результат.Свойство("ЗакрытьФормуБезусловно") И Результат.ЗакрытьФормуБезусловно Тогда
				ПараметрыПовторногоОткрытияФормы = Результат.ПараметрыПовторногоОткрытияФормы;
			КонецЕсли;
			Если Результат.Отказ Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		Иначе
			ФоновоеЗаданиеПрочитатьПромежуточныйРезультат();
			Результат.ФоновоеЗаданиеЗапущено = Истина;
		КонецЕсли;

	Исключение
		ЕстьОшибки = Истина;
		Результат.Отказ = Истина;
		ОбменДаннымиВызовСервера.ЗафиксироватьЗавершениеОбменаСОшибкой(
								ПараметрыЗадания.УзелИнформационнойБазы,
								?(ПараметрыЗадания.ВыполнятьЗагрузку,"ЗагрузкаДанных","ВыгрузкаДанных"),
								ТекущаяДатаСеанса(),
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	
	
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ФоновоеЗаданиеПрочитатьПромежуточныйРезультат()
	Прогресс = ДлительныеОперации.ПрочитатьПрогресс(ФоновоеЗаданиеИдентификатор);
	Если Прогресс <> Неопределено Тогда
		ПроцентВыполнения = Прогресс.Процент;
		ДопИнформацияВыполнение = Прогресс.Текст;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеЗагрузитьРезультат(Результат)
	РезультатВыполненияВФоне = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	Если РезультатВыполненияВФоне = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если РезультатВыполненияВФоне.ВыполнятьЗагрузку Тогда
		ОшибкаРасхожденияВерсийПриПолученииДанных = ОбменДаннымиСервер.ОшибкаРасхожденияВерсийПриПолученииДанных();
		МассивСообщений = ПолучитьСообщенияПользователю(Истина);
		Если МассивСообщений = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Количество = МассивСообщений.Количество();
		Если Количество = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Сообщение = МассивСообщений[Количество-1];
		ТекстСообщения = Сообщение.Текст;
		// При необходимости из сообщения удаляется идентификатор подсистемы.
		Если СтрНачинаетсяС(ТекстСообщения, "{ВыполненПереходНаНовыйОбмен}") Тогда
			ДанныеСообщения = ОбщегоНазначения.ЗначениеИзСтрокиXML(ТекстСообщения);
			Если ДанныеСообщения <> Неопределено
				И ТипЗнч(ДанныеСообщения) = Тип("Структура") Тогда
				
				ИмяПланаОбмена = ДанныеСообщения.ИмяПланаОбменаДляПереходаНаНовыйОбмен;
				КодУзлаПланаОбмена = ДанныеСообщения.Код;
				НоваяНастройкаСинхронизацииДанных = ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(КодУзлаПланаОбмена);
				
				Результат.Вставить("ПараметрыПовторногоОткрытияФормы",
					Новый Структура("НоваяНастройкаСинхронизацииДанных", НоваяНастройкаСинхронизацииДанных));
				Результат.ЗакрытьФормуБезусловно = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Результат.Отказ = РезультатВыполненияВФоне.Отказ;
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);

	ФоновоеЗаданиеАдресХранилища = Неопределено;
	ФоновоеЗаданиеИдентификатор  = Неопределено;
КонецПроцедуры

Функция ФоновоеЗаданиеПолучитьРезультат()
	Результат = Новый Структура;
	Результат.Вставить("ФоновоеЗаданиеВыполнено", Ложь);
	Результат.Вставить("Отказ", Ложь);
	Состояние = ОбменДаннымиВызовСервера.СостояниеЗадания(ФоновоеЗаданиеИдентификатор);
	
	Если Состояние = "Активно" Тогда
		ФоновоеЗаданиеПрочитатьПромежуточныйРезультат();
	ИначеЕсли Состояние = "Завершено" Тогда
		Результат.ФоновоеЗаданиеВыполнено = Истина;
		ФоновоеЗаданиеЗагрузитьРезультат(Результат);
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Обмен через Веб-сервис

&НаКлиенте
Функция Подключаемый_ЗапросПароляПользователя_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Элементы.ВыполнитьОбмен.КнопкаПоУмолчанию = Истина;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ЗапросПароляПользователя_ПриПереходеДалее(Отказ)
	
	Если ПустаяСтрока(WSПароль) Тогда
		НСтрока = НСтр("ru = 'Не указан пароль.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "WSПароль",, Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	СохранитьФлагВопросаОДолгойСинхронизации();
КонецФункции

&НаКлиенте
Функция Подключаемый_ОжиданиеПроверкиПодключения_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ПроверитьПодключение();
	
КонецФункции

&НаСервере
Процедура ПроверитьПодключение()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыАутентификации = ?(ИспользоватьСохраненныеПараметрыАутентификации,
		Неопределено,
		Новый Структура("ИспользоватьТекущегоПользователя, Пароль",
			ИспользоватьТекущегоПользователяДляАутентификации, ?(ПарольСинхронизацииЗадан, Неопределено, WSПароль)));
	
	ПараметрыПодключения = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспортаWS(УзелИнформационнойБазы, ПараметрыАутентификации);
	
	Если Не ОбменДаннымиСервер.ЕстьПодключениеККорреспонденту(УзелИнформационнойБазы, ПараметрыПодключения, СообщениеОбОшибкеПользователю) Тогда
		СинхронизацияДанныхОтключена = Истина;
	КонецЕсли;
	
	// Сбрасываем пароль после проверки подключения.
	WSПароль = "";
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_ЗагрузкаДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ИдентификаторФайлаСообщенияВСервисе = "";
	ИдентификаторДлительнойОперации = "";
	
	ЕстьОшибкаРасхожденияВерсий = Ложь;
	
	Если Не СинхронизацияДанныхОтключена Тогда
		
		ПараметрыАутентификации = ?(ИспользоватьСохраненныеПараметрыАутентификации, Неопределено,
			Новый Структура("ИспользоватьТекущегоПользователя", ИспользоватьТекущегоПользователяДляАутентификации));
		
		ЗагрузкаДанных_ОбработкаДлительнойОперации(
			Отказ,
			ПараметрыАутентификации);
		
		Если ОшибкаРасхожденияВерсийПриПолученииДанных.ЕстьОшибка Тогда
			ЕстьОшибкаРасхожденияВерсий = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьОшибкаРасхожденияВерсий Тогда
		Отказ = Истина;
		
	Иначе
		ЕстьОшибки = ЕстьОшибки Или Отказ;
		Отказ = Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗагрузкаДанных_ОбработкаДлительнойОперации(
											Отказ,
											Знач ПараметрыАутентификации)
	
	ДатаНачалаОперации = ТекущаяДатаСеанса();
	
	ОбменДаннымиСервер.ИнициализироватьПараметрыПроверкиРасхожденияВерсий(ПроверятьРасхождениеВерсий);
	
	// Запускаем выполнение обмена.
	
	ПараметрыОбмена = ОбменДаннымиСервер.ПараметрыОбмена();
	ПараметрыОбмена.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.WS;
	ПараметрыОбмена.ВыполнятьЗагрузку = Истина;
	ПараметрыОбмена.ВыполнятьВыгрузку = Ложь;
	
	ПараметрыОбмена.ДлительнаяОперацияРазрешена = Истина;
	ПараметрыОбмена.ДлительнаяОперация          = ДлительнаяОперация;
	ПараметрыОбмена.ИдентификаторОперации       = ИдентификаторДлительнойОперации;
	ПараметрыОбмена.ИдентификаторФайла          = ИдентификаторФайлаСообщенияВСервисе;
	ПараметрыОбмена.ПараметрыАутентификации     = ПараметрыАутентификации;
	
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(УзелИнформационнойБазы, ПараметрыОбмена, Отказ);
	
	ДлительнаяОперация                  = ПараметрыОбмена.ДлительнаяОперация;
	ИдентификаторДлительнойОперации     = ПараметрыОбмена.ИдентификаторОперации;
	ИдентификаторФайлаСообщенияВСервисе = ПараметрыОбмена.ИдентификаторФайла;
	ПараметрыАутентификации             = ПараметрыОбмена.ПараметрыАутентификации;
	
	ОшибкаРасхожденияВерсийПриПолученииДанных = ОбменДаннымиСервер.ОшибкаРасхожденияВерсийПриПолученииДанных();
	
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_ЗагрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ЗагрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперацияЗавершена Тогда
		
		Если ДлительнаяОперацияЗавершенаСОшибкой Тогда
			
			ОбменДаннымиВызовСервера.ЗафиксироватьЗавершениеОбменаСОшибкой(
											УзелИнформационнойБазы,
											"ЗагрузкаДанных",
											ДатаНачалаОперации,
											СообщениеОбОшибке);
			
		Иначе
			
			ПараметрыАутентификации = ?(ИспользоватьСохраненныеПараметрыАутентификации,
				Неопределено,
				Новый Структура("ИспользоватьТекущегоПользователя", ИспользоватьТекущегоПользователяДляАутентификации));
			
			ОбменДаннымиВызовСервера.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЗавершениеДлительнойОперации(
											Ложь,
											УзелИнформационнойБазы,
											ИдентификаторФайлаСообщенияВСервисе,
											ДатаНачалаОперации,
											ПараметрыАутентификации);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ВыгрузкаДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ИдентификаторФайлаСообщенияВСервисе = "";
	ИдентификаторДлительнойОперации = "";
	
	Если Не СинхронизацияДанныхОтключена Тогда
		
		ПараметрыАутентификации = ?(ИспользоватьСохраненныеПараметрыАутентификации,
			Неопределено,
			Новый Структура("ИспользоватьТекущегоПользователя", ИспользоватьТекущегоПользователяДляАутентификации));
		
		ВыгрузкаДанных_ОбработкаДлительнойОперации(
												Отказ,
												УзелИнформационнойБазы,
												ДлительнаяОперация,
												ИдентификаторДлительнойОперации,
												ИдентификаторФайлаСообщенияВСервисе,
												ДатаНачалаОперации,
												ПараметрыАутентификации);
		
	КонецЕсли;
	
	ЕстьОшибки = ЕстьОшибки ИЛИ Отказ;
	
	Отказ = Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВыгрузкаДанных_ОбработкаДлительнойОперации(
											Отказ,
											Знач УзелИнформационнойБазы,
											ДлительнаяОперация,
											ИдентификаторОперации,
											ИдентификаторФайла,
											ДатаНачалаОперации,
											Знач ПараметрыАутентификации)
	
	ДатаНачалаОперации = ТекущаяДатаСеанса();
	
	// Запускаем выполнение обмена.
	ПараметрыОбмена = ОбменДаннымиСервер.ПараметрыОбмена();
	ПараметрыОбмена.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.WS;
	ПараметрыОбмена.ВыполнятьЗагрузку = Ложь;
	ПараметрыОбмена.ВыполнятьВыгрузку = Истина;
	
	ПараметрыОбмена.ДлительнаяОперацияРазрешена = Истина;
	ПараметрыОбмена.ДлительнаяОперация          = ДлительнаяОперация;
	ПараметрыОбмена.ИдентификаторОперации       = ИдентификаторОперации;
	ПараметрыОбмена.ИдентификаторФайла          = ИдентификаторФайла;
	ПараметрыОбмена.ПараметрыАутентификации     = ПараметрыАутентификации;
	
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(УзелИнформационнойБазы, ПараметрыОбмена, Отказ);
	
	ДлительнаяОперация      = ПараметрыОбмена.ДлительнаяОперация;
	ИдентификаторОперации   = ПараметрыОбмена.ИдентификаторОперации;
	ИдентификаторФайла      = ПараметрыОбмена.ИдентификаторФайла;
	ПараметрыАутентификации = ПараметрыОбмена.ПараметрыАутентификации;
	
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_ВыгрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ВыгрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперацияЗавершена Тогда
		
		Если ДлительнаяОперацияЗавершенаСОшибкой Тогда
			
			ОбменДаннымиВызовСервера.ЗафиксироватьЗавершениеОбменаСОшибкой(
											УзелИнформационнойБазы,
											"ВыгрузкаДанных",
											ДатаНачалаОперации,
											СообщениеОбОшибке);
			
		Иначе
			
			ОбменДаннымиВызовСервера.ЗафиксироватьВыполнениеВыгрузкиДанныхВРежимеДлительнойОперации(
											УзелИнформационнойБазы,
											ДатаНачалаОперации);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

//

&НаКлиенте
Функция Подключаемый_ЗавершениеОбмена_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Элементы.ПанельДействий.ТекущаяСтраница = Элементы.ДействияЗакрыть;
	Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
	
	СтраницаОбменЗавершенСОшибкой = ?(РольДоступнаДобавлениеИзменениеОбменовДанными,
				Элементы.ОбменЗавершенСОшибкойДляАдминистратора,
				Элементы.ОбменЗавершенСОшибкой);
	
	Если СинхронизацияДанныхОтключена Тогда
		
		Элементы.СтатусЗавершенияОбмена.ТекущаяСтраница = Элементы.ОбменЗавершенСОшибкойПодключения;
		
	ИначеЕсли ЕстьОшибки Тогда
		
		Если ТребуетсяОбновление Или ОбменДаннымиВызовСервера.ТребуетсяУстановкаОбновления() Тогда
			Если РольДоступнаПолныеПрава Тогда 
				Элементы.ПанельДействий.ТекущаяСтраница = Элементы.ДействияУстановитьЗакрыть;
				Элементы.УстановитьОбновление.КнопкаПоУмолчанию = Истина;
			КонецЕсли;
			Элементы.СтатусЗавершенияОбмена.ТекущаяСтраница = Элементы.ТребуетсяОбновление;
		Иначе
			Элементы.СтатусЗавершенияОбмена.ТекущаяСтраница = СтраницаОбменЗавершенСОшибкой;
		КонецЕсли;
		
	Иначе
		
		Элементы.СтатусЗавершенияОбмена.ТекущаяСтраница = Элементы.ОбменЗавершенУспешно;
		
	КонецЕсли;
	
	// Обновляем все открытые динамические списки.
	ОбменДаннымиКлиент.ОбновитьВсеОткрытыеДинамическиеСписки();
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ЗавершениеОбмена_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ПерейтиДалее = Ложь;
	
	Оповестить("ВыполненОбменДанными");
	
	Если ЗакрытьПриУспешнойСинхронизации
		И Не СинхронизацияДанныхОтключена
		И Не ЕстьОшибки Тогда
		
		Закрыть();
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ИНИЦИАЛИЗАЦИИ ПЕРЕХОДОВ

&НаСервере
Процедура СценарийОбменаОбычный()
	
	ТаблицаПереходов.Очистить();
	ТаблицаПереходовНоваяСтрока(1, "ОжиданиеСинхронизацииДанныхПрогрессБарЗагрузка",, Истина, "ОбычнаяЗагрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(2, "ОжиданиеСинхронизацииДанныхПрогрессБарВыгрузка",, Истина, "ОбычнаяВыгрузкаДанных_ОбработкаДлительнойОперации");
	
	ТаблицаПереходовНоваяСтрока(3, "ЗавершениеОбмена", "ЗавершениеОбмена_ПриОткрытии", Истина, "ЗавершениеОбмена_ОбработкаДлительнойОперации");
	
КонецПроцедуры

&НаСервере
Процедура СценарийОбменаЧерезВебСервис()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "ОжиданиеСинхронизацииДанных",, Истина, "ОжиданиеПроверкиПодключения_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(2, "ОжиданиеСинхронизацииДанных",, Истина, "ЗагрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(3, "ОжиданиеСинхронизацииДанных",, Истина, "ЗагрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(4, "ОжиданиеСинхронизацииДанных",, Истина, "ЗагрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(5, "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(6, "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(7, "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(8, "ЗавершениеОбмена", "ЗавершениеОбмена_ПриОткрытии", Истина, "ЗавершениеОбмена_ОбработкаДлительнойОперации");
	
КонецПроцедуры

&НаСервере
Процедура СценарийОбменаЧерезВебСервис_ОтправкаПолучениеОтправка()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "ОжиданиеСинхронизацииДанных",, Истина, "ОжиданиеПроверкиПодключения_ОбработкаДлительнойОперации");
	
	// Отправка
	ТаблицаПереходовНоваяСтрока(2, "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(3, "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(4, "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Получение
	ТаблицаПереходовНоваяСтрока(5, "ОжиданиеСинхронизацииДанных",, Истина, "ЗагрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(6, "ОжиданиеСинхронизацииДанных",, Истина, "ЗагрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(7, "ОжиданиеСинхронизацииДанных",, Истина, "ЗагрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Отправка
	ТаблицаПереходовНоваяСтрока(8,  "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(9,  "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(10, "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	ТаблицаПереходовНоваяСтрока(11, "ЗавершениеОбмена", "ЗавершениеОбмена_ПриОткрытии", Истина, "ЗавершениеОбмена_ОбработкаДлительнойОперации");
	
КонецПроцедуры

&НаСервере
Процедура СценарийОбменаЧерезВебСервисСЗапросомПароля()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрокаПереходДалее(1, "ЗапросПароляПользователя", "ЗапросПароляПользователя_ПриОткрытии", "ЗапросПароляПользователя_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрока(2, "ОжиданиеСинхронизацииДанных",, Истина, "ОжиданиеПроверкиПодключения_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(3, "ОжиданиеСинхронизацииДанных",, Истина, "ЗагрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(4, "ОжиданиеСинхронизацииДанных",, Истина, "ЗагрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(5, "ОжиданиеСинхронизацииДанных",, Истина, "ЗагрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(6, "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(7, "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(8, "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(9, "ЗавершениеОбмена", "ЗавершениеОбмена_ПриОткрытии", Истина, "ЗавершениеОбмена_ОбработкаДлительнойОперации");
	
КонецПроцедуры

&НаСервере
Процедура СценарийОбменаЧерезВебСервисСЗапросомПароля_ОтправкаПолучениеОтправка()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрокаПереходДалее(1, "ЗапросПароляПользователя", "ЗапросПароляПользователя_ПриОткрытии", "ЗапросПароляПользователя_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрока(2, "ОжиданиеСинхронизацииДанных",, Истина, "ОжиданиеПроверкиПодключения_ОбработкаДлительнойОперации");
	
	// Отправка
	ТаблицаПереходовНоваяСтрока(3, "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(4, "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(5, "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Получение
	ТаблицаПереходовНоваяСтрока(6, "ОжиданиеСинхронизацииДанных",, Истина, "ЗагрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(7, "ОжиданиеСинхронизацииДанных",, Истина, "ЗагрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(8, "ОжиданиеСинхронизацииДанных",, Истина, "ЗагрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Отправка
	ТаблицаПереходовНоваяСтрока(9,  "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(10, "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(11, "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	ТаблицаПереходовНоваяСтрока(12, "ЗавершениеОбмена", "ЗавершениеОбмена_ПриОткрытии", Истина, "ЗавершениеОбмена_ОбработкаДлительнойОперации");
	
КонецПроцедуры

&НаСервере
Процедура СценарийКогдаЕстьОшибкиПриНачалеРаботы()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "ЗавершениеОбмена", "ЗавершениеОбмена_ПриОткрытии");
	
КонецПроцедуры

#КонецОбласти
