&НаКлиенте
Перем ЗакрытьФормуБезусловно, ПользовательОтветилДаНаВопросОСопоставлении, ПропускатьКонтрольОтказаТекущейСтраницы, ВнешниеРесурсыРазрешены;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Параметризация мастера по имени плана обмена (обязательно).
	Если Не Параметры.Свойство("ИмяПланаОбмена", Объект.ИмяПланаОбмена) И ПустаяСтрока(Объект.ИмяПланаОбмена) Тогда
		
		ВызватьИсключение НСтр("ru='Обработка не предназначена для непосредственного использования.'");
		
	КонецЕсли;
	
	ОбменДаннымиСервер.ПроверитьВозможностьАдминистрированияОбменов();
	
	Если Параметры.Свойство("ДополнительнаяНастройка") Тогда
		Объект.ВариантНастройкиОбмена = Параметры.ДополнительнаяНастройка;
	КонецЕсли;
	
	СтандартныеПодсистемыСервер.УстановитьОтображениеЗаголовковГрупп(ЭтотОбъект);
	
	НастройкаОбменаССервисом = Параметры.Свойство("НастройкаОбменаССервисом");
	
	Если ПолучитьФункциональнуюОпцию("ИспользуютсяПрофилиБезопасности") Тогда
		Объект.СсылкаНового = ПланыОбмена[Объект.ИмяПланаОбмена].ПолучитьСсылку();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Установка значений по умолчанию - общих.
	РасположениеИнформационнойБазы          = "ПодключениеНеДоступно";
	ТипИнформационнойБазы                   = "Серверный";
	ВыполнитьОбменДаннымиСейчас             = Истина;
	ВыполнитьСозданиеНачальногоОбразаСейчас = Истина;
	ВыполнитьИнтерактивныйОбменДаннымиСейчас = Истина;
	
	Объект.EMAILСжиматьФайлИсходящегоСообщения = Истина;
	Объект.FTPСжиматьФайлИсходящегоСообщения   = Истина;
	Объект.FTPСоединениеПорт = 21;
	
	// Значение по умолчанию для вида транспорта сообщений обмена.
	Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
	
	// Выполняем проверку наличия для плана обмена формы создания начального образа.
	ФормаСозданияНачальногоОбразаСуществует = (Метаданные.ПланыОбмена[Объект.ИмяПланаОбмена].Формы.Найти("ФормаСозданияНачальногоОбраза") <> Неопределено);
	
	// Получаем значения по умолчанию для плана обмена.
	МенеджерПланаОбмена = ПланыОбмена[Объект.ИмяПланаОбмена];
	
	
	КраткоеОписание = МенеджерПланаОбмена.КраткаяИнформацияПоОбмену(Объект.ВариантНастройкиОбмена);
	СсылкаНаПодробноеОписание = МенеджерПланаОбмена.ПодробнаяИнформацияПоОбмену(Объект.ВариантНастройкиОбмена);
	
	ИмяФайлаНастроекДляПриемника = МенеджерПланаОбмена.ИмяФайлаНастроекДляПриемника() + ".xml";
	
	ФормаНастройкиУзла = "";
	ФормаНастройкиЗначенийПоУмолчанию = "";
	
	НастройкаОтборовНаУзле    = ОбменДаннымиСервер.НастройкаОтборовНаУзле(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, ФормаНастройкиУзла, Объект.ВариантНастройкиОбмена);
	ЗначенияПоУмолчаниюНаУзле = ОбменДаннымиСервер.ЗначенияПоУмолчаниюНаУзле(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, ФормаНастройкиЗначенийПоУмолчанию, Объект.ВариантНастройкиОбмена);
	ЭтоПланОбменаXDTO = ОбменДаннымиСервер.ЭтоПланОбменаXDTO(Объект.ИмяПланаОбмена);
	
	НастройкиПараметровУчетаПоясняющаяНадпись = МенеджерПланаОбмена.ПояснениеДляНастройкиПараметровУчета();
	
	КонтекстФормыНастройкиУзлов = Новый Структура;
	
	ПредусмотреныНастройкиОтборовНаУзле    = НастройкаОтборовНаУзле.Количество() > 0
		И ОбменДаннымиСервер.ЗначениеНастройкиПланаОбмена(Объект.ИмяПланаОбмена, "ОтображатьНастройкуОтборовНаУзле", Объект.ВариантНастройкиОбмена);
	ПредусмотреныЗначенияПоУмолчаниюНаУзле = ЗначенияПоУмолчаниюНаУзле.Количество() > 0
		И ОбменДаннымиСервер.ЗначениеНастройкиПланаОбмена(Объект.ИмяПланаОбмена, "ОтображатьЗначенияПоУмолчаниюНаУзле", Объект.ВариантНастройкиОбмена);
	
	Элементы.РамкаГруппыОграничений.Видимость = ПредусмотреныНастройкиОтборовНаУзле;
	Элементы.РамкаГруппыОграничений1.Видимость = ПредусмотреныНастройкиОтборовНаУзле;
	Элементы.РамкаГруппыОграничений2.Видимость = ПредусмотреныНастройкиОтборовНаУзле;
	Элементы.РамкаГруппыЗначенийПоУмолчанию.Видимость = ПредусмотреныЗначенияПоУмолчаниюНаУзле;
	Элементы.РамкаГруппыЗначенийПоУмолчанию1.Видимость = ПредусмотреныЗначенияПоУмолчаниюНаУзле;
	Элементы.РамкаГруппыЗначенийПоУмолчанию2.Видимость = ПредусмотреныЗначенияПоУмолчаниюНаУзле;
	Элементы.РамкаГруппыЗначенийПоУмолчанию6.Видимость = ПредусмотреныЗначенияПоУмолчаниюНаУзле;
	
	ОписаниеОграниченийПередачиДанных = ОбменДаннымиСервер.ОписаниеОграниченийПередачиДанных(Объект.ИмяПланаОбмена, НастройкаОтборовНаУзле, ВерсияКонфигурацииКорреспондента, Объект.ВариантНастройкиОбмена);
	ОписаниеЗначенийПоУмолчанию       = ОбменДаннымиСервер.ОписаниеЗначенийПоУмолчанию(Объект.ИмяПланаОбмена, ЗначенияПоУмолчаниюНаУзле, ВерсияКонфигурацииКорреспондента, Объект.ВариантНастройкиОбмена);
	
	ЭтотУзел = МенеджерПланаОбмена.ЭтотУзел();
	
	ИмяФормыСозданияНачальногоОбраза = МенеджерПланаОбмена.ИмяФормыСозданияНачальногоОбраза();
	
	ИспользуемыеТранспортыСообщенийОбмена = ОбменДаннымиПовтИсп.ИспользуемыеТранспортыСообщенийОбмена(ЭтотУзел);
	
	ИспользоватьТранспортСообщенийОбменаEMAIL = (ИспользуемыеТранспортыСообщенийОбмена.Найти(Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL) <> Неопределено);
	ИспользоватьТранспортСообщенийОбменаFILE  = (ИспользуемыеТранспортыСообщенийОбмена.Найти(Перечисления.ВидыТранспортаСообщенийОбмена.FILE) <> Неопределено);
	ИспользоватьТранспортСообщенийОбменаFTP   = (ИспользуемыеТранспортыСообщенийОбмена.Найти(Перечисления.ВидыТранспортаСообщенийОбмена.FTP) <> Неопределено);
	ИспользоватьТранспортСообщенийОбменаCOM   = (ИспользуемыеТранспортыСообщенийОбмена.Найти(Перечисления.ВидыТранспортаСообщенийОбмена.COM) <> Неопределено);
	ИспользоватьТранспортСообщенийОбменаWS    = (ИспользуемыеТранспортыСообщенийОбмена.Найти(Перечисления.ВидыТранспортаСообщенийОбмена.WS) <> Неопределено);
	
	// Получаем другие настройки.
	Объект.ПрефиксИнформационнойБазыИсточника           = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
	Объект.ПрефиксИнформационнойБазыИсточникаУстановлен = ЗначениеЗаполнено(Объект.ПрефиксИнформационнойБазыИсточника);
	
	Если Не Объект.ПрефиксИнформационнойБазыИсточникаУстановлен
		И Не НастройкаОбменаССервисом Тогда
		ОбменДаннымиПереопределяемый.ПриОпределенииПрефиксаИнформационнойБазыПоУмолчанию(Объект.ПрефиксИнформационнойБазыИсточника);
	КонецЕсли;
	
	ВариантРаботыМастера = "НастроитьНовыйОбменДанными";
	
	Если НастройкаОбменаССервисом Тогда
		
		РежимРаботыМастера = "ОбменЧерезВебСервис";
		
	ИначеЕсли ИспользоватьТранспортСообщенийОбменаCOM Тогда
		
		РежимРаботыМастера = "ОбменЧерезВнешнееСоединение";
		
	ИначеЕсли ИспользоватьТранспортСообщенийОбменаWS Тогда
		
		РежимРаботыМастера = "ОбменЧерезВебСервис";
		
	Иначе
		
		РежимРаботыМастера = "ОбменЧерезОбычныеКаналыСвязи";
		
	КонецЕсли;
	
	МетаданныеПланаОбмена = Метаданные.ПланыОбмена[Объект.ИмяПланаОбмена];
	
	СинонимПланаОбмена = ОбменДаннымиСервер.ЗначениеНастройкиПланаОбмена(Объект.ИмяПланаОбмена, "НаименованиеКонфигурацииКорреспондента", Объект.ВариантНастройкиОбмена);
	Заголовок = ОбменДаннымиСервер.ЗначениеНастройкиПланаОбмена(Объект.ИмяПланаОбмена, "ЗаголовокПомощникаСозданияОбмена", Объект.ВариантНастройкиОбмена);
	
	Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы = ОбменДаннымиПовтИсп.ЭтоПланОбменаРаспределеннойИнформационнойБазы(Объект.ИмяПланаОбмена);
	Объект.ЭтоНастройкаСтандартногоОбмена               = ОбменДаннымиПовтИсп.ЭтоУзелСтандартногоОбменаДанными(ЭтотУзел);
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Объект.ИспользоватьПараметрыТранспортаFILE  = Истина;
	Объект.ИспользоватьПараметрыТранспортаFTP   = Ложь;
	Объект.ИспользоватьПараметрыТранспортаEMAIL = Ложь;
	
	Элементы.НастройкиТранспортаFILE.Доступность  = Объект.ИспользоватьПараметрыТранспортаFILE;
	Элементы.НастройкиТранспортаFTP.Доступность   = Объект.ИспользоватьПараметрыТранспортаFTP;
	Элементы.НастройкиТранспортаEMAIL.Доступность = Объект.ИспользоватьПараметрыТранспортаEMAIL;
	
	Элементы.ИспользоватьПараметрыТранспортаFILE.Видимость = ИспользуемыеТранспортыСообщенийОбмена.Количество() > 1;
	Элементы.ОписаниеМастерИзФайла.Заголовок = СтрЗаменить(Элементы.ОписаниеМастерИзФайла.Заголовок, "%ПрограммаКорреспондент%", СинонимПланаОбмена);
	
	Объект.НаименованиеЭтойБазы = ОбменДаннымиСервер.НаименованиеПредопределенногоУзлаПланаОбмена(Объект.ИмяПланаОбмена);
	ЗаданоНаименованиеЭтойБазы = Не ПустаяСтрока(Объект.НаименованиеЭтойБазы);
	
	Элементы.НаименованиеЭтойБазы.ТолькоПросмотр = ЗаданоНаименованиеЭтойБазы;
	Элементы.НаименованиеЭтойБазы1.ТолькоПросмотр = ЗаданоНаименованиеЭтойБазы;
	
	Если Не ЗаданоНаименованиеЭтойБазы Тогда
		
		Объект.НаименованиеЭтойБазы = ОбменДаннымиПовтИсп.ИмяЭтойИнформационнойБазы();
		
	КонецЕсли;
	
	Элементы.ДекорацияПараметрыПодключенияWS.РасширеннаяПодсказка.Заголовок = СтрЗаменить(
		Элементы.ДекорацияПараметрыПодключенияWS.РасширеннаяПодсказка.Заголовок, "[НедопустимыеСимволы]",
		ОбменДаннымиКлиентСервер.НедопустимыеСимволыВИмениПользователяWSПрокси());
		
	Элементы.ДекорацияПараметрыПодключенияКСервису.РасширеннаяПодсказка.Заголовок = СтрЗаменить(
		Элементы.ДекорацияПараметрыПодключенияКСервису.РасширеннаяПодсказка.Заголовок, "[НедопустимыеСимволы]",
		ОбменДаннымиКлиентСервер.НедопустимыеСимволыВИмениПользователяWSПрокси());
	
	УстановитьВидимостьНаСервере();
	
	// Назначаем значения поясняющим надписям внизу страницы для перехода по кнопке "Далее".
	
	// Поясняющая надпись на странице мастера настроек FILE.
	Если ИспользоватьТранспортСообщенийОбменаFILE Тогда
		
		Если ИспользоватьТранспортСообщенийОбменаFTP Тогда
			
			Элементы.НадписьДалееFILE.Заголовок = НадписьДалееFTP();
			
		ИначеЕсли ИспользоватьТранспортСообщенийОбменаEMAIL Тогда
			
			Элементы.НадписьДалееFILE.Заголовок = НадписьДалееEMAIL();
			
		Иначе
			
			Элементы.НадписьДалееFILE.Заголовок = НадписьДалееНастройки();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Поясняющая надпись на странице мастера настроек FTP.
	Если ИспользоватьТранспортСообщенийОбменаFTP Тогда
		
		Если ИспользоватьТранспортСообщенийОбменаEMAIL Тогда
			
			Элементы.НадписьДалееFTP.Заголовок = НадписьДалееEMAIL();
			
		Иначе
			
			Элементы.НадписьДалееFTP.Заголовок = НадписьДалееНастройки();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Поясняющая надпись на странице мастера настроек EMAIL.
	Если ИспользоватьТранспортСообщенийОбменаEMAIL Тогда
		
		Элементы.НадписьДалееEMAIL.Заголовок = НадписьДалееНастройки();
		
	КонецЕсли;
	
	ЭтоПродолжениеНастройкиВПодчиненномУзлеРИБ = Параметры.Свойство("ЭтоПродолжениеНастройкиВПодчиненномУзлеРИБ");
	
	Если Не ЭтоПродолжениеНастройкиВПодчиненномУзлеРИБ Тогда
		
		Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() Тогда
			
			ИмяПланаОбменаРИБ = ОбменДаннымиСервер.ГлавныйУзел().Метаданные().Имя;
			
			Если Объект.ИмяПланаОбмена = ИмяПланаОбменаРИБ
				И Не Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Получить() Тогда
				
				ЭтоПродолжениеНастройкиВПодчиненномУзлеРИБ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПродолжениеНастройкиВПодчиненномУзлеРИБ Тогда
		
		ОбменДаннымиСервер.ПриПродолженииНастройкиПодчиненногоУзлаРИБ();
		
		ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными";
		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.ВыполнитьЗагрузкуПараметровМастераИзКонстанты(Ложь);
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		
		Элементы.НастройкиТранспортаFILE.Доступность  = Объект.ИспользоватьПараметрыТранспортаFILE;
		Элементы.НастройкиТранспортаFTP.Доступность   = Объект.ИспользоватьПараметрыТранспортаFTP;
		Элементы.НастройкиТранспортаEMAIL.Доступность = Объект.ИспользоватьПараметрыТранспортаEMAIL;
		
		Элементы.ГруппаПереключателяВыбораРежимаРаботыПомощника.Заголовок = НСтр("ru = 'Продолжение настройки синхронизации данных с главным узлом'");
		
		Элементы.ГруппаРезервноеКопирование.Видимость = Ложь;
	КонецЕсли;
	
	ВариантРаботыМастераПриИзмененииНаСервере();
	
	РежимРаботыМастераПриИзмененииНаСервере();
	
	СобытиеЖурналаРегистрацииУстановкаПодключенияКWebСервису = ОбменДаннымиСервер.СобытиеЖурналаРегистрацииУстановкаПодключенияКWebСервису();
	СобытиеЖурналаРегистрацииСозданиеОбменаДанными = ОбменДаннымиСервер.СобытиеЖурналаРегистрацииСозданиеОбменаДанными();
	
	ДлительнаяОперация = Ложь;
	ПредопределенноеРасписаниеОбменаДанными = "КаждыйЧас";
	РасписаниеВыполненияОбменаДанными = ПредопределенноеРасписаниеКаждыйЧас();
	ПредставлениеПользовательскогоОписания = Строка(РасписаниеВыполненияОбменаДанными);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		Элементы.ПараметрыДоступаВИнтернет.Видимость = Истина;
		Элементы.ПараметрыДоступаВИнтернет1.Видимость = Истина;
		Элементы.ПараметрыДоступаВИнтернет2.Видимость = Истина;
	Иначе
		Элементы.ПараметрыДоступаВИнтернет.Видимость = Ложь;
		Элементы.ПараметрыДоступаВИнтернет1.Видимость = Ложь;
		Элементы.ПараметрыДоступаВИнтернет2.Видимость = Ложь;
	КонецЕсли;
	
	Объект.НаименованиеВторойБазы = НаименованиеВторойБазы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОбщегоНазначенияКлиент.ПредлагатьСоздаватьРезервныеКопии() Тогда
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Перед настройкой синхронизации рекомендуется сделать <a href = %1 >резервную копию данных</a>.'"),
			"СоздатьРезервнуюКопию");
		
		ФорматированнаяСтрока = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(Текст);
		
		Элементы.НадписьРезервноеКопирование.Заголовок       = ФорматированнаяСтрока;
		Элементы.НадписьРезервноеКопированиеСервис.Заголовок = ФорматированнаяСтрока;
		
	КонецЕсли;
	
	Если ЭтоПродолжениеНастройкиВПодчиненномУзлеРИБ Тогда
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	КонецЕсли;

	ЗакрытьФормуБезусловно = Ложь;
	ПользовательОтветилДаНаВопросОСопоставлении = Ложь;
	
	ВнешниеРесурсыРазрешены = Новый Структура;
	ВнешниеРесурсыРазрешены.Вставить("РазрешенCom",  Ложь);
	ВнешниеРесурсыРазрешены.Вставить("РазрешенFILE", Ложь);
	ВнешниеРесурсыРазрешены.Вставить("РазрешенFTP",  Ложь);
	ВнешниеРесурсыРазрешены.Вставить("РазрешенWS",   Ложь);
	
	АутентификацияОперационнойСистемыПриИзменении();
	
	ВариантРаботыИнформационнойБазыПриИзменении();
	
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ДлительнаяОперация Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выполняется создание синхронизации данных.
		                                    |Работа помощника не может быть завершена.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗакрытьФормуБезусловно = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоПродолжениеНастройкиВПодчиненномУзлеРИБ Тогда
		ТекстПредупреждения = НСтр("ru = 'Выполняется настройка подчиненного узла распределенной информационной базы.
		                                 |Отказаться от настройки и использовать значения по умолчанию?'");
		
		ОписаниеОповещенияОтказПродолженияРИБ = Новый ОписаниеОповещения("ОписаниеОповещенияОтказОтПродолженияРИБ", ЭтотОбъект);
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(ЭтотОбъект, Отказ, ТекстПредупреждения, "ЗакрытьФормуБезПредупреждения", ОписаниеОповещенияОтказПродолженияРИБ);
		
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Отменить настройку синхронизации и выйти из помощника?'");
	ОписаниеОповещенияЗакрыть = Новый ОписаниеОповещения("УдалитьНастройкуОбменаДанными", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(ЭтотОбъект, Отказ, ТекстПредупреждения, "ЗакрытьФормуБезПредупреждения", ОписаниеОповещенияЗакрыть);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Оповестить("ЗакрытаФормаПомощникаСозданияОбменаДанными");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытиеФормыСопоставленияОбъектов" Тогда
		
		Отказ = Ложь;
		
		Состояние(НСтр("ru = 'Выполняется сбор информации сопоставления...'"));
		
		ОбновитьДанныеСтатистикиСопоставленияНаСервере(Отказ, Параметр);
		
		Если Отказ Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'При получении информации статистики возникли ошибки.'"));
		Иначе
			
			РазвернутьДеревоИнформацииСтатистики(Параметр.КлючУникальности);
			
			Состояние(НСтр("ru = 'Сбор информации завершен'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераНачало

&НаКлиенте
Процедура ИмяФайлаНастроекОбменаДаннымиДляЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("Фильтр", НСтр("ru = 'Файл настроек синхронизации данных (*.xml)'") + "|*.xml" );
	
	Оповещение = Новый ОписаниеОповещения("ЗавершениеВыбораФайлаНастроекОбменаДаннымиДляЗагрузки", ЭтотОбъект);
	ОбменДаннымиКлиент.ВыбратьИПередатьФайлНаСервер(Оповещение, НастройкиДиалога, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНастроекОбменаДаннымиДляЗагрузкиПриИзменении(Элемент)
	
	ФайлНастроекОбменаДаннымиУспешноЗагружен = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРаботыМастераВручнуюПриИзменении(Элемент)
	
	ВариантРаботыМастераПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРаботыМастераИзФайлаПриИзменении(Элемент)
	
	ВариантРаботыМастераПриИзмененииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераСозданиеОбменаДаннымиУспешноЗавершено

&НаКлиенте
Процедура ПредопределенноеРасписаниеОбменаДаннымиПриИзменении(Элемент)
	
	ПредопределенноеРасписаниеОбменаДаннымиПриИзмененииЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнятьОбменДаннымиАвтоматическиПриИзменении(Элемент)
	
	ВыполнятьОбменДаннымиАвтоматическиПриИзмененииЗначения();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераВыборРежимаРаботыПомощника

&НаКлиенте
Процедура РежимРаботыМастераПриИзменении(Элемент)
	
	РежимРаботыМастераПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура COMКаталогИнформационнойБазыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ОбработчикВыбораФайловогоКаталога(Объект, "COMКаталогИнформационнойБазы", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура COMКаталогИнформационнойБазыОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ОбработчикОткрытияФайлаИлиКаталога(Объект, "COMКаталогИнформационнойБазы", СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура COMВариантРаботыИнформационнойБазыПриИзменении(Элемент)
	
	ВариантРаботыИнформационнойБазыПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипАутентификацииПриИзменении(Элемент)
	
	АутентификацияОперационнойСистемыПриИзменении();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераЗаданиеПараметровТранспортаFILE

&НаКлиенте
Процедура FILEКаталогОбменаИнформациейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ИнформационнаяБазаФайловая Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиКлиент.ОбработчикВыбораФайловогоКаталога(Объект, "FILEКаталогОбменаИнформацией", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура FILEКаталогОбменаИнформациейОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ОбработчикОткрытияФайлаИлиКаталога(Объект, "FILEКаталогОбменаИнформацией", СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПараметрыТранспортаFILEПриИзменении(Элемент)
	
	Элементы.НастройкиТранспортаFILE.Доступность = Объект.ИспользоватьПараметрыТранспортаFILE;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераЗаданиеПараметровТранспортаFTP

&НаКлиенте
Процедура ИспользоватьПараметрыТранспортаFTPПриИзменении(Элемент)
	
	Элементы.НастройкиТранспортаFTP.Доступность = Объект.ИспользоватьПараметрыТранспортаFTP;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераЗаданиеПараметровТранспортаEMAIL

&НаКлиенте
Процедура ИспользоватьПараметрыТранспортаEMAILПриИзменении(Элемент)
	
	Элементы.НастройкиТранспортаEMAIL.Доступность = Объект.ИспользоватьПараметрыТранспортаEMAIL;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоИнформацииСтатистики

&НаКлиенте
Процедура ДеревоИнформацииСтатистикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФормуСопоставления();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// Поставляемая часть

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ПользовательОтветилДаНаВопросОСопоставлении = Ложь;
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	ВыполнитьКомандуГотово();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСправка(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть

&НаКлиенте
Процедура ВыполнитьСопоставлениеДанных(Команда)
	
	ОткрытьФормуСопоставления();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуВыгрузкиДанных(Команда)
	
	ТипСоединения = "ВебСервис";
	
	ИмяФормыНастройкиУзла = "ПланОбмена.[ИмяПланаОбмена].Форма.[ФормаНастройкиУзлов]";
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ИмяПланаОбмена]", Объект.ИмяПланаОбмена);
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ФормаНастройкиУзлов]", ФормаНастройкиУзлов);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
	ПараметрыФормы.Вставить("ПараметрыПодключения", СтруктураПараметровПодключенияВнешнегоСоединения(ТипСоединения));
	ПараметрыФормы.Вставить("Настройки", КонтекстФормыНастройкиУзлов);
	ПараметрыФормы.Вставить("ИдентификаторНастройки", Объект.ВариантНастройкиОбмена);
	
	Обработчик = Новый ОписаниеОповещения("ВыполнитьНастройкуВыгрузкиДанныхЗавершение", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму(ИмяФормыНастройкиУзла, ПараметрыФормы, ЭтотОбъект,,,,Обработчик, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуВыгрузкиДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		КонтекстФормыНастройкиУзлов = Результат;
		
		ОписаниеНастроекВыгрузкиДанных = Результат.ОписаниеКонтекста;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОграниченийРегистрацииДанных(Команда)
	
	ИмяФормыНастройкиУзла = "ПланОбмена.[ИмяПланаОбмена].Форма.[ФормаНастройкиУзла]";
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ИмяПланаОбмена]", Объект.ИмяПланаОбмена);
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ФормаНастройкиУзла]", ФормаНастройкиУзла);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияКорреспондента",   ВерсияКонфигурацииКорреспондента);
	ПараметрыФормы.Вставить("НастройкаОтборовНаУзле", НастройкаОтборовНаУзле);
	ПараметрыФормы.Вставить("ИдентификаторНастройки", Объект.ВариантНастройкиОбмена);
	
	Обработчик = Новый ОписаниеОповещения("НастройкаОграниченийРегистрацииДанныхЗавершение", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму(ИмяФормыНастройкиУзла, ПараметрыФормы, ЭтотОбъект,,,,Обработчик, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОграниченийРегистрацииДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Для Каждого НастройкаОтбора Из НастройкаОтборовНаУзле Цикл
			
			НастройкаОтборовНаУзле[НастройкаОтбора.Ключ] = Результат[НастройкаОтбора.Ключ];
			
		КонецЦикла;
		
		// вызов сервера
		ПолучитьОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОграниченийРегистрацииДанныхБазыКорреспондентаЧерезВебСервис(Команда)
	
	НастройкаОграниченийРегистрацииДанныхБазыКорреспондента("ВебСервис");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОграниченийРегистрацииДанныхБазыКорреспондентаЧерезВнешнееСоединение(Команда)
	
	НастройкаОграниченийРегистрацииДанныхБазыКорреспондента("ВнешнееСоединение");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗначенийПоУмолчанию(Команда)
	
	ИмяФормыНастройкиУзла = "ПланОбмена.[ИмяПланаОбмена].Форма.[ФормаНастройкиЗначенийПоУмолчанию]";
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ИмяПланаОбмена]", Объект.ИмяПланаОбмена);
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ФормаНастройкиЗначенийПоУмолчанию]", ФормаНастройкиЗначенийПоУмолчанию);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияКорреспондента",      ВерсияКонфигурацииКорреспондента);
	ПараметрыФормы.Вставить("ЗначенияПоУмолчаниюНаУзле", ЗначенияПоУмолчаниюНаУзле);
	ПараметрыФормы.Вставить("ИдентификаторНастройки",    Объект.ВариантНастройкиОбмена);
	
	Обработчик = Новый ОписаниеОповещения("НастройкаЗначенийПоУмолчаниюЗавершение", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму(ИмяФормыНастройкиУзла, ПараметрыФормы, ЭтотОбъект,,,,Обработчик, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗначенийПоУмолчаниюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Для Каждого Настройка Из ЗначенияПоУмолчаниюНаУзле Цикл
			
			ЗначенияПоУмолчаниюНаУзле[Настройка.Ключ] = Результат[Настройка.Ключ];
			
		КонецЦикла;
		
		// вызов сервера
		ПолучитьОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗначенийПоУмолчаниюБазыКорреспондентаЧерезВебСервис(Команда)
	
	НастройкаЗначенийПоУмолчаниюБазыКорреспондента("ВебСервис");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗначенийПоУмолчаниюБазыКорреспондентаЧерезВнешнееСоединение(Команда)
	
	НастройкаЗначенийПоУмолчаниюБазыКорреспондента("ВнешнееСоединение");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлНастроекОбменаДанными(Команда)
	
	Перем АдресВременногоХранилища;
	
	Отказ = Ложь;
	
	// вызов сервера
	ВыгрузитьНастройкиОбменаДляПриемника(Отказ, АдресВременногоХранилища);
	
	Если Отказ Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'При сохранении файла настроек синхронизации данных возникли ошибки.'"));
		
	Иначе
		
		#Если ВебКлиент Тогда
			
			ПолучитьФайл(АдресВременногоХранилища, ИмяФайлаНастроекДляПриемника, Истина);
			
			Объект.ИмяФайлаНастроекСинхронизацииДанных = ИмяФайлаНастроекДляПриемника;
			
		#Иначе
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
			ТекстПредложения = НСтр("ru = 'Для открытия каталога необходимо необходимо установить расширение работы с файлами.'");
			Оповещение = Новый ОписаниеОповещения("ПослеПроверкиРасширенияРаботыСФайлами", ЭтотОбъект, ДополнительныеПараметры);
			ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстПредложения);
			
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ПослеПроверкиРасширенияРаботыСФайлами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		
		Диалог.Заголовок      = НСтр("ru = 'Укажите имя файла настроек синхронизации данных'");
		Диалог.Расширение     = "xml";
		Диалог.Фильтр         = "Файл настроек синхронизации данных(*.xml)|*.xml";
		Диалог.ПолноеИмяФайла = ИмяФайлаНастроекДляПриемника;
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораФайла", ЭтотОбъект, ДополнительныеПараметры);
		Диалог.Показать(Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ВыбранныеФайлы.Количество() = 1 Тогда
		Объект.ИмяФайлаНастроекСинхронизацииДанных = ВыбранныеФайлы[0];
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДополнительныеПараметры.АдресВременногоХранилища);
		УдалитьИзВременногоХранилища(ДополнительныеПараметры.АдресВременногоХранилища);
		ДвоичныеДанные.Записать(Объект.ИмяФайлаНастроекСинхронизацииДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеFILE(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПроверитьПодключениеFILEЗавершение", ЭтотОбъект);
	Запросы = СоздатьЗапросНаИспользованиеВнешнихРесурсов(Объект, Ложь, Истина, Ложь, Ложь);
	РаботаВБезопасномРежимеКлиент.ПрименитьЗапросыНаИспользованиеВнешнихРесурсов(Запросы, ЭтотОбъект, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеFTP(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПроверитьПодключениеFTPЗавершение", ЭтотОбъект);
	Запросы = СоздатьЗапросНаИспользованиеВнешнихРесурсов(Объект, Ложь, Ложь, Ложь, Истина);
	РаботаВБезопасномРежимеКлиент.ПрименитьЗапросыНаИспользованиеВнешнихРесурсов(Запросы, ЭтотОбъект, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеEMAIL(Команда)
	
	ПроверитьПодключение("EMAIL");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеCOM(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПроверитьПодключениеCOMЗавершение", ЭтотОбъект);
	Запросы = СоздатьЗапросНаИспользованиеВнешнихРесурсов(Объект, Истина, Ложь, Ложь, Ложь);
	РаботаВБезопасномРежимеКлиент.ПрименитьЗапросыНаИспользованиеВнешнихРесурсов(Запросы, ЭтотОбъект, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеWS(Команда)
	
	Отказ = Ложь;
	ПроверитьКорректностьПараметровПодключенияWS(Отказ);
	
	Если Не Отказ Тогда
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПроверитьПодключениеWSЗавершение", ЭтотОбъект);
		Запросы = СоздатьЗапросНаИспользованиеВнешнихРесурсов(Объект, Ложь, Ложь, Истина, Ложь);
		РаботаВБезопасномРежимеКлиент.ПрименитьЗапросыНаИспользованиеВнешнихРесурсов(Запросы, ЭтотОбъект, ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПользовательскоеРасписание(Команда)
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеВыполненияОбменаДанными);
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПользовательскоеРасписаниеЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПользовательскоеРасписаниеЗавершение(Расписание) Экспорт
	
	Если Расписание <> Неопределено Тогда
		
		РасписаниеВыполненияОбменаДанными = Расписание;
		
		ПредставлениеПользовательскогоОписания = Строка(РасписаниеВыполненияОбменаДанными);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробноеОписание(Команда)
	
	ОбменДаннымиКлиент.ОткрытьПодробноеОписаниеСинхронизации(СсылкаНаПодробноеОписание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДоступаВИнтернет(Команда)
	
	ОбменДаннымиКлиент.ОткрытьФормуПараметровПроксиСервера();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьКомандуГотово(Знач ЗакрыватьФорму = Истина)
	
	Отказ = Ложь;
	Если РежимРаботыМастера = "ОбменЧерезВнешнееСоединение" Тогда
		ЗавершениеНастройкиОбменаЧерезВнешнееСоединение(ЗакрыватьФорму);
		
	ИначеЕсли РежимРаботыМастера = "ОбменЧерезВебСервис" Тогда
		ЗавершениеНастройкиОбменаЧерезВебСервис();
		
	ИначеЕсли РежимРаботыМастера = "ОбменЧерезОбычныеКаналыСвязи" Тогда
		Если ВариантРаботыМастера = "НастроитьНовыйОбменДанными" Тогда
			ЗавершениеПервогоЭтапаНастройкиОбменаЧерезОбычныеКаналыСвязи(Отказ);
			Если ВыполнитьОбменДаннымиСейчас 
				И ВыполнитьСозданиеНачальногоОбразаСейчас
				И ВыполнитьИнтерактивныйОбменДаннымиСейчас Тогда
				// Надо дождаться окончания выгрузки и только потом закрывать форму.
				Возврат;
			КонецЕсли;
		ИначеЕсли ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными" Тогда
			ЗавершениеВторогоЭтапаНастройкиОбменаЧерезОбычныеКаналыСвязи(Отказ, ЗакрыватьФорму);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьИнтерфейс();
	
	Если ЗакрыватьФорму Тогда
		ЗакрытьФормуБезусловно = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРезервноеКопированиеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СоздатьРезервнуюКопию" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОбщегоНазначенияКлиент.ПредложитьПользователюСоздатьРезервнуюКопию();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредопределенноеРасписаниеОбменаДаннымиПриИзмененииЗначения()
	
	ИспользоватьПользовательскоеРасписание = (ПредопределенноеРасписаниеОбменаДанными = "ДругоеРасписание");
	
	Элементы.СтраницыПользовательскогоРасписания.ТекущаяСтраница = ?(ИспользоватьПользовательскоеРасписание,
						Элементы.СтраницаПользовательскогоРасписания,
						Элементы.ПустаяСтраницаПользовательскогоРасписания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнятьОбменДаннымиАвтоматическиПриИзмененииЗначения()
	
	Элементы.СтраницыПредопределенногоРасписания.ТекущаяСтраница = ?(ВыполнятьОбменДаннымиАвтоматически,
						Элементы.СтраницаПредопределенногоРасписания,
						Элементы.НедоступнаяСтраницаПредопределенногоРасписания);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 1 Тогда
		
		ПорядковыйНомерПерехода = 1;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода.
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц.
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	// Устанавливаем текущую кнопку по умолчанию.
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов.
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// Обработчик ПриПереходеДалее.
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			РезультатВычисления = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// Обработчик ПриПереходеНазад.
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			РезультатВычисления = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		РезультатВычисления = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// Обработчик ОбработкаДлительнойОперации.
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		РезультатВычисления = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПроверитьПодключениеCOMНаСервере()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("COMАутентификацияОперационнойСистемы");
	СтруктураНастроек.Вставить("COMВариантРаботыИнформационнойБазы");
	СтруктураНастроек.Вставить("COMИмяИнформационнойБазыНаСервере1СПредприятия");
	СтруктураНастроек.Вставить("COMИмяПользователя");
	СтруктураНастроек.Вставить("COMИмяСервера1СПредприятия");
	СтруктураНастроек.Вставить("COMКаталогИнформационнойБазы");
	СтруктураНастроек.Вставить("COMПарольПользователя");
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, Объект);
	
	Результат = ОбменДаннымиСервер.УстановитьВнешнееСоединениеСБазой(СтруктураНастроек);
	Если Результат.Соединение = Неопределено Тогда
		Возврат Результат.КраткоеОписаниеОшибки;
	КонецЕсли;
	Возврат ""; // успешно
	
КонецФункции

&НаКлиенте
Процедура РазрешитьРесурсЗавершение(Результат, ИмяРазрешения) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ВнешниеРесурсыРазрешены[ИмяРазрешения] = Истина;
		ИзменитьПорядковыйНомерПерехода(+1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьЗапросНаИспользованиеВнешнихРесурсов(Знач Объект, ЗапрашиватьCOM,
	ЗапрашиватьFILE, ЗапрашиватьWS, ЗапрашиватьFTP)
	
	Запись = РегистрыСведений.НастройкиТранспортаОбмена.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, Объект);
	Запись.Узел = Объект.СсылкаНового;
	
	ЗапросыРазрешений = Новый Массив;
	
	РегистрыСведений.НастройкиТранспортаОбмена.ЗапросНаИспользованиеВнешнихРесурсов(ЗапросыРазрешений,
		Запись, ЗапрашиватьCOM, ЗапрашиватьFILE, ЗапрашиватьWS, ЗапрашиватьFTP);
	Возврат ЗапросыРазрешений;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПодключениеCOMЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ОчиститьСообщения();
		
		Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
			
			ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель(Ложь);
			
		КонецЕсли;
		
		ТекстСообщения = ПроверитьПодключениеCOMНаСервере();
		Если ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = НСтр("ru = 'Проверка подключения успешно завершена.'");
		КонецЕсли;
		ПоказатьПредупреждение(,ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеFILEЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ПроверитьПодключение("FILE");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеFTPЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ПроверитьПодключение("FTP");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеWSЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		Отказ = Ложь;
		
		ПроверитьПодключениеWSНаКлиенте(Отказ);
		
		Если Не Отказ Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Подключение успешно установлено.'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НаименованиеВторойБазы()
	
	НаименованиеВторойБазы = "";
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	СозданныеОбмены.Ссылка
		|ИЗ
		|	ПланОбмена.%ИмяПланаОбмена% КАК СозданныеОбмены
		|ГДЕ
		|	СозданныеОбмены.Наименование = &Наименование
		|	И НЕ СозданныеОбмены.ЭтотУзел";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяПланаОбмена%", Объект.ИмяПланаОбмена);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Наименование", СокрЛП(СинонимПланаОбмена));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		НаименованиеВторойБазы = СинонимПланаОбмена;
	Иначе
		НомерНастраиваемогоОбмена = РезультатЗапроса.Количество() + 1;
		НаименованиеВторойБазы = СокрЛП(СинонимПланаОбмена) + " (" + НомерНастраиваемогоОбмена +")";
	КонецЕсли;
	
	Возврат НаименованиеВторойБазы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики ожидания

&НаКлиенте
Процедура ОбработчикОжиданияДлительнойОперации()
	
	СтрокаСообщенияОбОшибке = "";
	
	СостояниеОперации = ОбменДаннымиВызовСервера.СостояниеДлительнойОперации(ИдентификаторДлительнойОперации,
																		Объект.WSURLВебСервиса,
																		Объект.WSИмяПользователя,
																		Объект.WSПароль,
																		СтрокаСообщенияОбОшибке);
	
	Если СостояниеОперации = "Active" Тогда
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	ИначеЕсли СостояниеОперации = "Completed" Тогда
		
		ДлительнаяОперация = Ложь;
		ДлительнаяОперацияЗавершена = Истина;
		
		КомандаДалее(Неопределено);
		
	Иначе // Failed, Canceled
		
		ЗаписатьОшибкуВЖурналРегистрации(СтрокаСообщенияОбОшибке, СобытиеЖурналаРегистрацииСозданиеОбменаДанными);
		
		ДлительнаяОперация = Ложь;
		
		КомандаНазад(Неопределено);
		
		ТекстВопроса = НСтр("ru = 'При создании синхронизации данных возникли ошибки.
							|Перейти в журнал регистрации?'");
		
		ПредложитьПерейтиВЖурналРегистрации(ТекстВопроса, СобытиеЖурналаРегистрацииСозданиеОбменаДанными);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияФоновогоЗадания()
	
	Состояние = ОбменДаннымиВызовСервера.СостояниеЗадания(ИдентификаторДлительнойОперации);
	
	Если Состояние = "Активно" Тогда
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияФоновогоЗадания", 5, Истина);
		
	ИначеЕсли Состояние = "Завершено" Тогда
		
		ДлительнаяОперация = Ложь;
		ДлительнаяОперацияЗавершена = Истина;
		
		КомандаДалее(Неопределено);

	Иначе
		
		ДлительнаяОперация = Ложь;
		
		КомандаНазад(Неопределено);
		
		ТекстВопроса = НСтр("ru = 'При создании синхронизации данных возникли ошибки.
							|Перейти в журнал регистрации?'");
		
		ПредложитьПерейтиВЖурналРегистрации(ТекстВопроса, СобытиеЖурналаРегистрацииСозданиеОбменаДанными);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прикладные служебные процедуры и функции.

&НаСервере
Процедура НастроитьНовыйОбменДаннымиНаСервере(Отказ, НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле)
	
	Объект.ВариантРаботыМастера = ВариантРаботыМастера;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ВыполнитьДействияПоНастройкеНовогоОбменаДанными(Отказ, НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьНовыйОбменДаннымиНаСервереЧерезВнешнееСоединение(Отказ, НастройкаОтборовНаУзлеБазыКорреспондента, ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента)
	
	Объект.ВариантРаботыМастера = ВариантРаботыМастера;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ВыполнитьДействияПоНастройкеНовогоОбменаДаннымиЧерезВнешнееСоединение(Отказ, НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле, НастройкаОтборовНаУзлеБазыКорреспондента, ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Элементы.ВыполнитьИнтерактивныйОбменДаннымиСейчас.Заголовок = СтрЗаменить(Элементы.ВыполнитьИнтерактивныйОбменДаннымиСейчас.Заголовок, "%Программа%", СинонимПланаОбмена);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьНовыйОбменДаннымиНаСервереЧерезВебСервис(Отказ)
	
	Объект.ВариантРаботыМастера = ВариантРаботыМастера;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ВыполнитьДействияПоНастройкеНовогоОбменаДаннымиЧерезВебСервисВДвухБазах(Отказ,
																		КонтекстФормыНастройкиУзлов,
																		ДлительнаяОперация,
																		ИдентификаторДлительнойОперации);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиОбменаДанными(Отказ)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ОбновитьНастройкиОбменаДанными(Отказ,
												ЗначенияПоУмолчаниюНаУзле,
												ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента,
												ДлительнаяОперация,
												ИдентификаторДлительнойОперации);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНаСервере()
	
	Элементы.ПояснениеВыбораКаталогаОбменаИнформациейНаСервере.Видимость = Не ИнформационнаяБазаФайловая;
	Элементы.FILEКаталогОбменаИнформацией.КнопкаВыбора = ИнформационнаяБазаФайловая;
	
	Элементы.ПрефиксИнформационнойБазыИсточника.Видимость = Не Объект.ПрефиксИнформационнойБазыИсточникаУстановлен;
	Элементы.ПрефиксИнформационнойБазыИсточника1.Видимость = Не Объект.ПрефиксИнформационнойБазыИсточникаУстановлен;
	Элементы.ПрефиксИнформационнойБазыПриемника.Видимость = Ложь;
	
	Элементы.ПрефиксИнформационнойБазыИсточникаОбменЧерезВебСервис.Видимость = Не Объект.ПрефиксИнформационнойБазыИсточникаУстановлен;
	Элементы.ПрефиксИнформационнойБазыИсточникаОбменЧерезВебСервис.ТолькоПросмотр = Объект.ПрефиксИнформационнойБазыИсточникаУстановлен;
	
	Элементы.ПрефиксИнформационнойБазыИсточникаОбменССервисом.ТолькоПросмотр = Объект.ПрефиксИнформационнойБазыИсточникаУстановлен;
	Элементы.ПрефиксИнформационнойБазыПриемникаОбменССервисом.ТолькоПросмотр = Истина;
	
	Если Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы Тогда
		Элементы.СтраницыОтображенияФинальногоДействия.ТекущаяСтраница = Элементы.СтраницаВыполнитьСозданиеНачальногоОбразаПодчиненногоУзла;
	Иначе
		Элементы.СтраницыОтображенияФинальногоДействия.ТекущаяСтраница = Элементы.СтраницаВыполнитьВыгрузкуДанныхДляСопоставления;
		Элементы.ГруппаПрогрессБарВыгрузка.Видимость = Ложь;
	КонецЕсли;
	//
	Если Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы Тогда
		
		Элементы.ГруппаПереключателяВыбораРежимаРаботыПомощника.Видимость = Ложь;
		
		Элементы.ЗаглушкаПрефикс.Видимость = Ложь;
		Элементы.ПрефиксИнформационнойБазыПриемника1.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		
		Элементы.ГруппаПереключателяВыбораРежимаРаботыПомощника.Заголовок = НСтр("ru = 'Создание начального образа подчиненного узла РИБ'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеРезультатаТранспортСообщений()
	
	Если НастройкаОбменаССервисом Тогда
		
		Результат = НСтр("ru = 'Параметры подключения к приложению в сервисе:
		|%1'");
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Результат, ПолучитьОписаниеНастроекТранспортаОбмена());
		
	Иначе
		
		Результат = Строка(Объект.ВидТранспортаСообщенийОбмена)
			+ НСтр("ru = ', параметры:'") + Символы.ПС
			+ ПолучитьОписаниеНастроекТранспортаОбмена();
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПредставлениеРезультатаОтборыНаУзле()
	
	Возврат ?(ПустаяСтрока(ОписаниеОграниченийПередачиДанных), "", ОписаниеОграниченийПередачиДанных + Символы.ПС + Символы.ПС);
	
КонецФункции

&НаКлиенте
Функция ПредставлениеРезультатаОтборыНаУзлеБазыКорреспондента()
	
	Возврат ?(ПустаяСтрока(ОписаниеОграниченийПередачиДанныхБазыКорреспондента), "", ОписаниеОграниченийПередачиДанныхБазыКорреспондента + Символы.ПС + Символы.ПС);
	
КонецФункции

&НаКлиенте
Функция ПредставлениеРезультатаЗначенияПоУмолчаниюНаУзле()
	
	Возврат ?(ПустаяСтрока(ОписаниеЗначенийПоУмолчанию), "", ОписаниеЗначенийПоУмолчанию + Символы.ПС + Символы.ПС);
	
КонецФункции

&НаКлиенте
Функция ПредставлениеРезультатаЗначенияПоУмолчаниюНаУзлеБазыКорреспондента()
	
	Возврат ?(ПустаяСтрока(ОписаниеЗначенийПоУмолчаниюБазыКорреспондента), "", ОписаниеЗначенийПоУмолчаниюБазыКорреспондента + Символы.ПС + Символы.ПС);
	
КонецФункции

&НаСервере
Процедура ВыгрузитьНастройкиОбменаДляПриемника(Отказ, АдресВременногоХранилища)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ВыполнитьВыгрузкуПараметровМастераВоВременноеХранилище(Отказ, АдресВременногоХранилища);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПараметрыМастера(Отказ, АдресВременногоХранилища)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ВыполнитьЗагрузкуПараметровМастераИзВременногоХранилища(Отказ, АдресВременногоХранилища);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Элементы.НастройкиТранспортаFILE.Доступность  = Объект.ИспользоватьПараметрыТранспортаFILE;
	Элементы.НастройкиТранспортаFTP.Доступность   = Объект.ИспользоватьПараметрыТранспортаFTP;
	Элементы.НастройкиТранспортаEMAIL.Доступность = Объект.ИспользоватьПараметрыТранспортаEMAIL;
	
	Если Не Отказ Тогда
		НастройкиЗачитаны = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле)
	
	ОписаниеОграниченийПередачиДанных = ОбменДаннымиСервер.ОписаниеОграниченийПередачиДанных(Объект.ИмяПланаОбмена, НастройкаОтборовНаУзле, ВерсияКонфигурацииКорреспондента, Объект.ВариантНастройкиОбмена);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзлеБазыКорреспондента)
	
	ОписаниеОграниченийПередачиДанныхБазыКорреспондента = ОбменДаннымиСервер.ОписаниеОграниченийПередачиДанныхБазыКорреспондента(Объект.ИмяПланаОбмена, НастройкаОтборовНаУзлеБазыКорреспондента, ВерсияКонфигурацииКорреспондента, Объект.ВариантНастройкиОбмена);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле)
	
	ОписаниеЗначенийПоУмолчанию = ОбменДаннымиСервер.ОписаниеЗначенийПоУмолчанию(Объект.ИмяПланаОбмена, ЗначенияПоУмолчаниюНаУзле, ВерсияКонфигурацииКорреспондента, Объект.ВариантНастройкиОбмена);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента)
	
	ОписаниеЗначенийПоУмолчаниюБазыКорреспондента = ОбменДаннымиСервер.ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(Объект.ИмяПланаОбмена, ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента, ВерсияКонфигурацииКорреспондента, Объект.ВариантНастройкиОбмена);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеНастроекТранспортаОбмена()
	
	COMВариантРаботыИнформационнойБазы = 0;
	COMАутентификацияОперационнойСистемы = Ложь;
	
	// Возвращаемое значение функции.
	Результат = "";
	
	ПредставленияНастроек = РегистрыСведений.НастройкиТранспортаОбмена.ПредставленияНастроекТранспорта(Объект.ВидТранспортаСообщенийОбмена);
	
	Для Каждого Элемент Из ПредставленияНастроек Цикл
		
		ЗначениеНастройки = Объект[Элемент.Ключ];
		
		Если РежимРаботыМастера = "ОбменЧерезВнешнееСоединение" Тогда
			
			Если Элемент.Ключ = "COMВариантРаботыИнформационнойБазы" Тогда
				
				ЗначениеНастройки = ?(Объект[Элемент.Ключ] = 0, НСтр("ru = 'Файловый'"), НСтр("ru = 'Клиент-серверный'"));
				
				COMВариантРаботыИнформационнойБазы = Объект[Элемент.Ключ];
				
			КонецЕсли;
			
			Если Элемент.Ключ = "COMАутентификацияОперационнойСистемы" Тогда
				
				COMАутентификацияОперационнойСистемы = Объект[Элемент.Ключ];
				
			КонецЕсли;
			
			Если COMВариантРаботыИнформационнойБазы = 0 Тогда
				
				Если    Элемент.Ключ = "COMИмяИнформационнойБазыНаСервере1СПредприятия"
					ИЛИ Элемент.Ключ = "COMИмяСервера1СПредприятия" Тогда
					Продолжить;
				КонецЕсли;
				
			Иначе
				
				Если Элемент.Ключ = "COMКаталогИнформационнойБазы" Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если COMАутентификацияОперационнойСистемы Тогда
				
				Если Элемент.Ключ = "COMИмяПользователя" Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрНайти(ВРег(Элемент.Значение), "ПАРОЛЬ") <> 0 Тогда
			
			Продолжить; // Значения паролей не выводим.
			
		ИначеЕсли  Не ТипЗначения(ЗначениеНастройки, "Число")
				 И Не ТипЗначения(ЗначениеНастройки, "Булево")
				 И Не ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			
			// Если значение настройки не задано, то выводим значение "<пусто>".
			ЗначениеНастройки = НСтр("ru = '<пусто>'");
			
		КонецЕсли;
		
		СтрокаНастройки = "[Представление]: [Значение]"; // Не локализуется
		СтрокаНастройки = СтрЗаменить(СтрокаНастройки, "[Представление]", Элемент.Значение);
		СтрокаНастройки = СтрЗаменить(СтрокаНастройки, "[Значение]", ЗначениеНастройки);
		
		Результат = Результат + СтрокаНастройки + Символы.ПС;
		
	КонецЦикла;
	
	Если ПустаяСтрока(Результат) Тогда
		
		Результат = НСтр("ru = 'Настройки подключения не заданы.'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТипЗначения(Значение, ИмяТипа)
	
	Возврат ТипЗнч(Значение) = Тип(ИмяТипа);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПодключение(ВидТранспорта)
	
	Отказ = Ложь;
	
	ПроверитьПодключениеНаСервере(Отказ, ВидТранспорта);
	
	Если Не Отказ Тогда
		
		Если ВидТранспорта = ПредопределенноеЗначение("Перечисление.ВидыТранспортаСообщенийОбмена.FILE") Тогда
			ТекстПредупреждения = НСтр("ru = 'Запись данных в указанный каталог разрешена.'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Подключение успешно установлено.'");
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеНаСервере(Отказ, ВидТранспорта)
	
	Если ТипЗнч(ВидТранспорта) = Тип("Строка") Тогда
		
		ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена[ВидТранспорта];
		
	КонецЕсли;
	
	ОбменДаннымиСервер.ПроверитьПодключениеОбработкиТранспортаСообщенийОбмена(Отказ, Объект, ВидТранспорта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьПараметровПодключенияWS(Отказ)
	
	Если ПустаяСтрока(Объект.WSURLВебСервиса) Тогда
		
		НСтрока = НСтр("ru = 'Укажите адрес приложения в Интернете.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.WSURLВебСервиса",, Отказ);
		
	ИначеЕсли ПустаяСтрока(Объект.WSИмяПользователя) Тогда
		
		НСтрока = НСтр("ru = 'Укажите имя пользователя.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.WSИмяПользователя",, Отказ);
		
	ИначеЕсли ПустаяСтрока(Объект.WSПароль) Тогда
		
		НСтрока = НСтр("ru = 'Укажите пароль пользователя.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.WSПароль",, Отказ);
		
	Иначе
		
		Попытка
			ОбменДаннымиКлиентСервер.ПроверитьКорректностьФорматаАдресаWSПрокси(Объект.WSURLВебСервиса);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , "Объект.WSURLВебСервиса", , Отказ);
			Возврат;
		КонецПопытки;
		
		Попытка
			ОбменДаннымиКлиентСервер.ПроверитьНедопустимыеСимволыВИмениПользователяWSПрокси(Объект.WSИмяПользователя);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),, "Объект.WSИмяПользователя",, Отказ);
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеWSНаКлиенте(Отказ, РасширеннаяПроверка = Ложь)
	
	ПредлагатьПерейтиВЖурналРегистрации = Истина;
		
	ПроверитьПодключениеWSНаСервере(Отказ, РасширеннаяПроверка, ПредлагатьПерейтиВЖурналРегистрации);
	
	Если Отказ И ПредлагатьПерейтиВЖурналРегистрации Тогда
		
		ТекстВопроса = НСтр("ru = 'Ошибка установки подключения.
			|Перейти в журнал регистрации?'");
		
		ПредложитьПерейтиВЖурналРегистрации(ТекстВопроса, СобытиеЖурналаРегистрацииУстановкаПодключенияКWebСервису);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеWSНаСервере(Отказ, РасширеннаяПроверка, ПредлагатьПерейтиВЖурналРегистрации)
	
	ПараметрыПодключения = ОбменДаннымиСервер.СтруктураПараметровWS();
	
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, Объект);
	
	WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси(ПараметрыПодключения);
	
	Если WSПрокси = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ВерсииКорреспондента = ОбменДаннымиПовтИсп.ВерсииКорреспондента(ПараметрыПодключения);
	
	Объект.ВерсияКорреспондента_2_0_1_6 = (ВерсииКорреспондента.Найти("2.0.1.6") <> Неопределено);
	Объект.ВерсияКорреспондента_2_1_1_7 = (ВерсииКорреспондента.Найти("2.1.1.7") <> Неопределено);
	
	Если Объект.ВерсияКорреспондента_2_1_1_7 Тогда
		
		WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси_2_1_1_7(ПараметрыПодключения);
		
		Если WSПрокси = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Объект.ВерсияКорреспондента_2_0_1_6 Тогда
		
		WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси_2_0_1_6(ПараметрыПодключения);
		
		Если WSПрокси = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	Если РасширеннаяПроверка Тогда
		
		// Получаем параметры второй информационной базы.
		ПредлагатьПерейтиВЖурналРегистрации = Ложь;
		
		Если Объект.ВерсияКорреспондента_2_1_1_7 Тогда
			
			ПараметрыПриемника = СериализаторXDTO.ПрочитатьXDTO(WSПрокси.GetIBParameters(Объект.ИмяПланаОбмена, "", ""));
			
		ИначеЕсли Объект.ВерсияКорреспондента_2_0_1_6 Тогда
			
			ПараметрыПриемника = СериализаторXDTO.ПрочитатьXDTO(WSПрокси.GetIBParameters(Объект.ИмяПланаОбмена, "", ""));
			
		Иначе
			
			ПараметрыПриемника = ЗначениеИзСтрокиВнутр(WSПрокси.GetIBParameters(Объект.ИмяПланаОбмена, "", ""));
			
		КонецЕсли;
		
		// {Обработчик: ПриПодключенииККорреспонденту} Начало
		ВерсияКонфигурацииКорреспондента = Неопределено;
		ПараметрыПриемника.Свойство("ВерсияКонфигурации", ВерсияКонфигурацииКорреспондента);
		
		ПриПодключенииККорреспонденту(Отказ, ВерсияКонфигурацииКорреспондента);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		// {Обработчик: ПриПодключенииККорреспонденту} Окончание
		
		Если Не ПараметрыПриемника.ПланОбменаСуществует Тогда
			
			Сообщение = НСтр("ru = 'Другая программа не предназначена для синхронизации с текущей.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
			Возврат;
			
		КонецЕсли;
		
		Объект.КодУзлаКорреспондента = ПараметрыПриемника.КодЭтогоУзла;
		
		Объект.ПрефиксИнформационнойБазыПриемника = ПараметрыПриемника.ПрефиксИнформационнойБазы;
		Объект.ПрефиксИнформационнойБазыПриемникаУстановлен = ЗначениеЗаполнено(Объект.ПрефиксИнформационнойБазыПриемника);
		
		Если Не Объект.ПрефиксИнформационнойБазыПриемникаУстановлен Тогда
			Объект.ПрефиксИнформационнойБазыПриемника = ПараметрыПриемника.ПрефиксИнформационнойБазыПоУмолчанию;
		КонецЕсли;
		
		Элементы.ПрефиксИнформационнойБазыПриемникаОбменЧерезВебСервис.Видимость = Не Объект.ПрефиксИнформационнойБазыПриемникаУстановлен;
		Элементы.ПрефиксИнформационнойБазыПриемникаОбменЧерезВебСервис.ТолькоПросмотр = Объект.ПрефиксИнформационнойБазыПриемникаУстановлен;
		
		// Проверка на существование обмена с базой-корреспондентом.
		ПроверитьНаличиеСуществующегоОбменаДаннымиСВторойБазой(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Объект.НаименованиеВторойБазы = ПараметрыПриемника.НаименованиеИнформационнойБазы;
		ЗаданоНаименованиеВторойБазы = Не ПустаяСтрока(Объект.НаименованиеВторойБазы);
		
		Элементы.НаименованиеВторойБазы1.ТолькоПросмотр = ЗаданоНаименованиеВторойБазы;
		
		Если Не ЗаданоНаименованиеВторойБазы Тогда
			
			Объект.НаименованиеВторойБазы = ПараметрыПриемника.НаименованиеИнформационнойБазыПоУмолчанию;
			
		КонецЕсли;
		
		ФормаНастройкиУзла = "";
		ФормаНастройкиУзлаБазыКорреспондента = "";
		ФормаНастройкиЗначенийПоУмолчанию = "";
		ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента = "";
		ФормаНастройкиУзлов = "";
		
		НастройкаОтборовНаУзле    = ОбменДаннымиСервер.НастройкаОтборовНаУзле(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, ФормаНастройкиУзла, Объект.ВариантНастройкиОбмена);
		ЗначенияПоУмолчаниюНаУзле = ОбменДаннымиСервер.ЗначенияПоУмолчаниюНаУзле(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, ФормаНастройкиЗначенийПоУмолчанию, Объект.ВариантНастройкиОбмена);
		
		ОбменДаннымиСервер.ОбщиеДанныеУзлов(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, ФормаНастройкиУзлов);
		
		ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента = ОбменДаннымиСервер.ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(
			Объект.ИмяПланаОбмена,
			ВерсияКонфигурацииКорреспондента,
			ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента,
			Объект.ВариантНастройкиОбмена);
		
		ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента = ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента.Количество() > 0;
		
		Элементы.РамкаГруппыЗначенийПоУмолчанию4.Видимость                  = ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента;
		Элементы.РамкаГруппыЗначенийПоУмолчаниюБазыКорреспондента.Видимость = ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента;
		
		ОписаниеЗначенийПоУмолчаниюБазыКорреспондента = ОбменДаннымиСервер.ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(
			Объект.ИмяПланаОбмена,
			ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента,
			ВерсияКонфигурацииКорреспондента,
			Объект.ВариантНастройкиОбмена);
		
		НастройкиПараметровУчетаКорреспондентаПоясняющаяНадпись = ОбменДаннымиСервер.ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьПерейтиВЖурналРегистрации(ТекстВопроса, Знач Событие)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредложитьПерейтиВЖурналРегистрацииЗавершение", ЭтотОбъект, Событие);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьПерейтиВЖурналРегистрацииЗавершение(Ответ, Событие) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Отбор = Новый Структура("СобытиеЖурналаРегистрации", Событие);
		
		ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", Отбор, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПереходов()
	
	Если ВариантРаботыМастера = "НастроитьНовыйОбменДанными" Тогда
		
		Если РежимРаботыМастера = "ОбменЧерезВнешнееСоединение" Тогда
			
			ТаблицаПереходовНастройкиОбменаЧерезВнешнееСоединение();
			
		ИначеЕсли РежимРаботыМастера = "ОбменЧерезОбычныеКаналыСвязи" Тогда
			
			ТаблицаПереходовПервогоЭтапаНастройкиОбмена();
			
		ИначеЕсли РежимРаботыМастера = "ОбменЧерезВебСервис" Тогда
			
			Если НастройкаОбменаССервисом Тогда
				
				ТаблицаПереходовРасширеннойНастройкиОбменаССервисом();
				
			Иначе
				
				ТаблицаПереходовНастройкиОбменаЧерезВебСервис();
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // "ПродолжитьНастройкуОбменаДанными".
		
		ТаблицаПереходовВторогоЭтапаНастройкиОбмена();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРаботыИнформационнойБазыПриИзменении()
	
	ТекущаяСтраница = ?(Объект.COMВариантРаботыИнформационнойБазы = 0, Элементы.СтраницаВариантРаботыФайловый, Элементы.СтраницаВариантРаботыКлиентСерверный);
	
	Элементы.ВариантыРаботыИнформационнойБазы.ТекущаяСтраница = ТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура АутентификацияОперационнойСистемыПриИзменении()
	
	Объект.COMАутентификацияОперационнойСистемы = (ТипАутентификации = 1);
	Элементы.COMИмяПользователя.Доступность    = Не Объект.COMАутентификацияОперационнойСистемы;
	Элементы.COMПарольПользователя.Доступность = Не Объект.COMАутентификацияОперационнойСистемы;
	
КонецПроцедуры

&НаСервере
Процедура ВариантРаботыМастераПриИзмененииНаСервере()
	
	Элементы.ИмяФайлаНастроекОбменаДаннымиДляЗагрузки.Доступность = ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными"
																		И Не Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы;
	
	Если ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными" Тогда
		
		РежимРаботыМастера = "ОбменЧерезОбычныеКаналыСвязи";
		
	Иначе
		
		Если НастройкаОбменаССервисом Тогда
			
			РежимРаботыМастера = "ОбменЧерезВебСервис";
			
		ИначеЕсли ИспользоватьТранспортСообщенийОбменаCOM Тогда
			
			РежимРаботыМастера = "ОбменЧерезВнешнееСоединение";
			
		ИначеЕсли ИспользоватьТранспортСообщенийОбменаWS Тогда
			
			РежимРаботыМастера = "ОбменЧерезВебСервис";
			
		Иначе
			
			РежимРаботыМастера = "ОбменЧерезОбычныеКаналыСвязи";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьТаблицуПереходов();
	
КонецПроцедуры

&НаСервере
Процедура РежимРаботыМастераПриИзмененииНаСервере()
	
	ВсеНастройкиСтраниц = Новый Структура;
	
	ВариантНастроек  = "ОбменЧерезВнешнееСоединение";
	ЗначенияНастроек = Новый Структура;
	
	ЗначенияНастроек.Вставить("Транспорт",     Элементы.СтраницаПараметровТранспортаCOM);
	ЗначенияНастроек.Вставить("Сообщения",     Перечисления.ВидыТранспортаСообщенийОбмена.COM);
	ЗначенияНастроек.Вставить("Использование", РежимРаботыМастера = ВариантНастроек Или ИспользоватьТранспортСообщенийОбменаCOM);
	ВсеНастройкиСтраниц.Вставить(ВариантНастроек, ЗначенияНастроек);
	
	ВариантНастроек  = "ОбменЧерезОбычныеКаналыСвязи";
	ЗначенияНастроек = Новый Структура;
	ЗначенияНастроек.Вставить("Транспорт",     Элементы.СтраницаПараметровТранспорта);
	ЗначенияНастроек.Вставить("Сообщения",     Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	ЗначенияНастроек.Вставить("Использование", РежимРаботыМастера = ВариантНастроек Или ИспользоватьТранспортСообщенийОбменаFILE 
		Или ИспользоватьТранспортСообщенийОбменаFTP Или ИспользоватьТранспортСообщенийОбменаEMAIL);
	ВсеНастройкиСтраниц.Вставить(ВариантНастроек, ЗначенияНастроек);
		
	ВариантНастроек  = "ОбменЧерезВебСервис";
	ЗначенияНастроек = Новый Структура;
	ЗначенияНастроек.Вставить("Транспорт",     Элементы.СтраницаПараметровТранспортаWS);
	ЗначенияНастроек.Вставить("Сообщения",     Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	ЗначенияНастроек.Вставить("Использование", РежимРаботыМастера = ВариантНастроек Или ИспользоватьТранспортСообщенийОбменаWS);
	ВсеНастройкиСтраниц.Вставить(ВариантНастроек, ЗначенияНастроек);
	
	// Реальные настройки - только те, которые допустимы.
	СписокВыбораВариантов = Элементы.РежимРаботыМастера.СписокВыбора;
	
	Для Каждого КлючЗначение Из ВсеНастройкиСтраниц Цикл
		ВариантНастроек  = КлючЗначение.Ключ;
		ЗначенияНастроек = КлючЗначение.Значение;
		ВариантВСписке   = СписокВыбораВариантов.НайтиПоЗначению(ВариантНастроек);
		
		Если ЗначенияНастроек.Использование Тогда
			Если ВариантНастроек = РежимРаботыМастера Тогда
				Элементы.СтраницыПараметровТранспорта.ТекущаяСтраница        = ЗначенияНастроек.Транспорт;
				Объект.ВидТранспортаСообщенийОбмена                          = ЗначенияНастроек.Сообщения;
			КонецЕсли;
			
		Иначе
			Если ВариантВСписке <> Неопределено Тогда
				СписокВыбораВариантов.Удалить( ВариантВСписке );
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	ЗаполнитьТаблицуПереходов();
КонецПроцедуры

&НаКлиенте
Функция СтруктураПараметровПодключенияВнешнегоСоединения(ТипСоединения = "ВнешнееСоединение")
	
	Результат = Неопределено;
	
	Если ТипСоединения = "ВнешнееСоединение" Тогда
		
		Результат = ОбщегоНазначенияКлиентСервер.СтруктураПараметровДляУстановкиВнешнегоСоединения();
		
		Результат.ВариантРаботыИнформационнойБазы             = Объект.COMВариантРаботыИнформационнойБазы;
		Результат.КаталогИнформационнойБазы                   = Объект.COMКаталогИнформационнойБазы;
		Результат.ИмяСервера1СПредприятия                     = Объект.COMИмяСервера1СПредприятия;
		Результат.ИмяИнформационнойБазыНаСервере1СПредприятия = Объект.COMИмяИнформационнойБазыНаСервере1СПредприятия;
		Результат.АутентификацияОперационнойСистемы           = Объект.COMАутентификацияОперационнойСистемы;
		Результат.ИмяПользователя                             = Объект.COMИмяПользователя;
		Результат.ПарольПользователя                          = Объект.COMПарольПользователя;
		
		Результат.Вставить("ТипСоединения", ТипСоединения);
		Результат.Вставить("ВерсияКорреспондента_2_0_1_6", Объект.ВерсияКорреспондента_2_0_1_6);
		Результат.Вставить("ВерсияКорреспондента_2_1_1_7", Объект.ВерсияКорреспондента_2_1_1_7);
		
	ИначеЕсли ТипСоединения = "ВебСервис" Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("WSURLВебСервиса");
		Результат.Вставить("WSИмяПользователя");
		Результат.Вставить("WSПароль");
		
		ЗаполнитьЗначенияСвойств(Результат, Объект);
		
		Результат.Вставить("ТипСоединения", ТипСоединения);
		Результат.Вставить("ВерсияКорреспондента_2_0_1_6", Объект.ВерсияКорреспондента_2_0_1_6);
		Результат.Вставить("ВерсияКорреспондента_2_1_1_7", Объект.ВерсияКорреспондента_2_1_1_7);
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ИмяФормыДляПроверки, ПараметрыФормы, ИмяРеквизитаФормы)
	
	ПараметрыФормы.Вставить("ВерсияКорреспондента",   ВерсияКонфигурацииКорреспондента);
	ПараметрыФормы.Вставить("ИдентификаторНастройки", Объект.ВариантНастройкиОбмена);
	
	ИмяФормыНастройки = "ПланОбмена.[ИмяПланаОбмена].Форма.[ИмяФормы]";
	ИмяФормыНастройки = СтрЗаменить(ИмяФормыНастройки, "[ИмяПланаОбмена]", Объект.ИмяПланаОбмена);
	ИмяФормыНастройки = СтрЗаменить(ИмяФормыНастройки, "[ИмяФормы]", ИмяФормыДляПроверки);
	
	ФормаНастройки = ПолучитьФорму(ИмяФормыНастройки, ПараметрыФормы, ЭтотОбъект);
	
	Если Не ФормаНастройки.ПроверитьЗаполнение() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо задать обязательные настройки.'"),,, ИмяРеквизитаФормы, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВЖурналРегистрации(СтрокаСообщенияОбОшибке, Событие)
	
	ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОграниченийРегистрацииДанныхБазыКорреспондента(ТипСоединения)
	
	ИмяФормыНастройкиУзла = "ПланОбмена.[ИмяПланаОбмена].Форма.[ФормаНастройкиУзлаБазыКорреспондента]";
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ИмяПланаОбмена]", Объект.ИмяПланаОбмена);
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ФормаНастройкиУзлаБазыКорреспондента]", ФормаНастройкиУзлаБазыКорреспондента);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияКорреспондента",        ВерсияКонфигурацииКорреспондента);
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения", СтруктураПараметровПодключенияВнешнегоСоединения(ТипСоединения));
	ПараметрыФормы.Вставить("НастройкаОтборовНаУзле",      НастройкаОтборовНаУзлеБазыКорреспондента);
	ПараметрыФормы.Вставить("ИдентификаторНастройки",      Объект.ВариантНастройкиОбмена);
	
	Обработчик = Новый ОписаниеОповещения("НастройкаОграниченийРегистрацииДанныхБазыКорреспондентаЗавершение", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму(ИмяФормыНастройкиУзла, ПараметрыФормы, ЭтотОбъект,,,,Обработчик, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОграниченийРегистрацииДанныхБазыКорреспондентаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Для Каждого НастройкаОтбора Из НастройкаОтборовНаУзлеБазыКорреспондента Цикл
			
			НастройкаОтборовНаУзлеБазыКорреспондента[НастройкаОтбора.Ключ] = Результат[НастройкаОтбора.Ключ];
			
		КонецЦикла;
		
		// вызов сервера
		ПолучитьОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзлеБазыКорреспондента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗначенийПоУмолчаниюБазыКорреспондента(ТипСоединения)
	
	ИмяФормыНастройкиУзла = "ПланОбмена.[ИмяПланаОбмена].Форма.[ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента]";
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ИмяПланаОбмена]", Объект.ИмяПланаОбмена);
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента]", ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения", СтруктураПараметровПодключенияВнешнегоСоединения(ТипСоединения));
	ПараметрыФормы.Вставить("ЗначенияПоУмолчаниюНаУзле",   ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента);
	ПараметрыФормы.Вставить("ИдентификаторНастройки",      Объект.ВариантНастройкиОбмена);
	
	Обработчик = Новый ОписаниеОповещения("НастройкаЗначенийПоУмолчаниюБазыКорреспондентаЗавершение", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму(ИмяФормыНастройкиУзла, ПараметрыФормы, ЭтотОбъект,,,,Обработчик, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗначенийПоУмолчаниюБазыКорреспондентаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Для Каждого НастройкаОтбора Из ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента Цикл
			
			ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента[НастройкаОтбора.Ключ] = Результат[НастройкаОтбора.Ключ];
			
		КонецЦикла;
		
		// вызов сервера
		ПолучитьОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеНастройкиОбменаЧерезВнешнееСоединение(Знач ОткрыватьПослеЗакрытияТекущей)
	
	Если ВыполнитьИнтерактивныйОбменДаннымиСейчас Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УзелИнформационнойБазы",         Объект.УзелИнформационнойБазы);
		ПараметрыФормы.Вставить("ВидТранспортаСообщенийОбмена",   Объект.ВидТранспортаСообщенийОбмена);
		ПараметрыФормы.Вставить("ВыполнитьСопоставлениеПриОткрытии", Ложь);
		ПараметрыФормы.Вставить("РасширенныйРежимДополненияВыгрузки", Истина);
		
		Если ОткрыватьПослеЗакрытияТекущей Тогда
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			ОбменДаннымиКлиент.ОткрытьФормуПослеЗакрытияТекущей(ЭтотОбъект, "Обработка.ПомощникИнтерактивногоОбменаДанными.Форма", ПараметрыФормы, ПараметрыОткрытия);
			
		Иначе
			ОткрытьФорму("Обработка.ПомощникИнтерактивногоОбменаДанными.Форма", ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеНастройкиОбменаЧерезВебСервис()
	
	Если ВыполнятьОбменДаннымиАвтоматически Тогда
		
		ЗавершениеНастройкиОбменаЧерезВебСервисНаСервере(Объект.УзелИнформационнойБазы, ПредопределенноеРасписаниеОбменаДанными, РасписаниеВыполненияОбменаДанными);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗавершениеНастройкиОбменаЧерезВебСервисНаСервере(УзелИнформационнойБазы, ПредопределенноеРасписание, Расписание)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РасписаниеСценария = Неопределено;
	
	Если ПредопределенноеРасписание = "Каждые15Минут" Тогда
		
		РасписаниеСценария = ПредопределенноеРасписаниеКаждые15Минут();
		
	ИначеЕсли ПредопределенноеРасписание = "Каждые30Минут" Тогда
		
		РасписаниеСценария = ПредопределенноеРасписаниеКаждые30Минут();
		
	ИначеЕсли ПредопределенноеРасписание = "КаждыйЧас" Тогда
		
		РасписаниеСценария = ПредопределенноеРасписаниеКаждыйЧас();
		
	ИначеЕсли ПредопределенноеРасписание = "КаждыйДеньВ_8_00" Тогда
		
		РасписаниеСценария = ПредопределенноеРасписаниеКаждыйДеньВ_8_00();
		
	ИначеЕсли ПредопределенноеРасписание = "ДругоеРасписание" Тогда
		
		РасписаниеСценария = Расписание;
		
	КонецЕсли;
	
	Если РасписаниеСценария <> Неопределено Тогда
		
		Справочники.СценарииОбменовДанными.СоздатьСценарий(УзелИнформационнойБазы, РасписаниеСценария);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПервогоЭтапаНастройкиОбменаЧерезОбычныеКаналыСвязи(Отказ)
	
	ОчиститьСообщения();
	
	Если Не Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы
		И ПустаяСтрока(Объект.ИмяФайлаНастроекСинхронизацииДанных) Тогда
		
		НСтрока = НСтр("ru = 'Сохраните файл с настройками для другой программы'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,"Объект.ИмяФайлаНастроекСинхронизацииДанных",, Отказ);
		Возврат;
	КонецЕсли;
	
	Если Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы Тогда
		
		Если ВыполнитьСозданиеНачальногоОбразаСейчас Тогда
			
			ПараметрыФормы = Новый Структура("Ключ, Узел", Объект.УзелИнформационнойБазы, Объект.УзелИнформационнойБазы);
			
			Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			Обработчик = Новый ОписаниеОповещения("ЗакрытьФормуПослеСозданияНачальногоОбраза", ЭтотОбъект);
			ОткрытьФорму(ИмяФормыСозданияНачальногоОбраза, ПараметрыФормы,,,,, Обработчик, Режим);
			Отказ = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если ВыполнитьОбменДаннымиСейчас Тогда
			
			Состояние(НСтр("ru = 'Выполняется отправка данных...'"));
			// Видимость прогресс-бара
			Если РежимРаботыМастера <> "ОбменЧерезВебСервис"
				ИЛИ РежимРаботыМастера = "ОбменЧерезВнешнееСоединение"
				ИЛИ РежимРаботыМастера = "ОбменЧерезОбычныеКаналыСвязи" Тогда
				Элементы.ГруппаПрогрессБарВыгрузка.Видимость = Истина;
			КонецЕсли;
				
			ЭтотОбъект.ТолькоПросмотр = Истина;
			Элементы.КомандаГотово6.Доступность = Ложь;
			Элементы.КомандаГотово7.Доступность = Ложь;

			ЗапуститьВыгрузкуДанных(Отказ, Объект.УзелИнформационнойБазы, Объект.ВидТранспортаСообщенийОбмена);
			
			Если Отказ Тогда
				
				ПоказатьПредупреждение(, НСтр("ru = 'Во время отправки данных возникли ошибки(см. журнал регистрации).'"));
				
			КонецЕсли;
			ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 2, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуПослеСозданияНачальногоОбраза(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьИнтерфейс();
	
	ЗакрытьФормуБезусловно = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВторогоЭтапаНастройкиОбменаЧерезОбычныеКаналыСвязи(Отказ, Знач ОткрыватьПослеЗакрытияТекущей)
	
	Состояние(НСтр("ru = 'Выполняется создание настройки синхронизации данных'"));
	
	НастроитьНовыйОбменДаннымиНаСервере(Отказ, НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле);
	
	Если Отказ Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'При создании настройки синхронизации данных возникли ошибки.'"));
		Возврат;
	КонецЕсли;
	
	ОткрытьПомощникСопоставления = Не Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы И Не Объект.ЭтоНастройкаСтандартногоОбмена;
	
	Если ОткрытьПомощникСопоставления Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УзелИнформационнойБазы",         Объект.УзелИнформационнойБазы);
		ПараметрыФормы.Вставить("ВидТранспортаСообщенийОбмена",   Объект.ВидТранспортаСообщенийОбмена);
		ПараметрыФормы.Вставить("ВыполнитьСопоставлениеПриОткрытии", Ложь);
		ПараметрыФормы.Вставить("РасширенныйРежимДополненияВыгрузки", Истина);
		
		ИмяФормыПомощника = "Обработка.ПомощникИнтерактивногоОбменаДанными.Форма";
		Если ОткрыватьПослеЗакрытияТекущей Тогда
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			ОбменДаннымиКлиент.ОткрытьФормуПослеЗакрытияТекущей(ЭтотОбъект, ИмяФормыПомощника, ПараметрыФормы, ПараметрыОткрытия);
		Иначе
			ОткрытьФорму(ИмяФормыПомощника, ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОткрытьФормуСопоставления()
	
	ТекущиеДанные = Элементы.ДеревоИнформацииСтатистики.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.Ключ) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ИспользоватьПредварительныйПросмотр Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для этих данных нельзя выполнить сопоставление.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяТаблицыПриемника",            ТекущиеДанные.ИмяТаблицыПриемника);
	ПараметрыФормы.Вставить("ИмяТипаОбъектаТаблицыИсточника", ТекущиеДанные.ТипОбъектаСтрокой);
	ПараметрыФормы.Вставить("ПоляТаблицыПриемника",           ТекущиеДанные.ПоляТаблицы);
	ПараметрыФормы.Вставить("ПоляПоискаТаблицыПриемника",     ТекущиеДанные.ПоляПоиска);
	ПараметрыФормы.Вставить("ТипИсточникаСтрокой",            ТекущиеДанные.ТипИсточникаСтрокой);
	ПараметрыФормы.Вставить("ТипПриемникаСтрокой",            ТекущиеДанные.ТипПриемникаСтрокой);
	ПараметрыФормы.Вставить("ЭтоУдалениеОбъекта",             ТекущиеДанные.ЭтоУдалениеОбъекта);
	ПараметрыФормы.Вставить("ДанныеУспешноЗагружены",         ТекущиеДанные.ДанныеУспешноЗагружены);
	ПараметрыФормы.Вставить("Ключ",                           ТекущиеДанные.Ключ);
	ПараметрыФормы.Вставить("Синоним",                        ТекущиеДанные.Синоним);
	
	ПараметрыФормы.Вставить("УзелИнформационнойБазы",               Объект.УзелИнформационнойБазы);
	ПараметрыФормы.Вставить("ИмяФайлаСообщенияОбмена",              Объект.ИмяФайлаСообщенияОбмена);
	
	ПараметрыФормы.Вставить("ВыполнятьЗагрузкуДанных", Ложь);
	
	ОткрытьФорму("Обработка.СопоставлениеОбъектовИнформационныхБаз.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоИнформацииСтатистики(КлючСтроки = "")
	
	КоллекцияЭлементов = ДеревоИнформацииСтатистики.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементов Цикл
		
		Элементы.ДеревоИнформацииСтатистики.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		
	КонецЦикла;
	
	// Позиционирование курсора в дереве значений.
	Если Не ПустаяСтрока(КлючСтроки) Тогда
		
		ИдентификаторСтроки = 0;
		
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Ключ", ИдентификаторСтроки, ДеревоИнформацииСтатистики.ПолучитьЭлементы(), КлючСтроки, Ложь);
		
		Элементы.ДеревоИнформацииСтатистики.ТекущаяСтрока = ИдентификаторСтроки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСтатистикиСопоставленияНаСервере(Отказ, ПараметрыОповещения)
	
	СтрокиТаблицы = Объект.ИнформацияСтатистики.НайтиСтроки(Новый Структура("Ключ", ПараметрыОповещения.КлючУникальности));
	
	ЗаполнитьЗначенияСвойств(СтрокиТаблицы[0], ПараметрыОповещения, "ДанныеУспешноЗагружены");
	
	КлючиСтрок = Новый Массив;
	КлючиСтрок.Добавить(ПараметрыОповещения.КлючУникальности);
	
	ОбновитьИнформациюСопоставленияПоСтрокеНаСервере(Отказ, КлючиСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюСопоставленияПоСтрокеНаСервере(Отказ, КлючиСтрок)
	
	ИндексыСтрок = ПолучитьИндексыСтрокТаблицыИнформацииСтатистики(КлючиСтрок);
	
	ПомощникИнтерактивногоОбменаДанными = Обработки.ПомощникИнтерактивногоОбменаДанными.Создать();
	
	ЗаполнитьЗначенияСвойств(ПомощникИнтерактивногоОбменаДанными, Объект,, "ИнформацияСтатистики");
	
	ПомощникИнтерактивногоОбменаДанными.ИнформацияСтатистики.Загрузить(Объект.ИнформацияСтатистики.Выгрузить());
	
	ПомощникИнтерактивногоОбменаДанными.ПолучитьСтатистикуСопоставленияОбъектовПоСтроке(Отказ, ИндексыСтрок);
	
	Если Не Отказ Тогда
		
		Объект.ИнформацияСтатистики.Загрузить(ПомощникИнтерактивногоОбменаДанными.ТаблицаИнформацииСтатистики());
		
		ПолучитьДеревоИнформацииСтатистики(ПомощникИнтерактивногоОбменаДанными.ТаблицаИнформацииСтатистики());
		
		УстановитьВидимостьГруппыДополнительнойИнформации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИндексыСтрокТаблицыИнформацииСтатистики(КлючиСтрок)
	
	ИндексыСтрок = Новый Массив;
	
	Для Каждого Ключ Из КлючиСтрок Цикл
		
		СтрокиТаблицы = Объект.ИнформацияСтатистики.НайтиСтроки(Новый Структура("Ключ", Ключ));
		
		ИндексСтроки = Объект.ИнформацияСтатистики.Индекс(СтрокиТаблицы[0]);
		
		ИндексыСтрок.Добавить(ИндексСтроки);
		
	КонецЦикла;
	
	Возврат ИндексыСтрок;
	
КонецФункции

&НаСервере
Процедура ПолучитьДеревоИнформацииСтатистики(ИнформацияСтатистики)
	
	КоллекцияЭлементовДерева = ДеревоИнформацииСтатистики.ПолучитьЭлементы();
	КоллекцияЭлементовДерева.Очистить();
	
	ОбщегоНазначения.ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(КоллекцияЭлементовДерева,
		ОбменДаннымиСервер.ПолучитьДеревоИнформацииСтатистики(ИнформацияСтатистики));
	
КонецПроцедуры

&НаСервере
Процедура ПриПодключенииККорреспонденту(Отказ, Знач ВерсияКорреспондента)
	
	Если ВерсияКорреспондента = Неопределено
		ИЛИ ПустаяСтрока(ВерсияКорреспондента) Тогда
		
		ВерсияКорреспондента = "0.0.0.0";
	КонецЕсли;
	
	Попытка
		ОбменДаннымиСервер.ПриПодключенииККорреспонденту(Объект.ИмяПланаОбмена, ВерсияКорреспондента);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,,, Отказ);
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении обработчика ПриПодключенииККорреспонденту произошла ошибка:%1%2'"),
				Символы.ПС,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),
			СобытиеЖурналаРегистрацииСозданиеОбменаДанными);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНастройкуОбменаДанными(Результат, ДополнительныеПараметры) Экспорт
	
	Если Объект.УзелИнформационнойБазы <> Неопределено Тогда
		
		ОбменДаннымиВызовСервера.УдалитьНастройкуСинхронизации(Объект.УзелИнформационнойБазы);
		
		Оповестить("Запись_УзелПланаОбмена");
		
	КонецЕсли;
	
КонецПроцедуры

// Был отказ от настройки РИБ, принимаем все умолчания.
&НаКлиенте
Процедура ОписаниеОповещенияОтказОтПродолженияРИБ(Знач Результат, ДополнительныеПараметры) Экспорт
	
	// Игнорируем все шаги, настройки должны быть заданы заранее.
	ВыполнитьКомандуГотово(Ложь);
	
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// Значения констант

&НаКлиентеНаСервереБезКонтекста
Функция НадписьДалееFTP()
	
	Возврат НСтр("ru = 'Нажмите кнопку ""Далее"" для настройки подключения через FTP-ресурс.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НадписьДалееEMAIL()
	
	Возврат НСтр("ru = 'Нажмите кнопку ""Далее"" для настройки подключения по почте.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НадписьДалееНастройки()
	
	Возврат НСтр("ru = 'Нажмите кнопку ""Далее"" для настройки дополнительных параметров синхронизации данных.'");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредопределенноеРасписаниеКаждые15Минут()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.Месяцы                   = Месяцы;
	Расписание.ДниНедели                = ДниНедели;
	Расписание.ПериодПовтораВТечениеДня = 60*15; // 15 минут
	Расписание.ПериодПовтораДней        = 1; // каждый день
	
	Возврат Расписание;
КонецФункции

&НаСервереБезКонтекста
Функция ПредопределенноеРасписаниеКаждые30Минут()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.Месяцы                   = Месяцы;
	Расписание.ДниНедели                = ДниНедели;
	Расписание.ПериодПовтораВТечениеДня = 60*30; // 30 минут
	Расписание.ПериодПовтораДней        = 1; // каждый день
	
	Возврат Расписание;
КонецФункции

&НаСервереБезКонтекста
Функция ПредопределенноеРасписаниеКаждыйЧас()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.Месяцы                   = Месяцы;
	Расписание.ДниНедели                = ДниНедели;
	Расписание.ПериодПовтораВТечениеДня = 60*60; // 60 минут
	Расписание.ПериодПовтораДней        = 1; // каждый день
	
	Возврат Расписание;
КонецФункции

&НаСервереБезКонтекста
Функция ПредопределенноеРасписаниеКаждыйДеньВ_8_00()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.Месяцы                   = Месяцы;
	Расписание.ДниНедели                = ДниНедели;
	Расписание.ВремяНачала              = Дата('00010101080000'); // 8:00
	Расписание.ПериодПовтораДней        = 1; // каждый день
	
	Возврат Расписание;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Обработчики событий переходов.

&НаКлиенте
Процедура ПерейтиНаШагВпередОтложеннойОбработкой()
	
	ПодключитьОбработчикОжидания("Подключаемый_ПерейтиНаШагВпередОтложеннойОбработкой", 0.01, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиНаШагВпередОтложеннойОбработкой()
	
	// Двигаемся на шаг вперед принудительно.
	ПропускатьКонтрольОтказаТекущейСтраницы = Истина;
	ИзменитьПорядковыйНомерПерехода( +1 );
	
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_СтраницаМастераЗаданиеПараметровТранспортаFILE_ПриПереходеДалее(Отказ)
	
	Если Объект.ИспользоватьПараметрыТранспортаFILE Тогда
		
		Если ПустаяСтрока(Объект.FILEКаталогОбменаИнформацией) Или ВнешниеРесурсыРазрешены.РазрешенFile Тогда
			СтраницаМастераЗаданиеПараметровТранспортаFILE_ПриПереходеДалееНаСервере(Отказ);
		Иначе
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("РазрешитьРесурсЗавершение", ЭтотОбъект, "РазрешенFile");
			Запросы = СоздатьЗапросНаИспользованиеВнешнихРесурсов(Объект, Ложь, Истина, Ложь, Ложь);
			РаботаВБезопасномРежимеКлиент.ПрименитьЗапросыНаИспользованиеВнешнихРесурсов(Запросы, ЭтотОбъект, ОповещениеОЗакрытии);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераЗаданиеПараметровТранспортаFTP_ПриПереходеДалее(Отказ)
	
	Если Объект.ИспользоватьПараметрыТранспортаFTP Тогда
		
		Если ПустаяСтрока(Объект.FTPСоединениеПуть) Или ВнешниеРесурсыРазрешены.РазрешенFTP Тогда
			СтраницаМастераЗаданиеПараметровТранспортаFTP_ПриПереходеДалееНаСервере(Отказ);
		Иначе
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("РазрешитьРесурсЗавершение", ЭтотОбъект, "РазрешенFTP");
			Запросы = СоздатьЗапросНаИспользованиеВнешнихРесурсов(Объект, Ложь, Ложь, Ложь, Истина);
			РаботаВБезопасномРежимеКлиент.ПрименитьЗапросыНаИспользованиеВнешнихРесурсов(Запросы, ЭтотОбъект, ОповещениеОЗакрытии);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераЗаданиеПараметровТранспортаEMAIL_ПриПереходеДалее(Отказ)
	
	СтраницаМастераЗаданиеПараметровТранспортаEMAIL_ПриПереходеДалееНаСервере(Отказ);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераВыборРежимаРаботыПомощника_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если Не ИспользоватьТранспортСообщенийОбменаCOM Или Не ИспользоватьТранспортСообщенийОбменаWS Тогда
		
		Объект.ИспользоватьПараметрыТранспортаCOM = Ложь;
		
		ПропуститьСтраницу = Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераВыборРежимаРаботыПомощника_ПриПереходеДалее(Отказ)
	
	Если РежимРаботыМастера = "ОбменЧерезВнешнееСоединение" И (Не ПустаяСтрока(Объект.COMКаталогИнформационнойБазы) Или Не ПустаяСтрока(Объект.COMИмяСервера1СПредприятия))
		И Не ВнешниеРесурсыРазрешены.РазрешенCom Тогда
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("РазрешитьРесурсЗавершение", ЭтотОбъект, "РазрешенCom");
		Запросы = СоздатьЗапросНаИспользованиеВнешнихРесурсов(Объект, Истина, Ложь, Ложь, Ложь);
		РаботаВБезопасномРежимеКлиент.ПрименитьЗапросыНаИспользованиеВнешнихРесурсов(Запросы, ЭтотОбъект, ОповещениеОЗакрытии);
		Отказ = Истина;
	ИначеЕсли РежимРаботыМастера = "ОбменЧерезВебСервис" И Не ВнешниеРесурсыРазрешены.РазрешенWS Тогда
		ПроверитьКорректностьПараметровПодключенияWS(Отказ);
		Если Не Отказ Тогда
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("РазрешитьРесурсЗавершение", ЭтотОбъект, "РазрешенWS");
			Запросы = СоздатьЗапросНаИспользованиеВнешнихРесурсов(Объект, Ложь, Ложь, Истина, Ложь);
			РаботаВБезопасномРежимеКлиент.ПрименитьЗапросыНаИспользованиеВнешнихРесурсов(Запросы, ЭтотОбъект, ОповещениеОЗакрытии);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераЗаданиеПараметровТранспортаFILE_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	ВнешниеРесурсыРазрешены.РазрешенFile = Ложь;
	
	Если Не ИспользоватьТранспортСообщенийОбменаFILE Тогда
		
		Объект.ИспользоватьПараметрыТранспортаFILE = Ложь;
		
		ПропуститьСтраницу = Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераЗаданиеПараметровТранспортаFTP_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	ВнешниеРесурсыРазрешены.РазрешенFTP = Ложь;
	
	Если Не ИспользоватьТранспортСообщенийОбменаFTP Тогда
		
		Объект.ИспользоватьПараметрыТранспортаFTP = Ложь;
		
		ПропуститьСтраницу = Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераЗаданиеПараметровТранспортаEMAIL_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если Не ИспользоватьТранспортСообщенийОбменаEMAIL Тогда
		
		Объект.ИспользоватьПараметрыТранспортаEMAIL = Ложь;
		
		ПропуститьСтраницу = Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкаПараметров_ПриПереходеДалее(Отказ)
	
	Если ПустаяСтрока(Объект.НаименованиеЭтойБазы) Тогда
		
		НСтрока = НСтр("ru = 'Укажите наименование этой программы.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.НаименованиеЭтойБазы",, Отказ);
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.НаименованиеВторойБазы) Тогда
		
		НСтрока = НСтр("ru = 'Укажите наименование другой программы.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.НаименованиеВторойБазы",, Отказ);
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ПрефиксИнформационнойБазыПриемника) Тогда
		
		НСтрока = НСтр("ru = 'Укажите существующий или желаемый префикс второй информационной базы.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.ПрефиксИнформационнойБазыПриемника",, Отказ);
		
	КонецЕсли;
	
	Если СокрЛП(Объект.ПрефиксИнформационнойБазыИсточника) = СокрЛП(Объект.ПрефиксИнформационнойБазыПриемника) Тогда
		
		НСтрока = НСтр("ru = 'Префиксы информационных баз должны быть различными.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.ПрефиксИнформационнойБазыПриемника",, Отказ);
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПредусмотреныНастройкиОтборовНаУзле Тогда
		
		// Проверяем заполнение реквизитов в форме настроек ограничения миграции данных.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НастройкаОтборовНаУзле", НастройкаОтборовНаУзле);
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиУзла, ПараметрыФормы, "ОписаниеОграниченийПередачиДанных");
		
	КонецЕсли;
	
	Если ПредусмотреныЗначенияПоУмолчаниюНаУзле Тогда
		
		// Проверяем заполнение реквизитов в форме дополнительных настроек.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияПоУмолчаниюНаУзле", ЗначенияПоУмолчаниюНаУзле);
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиЗначенийПоУмолчанию, ПараметрыФормы, "ОписаниеЗначенийПоУмолчанию");
		
	КонецЕсли;
	
	СтраницаМастераНастройкаПараметров_ПриПереходеДалееНаСервере(Отказ);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкаПараметровДляВнешнегоСоединенияПервойБазы_ПриПереходеДалее(Отказ)
	
	Если ПустаяСтрока(Объект.НаименованиеЭтойБазы) Тогда
		
		НСтрока = НСтр("ru = 'Укажите наименование информационной базы.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.НаименованиеЭтойБазы",, Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПредусмотреныНастройкиОтборовНаУзле Тогда
		
		// Проверяем заполнение реквизитов в форме настроек ограничения миграции данных.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НастройкаОтборовНаУзле", НастройкаОтборовНаУзле);
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиУзла, ПараметрыФормы, "ОписаниеОграниченийПередачиДанных");
		
	КонецЕсли;
	
	Если ПредусмотреныЗначенияПоУмолчаниюНаУзле Тогда
		
		// Проверяем заполнение реквизитов в форме дополнительных настроек.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияПоУмолчаниюНаУзле", ЗначенияПоУмолчаниюНаУзле);
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиЗначенийПоУмолчанию, ПараметрыФормы, "ОписаниеЗначенийПоУмолчанию");
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкаПараметровОбменаДанными_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если ЭтоПереходДалее Тогда
		
		// Получаем контекст и описание контекста формы настройки узлов.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
		ПараметрыФормы.Вставить("ПолучитьЗначенияПоУмолчанию");
		ПараметрыФормы.Вставить("Настройки", КонтекстФормыНастройкиУзлов);
		ПараметрыФормы.Вставить("ИдентификаторНастройки", Объект.ВариантНастройкиОбмена);
		
		ИмяФормыНастройки = "ПланОбмена.[ИмяПланаОбмена].Форма.[ФормаНастройкиУзлов]";
		ИмяФормыНастройки = СтрЗаменить(ИмяФормыНастройки, "[ИмяПланаОбмена]", Объект.ИмяПланаОбмена);
		ИмяФормыНастройки = СтрЗаменить(ИмяФормыНастройки, "[ФормаНастройкиУзлов]", ФормаНастройкиУзлов);
		
		ФормаНастройки = ПолучитьФорму(ИмяФормыНастройки, ПараметрыФормы, ЭтотОбъект);
		
		КонтекстФормыНастройкиУзлов    = ФормаНастройки.Контекст;
		ОписаниеНастроекВыгрузкиДанных = ФормаНастройки.ОписаниеКонтекста;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкаПараметровОбменаДанными_ПриПереходеДалее(Отказ)
	
	ПроверитьЗаданиеНастроекДляПервойБазы(Отказ, "ВебСервис");
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкаПараметровДляВнешнегоСоединенияВторойБазы_ПриПереходеДалее(Отказ)
	
	ПроверитьЗаданиеНастроекДляВторойБазы(Отказ, "ВнешнееСоединение");
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкаПараметровВторогоЭтапаНастройки_ПриПереходеДалее(Отказ)
	
	Если ПредусмотреныНастройкиОтборовНаУзле Тогда
		
		// Проверяем заполнение реквизитов в форме настроек ограничения миграции данных.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НастройкаОтборовНаУзле", НастройкаОтборовНаУзле);
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиУзла, ПараметрыФормы, "ОписаниеОграниченийПередачиДанных");
		
	КонецЕсли;
	
	Если ПредусмотреныЗначенияПоУмолчаниюНаУзле Тогда
		
		// Проверяем заполнение реквизитов в форме дополнительных настроек.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияПоУмолчаниюНаУзле", ЗначенияПоУмолчаниюНаУзле);
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиЗначенийПоУмолчанию, ПараметрыФормы, "ОписаниеЗначенийПоУмолчанию");
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНачало_ПриПереходеДалее(Отказ)
	
	Если Истина = ПропускатьКонтрольОтказаТекущейСтраницы Тогда
		ПропускатьКонтрольОтказаТекущейСтраницы = Неопределено;
		Возврат Неопределено;
		
	ИначеЕсли Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы Тогда
		Возврат Неопределено;
		
	ИначеЕсли ВариантРаботыМастера <> "ПродолжитьНастройкуОбменаДанными" Тогда
		Возврат Неопределено;
		
	ИначеЕсли ФайлНастроекОбменаДаннымиУспешноЗагружен Тогда
		// Дополнительные проверки при продолжении обмена не требуются.
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Успешный переход далее будет в оповещениях.
	Отказ = Истина;
	
	// Пытаемся передать файл на сервер с запросом установки расширения, без диалога.
	Если ПустаяСтрока(Объект.ИмяФайлаНастроекСинхронизацииДанныхДляЗагрузки) Тогда
		ТекстОшибки = НСтр("ru = 'Выберите файл с настройками синхронизации данных'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.ИмяФайлаНастроекСинхронизацииДанныхДляЗагрузки");
		Возврат Неопределено;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СтраницаМастераНачало_ПриПереходеДалее_Завершение", ЭтотОбъект, Новый Структура);
	ТекстПредупреждения = НСтр("ru = 'Для передачи файла настроек синхронизации данных необходимо установить расширение для веб-клиента 1С:Предприятие.'");
	
	ИменаФайлов = Новый Массив;
	ИменаФайлов.Добавить(Объект.ИмяФайлаНастроекСинхронизацииДанныхДляЗагрузки);
	
	ОбменДаннымиКлиент.ПередатьФайлыНаСервер(Оповещение, ИменаФайлов, УникальныйИдентификатор, ТекстПредупреждения);
КонецФункции

// Описание оповещения завершения передачи файла на сервер.
//
&НаКлиенте
Процедура СтраницаМастераНачало_ПриПереходеДалее_Завершение(Знач РезультатПомещенияФайлов, Знач ДополнительныеПараметры) Экспорт
	
	ЗавершениеВыбораФайлаНастроекОбменаДаннымиДляЗагрузки(РезультатПомещенияФайлов[0], Неопределено);
	
	Если ФайлНастроекОбменаДаннымиУспешноЗагружен Тогда
		// Выполняем успешный переход далее.
		ПерейтиНаШагВпередОтложеннойОбработкой();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораФайлаНастроекОбменаДаннымиДляЗагрузки(Знач РезультатПомещенияФайлов, Знач ДополнительныеПараметры) Экспорт
	
	ОчиститьСообщения();
	
	АдресПомещенногоФайла = РезультатПомещенияФайлов.Хранение;
	ТекстОшибки           = РезультатПомещенияФайлов.ОписаниеОшибки;
	
	Объект.ИмяФайлаНастроекСинхронизацииДанныхДляЗагрузки = РезультатПомещенияФайлов.Имя;
	
	ФайлНастроекОбменаДаннымиУспешноЗагружен = Ложь;
	
	Если ПустаяСтрока(ТекстОшибки) И ПустаяСтрока(АдресПомещенногоФайла) Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка передачи файла настроек синхронизации данных на сервер'");
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		// Успешно передали файл, пытаемся применить установки.
		ОшибкаЗагрузкиПараметровМастера = Ложь;
		// Вызов сервера
		ЗагрузитьПараметрыМастера(ОшибкаЗагрузкиПараметровМастера, АдресПомещенногоФайла);
		Если ОшибкаЗагрузкиПараметровМастера Тогда
			ТекстОшибки = НСтр("ru = 'Указан неправильный файл настроек синхронизации данных. Укажите корректный файл.'");
		Иначе
			ФайлНастроекОбменаДаннымиУспешноЗагружен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.ИмяФайлаНастроекСинхронизацииДанныхДляЗагрузки");
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкаПараметров_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	// Если перешли на страницу дополнительных параметров и не выбрали ни один вид транспорта, то предупреждаем об ошибке.
	Если НЕ    (Объект.ИспользоватьПараметрыТранспортаEMAIL
			ИЛИ Объект.ИспользоватьПараметрыТранспортаFILE
			ИЛИ Объект.ИспользоватьПараметрыТранспортаFTP) Тогда
		
		НСтрока = НСтр("ru = 'Не указаны параметры подключения для синхронизации данных.
						|Следует настроить хотя бы один вариант подключения.'");
		//
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,,, Отказ);
		
		Возврат Неопределено;
	КонецЕсли;
	
	СтраницаМастераНастройкаПараметров_ПриОткрытииНаСервере(Отказ, ПропуститьСтраницу, ЭтоПереходДалее);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкаПараметровДляВнешнегоСоединенияПервойБазы_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Элементы.ОписаниеОграниченийПередачиДанных1.Заголовок = СтрЗаменить(Элементы.ОписаниеОграниченийПередачиДанных1.Заголовок,
																	   "%Программа%", СинонимПланаОбмена);
	
	Элементы.ОписаниеЗначенийПоУмолчанию1.Заголовок = СтрЗаменить(Элементы.ОписаниеЗначенийПоУмолчанию1.Заголовок,
																	   "%Программа%", СинонимПланаОбмена);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкаПараметровДляВнешнегоСоединенияВторойБазы_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Элементы.ОписаниеОграниченийПередачиДанных4.Заголовок = СтрЗаменить(Элементы.ОписаниеОграниченийПередачиДанных4.Заголовок,
																	   "%Программа%", Объект.НаименованиеЭтойБазы);
	
	Элементы.ОписаниеЗначенийПоУмолчанию4.Заголовок = СтрЗаменить(Элементы.ОписаниеЗначенийПоУмолчанию4.Заголовок,
																	   "%Программа%", Объект.НаименованиеЭтойБазы);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераИтогНастройкиОбмена_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если ВариантРаботыМастера = "НастроитьНовыйОбменДанными" Тогда
		
		// Представление результата настройки обмена.
		СтрокаСообщения = НСтр("ru = '%1%2%3Префикс этой информационной базы: %4
		|Префикс второй информационной базы: %5'");
		
		ПредставлениеРезультатаНастройкиОбмена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
							ПредставлениеРезультатаТранспортСообщений(),
							ПредставлениеРезультатаОтборыНаУзле(),
							ПредставлениеРезультатаЗначенияПоУмолчаниюНаУзле(),
							Объект.ПрефиксИнформационнойБазыИсточника,
							Объект.ПрефиксИнформационнойБазыПриемника);
		
	Иначе
		
		// Представление результата настройки обмена.
		СтрокаСообщения = НСтр("ru = '%1%2%3Префикс этой информационной базы: %4'");
		
		ПредставлениеРезультатаНастройкиОбмена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
							ПредставлениеРезультатаТранспортСообщений(),
							ПредставлениеРезультатаОтборыНаУзле(),
							ПредставлениеРезультатаЗначенияПоУмолчаниюНаУзле(),
							Объект.ПрефиксИнформационнойБазыИсточника);
		
	КонецЕсли;
	
	// выводим поясняющую надпись
	Элементы.ГруппаНадписиИнформацииОбОткрытииПомощникаСопоставления.Видимость =
	(ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными" 
	И Не Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы
	И Не Объект.ЭтоНастройкаСтандартногоОбмена);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераИтогНастройкиОбмена_ПриОткрытии_ВнешнееСоединение(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	// Представление результата настройки обмена.
	Если НастройкаОбменаССервисом Тогда
		
		СтрокаСообщения = НСтр("ru = '%1
		|Настройки для этой информационной базы:
		|========================================================
		|%2%3Префикс информационной базы: %4
		|
		|Настройки для приложения, расположенного в сервисе:
		|========================================================
		|%5%6Префикс приложения: %7'");
		
	Иначе
		
		СтрокаСообщения = НСтр("ru = '%1
		|Параметры синхронизации данных для этой программы:
		|========================================================
		|%2%3Префикс информационной базы: %4
		|
		|Параметры синхронизации данных для другой программы::
		|========================================================
		|%5%6Префикс информационной базы: %7'");
		
	КонецЕсли;
	
	ПредставлениеРезультатаНастройкиОбмена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
						ПредставлениеРезультатаТранспортСообщений(),
						ПредставлениеРезультатаОтборыНаУзле(),
						ПредставлениеРезультатаЗначенияПоУмолчаниюНаУзле(),
						Объект.ПрефиксИнформационнойБазыИсточника,
						ПредставлениеРезультатаОтборыНаУзлеБазыКорреспондента(),
						ПредставлениеРезультатаЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(),
						Объект.ПрефиксИнформационнойБазыПриемника);
	
	// выводим поясняющую надпись
	Элементы.ГруппаНадписиИнформацииОбОткрытииПомощникаСопоставления.Видимость = Ложь;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСозданияНастройкиОбменаДанными_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	СтраницаМастераОжиданиеСозданияНастройкиОбменаДанными_ОбработкаДлительнойОперацииНаСервере(Отказ);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСозданияНастройкиОбменаДаннымиЧерезВнешнееСоединение_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	// Создаем настройку обмена через внешнее соединение.
	НастроитьНовыйОбменДаннымиНаСервереЧерезВнешнееСоединение(Отказ, НастройкаОтборовНаУзлеБазыКорреспондента, ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеПроверкиПодключенияВнешнегоСоединения_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	СтраницаМастераОжиданиеПроверкиПодключенияВнешнегоСоединения_ОбработкаДлительнойОперацииНаСервере(Отказ);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНачалоНастройкиОбменаССервисом_ПриПереходеДалее(Отказ)
	
	Если Не ВнешниеРесурсыРазрешены.РазрешенWS Тогда
		ПроверитьКорректностьПараметровПодключенияWS(Отказ);
		
		Если Не Отказ Тогда
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("РазрешитьРесурсЗавершение", ЭтотОбъект, "РазрешенWS");
			Запросы = СоздатьЗапросНаИспользованиеВнешнихРесурсов(Объект, Ложь, Ложь, Истина, Ложь);
			РаботаВБезопасномРежимеКлиент.ПрименитьЗапросыНаИспользованиеВнешнихРесурсов(Запросы, ЭтотОбъект, ОповещениеОЗакрытии);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеПроверкиПодключенияЧерезВебСервис_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ПроверитьПодключениеWSНаКлиенте(Отказ, Истина);
	
КонецФункции

//

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеАнализаДанныхСозданиеНастройкиОбмена_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	// Создание настройки обмена данными:
	//  - создание узлов в этой базе и в корреспонденте с настройками выгрузки данных
	//  - регистрация справочников к выгрузке в этой базе и в корреспонденте.
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ИдентификаторДлительнойОперации = "";
	
	НастроитьНовыйОбменДаннымиНаСервереЧерезВебСервис(Отказ);
	
	Если Отказ Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Возникли ошибки на этапе создания настройки синхронизации данных.
					|Для решения проблем воспользуйтесь журналом регистрации.'"));
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеАнализаДанныхСозданиеНастройкиОбменаДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

//

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщения_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ИдентификаторФайлаСообщенияВСервисе = "";
	ИдентификаторДлительнойОперации = "";
	
	СтруктураДанных = ОбменДаннымиВызовСервера.ПолучитьСообщениеОбменаВоВременныйКаталогИзИнформационнойБазыКорреспондентаЧерезВебСервис(
		Отказ,
		Объект.УзелИнформационнойБазы,
		ИдентификаторФайлаСообщенияВСервисе,
		ДлительнаяОперация,
		ИдентификаторДлительнойОперации,
		Объект.WSПароль);
	
	Если Отказ Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Возникли ошибки на этапе анализа данных.
					|Для решения проблем воспользуйтесь журналом регистрации.'"));
		
	ИначеЕсли Не ДлительнаяОперация Тогда
		
		Объект.ИмяВременногоКаталогаСообщенийОбмена = СтруктураДанных.ИмяВременногоКаталогаСообщенийОбмена;
		Объект.ИмяФайлаСообщенияОбмена              = СтруктураДанных.ИмяФайлаСообщенияОбмена;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщенияДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщенияДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперацияЗавершена Тогда
		
		СтруктураДанных = ОбменДаннымиВызовСервера.ПолучитьСообщениеОбменаВоВременныйКаталогИзИнформационнойБазыКорреспондентаЧерезВебСервисЗавершениеДлительнойОперации(
			Отказ,
			Объект.УзелИнформационнойБазы,
			ИдентификаторФайлаСообщенияВСервисе,
			Объект.WSПароль);
		
		Если Отказ Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Возникли ошибки на этапе анализа данных.
						|Для решения проблем воспользуйтесь журналом регистрации.'"));
			
		Иначе
			
			Объект.ИмяВременногоКаталогаСообщенийОбмена = СтруктураДанных.ИмяВременногоКаталогаСообщенийОбмена;
			Объект.ИмяФайлаСообщенияОбмена              = СтруктураДанных.ИмяФайлаСообщенияОбмена;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеАнализаДанныхАвтоматическоеСопоставление_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	СтраницаМастераОжиданиеАнализаДанныхАвтоматическоеСопоставление_ОбработкаДлительнойОперации(Отказ);
	
	Если Отказ Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Возникли ошибки на этапе анализа данных.'"));
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СтраницаМастераОжиданиеАнализаДанныхАвтоматическоеСопоставление_ОбработкаДлительнойОперации(Отказ)
	
	ПомощникИнтерактивногоОбменаДанными = Обработки.ПомощникИнтерактивногоОбменаДанными.Создать();
	
	ЗаполнитьЗначенияСвойств(ПомощникИнтерактивногоОбменаДанными, Объект,, "ИнформацияСтатистики");
	
	ПомощникИнтерактивногоОбменаДанными.ИнформацияСтатистики.Загрузить(Объект.ИнформацияСтатистики.Выгрузить());
	
	ПомощникИнтерактивногоОбменаДанными.ВыполнитьАнализСообщенияОбмена(Отказ);
	
	ПомощникИнтерактивногоОбменаДанными.ВыполнитьАвтоматическоеСопоставлениеПоУмолчаниюИПолучитьСтатистикуСопоставления(Отказ);
	
	Если Не Отказ Тогда
		
		ТаблицаИнформацииСтатистики = ПомощникИнтерактивногоОбменаДанными.ТаблицаИнформацииСтатистики();
		
		// Удаляем строки, в которых сопоставление 100%.
		ОбратныйИндекс = ТаблицаИнформацииСтатистики.Количество() - 1;
		
		Пока ОбратныйИндекс >= 0 Цикл
			
			СтрокаТаблицы = ТаблицаИнформацииСтатистики[ОбратныйИндекс];
			
			Если СтрокаТаблицы.КоличествоОбъектовНесопоставленных = 0 Тогда
				
				ТаблицаИнформацииСтатистики.Удалить(СтрокаТаблицы);
				
			КонецЕсли;
			
			ОбратныйИндекс = ОбратныйИндекс - 1;
		КонецЦикла;
		
		Объект.ИнформацияСтатистики.Загрузить(ТаблицаИнформацииСтатистики);
		
		ПолучитьДеревоИнформацииСтатистики(ТаблицаИнформацииСтатистики);
		
		УстановитьВидимостьГруппыДополнительнойИнформации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГруппыДополнительнойИнформации()
	
	// Если в таблице информации статистике есть хотя бы одна строка с сопоставлением меньшим 100%,
	// то группу дополнительной информации делаем видимой.
	МассивСтрок = Объект.ИнформацияСтатистики.НайтиСтроки(Новый Структура("ИндексКартинки", 1));
	
	ВсеДанныеСопоставлены = (МассивСтрок.Количество() = 0);
	
	Элементы.СтраницыСтатусаСопоставленияДанных.ТекущаяСтраница = ?(ВсеДанныеСопоставлены,
				Элементы.СтатусСопоставленияВсеДанныеСопоставлены,
				Элементы.СтатусСопоставленияЕстьНесопоставленныеДанные);
	
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_СтраницаМастераСопоставлениеДанных_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если ЭтоПереходДалее И ВсеДанныеСопоставлены Тогда
		
		ПропуститьСтраницу = Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераСопоставлениеДанных_ПриПереходеДалее(Отказ)
	
	Если Не ВсеДанныеСопоставлены Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Продолжить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		Сообщение = НСтр("ru = 'Не все данные сопоставлены. Наличие несопоставленных данных
							   |может привести к появлению одинаковых элементов справочников (дублей).
							   |Продолжить?'");
							   
		Если Не ПользовательОтветилДаНаВопросОСопоставлении Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветПользователяПриСопоставлении", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, Сообщение, Кнопки,, КодВозвратаДиалога.Нет);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОтветПользователяПриСопоставлении(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПользовательОтветилДаНаВопросОСопоставлении = Истина;
		ИзменитьПорядковыйНомерПерехода(+1);
		
	КонецЕсли;
	
КонецПроцедуры

//

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииСправочниковЗагрузка_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	СтраницаМастераОжиданиеСинхронизацииСправочниковЗагрузка_ОбработкаДлительнойОперации();
	
КонецФункции

&НаСервере
Процедура СтраницаМастераОжиданиеСинхронизацииСправочниковЗагрузка_ОбработкаДлительнойОперации()
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ИдентификаторДлительнойОперации = "";
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("УзелИнформационнойБазы", Объект.УзелИнформационнойБазы);
	ПараметрыМетода.Вставить("ИмяФайлаСообщенияОбмена", Объект.ИмяФайлаСообщенияОбмена);
	Попытка
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.ПомощникСозданияОбменаДанными.ВыполнитьЗагрузкуСправочников",
			ПараметрыМетода,
			НСтр("ru = 'Загрузка справочников из сообщения обмена'"));
		Если Не Результат.ЗаданиеВыполнено Тогда
			
			ДлительнаяОперация = Истина;
			ИдентификаторДлительнойОперации = Результат.ИдентификаторЗадания;
			
		КонецЕсли;
	Исключение
		ОбменДаннымиВызовСервера.ЗафиксироватьЗавершениеОбменаСОшибкой(
			Объект.УзелИнформационнойБазы,
			"ЗагрузкаДанных",
			ТекущаяДатаСеанса(),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииСправочниковЗагрузкаДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияФоновогоЗадания", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузка_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ИдентификаторФайлаСообщенияВСервисе = "";
	ИдентификаторДлительнойОперации = "";
	
	СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузка_ОбработкаДлительнойОперации(
											Отказ,
											Объект.УзелИнформационнойБазы,
											ДлительнаяОперация,
											ИдентификаторДлительнойОперации,
											ИдентификаторФайлаСообщенияВСервисе,
											ДатаНачалаОперации,
											Объект.WSПароль);
	
	Если Отказ Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Возникли ошибки на этапе синхронизации справочников.
					|Для решения проблем воспользуйтесь журналом регистрации.'"));
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузка_ОбработкаДлительнойОперации(
											Отказ,
											УзелИнформационнойБазы,
											ДлительнаяОперация,
											ИдентификаторОперации,
											ИдентификаторФайла,
											ДатаНачалаОперации,
											Пароль)
	
	ДатаНачалаОперации = ТекущаяДатаСеанса();
	
	// Запускаем выполнение обмена.
	ПараметрыОбмена = ОбменДаннымиСервер.ПараметрыОбмена();
	ПараметрыОбмена.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.WS;
	ПараметрыОбмена.ВыполнятьЗагрузку = Ложь;
	ПараметрыОбмена.ВыполнятьВыгрузку = Истина;
	
	ПараметрыОбмена.ДлительнаяОперацияРазрешена = Истина;
	ПараметрыОбмена.ДлительнаяОперация          = ДлительнаяОперация;
	ПараметрыОбмена.ИдентификаторОперации       = ИдентификаторОперации;
	ПараметрыОбмена.ИдентификаторФайла          = ИдентификаторФайла;
	ПараметрыОбмена.ПараметрыАутентификации     = Пароль;
	
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(УзелИнформационнойБазы, ПараметрыОбмена, Отказ);
	
	ДлительнаяОперация    = ПараметрыОбмена.ДлительнаяОперация;
	ИдентификаторОперации = ПараметрыОбмена.ИдентификаторОперации;
	ИдентификаторФайла    = ПараметрыОбмена.ИдентификаторФайла;
	Пароль                = ПараметрыОбмена.ПараметрыАутентификации;
	
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузкаДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузкаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперацияЗавершена Тогда
		
		ОбменДаннымиВызовСервера.ЗафиксироватьВыполнениеВыгрузкиДанныхВРежимеДлительнойОперации(Объект.УзелИнформационнойБазы, ДатаНачалаОперации);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСохраненияНастроек_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	// Обновление настройки обмена данными в этой базе и корреспонденте:
	//  - обновление информации значений по умолчанию в узлах планов обмена
	//  - регистрация всех данных, кроме справочников и ПВХ к выгрузке в этой базе и в корреспонденте.
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ИдентификаторДлительнойОперации = "";
	
	ОбновитьНастройкиОбменаДанными(Отказ);
	
	Если Отказ Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Возникли ошибки на этапе сохранения настроек.
					|Для решения проблем воспользуйтесь журналом регистрации.'"));
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСохраненияНастроекДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

//

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузка_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ИдентификаторФайлаСообщенияВСервисе = "";
	ИдентификаторДлительнойОперации = "";
	
	СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузка_ОбработкаДлительнойОперации(
											Отказ,
											Объект.УзелИнформационнойБазы,
											ДлительнаяОперация,
											ИдентификаторДлительнойОперации,
											ИдентификаторФайлаСообщенияВСервисе,
											ДатаНачалаОперации,
											Объект.WSПароль);
	
	Если Отказ Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Возникли ошибки на этапе синхронизации данных.
					|Для решения проблем воспользуйтесь журналом регистрации.'"));
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузка_ОбработкаДлительнойОперации(
											Отказ,
											УзелИнформационнойБазы,
											ДлительнаяОперация,
											ИдентификаторОперации,
											ИдентификаторФайла,
											ДатаНачалаОперации,
											Пароль)
	
	ДатаНачалаОперации = ТекущаяДатаСеанса();
	
	// Запускаем выполнение обмена.
	ПараметрыОбмена = ОбменДаннымиСервер.ПараметрыОбмена();
	ПараметрыОбмена.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.WS;
	ПараметрыОбмена.ВыполнятьЗагрузку = Истина;
	ПараметрыОбмена.ВыполнятьВыгрузку = Ложь;
	
	ПараметрыОбмена.ДлительнаяОперацияРазрешена = Истина;
	ПараметрыОбмена.ДлительнаяОперация          = ДлительнаяОперация;
	ПараметрыОбмена.ИдентификаторОперации       = ИдентификаторОперации;
	ПараметрыОбмена.ИдентификаторФайла          = ИдентификаторФайла;
	ПараметрыОбмена.ПараметрыАутентификации     = Пароль;
	
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(УзелИнформационнойБазы, ПараметрыОбмена, Отказ);
	
	ДлительнаяОперация    = ПараметрыОбмена.ДлительнаяОперация;
	ИдентификаторОперации = ПараметрыОбмена.ИдентификаторОперации;
	ИдентификаторФайла    = ПараметрыОбмена.ИдентификаторФайла;
	Пароль                = ПараметрыОбмена.ПараметрыАутентификации;
	
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузкаДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузкаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации()
	
	ДлительнаяОперация = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузкаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузкаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации();
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузкаДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияФоновогоЗадания", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузка_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ИдентификаторФайлаСообщенияВСервисе = "";
	ИдентификаторДлительнойОперации = "";
	
	СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузка_ОбработкаДлительнойОперации(
											Отказ,
											Объект.УзелИнформационнойБазы,
											ДлительнаяОперация,
											ИдентификаторДлительнойОперации,
											ИдентификаторФайлаСообщенияВСервисе,
											ДатаНачалаОперации,
											Объект.WSПароль);
	
	Если Отказ Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Возникли ошибки на этапе синхронизации данных.
					|Для решения проблем воспользуйтесь журналом регистрации.'"));
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузка_ОбработкаДлительнойОперации(
											Отказ,
											УзелИнформационнойБазы,
											ДлительнаяОперация,
											ИдентификаторОперации,
											ИдентификаторФайла,
											ДатаНачалаОперации,
											Пароль)
	
	ДатаНачалаОперации = ТекущаяДатаСеанса();
	
	// Запускаем выполнение обмена.
	ПараметрыОбмена = ОбменДаннымиСервер.ПараметрыОбмена();
	ПараметрыОбмена.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.WS;
	ПараметрыОбмена.ВыполнятьЗагрузку = Ложь;
	ПараметрыОбмена.ВыполнятьВыгрузку = Истина;
	
	ПараметрыОбмена.ДлительнаяОперацияРазрешена = Истина;
	ПараметрыОбмена.ДлительнаяОперация          = ДлительнаяОперация;
	ПараметрыОбмена.ИдентификаторОперации       = ИдентификаторОперации;
	ПараметрыОбмена.ИдентификаторФайла          = ИдентификаторФайла;
	ПараметрыОбмена.ПараметрыАутентификации     = Пароль;
	
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(УзелИнформационнойБазы, ПараметрыОбмена, Отказ);
	
	ДлительнаяОперация    = ПараметрыОбмена.ДлительнаяОперация;
	ИдентификаторОперации = ПараметрыОбмена.ИдентификаторОперации;
	ИдентификаторФайла    = ПараметрыОбмена.ИдентификаторФайла;
	Пароль                = ПараметрыОбмена.ПараметрыАутентификации;
	
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузкаДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузкаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперацияЗавершена Тогда
		
		ОбменДаннымиВызовСервера.ЗафиксироватьВыполнениеВыгрузкиДанныхВРежимеДлительнойОперации(Объект.УзелИнформационнойБазы, ДатаНачалаОперации);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкиОтраженияДокументовВУчете_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если ЭтоПереходДалее Тогда
		
		ТипСоединения = "ВебСервис";
		
		ПроверитьНастройкиПараметровУчетаНаСервере(
										Ложь,
										ТипСоединения,
										Объект.ИмяПланаОбмена,
										СтруктураПараметровПодключенияВнешнегоСоединения(ТипСоединения),
										ПропуститьСтраницу);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкиОтраженияДокументовВУчете_ПриПереходеДалее(Отказ)
	
	ТипСоединения = "ВебСервис";
	
	ПроверитьНастройкиПараметровУчетаНаСервере(
									Отказ,
									ТипСоединения,
									Объект.ИмяПланаОбмена,
									СтруктураПараметровПодключенияВнешнегоСоединения(ТипСоединения),
									Ложь);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераПараметрыПолученияДанных_ПриПереходеДалее(Отказ)
	
	ТипСоединения = "ВебСервис";
	
	ПроверитьПравилаПолученияДанных(Отказ, ТипСоединения);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераСозданиеОбменаДаннымиУспешноЗавершено_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	ПредопределенноеРасписаниеОбменаДаннымиПриИзмененииЗначения();
	
	ВыполнятьОбменДаннымиАвтоматическиПриИзмененииЗначения();
	
КонецФункции

//

&НаКлиенте
Процедура ПроверитьПравилаПолученияДанных(Отказ, ТипСоединения)
	
	Если ПредусмотреныЗначенияПоУмолчаниюНаУзле Тогда
		
		// Проверяем заполнение реквизитов в форме дополнительных настроек.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияПоУмолчаниюНаУзле", ЗначенияПоУмолчаниюНаУзле);
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиЗначенийПоУмолчанию, ПараметрыФормы, "ОписаниеЗначенийПоУмолчанию");
		
	КонецЕсли;
	
	Если ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента Тогда
		
		// Проверяем заполнение реквизитов в форме дополнительных настроек.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения", СтруктураПараметровПодключенияВнешнегоСоединения(ТипСоединения));
		ПараметрыФормы.Вставить("ЗначенияПоУмолчаниюНаУзле", ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента);
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента, ПараметрыФормы, "ОписаниеЗначенийПоУмолчаниюБазыКорреспондента");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНастройкиПараметровУчетаНаСервере(
									Отказ,
									Знач ТипСоединения,
									Знач ИмяПланаОбмена,
									ПараметрыПодключения,
									ПропуститьСтраницу)
	
	СообщениеОбОшибке = "";
	СообщениеОбОшибкеКорреспондента = "";
	
	КодУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.УзелИнформационнойБазы, "Код");
	
	НастройкиПараметровУчетаЗаданы = ОбменДаннымиСервер.НастройкиПараметровУчетаВСистемеУстановлены(ИмяПланаОбмена, КодУзла, СообщениеОбОшибке);
	
	Если ТипСоединения = "ВебСервис" Тогда
		
		СтрокаСообщенияОбОшибке = "";
		
		Если Объект.ВерсияКорреспондента_2_1_1_7 Тогда
			
			WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси_2_1_1_7(ПараметрыПодключения, СтрокаСообщенияОбОшибке);
			
		ИначеЕсли Объект.ВерсияКорреспондента_2_0_1_6 Тогда
			
			WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси_2_0_1_6(ПараметрыПодключения, СтрокаСообщенияОбОшибке);
			
		Иначе
			
			WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси(ПараметрыПодключения, СтрокаСообщенияОбОшибке);
			
		КонецЕсли;
		
		Если WSПрокси = Неопределено Тогда
			ОбменДаннымиСервер.СообщитьОбОшибке(СтрокаСообщенияОбОшибке, Отказ);
			Возврат;
		КонецЕсли;
		
		КодУзла = ОбменДаннымиВызовСервера.ПолучитьКодЭтогоУзлаДляПланаОбмена(Объект.ИмяПланаОбмена);
		
		// Получаем параметры второй информационной базы.
		Если Объект.ВерсияКорреспондента_2_1_1_7 Тогда
			
			ПараметрыПриемника = СериализаторXDTO.ПрочитатьXDTO(WSПрокси.GetIBParameters(ИмяПланаОбмена, КодУзла, СообщениеОбОшибкеКорреспондента));
			
		ИначеЕсли Объект.ВерсияКорреспондента_2_0_1_6 Тогда
			
			ПараметрыПриемника = СериализаторXDTO.ПрочитатьXDTO(WSПрокси.GetIBParameters(ИмяПланаОбмена, КодУзла, СообщениеОбОшибкеКорреспондента));
			
		Иначе
			
			ПараметрыПриемника = ЗначениеИзСтрокиВнутр(WSПрокси.GetIBParameters(ИмяПланаОбмена, КодУзла, СообщениеОбОшибкеКорреспондента));
			
		КонецЕсли;
		
		НастройкиПараметровУчетаКорреспондентаЗаданы = ПараметрыПриемника.НастройкиПараметровУчетаЗаданы;
		
	ИначеЕсли ТипСоединения = "ВнешнееСоединение" Тогда
		
		ПараметрыТранспорта = ОбменДаннымиСервер.НастройкиТранспортаПоПараметрамВнешнегоСоединения(ПараметрыПодключения);
		Подключение = ОбменДаннымиСервер.УстановитьВнешнееСоединениеСБазой(ПараметрыПодключения);
		СтрокаСообщенияОбОшибке = Подключение.ПодробноеОписаниеОшибки;
		ВнешнееСоединение       = Подключение.Соединение;
		
		Если ВнешнееСоединение = Неопределено Тогда
			ОбменДаннымиСервер.СообщитьОбОшибке(СтрокаСообщенияОбОшибке, Отказ);
			Возврат;
		КонецЕсли;
		
		КодУзла = ОбменДаннымиВызовСервера.ПолучитьКодЭтогоУзлаДляПланаОбмена(Объект.ИмяПланаОбмена);
		
		// Получаем параметры второй информационной базы.
		Если Объект.ВерсияКорреспондента_2_1_1_7 Тогда
			
			ПараметрыПриемника = ОбщегоНазначения.ЗначениеИзСтрокиXML(ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьПараметрыИнформационнойБазы_2_0_1_6(ИмяПланаОбмена, КодУзла, СообщениеОбОшибкеКорреспондента));
			
		ИначеЕсли Объект.ВерсияКорреспондента_2_0_1_6 Тогда
			
			ПараметрыПриемника = ОбщегоНазначения.ЗначениеИзСтрокиXML(ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьПараметрыИнформационнойБазы_2_0_1_6(ИмяПланаОбмена, КодУзла, СообщениеОбОшибкеКорреспондента));
			
		Иначе
			
			ПараметрыПриемника = ЗначениеИзСтрокиВнутр(ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьПараметрыИнформационнойБазы(ИмяПланаОбмена, КодУзла, СообщениеОбОшибкеКорреспондента));
			
		КонецЕсли;
		
		НастройкиПараметровУчетаКорреспондентаЗаданы = ПараметрыПриемника.НастройкиПараметровУчетаЗаданы;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиПараметровУчетаЗаданы И НастройкиПараметровУчетаКорреспондентаЗаданы Тогда
		ПропуститьСтраницу = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не НастройкиПараметровУчетаЗаданы Тогда
		
		Если ПустаяСтрока(СообщениеОбОшибке) Тогда
			СообщениеОбОшибке = НСтр("ru = 'Не заданы параметры учета в этой программе.'");
		КонецЕсли;
		
		НадписьНастройкиПараметровУчета = СообщениеОбОшибке;
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Не НастройкиПараметровУчетаКорреспондентаЗаданы Тогда
		
		Если ПустаяСтрока(СообщениеОбОшибкеКорреспондента) Тогда
			СообщениеОбОшибкеКорреспондента = НСтр("ru = 'Не заданы параметры учета в приложении, расположенном в Интернете.'");
		КонецЕсли;
		
		НадписьНастройкиПараметровУчетаКорреспондента = СообщениеОбОшибкеКорреспондента;
		Отказ = Истина;
		
	КонецЕсли;
	
	Элементы.НастройкиПараметровУчета.Видимость = Не НастройкиПараметровУчетаЗаданы;
	Элементы.НастройкиПараметровУчетаКорреспондента.Видимость = Не НастройкиПараметровУчетаКорреспондентаЗаданы;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаданиеНастроекДляПервойБазы(Отказ, ТипСоединения = "ВебСервис")
	
	Если ПустаяСтрока(Объект.НаименованиеЭтойБазы) Тогда
		
		НСтрока = НСтр("ru = 'Укажите наименование этой программы.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.НаименованиеЭтойБазы",, Отказ);
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.НаименованиеВторойБазы) Тогда
		
		НСтрока = НСтр("ru = 'Укажите наименование приложения в Интернете.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.НаименованиеВторойБазы",, Отказ);
		
	КонецЕсли;
	
	Если СокрЛП(Объект.ПрефиксИнформационнойБазыИсточника) = СокрЛП(Объект.ПрефиксИнформационнойБазыПриемника) Тогда
		
		НСтрока = НСтр("ru = 'Префиксы информационных баз должны быть различными.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.ПрефиксИнформационнойБазыИсточника",, Отказ);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.ПрефиксИнформационнойБазыПриемника",, Отказ);
		
		Элементы.ПрефиксИнформационнойБазыИсточникаОбменССервисом.Видимость = Истина;
		Элементы.ПрефиксИнформационнойБазыИсточникаОбменССервисом.Доступность = Истина;
		Элементы.ПрефиксИнформационнойБазыПриемникаОбменССервисом.Видимость = Истина;
		
		Элементы.ПрефиксИнформационнойБазыИсточникаОбменЧерезВебСервис.Видимость = Истина;
		Элементы.ПрефиксИнформационнойБазыИсточникаОбменЧерезВебСервис.Доступность = Истина;
		Элементы.ПрефиксИнформационнойБазыПриемникаОбменЧерезВебСервис.Видимость = Истина;
		Элементы.ПрефиксИнформационнойБазыПриемникаОбменЧерезВебСервис.Доступность = Истина;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ПредусмотреныНастройкиОтборовНаУзле Тогда
		
		// Проверяем заполнение реквизитов в форме.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПараметрыПодключения", СтруктураПараметровПодключенияВнешнегоСоединения(ТипСоединения));
		ПараметрыФормы.Вставить("Настройки", КонтекстФормыНастройкиУзлов);
		ПараметрыФормы.Вставить("ПроверкаЗаполнения");
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиУзлов, ПараметрыФормы, "ОписаниеНастроекВыгрузкиДанных");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаданиеНастроекДляВторойБазы(Отказ, ТипСоединения)
	
	Если ПустаяСтрока(Объект.НаименованиеВторойБазы) Тогда
		
		НСтрока = НСтр("ru = 'Укажите наименование программы.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.НаименованиеВторойБазы",, Отказ);
		
	КонецЕсли;
	
	Если СокрЛП(Объект.ПрефиксИнформационнойБазыИсточника) = СокрЛП(Объект.ПрефиксИнформационнойБазыПриемника) Тогда
		
		НСтрока = НСтр("ru = 'Префиксы информационных баз должны быть различными.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.ПрефиксИнформационнойБазыПриемника",, Отказ);
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ПредусмотреныНастройкиОтборовНаУзлеБазыКорреспондента Тогда
		
		// Проверяем заполнение реквизитов в форме настроек ограничения миграции данных.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения", СтруктураПараметровПодключенияВнешнегоСоединения(ТипСоединения));
		ПараметрыФормы.Вставить("НастройкаОтборовНаУзле", НастройкаОтборовНаУзлеБазыКорреспондента);
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиУзлаБазыКорреспондента, ПараметрыФормы, "ОписаниеОграниченийПередачиДанныхБазыКорреспондента");
		
	КонецЕсли;
	
	Если ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента Тогда
		
		// Проверяем заполнение реквизитов в форме дополнительных настроек.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения", СтруктураПараметровПодключенияВнешнегоСоединения(ТипСоединения));
		ПараметрыФормы.Вставить("ЗначенияПоУмолчаниюНаУзле", ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента);
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента, ПараметрыФормы, "ОписаниеЗначенийПоУмолчаниюБазыКорреспондента");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтраницаМастераЗаданиеПараметровТранспортаFILE_ПриПереходеДалееНаСервере(Отказ)
	
	ОбменДаннымиСервер.ПроверитьПодключениеОбработкиТранспортаСообщенийОбмена(Отказ, Объект, Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	
КонецПроцедуры

&НаСервере
Процедура СтраницаМастераЗаданиеПараметровТранспортаFTP_ПриПереходеДалееНаСервере(Отказ)
	
	ОбменДаннымиСервер.ПроверитьПодключениеОбработкиТранспортаСообщенийОбмена(Отказ, Объект, Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
	
КонецПроцедуры

&НаСервере
Процедура СтраницаМастераЗаданиеПараметровТранспортаEMAIL_ПриПереходеДалееНаСервере(Отказ)
	
	Если Объект.ИспользоватьПараметрыТранспортаEMAIL Тогда
		
		ОбменДаннымиСервер.ПроверитьПодключениеОбработкиТранспортаСообщенийОбмена(Отказ, Объект, Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтраницаМастераНастройкаПараметров_ПриПереходеДалееНаСервере(Отказ)
	
	Если Не ПланыОбмена[Объект.ИмяПланаОбмена].НайтиПоКоду(ОбменДаннымиСервер.КодУзлаПланаОбменаСтрокой(Объект.ПрефиксИнформационнойБазыПриемника)).Пустая() Тогда
		
		НСтрока = НСтр("ru = 'Значение префикса второй информационной базы не уникально.
			|В системе уже существует синхронизация данных для информационной базы (программы) с указанным префиксом.
			|Измените значение префикса или используйте существующую синхронизацию.'");
		//
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.ПрефиксИнформационнойБазыПриемника",, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтраницаМастераНастройкаПараметров_ПриОткрытииНаСервере(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	// Заполняем список выбора транспортов обмена из доступных видов (выбранных пользователем).
	СписокЗначений = Новый СписокЗначений;
	
	Если Объект.ИспользоватьПараметрыТранспортаFILE Тогда
		ЗначениеПеречисления = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
		СписокЗначений.Добавить(ЗначениеПеречисления, Строка(ЗначениеПеречисления));
	КонецЕсли;
	
	Если Объект.ИспользоватьПараметрыТранспортаFTP Тогда
		ЗначениеПеречисления = Перечисления.ВидыТранспортаСообщенийОбмена.FTP;
		СписокЗначений.Добавить(ЗначениеПеречисления, Строка(ЗначениеПеречисления));
	КонецЕсли;
	
	Если Объект.ИспользоватьПараметрыТранспортаEMAIL Тогда
		ЗначениеПеречисления = Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL;
		СписокЗначений.Добавить(ЗначениеПеречисления, Строка(ЗначениеПеречисления));
	КонецЕсли;
	
	СписокВыбора = Элементы.ВидТранспортаСообщенийОбмена.СписокВыбора;
	СписокВыбора.Очистить();
	
	Для Каждого Элемент Из СписокЗначений Цикл
		
		ЗаполнитьЗначенияСвойств(СписокВыбора.Добавить(), Элемент);
		
	КонецЦикла;
	
	Элементы.ГруппаСпособПодключения.Видимость = СписокВыбора.Количество() > 1;
	
	// Устанавливаем вид транспорта сообщений обмена по умолчанию
	// в зависимости от тех видов транспорта, которые были выбраны пользователем.
	Если Объект.ИспользоватьПараметрыТранспортаFILE Тогда
		
		Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
		
	ИначеЕсли Объект.ИспользоватьПараметрыТранспортаFTP Тогда
		
		Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FTP;
		
	ИначеЕсли Объект.ИспользоватьПараметрыТранспортаEMAIL Тогда
		
		Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL;
		
	КонецЕсли;
	
	Элементы.ОписаниеОграниченийПередачиДанных.Заголовок = СтрЗаменить(Элементы.ОписаниеОграниченийПередачиДанных.Заголовок,
																	   "%Программа%", СинонимПланаОбмена);
	Элементы.ОписаниеОграниченийПередачиДанных2.Заголовок = Элементы.ОписаниеОграниченийПередачиДанных.Заголовок;
	
	Элементы.ОписаниеЗначенийПоУмолчанию.Заголовок = СтрЗаменить(Элементы.ОписаниеЗначенийПоУмолчанию.Заголовок,
																 "%Программа%", СинонимПланаОбмена);
	Элементы.ОписаниеЗначенийПоУмолчанию2.Заголовок = Элементы.ОписаниеЗначенийПоУмолчанию.Заголовок;
	
КонецПроцедуры

&НаСервере
Процедура СтраницаМастераОжиданиеСозданияНастройкиОбменаДанными_ОбработкаДлительнойОперацииНаСервере(Отказ)
	
	// создаем настройку обмена
	НастроитьНовыйОбменДаннымиНаСервере(Отказ, НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Выгружаем файл с настройками для второй ИБ.
	Если Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы Тогда
		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		
		ОбработкаОбъект.ВыполнитьВыгрузкуПараметровМастераВКонстанту(Отказ);
		
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		
	ИначеЕсли Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FILE Тогда
		
		АдресВременногоХранилища = "";
		
		ВыгрузитьНастройкиОбменаДляПриемника(Отказ, АдресВременногоХранилища);
		
		Если Не Отказ Тогда
			
			Объект.ИмяФайлаНастроекСинхронизацииДанных = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(Объект.FILEКаталогОбменаИнформацией, ИмяФайлаНастроекДляПриемника);
			
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
			
			УдалитьИзВременногоХранилища(АдресВременногоХранилища);
			
			// получаем файл
			ДвоичныеДанные.Записать(Объект.ИмяФайлаНастроекСинхронизацииДанных);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ВыполнитьОбменДаннымиСейчас21.Заголовок = СтрЗаменить(Элементы.ВыполнитьОбменДаннымиСейчас21.Заголовок, "%Программа%", СинонимПланаОбмена);
	
КонецПроцедуры

&НаСервере
Процедура СтраницаМастераОжиданиеПроверкиПодключенияВнешнегоСоединения_ОбработкаДлительнойОперацииНаСервере(Отказ)
	
	Если Объект.COMВариантРаботыИнформационнойБазы = 0 Тогда
		
		Если ПустаяСтрока(Объект.COMКаталогИнформационнойБазы) Тогда
			
			НСтрока = НСтр("ru = 'Укажите каталог информационной базы.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.COMКаталогИнформационнойБазы",, Отказ);
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Если ПустаяСтрока(Объект.COMИмяСервера1СПредприятия) Тогда
			
			НСтрока = НСтр("ru = 'Укажите имя кластера серверов.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.COMИмяСервера1СПредприятия",, Отказ);
			Отказ = Истина;
			Возврат;
			
		ИначеЕсли ПустаяСтрока(Объект.COMИмяИнформационнойБазыНаСервере1СПредприятия) Тогда
			
			НСтрока = НСтр("ru = 'Укажите имя информационной базы.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.COMИмяИнформационнойБазыНаСервере1СПредприятия",, Отказ);
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ОбменДаннымиСервер.УстановитьВнешнееСоединениеСБазой(Объект);
	ВнешнееСоединение = Результат.Соединение;
	ОшибкаПодключенияКомпоненты = Результат.ОшибкаПодключенияКомпоненты;
	Если ВнешнееСоединение = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.КраткоеОписаниеОшибки,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	// {Обработчик: ПриПодключенииККорреспонденту} Начало
	ВерсияКонфигурацииКорреспондента = ВнешнееСоединение.Метаданные.Версия;
	
	ПриПодключенииККорреспонденту(Отказ, ВерсияКонфигурацииКорреспондента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// {Обработчик: ПриПодключенииККорреспонденту} Окончание
	
	ВерсииКорреспондента = ОбменДаннымиСервер.ВерсииКорреспондентаЧерезВнешнееСоединение(ВнешнееСоединение);
	
	Объект.ВерсияКорреспондента_2_0_1_6 = (ВерсииКорреспондента.Найти("2.0.1.6") <> Неопределено);
	Объект.ВерсияКорреспондента_2_1_1_7 = (ВерсииКорреспондента.Найти("2.1.1.7") <> Неопределено);
	
	Попытка
		ПланОбменаСуществует = ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПланОбменаСуществует(Объект.ИмяПланаОбмена);
	Исключение
		ПланОбменаСуществует = Ложь;
	КонецПопытки;
	
	Если Не ПланОбменаСуществует Тогда
		
		Сообщение = НСтр("ru = 'Синхронизация данных с указанной программой не предусмотрена.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
		Возврат;
		
	КонецЕсли;
	
	Если НРег(СтрокаСоединенияИнформационнойБазы()) = НРег(ВнешнееСоединение.СтрокаСоединенияИнформационнойБазы()) Тогда
		
		Сообщение = НСтр("ru = 'Заданы настройки подключения к этой информационной базе.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
		Возврат;
		
	КонецЕсли;
	
	Объект.ПрефиксИнформационнойБазыПриемника           = ВнешнееСоединение.ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
	Объект.ПрефиксИнформационнойБазыПриемникаУстановлен = ЗначениеЗаполнено(Объект.ПрефиксИнформационнойБазыПриемника);
	
	// Проверка на существование обмена с базой-корреспондентом.
	ПроверитьНаличиеСуществующегоОбменаДаннымиСВторойБазой(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.ПрефиксИнформационнойБазыПриемникаУстановлен Тогда
		Объект.ПрефиксИнформационнойБазыПриемника = ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПрефиксИнформационнойБазыПоУмолчанию();
	КонецЕсли;
	
	Элементы.ПрефиксИнформационнойБазыПриемника.Видимость = Не Объект.ПрефиксИнформационнойБазыПриемникаУстановлен;
	
	Объект.НаименованиеВторойБазы = ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.НаименованиеПредопределенногоУзлаПланаОбмена(Объект.ИмяПланаОбмена);
	ЗаданоНаименованиеВторойБазы = Не ПустаяСтрока(Объект.НаименованиеВторойБазы);
	
	Элементы.НаименованиеВторойБазы2.ТолькоПросмотр = ЗаданоНаименованиеВторойБазы;
	
	Если Не ЗаданоНаименованиеВторойБазы Тогда
		
		Объект.НаименованиеВторойБазы = ВнешнееСоединение.ОбменДаннымиПовтИсп.ИмяЭтойИнформационнойБазы();
		
	КонецЕсли;
	
	ФормаНастройкиУзла = "";
	ФормаНастройкиУзлаБазыКорреспондента = "";
	ФормаНастройкиЗначенийПоУмолчанию = "";
	ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента = "";
	ФормаНастройкиУзлов = "";
	
	НастройкаОтборовНаУзле    = ОбменДаннымиСервер.НастройкаОтборовНаУзле(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, ФормаНастройкиУзла, Объект.ВариантНастройкиОбмена);
	ЗначенияПоУмолчаниюНаУзле = ОбменДаннымиСервер.ЗначенияПоУмолчаниюНаУзле(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, ФормаНастройкиЗначенийПоУмолчанию, Объект.ВариантНастройкиОбмена);
	
	НастройкаОтборовНаУзлеБазыКорреспондента    = ОбменДаннымиСервер.НастройкаОтборовНаУзлеБазыКорреспондента(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, ФормаНастройкиУзлаБазыКорреспондента, Объект.ВариантНастройкиОбмена);
	ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента = ОбменДаннымиСервер.ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента, Объект.ВариантНастройкиОбмена);
	
	ПредусмотреныНастройкиОтборовНаУзлеБазыКорреспондента    = НастройкаОтборовНаУзлеБазыКорреспондента.Количество() > 0
		И ОбменДаннымиСервер.ЗначениеНастройкиПланаОбмена(Объект.ИмяПланаОбмена, "ОтображатьНастройкуОтборовНаУзлеБазыКорреспондента", Объект.ВариантНастройкиОбмена);
	ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента = ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента.Количество() > 0
		И ОбменДаннымиСервер.ЗначениеНастройкиПланаОбмена(Объект.ИмяПланаОбмена, "ОтображатьЗначенияПоУмолчаниюНаУзлеБазыКорреспондента", Объект.ВариантНастройкиОбмена);
	
	Элементы.РамкаГруппыОграничений4.Видимость                          = ПредусмотреныНастройкиОтборовНаУзлеБазыКорреспондента;
	Элементы.РамкаГруппыЗначенийПоУмолчанию4.Видимость                  = ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента;
	Элементы.РамкаГруппыЗначенийПоУмолчаниюБазыКорреспондента.Видимость = ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента;
	
	ОписаниеОграниченийПередачиДанныхБазыКорреспондента = ОбменДаннымиСервер.ОписаниеОграниченийПередачиДанныхБазыКорреспондента(Объект.ИмяПланаОбмена, НастройкаОтборовНаУзлеБазыКорреспондента, ВерсияКонфигурацииКорреспондента, Объект.ВариантНастройкиОбмена);
	ОписаниеЗначенийПоУмолчаниюБазыКорреспондента       = ОбменДаннымиСервер.ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(Объект.ИмяПланаОбмена, ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента, ВерсияКонфигурацииКорреспондента, Объект.ВариантНастройкиОбмена);
	
	НастройкиПараметровУчетаКорреспондентаПоясняющаяНадпись = ОбменДаннымиСервер.ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеСуществующегоОбменаДаннымиСВторойБазой(Отказ)
	
	КодУзла = ?(ПустаяСтрока(Объект.КодУзлаКорреспондента),
					ОбменДаннымиСервер.КодУзлаПланаОбменаСтрокой(Объект.ПрефиксИнформационнойБазыПриемника),
					Объект.КодУзлаКорреспондента);
	
	Если Не ПустаяСтрока(КодУзла)
		И Не ПланыОбмена[Объект.ИмяПланаОбмена].НайтиПоКоду(КодУзла).Пустая() Тогда
		
		Сообщение = НСтр("ru = 'Синхронизация данных между программами уже была настроена ранее.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьВыгрузкуДанных(Отказ, УзелИнформационнойБазы, ВидТранспортаСообщенийОбмена)
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Отказ", Отказ);
	ПараметрыЗадания.Вставить("УзелИнформационнойБазы", УзелИнформационнойБазы);
	ПараметрыЗадания.Вставить("ВыполнятьЗагрузку", Ложь);
	ПараметрыЗадания.Вставить("ВыполнятьВыгрузку", Истина);
	ПараметрыЗадания.Вставить("ВидТранспортаСообщенийОбмена", ВидТранспортаСообщенийОбмена);
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ИдентификаторДлительнойОперации = "";
	Попытка
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.ВыполнениеОбменаДанными.ВыполнитьЗапускОбменаДанными",
			ПараметрыЗадания,
			НСтр("ru = 'Выгрузка данных'"));
		Если Не Результат.ЗаданиеВыполнено Тогда
			ДлительнаяОперация = Истина;
			ИдентификаторДлительнойОперации = Результат.ИдентификаторЗадания;
		КонецЕсли;
	Исключение
		ОбменДаннымиВызовСервера.ЗафиксироватьЗавершениеОбменаСОшибкой(
			УзелИнформационнойБазы,
			"ВыгрузкаДанных",
			ТекущаяДатаСеанса(),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
	
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеПрочитатьПромежуточныйРезультат()
	Прогресс = ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторДлительнойОперации);
	Если Прогресс <> Неопределено Тогда
		ПроцентВыполнения = Прогресс.Процент;
		ДопИнформацияВыполнение = Прогресс.Текст;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеПолучитьРезультат()
	Результат = Новый Структура;
	Результат.Вставить("ФоновоеЗаданиеВыполнено", Ложь);
	
	Состояние = ОбменДаннымиВызовСервера.СостояниеЗадания(ИдентификаторДлительнойОперации);
	
	Если Состояние = "Активно" Тогда
		ФоновоеЗаданиеПрочитатьПромежуточныйРезультат();
	ИначеЕсли Состояние = "Завершено" Тогда
		Результат.ФоновоеЗаданиеВыполнено = Истина;
	КонецЕсли;

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	Если ДлительнаяОперация Тогда
		Результат = ФоновоеЗаданиеПолучитьРезультат();
	КонецЕсли;
	Если НЕ ДлительнаяОперация ИЛИ Результат.ФоновоеЗаданиеВыполнено Тогда
		ПроцентВыполнения = 100;
		ДопИнформацияВыполнение = "";
		ДлительнаяОперация = Ложь;
		Состояние(НСтр("ru = 'Отправка данных завершена'"));
		ПодключитьОбработчикОжидания("ЗакрытьФормуОтложенно", 1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 2, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуОтложенно()
	ОбновитьИнтерфейс();
	
	ЗакрытьФормуБезусловно = Истина;
	Закрыть();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Инициализация переходов помощника.

&НаСервере
Процедура ТаблицаПереходовПервогоЭтапаНастройкиОбмена()
	
	ТаблицаПереходов.Очистить();
	
	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 1;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНачало";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииНачало";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 2;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераВыборРежимаРаботыПомощника";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераВыборРежимаРаботыПомощника_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 3;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераЗаданиеПараметровТранспортаFILE";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераЗаданиеПараметровТранспортаFILE_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераЗаданиеПараметровТранспортаFILE_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 4;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераЗаданиеПараметровТранспортаFTP";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераЗаданиеПараметровТранспортаFTP_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераЗаданиеПараметровТранспортаFTP_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 5;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераЗаданиеПараметровТранспортаEMAIL";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераЗаданиеПараметровТранспортаEMAIL_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераЗаданиеПараметровТранспортаEMAIL_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 6;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНастройкаПараметров";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНастройкаПараметров_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНастройкаПараметров_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 7;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераИтогНастройкиОбмена";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераИтогНастройкиОбмена_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 8;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОжиданиеСозданияНастройкиОбменаДанными";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСозданияНастройкиОбменаДанными_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 9;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОкончаниеСВыгрузкойНастройки";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОкончание";
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовВторогоЭтапаНастройкиОбмена()
	
	ТаблицаПереходов.Очистить();
	
	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 1;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНачало";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииНачало";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНачало_ПриПереходеДалее";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 2;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераЗаданиеПараметровТранспортаFILE";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераЗаданиеПараметровТранспортаFILE_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераЗаданиеПараметровТранспортаFILE_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 3;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераЗаданиеПараметровТранспортаFTP";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераЗаданиеПараметровТранспортаFTP_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераЗаданиеПараметровТранспортаFTP_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 4;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераЗаданиеПараметровТранспортаEMAIL";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераЗаданиеПараметровТранспортаEMAIL_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераЗаданиеПараметровТранспортаEMAIL_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 5;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНастройкаПараметровВторогоЭтапаНастройки";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНастройкаПараметровВторогоЭтапаНастройки_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНастройкаПараметров_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 6;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераИтогНастройкиОбмена";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОкончаниеИНазад";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераИтогНастройкиОбмена_ПриОткрытии";
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовНастройкиОбменаЧерезВнешнееСоединение()
	
	ТаблицаПереходов.Очистить();
	
	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 1;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНачало";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииНачало";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 2;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераВыборРежимаРаботыПомощника";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераВыборРежимаРаботыПомощника_ПриПереходеДалее";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 3;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОжиданиеПроверкиПодключенияВнешнегоСоединения";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеПроверкиПодключенияВнешнегоСоединения_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 4;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНастройкаПараметровДляВнешнегоСоединенияПервойБазы";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНастройкаПараметровДляВнешнегоСоединенияПервойБазы_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНастройкаПараметровДляВнешнегоСоединенияПервойБазы_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 5;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНастройкаПараметровДляВнешнегоСоединенияВторойБазы";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНастройкаПараметровДляВнешнегоСоединенияВторойБазы_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНастройкаПараметровДляВнешнегоСоединенияВторойБазы_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 6;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераИтогНастройкиОбмена";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераИтогНастройкиОбмена_ПриОткрытии_ВнешнееСоединение";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 7;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОжиданиеСозданияНастройкиОбменаДанными";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСозданияНастройкиОбменаДаннымиЧерезВнешнееСоединение_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 8;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОкончаниеСОбменомПоВнешнемуСоединению";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОкончание";
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовНастройкиОбменаЧерезВебСервис()
	
	ТаблицаПереходов.Очистить();
	
	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 1;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНачало";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииНачало";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 2;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераВыборРежимаРаботыПомощника";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераВыборРежимаРаботыПомощника_ПриПереходеДалее";
	
	// Задание параметров подключения; Проверка подключения.

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 3;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОжиданиеПроверкиПодключенияКСервису";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеПроверкиПодключенияЧерезВебСервис_ОбработкаДлительнойОперации";
	
	// Настройка параметров для выгрузки данных (отборы на узлах).

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 4;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНастройкаПараметровОбменаДаннымиЧерезВебСервис";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНастройкаПараметровОбменаДанными_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНастройкаПараметровОбменаДанными_ПриОткрытии";
	
	// Значения по умолчанию при загрузке данных.

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 5;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераПараметрыПолученияДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераПараметрыПолученияДанных_ПриПереходеДалее";
	
	// Создание настройки обмена; Регистрация справочников для выгрузки.

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 6;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОжиданиеАнализаДанныхСозданиеНастройкиОбмена";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеАнализаДанныхСозданиеНастройкиОбмена_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 7;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОжиданиеАнализаДанныхСозданиеНастройкиОбмена";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеАнализаДанныхСозданиеНастройкиОбменаДлительнаяОперация_ОбработкаДлительнойОперации";
	
	// Получение справочников от корреспондента.

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 8;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщения";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщения_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 9;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщения";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщенияДлительнаяОперация_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 10;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщения";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщенияДлительнаяОперацияОкончание_ОбработкаДлительнойОперации";
	
	// Выполнение автоматического сопоставления данных; Получение статистики сопоставления.

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 11;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОжиданиеАнализаДанныхАвтоматическоеСопоставление";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеАнализаДанныхАвтоматическоеСопоставление_ОбработкаДлительнойОперации";
	
	// Ручное сопоставление данных.

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 12;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераСопоставлениеДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжениеТолькоДалее";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераСопоставлениеДанных_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераСопоставлениеДанных_ПриОткрытии";
	
	// Синхронизация справочников.

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 13;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииСправочниковЗагрузка_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 14;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииСправочниковЗагрузкаДлительнаяОперация_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 15;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузка_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 16;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузкаДлительнаяОперация_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 17;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузкаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации";
	
	// Настройки параметров учета

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 18;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНастройкиОтраженияДокументовВУчете";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжениеТолькоДалее";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНастройкиОтраженияДокументовВУчете_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНастройкиОтраженияДокументовВУчете_ПриОткрытии";
	
	// Сохранение настроек; Регистрация всех данных к выгрузке, кроме справочников.

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 19;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОжиданиеСохраненияНастроек";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСохраненияНастроек_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 20;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОжиданиеСохраненияНастроек";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСохраненияНастроекДлительнаяОперация_ОбработкаДлительнойОперации";
	
	// Синхронизация всех данных, кроме справочников.

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 21;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузка_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 22;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузкаДлительнаяОперация_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 23;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузкаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации";
	
	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 24;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузкаДанных_ОбработкаДлительнойОперации";
	
	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 25;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузка_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 26;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузкаДлительнаяОперация_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 27;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузкаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации";
	
	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 28;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераСозданиеОбменаДаннымиУспешноЗавершено";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОкончание";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераСозданиеОбменаДаннымиУспешноЗавершено_ПриОткрытии";
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовРасширеннойНастройкиОбменаССервисом()
	
	ТаблицаПереходов.Очистить();
	
	// Задание параметров подключения; Проверка подключения.

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 1;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНачалоНастройкиОбменаССервисом";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииНачало";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНачалоНастройкиОбменаССервисом_ПриПереходеДалее";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 2;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОжиданиеПроверкиПодключенияКСервису";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеПроверкиПодключенияЧерезВебСервис_ОбработкаДлительнойОперации";
	
	// Настройка параметров для выгрузки данных (отборы на узлах).

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 3;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНастройкаПараметровОбменаДанными";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНастройкаПараметровОбменаДанными_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНастройкаПараметровОбменаДанными_ПриОткрытии";
	
	// Значения по умолчанию при загрузке данных.

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 4;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераПараметрыПолученияДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераПараметрыПолученияДанных_ПриПереходеДалее";
	
	// Создание настройки обмена; Регистрация справочников для выгрузки.

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 5;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОжиданиеАнализаДанныхСозданиеНастройкиОбмена";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеАнализаДанныхСозданиеНастройкиОбмена_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 6;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОжиданиеАнализаДанныхСозданиеНастройкиОбмена";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеАнализаДанныхСозданиеНастройкиОбменаДлительнаяОперация_ОбработкаДлительнойОперации";
	
	// Получение справочников от корреспондента.

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 7;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщения";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщения_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 8;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщения";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщенияДлительнаяОперация_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 9;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщения";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщенияДлительнаяОперацияОкончание_ОбработкаДлительнойОперации";
	
	// Выполнение автоматического сопоставления данных; Получение статистики сопоставления.

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 10;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОжиданиеАнализаДанныхАвтоматическоеСопоставление";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеАнализаДанныхАвтоматическоеСопоставление_ОбработкаДлительнойОперации";
	
	// Ручное сопоставление данных.

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 11;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераСопоставлениеДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжениеТолькоДалее";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераСопоставлениеДанных_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераСопоставлениеДанных_ПриОткрытии";
	
	// Синхронизация справочников.

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 12;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииСправочниковЗагрузка_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 13;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииСправочниковЗагрузкаДлительнаяОперация_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 14;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузка_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 15;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузкаДлительнаяОперация_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 16;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузкаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации";
	
	// Настройки параметров учета

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 17;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНастройкиОтраженияДокументовВУчете";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжениеТолькоДалее";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНастройкиОтраженияДокументовВУчете_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНастройкиОтраженияДокументовВУчете_ПриОткрытии";
	
	// Сохранение настроек; Регистрация всех данных к выгрузке, кроме справочников.

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 18;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОжиданиеСохраненияНастроек";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСохраненияНастроек_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 19;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОжиданиеСохраненияНастроек";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСохраненияНастроекДлительнаяОперация_ОбработкаДлительнойОперации";
	
	// Синхронизация всех данных, кроме справочников.

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 20;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузка_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 21;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузкаДлительнаяОперация_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 22;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузкаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 23;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузкаДанных_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 24;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузка_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 25;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузкаДлительнаяОперация_ОбработкаДлительнойОперации";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 26;
	НовыйПереход.ИмяОсновнойСтраницы  = "ОжиданиеСинхронизацииДанных";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузкаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации";
	

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 27;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераСозданиеОбменаДаннымиУспешноЗавершено";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОкончание";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераСозданиеОбменаДаннымиУспешноЗавершено_ПриОткрытии";
	
КонецПроцедуры

#КонецОбласти
