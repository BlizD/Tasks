#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьЦветаИУсловноеОформление();
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПоискаСтрок", "FuzzySearch", ТипВнешнейКомпоненты.Native) Тогда
		НечеткийПоиск = Истина;
	КонецЕсли;
	
	НастройкиФормы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяФормы, "");
	Если НастройкиФормы = Неопределено Тогда
		НастройкиФормы = Новый Структура;
		НастройкиФормы.Вставить("УчитыватьПрикладныеПравила", Истина);
		НастройкиФормы.Вставить("ОбластьПоискаДублей",        "");
		НастройкиФормы.Вставить("НастройкиКД",                Неопределено);
		НастройкиФормы.Вставить("ПравилаПоиска",              Неопределено);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НастройкиФормы, Параметры);
	
	ПриСозданииНаСервереИнициализацияДанных(НастройкиФормы);
	
	ИнициализироватьКомпоновщикОтбораИПравила(НастройкиФормы);
	
	// Схема должна быть переформирована всегда, настройки компоновщика -  в разрезе ОбластьПоискаДублей. 
	
	// Постоянный интерфейс
	ОтображениеСостояния = Элементы.ПоискНеВыполнялся.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.Текст = НСтр("ru = 'Поиск дублей не выполнялся. 
	                                        |Задайте условия отбора и сравнения и нажмите ""Найти дубли"".'");
	ОтображениеСостояния.Картинка = Элементы.Предупреждение32.Картинка;
	
	ОтображениеСостояния = Элементы.ВыполнениеПоиска.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.Текст = НСтр("ru = 'Поиск дублей...'");
	ОтображениеСостояния.Картинка = Элементы.ДлительнаяОперация48.Картинка;
	
	ОтображениеСостояния = Элементы.ВыполнениеУдаления.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.Текст = НСтр("ru = 'Удаление дублей...'");
	ОтображениеСостояния.Картинка = Элементы.ДлительнаяОперация48.Картинка;
	
	ОтображениеСостояния = Элементы.ДублейНеНайдено.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.Текст = НСтр("ru = 'Не обнаружено дублей по указанным параметрам.
	                                        |Измените условия отбора и сравнения, нажмите ""Найти дубли""'");
	ОтображениеСостояния.Картинка = Элементы.Предупреждение32.Картинка;
	
	// Пошаговый мастер
	НастройкиПошаговогоМастера = ИнициализироватьМастер(Элементы.ШагиМастера, Элементы.Далее, Элементы.Назад, Элементы.Отмена);
	
	// Добавляем шаги, зависящие от логики формы.
	ИнициализироватьСценарийМастера();
	
	// Автосохранение настроек
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Указываем стартовую страницу.
	УстановитьНачальнуюСтраницуМастера(Элементы.ШагПоискНеВыполнялся);
	ЗапуститьРаботуМастера();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НастройкиПошаговогоМастера.ЗаданиеВыполнено = Ложь
		И НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания <> Неопределено
		И НастройкиПошаговогоМастера.ЕстьПодтверждениеОтменыЗадания = Ложь Тогда
		Отказ = Истина;
		ФоновоеЗаданиеЗагрузитьНаКлиенте(Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если НастройкиПошаговогоМастера.ЗаданиеВыполнено = Ложь
		И НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания <> Неопределено Тогда
		ФоновоеЗаданиеОтменить();
	КонецЕсли;
	ПриЗакрытииСохранениеДанных();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбластьПоискаДублейНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбластьПоискаДублейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Имя = ПолноеИмяФормы("ОбластьПоискаДублей");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресНастроек", АдресНастроек);
	ПараметрыФормы.Вставить("ОбластьПоискаДублей", ОбластьПоискаДублей);
	
	Обработчик = Новый ОписаниеОповещения("ОбластьПоискаДублейЗавершениеВыбора", ЭтотОбъект);
	
	ОткрытьФорму(Имя, ПараметрыФормы, ЭтотОбъект, , , , Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ОбластьПоискаДублейЗавершениеВыбора(Результат, ПараметрыВыполнения) Экспорт
	Если ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьПоискаДублей = Результат;
	ИнициализироватьКомпоновщикОтбораИПравила(Неопределено);
	ПерейтиНаШагМастера(Элементы.ШагПоискНеВыполнялся, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбластьПоискаДублейПриИзменении(Элемент)
	ИнициализироватьКомпоновщикОтбораИПравила(Неопределено);
	ПерейтиНаШагМастера(Элементы.ШагПоискНеВыполнялся, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбластьПоискаДублейОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеМестаИспользованияНеобработанныхНажатие(Элемент)
	
	ПоказатьМестаИспользования(НеобработанныеДубли);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеМестаИспользованияНажатие(Элемент)
	
	ПоказатьМестаИспользования(НайденныеДубли);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПравилОтбораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Имя = ПолноеИмяФормы("ПравилаОтбора");
	
	ЭлементСписка = Элементы.ОбластьПоискаДублей.СписокВыбора.НайтиПоЗначению(ОбластьПоискаДублей);
	Если ЭлементСписка = Неопределено Тогда
		ПредставлениеОбластиПоискаДублей = Неопределено;
	Иначе
		ПредставлениеОбластиПоискаДублей = ЭлементСписка.Представление;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСхемыКомпоновки",            АдресСхемыКомпоновки);
	ПараметрыФормы.Вставить("АдресНастроекКомпоновщикаОтбора", АдресНастроекКомпоновщикаОтбора());
	ПараметрыФормы.Вставить("ИдентификаторОсновнойФормы",      УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ПредставлениеОбластиОтбора",      ПредставлениеОбластиПоискаДублей);
	
	Обработчик = Новый ОписаниеОповещения("ПравилаОтбораЗавершениеВыбора", ЭтотОбъект);
	
	ОткрытьФорму(Имя, ПараметрыФормы, ЭтотОбъект, , , , Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОтбораЗавершениеВыбора(Результат, ПараметрыВыполнения) Экспорт
	Если ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьКомпоновщикОтбора(Результат);
	ОбновитьОписаниеОтбора();
	
	ПерейтиНаШагМастера(Элементы.ШагПоискНеВыполнялся, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПравилОтбораОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	КомпоновщикПредварительногоОтбора.Настройки.Отбор.Элементы.Очистить();
	ОбновитьОписаниеОтбора();
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПравилПоискаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Имя = ПолноеИмяФормы("ПравилаПоиска");
	
	ЭлементСписка = Элементы.ОбластьПоискаДублей.СписокВыбора.НайтиПоЗначению(ОбластьПоискаДублей);
	Если ЭлементСписка = Неопределено Тогда
		ПредставлениеОбластиПоискаДублей = Неопределено;
	Иначе
		ПредставлениеОбластиПоискаДублей = ЭлементСписка.Представление;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбластьПоискаДублей",        ОбластьПоискаДублей);
	ПараметрыФормы.Вставить("ОписаниеПрикладныхПравил",   ОписаниеПрикладныхПравил);
	ПараметрыФормы.Вставить("АдресНастроек",              АдресНастроекПравилПоиска());
	ПараметрыФормы.Вставить("ПредставлениеОбластиОтбора", ПредставлениеОбластиПоискаДублей);
	
	Обработчик = Новый ОписаниеОповещения("ПравилаПоискаЗавершениеВыбора", ЭтотОбъект);
	
	ОткрытьФорму(Имя, ПараметрыФормы, ЭтотОбъект, , , , Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ПравилаПоискаЗавершениеВыбора(Результат, ПараметрыВыполнения) Экспорт
	Если ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПравилаПоиска(Результат);
	ОбновитьОписаниеПравилПоиска();
	
	ПерейтиНаШагМастера(Элементы.ШагПоискНеВыполнялся, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыНайденныеДубли

&НаКлиенте
Процедура НайденныеДублиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОтложенныйОбработчикАктивизацииСтрокиДублей", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныйОбработчикАктивизацииСтрокиДублей()
	
	ДанныеСтроки = Элементы.НайденныеДубли.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьМестаИспользованияКандидата( ДанныеСтроки.ПолучитьИдентификатор() );
КонецПроцедуры

&НаСервере
Процедура ОбновитьМестаИспользованияКандидата(Знач СтрокаДанных)
	ДанныеСтроки = НайденныеДубли.НайтиПоИдентификатору(СтрокаДанных);
	
	Если ДанныеСтроки.ПолучитьРодителя() = Неопределено Тогда
		// Описание группы
		МестаИспользованияКандидата.Очистить();
		
		НаименованиеОригинала = Неопределено;
		Для Каждого Кандидат Из ДанныеСтроки.ПолучитьЭлементы() Цикл
			Если Кандидат.Основной Тогда
				НаименованиеОригинала = Кандидат.Наименование;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Элементы.ОписаниеТекущейГруппыДублей.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для элемента ""%1"" найдено дублей: %2'"),
			НаименованиеОригинала,
			ДанныеСтроки.Количество);
		
		Элементы.СтраницыМестаИспользования.ТекущаяСтраница = Элементы.ОписаниеГруппы;
		Возврат;
	КонецЕсли;
	
	// Перечень мест использования.
	ТаблицаИспользования = ПолучитьИзВременногоХранилища(АдресМестИспользования);
	Фильтр = Новый Структура("Ссылка", ДанныеСтроки.Ссылка);
	
	МестаИспользованияКандидата.Загрузить(ТаблицаИспользования.Скопировать(ТаблицаИспользования.НайтиСтроки(Фильтр)));
	
	Если ДанныеСтроки.Количество = 0 Тогда
		Элементы.ОписаниеТекущейГруппыДублей.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Элемент ""%1"" не используется'"), 
			ДанныеСтроки.Наименование);
		
		Элементы.СтраницыМестаИспользования.ТекущаяСтраница = Элементы.ОписаниеГруппы;
	Иначе
		Элементы.МестаИспользованияКандидата.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Места использования ""%1"" (%2)'"), 
			ДанныеСтроки.Наименование,
			ДанныеСтроки.Количество);
		
		Элементы.СтраницыМестаИспользования.ТекущаяСтраница = Элементы.МестаИспользования;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайденныеДублиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФормуДубля(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НайденныеДублиПометкаПриИзменении(Элемент)
	ДанныеСтроки = Элементы.НайденныеДубли.ТекущиеДанные;
	
	ДанныеСтроки.Пометка = ДанныеСтроки.Пометка % 2;
	
	ИзменитьПометкиКандидатовИерархически(ДанныеСтроки);
	
	ПересчитатьКоличествоНайденныхДублей();
	
	ОбновитьОписаниеСостоянияНайденныхДублей(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыНеобработанныеДубли

&НаКлиенте
Процедура НеобработанныеДублиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОтложенныйОбработчикАктивизацииСтрокиНеобработанныхДублей", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныйОбработчикАктивизацииСтрокиНеобработанныхДублей()
	
	ДанныеСтроки = Элементы.НеобработанныеДубли.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьМестаИспользованияНеобработанныхДубли( ДанныеСтроки.ПолучитьИдентификатор() );
КонецПроцедуры

&НаСервере
Процедура ОбновитьМестаИспользованияНеобработанныхДубли(Знач СтрокаДанных)
	ДанныеСтроки = НеобработанныеДубли.НайтиПоИдентификатору(СтрокаДанных);
	
	Если ДанныеСтроки.ПолучитьРодителя() = Неопределено Тогда
		// Описание группы
		МестаИспользованияНеобработанных.Очистить();
		
		Элементы.ОписаниеТекущейГруппыДублей1.Заголовок = НСтр("ru = 'Для просмотра причин выберите проблемный элемент-дубль.'");
		Элементы.СтраницыМестаИспользованияНеобработанных.ТекущаяСтраница = Элементы.ОписаниеГруппыНеобработанных;
		Возврат;
	КонецЕсли;
	
	// Перечень мест ошибок
	ТаблицаОшибок = ПолучитьИзВременногоХранилища(АдресРезультатаЗамены);
	Фильтр = Новый Структура("Ссылка", ДанныеСтроки.Ссылка);
	
	Данные = ТаблицаОшибок.Скопировать( ТаблицаОшибок.НайтиСтроки(Фильтр) );
	Данные.Колонки.Добавить("Пиктограмма");
	Данные.ЗаполнитьЗначения(Истина, "Пиктограмма");
	МестаИспользованияНеобработанных.Загрузить(Данные);
	
	Если ДанныеСтроки.Количество = 0 Тогда
		Элементы.ОписаниеТекущейГруппыДублей1.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Замена дубля ""%1"" возможна, но была отменена из-за невозможности замены в других местах.'"), 
			ДанныеСтроки.Наименование);
		
		Элементы.СтраницыМестаИспользованияНеобработанных.ТекущаяСтраница = Элементы.ОписаниеГруппыНеобработанных;
	Иначе
		Элементы.МестаИспользованияКандидата.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось заменить дубли в некоторых местах (%1)'"), 
			ДанныеСтроки.Количество);
		
		Элементы.СтраницыМестаИспользованияНеобработанных.ТекущаяСтраница = Элементы.ОписаниеМестИспользованияНеобработанных;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеобработанныеДублиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФормуДубля(Элементы.НеобработанныеДубли.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыМестаИспользованияНеобработанных

&НаКлиенте
Процедура МестаИспользованияНеобработанныхПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОписаниеОшибкиНеобработанных = "";
	Иначе
		ОписаниеОшибкиНеобработанных = ТекущиеДанные.ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестаИспользованияНеобработанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = МестаИспользованияНеобработанных.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ПоказатьЗначение(, ТекущиеДанные.ОбъектОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыМестаИспользованияКандидата

&НаКлиенте
Процедура МестаИспользованияКандидатаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = МестаИспользованияКандидата.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ПоказатьЗначение(, ТекущиеДанные.Данные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьОсновнойЭлемент(Команда)
	
	ДанныеСтроки = Элементы.НайденныеДубли.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Или ДанныеСтроки.Основной Тогда
		Возврат; // Нет данных или Текущий уже основной.
	КонецЕсли;
		
	Родитель = ДанныеСтроки.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьОсновнойЭлементИерархически(ДанныеСтроки, Родитель);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКандидатаВДубли(Команда)
	
	ОткрытьФормуДубля(Элементы.НайденныеДубли.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНеобработанныйДубль(Команда)
	
	ОткрытьФормуДубля(Элементы.НеобработанныеДубли.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьГруппыДублей(Команда)
	
	РазвернутьГруппуДублейИерархически();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьГруппыДублей(Команда)
	
	СвернутьГруппуДублейИерархически();
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПоиск(Команда)
	
	ПерейтиНаШагМастера(Элементы.ШагВыполнениеПоиска, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераНазад(Команда)
	ШагМастера("Назад");
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераДалее(Команда)
	ШагМастера("Далее");
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераОтмена(Команда)
	ШагМастера("Отмена");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Функция ПолноеИмяФормы(КраткоеИмяФормы)
	Имена = СтрРазделить(ИмяФормы, ".");
	Возврат Имена[0] + "." + Имена[1] + ".Форма." + КраткоеИмяФормы;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура ПриСозданииНаСервереИнициализацияДанных(НастройкиФормы)
	УчитыватьПрикладныеПравила = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиФормы, "УчитыватьПрикладныеПравила");
	ОбластьПоискаДублей        = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиФормы, "ОбластьПоискаДублей");
	
	ТаблицаНастроек = ПоискИУдалениеДублей.НастройкиОбъектовМетаданных();
	АдресНастроек = ПоместитьВоВременноеХранилище(ТаблицаНастроек, УникальныйИдентификатор);
	
	СписокВыбора = Элементы.ОбластьПоискаДублей.СписокВыбора;
	Для Каждого СтрокаТаблицы Из ТаблицаНастроек Цикл
		СписокВыбора.Добавить(СтрокаТаблицы.ПолноеИмя, СтрокаТаблицы.ПредставлениеСписка, , БиблиотекаКартинок[СтрокаТаблицы.Вид]);
	КонецЦикла;
	
	ВсеВариантыСравнения.Добавить("Равно",   НСтр("ru = 'Совпадает'"));
	ВсеВариантыСравнения.Добавить("Подобно", НСтр("ru = 'Совпадает по похожим словам'"));
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииСохранениеДанных()
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("УчитыватьПрикладныеПравила", УчитыватьПрикладныеПравила);
	НастройкиФормы.Вставить("ОбластьПоискаДублей", ОбластьПоискаДублей);
	НастройкиФормы.Вставить("НастройкиКД", КомпоновщикПредварительногоОтбора.Настройки);
	НастройкиФормы.Вставить("ПравилаПоиска", ПравилаПоиска.Выгрузить());
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, "", НастройкиФормы);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ОткрытьФормуДубля(Знач ТекущиеДанные)
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(,ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветаИУсловноеОформление()
	ЦветПоясняющийТекст       = ЦветСтиляИлиАвто("ПоясняющийТекст",       69,  81,  133);
	ЦветПоясняющийОшибкуТекст = ЦветСтиляИлиАвто("ПоясняющийОшибкуТекст", 255, 0,   0);
	ЦветНедоступныеДанные     = ЦветСтиляИлиАвто("ЦветНедоступныеДанные", 192, 192, 192);
	
	ЭлементыУсловногоОформления = УсловноеОформление.Элементы;
	ЭлементыУсловногоОформления.Очистить();
	
	// Отсутствие мест использования у группы.
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Ссылка");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НайденныеДублиКоличество");
	
	// 1. Строка с текущим основным элементом группы:
	
	// Картинка
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Основной");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Истина);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НайденныеДублиОсновной");
	
	// Отсутствие пометки
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Основной");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НайденныеДублиПометка");
	
	// 2. Строка с обычным элементом.
	
	// Картинка
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Основной");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НайденныеДублиОсновной");
	
	// Наличие пометки
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Основной");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Истина);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НайденныеДублиПометка");
	
	// 3. Места использования
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Ссылка");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Количество");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = 0;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '-'"));
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НайденныеДублиКоличество");
	
	// 4. Неактивная строка
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Пометка");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = 0;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветНедоступныеДанные);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НайденныеДубли");
	
КонецПроцедуры

&НаСервере
Функция ЦветСтиляИлиАвто(Знач Имя, Знач Красный = Неопределено, Зеленый = Неопределено, Синий = Неопределено)
	ЭлементСтиля = Метаданные.ЭлементыСтиля.Найти(Имя);
	Если ЭлементСтиля <> Неопределено И ЭлементСтиля.Вид = Метаданные.СвойстваОбъектов.ВидЭлементаСтиля.Цвет Тогда
		Возврат ЦветаСтиля[Имя];
	КонецЕсли;
	
	Возврат ?(Красный = Неопределено, Новый Цвет, Новый Цвет(Красный, Зеленый, Синий));
КонецФункции

&НаСервере
Функция ПарыЗаменДублей()
	ПарыЗамен = Новый Соответствие;
	
	ДеревоДублей = РеквизитФормыВЗначение("НайденныеДубли");
	ФильтрПоиска = Новый Структура("Основной", Истина);
	
	Для Каждого Родитель Из ДеревоДублей.Строки Цикл
		ОсновнойВГруппе = Родитель.Строки.НайтиСтроки(ФильтрПоиска)[0].Ссылка;
		
		Для Каждого Потомок Из Родитель.Строки Цикл
			Если Потомок.Пометка = 1 Тогда 
				ПарыЗамен.Вставить(Потомок.Ссылка, ОсновнойВГруппе);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПарыЗамен;
КонецФункции

&НаКлиенте
Процедура ПоказатьМестаИспользования(ДеревоИсточник)
	МассивСсылок = Новый Массив;
	Для Каждого ГруппаДублей Из ДеревоИсточник.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаДерева Из ГруппаДублей.ПолучитьЭлементы() Цикл
			МассивСсылок.Добавить(СтрокаДерева.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Отбор", Новый Структура("НаборСсылок", МассивСсылок));
	РежимОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Отчет.МестаИспользованияСсылок.Форма", ПараметрыОтчета, ЭтотОбъект, , , , , РежимОкна);
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьГруппуДублейИерархически(Знач СтрокаДанных = Неопределено)
	Если СтрокаДанных <> Неопределено Тогда
		Элементы.НайденныеДубли.Развернуть(СтрокаДанных, Истина);
	КонецЕсли;
	
	// Все первого уровня
	ВсеСтроки = Элементы.НайденныеДубли;
	Для Каждого ДанныеСтроки Из НайденныеДубли.ПолучитьЭлементы() Цикл 
		ВсеСтроки.Развернуть(ДанныеСтроки.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьГруппуДублейИерархически(Знач СтрокаДанных = Неопределено)
	Если СтрокаДанных <> Неопределено Тогда
		Элементы.НайденныеДубли.Свернуть(СтрокаДанных);
		Возврат;
	КонецЕсли;
	
	// Все первого уровня
	ВсеСтроки = Элементы.НайденныеДубли;
	Для Каждого ДанныеСтроки Из НайденныеДубли.ПолучитьЭлементы() Цикл 
		ВсеСтроки.Свернуть(ДанныеСтроки.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкиКандидатовИерархически(Знач ДанныеСтроки)
	ПроставитьПометкиВниз(ДанныеСтроки);
	ПроставитьПометкиВверх(ДанныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВниз(Знач ДанныеСтроки)
	Значение = ДанныеСтроки.Пометка;
	Для Каждого Потомок Из ДанныеСтроки.ПолучитьЭлементы() Цикл
		Потомок.Пометка = Значение;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВверх(Знач ДанныеСтроки)
	РодительСтроки = ДанныеСтроки.ПолучитьРодителя();
	
	Если РодительСтроки <> Неопределено Тогда
		ВсеИстина = Истина;
		НеВсеЛожь = Ложь;
		
		Для Каждого Потомок Из РодительСтроки.ПолучитьЭлементы() Цикл
			ВсеИстина = ВсеИстина И (Потомок.Пометка = 1);
			НеВсеЛожь = НеВсеЛожь Или (Потомок.Пометка > 0);
		КонецЦикла;
		
		Если ВсеИстина Тогда
			РодительСтроки.Пометка = 1;
			
		ИначеЕсли НеВсеЛожь Тогда
			РодительСтроки.Пометка = 2;
			
		Иначе
			РодительСтроки.Пометка = 0;
			
		КонецЕсли;
		
		ПроставитьПометкиВверх(РодительСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОписаниеСостоянияНайденныхДублей(Форма)
	
	Форма.ОписаниеСостоянияНайденныхДублей = Новый ФорматированнаяСтрока(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Найдено дублей: %2 (среди элементов: %1). Все отмеченные элементы будут помечены на удаление и заменены во всех местах использования на оригиналы (отмечены стрелкой).'"),
				Форма.ВсегоЭлементов,
				Форма.ВсегоНайденоДублей),
			,
			Форма.ЦветПоясняющийТекст);
			
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКоличествоНайденныхДублей()
	ВсегоНайденоДублей = 0;
	Для Каждого Дубль Из НайденныеДубли.ПолучитьЭлементы() Цикл
		Для Каждого Потомок Из Дубль.ПолучитьЭлементы() Цикл
			Если Не Потомок.Основной И Потомок.Пометка Тогда
				ВсегоНайденоДублей = ВсегоНайденоДублей + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОсновнойЭлементИерархически(Знач ДанныеСтроки, Знач Родитель)
	Для Каждого Потомок Из Родитель.ПолучитьЭлементы() Цикл
		Потомок.Основной = Ложь;
	КонецЦикла;
	ДанныеСтроки.Основной = Истина;
	
	// Выбранный всегда используем.
	ДанныеСтроки.Пометка = 1;
	ИзменитьПометкиКандидатовИерархически(ДанныеСтроки);
	
	// И изменяем название группы
	Родитель.Наименование = ДанныеСтроки.Наименование + " (" + Родитель.Количество + ")";
КонецПроцедуры

&НаСервере
Функция ЗаполнитьРезультатыПоискаДублей(Знач Данные)
	// Данные - результат функции ГруппыДублей модуля.
	
	Если Не ПустаяСтрока(Данные.ОписаниеОшибки) Тогда // Фоновое сломалось
		ОписаниеСостоянияНайденныхДублей = Новый ФорматированнаяСтрока(Элементы.Внимание16.Картинка, Данные.ОписаниеОшибки);
		Возврат -1;
	КонецЕсли;
	
	// Нет ошибок поиска
	// Строим дерево для редактирования по таблицам результата.
	ЭлементыДерева = НайденныеДубли.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	МестаИспользования = Данные.МестаИспользования;
	ТаблицаДублей      = Данные.ТаблицаДублей;
	
	ФильтрСтрок = Новый Структура("Родитель");
	ФильтрМест  = Новый Структура("Ссылка");
	
	ВсегоНайденоДублей = 0;
	
	ВсеГруппы = ТаблицаДублей.НайтиСтроки(ФильтрСтрок);
	Для Каждого Группа Из ВсеГруппы Цикл
		ФильтрСтрок.Родитель = Группа.Ссылка;
		ЭлементыГруппы = ТаблицаДублей.НайтиСтроки(ФильтрСтрок);
		
		ГруппаДерева = ЭлементыДерева.Добавить();
		ГруппаДерева.Количество = ЭлементыГруппы.Количество();
		ГруппаДерева.Пометка = 1;
		
		МаксСтрока = Неопределено;
		МаксМест   = -1;
		Для Каждого Элемент Из ЭлементыГруппы Цикл
			СтрокаДерева = ГруппаДерева.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Элемент, "Ссылка, Код, Наименование");
			СтрокаДерева.Пометка = 1;
			
			ФильтрМест.Ссылка = Элемент.Ссылка;
			СтрокаДерева.Количество = МестаИспользования.НайтиСтроки(ФильтрМест).Количество();
			
			Если МаксМест < СтрокаДерева.Количество Тогда
				Если МаксСтрока <> Неопределено Тогда
					МаксСтрока.Основной = Ложь;
				КонецЕсли;
				МаксСтрока = СтрокаДерева;
				МаксМест   = СтрокаДерева.Количество;
				МаксСтрока.Основной = Истина;
			КонецЕсли;
			
			ВсегоНайденоДублей = ВсегоНайденоДублей + 1;
		КонецЦикла;
		
		// Устанавливаем кандидата по максимальной ссылке.
		ГруппаДерева.Наименование = МаксСтрока.Наименование + " (" + ГруппаДерева.Количество + ")";
	КонецЦикла;
	
	// Места использования сохраняем для дальнейшего фильтра.
	МестаИспользованияКандидата.Очистить();
	Элементы.ОписаниеТекущейГруппыДублей.Заголовок = НСтр("ru = 'Дублей не найдено'");
	
	Если ЭтоАдресВременногоХранилища(АдресМестИспользования) Тогда
		УдалитьИзВременногоХранилища(АдресМестИспользования);
	КонецЕсли;
	АдресМестИспользования = ПоместитьВоВременноеХранилище(МестаИспользования, УникальныйИдентификатор);
	
	ВсегоЭлементов = ВсегоНайденоДублей; 
	ВсегоНайденоДублей = ВсегоНайденоДублей - ЭлементыДерева.Количество();
	Если ВсегоНайденоДублей = 0 Тогда
		ОписаниеСостоянияНайденныхДублей = Новый ФорматированнаяСтрока(Элементы.Информация16.Картинка, " ",
			НСтр("ru = 'Не обнаружено дублей по указанным условиям.'"));
	Иначе
		ОбновитьОписаниеСостоянияНайденныхДублей(ЭтотОбъект);
	КонецЕсли;
	
	Возврат ВсегоЭлементов;
КонецФункции

&НаСервере
Функция ЗаполнитьРезультатыУдаленияДублей(Знач ТаблицаОшибок)
	// ТаблицаОшибок - результат функции ЗаменитьСсылки модуля.
	
	Если ЭтоАдресВременногоХранилища(АдресРезультатаЗамены) Тогда
		УдалитьИзВременногоХранилища(АдресРезультатаЗамены);
	КонецЕсли;
	
	ЗавершеноБезОшибок = ТаблицаОшибок.Количество() = 0;
	ПоследнийКандидат  = Неопределено;
	
	Если ЗавершеноБезОшибок Тогда
		ВсегоОбработано = 0; 
		ВсегоОсновных   = 0;
		Для Каждого ГруппаДублей Из НайденныеДубли.ПолучитьЭлементы() Цикл
			Если ГруппаДублей.Пометка Тогда
				Для Каждого Кандидат Из ГруппаДублей.ПолучитьЭлементы() Цикл
					Если Кандидат.Основной Тогда
						ПоследнийКандидат = Кандидат.Ссылка;
						ВсегоОбработано   = ВсегоОбработано + 1;
						ВсегоОсновных     = ВсегоОсновных + 1;
					ИначеЕсли Кандидат.Пометка Тогда 
						ВсегоОбработано = ВсегоОбработано + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если ВсегоОсновных = 1 Тогда
			// Много дублей в один элемент.
			Если ПоследнийКандидат = Неопределено Тогда
				ОписаниеСостоянияНайденныхДублей = Новый ФорматированнаяСтрока(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Все найденные дубли (%1) успешно объединены'"),
						ВсегоОбработано));
			Иначе
				ПоследнийКандидатСтрокой = ОбщегоНазначения.ПредметСтрокой(ПоследнийКандидат);
				ОписаниеСостоянияНайденныхДублей = Новый ФорматированнаяСтрока(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Все найденные дубли (%1) успешно объединены
							|в ""%2""'"),
						ВсегоОбработано, ПоследнийКандидатСтрокой));
			КонецЕсли;
		Иначе
			// Много дублей во много групп.
			ОписаниеСостоянияНайденныхДублей = Новый ФорматированнаяСтрока(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Все найденные дубли (%1) успешно объединены.
						|Оставлено элементов (%2).'"),
					ВсегоОбработано,
					ВсегоОсновных));
		КонецЕсли;
	КонецЕсли;
	
	НеобработанныеДубли.ПолучитьЭлементы().Очистить();
	МестаИспользованияНеобработанных.Очистить();
	МестаИспользованияКандидата.Очистить();
	
	Если ЗавершеноБезОшибок Тогда
		НайденныеДубли.ПолучитьЭлементы().Очистить();
		Возврат Истина;
	КонецЕсли;
	
	// Сохраняем для последующего доступа при анализе ссылок.
	АдресРезультатаЗамены = ПоместитьВоВременноеХранилище(ТаблицаОшибок, УникальныйИдентификатор);
	
	// Формируем дерево дублей по ошибкам.
	ЗначениеВРеквизитФормы(РеквизитФормыВЗначение("НайденныеДубли"), "НеобработанныеДубли");
	
	// Анализируем оставшихся
	Фильтр = Новый Структура("Ссылка");
	Родители = НеобработанныеДубли.ПолучитьЭлементы();
	ПозицияРодителя = Родители.Количество() - 1;
	Пока ПозицияРодителя >= 0 Цикл
		Родитель = Родители[ПозицияРодителя];
		
		Потомки = Родитель.ПолучитьЭлементы();
		ПозицияПотомка = Потомки.Количество() - 1;
		ОсновнойПотомок = Потомки[0];	// Там есть минимум один
		
		Пока ПозицияПотомка >= 0 Цикл
			Потомок = Потомки[ПозицияПотомка];
			
			Если Потомок.Основной Тогда
				ОсновнойПотомок = Потомок;
				Фильтр.Ссылка = Потомок.Ссылка;
				Потомок.Количество = ТаблицаОшибок.НайтиСтроки(Фильтр).Количество();
				
			ИначеЕсли ТаблицаОшибок.Найти(Потомок.Ссылка, "Ссылка") = Неопределено Тогда
				// Был успешно удален, нет ошибок.
				Потомки.Удалить(Потомок);
				
			Иначе
				Фильтр.Ссылка = Потомок.Ссылка;
				Потомок.Количество = ТаблицаОшибок.НайтиСтроки(Фильтр).Количество();
				
			КонецЕсли;
			
			ПозицияПотомка = ПозицияПотомка - 1;
		КонецЦикла;
		
		КоличествоПотомков = Потомки.Количество();
		Если КоличествоПотомков = 1 И Потомки[0].Основной Тогда
			Родители.Удалить(Родитель);
		Иначе
			Родитель.Количество = КоличествоПотомков - 1;
			Родитель.Наименование = ОсновнойПотомок.Наименование + " (" + КоличествоПотомков + ")";
		КонецЕсли;
		
		ПозицияРодителя = ПозицияРодителя - 1;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаСервере
Функция АдресНастроекКомпоновщикаОтбора()
	
	Возврат ПоместитьВоВременноеХранилище(КомпоновщикПредварительногоОтбора.Настройки, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция АдресНастроекПравилПоиска()
	
	Настройки = Новый Структура;
	Настройки.Вставить("УчитыватьПрикладныеПравила", УчитыватьПрикладныеПравила);
	Настройки.Вставить("ВсеВариантыСравнения", ВсеВариантыСравнения);
	Настройки.Вставить("ПравилаПоиска", РеквизитФормыВЗначение("ПравилаПоиска"));
	
	Возврат ПоместитьВоВременноеХранилище(Настройки);
КонецФункции

&НаСервере
Процедура ОбновитьКомпоновщикОтбора(Адрес)
	
	КомпоновщикПредварительногоОтбора.ЗагрузитьНастройки( ПолучитьИзВременногоХранилища(Адрес) );
	КомпоновщикПредварительногоОтбора.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	УдалитьИзВременногоХранилища(Адрес);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПравилаПоиска(Адрес)
	Настройки = ПолучитьИзВременногоХранилища(Адрес);
	Адрес = Неопределено;
	
	УчитыватьПрикладныеПравила = Настройки.УчитыватьПрикладныеПравила;
	ЗначениеВРеквизитФормы(Настройки.ПравилаПоиска, "ПравилаПоиска");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОписаниеПравилПоиска()
	ТекстПравил = "";
	Союз        = " " + НСтр("ru = 'И'") + " ";
	
	Для Каждого Правило Из ПравилаПоиска Цикл
		Если Правило.Правило = "Равно" Тогда
			Сравнение = Правило.ПредставлениеРеквизита + " " + НСтр("ru = 'совпадает'");
		ИначеЕсли Правило.Правило = "Подобно" Тогда
			Сравнение = Правило.ПредставлениеРеквизита + " " + НСтр("ru = 'совпадает по похожим словам'");
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТекстПравил = ?(ТекстПравил = "", "", ТекстПравил + Союз) + Сравнение;
	КонецЦикла;
	
	Если УчитыватьПрикладныеПравила Тогда
		Для Позиция = 1 По СтрЧислоСтрок(ОписаниеПрикладныхПравил) Цикл
			СтрокаПравила = СокрЛП(СтрПолучитьСтроку(ОписаниеПрикладныхПравил, Позиция));
			Если Не ПустаяСтрока(СтрокаПравила) Тогда
				ТекстПравил = ?(ТекстПравил = "", "", ТекстПравил + Союз) + СтрокаПравила;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстПравил) Тогда
		ТекстПравил = НСтр("ru = 'Правила не заданы'");
	КонецЕсли;
	ПредставлениеПравилПоиска = ТекстПравил;
	Элементы.ПредставлениеПравилПоиска.Доступность = Не ПустаяСтрока(ОбластьПоискаДублей);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОписаниеОтбора()
	ПредставлениеПравилОтбора = Строка(КомпоновщикПредварительногоОтбора.Настройки.Отбор);
	Если ПустаяСтрока(ПредставлениеПравилОтбора) Тогда
		ПредставлениеПравилОтбора = НСтр("ru = 'Все элементы'");
	КонецЕсли;
	Элементы.ПредставлениеПравилОтбора.Доступность = Не ПустаяСтрока(ОбластьПоискаДублей);
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикОтбораИПравила(НастройкиФормы)
	// 1. Очистка и инициализация сведений об объекте метаданных.
	ПредставлениеПравилОтбора = "";
	ПредставлениеПравилПоиска = "";
	
	ТаблицаНастроек = ПолучитьИзВременногоХранилища(АдресНастроек);
	СтрокаТаблицыНастроек = ТаблицаНастроек.Найти(ОбластьПоискаДублей, "ПолноеИмя");
	Если СтрокаТаблицыНастроек = Неопределено Тогда
		ОбластьПоискаДублей = "";
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОбластьПоискаДублей);
	
	// 2. Инициализация СКД, которая используется для отборов.
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СхемаКомпоновки.ИсточникиДанных.Добавить();
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = "ВЫБРАТЬ " + ДоступныеРеквизитыОтбора(ОбъектМетаданных) + " ИЗ " + ОбластьПоискаДублей;
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	
	АдресСхемыКомпоновки = ПоместитьВоВременноеХранилище(СхемаКомпоновки, УникальныйИдентификатор);
	
	КомпоновщикПредварительногоОтбора.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	
	// 3. Заполнение таблицы ПравилаПоиска.
	ТаблицаПравил = РеквизитФормыВЗначение("ПравилаПоиска");
	ТаблицаПравил.Очистить();
	
	ИгнорируемыеРеквизиты = Новый Структура("ПометкаУдаления, Ссылка, Предопределенный, ИмяПредопределенныхДанных, ЭтоГруппа");
	ДобавитьПравилаМетаРеквизитов(ТаблицаПравил, ИгнорируемыеРеквизиты, ВсеВариантыСравнения, ОбъектМетаданных.СтандартныеРеквизиты, НечеткийПоиск);
	ДобавитьПравилаМетаРеквизитов(ТаблицаПравил, ИгнорируемыеРеквизиты, ВсеВариантыСравнения, ОбъектМетаданных.Реквизиты, НечеткийПоиск);
	
	// 4. Загрузка сохраненных значений.
	ОтборыЗагружены = Ложь;
	НастройкиКД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиФормы, "НастройкиКД");
	Если ТипЗнч(НастройкиКД) = Тип("НастройкиКомпоновкиДанных") Тогда
		КомпоновщикПредварительногоОтбора.ЗагрузитьНастройки(НастройкиКД);
		ОтборыЗагружены = Истина;
	КонецЕсли;
	
	ПравилаЗагружены = Ложь;
	СохраненныеПравила = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиФормы, "ПравилаПоиска");
	Если ТипЗнч(СохраненныеПравила) = Тип("ТаблицаЗначений") Тогда
		ПравилаЗагружены = Истина;
		Для Каждого СохраненноеПравило Из СохраненныеПравила Цикл
			Правило = ТаблицаПравил.Найти(СохраненноеПравило.Реквизит, "Реквизит");
			Если Правило <> Неопределено
				И Правило.ВариантыСравнения.НайтиПоЗначению(СохраненноеПравило.Правило) <> Неопределено Тогда
				Правило.Правило = СохраненноеПравило.Правило;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// 5. Установка умолчаний.
	// Отбор по пометке удаления.
	Если Не ОтборыЗагружены Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			КомпоновщикПредварительногоОтбора.Настройки.Отбор,
			"ПометкаУдаления",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Ложь);
	КонецЕсли;
	// Сравнение по наименованию.
	Если Не ПравилаЗагружены Тогда
		Правило = ТаблицаПравил.Найти("Наименование", "Реквизит");
		Если Правило <> Неопределено Тогда
			ЗначениеДляСравнения = ?(НечеткийПоиск, "Подобно", "Равно");
			Если Правило.ВариантыСравнения.НайтиПоЗначению(ЗначениеДляСравнения) <> Неопределено Тогда
				Правило.Правило = ЗначениеДляСравнения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// 6. Механизмы расширения в части прикладных правил.
	ОписаниеПрикладныхПравил = Неопределено;
	Если СтрокаТаблицыНастроек.СобытиеПараметрыПоискаДублей Тогда
		ПараметрыПоУмолчанию = Новый Структура;
		ПараметрыПоУмолчанию.Вставить("ПравилаПоиска",        ТаблицаПравил);
		ПараметрыПоУмолчанию.Вставить("ОграниченияСравнения", Новый Массив);
		ПараметрыПоУмолчанию.Вставить("КомпоновщикОтбора",    КомпоновщикПредварительногоОтбора);
		ПараметрыПоУмолчанию.Вставить("КоличествоЭлементовДляСравнения", 1000);
		МенеджерОбъектаМетаданных = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		МенеджерОбъектаМетаданных.ПараметрыПоискаДублей(ПараметрыПоУмолчанию);
		
		// Представление прикладных правил.
		ОписаниеПрикладныхПравил = "";
		Для Каждого Описание Из ПараметрыПоУмолчанию.ОграниченияСравнения Цикл
			ОписаниеПрикладныхПравил = ОписаниеПрикладныхПравил + Символы.ПС + Описание.Представление;
		КонецЦикла;
		ОписаниеПрикладныхПравил = СокрЛП(ОписаниеПрикладныхПравил);
	КонецЕсли;
	
	КомпоновщикПредварительногоОтбора.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	
	ТаблицаПравил.Сортировать("ПредставлениеРеквизита");
	ЗначениеВРеквизитФормы(ТаблицаПравил, "ПравилаПоиска");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступныеРеквизитыОтбора(ОбъектМетаданных)
	МассивРеквизитов = Новый Массив;
	Для Каждого РеквизитМетаданные Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		Если Не РеквизитМетаданные.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			МассивРеквизитов.Добавить(РеквизитМетаданные.Имя);
		КонецЕсли
	КонецЦикла;
	Для Каждого РеквизитМетаданные Из ОбъектМетаданных.Реквизиты Цикл
		Если Не РеквизитМетаданные.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			МассивРеквизитов.Добавить(РеквизитМетаданные.Имя);
		КонецЕсли
	КонецЦикла;
	Возврат СтрСоединить(МассивРеквизитов, ",");
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьПравилаМетаРеквизитов(ТаблицаПравил, Знач Игнорировать, Знач ВсеВариантыСравнения, Знач МетаКоллекция, Знач ДоступенНечеткийПоиск)
	
	Для Каждого МетаРеквизит Из МетаКоллекция Цикл
		Если Не Игнорировать.Свойство(МетаРеквизит.Имя) Тогда
			ВариантыСравнения = ВариантыСравненияДляТипа(МетаРеквизит.Тип, ВсеВариантыСравнения, ДоступенНечеткийПоиск);
			Если ВариантыСравнения <> Неопределено Тогда
				// Можно сравнивать
				СтрокаПравил = ТаблицаПравил.Добавить();
				СтрокаПравил.Реквизит          = МетаРеквизит.Имя;
				СтрокаПравил.ВариантыСравнения = ВариантыСравнения;
				
				ПредставлениеРеквизита = МетаРеквизит.Синоним;
				СтрокаПравил.ПредставлениеРеквизита = ?(ПустаяСтрока(ПредставлениеРеквизита), МетаРеквизит.Имя, ПредставлениеРеквизита);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВариантыСравненияДляТипа(Знач ДоступныеТипы, Знач ВсеВариантыСравнения, Знач ДоступенНечеткийПоиск) 
	
	ЭтоХранилище = ДоступныеТипы.СодержитТип(Тип("ХранилищеЗначения"));
	Если ЭтоХранилище Тогда 
		// Нельзя сравнивать
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоСтрока = ДоступныеТипы.СодержитТип(Тип("Строка"));
	ЭтоФиксированнаяСтрока = ЭтоСтрока И ДоступныеТипы.КвалификаторыСтроки <> Неопределено 
		И ДоступныеТипы.КвалификаторыСтроки.Длина <> 0;
		
	Если ЭтоСтрока И Не ЭтоФиксированнаяСтрока Тогда
		// Нельзя сравнивать
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	ЗаполнитьЗначенияСвойств(Результат.Добавить(), ВсеВариантыСравнения[0]);		// Совпадает
	
	Если ДоступенНечеткийПоиск И ЭтоСтрока Тогда
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), ВсеВариантыСравнения[1]);	// Похоже
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Пошаговый помощник

&НаСервере
Процедура ИнициализироватьСценарийМастера()
	
	// 0. Поиск не выполнялся
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Заголовок = НСтр("ru = 'Найти дубли >'");
	КнопкиМастера.Далее.Подсказка = НСтр("ru = 'Найти дубли по указанным критериям'");
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Закрыть'");
	КнопкиМастера.Отмена.Подсказка = НСтр("ru = 'Отказаться от поиска и замены дублей'");
	
	ДобавитьШагМастера(Элементы.ШагПоискНеВыполнялся,
		ДействиеШагаМастера("ПриАктивации",         "ШагПоискНеВыполнялсяПриАктивации",
		ДействиеШагаМастера("ПередДействиемДалее",  "ШагПоискНеВыполнялсяПередДействиемДалее",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагПоискНеВыполнялсяПередДействиемОтмена",))),
		КнопкиМастера);
	
	// 1. Длительный поиск
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Видимость = Ложь;
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Прервать'");
	КнопкиМастера.Отмена.Подсказка = НСтр("ru = 'Прервать поиск дублей'");
	
	ДобавитьШагМастера(Элементы.ШагВыполнениеПоиска,
		ДействиеШагаМастера("ПриАктивации",         "ШагВыполнениеПоискаПриАктивации",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагВыполнениеПоискаПередДействиемОтмена",
		ДействиеШагаМастера("ПриОбработкеОжидания", "ШагВыполнениеПоискаПриОбработкеОжидания",))), 
		КнопкиМастера);
	
	// 2. Обработка результатов поиска, выбор основных элементов.
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Заголовок = НСтр("ru = 'Удалить дубли >'");
	КнопкиМастера.Далее.Подсказка = НСтр("ru = 'Удалить дубли'");
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Закрыть'");
	КнопкиМастера.Отмена.Подсказка = НСтр("ru = 'Отказаться от поиска и замены дублей'");
	
	ДобавитьШагМастера(Элементы.ШагВыборОсновногоЭлемента,
		ДействиеШагаМастера("ПриАктивации",         "ШагВыборОсновногоЭлементаПриАктивации",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагВыборОсновногоЭлементаПередДействиемОтмена",
		ДействиеШагаМастера("ПередДействиемДалее",  "ШагВыборОсновногоЭлементаПередДействиемДалее",))),
		КнопкиМастера);
	
	// 3. Длительное удаление дублей.
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Видимость = Ложь;
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Прервать'");
	КнопкиМастера.Отмена.Подсказка = НСтр("ru = 'Прервать удаление дублей'");
	
	ДобавитьШагМастера(Элементы.ШагВыполнениеУдаления,
		ДействиеШагаМастера("ПриАктивации",         "ШагВыполнениеУдаленияПриАктивации",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагВыполнениеУдаленияПередДействиемОтмена",
		ДействиеШагаМастера("ПриОбработкеОжидания", "ШагВыполнениеУдаленияПриОбработкеОжидания",))), 
		КнопкиМастера);
	
	// 4. Успешное удаление
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Заголовок = НСтр("ru = '< Новый поиск'");
	КнопкиМастера.Назад.Подсказка = НСтр("ru = 'Начать новый поиск с другими параметрами'");
	КнопкиМастера.Далее.Видимость = Ложь;
	КнопкиМастера.Отмена.КнопкаПоУмолчанию = Истина;
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Закрыть'");
	
	ДобавитьШагМастера(Элементы.ШагУспешноеУдаление,
		ДействиеШагаМастера("ПриАктивации",         "ШагУспешноеУдалениеПриАктивации",
		ДействиеШагаМастера("ПередДействиемНазад",  "ШагУспешноеУдалениеПередДействиемНазад",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагУспешноеУдалениеПередДействиемОтмена",))),
		КнопкиМастера);
	
	// 5. Неполное удаление
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Заголовок = НСтр("ru = 'Повторить удаление >'");
	КнопкиМастера.Далее.Подсказка = НСтр("ru = 'Удалить дубли'");
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Закрыть'");
	
	ДобавитьШагМастера(Элементы.ШагНеудачныеЗамены,
		ДействиеШагаМастера("ПриАктивации",         "ШагНеудачныеЗаменыПриАктивации",
		ДействиеШагаМастера("ПередДействиемДалее",  "ШагНеудачныеЗаменыПередДействиемДалее",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагНеудачныеЗаменыПередДействиемОтмена",))),
		КнопкиМастера);
	
	// 6. Дублей не найдено
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Заголовок = НСтр("ru = 'Найти дубли >'");
	КнопкиМастера.Далее.Подсказка = НСтр("ru = 'Найти дубли по указанным критериям'");
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Закрыть'");
	
	ДобавитьШагМастера(Элементы.ШагДублейНеНайдено,
		ДействиеШагаМастера("ПриАктивации",         "ШагДублейНеНайденоПриАктивации",
		ДействиеШагаМастера("ПередДействиемДалее",  "ШагДублейНеНайденоПередДействиемДалее",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагДублейНеНайденоПередДействиемОтмена",))),
		КнопкиМастера);
	
КонецПроцедуры

// 0. Поиск не выполнялся

&НаКлиенте
Процедура ШагПоискНеВыполнялсяПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	Элементы.Шапка.Доступность = Истина;
	
	ОбновитьОписаниеОтбора();
	ОбновитьОписаниеПравилПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ШагПоискНеВыполнялсяПередДействиемДалее(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	// Возможность поиска
	Если Не ПустаяСтрока(ОбластьПоискаДублей) Тогда
		ЗавершитьШагМастера(ПараметрыШага);
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать область поиска дублей'");
	ПоказатьПредупреждение(, ТекстПредупреждения);
КонецПроцедуры

&НаКлиенте
Процедура ШагПоискНеВыполнялсяПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

// 1. Длительный поиск

&НаКлиенте
Процедура ШагВыполнениеПоискаПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	Элементы.Шапка.Доступность = Ложь;
	
	Если Не ЭтоАдресВременногоХранилища(АдресСхемыКомпоновки) Тогда
		Возврат; // Не инициализировано.
	КонецЕсли;
	
	НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновыйПоискДублей";
	ФоновоеЗаданиеЗапустить();
	
КонецПроцедуры

&НаКлиенте
Процедура ШагВыполнениеПоискаПриОбработкеОжидания(Прекратить, Знач ДополнительныеПараметры) Экспорт
	Если ФоновоеЗаданиеЗагрузитьНаКлиенте(Ложь, Ложь) Тогда
		Прекратить = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ШагВыполнениеПоискаПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	ПроверитьФоновоеЗаданиеИЗакрытьФормуБезПодтверждения();
КонецПроцедуры

// 2. Обработка результатов поиска, выбор основных элементов.

&НаКлиенте
Процедура ШагВыборОсновногоЭлементаПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	Элементы.Шапка.Доступность = Истина;
	
	// Разрешаем повторять поиск
	Элементы.ПовторитьПоиск.Видимость = Истина;
	
	РазвернутьГруппуДублейИерархически();
	
КонецПроцедуры

&НаКлиенте
Процедура ШагВыборОсновногоЭлементаПередДействиемДалее(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	// Запрещаем повторять поиск
	Элементы.ПовторитьПоиск.Видимость = Ложь;
	
	ЗавершитьШагМастера(ПараметрыШага);
КонецПроцедуры

&НаКлиенте
Процедура ШагВыборОсновногоЭлементаПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

// 3. Длительное удаление

&НаКлиенте
Процедура ШагВыполнениеУдаленияПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Элементы.Шапка.Доступность = Ложь;
	НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновоеУдалениеДублей";
	ФоновоеЗаданиеЗапустить();
КонецПроцедуры

&НаКлиенте
Процедура ШагВыполнениеУдаленияПриОбработкеОжидания(Прекратить, Знач ДополнительныеПараметры) Экспорт
	Если ФоновоеЗаданиеЗагрузитьНаКлиенте(Ложь, Ложь) Тогда
		Прекратить = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ШагВыполнениеУдаленияПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	ПроверитьФоновоеЗаданиеИЗакрытьФормуБезПодтверждения();
КонецПроцедуры

// 4. Успешное удаление

&НаКлиенте
Процедура ШагУспешноеУдалениеПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	Элементы.Шапка.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ШагУспешноеУдалениеПередДействиемНазад(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	// Переход на начало для работы с новыми параметрами.
	ПерейтиНаШагМастера(Элементы.ШагПоискНеВыполнялся, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагУспешноеУдалениеПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

// 5. Неполное удаление

&НаКлиенте
Процедура ШагНеудачныеЗаменыПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	Элементы.Шапка.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ШагНеудачныеЗаменыПередДействиемДалее(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	// Повторяем удаление
	ПерейтиНаШагМастера(Элементы.ШагВыполнениеУдаления, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагНеудачныеЗаменыПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

// 6. Дублей не найдено

&НаКлиенте
Процедура ШагДублейНеНайденоПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	Элементы.Шапка.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ШагДублейНеНайденоПередДействиемДалее(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	// Переход на повторный поиск
	ПерейтиНаШагМастера(Элементы.ШагВыполнениеПоиска, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагДублейНеНайденоПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Блок мастера

// Для встраивания функционала мастера необходимо:
//
//     1) Нарисовать на форме группу, содержащую страницы помощника.
//     2) Определить на форме три команды для действий "Далее", "Назад", "Отмена". Определить им обработчики как:
//
//         &НаКлиенте
//         Процедура ШагМастераНазад(Команда)
//             ШагМастера("Назад");
//         КонецПроцедуры
//
//         &НаКлиенте
//         Процедура ШагМастераДалее(Команда)
//             ШагМастера("Далее");
//         КонецПроцедуры
//
//         &НаКлиенте
//         Процедура ШагМастераОтмена(Команда)
//             ШагМастера("Отмена");
//         КонецПроцедуры
//
//     3) Добавить блок методов пошагового помощника.
//
//     4) В коде на сервере:
//          - Инициализировать структуры помощника вызовом "ИнициализироватьМастер", передав туда соответствующие
//            элементы формы.
//
//          - Создать сценарий работы последовательным вызовами "ДобавитьШагМастера". Рекомендуется использовать 
//            вспомогательные функции "ДействиеШагаМастера" и "КнопкаШагаМастера". Например:
//
//              ДобавитьШагМастера(Элементы.ШагВыборЦелевогоЭлемента, 
//                      ДействиеШагаМастера("ПриАктивации",         "ШагВыборЦелевогоЭлементаПриАктивации",
//                      ДействиеШагаМастера("ПередДействиемДалее",  "ШагВыборЦелевогоЭлементаПередДействиемДалее",
//                      ДействиеШагаМастера("ПередДействиемОтмена", "ШагВыборЦелевогоЭлементаПередДействиемОтмена",
//                  ))), 
//                      КнопкиМастера()
//              );
//
//     5) В коде на клиенте (обычно при открытии):
//          - Указать начальную страницу мастера при помощи вызова "УстановитьНачальнуюСтраницуМастера".
//          - Запустить начальную страницу вызовом "ЗапуститьРаботуМастера".
//

&НаСервере
Функция ИнициализироватьМастер(Знач ГруппаСтраниц, Знач КнопкаДалее, Знач КнопкаНазад, Знач КнопкаОтмена)
	// Инициализирует структуры мастера.
	//
	// Параметры:
	//     ГруппаСтраниц - ГруппаФормы - Элемент формы, группа типа "страницы", содержащая в себе страницы-шаги мастера.
	//     КнопкаДалее   - КнопкаФормы, КнопкаКоманднойПанели - Элемент формы, используемый для кнопки "Далее".
	//     КнопкаНазад   - КнопкаФормы, КнопкаКоманднойПанели - Элемент формы, используемый для кнопки "Назад".
	//     КнопкаОтмена  - КнопкаФормы, КнопкаКоманднойПанели - Элемент формы, используемый для кнопки "Отмена".
	Результат = Новый Структура;
	
	Результат.Вставить("Шаги", Новый Массив);
	Результат.Вставить("НомерТекущегоШага", 0);
	Результат.Вставить("СтраницаСтарта", Неопределено);
	
	// Идентификаторы частей интерфейса.
	Результат.Вставить("ГруппаСтраниц", ГруппаСтраниц.Имя);
	Результат.Вставить("КнопкаДалее",   КнопкаДалее.Имя);
	Результат.Вставить("КнопкаНазад",   КнопкаНазад.Имя);
	Результат.Вставить("КнопкаОтмена",  КнопкаОтмена.Имя);
	
	// Таймаут вызова обработчика
	Результат.Вставить("ТаймаутОжиданияДлительнойОперации", 
		?( ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 5, 3) );
		
	// Для обработки длительных операций.
	Результат.Вставить("ИдентификаторФоновогоЗадания");
	Результат.Вставить("АдресРезультатаФоновогоЗадания");
	Результат.Вставить("ИнформацияОбОшибке");
	Результат.Вставить("ЗаданиеВыполнено", Ложь);
	Результат.Вставить("ИмяПроцедуры");
	Результат.Вставить("ЕстьПодтверждениеОтменыЗадания", Ложь);
	
	// Для хранения пользовательских параметров.
	Результат.Вставить("ПользовательскиеПараметры", Новый Соответствие);
	
	Возврат Результат;
КонецФункции

// Добавляет шаг мастера. Переходы между страницами будут происходить согласно порядку добавления.
//
// Параметры:
//
//     Страница - ГруппаФормы - Группа-страница, содержащая элементы текущего шага страницы.
// 
//     Действия - Структура - Описание действий, возможных на текущем шаге. Поля структуры:
//
//          *  ПриАктивации      - Строка - Необязательное имя процедуры, которая будет выполнена перед активацией
//                                          страницы с двумя параметрами:
//                                           <Страница> - ГруппаФормы - группа-страница, которая активизируется.
//                                           <ДополнительныеПараметры> - Неопределено
//
//          * ПередДействиемДалее  - Строка - Необязательное имя процедуры, которая будет выполнена при нажатии кнопки
//                                            "Далее", перед переходом на следующую страницу. Процедура будет вызвана с
//                                            двумя параметрами:
//                                              <ПараметрыШага> - служебный реквизит. При успешном завершении цепочки
//                                                                немодальных  вызовов последняя процедура-обработчик
//                                                                должна произвести вызов.
//                                                                ЗавершитьШагМастера(ПараметрыШага), подтверждая
//                                                                действие.
//                                             <ДополнительныеПараметры> - Неопределено
//
//          * ПередДействиемНазад  - Строка - Аналогично ПередДействиемДалее, описывает поведение при нажатии кнопки
//                                            "Назад".
//
//          * ПередДействиемОтмена - Строка - Аналогично ПередДействиемДалее, описывает поведение при нажатии кнопки
//                                            "Отмена".
//
//          * ПриОбработкеОжидания - Строка - Необязательное имя процедуры, которая будет периодически вызываться с
//                                            двумя  параметрами:
//                                              <Прекратить> - Если при выходе из процедуры установить в значение
//                                                             Истина, то периодические вызовы будут прекращены.
//                                              <ДополнительныеПараметры> - Неопределено
//
//      Кнопки - Структура - описание кнопок на текущем шаге. Поля структуры:
//
//          * Далее  - Структура - Описание кнопки "Далее". поля: Заголовок, Подсказка, Доступность, Видимость,
//                                 КнопкаПоУмолчанию.
//                                 Пустая подсказка заменяется на заголовок. По умолчанию будут использованы значения:
//                                 Заголовок = "Далее >", Доступность = Истина, Видимость = Истина, КнопкаПоУмолчанию = Истина;
//
//          * Назад  - Структура - Аналогично кнопке "Далее", значения по умолчанию:
//                                 Заголовок = "< Назад", Доступность = Истина, Видимость = Истина, КнопкаПоУмолчанию = Ложь;
//
//          * Отмена - Структура - Аналогично кнопке "Далее", значения по умолчанию:
//                                 Заголовок = "Отмена", Доступность = Истина, Видимость = Истина, КнопкаПоУмолчанию = Ложь;
//
// Для составления параметров рекомендуется использовать вспомогательные методы "ДобавитьШагМастера",
// "ДействиеШагаМастера", "КнопкаШагаМастера".
//
&НаСервере
Процедура ДобавитьШагМастера(Знач Страница, Знач Действия, Знач Кнопки)
	
	// Умолчания
	ОписаниеШага = Новый Структура("ПриАктивации, ПередДействиемДалее, ПередДействиемНазад, ПередДействиемОтмена, ПриОбработкеОжидания");
	
	ОписаниеШага.Вставить("Страница", Страница.Имя);
	
	// Устанавливаем действия
	ЗаполнитьЗначенияСвойств(ОписаниеШага, Действия);
	
	// Регистрация описаний кнопок.
	Для Каждого КлючИЗначение Из Кнопки Цикл
		ИмяКнопки = КлючИЗначение.Ключ;
		ОписаниеКнопки = КлючИЗначение.Значение;
		// Дозаполнение вторичных свойств.
		Если Не ОписаниеКнопки.Видимость Тогда
			ОписаниеКнопки.Доступность = Ложь;
			ОписаниеКнопки.КнопкаПоУмолчанию = Ложь;
		Иначе
			Если Не ЗначениеЗаполнено(ОписаниеКнопки.Подсказка) Тогда
				ОписаниеКнопки.Подсказка = ОписаниеКнопки.Заголовок;
			КонецЕсли;
		КонецЕсли;
		// Регистрация с префиксом "Кнопка".
		ОписаниеШага.Вставить("Кнопка" + ИмяКнопки, ОписаниеКнопки);
	КонецЦикла;

	НастройкиПошаговогоМастера.Шаги.Добавить(ОписаниеШага);
КонецПроцедуры

// Вспомогательное формирование структуры, описывающей действие.
//
// Параметры:
//     Идентификатор    - Строка - Идентификатор действия, см описание метода "ДобавитьШагМастера".
//     ИмяОбработчика   - Строка - Имя процедуры, см описание метода "ДобавитьШагМастера".
//     СлужебныеДанные  - Структура - Накапливает значения.
//
// Возвращаемое значение - Структура - СлужебныеДанные с добавленными полями.
&НаСервере
Функция ДействиеШагаМастера(Знач Идентификатор, Знач ИмяОбработчика, СлужебныеДанные = Неопределено)
	Если СлужебныеДанные = Неопределено Тогда
		СлужебныеДанные = Новый Структура;
	КонецЕсли;
	СлужебныеДанные.Вставить(Идентификатор, ИмяОбработчика);;
	Возврат СлужебныеДанные;
КонецФункции

// Вспомогательное формирование структуры, описывающей кнопки мастера.
//
// Возвращаемое значение:
//   Структура - Кнопки мастера.
//       * Назад  - Структура - Описание кнопки Назад, сформированное методом КнопкаМастера().
//       * Далее  - Структура - Описание кнопки Далее, сформированное методом КнопкаМастера().
//       * Отмена - Структура - Описание кнопки Отмена, сформированное методом КнопкаМастера().
//
&НаСервере
Функция КнопкиМастера()
	Результат = Новый Структура("Далее, Назад, Отмена", КнопкаМастера(), КнопкаМастера(), КнопкаМастера());
	Результат.Далее.КнопкаПоУмолчанию = Истина;
	Результат.Далее.Заголовок = НСтр("ru='Далее >'");
	Результат.Назад.Заголовок = НСтр("ru='< Назад'");
	Результат.Отмена.Заголовок = НСтр("ru='Отмена'");
	Возврат Результат;
КонецФункции

// Описание настроек кнопки мастера.
//
// Возвращаемое значение:
//   Структура - Настройки кнопки формы.
//       * Заголовок         - Строка - Заголовок кнопки.
//       * Подсказка         - Строка - Подсказка для кнопки.
//       * Видимость         - Булево - Когда Истина то кнопка видна. Значение по умолчанию: Истина.
//       * Доступность       - Булево - Когда Истина то кнопку можно нажимать. Значение по умолчанию: Истина.
//       * КнопкаПоУмолчанию - Булево - Когда Истина то кнопка будет основной кнопкой формы. Значение по умолчанию:
//                                      Ложь.
//
// См. также:
//   "КнопкаФормы" в синтакс-помощнике.
//
&НаСервере
Функция КнопкаМастера()
	Результат = Новый Структура;
	Результат.Вставить("Заголовок", "");
	Результат.Вставить("Подсказка", "");
	
	Результат.Вставить("Доступность", Истина);
	Результат.Вставить("Видимость", Истина);
	Результат.Вставить("КнопкаПоУмолчанию", Ложь);
	
	Возврат Результат;
КонецФункции

// Устанавливает начальную страницу для первого запуска мастера.
//
// Параметры:
//     СтартоваяСтраница - Число, Строка, ГруппаФормы - Номер шага, группа-страница, или ее идентификатор.
//
&НаКлиенте
Процедура УстановитьНачальнуюСтраницуМастера(Знач Страница)
	
	НастройкиПошаговогоМастера.СтраницаСтарта = НомерШагаМастераПоИдентификатору(Страница);
	
КонецПроцедуры

// Запускает начальную работу мастера с шага, установленного предварительно при помощи
// "УстановитьНачальнуюСтраницуМастера".
&НаКлиенте
Процедура ЗапуститьРаботуМастера()
	
	Если НастройкиПошаговогоМастера.СтраницаСтарта = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Перед запуском мастера должна быть установлена начальная страница.'");
		
	ИначеЕсли НастройкиПошаговогоМастера.СтраницаСтарта = -1 Тогда
		// Разогрев. Проверяем наличие обработчиков действий у всех шагов.
		ВозможныеДействия = Новый Структура("ПриАктивации, ПередДействиемДалее, ПередДействиемНазад, ПередДействиемОтмена, ПриОбработкеОжидания");
		Для Каждого ОписаниеШага Из НастройкиПошаговогоМастера.Шаги Цикл
			Для Каждого КлючЗначение Из ВозможныеДействия Цикл
				ИмяДействия = КлючЗначение.Ключ;
				ИмяОбработчика = ОписаниеШага[ИмяДействия];
				Если Не ПустаяСтрока(ИмяОбработчика) Тогда
					Попытка
						Тест = Новый ОписаниеОповещения(ИмяОбработчика, ЭтотОбъект);
					Исключение
						Текст = НСтр("ru = 'Ошибка создания обработчика события %1 для страницы %2, не определена процедура %3'");
						Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ИмяДействия, ОписаниеШага.Страница, ИмяОбработчика);
						ВызватьИсключение Текст;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Фактический запуск
		ПерейтиНаШагМастера(НастройкиПошаговогоМастера.НомерТекущегоШага, Истина);
	Иначе
		// По умолчанию все отключено
		Элементы[НастройкиПошаговогоМастера.КнопкаДалее].Видимость  = Ложь;
		Элементы[НастройкиПошаговогоМастера.КнопкаНазад].Видимость  = Ложь;
		Элементы[НастройкиПошаговогоМастера.КнопкаОтмена].Видимость = Ложь;
		
		// Отложенный запуск
		НастройкиПошаговогоМастера.НомерТекущегоШага = НастройкиПошаговогоМастера.СтраницаСтарта;
		НастройкиПошаговогоМастера.СтраницаСтарта    = -1;
		ПодключитьОбработчикОжидания("ЗапуститьРаботуМастера", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

// Выполняет переключение мастера на следующую или предыдущую страницу.
//
// Параметры:
//     КодКоманды - Строка - Идентификатор действия, может принимать значения "Далее", "Назад" или "Отмена".
//
&НаКлиенте
Процедура ШагМастера(Знач КодКоманды)
	
	Если КодКоманды = "Далее" Тогда
		Направление = 1;
	ИначеЕсли КодКоманды = "Назад" Тогда
		Направление = -1;
	ИначеЕсли КодКоманды = "Отмена" Тогда
		Направление = 0;
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректная команда шага помощника'");
	КонецЕсли;
		
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[НастройкиПошаговогоМастера.НомерТекущегоШага];
	
	// Останавливаем обработчик, если есть.
	Если ОписаниеШага.ПриОбработкеОжидания <> Неопределено Тогда
		ОтключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера");
	КонецЕсли;
	
	// Отрабатываем уход с текущей страницы.
	Если Направление = 1 Тогда
		Действие = ОписаниеШага.ПередДействиемДалее;
		
	ИначеЕсли Направление = -1 Тогда
		Действие = ОписаниеШага.ПередДействиемНазад;
		
	Иначе
		Действие = ОписаниеШага.ПередДействиемОтмена;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Действие) Тогда
		ЗавершитьШагМастера(Направление);
	Иначе
		Оповещение = Новый ОписаниеОповещения(Действие, ЭтотОбъект);
		ВыполнитьОбработкуОповещения(Оповещение, Направление);
	КонецЕсли;
КонецПроцедуры

// Выполняет безусловное позиционирование мастера на страницу.
//
// Параметры:
//     ИдентификаторШага   - Число, Строка, ГруппаФормы - Номер, группа-страница формы или ее имя для перехода.
//     ИнициироватьСобытия - Булево - Флаг того, что необходимо вызывать события, связанные с активацией шага.
//
&НаКлиенте
Процедура ПерейтиНаШагМастера(Знач ИдентификаторШага, Знач ИнициироватьСобытия = Ложь)
	СледующийШаг = НомерШагаМастераПоИдентификатору(ИдентификаторШага);
	Если СледующийШаг = Неопределено Тогда
		Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найден шаг помощника %1'"), ИдентификаторШага);
		ВызватьИсключение Ошибка;
	КонецЕсли;
	
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[НастройкиПошаговогоМастера.НомерТекущегоШага];
	
	// Останавливаем обработчик, если есть.
	Если ОписаниеШага.ПриОбработкеОжидания <> Неопределено Тогда
		ОтключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера");
	КонецЕсли;
	
	// И запускаем новую страницу
	ШагМастераЗавершениеБезусловно(СледующийШаг, ИнициироватьСобытия);
КонецПроцедуры

// Подтверждает действие шага мастера и вызывает переключение страницы.
//
// Параметры:
//     ПараметрыШага - Служебный реквизит, полученный в обработчике перед началом действия.
//
&НаКлиенте
Процедура ЗавершитьШагМастера(Знач ПараметрыШага)
	СледующийШаг = НастройкиПошаговогоМастера.НомерТекущегоШага + ПараметрыШага;
	ПоследнийШаг = НастройкиПошаговогоМастера.Шаги.ВГраница();
	
	Если ПараметрыШага = 0 Тогда
		// Подтверждение отмены - ничего не делаем.
		Возврат;
		
	ИначеЕсли ПараметрыШага = 1 И СледующийШаг > ПоследнийШаг Тогда
		// Попытка сделать шаг за пределы вперед.
		ВызватьИсключение НСтр("ru='Попытка выхода за последний шаг мастера'");
		
	ИначеЕсли ПараметрыШага = -1 И СледующийШаг < 0 Тогда
		// Попытка сделать шаг за пределы назад.
		ВызватьИсключение НСтр("ru='Попытка выхода назад из первого шага мастера'");
		
	КонецЕсли;
	
	ШагМастераЗавершениеБезусловно(СледующийШаг);
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераЗавершениеБезусловно(Знач СледующийШаг, Знач ИнициироватьСобытия = Истина)
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[СледующийШаг];
	ПоследнийШаг = НастройкиПошаговогоМастера.Шаги.ВГраница();
	
	// Переключаем на новую страницу.
	Элементы[НастройкиПошаговогоМастера.ГруппаСтраниц].ТекущаяСтраница = Элементы[ОписаниеШага.Страница];
	// Обход особенности платформы.
	ГруппаСтраницМастера = Элементы[НастройкиПошаговогоМастера.ГруппаСтраниц];
	НоваяТекущаяСтраница = Элементы[ОписаниеШага.Страница];
	ВидГруппыСтраница = ВидГруппыФормы.Страница;
	ТипГруппаФормы    = Тип("ГруппаФормы");
	Для Каждого Страница Из ГруппаСтраницМастера.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Страница) = ТипГруппаФормы И Страница.Вид = ВидГруппыСтраница Тогда
			Страница.Видимость = (Страница = НоваяТекущаяСтраница);
		КонецЕсли;
	КонецЦикла;
	
	// Обновляем кнопки
	ОбновитьСвойстваКнопкиМастера(НастройкиПошаговогоМастера.КнопкаДалее,  ОписаниеШага.КнопкаДалее);
	ОбновитьСвойстваКнопкиМастера(НастройкиПошаговогоМастера.КнопкаНазад,  ОписаниеШага.КнопкаНазад);
	ОбновитьСвойстваКнопкиМастера(НастройкиПошаговогоМастера.КнопкаОтмена, ОписаниеШага.КнопкаОтмена);
	
	// Успешно перешли
	НастройкиПошаговогоМастера.НомерТекущегоШага = СледующийШаг;
	
	Если ИнициироватьСобытия И Не ПустаяСтрока(ОписаниеШага.ПриАктивации) Тогда
		// Отрабатываем "ПриАктивации" новой страницы, он же запустит ожидание.
		ПодключитьОбработчикОжидания("ОбработкаАктивацииСтраницыМастера", 0.1, Истина);
		
	ИначеЕсли Не ПустаяСтрока(ОписаниеШага.ПриОбработкеОжидания) Тогда
		// Запускаем обработчик ожидания, если надо.
		ПодключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера", 0.1, Истина);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвойстваКнопкиМастера(Знач ИмяКнопки, Знач Описание)
	
	КнопкаМастера = Элементы[ИмяКнопки];
	ЗаполнитьЗначенияСвойств(КнопкаМастера, Описание);
	КнопкаМастера.РасширеннаяПодсказка.Заголовок = Описание.Подсказка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивацииСтраницыМастера()
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[НастройкиПошаговогоМастера.НомерТекущегоШага];
	Если Не ПустаяСтрока(ОписаниеШага.ПриАктивации) Тогда
		Оповещение = Новый ОписаниеОповещения(ОписаниеШага.ПриАктивации, ЭтотОбъект);
		ВыполнитьОбработкуОповещения(Оповещение, Элементы[ОписаниеШага.Страница]);
	КонецЕсли;
	
	// И запускаем ожидание, если надо.
	Если Не ПустаяСтрока(ОписаниеШага.ПриОбработкеОжидания) Тогда
		// Первый запуск быстрый
		ПодключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

// Может быть номер шага или группа-страница, или ее идентификатор.
&НаКлиенте
Функция НомерШагаМастераПоИдентификатору(Знач ИдентификаторШага)
	ТипПараметра = ТипЗнч(ИдентификаторШага);
	Если ТипПараметра = Тип("Число") Тогда
		Возврат ИдентификаторШага;
	КонецЕсли;
	
	ИмяПоиска = ?(ТипПараметра = Тип("ГруппаФормы"), ИдентификаторШага.Имя, ИдентификаторШага);
	Для НомерШага=0 По НастройкиПошаговогоМастера.Шаги.ВГраница() Цикл
		Если НастройкиПошаговогоМастера.Шаги[НомерШага].Страница = ИмяПоиска Тогда
			Возврат НомерШага;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найден шаг ""%1"".'"), ИмяПоиска);
КонецФункции

// Возвращает флаг отмены
&НаКлиенте
Функция ОбработкаОжиданияСтраницыМастера()
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[НастройкиПошаговогоМастера.НомерТекущегоШага];
	Действие = ОписаниеШага.ПриОбработкеОжидания;
	Если ПустаяСтрока(Действие) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(Действие, ЭтотОбъект);
	
	Прекратить = Ложь;
	ВыполнитьОбработкуОповещения(Оповещение, Прекратить);
	Продолжать = Не Прекратить;
	
	Если Продолжать Тогда
		ПодключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера", НастройкиПошаговогоМастера.ТаймаутОжиданияДлительнойОперации, Истина);
	КонецЕсли;
	
	Возврат Продолжать;
КонецФункции

&НаКлиенте
Процедура ПослеПодтвержденияОтменыЗаданияИЗакрытияФормы(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ = КодВозвратаДиалога.Прервать Тогда
		ПроверитьФоновоеЗаданиеИЗакрытьФормуБезПодтверждения();
	Иначе
		ОбработкаОжиданияСтраницыМастера();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФоновоеЗаданиеИЗакрытьФормуБезПодтверждения()
	Если Не ФоновоеЗаданиеЗагрузитьНаКлиенте(Истина, Ложь) Тогда
		НастройкиПошаговогоМастера.ЕстьПодтверждениеОтменыЗадания = Истина;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ФоновоеЗаданиеЗагрузитьНаКлиенте(ПрерватьЕслиНеВыполнено, ПоказатьДиалогПередЗакрытием)
	
	ОтключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера");
	
	ИнформацияОЗадании = ФоновоеЗаданиеЗагрузитьРезультат(ПрерватьЕслиНеВыполнено);
	Если Не ИнформацияОЗадании.Завершено Тогда
		Если ПоказатьДиалогПередЗакрытием Тогда
			Обработчик = Новый ОписаниеОповещения("ПослеПодтвержденияОтменыЗаданияИЗакрытияФормы", ЭтотОбъект);
			
			Если НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновыйПоискДублей" Тогда
				ТекстВопроса = НСтр("ru = 'Прервать поиск дублей и закрыть форму?'");
			ИначеЕсли НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновоеУдалениеДублей" Тогда
				ТекстВопроса = НСтр("ru = 'Прервать удаление дублей и закрыть форму?'");
			КонецЕсли;
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Прервать, НСтр("ru = 'Прервать'"));
			Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не прерывать'"));
			
			ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Нет);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Если НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновыйПоискДублей" Тогда
		// Смотрим на результат выполнения.
		ОписаниеОшибки = Неопределено;
		Если ИнформацияОЗадании.ИнформацияОбОшибке <> Неопределено Тогда
			ОписаниеОшибки = ИнформацияОЗадании.ИнформацияОбОшибке;
		ИначеЕсли ИнформацияОЗадании.Результат = -1 Тогда
			ОписаниеОшибки = ОписаниеСостоянияНайденныхДублей;
		КонецЕсли;
		
		Если ОписаниеОшибки = Неопределено Тогда
			Если ИнформацияОЗадании.Результат <> Неопределено И ИнформацияОЗадании.Результат > 0 Тогда
				// Найдены какие-то дубли
				ШагМастера("Далее");
			Иначе
				// Дублей по текущим установкам не найдено.
				ПерейтиНаШагМастера(Элементы.ШагДублейНеНайдено, Истина);
			КонецЕсли;
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки );
			ПерейтиНаШагМастера(Элементы.ШагПоискНеВыполнялся, Истина);
		КонецЕсли;
	ИначеЕсли НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновоеУдалениеДублей" Тогда
		Если ИнформацияОЗадании.ИнформацияОбОшибке = Неопределено Тогда
			// Выполнено успешно, данные сформированы и переложены в реквизиты.
			Если ИнформацияОЗадании.Результат = Истина Тогда
				// Успешно заменены все группы дублей.
				ШагМастера("Далее");
			Иначе
				// Не все места использования удалось заменить.
				ПерейтиНаШагМастера(Элементы.ШагНеудачныеЗамены, Истина);
			КонецЕсли;
		Иначе
			// Фоновое задание завершено с ошибкой.
			ПоказатьПредупреждение(, ИнформацияОЗадании.ИнформацияОбОшибке);
			ПерейтиНаШагМастера(Элементы.ШагПоискНеВыполнялся, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеЗапустить()
	// Отмена предыдущего задания.
	ФоновоеЗаданиеОтменить();
	
	// Определение параметров запуска.
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ПолноеИмяОбъекта", "Обработка.ПоискИУдалениеДублей");
	ПараметрыМетода.Вставить("ИмяПроцедуры", НастройкиПошаговогоМастера.ИмяПроцедуры);
	
	Если НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновыйПоискДублей" Тогда
		
		НаименованиеМетода = НСтр("ru = 'Поиск и удаление дублей: Поиск дублей'");
		
		ПараметрыМетода.Вставить("ОбластьПоискаДублей",     ОбластьПоискаДублей);
		ПараметрыМетода.Вставить("МаксимальноеЧислоДублей", 1500);
		
		Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
			ПараметрыМетода.МаксимальноеЧислоДублей = 50;
		КонецЕсли;
		
		МассивПравилПоиска = Новый Массив;
		Для Каждого Правило Из ПравилаПоиска Цикл
			МассивПравилПоиска.Добавить(Новый Структура("Реквизит, Правило", Правило.Реквизит, Правило.Правило));
		КонецЦикла;
		ПараметрыМетода.Вставить("ПравилаПоиска", МассивПравилПоиска);
		
		ПараметрыМетода.Вставить("УчитыватьПрикладныеПравила", УчитыватьПрикладныеПравила);
		
		// В качестве схемы компоновки передаем схему, будет использован отдельный фоновый сеанс.
		ПараметрыМетода.Вставить("СхемаКомпоновки", ПолучитьИзВременногоХранилища(АдресСхемыКомпоновки));
		ПараметрыМетода.Вставить("НастройкиКомпоновщикаПредварительногоОтбора", КомпоновщикПредварительногоОтбора.Настройки);
		
	ИначеЕсли НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновоеУдалениеДублей" Тогда
		
		НаименованиеМетода = НСтр("ru = 'Поиск и удаление дублей: Удаление дублей'");
		
		ПараметрыМетода.Вставить("СпособУдаления", "Пометка");
		ПараметрыМетода.Вставить("ПарыЗамен", ПарыЗаменДублей());
		ПараметрыМетода.Вставить("УчитыватьПрикладныеПравила", УчитыватьПрикладныеПравила);
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Запуск.
	ИнформацияОбОшибке = Неопределено;
	Попытка
		Задание = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"ДлительныеОперации.ВыполнитьКомандуОтчетаИлиОбработки",
			ПараметрыМетода,
			НаименованиеМетода);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	Если ИнформацияОбОшибке <> Неопределено Тогда
		НастройкиПошаговогоМастера.ЗаданиеВыполнено               = Истина;
		НастройкиПошаговогоМастера.ИнформацияОбОшибке             = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания   = Неопределено;
		НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
	НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания = Задание.АдресХранилища;
	НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания   = Задание.ИдентификаторЗадания;
	НастройкиПошаговогоМастера.ЗаданиеВыполнено               = Задание.ЗаданиеВыполнено;
	
	Если НастройкиПошаговогоМастера.ЗаданиеВыполнено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеЗагрузитьРезультат(Знач ПрерватьЕслиНеВыполнено = Ложь)
	Если НастройкиПошаговогоМастера.ЗаданиеВыполнено Тогда
		НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания = Неопределено;
	Иначе
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания);
		Если Задание <> Неопределено Тогда
			Если Задание.ИнформацияОбОшибке <> Неопределено Тогда
				НастройкиПошаговогоМастера.ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
			КонецЕсли;
			НастройкиПошаговогоМастера.ЗаданиеВыполнено = Задание.Состояние <> СостояниеФоновогоЗадания.Активно;
		КонецЕсли;
	КонецЕсли;
	
	Значение = Неопределено;
	Если НастройкиПошаговогоМастера.ЗаданиеВыполнено Тогда
		Если НастройкиПошаговогоМастера.ИнформацияОбОшибке = Неопределено Тогда
			Значение = ПолучитьИзВременногоХранилища(НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания);
			Если НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновыйПоискДублей" Тогда
				Значение = ЗаполнитьРезультатыПоискаДублей(Значение);
			ИначеЕсли НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновоеУдалениеДублей" Тогда
				Значение = ЗаполнитьРезультатыУдаленияДублей(Значение);
			КонецЕсли;
		КонецЕсли;
		НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания = Неопределено;
		НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания = Неопределено;
	КонецЕсли;
	
	Если ПрерватьЕслиНеВыполнено И Не НастройкиПошаговогоМастера.ЗаданиеВыполнено Тогда
		ФоновоеЗаданиеОтменить();
	КонецЕсли;
	
	ИнформацияОЗадании = Новый Структура;
	ИнформацияОЗадании.Вставить("Завершено",          НастройкиПошаговогоМастера.ЗаданиеВыполнено);
	ИнформацияОЗадании.Вставить("ИнформацияОбОшибке", НастройкиПошаговогоМастера.ИнформацияОбОшибке);
	ИнформацияОЗадании.Вставить("Результат",          Значение);
	
	Возврат ИнформацияОЗадании;
КонецФункции

&НаСервере
Процедура ФоновоеЗаданиеОтменить()
	Если НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания <> Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания);
	КонецЕсли;
	НастройкиПошаговогоМастера.ЗаданиеВыполнено               = Ложь;
	НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания = Неопределено;
	НастройкиПошаговогоМастера.ИнформацияОбОшибке             = Неопределено;
	НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания   = Неопределено;
КонецПроцедуры

#КонецОбласти