// Форма параметризуется.
//
// Параметры:
//     СписокСсылок - Массив, СписокЗначений - набор ссылок для анализа.
//                                             Может быть коллекцией элементов, обладающих полем "Ссылка".
//

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьУсловноеОформление();
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Перекладываем параметры в таблицу МестаИспользования.
	// Инициализируем реквизиты ОсновнойЭлемент, ОбщийВладелецЗаменяемыхСсылок, ТекстОшибкиПараметров.
	ИнициализироватьОбъединяемыеСсылки( МассивСсылокИзНабора(Параметры.НаборСсылок) );
	Если Не ПустаяСтрока(ТекстОшибкиПараметров) Тогда
		// Будет выдано предупреждение при открытии;
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = ОсновнойЭлемент.Ссылка.Метаданные();
	ЕстьПравоБезвозвратногоУдаления = ПравоДоступа("АдминистрированиеДанных", Метаданные) 
		Или ПравоДоступа("ИнтерактивноеУдаление", МетаданныеОбъекта);
	СобытиеОповещенияОЗамене        = Обработки.ЗаменаИОбъединениеЭлементов.СобытиеОповещенияОЗамене();
	
	ТекущийВариантУдаления = "Пометка";
	НастройкиПошаговогоМастера = ИнициализироватьМастер(Элементы.ШагиМастера, Элементы.Далее, Элементы.Назад, Элементы.Отмена);
	
	// Добавляем шаги, зависящие от логики формы.
	ИнициализироватьСценарийМастера();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Необходимость сообщения об ошибке.
	Если Не ПустаяСтрока(ТекстОшибкиПараметров) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, ТекстОшибкиПараметров);
		Возврат;
	КонецЕсли;
	
	// Указываем стартовую страницу.
	УстановитьНачальнуюСтраницуМастера(Элементы.ШагПоискМестИспользования);
	ЗапуститьРаботуМастера();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	// Проверка задания.
	Если НастройкиПошаговогоМастера.ИмяПроцедуры = "ЗаменитьСсылки" // Важно показывать только результат замены.
		И НастройкиПошаговогоМастера.ЗаданиеВыполнено = Ложь
		И НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания <> Неопределено
		И НастройкиПошаговогоМастера.ЕстьПодтверждениеОтменыЗадания = Ложь Тогда
		Отказ = Истина;
		ФоновоеЗаданиеЗагрузитьНаКлиенте(Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если НастройкиПошаговогоМастера.ЗаданиеВыполнено = Ложь
		И НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания <> Неопределено Тогда
		ФоновоеЗаданиеОтменить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапкиФормы

&НаКлиенте
Процедура ПодсказкаВыбораОсновногоЭлементаОбработкаНавигационнойСсылки(Элемент, ЗначениеНавигационнойСсылки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеНавигационнойСсылки = "ПереключениеРежимаУдаления" Тогда
		Если ТекущийВариантУдаления = "Непосредственно" Тогда
			ТекущийВариантУдаления = "Пометка" 
		Иначе
			ТекущийВариантУдаления = "Непосредственно" 
		КонецЕсли;
		СформироватьПодсказкуОбъединения();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМестаИспользования

&НаКлиенте
Процедура МестаИспользованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Ссылка = МестаИспользования.НайтиПоИдентификатору(ВыбраннаяСтрока).Ссылка;
	
	Если Поле <> Элементы.МестаИспользованияМестИспользования Тогда
		ПоказатьЗначение(, Ссылка);
		Возврат;
	КонецЕсли;
	
	НаборСсылок = Новый Массив;
	НаборСсылок.Добавить(Ссылка);
	ПоискИУдалениеДублейКлиент.ПоказатьМестаИспользования(НаборСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура МестаИспользованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	// Добавляем всегда того же типа, что и основной.
	ИмяФормыВыбора = ИмяФормыВыбораПоСсылке(ОсновнойЭлемент);
	Если Не ПустаяСтрока(ИмяФормыВыбора) Тогда
		ПараметрыФормы = Новый Структура("МножественныйВыбор", Истина);
		Если ОбщийВладелецЗаменяемыхСсылок <> Неопределено Тогда
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", ОбщийВладелецЗаменяемыхСсылок));
		КонецЕсли;
		ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МестаИспользованияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Или МестаИспользования.Количество()<3 Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = ТекущиеДанные.Ссылка;
	Код    = Строка(ТекущиеДанные.Код);
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Удалить из списка для объединения элемент ""%1""?'"),
		Строка(Ссылка) + ?(ПустаяСтрока(Код), "", " (" + Код + ")" ));
	
	Оповещение = Новый ОписаниеОповещения("МестаИспользованияПередУдалениемЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("ТекущаяСтрока", Элемент.ТекущаяСтрока);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура МестаИспользованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Добавляемые = ВыбранноеЗначение;
	Иначе
		Добавляемые = Новый Массив;
		Добавляемые.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	ДобавитьСтрокиМестИспользования(Добавляемые);
	СформироватьПодсказкуОбъединения();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНеудачныеЗамены

&НаКлиенте
Процедура НеудачныеЗаменыПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		РасшифровкаПричиныНеудачи = "";
	Иначе
		РасшифровкаПричиныНеудачи = ТекущиеДанные.ПодробнаяПричина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НеудачныеЗаменыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Ссылка = НеудачныеЗамены.НайтиПоИдентификатору(ВыбраннаяСтрока).Ссылка;
	Если Ссылка <> Неопределено Тогда
		ПоказатьЗначение(, Ссылка);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ШагМастераНазад(Команда)
	ШагМастера("Назад");
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераДалее(Команда)
	ШагМастера("Далее");
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераОтмена(Команда)
	ШагМастера("Отмена");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлементМестаИспользования(Команда)
	ТекущиеДанные = Элементы.МестаИспользования.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МестаИспользования(Команда)
	
	ТекущиеДанные = Элементы.МестаИспользования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборСсылок = Новый Массив;
	НаборСсылок.Добавить(ТекущиеДанные.Ссылка);
	ПоискИУдалениеДублейКлиент.ПоказатьМестаИспользования(НаборСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеМестаИспользования(Команда)
	
	Если МестаИспользования.Количество() > 0 Тогда 
		ПоискИУдалениеДублейКлиент.ПоказатьМестаИспользования(МестаИспользования);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОсновным(Команда)
	ТекущиеДанные = Элементы.МестаИспользования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойЭлемент = ТекущиеДанные.Ссылка;
	СформироватьПодсказкуОбъединения();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлементНеудачнойЗамены(Команда)
	ТекущиеДанные = Элементы.НеудачныеЗамены.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеНеудачныеЗамены(Команда)
	ДеревоФормы = Элементы.НеудачныеЗамены;
	Для Каждого Элемент Из НеудачныеЗамены.ПолучитьЭлементы() Цикл
		ДеревоФормы.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсеНеудачныеЗамены(Команда)
	ДеревоФормы = Элементы.НеудачныеЗамены;
	Для Каждого Элемент Из НеудачныеЗамены.ПолучитьЭлементы() Цикл
		ДеревоФормы.Свернуть(Элемент.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		ШрифтВажнойНадписи = Новый Шрифт(, , Истина);
	Иначе // Такси.
		ШрифтВажнойНадписи = Новый Шрифт("Arial", 10, Истина, Ложь, Ложь, Ложь, 100);
	КонецЕсли;
	
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Поле = Новый ПолеКомпоновкиДанных("ОсновнойЭлемент"); // Для стандартов (запрещается конструктор внутри конструктора).
	Условие = Новый Структура("Вид, Значение", "НеРавно", Поле);
	Инструкция.Отборы.Вставить("МестаИспользования.Ссылка", Условие);
	Инструкция.Поля = "МестаИспользованияОсновной";
	Инструкция.Оформление.Вставить("Отображать", Ложь);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
	
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Отборы.Вставить("МестаИспользования.Ссылка", Новый ПолеКомпоновкиДанных("ОсновнойЭлемент"));
	Инструкция.Поля = "МестаИспользованияСсылка, МестаИспользованияКод, МестаИспользованияМестИспользования";
	Инструкция.Оформление.Вставить("Шрифт", ШрифтВажнойНадписи);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
	
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Отборы.Вставить("МестаИспользования.МестИспользования", Новый Структура("Вид, Значение", "МеньшеИлиРавно", 0));
	Инструкция.Поля = "МестаИспользованияНеИспользуется";
	Инструкция.Оформление.Вставить("Видимость", Истина);
	Инструкция.Оформление.Вставить("Отображать", Истина);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
	
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Отборы.Вставить("МестаИспользования.МестИспользования", Новый Структура("Вид, Значение", "Больше", 0));
	Инструкция.Поля = "МестаИспользованияНеИспользуется";
	Инструкция.Оформление.Вставить("Видимость", Ложь);
	Инструкция.Оформление.Вставить("Отображать", Ложь);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
	
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Отборы.Вставить("МестаИспользования.МестИспользования", Новый Структура("Вид, Значение", "МеньшеИлиРавно", 0));
	Инструкция.Поля = "МестаИспользованияМестИспользования";
	Инструкция.Оформление.Вставить("Видимость", Ложь);
	Инструкция.Оформление.Вставить("Отображать", Ложь);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
	
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Отборы.Вставить("НеудачныеЗамены.Код", Новый Структура("Вид, Значение", "НеЗаполнено"));
	Инструкция.Поля = "НеудачныеЗаменыКод";
	Инструкция.Оформление.Вставить("Видимость", Ложь);
	Инструкция.Оформление.Вставить("Отображать", Ложь);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
	
	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
	Инструкция.Отборы.Вставить("МестаИспользования.МестИспользования", Новый Структура("Вид, Значение", "Больше", 0));
	Инструкция.Поля = "МестаИспользованияМестИспользования";
	Инструкция.Оформление.Вставить("Видимость", Истина);
	Инструкция.Оформление.Вставить("Отображать", Истина);
	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбъединяемыеСсылки(Знач МассивСсылок)
	
	РезультатПроверки = ПроверитьОбъединяемыеСсылки(МассивСсылок);
	ТекстОшибкиПараметров = РезультатПроверки.Ошибка;
	Если Не ПустаяСтрока(ТекстОшибкиПараметров) Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойЭлемент = МассивСсылок[0];
	ОбщийВладелецЗаменяемыхСсылок = РезультатПроверки.ОбщийВладелец;
	
	МестаИспользования.Очистить();
	Для Каждого Элемент Из МассивСсылок Цикл
		МестаИспользования.Добавить().Ссылка = Элемент;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьОбъединяемыеСсылки(Знач НаборСсылок)
	
	Результат = Новый Структура("Ошибка, ОбщийВладелец");
	
	КоличествоСсылок = НаборСсылок.Количество();
	Если КоличествоСсылок < 2 Тогда
		Результат.Ошибка = НСтр("ru = 'Для объединения необходимо указать несколько элементов.'");
		Возврат Результат;
	КонецЕсли;
	
	ПервыйЭлемент = НаборСсылок[0];
	
	ОсновныеМетаданные = ПервыйЭлемент.Метаданные();
	Характеристики = Новый Структура("Владельцы, Иерархический, ВидИерархии", Новый Массив, Ложь);
	ЗаполнитьЗначенияСвойств(Характеристики, ОсновныеМетаданные);
	
	ЕстьВладельцы = Характеристики.Владельцы.Количество() > 0;
	ЕстьГруппы    = Характеристики.Иерархический И Характеристики.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
	
	ДополнительныеПоля = "";
	Если ЕстьВладельцы Тогда
		ДополнительныеПоля = ДополнительныеПоля + ", Владелец КАК Владелец";
	Иначе
		ДополнительныеПоля = ДополнительныеПоля + ", НЕОПРЕДЕЛЕНО КАК Владелец";
	КонецЕсли;
	
	Если ЕстьГруппы Тогда
		ДополнительныеПоля = ДополнительныеПоля + ", ЭтоГруппа КАК ЭтоГруппа";
	Иначе
		ДополнительныеПоля = ДополнительныеПоля + ", ЛОЖЬ КАК ЭтоГруппа";
	КонецЕсли;
	
	ИмяТаблицы = ОсновныеМетаданные.ПолноеИмя();
	Запрос = Новый Запрос("
		|ВЫБРАТЬ Ссылка КАК Ссылка" + ДополнительныеПоля + " ПОМЕСТИТЬ ЗаменяемыеСсылки
		|ИЗ " + ИмяТаблицы + " ГДЕ Ссылка В (&НаборСсылок)
		|ИНДЕКСИРОВАТЬ ПО Владелец, ЭтоГруппа
		|;
		|ВЫБРАТЬ 
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Владелец) КАК КоличествоВладельцев,
		|	МИНИМУМ(Владелец)              КАК ОбщийВладелец,
		|	МАКСИМУМ(ЭтоГруппа)            КАК ЕстьГруппы,
		|	КОЛИЧЕСТВО(Ссылка)             КАК КоличествоСсылок
		|ИЗ
		|	ЗаменяемыеСсылки
		|");
	Запрос.УстановитьПараметр("НаборСсылок", НаборСсылок);
	
	Контроль = Запрос.Выполнить().Выгрузить()[0];
	Если Контроль.ЕстьГруппы Тогда
		Результат.Ошибка = НСтр("ru = 'Один из объединяемых элементов является группой.
		                              |Группы не могут быть объединены.'");
	ИначеЕсли Контроль.КоличествоВладельцев > 1 Тогда 
		Результат.Ошибка = НСтр("ru = 'У объединяемых элементов различные владельцы.
		                              |Такие элементы не могут быть объединены.'");
	ИначеЕсли Контроль.КоличествоСсылок <> КоличествоСсылок Тогда
		Результат.Ошибка = НСтр("ru = 'Все объединяемые элементы должны быть одного типа.'");
	Иначе 
		// Все нормально
		Результат.ОбщийВладелец = ?(ЕстьВладельцы, Контроль.ОбщийВладелец, Неопределено);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура МестаИспользованияПередУдалениемЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// Фактическое удаление из таблицы.
	Строка = МестаИспользования.НайтиПоИдентификатору(ДополнительныеПараметры.ТекущаяСтрока);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексУдаленнойСтроки = МестаИспользования.Индекс(Строка);
	ВычислятьОсновной     = Строка.Ссылка = ОсновнойЭлемент;
	
	МестаИспользования.Удалить(Строка);
	Если ВычислятьОсновной Тогда
		ИндексПоследнейСтроки = МестаИспользования.Количество() - 1;
		Если ИндексУдаленнойСтроки <= ИндексПоследнейСтроки Тогда 
			ИндексОсновнойСтроки = ИндексУдаленнойСтроки;
		Иначе
			ИндексОсновнойСтроки = ИндексПоследнейСтроки;
		КонецЕсли;
			
		ОсновнойЭлемент = МестаИспользования[ИндексОсновнойСтроки].Ссылка;
	КонецЕсли;
	
	СформироватьПодсказкуОбъединения();
КонецПроцедуры

&НаСервере
Процедура СформироватьПодсказкуОбъединения()

	Если ЕстьПравоБезвозвратногоУдаления Тогда
		Если ТекущийВариантУдаления = "Пометка" Тогда
			ТекстПодсказки = НСтр("ru = 'Элементы (%1) будут <a href = ""ПереключениеРежимаУдаления"">помечены на удаление</a> и заменены во всех местах
				|использования на ""%2"" (отмечен стрелкой).'");
		Иначе
			ТекстПодсказки = НСтр("ru = 'Элементы (%1) будут <a href = ""ПереключениеРежимаУдаления"">удалены безвозвратно</a> и заменены во всех местах
				|использования на ""%2"" (отмечен стрелкой).'");
		КонецЕсли;
	Иначе
		ТекстПодсказки = НСтр("ru = 'Элементы (%1) будут помечены на удаление и заменены во всех местах
			|использования на ""%2"" (отмечен стрелкой).'");
	КонецЕсли;
		
	ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПодсказки, МестаИспользования.Количество()-1, ОсновнойЭлемент);
	Элементы.ПодсказкаВыбораОсновногоЭлемента.Заголовок = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(ТекстПодсказки);
	
КонецПроцедуры

&НаКлиенте
Функция СообщениеОЗавершении()
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Элементы (%1) объединены в ""%2""'"),
		МестаИспользования.Количество(),
		ОсновнойЭлемент);
	
КонецФункции

&НаКлиенте
Процедура СформироватьНадписьНеудачныеЗамены()
	
	Элементы.РезультатНеудачныеЗамены.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Объединение элементов не выполнено. В некоторых местах использования не может быть произведена
		           |автоматическая замена на ""%1""'"),
		ОсновнойЭлемент);
	
КонецПроцедуры

// Параметры:
//     СписокДанных - Массив - содержит измененные данные, о типе которых будет оповещено.
//
&НаКлиенте
Процедура ОповеститьОбУспешнойЗамене(Знач СписокДанных)
	// Изменения объектов, в которых происходили замены.
	СписокТипов = Новый Соответствие;
	Для Каждого Элемент Из СписокДанных Цикл
		Тип = ТипЗнч(Элемент);
		Если СписокТипов[Тип] = Неопределено Тогда
			ОповеститьОбИзменении(Тип);
			СписокТипов.Вставить(Тип, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Общее оповещение
	Если СписокТипов.Количество() > 0 Тогда
		Оповестить(СобытиеОповещенияОЗамене, , ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМестаИспользования(Знач ТаблицаИспользования)
	
	НовыеМестаИспользования = МестаИспользования.Выгрузить();
	НовыеМестаИспользования.Индексы.Добавить("Ссылка");
	
	ЭтоОбновление = НовыеМестаИспользования.Найти(ОсновнойЭлемент, "Ссылка") <> Неопределено;
	
	Если Не ЭтоОбновление Тогда
		НовыеМестаИспользования = МестаИспользования.Выгрузить(Новый Массив);
		НовыеМестаИспользования.Индексы.Добавить("Ссылка");
	КонецЕсли;
	
	КэшМетаданных = Новый Соответствие;
	
	МаксСсылка = Неопределено;
	МаксМест   = -1;
	Для Каждого Строка Из ТаблицаИспользования Цикл
		Ссылка = Строка.Ссылка;
		
		СтрокаИспользования = НовыеМестаИспользования.Найти(Ссылка, "Ссылка");
		Если СтрокаИспользования = Неопределено Тогда
			СтрокаИспользования = НовыеМестаИспользования.Добавить();
			СтрокаИспользования.Ссылка = Ссылка;
		КонецЕсли;
		
		Мест = Строка.Вхождения;
		Если Мест>МаксМест
			И Не Ссылка.ПометкаУдаления Тогда
			МаксСсылка = Ссылка;
			МаксМест   = Мест;
		КонецЕсли;
		
		СтрокаИспользования.МестИспользования = Мест;
		СтрокаИспользования.Код      = ВозможныйКодСсылки(Ссылка, КэшМетаданных);
		СтрокаИспользования.Владелец = ВозможныйВладелецСсылки(Ссылка, КэшМетаданных);
		
		СтрокаИспользования.НеИспользуется = ?(Мест = 0, НСтр("ru = 'Не используется'"), "");
	КонецЦикла;
	
	МестаИспользования.Загрузить(НовыеМестаИспользования);
	
	Если МаксСсылка <> Неопределено Тогда
		ОсновнойЭлемент = МаксСсылка;
	КонецЕсли;
	
	// Обновляем заголовки
	Представление = ?(ОсновнойЭлемент = Неопределено, "", ОсновнойЭлемент.Метаданные().Представление());
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Объединение элементов %1 в один'"), Представление);
КонецПроцедуры

&НаСервере
Функция ЗаполнитьНеудачныеЗамены(Знач РезультатыЗамены)
	// РезультатыЗамены - таблица с колонками Ссылка, ОбъектОшибки, ТипОшибки, ТекстОшибки.
	КорневыеСтроки = НеудачныеЗамены.ПолучитьЭлементы();
	КорневыеСтроки.Очистить();
	
	СоответствиеСтрок = Новый Соответствие;
	КэшМетаданных     = Новый Соответствие;
	
	Для Каждого СтрокаРезультата Из РезультатыЗамены Цикл
		Ссылка = СтрокаРезультата.Ссылка;
		
		ОшибкиПоСсылке = СоответствиеСтрок[Ссылка];
		Если ОшибкиПоСсылке = Неопределено Тогда
			СтрокаДерева = КорневыеСтроки.Добавить();
			СтрокаДерева.Ссылка = Ссылка;
			СтрокаДерева.Данные = Строка(Ссылка);
			СтрокаДерева.Код    = Строка( ВозможныйКодСсылки(Ссылка, КэшМетаданных) );
			СтрокаДерева.Пиктограмма = -1;
			
			ОшибкиПоСсылке = СтрокаДерева.ПолучитьЭлементы();
			СоответствиеСтрок.Вставить(Ссылка, ОшибкиПоСсылке);
		КонецЕсли;
		
		СтрокаОшибки = ОшибкиПоСсылке.Добавить();
		СтрокаОшибки.Ссылка = СтрокаРезультата.ОбъектОшибки;
		СтрокаОшибки.Данные = СтрокаРезультата.ПредставлениеОбъектаОшибки;
		
		ТипОшибки = СтрокаРезультата.ТипОшибки;
		Если ТипОшибки = "НеизвестныеДанные" Тогда
			СтрокаОшибки.Причина = НСтр("ru = 'Обнаружена данные, обработка которых не планировалась.'");
			
		ИначеЕсли ТипОшибки = "ОшибкаБлокировки" Тогда
			СтрокаОшибки.Причина = НСтр("ru = 'Не удалось заблокировать данные.'");
			
		ИначеЕсли ТипОшибки = "ДанныеИзменены" Тогда
			СтрокаОшибки.Причина = НСтр("ru = 'Данные изменены другим пользователем.'");
			
		ИначеЕсли ТипОшибки = "ОшибкаЗаписи" Тогда
			СтрокаОшибки.Причина = СтрокаРезультата.ТекстОшибки;
			
		ИначеЕсли ТипОшибки = "ОшибкаУдаления" Тогда
			СтрокаОшибки.Причина = НСтр("ru = 'Невозможно удалить данные.'");
			
		Иначе
			СтрокаОшибки.Причина = НСтр("ru = 'Неизвестная ошибка.'");
			
		КонецЕсли;
		
		СтрокаОшибки.ПодробнаяПричина = СтрокаРезультата.ТекстОшибки;
	КонецЦикла; // результаты замены
	
	Возврат КорневыеСтроки.Количество() > 0;
КонецФункции

&НаСервереБезКонтекста
Функция ИмяФормыВыбораПоСсылке(Знач Ссылка)
	Мета = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
	Возврат ?(Мета = Неопределено, Неопределено, Мета.ПолноеИмя() + ".ФормаВыбора");
КонецФункции

// Преобразует массив, список значений или коллекцию в массив.
//
&НаСервереБезКонтекста
Функция МассивСсылокИзНабора(Знач Ссылки)
	
	ТипПараметра = ТипЗнч(Ссылки);
	Если Ссылки = Неопределено Тогда
		МассивСсылок = Новый Массив;
		
	ИначеЕсли ТипПараметра  = Тип("СписокЗначений") Тогда
		МассивСсылок = Ссылки.ВыгрузитьЗначения();
		
	ИначеЕсли ТипПараметра = Тип("Массив") Тогда
		МассивСсылок = Ссылки;
		
	Иначе
		МассивСсылок = Новый Массив;
		Для Каждого Элемент Из Ссылки Цикл
			МассивСсылок.Добавить(Элемент.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивСсылок;
КонецФункции

// Добавляет массив ссылок
&НаСервере
Процедура ДобавитьСтрокиМестИспользования(Знач МассивСсылок)
	ИндексПоследнего = Неопределено;
	КэшМетаданных    = Новый Соответствие;
	
	Фильтр = Новый Структура("Ссылка");
	Для Каждого Ссылка Из МассивСсылок Цикл
		Фильтр.Ссылка = Ссылка;
		СуществующиеСтроки = МестаИспользования.НайтиСтроки(Фильтр);
		Если СуществующиеСтроки.Количество() = 0 Тогда
			Строка = МестаИспользования.Добавить();
			Строка.Ссылка = Ссылка;
			
			Строка.Код      = ВозможныйКодСсылки(Ссылка, КэшМетаданных);
			Строка.Владелец = ВозможныйВладелецСсылки(Ссылка, КэшМетаданных);
			
			Строка.МестИспользования = -1;
			Строка.НеИспользуется    = НСтр("ru = 'Не рассчитано'");
		Иначе
			Строка = СуществующиеСтроки[0];
		КонецЕсли;
		
		ИндексПоследнего = Строка.ПолучитьИдентификатор();
	КонецЦикла;
	
	Если ИндексПоследнего <> Неопределено Тогда
		Элементы.МестаИспользования.ТекущаяСтрока = ИндексПоследнего;
	КонецЕсли;
КонецПроцедуры

// Возвращаемое значение:
//     Произвольный - код справочника и т.п. если он есть по метаданным, 
//     Неопределено - если кода нет.
//
&НаСервереБезКонтекста
Функция ВозможныйКодСсылки(Знач Ссылка, КэшМетаданных)
	Данные = ОписаниеМетаПоСсылке(Ссылка, КэшМетаданных);
	Возврат ?(Данные.ЕстьКод, Ссылка.Код, Неопределено);
КонецФункции

// Возвращаемое значение:
//     Произвольный - владелец справочника если он есть по метаданным, 
//     Неопределено - если владельца нет.
//
&НаСервереБезКонтекста
Функция ВозможныйВладелецСсылки(Знач Ссылка, КэшМетаданных)
	Данные = ОписаниеМетаПоСсылке(Ссылка, КэшМетаданных);
	Возврат ?(Данные.ЕстьВладелец, Ссылка.Владелец, Неопределено);
КонецФункции

// Возвращает описание справочника и т.п. по метаданным.
&НаСервереБезКонтекста
Функция ОписаниеМетаПоСсылке(Знач Ссылка, КэшМетаданных)
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	Данные = КэшМетаданных[МетаданныеОбъекта];
	
	Если Данные = Неопределено Тогда
		Тест = Новый Структура("ДлинаКода, Владельцы", 0, Новый Массив);
		ЗаполнитьЗначенияСвойств(Тест, МетаданныеОбъекта);
		
		Данные = Новый Структура;
		Данные.Вставить("ЕстьКод", Тест.ДлинаКода > 0);
		Данные.Вставить("ЕстьВладелец", Тест.Владельцы.Количество() > 0);
		
		КэшМетаданных[МетаданныеОбъекта] = Данные;
	КонецЕсли;
	
	Возврат Данные;
КонецФункции

// Возвращает список успешно замененных ссылок, тех которых нет в НеудачныеЗамены.
&НаКлиенте
Функция УдалитьИзМестИспользованияОбработанные()
	Результат = Новый Массив;
	
	Неудачные = Новый Соответствие;
	Для Каждого Строка Из НеудачныеЗамены.ПолучитьЭлементы() Цикл
		Неудачные.Вставить(Строка.Ссылка, Истина);
	КонецЦикла;
	
	Индекс = МестаИспользования.Количество() - 1;
	Пока Индекс > 0 Цикл
		Ссылка = МестаИспользования[Индекс].Ссылка;
		Если Ссылка<>ОсновнойЭлемент И Неудачные[Ссылка] = Неопределено Тогда
			МестаИспользования.Удалить(Индекс);
			Результат.Добавить(Ссылка);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Проверяем возможность замены с прикладной точки зрения.
&НаСервере
Функция ПроверитьВозможностьЗаменыСсылок()
	
	НаборСсылок = Новый Массив;
	ПарыЗамен   = Новый Соответствие;
	Для Каждого Строка Из МестаИспользования Цикл
		НаборСсылок.Добавить(Строка.Ссылка);
		ПарыЗамен.Вставить(Строка.Ссылка, ОсновнойЭлемент);
	КонецЦикла;
	
	// Проверим еще раз возможно измененный набор.
	Контроль = ПроверитьОбъединяемыеСсылки(НаборСсылок);
	Если Не ПустаяСтрока(Контроль.Ошибка) Тогда
		Возврат Контроль.Ошибка;
	КонецЕсли;
	
	ПараметрыЗамены = Новый Структура("СпособУдаления", ТекущийВариантУдаления);
	Возврат ПоискИУдалениеДублей.ПроверитьВозможностьЗаменыЭлементовСтрока(ПарыЗамен, ПараметрыЗамены);
	
КонецФункции

&НаСервере
Процедура ИнициализироватьСценарийМастера()
	
	// 0. Поиск мест использования по параметрам.
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Видимость = Ложь;
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Прервать'");
	КнопкиМастера.Отмена.Подсказка = НСтр("ru = 'Отказаться от объединения элементов'");
	
	ДобавитьШагМастера(Элементы.ШагПоискМестИспользования, 
		ДействиеШагаМастера("ПриАктивации",         "ШагПоискМестИспользованияПриАктивации",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагПоискМестИспользованияПередДействиемОтмена",
		ДействиеШагаМастера("ПриОбработкеОжидания", "ШагПоискМестИспользованияПриОбработкеОжидания"))), 
		КнопкиМастера);
	
	// 1. Выбор основного элемента.
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.КнопкаПоУмолчанию = Истина;
	КнопкиМастера.Далее.Заголовок = НСтр("ru = 'Объединить >'");
	КнопкиМастера.Далее.Подсказка = НСтр("ru = 'Начать объединение элементов'");
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Отмена'");
	КнопкиМастера.Отмена.Подсказка = НСтр("ru = 'Отказаться от объединения элементов'");
	
	ДобавитьШагМастера(Элементы.ШагВыборОсновногоЭлемента, 
		ДействиеШагаМастера("ПриАктивации",         "ШагВыборОсновногоЭлементаПриАктивации",
		ДействиеШагаМастера("ПередДействиемДалее",  "ШагВыборОсновногоЭлементаПередДействиемДалее",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагВыборОсновногоЭлементаПередДействиемОтмена"))), 
		КнопкиМастера);
	
	// 2. Ожидание процесса
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Видимость = Ложь;
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Прервать'");
	КнопкиМастера.Отмена.Подсказка = НСтр("ru = 'Прервать объединение элементов'");
	
	ДобавитьШагМастера(Элементы.ШагОбъединение, 
		ДействиеШагаМастера("ПриАктивации",         "ШагОбъединениеПриАктивации",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагОбъединениеПередДействиемОтмена",
		ДействиеШагаМастера("ПриОбработкеОжидания", "ШагОбъединениеПриОбработкеОжидания"))), 
		КнопкиМастера);
	
	// 3. Успешное объединение
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Видимость = Ложь;
	КнопкиМастера.Отмена.КнопкаПоУмолчанию = Истина;
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Закрыть'");
	КнопкиМастера.Отмена.Подсказка = НСтр("ru = 'Закрыть результаты объединения'");
	
	ДобавитьШагМастера(Элементы.ШагУспешногоЗавершения, 
		ДействиеШагаМастера("ПриАктивации",         "ШагУспешногоЗавершенияПриАктивации",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагУспешногоЗавершенияПередДействиемОтмена")), 
		КнопкиМастера);
	
	// 4. Ошибки замены ссылок
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Заголовок = НСтр("ru = '< В начало'");
	КнопкиМастера.Назад.Подсказка = НСтр("ru = 'Вернутся к выбору основного элемента'");
	КнопкиМастера.Далее.КнопкаПоУмолчанию = Истина;
	КнопкиМастера.Далее.Заголовок = НСтр("ru = 'Повторить'");
	КнопкиМастера.Далее.Подсказка = НСтр("ru = 'Повторить объединение'");
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Отмена'");
	КнопкиМастера.Отмена.Подсказка = НСтр("ru = 'Закрыть результаты объединения'");
	
	ДобавитьШагМастера(Элементы.ШагПовторОбъединения,
		ДействиеШагаМастера("ПриАктивации",         "ШагПовторОбъединенияПриАктивации",
		ДействиеШагаМастера("ПередДействиемДалее",  "ШагПовторОбъединенияПередДействиемДалее",
		ДействиеШагаМастера("ПередДействиемНазад",  "ШагПовторОбъединенияПередДействиемНазад",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагПовторОбъединенияПередДействиемОтмена")))), 
		КнопкиМастера);
КонецПроцедуры

&НаКлиенте
Процедура ШагПоискМестИспользованияПриАктивации(Знач Страница, Знач ДополнительныеПараметры) Экспорт
	НастройкиПошаговогоМастера.ИмяПроцедуры = "ОпределитьМестаИспользования";
	ФоновоеЗаданиеЗапустить();
КонецПроцедуры

&НаКлиенте
Процедура ШагПоискМестИспользованияПриОбработкеОжидания(Прекратить, Знач ДополнительныеПараметры) Экспорт
	Если ФоновоеЗаданиеЗагрузитьНаКлиенте(Ложь, Ложь) Тогда
		Прекратить = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ШагПоискМестИспользованияПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	ПроверитьФоновоеЗаданиеИЗакрытьФормуБезПодтверждения();
КонецПроцедуры

&НаКлиенте
Процедура ШагВыборОсновногоЭлементаПриАктивации(Знач Страница, Знач ДополнительныеПараметры) Экспорт
	
	СформироватьПодсказкуОбъединения();
	
КонецПроцедуры

&НаКлиенте
Процедура ШагВыборОсновногоЭлементаПередДействиемДалее(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	// Проверка допустимости объединения с прикладной точки зрения.
	ТекстОшибки = ПроверитьВозможностьЗаменыСсылок();
	Если ПустаяСтрока(ТекстОшибки) Тогда // Все объединения допустимы.
		ЗавершитьШагМастера(ПараметрыШага);
		Возврат;
	КонецЕсли;
	
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Ложь);
	НастройкиДиалога.Вставить("Картинка", БиблиотекаКартинок.Предупреждение32);
	НастройкиДиалога.Вставить("КнопкаПоУмолчанию", 0);
	НастройкиДиалога.Вставить("Заголовок", НСтр("ru = 'Невозможно объединить элементы'"));
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(0, НСтр("ru = 'ОК'"));
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Неопределено, ТекстОшибки, Кнопки, НастройкиДиалога);
КонецПроцедуры

&НаКлиенте
Процедура ШагВыборОсновногоЭлементаПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ШагОбъединениеПриАктивации(Знач Страница, Знач ДополнительныеПараметры) Экспорт
	НастройкиПошаговогоМастера.ИмяПроцедуры = "ЗаменитьСсылки";
	ФоновоеЗаданиеЗапустить();
КонецПроцедуры

&НаКлиенте
Процедура ШагОбъединениеПриОбработкеОжидания(Прекратить, Знач ДополнительныеПараметры) Экспорт
	Если ФоновоеЗаданиеЗагрузитьНаКлиенте(Ложь, Ложь) Тогда
		Прекратить = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ШагОбъединениеПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	ПроверитьФоновоеЗаданиеИЗакрытьФормуБезПодтверждения();
КонецПроцедуры

&НаКлиенте
Процедура ШагУспешногоЗавершенияПриАктивации(Знач Страница, Знач ДополнительныеПараметры) Экспорт
	
	Элементы.РезультатОбъединения.Заголовок = СообщениеОЗавершении();
	
	СписокОбновленного = Новый Массив;
	Для Каждого Строка Из МестаИспользования Цикл
		СписокОбновленного.Добавить(Строка.Ссылка);
	КонецЦикла;
	ОповеститьОбУспешнойЗамене(СписокОбновленного);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагУспешногоЗавершенияПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	ЗавершитьШагМастера(ПараметрыШага);
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ШагПовторОбъединенияПриАктивации(Знач Страница, Знач ДополнительныеПараметры) Экспорт
	// Обновляем количества неудач.
	СформироватьНадписьНеудачныеЗамены();
	
	// Оповещаем об успешной частичной замене.
	СписокОбновленного = УдалитьИзМестИспользованияОбработанные();	// Заодно и удаляем из списка вариантов.
	ОповеститьОбУспешнойЗамене(СписокОбновленного);
КонецПроцедуры

&НаКлиенте
Процедура ШагПовторОбъединенияПередДействиемДалее(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	// Повтор замены
	ПерейтиНаШагМастера(Элементы.ШагОбъединение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ШагПовторОбъединенияПередДействиемНазад(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	// Перезаполняем список обрабатываемых.
	ПерейтиНаШагМастера(Элементы.ШагПоискМестИспользования, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ШагПовторОбъединенияПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОШАГОВОГО ПОМОЩНИКА

&НаСервере
Функция ИнициализироватьМастер(Знач ГруппаСтраниц, Знач КнопкаДалее, Знач КнопкаНазад, Знач КнопкаОтмена)
	// Инициализирует структуры мастера.
	//
	// Параметры:
	//     ГруппаСтраниц - ГруппаФормы - Элемент формы, группа типа "страницы", содержащая в себе страницы-шаги мастера.
	//     КнопкаДалее   - КнопкаФормы, КнопкаКоманднойПанели - Элемент формы, используемый для кнопки "Далее".
	//     КнопкаНазад   - КнопкаФормы, КнопкаКоманднойПанели - Элемент формы, используемый для кнопки "Назад".
	//     КнопкаОтмена  - КнопкаФормы, КнопкаКоманднойПанели - Элемент формы, используемый для кнопки "Отмена".
	
	Результат = Новый Структура;
	
	Результат.Вставить("Шаги", Новый Массив);
	Результат.Вставить("НомерТекущегоШага", 0);
	Результат.Вставить("СтраницаСтарта", Неопределено);
	
	// Идентификаторы частей интерфейса.
	Результат.Вставить("ГруппаСтраниц", ГруппаСтраниц.Имя);
	Результат.Вставить("КнопкаДалее",   КнопкаДалее.Имя);
	Результат.Вставить("КнопкаНазад",   КнопкаНазад.Имя);
	Результат.Вставить("КнопкаОтмена",  КнопкаОтмена.Имя);
	
	// Таймаут вызова обработчика
	Результат.Вставить("ТаймаутОжиданияДлительнойОперации", 
		?( ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2) );
		
	// Для обработки длительных операций.
	Результат.Вставить("ИдентификаторФоновогоЗадания");
	Результат.Вставить("АдресРезультатаФоновогоЗадания");
	Результат.Вставить("ИнформацияОбОшибке");
	Результат.Вставить("ЗаданиеВыполнено", Ложь);
	Результат.Вставить("ИмяПроцедуры");
	Результат.Вставить("ЕстьПодтверждениеОтменыЗадания", Ложь);
	
	// Для хранения пользовательских параметров.
	Результат.Вставить("ПользовательскиеПараметры", Новый Соответствие);
	
	Возврат Результат;
КонецФункции

// Добавляет шаг мастера. Переходы между страницами будут происходить согласно порядку добавления.
//
// Параметры:
//
//     Страница - ГруппаФормы - Группа-страница, содержащая элементы текущего шага страницы.
// 
//     Действия - Структура - Описание действий, возможных на текущем шаге. Поля структуры:
//
//          * ПриАктивации      - Строка - Необязательное имя процедуры, которая будет выполнена перед активацией
//                                         страницы с двумя параметрами:
//                                           <Страница> - ГруппаФормы - группа-страница, которая активизируется.
//                                           <ДополнительныеПараметры> - Неопределено
//
//          * ПередДействиемДалее  - Строка - Необязательное имя процедуры, которая будет выполнена при нажатии кнопки
//                                            "Далее", перед переходом на следующую страницу. Процедура будет вызвана с
//                                            двумя параметрами:
//                                              <ПараметрыШага> - служебный реквизит. При успешном завершении цепочки
//                                                                немодальных  вызовов последняя процедура-обработчик
//                                                                должна произвести вызов.
//                                                                ЗавершитьШагМастера(ПараметрыШага), подтверждая
//                                                                действие.
//                                             <ДополнительныеПараметры> - Неопределено
//
//          * ПередДействиемНазад  - Строка - Аналогично ПередДействиемДалее, описывает поведение при нажатии кнопки
//                                            "Назад".
//
//          * ПередДействиемОтмена - Строка - Аналогично ПередДействиемДалее, описывает поведение при нажатии кнопки
//                                            "Отмена".
//
//          * ПриОбработкеОжидания - Строка - Необязательное имя процедуры, которая будет периодически вызываться с
//                                            двумя  параметрами:
//                                              <Прекратить> - Если при выходе из процедуры установить в значение
//                                                             Истина, то периодические вызовы будут прекращены.
//                                              <ДополнительныеПараметры> - Неопределено
//
//      Кнопки - Структура - описание кнопок на текущем шаге. Поля структуры:
//
//          * Далее  - Структура - Описание кнопки "Далее". поля: Заголовок, Подсказка, Доступность, Видимость,
//                                 КнопкаПоУмолчанию.
//                                 Пустая подсказка заменяется на заголовок. По умолчанию будут использованы значения:
//                                 Заголовок = "Далее >", Доступность = Истина, Видимость = Истина, КнопкаПоУмолчанию = Истина;
//
//          * Назад  - Структура - Аналогично кнопке "Далее", значения по умолчанию:
//                                 Заголовок = "< Назад", Доступность = Истина, Видимость = Истина, КнопкаПоУмолчанию = Ложь;
//
//          * Отмена - Структура - Аналогично кнопке "Далее", значения по умолчанию:
//                                 Заголовок = "Отмена", Доступность = Истина, Видимость = Истина, КнопкаПоУмолчанию = Ложь;
//
// Для составления параметров рекомендуется использовать вспомогательные методы "ДобавитьШагМастера",
// "ДействиеШагаМастера", "КнопкиМастера".
//
&НаСервере
Процедура ДобавитьШагМастера(Знач Страница, Знач Действия, Знач Кнопки)
	
	// Умолчания
	ОписаниеШага = Новый Структура("ПриАктивации, ПередДействиемДалее, ПередДействиемНазад, ПередДействиемОтмена, ПриОбработкеОжидания");
	
	ПоляКнопки = "Доступность, Видимость, КнопкаПоУмолчанию, Подсказка";
	
	ОписаниеШага.Вставить("КнопкаДалее", Новый Структура(ПоляКнопки, Истина, Истина, Истина));
	ОписаниеШага.КнопкаДалее.Вставить("Заголовок", НСтр("ru='Далее >'"));
	
	ОписаниеШага.Вставить("КнопкаНазад", Новый Структура(ПоляКнопки, Истина, Истина, Ложь));
	ОписаниеШага.КнопкаНазад.Вставить("Заголовок", НСтр("ru='< Назад'"));
	
	ОписаниеШага.Вставить("КнопкаОтмена",Новый Структура(ПоляКнопки, Истина, Истина, Ложь));
	ОписаниеШага.КнопкаОтмена.Вставить("Заголовок", НСтр("ru='Отмена'"));
	
	ОписаниеШага.Вставить("Страница", Страница.Имя);
	
	// Устанавливаем действия
	ЗаполнитьЗначенияСвойств(ОписаниеШага, Действия);
	
	Если Кнопки.Свойство("Далее") Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеШага.КнопкаДалее, Кнопки.Далее);
	КонецЕсли;
	Если Кнопки.Свойство("Назад") Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеШага.КнопкаНазад, Кнопки.Назад);
	КонецЕсли;
	Если Кнопки.Свойство("Отмена") Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеШага.КнопкаОтмена, Кнопки.Отмена);
	КонецЕсли;

	НастройкиПошаговогоМастера.Шаги.Добавить(ОписаниеШага);
КонецПроцедуры

// Вспомогательное формирование структуры, описывающей действие.
//
// Параметры:
//     Идентификатор    - Строка - Идентификатор действия, см описание метода "ДобавитьШагМастера".
//     ИмяОбработчика   - Строка - Имя процедуры, см описание метода "ДобавитьШагМастера".
//     СлужебныеДанные  - Структура - Накапливает значения.
//
// Возвращаемое значение - Структура - СлужебныеДанные с добавленными полями.
&НаСервере
Функция ДействиеШагаМастера(Знач Идентификатор, Знач ИмяОбработчика, СлужебныеДанные = Неопределено)
	Если СлужебныеДанные = Неопределено Тогда
		СлужебныеДанные = Новый Структура;
	КонецЕсли;
	СлужебныеДанные.Вставить(Идентификатор, ИмяОбработчика);;
	Возврат СлужебныеДанные;
КонецФункции

// Вспомогательное формирование структуры, описывающей кнопки мастера.
//
// Возвращаемое значение:
//   Структура - Кнопки мастера.
//       * Назад  - Структура - Описание кнопки Назад, сформированное методом КнопкаМастера().
//       * Далее  - Структура - Описание кнопки Далее, сформированное методом КнопкаМастера().
//       * Отмена - Структура - Описание кнопки Отмена, сформированное методом КнопкаМастера().
//
&НаСервере
Функция КнопкиМастера()
	
	Результат = Новый Структура("Далее, Назад, Отмена", КнопкаМастера(), КнопкаМастера(), КнопкаМастера());
	Результат.Далее.КнопкаПоУмолчанию = Истина;
	Результат.Далее.Заголовок = НСтр("ru = 'Далее >'");
	Результат.Назад.Заголовок = НСтр("ru='< Назад'");
	Результат.Отмена.Заголовок = НСтр("ru = 'Отмена'");
	Возврат Результат;
	
КонецФункции

// Описание настроек кнопки мастера.
//
// Возвращаемое значение:
//   Структура - Настройки кнопки формы.
//       * Заголовок         - Строка - Заголовок кнопки.
//       * Подсказка         - Строка - Подсказка для кнопки.
//       * Видимость         - Булево - Когда Истина то кнопка видна. Значение по умолчанию: Истина.
//       * Доступность       - Булево - Когда Истина то кнопку можно нажимать. Значение по умолчанию: Истина.
//       * КнопкаПоУмолчанию - Булево - Когда Истина то кнопка будет основной кнопкой формы. Значение по умолчанию:
//                                      Ложь.
//
// См. также:
//   "КнопкаФормы" в синтакс-помощнике.
//
&НаСервере
Функция КнопкаМастера()
	Результат = Новый Структура;
	Результат.Вставить("Заголовок", "");
	Результат.Вставить("Подсказка", "");
	
	Результат.Вставить("Доступность", Истина);
	Результат.Вставить("Видимость", Истина);
	Результат.Вставить("КнопкаПоУмолчанию", Ложь);
	
	Возврат Результат;
КонецФункции

// Устанавливает начальную страницу для первого запуска мастера.
//
// Параметры:
//     СтартоваяСтраница - Число, Строка, ГруппаФормы - Номер шага, группа-страница, или ее идентификатор.
//
&НаКлиенте
Процедура УстановитьНачальнуюСтраницуМастера(Знач Страница)
	
	НастройкиПошаговогоМастера.СтраницаСтарта = НомерШагаМастераПоИдентификатору(Страница);
	
КонецПроцедуры

// Запускает начальную работу мастера с шага, установленного предварительно при помощи
// "УстановитьНачальнуюСтраницуМастера".
&НаКлиенте
Процедура ЗапуститьРаботуМастера()
	Если НастройкиПошаговогоМастера.СтраницаСтарта = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Перед запуском мастера должна быть установлена начальная страница.'");
		
	ИначеЕсли НастройкиПошаговогоМастера.СтраницаСтарта = -1 Тогда
		// Разогрев. Проверяем наличие обработчиков действий у всех шагов.
		ВозможныеДействия = Новый Структура("ПриАктивации, ПередДействиемДалее, ПередДействиемНазад, ПередДействиемОтмена, ПриОбработкеОжидания");
		Для Каждого ОписаниеШага Из НастройкиПошаговогоМастера.Шаги Цикл
			Для Каждого КлючЗначение Из ВозможныеДействия Цикл
				ИмяДействия = КлючЗначение.Ключ;
				ИмяОбработчика = ОписаниеШага[ИмяДействия];
				Если Не ПустаяСтрока(ИмяОбработчика) Тогда
					Попытка
						Тест = Новый ОписаниеОповещения(ИмяОбработчика, ЭтотОбъект);
					Исключение
						Текст = НСтр("ru = 'Ошибка создания обработчика события %1 для страницы %2, не определена процедура %3'");
						Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ИмяДействия, ОписаниеШага.Страница, ИмяОбработчика);
						ВызватьИсключение Текст;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Фактический запуск
		ПерейтиНаШагМастера(НастройкиПошаговогоМастера.НомерТекущегоШага, Истина);
	Иначе
		// По умолчанию все отключено
		Элементы[НастройкиПошаговогоМастера.КнопкаДалее].Видимость  = Ложь;
		Элементы[НастройкиПошаговогоМастера.КнопкаНазад].Видимость  = Ложь;
		Элементы[НастройкиПошаговогоМастера.КнопкаОтмена].Видимость = Ложь;
		
		// Отложенный запуск
		НастройкиПошаговогоМастера.НомерТекущегоШага = НастройкиПошаговогоМастера.СтраницаСтарта;
		НастройкиПошаговогоМастера.СтраницаСтарта    = -1;
		ПодключитьОбработчикОжидания("ЗапуститьРаботуМастера", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

// Выполняет переключение мастера на следующую или предыдущую страницу.
//
// Параметры:
//     КодКоманды - Строка - Идентификатор действия, может принимать значения "Далее", "Назад" или "Отмена".
//
&НаКлиенте
Процедура ШагМастера(Знач КодКоманды)
	Если КодКоманды = "Далее" Тогда
		Направление = 1;
	ИначеЕсли КодКоманды = "Назад" Тогда
		Направление = -1;
	ИначеЕсли КодКоманды = "Отмена" Тогда
		Направление = 0;
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректная команда шага помощника'");
	КонецЕсли;
		
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[НастройкиПошаговогоМастера.НомерТекущегоШага];
	
	// Останавливаем обработчик, если есть.
	Если ОписаниеШага.ПриОбработкеОжидания <> Неопределено Тогда
		ОтключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера");
	КонецЕсли;
	
	// Отрабатываем уход с текущей страницы.
	Если Направление = 1 Тогда
		Действие = ОписаниеШага.ПередДействиемДалее;
		
	ИначеЕсли Направление = -1 Тогда
		Действие = ОписаниеШага.ПередДействиемНазад;
		
	Иначе
		Действие = ОписаниеШага.ПередДействиемОтмена;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Действие) Тогда
		ЗавершитьШагМастера(Направление);
	Иначе
		Оповещение = Новый ОписаниеОповещения(Действие, ЭтотОбъект);
		ВыполнитьОбработкуОповещения(Оповещение, Направление);
	КонецЕсли;
КонецПроцедуры

// Выполняет безусловное позиционирование мастера на страницу.
//
// Параметры:
//     ИдентификаторШага   - Число, Строка, ГруппаФормы - Номер, группа-страница формы или ее имя для перехода.
//     ИнициироватьСобытия - Булево - Флаг того, что необходимо вызывать события, связанные с активацией шага.
//
&НаКлиенте
Процедура ПерейтиНаШагМастера(Знач ИдентификаторШага, Знач ИнициироватьСобытия = Ложь)
	СледующийШаг = НомерШагаМастераПоИдентификатору(ИдентификаторШага);
	Если СледующийШаг = Неопределено Тогда
		Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найден шаг помощника %1'"), ИдентификаторШага);
		ВызватьИсключение Ошибка;
	КонецЕсли;
		
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[НастройкиПошаговогоМастера.НомерТекущегоШага];
	
	// Останавливаем обработчик, если есть.
	Если ОписаниеШага.ПриОбработкеОжидания <> Неопределено Тогда
		ОтключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера");
	КонецЕсли;
	
	// И запускаем новую страницу
	ШагМастераЗавершениеБезусловно(СледующийШаг, ИнициироватьСобытия);
КонецПроцедуры

// Подтверждает действие шага мастера и вызывает переключение страницы.
//
// Параметры:
//     ПараметрыШага - Служебный реквизит, полученный в обработчике перед началом действия.
//
&НаКлиенте
Процедура ЗавершитьШагМастера(Знач ПараметрыШага)
	СледующийШаг = НастройкиПошаговогоМастера.НомерТекущегоШага + ПараметрыШага;
	ПоследнийШаг = НастройкиПошаговогоМастера.Шаги.ВГраница();
	
	Если ПараметрыШага = 0 Тогда
		// Подтверждение отмены - ничего не делаем.
		Возврат;
		
	ИначеЕсли ПараметрыШага = 1 И СледующийШаг > ПоследнийШаг Тогда
		// Попытка сделать шаг за пределы вперед.
		ВызватьИсключение НСтр("ru='Попытка выхода за последний шаг мастера'");
		
	ИначеЕсли ПараметрыШага = -1 И СледующийШаг < 0 Тогда
		// Попытка сделать шаг за пределы назад.
		ВызватьИсключение НСтр("ru='Попытка выхода назад из первого шага мастера'");
		
	КонецЕсли;
	
	ШагМастераЗавершениеБезусловно(СледующийШаг);
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераЗавершениеБезусловно(Знач СледующийШаг, Знач ИнициироватьСобытия = Истина)
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[СледующийШаг];
	ПоследнийШаг = НастройкиПошаговогоМастера.Шаги.ВГраница();
	
	// Переключаем на новую страницу.
	Элементы[НастройкиПошаговогоМастера.ГруппаСтраниц].ТекущаяСтраница = Элементы[ОписаниеШага.Страница];
	// Обход особенности платформы.
	ГруппаСтраницМастера = Элементы[НастройкиПошаговогоМастера.ГруппаСтраниц];
	НоваяТекущаяСтраница = Элементы[ОписаниеШага.Страница];
	ВидГруппыСтраница = ВидГруппыФормы.Страница;
	ТипГруппаФормы    = Тип("ГруппаФормы");
	Для Каждого Страница Из ГруппаСтраницМастера.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Страница) = ТипГруппаФормы И Страница.Вид = ВидГруппыСтраница Тогда
			Страница.Видимость = (Страница = НоваяТекущаяСтраница);
		КонецЕсли;
	КонецЦикла;
	
	// Обновляем кнопки
	ОбновитьСвойстваКнопкиМастера(НастройкиПошаговогоМастера.КнопкаДалее,  ОписаниеШага.КнопкаДалее);
	ОбновитьСвойстваКнопкиМастера(НастройкиПошаговогоМастера.КнопкаНазад,  ОписаниеШага.КнопкаНазад);
	ОбновитьСвойстваКнопкиМастера(НастройкиПошаговогоМастера.КнопкаОтмена, ОписаниеШага.КнопкаОтмена);
	
	// Успешно перешли
	НастройкиПошаговогоМастера.НомерТекущегоШага = СледующийШаг;
	
	Если ИнициироватьСобытия И Не ПустаяСтрока(ОписаниеШага.ПриАктивации) Тогда
		// Отрабатываем "ПриАктивации" новой страницы, он же запустит ожидание.
		ПодключитьОбработчикОжидания("ОбработкаАктивацииСтраницыМастера", 0.1, Истина);
		
	ИначеЕсли Не ПустаяСтрока(ОписаниеШага.ПриОбработкеОжидания) Тогда
		// Запускаем обработчик ожидания, если надо.
		ПодключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера", 0.1, Истина);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвойстваКнопкиМастера(Знач ИмяКнопки, Знач Описание)
	
	КнопкаМастера = Элементы[ИмяКнопки];
	ЗаполнитьЗначенияСвойств(КнопкаМастера, Описание);
	КнопкаМастера.РасширеннаяПодсказка.Заголовок = Описание.Подсказка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивацииСтраницыМастера()
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[НастройкиПошаговогоМастера.НомерТекущегоШага];
	Если Не ПустаяСтрока(ОписаниеШага.ПриАктивации) Тогда
		Оповещение = Новый ОписаниеОповещения(ОписаниеШага.ПриАктивации, ЭтотОбъект);
		ВыполнитьОбработкуОповещения(Оповещение, Элементы[ОписаниеШага.Страница]);
	КонецЕсли;
	
	// И запускаем ожидание, если надо.
	Если Не ПустаяСтрока(ОписаниеШага.ПриОбработкеОжидания) Тогда
		// Первый запуск быстрый
		ПодключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

// Может быть номер шага или группа-страница, или ее идентификатор.
&НаКлиенте
Функция НомерШагаМастераПоИдентификатору(Знач ИдентификаторШага)
	ТипПараметра = ТипЗнч(ИдентификаторШага);
	Если ТипПараметра = Тип("Число") Тогда
		Возврат ИдентификаторШага;
	КонецЕсли;
	
	ИмяПоиска = ?(ТипПараметра = Тип("ГруппаФормы"), ИдентификаторШага.Имя, ИдентификаторШага);
	Для НомерШага=0 По НастройкиПошаговогоМастера.Шаги.ВГраница() Цикл
		Если НастройкиПошаговогоМастера.Шаги[НомерШага].Страница = ИмяПоиска Тогда
			Возврат НомерШага;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найден шаг ""%1"".'"), ИмяПоиска);
КонецФункции

// Возвращает флаг отмены
&НаКлиенте
Функция ОбработкаОжиданияСтраницыМастера()
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[НастройкиПошаговогоМастера.НомерТекущегоШага];
	Действие = ОписаниеШага.ПриОбработкеОжидания;
	Если ПустаяСтрока(Действие) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(Действие, ЭтотОбъект);
	
	Прекратить = Ложь;
	ВыполнитьОбработкуОповещения(Оповещение, Прекратить);
	Продолжать = Не Прекратить;
	
	Если Продолжать Тогда
		ПодключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера", НастройкиПошаговогоМастера.ТаймаутОжиданияДлительнойОперации, Истина);
	КонецЕсли;
	
	Возврат Продолжать;
КонецФункции

&НаКлиенте
Процедура ПослеПодтвержденияОтменыЗаданияИЗакрытияФормы(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ = КодВозвратаДиалога.Прервать Тогда
		ПроверитьФоновоеЗаданиеИЗакрытьФормуБезПодтверждения();
	Иначе
		ОбработкаОжиданияСтраницыМастера();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФоновоеЗаданиеИЗакрытьФормуБезПодтверждения()
	Если Не ФоновоеЗаданиеЗагрузитьНаКлиенте(Истина, Ложь) Тогда
		НастройкиПошаговогоМастера.ЕстьПодтверждениеОтменыЗадания = Истина;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ФоновоеЗаданиеЗагрузитьНаКлиенте(ПрерватьЕслиНеВыполнено, ПоказатьДиалогПередЗакрытием)
	
	ОтключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера");
	
	ИнформацияОЗадании = ФоновоеЗаданиеЗагрузитьРезультат(ПрерватьЕслиНеВыполнено);
	Если Не ИнформацияОЗадании.Завершено Тогда
		Если ПоказатьДиалогПередЗакрытием Тогда
			Обработчик = Новый ОписаниеОповещения("ПослеПодтвержденияОтменыЗаданияИЗакрытияФормы", ЭтотОбъект);
			
			Если НастройкиПошаговогоМастера.ИмяПроцедуры = "ОпределитьМестаИспользования" Тогда
				ТекстВопроса = НСтр("ru = 'Прервать поиск мест использования и закрыть форму?'");
			ИначеЕсли НастройкиПошаговогоМастера.ИмяПроцедуры = "ЗаменитьСсылки" Тогда
				ТекстВопроса = НСтр("ru = 'Прервать объединение элементов и закрыть форму?'");
			КонецЕсли;
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Прервать, НСтр("ru = 'Прервать'"));
			Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не прерывать'"));
			
			ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Нет);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Если НастройкиПошаговогоМастера.ИмяПроцедуры = "ОпределитьМестаИспользования" Тогда
		Если ИнформацияОЗадании.ИнформацияОбОшибке = Неопределено Тогда
			Активизировать();
			ШагМастера("Далее");
		Иначе
			Активизировать();
			ПоказатьПредупреждение(, ИнформацияОЗадании.ИнформацияОбОшибке);
		КонецЕсли;
	ИначеЕсли НастройкиПошаговогоМастера.ИмяПроцедуры = "ЗаменитьСсылки" Тогда
		Если ИнформацияОЗадании.ИнформацияОбОшибке = Неопределено Тогда
			Если ИнформацияОЗадании.Результат = Истина Тогда
				// Полностью успешно - закрыть форму и вывести оповещение.
				ПоказатьОповещениеПользователя(
					,
					ПолучитьНавигационнуюСсылку(ОсновнойЭлемент),
					СообщениеОЗавершении(),
					БиблиотекаКартинок.Информация32);
				СписокОбновленного = Новый Массив;
				Для Каждого Строка Из МестаИспользования Цикл
					СписокОбновленного.Добавить(Строка.Ссылка);
				КонецЦикла;
				ОповеститьОбУспешнойЗамене(СписокОбновленного);
				// Закрываем форму.
				Закрыть();
			Иначе
				// Частично успешно - вывести расшифровку.
				Активизировать();
				ПерейтиНаШагМастера(Элементы.ШагПовторОбъединения, Истина);
			КонецЕсли
		Иначе
			// Фоновое задание завершилось с ошибкой.
			Активизировать();
			ПоказатьПредупреждение(, ИнформацияОЗадании.ИнформацияОбОшибке);
			ПерейтиНаШагМастера(Элементы.ШагВыборОсновногоЭлемента);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеЗапустить()
	// Отмена предыдущего задания.
	ФоновоеЗаданиеОтменить();
	
	// Определение параметров запуска.
	ПолноеИмяМетода = "ПоискИУдалениеДублей." + НастройкиПошаговогоМастера.ИмяПроцедуры;
	
	Если НастройкиПошаговогоМастера.ИмяПроцедуры = "ОпределитьМестаИспользования" Тогда
		
		НаименованиеМетода = НСтр("ru = 'Поиск и удаление дублей: Определение мест использования'");
		ПараметрыМетода = МассивСсылокИзНабора(МестаИспользования);
		
	ИначеЕсли НастройкиПошаговогоМастера.ИмяПроцедуры = "ЗаменитьСсылки" Тогда
		
		НаименованиеМетода = НСтр("ru = 'Поиск и удаление дублей: Объединение элементов'");
		ПарыЗамен = Новый Соответствие;
		Для Каждого Строка Из МестаИспользования Цикл
			ПарыЗамен.Вставить(Строка.Ссылка, ОсновнойЭлемент);
		КонецЦикла;
		
		ПараметрыЗамены = Новый Структура;
		ПараметрыЗамены.Вставить("СпособУдаления", ТекущийВариантУдаления);
		ПараметрыЗамены.Вставить("ВключатьБизнесЛогику", Истина);
		
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("ПарыЗамен", ПарыЗамен);
		ПараметрыМетода.Вставить("Параметры", ПараметрыЗамены);
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Запуск.
	ИнформацияОбОшибке = Неопределено;
	Попытка
		Задание = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			ПолноеИмяМетода,
			ПараметрыМетода,
			НаименованиеМетода);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	Если ИнформацияОбОшибке <> Неопределено Тогда
		НастройкиПошаговогоМастера.ЗаданиеВыполнено               = Истина;
		НастройкиПошаговогоМастера.ИнформацияОбОшибке             = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания   = Неопределено;
		НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
	НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания = Задание.АдресХранилища;
	НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания   = Задание.ИдентификаторЗадания;
	НастройкиПошаговогоМастера.ЗаданиеВыполнено               = Задание.ЗаданиеВыполнено;
	
	Если НастройкиПошаговогоМастера.ЗаданиеВыполнено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеЗагрузитьРезультат(Знач ПрерватьЕслиНеВыполнено = Ложь)
	Если НастройкиПошаговогоМастера.ЗаданиеВыполнено Тогда
		НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания = Неопределено;
	Иначе
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания);
		Если Задание <> Неопределено Тогда
			Если Задание.ИнформацияОбОшибке <> Неопределено Тогда
				НастройкиПошаговогоМастера.ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
			КонецЕсли;
			НастройкиПошаговогоМастера.ЗаданиеВыполнено = Задание.Состояние <> СостояниеФоновогоЗадания.Активно;
			Если НастройкиПошаговогоМастера.ЗаданиеВыполнено Тогда
				// Текущие сообщения фонового задания.
				НакопленныеСообщения = Задание.ПолучитьСообщенияПользователю(Истина);
				Если НакопленныеСообщения <> Неопределено Тогда
					Для Каждого Сообщение Из НакопленныеСообщения Цикл
						Сообщение.Сообщить();
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Значение = Неопределено;
	Если НастройкиПошаговогоМастера.ЗаданиеВыполнено Тогда
		НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания = Неопределено;
		Если НастройкиПошаговогоМастера.ИнформацияОбОшибке = Неопределено Тогда
			Значение = ПолучитьИзВременногоХранилища(НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания);
			Если НастройкиПошаговогоМастера.ИмяПроцедуры = "ОпределитьМестаИспользования" Тогда
				ЗаполнитьМестаИспользования(Значение);
				Значение = Неопределено;
			ИначеЕсли НастройкиПошаговогоМастера.ИмяПроцедуры = "ЗаменитьСсылки" Тогда
				Значение = Не ЗаполнитьНеудачныеЗамены(Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПрерватьЕслиНеВыполнено И Не НастройкиПошаговогоМастера.ЗаданиеВыполнено Тогда
		ФоновоеЗаданиеОтменить();
	КонецЕсли;
	
	ИнформацияОЗадании = Новый Структура;
	ИнформацияОЗадании.Вставить("Завершено",          НастройкиПошаговогоМастера.ЗаданиеВыполнено);
	ИнформацияОЗадании.Вставить("ИнформацияОбОшибке", НастройкиПошаговогоМастера.ИнформацияОбОшибке);
	ИнформацияОЗадании.Вставить("Результат",          Значение);
	
	Возврат ИнформацияОЗадании;
КонецФункции

&НаСервере
Процедура ФоновоеЗаданиеОтменить()
	Если НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания <> Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания);
	КонецЕсли;
	НастройкиПошаговогоМастера.ЗаданиеВыполнено               = Ложь;
	НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания = Неопределено;
	НастройкиПошаговогоМастера.ИнформацияОбОшибке             = Неопределено;
	НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания   = Неопределено;
КонецПроцедуры

#КонецОбласти
