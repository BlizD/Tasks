#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Для внутреннего использования.
Функция СведенияОВнешнейОбработке() Экспорт
	Перем ПараметрыРегистрации;
	
	Если ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		МодульДополнительныеОтчетыИОбработкиКлиентСервер = ОбщийМодуль("ДополнительныеОтчетыИОбработкиКлиентСервер");
		
		ПараметрыРегистрации = МодульДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.1.3.1");
		
		ПараметрыРегистрации.Вид = МодульДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
		ПараметрыРегистрации.Версия = "2.2.1";
		ПараметрыРегистрации.БезопасныйРежим = Ложь;
		
		НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
		НоваяКоманда.Представление = НСтр("ru = 'Групповое изменение реквизитов'");
		НоваяКоманда.Идентификатор = "ОткрытьГлобально";
		НоваяКоманда.Использование = МодульДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
		НоваяКоманда.ПоказыватьОповещение = Ложь;
	КонецЕсли;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Для внутреннего использования.
Функция ТекстЗапроса(ТипыИзменяемыхОбъектов) Экспорт
	
	ОбъектыМетаданных = Новый Массив;
	Для Каждого ИмяОбъекта Из СтрРазделить(ТипыИзменяемыхОбъектов, ",", Ложь) Цикл
		ОбъектыМетаданных.Добавить(Метаданные.НайтиПоПолномуИмени(ИмяОбъекта));
	КонецЦикла;
	
	СтруктураОбъектов = ОбщиеРеквизитыОбъектов(ТипыИзменяемыхОбъектов);
	
	Результат = "";
	ПсевдонимТаблицы = "ПсевдонимЗаданнойТаблицы";
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		
		Если Не ПустаяСтрока(Результат) Тогда
			Результат = Результат + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
		КонецЕсли;
		
		ТекстЗапроса = "";
		
		Для Каждого ИмяРеквизита Из СтруктураОбъектов.Реквизиты Цикл
			Если Не ПустаяСтрока(ТекстЗапроса) Тогда
				ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС;
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + ПсевдонимТаблицы + "." + ИмяРеквизита + " КАК " + ИмяРеквизита;
		КонецЦикла;
		
		Для Каждого ТабличнаяЧасть Из СтруктураОбъектов.ТабличныеЧасти Цикл
			ИмяТабличнойЧасти = ТабличнаяЧасть.Ключ;
			ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС + ПсевдонимТаблицы + "." + ИмяТабличнойЧасти + ".(";
			
			СтрокаРеквизитов = "НомерСтроки";
			РеквизитыТабличнойЧасти = ТабличнаяЧасть.Значение;
			Для Каждого ИмяРеквизита Из РеквизитыТабличнойЧасти Цикл
				Если Не ПустаяСтрока(СтрокаРеквизитов) Тогда
					СтрокаРеквизитов = СтрокаРеквизитов + "," + Символы.ПС;
				КонецЕсли;
				СтрокаРеквизитов = СтрокаРеквизитов + ИмяРеквизита;
			КонецЦикла;
			ТекстЗапроса = ТекстЗапроса + СтрокаРеквизитов +"
			|)";
		КонецЦикла;
		
		ТекстЗапроса = "ВЫБРАТЬ " + ТекстЗапроса + Символы.ПС + "
			|ИЗ
			|	"+ ОбъектМетаданных.ПолноеИмя() + " КАК " + ПсевдонимТаблицы;
			
		Результат = Результат + ТекстЗапроса;
	КонецЦикла;
		
		
	Возврат Результат;
	
КонецФункции

Функция ОбщиеРеквизитыОбъектов(ТипыОбъектов) Экспорт
	
	ОбъектыМетаданных = Новый Массив;
	Для Каждого ИмяОбъекта Из СтрРазделить(ТипыОбъектов, ",", Ложь) Цикл
		ОбъектыМетаданных.Добавить(Метаданные.НайтиПоПолномуИмени(ИмяОбъекта));
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Реквизиты", Новый Массив);
	Результат.Вставить("ТабличныеЧасти", Новый Структура);
	
	ОбщийСписокРеквизитов = СписокЭлементов(ОбъектыМетаданных[0].Реквизиты, Ложь);
	Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
		ОбщийСписокРеквизитов = ПересечениеРеквизитов(ОбщийСписокРеквизитов, ОбъектыМетаданных[Индекс].Реквизиты);
	КонецЦикла;
	
	СтандартныеРеквизиты = ОбъектыМетаданных[0].СтандартныеРеквизиты;
	Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
		СтандартныеРеквизиты = ПересечениеРеквизитов(СтандартныеРеквизиты, ОбъектыМетаданных[Индекс].СтандартныеРеквизиты);
	КонецЦикла;
	Для Каждого Реквизит Из СтандартныеРеквизиты Цикл
		ОбщийСписокРеквизитов.Добавить(Реквизит);
	КонецЦикла;
	
	Результат.Реквизиты = СписокЭлементов(ОбщийСписокРеквизитов);
	
	ТабличныеЧасти = СписокЭлементов(ОбъектыМетаданных[0].ТабличныеЧасти);
	Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
		ТабличныеЧасти = ПересечениеМножеств(ТабличныеЧасти, СписокЭлементов(ОбъектыМетаданных[Индекс].ТабличныеЧасти));
	КонецЦикла;
	
	Для Каждого ИмяТабличнойЧасти Из ТабличныеЧасти Цикл
		РеквизитыТабличнойЧасти = СписокЭлементов(ОбъектыМетаданных[0].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты, Ложь);
		Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
			РеквизитыТабличнойЧасти = ПересечениеРеквизитов(РеквизитыТабличнойЧасти, ОбъектыМетаданных[Индекс].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты);
		КонецЦикла;
		Если РеквизитыТабличнойЧасти.Количество() > 0 Тогда
			Результат.ТабличныеЧасти.Вставить(ИмяТабличнойЧасти, СписокЭлементов(РеквизитыТабличнойЧасти));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СписокЭлементов(Коллекция, ТолькоИмена = Истина)
	Результат = Новый Массив;
	Для Каждого Элемент Из Коллекция Цикл
		Если ТолькоИмена Тогда
			Результат.Добавить(Элемент.Имя);
		Иначе
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПересечениеМножеств(Множество1, Множество2) Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из Множество2 Цикл
		Индекс = Множество1.Найти(Элемент);
		Если Индекс <> Неопределено Тогда
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПересечениеРеквизитов(КоллекцияРеквизитов1, КоллекцияРеквизитов2)
	
	Результат = Новый Массив;
	
	Для Каждого Реквизит2 Из КоллекцияРеквизитов2 Цикл
		Для Каждого Реквизит1 Из КоллекцияРеквизитов1 Цикл
			Если Реквизит1.Имя = Реквизит2.Имя 
				И (Реквизит1.Тип = Реквизит2.Тип Или Реквизит1.Имя = "Ссылка") Тогда
				Результат.Добавить(Реквизит1);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Для внутреннего использования.
Функция СхемаКомпоновкиДанных(ТекстЗапроса) Экспорт
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя = "НаборДанных1";
	
	Возврат СхемаКомпоновкиДанных;
КонецФункции

// Для внутреннего использования.
Процедура ВыполнитьИзменениеОбъектов(Параметры, АдресРезультата) Экспорт
	
	ОбрабатываемыеОбъекты = Параметры.ОбрабатываемыеОбъекты.Получить().Строки;
	ОстанавливатьИзменениеПриОшибке = Параметры.ОстанавливатьИзменениеПриОшибке;
	
	ИзменятьВТранзакции = Параметры.ИзменятьВТранзакции;
	ПрерыватьПриОшибке = Параметры.ПрерыватьПриОшибке;
	ИспользуютсяДопРеквизиты = Параметры.ИспользуютсяДопРеквизиты;
	ИспользуютсяДопСведения = Параметры.ИспользуютсяДопСведения;
	РежимРазработчика = Параметры.РежимРазработчика;
	
	ОбъектыДляИзменения = Параметры.ОбъектыДляИзменения.Получить().Строки;
	
	РезультатИзменения = Новый Структура("ЕстьОшибки, СостояниеОбработки");
	РезультатИзменения.ЕстьОшибки = Ложь;
	РезультатИзменения.СостояниеОбработки = Новый Соответствие;
	
	Если ОстанавливатьИзменениеПриОшибке = Неопределено Тогда
		ОстанавливатьИзменениеПриОшибке = ПрерыватьПриОшибке;
	КонецЕсли;
	
	Если ОбрабатываемыеОбъекты = Неопределено Тогда
		ОбрабатываемыеОбъекты = Новый Массив;
		Для Каждого ИзменяемыйОбъект Из ОбъектыДляИзменения Цикл
			ОбрабатываемыеОбъекты.Добавить(ИзменяемыйОбъект);
		КонецЦикла;
	КонецЕсли;
	
	Если ОбрабатываемыеОбъекты.Количество() = 0 Тогда
		ПоместитьВоВременноеХранилище(РезультатИзменения, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ПроверятьНаГруппу = ПроверятьНаГруппу(ОбрабатываемыеОбъекты[0].Ссылка);
	
	Если ИзменятьВТранзакции Тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	КонецЕсли;
	
	ИзменяемыеРеквизиты = Параметры.ИзменяемыеРеквизиты;
	ДоступныеРеквизиты = Параметры.ДоступныеРеквизиты;
	
	Для Каждого ДанныеОбъекта Из ОбрабатываемыеОбъекты Цикл
		
		Ссылка = ДанныеОбъекта.Ссылка;
		ИзменяемыйОбъект = Ссылка.ПолучитьОбъект();
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ИзменяемыйОбъект.Ссылка);
		Исключение
			Инфо = ИнформацияОбОшибке();
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(Инфо);
			ЗаполнитьРезультатИзменения(РезультатИзменения, Ссылка, "Ошибка_БлокировкиОбъекта", КраткоеПредставлениеОшибки);
			Если ИзменятьВТранзакции Тогда
				ОтменитьТранзакцию();
				ПоместитьВоВременноеХранилище(РезультатИзменения, АдресРезультата);
				Возврат;
			КонецЕсли;
			Если ОстанавливатьИзменениеПриОшибке Тогда
				ПоместитьВоВременноеХранилище(РезультатИзменения, АдресРезультата);
				Возврат;
			КонецЕсли;
			Продолжить;
		КонецПопытки;
		
		ИзменяемыеРеквизитыОбъекта = Новый Массив;
		ИзменяемыеДопРеквизитыОбъекта = Новый Соответствие;
		ИзменяемыеДопСведенияОбъекта = Новый Соответствие;
		
		МассивЗаписейДопСведений = Новый Массив;
		
		///////////////////////////////////////////////////////////////////////////////////////
		// Отбор операций изменения по каждому объекту.
		//
		
		Отказ = Ложь;
		Для Каждого Операция Из ИзменяемыеРеквизиты Цикл
			Попытка
				Значение = ВычислитьВыражение(Операция.Значение, ИзменяемыйОбъект, ДоступныеРеквизиты);
			Исключение
				Отказ = Истина;
				КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаполнитьРезультатИзменения(РезультатИзменения, Ссылка, "Ошибка_НеКлассифицированная", КраткоеПредставлениеОшибки);
				Если ОстанавливатьИзменениеПриОшибке Или ИзменятьВТранзакции Тогда
					Если ИзменятьВТранзакции Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
					ПоместитьВоВременноеХранилище(РезультатИзменения, АдресРезультата);
					Возврат;
				КонецЕсли;
				Прервать;
			КонецПопытки;
			
			Если Операция.ВидОперации = 1 Тогда // изменение реквизита
				// Для групп не устанавливаем реквизиты, которых у них нет.
				Если ПроверятьНаГруппу И ИзменяемыйОбъект.ЭтоГруппа Тогда
					Если НЕ ЭтоСтандартныйРеквизит(ИзменяемыйОбъект.Метаданные().СтандартныеРеквизиты, Операция.Имя) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Попытка
					ИзменяемыйОбъект[Операция.Имя] = Значение;
				Исключение
					Отказ = Истина;
					КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ЗаполнитьРезультатИзменения(РезультатИзменения, Ссылка, "Ошибка_НеКлассифицированная", КраткоеПредставлениеОшибки);
					Если ОстанавливатьИзменениеПриОшибке Или ИзменятьВТранзакции Тогда
						Если ИзменятьВТранзакции Тогда
							ОтменитьТранзакцию();
						КонецЕсли;
						ПоместитьВоВременноеХранилище(РезультатИзменения, АдресРезультата);
						Возврат;
					КонецЕсли;
					Прервать;
				КонецПопытки;
				
				ИзменяемыеРеквизитыОбъекта.Добавить(Операция.Имя);
				
			ИначеЕсли Операция.ВидОперации = 2 Тогда // изменение доп реквизита
				
				Если Не СвойствоНужноИзменять(ИзменяемыйОбъект.Ссылка, Операция.Свойство, Параметры) Тогда
					Продолжить;
				КонецЕсли;
				
				НайденнаяСтрока = ИзменяемыйОбъект.ДополнительныеРеквизиты.Найти(Операция.Свойство, "Свойство");
				
				Если НайденнаяСтрока = Неопределено Тогда
					НайденнаяСтрока = ИзменяемыйОбъект.ДополнительныеРеквизиты.Добавить();
					НайденнаяСтрока.Свойство = Операция.Свойство;
				КонецЕсли;
				
				НайденнаяСтрока.Значение = Значение;
				
				ОписаниеСвойства = ЗначенияРеквизитовОбъекта(Операция.Свойство, "ТипЗначения, МногострочноеПолеВвода");
				МодульУправлениеСвойствами = ОбщийМодуль("УправлениеСвойствамиСлужебный");
				Если МодульУправлениеСвойствами.ИспользоватьНеограниченнуюСтроку(ОписаниеСвойства.ТипЗначения, ОписаниеСвойства.МногострочноеПолеВвода) Тогда
					НайденнаяСтрока.ТекстоваяСтрока = Значение;
				КонецЕсли;
				
				ИмяРеквизитаФормы = ПрефиксИмениДопРеквизита() + СтрЗаменить(Строка(Операция.Свойство.УникальныйИдентификатор()), "-", "_");
				ИзменяемыеДопРеквизитыОбъекта.Вставить(ИмяРеквизитаФормы, Значение);
				
			ИначеЕсли Операция.ВидОперации = 3 Тогда // изменение доп сведения
				
				Если Не СвойствоНужноИзменять(ИзменяемыйОбъект.Ссылка, Операция.Свойство, Параметры) Тогда
					Продолжить;
				КонецЕсли;
				
				МенеджерЗаписи = РегистрыСведений["ДополнительныеСведения"].СоздатьМенеджерЗаписи();
				
				МенеджерЗаписи.Объект = ИзменяемыйОбъект.Ссылка;
				МенеджерЗаписи.Свойство = Операция.Свойство;
				МенеджерЗаписи.Значение = Значение;
				
				МассивЗаписейДопСведений.Добавить(МенеджерЗаписи);
				
				ИмяРеквизитаФормы = ПрефиксИмениДопСведения() + СтрЗаменить(Строка(Операция.Свойство.УникальныйИдентификатор()), "-", "_");
				ИзменяемыеДопСведенияОбъекта.Вставить(ИмяРеквизитаФормы, Значение);
				
			КонецЕсли;
			
		КонецЦикла; 
		
		Если Отказ Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Параметры.ИзменяемыеТабличныеЧасти.Количество() > 0 Тогда
			ВнестиИзмененияВТабличныеЧасти(ИзменяемыйОбъект, ДанныеОбъекта, Параметры.ИзменяемыеТабличныеЧасти);
		КонецЕсли;
		
		// Отбор операций изменения по каждому объекту.
		///////////////////////////////////////////////////////////////////////////////////////
		
		РежимЗаписи = Неопределено;
		ЭтоДокумент = Метаданные.Документы.Содержит(ИзменяемыйОбъект.Метаданные());
		Если ЭтоДокумент Тогда
			РежимЗаписи = РежимЗаписиДокумента.Запись;
			Если ИзменяемыйОбъект.Проведен Тогда
				РежимЗаписи = РежимЗаписиДокумента.Проведение;
			ИначеЕсли ИзменяемыйОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
				РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
			КонецЕсли;
		КонецЕсли;
		
		Если РежимРазработчика Тогда
			РежимЗаписи = Неопределено;
			ИзменяемыйОбъект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////////
		// Блок обработки проверки заполнения.
		//
		
		ПрерватьИзменение = Ложь;
		ПроверкаЗаполненияУспешно = Истина;
		
		Если Не РежимРазработчика Тогда
			Попытка
				Если Не ЭтоДокумент Или РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
					Если Не ИзменяемыйОбъект.ПроверитьЗаполнение() Тогда
						ЗаполнитьРезультатИзменения(РезультатИзменения, Ссылка, "Ошибка_ОбработкиПроверкиЗаполнения",
								ПолучитьСтрокуСообщенийОбОшибках());
						Если ОстанавливатьИзменениеПриОшибке Или ИзменятьВТранзакции Тогда
							ПрерватьИзменение = Истина;
						КонецЕсли;
						ПроверкаЗаполненияУспешно = Ложь;
					КонецЕсли;
				КонецЕсли;
			Исключение
				Инфо = ИнформацияОбОшибке();
				КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(Инфо);
				ЗаполнитьРезультатИзменения(РезультатИзменения, Ссылка, "Ошибка_НеКлассифицированная", КраткоеПредставлениеОшибки);
				Если ОстанавливатьИзменениеПриОшибке Или ИзменятьВТранзакции Тогда
					ПрерватьИзменение = Истина;
				КонецЕсли;
				ПроверкаЗаполненияУспешно = Ложь;
			КонецПопытки;
		КонецЕсли;
		
		Если ПрерватьИзменение Тогда
			Если ИзменятьВТранзакции Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ПоместитьВоВременноеХранилище(РезультатИзменения, АдресРезультата);
			Возврат;
		КонецЕсли;
		
		Если НЕ ПроверкаЗаполненияУспешно Тогда
			Продолжить;
		КонецЕсли;
		
		//
		// Блок обработки проверки заполнения.
		///////////////////////////////////////////////////////////////////////////////////////
		
		///////////////////////////////////////////////////////////////////////////////////////
		// Блок записи дополнительных сведений.
		//
		
		Если МассивЗаписейДопСведений.Количество() > 0 Тогда
			
			Если НЕ ИзменятьВТранзакции Тогда
				// Если транзакция при изменении объектов не используется, включаем ее
				// для изменения доп сведений в регистре.
				НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			КонецЕсли;
			
			Попытка
				Для Каждого МенеджерЗаписи Из МассивЗаписейДопСведений Цикл
					МенеджерЗаписи.Записать(Истина);
				КонецЦикла;
			Исключение
				Инфо = ИнформацияОбОшибке();
				
				КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(Инфо);
				ЗаполнитьРезультатИзменения(РезультатИзменения, Ссылка, "Ошибка_ЗаписиДопСведений", КраткоеПредставлениеОшибки);
				
				ОтменитьТранзакцию();
				
				Если ИзменятьВТранзакции ИЛИ ОстанавливатьИзменениеПриОшибке Тогда
					ПоместитьВоВременноеХранилище(РезультатИзменения, АдресРезультата);
					Возврат;
				КонецЕсли;
			КонецПопытки;
			
		КонецЕсли;
		
		//
		// Блок записи дополнительных сведений.
		///////////////////////////////////////////////////////////////////////////////////////
		
		Отказ = Ложь;
		
		
		Попытка
			Если РежимЗаписи = Неопределено Тогда
				ИзменяемыйОбъект.Записать();
			Иначе
				ИзменяемыйОбъект.Записать(РежимЗаписи);
			КонецЕсли;
		Исключение
			Инфо = ИнформацияОбОшибке();
			Отказ = Истина;
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(Инфо);
			ЗаполнитьРезультатИзменения(РезультатИзменения, Ссылка, 
							"Ошибка_ЗаписиОбъекта",
							КраткоеПредставлениеОшибки + Символы.ПС + ПолучитьСтрокуСообщенийОбОшибках());
			Если ИзменятьВТранзакции И ТранзакцияАктивна() Тогда // Отменяем транзакцию на любом уровне рекурсии.
				ОтменитьТранзакцию();
			КонецЕсли;
			Если ПрерыватьПриОшибке Тогда
				ПоместитьВоВременноеХранилище(РезультатИзменения, АдресРезультата);
				Возврат;
			КонецЕсли;
		КонецПопытки;
		
		// Фиксируем транзакцию записи доп. свойств, если запись объектов происходит
		// не в транзакции.
		Если НЕ ИзменятьВТранзакции И МассивЗаписейДопСведений.Количество() > 0 Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		Если Не Отказ Тогда
			ЗаполнитьРезультатИзмененияДополнительныхСвойств(РезультатИзменения, Ссылка,
						ИзменяемыйОбъект, ИзменяемыеРеквизитыОбъекта,
						ИзменяемыеДопРеквизитыОбъекта, ИзменяемыеДопСведенияОбъекта);
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(ИзменяемыйОбъект.Ссылка);
		
	КонецЦикла;
	
	Если ИзменятьВТранзакции И ТранзакцияАктивна() Тогда
		Попытка
			ЗафиксироватьТранзакцию();
		Исключение
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаполнитьРезультатИзменения(РезультатИзменения, Ссылка, "Ошибка_НеКлассифицированная", КраткоеПредставлениеОшибки);
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатИзменения, АдресРезультата);
	Возврат;

КонецПроцедуры

Функция СвойствоНужноИзменять(Ссылка, Свойство, Параметры)
	
	Если ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщийМодуль("УправлениеСвойствами");
		Если МодульУправлениеСвойствами = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ВидОбъектаПоСсылке = ВидОбъектаПоСсылке(Ссылка);
	Если (ВидОбъектаПоСсылке = "Справочник" ИЛИ ВидОбъектаПоСсылке = "ПланВидовХарактеристик")
		И ОбъектЯвляетсяГруппой(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МодульУправлениеСвойствами.ПроверитьСвойствоУОбъекта(Ссылка, Свойство) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСтрокуСообщенийОбОшибках()
	
	ПредставлениеОшибки = "";
	МассивСообщений = ПолучитьСообщенияПользователю(Истина);
	
	Для Каждого СообщениеПользователю Из МассивСообщений Цикл
		ПредставлениеОшибки = ПредставлениеОшибки + СообщениеПользователю.Текст + Символы.ПС;
	КонецЦикла;
	
	Возврат ПредставлениеОшибки;
	
КонецФункции

Процедура ЗаполнитьРезультатИзменения(Результат, Ссылка, КодОшибки, СообщениеОбОшибке)
	
	СостояниеИзменения = Новый Структура;
	СостояниеИзменения.Вставить("КодОшибки", КодОшибки);
	СостояниеИзменения.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
	
	Результат.СостояниеОбработки.Вставить(Ссылка, СостояниеИзменения);
	Результат.ЕстьОшибки = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатИзмененияДополнительныхСвойств(Результат, Ссылка, 
		ИзменяемыйОбъект, ИзменяемыеРеквизитыОбъекта = Неопределено,
		ИзменяемыеДопРеквизитыОбъекта = Неопределено, ИзменяемыеДопСведенияОбъекта = Неопределено)
	
	СостояниеИзменения = Новый Структура;
	СостояниеИзменения.Вставить("КодОшибки", "");
	СостояниеИзменения.Вставить("СообщениеОбОшибке", "");
	СостояниеИзменения.Вставить("ЗначенияИзмененныхРеквизитов", Новый Соответствие);
	Если ИзменяемыеРеквизитыОбъекта <> Неопределено Тогда
		Для Каждого ИмяРеквизита Из ИзменяемыеРеквизитыОбъекта Цикл
			СостояниеИзменения.ЗначенияИзмененныхРеквизитов.Вставить(ИмяРеквизита, ИзменяемыйОбъект[ИмяРеквизита]);
		КонецЦикла;
	КонецЕсли;
	СостояниеИзменения.Вставить("ЗначенияИзмененныхДопРеквизитов", ИзменяемыеДопРеквизитыОбъекта);
	СостояниеИзменения.Вставить("ЗначенияИзмененныхДопСведений", ИзменяемыеДопСведенияОбъекта);
	
	Результат.СостояниеОбработки.Вставить(Ссылка, СостояниеИзменения);
	
КонецПроцедуры

Функция ПрефиксИмениДопРеквизита()
	Возврат "ДопРеквизит_";
КонецФункции

Функция ПрефиксИмениДопСведения()
	Возврат "ДопСведение_";
КонецФункции

Функция ПроверятьНаГруппу(Ссылка)
	
	ВидОбъекта = ВидОбъектаПоСсылке(Ссылка);
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	Если ВидОбъекта = "Справочник"
	   И МетаданныеОбъекта.Иерархический
	   И МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ВнестиИзмененияВТабличныеЧасти(ИзменяемыйОбъект, ДанныеОбъекта, ИзмененияВТабличныхЧастях)
	Для Каждого ИзмененияТабличнойЧасти Из ИзмененияВТабличныхЧастях Цикл
		ИмяТаблицы = ИзмененияТабличнойЧасти.Ключ;
		ИзменяемыеРеквизиты = ИзмененияТабличнойЧасти.Значение;
		Для Каждого СтрокаТаблицы Из ИзменяемыйОбъект[ИмяТаблицы] Цикл
			Если СтрокаСоответствуетОтбору(СтрокаТаблицы, ДанныеОбъекта, ИмяТаблицы) Тогда
				Для Каждого ИзменяемыйРеквизит Из ИзменяемыеРеквизиты Цикл
					СтрокаТаблицы[ИзменяемыйРеквизит.Имя] = ИзменяемыйРеквизит.Значение;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция СтрокаСоответствуетОтбору(СтрокаТаблицы, ДанныеОбъекта, ИмяТаблицы)
	
	Возврат ДанныеОбъекта.Строки.НайтиСтроки(Новый Структура(ИмяТаблицы + "НомерСтроки", СтрокаТаблицы.НомерСтроки)).Количество() = 1;
	
КонецФункции

Процедура ЗаполнитьКоллекциюДоступныхДляИзмененияОбъектов(ДоступныеОбъекты, ПоказыватьСкрытые) Экспорт

	КоллекцииОбъектовМетаданных = Новый Массив;
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.Справочники);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.Документы);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.БизнесПроцессы);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.Задачи);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.ПланыВидовРасчета);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.ПланыВидовХарактеристик);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.ПланыСчетов);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.ПланыОбмена);
	
	ПрефиксУдаляемыхОбъектов = "удалить";
	УдаляемыеОбъекты = Новый СписокЗначений;
	
	МенеджерыОбъектов = Неопределено;
	Если ВерсияБСПСоответствуетТребованиям() Тогда
		МенеджерыОбъектов = МенеджерыОбъектовДляРедактированияРеквизитов();
	КонецЕсли;
	
	Для Каждого КоллекцияОбъектовМетаданных Из КоллекцииОбъектовМетаданных Цикл
		Для Каждого ОбъектМетаданных Из КоллекцияОбъектовМетаданных Цикл
			Если Не ПоказыватьСкрытые Тогда
				Если СтрНачинаетсяС(НРег(ОбъектМетаданных.Имя),ПрефиксУдаляемыхОбъектов)
					Или ЭтоСлужебныйОбъект(ОбъектМетаданных, МенеджерыОбъектов) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ПравоДоступа("Изменение", ОбъектМетаданных) Тогда
				Если СтрНачинаетсяС(НРег(ОбъектМетаданных.Имя),ПрефиксУдаляемыхОбъектов) Тогда
					УдаляемыеОбъекты.Добавить(ОбъектМетаданных.ПолноеИмя(), ОбъектМетаданных.Представление());
				Иначе 
					ДоступныеОбъекты.Добавить(ОбъектМетаданных.ПолноеИмя(), ОбъектМетаданных.Представление());
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ДоступныеОбъекты.СортироватьПоПредставлению();
	УдаляемыеОбъекты.СортироватьПоПредставлению();
	
	Для Каждого Элемент Из УдаляемыеОбъекты Цикл
		ДоступныеОбъекты.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоСлужебныйОбъект(ОбъектМетаданных, МенеджерыОбъектов)
	
	Если МенеджерыОбъектов <> Неопределено Тогда
		ДоступныеМетоды = МетодыМенеджераОбъектаДляРедактированияРеквизитов(ОбъектМетаданных.ПолноеИмя(), МенеджерыОбъектов);
		Если ТипЗнч(ДоступныеМетоды) = Тип("Массив") И (ДоступныеМетоды.Количество() = 0 
			Или ДоступныеМетоды.Найти("РеквизитыРедактируемыеВГрупповойОбработке") <> Неопределено) Тогда
				МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
				Редактируемые = МенеджерОбъекта.РеквизитыРедактируемыеВГрупповойОбработке();
		КонецЕсли;
	Иначе
		// В конфигурациях без БСП или на старых версиях БСП, пытаемся определить, 
		// есть ли у объекта редактируемые реквизиты.
		МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		Попытка
			Редактируемые = МенеджерОбъекта.РеквизитыРедактируемыеВГрупповойОбработке();
		Исключение
			// метод не найден
			Редактируемые = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если Редактируемые <> Неопределено И Редактируемые.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	//
	
	Если МенеджерыОбъектов <> Неопределено Тогда
		Если ТипЗнч(ДоступныеМетоды) = Тип("Массив") И (ДоступныеМетоды.Количество() = 0
			Или ДоступныеМетоды.Найти("РеквизитыНеРедактируемыеВГрупповойОбработке") <> Неопределено) Тогда
				Если МенеджерОбъекта = Неопределено Тогда
					МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
				КонецЕсли;	
				НеРедактируемые = МенеджерОбъекта.РеквизитыНеРедактируемыеВГрупповойОбработке();
		КонецЕсли;
		
	Иначе
		// В конфигурациях без БСП или на старых версиях БСП, пытаемся определить, 
		// есть ли у объекта нередактируемые реквизиты.
		Попытка
			НеРедактируемые = МенеджерОбъекта.РеквизитыНеРедактируемыеВГрупповойОбработке();
		Исключение
			// метод не найден
			НеРедактируемые = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если НеРедактируемые <> Неопределено И НеРедактируемые.Найти("*") <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция МетодыМенеджераОбъектаДляРедактированияРеквизитов(ИмяОбъекта, МенеджерыОбъектов)
	
	СведенияОМенеджереОбъекта = МенеджерыОбъектов[ИмяОбъекта];
	Если СведенияОМенеджереОбъекта = Неопределено Тогда
		Возврат "НеПоддерживается";
	КонецЕсли;
	ДоступныеМетоды = СтрРазделить(СведенияОМенеджереОбъекта, Символы.ПС, Ложь);
	Возврат ДоступныеМетоды;
	
КонецФункции

Функция МенеджерыОбъектовДляРедактированияРеквизитов()
	
	МодульИнтеграцияСтандартныхПодсистем = ОбщийМодуль("ИнтеграцияСтандартныхПодсистем");
	МодульГрупповоеИзменениеОбъектовПереопределяемый = ОбщийМодуль("ГрупповоеИзменениеОбъектовПереопределяемый");
	Если МодульИнтеграцияСтандартныхПодсистем = Неопределено Или МодульГрупповоеИзменениеОбъектовПереопределяемый = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ОбъектыСЗаблокированнымиРеквизитами = Новый Соответствие;
	МодульИнтеграцияСтандартныхПодсистем.ПриОпределенииОбъектовСРедактируемымиРеквизитами(ОбъектыСЗаблокированнымиРеквизитами);
	МодульГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами(ОбъектыСЗаблокированнымиРеквизитами);
	
	Возврат ОбъектыСЗаблокированнымиРеквизитами;
	
КонецФункции

Функция ВерсияБСПСоответствуетТребованиям() Экспорт
	
	Попытка
		МодульСтандартныеПодсистемыСервер = ОбщийМодуль("СтандартныеПодсистемыСервер");
	Исключение
		// Модуль не существует
		МодульСтандартныеПодсистемыСервер = Неопределено;
	КонецПопытки;
	Если МодульСтандартныеПодсистемыСервер = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ВерсияБСП = МодульСтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	Возврат НомерВерсииВЧисло(ВерсияБСП) >= НомерВерсииВЧисло("2.3.1.57");
	
КонецФункции

Функция НомерВерсииВЧисло(НомерВерсии)
	ЧастиНомера = СтрРазделить(НомерВерсии, ".", Ложь);
	Если ЧастиНомера.Количество() <> 4 Тогда
		Возврат 0;
	КонецЕсли;
	Результат = 0;
	Для Каждого ЧастьНомера Из ЧастиНомера Цикл
		Результат = Результат * 1000 + Число(ЧастьНомера);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя)
	Перем КлассОМ, ИмяОМ, Менеджер;
	
	ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
	
	Если ЧастиИмени.Количество() = 2 Тогда
		КлассОМ = ЧастиИмени[0];
		ИмяОМ  = ЧастиИмени[1];
	КонецЕсли;
	
	Если      ВРег(КлассОМ) = "ПЛАНОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
		
	ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Менеджер = Справочники;
		
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
		Менеджер = Документы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Менеджер = Перечисления;
		
	ИначеЕсли ВРег(КлассОМ) = "ОТЧЕТ" Тогда
		Менеджер = Отчеты;
		
	ИначеЕсли ВРег(КлассОМ) = "ОБРАБОТКА" Тогда
		Менеджер = Обработки;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
		Менеджер = РегистрыБухгалтерии;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРРАСЧЕТА" Тогда
		Если ЧастиИмени.Количество() = 2 Тогда
			// Регистр расчета
			Менеджер = РегистрыРасчета;
		Иначе
			КлассПодчиненногоОМ = ЧастиИмени[2];
			ИмяПодчиненногоОМ = ЧастиИмени[3];
			Если ВРег(КлассПодчиненногоОМ) = "ПЕРЕРАСЧЕТ" Тогда
				// Перерасчет
				Менеджер = РегистрыРасчета[ИмяОМ].Перерасчеты;
			Иначе
				ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестный тип объекта метаданных ""%1""'"), ПолноеИмя);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕСС" Тогда
		Менеджер = БизнесПроцессы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧА" Тогда
		Менеджер = Задачи;
		
	ИначеЕсли ВРег(КлассОМ) = "КОНСТАНТА" Тогда
		Менеджер = Константы;
		
	ИначеЕсли ВРег(КлассОМ) = "ПОСЛЕДОВАТЕЛЬНОСТЬ" Тогда
		Менеджер = Последовательности;
	КонецЕсли;
	
	Если Менеджер <> Неопределено Тогда
		Попытка
			Возврат Менеджер[ИмяОМ];
		Исключение
			Менеджер = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестный тип объекта метаданных ""%1""'"), ПолноеИмя);
	
КонецФункции

Функция ВычислитьВыражение(Знач Выражение, Объект, ДоступныеРеквизиты)
	
	Если Не(ТипЗнч(Выражение) = Тип("Строка") И СтрНачинаетсяС(Выражение, "=")) Тогда
		Возврат Выражение;
	КонецЕсли;
		
	Если СтрНачинаетсяС(Выражение, "'=") Тогда
		Возврат Сред(Выражение, 2);
	КонецЕсли;
	
	Выражение = Сред(Выражение, 2);
	
	Для Каждого ОписаниеРеквизита Из ДоступныеРеквизиты Цикл
		Если СтрНайти(Выражение, "[" + ОписаниеРеквизита.Представление + "]") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Значение = "";
		Если ОписаниеРеквизита.ВидОперации = 1 Тогда
			Значение = Объект[ОписаниеРеквизита.Имя];
		Иначе
			МодульУправлениеСвойствами = ОбщийМодуль("УправлениеСвойствами");
			СписокСвойств = Новый Массив;
			СписокСвойств.Добавить(ОписаниеРеквизита.Свойство);
			ЗначенияСвойств = МодульУправлениеСвойствами.ПолучитьЗначенияСвойств(Объект.Ссылка, Истина, Истина, СписокСвойств);
			Для Каждого СтрокаТаблицы Из ЗначенияСвойств.НайтиСтроки(Новый Структура("Свойство", ОписаниеРеквизита.Свойство)) Цикл
				Значение = СтрокаТаблицы.Значение;
			КонецЦикла;
		КонецЕсли;
		
		Выражение = СтрЗаменить(Выражение, "[" + ОписаниеРеквизита.Представление + "]", """" 
			+ СтрЗаменить(СтрЗаменить(Значение, """", """"""), Символы.ПС, Символы.ПС + "|") + """");
	КонецЦикла;
	
	Возврат Вычислить(Выражение);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции из базовой функциональности для обеспечения автономности.

// Возвращает признак того, что реквизит входит в подмножество стандартных реквизитов.
//
// Параметры:
//  СтандартныеРеквизиты - ОписанияСтандартныхРеквизитов - тип и значение описывает коллекцию настроек различных
//                                                         стандартных реквизитов;
//  ИмяРеквизита - Строка - реквизит который необходимо проверить на принадлежность множеству стандартных реквизитов;
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоСтандартныйРеквизит(СтандартныеРеквизиты, ИмяРеквизита) Экспорт
	
	Для Каждого Реквизит Из СтандартныеРеквизиты Цикл
		Если Реквизит.Имя = ИмяРеквизита Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

// Функция ВидОбъектаПоСсылке возвращает имя вида объектов метаданных
// по ссылке на объект.
//
// Не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//
// Возвращаемое значение:
//  Строка       - имя вида объектов метаданных, например, "Справочник", "Документ" ...
// 
Функция ВидОбъектаПоСсылке(Ссылка) Экспорт
	
	Возврат ВидОбъектаПоТипу(ТипЗнч(Ссылка));
	
КонецФункции 

// Функция возвращает имя вида объектов метаданных по типу объекта.
//
// Не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  Тип       - Тип прикладного объекта, определенный в конфигурации.
//
// Возвращаемое значение:
//  Строка       - имя вида объектов метаданных, например, "Справочник", "Документ" ...
// 
Функция ВидОбъектаПоТипу(Тип) Экспорт
	
	Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "Справочник";
	
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "Документ";
	
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "БизнесПроцесс";
	
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "ПланВидовХарактеристик";
	
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "ПланСчетов";
	
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "ПланВидовРасчета";
	
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "Задача";
	
	ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "ПланОбмена";
	
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "Перечисление";
	
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru='Неверный тип значения параметра (%1)'"), Строка(Тип));
	
	КонецЕсли;
	
КонецФункции 

// Проверяет является ли объект группой элементов.
//
// Параметры:
//  Объект       - Объект, Ссылка, ДанныеФормыСтруктура по типу Объект.
//
// Возвращаемое значение:
//  Булево.
//
Функция ОбъектЯвляетсяГруппой(Объект) Экспорт
	
	Если ЗначениеСсылочногоТипа(Объект) Тогда
		Ссылка = Объект;
	Иначе
		Ссылка = Объект.Ссылка;
	КонецЕсли;
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		
		Если НЕ МетаданныеОбъекта.Иерархический
		 ИЛИ МетаданныеОбъекта.ВидИерархии
		     <> Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли НЕ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		Возврат Ложь;
		
	ИначеЕсли НЕ МетаданныеОбъекта.Иерархический Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Ссылка <> Объект Тогда
		Возврат Объект.ЭтоГруппа;
	КонецЕсли;
	
	Возврат ЗначениеРеквизитаОбъекта(Ссылка, "ЭтоГруппа");
	
КонецФункции

// Проверить, что значение имеет ссылочный тип данных.
//
// Параметры:
//  Значение       - ссылка на объект, - элемент справочника, документ, ...
//
// Возвращаемое значение:
//  Булево       - Истина, если тип значения ссылочный.
//
Функция ЗначениеСсылочногоТипа(Значение) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка    - Ссылка на объект - элемент справочника, документ, ...
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = СтрРазделить(Реквизиты, ",", Ложь);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"), Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
	
КонецФункции 

// Возвращает Истина, если подсистема существует.
//
// Параметры:
//  ПолноеИмяПодсистемы - Строка. Полное имя объекта метаданных подсистема без слов "Подсистема.".
//                        Например: "СтандартныеПодсистемы.БазоваяФункциональность".
//
// Пример вызова необязательной подсистемы:
//
//  Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
//  	МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
//  	МодульУправлениеДоступом.<Имя метода>();
//  КонецЕсли;
//
// Возвращаемое значение:
//  Булево.
//
Функция ПодсистемаСуществует(ПолноеИмяПодсистемы) Экспорт
	
	ИменаПодсистем = ИменаПодсистем();
	Возврат ИменаПодсистем.Получить(ПолноеИмяПодсистемы) <> Неопределено;
	
КонецФункции

// Возвращает соответствие имен подсистем и значения Истина;
Функция ИменаПодсистем() Экспорт
	
	Возврат Новый ФиксированноеСоответствие(ИменаПодчиненныхПодсистем(Метаданные));
	
КонецФункции

Функция ИменаПодчиненныхПодсистем(РодительскаяПодсистема)
	
	Имена = Новый Соответствие;
	
	Для Каждого ТекущаяПодсистема Из РодительскаяПодсистема.Подсистемы Цикл
		
		Имена.Вставить(ТекущаяПодсистема.Имя, Истина);
		ИменаПодчиненных = ИменаПодчиненныхПодсистем(ТекущаяПодсистема);
		
		Для каждого ИмяПодчиненной Из ИменаПодчиненных Цикл
			Имена.Вставить(ТекущаяПодсистема.Имя + "." + ИмяПодчиненной.Ключ, Истина);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Имена;
	
КонецФункции

// Возвращает ссылку на общий модуль по имени.
//
// Параметры:
//  Имя          - Строка - имя общего модуля, например:
//                 "ОбщегоНазначения",
//                 "ОбщегоНазначенияКлиент".
//
// Возвращаемое значение:
//  ОбщийМодуль.
//
Функция ОбщийМодуль(Имя) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		Модуль = Вычислить(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru = 'Общий модуль ""%1"" не найден.'"), Имя);
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено)
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	
	Возврат СтрокаПодстановки;
КонецФункции

#КонецОбласти

#КонецЕсли