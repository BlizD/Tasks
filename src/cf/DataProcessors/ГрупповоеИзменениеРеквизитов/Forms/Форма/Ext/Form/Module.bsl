

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПроверитьВерсиюИРежимСовместимостиПлатформы();
	
	Параметры.Свойство("ДополнительнаяОбработкаСсылка", ДополнительнаяОбработкаСсылка);
	
	ЗагрузитьНастройкиОбработки();
	КонтекстныйВызов = ТипЗнч(Параметры.МассивОбъектов) = Тип("Массив");
	Элементы.ФормаНазад.Видимость = Ложь;
	Если КонтекстныйВызов Тогда
		ВыполнитьДействияПриКонтекстномОткрытии();
	Иначе
		Заголовок = НСтр("ru = 'Групповое изменение реквизитов'");
	КонецЕсли;
	СформироватьПояснениеОНастроенныхИзменениях();
	ОбновитьВидимостьЭлементов();
	
	Если Не КонтекстныйВызов Тогда
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег(ПолноеИмяФормы("ДополнительныеПараметры")) Тогда
		
		ПерезаполнитьСтруктуруРеквизитовОбъекта = Ложь;
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			Объект.РежимРазработчика = ВыбранноеЗначение.РежимРазработчика;
			ОтключитьСвязиПараметровВыбора = ВыбранноеЗначение.ОтключитьСвязиПараметровВыбора;
			Если УчитыватьИерархию И ОбрабатыватьРекурсивно <> ВыбранноеЗначение.ОбрабатыватьРекурсивно Тогда
				ОбрабатыватьРекурсивно = ВыбранноеЗначение.ОбрабатыватьРекурсивно;
				ПерезаполнитьСтруктуруРеквизитовОбъекта = Истина;
				ИнициализироватьКомпоновщикНастроек();
			КонецЕсли;
			Объект.ИзменятьВТранзакции = ВыбранноеЗначение.ИзменятьВТранзакции;
			Объект.ПрерыватьПриОшибке  = ВыбранноеЗначение.ПрерыватьПриОшибке;
			
			Если Объект.ПоказыватьСлужебныеРеквизиты <> ВыбранноеЗначение.ПоказыватьСлужебныеРеквизиты Тогда
				Объект.ПоказыватьСлужебныеРеквизиты = ВыбранноеЗначение.ПоказыватьСлужебныеРеквизиты;
				ПерезаполнитьСтруктуруРеквизитовОбъекта = Истина;
			КонецЕсли;
			
			ТОНастройкаПорции          = ВыбранноеЗначение.НастройкаПорции;
			ТОПроцентОбъектовВПорции   = ВыбранноеЗначение.ПроцентОбъектовВПорции;
			ТОЧислоОбъектовВПорции     = ВыбранноеЗначение.ЧислоОбъектовВПорции;
			
			Если ПерезаполнитьСтруктуруРеквизитовОбъекта И Не ПустаяСтрока(ВидыИзменяемыхОбъектов) Тогда
				СохраненныеНастройки = Неопределено;
				ЗагрузитьМетаданныеОбъекта(Истина, СохраненныеНастройки);
				Если СохраненныеНастройки <> Неопределено Тогда
					УстановитьНастройкуИзменения(СохраненныеНастройки);
				КонецЕсли;
			КонецЕсли;
			
			ОбновитьВидимостьЭлементов();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ТипЗнч(РезультатФоновогоЗадания) = Тип("Структура")
		И Не РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		ОтменитьВыполнениеЗадания(РезультатФоновогоЗадания.ИдентификаторЗадания);
	КонецЕсли;

	СохранитьНастройкиОбработки(
			ВидыИзменяемыхОбъектов,
			Объект.ИзменятьВТранзакции,
			Объект.ПрерыватьПриОшибке,
			ТОНастройкаПорции,
			ТОПроцентОбъектовВПорции,
			ТОЧислоОбъектовВПорции,
			ОбрабатыватьРекурсивно);
			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидИзменяемыхОбъектовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВидИзменяемыхОбъектовВыборСделан", ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыбранныеТипы", ВидыИзменяемыхОбъектов);
	ПараметрыФормы.Вставить("ПоказыватьСкрытые", Объект.ПоказыватьСлужебныеРеквизиты);
	ОткрытьФорму(ПолноеИмяФормы("ВыборВидаОбъектов"), ПараметрыФормы, , , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеИзменяемыхОбъектовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Элементы.ПредставлениеИзменяемыхОбъектов.СписокВыбора.Количество() = 0 Тогда
		ЗаполнитьСписокТиповОбъектов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеИзменяемыхОбъектовПриИзменении(Элемент)
	ВыбранныйТип = Элементы.ПредставлениеИзменяемыхОбъектов.СписокВыбора.НайтиПоЗначению(ПредставлениеИзменяемыхОбъектов);
	Если ВыбранныйТип = Неопределено Тогда
		Для Каждого Тип Из Элементы.ПредставлениеИзменяемыхОбъектов.СписокВыбора Цикл
			Если СтрНайти(НРег(Тип.Представление), НРег(ПредставлениеИзменяемыхОбъектов)) = 1 Тогда
				ВыбранныйТип = Тип;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ВыбранныйТип = Неопределено Тогда
		ПредставлениеИзменяемыхОбъектов = ПредставлениеИзменяемыхОбъектов();
	Иначе
		ПредставлениеИзменяемыхОбъектов = ВыбранныйТип.Представление;
		ВидыИзменяемыхОбъектов = ВыбранныйТип.Значение;
		ВыбранныеОбъектыВКонтексте.Очистить();
		ПерестроитьИнтерфейсФормыДляВыбранногоВидаОбъектов();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпоновщикНастроекНастройкиОтбор

&НаКлиенте
Процедура ОбновитьНадписи()
	ОбновитьНадписиСервер();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписиСервер()
	ОбновитьНадписьКоличествоВыбранных();
	СформироватьПояснениеОНастроенныхИзменениях();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыКоторыеНеУдалосьИзменить

&НаКлиенте
Процедура ОбъектыКоторыеНеУдалосьИзменитьПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	Если ТипЗнч(Элемент.ТекущиеДанные.Объект) <> Тип("Строка") Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Объект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыКоторыеНеУдалосьИзменитьПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Причина = Элемент.ТекущиеДанные.Причина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРеквизитыОбъекта

&НаКлиенте
Процедура РеквизитыОбъектаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если Поле <> Неопределено И Поле.Имя = Элементы.РеквизитыОбъектаЗначение.Имя 
		И РеквизитыОбъекта.НайтиПоИдентификатору(Строка).ДопустимыеТипы.СодержитТип(Тип("Строка"))
		И Не СтрНачинаетсяС(РеквизитыОбъекта.НайтиПоИдентификатору(Строка).Значение, "'") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОбъектаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ОписаниеРеквизита = РеквизитыОбъекта.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
	ШаблонВставки = "[%1]";
	
	ТекстДляВставки = ПодставитьПараметрыВСтроку(ШаблонВставки, ОписаниеРеквизита.Представление);
	ТекущиеДанные = РеквизитыОбъекта.НайтиПоИдентификатору(Строка);
	Если Не ПустаяСтрока(ТекущиеДанные.Значение) Тогда
		ТекстДляВставки = "+" + ТекстДляВставки;
	КонецЕсли;
	ТекущиеДанные.Значение = Строка(ТекущиеДанные.Значение) + ТекстДляВставки;
	Если Не СтрНачинаетсяС(СокрЛ(ТекущиеДанные.Значение), "=") Тогда
		ТекущиеДанные.Значение = "=" + ТекущиеДанные.Значение;
	КонецЕсли;
	ТекущиеДанные.Изменять = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОбъектаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.РеквизитыОбъекта.ТекущиеДанные;
	Если ТекущиеДанные.ДопустимыеТипы.Типы().Количество() = 1 И ТекущиеДанные.ДопустимыеТипы.СодержитТип(Тип("Строка")) Тогда
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("РеквизитыОбъектаЗначениеЗавершениеВыбора", ЭтотОбъект, ТекущиеДанные);
		ОткрытьФорму(ПолноеИмяФормы("РедактированиеФормулы"), ПараметрыКонструктора(ТекущиеДанные.Значение), , , , ,
			ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЕстьОшибкиВВыражениях()
	Результат = Ложь;
	Для Индекс = 0 По РеквизитыОбъекта.Количество() - 1 Цикл
		ОписаниеРеквизита = РеквизитыОбъекта[Индекс];
		Если ОписаниеРеквизита.Изменять И ТипЗнч(ОписаниеРеквизита.Значение) = Тип("Строка") И СтрНачинаетсяС(ОписаниеРеквизита.Значение, "=") Тогда
			ТекстОшибки = "";
			Если ЕстьОшибкаВВыражении(ОписаниеРеквизита.Значение, ТекстОшибки) Тогда
				Результат = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Поле = ПодставитьПараметрыВСтроку("РеквизитыОбъекта[%1].Значение", Формат(Индекс, "ЧГ=0"));
				Сообщение.Текст = ТекстОшибки;
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	ПерейтиНаСтраницуИзмененияОбъектов();
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	НазначениеКнопки = "Изменить";
	Если ВыполняетсяОбработка Тогда
		НазначениеКнопки = "Прервать";
	ИначеЕсли ОбработкаЗавершена Или Элементы.Страницы.ТекущаяСтраница = Элементы.ИзменениеОбъектов Тогда
		НазначениеКнопки = "Закрыть";
		Если ОбъектыКоторыеНеУдалосьИзменить.Количество() > 0 Тогда
			НазначениеКнопки = "Повторить";
		КонецЕсли;
	КонецЕсли;
	
	Если НазначениеКнопки = "Закрыть" Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Если НазначениеКнопки = "Прервать" Тогда
		ТекущееСостояниеИзменения.ПрерватьИзменение = Истина;
		Если Не РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
			ОтключитьОбработчикОжидания("ПроверитьВыполнениеИзменения");
			ЗавершитьИзменениеОбъектов();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если НазначениеКнопки = "Изменить" Или НазначениеКнопки = "Повторить" Тогда
		// Сброс кэша и выбор объектов с табличными частями.
		КоличествоОбъектовДляОбработки = КоличествоВыбранныхОбъектов(Истина, Истина);
	КонецЕсли;
	
	Если НазначениеКнопки = "Изменить" Тогда
		Если КоличествоОбъектовДляОбработки = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не указаны элементы для изменения'"));
			Возврат;
		КонецЕсли;
		
		Если ЕстьОшибкиВВыражениях() Тогда
			Возврат;
		КонецЕсли;
	
		Если ЕстьНастроенныеОтборы() Тогда
			ВыполнитьИзменениеПроверкаОтбораВыполнена();
		Иначе
			ТекстВопроса = НСтр("ru = 'Отбор не задан. Изменить все элементы?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьИзменениеПроверкаОтбораВыполнена", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , , НСтр("ru = 'Изменение элементов'"));
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если НазначениеКнопки = "Повторить" Тогда
		ВыполнитьИзменениеПроверкиВыполнены();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	НазадСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыИзменения(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ИзменятьВТранзакции",    Объект.ИзменятьВТранзакции);
	ПараметрыФормы.Вставить("ОбрабатыватьРекурсивно", ОбрабатыватьРекурсивно);
	ПараметрыФормы.Вставить("ПрерыватьПриОшибке",     Объект.ПрерыватьПриОшибке);
	ПараметрыФормы.Вставить("НастройкаПорции",        ТОНастройкаПорции);
	ПараметрыФормы.Вставить("ПроцентОбъектовВПорции", ТОПроцентОбъектовВПорции);
	ПараметрыФормы.Вставить("ЧислоОбъектовВПорции",   ТОЧислоОбъектовВПорции);
	ПараметрыФормы.Вставить("УчитыватьИерархию",      УчитыватьИерархию);
	ПараметрыФормы.Вставить("ПоказыватьСлужебныеРеквизиты",     Объект.ПоказыватьСлужебныеРеквизиты);
	ПараметрыФормы.Вставить("КонтекстныйВызов", КонтекстныйВызов);
	ПараметрыФормы.Вставить("РежимРазработчика", Объект.РежимРазработчика);
	ПараметрыФормы.Вставить("ОтключитьСвязиПараметровВыбора", ОтключитьСвязиПараметровВыбора);
	
	
	ОткрытьФорму(ПолноеИмяФормы("ДополнительныеПараметры"), ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМЫЕ ОБРАБОТЧИКИ

&НаКлиенте
Процедура Подключаемый_ЗначениеПриИзменении(ПолеФормы)
	ТекущиеДанные = ПолеФормы.Родитель.ТекущиеДанные;
	ТекущиеДанные.Изменять = ЗначениеЗаполнено(ТекущиеДанные.Значение);
	ОбновитьСчетчикиИзменяемыхРеквизитов(ПолеФормы.Родитель);
	СформироватьПояснениеОНастроенныхИзменениях();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииФлажка(ПолеФормы)
	ОбновитьСчетчикиИзменяемыхРеквизитов(ПолеФормы.Родитель);
	СформироватьПояснениеОНастроенныхИзменениях();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьНастройку(Команда)
	
	МестоРазмещенияКоманд = Элементы.РанееИзмененныеРеквизиты;
	ШаблонИмениКоманды = МестоРазмещенияКоманд.Имя + "НастройкаИзменений";
	ИндексКоманды = Число(Сред(Команда.Имя, СтрДлина(ШаблонИмениКоманды) + 1));
	УстановитьНастройкуИзменения(ИсторияОперацийСписок[ИндексКоманды].Значение);
	СформироватьПояснениеОНастроенныхИзменениях();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения(Элемент, Отказ)
	
	УстановитьОграниченияВыбираемыхТиповИПараметрыВыбораЗначения(Элемент);
	Если (Элемент.ТекущийЭлемент = Элементы.РеквизитыОбъектаЗначение
		Или Элемент.ТекущийЭлемент = Элементы.РеквизитыОбъектаИзменять)
		И Элемент.ТекущиеДанные.ЗаблокированныйРеквизит Тогда
			Отказ = Истина;
			ВопросПерейтиКРазблокированиюРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РеквизитыОбъектаЗначениеЗавершениеВыбора(Формула, ТекущиеДанные) Экспорт
	Если Формула = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не СтрНачинаетсяС(Формула, "=") Тогда
		Формула = "=" + Формула;
	КонецЕсли;
	ТекущиеДанные.Значение = Формула;
	ТекущиеДанные.Изменять = Истина;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Информация об автонумерации. Эта настройка должна быть всегда первой.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыОбъектаЗначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыОбъекта.Изменять");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыОбъекта.ЭтоСтандартныйРеквизит");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыОбъекта.Значение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыОбъекта.Имя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Код";
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыОбъекта.Имя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Номер";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ПояснениеПоАвтонумерации);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
	
	// Заблокированный реквизит
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыОбъектаПредставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыОбъекта.ЗаблокированныйРеквизит");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(192, 192, 192));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьИзменениеПроверкаОтбораВыполнена(РезультатВопроса = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьНастроенныеИзменения() Тогда
		ТекстВопроса = НСтр("ru = 'Изменения не настроены. Выполнить перезапись элементов без изменений?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьИзменениеПроверкиВыполнены", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , , НСтр("ru = 'Изменение элементов'"));
	Иначе
		ВыполнитьИзменениеПроверкиВыполнены();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьНастроенныеОтборы()
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ПолноеИмяФормы(Имя)
	ЧастиИмени = СтрРазделить(ИмяФормы, ".");
	ЧастиИмени[3] = Имя;
	Возврат СтрСоединить(ЧастиИмени, ".");
КонецФункции

&НаСервере
Процедура ВыполнитьДействияПриКонтекстномОткрытии()
	
	ШаблонЗаголовка = НСтр("ru = 'Изменение выделенных элементов ""%1"" (%2)'");
	
	ТипыОбъектов = Новый СписокЗначений;
	Для Каждого ПереданныйОбъект Из Параметры.МассивОбъектов Цикл
		ОбъектМетаданных = ПереданныйОбъект.Метаданные();
		ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
		Если ТипыОбъектов.НайтиПоЗначению(ИмяОбъекта) = Неопределено Тогда
			ТипыОбъектов.Добавить(ИмяОбъекта, ОбъектМетаданных.Представление());
		КонецЕсли;
	КонецЦикла;
	
	ПредставлениеТипа = Параметры.МассивОбъектов[0].Метаданные().Представление();
	Если ТипыОбъектов.Количество() > 1 Тогда
		ПредставлениеТипа = "";
		ШаблонЗаголовка = НСтр("ru = 'Изменение выделенных элементов (%2)'");
	КонецЕсли;
	
	КоличествоОбъектов = Параметры.МассивОбъектов.Количество();
	Заголовок = ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ПредставлениеТипа, КоличествоОбъектов);
	
	ЗапретРедактированияВстроен = Метаданные.НайтиПоПолномуИмени("ОбщийМодуль.ЗапретРедактированияРеквизитовОбъектовКлиент") <> Неопределено;
	СвойстваВстроены = Метаданные.НайтиПоПолномуИмени("ОбщийМодуль.УправлениеСвойствами") <> Неопределено;
	
	// При отсутствии права сохранения настроек необходимо спрятать весь функционал работы с настройками.
	Элементы.РанееИзмененныеРеквизиты.Видимость = ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
	
	Элементы.ИзменяемыеРеквизиты.Отображение = ОтображениеОбычнойГруппы.Нет;
	Элементы.ИзменяемыеРеквизиты.ОтображатьЗаголовок = Ложь;
	
	ВидыИзменяемыхОбъектов = СтрСоединить(ТипыОбъектов.ВыгрузитьЗначения(), ",");
	
	// Подгружаем историю операций с данным типом объектов.
	ЗагрузитьИсториюОпераций();
	ЗаполнитьПодменюРанееИзмененныеРеквизиты();
	
	// Объект иерархический
	УчитыватьИерархию = ОбъектМетаданныхИерархический(Параметры.МассивОбъектов[0]);
	ИерархияГрупп = ИерархияГруппИЭлементов(Параметры.МассивОбъектов[0]);
	
	ВыбранныеОбъектыВКонтексте.ЗагрузитьЗначения(Параметры.МассивОбъектов);
	ИнициализироватьКомпоновщикНастроек();
	
	ЗагрузитьМетаданныеОбъекта();
	
	Если ТипыОбъектов.Количество() > 0 Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ТипыОбъектов[0].Значение);
		
		Если ЗапретРедактированияВстроен И РеквизитыОбъекта.НайтиСтроки(Новый Структура("ЗаблокированныйРеквизит", Истина)).Количество() > 0 Тогда
			Если МетаданныеОбъекта.Формы.Найти("РазблокированиеРеквизитов") = Неопределено Тогда
				ЕстьФормаРазблокированияРеквизитов = Ложь;
			Иначе
				ЕстьФормаРазблокированияРеквизитов = Истина;
				ПолноеИмяФормыРаботыСБлокируемымиРеквизитами = ТипыОбъектов[0].Значение + ".Форма.РазблокированиеРеквизитов";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеИзменяемыхОбъектов = ПредставлениеИзменяемыхОбъектов();
	ОбновитьНадписьКоличествоВыбранных();
	
	Элементы.ПредставлениеИзменяемыхОбъектов.ТолькоПросмотр = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьИзменениеПроверкиВыполнены(РезультатВопроса = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьКнопкиНаВремяИзменения(Истина);
	ПерейтиНаСтраницуИзмененияОбъектов();
	ОбъектыКоторыеНеУдалосьИзменить.Очистить();
	
	ПодключитьОбработчикОжидания("ИзменитьОбъекты", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Функция ЕстьНастроенныеИзменения()
	Возврат ИзменяемыеРеквизиты().Количество() > 0 Или ИзменяемыеТабличныеЧасти().Количество() > 0;
КонецФункции

&НаСервере
Процедура ДобавитьИзменениеВИсторию(СтруктураИзменения, ПредставлениеИзменения)
	
	// Настройки истории изменений это массив структур с ключами:
	// Изменение - массив со структурой изменения.
	// Представление - представление настройки пользователю.
	Настройки = ХранилищеОбщихНастроекЗагрузить(
		"ГрупповоеИзменениеОбъектов", 
		"ИсторияИзменений/" + ВидыИзменяемыхОбъектов);
	
	Если Настройки = Неопределено Тогда
		Настройки = Новый Массив;
	Иначе
		Для Индекс = 0 По Настройки.ВГраница() Цикл
			Если Настройки.Получить(Индекс).Представление = ПредставлениеИзменения Тогда
				Настройки.Удалить(Индекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Настройки.Вставить(0, Новый Структура("Изменение, Представление", СтруктураИзменения, ПредставлениеИзменения));
	
	Если Настройки.Количество() > 20 Тогда
		Настройки.Удалить(19);
	КонецЕсли;
	
	ХранилищеОбщихНастроекСохранить("ГрупповоеИзменениеОбъектов", "ИсторияИзменений/" + ВидыИзменяемыхОбъектов, Настройки);
	
	ЗагрузитьИсториюОпераций();
	ЗаполнитьПодменюРанееИзмененныеРеквизиты();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИсториюОпераций()
	
	ИсторияОперацийСписок.Очистить();
	
	ИсторияИзменений = ХранилищеОбщихНастроекЗагрузить("ГрупповоеИзменениеОбъектов", "ИсторияИзменений/" + ВидыИзменяемыхОбъектов);
	Если ИсторияИзменений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Настройка Из ИсторияИзменений Цикл
		ИсторияОперацийСписок.Добавить(Настройка.Изменение, Настройка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерейтиКРазблокированиюРеквизитов()
	
	ТекстВопроса = НСтр("ru = 'Реквизит заблокирован, перейти к разблокированию реквизитов?'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПерейтиКРазблокированиюРеквизитовЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, НСтр("ru = 'Реквизит заблокирован'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерейтиКРазблокированиюРеквизитовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РазрешитьРедактированиеРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСервер(ПараметрыВыбора, ПараметрыВыбораМассив)
	
		Для Индекс = 1 По СтрЧислоСтрок(ПараметрыВыбора) Цикл
			
			ПараметрыВыбораСтрока = СтрПолучитьСтроку(ПараметрыВыбора, Индекс);
			
			ПараметрыВыбораМассивСтрок = СтрРазделить(ПараметрыВыбораСтрока, ";");
			ИмяПоляОтбора = СокрЛП(ПараметрыВыбораМассивСтрок[0]);
			ИмяТипа       = СокрЛП(ПараметрыВыбораМассивСтрок[1]);
			XMLСтрока     = СокрЛП(ПараметрыВыбораМассивСтрок[2]);
			
			Если Тип(ИмяТипа) = Тип("ФиксированныйМассив") Тогда
				
				Массив = Новый Массив;
				
				XMLСтрокаМассив = СтрРазделить(XMLСтрока, "#");
				
				Для Каждого Элемент Из XMLСтрокаМассив Цикл
					
					ЭлементМассив = СтрРазделить(Элемент, "*");
					
					ЗначениеЭлемента = XMLЗначение(Тип(ЭлементМассив[0]), ЭлементМассив[1]);
					
					Массив.Добавить(ЗначениеЭлемента);
					
				КонецЦикла;
				
				Значение = Новый ФиксированныйМассив(Массив);
				
			Иначе
				Значение = XMLЗначение(Тип(ИмяТипа), XMLСтрока);
			КонецЕсли;
			
			ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора(ИмяПоляОтбора, Значение));
		
		КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиОбработки(ПолноеИмя, ИзменятьВТранзакции, ПрерыватьПриОшибке,
			ТОНастройкаПорции, ТОПроцентОбъектовВПорции, ТОЧислоОбъектовВПорции, ОбрабатыватьРекурсивно)
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("ИзменятьВТранзакции",		ИзменятьВТранзакции);
	СтруктураНастроек.Вставить("ПрерыватьПриОшибке",		ПрерыватьПриОшибке);
	СтруктураНастроек.Вставить("ТОНастройкаПорции",			ТОНастройкаПорции);
	СтруктураНастроек.Вставить("ТОПроцентОбъектовВПорции",	ТОПроцентОбъектовВПорции);
	СтруктураНастроек.Вставить("ТОЧислоОбъектовВПорции",	ТОЧислоОбъектовВПорции);
	СтруктураНастроек.Вставить("ОбрабатыватьРекурсивно",	ОбрабатыватьРекурсивно);
	
	ХранилищеОбщихНастроекСохранить("Обработка.ГрупповоеИзменениеОбъектов", ПолноеИмя, СтруктураНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиОбработки()
	
	Объект.ИзменятьВТранзакции = Истина;
	Объект.ПрерыватьПриОшибке  = Истина;
	ТОНастройкаПорции          = 1;
	ТОПроцентОбъектовВПорции   = 100;
	ТОЧислоОбъектовВПорции     = 1;
	ОбрабатыватьРекурсивно     = Ложь;
	ПоказыватьСлужебныеРеквизиты = Ложь;
	
	СтруктураНастроек = ХранилищеОбщихНастроекЗагрузить(
		"Обработка.ГрупповоеИзменениеОбъектов",
		ВидыИзменяемыхОбъектов);
	
	Если СтруктураНастроек <> Неопределено Тогда
		Объект.ИзменятьВТранзакции = СтруктураНастроек.ИзменятьВТранзакции;
		Объект.ПрерыватьПриОшибке  = СтруктураНастроек.ПрерыватьПриОшибке;
		ОбрабатыватьРекурсивно     = СтруктураНастроек.ОбрабатыватьРекурсивно;
		Если ПравоДоступа("АдминистрированиеДанных", Метаданные) И СтруктураНастроек.Свойство("ПоказыватьСлужебныеРеквизиты") Тогда
			ПоказыватьСлужебныеРеквизиты = СтруктураНастроек.ПоказыватьСлужебныеРеквизиты;
		Иначе
			ПоказыватьСлужебныеРеквизиты = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеРеквизитов()
	
	ЗаблокированныеРеквизитыСтроки = РеквизитыОбъекта.НайтиСтроки(
		Новый Структура("ЗаблокированныйРеквизит", Истина));
	
	Если ЕстьФормаРазблокированияРеквизитов Тогда
		
		ЗаблокированныеРеквизиты = Новый Массив;
		
		Для Каждого ОписаниеОперацииСтрока Из ЗаблокированныеРеквизитыСтроки Цикл
			ЗаблокированныеРеквизиты.Добавить(ОписаниеОперацииСтрока.Имя);
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ЗаблокированныеРеквизиты", ЗаблокированныеРеквизиты);
	
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриРазблокированииРеквизитов", ЭтотОбъект);
		ОткрытьФорму(ПолноеИмяФормыРаботыСБлокируемымиРеквизитами, ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
		
	Иначе
		
		МассивСсылок = Новый Массив;
		ЗаполнитьМассивИзменяемыхОбъектов(МассивСсылок);
		
		СинонимыРеквизитов = Новый Массив;
		
		Для Каждого ОписаниеОперацииСтрока Из ЗаблокированныеРеквизитыСтроки Цикл
			СинонимыРеквизитов.Добавить(ОписаниеОперацииСтрока.Представление);
		КонецЦикла;
		
		Если ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
			ЗапретРедактированияРеквизитовОбъектовКлиентМодуль = ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектовКлиент");
			Если ЗапретРедактированияРеквизитовОбъектовКлиентМодуль <> Неопределено Тогда
				ЗапретРедактированияРеквизитовОбъектовКлиентМодуль.ПроверитьСсылкиНаОбъект(
					Новый ОписаниеОповещения(
						"РазрешитьРедактированиеРеквизитовЗавершение",
						ЭтотОбъект,
						ЗаблокированныеРеквизитыСтроки),
					МассивСсылок,
					СинонимыРеквизитов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеРеквизитовЗавершение(Результат, ЗаблокированныеРеквизитыСтроки) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеОперацииСтрока Из ЗаблокированныеРеквизитыСтроки Цикл
		ОписаниеОперацииСтрока.ЗаблокированныйРеквизит = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуИзмененияОбъектов()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаИзменений Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ИзменениеОбъектов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКнопкиНаВремяИзменения(НачалоИзменения)
	
	ВыполняетсяОбработка = НачалоИзменения;

	Элементы.ФормаИзменить.Доступность = Истина;
	
	Если НачалоИзменения Тогда
		Элементы.ФормаИзменить.Заголовок = НСтр("ru = 'Прервать'");
	Иначе
		Если ОбъектыКоторыеНеУдалосьИзменить.Количество() > 0 Тогда
			Элементы.ФормаИзменить.Заголовок = НСтр("ru = 'Повторить изменение'");
		Иначе
			Элементы.ФормаИзменить.Заголовок = НСтр("ru = 'Закрыть'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОбъекты()
	
	ОчиститьСообщения();
	ТекущееСостояниеИзменения = Новый Структура;
	КоличествоОбъектовДляОбработки = КоличествоВыбранныхОбъектов();
	
	Если Объект.ИзменятьВТранзакции Тогда
		
		Если ТОНастройкаПорции = 1 Тогда // обработка одним вызовом
			
			ПоказатьОповещениеПользователя(НСтр("ru = 'Изменение выделенных элементов'"), ,НСтр("ru = 'Пожалуйста подождите, обработка может занять некоторое время...'"));
			ПоказыватьПроцентОбработанных = Ложь;
			
			РазмерПорции = КоличествоОбъектовДляОбработки;
			
		Иначе
			
			ПоказыватьПроцентОбработанных = Истина;
			
			Если ТОНастройкаПорции = 2 Тогда // порциями по числу объектов
				РазмерПорции = ?(ТОЧислоОбъектовВПорции < КоличествоОбъектовДляОбработки, 
									ТОЧислоОбъектовВПорции, КоличествоОбъектовДляОбработки);
			Иначе // Порциями по проценту объектов.
				РазмерПорции = Окр(КоличествоОбъектовДляОбработки * ТОПроцентОбъектовВПорции / 100);
				Если РазмерПорции = 0 Тогда
					РазмерПорции = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		Если КоличествоОбъектовДляОбработки >= НетранзакционнаяПорцияГраницаПерехода() Тогда
			// Число объектов - постоянная величина.
			РазмерПорции = НетранзакционнаяПорцияПолученияДанныхОбъектов();
		Иначе
			// Число объектов - переменная величина, процент от общего числа.
			РазмерПорции = Окр(КоличествоОбъектовДляОбработки * НетранзакционнаяПорцияПолученияДанныхПроцент() / 100);
			Если РазмерПорции = 0 Тогда
				РазмерПорции = 1;
			КонецЕсли;
		КонецЕсли;
		
		Состояние(НСтр("ru = 'Обрабатываются элементы...'"), 0, НСтр("ru = 'Изменение выделенных элементов'"));
		
		ПоказыватьПроцентОбработанных = Истина;
	КонецЕсли;
	
	ТекущееСостояниеИзменения.Вставить("ЕстьЭлементыДляОбработки", Истина);
	// Позиция последнего обработанного элемента. 1 - первый элемент.
	ТекущееСостояниеИзменения.Вставить("ТекущаяПозиция", 0);
	ТекущееСостояниеИзменения.Вставить("КоличествоОшибок", 0);			// Инициализируем счетчик ошибок.
	ТекущееСостояниеИзменения.Вставить("КоличествоИзмененных", 0);		// Инициализируем счетчик измененных.
	ТекущееСостояниеИзменения.Вставить("ОстанавливатьИзменениеПриОшибке", Объект.ПрерыватьПриОшибке);
	ТекущееСостояниеИзменения.Вставить("КоличествоОбъектовДляОбработки", КоличествоОбъектовДляОбработки);
	ТекущееСостояниеИзменения.Вставить("РазмерПорции", РазмерПорции);
	ТекущееСостояниеИзменения.Вставить("ПоказыватьПроцентОбработанных", ПоказыватьПроцентОбработанных);
	ТекущееСостояниеИзменения.Вставить("ПрерватьИзменение", Ложь);
	
	ПодключитьОбработчикОжидания("ИзменитьПорциюОбъектов", 0.1, Истина);
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.ОжиданиеОбработки;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорциюОбъектов()
	
	// Изменяем порцию на сервере
	РезультатИзменения = ИзменитьНаСервере(ТекущееСостояниеИзменения.ОстанавливатьИзменениеПриОшибке);
		
	Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		ОбработатьРезультатИзменения(ПолучитьИзВременногоХранилища(РезультатФоновогоЗадания.АдресХранилища));
	Иначе
		МодульДлительныеОперацииКлиент = ОбщийМодуль("ДлительныеОперацииКлиент");
		МодульДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеИзменения", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнениеИзменения()
	
	Попытка
		РезультатФоновогоЗадания.ЗаданиеВыполнено = ЗаданиеВыполнено(РезультатФоновогоЗадания.ИдентификаторЗадания);
	Исключение
		ПерейтиНаСтраницуИзмененияОбъектов();
		ВызватьИсключение;
	КонецПопытки;
	
	Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		ОбработатьРезультатИзменения(ПолучитьИзВременногоХранилища(РезультатФоновогоЗадания.АдресХранилища));
	Иначе
		МодульДлительныеОперацииКлиент = ОбщийМодуль("ДлительныеОперацииКлиент");
		МодульДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеИзменения", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатИзменения(РезультатИзменения = Неопределено, ПродолжитьОбработку = Неопределено)
	Перем КоличествоОшибок, КоличествоИзмененных;
	
	Если ПродолжитьОбработку = Неопределено Тогда
		ПродолжитьОбработку = Истина;
	КонецЕсли;
	
	Пока ПродолжитьОбработку Цикл
		// Переносим информацию по обработанным объектам в таблицу.
		ЗаполнитьСостояниеОбработанных(РезультатИзменения, КоличествоОшибок, КоличествоИзмененных);
		
		ТекущееСостояниеИзменения.КоличествоОшибок = КоличествоОшибок + ТекущееСостояниеИзменения.КоличествоОшибок;
		ТекущееСостояниеИзменения.КоличествоИзмененных = КоличествоИзмененных + ТекущееСостояниеИзменения.КоличествоИзмененных;
		
		Если НЕ (ТекущееСостояниеИзменения.ОстанавливатьИзменениеПриОшибке И РезультатИзменения.ЕстьОшибки) Тогда
			Прервать;
		КонецЕсли;
		
		// При наличии ошибок в транзакции - откатываем всю транзакцию.
		Если Объект.ИзменятьВТранзакции Тогда
			ТекстПредупреждения = НСтр("ru = 'При изменении элементов обнаружены ошибки - изменения отменены.'");
			ПодключитьОбработчикОжидания("ЗавершитьИзменениеОбъектов", 0.1, Истина);
			Возврат; // Досрочный выход из цикла и процедуры.
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru = 'При изменении элементов (группы элементов) возникли ошибки.
			|Прервать изменение элементов и перейти к просмотру ошибок?
			|'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Прервать, НСтр("ru = 'Прервать'"));
		Кнопки.Добавить(КодВозвратаДиалога.Пропустить, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Больше не спрашивать'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатИзмененияОтветПолучен", ЭтотОбъект, РезультатИзменения);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Прервать, НСтр("ru = 'Ошибки при изменении элементов'"));
		Возврат;
	КонецЦикла;
	
	ТекущееСостояниеИзменения.ТекущаяПозиция = ТекущееСостояниеИзменения.ТекущаяПозиция + ТекущееСостояниеИзменения.РазмерПорции;
	
	Если ТекущееСостояниеИзменения.ПоказыватьПроцентОбработанных Тогда
		// Вычисляем текущий процент обработанных объектов.
		ТекущийПроцент = Окр(ТекущееСостояниеИзменения.ТекущаяПозиция / ТекущееСостояниеИзменения.КоличествоОбъектовДляОбработки * 100);
		Состояние(НСтр("ru = 'Обрабатываются элементы...'"), ТекущийПроцент, НСтр("ru = 'Изменение выделенных элементов'"));
	КонецЕсли;
	
	ЕстьЭлементыДляОбработки = ?(ТекущееСостояниеИзменения.ТекущаяПозиция < ТекущееСостояниеИзменения.КоличествоОбъектовДляОбработки, Истина, Ложь);
	
	Если ЕстьЭлементыДляОбработки И НЕ ТекущееСостояниеИзменения.ПрерватьИзменение Тогда
		ПодключитьОбработчикОжидания("ИзменитьПорциюОбъектов", 0.1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("ЗавершитьИзменениеОбъектов", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатИзмененияОтветПолучен(РезультатВопроса, РезультатИзменения) Экспорт
	
	Если РезультатВопроса = Неопределено Или РезультатВопроса = КодВозвратаДиалога.Прервать Тогда
		ПодключитьОбработчикОжидания("ЗавершитьИзменениеОбъектов", 0.1, Истина);
		Возврат;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ТекущееСостояниеИзменения.ОстанавливатьИзменениеПриОшибке = Ложь;
	КонецЕсли;
	
	ОбработатьРезультатИзменения(РезультатИзменения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИзменениеОбъектов()
	
	УстановитьКнопкиНаВремяИзменения(Ложь);
	ЗавершающиеДействияПриИзмененииСервер();
	
	Для Каждого Тип Из ТипыИзменяемыхОбъектов() Цикл
		ОповеститьОбИзменении(Тип);
	КонецЦикла;
	
	Оповестить("ЗавершениеГрупповогоИзмененияОбъектов");
	
	ОбработкаЗавершена = ТекущееСостояниеИзменения.КоличествоИзмененных = ТекущееСостояниеИзменения.КоличествоОбъектовДляОбработки;
	Если ОбработкаЗавершена Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Изменение реквизитов элементов'"), , 
			ПодставитьПараметрыВСтроку(НСтр("ru = 'Изменены элементы (%1).'"), ТекущееСостояниеИзменения.КоличествоИзмененных));
		ПерейтиНаСтраницуВсеГотово();
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаОбъектыКоторыеНеУдалосьИзменить.Видимость = ОбъектыКоторыеНеУдалосьИзменить.Количество() > 0;
	
	Если ОбработкаЗавершена Тогда
		ШаблонСообщения = НСтр("ru = 'Изменения выполнены во всех выбранных элементах (%2).'");
	Иначе
		Если Объект.ИзменятьВТранзакции Или ТекущееСостояниеИзменения.КоличествоИзмененных = 0 Тогда
			ШаблонСообщения = НСтр("ru = 'Изменения не выполнены.'");
		Иначе
			ШаблонСообщения = НСтр("ru = 'Изменения выполнены частично.
										|Изменено: %1; Не удалось изменить: %3'");
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ИзменятьВТранзакции И Не ОбработкаЗавершена Тогда
		КоличествоПропущенных = ТекущееСостояниеИзменения.КоличествоОбъектовДляОбработки - ТекущееСостояниеИзменения.КоличествоОшибок;
		Если КоличествоПропущенных > 0 И Не ТекущееСостояниеИзменения.ПрерватьИзменение Тогда
			СтрокаТаблицы = ОбъектыКоторыеНеУдалосьИзменить.Добавить();
			СтрокаТаблицы.Объект = ПодставитьПараметрыВСтроку(НСтр("ru = '... и другие элементы (%1)'"), КоличествоПропущенных);
			СтрокаТаблицы.Причина = НСтр("ru = 'Пропущены, так как не были изменены один или более элементов.'");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.НадписьРезультатыОбработки.Заголовок = ПодставитьПараметрыВСтроку(
		ШаблонСообщения,
		ТекущееСостояниеИзменения.КоличествоИзмененных,
		ТекущееСостояниеИзменения.КоличествоОбъектовДляОбработки,
		ТекущееСостояниеИзменения.КоличествоОшибок);
		
	Элементы.ФормаНазад.Видимость = Истина;
	
	ТекущееСостояниеИзменения = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура НазадСервер()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ИзменениеОбъектов 
		Или Элементы.Страницы.ТекущаяСтраница = Элементы.ВсеГотово Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаИзменений;
	КонецЕсли;
	
	ОбработкаЗавершена = Ложь;
	ОбъектыКоторыеНеУдалосьИзменить.Очистить();
	Элементы.ФормаНазад.Видимость = Ложь;
	Элементы.ФормаИзменить.Заголовок = НСтр("ru = 'Изменить реквизиты'");
	
	ОбновитьНадписиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиНаСтраницуВсеГотово()
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.ВсеГотово;
	Элементы.НадписьУспешноЗавершено.Заголовок = ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Реквизиты выбранных элементов были изменены.
			|Всего изменено элементов: %1'"), ТекущееСостояниеИзменения.КоличествоИзмененных);
	Элементы.ФормаИзменить.Заголовок = НСтр("ru = 'Готово'");
	Элементы.ФормаНазад.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Функция ТипыИзменяемыхОбъектов()
	Результат = Новый Массив;
	Для Каждого ВидОбъектов Из СтрРазделить(ВидыИзменяемыхОбъектов, ",", Ложь) Цикл
		МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ВидОбъектов);
		Результат.Добавить(ТипЗнч(МенеджерОбъекта.ПустаяСсылка()));
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗавершающиеДействияПриИзмененииСервер()
	Если РезультатФоновогоЗадания.Свойство("ИдентификаторЗадания") Тогда
		МодульДлительныеОперации = ОбщийМодуль("ДлительныеОперации");
		МодульДлительныеОперации.ОтменитьВыполнениеЗадания(РезультатФоновогоЗадания.ИдентификаторЗадания);
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.ИзменениеОбъектов;
	СохранитьТекущиеНастройкиИзменения();
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущиеНастройкиИзменения()
	
	ТекущиеНастройки = ТекущиеНастройкиИзменения();
	Если ТекущиеНастройки <> Неопределено Тогда
		ДобавитьИзменениеВИсторию(ТекущиеНастройки.ОписаниеИзменения, ТекущиеНастройки.ПредставлениеИзменения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекущиеНастройкиИзменения()
	
	ОписаниеИзменения = Новый Структура;
	КоллекцияОпераций = РеквизитыОбъекта.НайтиСтроки(Новый Структура("Изменять", Истина));
	
	ШаблонПредставления = "[Поле] = <Значение>";
	ПредставлениеИзменения = "";
	
	НастройкаИзмененияРеквизитов = Новый Массив;
	Для Каждого ОписаниеОперации Из КоллекцияОпераций Цикл
		СтруктураИзменения = Новый Структура;
		СтруктураИзменения.Вставить("ВидОперации", ОписаниеОперации.ВидОперации);
		СтруктураИзменения.Вставить("ИмяРеквизита", ОписаниеОперации.Имя);
		СтруктураИзменения.Вставить("Свойство", ОписаниеОперации.Свойство);
		СтруктураИзменения.Вставить("Значение", ОписаниеОперации.Значение);
		НастройкаИзмененияРеквизитов.Добавить(СтруктураИзменения);
		
		ЗначениеСтрокой = СокрЛП(Строка(ОписаниеОперации.Значение));
		Если ПустаяСтрока(ЗначениеСтрокой) Тогда
			ЗначениеСтрокой = """""";
		КонецЕсли;
		Изменение = СтрЗаменить(ШаблонПредставления, "[Поле]", СокрЛП(Строка(ОписаниеОперации.Представление)));
		Изменение = СтрЗаменить(Изменение, "<Значение>", ЗначениеСтрокой);
		
		Если Не ПустаяСтрока(ПредставлениеИзменения) Тогда
			ПредставлениеИзменения = ПредставлениеИзменения + "; ";
		КонецЕсли;
		ПредставлениеИзменения = ПредставлениеИзменения + Изменение;
	КонецЦикла;
	ОписаниеИзменения.Вставить("Реквизиты", НастройкаИзмененияРеквизитов);
	
	НастройкаИзмененияТабличныхЧастей = Новый Структура;
	Для Каждого ТабличнаяЧасть Из ИзменяемыеТабличныеЧасти() Цикл
		Если Не ПустаяСтрока(ПредставлениеИзменения) Тогда
			ПредставлениеИзменения = ПредставлениеИзменения + "; ";
		КонецЕсли;
		ПредставлениеИзменения = ПредставлениеИзменения + ТабличнаяЧасть.Ключ + " (";
		НастройкаИзмененияРеквизитов = Новый Массив;
		СтрокаРеквизитов = "";
		Для Каждого Реквизит Из ТабличнаяЧасть.Значение Цикл
			СтруктураИзменения = Новый Структура("Имя,Значение");
			ЗаполнитьЗначенияСвойств(СтруктураИзменения, Реквизит);
			НастройкаИзмененияРеквизитов.Добавить(СтруктураИзменения);
			
			Изменение = СтрЗаменить(ШаблонПредставления, "[Поле]", СокрЛП(Строка(Реквизит.Представление)));
			Изменение = СтрЗаменить(Изменение, "<Значение>", СокрЛП(Строка(Реквизит.Значение)));
			
			Если Не ПустаяСтрока(СтрокаРеквизитов) Тогда
				СтрокаРеквизитов = СтрокаРеквизитов + "; ";
			КонецЕсли;
			СтрокаРеквизитов = СтрокаРеквизитов + Изменение;
		КонецЦикла;
		ПредставлениеИзменения = ПредставлениеИзменения + СтрокаРеквизитов + ")";
		НастройкаИзмененияТабличныхЧастей.Вставить(ТабличнаяЧасть.Ключ, НастройкаИзмененияРеквизитов);
	КонецЦикла;
	
	ОписаниеИзменения.Вставить("ТабличныеЧасти", НастройкаИзмененияТабличныхЧастей);
	
	Результат = Неопределено;
	Если ЗначениеЗаполнено(ПредставлениеИзменения) Тогда
		Результат = Новый Структура;
		Результат.Вставить("ОписаниеИзменения", ОписаниеИзменения);
		Результат.Вставить("ПредставлениеИзменения", ПредставлениеИзменения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСостояниеОбработанных(РезультатИзменения, КоличествоОшибок, КоличествоИзмененных)
	
	КоличествоОшибок = 0;
	КоличествоИзмененных = 0;
	
	Для Каждого СостояниеОбработанногоОбъекта Из РезультатИзменения.СостояниеОбработки Цикл
		НомерСтроки = -1;
		Если Не ПустаяСтрока(СостояниеОбработанногоОбъекта.Значение.КодОшибки) Тогда
			КоличествоОшибок = КоличествоОшибок + 1;
			
			ЗаписьОбОшибке = ОбъектыКоторыеНеУдалосьИзменить.Добавить();
			ЗаписьОбОшибке.Объект = СостояниеОбработанногоОбъекта.Ключ;
			ЗаписьОбОшибке.Причина = СостояниеОбработанногоОбъекта.Значение.СообщениеОбОшибке;
		Иначе
			КоличествоИзмененных = КоличествоИзмененных + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СледующаяПорцияОбъектовДляИзменения()
	
	НачалоВыборки = ТекущееСостояниеИзменения.ТекущаяПозиция;
	КонецВыборки = ТекущееСостояниеИзменения.ТекущаяПозиция + ТекущееСостояниеИзменения.РазмерПорции - 1;
	
	ВыбранныеОбъекты = ВыбранныеОбъекты();
	Если КонецВыборки > ВыбранныеОбъекты.Строки.Количество() - 1 Тогда
		КонецВыборки = ВыбранныеОбъекты.Строки.Количество() - 1;
	КонецЕсли;
	
	Результат = Новый ДеревоЗначений;
	Для Каждого Колонка Из ВыбранныеОбъекты.Колонки Цикл
		Результат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	Для Индекс = НачалоВыборки По КонецВыборки Цикл
		ОписаниеОбъекта = Результат.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ОписаниеОбъекта, ВыбранныеОбъекты.Строки[Индекс]);
		Для Каждого СтрокаОбъекта Из ВыбранныеОбъекты.Строки[Индекс].Строки Цикл
			ЗаполнитьЗначенияСвойств(ОписаниеОбъекта.Строки.Добавить(), СтрокаОбъекта);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИзменяемыеРеквизиты(ИмяТабличнойЧасти = "РеквизитыОбъекта")
	ТаблицаРеквизитов = ЭтотОбъект[ИмяТабличнойЧасти];
	Возврат ТаблицаЗначенийВМассив(ТаблицаРеквизитов.Выгрузить(Новый Структура("Изменять", Истина)));
КонецФункции

&НаСервере
Функция ИзменяемыеТабличныеЧасти()
	Результат = Новый Структура;
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиОбъекта Цикл
		ИзменяемыеРеквизиты = ИзменяемыеРеквизиты(ТабличнаяЧасть.Значение);
		Если ИзменяемыеРеквизиты.Количество() > 0 Тогда
			ИмяТабличнойЧасти = Сред(ТабличнаяЧасть.Значение, СтрДлина("ТабличнаяЧасть") + 1);
			Результат.Вставить(ИмяТабличнойЧасти, ИзменяемыеРеквизиты);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Функция ИзменитьНаСервере(Знач ОстанавливатьИзменениеПриОшибке)
	
	ОбъектыДляОбработки = СледующаяПорцияОбъектовДляИзменения();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбрабатываемыеОбъекты", Новый ХранилищеЗначения(ОбъектыДляОбработки));
	СтруктураПараметров.Вставить("ОстанавливатьИзменениеПриОшибке", ОстанавливатьИзменениеПриОшибке);
	СтруктураПараметров.Вставить("ИзменятьВТранзакции", ОбработкаОбъект.ИзменятьВТранзакции);
	СтруктураПараметров.Вставить("ПрерыватьПриОшибке", ОбработкаОбъект.ПрерыватьПриОшибке);
	СтруктураПараметров.Вставить("ИспользуютсяДопРеквизиты", ОбработкаОбъект.ИспользуютсяДопРеквизиты);
	СтруктураПараметров.Вставить("ИспользуютсяДопСведения", ОбработкаОбъект.ИспользуютсяДопСведения);
	СтруктураПараметров.Вставить("ИзменяемыеРеквизиты", ИзменяемыеРеквизиты());
	СтруктураПараметров.Вставить("ДоступныеРеквизиты", ТаблицаЗначенийВМассив(РеквизитыОбъекта.Выгрузить(, "Имя,Представление,ВидОперации,Свойство")));
	СтруктураПараметров.Вставить("ИзменяемыеТабличныеЧасти", ИзменяемыеТабличныеЧасти());
	СтруктураПараметров.Вставить("ОбъектыДляИзменения", Новый ХранилищеЗначения(ВыбранныеОбъекты()));
	СтруктураПараметров.Вставить("РежимРазработчика", ОбработкаОбъект.РежимРазработчика);
	
	ЭтоВнешняяОбработка = Не Метаданные.Обработки.Содержит(ОбработкаОбъект.Метаданные());
	Если Не Объект.ИзменятьВТранзакции Или Не ПодсистемаСуществует("СтандартныеПодсистемы.БазоваяФункциональность") Тогда
			АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			ОбработкаОбъект.ВыполнитьИзменениеОбъектов(СтруктураПараметров, АдресХранилища);
			РезультатФоновогоЗадания = Новый Структура("ЗаданиеВыполнено, АдресХранилища", Истина, АдресХранилища);
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Групповое изменение элементов'");
		
		ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("ИмяОбработки", ИмяОбработки());
		ПараметрыЗадания.Вставить("ИмяМетода", "ВыполнитьИзменениеОбъектов");
		ПараметрыЗадания.Вставить("ПараметрыВыполнения", СтруктураПараметров);
		ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка", ЭтоВнешняяОбработка);
		ПараметрыЗадания.Вставить("ДополнительнаяОбработкаСсылка", ДополнительнаяОбработкаСсылка);
		
		МодульДлительныеОперации = ОбщийМодуль("ДлительныеОперации");
		РезультатФоновогоЗадания = МодульДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			ВыполняемыйМетод,
			ПараметрыЗадания, 
			НаименованиеЗадания);
	КонецЕсли;
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаСервере
Функция ИмяОбработки()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ЭтоВнешняяОбработка = Не Метаданные.Обработки.Содержит(ОбработкаОбъект.Метаданные());
	ЧастиИмени = СтрРазделить(ИмяФормы, ".");
	Если ЭтоВнешняяОбработка Тогда
		Возврат ОбработкаОбъект.ИспользуемоеИмяФайла;
	Иначе
		Возврат ЧастиИмени[1];
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьМассивИзменяемыхОбъектов(МассивСсылок)
	
	Для Каждого ВыбранныйОбъект Из ВыбранныеОбъекты().Строки Цикл
		МассивСсылок.Добавить(ВыбранныйОбъект.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеПометкиИзменения(КоллекцияЭлементов, Значение)
	
	Для Каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
		ЭлементКоллекции.Изменять = Значение;
		УстановитьЗначениеПометкиИзменения(ЭлементКоллекции.ПолучитьЭлементы(), Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИерархический(СсылкаПервого)
	
	ВидОбъектаПоСсылке = ВидОбъектаПоСсылке(СсылкаПервого);
	
	Если ((ВидОбъектаПоСсылке = "Справочник" ИЛИ ВидОбъектаПоСсылке = "ПланВидовХарактеристик") И СсылкаПервого.Метаданные().Иерархический)
	 ИЛИ (ВидОбъектаПоСсылке = "ПланСчетов") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИерархияГруппИЭлементов(СсылкаПервого)
	
	ВидОбъектаПоСсылке = ВидОбъектаПоСсылке(СсылкаПервого);
	
	Возврат (ВидОбъектаПоСсылке = "Справочник" И СсылкаПервого.Метаданные().Иерархический
		И СсылкаПервого.Метаданные().ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов)
		Или (ВидОбъектаПоСсылке = "ПланВидовХарактеристик" И СсылкаПервого.Метаданные().Иерархический);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НетранзакционнаяПорцияГраницаПерехода()
	
	Возврат 100; // Если в списке изменяемых более 100 объектов
				 // изменение происходит для постоянного количества объектов
				 // см . НетранзакционнаяПорцияПолученияДанныхОбъектов().
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НетранзакционнаяПорцияПолученияДанныхПроцент()
	
	Возврат 10;	// Если в списке изменяемых менее 100 объектов
				// изменение происходит порциями по проценту объектов от общей массы.
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НетранзакционнаяПорцияПолученияДанныхОбъектов()
	
	Возврат 10;	// Если в списке изменяемых более 100 объектов
				// изменение происходит порциями по постоянному
				// числу объектов.
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	МодульДлительныеОперации = ОбщийМодуль("ДлительныеОперации");
	Возврат МодульДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура СброситьНастройкиИзменения()
	Для Каждого Реквизит Из РеквизитыОбъекта Цикл
		Реквизит.Значение = Неопределено;
		Реквизит.Изменять = Ложь;
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиОбъекта Цикл
		Для Каждого Реквизит Из ЭтотОбъект[ТабличнаяЧасть.Значение] Цикл
			Реквизит.Значение = Неопределено;
			Реквизит.Изменять = Ложь;
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	МодульДлительныеОперации = ОбщийМодуль("ДлительныеОперации");
	МодульДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОтбораНажатие(Элемент)
	ПерейтиКНастройкеОтбора();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыВыбранныхОбъектов(Настройки, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		ОбновитьНадписи();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВыбранныеОбъекты(ОбновитьСписок = Ложь, ВключитьТабличныеЧастиВВыборку = Ложь, ТекстСообщенияОбОшибке = "")
	
	Если Не ОбновитьСписок И Не ПустаяСтрока(АдресСпискаВыбранных) Тогда
		Возврат ПолучитьИзВременногоХранилища(АдресСпискаВыбранных);
	КонецЕсли;
		
	Результат = Новый ДеревоЗначений;
	
	Если Не ПустаяСтрока(ВидыИзменяемыхОбъектов) Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ТекстЗапроса = ОбработкаОбъект.ТекстЗапроса(ВидыИзменяемыхОбъектов);
		СхемаКомпоновкиДанных = СхемаКомпоновкиДанных(ТекстЗапроса);
		
		КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
		АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
		КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(КомпоновщикНастроек.Настройки);
		Если ВключитьТабличныеЧастиВВыборку Тогда
			УстановитьНастройкуСтруктурыВыводаРезультата(КомпоновщикНастроекКомпоновкиДанных.Настройки, ВключитьТабличныеЧастиВВыборку);
		КонецЕсли;
		
		Если ОбъектыКоторыеНеУдалосьИзменить.Количество() > 0 И Не Объект.ИзменятьВТранзакции Тогда // повтор для неизмененных
			ЭлементОтбора = КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.ПравоеЗначение = Новый СписокЗначений;
			ЭлементОтбора.ПравоеЗначение.ЗагрузитьЗначения(ОбъектыКоторыеНеУдалосьИзменить.Выгрузить().ВыгрузитьКолонку("Объект"));
		КонецЕсли;
		
		Результат = Новый ДеревоЗначений;
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		Попытка
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
				КомпоновщикНастроекКомпоновкиДанных.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		Исключение
			ТекстСообщенияОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Результат;
		КонецПопытки;
			
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);

		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(Результат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		АдресСпискаВыбранных = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьНастройкуСтруктурыВыводаРезультата(Настройки, ДляИзменения = Ложь)
	
	Настройки.Структура.Очистить();
	Настройки.Выбор.Элементы.Очистить();
	
	ГруппировкаКомпоновкиДанных = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных.Использование = Истина;
	
	ПолеГруппировки = ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеГруппировки.Использование = Истина;
	
	ПолеВыбора = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеВыбора.Использование = Истина;
	
	Если ДляИзменения Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбщиеРеквизитыОбъектов = ОбработкаОбъект.ОбщиеРеквизитыОбъектов(ВидыИзменяемыхОбъектов);
		Для Каждого ТабличнаяЧасть Из ОбщиеРеквизитыОбъектов.ТабличныеЧасти Цикл
			ИмяТабличнойЧасти = ТабличнаяЧасть.Ключ;
			
			ГруппировкаТаблицы = ГруппировкаКомпоновкиДанных.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ГруппировкаТаблицы.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ГруппировкаТаблицы.Использование = Истина;
			
			ПолеГруппировки = ГруппировкаТаблицы.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяТабличнойЧасти + ".НомерСтроки");
			ПолеГруппировки.Использование = Истина;
			
			ПолеВыбора = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(ИмяТабличнойЧасти + ".НомерСтроки");
			ПолеВыбора.Использование = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КоличествоВыбранныхОбъектов(Пересчитать = Ложь, ДляИзменения = Ложь, ТекстСообщенияОбОшибке = "")
	
	Возврат ВыбранныеОбъекты(Пересчитать, ДляИзменения, ТекстСообщенияОбОшибке).Строки.Количество();
	
КонецФункции

&НаСервере
Функция СхемаКомпоновкиДанных(ТекстЗапроса)
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя = "НаборДанных1";
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

&НаКлиенте
Процедура ВидИзменяемыхОбъектовВыборСделан(Знач ВыбранныеОбъекты, ДополнительныеПараметры) Экспорт
	Если ВыбранныеОбъекты <> Неопределено И ВидыИзменяемыхОбъектов <> ВыбранныеОбъекты Тогда
		ВидыИзменяемыхОбъектов = СтрСоединить(ВыбранныеОбъекты, ",");
		ВыбранныеОбъектыВКонтексте.Очистить();
		ПерестроитьИнтерфейсФормыДляВыбранногоВидаОбъектов();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПерестроитьИнтерфейсФормыДляВыбранногоВидаОбъектов()
	ИнициализироватьНастройкиФормы();
	ОбновитьВидимостьЭлементов();
	СформироватьПояснениеОНастроенныхИзменениях();
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьНастройкиФормы()
	ИнициализироватьКомпоновщикНастроек();
	ЗагрузитьМетаданныеОбъекта();
	ЗагрузитьИсториюОпераций();
	ЗаполнитьПодменюРанееИзмененныеРеквизиты();
	ПредставлениеИзменяемыхОбъектов = ПредставлениеИзменяемыхОбъектов();
	ОбновитьНадписиСервер();
КонецПроцедуры

&НаСервере
Функция ПредставлениеИзменяемыхОбъектов()
	ПредставленияТипов = Новый Массив;
	Для Каждого ИмяОбъектаМетаданных Из СтрРазделить(ВидыИзменяемыхОбъектов, ",", Ложь) Цикл
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаМетаданных);
		ПредставленияТипов.Добавить(ОбъектМетаданных.Представление());
	КонецЦикла;
		
	Результат = СтрСоединить(ПредставленияТипов, ", ");
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	ТекстЗапроса = ОбъектОбработка.ТекстЗапроса(ВидыИзменяемыхОбъектов);
	СхемаКомпоновкиДанных = СхемаКомпоновкиДанных(ТекстЗапроса);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор)));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Если ВыбранныеОбъектыВКонтексте.Количество() > 0 Тогда
		Если Параметры.Свойство("Список") И ТипЗнч(Параметры.Список) = Тип("ДинамическийСписок") Тогда
			НастройкиКомпоновщика = Параметры.Список.КомпоновщикНастроек.ПолучитьНастройки();
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновщика);
			КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Очистить();
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			Попытка
				МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
				КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			Исключение
				КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			КонецПопытки;
		КонецЕсли;
		
		ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		Если УчитыватьИерархию И ОбрабатыватьРекурсивно Тогда
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
		Иначе
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		КонецЕсли;
		ЭлементОтбора.ПравоеЗначение = Новый СписокЗначений;
		ЭлементОтбора.ПравоеЗначение.ЗагрузитьЗначения(ВыбранныеОбъектыВКонтексте.ВыгрузитьЗначения());
	
	КонецЕсли;
	
	УстановитьНастройкуСтруктурыВыводаРезультата(КомпоновщикНастроек.Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСведенияОбОбъекте()
	УдаляемыеРеквизитыФормы = Новый Массив;
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиОбъекта Цикл
		УдаляемыеРеквизитыФормы.Добавить(ТабличнаяЧасть.Значение);
		Элементы.Удалить(Элементы.Найти("Страница" + ТабличнаяЧасть.Значение));
	КонецЦикла;
	ИзменитьРеквизиты(, УдаляемыеРеквизитыФормы);
	ТабличныеЧастиОбъекта.Очистить();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьМетаданныеОбъекта(СохранитьТекущиеНастройкиИзменения = Ложь, СохраненныеНастройки = Неопределено)
	
	Если СохранитьТекущиеНастройкиИзменения Тогда
		ТекущиеНастройки =  ТекущиеНастройкиИзменения();
		Если ТекущиеНастройки <> Неопределено Тогда
			СохраненныеНастройки = ТекущиеНастройки.ОписаниеИзменения;
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьСведенияОбОбъекте();
	
	ЗаблокированныеРеквизиты = ЗаблокированныеРеквизиты();
	НередактируемыеРеквизиты = НередактируемыеРеквизиты();
	ФильтруемыеРеквизиты = ФильтруемыеРеквизиты();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбщиеРеквизитыОбъектов = ОбработкаОбъект.ОбщиеРеквизитыОбъектов(ВидыИзменяемыхОбъектов);
	
	ЗаполнитьРеквизитыОбъекта(ЗаблокированныеРеквизиты, НередактируемыеРеквизиты, ФильтруемыеРеквизиты, ОбщиеРеквизитыОбъектов.Реквизиты);
	ЗаполнитьТабличныеЧастиОбъектов(ЗаблокированныеРеквизиты, НередактируемыеРеквизиты, ФильтруемыеРеквизиты, ОбщиеРеквизитыОбъектов.ТабличныеЧасти);
	
	СформироватьПояснениеПоАвтонумерации();
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаСервере
Процедура СформироватьПояснениеПоАвтонумерации()
	
	Автонумерация = Неопределено;
	Для Каждого ИмяТипа Из СтрРазделить(ВидыИзменяемыхОбъектов, ",", Ложь) Цикл
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяТипа);
		
		Если Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) 
			Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
			Или Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
				Автонумерация = Неопределено;
				Прервать;
		КонецЕсли;
		
		Если Автонумерация = Неопределено Тогда
			Автонумерация = ОбъектМетаданных.Автонумерация;
			Продолжить;
		КонецЕсли;
		
		Если Автонумерация И Не ОбъектМетаданных.Автонумерация Тогда
			Автонумерация = Неопределено;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Автонумерация = Неопределено Тогда
		ПояснениеПоАвтонумерации = "";
	ИначеЕсли Автонумерация Тогда
		ПояснениеПоАвтонумерации = НСтр("ru = '<Установить автоматически>'");
	Иначе
		ПояснениеПоАвтонумерации = НСтр("ru = '<Очистить>'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапретРедактированияПредусмотрен(ИмяОбъекта)
	
	Если ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
		МодульЗапретРедактированияРеквизитовОбъектовСлужебный = ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектовСлужебный");
		Возврат МодульЗапретРедактированияРеквизитовОбъектовСлужебный.ЗапретРедактированияПредусмотрен(ИмяОбъекта);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаблокированныеРеквизиты()
	Результат = Новый Массив;
	
	Для Каждого ВидОбъектов Из СтрРазделить(ВидыИзменяемыхОбъектов, ",", Ложь) Цикл
		Если ВерсияБСПСоответствуетТребованиям() Тогда
			Если ЗапретРедактированияПредусмотрен(ВидОбъектов) Тогда
				МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ВидОбъектов);
				БлокируемыеРеквизитыОписание = МенеджерОбъекта.ПолучитьБлокируемыеРеквизитыОбъекта();
			КонецЕсли;
		Иначе
			// В конфигурациях без БСП или на старых версиях БСП, пытаемся определить, 
			// есть ли у объекта блокируемые реквизиты (подсистема "Запрет редактирования реквизитов объектов").
			МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ВидОбъектов);
			Попытка
				БлокируемыеРеквизитыОписание = МенеджерОбъекта.ПолучитьБлокируемыеРеквизитыОбъекта();
			Исключение
				// метод не найден
				БлокируемыеРеквизитыОписание = Неопределено;
			КонецПопытки;
		КонецЕсли;
	
		Если БлокируемыеРеквизитыОписание <> Неопределено Тогда
			Для Каждого БлокируемыйРеквизитОписание Из БлокируемыеРеквизитыОписание Цикл
				ИмяРеквизита = СокрЛП(СтрРазделить(БлокируемыйРеквизитОписание, ";")[0]);
				Если Результат.Найти(ИмяРеквизита) = Неопределено Тогда
					Результат.Добавить(ИмяРеквизита);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция МетодыМенеджераОбъектаДляРедактированияРеквизитов(ИмяОбъекта)
	
	МодульИнтеграцияСтандартныхПодсистем = ОбщийМодуль("ИнтеграцияСтандартныхПодсистем");
	МодульГрупповоеИзменениеОбъектовПереопределяемый = ОбщийМодуль("ГрупповоеИзменениеОбъектовПереопределяемый");
	Если МодульИнтеграцияСтандартныхПодсистем = Неопределено Или МодульГрупповоеИзменениеОбъектовПереопределяемый = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ОбъектыСЗаблокированнымиРеквизитами = Новый Соответствие;
	МодульИнтеграцияСтандартныхПодсистем.ПриОпределенииОбъектовСРедактируемымиРеквизитами(ОбъектыСЗаблокированнымиРеквизитами);
	МодульГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами(ОбъектыСЗаблокированнымиРеквизитами);
	
	СведенияОМенеджереОбъекта = ОбъектыСЗаблокированнымиРеквизитами[ИмяОбъекта];
	Если СведенияОМенеджереОбъекта = Неопределено Тогда
		Возврат "НеПоддерживается";
	КонецЕсли;
	ДоступныеМетоды = СтрРазделить(СведенияОМенеджереОбъекта, Символы.ПС, Ложь);
	Возврат ДоступныеМетоды;
	
КонецФункции

&НаСервере
Функция НередактируемыеРеквизиты()
	
	Если Объект.ПоказыватьСлужебныеРеквизиты Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Результат = Новый Массив;
	Для Каждого ВидИзменяемыхОбъектов Из СтрРазделить(ВидыИзменяемыхОбъектов, ",", Ложь) Цикл
	
		ВерсияБСПСоответствуетТребованиям = ВерсияБСПСоответствуетТребованиям();
		Если ВерсияБСПСоответствуетТребованиям Тогда
			ДоступныеМетоды = МетодыМенеджераОбъектаДляРедактированияРеквизитов(ВидИзменяемыхОбъектов);
			Если ТипЗнч(ДоступныеМетоды) = Тип("Массив") И (ДоступныеМетоды.Количество() = 0
				Или ДоступныеМетоды.Найти("РеквизитыНеРедактируемыеВГрупповойОбработке") <> Неопределено) Тогда
					МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ВидИзменяемыхОбъектов);
					НеРедактируемые = МенеджерОбъекта.РеквизитыНеРедактируемыеВГрупповойОбработке();
			Иначе 
				НеРедактируемые = Новый Массив;
			КонецЕсли;
		Иначе
			// В конфигурациях без БСП или на старых версиях БСП, пытаемся определить, 
			// есть ли у объекта нередактируемые реквизиты.
			МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ВидИзменяемыхОбъектов);
			Попытка
				НеРедактируемые = МенеджерОбъекта.РеквизитыНеРедактируемыеВГрупповойОбработке();
			Исключение
				// метод не найден
				НеРедактируемые = Новый Массив;
			КонецПопытки;
		КонецЕсли;
			
		Если НеРедактируемые.Количество() > 0 Тогда
			Возврат НеРедактируемые;
		КонецЕсли;
		
		Если ВерсияБСПСоответствуетТребованиям Тогда
			Если ТипЗнч(ДоступныеМетоды) = Тип("Массив") И (ДоступныеМетоды.Количество() = 0
				Или ДоступныеМетоды.Найти("РеквизитыРедактируемыеВГрупповойОбработке") <> Неопределено) Тогда 
					Если МенеджерОбъекта = Неопределено Тогда
						МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ВидИзменяемыхОбъектов);
					КонецЕсли;
					Редактируемые = МенеджерОбъекта.РеквизитыРедактируемыеВГрупповойОбработке();
			Иначе
				Редактируемые = Неопределено;
			КонецЕсли;
		Иначе
			// В конфигурациях без БСП или на старых версиях БСП, пытаемся определить, 
			// есть ли у объекта редактируемые реквизиты.
			Попытка
				Редактируемые = МенеджерОбъекта.РеквизитыРедактируемыеВГрупповойОбработке();
			Исключение
				Редактируемые = Неопределено;
			КонецПопытки;
		КонецЕсли;

		Если Редактируемые = Неопределено Или Редактируемые.Найти("*") <> Неопределено Тогда
			Возврат НеРедактируемые;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ВидИзменяемыхОбъектов);
		Для Каждого ОписаниеРеквизита Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			НеРедактируемые.Добавить(ОписаниеРеквизита.Имя);
		КонецЦикла;
		
		Для Каждого ОписаниеРеквизита Из ОбъектМетаданных.Реквизиты Цикл
			НеРедактируемые.Добавить(ОписаниеРеквизита.Имя);
		КонецЦикла;
		
		Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
			Если Редактируемые.Найти(ТабличнаяЧасть.Имя + ".*") <> Неопределено Тогда
				Прервать;
			КонецЕсли;
			Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
				НеРедактируемые.Добавить(ТабличнаяЧасть.Имя + "." + Реквизит.Имя);
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого ИмяРедактируемого Из Редактируемые Цикл
			Индекс = НеРедактируемые.Найти(ИмяРедактируемого);
			Если Индекс = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НеРедактируемые.Удалить(Индекс);
		КонецЦикла;
		
		Для Каждого Реквизит Из НеРедактируемые Цикл
			Если Результат.Найти(Реквизит) = Неопределено Тогда
				Результат.Добавить(Реквизит);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ФильтруемыеРеквизиты()
	Результат = Новый Массив;
	Если Объект.ПоказыватьСлужебныеРеквизиты Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ИмяТипа Из СтрРазделить(ВидыИзменяемыхОбъектов, ",", Ложь) Цикл
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяТипа);
		ФильтруемыеРеквизиты = ПолучитьФильтрРедактированияПоТипу(ОбъектМетаданных);
		
		ЗакрытыеФункциональнымиОпциями = Новый ТаблицаЗначений;
		ЗакрытыеФункциональнымиОпциями.Колонки.Добавить("ИмяРеквизита",  Новый ОписаниеТипов("Строка"));
		
		Для Каждого ОписаниеФО Из Метаданные.ФункциональныеОпции Цикл
			Если СтрРазделить(ОписаниеФО.Хранение.ПолноеИмя(), ".")[0] = "Константа" Тогда
				ЗначениеФО = ПолучитьФункциональнуюОпцию(ОписаниеФО.Имя);
				Если ТипЗнч(ЗначениеФО) = Тип("Булево") И ЗначениеФО = Истина Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				// Не фильтруем реквизиты, которые входят в параметризуемые функциональные опции.
				Продолжить;
			КонецЕсли;
			
			Для Каждого РеквизитОМ Из ОбъектМетаданных.Реквизиты Цикл
				Если ОписаниеФО.Состав.Содержит(РеквизитОМ) Тогда
					НоваяСтрока = ЗакрытыеФункциональнымиОпциями.Добавить();
					НоваяСтрока.ИмяРеквизита = РеквизитОМ.Имя;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
				Если ОписаниеФО.Состав.Содержит(ТабличнаяЧасть) Тогда
					НоваяСтрока = ЗакрытыеФункциональнымиОпциями.Добавить();
					НоваяСтрока.ИмяРеквизита = ТабличнаяЧасть.Имя + ".*";
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ЗакрытыеФункциональнымиОпциями.Свернуть("ИмяРеквизита");
		
		Для Каждого ЗакрытыйФО Из ЗакрытыеФункциональнымиОпциями Цикл
			ФильтруемыеРеквизиты.Добавить(ЗакрытыйФО.ИмяРеквизита);
		КонецЦикла;
		
		Для Каждого Реквизит Из ФильтруемыеРеквизиты Цикл
			Если Результат.Найти(Реквизит) = Неопределено Тогда
				Результат.Добавить(Реквизит);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗаполнитьТабличныеЧастиОбъектов(ЗаблокированныеРеквизиты, НередактируемыеРеквизиты, ФильтруемыеРеквизиты, ДоступныеТабличныеЧасти)
	
	СписокВидовИзменяемыхОбъектов = СтрРазделить(ВидыИзменяемыхОбъектов, ",", Ложь);
	ИмяОбъекта = СписокВидовИзменяемыхОбъектов[0];
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
	
	// Создание реквизитов для табличных частей.
	НовыеРеквизитыФормы = Новый Массив;
	
	КолонкиТаблиц = ОписанияКолонокТаблицыРеквизитов();
	
	ТаблицыОбъекта = Новый Структура;
	ТабличныеЧастиОбъекта.Очистить();
	Для Каждого ОписаниеТабличнойЧасти Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Если Не ДоступныеТабличныеЧасти.Свойство(ОписаниеТабличнойЧасти.Имя) Тогда
			Продолжить;
		КонецЕсли;
			
		Если Не ПравоДоступа("Редактирование", ОписаниеТабличнойЧасти) Тогда
			Продолжить;
		КонецЕсли;
		// фильтры табличных частей
		Если НередактируемыеРеквизиты.Найти(ОписаниеТабличнойЧасти.Имя + ".*") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ФильтруемыеРеквизиты.Найти(ОписаниеТабличнойЧасти.Имя + ".*") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДоступныеДляИзмененияРеквизиты = ДоступныеДляИзмененияРеквизиты(ОписаниеТабличнойЧасти, НередактируемыеРеквизиты,
			ФильтруемыеРеквизиты, ДоступныеТабличныеЧасти[ОписаниеТабличнойЧасти.Имя]);
			
		Если ДоступныеДляИзмененияРеквизиты.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = "ТабличнаяЧасть" + ОписаниеТабличнойЧасти.Имя;
		ТаблицаЗначений = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("ТаблицаЗначений"), , ОписаниеТабличнойЧасти.Представление());
		НовыеРеквизитыФормы.Добавить(ТаблицаЗначений);
		
		Для Каждого ОписаниеКолонки Из КолонкиТаблиц Цикл 
			РеквизитТаблицы = Новый РеквизитФормы(ОписаниеКолонки.Имя, ОписаниеКолонки.Тип, ТаблицаЗначений.Имя, ОписаниеКолонки.Представление);
			НовыеРеквизитыФормы.Добавить(РеквизитТаблицы);
		КонецЦикла;
		
		ТаблицыОбъекта.Вставить(ИмяРеквизита, ОписаниеТабличнойЧасти);
		ТабличныеЧастиОбъекта.Добавить(ИмяРеквизита, ОписаниеТабличнойЧасти.Представление());
	КонецЦикла;
	ИзменитьРеквизиты(НовыеРеквизитыФормы);
	
	Для Каждого ТаблицаОбъекта Из ТаблицыОбъекта Цикл
		ИмяРеквизита = ТаблицаОбъекта.Ключ;
		ИмяСтраницы = "Страница" + ИмяРеквизита;
		Страница = Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Элементы.СоставОбъекта);
		Страница.Вид = ВидГруппыФормы.Страница;
		ОписаниеТабличнойЧасти = ТаблицаОбъекта.Значение;
		Страница.Заголовок = ОписаниеТабличнойЧасти.Представление();
		
		// Создание элементов для табличных частей.
		ТаблицаФормы = Элементы.Добавить(ИмяРеквизита, Тип("ТаблицаФормы"), Страница);
		ТаблицаФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ТаблицаФормы.ПутьКДанным = ИмяРеквизита;
		ТаблицаФормы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		ТаблицаФормы.Заголовок = ОписаниеТабличнойЧасти.Представление();
		ТаблицаФормы.УстановитьДействие("ПередНачаломИзменения", "Подключаемый_ПередНачаломИзменения");
		ТаблицаФормы.ИзменятьПорядокСтрок = Ложь;
		ТаблицаФормы.ИзменятьСоставСтрок = Ложь;
		ТаблицаФормы.КартинкаСтрок = КартинкаВидыОпераций();
		ТаблицаФормы.ПутьКДаннымКартинкиСтроки = ИмяРеквизита + ".ВидОперации";
		
		Для Каждого ОписаниеКолонки Из КолонкиТаблиц Цикл 
			Если ОписаниеКолонки.ВидПоля = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ИмяРеквизита = ОписаниеКолонки.Имя;
			ИмяЭлемента = ТаблицаФормы.Имя + ИмяРеквизита;
			КолонкаТаблицы = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ТаблицаФормы);
			Если ОписаниеКолонки.Картинка <> Неопределено Тогда
				КолонкаТаблицы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				КолонкаТаблицы.КартинкаШапки = ОписаниеКолонки.Картинка;
			КонецЕсли;
			КолонкаТаблицы.ПутьКДанным = ТаблицаОбъекта.Ключ + "." + ИмяРеквизита;
			КолонкаТаблицы.Вид = ОписаниеКолонки.ВидПоля;
			КолонкаТаблицы.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
			КолонкаТаблицы.ТолькоПросмотр = ОписаниеКолонки.ТолькоПросмотр;
			Если ОписаниеКолонки.Действия <> Неопределено Тогда
				Для Каждого Действие Из ОписаниеКолонки.Действия Цикл
					КолонкаТаблицы.УстановитьДействие(Действие.Ключ, Действие.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ДоступныеДляИзмененияРеквизиты = ДоступныеДляИзмененияРеквизиты(ОписаниеТабличнойЧасти, НередактируемыеРеквизиты,
			ФильтруемыеРеквизиты, ДоступныеТабличныеЧасти[ОписаниеТабличнойЧасти.Имя]);
			
		Для Каждого ОписаниеРеквизита Из ДоступныеДляИзмененияРеквизиты Цикл
			Реквизит = ЭтотОбъект[ТаблицаОбъекта.Ключ].Добавить();
			Реквизит.Имя = ОписаниеРеквизита.Имя;
			Реквизит.Представление = ?(ПустаяСтрока(ОписаниеРеквизита.Представление()), ОписаниеРеквизита.Имя, ОписаниеРеквизита.Представление());
			Реквизит.ДопустимыеТипы = ОписаниеРеквизита.Тип;
			Реквизит.СвязиПараметровВыбора = СвязиПараметровВыбораСтрокой(ОписаниеРеквизита.СвязиПараметровВыбора);
			Реквизит.ПараметрыВыбора = ПараметрыВыбораСтрокой(ОписаниеРеквизита.ПараметрыВыбора);
			Реквизит.ВидОперации = 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДоступныеДляИзмененияРеквизиты(ОписаниеТабличнойЧасти, НередактируемыеРеквизиты, ФильтруемыеРеквизиты, ДоступныеРеквизиты)
	
	Результат = Новый Массив;
	
	Для Каждого ОписаниеРеквизита Из ОписаниеТабличнойЧасти.Реквизиты Цикл
		Если ДоступныеРеквизиты.Найти(ОписаниеРеквизита.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПравоДоступа("Редактирование", ОписаниеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		// Фильтры реквизитов табличных частей.
		Если НередактируемыеРеквизиты.Найти(ОписаниеТабличнойЧасти.Имя + "." + ОписаниеРеквизита.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ФильтруемыеРеквизиты.Найти(ОписаниеТабличнойЧасти.Имя + "." + ОписаниеРеквизита.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ОписаниеРеквизита);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОписанияКолонокТаблицыРеквизитов()
	
	КолонкиТаблиц = Новый ТаблицаЗначений;
	КолонкиТаблиц.Колонки.Добавить("Имя");
	КолонкиТаблиц.Колонки.Добавить("Тип");
	КолонкиТаблиц.Колонки.Добавить("Представление");
	КолонкиТаблиц.Колонки.Добавить("ВидПоля");
	КолонкиТаблиц.Колонки.Добавить("Действия");
	КолонкиТаблиц.Колонки.Добавить("ТолькоПросмотр", Новый ОписаниеТипов("Булево"));
	КолонкиТаблиц.Колонки.Добавить("Картинка");
	
	ОписаниеКолонки = КолонкиТаблиц.Добавить();
	ОписаниеКолонки.Имя = "Имя";
	ОписаниеКолонки.Тип = Новый ОписаниеТипов("Строка");
	
	ОписаниеКолонки = КолонкиТаблиц.Добавить();
	ОписаниеКолонки.Имя = "Представление";
	ОписаниеКолонки.Тип = Новый ОписаниеТипов("Строка");
	ОписаниеКолонки.Представление = НСтр("ru = 'Реквизит'");
	ОписаниеКолонки.ВидПоля = ВидПоляФормы.ПолеВвода;
	ОписаниеКолонки.ТолькоПросмотр = Истина;
	
	ОписаниеКолонки = КолонкиТаблиц.Добавить();
	ОписаниеКолонки.Имя = "Изменять";
	ОписаниеКолонки.Тип = Новый ОписаниеТипов("Булево");
	ОписаниеКолонки.ВидПоля = ВидПоляФормы.ПолеФлажка;
	ОписаниеКолонки.Картинка = БиблиотекаКартинок.Изменить;
	ОписаниеКолонки.Действия = Новый Структура("ПриИзменении", "Подключаемый_ПриИзмененииФлажка");
	
	ОписаниеКолонки = КолонкиТаблиц.Добавить();
	ОписаниеКолонки.Имя = "Значение";
	ОписаниеКолонки.Тип = ВсеТипы();
	ОписаниеКолонки.Представление = НСтр("ru = 'Новое значение'");
	ОписаниеКолонки.ВидПоля = ВидПоляФормы.ПолеВвода;
	ОписаниеКолонки.Действия = Новый Структура("ПриИзменении", "Подключаемый_ЗначениеПриИзменении");
	
	ОписаниеКолонки = КолонкиТаблиц.Добавить();
	ОписаниеКолонки.Имя = "ДопустимыеТипы";
	ОписаниеКолонки.Тип = Новый ОписаниеТипов("ОписаниеТипов");
	
	ОписаниеКолонки = КолонкиТаблиц.Добавить();
	ОписаниеКолонки.Имя = "СвязиПараметровВыбора";
	ОписаниеКолонки.Тип = Новый ОписаниеТипов("Строка");
	
	ОписаниеКолонки = КолонкиТаблиц.Добавить();
	ОписаниеКолонки.Имя = "ПараметрыВыбора";
	ОписаниеКолонки.Тип = Новый ОписаниеТипов("Строка");
	
	ОписаниеКолонки = КолонкиТаблиц.Добавить();
	ОписаниеКолонки.Имя = "ВидОперации";
	ОписаниеКолонки.Тип = Новый ОписаниеТипов("Число");
	
	ОписаниеКолонки = КолонкиТаблиц.Добавить();
	ОписаниеКолонки.Имя = "Свойство";
	ОписаниеКолонки.Тип = Новый ОписаниеТипов("Строка");
	
	ОписаниеКолонки = КолонкиТаблиц.Добавить();
	ОписаниеКолонки.Имя = "ВыборГруппИЭлементов";
	ОписаниеКолонки.Тип = Новый ОписаниеТипов("Строка");
	
	Возврат КолонкиТаблиц;
	
КонецФункции

&НаСервере
Функция ВсеТипы()
	Результат = Неопределено;
	Реквизиты = ПолучитьРеквизиты("РеквизитыОбъекта");
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Реквизит.Имя = "Значение" Тогда
			Результат = Реквизит.ТипЗначения;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура УстановитьОграниченияВыбираемыхТиповИПараметрыВыбораЗначения(ТабличноеПоле)
	Если ТабличноеПоле.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолеВвода = ТабличноеПоле.ПодчиненныеЭлементы[ТабличноеПоле.Имя + "Значение"];
	ПолеВвода.ОграничениеТипа = ТабличноеПоле.ТекущиеДанные.ДопустимыеТипы;
	
	Если ПолеВвода.ОграничениеТипа.Типы().Количество() = 1 И ПолеВвода.ОграничениеТипа.СодержитТип(Тип("Строка")) Тогда
		ПолеВвода.КнопкаВыбора = Истина;
	КонецЕсли;
	
	ПараметрыВыбораМассив = Новый Массив;
	
	Если НЕ ПустаяСтрока(ТабличноеПоле.ТекущиеДанные.ПараметрыВыбора) Тогда
		УстановитьПараметрыВыбораСервер(ТабличноеПоле.ТекущиеДанные.ПараметрыВыбора, ПараметрыВыбораМассив)
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТабличноеПоле.ТекущиеДанные.СвязиПараметровВыбора) Тогда
		Для Индекс = 1 По СтрЧислоСтрок(ТабличноеПоле.ТекущиеДанные.СвязиПараметровВыбора) Цикл
			СвязьПараметровВыбораСтрока = СтрПолучитьСтроку(ТабличноеПоле.ТекущиеДанные.СвязиПараметровВыбора, Индекс);
			РазложенныеСтроки = СтрРазделить(СвязьПараметровВыбораСтрока, ";");
			ИмяПараметра = СокрЛП(РазложенныеСтроки[0]);
			
			ИмяРеквизита = СокрЛП(РазложенныеСтроки[1]);
			ЧастиИмениРеквизита = СтрРазделить(ИмяРеквизита, ".", Ложь);
			ИмяТабличнойЧасти = "";
			Если ЧастиИмениРеквизита.Количество() > 1 Тогда
				ИмяТабличнойЧасти = ЧастиИмениРеквизита[0];
			КонецЕсли;
			ИмяРеквизита = ЧастиИмениРеквизита[ЧастиИмениРеквизита.Количество() - 1];
			
			ТаблицаРеквизитов = РеквизитыОбъекта;
			Если Не ПустаяСтрока(ИмяТабличнойЧасти) Тогда
				ТаблицаРеквизитов = ЭтотОбъект["ТабличнаяЧасть" + ИмяТабличнойЧасти];
			КонецЕсли;
			
			НайденныеСтроки = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ВидОперации,Имя", 1, ИмяРеквизита));
			Если НайденныеСтроки.Количество() = 1 Тогда
				Значение = НайденныеСтроки[0].Значение;
				Если ЗначениеЗаполнено(Значение) Тогда
					ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора(ИмяПараметра, Значение));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТабличноеПоле.ТекущиеДанные.Свойство) Тогда
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ТабличноеПоле.ТекущиеДанные.Свойство));
	КонецЕсли;
	
	Если ОтключитьСвязиПараметровВыбора Тогда
		ПолеВвода.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	Иначе
		ПолеВвода.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив);
	КонецЕсли;
	
	ВыборГруппИЭлементов = ТабличноеПоле.ТекущиеДанные.ВыборГруппИЭлементов;
	
	Если ВыборГруппИЭлементов <> "" Тогда
		Если ВыборГруппИЭлементов = "Группы" Тогда
			ПолеВвода.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		ИначеЕсли ВыборГруппИЭлементов = "ГруппыИЭлементы" Тогда
			ПолеВвода.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		ИначеЕсли ВыборГруппИЭлементов = "Элементы" Тогда
			ПолеВвода.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
		Иначе
			ПолеВвода.ВыборГруппИЭлементов = ГруппыИЭлементы.Авто;
		КонецЕсли;
	Иначе
		ПолеВвода.ВыборГруппИЭлементов = ГруппыИЭлементы.Авто;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетчикиИзменяемыхРеквизитов(Знач ТаблицаФормы = Неопределено)
	
	СписокТаблиц = Новый Массив;
	Если ТаблицаФормы <> Неопределено Тогда
		СписокТаблиц.Добавить(ТаблицаФормы);
	Иначе
		СписокТаблиц.Добавить(Элементы.РеквизитыОбъекта);
		Для Каждого ТабличнаяЧасть Из ТабличныеЧастиОбъекта Цикл
			СписокТаблиц.Добавить(Элементы[ТабличнаяЧасть.Значение]);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ТаблицаФормы Из СписокТаблиц Цикл
		ТабличнаяЧасть = ЭтотОбъект[ТаблицаФормы.Имя];
		КоличествоИзменяемых = 0;
		Для Каждого Реквизит Из ТабличнаяЧасть Цикл
			Если Реквизит.Изменять Тогда
				КоличествоИзменяемых = КоличествоИзменяемых + 1;
			КонецЕсли;
		КонецЦикла;
	
		Страница = ТаблицаФормы.Родитель;
		Страница.Заголовок = ТаблицаФормы.Заголовок + ?(КоличествоИзменяемых = 0, "", " (" + КоличествоИзменяемых+ ")");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьЭлементов()
	Если ТабличныеЧастиОбъекта.Количество() = 0 Тогда
		Элементы.СоставОбъекта.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.СоставОбъекта.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ВидыИзменяемыхОбъектов) Тогда
		ЕстьОбщиеРеквизиты = РеквизитыОбъекта.Количество() > 0;
		Элементы.ГруппаНетРеквизитов.Видимость = Не ЕстьОбщиеРеквизиты;
		Элементы.РанееИзмененныеРеквизиты.Видимость = ЕстьОбщиеРеквизиты Или ТабличныеЧастиОбъекта.Количество() > 0;
		Элементы.РеквизитыОбъекта.Видимость = ЕстьОбщиеРеквизиты;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыОбъекта(БлокируемыеРеквизиты, НеРедактируемые, ФильтруемыеРеквизиты, ДоступныеРеквизиты)
	
	НаборыРеквизитов = Новый Структура;
	НаборыРеквизитов.Вставить("НеРедактируемые", НеРедактируемые);
	НаборыРеквизитов.Вставить("Фильтруемые", ФильтруемыеРеквизиты);
	НаборыРеквизитов.Вставить("Блокируемые", БлокируемыеРеквизиты);
	НаборыРеквизитов.Вставить("Доступные", ДоступныеРеквизиты);
	
	
	СписокВидовИзменяемыхОбъектов = СтрРазделить(ВидыИзменяемыхОбъектов, ",", Ложь);
	ИмяОбъекта = СписокВидовИзменяемыхОбъектов[0];
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
	РеквизитыОбъекта.Очистить();
	
	НаборыРеквизитов.Вставить("ОписанияРеквизитов", ОбъектМетаданных.СтандартныеРеквизиты);
	ДобавитьРеквизитыВНабор(НаборыРеквизитов, ОбъектМетаданных);
	
	НаборыРеквизитов.Вставить("ОписанияРеквизитов", ОбъектМетаданных.Реквизиты);
	ДобавитьРеквизитыВНабор(НаборыРеквизитов, ОбъектМетаданных);
	
	РеквизитыОбъекта.Сортировать("Представление Возр");
	
	Если ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщийМодуль("УправлениеСвойствами");
		Если МодульУправлениеСвойствами <> Неопределено Тогда
			ИспользуютсяДопРеквизиты = Истина;
			ИспользуютсяДопСведения = Истина;
			Для Каждого ВидОбъекта Из СписокВидовИзменяемыхОбъектов Цикл
				МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ВидОбъекта);
				ИспользуютсяДопРеквизиты = ИспользуютсяДопРеквизиты И МодульУправлениеСвойствами.ИспользоватьДопРеквизиты(МенеджерОбъекта.ПустаяСсылка());
				ИспользуютсяДопСведения  = ИспользуютсяДопСведения И МодульУправлениеСвойствами.ИспользоватьДопСведения (МенеджерОбъекта.ПустаяСсылка());
			КонецЦикла;
			Если ИспользуютсяДопРеквизиты Или ИспользуютсяДопСведения Тогда
				ДобавитьДополнительныеРеквизитыИСведенияВНабор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДополнительныеРеквизитыИСведенияВНабор()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	СписокВидовИзменяемыхОбъектов = СтрРазделить(ВидыИзменяемыхОбъектов, ",", Ложь);
	ОбщийСписокРеквизитов = СписокСвойствДляВидаОбъектов(СписокВидовИзменяемыхОбъектов[0]);
	Для Индекс = 1 По СписокВидовИзменяемыхОбъектов.Количество() - 1 Цикл
		ОбщийСписокРеквизитов = ОбработкаОбъект.ПересечениеМножеств(ОбщийСписокРеквизитов, СписокСвойствДляВидаОбъектов(СписокВидовИзменяемыхОбъектов[Индекс]));
	КонецЦикла;
	
	Если КонтекстныйВызов Тогда
		Для Каждого ДанныеОбъекта Из ВыбранныеОбъекты(Истина).Строки Цикл
			ОбъектДляИзменения = ДанныеОбъекта.Ссылка;
			
			ВидОбъектаПоСсылке = ВидОбъектаПоСсылке(ОбъектДляИзменения);
			Если (ВидОбъектаПоСсылке = "Справочник" ИЛИ ВидОбъектаПоСсылке = "ПланВидовХарактеристик") И ОбъектЯвляетсяГруппой(ОбъектДляИзменения) Тогда
				Продолжить;
			КонецЕсли;
			
			МодульУправлениеСвойствами = ОбщийМодуль("УправлениеСвойствами");
			СписокСвойств = МодульУправлениеСвойствами.ПолучитьСписокСвойств(ОбъектДляИзменения);
			Для Каждого Свойство Из СписокСвойств Цикл
				Если ОбщийСписокРеквизитов.Найти(Свойство) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если РеквизитыОбъекта.НайтиСтроки(Новый Структура("Свойство", Свойство)).Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ДобавитьСвойствоВСписокРеквизитов(Свойство);
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого Реквизит Из ОбщийСписокРеквизитов Цикл
			ДобавитьСвойствоВСписокРеквизитов(Реквизит);
		КонецЦикла;
	КонецЕсли;
	
	РеквизитыОбъекта.Сортировать("Представление");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСвойствоВСписокРеквизитов(Свойство)
	ОписаниеСвойства = ЗначенияРеквизитовОбъекта(Свойство, "Ссылка,Наименование,ТипЗначения,ЭтоДополнительноеСведение");
	ОписаниеРеквизита = РеквизитыОбъекта.Добавить();
	ОписаниеРеквизита.ВидОперации = ?(ОписаниеСвойства.ЭтоДополнительноеСведение, 3, 2);
	ОписаниеРеквизита.Свойство = ОписаниеСвойства.Ссылка;
	ОписаниеРеквизита.Представление = ОписаниеСвойства.Наименование;
	ОписаниеРеквизита.ДопустимыеТипы = ОписаниеСвойства.ТипЗначения;
КонецПроцедуры

&НаСервере
Функция СписокСвойствДляВидаОбъектов(ВидОбъектов)
	Результат = Новый Массив;
	
	ВидыСвойств = Новый Массив;
	ВидыСвойств.Добавить("ДополнительныеРеквизиты");
	ВидыСвойств.Добавить("ДополнительныеСведения");
	
	МодульУправлениеСвойствамиСлужебный = ОбщийМодуль("УправлениеСвойствамиСлужебный");
	Если МодульУправлениеСвойствамиСлужебный <> Неопределено Тогда
		Для Каждого ВидСвойства Из ВидыСвойств Цикл
			СписокСвойств = МодульУправлениеСвойствамиСлужебный.СписокСвойствДляВидаОбъектов(ВидОбъектов, ВидСвойства);
			Если СписокСвойств <> Неопределено Тогда
				Для Каждого Элемент Из СписокСвойств Цикл
					Результат.Добавить(Элемент.Свойство);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ДобавитьРеквизитыВНабор(НаборыРеквизитов, ОбъектМетаданных)
	
	Реквизиты = НаборыРеквизитов.ОписанияРеквизитов;
	НеРедактируемые = НаборыРеквизитов.НеРедактируемые;
	ФильтруемыеРеквизиты = НаборыРеквизитов.Фильтруемые;
	БлокируемыеРеквизиты = НаборыРеквизитов.Блокируемые;
	СписокДоступныхРеквизитов = НаборыРеквизитов.Доступные;
	
	Для Каждого ОписаниеРеквизита Из Реквизиты Цикл
		Если СписокДоступныхРеквизитов.Найти(ОписаниеРеквизита.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ОписаниеРеквизита) = Тип("ОписаниеСтандартногоРеквизита") Тогда
			Если НЕ ПравоДоступа("Редактирование", ОбъектМетаданных, , ОписаниеРеквизита.Имя) Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если НЕ ПравоДоступа("Редактирование", ОписаниеРеквизита) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если НеРедактируемые.Найти(ОписаниеРеквизита.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ФильтруемыеРеквизиты.Найти(ОписаниеРеквизита.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборГруппИЭлементов = "";
		Если ТипЗнч(ОписаниеРеквизита) = Тип("ОписаниеСтандартногоРеквизита") Тогда
			Если ОписаниеРеквизита.Имя = "Родитель" Или ОписаниеРеквизита.Имя = "Parent" Тогда
				ВыборГруппИЭлементов = "Группы";
			ИначеЕсли ОписаниеРеквизита.Имя = "Владелец" Или ОписаниеРеквизита.Имя = "Owner" Тогда
				Если ОбъектМетаданных.ИспользованиеПодчинения = Метаданные.СвойстваОбъектов.ИспользованиеПодчинения.Элементам Тогда
					ВыборГруппИЭлементов = "Элементы";
				ИначеЕсли ОбъектМетаданных.ИспользованиеПодчинения = Метаданные.СвойстваОбъектов.ИспользованиеПодчинения.ГруппамИЭлементам Тогда
					ВыборГруппИЭлементов = "ГруппыИЭлементы";
				ИначеЕсли ОбъектМетаданных.ИспользованиеПодчинения = Метаданные.СвойстваОбъектов.ИспользованиеПодчинения.Группам Тогда
					ВыборГруппИЭлементов = "Группы";
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЭтоСсылка = Ложь;
			
			Для Каждого Тип Из ОписаниеРеквизита.Тип.Типы() Цикл
				Если ЭтоСсылка(Тип) Тогда
					ЭтоСсылка = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЭтоСсылка Тогда
				Если ОписаниеРеквизита.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы Тогда
					ВыборГруппИЭлементов = "Группы";
				ИначеЕсли ОписаниеРеквизита.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
					ВыборГруппИЭлементов = "ГруппыИЭлементы";
				ИначеЕсли ОписаниеРеквизита.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
					ВыборГруппИЭлементов = "Элементы";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СписокВидовИзменяемыхОбъектов = СтрРазделить(ВидыИзменяемыхОбъектов, ",", Ложь);
		Если СписокВидовИзменяемыхОбъектов.Количество() = 1 Тогда
			ПараметрыВыбораСтрока = ПараметрыВыбораСтрокой(ОписаниеРеквизита.ПараметрыВыбора);
			СвязиПараметровВыбораСтрока = СвязиПараметровВыбораСтрокой(ОписаниеРеквизита.СвязиПараметровВыбора);
		Иначе
			ПараметрыВыбораСтрока = ПараметрыВыбораСтрокой(Новый Массив);
			СвязиПараметровВыбораСтрока = СвязиПараметровВыбораСтрокой(Новый Массив);
		КонецЕсли;
		
		РеквизитОбъекта = РеквизитыОбъекта.Добавить();
		РеквизитОбъекта.Имя = ОписаниеРеквизита.Имя;
		РеквизитОбъекта.Представление = ОписаниеРеквизита.Представление();
		РеквизитОбъекта.ВидОперации = 1; // реквизит
		РеквизитОбъекта.ДопустимыеТипы = ОписаниеРеквизита.Тип;
		РеквизитОбъекта.ПараметрыВыбора = ПараметрыВыбораСтрока;
		РеквизитОбъекта.СвязиПараметровВыбора = СвязиПараметровВыбораСтрока;
		РеквизитОбъекта.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
		
		Если БлокируемыеРеквизиты.Найти(ОписаниеРеквизита.Имя) <> Неопределено Тогда
			РеквизитОбъекта.ЗаблокированныйРеквизит = Истина;
		КонецЕсли;
		
		РеквизитОбъекта.ЭтоСтандартныйРеквизит = ТипЗнч(ОписаниеРеквизита) = Тип("ОписаниеСтандартногоРеквизита");
	КонецЦикла;
	
КонецПроцедуры

// Получает массив реквизитов, редактирование которых не предусмотрено
// на уровне конфигурации.
//
&НаСервере
Функция ПолучитьФильтрРедактированияПоТипу(ОбъектМетаданных)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ФильтрXML = ОбработкаОбъект.ПолучитьМакет("ФильтрРеквизитов").ПолучитьТекст();
	
	ФильтрТаблица = ПрочитатьXMLВТаблицу(ФильтрXML).Данные;
	
	// Реквизиты, блокируемые для любого типа объектов метаданных.
	ОбщийФильтр = ФильтрТаблица.НайтиСтроки(Новый Структура("ObjectType", "*"));
	
	// Реквизиты, блокируемые для указанного типа объектов метаданных.
	ФильтрПоТипуОМ = ФильтрТаблица.НайтиСтроки(
							Новый Структура("ObjectType", 
							ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных)));
	
	ФильтруемыеРеквизиты = Новый Массив;
	
	Для Каждого СтрокаОписание Из ОбщийФильтр Цикл
		ФильтруемыеРеквизиты.Добавить(СтрокаОписание.Attribute);
	КонецЦикла;
	
	Для Каждого СтрокаОписание Из ФильтрПоТипуОМ Цикл
		ФильтруемыеРеквизиты.Добавить(СтрокаОписание.Attribute);
	КонецЦикла;
	
	ПрефиксУдаляемыхРеквизитов = "Удалить";
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		Если НРег(Лев(Реквизит.Имя, СтрДлина(ПрефиксУдаляемыхРеквизитов))) = НРег(ПрефиксУдаляемыхРеквизитов) Тогда
			ФильтруемыеРеквизиты.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Если НРег(Лев(ТабличнаяЧасть.Имя, СтрДлина(ПрефиксУдаляемыхРеквизитов))) = НРег(ПрефиксУдаляемыхРеквизитов) Тогда
			ФильтруемыеРеквизиты.Добавить(ТабличнаяЧасть.Имя + ".*");
		Иначе
			Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
				Если НРег(Лев(Реквизит.Имя, СтрДлина(ПрефиксУдаляемыхРеквизитов))) = НРег(ПрефиксУдаляемыхРеквизитов) Тогда
					ФильтруемыеРеквизиты.Добавить(ТабличнаяЧасть.Имя + "." + Реквизит.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ФильтруемыеРеквизиты;
	
КонецФункции

&НаСервере
Функция ЭлементыОтбораБезИерархии(Знач ЭлементыОтбора)
	Результат = Новый Массив;
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ПодчиненныеОтборы = ЭлементыОтбораБезИерархии(ЭлементОтбора.Элементы);
			Для Каждого ПодчиненныйОтбор Из ПодчиненныеОтборы Цикл
				Результат.Добавить(ПодчиненныйОтбор);
			КонецЦикла;
		Иначе
			Результат.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура СформироватьПояснениеОНастроенныхИзменениях()
	
	ЕстьОтборПоСтрокам = Ложь;
	Для Каждого ЭлементОтбора Из ЭлементыОтбораБезИерархии(КомпоновщикНастроек.Настройки.Отбор.Элементы) Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ТабличнаяЧасть Из ТабличныеЧастиОбъекта Цикл
			ИмяТабличнойЧасти = Сред(ТабличнаяЧасть.Значение, СтрДлина("ТабличнаяЧасть") + 1);
			Если СтрНачинаетсяС(ЭлементОтбора.ЛевоеЗначение, ИмяТабличнойЧасти) Тогда
				ЕстьОтборПоСтрокам = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ИзменяемыеТабличныеЧасти = Новый Соответствие;
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиОбъекта Цикл
		ИзменяемыеРеквизиты = Новый Массив;
		Для Каждого Реквизит Из ЭтотОбъект[ТабличнаяЧасть.Значение] Цикл
			Если Реквизит.Изменять Тогда
				ИзменяемыеРеквизиты.Добавить(Реквизит.Представление);
			КонецЕсли;
		КонецЦикла;
		Если ИзменяемыеРеквизиты.Количество() > 0 Тогда 
			ИзменяемыеТабличныеЧасти.Вставить(ТабличнаяЧасть.Представление, ИзменяемыеРеквизиты);
		КонецЕсли;
	КонецЦикла;
	
	ИзменяемыеРеквизиты = Новый Массив;
	Для Каждого Реквизит Из РеквизитыОбъекта Цикл
		Если Реквизит.Изменять Тогда
			ИзменяемыеРеквизиты.Добавить(Реквизит.Представление);
		КонецЕсли;
	КонецЦикла;
	
	ЕстьВыбранныеОбъекты = КоличествоВыбранныхОбъектов() > 0;
	
	Пояснение = "";
	Если ИзменяемыеРеквизиты.Количество() > 3 Тогда
		Пояснение = "(" + ИзменяемыеРеквизиты.Количество() +")";
	Иначе
		Для Каждого Реквизит Из ИзменяемыеРеквизиты Цикл
			Если Не ПустаяСтрока(Пояснение) Тогда
				Пояснение = Пояснение + ", ";
			КонецЕсли;
			Пояснение = Пояснение + """" + Реквизит + """";
		КонецЦикла;
	КонецЕсли;
	
	Если ИзменяемыеРеквизиты.Количество() = 1 Тогда
		Пояснение = НСтр("ru = 'реквизит'") + " " + Пояснение;
	ИначеЕсли ИзменяемыеРеквизиты.Количество() > 1 Тогда
		Пояснение = НСтр("ru = 'реквизиты'") + " " + Пояснение;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Пояснение) Тогда
		Пояснение = Пояснение + " " + НСтр("ru = 'в выбранных элементах'");
	КонецЕсли;
	
	Для Каждого ТабличнаяЧасть Из ИзменяемыеТабличныеЧасти Цикл
		ИзменяемыеРеквизиты = ТабличнаяЧасть.Значение;
		Если ИзменяемыеРеквизиты.Количество() > 3 Тогда
			Если Не ПустаяСтрока(Пояснение) Тогда
				Пояснение = Пояснение + ", ";
			КонецЕсли;
			Пояснение = Пояснение + ПодставитьПараметрыВСтроку(НСтр("ru = 'реквизиты (%1)'"), ИзменяемыеРеквизиты.Количество());
		Иначе
			Для Каждого Реквизит Из ИзменяемыеРеквизиты Цикл
				Если Не ПустаяСтрока(Пояснение) Тогда
					Пояснение = Пояснение + ", ";
				КонецЕсли;
				Если ИзменяемыеРеквизиты.Найти(Реквизит) = 0 Тогда
					Если ИзменяемыеРеквизиты.Количество() = 1 Тогда
						Пояснение = Пояснение + НСтр("ru = 'реквизит'") + " ";
					ИначеЕсли ИзменяемыеРеквизиты.Количество() > 1 Тогда
						Пояснение =  Пояснение + НСтр("ru = 'реквизиты'") + " ";
					КонецЕсли;
				КонецЕсли;
				Пояснение = Пояснение + """" + Реквизит + """";
			КонецЦикла;
		КонецЕсли;
		Пояснение = Пояснение + " " 
			+ ПодставитьПараметрыВСтроку(НСтр("ru = 'в табличной части ""%1""'"), ТабличнаяЧасть.Ключ);
	КонецЦикла;
	
	Если Не ПустаяСтрока(Пояснение) Тогда
		Если ИзменяемыеТабличныеЧасти.Количество() > 0 Тогда
			Если ЕстьОтборПоСтрокам Тогда 
				Пояснение = Пояснение + " " + НСтр("ru = 'в тех строках выбранных элементов, которые удовлетворяют условиям отбора'")
			Иначе
				Пояснение = Пояснение + " " + НСтр("ru = '<b>во всех строках</b> выбранных элементов'")
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьВыбранныеОбъекты Тогда
		Если Не ПустаяСтрока(Пояснение) Тогда
			Пояснение = НСтр("ru = 'Изменить'") + " " + Пояснение + ".";
		Иначе
			Пояснение = НСтр("ru = 'Выполнить <b>перезапись</b> выбранных элементов.'");
		КонецЕсли;
	Иначе
		Пояснение = НСтр("ru = 'Не выбраны элементы, реквизиты которых необходимо изменить.'");
	КонецЕсли;
	
	Элементы.ПояснениеОНастроенныхИзменениях.Заголовок = ФорматированнаяСтрока(Пояснение);
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьКоличествоВыбранных()
	ЕстьОшибкиВОтборе = Ложь;
	Если ЕстьНастроенныеОтборы() Тогда
		ТекстСообщенияОбОшибке = "";
		КоличествоВыбранныхОбъектов = КоличествоВыбранныхОбъектов(Истина, , ТекстСообщенияОбОшибке);
		ТекстНадписи = ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоВыбранныхОбъектов, НСтр("ru = 'элемент,элемента,элементов'"));
	Иначе
		ТекстНадписи = НСтр("ru = 'Все элементы'");
	КонецЕсли;
	
	Элементы.НастройкаОтбора.Заголовок = ТекстНадписи;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодменюРанееИзмененныеРеквизиты()
	
	МестоРазмещенияКоманд = Элементы.РанееИзмененныеРеквизиты;
	
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого Настройка Из МестоРазмещенияКоманд.ПодчиненныеЭлементы Цикл
		Если Настройка.Имя = "Заглушка" Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеЭлементы.Добавить(Настройка);
	КонецЦикла;
	
	Для Каждого Настройка Из УдаляемыеЭлементы Цикл
		Команды.Удалить(Команды[Настройка.Имя]);
		Элементы.Удалить(Настройка);
	КонецЦикла;
	
	Для Каждого Настройка Из ИсторияОперацийСписок Цикл
		НомерКоманды = ИсторияОперацийСписок.Индекс(Настройка);
		ИмяКоманды = МестоРазмещенияКоманд.Имя + "НастройкаИзменений" + НомерКоманды;
		
		КомандаФормы = Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_УстановитьНастройку";
		КомандаФормы.Заголовок = Настройка.Представление;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		
		НовыйЭлемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), МестоРазмещенияКоманд);
		НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	КонецЦикла;
	
	Элементы.Заглушка.Видимость = ИсторияОперацийСписок.Количество() = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкуИзменения(Знач Настройка)
	
	СброситьНастройкиИзменения();
	
	ЕстьЗаблокированные = Ложь;
	
	// Для обеспечения обратной совместимости с настройками, сохраненными в БСП 2.1.
	Если ТипЗнч(Настройка) <> Тип("Структура") Тогда
		Настройка = Новый Структура("Реквизиты,ТабличныеЧасти", Настройка, Новый Структура);
	КонецЕсли;
	
	Для Каждого ИзменяемыйРеквизит Из Настройка.Реквизиты Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидОперации", ИзменяемыйРеквизит.ВидОперации);
		Если ИзменяемыйРеквизит.ВидОперации = 1 Тогда // реквизит объекта
			СтруктураПоиска.Вставить("Имя", ИзменяемыйРеквизит.ИмяРеквизита);
		Иначе
			СтруктураПоиска.Вставить("Свойство", ИзменяемыйРеквизит.Свойство);
		КонецЕсли;
		
		НайденныеСтроки = РеквизитыОбъекта.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Если НайденныеСтроки[0].ЗаблокированныйРеквизит  Тогда
				ЕстьЗаблокированные = Истина;
				Продолжить;
			КонецЕсли;
			НайденныеСтроки[0].Значение = ИзменяемыйРеквизит.Значение;
			НайденныеСтроки[0].Изменять = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из Настройка.ТабличныеЧасти Цикл
		Для Каждого ИзменяемыйРеквизит Из ТабличнаяЧасть.Значение Цикл
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Имя", ИзменяемыйРеквизит.Имя);
			Если Элементы.Найти("ТабличнаяЧасть" + ТабличнаяЧасть.Ключ) <> Неопределено Тогда
				НайденныеСтроки = ЭтотОбъект["ТабличнаяЧасть" + ТабличнаяЧасть.Ключ].НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденныеСтроки[0].Значение = ИзменяемыйРеквизит.Значение;
					НайденныеСтроки[0].Изменять = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ЕстьЗаблокированные Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Некоторые реквизиты заблокированы для изменения, изменения не установлены.'"));
	КонецЕсли;
	
	ОбновитьСчетчикиИзменяемыхРеквизитов();
КонецПроцедуры


&НаСервере
Функция ПараметрыВыбораСтрокой(ПараметрыВыбора)
	Результат = "";
	
	Для Каждого ОписаниеПараметраВыбора Из ПараметрыВыбора Цикл
		ТекущийПВСтрока = "[ПолеОтбора];[ТипСтрока];[ЗначениеСтрока]";
		ТипЗначения = ТипЗнч(ОписаниеПараметраВыбора.Значение);
		
		Если ТипЗначения = Тип("ФиксированныйМассив") Тогда
			СтроковоеПредставлениеТипа = "ФиксированныйМассив";
			ЗначениеСтрока = "";
			
			Для Каждого Элемент Из ОписаниеПараметраВыбора.Значение Цикл
				ЗначениеСтрокаШаблон = "[Тип]*[Значение]";
				ЗначениеСтрокаШаблон = СтрЗаменить(ЗначениеСтрокаШаблон, "[Тип]", СтроковоеПредставлениеТипа(ТипЗнч(Элемент)));
				ЗначениеСтрокаШаблон = СтрЗаменить(ЗначениеСтрокаШаблон, "[Значение]", XMLСтрока(Элемент));
				ЗначениеСтрока = ЗначениеСтрока + ?(ПустаяСтрока(ЗначениеСтрока), "", "#") + ЗначениеСтрокаШаблон;
			КонецЦикла;
		Иначе
			СтроковоеПредставлениеТипа = СтроковоеПредставлениеТипа(ТипЗначения);
			ЗначениеСтрока = XMLСтрока(ОписаниеПараметраВыбора.Значение);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ЗначениеСтрока) Тогда
			ТекущийПВСтрока = СтрЗаменить(ТекущийПВСтрока, "[ПолеОтбора]", ОписаниеПараметраВыбора.Имя);
			ТекущийПВСтрока = СтрЗаменить(ТекущийПВСтрока, "[ТипСтрока]", СтроковоеПредставлениеТипа);
			ТекущийПВСтрока = СтрЗаменить(ТекущийПВСтрока, "[ЗначениеСтрока]", ЗначениеСтрока);
			
			Результат = Результат + ТекущийПВСтрока + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Лев(Результат, СтрДлина(Результат)-1);
	Возврат Результат;
КонецФункции

&НаСервере
Функция СвязиПараметровВыбораСтрокой(СвязиПараметровВыбора)
	Результат = "";
	
	Для Каждого ОписаниеСвязиПараметровВыбора Из СвязиПараметровВыбора Цикл
		ТекущаяСПВСтрока = "[ИмяПараметра];[ИмяРеквизита]";
		ТекущаяСПВСтрока = СтрЗаменить(ТекущаяСПВСтрока, "[ИмяПараметра]", ОписаниеСвязиПараметровВыбора.Имя);
		ТекущаяСПВСтрока = СтрЗаменить(ТекущаяСПВСтрока, "[ИмяРеквизита]", ОписаниеСвязиПараметровВыбора.ПутьКДанным);
		Результат = Результат + ТекущаяСПВСтрока + Символы.ПС;
	КонецЦикла;
	
	Результат = Лев(Результат, СтрДлина(Результат)-1);
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокТиповОбъектов()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаполнитьКоллекциюДоступныхДляИзмененияОбъектов(
		Элементы.ПредставлениеИзменяемыхОбъектов.СписокВыбора, Объект.ПоказыватьСлужебныеРеквизиты);
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеОНастроенныхИзмененияхОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиКНастройкеОтбора" Тогда
		СтандартнаяОбработка = Ложь;
		ПерейтиКНастройкеОтбора();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНастройкеОтбора()
	Если Не ПустаяСтрока(ВидыИзменяемыхОбъектов) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗакрытииФормыВыбранныхОбъектов", ЭтотОбъект);
		ОткрытьФорму(ПолноеИмяФормы("ВыбранныеЭлементы"), 
		Новый Структура("ВыбранныеТипы, Настройки", ВидыИзменяемыхОбъектов, КомпоновщикНастроек.Настройки), , , , , ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПараметрыКонструктора(Формула)
	Результат = Новый Структура;
	Результат.Вставить("Формула", Формула);
	Результат.Вставить("ОперандыЗаголовок", НСтр("ru = 'Доступные реквизиты'"));
	Результат.Вставить("Операнды", Операнды());
	Результат.Вставить("Расширенный", Ложь);
	Возврат Результат;
КонецФункции

&НаСервере
Функция Операнды()
	ТаблицаОперандов = Новый ТаблицаЗначений;
	ТаблицаОперандов.Колонки.Добавить("Идентификатор");
	ТаблицаОперандов.Колонки.Добавить("Представление");
	
	Для Каждого ОписаниеРеквизита Из РеквизитыОбъекта Цикл
		Операнд = ТаблицаОперандов.Добавить();
		Операнд.Идентификатор = ОписаниеРеквизита.Представление;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОперандов, УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Функция ЕстьОшибкаВВыражении(Знач Выражение, ТекстОшибки = "")
	
	Выражение = Сред(Выражение, 2);
	
	Для Каждого ОписаниеРеквизита Из РеквизитыОбъекта Цикл
		Выражение = СтрЗаменить(Выражение, "[" + ОписаниеРеквизита.Представление + "]", """1""");
	КонецЦикла;
	
	Попытка
		Возврат Вычислить(Выражение) = Неопределено;
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ПриРазблокированииРеквизитов(РазблокированныеРеквизиты, ДополнительныеПараметры) Экспорт
	Если РазблокированныеРеквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РазблокированныеРеквизиты) = Тип("Массив") И РазблокированныеРеквизиты.Количество() > 0 Тогда
		ЗаблокированныеРеквизитыСтроки = РеквизитыОбъекта.НайтиСтроки(Новый Структура("ЗаблокированныйРеквизит", Истина));
		Для Каждого ОписаниеОперацииСтрока Из ЗаблокированныеРеквизитыСтроки Цикл
			Если ОписаниеОперацииСтрока.ЗаблокированныйРеквизит И РазблокированныеРеквизиты.Найти(ОписаниеОперацииСтрока.Имя) <> Неопределено Тогда
				ОписаниеОперацииСтрока.ЗаблокированныйРеквизит = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции из базовой функциональности для обеспечения автономности.

// Сохраняет настройку в хранилище общих настроек.
// 
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроекСохранить.Сохранить, 
//   подробнее - см. параметры процедуры ХранилищеСохранить().
// 
&НаСервереБезКонтекста
Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Значение,
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено, 
	НужноОбновитьПовторноИспользуемыеЗначения = Ложь)
	
	ХранилищеСохранить(
		ХранилищеОбщихНастроек,
		КлючОбъекта,
		КлючНастроек,
		Значение,
		ОписаниеНастроек,
		ИмяПользователя,
		НужноОбновитьПовторноИспользуемыеЗначения);
	
КонецПроцедуры

// Загружает настройку из хранилища общих настроек.
//
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроек.Загрузить,
//   подробнее - см. параметры функции ХранилищеЗагрузить().
//
&НаСервереБезКонтекста
Функция ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию = Неопределено, 
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено)
	
	Возврат ХранилищеЗагрузить(
		ХранилищеОбщихНастроек,
		КлючОбъекта,
		КлючНастроек,
		ЗначениеПоУмолчанию,
		ОписаниеНастроек,
		ИмяПользователя);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ХранилищеСохранить(МенеджерХранилища, КлючОбъекта, КлючНастроек, Значение,
	ОписаниеНастроек, ИмяПользователя, НужноОбновитьПовторноИспользуемыеЗначения)
	
	Если НЕ ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерХранилища.Сохранить(КлючОбъекта, КлючНастроек(КлючНастроек), Значение, ОписаниеНастроек, ИмяПользователя);
	
	Если НужноОбновитьПовторноИспользуемыеЗначения Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ХранилищеЗагрузить(МенеджерХранилища, КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию,
	ОписаниеНастроек, ИмяПользователя)
	
	Результат = Неопределено;
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Результат = МенеджерХранилища.Загрузить(КлючОбъекта, КлючНастроек(КлючНастроек), ОписаниеНастроек, ИмяПользователя);
	КонецЕсли;
	
	Если (Результат = Неопределено) И (ЗначениеПоУмолчанию <> Неопределено) Тогда
		Результат = ЗначениеПоУмолчанию;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Возвращает строку ключа настроек, не превышающую допустимую длину.
// Проверяет длину строки на входе и, в случае превышения 128, преобразует ее конец по алгоритму MD5 в короткий
// вариант, в результате чего строка становится длиной 128 символов.
// Если исходная строка менее 128 символов, она возвращается в неизменном виде.
//
// Параметры:
//  Строка - Строка - строка произвольной длины.
//
&НаСервереБезКонтекста
Функция КлючНастроек(Знач Строка)
	Результат = Строка;
	Если СтрДлина(Строка) > 128 Тогда // Ключ более 128 символов вызовет исключение при обращении к хранилищу настроек.
		Результат = Лев(Строка, 96);
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
		ХешированиеДанных.Добавить(Сред(Строка, 97));
		Результат = Результат + СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Возвращает менеджер объекта по полному имени объекта метаданных.
//
// Не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  ПолноеИмя    - Строка, полное имя объекта метаданных,
//                 например, "Справочник.Организации".
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер, ...
// 
&НаСервереБезКонтекста
Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя)
	Перем КлассОМ, ИмяОМ, Менеджер;
	
	ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
	
	Если ЧастиИмени.Количество() = 2 Тогда
		КлассОМ = ЧастиИмени[0];
		ИмяОМ  = ЧастиИмени[1];
	КонецЕсли;
	
	Если      ВРег(КлассОМ) = "ПЛАНОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
		
	ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Менеджер = Справочники;
		
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
		Менеджер = Документы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Менеджер = Перечисления;
		
	ИначеЕсли ВРег(КлассОМ) = "ОТЧЕТ" Тогда
		Менеджер = Отчеты;
		
	ИначеЕсли ВРег(КлассОМ) = "ОБРАБОТКА" Тогда
		Менеджер = Обработки;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
		Менеджер = РегистрыБухгалтерии;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРРАСЧЕТА" Тогда
		Если ЧастиИмени.Количество() = 2 Тогда
			// Регистр расчета
			Менеджер = РегистрыРасчета;
		Иначе
			КлассПодчиненногоОМ = ЧастиИмени[2];
			ИмяПодчиненногоОМ = ЧастиИмени[3];
			Если ВРег(КлассПодчиненногоОМ) = "ПЕРЕРАСЧЕТ" Тогда
				// Перерасчет
				Менеджер = РегистрыРасчета[ИмяОМ].Перерасчеты;
			Иначе
				ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестный тип объекта метаданных ""%1""'"), ПолноеИмя);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕСС" Тогда
		Менеджер = БизнесПроцессы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧА" Тогда
		Менеджер = Задачи;
		
	ИначеЕсли ВРег(КлассОМ) = "КОНСТАНТА" Тогда
		Менеджер = Константы;
		
	ИначеЕсли ВРег(КлассОМ) = "ПОСЛЕДОВАТЕЛЬНОСТЬ" Тогда
		Менеджер = Последовательности;
	КонецЕсли;
	
	Если Менеджер <> Неопределено Тогда
		Попытка
			Возврат Менеджер[ИмяОМ];
		Исключение
			Менеджер = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестный тип объекта метаданных ""%1""'"), ПолноеИмя);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено)
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	
	Возврат СтрокаПодстановки;
КонецФункции

// Функция ВидОбъектаПоСсылке возвращает имя вида объектов метаданных
// по ссылке на объект.
//
// Не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//
// Возвращаемое значение:
//  Строка       - имя вида объектов метаданных, например, "Справочник", "Документ" ...
// 
&НаСервереБезКонтекста
Функция ВидОбъектаПоСсылке(Ссылка)
	
	Возврат ВидОбъектаПоТипу(ТипЗнч(Ссылка));
	
КонецФункции 

// Функция возвращает имя вида объектов метаданных по типу объекта.
//
// Не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  Тип       - Тип прикладного объекта, определенный в конфигурации.
//
// Возвращаемое значение:
//  Строка       - имя вида объектов метаданных, например, "Справочник", "Документ" ...
// 
&НаСервереБезКонтекста
Функция ВидОбъектаПоТипу(Тип)
	
	Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "Справочник";
	
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "Документ";
	
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "БизнесПроцесс";
	
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "ПланВидовХарактеристик";
	
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "ПланСчетов";
	
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "ПланВидовРасчета";
	
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "Задача";
	
	ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "ПланОбмена";
	
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "Перечисление";
	
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru='Неверный тип значения параметра (%1)'"), Строка(Тип));
	
	КонецЕсли;
	
КонецФункции 

// Проверяет является ли объект группой элементов.
//
// Параметры:
//  Объект       - Объект, Ссылка, ДанныеФормыСтруктура по типу Объект.
//
// Возвращаемое значение:
//  Булево.
//
&НаСервереБезКонтекста
Функция ОбъектЯвляетсяГруппой(Объект)
	
	Если ЗначениеСсылочногоТипа(Объект) Тогда
		Ссылка = Объект;
	Иначе
		Ссылка = Объект.Ссылка;
	КонецЕсли;
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	Если ЭтоСправочник(МетаданныеОбъекта) Тогда
		
		Если НЕ МетаданныеОбъекта.Иерархический
		 ИЛИ МетаданныеОбъекта.ВидИерархии
		     <> Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли НЕ ЭтоПланВидовХарактеристик(МетаданныеОбъекта) Тогда
		Возврат Ложь;
		
	ИначеЕсли НЕ МетаданныеОбъекта.Иерархический Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Ссылка <> Объект Тогда
		Возврат Объект.ЭтоГруппа;
	КонецЕсли;
	
	Возврат ЗначениеРеквизитаОбъекта(Ссылка, "ЭтоГруппа");
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Справочник".
//
// Параметры:
//  ОбъектМетаданных - объект метаданных, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
&НаСервереБезКонтекста
Функция ЭтоСправочник(ОбъектМетаданных)
	
	Возврат ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) = ИмяТипаСправочники();
	
КонецФункции

// Проверка того, что тип имеет ссылочный тип данных.
//
&НаСервереБезКонтекста
Функция ЭтоСсылка(Тип)
	
	Возврат Тип <> Тип("Неопределено") 
		И (Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип));
	
КонецФункции

// Проверить, что значение имеет ссылочный тип данных.
//
// Параметры:
//  Значение       - ссылка на объект, - элемент справочника, документ, ...
//
// Возвращаемое значение:
//  Булево       - Истина, если тип значения ссылочный.
//
&НаСервереБезКонтекста
Функция ЗначениеСсылочногоТипа(Значение)
	
	Если Значение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "План видов характеристик".
//
// Параметры:
//  ОбъектМетаданных - объект метаданных, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
&НаСервереБезКонтекста
Функция ЭтоПланВидовХарактеристик(ОбъектМетаданных)
	
	Возврат ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) = ИмяТипаПланыВидовХарактеристик();
	
КонецФункции

// Возвращает имя базового типа по переданному значению объекта метаданных.
//
// Параметры:
//  ОбъектМетаданных - объект метаданных, по которому необходимо определить базовый тип.
// 
// Возвращаемое значение:
//  Строка - имя базового типа по переданному значению объекта метаданных.
//
&НаСервереБезКонтекста
Функция ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных)
	
	Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаДокументы();
		
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаСправочники();
		
	ИначеЕсли Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПеречисления();
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыСведений();
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыНакопления();
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыБухгалтерии();
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыРасчета();
		
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыОбмена();
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыВидовХарактеристик();
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаБизнесПроцессы();
		
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаЗадачи();
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыСчетов();
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыВидовРасчета();
		
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаКонстанты();
		
	ИначеЕсли Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаЖурналыДокументов();
		
	ИначеЕсли Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПоследовательности();
		
	ИначеЕсли Метаданные.РегламентныеЗадания.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегламентныеЗадания();
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

// Возвращает значение для идентификации общего типа "Регистры сведений".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаРегистрыСведений()
	
	Возврат "РегистрыСведений";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Регистры накопления".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаРегистрыНакопления()
	
	Возврат "РегистрыНакопления";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Регистры бухгалтерии".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаРегистрыБухгалтерии()
	
	Возврат "РегистрыБухгалтерии";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Регистры расчета".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаРегистрыРасчета()
	
	Возврат "РегистрыРасчета";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Документы".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаДокументы()
	
	Возврат "Документы";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Справочники".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаСправочники()
	
	Возврат "Справочники";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Перечисления".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаПеречисления()
	
	Возврат "Перечисления";
	
КонецФункции

// Возвращает значение для идентификации общего типа "ПланыОбмена".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаПланыОбмена()
	
	Возврат "ПланыОбмена";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Планы видов характеристик".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаПланыВидовХарактеристик()
	
	Возврат "ПланыВидовХарактеристик";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Бизнес-процессы".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаБизнесПроцессы()
	
	Возврат "БизнесПроцессы";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Задачи".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаЗадачи()
	
	Возврат "Задачи";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Планы счетов".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаПланыСчетов()
	
	Возврат "ПланыСчетов";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Планы видов расчета".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаПланыВидовРасчета()
	
	Возврат "ПланыВидовРасчета";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Константы".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаКонстанты()
	
	Возврат "Константы";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Журналы документов".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаЖурналыДокументов()
	
	Возврат "ЖурналыДокументов";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Последовательности".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаПоследовательности()
	
	Возврат "Последовательности";
	
КонецФункции

// Возвращает значение для идентификации общего типа "РегламентныеЗадания".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаРегламентныеЗадания()
	
	Возврат "РегламентныеЗадания";
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка    - Ссылка на объект - элемент справочника, документ, ...
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//
&НаСервереБезКонтекста
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты)
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = СтрРазделить(Реквизиты, ",", Ложь);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"), Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)
	
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
	
КонецФункции 

// Возвращает ссылку на общий модуль по имени.
//
// Параметры:
//  Имя          - Строка - имя общего модуля, например:
//                 "ОбщегоНазначения",
//                 "ОбщегоНазначенияКлиент".
//
// Возвращаемое значение:
//  ОбщийМодуль.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОбщийМодуль(Имя)
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		Модуль = Вычислить(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru = 'Общий модуль ""%1"" не найден.'"), Имя);
	КонецЕсли;
#Иначе
	Модуль = Вычислить(Имя);
#Если НЕ ВебКлиент Тогда
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru = 'Общий модуль ""%1"" не найден.'"), Имя);
	КонецЕсли;
#КонецЕсли
#КонецЕсли
	
	Возврат Модуль;
	
КонецФункции

// Возвращает Истина, если подсистема существует.
//
// Параметры:
//  ПолноеИмяПодсистемы - Строка. Полное имя объекта метаданных подсистема без слов "Подсистема.".
//                        Например: "СтандартныеПодсистемы.БазоваяФункциональность".
//
// Пример вызова необязательной подсистемы:
//
//  Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
//  	МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
//  	МодульУправлениеДоступом.<Имя метода>();
//  КонецЕсли;
//
// Возвращаемое значение:
//  Булево.
//
&НаСервере
Функция ПодсистемаСуществует(ПолноеИмяПодсистемы)
	
	Если Не ВерсияБСПСоответствуетТребованиям() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИменаПодсистем = ИменаПодсистем();
	Возврат ИменаПодсистем.Получить(ПолноеИмяПодсистемы) <> Неопределено;
	
КонецФункции

// Возвращает соответствие имен подсистем и значения Истина;
&НаСервереБезКонтекста
Функция ИменаПодсистем()
	
	Возврат Новый ФиксированноеСоответствие(ИменаПодчиненныхПодсистем(Метаданные));
	
КонецФункции

&НаСервереБезКонтекста
Функция ИменаПодчиненныхПодсистем(РодительскаяПодсистема)
	
	Имена = Новый Соответствие;
	
	Для Каждого ТекущаяПодсистема Из РодительскаяПодсистема.Подсистемы Цикл
		
		Имена.Вставить(ТекущаяПодсистема.Имя, Истина);
		ИменаПодчиненных = ИменаПодчиненныхПодсистем(ТекущаяПодсистема);
		
		Для каждого ИмяПодчиненной Из ИменаПодчиненных Цикл
			Имена.Вставить(ТекущаяПодсистема.Имя + "." + ИмяПодчиненной.Ключ, Истина);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Имена;
	
КонецФункции

// Возвращает строковое представление типа. 
// Для ссылочных типов возвращает в формате "СправочникСсылка.ИмяОбъекта" или "ДокументСсылка.ИмяОбъекта".
// Для остальных типов приводит тип к строке, например "Число".
//
&НаСервереБезКонтекста
Функция СтроковоеПредставлениеТипа(Тип)
	
	Представление = "";
	
	Если ЭтоСсылка(Тип) Тогда
	
		ПолноеИмя = Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
		ИмяОбъекта = СтрРазделить(ПолноеИмя, ".")[1];
		
		Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "СправочникСсылка";
		
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ДокументСсылка";
		
		ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "БизнесПроцессСсылка";
		
		ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланВидовХарактеристикСсылка";
		
		ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланСчетовСсылка";
		
		ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланВидовРасчетаСсылка";
		
		ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ЗадачаСсылка";
		
		ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланОбменаСсылка";
		
		ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПеречислениеСсылка";
		
		КонецЕсли;
		
		Результат = ?(Представление = "", Представление, Представление + "." + ИмяОбъекта);
		
	Иначе
		
		Результат = Строка(Тип);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Преобразует текст формата XML в таблицу значений,
// при этом колонки таблицы формируются на основе описания в XML.
//
// Параметры:
//  XML     - текст в формате XML или ЧтениеXML.
//
// Схема XML:
// <?xml version="1.0" encoding="utf-8"?>
//  <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
//   <xs:element name="Items">
//    <xs:complexType>
//     <xs:sequence>
//      <xs:element maxOccurs="unbounded" name="Item">
//       <xs:complexType>
//        <xs:attribute name="Code" type="xs:integer" use="required" />
//        <xs:attribute name="Name" type="xs:string" use="required" />
//        <xs:attribute name="Socr" type="xs:string" use="required" />
//        <xs:attribute name="Index" type="xs:string" use="required" />
//       </xs:complexType>
//      </xs:element>
//     </xs:sequence>
//    <xs:attribute name="Description" type="xs:string" use="required" />
//    <xs:attribute name="Columns" type="xs:string" use="required" />
//   </xs:complexType>
//  </xs:element>
// </xs:schema>
//
// Примеры XML-файлов см. в демонстрационной конфигурации.
// 
// Пример использования:
//   КлассификаторТаблица = ПрочитатьXMLВТаблицу(РегистрыСведений.АдресныйКлассификатор.
//       ПолучитьМакет("КлассификаторАдресныхОбъектовРоссии").ПолучитьТекст());
//
// Возвращаемое значение:
//  Структура с полями 
//   ИмяТаблицы - Строка
//   Данные - ТаблицаЗначений.
//
&НаСервереБезКонтекста
Функция ПрочитатьXMLВТаблицу(Знач XML)
	
	Если ТипЗнч(XML) <> Тип("ЧтениеXML") Тогда
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(XML);
	Иначе
		Чтение = XML;
	КонецЕсли;
	
	// Прочитаем первый узел и проверим его.
	Если Не Чтение.Прочитать() Тогда
		ВызватьИсключение НСтр("ru = 'Пустой XML'");
	ИначеЕсли Чтение.Имя <> "Items" Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
	КонецЕсли;
	
	// Получим описание таблицы и создадим ее.
	ИмяТаблицы = Чтение.ПолучитьАтрибут("Description");
	ИменаКолонок = СтрЗаменить(Чтение.ПолучитьАтрибут("Columns"), ",", Символы.ПС);
	Колонок = СтрЧислоСтрок(ИменаКолонок);
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Сч = 1 По Колонок Цикл
		ТаблицаЗначений.Колонки.Добавить(СтрПолучитьСтроку(ИменаКолонок, Сч), Новый ОписаниеТипов("Строка"));
	КонецЦикла;
	
	// Заполним значения в таблице.
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Items" Тогда
			Прервать;
		ИначеЕсли Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		ИначеЕсли Чтение.Имя <> "Item" Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
		КонецЕсли;
		
		новСтр = ТаблицаЗначений.Добавить();
		Для Сч = 1 По Колонок Цикл
			ИмяКолонки = СтрПолучитьСтроку(ИменаКолонок, Сч);
			новСтр[Сч-1] = Чтение.ПолучитьАтрибут(ИмяКолонки);
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполним результат
	Результат = Новый Структура;
	Результат.Вставить("ИмяТаблицы", ИмяТаблицы);
	Результат.Вставить("Данные", ТаблицаЗначений);
	
	Возврат Результат;
	
КонецФункции

//	Преобразует таблицу значений в массив.
//	Может использоваться для передачи на клиента данных, полученных
//	на сервере в виде таблицы значений в том случае, если таблица
//	значений содержит только такие значения, которые могут
//  быть переданы на клиента.
//
//	Полученный массив содержит структуры, каждая из которых повторяет
//	структуру колонок таблицы значений.
//
//	Не рекомендуется использовать для преобразования таблиц значений
//	с большим количеством строк.
//
//	Параметры: ТаблицаЗначений
//	Возвращаемое значение: Массив.
//
&НаСервереБезКонтекста
Функция ТаблицаЗначенийВМассив(ТаблицаЗначений)
	
	Массив = Новый Массив();
	СтруктураСтрокой = "";
	НужнаЗапятая = Ложь;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если НужнаЗапятая Тогда
			СтруктураСтрокой = СтруктураСтрокой + ",";
		КонецЕсли;
		СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
		НужнаЗапятая = Истина;
	КонецЦикла;
	Для Каждого Строка Из ТаблицаЗначений Цикл
		НоваяСтрока = Новый Структура(СтруктураСтрокой);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Массив.Добавить(НоваяСтрока);
	КонецЦикла;
	Возврат Массив;

КонецФункции

// Форматирует строку в соответствии с заданным шаблоном.
// Возможные значения тегов выделения:
//	<b> Строка </b> - выделяет строку жирным шрифтом.
//	<a href = "Ссылка"> Строка </a>
//
// Пример:
//	Минимальная версия программы <b>1.1</b>. <a href = "Обновление">Обновите</a> программу.
//
// Возвращаемое значение:
//	ФорматированнаяСтрока
Функция ФорматированнаяСтрока(Знач Строка)
	
	СтрокиСВыделением = Новый СписокЗначений;
	Пока СтрНайти(Строка, "<b>") <> 0 Цикл
		НачалоВыделения = СтрНайти(Строка, "<b>");
		СтрокаДоОткрывающегоТега = Лев(Строка, НачалоВыделения - 1);
		СтрокиСВыделением.Добавить(СтрокаДоОткрывающегоТега);
		СтрокаПослеОткрывающегоТега = Сред(Строка, НачалоВыделения + 3);
		КонецВыделения = СтрНайти(СтрокаПослеОткрывающегоТега, "</b>");
		ВыделенныйФрагмент = Лев(СтрокаПослеОткрывающегоТега, КонецВыделения - 1);
		СтрокиСВыделением.Добавить(ВыделенныйФрагмент,, Истина);
		СтрокаПослеВыделения = Сред(СтрокаПослеОткрывающегоТега, КонецВыделения + 4);
		Строка = СтрокаПослеВыделения;
	КонецЦикла;
	СтрокиСВыделением.Добавить(Строка);
	
	СтрокиСоСсылками = Новый СписокЗначений;
	Для Каждого ЧастьСтроки Из СтрокиСВыделением Цикл
		
		Строка = ЧастьСтроки.Значение;
		
		Если ЧастьСтроки.Пометка Тогда
			СтрокиСоСсылками.Добавить(Строка,, Истина);
			Продолжить;
		КонецЕсли;
		
		НачалоВыделения = СтрНайти(Строка, "<a href = ");
		Пока НачалоВыделения <> 0 Цикл
			СтрокаДоОткрывающегоТега = Лев(Строка, НачалоВыделения - 1);
			СтрокиСоСсылками.Добавить(СтрокаДоОткрывающегоТега, );
			
			СтрокаПослеОткрывающегоТега = Сред(Строка, НачалоВыделения + 9);
			ЗакрывающийТег = СтрНайти(СтрокаПослеОткрывающегоТега, ">");
			
			Ссылка = СокрЛП(Лев(СтрокаПослеОткрывающегоТега, ЗакрывающийТег - 2));
			Если СтрНачинаетсяС(Ссылка, """") Тогда
				Ссылка = Сред(Ссылка, 2, СтрДлина(Ссылка) - 1);
			КонецЕсли;
			Если СтрЗаканчиваетсяНа(Ссылка, """") Тогда
				Ссылка = Сред(Ссылка, 1, СтрДлина(Ссылка) - 1);
			КонецЕсли;
			
			СтрокаПослеСсылки = Сред(СтрокаПослеОткрывающегоТега, ЗакрывающийТег + 1);
			КонецВыделения = СтрНайти(СтрокаПослеСсылки, "</a>");
			ТекстСсылки = Лев(СтрокаПослеСсылки, КонецВыделения - 1);
			СтрокиСоСсылками.Добавить(ТекстСсылки, Ссылка);
			
			СтрокаПослеВыделения = Сред(СтрокаПослеСсылки, КонецВыделения + 4);
			Строка = СтрокаПослеВыделения;
			
			НачалоВыделения = СтрНайти(Строка, "<a href = ");
		КонецЦикла;
		СтрокиСоСсылками.Добавить(Строка);
		
	КонецЦикла;
	
	МассивСтроки = Новый Массив;
	Для Каждого ЧастьСтроки Из СтрокиСоСсылками Цикл
		
		Если ЧастьСтроки.Пометка Тогда
			МассивСтроки.Добавить(Новый ФорматированнаяСтрока(ЧастьСтроки.Значение, Новый Шрифт(,,Истина)));
		ИначеЕсли Не ПустаяСтрока(ЧастьСтроки.Представление) Тогда
			МассивСтроки.Добавить(Новый ФорматированнаяСтрока(ЧастьСтроки.Значение,,,, ЧастьСтроки.Представление));
		Иначе
			МассивСтроки.Добавить(ЧастьСтроки.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(МассивСтроки);
	
КонецФункции

// Возвращает текстовое представление числа с единицей измерения в правильном склонении и числе.
//
// Параметры:
//  Число                       - Число  - любое целое число.
//  ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном падеже для одной,
//                                         для двух и для пяти единиц, разделитель - запятая.
//
// Возвращаемое значение:
//  Строка - текстовое представление количества единиц, число записывается цифрами.
//
// Примеры:
//  ЧислоЦифрамиПредметИсчисленияПрописью(23,  "минуту,минуты,минут") = "23 минуты";
//  ЧислоЦифрамиПредметИсчисленияПрописью(15,  "минуту,минуты,минут") = "15 минут".
Функция ЧислоЦифрамиПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления)

	Результат = Формат(Число, "ЧН=0");
	ПредставленияПредмета = Новый Массив;
	
	ПараметрыПредметаИсчисления = СтрРазделить(ПараметрыПредметаИсчисления, ",");
	Для Каждого Параметр Из ПараметрыПредметаИсчисления Цикл
		ПредставленияПредмета.Добавить(СокрЛП(Параметр));
	КонецЦикла;
	
	Число = Число % 100;
	Если Число > 20 Тогда
		Число = Число % 10;
	КонецЕсли;
	
	Индекс = ?(Число = 1, 0, ?(Число > 1 И Число < 5, 1, 2));
	Результат = Результат + " " + ПредставленияПредмета[Индекс];
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВерсияБСПСоответствуетТребованиям()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ВерсияБСПСоответствуетТребованиям();
КонецФункции

&НаСервере
Функция ПроверитьВерсиюИРежимСовместимостиПлатформы()
	
	Информация = Новый СистемнаяИнформация;
	Если Не (Лев(Информация.ВерсияПриложения, 3) = "8.3"
		И (Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать
		Или (Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_1
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_13
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_2_16"]
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_3_1"]
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_3_2"]))) Тогда
		
		ВызватьИсключение НСтр("ru = 'Обработка предназначена для запуска на версии платформы
			|1С:Предприятие 8.3 с отключенным режимом совместимости или выше'");
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция КартинкаВидыОпераций()
	Если ВерсияБСПСоответствуетТребованиям() Тогда
		Возврат БиблиотекаКартинок["ВидыОпераций"];
	Иначе
		Возврат Новый Картинка;
	КонецЕсли;
КонецФункции

#КонецОбласти
