&НаКлиенте
Перем ПараметрыОбработчика;

&НаКлиенте
Перем ПодтверждениеЗакрытияФормы;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Сценарий = "ПоискСсылок" ИЛИ Параметры.Сценарий = "ВставкаИзБуфераОбмена" Тогда
		ТипЗагрузки = "ВставкаИзБуфераОбмена";
	ИначеЕсли ЗначениеЗаполнено(Параметры.ПолноеИмяТабличнойЧасти) Тогда
		ТипЗагрузки = "ТабличнаяЧасть";
	ИначеЕсли НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		ВызватьИсключение(НСтр("ru = 'Недостаточно прав для открытия загрузки данных из файла'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СоздаватьЕслиНеСопоставлено = 1;
	ОбновлятьСуществующие = 0;
	ПодтверждениеЗакрытияФормы = Неопределено;
	ДополнительныеПараметры = Параметры.ДополнительныеПараметры;
	
	УстановитьОформлениеДанных();
	СтандартныеПодсистемыСервер.УстановитьОтображениеЗаголовковГрупп(ЭтотОбъект);
	УстановитьВидимостьЭлементовФормы();
	
	Если ТипЗагрузки = "ВставкаИзБуфераОбмена" Тогда
		ИнициализацияВставкиИзБуфераОбмена();
	ИначеЕсли ТипЗагрузки = "ТабличнаяЧасть" Тогда
		ИмяОбъектаСопоставления = Обработки.ЗагрузкаДанныхИзФайла.ПолноеИмяОбъектаТабличнаяЧасть(Параметры.ПолноеИмяТабличнойЧасти);
		
		ТаблицаИнформацияПоКолонкам = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЗагрузкаДанныхИзФайла", ИмяОбъектаСопоставления,, ИмяПользователя());
		Если ТаблицаИнформацияПоКолонкам = Неопределено Тогда
			ТаблицаИнформацияПоКолонкам = РеквизитФормыВЗначение("ИнформацияПоКолонкам");
		КонецЕсли;
		
		ПараметрыЗагрузки = Новый Структура;
		ПараметрыЗагрузки.Вставить("ТипЗагрузки", ТипЗагрузки);
		ПараметрыЗагрузки.Вставить("ПолноеИмяОбъекта", ИмяОбъектаСопоставления);
		ПараметрыЗагрузки.Вставить("Макет", Параметры.ИмяМакетаСШаблоном);
		ПараметрыЗагрузки.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
		
		Если Параметры.Свойство("КолонкиМакета") И Параметры.КолонкиМакета <> Неопределено Тогда
			ОпределитьДинамическийМакет(ТаблицаИнформацияПоКолонкам, Параметры.КолонкиМакета);
			Элементы.ИзменитьБланк.Видимость = Ложь;
			Элементы.ИзменитьБланкЗаполнениеТаблицы.Видимость = Ложь;
			ЗагрузкаДанныхИзФайла.ДобавитьСтатистическуюИнформацию("РежимЗапуска.ЗагрузкаВТабличнуюЧасть.ДинамическийМакет",, Параметры.ПолноеИмяТабличнойЧасти);
		Иначе
			Обработки.ЗагрузкаДанныхИзФайла.ОпределитьИнформацияПоКолонкам(ПараметрыЗагрузки, ТаблицаИнформацияПоКолонкам);
			ИзменитьБланкПоИнформацииПоКолонкам();
			ЗагрузкаДанныхИзФайла.ДобавитьСтатистическуюИнформацию("РежимЗапуска.ЗагрузкаВТабличнуюЧасть.СтатическийМакет",, Параметры.ПолноеИмяТабличнойЧасти);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ЗначениеВРеквизитФормы(ТаблицаИнформацияПоКолонкам, "ИнформацияПоКолонкам");
		
		ПоказатьИнформационнуюСтрокуПроОбязательныеКолонки();
		ИзменитьБланкПоИнформацииПоКолонкам();
		
	Иначе
		ЗаполнитьСписокВидЗагрузкиДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ПодтверждениеЗакрытияФормы <> Неопределено Тогда
		Если ПодтверждениеЗакрытияФормы <> Истина Тогда
			Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыЗавершение", ЭтотОбъект);
			Отказ = Истина;
			ТекстВопроса = НСтр("ru = 'Введенные данные не будут записаны. Закрыть форму?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			Если ОткрытьСправочникПослеЗакрытияПомощника Тогда 
				ОткрытьФорму(ФормаСписка(ИмяОбъектаСопоставления));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФильтрОтчетПриИзменении(Элемент)

	ФоновоеЗаданиеОтчетНаКлиенте();
	
	Если ФильтрОтчет = "Пропущенные" Тогда 
		Элементы.ИзменитьРеквизиты.Доступность=Ложь;
	Иначе
		Элементы.ИзменитьРеквизиты.Доступность=Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФильтрТаблицаСопоставленияПриИзменении(Элемент)
	УстановитьФильтрациюТаблицыСопоставления();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФильтрациюТаблицыСопоставления()

	Фильтр = ФильтрТаблицаСопоставления;
	
	Если ТипЗагрузки = "ТабличнаяЧасть" Тогда
		Если Фильтр = "Сопоставленные" Тогда
			Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура("РезультатСопоставленияСтроки", "СтрокаСопоставлена");
		ИначеЕсли Фильтр = "Несопоставленные" Тогда 
			Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура("РезультатСопоставленияСтроки", "Не");
		ИначеЕсли Фильтр = "Неоднозначные" Тогда 
			Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура("РезультатСопоставленияСтроки", "Неоднозначность");
		Иначе
			Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Неопределено;
		КонецЕсли;
	ИначеЕсли ТипЗагрузки = "ВставкаИзБуфераОбмена" Тогда
		Если Фильтр = "Сопоставленные" Тогда 
			Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура("РезультатСопоставленияСтроки", "СтрокаСопоставлена");
		ИначеЕсли Фильтр = "Несопоставленные" Тогда
			Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура("РезультатСопоставленияСтроки", "Не");
		ИначеЕсли Фильтр = "Неоднозначные" Тогда
			Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура("РезультатСопоставленияСтроки", "Неоднозначность");
		Иначе
			Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Неопределено;
		КонецЕсли;
	Иначе
		Если Фильтр = "Сопоставленные" Тогда 
			Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура("РезультатСопоставленияСтроки", "СтрокаСопоставлена");
		ИначеЕсли Фильтр = "Несопоставленные" Тогда 
			Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура("РезультатСопоставленияСтроки", "Не");
		ИначеЕсли Фильтр = "Неоднозначные" Тогда 
			Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура("РезультатСопоставленияСтроки", "Неоднозначность"); 
		Иначе
			Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Неопределено;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура СписокКолонокСопоставленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если СопоставитьПоКолонке.Количество() = 0 Тогда
		Для каждого строка Из ИнформацияПоКолонкам Цикл
			ПредставлениеКолонки = ?(ПустаяСтрока(Строка.Синоним), Строка.ПредставлениеКолонки, Строка.Синоним);
			СопоставитьПоКолонке.Добавить(строка.ИмяКолонки, ПредставлениеКолонки);
		КонецЦикла;
	КонецЕсли;
	ПараметрыФормы  = Новый Структура("СписокКолонок", СопоставитьПоКолонке);
	ОписаниеОповещения  = Новый ОписаниеОповещения("ПослеВыбораКолонокДляСопоставления", ЭтотОбъект);
	ОткрытьФорму("Обработка.ЗагрузкаДанныхИзФайла.Форма.ВыборКолонок", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКолонокДляСопоставления(Результат, Параметр) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		 
	СопоставитьПоКолонке = Результат;
	КолонкиВСтроку = "";
	Разделитель = "";
	КоличествоВыбранныхКолонок = 0;
	Для каждого Элемент Из СопоставитьПоКолонке Цикл 
		Если Элемент.Пометка Тогда 
			КолонкиВСтроку = КолонкиВСтроку + Разделитель + Элемент.Представление;
			Разделитель = ", ";
			КоличествоВыбранныхКолонок = КоличествоВыбранныхКолонок + 1;
		КонецЕсли;
	КонецЦикла;
	
	СписокКолонокСопоставления = КолонкиВСтроку;
	ВыполнитьСопоставление();
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗагрузкиПриИзменении(Элемент)
	
	Если ВариантЗагрузки = 0 Тогда
		Элементы.СтраницыЗаполненияДанных.ТекущаяСтраница = Элементы.СтраницаВариантЗаполнениеТаблицы;
	Иначе
		Элементы.СтраницыЗаполненияДанных.ТекущаяСтраница = Элементы.СтраницаВариантЗагрузкаИзФайла;
	КонецЕсли;
	
	ПоказатьИнформационнуюСтрокуПроОбязательныеКолонки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыШаблонСДанными

&НаКлиенте
Процедура ШаблонСДаннымиПриАктивизацииОбласти(Элемент)
	Элемент.Защита = ?(Элемент.ТекущаяОбласть.Верх > ВысотаШапкиШаблонаСДанными, Ложь, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтменитьСопоставление(Команда)
	Оповещение = Новый ОписаниеОповещения("ПослеВопросаПроОтменитьСопоставление", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Отменить сопоставление?'"), РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьБланк(Команда)
	ОткрытьФормуИзмененияБланка();
КонецПроцедуры

&НаКлиенте
Процедура УстранитьНеоднозначность(Команда)
	ОткрытьФормуРазрешенияНеоднозначности(Элементы.ТаблицаСопоставленияДанных.ТекущаяСтрока,Элементы.ТаблицаСопоставленияДанных.ТекущийЭлемент.Имя, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВставитьВСписок(Команда)
	ЗакрытьФормуИВернутьМассивСсылок();
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	ПереходКСледующемуШагуЗагрузкиДанных();
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОДобавлениеВТабличнуюЧасть(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		АдресЗагруженныхДанных = АдресВХранилищеТаблицыСопоставления();
		Закрыть(АдресЗагруженныхДанных);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСопоставленияИзВременногоХранилища()
	СопоставленныеДанные = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	ЗначениеВРеквизитФормы(СопоставленныеДанные, "ТаблицаСопоставленияДанных");
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуИВернутьМассивСсылок()
	ПодтверждениеЗакрытияФормы = Истина;
	МассивСсылок = Новый Массив;
	Для каждого Строка Из ТаблицаСопоставленияДанных Цикл
		Если ЗначениеЗаполнено(Строка.ОбъектСопоставления) Тогда
			МассивСсылок.Добавить(Строка.ОбъектСопоставления);
		КонецЕсли;
	КонецЦикла;
	
	Закрыть(МассивСсылок);
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ЗаполнениеТаблицыДанными Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ВыборСправочникаДляЗагрузки;
		Элементы.Назад.Видимость = Ложь;
		ЭтотОбъект.Заголовок = НСтр("ru = 'Загрузка данных в справочник'");
		ОчиститьТаблицу();
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СопоставлениеЗагружаемыхДанных ИЛИ Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.НеНайдено Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ЗаполнениеТаблицыДанными; 
		Элементы.ВставитьВСписок.Видимость = Ложь;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		Элементы.Далее.Видимость = Истина;
		Если ТипЗагрузки = "ВставкаИзБуфераОбмена" Тогда 
			Элементы.Далее.Заголовок = НСтр("ru = 'Вставить в список'");
		Иначе
			Элементы.Далее.Заголовок = НСтр("ru = 'Далее >'");
		КонецЕсли;
		Если ТипЗагрузки = "ТабличнаяЧасть" ИЛИ ТипЗагрузки = "ВставкаИзБуфераОбмена" Тогда
			Элементы.Назад.Видимость = Ложь;
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ОтчетОЗагрузкеДанных Тогда
		Элементы.ОткрытьСправочникПослеЗакрытияПомощника.Видимость = Ложь;
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СопоставлениеЗагружаемыхДанных;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьШаблонВФайл(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьШаблонВФайлЗавершение", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШаблонИзФайла(Команда)
	
	ИмяФайла = СформироватьИмяФайлаДляОбъектаМетаданных(ИмяОбъектаСопоставления);
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьДанныеИзФайлаВШаблон", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ДиалогЗагрузкиФайла(Оповещение, ИмяФайла);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

/////////////////////////////////////// КЛИЕНТ ///////////////////////////////////////////

// Завершение диалога закрытия формы.
&НаКлиенте
Процедура ЗакрытиеФормыЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПодтверждениеЗакрытияФормы = Истина;
		Закрыть();
	Иначе 
		ПодтверждениеЗакрытияФормы = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереходКСледующемуШагуЗагрузкиДанных()
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ВыборСправочникаДляЗагрузки Тогда
		ОписаниеСтрокиВыбора = Элементы.ВидЗагрузкиДанных.ТекущиеДанные.Значение;
		ВыполнитьШагЗаполнениеТаблицыДаннымиНаСервере(ОписаниеСтрокиВыбора);
		ВыполнитьШагЗаполнениеТаблицыДаннымиНаКлиенте();
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ЗаполнениеТаблицыДанными Тогда
		ВыполнитьШагСопоставлениеЗагружаемыхДанных();
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.РезультатыСопоставления Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СопоставлениеЗагружаемыхДанных;
		Элементы.ВставитьВСписок.Видимость = Ложь;
		Элементы.Далее.Заголовок = НСтр("ru = 'Вставить в список'");
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		Элементы.Назад.Заголовок = НСтр("ru = '< В начало'");
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СопоставлениеЗагружаемыхДанных Тогда
		Элементы.ВставитьВСписок.Видимость = Ложь;
		ПодтверждениеЗакрытияФормы = Истина;
		Если ТипЗагрузки = "ТабличнаяЧасть" Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("РезультатСопоставленияСтроки", "НеСопоставлен");
			Отбор.Вставить("РезультатСопоставленияСтроки", "Неоднозначность");
			Если УстановитьОформлениеДляПолейСНеоднозначностью(Отбор) Тогда
				ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаОДобавлениеВТабличнуюЧасть", ЭтотОбъект),
					НСтр("ru = 'Строки в которых не заполнены обязательные колонки будут пропущены.'")
					+ Символы.ПС + НСтр("ru = 'Продолжить?'"), РежимДиалогаВопрос.ДаНет);
				Возврат;
			КонецЕсли;

			АдресЗагруженныхДанных = АдресВХранилищеТаблицыСопоставления();
			Закрыть(АдресЗагруженныхДанных);
		ИначеЕсли ТипЗагрузки = "ВставкаИзБуфераОбмена" Тогда
			Элементы.Назад.Заголовок = НСтр("ru = '< В начало_'");
			ЗакрытьФормуИВернутьМассивСсылок();
		Иначе
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ДлительныеОперации;
			ЗаписатьЗагружаемыеДанныеКлиент();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьОформлениеДляПолейСНеоднозначностью(Отбор)
	
	Строки = ТаблицаСопоставленияДанных.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		СписокКолонок = Новый Массив;
		Для каждого СтрокаДанных Из Строки Цикл
			Если СтрСравнить(СтрокаДанных.РезультатСопоставленияСтроки, "Неоднозначность") = 0 Тогда
				МассивКолонок = СтрРазделить(СтрокаДанных.ОписаниеОшибки, ";", Ложь);
				Для каждого ИмяКолонки Из МассивКолонок Цикл
					СписокКолонок.Добавить(ИмяКолонки);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьОформлениеДанных(СписокКолонок);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПослеСопоставленияНеоднозначностей(Результат, Параметр) Экспорт
	
	Если ТипЗагрузки  = "ТабличнаяЧасть" Тогда
		Если Результат <> Неопределено Тогда
			Строка = ТаблицаСопоставленияДанных.НайтиПоИдентификатору(Параметр.Идентификатор);
			
			Строка["ТЧ_" +  Параметр.Имя] = Результат;
			Строка.ОписаниеОшибки = СтрЗаменить(Строка.ОписаниеОшибки, Параметр.Имя+";", "");
			Строка.РезультатСопоставленияСтроки = ?(СтрДлина(Строка.ОписаниеОшибки) = 0, "СтрокаСопоставлена", "НеСопоставлен");
		КонецЕсли;
	Иначе
		Строка = ТаблицаСопоставленияДанных.НайтиПоИдентификатору(Параметр.Идентификатор);
		Строка.ОбъектСопоставления = Результат;
		Если Результат <> Неопределено Тогда
			Строка.РезультатСопоставленияСтроки = "СтрокаСопоставлена";
			Строка.СписокНеоднозначностей = Неопределено;
		Иначе 
			Если Строка.РезультатСопоставленияСтроки <> "Неоднозначность" Тогда 
				Строка.РезультатСопоставленияСтроки = "НеСопоставлен";
				Строка.СписокНеоднозначностей = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьСтатистикуПоСопоставлениюЗагрузкаИзФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСопоставление()
	КоличествоСопоставленныхПоКолонкам = 0;
	СписокКолонок = "";
	ВыполнитьСопоставлениеПоВыбранномуРеквизиту(КоличествоСопоставленныхПоКолонкам, СписокКолонок);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Выполнено сопоставление'"),, НСтр("ru = 'Сопоставлено элементов:'") + " " + Строка(КоличествоСопоставленныхПоКолонкам));
	ПоказатьСтатистикуПоСопоставлениюЗагрузкаИзФайла();
КонецПроцедуры

&НаКлиенте
Функция ВсеДанныеСопоставлены()
	Отбор = Новый Структура("РезультатСопоставленияСтроки", "СтрокаСопоставлена");
	Результат = ТаблицаСопоставленияДанных.НайтиСтроки(Отбор);
	КоличествоСопоставленных = Результат.Количество();
	
	Если ТаблицаСопоставленияДанных.Количество() = КоличествоСопоставленных Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СтатисткаСопоставления()
	Отбор = Новый Структура("РезультатСопоставленияСтроки", "СтрокаСопоставлена");
	Результат = ТаблицаСопоставленияДанных.НайтиСтроки(Отбор);
	КоличествоСопоставленных = Результат.Количество();
	
	Если ТипЗагрузки = "ВставкаИзБуфераОбмена" Тогда
		Отбор = Новый Структура("РезультатСопоставленияСтроки", "НеСопоставлен");
		Результат = ТаблицаСопоставленияДанных.НайтиСтроки(Отбор);
		КолоВоНеоднозначных  = ТаблицаСопоставленияДанных.Количество() - КоличествоСопоставленных - Результат.Количество();
	Иначе
		Отбор = Новый Структура("ОписаниеОшибки", "");
		Результат = ТаблицаСопоставленияДанных.НайтиСтроки(Отбор);
		КолоВоНеоднозначных  = ТаблицаСопоставленияДанных.Количество() - Результат.Количество();
	КонецЕсли;
	КоличествоНеСопоставленных = ТаблицаСопоставленияДанных.Количество() - КоличествоСопоставленных;
	
	Результат = Новый Структура;
	Результат.Вставить("Всего", ТаблицаСопоставленияДанных.Количество());
	Результат.Вставить("Сопоставленных", КоличествоСопоставленных);
	Результат.Вставить("Неоднозначных", КолоВоНеоднозначных);
	Результат.Вставить("Несопоставленных", КоличествоНеСопоставленных);
	Результат.Вставить("НеНайдено", КоличествоНеСопоставленных - КолоВоНеоднозначных);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСтатистикуПоСопоставлениюЗагрузкаИзФайла()
	
	Статистика = СтатисткаСопоставления();
	
	ДанныеОСопоставление = СтатисткаСопоставления();
	
	ТекстВсе = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Все (%1)'"), Статистика.Всего);
	
	Элементы.СоздаватьЕслиНеСопоставлено.Заголовок = НСтр("ru = 'Несопоставленные ('") + Статистика.НеСопоставленных + ")";
	Элементы.ОбновлятьСуществующиеЗаголовок.Заголовок = НСтр("ru = 'Сопоставленные элементы ('") + Строка(Статистика.Сопоставленных) + ")";
	
	СписокВыбора = Элементы.ФильтрТаблицаСопоставления.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("Все", ТекстВсе, Истина);
	СписокВыбора.Добавить("Несопоставленные", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Несопоставленные (%1 из %2)'"),
		Статистика.НеСопоставленных, Статистика.Всего));
	СписокВыбора.Добавить("Сопоставленные", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сопоставленные (%1 из %2)'"),
		Статистика.Сопоставленных, Статистика.Всего));
	СписокВыбора.Добавить("Неоднозначные", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неоднозначные (%1 из %2)'"),
		Статистика.Неоднозначных, Статистика.Всего));
	
	Если Статистика.Неоднозначных > 0 Тогда 
		Элементы.ОписаниеНеоднозначность.Видимость=Истина;
		Элементы.ОписаниеНеоднозначность.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '(неоднозначностей: %1)'"),
			Статистика.Неоднозначных);
	Иначе 
		Элементы.ОписаниеНеоднозначность.Видимость=Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФильтрТаблицаСопоставления) Тогда 
		ФильтрТаблицаСопоставления = "Несопоставленные";
	КонецЕсли;
	
	Если ТипЗагрузки = "ВставкаИзБуфераОбмена" Тогда
		УстановитьФильтрациюТаблицыСопоставления();
	Иначе
		УстановитьФильтрациюТаблицыСопоставления();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьШаблонВФайлЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораФайлаДляСохранения", ЭтотОбъект);
		ИмяФайла = СформироватьИмяФайлаДляОбъектаМетаданных(ИмяОбъектаСопоставления);
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбораФайла.Фильтр                      = НСтр("ru='Книга Excel 97 (*.xls)|*.xls|Книга Excel 2007 (*.xlsx)|*.xlsx|Электронная таблица OpenDocument (*.ods)|*.ods|Текстовый документ c разделителями (*.csv)|*.csv|Табличный документ (*.mxl)|*.mxl'");
		ДиалогВыбораФайла.Расширение                  = "xls";
		ДиалогВыбораФайла.МножественныйВыбор = Ложь;
		ДиалогВыбораФайла.ИндексФильтра               = 0;
		ДиалогВыбораФайла.ПолноеИмяФайла = ИмяФайла;
		ДиалогВыбораФайла.Показать(Оповещение);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораРасширенияФайла", ЭтотОбъект);
		ОткрытьФорму("Обработка.ЗагрузкаДанныхИзФайла.Форма.РасширениеФайла",, ЭтотОбъект, Истина,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ПутьКФайлу = "";
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////// СЕРВЕР ///////////////////////////////////////////

&НаСервере
Процедура ИнициализацияВставкиИзБуфераОбмена()
	ФильтрТаблицаСопоставления = "Несопоставленные";
	
	Если Параметры.Свойство("ПредставлениеПоля") Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Вставка из буфера обмена (%1)'"), Параметры.ПредставлениеПоля);
	Иначе
		Заголовок = НСтр("ru = 'Вставка из буфера обмена'");
	КонецЕсли;
	
	ЗагрузкаДанныхИзФайла.ДобавитьСтатистическуюИнформацию("РежимЗапуска.ВставкаИзБуфераОбмена");
	
	Обработки.ЗагрузкаДанныхИзФайла.УстановитьРежимВставкиИзБуфераОбмена(ШаблонСДанными, ИнформацияПоКолонкам, Параметры.ОписаниеТипов);
	СоздатьТаблицуСопоставленияПоИнформацииОКолонкахАвто(Параметры.ОписаниеТипов);
	
	Если ИнформацияПоКолонкам.Количество() = 1 Тогда
		Элементы.СтраницыЗаполненияДанных.ТекущаяСтраница = Элементы.СтраницаОднаКолонка;
		Элементы.ВариантЗагрузки.Видимость = Ложь;
		Элементы.ВставитьВСписок.Видимость = Ложь;
		Элементы.Далее.Заголовок = НСтр("ru = 'Вставить в список'");
	Иначе
		Элементы.СтраницыЗаполненияДанных.ТекущаяСтраница = Элементы.СтраницаМногоКолонок;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	ЭтотОбъект.Заголовок = ?(ПустаяСтрока(Параметры.Заголовок), НСтр("ru = 'Загрузка данных в справочник'"), Параметры.Заголовок);
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		Элементы.СтраницаВариантЗаполнениеТаблицы.Видимость = Ложь;
		Элементы.СтраницыЗаполненияДанных.ТекущаяСтраница = Элементы.СтраницаВариантЗагрузкаИзФайла;
		Элементы.ВариантЗагрузки.Видимость = Ложь;
		Элементы.ПояснениеДляВыбораСправочникаДляЗагрузки.Заголовок = НСтр("ru = 'Выбор справочника для загрузки данных из электронных таблиц, расположенных во внешних файлах 
		| (например: Microsoft Office Excel, OpenOffice Calc и др.).'");
		ВидЗагрузкиДанных = 1;
	КонецЕсли;
	
	Если ТипЗагрузки = "ВставкаИзБуфераОбмена" Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ЗаполнениеТаблицыДанными;
		Элементы.ГруппаНастройкиСопоставления.Видимость = Ложь;
		Элементы.СписокКолонокСопоставления.Видимость = Ложь;
		Элементы.Закрыть.Заголовок = НСтр("ru = 'Отмена'");
	ИначеЕсли ТипЗагрузки = "ТабличнаяЧасть" Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ЗаполнениеТаблицыДанными;
		Элементы.ГруппаНастройкиСопоставления.Видимость = Ложь;
		Элементы.СписокКолонокСопоставления.Видимость = Ложь;
	Иначе
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ВыборСправочникаДляЗагрузки;
	КонецЕсли;
	
КонецПроцедуры



#Область ШагВыборВариантаЗагрузки

&НаСервере
Процедура ЗаполнитьСписокВидЗагрузкиДанных()
	Обработки.ЗагрузкаДанныхИзФайла.СоздатьСписокСправочниковДляЗагрузки(СписокВариантовЗагрузки);
КонецПроцедуры 

#КонецОбласти

#Область ШагЗаполнениеТаблицыДанными

&НаКлиенте
Процедура ВыполнитьШагЗаполнениеТаблицыДаннымиНаКлиенте()
	
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ЗаполнениеТаблицыДанными;
	Элементы.Назад.Видимость = Истина;
	ВысотаШапкиШаблонаСДанными = ?(ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкиИмеютГруппировку(ИнформацияПоКолонкам), 2, 1);
	
КонецПроцедуры

&НаКлиенте
Функция ТаблицаСДаннымиПустая()
	Если ИнформацияПоКолонкам.Количество() = 1 И ШаблонСДанными.ВысотаТаблицы < 2 Тогда
		Если НЕ ЗначениеЗаполнено(ШаблонСДаннымиОднаКолонка) Тогда
			Возврат Истина;
		КонецЕсли;
		СкопироватьОднуКолонкуВШаблонСДанными();
	Иначе 
		Если ШаблонСДанными.ВысотаТаблицы < 2 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуИзмененияБланка()
	
	Перем Оповещение, ПараметрыФормы;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИнформацияПоКолонкам", ИнформацияПоКолонкам);
	ПараметрыФормы.Вставить("ИмяОбъектаСопоставления", ИмяОбъектаСопоставления);
	ПараметрыФормы.Вставить("ПараметрыЗагрузки", ПараметрыЗагрузки);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВызоваФормыИзменитьБланк", ЭтотОбъект);
	ОткрытьФорму("Обработка.ЗагрузкаДанныхИзФайла.Форма.РедактированиеБланка", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПолноеИмяОбъектаМетаданных(Имя)
	ОбъектМетаданных = Метаданные.Справочники.Найти(Имя);
	Если ОбъектМетаданных <> Неопределено Тогда 
		Возврат ОбъектМетаданных.ПолноеИмя();
	КонецЕсли;
	ОбъектМетаданных = Метаданные.Документы.Найти(Имя);
	Если ОбъектМетаданных <> Неопределено Тогда 
		Возврат ОбъектМетаданных.ПолноеИмя();
	КонецЕсли;
	ОбъектМетаданных = Метаданные.ПланыВидовХарактеристик.Найти(Имя);
	Если ОбъектМетаданных <> Неопределено Тогда 
		Возврат ОбъектМетаданных.ПолноеИмя();
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

&НаСервере
Процедура ВыполнитьШагЗаполнениеТаблицыДаннымиНаСервере(ОписаниеСтрокиВыбора)
	
	Если СтрНайти(ОписаниеСтрокиВыбора.ПолноеИмяОбъектаМетаданных, ".") > 0 Тогда
		ИмяОбъектаСопоставления = ОписаниеСтрокиВыбора.ПолноеИмяОбъектаМетаданных;
	Иначе
		ИмяОбъектаСопоставления = ПолучитьПолноеИмяОбъектаМетаданных(ОписаниеСтрокиВыбора.ПолноеИмяОбъектаМетаданных);
	КонецЕсли;
	
	ТипЗагрузки = ОписаниеСтрокиВыбора.Тип;
	Если ТипЗагрузки = "ВнешняяЗагрузка" Тогда
		ВнешняяОбработкаСсылка = ОписаниеСтрокиВыбора.Ссылка;
		ИдентификаторКоманды = ОписаниеСтрокиВыбора.Идентификатор;
	КонецЕсли;
	ЗагрузкаДанныхИзФайла.ДобавитьСтатистическуюИнформацию("РежимЗапуска.ЗагрузкаВСправочник." + ИмяОбъектаСопоставления,, ТипЗагрузки);
	
	СформироватьМакетПоТипуЗагрузки();
	СоздатьТаблицуСопоставленияПоИнформацииОКолонках();
	ПоказатьИнформационнуюСтрокуПроОбязательныеКолонки();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьМакетПоТипуЗагрузки()
	
	ПараметрыЗагрузки = Новый Структура;
	Если ТипЗагрузки = "УниверсальнаяЗагрузка" Тогда
		ЭтотОбъект.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Загрузка данных в справочник ""%1""'"), ПредставлениеСправочника(ИмяОбъектаСопоставления));
		ЭтотОбъект.АвтоЗаголовок = Ложь;
	ИначеЕсли ТипЗагрузки = "ПрикладнаяЗагрузка" Тогда
		ОпределитьПараметрыЗагрузки(ПараметрыЗагрузки);
		ЭтотОбъект.АвтоЗаголовок = Ложь;
		Если ПараметрыЗагрузки.Свойство("Заголовок") Тогда
			ЭтотОбъект.Заголовок = ПараметрыЗагрузки.Заголовок;
		Иначе
			ЭтотОбъект.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Загрузка данных в справочник ""%1""'"), ПредставлениеСправочника(ИмяОбъектаСопоставления));
		КонецЕсли;
	ИначеЕсли ТипЗагрузки = "ВнешняяЗагрузка" Тогда
		ПараметрыЗагрузки.Вставить("ИмяМакетаСШаблоном", "ЗагрузкаДанныхИзФайла");
		Обработки.ЗагрузкаДанныхИзФайла.ПараметрыЗагрузкиИзФайлаВнешняяОбработка(ИдентификаторКоманды,
			ВнешняяОбработкаСсылка, ПараметрыЗагрузки);
	КонецЕсли;
	ПараметрыЗагрузки.Вставить("ТипЗагрузки", ТипЗагрузки);
	ПараметрыЗагрузки.Вставить("ПолноеИмяОбъекта", ИмяОбъектаСопоставления);
	
	ИнформацияПоКолонкамТаблица = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЗагрузкаДанныхИзФайла", ИмяОбъектаСопоставления,, ИмяПользователя());
	Если ИнформацияПоКолонкамТаблица = Неопределено Тогда
		ИнформацияПоКолонкамТаблица = РеквизитФормыВЗначение("ИнформацияПоКолонкам");
	КонецЕсли;
	Обработки.ЗагрузкаДанныхИзФайла.ОпределитьИнформацияПоКолонкам(ПараметрыЗагрузки, ИнформацияПоКолонкамТаблица);
	ЗначениеВРеквизитФормы(ИнформацияПоКолонкамТаблица, "ИнформацияПоКолонкам");
	
	ИзменитьБланкПоИнформацииПоКолонкам();
КонецПроцедуры

&НаСервере
Процедура СохранитьТаблицуВCSVФайл(ПолноеИмяФайла)
	Обработки.ЗагрузкаДанныхИзФайла.СохранитьТаблицуВCSVФайл(ПолноеИмяФайла, ИнформацияПоКолонкам);
КонецПроцедуры

#КонецОбласти

#Область ШагСопоставлениеЗагруженныхДанных

&НаСервере
Процедура СкопироватьОднуКолонкуВШаблонСДанными()
	
	ОчисткаШаблонСДанными();
	
	КоличествоСтрок = СтрЧислоСтрок(ШаблонСДаннымиОднаКолонка);
	НомерСтрокиВШаблоне = 2;
	Для НомерСтроки = 1 По КоличествоСтрок Цикл 
		Строка = СтрПолучитьСтроку(ШаблонСДаннымиОднаКолонка, НомерСтроки);
		Если ЗначениеЗаполнено(Строка) Тогда
			Ячейка = ШаблонСДанными.ПолучитьОбласть(НомерСтрокиВШаблоне, 1, НомерСтрокиВШаблоне, 1);
			Ячейка.ТекущаяОбласть.Текст = Строка;
			ШаблонСДанными.Вывести(Ячейка);
			НомерСтрокиВШаблоне = НомерСтрокиВШаблоне + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СоздатьТаблицуСоСпискомНеоднозначностей()
	СписокНеоднозначностей = Новый ТаблицаЗначений;
	СписокНеоднозначностей.Колонки.Добавить("Идентификатор");
	СписокНеоднозначностей.Колонки.Добавить("Колонка");
	
	Возврат СписокНеоднозначностей;
КонецФункции

&НаСервере
Процедура ВыполнитьШагСопоставлениеЗагружаемыхДанныхНаСервере(ФоновоеЗадание = Ложь)
	
	ЗагрузкаДанныхИзФайла.ДобавитьСтатистическуюИнформацию(?(ВариантЗагрузки = 0,
		"ВариантЗагрузки.ЗаполнениеТаблицы", "ВариантЗагрузки.ИзВнешнегоФайла"));
	
	ТаблицаСопоставления = РеквизитФормыВЗначение("ТаблицаСопоставленияДанных");
	ТаблицаИнформацияПоКолонкам = РеквизитФормыВЗначение("ИнформацияПоКолонкам");
	Если ТипЗагрузки = "ТабличнаяЧасть" Тогда
		АдресЗагруженныхДанных = "";
		АдресКопииТабличнойЧасти = "";
		СписокНеоднозначностей = СоздатьТаблицуСоСпискомНеоднозначностей();
		
		Обработки.ЗагрузкаДанныхИзФайла.ТабличныйДокументВТаблицуЗначений(ШаблонСДанными, ТаблицаИнформацияПоКолонкам, АдресЗагруженныхДанных);
		
		СкопироватьСтруктуруТабличнойЧасти(АдресКопииТабличнойЧасти);
		
		МенеджерОбъекта = МенеджерОбъекта(ИмяОбъектаСопоставления);
		МенеджерОбъекта.СопоставитьЗагружаемыеДанные(АдресЗагруженныхДанных, АдресКопииТабличнойЧасти, СписокНеоднозначностей, ИмяОбъектаСопоставления, ДополнительныеПараметры);
		
		Если НЕ РеквизитыСозданы Тогда
			СоздатьТаблицуСопоставленияПоИнформацииОКолонкахДляТЧ();
		КонецЕсли;
		
		ПоместитьДанныеВТаблицуСопоставления(АдресЗагруженныхДанных, АдресКопииТабличнойЧасти, СписокНеоднозначностей);
		
	ИначеЕсли ТипЗагрузки = "ВставкаИзБуфераОбмена" Тогда
		Обработки.ЗагрузкаДанныхИзФайла.ЗаполнитьТаблицуСопоставленияДаннымиИзШаблона(ШаблонСДанными, ТаблицаСопоставления, ИнформацияПоКолонкам);
		Обработки.ЗагрузкаДанныхИзФайла.СопоставитьЗначениеКолонкиАвто(ТаблицаСопоставления, "Ссылки");
		ЗначениеВРеквизитФормы(ТаблицаСопоставления, "ТаблицаСопоставленияДанных");
	Иначе
		ПараметрыВызоваСервера = Новый Структура();
		ПараметрыВызоваСервера.Вставить("ШаблонСДанными", ШаблонСДанными);
		ПараметрыВызоваСервера.Вставить("ТаблицаСопоставления", ТаблицаСопоставления);
		
		ПараметрыВызоваСервера.Вставить("ИнформацияПоКолонкам", ТаблицаИнформацияПоКолонкам);
		
		РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, 
		"Обработки.ЗагрузкаДанныхИзФайла.ЗаполнитьТаблицуСопоставленияДаннымиИзШаблонаФон",
		ПараметрыВызоваСервера, 
		НСтр("ru = 'ЗагрузкаДанныхИзФайла: Выполнение серверного метода обработки ЗаполнитьТаблицуСопоставленияДаннымиИзШаблона'"));
		
		Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
			ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
			ВыполнитьШагСопоставлениеЗагружаемыхДанныхПослеСопоставленияНаСервере();
		Иначе 
			ФоновоеЗадание = Истина;
			ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
			ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьШагСопоставлениеЗагружаемыхДанныхПослеСопоставленияНаСервере()
	
	ТаблицаСопоставления = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	
	Если ТипЗагрузки = "ПрикладнаяЗагрузка" Тогда
		СопоставитьДанныеПрикладнаяЗагрузка(ТаблицаСопоставления);
		Элементы.ПояснениеДляПрикладнойЗагрузки.Заголовок = СтрЗаменить(Элементы.ПояснениеДляПрикладнойЗагрузки.Заголовок, "%1",
			ПредставлениеСправочника(ИмяОбъектаСопоставления));
	ИначеЕсли ТипЗагрузки = "ВнешняяЗагрузка" Тогда
		СопоставитьДанныеВнешняяОбработка(ТаблицаСопоставления);
	КонецЕсли;
	
	Элементы.ПояснениеДляПрикладнойЗагрузки.Заголовок = СтрЗаменить(Элементы.ПояснениеДляПрикладнойЗагрузки.Заголовок, "%1",
		ПредставлениеСправочника(ИмяОбъектаСопоставления));
	
	ЗначениеВРеквизитФормы(ТаблицаСопоставления, "ТаблицаСопоставленияДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьШагСопоставлениеЗагружаемыхДанных()
	
	Если ТаблицаСДаннымиПустая() Тогда
		ПоказатьПредупреждение(, (НСтр("ru ='Для перехода к этапу сопоставления и загрузки данных, необходимо заполнить таблицу.'")));	
		Возврат;
	КонецЕсли;
	
	ПодтверждениеЗакрытияФормы = Ложь;
	СписокНезаполненныхКолонок = НезаполненныеОбязательныеКолонки();
	Если СписокНезаполненныхКолонок.Количество() > 0 Тогда
		Если СписокНезаполненныхКолонок.Количество() =1  Тогда
			ТекстПроКолонки = НСтр("ru = 'Обязательная колонка""'") + " " + СписокНезаполненныхКолонок[0]
				+ НСтр("ru = '"" содержит незаполненные строки, эти строки будут пропущены при загрузке'");
		Иначе
			ТекстПроКолонки = НСтр("ru = 'Обязательные колонки""'") + " " + СтрСоединить(СписокНезаполненныхКолонок,", ")
				+ НСтр("ru = '"" содержат незаполненные строки, эти строки будут пропущены при загрузке'");
		КонецЕсли;
		ТекстПроКолонки = ТекстПроКолонки + Символы.ПС + НСтр("ru = 'Продолжить?'");
		
		Оповещение = Новый ОписаниеОповещения("ПослеВопросаОНезаполненныхСтроках", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстПроКолонки, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Иначе
		ВыполнитьШагСопоставлениеЗагружаемыхДанныхПослеПроверки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОНезаполненныхСтроках(Результат, Параметр) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ВыполнитьШагСопоставлениеЗагружаемыхДанныхПослеПроверки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьШагСопоставлениеЗагружаемыхДанныхПослеПроверки()
	
	Элементы.Назад.Доступность = Ложь;
	Элементы.Далее.Доступность = Ложь;
	
	ФоновоеЗадание = Ложь;
	ВыполнитьШагСопоставлениеЗагружаемыхДанныхНаСервере(ФоновоеЗадание);
	
	Если ФоновоеЗадание = Истина Тогда 
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ДлительныеОперации;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеСопоставлениеНаКлиенте", 1, Истина);
		ПараметрыОбработчика.МаксимальныйИнтервал = 5;
	Иначе 
		Если ВсеДанныеСопоставлены() И ТипЗагрузки = "ВставкаИзБуфераОбмена" Тогда
			ЗакрытьФормуИВернутьМассивСсылок();
		Иначе
			ВыполнитьШагСопоставлениеЗагружаемыхДанныхКлиент();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСтранице(ОтображаемаяСтраница)
	
	Элементы.Назад.Доступность = Истина;
	Элементы.Далее.Доступность = Истина;
	Элементы.СтраницыПомощника.ТекущаяСтраница = ОтображаемаяСтраница;
КонецПроцедуры

#Область ДлительныеОперации

&НаКлиенте
Процедура ФоновоеЗаданиеЗагрузкаФайлаНаКлиенте()
	Результат = ФоновоеЗаданиеЗагрузкаФайлаПолучитьРезультат();
	Если Результат.ФоновоеЗаданиеВыполнено Тогда
		ШаблонСДанными = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
		Если ФормаДлительнойОперации.Открыта()
			И ФормаДлительнойОперации.ИдентификаторЗадания = ФоновоеЗаданиеИдентификатор Тогда
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		КонецЕсли;
		ПереходКСледующемуШагуЗагрузкиДанных();
	ИначеЕсли Результат.ЕстьОшибки Тогда
		Если ФормаДлительнойОперации.Открыта()
			И ФормаДлительнойОперации.ИдентификаторЗадания = ФоновоеЗаданиеИдентификатор Тогда
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеЗагрузкаФайлаНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеСопоставлениеНаКлиенте()
	
	Результат = ФоновоеЗаданиеСопоставлениеПолучитьРезультат();
	
	Если Результат.ФоновоеЗаданиеВыполнено Тогда
		Если ВсеДанныеСопоставлены() И ТипЗагрузки = "ВставкаИзБуфераОбмена" Тогда
			ЗакрытьФормуИВернутьМассивСсылок();
		Иначе
			ВыполнитьШагСопоставлениеЗагружаемыхДанныхКлиент();
		КонецЕсли;
	ИначеЕсли Результат.ЕстьОшибки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		ПерейтиКСтранице(Элементы.ЗаполнениеТаблицыДанными);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеСопоставлениеНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗагружаемыеДанныеКлиент()
	
	Элементы.Назад.Доступность = Ложь;
	Элементы.Далее.Доступность = Ложь;
	
	ФоновоеЗаданиеПроцент = 0;
	ФоновоеЗадание = Ложь;
	ЗаписатьЗагружаемыеДанныеОтчет(ФоновоеЗадание);
	
	Если ФоновоеЗадание = Истина Тогда 
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ДлительныеОперации;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеЗаписьНаКлиенте", 1, Истина);
		ПараметрыОбработчика.МаксимальныйИнтервал = 5;
	Иначе
		ФоновоеЗаданиеОтчетНаКлиенте(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеЗаписьНаКлиенте()
	Результат = ФоновоеЗаданиеЗаписьПолучитьРезультат();
	Если Результат.ФоновоеЗаданиеВыполнено Тогда
		ЗаполнитьТаблицуСопоставленияИзВременногоХранилища();
		ФоновоеЗаданиеОтчетНаКлиенте(Ложь);
	ИначеЕсли Результат.ЕстьОшибки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		ПерейтиКСтранице(Элементы.СопоставлениеЗагружаемыхДанных);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеЗаписьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеЗаписьПолучитьРезультат()
	Результат = Новый Структура("ФоновоеЗаданиеВыполнено, ЕстьОшибки, ТекстОшибки", Ложь, Ложь);
	Попытка
		Результат.ФоновоеЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор);
	Исключение
		Результат.ЕстьОшибки = Истина;
		ТекстСообщенияОбОшибке = НСтр("ru = 'Не удалось произвести запись данных.
									|Возможная причина: Загружаемые данные некорректные.
									|Техническая информация: %1'");
		Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЗагрузкаДанныхИзФайла(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если НЕ Результат.ФоновоеЗаданиеВыполнено Тогда
		ФоновоеЗаданиеПрочитатьПромежуточныйРезультат(Результат);
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеОтчетНаКлиенте(ВыводитьОкноОжидания = Истина)
	
	ФоновоеЗадание = Ложь;
	СформироватьОтчетОЗагрузке(ФильтрОтчет, ФоновоеЗадание, НЕ ВыводитьОкноОжидания);
	
	Если ФоновоеЗадание Тогда
		Если ВыводитьОкноОжидания Тогда 
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ФоновоеЗаданиеИдентификатор);
		КонецЕсли;
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеСозданиеОтчетаНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	Иначе
		Результат = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
		ПоказатьОтчет(Результат);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтчет(Отчет)
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница <> Элементы.ОтчетОЗагрузкеДанных Тогда
		ВыполнитьШагОтчетОЗагрузкеДанныхКлиент();
	КонецЕсли;
	
	ИтогоОтчетСоздано = Отчет.Создано;
	ИтогоОтчетОбновлено = Отчет.Обновлено;
	ИтогоОтчетПропущено = Отчет.Пропущено;
	ИтогоОтчетНекорректных = Отчет.Некорректных;
	
	Элементы.ФильтрОтчет.СписокВыбора.Очистить();
	Элементы.ФильтрОтчет.СписокВыбора.Добавить("ВсеЭлементы", НСтр("ru = 'Все ('") + Отчет.Всего + ")");
	Элементы.ФильтрОтчет.СписокВыбора.Добавить("Новые", НСтр("ru = 'Новые ('") + Отчет.Создано+ ")");
	Элементы.ФильтрОтчет.СписокВыбора.Добавить("Обновленные", НСтр("ru = 'Обновленные ('") + Отчет.Обновлено+ ")");
	Элементы.ФильтрОтчет.СписокВыбора.Добавить("Пропущенные", НСтр("ru = 'Пропущенные ('") + Отчет.Пропущено+ ")");
	ФильтрОтчет = Отчет.ТипОтчета;

	ТаблицаОтчет = Отчет.ТаблицаОтчет;
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеСозданиеОтчетаНаКлиенте()

	РезультатВыполнения = ФоновоеЗаданиеОтчетПолучитьРезультат();
	Если РезультатВыполнения.ФоновоеЗаданиеВыполнено Тогда
		Если ФормаДлительнойОперации <> Неопределено
			И ФормаДлительнойОперации.Открыта()
			И ФормаДлительнойОперации.ИдентификаторЗадания = ФоновоеЗаданиеИдентификатор Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		КонецЕсли;
		
		Результат = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
		ПоказатьОтчет(Результат);
		ПодтверждениеЗакрытияФормы = Истина;
	ИначеЕсли РезультатВыполнения.ЕстьОшибки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		ПерейтиКСтранице(Элементы.СопоставлениеЗагружаемыхДанных);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеСозданиеОтчетаНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеЗагрузкаФайлаПолучитьРезультат()
	Результат = Новый Структура("ФоновоеЗаданиеВыполнено, ЕстьОшибки, ТекстОшибки", Ложь, Ложь);
	Попытка
		Результат.ФоновоеЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор);
	Исключение
		Результат.ЕстьОшибки = Истина;
		ТекстСообщенияОбОшибке = НСтр("ru = 'Не удалось произвести загрузку данных.
									|Возможная причина: Загружаемые данные некорректные.
									|Техническая информация: %1'");
		Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЗагрузкаДанныхИзФайла(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Возврат Результат;
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеСопоставлениеПолучитьРезультат()
	Результат = Новый Структура("ФоновоеЗаданиеВыполнено, ЕстьОшибки, ТекстОшибки", Ложь, Ложь);
	Попытка
		Результат.ФоновоеЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор);
	Исключение
		Результат.ЕстьОшибки = Истина;
		ТекстСообщенияОбОшибке = НСтр("ru = 'Не удалось произвести сопоставление данных.
									|Возможная причина: Загружаемые данные некорректные.
									|Техническая информация: %1'");
		Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЗагрузкаДанныхИзФайла(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если Результат.ФоновоеЗаданиеВыполнено Тогда
		ВыполнитьШагСопоставлениеЗагружаемыхДанныхПослеСопоставленияНаСервере();
	Иначе
		ФоновоеЗаданиеПрочитатьПромежуточныйРезультат(Результат);
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеОтчетПолучитьРезультат()
	
	Результат = Новый Структура("ФоновоеЗаданиеВыполнено, ЕстьОшибки, ТекстОшибки", Ложь, Ложь);
	Попытка
		Результат.ФоновоеЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор);
	Исключение
		Результат.ЕстьОшибки = Истина;
		ТекстСообщенияОбОшибке = НСтр("ru = 'Не удалось сформировать отчет.
									|Возможная причина: Загружаемые данные некорректные.
									|Техническая информация: %1'");
		Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЗагрузкаДанныхИзФайла(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Если НЕ Результат.ФоновоеЗаданиеВыполнено Тогда
		ФоновоеЗаданиеПрочитатьПромежуточныйРезультат(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ФоновоеЗаданиеПрочитатьПромежуточныйРезультат(Результат)
	Прогресс = ДлительныеОперации.ПрочитатьПрогресс(ФоновоеЗаданиеИдентификатор);
	Если Прогресс <> Неопределено Тогда
		ФоновоеЗаданиеПроцент = Прогресс.Процент;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыполнитьШагСопоставлениеЗагружаемыхДанныхКлиент()
	
	Если ТипЗагрузки = "ВставкаИзБуфераОбмена" Тогда
		Статистика = СтатисткаСопоставления();
		
		Если Статистика.Сопоставленных > 0 Тогда
			ТекстНайдено = НСтр("ru = 'Из %1 введенных строк в список будут вставлены: %2.'");
			Элементы.НадписьРезультатСопоставления.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНайдено,
				Статистика.Всего, Статистика.Сопоставленных);
			
			Если Статистика.Неоднозначных > 0 И Статистика.НеНайдено > 0 Тогда 
				ТекстНеНайдено = НСтр("ru = '%3 строк будут пропущены:'") + Символы.ПС + "  - " + НСтр("ru = 'Нет данных в программе: %1'") 
					+ Символы.ПС + "  - " +НСтр("ru = 'Несколько вариантов для вставки: %2'");
				ТекстНеНайдено = НСтр("ru = 'Будет пропущено строк: %3
				|  - Нет данных в программе: %1
				|  - Несколько вариантов для вставки: %2'");
				ТекстНеНайдено = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНеНайдено, Статистика.НеНайдено, Статистика.Неоднозначных, Статистика.Несопоставленных);
			ИначеЕсли Статистика.Неоднозначных > 0 Тогда
				ТекстНеНайдено = НСтр("ru = 'Строки, для которых в программе имеется несколько вариантов, будут пропущены: %1'");
				ТекстНеНайдено = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНеНайдено, Статистика.Неоднозначных);
			ИначеЕсли Статистика.НеНайдено > 0 Тогда
				ТекстНеНайдено = НСтр("ru = 'Строки, для которых в программе нет соответствующих данных, будут пропущены: %1'");
				ТекстНеНайдено = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНеНайдено, Статистика.НеНайдено);
			КонецЕсли;
			ТекстНеНайдено = ТекстНеНайдено + Символы.ПС + НСтр("ru = 'Для просмотра пропущенных строк и подбора данных для вставки нажмите ""Далее"".'");
			Элементы.ДекорацияНеНайденоИНеоднозначность.Заголовок = ТекстНеНайдено;
			
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.РезультатыСопоставления;
			Элементы.Назад.Видимость = Истина;
			Элементы.ВставитьВСписок.Видимость = Истина;
			Элементы.Далее.Видимость = Истина;
			Элементы.Назад.Заголовок = НСтр("ru = '< Назад'");
			Элементы.Далее.Заголовок = НСтр("ru = 'Далее >'");
			Элементы.Далее.АктивизироватьПоУмолчанию = Ложь;
			Элементы.ВставитьВСписок.АктивизироватьПоУмолчанию = Истина;
			Элементы.ВставитьВСписок.КнопкаПоУмолчанию = Истина;
			
			ПоказатьСтатистикуПоСопоставлениюЗагрузкаИзФайла();
			УстановитьОформлениеДляСтраницыСопоставления(Ложь, Элементы.ПояснениеДляПоискаСсылок, Ложь, НСтр("ru = 'Далее >'"));
		Иначе
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.НеНайдено;
			Элементы.Закрыть.Заголовок = НСтр("ru = 'Закрыть'");
			Элементы.Назад.Видимость = Истина;
			Элементы.ВставитьВСписок.Видимость = Ложь;
			Элементы.Далее.Видимость = Ложь;
		КонецЕсли;
		
	Иначе 
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СопоставлениеЗагружаемыхДанных;
		ПоказатьСтатистикуПоСопоставлениюЗагрузкаИзФайла();
		
		Если ТипЗагрузки = "УниверсальнаяЗагрузка" Тогда
			УстановитьОформлениеДляСтраницыСопоставления(Истина, Элементы.ПояснениеДляУниверсальнойЗагрузки, Истина, НСтр("ru = 'Загрузить данные >'"));
			Элементы.ПояснениеДляУниверсальнойЗагрузки.Видимость = Ложь;
		ИначеЕсли ТипЗагрузки = "ТабличнаяЧасть" Тогда
			Отбор = Новый Структура("РезультатСопоставленияСтроки", "НеСопоставлен");
			Если ТаблицаСопоставленияДанных.НайтиСтроки(Отбор).Количество() = 0 Тогда
				// Все строки сопоставлены
				ПереходКСледующемуШагуЗагрузкиДанных();
			КонецЕсли;
			
			УстановитьОформлениеДляСтраницыСопоставления(Ложь, Элементы.ПояснениеДляТабличнойЧасти, Истина, НСтр("ru = 'Загрузить данные'"));
			УстановитьОформлениеДляПолейСНеоднозначностью(Новый Структура("РезультатСопоставленияСтроки", "Неоднозначность"));
			
		ИначеЕсли ТипЗагрузки = "ВнешняяЗагрузка" Тогда
			УстановитьОформлениеДляСтраницыСопоставления(Ложь, Элементы.ПояснениеДляПрикладнойЗагрузки, Ложь, НСтр("ru = 'Загрузить данные >'"));
		Иначе
			УстановитьОформлениеДляСтраницыСопоставления(Ложь, Элементы.ПояснениеДляПрикладнойЗагрузки, Ложь, НСтр("ru = 'Загрузить данные >'"));
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Назад.Доступность = Истина;
	Элементы.Далее.Доступность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеДляСтраницыСопоставления(ВидимостьКнопкиСопоставление, ЭлементДляПоясняющегоТекста, ВидимостьКнопкиУстранитьНеоднозначность, ТекстКнопкиДалее)
	
	Элементы.СписокКолонокСопоставления.Видимость = ВидимостьКнопкиСопоставление;
	Элементы.Назад.Видимость = Истина;
	Элементы.ПояснениеДляУниверсальнойЗагрузки.Видимость = Ложь;
	Элементы.ПояснениеДляПрикладнойЗагрузки.Видимость = Ложь;
	Элементы.ПояснениеДляТабличнойЧасти.Видимость = Ложь;
	Элементы.ПояснениеДляПоискаСсылок.Видимость = Ложь;
	Если ЭлементДляПоясняющегоТекста = Элементы.ПояснениеДляУниверсальнойЗагрузки Тогда
		Элементы.ПояснениеДляУниверсальнойЗагрузки.Видимость = Истина;
	ИначеЕсли ЭлементДляПоясняющегоТекста = Элементы.ПояснениеДляТабличнойЧасти Тогда
		Элементы.ПояснениеДляТабличнойЧасти.Видимость = Истина;
	ИначеЕсли ЭлементДляПоясняющегоТекста = Элементы.ПояснениеДляПоискаСсылок Тогда
		Элементы.ПояснениеДляПоискаСсылок.Видимость = Истина;
		Элементы.ПояснениеДляСопоставленияДанных.ОтображатьЗаголовок = Ложь;
	Иначе
		Элементы.ПояснениеДляПрикладнойЗагрузки.Видимость = Истина;
	КонецЕсли;
	
	Элементы.УстранитьНеоднозначность.Видимость = ВидимостьКнопкиУстранитьНеоднозначность;
	Элементы.Далее.Заголовок = ТекстКнопкиДалее;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРазрешенияНеоднозначности(ВыбраннаяСтрока, ПолеИмя, СтандартнаяОбработка)
	Строка = ТаблицаСопоставленияДанных.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ТипЗагрузки = "ТабличнаяЧасть" Тогда
		Если Строка.РезультатСопоставленияСтроки = "Неоднозначность" И СтрДлина(Строка.ОписаниеОшибки) > 0 Тогда
			Если СтрДлина(ПолеИмя) > 3 И СтрНачинаетсяС(ПолеИмя, "ТаблицаСопоставленияДанных_ТЧ_") Тогда
				Имя = Сред(ПолеИмя, 31);
				Если СтрНайти(Строка.ОписаниеОшибки, Имя) Тогда
					СтандартнаяОбработка = Ложь;
					СтрокаИзТаблицы = Новый Массив;
					ЗначенияЗагружаемыхКолонок = Новый Структура();
					Для каждого Колонка Из ИнформацияПоКолонкам Цикл
						МассивКолонок = Новый Массив();
						МассивКолонок.Добавить(Колонка.ИмяКолонки);
						МассивКолонок.Добавить(Колонка.ПредставлениеКолонки);
						МассивКолонок.Добавить(Строка["ФЛ_" + Колонка.ИмяКолонки]);
						МассивКолонок.Добавить(Колонка.ТипКолонки);
						СтрокаИзТаблицы.Добавить(МассивКолонок);
						Если Имя = Колонка.Родитель Тогда
							ЗначенияЗагружаемыхКолонок.Вставить(Колонка.ИмяКолонки, Строка["ФЛ_" + Колонка.ИмяКолонки]);
						КонецЕсли;
					КонецЦикла;
					
					ПараметрыФормы = Новый Структура();
					ПараметрыФормы.Вставить("ТипЗагрузки", ТипЗагрузки);
					ПараметрыФормы.Вставить("Имя", Имя);
					ПараметрыФормы.Вставить("СтрокаИзТаблицы", СтрокаИзТаблицы);
					ПараметрыФормы.Вставить("ЗначенияЗагружаемыхКолонок", ЗначенияЗагружаемыхКолонок);
					ПараметрыФормы.Вставить("СписокНеоднозначностей", Неопределено);
					ПараметрыФормы.Вставить("ПолноеИмяТабличнойЧасти", ИмяОбъектаСопоставления);
					ПараметрыФормы.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
					
					Параметр = Новый Структура();
					Параметр.Вставить("Идентификатор", ВыбраннаяСтрока);
					Параметр.Вставить("Имя", Имя);
					
					Оповещение = Новый ОписаниеОповещения("ПослеСопоставленияНеоднозначностей", ЭтотОбъект, Параметр);
					ОткрытьФорму("Обработка.ЗагрузкаДанныхИзФайла.Форма.РазрешенияНеоднозначностей", ПараметрыФормы, ЭтотОбъект, Истина , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Строка.РезультатСопоставленияСтроки = "Неоднозначность" Тогда
			СтандартнаяОбработка = Ложь;
			
			СтрокаИзТаблицы = Новый Массив;
			Для каждого Колонка Из ИнформацияПоКолонкам Цикл 
				МассивКолонок = Новый Массив();
				МассивКолонок.Добавить(Колонка.ИмяКолонки);
				МассивКолонок.Добавить(Колонка.ПредставлениеКолонки);
				МассивКолонок.Добавить(Строка[Колонка.ИмяКолонки]);
				МассивКолонок.Добавить(Колонка.ТипКолонки);
				СтрокаИзТаблицы.Добавить(МассивКолонок);
			КонецЦикла;
			
			КолонкиСопоставления = Новый СписокЗначений;
			Для каждого Элемент Из СопоставитьПоКолонке Цикл 
				Если Элемент.Пометка Тогда
					КолонкиСопоставления.Добавить(Элемент.Значение);
				КонецЕсли;
			КонецЦикла;
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("СтрокаИзТаблицы", СтрокаИзТаблицы);
			ПараметрыФормы.Вставить("СписокНеоднозначностей", Строка.СписокНеоднозначностей);
			ПараметрыФормы.Вставить("КолонкиСопоставления", КолонкиСопоставления);
			ПараметрыФормы.Вставить("ТипЗагрузки", ТипЗагрузки);
			
			Параметр = Новый Структура("Идентификатор", ВыбраннаяСтрока);
			
			Оповещение = Новый ОписаниеОповещения("ПослеСопоставленияНеоднозначностей", ЭтотОбъект, Параметр);
			ОткрытьФорму("Обработка.ЗагрузкаДанныхИзФайла.Форма.РазрешенияНеоднозначностей", ПараметрыФормы, ЭтотОбъект, Истина , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СопоставитьДанныеПрикладнаяЗагрузка(ТаблицаСопоставленияДанныхСервер)
	
	МенеджерОбъект = МенеджерОбъекта(ИмяОбъектаСопоставления);
	
	МенеджерОбъект.СопоставитьЗагружаемыеДанныеИзФайла(ТаблицаСопоставленияДанныхСервер);
	Для каждого Строка Из ТаблицаСопоставленияДанныхСервер Цикл 
		Если ЗначениеЗаполнено(Строка.ОбъектСопоставления) Тогда 
			Строка.РезультатСопоставленияСтроки = "СтрокаСопоставлена";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ШагОтчетОЗагрузке

&НаСервере
Процедура ЗаписатьЗагружаемыеДанныеОтчет(ФоновоеЗадание = Ложь)
	
	СопоставленныеДанные = РеквизитФормыВЗначение("ТаблицаСопоставленияДанных");
	
	Если ТипЗагрузки = "УниверсальнаяЗагрузка" Тогда
		
		ПараметрыЗагрузки = Новый Структура();
		ПараметрыЗагрузки.Вставить("СоздаватьЕслиНеСопоставлено", СоздаватьЕслиНеСопоставлено);
		ПараметрыЗагрузки.Вставить("ОбновлятьСуществующие", ОбновлятьСуществующие);

		ПараметрыВызоваСервера = Новый Структура();
		ПараметрыВызоваСервера.Вставить("СопоставленныеДанные", СопоставленныеДанные);
		ПараметрыВызоваСервера.Вставить("ПараметрыЗагрузки", ПараметрыЗагрузки);
		ПараметрыВызоваСервера.Вставить("ИмяОбъектаСопоставления", ИмяОбъектаСопоставления);
		ТаблицаИнформацияПоКолонкам = РеквизитФормыВЗначение("ИнформацияПоКолонкам");
		ПараметрыВызоваСервера.Вставить("ИнформацияПоКолонкам", ТаблицаИнформацияПоКолонкам);
		
		РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, 
				"Обработки.ЗагрузкаДанныхИзФайла.ЗаписатьСопоставленныеДанные",
				ПараметрыВызоваСервера, 
				НСтр("ru = 'Подсистема ЗагрузкаДанныхИзФайла: Запись загружаемых  данных'"));
		
		Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
			ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
			СопоставленныеДанные = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
		Иначе 
			ФоновоеЗадание = Истина;
			ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
			ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
		КонецЕсли;
	ИначеЕсли ТипЗагрузки = "ВнешняяЗагрузка" Тогда
		ЗаписатьСопоставленныеДанныеВнешняяОбработка(СопоставленныеДанные);
	Иначе
		ЗаписатьСопоставленныеДанныеПрикладнаяЗагрузка(СопоставленныеДанные);
	КонецЕсли;
	
	Если НЕ ФоновоеЗадание Тогда
		ЗначениеВРеквизитФормы(СопоставленныеДанные, "ТаблицаСопоставленияДанных");
	КонецЕсли;
	
	Элементы.ОткрытьСправочникПослеЗакрытияПомощника.Заголовок = 
		СтрЗаменить(Элементы.ОткрытьСправочникПослеЗакрытияПомощника.Заголовок, "%1",
		ПредставлениеСправочника(ИмяОбъектаСопоставления));
	Элементы.ПояснениеОтчетаОЗагрузке.Заголовок = 
		СтрЗаменить(Элементы.ПояснениеОтчетаОЗагрузке.Заголовок, "%1", ПредставлениеСправочника(ИмяОбъектаСопоставления));
	
	ТипОтчета = "ВсеЭлементы";
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьШагОтчетОЗагрузкеДанныхКлиент()
	
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ОтчетОЗагрузкеДанных;
	Элементы.ОткрытьСправочникПослеЗакрытияПомощника.Видимость = Истина;
	Элементы.Закрыть.Заголовок = "Готово";
	Элементы.Далее.Видимость = Ложь;
	Элементы.Назад.Видимость = Ложь;
	
КонецПроцедуры
#КонецОбласти

/////////////////////////////////////// СЕРВЕР //////////////////////////////////////

&НаСервере
Процедура ОпределитьДинамическийМакет(ТаблицаИнформацияПоКолонкам, КолонкиМакета)
	
	ТаблицаИнформацияПоКолонкам = РеквизитФормыВЗначение("ИнформацияПоКолонкам");
	ТаблицаИнформацияПоКолонкам.Очистить();
	Индекс = 1;
	Для каждого Колонка Из КолонкиМакета Цикл
		Строка = ТаблицаИнформацияПоКолонкам.Добавить();
		Строка.ИмяКолонки = Колонка.Имя;
		Строка.Ширина = 20;
		Если Колонка.Позиция = 0 Тогда 
			Строка.Позиция = Индекс;
			Индекс = Индекс + 1;
		Иначе
			Строка.Позиция = Колонка.Позиция;
			Индекс = Колонка.Позиция + 1;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Строка, Колонка);
		Строка.Видимость = Истина;
		Строка.ПредставлениеКолонки = Колонка.Заголовок;
		Строка.ТипКолонки = Колонка.Тип;
		Если ПустаяСтрока(Строка.Группа) Тогда
			Строка.Группа = Колонка.Заголовок;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицу()
	
	ТаблицаСопоставленияДанныхСервер = РеквизитФормыВЗначение("ТаблицаСопоставленияДанных");
	ТаблицаСопоставленияДанныхСервер.Колонки.Очистить();
	ИнформацияПоКолонкам.Очистить();
	
	Пока Элементы.ТаблицаСопоставленияДанных.ПодчиненныеЭлементы.Количество() > 0 Цикл
		ЭтотОбъект.Элементы.Удалить(Элементы.ТаблицаСопоставленияДанных.ПодчиненныеЭлементы.Получить(0));
	КонецЦикла;
	ШаблонСДанными = Новый ТабличныйДокумент;
	
	РеквизитыТаблицыСопоставления = ЭтотОбъект.ПолучитьРеквизиты("ТаблицаСопоставленияДанных");
	МассивПутейРеквизитов = Новый Массив;
	Для каждого РеквизитТаблицы Из РеквизитыТаблицыСопоставления Цикл
		МассивПутейРеквизитов.Добавить("ТаблицаСопоставленияДанных." + РеквизитТаблицы.Имя);
	КонецЦикла;
	Если МассивПутейРеквизитов.Количество() > 0 Тогда
		ИзменитьРеквизиты(,МассивПутейРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеДанных(СписокКолонок = Неопределено)
	
	Если ТипЗагрузки = "ВставкаИзБуфераОбмена" Тогда 
		ТекстОбъектНеНайден = НСтр("ru='<Не найден>'");
		ЦветОбъектНеНайден = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
		ЦветНеоднозначность = ЦветаСтиля.ПоясняющийОшибкуТекст;
	Иначе
		ТекстОбъектНеНайден = НСтр("ru='<Новый>'");
		ЦветОбъектНеНайден = ЦветаСтиля.РезультатУспехЦвет;
		ЦветНеоднозначность = ЦветаСтиля.ПоясняющийОшибкуТекст;
	КонецЕсли;
	
	УсловноеОформление.Элементы.Очистить();
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ОбъектСопоставления");
	ПолеОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСопоставленияДанных.ОбъектСопоставления"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено; 
	ЭлементОтбора.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветОбъектНеНайден);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ТекстОбъектНеНайден);
	
	Если ЗначениеЗаполнено(СписокКолонок) Тогда
		Для каждого ИмяКолонки Из СписокКолонок Цикл
			ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаСопоставленияДанных_ТЧ_" + ИмяКолонки);
			ПолеОформления.Использование = Истина;
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСопоставленияДанных.РезультатСопоставленияСтроки");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = "Неоднозначность";
			ЭлементОтбора.Использование = Истина;
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветНеоднозначность);
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<неоднозначность>'"));
		КонецЦикла;
	Иначе
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ОбъектСопоставления");
		ПолеОформления.Использование = Истина;
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСопоставленияДанных.РезультатСопоставленияСтроки");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = "Неоднозначность";
		ЭлементОтбора.Использование = Истина;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветНеоднозначность);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<неоднозначность>'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИнформацияОКолонке(ИмяКолонки)
	Отбор = Новый Структура("ИмяКолонки", ИмяКолонки);
	Результат = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
	Если Результат.Количество() > 0 Тогда
		Возврат Результат[0];
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ИнформацияОбОбъектеМетаданныхПоТипу(ПолныйТипОбъекта)
	ОписаниеОбъекта = Новый Структура("ТипОбъекта, ИмяОбъекта");
	ПолноеИмя = Метаданные.НайтиПоТипу(ПолныйТипОбъекта).ПолноеИмя();
	Результат = СтрРазделить(ПолноеИмя, ".", Ложь);
	Если Результат.Количество()>1 Тогда
		ОписаниеОбъекта.ТипОбъекта = Результат[0];
		ОписаниеОбъекта.ИмяОбъекта = Результат[1];
		
		Возврат ОписаниеОбъекта;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции 

&НаСервере
Функция УсловияПоВыбраннымКолонкам()
	
	Разделитель = "";
	РазделительИ = "";
	ТипСравнения = " = ";
	сГде = "";
	СтрокаУсловие = "";
	
	Для каждого Элемент Из СопоставитьПоКолонке Цикл
		Если Элемент.Пометка Тогда
			Колонка = ИнформацияОКолонке(Элемент.Значение);
			// Создаем запрос в зависимости от типов.
			Если Колонка <> Неопределено Тогда
				ТипКолонки = Колонка.ТипКолонки.Типы()[0];
				Если ТипКолонки = Тип("Строка") Тогда
					Если Колонка.ТипКолонки.КвалификаторыСтроки.Длина = 0 Тогда
						СтрокаУсловие = СтрокаУсловие + РазделительИ + "СправочникСопоставления." + Колонка.ИмяКолонки +  " ПОДОБНО ТаблицаСопоставления." + Колонка.ИмяКолонки;
						сГДЕ = сГДЕ + " И СправочникСопоставления." + Колонка.ИмяКолонки + " <> """"";
					Иначе
						СтрокаУсловие = СтрокаУсловие + РазделительИ + "СправочникСопоставления." + Колонка.ИмяКолонки +  " = ТаблицаСопоставления." + Колонка.ИмяКолонки;
						сГДЕ = сГДЕ + " И СправочникСопоставления." + Колонка.ИмяКолонки + " <> """"";
					КонецЕсли;
				ИначеЕсли ТипКолонки = Тип("Число") Тогда
					СтрокаУсловие = СтрокаУсловие + РазделительИ + "СправочникСопоставления." + Колонка.ИмяКолонки + " =  ТаблицаСопоставления." + Колонка.ИмяКолонки;
				ИначеЕсли ТипКолонки = Тип("Дата") Тогда 
					СтрокаУсловие = СтрокаУсловие + РазделительИ + "СправочникСопоставления." + Колонка.ИмяКолонки + " =  ТаблицаСопоставления." + Колонка.ИмяКолонки;
				ИначеЕсли ТипКолонки = Тип("Булево") Тогда 
					СтрокаУсловие = СтрокаУсловие + РазделительИ + "СправочникСопоставления." + Колонка.ИмяКолонки + " =  ТаблицаСопоставления." + Колонка.ИмяКолонки;
				Иначе
					ИнфоОбъект = ИнформацияОбОбъектеМетаданныхПоТипу(ТипКолонки);
					Если ИнфоОбъект.ТипОбъекта = "Справочник" Тогда
						Справочник = Метаданные.Справочники.Найти(ИнфоОбъект.ИмяОбъекта);
						ТекстУсловияСправочник = "";
						РазделительИЛИ = "";
						Для каждого СтрокаВвода Из Справочник.ВводПоСтроке Цикл 
							Если СтрокаВвода.Имя = "Код" И НЕ Справочник.Автонумерация Тогда 
								ТекстУсловияВВодаПоСтроке = "СправочникСопоставления." + Колонка.ИмяКолонки+ ".Код " + ТипСравнения + " ТаблицаСопоставления." + Колонка.ИмяКолонки;	
							Иначе
								ТекстУсловияВВодаПоСтроке = "СправочникСопоставления." + Колонка.ИмяКолонки+ "." + СтрокаВвода.Имя  + ТипСравнения + " ТаблицаСопоставления." + Колонка.ИмяКолонки;
							КонецЕсли;	
							ТекстУсловияСправочник = ТекстУсловияСправочник + РазделительИЛИ + ТекстУсловияВВодаПоСтроке;
							РазделительИЛИ = " ИЛИ ";
						КонецЦикла;
						СтрокаУсловие = СтрокаУсловие + РазделительИ + " ( "+ ТекстУсловияСправочник + " )";
					ИначеЕсли ИнфоОбъект.ТипОбъекта = "Перечисление" Тогда 
						СтрокаУсловие = СтрокаУсловие + РазделительИ + "СправочникСопоставления." + Колонка.ИмяКолонки + " =  ТаблицаСопоставления." + Колонка.ИмяКолонки;	
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			РазделительИ = " И ";
			Разделитель = ",";
			
		КонецЕсли;
	КонецЦикла;
	
	Условия = Новый Структура("УсловиеОбъединения , Где");
	Условия.УсловиеОбъединения  = СтрокаУсловие;
	Условия.Где = сГДЕ;
	Возврат Условия;
КонецФункции

&НаСервере
Процедура ВыполнитьСопоставлениеПоВыбранномуРеквизиту(КоличествоСопоставленных = 0, СписокКолонокСопоставления = "")
	
	Условия = УсловияПоВыбраннымКолонкам();
	
	Если Не ЗначениеЗаполнено(Условия.УсловиеОбъединения) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОбъекта = Обработки.ЗагрузкаДанныхИзФайла.РазложитьПолноеИмяОбъекта(ИмяОбъектаСопоставления);
	ИмяСправочника = СтруктураОбъекта.НазваниеОбъекта;
	ТаблицаСопоставления = РеквизитФормыВЗначение("ТаблицаСопоставленияДанных");
	
	СписокКолонок = "";
	Разделитель = "";
	
	Для каждого Колонка Из ТаблицаСопоставления.Колонки Цикл
		Если Колонка.Имя <> "СписокНеоднозначностей" И Колонка.Имя <> "РезультатСопоставленияСтроки" И Колонка.Имя <> "ОписаниеОшибки" Тогда
			СписокКолонок = СписокКолонок + Разделитель + Колонка.Имя;
			Разделитель = ", ";
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ " + СписокКолонок + "
	|ПОМЕСТИТЬ ТаблицаСопоставления
	|ИЗ &ТаблицаСопоставления КАК ТаблицаСопоставления
	|;
	|ВЫБРАТЬ
	|	СправочникСопоставления.Ссылка, ТаблицаСопоставления.Идентификатор
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК СправочникСопоставления
	|		ПРАВОЕ СОЕДИНЕНИЕ ТаблицаСопоставления КАК ТаблицаСопоставления
	|	        ПО " + Условия.УсловиеОбъединения + "
	|ГДЕ
	|	       СправочникСопоставления.ПометкаУдаления = ЛОЖЬ " + Условия.Где + "
	|	УПОРЯДОЧИТЬ ПО ТаблицаСопоставления.Идентификатор ИТОГИ ПО ТаблицаСопоставления.Идентификатор";
	
	Запрос.УстановитьПараметр("ТаблицаСопоставления", ТаблицаСопоставления);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПустоеЗначение = МенеджерОбъекта(ИмяОбъектаСопоставления).ПустаяСсылка();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Строка = ТаблицаСопоставления.Найти(ВыборкаДетальныеЗаписи.Идентификатор, "Идентификатор");
		
		Если ЗначениеЗаполнено(Строка.ОбъектСопоставления) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписиГруппа = ВыборкаДетальныеЗаписи.Выбрать();
		
		Если ВыборкаДетальныеЗаписиГруппа.Количество() > 1 Тогда
			СписокНеоднозначностей = Новый СписокЗначений;
			Пока ВыборкаДетальныеЗаписиГруппа.Следующий() Цикл
				СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписиГруппа.Ссылка);
			КонецЦикла;
			Строка.РезультатСопоставленияСтроки = "Неоднозначность";
			Строка.ОписаниеОшибки = СписокКолонокСопоставления;
			Строка.СписокНеоднозначностей = СписокНеоднозначностей;
		Иначе
			ВыборкаДетальныеЗаписиГруппа.Следующий();
			КоличествоСопоставленных = КоличествоСопоставленных + 1;
			Строка.РезультатСопоставленияСтроки = "СтрокаСопоставлена";
			Строка.ОписаниеОшибки = "";
			Строка.ОбъектСопоставления = ВыборкаДетальныеЗаписиГруппа.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	СписокКолонокСопоставления = "";
	Разделитель = "";
	Для каждого Колонка Из СопоставитьПоКолонке Цикл
		Если Колонка.Пометка Тогда
			СписокКолонокСопоставления = СписокКолонокСопоставления + Разделитель + Колонка.Представление;
			Разделитель = ", ";
		КонецЕсли;
	КонецЦикла;
	ЗагрузкаДанныхИзФайла.ДобавитьСтатистическуюИнформацию("СопоставлениеКолонок", КоличествоСопоставленных, СписокКолонокСопоставления);
	
	ЗначениеВРеквизитФормы(ТаблицаСопоставления, "ТаблицаСопоставленияДанных");
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьДанныеВТаблицуСопоставления(АдресЗагруженныхДанных, АдресКопииТабличнойЧасти, СписокНеоднозначностей)
	
	ТабличнаяЧасть =  ПолучитьИзВременногоХранилища(АдресКопииТабличнойЧасти);
	
	Если ТабличнаяЧасть = Неопределено ИЛИ ТипЗнч(ТабличнаяЧасть) <> Тип("ТаблицаЗначений") ИЛИ ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ОбязательнаДляЗаполнения", Истина);
	ОтобранныеКолонкиОбязательнаДляЗаполненияТаблицы = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
	КолонкиОбязательныеДляЗаполнения = Новый Соответствие;
	Для каждого КолонкаТаблицы Из ОтобранныеКолонкиОбязательнаДляЗаполненияТаблицы  Цикл
		КолонкиОбязательныеДляЗаполнения.Вставить(КолонкаТаблицы.Родитель, Истина);
	КонецЦикла;
	
	ТаблицаСопоставленияДанных.Очистить();
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	КолонкиТабличнойЧасти = Новый Соответствие();
	Для каждого Колонка Из ТабличнаяЧасть.Колонки Цикл
		КолонкиТабличнойЧасти.Вставить(Колонка.Имя, Истина);
	КонецЦикла;
	
	Для каждого Строка Из ТабличнаяЧасть Цикл
		НоваяСтрока = ТаблицаСопоставленияДанных.Добавить();
		НоваяСтрока.Идентификатор = Строка.Идентификатор;
		ЗаполненыВсеОбязательныеКолонки = Истина;
		Для каждого Колонка Из ТабличнаяЧасть.Колонки Цикл
			Если Колонка.Имя <> "Идентификатор" Тогда
				НоваяСтрока["ТЧ_" + Колонка.Имя] = Строка[Колонка.Имя];
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КолонкиОбязательныеДляЗаполнения.Получить(Колонка.Имя))
				И ЗаполненыВсеОбязательныеКолонки
				И НЕ ЗначениеЗаполнено(Строка[Колонка.Имя]) Тогда
					ЗаполненыВсеОбязательныеКолонки = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		НоваяСтрока["РезультатСопоставленияСтроки"] = ?(ЗаполненыВсеОбязательныеКолонки, "СтрокаСопоставлена", "НеСопоставлен");
		
		Отбор = Новый Структура("Идентификатор", Строка.Идентификатор); 
		
		Неоднозначности = СписокНеоднозначностей.НайтиСтроки(Отбор);
		Если Неоднозначности.Количество() > 0 Тогда 
			НоваяСтрока["РезультатСопоставленияСтроки"] = "Неоднозначность";
			Для каждого Неоднозначность Из Неоднозначности Цикл
				НоваяСтрока["ОписаниеОшибки"] = НоваяСтрока["ОписаниеОшибки"] + Неоднозначность.Колонка+ ";";
				ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
				ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТЧ_" + Неоднозначность.Колонка);
				ПолеОформления.Использование = Истина;
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСопоставленияДанных.ОписаниеОшибки"); 
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит; 
				ЭлементОтбора.ПравоеЗначение = Неоднозначность.Колонка; 
				ЭлементОтбора.Использование = Истина;
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<неоднозначность>'"));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из ЗагружаемыеДанные Цикл
		Отбор = Новый Структура("Идентификатор", Строка.Идентификатор);
		Строки = ТаблицаСопоставленияДанных.НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда 
			НоваяСтрока = Строки[0];
			Для каждого Колонка Из ЗагружаемыеДанные.Колонки Цикл
				Если Колонка.Имя <> "Идентификатор" И Колонка.Имя <> "РезультатСопоставленияСтроки" И Колонка.Имя <> "ОписаниеОшибки" Тогда
					НоваяСтрока["ФЛ_" + Колонка.Имя] = Строка[Колонка.Имя];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция АдресВХранилищеТаблицыСопоставления()
	Таблица = РеквизитФормыВЗначение("ТаблицаСопоставленияДанных");
	
	ТаблицаДляТЧ = Новый ТаблицаЗначений;
	Для Каждого Колонка Из Таблица.Колонки Цикл
		Если СтрНачинаетсяС(Колонка.Имя, "ТЧ_") Тогда
			ТаблицаДляТЧ.Колонки.Добавить(Сред(Колонка.имя, 4), Колонка.ТипЗначения, Колонка.Заголовок, Колонка.Ширина);
		ИначеЕсли  Колонка.Имя = "РезультатСопоставленияСтроки" ИЛИ Колонка.Имя = "ОписаниеОшибки" ИЛИ Колонка.Имя = "Идентификатор" Тогда 
			ТаблицаДляТЧ.Колонки.Добавить(Колонка.имя, Колонка.ТипЗначения, Колонка.Заголовок, Колонка.Ширина);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Таблица Цикл
		НоваяСтрока = ТаблицаДляТЧ.Добавить();
		Для Каждого Колонка Из ТаблицаДляТЧ.Колонки Цикл
			Если Колонка.Имя = "Идентификатор" Тогда 
				НоваяСтрока[Колонка.Имя] = Строка[Колонка.Имя];
			ИначеЕсли Колонка.Имя <> "РезультатСопоставленияСтроки" И Колонка.Имя <> "ОписаниеОшибки" Тогда
				НоваяСтрока[Колонка.Имя] = Строка["ТЧ_"+ Колонка.Имя];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаДляТЧ);
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеСправочника(ПолноеИмяОбъектаМетаданных)
	Возврат Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных).Представление();
КонецФункции

&НаСервереБезКонтекста
Функция МенеджерОбъекта(ИмяОбъектаСопоставления)
		МассивОбъекта = Обработки.ЗагрузкаДанныхИзФайла.РазложитьПолноеИмяОбъекта(ИмяОбъектаСопоставления);
		Если МассивОбъекта.ТипОбъекта = "Документ" Тогда
			МенеджерОбъекта = Документы[МассивОбъекта.НазваниеОбъекта];
		ИначеЕсли МассивОбъекта.ТипОбъекта = "Справочник" Тогда
			МенеджерОбъекта = Справочники[МассивОбъекта.НазваниеОбъекта];
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Объект ""%1"" не найден'"), ИмяОбъектаСопоставления);
		КонецЕсли;
		
		Возврат МенеджерОбъекта;
КонецФункции

&НаСервереБезКонтекста
Функция ФормаСписка(ИмяОбъектаСопоставления)
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаСопоставления);
	Если ОбъектМетаданных.ОсновнаяФормаСписка <> Неопределено Тогда
		Возврат ОбъектМетаданных.ОсновнаяФормаСписка.ПолноеИмя();
	Иначе
		Возврат ОбъектМетаданных.ПолноеИмя() + ".ФормаСписка";
	КонецЕсли;
КонецФункции

&НаСервере
Функция ОписаниеТипаПоМетаданным(ПолноеИмяОбъектаМетаданных)
	Результат = Обработки.ЗагрузкаДанныхИзФайла.РазложитьПолноеИмяОбъекта(ПолноеИмяОбъектаМетаданных);
	Если Результат.ТипОбъекта = "Справочник" Тогда 
		Возврат Новый ОписаниеТипов("СправочникСсылка." +  Результат.НазваниеОбъекта);
	ИначеЕсли Результат.ТипОбъекта = "Документ" Тогда 
		Возврат Новый ОписаниеТипов("ДокументСсылка." +  Результат.НазваниеОбъекта);
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция НезаполненныеОбязательныеКолонки()
	НазванияКолонокБезДанных = Новый Массив;
	
	Отбор = Новый Структура("ОбязательнаДляЗаполнения", Истина);
	ОбязательныеКолонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
	
	Шапка = ОбластьЗаголовкаШаблонаТаблицы(ШаблонСДанными);
	Для НомерКолонки = 1 По Шапка.ШиринаТаблицы Цикл 
		Ячейка = Шапка.ПолучитьОбласть(1, НомерКолонки, 1, НомерКолонки);
		ИмяКолонки = СокрЛП(Ячейка.ТекущаяОбласть.Текст);
		
		ИнформацияОКолонке = Неопределено;
		Отбор = Новый Структура("ПредставлениеКолонки", ИмяКолонки);
		КолонкиОтбор = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
		
		Если КолонкиОтбор.Количество() > 0 Тогда
			ИнформацияОКолонке = КолонкиОтбор[0];
		Иначе
			Отбор = Новый Структура("ИмяКолонки", ИмяКолонки);
			КолонкиОтбор = ИнформацияПоКолонкам.НайтиСтроки(Отбор);	
			
			Если КолонкиОтбор.Количество() > 0 Тогда
				ИнформацияОКолонке = КолонкиОтбор[0];
			КонецЕсли;
		КонецЕсли;
		Если ИнформацияОКолонке <> Неопределено Тогда
			Если ИнформацияОКолонке.ОбязательнаДляЗаполнения Тогда 
				Для НомерСтроки = 2 По ШаблонСДанными.ВысотаТаблицы Цикл 
					Ячейка = ШаблонСДанными.ПолучитьОбласть(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
					Если НЕ ЗначениеЗаполнено(Ячейка.ТекущаяОбласть.Текст) Тогда
						НазванияКолонокБезДанных.Добавить(ИнформацияОКолонке.ПредставлениеКолонки);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НазванияКолонокБезДанных;
КонецФункции

#Область ВнешняяЗагрузка

&НаСервере
Процедура СопоставитьДанныеВнешняяОбработка(ТаблицаСопоставленияДанныхСервер )
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		ВнешнийОбъект = МодульДополнительныеОтчетыИОбработки.ПолучитьОбъектВнешнейОбработки(ВнешняяОбработкаСсылка);
		ВнешнийОбъект.СопоставитьЗагружаемыеДанныеИзФайла(ИдентификаторКоманды, ТаблицаСопоставленияДанныхСервер);
		
		Для каждого Строка Из ТаблицаСопоставленияДанныхСервер Цикл
			Если ЗначениеЗаполнено(Строка.ОбъектСопоставления) Тогда
				Строка.РезультатСопоставленияСтроки = "СтрокаСопоставлена";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСопоставленныеДанныеВнешняяОбработка(СопоставленныеДанные) 
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		ВнешнийОбъект = МодульДополнительныеОтчетыИОбработки.ПолучитьОбъектВнешнейОбработки(ВнешняяОбработкаСсылка);
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗагрузки = Новый Структура();
	ПараметрыЗагрузки.Вставить("СоздаватьНовые", СоздаватьЕслиНеСопоставлено);
	ПараметрыЗагрузки.Вставить("ОбновлятьСуществующие", ОбновлятьСуществующие);
	ВнешнийОбъект.ЗагрузитьИзФайла(ИдентификаторКоманды, СопоставленныеДанные, ПараметрыЗагрузки, Отказ); 
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаИзФайла

&НаСервере
Процедура ЗаписатьСопоставленныеДанныеПрикладнаяЗагрузка(СопоставленныеДанные)
	
	МенеджерОбъекта =  МенеджерОбъекта(ИмяОбъектаСопоставления);
	
	Отказ = Ложь;
	ПараметрыЗагрузки = Новый Структура();
	ПараметрыЗагрузки.Вставить("СоздаватьНовые", СоздаватьЕслиНеСопоставлено);
	ПараметрыЗагрузки.Вставить("ОбновлятьСуществующие", ОбновлятьСуществующие);
	МенеджерОбъекта.ЗагрузитьИзФайла(СопоставленныеДанные, ПараметрыЗагрузки, Отказ)
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаВТабличнуюЧасть

&НаСервере
Процедура СкопироватьСтруктуруТабличнойЧасти(АдресТабличнойЧасти)
	
	ДанныеДляТабличнойЧасти = Новый ТаблицаЗначений;
	ДанныеДляТабличнойЧасти.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число"), "Идентификатор");
	
	Если ЗначениеЗаполнено(ИмяОбъектаСопоставления) Тогда
		ТабличнаяЧасть = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаСопоставления);
	
		Для каждого РеквизитТабличнойЧасти Из ТабличнаяЧасть.Реквизиты Цикл
			ДанныеДляТабличнойЧасти.Колонки.Добавить(РеквизитТабличнойЧасти.Имя, РеквизитТабличнойЧасти.Тип, РеквизитТабличнойЧасти.Представление());	
		КонецЦикла;
	Иначе
		Для каждого Колонка Из ИнформацияПоКолонкам Цикл
			ДанныеДляТабличнойЧасти.Колонки.Добавить(Колонка.ИмяКолонки, Колонка.ТипКолонки, Колонка.ПредставлениеКолонки);
		КонецЦикла;
	КонецЕсли;
	
	
	АдресТабличнойЧасти = ПоместитьВоВременноеХранилище(ДанныеДляТабличнойЧасти);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура СформироватьОтчетОЗагрузке(ТипОтчета = "ВсеЭлементы", ФоновоеЗадание = Ложь, РассчитыватьПроцентПрогресса = Ложь)
	
	СопоставленныеДанные        = РеквизитФормыВЗначение("ТаблицаСопоставленияДанных");
	ТаблицаИнформацияПоКолонкам = РеквизитФормыВЗначение("ИнформацияПоКолонкам");
	
	ПараметрыВызоваСервера = Новый Структура();
	ПараметрыВызоваСервера.Вставить("ТаблицаОтчет", ТаблицаОтчет);
	ПараметрыВызоваСервера.Вставить("ТипОтчета", ТипОтчета);
	ПараметрыВызоваСервера.Вставить("СопоставленныеДанные", СопоставленныеДанные);
	ПараметрыВызоваСервера.Вставить("ШаблонСДанными", ШаблонСДанными);
	ПараметрыВызоваСервера.Вставить("ИмяОбъектаСопоставления", ИмяОбъектаСопоставления);
	ПараметрыВызоваСервера.Вставить("РассчитыватьПроцентПрогресса", РассчитыватьПроцентПрогресса);
	ПараметрыВызоваСервера.Вставить("ИнформацияПоКолонкам", ТаблицаИнформацияПоКолонкам);
	
	РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, 
			"Обработки.ЗагрузкаДанныхИзФайла.СформироватьОтчетОЗагрузкеФон",
			ПараметрыВызоваСервера, 
			НСтр("ru = 'Подсистема ЗагрузкаДанныхИзФайла: Выполнение серверного метода обработки сформировать отчет о загрузке'"));
	
	Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
	Иначе
		ФоновоеЗадание = Истина;
		ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
		ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбластьЗаголовкаШаблонаТаблицы(Шаблон)
	МетаданныеОбластьЗаголовокТаблицы = Шаблон.Области.Найти("Шапка");
	
	Если МетаданныеОбластьЗаголовокТаблицы = Неопределено Тогда 
		ОбластьЗаголовокТаблицы = Шаблон.ПолучитьОбласть("R1");
	Иначе 
		ОбластьЗаголовокТаблицы = Шаблон.ПолучитьОбласть("Шапка"); 
	КонецЕсли;
	
	Возврат ОбластьЗаголовокТаблицы;
	
КонецФункции

&НаСервере
Процедура ПоказатьИнформационнуюСтрокуПроОбязательныеКолонки()
	
	Если Элементы.СтраницыЗаполненияДанных.ТекущаяСтраница = Элементы.СтраницаВариантЗагрузкаИзФайла Тогда
		ТекстПодсказки = НСтр("ru = 'Для загрузки данных необходимо, сохранить бланк в файл для заполнения в другой программе. 
		|Затем загрузить заполненную таблицу в одном из форматов:
		|• Книги Microsoft Excel 97 (.xls) и Excel 2007 (.xlsx)
		|• Электронные таблицы LibreOffice Calc (.ods)
		|• Текст с разделителями (.csv)
		|• Табличный документ (.mxl)'") + Символы.ПС;
	Иначе
		ТекстПодсказки = НСтр("ru = 'Для заполнения таблицы необходимо скопировать данные в таблицу из внешнего файла через буфер обмена.'") + Символы.ПС;
	КонецЕсли;
	
	Отбор = Новый Структура("ОбязательнаДляЗаполнения", Истина);
	ОбязательныеКолонки= ИнформацияПоКолонкам.НайтиСтроки(Отбор);
	
	Если ОбязательныеКолонки.Количество() > 0 Тогда 
		СписокКолонок = "";
		
		Для каждого Колонка Из ОбязательныеКолонки Цикл 
			Если ЗначениеЗаполнено(Колонка.Синоним) Тогда
				СписокКолонок = СписокКолонок + ", """ + Колонка.Синоним + """";
			Иначе
				СписокКолонок = СписокКолонок + ", """ + Колонка.ПредставлениеКолонки + """";
			КонецЕсли;
		КонецЦикла;
		СписокКолонок = Сред(СписокКолонок, 3);
		
		Если ОбязательныеКолонки.Количество() = 1 Тогда
			ТекстПодсказки = ТекстПодсказки + НСтр("ru = 'Колонка, обязательная для заполнения:'") + " " + СписокКолонок;
		Иначе
			ТекстПодсказки = ТекстПодсказки + НСтр("ru = 'Колонки, обязательные для заполнения:'") + " " + СписокКолонок;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.НадписьПодсказкаДляЗаполнения.Заголовок = ТекстПодсказки;
	Элементы.ПояснениеВариантЗагрузкаИзФайла.Заголовок = ТекстПодсказки;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьПараметрыЗагрузки(ПараметрыЗагрузкиИзФайла)
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаСопоставления);
	ПараметрыЗагрузкиИзФайла = Обработки.ЗагрузкаДанныхИзФайла.ПараметрыЗагрузкиИзФайла(МетаданныеОбъекта);
	МенеджерОбъекта(ИмяОбъектаСопоставления).ОпределитьПараметрыЗагрузкиДанныхИзФайла(ПараметрыЗагрузкиИзФайла);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтандартныеКолонкиВТаблицуСопоставления(ВременнаяТЗ, СтруктураОбъектаСопоставления, ДобавитьИдентификатор,
		ДобавитьОписаниеОшибки, ДобавитьРезультатСопоставленияСтроки, ДобавитьСписокНеоднозначностей)
		
	Если ДобавитьИдентификатор Тогда 
		ВременнаяТЗ.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число"), НСтр("ru = 'п/п'"));
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураОбъектаСопоставления) Тогда 
		Если Не ЗначениеЗаполнено(СтруктураОбъектаСопоставления.Синоним) Тогда
			ЗаголовокКолонки = "";
			Если СтруктураОбъектаСопоставления.ОписаниеТипаОбъектаСопоставления.Типы().Количество() > 1 Тогда 
				ЗаголовокКолонки = "Объекты";
			Иначе
				ЗаголовокКолонки = Строка(СтруктураОбъектаСопоставления.ОписаниеТипаОбъектаСопоставления.Типы()[0]);
			КонецЕсли;
			
		Иначе
			ЗаголовокКолонки = СтруктураОбъектаСопоставления.Синоним;
		КонецЕсли;
		ВременнаяТЗ.Колонки.Добавить("ОбъектСопоставления", СтруктураОбъектаСопоставления.ОписаниеТипаОбъектаСопоставления, ЗаголовокКолонки);
	КонецЕсли;
	Если ДобавитьРезультатСопоставленияСтроки Тогда 
		ВременнаяТЗ.Колонки.Добавить("РезультатСопоставленияСтроки", Новый ОписаниеТипов("Строка"), НСтр("ru = 'Результат'"));
	КонецЕсли;
	Если ДобавитьОписаниеОшибки Тогда
		ВременнаяТЗ.Колонки.Добавить("ОписаниеОшибки", Новый ОписаниеТипов("Строка"), НСтр("ru = 'Причина'"));
	КонецЕсли;

	Если ДобавитьСписокНеоднозначностей Тогда 
		ТипСЗ = Новый ОписаниеТипов("СписокЗначений");
		ВременнаяТЗ.Колонки.Добавить("СписокНеоднозначностей", ТипСЗ, "СписокНеоднозначностей");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтандартныеКолонкиВМассивРеквизитов(МассивРеквизитов, СтруктураОбъектаСопоставления , ДобавитьИдентификатор, 
		ДобавитьОписаниеОшибки, ДобавитьРезультатСопоставленияСтроки, ДобавитьСписокНеоднозначностей)
		
		ТипСтрока = Новый ОписаниеТипов("Строка");
		Если ДобавитьИдентификатор Тогда 
			ТипЧисло = Новый ОписаниеТипов("Число");
			МассивРеквизитов.Добавить(Новый РеквизитФормы("Идентификатор", ТипЧисло, "ТаблицаСопоставленияДанных", "Идентификатор"));
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураОбъектаСопоставления) Тогда 
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ОбъектСопоставления", СтруктураОбъектаСопоставления.ОписаниеТипаОбъектаСопоставления, "ТаблицаСопоставленияДанных", ИмяОбъектаСопоставления));
		КонецЕсли;
		
		Если ДобавитьРезультатСопоставленияСтроки Тогда
			МассивРеквизитов.Добавить(Новый РеквизитФормы("РезультатСопоставленияСтроки", ТипСтрока, "ТаблицаСопоставленияДанных", "Результат"));
		КонецЕсли;
		Если ДобавитьОписаниеОшибки Тогда 
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ОписаниеОшибки", ТипСтрока, "ТаблицаСопоставленияДанных", "Причина"));
		КонецЕсли;

	Если ДобавитьСписокНеоднозначностей Тогда 
		ТипСЗ = Новый ОписаниеТипов("СписокЗначений");
		МассивРеквизитов.Добавить(Новый РеквизитФормы("СписокНеоднозначностей", ТипСЗ, "ТаблицаСопоставленияДанных", "СписокНеоднозначностей"));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоздатьТаблицуСопоставленияПоИнформацииОКолонкахАвто(ОписаниеТипаОбъектаСопоставления)
	
	МассивРеквизитов = Новый Массив;
	
	ВременнаяТЗ = РеквизитФормыВЗначение("ТаблицаСопоставленияДанных");
	ВременнаяТЗ.Колонки.Очистить();
	
	СтруктураОбъектаСопоставления = Новый Структура("ОписаниеТипаОбъектаСопоставления, Синоним", ОписаниеТипаОбъектаСопоставления, "");
	ДобавитьСтандартныеКолонкиВТаблицуСопоставления(ВременнаяТЗ, СтруктураОбъектаСопоставления, Истина, Ложь, Истина, Истина);
	ДобавитьСтандартныеКолонкиВМассивРеквизитов(МассивРеквизитов, СтруктураОбъектаСопоставления, Истина, Ложь, Истина, Истина);
	
	Для каждого Колонка Из ИнформацияПоКолонкам Цикл
		ВременнаяТЗ.Колонки.Добавить(Колонка.ИмяКолонки, Колонка.ТипКолонки, Колонка.ПредставлениеКолонки);
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.ИмяКолонки, Колонка.ТипКолонки, "ТаблицаСопоставленияДанных", Колонка.ПредставлениеКолонки));
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	ЗначениеВРеквизитФормы(ВременнаяТЗ, "ТаблицаСопоставленияДанных");
	
	Для Каждого Колонка Из ВременнаяТЗ.Колонки Цикл
		НовыйЭлемент = Элементы.Добавить("ТаблицаСопоставленияДанных_" + Колонка.Имя, Тип("ПолеФормы"), Элементы.ТаблицаСопоставленияДанных);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ТаблицаСопоставленияДанных." + Колонка.Имя;
		НовыйЭлемент.Заголовок = Колонка.Заголовок;
		НовыйЭлемент.ТолькоПросмотр = Истина;
		Если НовыйЭлемент.Вид <> ВидПоляФормы.ПолеНадписи Тогда
			ОбязательнаДляЗаполнения = ЭтаКолонкаОбязательнаДляЗаполнения(Колонка.Имя);
			НовыйЭлемент.АвтоОтметкаНезаполненного  = ОбязательнаДляЗаполнения;
			НовыйЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
			
		КонецЕсли;
		Если Колонка.Имя = "ОбъектСопоставления" Тогда
			НовыйЭлемент.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
			НовыйЭлемент.ЦветФона = ЦветаСтиля.ФонУправляющегоПоля;
			НовыйЭлемент.КартинкаШапки = БиблиотекаКартинок.Изменить;
			НовыйЭлемент.ТолькоПросмотр = Ложь;
			
			НовыйЭлемент.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
			НовыйЭлемент.КнопкаСоздания = Ложь;
			НовыйЭлемент.КнопкаОткрытия = Истина;
			НовыйЭлемент.КнопкаВыбора = Истина;
			НовыйЭлемент.РедактированиеТекста = Истина;
			НовыйЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
		ИначеЕсли Колонка.Имя = "Идентификатор" Тогда
			НовыйЭлемент.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
			НовыйЭлемент.ТолькоПросмотр = Истина;
			НовыйЭлемент.Ширина = 4;
		ИначеЕсли Колонка.Имя = "РезультатСопоставленияСтроки" ИЛИ Колонка.Имя = "СписокНеоднозначностей" Тогда
			НовыйЭлемент.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьТаблицуСопоставленияПоИнформацииОКолонках()
	
	МассивРеквизитов = Новый Массив;
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаСопоставления);
	ОписаниеТипаОбъектаСопоставления = ОписаниеТипаПоМетаданным(ИмяОбъектаСопоставления);
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипЧисло = Новый ОписаниеТипов("Число");
	ТипСЗ = Новый ОписаниеТипов("СписокЗначений");
	
	ВременнаяТЗ = РеквизитФормыВЗначение("ТаблицаСопоставленияДанных");
	ВременнаяТЗ.Колонки.Очистить();
	
	Синоним = ОбъектМетаданных.Синоним;
	СтруктураОбъектаСопоставления = Новый Структура("ОписаниеТипаОбъектаСопоставления, Синоним", ОписаниеТипаОбъектаСопоставления, Синоним);
	ДобавитьСтандартныеКолонкиВТаблицуСопоставления(ВременнаяТЗ, СтруктураОбъектаСопоставления, Истина, Истина, Истина, Истина);
	ДобавитьСтандартныеКолонкиВМассивРеквизитов(МассивРеквизитов, СтруктураОбъектаСопоставления, Истина, Истина, Истина, Истина);
	
	Для каждого Колонка Из ИнформацияПоКолонкам Цикл 
		Если ВременнаяТЗ.Колонки.Найти(Колонка.ИмяКолонки) = Неопределено Тогда
			ПредставлениеКолонки = Колонка.ПредставлениеКолонки;
			ВременнаяТЗ.Колонки.Добавить(Колонка.ИмяКолонки, Колонка.ТипКолонки, ПредставлениеКолонки);
			МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.ИмяКолонки, Колонка.ТипКолонки, "ТаблицаСопоставленияДанных", ПредставлениеКолонки));
		КонецЕсли;
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	Для Каждого Колонка Из ВременнаяТЗ.Колонки Цикл
		НовыйЭлемент = Элементы.Добавить("ТаблицаСопоставленияДанных_" + Колонка.Имя, Тип("ПолеФормы"), Элементы.ТаблицаСопоставленияДанных);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ТаблицаСопоставленияДанных." + Колонка.Имя;
		НовыйЭлемент.Заголовок = Колонка.Заголовок;
		НовыйЭлемент.ТолькоПросмотр = Истина;
		Если НовыйЭлемент.Вид <> ВидПоляФормы.ПолеНадписи Тогда 
			ОбязательнаДляЗаполнения = ЭтаКолонкаОбязательнаДляЗаполнения(Колонка.Имя);
			НовыйЭлемент.АвтоОтметкаНезаполненного  = ОбязательнаДляЗаполнения;
			НовыйЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
		КонецЕсли;
		Если Колонка.Имя = "ОбъектСопоставления" Тогда 
			НовыйЭлемент.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
			НовыйЭлемент.ЦветФона = ЦветаСтиля.ФонУправляющегоПоля;
			НовыйЭлемент.КартинкаШапки = БиблиотекаКартинок.Изменить;
			НовыйЭлемент.ТолькоПросмотр = Ложь;
			НовыйЭлемент.РежимРедактирования =  РежимРедактированияКолонки.Непосредственно;
			НовыйЭлемент.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриАктивизации;
		ИначеЕсли Колонка.Имя = "Идентификатор" Тогда
			НовыйЭлемент.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
			НовыйЭлемент.ТолькоПросмотр = Истина;
			НовыйЭлемент.Ширина = 4;
		ИначеЕсли Колонка.Имя = "РезультатСопоставленияСтроки" ИЛИ Колонка.Имя = "ОписаниеОшибки" ИЛИ Колонка.Имя = "СписокНеоднозначностей" Тогда
			НовыйЭлемент.Видимость = Ложь;
		КонецЕсли;
		
		Отбор = Новый Структура("ИмяКолонки", Колонка.Имя);
		Колонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
		Если Колонки.Количество() > 0 Тогда 
			НовыйЭлемент.Видимость = Колонки[0].Видимость;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ВременнаяТЗ, "ТаблицаСопоставленияДанных");
КонецПроцедуры

&НаСервере
Процедура СоздатьТаблицуСопоставленияПоИнформацииОКолонкахДляТЧ() 
	
	МассивРеквизитов = Новый Массив;
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	ВременнаяТЗ = РеквизитФормыВЗначение("ТаблицаСопоставленияДанных"); 
	ВременнаяТЗ.Колонки.Очистить();
	
	ДобавитьСтандартныеКолонкиВТаблицуСопоставления(ВременнаяТЗ, Неопределено, Истина, Истина, Истина, Ложь);
	ДобавитьСтандартныеКолонкиВМассивРеквизитов(МассивРеквизитов, Неопределено, Истина, Истина, Истина, Ложь);

	ОбязательныеКолонки = Новый Массив;
	КолонкиСодержащиеСвязиПараметровВыбора = Новый Соответствие;
	РеквизитыТЧ = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаСопоставления).Реквизиты;
	Для каждого Колонка Из РеквизитыТЧ Цикл
		
		Если Колонка.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			ОбязательныеКолонки.Добавить("ТЧ_" + Колонка.Имя);
		КонецЕсли;
		Если Колонка.СвязиПараметровВыбора.Количество() > 0 Тогда
			КолонкиСодержащиеСвязиПараметровВыбора.Вставить(Колонка.Имя, Колонка.СвязиПараметровВыбора);
		КонецЕсли;
		ВременнаяТЗ.Колонки.Добавить("ТЧ_" + Колонка.Имя, Колонка.Тип, Колонка.Представление());
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ТЧ_" + Колонка.Имя, Колонка.Тип, "ТаблицаСопоставленияДанных", Колонка.Представление()));
	КонецЦикла;
	
	Для каждого Колонка Из ИнформацияПоКолонкам Цикл
		ВременнаяТЗ.Колонки.Добавить("ФЛ_" + Колонка.ИмяКолонки, ТипСтрока, Колонка.ПредставлениеКолонки);
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ФЛ_" + Колонка.ИмяКолонки, ТипСтрока, "ТаблицаСопоставленияДанных", Колонка.ПредставлениеКолонки));
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивРеквизитов);
	РеквизитыСозданы = Истина;
	
	ГруппаКолонокЗагружаемыеДанные = Элементы.Добавить("ЗагружаемыеДанные", Тип("ГруппаФормы"), Элементы.ТаблицаСопоставленияДанных);
	ГруппаКолонокЗагружаемыеДанные.Группировка = ГруппировкаКолонок.Горизонтальная;
	
	Для Каждого Колонка Из ВременнаяТЗ.Колонки Цикл
		
		Если СтрНачинаетсяС(Колонка.Имя, "ТЧ_") Тогда
			ГруппаКолонокЗагружаемыеДанныеТЧ = Элементы.Добавить("ЗагружаемыеДанные_" + Колонка.Имя , Тип("ГруппаФормы"), ГруппаКолонокЗагружаемыеДанные);
			ГруппаКолонокЗагружаемыеДанныеТЧ.Группировка = ГруппировкаКолонок.Вертикальная;
			Родитель = ГруппаКолонокЗагружаемыеДанныеТЧ;
		ИначеЕсли СтрНачинаетсяС(Колонка.Имя, "ФЛ_") Тогда
			Продолжить;
		Иначе
			Родитель = ГруппаКолонокЗагружаемыеДанные;
		КонецЕсли;
		
		НовыйЭлемент = Элементы.Добавить("ТаблицаСопоставленияДанных_" + Колонка.Имя, Тип("ПолеФормы"), Родитель);
		
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ТаблицаСопоставленияДанных." + Колонка.Имя;
		НовыйЭлемент.Заголовок = Колонка.Заголовок;
		НовыйЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
		
		Если СтрДлина(Колонка.Имя) > 3 И СтрНачинаетсяС(Колонка.Имя, "ТЧ_") Тогда
			Отбор = Новый Структура("ИмяКолонки", Сред(Колонка.Имя, 4));
			Колонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
			Если Колонки.Количество() > 0 Тогда 
				НовыйЭлемент.Видимость = Колонки[0].Видимость;
			КонецЕсли;
		КонецЕсли;
		
		Если Колонка.Имя = "Идентификатор" Тогда
			НовыйЭлемент.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
			НовыйЭлемент.ТолькоПросмотр = Истина;
			НовыйЭлемент.Ширина = 1;
		ИначеЕсли Колонка.Имя = "РезультатСопоставленияСтроки" ИЛИ Колонка.Имя = "ОписаниеОшибки" Тогда
			НовыйЭлемент.Видимость = Ложь;
		КонецЕсли;
		
		Если ОбязательныеКолонки.Найти(Колонка.Имя) <> Неопределено Тогда 
			НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
		
		Если СтрНачинаетсяС(Колонка.Имя, "ТЧ_") Тогда
			ТипКолонки = Метаданные.НайтиПоТипу(Колонка.ТипЗначения.Типы()[0]);
			Если ТипКолонки <> Неопределено И СтрНайти(ТипКолонки.ПолноеИмя(), "Справочник") > 0 Тогда
				НовыйЭлемент.КартинкаШапки = БиблиотекаКартинок.Изменить;
			КонецЕсли;
			
			КолонкаСвязьПараметровВыбора = КолонкиСодержащиеСвязиПараметровВыбора.Получить(Сред(Колонка.Имя, 4));
			Если КолонкаСвязьПараметровВыбора <> Неопределено Тогда 
				НовыйМассив = Новый Массив();
				Для каждого СвязьПараметраВыбора Из КолонкаСвязьПараметровВыбора Цикл
					Позиция = СтрНайти(СвязьПараметраВыбора.ПутьКДанным, ".", НаправлениеПоиска.СКонца);
					Если Позиция > 0 Тогда
						ИмяЭлемента = Сред(СвязьПараметраВыбора.ПутьКДанным, Позиция + 1);
						НоваяСвязь = Новый СвязьПараметраВыбора(СвязьПараметраВыбора.Имя, "Элементы.ТаблицаСопоставленияДанных.ТекущиеДанные.ТЧ_" + ИмяЭлемента, СвязьПараметраВыбора.ИзменениеЗначения);
						НовыйМассив.Добавить(НоваяСвязь);
					КонецЕсли;
				КонецЦикла;
				НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
				НовыйЭлемент.СвязиПараметровВыбора = НовыеСвязи;
			КонецЕсли;
			
			Отбор = Новый Структура("Родитель", Сред(Колонка.Имя, 4));
			КолонкиГруппировки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
			
			Если КолонкиГруппировки.Количество() = 1 Тогда
				
				КолонкаУровень2 = ВременнаяТЗ.Колонки.Найти("ФЛ_" + КолонкиГруппировки[0].ИмяКолонки);
				Если КолонкаУровень2 <> Неопределено Тогда 
					НовыйЭлемент = Элементы.Добавить(КолонкаУровень2.Имя, Тип("ПолеФормы"), Родитель);
					НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
					НовыйЭлемент.ПутьКДанным = "ТаблицаСопоставленияДанных." + КолонкаУровень2.Имя;
					ТипКолонки = Метаданные.НайтиПоТипу(КолонкаУровень2.ТипЗначения.Типы()[0]);
					Если ТипКолонки <> Неопределено И СтрНайти(ТипКолонки.ПолноеИмя(), "Справочник") > 0 Тогда
						НовыйЭлемент.Заголовок = НСтр("ru = 'Данные из файла'");
					Иначе
						НовыйЭлемент.Заголовок = " ";
					КонецЕсли;
					НовыйЭлемент.ТолькоПросмотр = Истина;
					НовыйЭлемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
				КонецЕсли;
				
			ИначеЕсли КолонкиГруппировки.Количество() > 1 Тогда
				ГруппаКолонокЗагружаемыеДанныеТЧ = Элементы.Добавить("ЗагружаемыеДанные_ФЛ_" + Колонка.Имя , Тип("ГруппаФормы"), Родитель);
				ГруппаКолонокЗагружаемыеДанныеТЧ.Группировка = ГруппировкаКолонок.ВЯчейке;
				Родитель = ГруппаКолонокЗагружаемыеДанныеТЧ;
				
				Префикс = НСтр("ru = 'Данные из файла:'");
				Для каждого КолонкаГруппа Из КолонкиГруппировки Цикл
					Колонка2 = ВременнаяТЗ.Колонки.Найти("ФЛ_" + КолонкаГруппа.ИмяКолонки);
					Если Колонка2 <> Неопределено Тогда 
						НовыйЭлемент = Элементы.Добавить(Колонка2.Имя, Тип("ПолеФормы"), Родитель); 
						НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
						НовыйЭлемент.ПутьКДанным = "ТаблицаСопоставленияДанных." + Колонка2.Имя;
						НовыйЭлемент.Заголовок = Префикс + Колонка2.Заголовок;
						НовыйЭлемент.ТолькоПросмотр = Истина;
						НовыйЭлемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
						
						Если СтрДлина(Колонка.Имя) > 3 И СтрНачинаетсяС(Колонка.Имя, "ФЛ_") Тогда
						Отбор = Новый Структура("ИмяКолонки", Сред(Колонка.Имя, 4));
						Колонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
							Если Колонки.Количество() > 0 Тогда 
								НовыйЭлемент.Видимость = Колонки[0].Видимость;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					Префикс = "";
				КонецЦикла;
			Иначе
				НовыйЭлемент.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ВременнаяТЗ, "ТаблицаСопоставленияДанных");
КонецПроцедуры

&НаСервере
Функция ЭтаКолонкаОбязательнаДляЗаполнения(ИмяКолонки)
	Отбор = Новый Структура("ИмяКолонки", ИмяКолонки);
	Колонка =  ИнформацияПоКолонкам.НайтиСтроки(Отбор);
	Если Колонка.Количество()>0 Тогда 
		Возврат Колонка[0].ОбязательнаДляЗаполнения;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

&НаСервере
Процедура ОчисткаШаблонСДанными()
	НомерСтрокиСШапкойТаблицы = ?(ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкиИмеютГруппировку(ИнформацияПоКолонкам), 2, 1);
	
	ОбластьЗаголовка = ШаблонСДанными.ПолучитьОбласть(1, 1, НомерСтрокиСШапкойТаблицы, ШаблонСДанными.ШиринаТаблицы);
	ШаблонСДанными.Очистить();
	ШаблонСДанными.Вывести(ОбластьЗаголовка);
КонецПроцедуры

&НаСервере
Функция ГрупповоеИзменениеРеквизитовНаСервере(ВерхняяПозиция, НижняяПозиция)
	МассивСсылок = Новый Массив;
	Для Позиция = ВерхняяПозиция По НижняяПозиция Цикл 
		Ячейка = ТаблицаОтчет.ПолучитьОбласть(Позиция, 2, Позиция, 2);	
		Если ЗначениеЗаполнено(Ячейка.ТекущаяОбласть.Расшифровка) Тогда 
			МассивСсылок.Добавить(Ячейка.ТекущаяОбласть.Расшифровка);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивСсылок;
КонецФункции

// Для внутреннего использования
// 
Функция СобытиеЖурналаРегистрацииЗагрузкаДанныхИзФайла() 
	
	Возврат НСтр("ru = 'Загрузка данных из файла'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

////////////////////// Работа с файлами //////////////////////

&НаКлиенте
Процедура ПослеВыбораФайлаДляСохранения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПутьКФайлу = Результат[0];
		ВыбранныйФайл = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПутьКФайлу);
		РасширениеФайла = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ВыбранныйФайл.Расширение);
	
		Если ЗначениеЗаполнено(ВыбранныйФайл.Имя) Тогда
			Если РасширениеФайла = "csv" Тогда
				СохранитьТаблицуВCSVФайл(ПутьКФайлу);
			ИначеЕсли РасширениеФайла = "xlsx" Тогда
				ШаблонСДанными.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLSX);
			ИначеЕсли РасширениеФайла = "mxl" Тогда
				ШаблонСДанными.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.MXL);
			ИначеЕсли РасширениеФайла = "xls" Тогда
				ШаблонСДанными.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
			ИначеЕсли РасширениеФайла = "ods" Тогда
				ШаблонСДанными.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.ODS);
			Иначе
				ПоказатьПредупреждение(, НСтр("ru = 'Шаблон файла не был сохранен.'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзФайлаВШаблон(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ИмяФайла = Результат[0].Имя;
		АдресВременногоХранилища = Результат[0].Хранение;
		
		Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(
			ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла));
		ФоновоеЗадание = Ложь;
		ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(АдресВременногоХранилища, Расширение, ФоновоеЗадание);
		Если ФоновоеЗадание Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
			ПодключитьОбработчикОжидания("ФоновоеЗаданиеЗагрузкаФайлаНаКлиенте", 1, Истина);
			ПараметрыОбработчика.МаксимальныйИнтервал = 5;
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ФоновоеЗаданиеИдентификатор);
		Иначе
			ПереходКСледующемуШагуЗагрузкиДанных();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораРасширенияФайла(Результат, Параметр) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		АдресВоВременномХранилище = ЭтотОбъект.УникальныйИдентификатор;
		СохранитьШаблонВоВременноеХранилище(Результат, АдресВоВременномХранилище);
		ПолучитьФайл(АдресВоВременномХранилище, ИмяОбъектаСопоставления + "." + Результат, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьШаблонВоВременноеХранилище(РасширениеФайла, АдресВоВременномХранилище)
	
	ИмяФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	Если РасширениеФайла = "csv" Тогда 
		СохранитьТаблицуВCSVФайл(ИмяФайла);
	ИначеЕсли РасширениеФайла = "xlsx" Тогда
		ШаблонСДанными.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
	ИначеЕсли РасширениеФайла = "xls" Тогда
		ШаблонСДанными.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLS);
	ИначеЕсли РасширениеФайла = "ods" Тогда
		ШаблонСДанными.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.ODS);
	Иначе 
		ШаблонСДанными.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.MXL);
	КонецЕсли;
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресВоВременномХранилище);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьИмяФайлаДляОбъектаМетаданных(ИмяОбъектаМетаданных)
	МетаданныеСправочника = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаМетаданных);
	
	Если МетаданныеСправочника <> Неопределено Тогда 
		ИмяФайла = СокрЛП(МетаданныеСправочника.Синоним);
		Если СтрДлина(ИмяФайла) = 0 Тогда 
			ИмяФайла = ИмяОбъектаМетаданных;	
		КонецЕсли;
	Иначе
		ИмяФайла = ИмяОбъектаМетаданных;
	КонецЕсли;
	
	ИмяФайла = СтрЗаменить(ИмяФайла,":","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"*","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"\","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"/","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"&","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"<","");
	ИмяФайла = СтрЗаменить(ИмяФайла,">","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"|","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"""","");
	
	Возврат ИмяФайла;
КонецФункции 

&НаКлиенте
Процедура ПослеВопросаПроОтменитьСопоставление(Результат, Параметр) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			СтрокаТаблицы.ОбъектСопоставления = Неопределено;
			СтрокаТаблицы.РезультатСопоставленияСтроки = "НеСопоставлен";
			СтрокаТаблицы.СписокНеоднозначностей = Неопределено;
			СтрокаТаблицы.ОписаниеОшибки = "";
		КонецЦикла;
		ПоказатьСтатистикуПоСопоставлениюЗагрузкаИзФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(АдресВременногоХранилища, Расширение, ФоновоеЗадание = Ложь)
	ИмяВременногоФайла=ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные = ПолучитьИЗВременногоХранилища(АдресВременногоХранилища);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ОчисткаШаблонСДанными();
	
	ПараметрыВызоваСервера = Новый Структура();
	ПараметрыВызоваСервера.Вставить("Расширение", Расширение);
	ПараметрыВызоваСервера.Вставить("ШаблонСДанными", ШаблонСДанными);
	ПараметрыВызоваСервера.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
	ТаблицаИнформацияПоКолонкам = РеквизитФормыВЗначение("ИнформацияПоКолонкам");
	ПараметрыВызоваСервера.Вставить("ИнформацияПоКолонкам", ТаблицаИнформацияПоКолонкам);
	
	РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, 
		"Обработки.ЗагрузкаДанныхИзФайла.ЗагрузитьФайлВТаблицу",
		ПараметрыВызоваСервера, 
		НСтр("ru = 'Подсистема ЗагрузкаДанныхИзФайла: Выполнение серверного метода загрузка данных из файла'"));
	
	Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
		ШаблонСДанными = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
		ЗагрузкаДанныхИзФайла.ДобавитьСтатистическуюИнформацию("ЗагрузкаИзВнешнегоФайла." + Расширение);
	Иначе
		ФоновоеЗадание = Истина;
		ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
		ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВызоваФормыИзменитьБланк(Результат, Параметр) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из Результат Цикл
				ПараметрыОтбора = Новый Структура("ИмяКолонки", СтрокаТаблицы.ИмяКолонки);
				НайденнаяСтрока = ИнформацияПоКолонкам.НайтиСтроки(ПараметрыОтбора)[0];
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаТаблицы);
				СохранятьНастройки = Истина;
			КонецЦикла;
		Иначе
			ИнформацияПоКолонкам.Очистить();
			СформироватьМакетПоТипуЗагрузки();
			СохранятьНастройки = Ложь;
		КонецЕсли;
		ИнформацияПоКолонкам.Сортировать("Позиция Возр");
		ОбновитьНаименованияКолонокТаблицыСопоставления();
		ИзменитьБланкПоИнформацииПоКолонкам(, СохранятьНастройки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованияКолонокТаблицыСопоставления()
	
	Для каждого СтрокаТаблицы Из ИнформацияПоКолонкам Цикл 
		Колонка = Элементы.ТаблицаСопоставленияДанных.ПодчиненныеЭлементы.Найти(СтрокаТаблицы.ИмяКолонки);
		Если Колонка <> Неопределено Тогда
			Колонка.Заголовок = ?(НЕ ПустаяСтрока(СтрокаТаблицы.Синоним), 
				СтрокаТаблицы.Синоним + " (" + СтрокаТаблицы.ПредставлениеКолонки +")", 
				СтрокаТаблицы.ПредставлениеКолонки);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИзменитьБланкПоИнформацииПоКолонкам(Бланк = Неопределено, СохранитьНастройки = Ложь)

	Если Бланк = Неопределено Тогда 
		Бланк = ШаблонСДанными;
	КонецЕсли;
	
	ТаблицаКолонок = РеквизитФормыВЗначение("ИнформацияПоКолонкам");
	Если СохранитьНастройки Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ЗагрузкаДанныхИзФайла", ИмяОбъектаСопоставления, ТаблицаКолонок,, ИмяПользователя());
	КонецЕсли;
	
	Бланк.Очистить();
	Шапка = Обработки.ЗагрузкаДанныхИзФайла.ШапкаБланкаДляЗаполненияПоИнформацииПоКолонкам(ТаблицаКолонок);
	Бланк.Вывести(Шапка);
	ПоказатьИнформационнуюСтрокуПроОбязательныеКолонки();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонСДаннымиПриИзменении(Элемент)
	ПодтверждениеЗакрытияФормы = Ложь;
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыВидЗагрузкиДанных

&НаКлиенте
Процедура ВидЗагрузкиДанныхВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПереходКСледующемуШагуЗагрузкиДанных();
КонецПроцедуры


&НаКлиенте
Процедура ВидЗагрузкиДанныхПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыСопоставленияДанных

&НаКлиенте
Процедура ТаблицаСопоставленияДанныхПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ТипЗагрузки <> "ТабличнаяЧасть" Тогда
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ОбъектСопоставления) Тогда 
			Элемент.ТекущиеДанные.РезультатСопоставленияСтроки = "СтрокаСопоставлена";
		Иначе
			Элемент.ТекущиеДанные.РезультатСопоставленияСтроки = "НеСопоставлен";
		КонецЕсли;
	Иначе
		Отбор = Новый Структура("ОбязательнаДляЗаполнения", Истина);
		КолонкиОбязательнаДляЗаполнения = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
		РезультатСопоставленияСтроки = "СтрокаСопоставлена";
		Для каждого КолонкаТаблицы Из КолонкиОбязательнаДляЗаполнения Цикл
			Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные["ТЧ_" + КолонкаТаблицы.Родитель]) Тогда
				РезультатСопоставленияСтроки = ?(ЗначениеЗаполнено(Элемент.ТекущиеДанные.ОписаниеОшибки), "Неоднозначность", "НеСопоставлен");
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Элемент.ТекущиеДанные.РезультатСопоставленияСтроки = РезультатСопоставленияСтроки;
	КонецЕсли;
	
	ПоказатьСтатистикуПоСопоставлениюЗагрузкаИзФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСопоставленияДанныхПриАктивизацииЯчейки(Элемент)
	Элементы.УстранитьНеоднозначность.Доступность = Ложь;
	Элементы.ТаблицаСопоставленияДанныхКонтекстноеМенюРазрешитьНеоднозначность.Доступность = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элемент.ТекущиеДанные.РезультатСопоставленияСтроки) Тогда 
		Если ТипЗагрузки = "ТабличнаяЧасть" Тогда 
			Если СтрДлина(Элемент.ТекущийЭлемент.Имя) > 3 И СтрНачинаетсяС(Элемент.ТекущийЭлемент.Имя, "ТЧ_") Тогда
				ИмяКолонки = Сред(Элемент.ТекущийЭлемент.Имя, 4);
				Если СтрНайти(Элемент.ТекущиеДанные.ОписаниеОшибки, ИмяКолонки) > 0 Тогда 
					Элементы.УстранитьНеоднозначность.Доступность = Истина;
					Элементы.ТаблицаСопоставленияДанныхКонтекстноеМенюРазрешитьНеоднозначность.Доступность = Истина;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Элемент.ТекущиеДанные.РезультатСопоставленияСтроки = "Неоднозначность" Тогда 
			Элементы.УстранитьНеоднозначность.Доступность = Истина;
			Элементы.ТаблицаСопоставленияДанныхКонтекстноеМенюРазрешитьНеоднозначность.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСопоставленияДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьФормуРазрешенияНеоднозначности(ВыбраннаяСтрока, Поле.Имя, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыОтчет

&НаКлиенте
Процедура ТаблицаОтчетПриАктивизацииОбласти(Элемент)
	Если ТаблицаОтчет.ТекущаяОбласть.Низ = 1 И ТаблицаОтчет.ТекущаяОбласть.Верх = 1 Тогда
		Элементы.ИзменитьРеквизиты.Доступность = Ложь;
	Иначе
		Элементы.ИзменитьРеквизиты.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрупповоеИзменениеРеквизитов(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов") Тогда
		Если ТаблицаОтчет.ТекущаяОбласть.Верх = 1 Тогда
			ВерхняяПозиция = 2;
		Иначе
			ВерхняяПозиция = ТаблицаОтчет.ТекущаяОбласть.Верх;
		КонецЕсли;
		МассивСсылок = ГрупповоеИзменениеРеквизитовНаСервере(ВерхняяПозиция, ТаблицаОтчет.ТекущаяОбласть.Низ);
		Если массивСсылок.Количество() > 0 Тогда
			ПараметрыФормы = Новый Структура("МассивОбъектов", МассивСсылок);
			ИмяОбъекта = "Обработка.";
			ОткрытьФорму(ИмяОбъекта + "ГрупповоеИзменениеРеквизитов.Форма", ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти





