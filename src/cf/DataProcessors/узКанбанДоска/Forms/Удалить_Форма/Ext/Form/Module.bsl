
&НаКлиенте
Процедура ТЧЗадачиПередНачаломИзменения(Элемент, Отказ)
	Отказ = Ложь;
	//ПоказатьЗначение(,Элемент.ТекущиеДанные.Задача);
	////Элемент.ЗакончитьРедактированиеСтроки(Истина);
	//Элементы.ТЧЗадачиЗарегистрирована.ЗакончитьРедактированиеСтроки(Ложь);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//{Код для декомпиляции управляемой формы
	Если ЭтаФорма.Параметры.Свойство("ДекомпиляцияЭлементов") Тогда
		ВнешниеОбработки.Создать(ЭтаФорма.Параметры.ДекомпиляцияЭлементов.ИмяПодключеннойОбработки,Ложь).ОпределитьВнутренниеСвойстваЭлементов(ЭтаФорма);
	КонецЕсли;	
	//}Код для декомпиляции управляемой формы
	
	пНастройкиКомпоновщика = Неопределено;
	
	ЗагрузитьСохраненныеНастройки(пНастройкиКомпоновщика);
	
	НастройкиТЧДляАктивацииПервойСтроки = Новый Структура();
	
	ОпределитьОтборНаСервере(пНастройкиКомпоновщика);
	Попытка
		ЗаполнитьЗадачиНаСервере();		
	Исключение
		УстановитьСтандартныеНастройкиНаСервере();
		ЗаполнитьЗадачиНаСервере();
	КонецПопытки;
	
	УстановитьВидимостьДоступность();
	УстановитьОтборТЧ();
	
	ОформлениеЦветаЗадачНаСервере(); 
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСохраненныеНастройки(пНастройкиКомпоновщика)
	КлючНастроек = ПолучитьКлючНастроек();
	СохраненныеНастройки = ХранилищеОбщихНастроек.Загрузить(КлючНастроек,КлючНастроек);
	
	Если СохраненныеНастройки <> Неопределено Тогда
		//ЗаполнитьТЧНастройкиКолонокНаСервере();	
		Если СохраненныеНастройки.Свойство("ТЧНастройкиКолонок") Тогда
			ЗаполнитьТЧНастройкиКолонокНаСервере();
			ТЧНастройкиКолонок = СохраненныеНастройки.ТЧНастройкиКолонок;
			Для каждого СтрокаТЧНастройкиКолонок из Объект.ТЧНастройкиКолонок цикл
				ПараметрыОтбора=Новый Структура();
				ПараметрыОтбора.Вставить("Статус",СтрокаТЧНастройкиКолонок.Статус);
				НайденныеСтрокиСохраненныеНастройки = ТЧНастройкиКолонок.НайтиСтроки(ПараметрыОтбора);
				Для каждого СтрокаНайденныеСтроки из НайденныеСтрокиСохраненныеНастройки цикл
					СтрокаТЧНастройкиКолонок.Видимость = СтрокаНайденныеСтроки.Видимость;		
				Конеццикла;				
			Конеццикла;
		Иначе
			ЗаполнитьТЧНастройкиКолонокНаСервере();	
		Конецесли;
		Если СохраненныеНастройки.Свойство("НастройкиКомпоновщикаХранилище") Тогда
			пНастройкиКомпоновщика = СохраненныеНастройки.НастройкиКомпоновщикаХранилище.Получить();
		Конецесли;		
	Иначе
		ЗаполнитьТЧНастройкиКолонокНаСервере();
	Конецесли;	
КонецПроцедуры 

&НаСервере
Функция ПолучитьКлючНастроек()
	КлючНастроек = "Обработка.узКанбанДоска";	
	Возврат КлючНастроек;
КонецФункции 

&НаСервере
Процедура ЗаполнитьТЧНастройкиКолонокНаСервере()
	пОбъект = РеквизитФормыВЗначение("Объект"); 
	пОбъект.ЗаполнитьТЧНастройкиКолонок();
	ЗначениеВРеквизитФормы(пОбъект,"Объект");
КонецПроцедуры 

&НаСервере
Процедура УстановитьОтборТЧ()
	
	Элементы.ТЧЗадачиОтменена.ОтборСтрок = Новый ФиксированнаяСтруктура("Статус", ПредопределенноеЗначение("Справочник.узСтатусыЗадачи.Отменена"));
	Элементы.ТЧЗадачиBacklog.ОтборСтрок = Новый ФиксированнаяСтруктура("Статус", ПредопределенноеЗначение("Справочник.узСтатусыЗадачи.Backlog"));
	Элементы.ТЧЗадачиЗарегистрирована.ОтборСтрок = Новый ФиксированнаяСтруктура("Статус", ПредопределенноеЗначение("Справочник.узСтатусыЗадачи.Зарегистрирована"));
	Элементы.ТЧЗадачиВПроцессеВыполнения.ОтборСтрок = Новый ФиксированнаяСтруктура("Статус", ПредопределенноеЗначение("Справочник.узСтатусыЗадачи.ВПроцессеВыполнения"));
	Элементы.ТЧЗадачиОжидаетОтвета.ОтборСтрок = Новый ФиксированнаяСтруктура("Статус", ПредопределенноеЗначение("Справочник.узСтатусыЗадачи.ОжидаетОтвета"));
	Элементы.ТЧЗадачиНаТестированииПоказПользователям.ОтборСтрок = Новый ФиксированнаяСтруктура("Статус", ПредопределенноеЗначение("Справочник.узСтатусыЗадачи.НаТестированииПоказПользователям"));
	Элементы.ТЧЗадачиЗапросНаДобавление.ОтборСтрок = Новый ФиксированнаяСтруктура("Статус", ПредопределенноеЗначение("Справочник.узСтатусыЗадачи.ЗапросНаДобавление"));
	Элементы.ТЧЗадачиКПереносуВРабочую.ОтборСтрок = Новый ФиксированнаяСтруктура("Статус", ПредопределенноеЗначение("Справочник.узСтатусыЗадачи.КПереносуВРабочую"));
	Элементы.ТЧЗадачиОтложена.ОтборСтрок = Новый ФиксированнаяСтруктура("Статус", ПредопределенноеЗначение("Справочник.узСтатусыЗадачи.Отложена"));
	Элементы.ТЧЗадачиГотово.ОтборСтрок = Новый ФиксированнаяСтруктура("Статус", ПредопределенноеЗначение("Справочник.узСтатусыЗадачи.Готово"));
	Элементы.ТЧЗадачиАрхив.ОтборСтрок = Новый ФиксированнаяСтруктура("Статус", ПредопределенноеЗначение("Справочник.узСтатусыЗадачи.Архив"));

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	Для каждого СтрокаТЧНастройкиКолонок из Объект.ТЧНастройкиКолонок цикл
		ИмяГруппы = "Группа"+СтрокаТЧНастройкиКолонок.ИмяПредопределенныхДанных;
		Элементы[ИмяГруппы].Видимость = СтрокаТЧНастройкиКолонок.Видимость;
	Конеццикла;
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьЗадачиНаСервере()
	Объект.АдресВременногоХранилища = ПоместитьВоВременноеХранилище(КомпоновщикНастроекКомпоновкиДанных.Настройки,Новый УникальныйИдентификатор());
	
	пОбъект = РеквизитФормыВЗначение("Объект"); 
	пОбъект.ЗаполнитьЗадачи();
	ЗначениеВРеквизитФормы(пОбъект,"Объект");
КонецПроцедуры 

&НаКлиенте
Процедура ТЧЗадачиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СменитьСтатусЗадачиНаКлиенте(Элемент,ПараметрыПеретаскивания);
	ОформлениеЦветаЗадачНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СменитьСтатусЗадачиНаКлиенте(Элемент,ПараметрыПеретаскивания)
	//ИмяТЧ = Элемент.Имя;
	//пОтборСтрок = Элементы[ИмяТЧ].ОтборСтрок;
	НовыйСтатус = Элемент.ОтборСтрок.Статус;	
	ДанныеИсточник = ПараметрыПеретаскивания.Значение;
	
	МассивЗадач = Новый Массив();
	Для каждого ДанныеИсточник из ПараметрыПеретаскивания.Значение цикл
		ЗадачаСсылка = ДанныеИсточник.Задача;
		МассивЗадач.Добавить(ЗадачаСсылка);
	Конеццикла;	
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("НовыйСтатус",НовыйСтатус);
	ДопПараметры.Вставить("МассивЗадач",МассивЗадач);	
	СменитьСтатусЗадачиНаСервере(ДопПараметры);
КонецПроцедуры 

&НаСервере
Процедура СменитьСтатусЗадачиНаСервере(ДопПараметры)
	пОбъект = РеквизитФормыВЗначение("Объект"); 
	пОбъект.СменитьСтатусЗадачи(ДопПараметры);
	ЗначениеВРеквизитФормы(пОбъект,"Объект");
КонецПроцедуры 

&НаКлиенте
Процедура ТЧЗадачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)	
	Отказ = Истина;
	ДобавитьНовуюЗадачу(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюЗадачу(Элемент)
	пСтатус = Элемент.ОтборСтрок.Статус;
	ПараметрыНовойЗадачи = Новый Структура();
	ПараметрыНовойЗадачи.Вставить("Статус",пСтатус);
	ЭлементыОтбора = КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы;
	Для каждого ЭлементОтбора из ЭлементыОтбора цикл
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		Конецесли;
		Если ЭлементОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно Тогда
			Продолжить;
		Конецесли;	
		Если СтрНайти(ЭлементОтбора.ЛевоеЗначение,".") > 0 Тогда
			Продолжить;
		Конецесли;
		Если ТипЗнч(ЭлементОтбора) =  Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПараметрыНовойЗадачи.Вставить("" + ЭлементОтбора.ЛевоеЗначение,ЭлементОтбора.ПравоеЗначение);	
		Конецесли;
	Конеццикла;
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ТребоватьЗаполнитьРодителя",Истина);
	ДопПараметры.Вставить("ПараметрыНовойЗадачи",ПараметрыНовойЗадачи);
	ОткрытьФорму("Справочник.узЗадачи.Форма.ФормаЭлемента",ДопПараметры);	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "СправочникЗадачаЗаписана"
		ИЛИ ИмяСобытия = "ДобавленУбранНаблюдатель"
		ИЛИ ИмяСобытия = "СправочникВариантВажностиЗаписан"
		ИЛИ ИмяСобытия = "СправочникСпринтЗаписан"
		Тогда
		ЗаполнитьЗадачиНаСервере();		
	Конецесли;
	
	ОбновитьКанбанДоску();
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройки(Команда)
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОтключитьОбработчикОжидания("ЗаполнитьЗадачиНаКлиенте");
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	СохранитьНастройки();
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	НастройкиКомпоновщикаХранилище = Новый ХранилищеЗначения(КомпоновщикНастроекКомпоновкиДанных.Настройки);
	
	КлючНастроек = ПолучитьКлючНастроек();
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ТЧНастройкиКолонок",Объект.ТЧНастройкиКолонок.Выгрузить());
	ДопПараметры.Вставить("НастройкиКомпоновщикаХранилище",НастройкиКомпоновщикаХранилище);
	
	ХранилищеОбщихНастроек.Сохранить(КлючНастроек,КлючНастроек,ДопПараметры);
КонецПроцедуры 

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ВыполнитьДействиеДляАктивнойСтраницы();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеДляАктивнойСтраницы()
	пТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	Если пТекущаяСтраница = Элементы.ГруппаКанбанДоска Тогда
		ОбновитьКанбанДоску();
	Конецесли;	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьКанбанДоску()
	Объект.АдресВременногоХранилища = ПоместитьВоВременноеХранилище(КомпоновщикНастроекКомпоновкиДанных.Настройки,Новый УникальныйИдентификатор());
	ЗаполнитьЗадачиНаСервере();
	УстановитьВидимостьДоступность();	
	ОчиститьАктивизацииСтрок();
	
	ОформлениеЦветаЗадачНаСервере();
КонецПроцедуры 

&НаКлиенте
Процедура ОчиститьАктивизацииСтрок(ИсключитьИмяТЧ = Неопределено)
	Для каждого НастройкаАктивации из НастройкиТЧДляАктивацииПервойСтроки цикл		
		ИмяТЧ = НастройкаАктивации.Ключ;	
		Если ИмяТЧ = ИсключитьИмяТЧ Тогда
			Продолжить;
		Конецесли;
		Элементы[ИмяТЧ].ВыделенныеСтроки.Очистить();
	Конеццикла;
КонецПроцедуры 

&НаСервере
Функция ОпределитьОтборНаСервере(пНастройкиКомпоновщика = Неопределено) Экспорт
	пОбъект = РеквизитФормыВЗначение("Объект"); 
	МакетСКД = пОбъект.ПолучитьМакет("СхемаКомпоновкиДанных");
	
	АдресВременногоХранилищаМакетаСКД = ПоместитьВоВременноеХранилище(МакетСКД,Новый УникальныйИдентификатор());
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВременногоХранилищаМакетаСКД);
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(ИсточникНастроек);
	
	Если пНастройкиКомпоновщика = Неопределено Тогда
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);
	Иначе
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(пНастройкиКомпоновщика);
	Конецесли;
	//ЗначениеВРеквизитФормы(КомпоновщикНастроекКомпоновкиДанных,"КомпоновщикНастроекКомпоновкиДанных");
	//ЗначениеВРеквизитФормы(СправочникОбъект,"Объект");
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Элементы.ТЧЗадачиЗарегистрирована.ТекущаяСтрока = -1;
	////Элементы.ТЧЗадачиЗарегистрирована.ТекущиеДанные = Неопределено;
	//Элементы.ТЧЗадачиЗарегистрирована.ТекущийЭлемент = -1;
	Элементы.ТЧЗадачиЗарегистрирована.ВыделенныеСтроки.Очистить();	
	ПодключитьОбработчикОжидания("ЗаполнитьЗадачиНаКлиенте", 180);
КонецПроцедуры

&НаСервере
Процедура УстановитьБазовоеОформлениеЗадачНаСервере()
	УсловноеОформление.Элементы.Очистить();
	
	ОформлениеЗадачи 	 = УсловноеОформление.Элементы.Добавить();
	Отбор 				 = ОформлениеЗадачи.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование  = ИСТИНА;
	Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.ВажностьЧисло");
	Отбор.ПравоеЗначение = 1;
	
	ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи);
	ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255,102,102));
	
	ОформлениеЗадачи 			 = УсловноеОформление.Элементы.Добавить();
	ОтборГруппа 				 = ОформлениеЗадачи.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы 		 = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ОтборЭлементы 				 = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлементы.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлементы.Использование  = ИСТИНА;
	ОтборЭлементы.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.ВажностьЧисло");
	ОтборЭлементы.ПравоеЗначение = 2;
	
	ОтборЭлементы 				= ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлементы.ВидСравнения 	= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлементы.Использование = ИСТИНА;
	ОтборЭлементы.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.ВажностьЧисло");
	
	ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи);
	ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(153,204,0));
	
	ОформлениеЗадачи 	 = УсловноеОформление.Элементы.Добавить();
	Отбор 				 = ОформлениеЗадачи.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование  = ИСТИНА;
	Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.ВажностьЧисло");
	Отбор.ПравоеЗначение = 3;
	
	ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи);
	ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(207,238,0));
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи)
	Для Каждого ТекЭлементФормы Из Элементы Цикл
		Если ТипЗнч(ТекЭлементФормы) = Тип("ТаблицаФормы") И ТекЭлементФормы.ПутьКДанным = "Объект.ТЧЗадачи" Тогда
			ИмяТЧЗадачи = ТекЭлементФормы.Имя;
			
			Если ТекЭлементФормы.Имя <> ИмяТЧЗадачи Тогда
				Продолжить;
			КонецЕсли; 
			
			Поля 			   = ОформлениеЗадачи.Поля.Элементы.Добавить();
			Поля.Использование = ИСТИНА;
			Поля.Поле 		   = Новый ПолеКомпоновкиДанных(ИмяТЧЗадачи + "НомерЗадачиПредставление");
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры 

&НаСервере
Процедура ОформлениеЦветаЗадачНаСервере()
	УсловноеОформление.Элементы.Очистить();
	
	УстановитьБазовоеОформлениеЗадачНаСервере();
	
	Для Каждого ТекЭлементФормы Из Элементы Цикл
		Если ТипЗнч(ТекЭлементФормы) = Тип("ТаблицаФормы") И ТекЭлементФормы.ПутьКДанным = "Объект.ТЧЗадачи" Тогда
			Для Каждого СтрокаЗадача Из Объект.ТЧЗадачи Цикл
				ТекЗадача = СтрокаЗадача.Задача;
				
				ИмяТЧЗадачи = "ТЧЗадачи" + СтрокаЗадача.Статус.ИмяПредопределенныхДанных;
				
				Если ТекЭлементФормы.Имя <> ИмяТЧЗадачи Тогда
					Продолжить;
				КонецЕсли; 
				
				ТекЦвет 	 = ПолучитьПриоритетныйЦветЗадачиНаСервере(СтрокаЗадача);
				ЦветЗаполнен = ПроверитьЗаполнениеЦвета(ТекЦвет);
				
				Если ЦветЗаполнен Тогда
					ОформлениеЗадачи 	 = УсловноеОформление.Элементы.Добавить();
					Отбор 				 = ОформлениеЗадачи.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
					Отбор.Использование  = ИСТИНА;
					Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.Задача");
					Отбор.ПравоеЗначение = ТекЗадача;
					
					Поля 				 = ОформлениеЗадачи.Поля.Элементы.Добавить();
					Поля.Использование 	 = ИСТИНА;
					Поля.Поле 			 = Новый ПолеКомпоновкиДанных(ИмяТЧЗадачи + "НомерЗадачиПредставление");
					
					ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветФона", ТекЦвет);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьЗаполнениеЦвета(ТекЦвет)
	Если ТекЦвет = Неопределено ИЛИ ТекЦвет = Новый Цвет(0,0,0) Тогда
		Возврат ЛОЖЬ;
	Иначе
		Возврат ИСТИНА;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьПриоритетныйЦветЗадачиНаСервере(СтрокаЗадача)
	Для Каждого ВидПриоритета Из ПолучитьМассивПриоритетовЦветаЗадач() Цикл
		ТекЦвет 	 = ПолучитьЦветЗадачиПоВидуПриоритета(СтрокаЗадача, ВидПриоритета);
		ЦветЗаполнен = ПроверитьЗаполнениеЦвета(ТекЦвет);
		Если ЦветЗаполнен Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ТекЦвет;
КонецФункции

&НаСервере
Функция ПолучитьЦветЗадачиПоВидуПриоритета(СтрокаЗадача, ВидПриоритета)
	НужныйЦвет  = Неопределено;
	Задача 		= СтрокаЗадача.Задача;
	
	Если ВидПриоритета = ВидыПриоритетаЦвета().Задача Тогда
		НужныйЦвет = Задача.ЦветЗадачи.Получить();
	ИначеЕсли ВидПриоритета = ВидыПриоритетаЦвета().Спринт Тогда 	
		НужныйЦвет = Задача.Спринт.ЦветСпринта.Получить();
	ИначеЕсли ВидПриоритета = ВидыПриоритетаЦвета().ОсновнаяЗадача Тогда 	
		НужныйЦвет = Задача.ОсновнаяЗадача.ЦветЗадачи.Получить();
	ИначеЕсли ВидПриоритета = ВидыПриоритетаЦвета().Важность Тогда 	
		НужныйЦвет = Задача.Важность.ЦветВажности.Получить();
	КонецЕсли; 
	
	Возврат НужныйЦвет;
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивПриоритетовЦветаЗадач()
	Приоритеты = Новый Массив;
	Приоритеты.Добавить(ВидыПриоритетаЦвета().Задача);
	Приоритеты.Добавить(ВидыПриоритетаЦвета().Спринт);
	Приоритеты.Добавить(ВидыПриоритетаЦвета().ОсновнаяЗадача);
	Приоритеты.Добавить(ВидыПриоритетаЦвета().Важность);
	
	Возврат Новый ФиксированныйМассив(Приоритеты);
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ВидыПриоритетаЦвета()
	Виды = Новый Структура();
	Виды.Вставить("Важность"	  , "Важность");
	Виды.Вставить("ОсновнаяЗадача", "ОсновнаяЗадача");
	Виды.Вставить("Спринт"		  , "Спринт");
	Виды.Вставить("Задача"		  , "Задача");
	
	Возврат Новый ФиксированнаяСтруктура(Виды);
КонецФункции 

&НаКлиенте
Процедура ЗаполнитьЗадачиНаКлиенте()
	ОбновитьКанбанДоску();
КонецПроцедуры 

&НаКлиенте
Процедура КомандаОбновить(Команда)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКанбанДоска;
	ЗаполнитьЗадачиНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтандартныеНастройки(Команда)
	УстановитьСтандартныеНастройкиНаСервере();
КонецПроцедуры

&НаСервере
Процедура УстановитьСтандартныеНастройкиНаСервере()
	КлючНастроек = ПолучитьКлючНастроек();	
	ХранилищеОбщихНастроек.Сохранить(КлючНастроек,КлючНастроек,Неопределено);
	пНастройкиКомпоновщика = Неопределено;
	ЗагрузитьСохраненныеНастройки(пНастройкиКомпоновщика);
	ОпределитьОтборНаСервере(пНастройкиКомпоновщика);
КонецПроцедуры 

&НаКлиенте
Процедура ТЧЗадачиПриАктивизацииЯчейки(Элемент)
	ИмяТЧ = Элемент.Имя;
	ИмяАктивнойТЧ = ИмяТЧ; 
	ОчиститьАктивизацииСтрок(ИмяТЧ);
	Если НЕ НастройкиТЧДляАктивацииПервойСтроки.Свойство(ИмяТЧ) Тогда
		Элемент.ВыделенныеСтроки.Очистить();
		НастройкиТЧДляАктивацииПервойСтроки.Вставить(ИмяТЧ,"Истина");
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ТЧЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Задача);	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьВСпринт(Команда)
	ДобавитьУбратьВСпринтНаКлиенте(1);	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУбратьВСпринтНаКлиенте(КодОперации)
	СтрокаТЧ = Элементы[ИмяАктивнойТЧ].ТекущиеДанные;	
	Если СтрокаТЧ = Неопределено тогда
		Сообщить("Выберите задачи, которые хотите добавить в спринт");
		Возврат;	
	Конецесли;	
	МассивВыделенныхСтрок = Элементы[ИмяАктивнойТЧ].ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		Сообщить("Выберите задачи, которые хотите добавить в спринт");
		Возврат;
	Конецесли;	
	РезультатФункции = ДобавитьУбратьВСпринтНаСервере(КодОперации,МассивВыделенныхСтрок);
	КомандаДобавитьУбратьВыполнена = РезультатФункции.КомандаДобавитьУбратьВыполнена;
	Если НЕ КомандаДобавитьУбратьВыполнена Тогда
		Если РезультатФункции.Свойство("НеобходимоВыбратьСпринт") Тогда
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("МассивВыделенныхСтрок",МассивВыделенныхСтрок);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьВыборСпринта", ЭтаФорма, ДополнительныеПараметры);
			
		    пОтбор = Новый Структура("СпринтЗавершен", Ложь);
			ПараметрыОткрытияФормы = Новый Структура("Отбор", пОтбор);   
			ОткрытьФорму("Справочник.узСпринты.Форма.ФормаВыбора",ПараметрыОткрытияФормы,,,,,ОповещениеОЗакрытии);	
		Конецесли;
	Конецесли;
	ДобавитьУбратьВСпринтНаКлиентеОбработатьРезультатФункции(РезультатФункции);
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьУбратьВСпринтНаКлиентеОбработатьРезультатФункции(РезультатФункции)
	Если РезультатФункции.Свойство("МассивСообщений") Тогда
		МассивСообщений = РезультатФункции.МассивСообщений;
		Для каждого ЭлМассиваСообщения из МассивСообщений цикл
			Сообщить(ЭлМассиваСообщения);		 
		Конеццикла;		
	Конецесли;
	ЗаполнитьЗадачиНаСервере();	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьВыборСпринта(РезультатЗакрытия, ДопПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	Конецесли;
	пСпринт = РезультатЗакрытия;
	МассивВыделенныхСтрок = ДопПараметры.МассивВыделенныхСтрок;
	РезультатФункции = ДобавитьУбратьВСпринтНаСервере(1,МассивВыделенныхСтрок,пСпринт);
	ДобавитьУбратьВСпринтНаКлиентеОбработатьРезультатФункции(РезультатФункции);
КонецПроцедуры 


&НаСервере
Функция ДобавитьУбратьВСпринтНаСервере(КодОперации,МассивВыделенныхСтрок,пСпринт = Неопределено)
	МассивЗадач = ПолучитьМассивЗадачПоВыделеннымСтрокам(МассивВыделенныхСтрок);
	РезультатФункцииТекущийСпринт = Справочники.узСпринты.ПолучитьТекущийСпринт();	
	ТекстОшибки	= РезультатФункцииТекущийСпринт.ТекстОшибки;
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		МассивСообщений = Новый Массив(); 
		МассивСообщений.Добавить(ТекстОшибки);
		
		РезультатФункции = Новый Структура();
		РезультатФункции.Вставить("КомандаДобавитьУбратьВыполнена",Ложь);
		РезультатФункции.Вставить("МассивСообщений",МассивСообщений);
		Возврат РезультатФункции;		
	Конецесли;
	
	Если КодОперации = -1 Тогда
		РезультатФункции = ДобавитьУбратьВСпринтЗадачи(КодОперации,Неопределено,МассивЗадач);
		Возврат РезультатФункции;			
	Конецесли;
	
	Если ЗначениеЗаполнено(пСпринт) Тогда
		РезультатФункции = ДобавитьУбратьВСпринтЗадачи(КодОперации,пСпринт,МассивЗадач);
		Возврат РезультатФункции;
	Конецесли;;		
	
	Только1АктивныйСпринт = РезультатФункцииТекущийСпринт.Только1АктивныйСпринт;	
	Если Только1АктивныйСпринт Тогда		
		пСпринт = РезультатФункцииТекущийСпринт.Спринт;
		РезультатФункции = ДобавитьУбратьВСпринтЗадачи(КодОперации,пСпринт,МассивЗадач);
		Возврат РезультатФункции;
	Конецесли;
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("КомандаДобавитьУбратьВыполнена",Ложь);
	РезультатФункции.Вставить("НеобходимоВыбратьСпринт",Истина);
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивЗадачПоВыделеннымСтрокам(МассивВыделенныхСтрок)
	МассивЗадач = Новый Массив();
	Для каждого ЭлМассиваВыделенныхСтрок из МассивВыделенныхСтрок цикл
		ИдентификаторСтроки = ЭлМассиваВыделенныхСтрок;
		СтрокаТЧЗадачи = Объект.ТЧЗадачи.НайтиПоИдентификатору(ИдентификаторСтроки);
		МассивЗадач.Добавить(СтрокаТЧЗадачи.Задача);
	Конеццикла;	
	Возврат МассивЗадач;
КонецФункции

&НаСервере
Функция ДобавитьУбратьВСпринтЗадачи(КодОперации,пСпринт,МассивЗадач)
	ЭтоДобавление = КодОперации = 1;
	ЭтоУдаление = КодОперации = -1;
	
	РезультатФункции = Новый Структура();
	МассивСообщений = Новый Массив();
	Для каждого ЭлМассиваЗадач из МассивЗадач цикл
		пЗадачаСсылка = ЭлМассиваЗадач;
		Если ЭтоДобавление Тогда
			Если пЗадачаСсылка.Спринт <> пСпринт Тогда
				ЗадачаОбъект = пЗадачаСсылка.ПолучитьОбъект();
				ЗадачаОбъект.Спринт = пСпринт;
				ЗадачаОбъект.Записать();
				МассивСообщений.Добавить("Добавлена"
					+" в спринт ["+пСпринт+"] "
					+" задача [#"+пЗадачаСсылка.Код+" "+пЗадачаСсылка+"]");
			Иначе
				МассивСообщений.Добавить("Уже указана"
					+" в спринте ["+пСпринт+"] "
					+" задача [#"+пЗадачаСсылка.Код+" "+пЗадачаСсылка+"]");				
			Конецесли;
		ИначеЕсли ЭтоУдаление Тогда
			пСпринт = пЗадачаСсылка.Спринт;
			Если ЗначениеЗаполнено(пСпринт) Тогда
				ЗадачаОбъект = пЗадачаСсылка.ПолучитьОбъект();
				ЗадачаОбъект.Спринт = Неопределено;
				ЗадачаОбъект.Записать();
				МассивСообщений.Добавить("Убрана"
					+" из спринта ["+пСпринт+"] "
					+" задача [#"+пЗадачаСсылка.Код+" "+пЗадачаСсылка+"]");					
			Иначе
				МассивСообщений.Добавить("Не указана в спринте"
					+" задача [#"+пЗадачаСсылка.Код+" "+пЗадачаСсылка+"]");					
			Конецесли;	
		Иначе
			ВызватьИсключение "Неизвестный код операции " + КодОперации;
		КонецЕсли;
	Конеццикла;	
	РезультатФункции.Вставить("МассивСообщений",МассивСообщений);
	РезультатФункции.Вставить("КомандаДобавитьУбратьВыполнена",Истина);
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура КомандаУбратьИзСпринта(Команда)
	ДобавитьУбратьВСпринтНаКлиенте(-1);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСледитьЗаЗадачей(Команда)
	ДобавитьУбратьНаблюдателяЗаЗадачейНаКлиенте(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУбратьНаблюдателяЗаЗадачейНаКлиенте(ЭтоДобавлениеНаблюдателя)
	СтрокаТЧ = Элементы[ИмяАктивнойТЧ].ТекущиеДанные;	
	Если СтрокаТЧ = Неопределено тогда
		Сообщить("Выберите задачи, которые за которыми хотите следить");
		Возврат;	
	Конецесли;	
	МассивВыделенныхСтрок = Элементы[ИмяАктивнойТЧ].ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		Сообщить("Выберите задачи, которые за которыми хотите следить");
		Возврат;
	Конецесли;			
	ДобавитьУбратьНаблюдателяЗаЗадачейНаСервере(МассивВыделенныхСтрок,ЭтоДобавлениеНаблюдателя);	
	Оповестить("ДобавленУбранНаблюдатель");
КонецПроцедуры 

&НаСервере
Процедура ДобавитьУбратьНаблюдателяЗаЗадачейНаСервере(МассивВыделенныхСтрок,ЭтоДобавлениеНаблюдателя)
	МассивЗадач = ПолучитьМассивЗадачПоВыделеннымСтрокам(МассивВыделенныхСтрок);
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Пользователь",Пользователи.ТекущийПользователь());
	ДопПараметры.Вставить("МассивЗадач",МассивЗадач);
	Если ЭтоДобавлениеНаблюдателя Тогда
		РегистрыСведений.узНаблюдателиЗаЗадачами.СледитьЗаЗадачей(ДопПараметры);	
	Иначе
		РегистрыСведений.узНаблюдателиЗаЗадачами.ПерестатьСледитьЗаЗадачей(ДопПараметры);	
	Конецесли;
КонецПроцедуры 

&НаКлиенте
Процедура КомандаНеСледитьЗаЗадачей(Команда)
	ДобавитьУбратьНаблюдателяЗаЗадачейНаКлиенте(Ложь);
КонецПроцедуры
