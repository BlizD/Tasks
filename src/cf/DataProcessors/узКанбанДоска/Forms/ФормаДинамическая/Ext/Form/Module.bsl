
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СгенирироватьФормуЗаново = Истина;
	
	пНастройкиКомпоновщика = Неопределено;
	
	// [+] #283 Мальков М.В. 2023-01-30
	//ЗагрузитьСохраненныеНастройки(пНастройкиКомпоновщика); 
	ТекущийКлючНастроек = ПолучитьТекущийКлючНастроек(); 
	ЗагрузитьСохраненныеНастройки(ТекущийКлючНастроек, пНастройкиКомпоновщика);
	// [-] #283 Мальков М.В. 2023-01-30
	
	СтруктураТЧДляСнятияФокусаСЗадач = Новый Структура();
	
	ОпределитьОтборНаСервере(пНастройкиКомпоновщика);
	Попытка
		ЗаполнитьЗадачиНаСервере();		
	Исключение
		Сообщить(NStr("ru = 'ОписаниеОшибки '") + 
				 ОписаниеОшибки());
		УстановитьСтандартныеНастройкиНаСервере();
		ЗаполнитьЗадачиНаСервере();
	КонецПопытки;
	
	УстановитьВидимостьДоступность();
	
	ВыполнитьЛокализацию(); 
	
	// [+] #345 Павлюков С.Ю. 2024-10-28
	СоздатьПанельВариантов();
	// [-] #345 Павлюков С.Ю. 2024-10-28
	
КонецПроцедуры

// [+] #345 Павлюков С.Ю. 2024-10-28
&НаСервере
Процедура СоздатьПанельВариантов()
	
	мГруппа0 =Элементы.Найти("_Группа_0");
	
	мГруппаПанельВариантов = Элементы.Вставить("ГруппаПанельВариантов", Тип("ГруппаФормы"), Элементы.ГруппаКанбанДоска, мГруппа0);
	мГруппаПанельВариантов.Вид = ВидГруппыФормы.КоманднаяПанель;
	
	//мышкой удобнее нажать Обновить
	мКнопкаОбновить = Элементы.Добавить("КомандаОбновитьОсн", Тип("КнопкаФормы"), Элементы.ГруппаПанельВариантов);
	мКнопкаОбновить.Заголовок 	= "Обновить";
	мКнопкаОбновить.ИмяКоманды	= "КомандаОбновить";
	мКнопкаОбновить.Отображение	= ОтображениеКнопки.КартинкаИТекст;

	мГруппаВарианты = Элементы.Добавить("ГруппаКнопкиВариантов", Тип("ГруппаФормы"), Элементы.ГруппаПанельВариантов);
	мГруппаВарианты.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	ОбновитьКнопкиВариантов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКнопкиВариантов() // [+] #345 Павлюков С.Ю. 2024-10-28
	
	мГруппаВарианты = Элементы.Найти("ГруппаКнопкиВариантов");
	Если мГруппаВарианты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//удалить ранее созданные кнопки
	КомандыВариантов.Очистить(); 
	
	Пока мГруппаВарианты.ПодчиненныеЭлементы.Количество() > 0 Цикл
		текЭлементВарианта = мГруппаВарианты.ПодчиненныеЭлементы.Получить(0);
		Команды.Удалить(Команды.Найти(текЭлементВарианта.ИмяКоманды));
		Элементы.Удалить(текЭлементВарианта);
	КонецЦикла;
	
	
	//получить доступные варианты
	СписокВариантов = Обработки.узКанбанДоска.ПолучитьСписокВариантов(ПолучитьКлючНастроек());
	
	//добавим команды и кнопки
	текВариант = 1;
	Для Каждого спВариант Из СписокВариантов Цикл
		
		имяКоманды = СтрШаблон("ВариантКоманды_%1", Формат(текВариант, "ЧГ="));
		
		КомандыВариантов.Добавить(имяКоманды, спВариант.Значение);
		
		//добавить команду
		новаяКоманда = Команды.Добавить(имяКоманды);
		новаяКоманда.Заголовок	= спВариант.Представление;
		новаяКоманда.Действие	= "ВариантКоманды_Загрузить";
		
		//добавить кнопку для команды
		мКнопкаОбновить = Элементы.Добавить(СтрШаблон("КнопкаВариантКоманды_%1", Формат(текВариант, "ЧГ="))
			, Тип("КнопкаФормы")
			, мГруппаВарианты
		);
		мКнопкаОбновить.Заголовок 	= спВариант.Представление;
		мКнопкаОбновить.ИмяКоманды	= имяКоманды;
		мКнопкаОбновить.Пометка		= (спВариант.Значение = ТекущийКлючНастроек);
		
		текВариант = текВариант + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантКоманды_Загрузить(Команда) // [+] #345 Павлюков С.Ю. 2024-10-28 
	
	выбранныйВариант = КомандыВариантов.НайтиПоЗначению(Команда.Имя);
	
	Если выбранныйВариант = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	выбранныйКлюч = выбранныйВариант.Представление;
	
	//обновить пометки
	мГруппаВарианты = Элементы.Найти("ГруппаКнопкиВариантов");
	Если Не мГруппаВарианты = Неопределено Тогда
		Для Каждого кнопкаВарианта Из мГруппаВарианты.ПодчиненныеЭлементы Цикл
			текВариант = КомандыВариантов.НайтиПоЗначению(кнопкаВарианта.ИмяКоманды);
			кнопкаВарианта.Пометка = ( НЕ (текВариант = Неопределено) И (текВариант.Представление = выбранныйКлюч));
		КонецЦикла;
	КонецЕсли;
	
	//загрузить вариант
	ЗагрузитьВариантНаКлиентеЗавершение(выбранныйКлюч, Неопределено);
	
КонецПроцедуры 


&НаСервере
Процедура ВыполнитьЛокализацию()
	МассивКодовСообщений = Новый Массив();
	МассивКодовСообщений.Добавить(67);//Задачи
	МассивКодовСообщений.Добавить(68);//Обновить
	МассивКодовСообщений.Добавить(69);//Настройки
	МассивКодовСообщений.Добавить(70);//Наблюдатель
	
	РегистрыСведений.узСловарь.ВыполнитьЛокализацию(Элементы,МассивКодовСообщений);
КонецПроцедуры //ВыполнитьЛокализацию()


&НаКлиенте
Процедура ТЧНастройкиКолонокПриИзменении(Элемент)
	СгенирироватьФормуЗаново = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ВыполнитьДействиеДляАктивнойСтраницы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Справочник_узСтатусыЗадачи_Записан" Тогда
		СгенирироватьФормуЗаново = Истина;
	Конецесли;
	
	Если ИмяСобытия = "СправочникЗадачаЗаписана"
		ИЛИ ИмяСобытия = "ДобавленУбранНаблюдатель"
		ИЛИ ИмяСобытия = "СправочникВариантВажностиЗаписан"
		ИЛИ ИмяСобытия = "СправочникСпринтЗаписан"
		ИЛИ ИмяСобытия = "Константа.ИспользоватьСвоиЦветаДляЗадач.Записана"
		ИЛИ ИмяСобытия = "Справочник_узСтатусыЗадачи_Записан"
		Тогда
		ЗаполнитьЗадачиНаСервере();
		ОбновитьКанбанДоску();
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()    

	//СохранитьВариантНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	Конецесли;
	
	ОтключитьОбработчикОжидания("ЗаполнитьЗадачиНаКлиенте");
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	// [+] #283 Мальков М.В. 2023-01-30
	//СохранитьНастройки();   
	
	СохранитьТекущийКлючНастроек();
	
	СохранитьНастройки(ТекущийКлючНастроек);
	// [-] #283 Мальков М.В. 2023-01-30
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ЗаполнитьЗадачиНаКлиенте", 180);
	
	УбратьИзКонтекстногоМенюЛишниеКнопкиНаСервере();
	
	// [+] #283 Мальков М.В. 2023-01-30
	ОбновитьЗаголовокФормыНаКлиенте(ТекущийКлючНастроек);
	// [-] #283 Мальков М.В. 2023-01-30
	
КонецПроцедуры

#КонецОбласти

#Область ГенерацияФормыДляВыбранныхСтатусов

&НаСервере
Процедура СгенерироватьФорму()
	УдалитьДинамическиеЭлементы();
	/////   РЕКВИЗИТЫ   //////////
	
	СтруктураИменИспользуемыхТЧ = Новый Структура();

	МассивДобавляемыхРеквизитов = Новый Массив;

	ЭтотОбъект.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	/////   КОМАНДЫ   //////////

	// + #228 Пиганов Г.В. 2020.07.02
	/////   ГРУППЫ   //////////
	ЭлементыГрупп = Новый Соответствие;
	ПрефиксДляИмениЭлементовГрупп = ПолучитьПрефиксДляИмениЭлементовГрупп();
	
	ОтборВидимыхСтрок = Новый Структура();
	ТаблицаГрупп = Объект.ТЧНастройкиКолонок.Выгрузить(ОтборВидимыхСтрок, "Группа");
	ТаблицаГрупп.Свернуть("Группа", "");
	ТаблицаГрупп.Сортировать("Группа");
	Для Каждого СтрокаГруппы Из ТаблицаГрупп Цикл
		НомерГруппы = СтрокаГруппы.Группа;
		ИмяГруппы = ПрефиксДляИмениЭлементовГрупп + СтрокаГруппы.Группа;
		ЭлементГруппаГруппа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаКанбанДоска);
		ЭлементГруппаГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементГруппаГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Если НомерГруппы = 0 Тогда
			ЭлементГруппаГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		Иначе
			ЭлементГруппаГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		КонецЕсли;
		ЭлементыГрупп.Вставить(НомерГруппы, ЭлементГруппаГруппа);
	КонецЦикла;
	// - #228 Пиганов Г.В. 2020.07.02
	
	/////   ЭЛЕМЕНТЫ   //////////
	Для каждого СтрокаТЧНастройкиКолонок из Объект.ТЧНастройкиКолонок цикл
		Если НЕ СтрокаТЧНастройкиКолонок.Видимость Тогда
			Продолжить;
		Конецесли;
		пСтатус = СтрокаТЧНастройкиКолонок.Статус;
		// + #228 Пиганов Г.В. 2020.07.02
		//ДобавитьНаКанбанДоскуКолонку(пСтатус);
		пГруппаЭлемент = ЭлементыГрупп[СтрокаТЧНастройкиКолонок.Группа];
		ДобавитьНаКанбанДоскуКолонку(пСтатус, пГруппаЭлемент);
		// - #228 Пиганов Г.В. 2020.07.02
	Конеццикла;
		
КонецПроцедуры 

&НаСервере
Процедура УдалитьДинамическиеЭлементы()
	пЭлементыФормы = Этаформа.Элементы;
	// + #228 Пиганов Г.В. 2020.07.02
	//ПрефиксДляИмениЭлементовКолонок = ПолучитьПрефиксДляИмениЭлементовКолонок();
	ПрефиксДляИмениЭлементовКолонок = ПолучитьПрефиксДляИмениЭлементовГрупп();
	// - #228 Пиганов Г.В. 2020.07.02
	ЭлементыКУдалению = Новый Массив();
	Для каждого пЭлементФормы из пЭлементыФормы цикл
		Если СтрНайти(пЭлементФормы.Имя,ПрефиксДляИмениЭлементовКолонок) = 0 Тогда
			Продолжить;
		Конецесли;
		Если ТипЗнч(пЭлементФормы) <> ТИп("ГруппаФормы") Тогда
			Продолжить;
		Конецесли;
		ЭлементыКУдалению.Добавить(пЭлементФормы);
	Конеццикла;
	Для каждого пЭлементФормы из ЭлементыКУдалению цикл
		пЭлементыФормы.Удалить(пЭлементФормы);		
	Конеццикла;
КонецПроцедуры

// + #228 Пиганов Г.В. 2020.07.02
&НаСервере
Функция ПолучитьПрефиксДляИмениЭлементовГрупп()
	Возврат "_Группа_";
КонецФункции 
// - #228 Пиганов Г.В. 2020.07.02

&НаСервере
Функция ПолучитьПрефиксДляИмениЭлементовКолонок() 
	Возврат "_Колонка_";	
КонецФункции 

&НаСервере
Функция ПолучитьПредставлениеКолонки(пСтатус) 
	#Если Сервер И НЕ Сервер тогда
		пСтатус = Справочники.узСтатусыЗадачи.ПустаяСсылка();
	#Конецесли
	
	СтатусНаименование = пСтатус.Наименование;
	Если ЗначениеЗаполнено(пСтатус.НаименованиеДляКанбанДоски) Тогда
		СтатусНаименование = пСтатус.НаименованиеДляКанбанДоски;
	Конецесли;
	
	ПредставлениеКолонки = СтатусНаименование;
		
	пТекстWIPЛимит = "";
	Если пСтатус.ИспользоватьWIPЛимит Тогда
		пТекстWIPЛимит = " (WIP:"+пСтатус.WIPЛимит+")";
	Конецесли;
	
	пРодитель = пСтатус.Родитель;
	Если ЗначениеЗаполнено(пРодитель) Тогда
		РодительНаименование = пРодитель.Наименование;
		
		Если ЗначениеЗаполнено(пРодитель.НаименованиеДляКанбанДоски) Тогда
			РодительНаименование = пРодитель.НаименованиеДляКанбанДоски;
		Конецесли;		
		
		ПредставлениеКолонки = "" + РодительНаименование;
		
		Если пСтатус.WIPЛимитУказываетсяВРодителе Тогда
			ПредставлениеКолонки = "" + РодительНаименование + пТекстWIPЛимит;
		Конецесли;
		
		ПредставлениеКолонки = ПредставлениеКолонки + " \ " + СтатусНаименование;
	Конецесли;
	
	Если пСтатус.ИспользоватьWIPЛимит
		И НЕ пСтатус.WIPЛимитУказываетсяВРодителе Тогда
		ПредставлениеКолонки = ПредставлениеКолонки + пТекстWIPЛимит;
	Конецесли;
		
	Возврат ПредставлениеКолонки;
КонецФункции 

&НаСервере
// + #228 Пиганов Г.В. 2020.07.02
//Процедура ДобавитьНаКанбанДоскуКолонку(пСтатус)
Процедура ДобавитьНаКанбанДоскуКолонку(пСтатус, пЭлементГруппаГруппа)
// - #228 Пиганов Г.В. 2020.07.02
	//ПредставлениеКолонки = пСтатус.Наименование;
	ПредставлениеКолонки = ПолучитьПредставлениеКолонки(пСтатус);
	
	пЭлементыФормы = Этаформа.Элементы;
	
	// ******   Группа формы "Группа для колонки статуса"    ***********
	
	ИменаЭлементов = ПолучитьИменаЭлементовДляКолонки(пСтатус);
	
	// + #228 Пиганов Г.В. 2020.07.02
	//пЭлементГруппаКолонка = пЭлементыФормы.Вставить(ИменаЭлементов.ИмяГруппыКолонки,Тип("ГруппаФормы"),пЭлементыФормы.ГруппаКанбанДоска);
	пЭлементГруппаКолонка = пЭлементыФормы.Вставить(ИменаЭлементов.ИмяГруппыКолонки,
		Тип("ГруппаФормы"), пЭлементГруппаГруппа);
	// - #228 Пиганов Г.В. 2020.07.02
	пЭлементГруппаКолонка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	пЭлементГруппаКолонка.Заголовок = ПредставлениеКолонки;
	пЭлементГруппаКолонка.Подсказка = ПредставлениеКолонки;
	пЭлементГруппаКолонка.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;

	// ******   Таблица формы "ТЧЗадачи" для статуса    ***********
	
	СтруктураИменИспользуемыхТЧ.Вставить(ИменаЭлементов.ИмяТЧЗадачи);
	
	пЭлементТЧЗадачи = пЭлементыФормы.Вставить(ИменаЭлементов.ИмяТЧЗадачи,Тип("ТаблицаФормы"),пЭлементГруппаКолонка,Неопределено);
	пЭлементТЧЗадачи.ПутьКДанным = "Объект.ТЧЗадачи";
	пЭлементТЧЗадачи.АвтоВводНовойСтроки = Истина;
	пЭлементТЧЗадачи.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	пЭлементТЧЗадачи.ИзменятьПорядокСтрок = Ложь;
	пЭлементТЧЗадачи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	пЭлементТЧЗадачи.РежимВыделения = РежимВыделенияТаблицы.Множественный;
	пЭлементТЧЗадачи.РежимВыделенияСтроки = РежимВыделенияСтрокиТаблицы.Строка;
	пЭлементТЧЗадачи.Шапка = Ложь;
	пЭлементТЧЗадачи.УстановитьДействие("Выбор","ТЧЗадачиВыбор");
	пЭлементТЧЗадачи.УстановитьДействие("ПриАктивизацииЯчейки","ТЧЗадачиПриАктивизацииЯчейки");
	пЭлементТЧЗадачи.УстановитьДействие("ПередНачаломДобавления","ТЧЗадачиПередНачаломДобавления");
	пЭлементТЧЗадачи.УстановитьДействие("Перетаскивание","ТЧЗадачиПеретаскивание");
	//{ Павлюков - Зачада 132
	пЭлементТЧЗадачи.УстановитьДействие("ПроверкаПеретаскивания","ТЧЗадачиПроверкаПеретаскивания");
	//}
	пЭлементТЧЗадачи.КоманднаяПанель.Видимость = Ложь;
	
	// ******    Команды из контекстного меню "ТЧЗадачи"    ***********
	МассивКодовСообщений = Новый Массив();
	МассивКодовСообщений.Добавить(71);//Добавить в спринт
	МассивКодовСообщений.Добавить(72);//Убрать из спринта
	МассивКодовСообщений.Добавить(73);//Следить за задачей
	МассивКодовСообщений.Добавить(74);//Не следить за задачей
	МассивКодовСообщений.Добавить(81);//Добавить в текущие дела
	МассивКодовСообщений.Добавить(83);//Скопировать комментарий в коде	Copy the comment in the code	
	МассивКодовСообщений.Добавить(96);//Создать файл для задачи на диске
	МассивКодовСообщений.Добавить(101);//Открыть папку задачи на диске
	// [+] #327 Павлюков С.Ю. 2024-04-11
	МассивКодовСообщений.Добавить(103);//Добавить факт работ
	// [-] #327 Павлюков С.Ю. 2024-04-11
	
	СтруктураСообщений = РегистрыСведений.узСловарь.ПолучитьСтруктуруСообщений(МассивКодовСообщений);

	пКомандаДобавитьВТекущиеДела = пЭлементыФормы.Добавить(ИменаЭлементов.ИмяКомандыДобавитьВТекущиеДела, Тип("КнопкаФормы"), пЭлементТЧЗадачи.КонтекстноеМеню);
	пКомандаДобавитьВТекущиеДела.Заголовок=СтруктураСообщений.Текст81;
	пКомандаДобавитьВТекущиеДела.ИмяКоманды="КомандаДобавитьВТекущиеДела";
	пКомандаДобавитьВТекущиеДела.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
	// [+] #327 Павлюков С.Ю. 2024-04-11
	пКомандаДобавитьФактРабот = пЭлементыФормы.Добавить(
		ИменаЭлементов.ИмяКомандыДобавитьФактРабот, Тип("КнопкаФормы"), пЭлементТЧЗадачи.КонтекстноеМеню);
	пКомандаДобавитьФактРабот.Заголовок = СтруктураСообщений.Текст103;
	пКомандаДобавитьФактРабот.ИмяКоманды = "КомандаДобавитьФактРабот";
	пКомандаДобавитьФактРабот.Отображение = ОтображениеКнопки.КартинкаИТекст;
	// [-] #327 Павлюков С.Ю. 2024-04-11
	
	пКомандаСкопироватьКомментарийВКоде = пЭлементыФормы.Добавить(ИменаЭлементов.ИмяКомандыСкопироватьКомментарийВКоде, Тип("КнопкаФормы"), пЭлементТЧЗадачи.КонтекстноеМеню);
	пКомандаСкопироватьКомментарийВКоде.Заголовок=СтруктураСообщений.Текст83;
	пКомандаСкопироватьКомментарийВКоде.ИмяКоманды="КомандаСкопироватьКомментарийВКоде";
	пКомандаСкопироватьКомментарийВКоде.Отображение = ОтображениеКнопки.КартинкаИТекст;	
	
	пКомандаСоздатьФайлДляЗадачиНаДиске = пЭлементыФормы.Добавить(ИменаЭлементов.ИмяКомандыСоздатьФайлДляЗадачиНаДиске, Тип("КнопкаФормы"), пЭлементТЧЗадачи.КонтекстноеМеню);
	пКомандаСоздатьФайлДляЗадачиНаДиске.Заголовок=СтруктураСообщений.Текст96;
	пКомандаСоздатьФайлДляЗадачиНаДиске.ИмяКоманды="КомандаСоздатьФайлДляЗадачиНаДиске";
	пКомандаСоздатьФайлДляЗадачиНаДиске.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
	пКомандаОткрытьПапкуЗадачиНаДиске = пЭлементыФормы.Добавить(ИменаЭлементов.ИмяКомандыОткрытьПапкуЗадачиНаДиске, Тип("КнопкаФормы"), пЭлементТЧЗадачи.КонтекстноеМеню);
	пКомандаОткрытьПапкуЗадачиНаДиске.Заголовок=СтруктураСообщений.Текст101;
	пКомандаОткрытьПапкуЗадачиНаДиске.ИмяКоманды="КомандаОткрытьПапкуЗадачиНаДиске";
	пКомандаОткрытьПапкуЗадачиНаДиске.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
	пКомандаДобавитьВСпринт = пЭлементыФормы.Добавить(ИменаЭлементов.ИмяКомандыДобавитьВСпринт, Тип("КнопкаФормы"), пЭлементТЧЗадачи.КонтекстноеМеню);
	пКомандаДобавитьВСпринт.Заголовок=СтруктураСообщений.Текст71;
	пКомандаДобавитьВСпринт.ИмяКоманды="КомандаДобавитьВСпринт";
	пКомандаДобавитьВСпринт.Отображение = ОтображениеКнопки.КартинкаИТекст;	
	
	пКомандаУбратьИзСпринта = пЭлементыФормы.Добавить(ИменаЭлементов.ИмяКомандыУбратьИзСпринта, Тип("КнопкаФормы"), пЭлементТЧЗадачи.КонтекстноеМеню);
	пКомандаУбратьИзСпринта.Заголовок=СтруктураСообщений.Текст72;
	пКомандаУбратьИзСпринта.ИмяКоманды="КомандаУбратьИзСпринта";
	пКомандаУбратьИзСпринта.Отображение = ОтображениеКнопки.КартинкаИТекст;	
	
	пКомандаСледитьЗаЗадачей = пЭлементыФормы.Добавить(ИменаЭлементов.ИмяКомандыСледитьЗаЗадачей, Тип("КнопкаФормы"), пЭлементТЧЗадачи.КонтекстноеМеню);
	пКомандаСледитьЗаЗадачей.Заголовок=СтруктураСообщений.Текст73;
	пКомандаСледитьЗаЗадачей.ИмяКоманды="КомандаСледитьЗаЗадачей";
	пКомандаСледитьЗаЗадачей.Отображение = ОтображениеКнопки.КартинкаИТекст;		
		
	пКомандаНеСледитьЗаЗадачей = пЭлементыФормы.Добавить(ИменаЭлементов.ИмяКомандыНеСледитьЗаЗадачей, Тип("КнопкаФормы"), пЭлементТЧЗадачи.КонтекстноеМеню);
	пКомандаНеСледитьЗаЗадачей.Заголовок=СтруктураСообщений.Текст74;
	пКомандаНеСледитьЗаЗадачей.ИмяКоманды="КомандаНеСледитьЗаЗадачей";
	пКомандаНеСледитьЗаЗадачей.Отображение = ОтображениеКнопки.КартинкаИТекст;
		
	// ******   Группа формы "Карточка задачи"    ***********
	
	пЭлементКарточкаЗадачи = пЭлементыФормы.Вставить(ИменаЭлементов.ИмяКарточкаЗадачи,Тип("ГруппаФормы"),пЭлементТЧЗадачи,Неопределено);
	пЭлементКарточкаЗадачи.Вид = ВидГруппыФормы.ГруппаКолонок;
	пЭлементКарточкаЗадачи.Заголовок = "ТЧЗадачи "+ПредставлениеКолонки;
	пЭлементКарточкаЗадачи.Подсказка = "ТЧЗадачи "+ПредставлениеКолонки;

	// ******   Группа формы "Карточка задачи нижняя часть"    ***********

	пЭлементКарточкаЗадачи_НижняяЧасть = пЭлементыФормы.Вставить(ИменаЭлементов.ИмяКарточкаЗадачи_НижняяЧасть,Тип("ГруппаФормы"),пЭлементКарточкаЗадачи,Неопределено);
	пЭлементКарточкаЗадачи_НижняяЧасть.Вид = ВидГруппыФормы.ГруппаКолонок;
	пЭлементКарточкаЗадачи_НижняяЧасть.Заголовок = "ТЧЗадачи "+ПредставлениеКолонки;
	пЭлементКарточкаЗадачи_НижняяЧасть.Подсказка = "ТЧЗадачи "+ПредставлениеКолонки;
	пЭлементКарточкаЗадачи_НижняяЧасть.Группировка = ГруппировкаКолонок.Вертикальная;

	// ******   Поле формы "Задача в карточке задачи нижняя часть"    ***********	
	
	пЭлементПолеЗадачиВКарточкеЗадачи = пЭлементыФормы.Вставить(ИменаЭлементов.ИмяПоляЗадачиВКарточкеЗадачи,
		Тип("ПолеФормы"),пЭлементКарточкаЗадачи_НижняяЧасть,Неопределено);
	пЭлементПолеЗадачиВКарточкеЗадачи.Вид = ВидПоляФормы.ПолеВвода;
	пЭлементПолеЗадачиВКарточкеЗадачи.ПутьКДанным = "Объект.ТЧЗадачи.Задача";
	пЭлементПолеЗадачиВКарточкеЗадачи.КнопкаВыпадающегоСписка = Ложь;
	пЭлементПолеЗадачиВКарточкеЗадачи.КнопкаОткрытия = Ложь;
	пЭлементПолеЗадачиВКарточкеЗадачи.Высота = 3;
			
	// ******   Группа формы "Карточка задачи верхняя часть"    ***********
	
	пЭлементКарточкаЗадачи_ВерхняяЧасть = пЭлементыФормы.Вставить(ИменаЭлементов.ИмяКарточкаЗадачи_ВерхняяЧасть,Тип("ГруппаФормы"),пЭлементКарточкаЗадачи,пЭлементКарточкаЗадачи_НижняяЧасть);
	пЭлементКарточкаЗадачи_ВерхняяЧасть.Вид = ВидГруппыФормы.ГруппаКолонок;
	пЭлементКарточкаЗадачи_ВерхняяЧасть.Заголовок = "ТЧЗадачи_ВерхняяЧасть"+ПредставлениеКолонки;
	пЭлементКарточкаЗадачи_ВерхняяЧасть.Подсказка = "ТЧЗадачи_ВерхняяЧасть"+ПредставлениеКолонки;
	пЭлементКарточкаЗадачи_ВерхняяЧасть.Группировка = ГруппировкаКолонок.ВЯчейке;

	// ******   Поле формы "Короткое имя в карточке задачи верхняя часть"    ***********
	
	пЭлементПолеКороткоеИмяВКарточкеЗадачи = пЭлементыФормы.Вставить(ИменаЭлементов.ИмяПоляКороткоеИмяВКарточкеЗадачи,Тип("ПолеФормы"),пЭлементКарточкаЗадачи_ВерхняяЧасть,Неопределено);
	пЭлементПолеКороткоеИмяВКарточкеЗадачи.Вид = ВидПоляФормы.ПолеВвода;
	пЭлементПолеКороткоеИмяВКарточкеЗадачи.ПутьКДанным = "Объект.ТЧЗадачи.КороткоеИмя";
	пЭлементПолеКороткоеИмяВКарточкеЗадачи.Ширина = 3;
	
	
	//
	// ******   Поле формы "Основная задача в карточке задачи верхняя часть"    ***********
	
	пЭлементПолеОсновнаяЗадачаПредставлениеВКарточкеЗадачи = пЭлементыФормы.Вставить(
		ИменаЭлементов.ИмяПоляОсновнаяЗадачаПредставлениеВКарточкеЗадачи,
		Тип("ПолеФормы"),
		пЭлементКарточкаЗадачи_ВерхняяЧасть,
		пЭлементПолеКороткоеИмяВКарточкеЗадачи);
					
	пЭлементПолеОсновнаяЗадачаПредставлениеВКарточкеЗадачи.Вид = ВидПоляФормы.ПолеВвода;
	пЭлементПолеОсновнаяЗадачаПредставлениеВКарточкеЗадачи.ПутьКДанным = "Объект.ТЧЗадачи.ОсновнаяЗадачаПредставление";
	
	// ******   Поле формы "Номер задачи в карточке задачи верхняя часть"    ***********
	пЭлементПолеОсновнаяЗадача = пЭлементПолеОсновнаяЗадачаПредставлениеВКарточкеЗадачи;
	
	пЭлементПолеНомерЗадачиПредставлениеВКарточкеЗадачи = пЭлементыФормы.Вставить(
		ИменаЭлементов.ИмяПоляНомерЗадачиПредставлениеВКарточкеЗадачи,
		Тип("ПолеФормы"),
		пЭлементКарточкаЗадачи_ВерхняяЧасть,
		пЭлементПолеОсновнаяЗадача);	
	
	пЭлементПолеНомерЗадачиПредставлениеВКарточкеЗадачи.Вид = ВидПоляФормы.ПолеВвода;
	пЭлементПолеНомерЗадачиПредставлениеВКарточкеЗадачи.ПутьКДанным = "Объект.ТЧЗадачи.НомерЗадачиПредставление";	
	пЭлементПолеНомерЗадачиПредставлениеВКарточкеЗадачи.Ширина = 3;
		
	
	// ******   Группа формы "Нижняя часть 3 строка"    ***********
	
	//+ #108 Дзеса Ігор (capitoshko) 05.10.2018	
	Если Объект.Показывать3СтрокуВКарточкеЗадачи Тогда
	//- #108 Дзеса Ігор (capitoshko) 05.10.2018 
		
		пЭлементКарточкаЗадачи_НижняяЧасть3Строка = пЭлементыФормы.Вставить(
			ИменаЭлементов.ИмяКарточкаЗадачи_НижняяЧасть3Строка,
			Тип("ГруппаФормы"),пЭлементКарточкаЗадачи,Неопределено);
		пЭлементКарточкаЗадачи_НижняяЧасть3Строка.Вид = ВидГруппыФормы.ГруппаКолонок;
		пЭлементКарточкаЗадачи_НижняяЧасть3Строка.Заголовок = "ТЧЗадачи "+ПредставлениеКолонки;
		пЭлементКарточкаЗадачи_НижняяЧасть3Строка.Подсказка = "ТЧЗадачи "+ПредставлениеКолонки;
		пЭлементКарточкаЗадачи_НижняяЧасть3Строка.Группировка = ГруппировкаКолонок.ВЯчейке;
		
		//// ******   Поле формы "Есть файлы в карточке задачи 3 строка"    ***********
		
		// + #225 Урянский Д. 2020-07-06
		Если Объект.ОтображениеФайловЗадач = Перечисления.узОтображениеФайловЗадачНаДоске.ЗначениеИКартинка Тогда
			
			пЭлементПолеЗадачиВКарточкеЗадачиКоличествоФайлов = пЭлементыФормы.Добавить(
				ИменаЭлементов.ИмяПоляКоличествоФайловВКарточкеЗадачи,
				Тип("ПолеФормы"),
				пЭлементКарточкаЗадачи_НижняяЧасть3Строка);
			
			пЭлементПолеЗадачиВКарточкеЗадачиКоличествоФайлов.Вид = ВидПоляФормы.ПолеНадписи;
			пЭлементПолеЗадачиВКарточкеЗадачиКоличествоФайлов.ПутьКДанным = "Объект.ТЧЗадачи.КоличествоФайлов";
			пЭлементПолеЗадачиВКарточкеЗадачиКоличествоФайлов.Формат = "ЧРГ=; ЧФ=Ч§";
			пЭлементПолеЗадачиВКарточкеЗадачиКоличествоФайлов.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
			
		ИначеЕсли Объект.ОтображениеФайловЗадач = Перечисления.узОтображениеФайловЗадачНаДоске.Картинка Тогда
			
			пЭлементПолеЗадачиВКарточкеЗадачиЕстьФайл = пЭлементыФормы.Добавить(
				ИменаЭлементов.ИмяПоляЕстьФайлыВКарточкеЗадачи,
				Тип("ПолеФормы"),
				пЭлементКарточкаЗадачи_НижняяЧасть3Строка);
			
			пЭлементПолеЗадачиВКарточкеЗадачиЕстьФайл.Вид = ВидПоляФормы.ПолеНадписи;
			пЭлементПолеЗадачиВКарточкеЗадачиЕстьФайл.ПутьКДанным = "Объект.ТЧЗадачи.ЕстьФайлы";
			пЭлементПолеЗадачиВКарточкеЗадачиЕстьФайл.Ширина = 1;
			пЭлементПолеЗадачиВКарточкеЗадачиЕстьФайл.Формат = "БЛ=; БИ=§";
			
		КонецЕсли; 
		// - #225 Урянский Д. 2020-07-06
		
		//// ******   Поле формы "Есть письма в карточке задачи 3 строка"    ***********
		
		// + #225 Урянский Д. 2020-07-06
		Если Объект.ОтображениеПисемПоЗадачам = Перечисления.узОтображениеПисемПоЗадачамНаДоске.ЗначениеИКартинка Тогда
			
			пЭлементПолеЗадачиВКарточкеЗадачиКоличествоПисем = пЭлементыФормы.Добавить(
				ИменаЭлементов.ИмяПоляКоличествоПисемВКарточкеЗадачи,
				Тип("ПолеФормы"),
				пЭлементКарточкаЗадачи_НижняяЧасть3Строка);
			
			пЭлементПолеЗадачиВКарточкеЗадачиКоличествоПисем.Вид = ВидПоляФормы.ПолеНадписи;
			пЭлементПолеЗадачиВКарточкеЗадачиКоличествоПисем.ПутьКДанным = "Объект.ТЧЗадачи.КоличествоПисем";
			пЭлементПолеЗадачиВКарточкеЗадачиКоличествоПисем.Формат = "ЧРГ=; ЧФ=Ч✉";
			пЭлементПолеЗадачиВКарточкеЗадачиКоличествоПисем.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
			
		ИначеЕсли Объект.ОтображениеПисемПоЗадачам = Перечисления.узОтображениеПисемПоЗадачамНаДоске.Картинка Тогда
			
			пЭлементПолеЗадачиВКарточкеЗадачиЕстьПисьма = пЭлементыФормы.Добавить(
				ИменаЭлементов.ИмяПоляЕстьПисьмаВКарточкеЗадачи,
				Тип("ПолеФормы"),
				пЭлементКарточкаЗадачи_НижняяЧасть3Строка);
			
			пЭлементПолеЗадачиВКарточкеЗадачиЕстьПисьма.Вид = ВидПоляФормы.ПолеНадписи;
			пЭлементПолеЗадачиВКарточкеЗадачиЕстьПисьма.ПутьКДанным = "Объект.ТЧЗадачи.ЕстьПисьма";
			пЭлементПолеЗадачиВКарточкеЗадачиЕстьПисьма.Ширина = 1;
			пЭлементПолеЗадачиВКарточкеЗадачиЕстьПисьма.Формат = "БЛ=; БИ=✉";
			
		КонецЕсли; 
		// - #225 Урянский Д. 2020-07-06
		
		//// ******   Поле формы "Заказчик в карточке задачи 3 строка"    ***********
		
		//+ #108 Дзеса Ігор (capitoshko) 05.10.2018
		Если Объект.ПоказыватьЗаказчика Тогда
		//- #108 Дзеса Ігор (capitoshko) 05.10.2018
			пЭлементПолеЗаказчикПредставлениеВКарточкеЗадачи = пЭлементыФормы.Вставить(
			ИменаЭлементов.ИмяПоляЗаказчикВКарточкеЗадачи,
			Тип("ПолеФормы"),
			пЭлементКарточкаЗадачи_НижняяЧасть3Строка,
			);
			
			пЭлементПолеЗаказчикПредставлениеВКарточкеЗадачи.Вид = ВидПоляФормы.ПолеВвода;
			пЭлементПолеЗаказчикПредставлениеВКарточкеЗадачи.ПутьКДанным = "Объект.ТЧЗадачи.КороткоеИмяЗаказчик";
			пЭлементПолеЗаказчикПредставлениеВКарточкеЗадачи.Ширина = 3;
			
		//+ #108 Дзеса Ігор (capitoshko) 05.10.2018
		КонецЕсли;
		//- #108 Дзеса Ігор (capitoshko) 05.10.2018
		
		//+ #58 Дзеса Ігор (capitoshko)
		
		// + #225 Урянский Д. 2020-07-06
		Если Объект.ОтображениеЧеклистаЗадач = Перечисления.узОтображениеЧеклистаЗадачНаДоске.Дробь Тогда
			
			пЭлементПоляЧекЛистВыполнениеВКарточкеЗадачи = пЭлементыФормы.Добавить(
				ИменаЭлементов.ИмяПоляЧекЛистВыполнение,
				Тип("ПолеФормы"),
				пЭлементКарточкаЗадачи_НижняяЧасть3Строка);
			
			пЭлементПоляЧекЛистВыполнениеВКарточкеЗадачи.Вид = ВидПоляФормы.ПолеВвода;
			пЭлементПоляЧекЛистВыполнениеВКарточкеЗадачи.ПутьКДанным = "Объект.ТЧЗадачи.ЧекЛистВыполнение";
			пЭлементПоляЧекЛистВыполнениеВКарточкеЗадачи.Ширина = 5;
			
		ИначеЕсли Объект.ОтображениеЧеклистаЗадач = Перечисления.узОтображениеЧеклистаЗадачНаДоске.Процент Тогда 
			
			пЭлементПоляЧекЛистВыполнениеВКарточкеЗадачиПроцент = пЭлементыФормы.Добавить(
				ИменаЭлементов.ИмяПоляЧекЛистВыполнениеПроцент,
				Тип("ПолеФормы"),
				пЭлементКарточкаЗадачи_НижняяЧасть3Строка);
			
			пЭлементПоляЧекЛистВыполнениеВКарточкеЗадачиПроцент.Вид = ВидПоляФормы.ПолеВвода;
			пЭлементПоляЧекЛистВыполнениеВКарточкеЗадачиПроцент.ПутьКДанным = "Объект.ТЧЗадачи.ЧекЛистВыполнениеПроцент";
			пЭлементПоляЧекЛистВыполнениеВКарточкеЗадачиПроцент.Ширина = 5;
			
		КонецЕсли; 
		// - #225 Урянский Д. 2020-07-06
		
	Конецесли;
	////Павлюков - конец	
	
	//ЬЬ+ pva 29-03-2023 добавляем вывод на форму последнего комментария
	Если Объект.Показывать4СтрокуВКарточкеЗадачи Тогда
		
		пЭлементКарточкаЗадачи_НижняяЧасть4Строка = пЭлементыФормы.Вставить(
			ИменаЭлементов.ИмяКарточкаЗадачи_НижняяЧасть4Строка,
			Тип("ГруппаФормы"),пЭлементКарточкаЗадачи,Неопределено);
		пЭлементКарточкаЗадачи_НижняяЧасть4Строка.Вид = ВидГруппыФормы.ГруппаКолонок;
		пЭлементКарточкаЗадачи_НижняяЧасть4Строка.Заголовок = "ТЧЗадачи "+ПредставлениеКолонки;
		пЭлементКарточкаЗадачи_НижняяЧасть4Строка.Подсказка = "ТЧЗадачи "+ПредставлениеКолонки;
		пЭлементКарточкаЗадачи_НижняяЧасть4Строка.Группировка = ГруппировкаКолонок.Вертикальная;
		
		пЭлементПоляКомментарийВКарточкеЗадачи = пЭлементыФормы.Добавить(
		ИменаЭлементов.ИмяПоляКомментарийВКарточкеЗадачи,
		Тип("ПолеФормы"),
		пЭлементКарточкаЗадачи_НижняяЧасть4Строка);
		
		пЭлементПоляКомментарийВКарточкеЗадачи.Вид = ВидПоляФормы.ПолеВвода;
		пЭлементПоляКомментарийВКарточкеЗадачи.ПутьКДанным = "Объект.ТЧЗадачи.ПоследнийКомментарий";
		пЭлементПоляКомментарийВКарточкеЗадачи.Высота = Объект.ВысотаПоследнегоКомментария;
		
	КонецЕсли;
	//ЬЬ- pva 29-03-2023
	
КонецПроцедуры 

&НаСервере
Функция ПолучитьИменаЭлементовДляКолонки(пСтатус)
	
	ИмяКолонки = ПолучитьИмяКолонки(пСтатус);	
	ПрефиксДляИмениЭлементовКолонок = ПолучитьПрефиксДляИмениЭлементовКолонок();	
	
	ИмяГруппыКолонки = ПрефиксДляИмениЭлементовКолонок + ИмяКолонки + "_Группа";
	ИмяТЧЗадачи = ИмяКолонки + "_ТЧЗадачи";
	ИмяКомандыДобавитьВСпринт = ИмяКолонки + "_ТЧЗадачи_КомандаДобавитьВСпринт";
	ИмяКомандыУбратьИзСпринта = ИмяКолонки + "_ТЧЗадачи_КомандаУбратьИзСпринта";
	ИмяКомандыСледитьЗаЗадачей = ИмяКолонки + "_ТЧЗадачи_КомандаСледитьЗаЗадачей";
	ИмяКомандыНеСледитьЗаЗадачей = ИмяКолонки + "_ТЧЗадачи_КомандаНеСледитьЗаЗадачей";
	ИмяКомандыДобавитьВТекущиеДела = ИмяКолонки + "_ТЧЗадачи_КомандаДобавитьВТекущиеДела";
	// [+] #327 Павлюков С.Ю. 2024-04-11
	ИмяКомандыДобавитьФактРабот = ИмяКолонки + "_ТЧЗадачи_КомандаДобавитьФактРабот";
	// [-] #327 Павлюков С.Ю. 2024-04-11
	ИмяКомандыСкопироватьКомментарийВКоде = ИмяКолонки + "_ТЧЗадачи_КомандаСкопироватьКомментарийВКоде";
	ИмяКомандыСоздатьФайлДляЗадачиНаДиске = ИмяКолонки + "_ТЧЗадачи_СоздатьФайлДляЗадачиНаДиске";
	ИмяКомандыОткрытьПапкуЗадачиНаДиске = ИмяКолонки + "_ТЧЗадачи_ОткрытьПапкуЗадачиНаДиске";
	                       
	ИмяКарточкаЗадачи = ИмяКолонки + "_ТЧЗадачиКарточкаЗадачи";
	ИмяКарточкаЗадачи_НижняяЧасть = ИмяКолонки + "_ТЧЗадачиКарточкаЗадачи_НижняяЧасть";
	ИмяПоляЗадачиВКарточкеЗадачи = ИмяКолонки + "_ТЧЗадачи_НижняяЧасть_Задача";	
	ИмяКарточкаЗадачи_ВерхняяЧасть = ИмяКолонки +"_ТЧЗадачи_ВерхняяЧасть";
	
	ИмяПоляКороткоеИмяВКарточкеЗадачи = ИмяКолонки + "_ТЧЗадачи_ВерхняяЧасть_КороткоеИмя";
	ИмяПоляОсновнаяЗадачаПредставлениеВКарточкеЗадачи = ИмяКолонки +"_ТЧЗадачи_ВерхняяЧасть_ОсновнаяЗадачаПредставление";	
	ИмяПоляНомерЗадачиПредставлениеВКарточкеЗадачи = ИмяКолонки+"_ТЧЗадачи_ВерхняяЧасть_НомерЗадачиПредставление";	
	
	ИмяКарточкаЗадачи_НижняяЧасть3Строка = ИмяКолонки + "_ТЧЗадачиКарточкаЗадачи_НижняяЧасть3Строка";
	ИмяПоляЕстьФайлыВКарточкеЗадачи = ИмяКолонки + "_ТЧЗадачи_НижняяЧасть3Строка_ЕстьФайлы";
	ИмяПоляЕстьПисьмаВКарточкеЗадачи = ИмяКолонки + "_ТЧЗадачи_НижняяЧасть3Строка_ЕстьПисьма";
	ИмяПоляЗаказчикВКарточкеЗадачи = ИмяКолонки +"_ТЧЗадачи_НижняяЧасть3Строка_Заказчик";
	
	//+ #58 Дзеса Ігор (capitoshko)
	ИмяПоляЧекЛистВыполнение = ИмяКолонки +"_ТЧЗадачи_НижняяЧасть3Строка_ЧекЛистВыполнение";
	//- #58 Дзеса Ігор (capitoshko)
	//+ #106 Дзеса Ігор (capitoshko) 05.10.2018
	ИмяПоляЧекЛистВыполнениеПроцент = ИмяКолонки +"_ТЧЗадачи_НижняяЧасть3Строка_ЧекЛистВыполнениеПроцент";
	//- #106 Дзеса Ігор (capitoshko) 05.10.2018 
	
	// + #225 Урянский Д. 2020-07-06
	ИмяПоляКоличествоФайловВКарточкеЗадачи = ИмяКолонки + "_ТЧЗадачи_НижняяЧасть3Строка_КоличествоФайлов";
	ИмяПоляКоличествоПисемВКарточкеЗадачи = ИмяКолонки + "_ТЧЗадачи_НижняяЧасть3Строка_КоличествоПисем";
	// - #225 Урянский Д. 2020-07-06
	
	//ЬЬ+ pva 29-03-2023 добавляем вывод на форму последнего комментария
	ИмяКарточкаЗадачи_НижняяЧасть4Строка = ИмяКолонки + "_ТЧЗадачиКарточкаЗадачи_НижняяЧасть4Строка";	
	ИмяПоляКомментарийВКарточкеЗадачи = ИмяКолонки + "_ТЧЗадачи_НижняяЧасть4Строка_Комментарий";
	//ЬЬ- pva 29-03-2023
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("ИмяГруппыКолонки",ИмяГруппыКолонки);
	РезультатФункции.Вставить("ИмяТЧЗадачи",ИмяТЧЗадачи);
	РезультатФункции.Вставить("ИмяКомандыДобавитьВСпринт",ИмяКомандыДобавитьВСпринт);
	РезультатФункции.Вставить("ИмяКомандыУбратьИзСпринта",ИмяКомандыУбратьИзСпринта);
	РезультатФункции.Вставить("ИмяКомандыСледитьЗаЗадачей",ИмяКомандыСледитьЗаЗадачей);
	РезультатФункции.Вставить("ИмяКомандыНеСледитьЗаЗадачей",ИмяКомандыНеСледитьЗаЗадачей);
	РезультатФункции.Вставить("ИмяКомандыДобавитьВТекущиеДела",ИмяКомандыДобавитьВТекущиеДела);
	// [+] #327 Павлюков С.Ю. 2024-04-11
	РезультатФункции.Вставить("ИмяКомандыДобавитьФактРабот", ИмяКомандыДобавитьФактРабот);
	// [-] #327 Павлюков С.Ю. 2024-04-11
	РезультатФункции.Вставить("ИмяКомандыСкопироватьКомментарийВКоде",ИмяКомандыСкопироватьКомментарийВКоде);
	РезультатФункции.Вставить("ИмяКомандыСоздатьФайлДляЗадачиНаДиске",ИмяКомандыСоздатьФайлДляЗадачиНаДиске);
	РезультатФункции.Вставить("ИмяКомандыОткрытьПапкуЗадачиНаДиске",ИмяКомандыОткрытьПапкуЗадачиНаДиске);
	
	РезультатФункции.Вставить("ИмяКарточкаЗадачи",ИмяКарточкаЗадачи);		
	РезультатФункции.Вставить("ИмяКарточкаЗадачи_НижняяЧасть",ИмяКарточкаЗадачи_НижняяЧасть);
	РезультатФункции.Вставить("ИмяКарточкаЗадачи_НижняяЧасть3Строка",ИмяКарточкаЗадачи_НижняяЧасть3Строка);
	РезультатФункции.Вставить("ИмяПоляЗадачиВКарточкеЗадачи",ИмяПоляЗадачиВКарточкеЗадачи);
	РезультатФункции.Вставить("ИмяПоляЕстьФайлыВКарточкеЗадачи",ИмяПоляЕстьФайлыВКарточкеЗадачи);
	РезультатФункции.Вставить("ИмяПоляЕстьПисьмаВКарточкеЗадачи",ИмяПоляЕстьПисьмаВКарточкеЗадачи);
	
	РезультатФункции.Вставить("ИмяКарточкаЗадачи_ВерхняяЧасть",ИмяКарточкаЗадачи_ВерхняяЧасть);
	РезультатФункции.Вставить("ИмяПоляКороткоеИмяВКарточкеЗадачи",ИмяПоляКороткоеИмяВКарточкеЗадачи);
	РезультатФункции.Вставить("ИмяПоляОсновнаяЗадачаПредставлениеВКарточкеЗадачи",ИмяПоляОсновнаяЗадачаПредставлениеВКарточкеЗадачи);
	РезультатФункции.Вставить("ИмяПоляЗаказчикВКарточкеЗадачи",ИмяПоляЗаказчикВКарточкеЗадачи);
	РезультатФункции.Вставить("ИмяПоляНомерЗадачиПредставлениеВКарточкеЗадачи",ИмяПоляНомерЗадачиПредставлениеВКарточкеЗадачи);
	
	//+ #58 Дзеса Ігор (capitoshko)
	РезультатФункции.Вставить("ИмяПоляЧекЛистВыполнение",ИмяПоляЧекЛистВыполнение);
	//- #58 Дзеса Ігор (capitoshko)
	//+ #106 Дзеса Ігор (capitoshko) 05.10.2018
	РезультатФункции.Вставить("ИмяПоляЧекЛистВыполнениеПроцент",ИмяПоляЧекЛистВыполнениеПроцент);
	//- #106 Дзеса Ігор (capitoshko) 05.10.2018
	
	// + #225 Урянский Д. 2020-07-06
	РезультатФункции.Вставить("ИмяПоляКоличествоФайловВКарточкеЗадачи",ИмяПоляКоличествоФайловВКарточкеЗадачи);
	РезультатФункции.Вставить("ИмяПоляКоличествоПисемВКарточкеЗадачи",ИмяПоляКоличествоПисемВКарточкеЗадачи);
	// - #225 Урянский Д. 2020-07-06
	
	//ЬЬ+ pva 29-03-2023 добавляем вывод на форму последнего комментария
	РезультатФункции.Вставить("ИмяКарточкаЗадачи_НижняяЧасть4Строка", ИмяКарточкаЗадачи_НижняяЧасть4Строка);	
	РезультатФункции.Вставить("ИмяПоляКомментарийВКарточкеЗадачи", ИмяПоляКомментарийВКарточкеЗадачи);
	//ЬЬ- pva 29-03-2023
	
	Возврат РезультатФункции;
КонецФункции 

&НаСервере
Функция ПолучитьИмяКолонки(пСтатус)
	пИмяКолонки = "";
	
	НаименованиеСтатуса = пСтатус.Наименование;	
	НомерСимвола = 1;
	ДлинаСтроки = СтрДлина(НаименованиеСтатуса);
	Пока НомерСимвола <= ДлинаСтроки Цикл
		пСимвол = Сред(НаименованиеСтатуса,НомерСимвола,1);
		пКодСимвола = КодСимвола(пСимвол);
		
		//Сообщить("пСимвол " + пСимвол + " пКодСимвола - " + пКодСимвола);
		Если (65 <= пКодСимвола И пКодСимвола <= 90)
			ИЛИ (97 <= пКодСимвола И пКодСимвола <= 122)
			ИЛИ (1072 <= пКодСимвола И пКодСимвола <= 1103)
			ИЛИ (1040 <= пКодСимвола И пКодСимвола <= 1071)
			Тогда
			пИмяКолонки = пИмяКолонки + пСимвол;
		Конецесли;
		Если пКодСимвола = 32 Тогда
			пИмяКолонки = пИмяКолонки + "_";
		Конецесли;
		НомерСимвола = НомерСимвола + 1;	
	Конеццикла;
	Возврат пИмяКолонки;
КонецФункции 

&НаСервере
Процедура УбратьИзКонтекстногоМенюЛишниеКнопкиНаСервере()
	Если НЕ СгенирироватьФормуЗаново Тогда
		Возврат;
	Конецесли;
	
	МассивКоманд = Новый Массив();
	МассивКоманд.Добавить("КонтекстноеМенюИзменить");
	МассивКоманд.Добавить("КонтекстноеМенюКопироватьВБуферОбмена");
	МассивКоманд.Добавить("КонтекстноеМенюКопированиеИВыделение");
	МассивКоманд.Добавить("КонтекстноеМенюСкопировать");
	МассивКоманд.Добавить("КонтекстноеМенюУдалить");
	МассивКоманд.Добавить("Найти");
	МассивКоманд.Добавить("ОтменитьПоиск");
	МассивКоманд.Добавить("ПоискПоТекущемуЗначению");	
	
	ГруппаКопированиеИВыделение = "КонтекстноеМенюКопированиеИВыделение";
	Команда_КонтекстноеМенюКопироватьВБуферОбмена = "КонтекстноеМенюКопироватьВБуферОбмена";
	
	//Элементы.В_процессе_выполнения_ТЧЗадачи.КонтекстноеМеню.ПодчиненныеЭлементы	
	Для каждого СтрокаТЧНастройкиКолонок из Объект.ТЧНастройкиКолонок цикл
		
		Если НЕ СтрокаТЧНастройкиКолонок.Видимость Тогда
			Продолжить;
		Конецесли;
		
		пСтатус = СтрокаТЧНастройкиКолонок.Статус;
		ИменаЭлементов = ПолучитьИменаЭлементовДляКолонки(пСтатус);
		ИмяТЧЗадачи = ИменаЭлементов.ИмяТЧЗадачи;
		
		пЭлементТЧЗадачи = Элементы[ИмяТЧЗадачи];
		Для каждого пКоманда из пЭлементТЧЗадачи.КонтекстноеМеню.ПодчиненныеЭлементы цикл
			ТипЗнчКоманда = ТипЗнч(пКоманда);
			пИмяКоманды = пКоманда.Имя;
			
			Если ТипЗнчКоманда = Тип("КнопкаФормы") Тогда 		
				Для каждого ЭлМассивКоманд из МассивКоманд цикл
					Если СтрНайти(пИмяКоманды,ЭлМассивКоманд) = 0 Тогда
						Продолжить;
					Конецесли;    
					
					пКоманда.Видимость = Ложь;	
					
					Прервать;
				Конеццикла;				
			Конецесли;
			
			Если ТипЗнчКоманда = Тип("ГруппаФормы")
				И СтрНайти(пИмяКоманды,ГруппаКопированиеИВыделение) > 0 Тогда
				Для каждого пКомандаКопированияИВыделения из пКоманда.ПодчиненныеЭлементы цикл
					Если СтрНайти(пКомандаКопированияИВыделения.Имя,Команда_КонтекстноеМенюКопироватьВБуферОбмена) = 0 Тогда
						Продолжить;
					Конецесли;
					
					пКомандаКопированияИВыделения.Видимость = Ложь;	
					
				Конеццикла;
			Конецесли;
			
		Конеццикла;
	Конеццикла;	
	
    СгенирироватьФормуЗаново = Ложь;
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтборТЧ()
	Для каждого СтрокаТЧНастройкиКолонок из Объект.ТЧНастройкиКолонок цикл
		Если НЕ СтрокаТЧНастройкиКолонок.Видимость Тогда
			Продолжить;
		Конецесли;
		пСтатус = СтрокаТЧНастройкиКолонок.Статус;
		ИмяКолонки = ПолучитьИмяКолонки(пСтатус);
		
		ИмяТЧЗадачиДляСтатуса = ИмяКолонки + "_ТЧЗадачи";
		Элементы[ИмяТЧЗадачиДляСтатуса].ОтборСтрок = Новый ФиксированнаяСтруктура("Статус", пСтатус);
	Конеццикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
КонецПроцедуры 

&НаСервере
Процедура УстановитьСтандартныеНастройкиНаСервере()
	СгенирироватьФормуЗаново = Истина;
	КлючНастроек = ПолучитьКлючНастроек();	
	ХранилищеОбщихНастроек.Сохранить(КлючНастроек,КлючНастроек,Неопределено);
	пНастройкиКомпоновщика = Неопределено;
	// [+] #283 Мальков М.В. 2023-01-30  
	//ЗагрузитьСохраненныеНастройки(пНастройкиКомпоновщика);
	ЗагрузитьСохраненныеНастройки(КлючНастроек, пНастройкиКомпоновщика);
	// [-] #283 Мальков М.В. 2023-01-30
	ОпределитьОтборНаСервере(пНастройкиКомпоновщика);
КонецПроцедуры 

&НаСервере
Функция ПолучитьКлючНастроек()
	КлючНастроек = "Обработка.узКанбанДоска";	
	Возврат КлючНастроек;
КонецФункции  

&НаСервере
Процедура ЗаполнитьЗадачиНаСервере()
	Объект.АдресВременногоХранилища = ПоместитьВоВременноеХранилище(КомпоновщикНастроекКомпоновкиДанных.Настройки,Новый УникальныйИдентификатор());
	
	пОбъект = РеквизитФормыВЗначение("Объект"); 
	пОбъект.ЗаполнитьЗадачи();
	ЗначениеВРеквизитФормы(пОбъект,"Объект");
	
	Если СгенирироватьФормуЗаново Тогда
		СгенерироватьФорму();
		УстановитьОтборТЧ();		
	Конецесли;	
	
	ОформлениеЦветаЗадачНаСервере();
КонецПроцедуры 

&НаСервере 
// [+] #283 Мальков М.В. 2023-01-30  
//Процедура ЗагрузитьСохраненныеНастройки(пНастройкиКомпоновщика)
Процедура ЗагрузитьСохраненныеНастройки(КлючНастроек, пНастройкиКомпоновщика)
// [-] #283 Мальков М.В. 2023-01-30
	
	// + #225 Урянский Д. 2020-07-06: настройки по умолчанию
	Объект.ОтображениеФайловЗадач = Перечисления.узОтображениеФайловЗадачНаДоске.Отсутствует;
	Объект.ОтображениеПисемПоЗадачам = Перечисления.узОтображениеФайловЗадачНаДоске.Отсутствует;
	Объект.ОтображениеЧеклистаЗадач = Перечисления.узОтображениеЧеклистаЗадачНаДоске.Отсутствует;
	// - #225 Урянский Д. 2020-07-06
	
	Объект.ВысотаПоследнегоКомментария = 1;
	
	// [+] #283 Мальков М.В. 2023-01-30  
	//КлючНастроек = ПолучитьКлючНастроек();
	// [-] #283 Мальков М.В. 2023-01-30 
	
	СохраненныеНастройки = ХранилищеОбщихНастроек.Загрузить(КлючНастроек,КлючНастроек);
	
	Если СохраненныеНастройки <> Неопределено Тогда
		Если СохраненныеНастройки.Свойство("ТЧНастройкиКолонок") Тогда
			ЗаполнитьТЧНастройкиКолонокНаСервере();
			ТЧНастройкиКолонок = СохраненныеНастройки.ТЧНастройкиКолонок;
			// + #228 Пиганов Г.В. 2020.07.02
			Если ТЧНастройкиКолонок.Колонки.Найти("Группа") = Неопределено Тогда
				ТЧНастройкиКолонок.Колонки.Добавить("Группа");
			КонецЕсли;
			// - #228 Пиганов Г.В. 2020.07.02
			Для каждого СтрокаТЧНастройкиКолонок из Объект.ТЧНастройкиКолонок цикл
				ПараметрыОтбора=Новый Структура();
				ПараметрыОтбора.Вставить("Статус",СтрокаТЧНастройкиКолонок.Статус);
				НайденныеСтрокиСохраненныеНастройки = ТЧНастройкиКолонок.НайтиСтроки(ПараметрыОтбора);
				Для каждого СтрокаНайденныеСтроки из НайденныеСтрокиСохраненныеНастройки цикл
					СтрокаТЧНастройкиКолонок.Видимость = СтрокаНайденныеСтроки.Видимость;		
					// + #228 Пиганов Г.В. 2020.07.02
					СтрокаТЧНастройкиКолонок.Группа    = СтрокаНайденныеСтроки.Группа;
					// - #228 Пиганов Г.В. 2020.07.02
				Конеццикла;				
			Конеццикла;
		Иначе
			ЗаполнитьТЧНастройкиКолонокНаСервере();	
		Конецесли;
		Если СохраненныеНастройки.Свойство("НастройкиКомпоновщикаХранилище") Тогда
			пНастройкиКомпоновщика = СохраненныеНастройки.НастройкиКомпоновщикаХранилище.Получить();
		Конецесли;
		Если СохраненныеНастройки.Свойство("Показывать3СтрокуВКарточкеЗадачи") Тогда
			Объект.Показывать3СтрокуВКарточкеЗадачи = СохраненныеНастройки.Показывать3СтрокуВКарточкеЗадачи;
		Конецесли;           
		//ЬЬ+ pva 29-03-2023 добавляем вывод на форму последнего комментария
		Если СохраненныеНастройки.Свойство("Показывать4СтрокуВКарточкеЗадачи") Тогда
			Объект.Показывать4СтрокуВКарточкеЗадачи = СохраненныеНастройки.Показывать4СтрокуВКарточкеЗадачи;
			Объект.ВысотаПоследнегоКомментария = СохраненныеНастройки.ВысотаПоследнегоКомментария;
		Конецесли;
		//ЬЬ+ pva 29-03-2023		
		// + #225 Урянский Д. 2020-07-06
		Если СохраненныеНастройки.Свойство("ОтображениеФайловЗадач") Тогда
			Объект.ОтображениеФайловЗадач = СохраненныеНастройки.ОтображениеФайловЗадач;
		ИначеЕсли СохраненныеНастройки.Свойство("ПоказыватьПризнакЕстьФайлыПоЗадаче")
			И СохраненныеНастройки.ПоказыватьПризнакЕстьФайлыПоЗадаче Тогда
			Объект.ОтображениеФайловЗадач = Перечисления.узОтображениеФайловЗадачНаДоске.Картинка;
		КонецЕсли; 
		Если СохраненныеНастройки.Свойство("ОтображениеПисемПоЗадачам") Тогда
			Объект.ОтображениеПисемПоЗадачам = СохраненныеНастройки.ОтображениеПисемПоЗадачам;
		ИначеЕсли СохраненныеНастройки.Свойство("ПоказыватьПризнакЕстьПисьмаПоЗадаче")
			И СохраненныеНастройки.ПоказыватьПризнакЕстьПисьмаПоЗадаче Тогда 
			Объект.ОтображениеПисемПоЗадачам = Перечисления.узОтображениеПисемПоЗадачамНаДоске.Картинка;
		КонецЕсли; 
		Если СохраненныеНастройки.Свойство("ОтображениеЧеклистаЗадач") Тогда
			Объект.ОтображениеЧеклистаЗадач = СохраненныеНастройки.ОтображениеЧеклистаЗадач;
		ИначеЕсли СохраненныеНастройки.Свойство("ПоказыватьВыполнениеЧеклистаДробь")
			И СохраненныеНастройки.ПоказыватьВыполнениеЧеклистаДробь Тогда 
			Объект.ОтображениеЧеклистаЗадач = Перечисления.узОтображениеЧеклистаЗадачНаДоске.Дробь;
		ИначеЕсли СохраненныеНастройки.Свойство("ПоказыватьВыполнениеЧеклистаПроцент")
			И СохраненныеНастройки.ПоказыватьВыполнениеЧеклистаПроцент Тогда 
			Объект.ОтображениеЧеклистаЗадач = Перечисления.узОтображениеЧеклистаЗадачНаДоске.Процент;
		КонецЕсли; 
		Если СохраненныеНастройки.Свойство("ПоказыватьЗаказчика") Тогда
			Объект.ПоказыватьЗаказчика = СохраненныеНастройки.ПоказыватьЗаказчика;
		Конецесли;
		// - #225 Урянский Д. 2020-07-06
	Иначе
		ЗаполнитьТЧНастройкиКолонокНаСервере();
	Конецесли;	
КонецПроцедуры 

&НаСервере
Процедура ОпределитьОтборНаСервере(пНастройкиКомпоновщика = Неопределено)
	пОбъект = РеквизитФормыВЗначение("Объект"); 
	МакетСКД = пОбъект.ПолучитьМакет("СхемаКомпоновкиДанных");
	
	АдресВременногоХранилищаМакетаСКД = ПоместитьВоВременноеХранилище(МакетСКД,Новый УникальныйИдентификатор());
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВременногоХранилищаМакетаСКД);
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(ИсточникНастроек);
	
	Если пНастройкиКомпоновщика = Неопределено Тогда
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);
	Иначе
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(пНастройкиКомпоновщика);
	Конецесли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧНастройкиКолонокНаСервере()
	пОбъект = РеквизитФормыВЗначение("Объект"); 
	пОбъект.ЗаполнитьТЧНастройкиКолонок();
	ЗначениеВРеквизитФормы(пОбъект,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьАктивизацииСтрок(ИсключитьИмяТЧ = Неопределено)
	Для каждого ЭлСтруктураТЧДляСнятияФокусаСЗадач из СтруктураТЧДляСнятияФокусаСЗадач цикл		
		ИмяТЧЗадачи = ЭлСтруктураТЧДляСнятияФокусаСЗадач.Ключ;	
		Если ИмяТЧЗадачи = ИсключитьИмяТЧ Тогда
			Продолжить;
		Конецесли;
		
		Элементы[ИмяТЧЗадачи].ВыделенныеСтроки.Очистить();
	Конеццикла;
КонецПроцедуры 

&НаКлиенте
Процедура СменитьСтатусЗадачиНаКлиенте(Элемент,ПараметрыПеретаскивания)

	НовыйСтатус = Элемент.ОтборСтрок.Статус;	
	ДанныеИсточник = ПараметрыПеретаскивания.Значение;
	
	МассивЗадач = Новый Массив();
	Для каждого ДанныеИсточник из ПараметрыПеретаскивания.Значение цикл
		ЗадачаСсылка = ДанныеИсточник.Задача;
		МассивЗадач.Добавить(ЗадачаСсылка);
	Конеццикла;	
		
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("НовыйСтатус",НовыйСтатус);
	ДопПараметры.Вставить("МассивЗадач",МассивЗадач);	
	СменитьСтатусЗадачиНаСервере(ДопПараметры); 
	
КонецПроцедуры 

&НаСервере
Процедура СменитьСтатусЗадачиНаСервере(ДопПараметры)

	пОбъект = РеквизитФормыВЗначение("Объект"); 
	пОбъект.СменитьСтатусЗадачи(ДопПараметры);
	ЗначениеВРеквизитФормы(пОбъект,"Объект");   
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюЗадачу(Элемент)
	пСтатус = Элемент.ОтборСтрок.Статус;
	ПараметрыНовойЗадачи = Новый Структура();
	ПараметрыНовойЗадачи.Вставить("Статус",пСтатус);
	ЭлементыОтбора = КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы;
	Для каждого ЭлементОтбора из ЭлементыОтбора цикл
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		Конецесли;
		//+ Иванов А.Б. 2020-04-11
		//Павлюков
		Если Не ТипЗнч(ЭлементОтбора) =  Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		//- Иванов А.Б. 2020-04-11
		Если ЭлементОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно Тогда
			Продолжить;
		Конецесли;	
		Если СтрНайти(ЭлементОтбора.ЛевоеЗначение,".") > 0 Тогда
			Продолжить;
		Конецесли;
		Если ТипЗнч(ЭлементОтбора) =  Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПараметрыНовойЗадачи.Вставить("" + ЭлементОтбора.ЛевоеЗначение,ЭлементОтбора.ПравоеЗначение);	
		Конецесли;
	Конеццикла;
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ТребоватьЗаполнитьРодителя",Ложь);
	ДопПараметры.Вставить("ПараметрыНовойЗадачи",ПараметрыНовойЗадачи);
	ОткрытьФорму("Справочник.узЗадачи.Форма.ФормаЭлемента",ДопПараметры);	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьДействиеДляАктивнойСтраницы()
	пТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	Если пТекущаяСтраница = Элементы.ГруппаКанбанДоска Тогда
		ОбновитьКанбанДоску();
	Конецесли;	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивЗадачПоВыделеннымСтрокам(МассивВыделенныхСтрок)
	МассивЗадач = Новый Массив();
	Для каждого ЭлМассиваВыделенныхСтрок из МассивВыделенныхСтрок цикл
		ИдентификаторСтроки = ЭлМассиваВыделенныхСтрок;
		СтрокаТЧЗадачи = Объект.ТЧЗадачи.НайтиПоИдентификатору(ИдентификаторСтроки);
		МассивЗадач.Добавить(СтрокаТЧЗадачи.Задача);
	Конеццикла;	
	Возврат МассивЗадач;
КонецФункции

&НаСервере
// [+] #283 Мальков М.В. 2023-01-30  
//Процедура СохранитьНастройки()
Процедура СохранитьНастройки(КлючНастроек, Пользователь = Неопределено)
// [-] #283 Мальков М.В. 2023-01-30
	
	НастройкиКомпоновщикаХранилище = Новый ХранилищеЗначения(КомпоновщикНастроекКомпоновкиДанных.Настройки);
	// [+] #283 Мальков М.В. 2023-01-30  
	//КлючНастроек = ПолучитьКлючНастроек();
	// [-] #283 Мальков М.В. 2023-01-30
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ТЧНастройкиКолонок", Объект.ТЧНастройкиКолонок.Выгрузить());
	ДопПараметры.Вставить("НастройкиКомпоновщикаХранилище", НастройкиКомпоновщикаХранилище);
	ДопПараметры.Вставить("Показывать3СтрокуВКарточкеЗадачи", Объект.Показывать3СтрокуВКарточкеЗадачи);
	// + #225 Урянский Д. 2020-07-06
	ДопПараметры.Вставить("ОтображениеПисемПоЗадачам", Объект.ОтображениеПисемПоЗадачам);
	ДопПараметры.Вставить("ОтображениеФайловЗадач", Объект.ОтображениеФайловЗадач);
	ДопПараметры.Вставить("ОтображениеЧеклистаЗадач", Объект.ОтображениеЧеклистаЗадач);
	ДопПараметры.Вставить("ПоказыватьЗаказчика", Объект.ПоказыватьЗаказчика);
	// - #225 Урянский Д. 2020-07-06
	
	//ЬЬ+ pva 29-03-2023 добавляем вывод на форму последнего комментария
	ДопПараметры.Вставить("Показывать4СтрокуВКарточкеЗадачи", Объект.Показывать4СтрокуВКарточкеЗадачи);
	ДопПараметры.Вставить("ВысотаПоследнегоКомментария", Объект.ВысотаПоследнегоКомментария);
	//ЬЬ+ pva 29-03-2023 
	
	// [+] #283 Мальков М.В. 2023-01-30  
	//ХранилищеОбщихНастроек.Сохранить(КлючНастроек,КлючНастроек,ДопПараметры); 
	Если Пользователь = Неопределено Тогда 
		ХранилищеОбщихНастроек.Сохранить(КлючНастроек, КлючНастроек, ДопПараметры);
	Иначе 
		ХранилищеОбщихНастроек.Сохранить(КлючНастроек, КлючНастроек, ДопПараметры, , "" + Пользователь);
	КонецЕсли;
	// [-] #283 Мальков М.В. 2023-01-30

КонецПроцедуры

&НаСервере
Функция ПолучитьТекущийКлючНастроек()
	
	ТекущийКлючНастроекХранилище = "Обработка.узКД_ТекущийКлючНастроек";	
	
	Возврат ХранилищеОбщихНастроек.Загрузить(
		ТекущийКлючНастроекХранилище, ТекущийКлючНастроекХранилище);
	
КонецФункции  

&НаСервере
Процедура СохранитьТекущийКлючНастроек()
	
	ТекущийКлючНастроекХранилище = "Обработка.узКД_ТекущийКлючНастроек";
	
	ХранилищеОбщихНастроек.Сохранить(
		ТекущийКлючНастроекХранилище, 
		ТекущийКлючНастроекХранилище, 
		ТекущийКлючНастроек);
	
КонецПроцедуры 

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура КомандаОбновить(Команда)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКанбанДоска;
	ЗаполнитьЗадачиНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗадачиНаКлиенте()
	ОбновитьКанбанДоску();
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьКанбанДоску()
	СтруктураТЧДляСнятияФокусаСЗадач.Очистить();
	Объект.АдресВременногоХранилища = ПоместитьВоВременноеХранилище(КомпоновщикНастроекКомпоновкиДанных.Настройки,Новый УникальныйИдентификатор());
	ЗаполнитьЗадачиНаСервере();
	УстановитьВидимостьДоступность();	
	
	ОчиститьАктивизацииСтрок();
	УбратьИзКонтекстногоМенюЛишниеКнопкиНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура КомандаУстановитьСтандартныеНастройки(Команда)
	
	УстановитьСтандартныеНастройкиНаСервере();  
	
	ТекущийКлючНастроек = ПолучитьКлючНастроек();
	
	ОбновитьЗаголовокФормыНаКлиенте(ТекущийКлючНастроек);
	
КонецПроцедуры

// [+] #283 Мальков М.В. 2023-01-30
&НаКлиенте
Процедура ЗагрузитьВариантКомандаПеред(Команда)
	ЗагрузитьВариантНаКлиенте();
КонецПроцедуры      

// [+] #283 Мальков М.В. 2023-01-30
&НаКлиенте
Процедура СохранитьВариантКакКомандаПеред(Команда)
	СохранитьВариантКакНаКлиенте();
КонецПроцедуры

// [+] #283 Мальков М.В. 2023-01-30
&НаКлиенте
Процедура СохранитьВариантКомандаПеред(Команда)
	СохранитьВариантНаКлиенте();
КонецПроцедуры

// [+] #283 Мальков М.В. 2023-01-30
&НаКлиенте
Процедура СохранитьТекущийВариантВсемКоманда(Команда)
	СохранитьТекущийВариантВсемНаСервере();
КонецПроцедуры

#КонецОбласти

#Область КомандыИСобытияТЧЗадачи

&НаКлиенте
Процедура ТЧЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Задача);	
КонецПроцедуры

&НаКлиенте
Процедура ТЧЗадачиПриАктивизацииЯчейки(Элемент)
	ИмяТЧЗадачи = Элемент.Имя;
	ИмяАктивнойТЧ = ИмяТЧЗадачи; 
	ОчиститьАктивизацииСтрок(ИмяТЧЗадачи);
	Если НЕ СтруктураТЧДляСнятияФокусаСЗадач.Свойство(ИмяТЧЗадачи) Тогда
		Элемент.ВыделенныеСтроки.Очистить();
		СтруктураТЧДляСнятияФокусаСЗадач.Вставить(ИмяТЧЗадачи,"Истина");
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ТЧЗадачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)	
	Отказ = Истина;
	ДобавитьНовуюЗадачу(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТЧЗадачиПередНачаломИзменения(Элемент, Отказ)
	Отказ = Ложь;
КонецПроцедуры
//}

&НаКлиенте
Процедура ТЧЗадачиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СменитьСтатусЗадачиНаКлиенте(Элемент,ПараметрыПеретаскивания);
	ОформлениеЦветаЗадачНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьВСпринт(Команда)
	ДобавитьУбратьВСпринтНаКлиенте(1);	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУбратьИзСпринта(Команда)
	ДобавитьУбратьВСпринтНаКлиенте(-1);
КонецПроцедуры

&НаСервере
Функция ДобавитьУбратьВСпринтЗадачи(КодОперации,пСпринт,МассивЗадач)
	Перем ТЗТекущиеСпринтыДляЗадач;
	
	РезультатФункции = Новый Структура();
	МассивСообщений = Новый Массив();	
	
	ЭтоДобавление = КодОперации = 1;
	ЭтоУдаление = КодОперации = -1;
			
	Если ЭтоДобавление
		И НЕ ЗначениеЗаполнено(пСпринт) Тогда
		ВызватьИсключение "Ошибка! Не заполнен пСпринт при вызове метода ДобавитьУбратьВСпринтЗадачи(КодОперации,пСпринт,МассивЗадач)";
	Конецесли;	
	
	Если ЭтоУдаление Тогда
		ТЗТекущиеСпринтыДляЗадач = Справочники.узСпринты.ПолучитьТЗТекущиеСпринтыДляЗадач(
			КонецДня(ТекущаяДатаСеанса()),
			МассивЗадач);
	Конецесли;
	
	Для каждого ЭлМассиваЗадач из МассивЗадач цикл
		пЗадачаСсылка = ЭлМассиваЗадач;		
		
		Если ЭтоДобавление Тогда
			ДобавитьЗадачуВСпринт(пЗадачаСсылка,пСпринт,МассивСообщений);	
		ИначеЕсли ЭтоУдаление Тогда
			УбратьЗадачуИзСпринта(пЗадачаСсылка,ТЗТекущиеСпринтыДляЗадач,МассивСообщений);	
		Иначе
			ВызватьИсключение "Неизвестный код операции " + КодОперации;
		КонецЕсли;
		
	Конеццикла;	
	
	РезультатФункции.Вставить("МассивСообщений",МассивСообщений);
	РезультатФункции.Вставить("КомандаДобавитьУбратьВыполнена",Истина);
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура ДобавитьУбратьВСпринтНаКлиенте(КодОперации)
	СтрокаТЧ = Элементы[ИмяАктивнойТЧ].ТекущиеДанные;	
	Если СтрокаТЧ = Неопределено тогда
		Сообщить("Выберите задачи, которые хотите добавить в спринт");
		Возврат;	
	Конецесли;	
	МассивВыделенныхСтрок = Элементы[ИмяАктивнойТЧ].ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		Сообщить("Выберите задачи, которые хотите добавить в спринт");
		Возврат;
	Конецесли;	
	РезультатФункции = ДобавитьУбратьВСпринтНаСервере(КодОперации,МассивВыделенныхСтрок);
	КомандаДобавитьУбратьВыполнена = РезультатФункции.КомандаДобавитьУбратьВыполнена;
	Если НЕ КомандаДобавитьУбратьВыполнена Тогда
		Если РезультатФункции.Свойство("НеобходимоВыбратьСпринт") Тогда
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("МассивВыделенныхСтрок",МассивВыделенныхСтрок);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьВыборСпринта", ЭтотОбъект, ДополнительныеПараметры);
			
		    пОтбор = Новый Структура("СпринтЗавершен", Ложь);
			ПараметрыОткрытияФормы = Новый Структура("Отбор", пОтбор);   
			ОткрытьФорму("Справочник.узСпринты.Форма.ФормаВыбора",ПараметрыОткрытияФормы,,,,,ОповещениеОЗакрытии);	
		Конецесли;
	Конецесли;
	ДобавитьУбратьВСпринтНаКлиентеОбработатьРезультатФункции(РезультатФункции);
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьВыборСпринта(РезультатЗакрытия, ДопПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	Конецесли;
	пСпринт = РезультатЗакрытия;
	МассивВыделенныхСтрок = ДопПараметры.МассивВыделенныхСтрок;
	РезультатФункции = ДобавитьУбратьВСпринтНаСервере(1,МассивВыделенныхСтрок,пСпринт);
	ДобавитьУбратьВСпринтНаКлиентеОбработатьРезультатФункции(РезультатФункции);
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьУбратьВСпринтНаКлиентеОбработатьРезультатФункции(РезультатФункции)
	Если РезультатФункции.Свойство("МассивСообщений") Тогда
		МассивСообщений = РезультатФункции.МассивСообщений;
		Для каждого ЭлМассиваСообщения из МассивСообщений цикл
			Сообщить(ЭлМассиваСообщения);		 
		Конеццикла;		
	Конецесли;
	ЗаполнитьЗадачиНаСервере();	
КонецПроцедуры 

&НаСервере
Функция ДобавитьУбратьВСпринтНаСервере(КодОперации,МассивВыделенныхСтрок,пСпринт = Неопределено)
	МассивЗадач = ПолучитьМассивЗадачПоВыделеннымСтрокам(МассивВыделенныхСтрок);
	РезультатФункцииСпринтКоторыйНеЗавершен = Справочники.узСпринты.ПолучитьСпринтКоторыйНеЗавершен();	
	ТекстОшибки	= РезультатФункцииСпринтКоторыйНеЗавершен.ТекстОшибки;
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		МассивСообщений = Новый Массив(); 
		МассивСообщений.Добавить(ТекстОшибки);
		
		РезультатФункции = Новый Структура();
		РезультатФункции.Вставить("КомандаДобавитьУбратьВыполнена",Ложь);
		РезультатФункции.Вставить("МассивСообщений",МассивСообщений);
		Возврат РезультатФункции;		
	Конецесли;
	
	Если КодОперации = -1 Тогда
		РезультатФункции = ДобавитьУбратьВСпринтЗадачи(КодОперации,Неопределено,МассивЗадач);
		Возврат РезультатФункции;			
	Конецесли;
	
	Если ЗначениеЗаполнено(пСпринт) Тогда
		РезультатФункции = ДобавитьУбратьВСпринтЗадачи(КодОперации,пСпринт,МассивЗадач);
		Возврат РезультатФункции;
	Конецесли;;		
	
	Только1АктивныйСпринт = РезультатФункцииСпринтКоторыйНеЗавершен.Только1АктивныйСпринт;	
	Если Только1АктивныйСпринт Тогда		
		пСпринт = РезультатФункцииСпринтКоторыйНеЗавершен.Спринт;
		РезультатФункции = ДобавитьУбратьВСпринтЗадачи(КодОперации,пСпринт,МассивЗадач);
		Возврат РезультатФункции;
	Конецесли;
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("КомандаДобавитьУбратьВыполнена",Ложь);
	РезультатФункции.Вставить("НеобходимоВыбратьСпринт",Истина);
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура КомандаНеСледитьЗаЗадачей(Команда)
	ДобавитьУбратьНаблюдателяЗаЗадачейНаКлиенте(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСледитьЗаЗадачей(Команда)
	ДобавитьУбратьНаблюдателяЗаЗадачейНаКлиенте(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУбратьНаблюдателяЗаЗадачейНаКлиенте(ЭтоДобавлениеНаблюдателя)
	СтрокаТЧ = Элементы[ИмяАктивнойТЧ].ТекущиеДанные;	
	Если СтрокаТЧ = Неопределено тогда
		Сообщить("Выберите задачи, которые за которыми хотите следить");
		Возврат;	
	Конецесли;	
	МассивВыделенныхСтрок = Элементы[ИмяАктивнойТЧ].ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		Сообщить("Выберите задачи, которые за которыми хотите следить");
		Возврат;
	Конецесли;			
	ДобавитьУбратьНаблюдателяЗаЗадачейНаСервере(МассивВыделенныхСтрок,ЭтоДобавлениеНаблюдателя);	
	Оповестить("ДобавленУбранНаблюдатель");
КонецПроцедуры 

&НаСервере
Процедура ДобавитьУбратьНаблюдателяЗаЗадачейНаСервере(МассивВыделенныхСтрок,ЭтоДобавлениеНаблюдателя)
	МассивЗадач = ПолучитьМассивЗадачПоВыделеннымСтрокам(МассивВыделенныхСтрок);
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Пользователь",Пользователи.ТекущийПользователь());
	ДопПараметры.Вставить("МассивЗадач",МассивЗадач);
	Если ЭтоДобавлениеНаблюдателя Тогда
		РегистрыСведений.узНаблюдателиЗаЗадачами.СледитьЗаЗадачей(ДопПараметры);	
	Иначе
		РегистрыСведений.узНаблюдателиЗаЗадачами.ПерестатьСледитьЗаЗадачей(ДопПараметры);	
	Конецесли;
КонецПроцедуры 

&НаКлиенте
Процедура КомандаДобавитьВТекущиеДела(Команда)
	СтрокаТЧ = Элементы[ИмяАктивнойТЧ].ТекущиеДанные;	
	Если СтрокаТЧ = Неопределено тогда
		узОбщийМодульСервер.узСообщить("Выберите задачи, которые хотите добавить в текущие дела",82);
		Возврат;	
	Конецесли;	
	МассивВыделенныхСтрок = Элементы[ИмяАктивнойТЧ].ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		узОбщийМодульСервер.узСообщить("Выберите задачи, которые хотите добавить в текущие дела",82);
		Возврат;
	Конецесли;			
	ДобавитьВТекущиеДелаНаСервере(МассивВыделенныхСтрок);	
	Оповестить("КомандаДобавитьВТекущиеДела");
КонецПроцедуры    

// [+] #327 Павлюков С.Ю. 2024-04-11
&НаКлиенте
Процедура КомандаДобавитьФактРабот(Команда)
	
	#Если ВебКлиент Тогда
		ОкноОтображения = Неопределено;
	#Иначе
		ОкноОтображения = ВариантОткрытияОкна.ОтдельноеОкно;
	#КонецЕсли
	
	СтрокаТЧ = Элементы[ИмяАктивнойТЧ].ТекущиеДанные;	
	Если СтрокаТЧ = Неопределено Тогда
		узОбщийМодульСервер.узСообщить("Выберите задачу", 82);
		Возврат;	
	КонецЕсли; 
	
	ПараметрыФормыузВводФактаПоЗадаче = Новый Структура;
	ПараметрыФормыузВводФактаПоЗадаче.Вставить("Задача", СтрокаТЧ.Задача);
	
	ОткрытьФорму("Документ.узВводФактаПоЗадаче.Форма.ФормаДокументаВводСЗадачи", 
		ПараметрыФормыузВводФактаПоЗадаче, , , ОкноОтображения, , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьВТекущиеДелаНаСервере(МассивВыделенныхСтрок)
	МассивЗадач = ПолучитьМассивЗадачПоВыделеннымСтрокам(МассивВыделенныхСтрок);
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Автор",Пользователи.ТекущийПользователь());
	ДопПараметры.Вставить("МассивЗадач",МассивЗадач);
	Справочники.узТекущиеДела.ДобавитьЗадачуВТекущиеДела(ДопПараметры);
КонецПроцедуры 

&НаКлиенте
Процедура КомандаСкопироватьКомментарийВКоде(Команда)
	СтрокаТЧ = Элементы[ИмяАктивнойТЧ].ТекущиеДанные;	
	Если СтрокаТЧ = Неопределено тогда
		узОбщийМодульСервер.узСообщить("Выберите задачу, по которой хотите скопировать комментарий в коде",84);
		Возврат;	
	Конецесли;	
	МассивВыделенныхСтрок = Элементы[ИмяАктивнойТЧ].ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество() = 0	 Тогда
		узОбщийМодульСервер.узСообщить("Выберите задачу, по которой хотите скопировать комментарий в коде",84);
		Возврат;
	Конецесли;			
	Если МассивВыделенныхСтрок.Количество() > 1	 Тогда
		узОбщийМодульСервер.узСообщить("Можно выбрать только одну задачу для копирования комментария в коде",85);
		Возврат;
	Конецесли;				
	пКомментарииВКоде = ПолучитьКомментарийВКодеНаСервере(МассивВыделенныхСтрок);	
	узОбщийМодульКлиент.УстановитьТекстВБуферОбмена(пКомментарииВКоде);
		
КонецПроцедуры

&НаСервере
Функция ПолучитьКомментарийВКодеНаСервере(МассивВыделенныхСтрок)
	МассивЗадач = ПолучитьМассивЗадачПоВыделеннымСтрокам(МассивВыделенныхСтрок);
	
	Если МассивЗадач.Количество() > 1 Тогда
		узОбщийМодульСервер.узСообщить("Можно выбрать только одну задачу для копирования комментария в коде",85);	
	Конецесли;
	
	пЗадача = МассивЗадач[0];
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Код",пЗадача.Код);
	ДопПараметры.Вставить("Исполнитель",пЗадача.Исполнитель);
	ДопПараметры.Вставить("НомерВнешнейЗаявки",пЗадача.НомерВнешнейЗаявки);
	
	пКомментарииВКоде = Справочники.узЗадачи.ПолучитьКомментарииВКоде(ДопПараметры);
	Возврат пКомментарииВКоде;	
КонецФункции 

&НаКлиенте
Процедура КомандаСоздатьФайлДляЗадачиНаДиске(Команда)
	СтрокаТЧ = Элементы[ИмяАктивнойТЧ].ТекущиеДанные;	
	Если СтрокаТЧ = Неопределено тогда
		узОбщийМодульСервер.узСообщить("Выберите задачи, для которых хотите создать файл задач на диске",82);
		Возврат;	
	Конецесли;	
	МассивВыделенныхСтрок = Элементы[ИмяАктивнойТЧ].ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		узОбщийМодульСервер.узСообщить("Выберите задачи, для которых хотите создать файл задач на диске",82);
		Возврат;
	Конецесли;		
	Массив = ПолучитьМассивЗадачПоВыделеннымСтрокам(МассивВыделенныхСтрок);
	узОбщийМодульКлиент.СоздатьФайлДляЗадачиНаДиске(Массив);	
	Оповестить("КомандаСоздатьИерархиюЗадачНаДиске");
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьПапкуЗадачиНаДиске(Команда)
	СтрокаТЧ = Элементы[ИмяАктивнойТЧ].ТекущиеДанные;	
	Если СтрокаТЧ = Неопределено тогда
		узОбщийМодульСервер.узСообщить("Выберите задачи, для которых хотите открыть папки на диске",100);
		Возврат;	
	Конецесли;	
	МассивВыделенныхСтрок = Элементы[ИмяАктивнойТЧ].ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		узОбщийМодульСервер.узСообщить("Выберите задачи, для которых хотите открыть папки на диске",100);
		Возврат;
	Конецесли;		
	Массив = ПолучитьМассивЗадачПоВыделеннымСтрокам(МассивВыделенныхСтрок);
	узОбщийМодульКлиент.ОткрытьПапкуЗадачиНаДиске(Массив);	
	Оповестить("КомандаОткрытьПапкуЗадачиНаДиске");
КонецПроцедуры

//{ Павлюков - Зачада 132
&НаКлиенте
Процедура ТЧЗадачиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	//Исключительно для работы вёб-клиента
	//Причину я по описаниям не нашел
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОформлениеКанбанДоски

&НаСервере
Процедура ОформлениеЦветаЗадачНаСервере()
	УстановитьБазовоеОформлениеЗадачНаСервере();
	
	УстановитьИндивидуальноеОформлениеЗадачНаСервере(); 
КонецПроцедуры 

&НаСервере
Процедура УстановитьИндивидуальноеОформлениеЗадачНаСервере()
	Если НЕ Константы.узИспользоватьСвоиЦветаДляЗадач.Получить() Тогда
		Возврат;
	Конецесли;
	
	Для Каждого ТекЭлементФормы Из Элементы Цикл
		Если ТипЗнч(ТекЭлементФормы) = Тип("ТаблицаФормы") И ТекЭлементФормы.ПутьКДанным = "Объект.ТЧЗадачи" Тогда
			Для Каждого СтрокаЗадача Из Объект.ТЧЗадачи Цикл
				ТекЗадача = СтрокаЗадача.Задача;
				
				//+ УЗ_Иванов А.Б. 2016-11-26
				//ИмяТЧЗадачи = "ТЧЗадачи" + СтрокаЗадача.Статус.ИмяПредопределенныхДанных;
				ИменаЭлементов = ПолучитьИменаЭлементовДляКолонки(СтрокаЗадача.Статус);
				ИмяТЧЗадачи = ИменаЭлементов.ИмяТЧЗадачи;
				//- УЗ_Иванов А.Б. 2016-11-26
				
				Если ТекЭлементФормы.Имя <> ИмяТЧЗадачи Тогда
					Продолжить;
				КонецЕсли; 
				
				ТекЦвет 	 = ПолучитьПриоритетныйЦветЗадачиНаСервере(СтрокаЗадача);
				ЦветЗаполнен = ПроверитьЗаполнениеЦвета(ТекЦвет);
				
				Если ЦветЗаполнен Тогда
					ОформлениеЗадачи 	 = УсловноеОформление.Элементы.Добавить();
					Отбор 				 = ОформлениеЗадачи.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
					Отбор.Использование  = ИСТИНА;
					Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.Задача");
					Отбор.ПравоеЗначение = ТекЗадача;
					
					Поля 				 = ОформлениеЗадачи.Поля.Элементы.Добавить();
					Поля.Использование 	 = ИСТИНА;
					//Поля.Поле 			 = Новый ПолеКомпоновкиДанных(ИмяТЧЗадачи + "НомерЗадачиПредставление");
					Поля.Поле 			 = Новый ПолеКомпоновкиДанных(ИменаЭлементов.ИмяПоляНомерЗадачиПредставлениеВКарточкеЗадачи);
					
					ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветФона", ТекЦвет);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;	
КонецПроцедуры 

&НаСервере
Процедура УстановитьБазовоеОформлениеЗадачНаСервере()
	УсловноеОформление.Элементы.Очистить();
	
	ОформлениеЗадачи 	 = УсловноеОформление.Элементы.Добавить();
	ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи);
	ШрифтЖирный = ШрифтыСтиля.узКанбанДоскаШрифтЖирный;
	ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтЖирный);
	
	//ВажностьЧисло
	//ЦветДляЗадачиЧисло	
	//Цвет указывается от ЦветДляЗадачиЧисло:
	// 1 - черный цвет; 
	// 2 - красный цвет;
	// 3 - желтый цвет;
	// 4 - зеленый цвет;
	// 10 - салатовый цвет;
	
	//{ ***** Установка цвета от Важности и буфера задачи *****
	
	// 1 - черный цвет;
	ОформлениеЗадачи 	 = УсловноеОформление.Элементы.Добавить();
	Отбор 				 = ОформлениеЗадачи.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование  = ИСТИНА;
	Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.ЦветДляЗадачиЧисло");
	Отбор.ПравоеЗначение = 1;
	
	ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи);
	ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.узЦветЧерный);	
	ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.узКанбанДоскаЦветБелый);	
	
	// 2 - красный цвет;
	ОформлениеЗадачи 	 = УсловноеОформление.Элементы.Добавить();
	Отбор 				 = ОформлениеЗадачи.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование  = ИСТИНА;
	Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.ЦветДляЗадачиЧисло");
	Отбор.ПравоеЗначение = 2;
	
	ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи);
	ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.узКанбанДоскаЦветКрасноРозовый);
	
	// 3 - желтый цвет;
	ОформлениеЗадачи 	 = УсловноеОформление.Элементы.Добавить();
	Отбор 				 = ОформлениеЗадачи.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование  = ИСТИНА;
	Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.ЦветДляЗадачиЧисло");
	Отбор.ПравоеЗначение = 3;
	
	ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи);
	ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.узКанбанДоскаЦветЖелтый);
	
	// 4 - зеленый цвет;
	ОформлениеЗадачи 	 = УсловноеОформление.Элементы.Добавить();
	Отбор 				 = ОформлениеЗадачи.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование  = ИСТИНА;
	Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.ЦветДляЗадачиЧисло");
	Отбор.ПравоеЗначение = 4;
	
	ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи);
	ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.узКанбанДоскаЦветЗеленый);
	
	// 10 - салатовый цвет;	
	ОформлениеЗадачи 	 = УсловноеОформление.Элементы.Добавить();
	Отбор 				 = ОформлениеЗадачи.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование  = ИСТИНА;
	Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.ЦветДляЗадачиЧисло");
	Отбор.ПравоеЗначение = 10;
	
	ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи);
	ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.узКанбанДоскаЦветСветлоЗеленый);
	
	//ОформлениеЗадачи 			 = УсловноеОформление.Элементы.Добавить();
	//ОтборГруппа 				 = ОформлениеЗадачи.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	//ОтборГруппа.ТипГруппы 		 = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	//
	//ОтборЭлементы 				 = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлементы.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлементы.Использование  = ИСТИНА;
	//ОтборЭлементы.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.ВажностьЧисло");
	//ОтборЭлементы.ПравоеЗначение = 2;
	//
	//ОтборЭлементы 				= ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлементы.ВидСравнения 	= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	//ОтборЭлементы.Использование = ИСТИНА;
	//ОтборЭлементы.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.ВажностьЧисло");
	//
	//ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи);
	//ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(153,204,0));
	//
	//ОформлениеЗадачи 	 = УсловноеОформление.Элементы.Добавить();
	//Отбор 				 = ОформлениеЗадачи.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	//Отбор.Использование  = ИСТИНА;
	//Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.ВажностьЧисло");
	//Отбор.ПравоеЗначение = 3;
	//
	//ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи);
	//ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(207,238,0));
	
	//} ***** Установка цвета от Важности задачи *****
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи)
	Для Каждого ТекЭлементФормы Из Элементы Цикл
		Если ТипЗнч(ТекЭлементФормы) = Тип("ТаблицаФормы") И ТекЭлементФормы.ПутьКДанным = "Объект.ТЧЗадачи" Тогда
			ИмяТЧЗадачи = ТекЭлементФормы.Имя;
			
			Если ТекЭлементФормы.Имя <> ИмяТЧЗадачи Тогда
				Продолжить;
			КонецЕсли; 
			
			Поля 			   = ОформлениеЗадачи.Поля.Элементы.Добавить();
			Поля.Использование = ИСТИНА;
			Поля.Поле 		   = Новый ПолеКомпоновкиДанных(ИмяТЧЗадачи + "_ВерхняяЧасть_НомерЗадачиПредставление");
			
			//ТЧЗадачи_ВерхняяЧасть_НомерЗадачиПредставление_В_процессе_выполнения
			//Элементы.В_процессе_выполнения_ТЧЗадачи_ВерхняяЧасть_НомерЗадачиПредставление_
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьЗаполнениеЦвета(ТекЦвет)
	Если ТекЦвет = Неопределено ИЛИ ТекЦвет = ЦветаСтиляБезЦвета() Тогда
		Возврат ЛОЖЬ;
	Иначе
		Возврат ИСТИНА;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ЦветаСтиляБезЦвета()
	Возврат узОбщийМодульСервер.ЦветаСтиляБезЦвета();	
КонецФункции 

&НаСервере
Функция ПолучитьПриоритетныйЦветЗадачиНаСервере(СтрокаЗадача)
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого ВидПриоритета Из ПолучитьМассивПриоритетовЦветаЗадач() Цикл
		ТекЦвет 	 = ПолучитьЦветЗадачиПоВидуПриоритета(СтрокаЗадача, ВидПриоритета);
		ЦветЗаполнен = ПроверитьЗаполнениеЦвета(ТекЦвет);
		Если ЦветЗаполнен Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ТекЦвет;
КонецФункции

&НаСервере
Функция ПолучитьЦветЗадачиПоВидуПриоритета(СтрокаЗадача, ВидПриоритета)
	НужныйЦвет  = Неопределено;
	Задача 		= СтрокаЗадача.Задача;
				 
	пВидыПриоритетаЦвета = ВидыПриоритетаЦвета();
	
	Если ВидПриоритета = пВидыПриоритетаЦвета.Задача Тогда
		Если СтрокаЗадача.ИзмененЦветПоУмолчанию Тогда
			НужныйЦвет = Задача.ЦветЗадачи.Получить();
		Конецесли;
	ИначеЕсли ВидПриоритета = пВидыПриоритетаЦвета.Спринт Тогда 	
		НужныйЦвет = СтрокаЗадача.Спринт.ЦветСпринта.Получить();
	ИначеЕсли ВидПриоритета = пВидыПриоритетаЦвета.ОсновнаяЗадача Тогда 			
		Если Задача.ОсновнаяЗадача.ИзмененЦветПоУмолчанию Тогда
			НужныйЦвет = Задача.ОсновнаяЗадача.ЦветЗадачи.Получить();
		КонецЕсли;
	ИначеЕсли ВидПриоритета = пВидыПриоритетаЦвета.Важность Тогда 	
		НужныйЦвет = Задача.Важность.ЦветВажности.Получить();
	КонецЕсли; 
	
	Возврат НужныйЦвет;
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивПриоритетовЦветаЗадач()
	Приоритеты = Новый Массив;
	Приоритеты.Добавить(ВидыПриоритетаЦвета().Задача);
	Приоритеты.Добавить(ВидыПриоритетаЦвета().Спринт);
	Приоритеты.Добавить(ВидыПриоритетаЦвета().ОсновнаяЗадача);
	Приоритеты.Добавить(ВидыПриоритетаЦвета().Важность);
	
	Возврат Новый ФиксированныйМассив(Приоритеты);
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ВидыПриоритетаЦвета()
	Виды = Новый Структура();
	Виды.Вставить("Важность"	  , "Важность");
	Виды.Вставить("ОсновнаяЗадача", "ОсновнаяЗадача");
	Виды.Вставить("Спринт"		  , "Спринт");
	Виды.Вставить("Задача"		  , "Задача");
	
	Возврат Новый ФиксированнаяСтруктура(Виды);
КонецФункции 

//+ #108 Дзеса Ігор (capitoshko) 04.10.2018 
&НаКлиенте
Процедура ПоказыватьЗаказчикаПриИзменении(Элемент)
	СгенирироватьФормуЗаново = Истина;
КонецПроцедуры

&НаСервере
Процедура УбратьЗадачуИзСпринта(пЗадачаСсылка,ТЗТекущиеСпринтыДляЗадач,МассивСообщений)
	
	НомерЗадачи = Формат(пЗадачаСсылка.Код,"ЧГ=0");
	
	ПараметрыОтбора=Новый Структура();
	ПараметрыОтбора.Вставить("Задача",пЗадачаСсылка);
	НайденныеСтрокиТЗТекущиеСпринтыДляЗадач = ТЗТекущиеСпринтыДляЗадач.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтрокиТЗТекущиеСпринтыДляЗадач.Количество() = 0 Тогда
		МассивСообщений.Добавить("Не указана в спринте"
			+" задача [#"+НомерЗадачи+" "+пЗадачаСсылка+"]");
		Возврат;
	Конецесли;
	
	Для каждого СтрокаТЗТекущиеСпринтыДляЗадач из НайденныеСтрокиТЗТекущиеСпринтыДляЗадач цикл
		пСпринт = СтрокаТЗТекущиеСпринтыДляЗадач.Спринт;
		СпринтОбъект = пСпринт.ПолучитьОбъект();
		
		СтрокаСпринтТЧЗадачи = СпринтОбъект.ТЧЗадачи.Найти(пЗадачаСсылка,"Задача");	
		Если СтрокаСпринтТЧЗадачи = Неопределено Тогда
			МассивСообщений.Добавить("Не указана в спринте"
				+" задача [#"+НомерЗадачи+" "+пЗадачаСсылка+"]");
			Продолжить;
		Конецесли;
					
		СпринтОбъект.ТЧЗадачи.Удалить(СтрокаСпринтТЧЗадачи);		
		СпринтОбъект.Записать();
		
		МассивСообщений.Добавить("Убрана из спринта ["+пСпринт+"] "
			+" задача [#"+НомерЗадачи+" "+пЗадачаСсылка+"]");
		
	Конеццикла;
		
КонецПроцедуры 

&НаСервере
Процедура ДобавитьЗадачуВСпринт(пЗадачаСсылка,пСпринт,МассивСообщений)
	НомерЗадачи = Формат(пЗадачаСсылка.Код,"ЧГ=0");

	Если пСпринт.ТЧЗадачи.Найти(пЗадачаСсылка,"Задача") <> Неопределено Тогда
		
		МассивСообщений.Добавить("Уже указана в спринте ["+пСпринт+"] "
			+" задача [#"+НомерЗадачи+" "+пЗадачаСсылка+"]");
		
		Возврат;
	Конецесли;
		
	СпринтОбъект = пСпринт.ПолучитьОбъект();
	
	СтрокаТЧЗадачи = СпринтОбъект.ТЧЗадачи.Добавить();
	СтрокаТЧЗадачи.Задача = пЗадачаСсылка;
	
	СпринтОбъект.Записать();
	
	МассивСообщений.Добавить("Добавлена в спринт ["+пСпринт+"] "
		+" задача [#"+НомерЗадачи+" "+пЗадачаСсылка+"]");
	
КонецПроцедуры 


&НаКлиенте
Процедура Показывать3СтрокуВКарточкеЗадачиПриИзменении(Элемент)
	СгенирироватьФормуЗаново = Истина;
КонецПроцедуры

//ЬЬ+ pva 29-03-2023 добавляем вывод на форму последнего комментария
&НаКлиенте
Процедура Показывать4СтрокуВКарточкеЗадачиПриИзменении(Элемент)
	
	СгенирироватьФормуЗаново = Истина;
	
КонецПроцедуры

//ЬЬ+ pva 29-03-2023 добавляем вывод на форму последнего комментария
&НаКлиенте
Процедура ВысотаПоследнегоКомментарияПриИзменении(Элемент)
	
	СгенирироватьФормуЗаново = Истина;
	
КонецПроцедуры

// + #225 Урянский Д. 2020-07-06
&НаКлиенте
Процедура ОтображениеФайловЗадачПриИзменении(Элемент)
	СгенирироватьФормуЗаново = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеПисемПоЗадачамПриИзменении(Элемент)
	СгенирироватьФормуЗаново = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеЧеклистаЗадачПриИзменении(Элемент)
	СгенирироватьФормуЗаново = Истина;
КонецПроцедуры

//- #108 Дзеса Ігор (capitoshko) 04.10.2018
#КонецОбласти

#Область Варианты

// [+] #283 Мальков М.В. 2023-01-30
&НаКлиенте
Процедура ЗагрузитьВариантНаКлиенте()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОсновнойКлючВарианта", ПолучитьКлючНастроек());
	ПараметрыОткрытия.Вставить("ТекущийКлючВарианта", ТекущийКлючНастроек);
	
	ОткрытьФорму("Обработка.узКанбанДоска.Форма.ФормаЗагрузкиВарианта", 
		ПараметрыОткрытия, ЭтотОбъект, , , , 
		Новый ОписаниеОповещения("ЗагрузитьВариантНаКлиентеЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

// [+] #283 Мальков М.В. 2023-01-30
&НаКлиенте
Процедура ЗагрузитьВариантНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда 
		
		пНастройкиКомпоновщика 		= Неопределено;
		СгенирироватьФормуЗаново 	= Истина;
		ТекущийКлючНастроек 		= Результат;
		
		ЗагрузитьСохраненныеНастройки(Результат, пНастройкиКомпоновщика);
		
		ОбновитьЗаголовокФормыНаКлиенте(Результат);
		ОпределитьОтборНаСервере(пНастройкиКомпоновщика);
		КомандаОбновить(Неопределено);
		
	КонецЕсли;
	
	// [+] #345 Павлюков С.Ю. 2024-10-28 
	ОбновитьКнопкиВариантов();
	// [-] #345 Павлюков С.Ю. 2024-10-28

КонецПроцедуры      

// [+] #283 Мальков М.В. 2023-01-30
&НаКлиенте
Процедура СохранитьВариантКакНаКлиенте()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОсновнойКлючВарианта", ПолучитьКлючНастроек());
	ПараметрыОткрытия.Вставить("ТекущийКлючВарианта", ТекущийКлючНастроек);
	
	ОткрытьФорму("Обработка.узКанбанДоска.Форма.ФормаСохраненияВарианта", 
		ПараметрыОткрытия, ЭтотОбъект, , , , 
		Новый ОписаниеОповещения("СохранитьВариантКакНаКлиентеЗавершение", ЭтотОбъект),  
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

// [+] #283 Мальков М.В. 2023-01-30
&НаКлиенте
Процедура СохранитьВариантКакНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда 
		
		ОсновнойКлюч = ПолучитьКлючНастроек();
		
		Ключ = "";
		
		Если Результат.Ключ = ОсновнойКлюч Тогда 
			Ключ = Результат.Ключ;
		Иначе 
			Ключ = ОсновнойКлюч + "." + Результат.Представление;
		КонецЕсли;
		
		ТекущийКлючНастроек = Ключ; 
		СохранитьНастройки(Ключ);
		ОбновитьЗаголовокФормыНаКлиенте(Ключ);
		
	КонецЕсли; 
	
	// [+] #345 Павлюков С.Ю. 2024-10-28 
	ОбновитьКнопкиВариантов();
	// [-] #345 Павлюков С.Ю. 2024-10-28

КонецПроцедуры

// [+] #283 Мальков М.В. 2023-01-30
&НаКлиенте
Процедура СохранитьВариантНаКлиенте()
	
	Если Не ЗначениеЗаполнено(ТекущийКлючНастроек) Тогда 
		СохранитьВариантКакНаКлиенте();	
	Иначе 
		СохранитьНастройки(ТекущийКлючНастроек);
	КонецЕсли;
	
КонецПроцедуры          

// [+] #283 Мальков М.В. 2023-01-30
&НаСервере
Процедура СохранитьТекущийВариантВсемНаСервере()
	
	Отказ = Ложь;
	
	Если ТекущийКлючНастроек = ПолучитьКлючНастроек() Тогда 
		Отказ = Истина;
		Сообщить("Выбрана основная настройка");
	КонецЕсли;
	
	Если Не Отказ Тогда 
		
		МассивПользователей = ПолучитьМассивАктивныхПользователей();
		
		Для Каждого Пользователь Из МассивПользователей Цикл 
			СохранитьНастройки(ТекущийКлючНастроек, Пользователь);		
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// [+] #283 Мальков М.В. 2023-01-30
&НаКлиенте
Процедура ОбновитьЗаголовокФормыНаКлиенте(Вариант)
	
	ИмяВарианта = ПолучитьИмяВариантаНаКлиенте(Вариант);
	
	АвтоЗаголовок = Ложь;

	ТекстЗаголовока = НСтр("ru = 'Канбан доска: %1 '");
	ТекстЗаголовока = СтрШаблон(ТекстЗаголовока, ИмяВарианта);
	
	Заголовок = ТекстЗаголовока;
	
КонецПроцедуры

#КонецОбласти

#Область Общее
	
// [+] #283 Мальков М.В. 2023-01-30	
&НаСервере
Функция ПолучитьМассивАктивныхПользователей()
	
	Массив = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	НЕ Пользователи.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Массив.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат Массив
	
КонецФункции

// [+] #283 Мальков М.В. 2023-01-30
&НаКлиенте
Функция ПолучитьИмяВариантаНаКлиенте(Вариант)
	
	ИмяВарианта = СтрЗаменить(Вариант, "Обработка.узКанбанДоска", "");	
	ИмяВарианта = СтрЗаменить(ИмяВарианта, ".", "");	
	ИмяВарианта = ?(ИмяВарианта = "", "Основной", ИмяВарианта);
	
	Возврат ИмяВарианта
	
КонецФункции

#КонецОбласти
// [-] #283 Мальков М.В. 2023-01-30

