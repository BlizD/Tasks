&НаКлиенте
Перем ПараметрыАдминистрирования;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		Возврат; // Отказ устанавливается в ПриОткрытии().
	КонецЕсли;
	
	СтандартныеПодсистемыСервер.УстановитьОтображениеЗаголовковГрупп(ЭтотОбъект);
	
	ЗаписьЖурналаРегистрации(ОбновлениеКонфигурации.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Открытие помощника обновления конфигурации...'"));
	ОбновлениеКонфигурации.ПрерватьВыполнениеЕслиАвторизованВнешнийПользователь();
	
	// Установка признака выполнения обновления по завершении помощника.
	ВыполнитьОбновление = Ложь;
	
	// Если это первый запуск после обновления конфигурации, то запоминаем и сбрасываем статус.
	Объект.РезультатОбновления = ОбновлениеКонфигурации.ОбновлениеКонфигурацииУспешно(КаталогСкрипта);
	Если Объект.РезультатОбновления <> Неопределено Тогда
		ОбновлениеКонфигурации.СброситьСтатусОбновленияКонфигурации();
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		Элементы.ПанельПочта.Видимость = Ложь;
	КонецЕсли;
	
	// Проверяем каждый раз при открытии помощника.
	КонфигурацияИзменена = КонфигурацияИзменена();
	
	Если Параметры.ЗавершениеРаботыСистемы Тогда
		Элементы.ПереключательОбновленияФайл.Видимость = Ложь;
		Элементы.ПереключательОбновленияСервер.Видимость = Ложь;
		Элементы.ГруппаДатаОбновления.Видимость = Ложь;
		Элементы.НадписьНажмитеДалее.Видимость = Истина;
	КонецЕсли;
	
	Если Параметры.ПолученоОбновлениеКонфигурации Тогда
		
		Элементы.СтраницыСпособОбновленияФайл.ТекущаяСтраница = Элементы.СтраницаПолученоОбновлениеИзПриложенияФайл;
		
	КонецЕсли;
	
	Элементы.НадписьОбновлениеКонфигурацииВыполняетсяПриОбменеДаннымиСГлавнымУзлом.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Элементы.НадписьОбновлениеКонфигурацииВыполняетсяПриОбменеДаннымиСГлавнымУзлом.Заголовок, ПланыОбмена.ГлавныйУзел());
	
	ПараметрыАутентификации = СтандартныеПодсистемыСервер.ПараметрыАутентификацииНаСайте();
	
	УстановитьПривилегированныйРежим(Истина);
	УстановленыРасширения = РасширенияКонфигурации.Получить().Количество() > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ВозможенЗапускОбновления() Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ВосстановитьНастройкиОбновленияКонфигурации();
	
	Если Параметры.ВыполнитьОбновление Тогда
		
		ПерейтиКВыборуРежимаОбновления();
		Возврат;
		
	КонецЕсли;
	
	Страницы = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	ИмяСтраницы = Страницы.ДоброПожаловать.Имя;
	
	ДоступноеОбновление = ОбновлениеКонфигурацииКлиент.ПолучитьДоступноеОбновлениеКонфигурации();
	// Если есть обновление в сети Интернет...
	Если ДоступноеОбновление.ИсточникОбновления = 0 И ДоступноеОбновление.ФлагАвтоПереходаНаСтраницуСОбновлением Тогда
		ВремяПолученияОбновления = ДоступноеОбновление.ВремяПолученияОбновления;
		Если ВремяПолученияОбновления <> Неопределено И ОбщегоНазначенияКлиент.ДатаСеанса() - ВремяПолученияОбновления < 30 Тогда
			ИмяСтраницы = ПолучитьФайлыОбновленияЧерезИнтернет(Истина);
		КонецЕсли;
	// Если конфигурация изменена, предложим применить ее к базе данных.
	ИначеЕсли ДоступноеОбновление.ИсточникОбновления = 2 И ДоступноеОбновление.НуженФайлОбновления = 0 
		И ДоступноеОбновление.ФлагАвтоПереходаНаСтраницуСОбновлением Тогда
		ИмяСтраницы = Страницы.ФайлОбновления.Имя;
	КонецЕсли;
	
	Если Объект.КодЗадачиПланировщика <> 0 И Не СуществуетЗадачаПланировщика(Объект.КодЗадачиПланировщика) Тогда
		Объект.КодЗадачиПланировщика = 0;
	КонецЕсли;
	
	// Если форма открывается при запуске программы после обновления.
	Если Объект.РезультатОбновления <> Неопределено Тогда	
		
		ИмяФайлаПорядокОбновления = ПолучитьИмяЛокальногоФайлаПорядкаОбновления();
		Если НЕ ФайлСуществуетНаКлиенте(ИмяФайлаПорядокОбновления) Тогда
			ИмяФайлаПорядокОбновления = "";
		КонецЕсли; 
		
		ИмяФайлаИнформацияОбОбновлении	= ПолучитьИмяЛокальногоФайлаОписанияОбновления();
		Если НЕ ФайлСуществуетНаКлиенте(ИмяФайлаИнформацияОбОбновлении) Тогда
			ИмяФайлаИнформацияОбОбновлении = "";
		КонецЕсли; 
		
		Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
			
			Если ПустаяСтрока(КаталогСкрипта) Тогда
				Отказ = Истина;
				Возврат;
			Иначе
				ПрочитатьДанныеВЖурналРегистрации();
			КонецЕсли;
			
		КонецЕсли;
		
		ИмяСтраницы = ? (Объект.РезультатОбновления, Страницы.УспешноеОбновление.Имя, Страницы.НеуспешноеОбновление.Имя);
		Объект.РезультатОбновления = Неопределено;
		
	Иначе
		
		КонфигурацияГотоваКОбновлению = Истина;
		ОбновлениеКонфигурацииКлиентПереопределяемый.ПриОпределенииГотовностиКОбновлениюКонфигурации(
			КонфигурацияГотоваКОбновлению);
		
		Если Не КонфигурацияГотоваКОбновлению Тогда
			ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Информация",
				НСтр("ru = 'Конфигурация не может быть обновлена. Завершение проверки обновления.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
		
		Если Объект.КодЗадачиПланировщика <> 0 Тогда
			ПараметрОтказа	= Ложь; // Не используется в этом случае.
			ИмяСтраницы		= ВосстановитьРезультатыПредыдущегоЗапуска(ПараметрОтказа);
		ИначеЕсли КонфигурацияИзменена И Объект.ИсточникОбновления = 2 Тогда
			Объект.НуженФайлОбновления = 0;
			ИмяСтраницы = Страницы.ФайлОбновления.Имя;
		КонецЕсли;
		
		Если Не СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоГлавныйУзел Тогда
			Если КонфигурацияИзменена Тогда
				ПерейтиКВыборуРежимаОбновления();
				Возврат;
			Иначе
				ИмяСтраницы = Страницы.ОбновленияНеОбнаружено.Имя;
			КонецЕсли;
		КонецЕсли
		
	КонецЕсли;
	
	Если ИмяСтраницы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПередОткрытиемСтраницы(Страницы[ИмяСтраницы]);
	Элементы.СтраницыПомощника.ТекущаяСтраница = Страницы[ИмяСтраницы];
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Обработка.ПоискИУстановкаОбновлений.Форма.НастройкаРасписания") Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
		ПередОткрытиемСтраницы();
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Обработка.АктивныеПользователи.Форма.АктивныеПользователи") Тогда
		
		ПередОткрытиемСтраницы();
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Обработка.ПоискИУстановкаОбновлений.Форма.НастройкаРезервнойКопии") Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
		ПередОткрытиемСтраницы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЛегальностьПолученияОбновлений" И Не Параметр Тогда
		
		ОтработатьНажатиеКнопкиНазад();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ДоступноеОбновление = ОбновлениеКонфигурацииКлиент.ПолучитьДоступноеОбновлениеКонфигурации();
	Если ДоступноеОбновление.ИсточникОбновления <> -1 Тогда
		ДоступноеОбновление.ФлагАвтоПереходаНаСтраницуСОбновлением = Ложь;
	КонецЕсли;
	
	// Сохранение настроек обновления.
	СохранитьНастройкиОбновленияКонфигурации();
	
	// Выполнение обновления конфигурации.
	Если ВыполнитьОбновление Тогда
		ВыполнитьОбновлениеКонфигурации();
	КонецЕсли;
	
	// запись событий ЖР
	ЖурналРегистрацииВызовСервера.ЗаписатьСобытияВЖурналРегистрации(ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"]);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// Страница ДоброПожаловать

&НаКлиенте
Процедура ИсточникОбновленияПриИзменении(Элемент)
	ПередОткрытиемСтраницы();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница ПодключениеКИнтернет

&НаКлиенте
Процедура НадписьПерейтиВЖурналРегистрацииНажатие(Элемент)
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", Новый Структура("Пользователь", ИмяПользователя()));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница ПодключениеКСайту

&НаКлиенте
Процедура НадписьИнформацияОПолученииДоступаНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке(
		ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления().АдресСтраницыИнформацииОПолученииДоступаКПользовательскомуСайту);
		
КонецПроцедуры

&НаКлиенте
Процедура НадписьКакОформитьПодпискуИТСНажатие(Элемент)
	ОбновлениеКонфигурацииКлиент.ОткрытьВебСтраницу("http://its.1c.ru/about.php?section=how");
КонецПроцедуры

&НаКлиенте
Процедура НадписьОткрытьЖурналРегистрацииНажатие(Элемент)
	
	СписокПриложений = Новый Массив;
	СписокПриложений.Добавить("COMConnection");
	СписокПриложений.Добавить("Designer");
	СписокПриложений.Добавить("1CV8");
	СписокПриложений.Добавить("1CV8C");
	
	ОтборЖурналаРегистрации = Новый Структура;
	ОтборЖурналаРегистрации.Вставить("Пользователь", ИмяПользователя());
	ОтборЖурналаРегистрации.Вставить("ИмяПриложения", СписокПриложений);
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ОтборЖурналаРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПодробнееОбИТСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбновлениеКонфигурацииКлиент.ОткрытьВебСтраницу("http://its.1c.ru/about.php");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница ФайлОбновления

&НаКлиенте
Процедура ПереключательНуженФайлОбновленияПриИзменении(Элемент)
	ПередОткрытиемСтраницы();
КонецПроцедуры

&НаКлиенте
Процедура ПолеФайлОбновленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Каталог = ПолучитьКаталогФайла(Элементы.ПолеФайлОбновления.ТекстРедактирования);
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.Фильтр = НСтр("ru = 'Все файлы поставки (*.cf*;*.cfu)|*.cf*;*.cfu|Файлы поставки конфигурации (*.cf)|*.cf|Файлы поставки обновления конфигурации(*.cfu)|*.cfu'");
	Диалог.Заголовок = НСтр("ru = 'Выбор поставки обновления конфигурации'");
	
	Если Диалог.Выбрать() Тогда
		Объект.ИмяФайлаОбновления = Диалог.ПолноеИмяФайла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбновитеПлатформуОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДоступноОбновлениеВерсииПлатформы = Ложь;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		МодульПолучениеОбновленийПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыКлиент");
		ДоступноОбновлениеВерсииПлатформы = МодульПолучениеОбновленийПрограммыКлиент.ДоступноИспользованиеПолученияОбновленийПлатформы();
	КонецЕсли;
	
	Если ДоступноОбновлениеВерсииПлатформы Тогда
		
		НоваяВерсияКонфигурации = ПолучитьСтруктуруДоступногоОбновления().Версия;
		
		ПараметрыАвторизации = Новый Структура;
		ПараметрыАвторизации.Вставить("Логин", Объект.КодПользователяСервераОбновлений);
		ПараметрыАвторизации.Вставить("Пароль", Объект.ПарольСервераОбновлений);
		
		МодульПолучениеОбновленийПрограммыКлиент.УстановитьОбновлениеПлатформы1СПредприятие(
			НоваяВерсияКонфигурации, ПараметрыАвторизации);
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИнструкцияДляСледующейРедакции", Истина);
		ОткрытьФорму("Обработка.НерекомендуемаяВерсияПлатформы.Форма.ПорядокОбновленияПлатформы", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница ДоступноеОбновление

&НаКлиенте
Процедура ДекорацияПорядокОбновленияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьПорядокОбновления();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница ВыборРежимаОбновленияФайл

&НаКлиенте
Процедура НадписьСписокДействийНажатие(Элемент)
	ПоказатьАктивныхПользователей();
КонецПроцедуры

&НаКлиенте
Процедура НадписьСписокДействий1Нажатие(Элемент)
	ПоказатьАктивныхПользователей();
КонецПроцедуры

&НаКлиенте
Процедура НадписьСписокДействий3Нажатие(Элемент)
	ПоказатьАктивныхПользователей();
КонецПроцедуры

&НаКлиенте
Процедура НадписьРезервнаяКопияНажатие(Элемент)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СоздаватьРезервнуюКопию",           Объект.СоздаватьРезервнуюКопию);
	ПараметрыФормы.Вставить("ИмяКаталогаРезервнойКопииИБ",       Объект.ИмяКаталогаРезервнойКопииИБ);
	ПараметрыФормы.Вставить("ВосстанавливатьИнформационнуюБазу", Объект.ВосстанавливатьИнформационнуюБазу);
	ОткрытьФорму("Обработка.ПоискИУстановкаОбновлений.Форма.НастройкаРезервнойКопии", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НадписьПорядокОбновленияФайлОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьПорядокОбновления();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница ВыборРежимаОбновленияСервер

&НаКлиенте
Процедура ПереключательОбновленияПриИзменении(Элемент)
	ПередОткрытиемСтраницы();
КонецПроцедуры

&НаКлиенте
Процедура ВыслатьОтчетНаПочтуПриИзменении(Элемент)
	ПередОткрытиемСтраницы();
КонецПроцедуры

&НаКлиенте
Процедура НадписьПорядокОбновленияСерверОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьПорядокОбновления();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОтложенныеОбработчикиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.РезультатыОбновленияПрограммы.Форма.ОтложенныеОбработчики");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КнопкаНазадНажатие(Команда)
	
	ОтработатьНажатиеКнопкиНазад();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалееНажатие(Команда)
	ФлагЗавершенияРаботы = Ложь;
	ОбработатьНажатиеКнопкиДалее(ФлагЗавершенияРаботы);
	Если ФлагЗавершенияРаботы Тогда
		ОбновлениеКонфигурацииКлиентПереопределяемый.ПередЗавершениемРаботыСистемы();
		ПараметрыПриложения.Вставить("СтандартныеПодсистемы.ПропуститьПредупреждениеПередЗавершениемРаботыСистемы", Истина);
		ЗавершитьРаботуСистемы(Ложь);
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыПроксиСервера(Команда)
	ОткрытьФорму("ОбщаяФорма.ПараметрыПроксиСервера", Новый Структура("НастройкаПроксиНаКлиенте", Истина), ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НовоеВВерсии(Команда)
	
	Если НЕ ПустаяСтрока(ИмяФайлаИнформацияОбОбновлении) Тогда
		ОбновлениеКонфигурацииКлиент.ОткрытьВебСтраницу(ИмяФайлаИнформацияОбОбновлении, НСтр("ru = 'Новое в версии'"));
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Информация об обновлении отсутствует.'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверка наличия активных соединений с информационной базой.
//
// Возвращаемое значение:
//  Булево       - Истина, если соединения есть,
//                 Ложь, если соединений нет.
&НаСервереБезКонтекста
Функция НаличиеАктивныхСоединений(СообщенияДляЖурналаРегистрации = Неопределено)
	// Запись накопленных событий ЖР.
	ЖурналРегистрации.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	Возврат СоединенияИБ.КоличествоСеансовИнформационнойБазы(Ложь, Ложь) > 1;
КонецФункции

&НаСервере
Функция ПолучитьТекстыМакетов(ИменаМакетов, СтруктураПараметров, СообщенияДляЖурналаРегистрации)
	// Запись накопленных событий ЖР.
	ЖурналРегистрации.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	Результат = Новый Массив();
	Результат.Добавить(ПолучитьТекстСкрипта(СтруктураПараметров));

	ИменаМакетовМассив = СтрРазделить(ИменаМакетов, ",");
	Для Каждого ИмяМакета Из ИменаМакетовМассив Цикл
		Результат.Добавить(Обработки.ПоискИУстановкаОбновлений.ПолучитьМакет(ИмяМакета).ПолучитьТекст());
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьТекстСкрипта(СтруктураПараметров)
	
	// Файл обновления конфигурации: main.js.
	ШаблонСкрипта = Обработки.ПоискИУстановкаОбновлений.ПолучитьМакет("МакетФайлаОбновленияКонфигурации");
	
	Скрипт = ШаблонСкрипта.ПолучитьОбласть("ОбластьПараметров");
	Скрипт.УдалитьСтроку(1);
	Скрипт.УдалитьСтроку(Скрипт.КоличествоСтрок());
	
	Текст = ШаблонСкрипта.ПолучитьОбласть("ОбластьОбновленияКонфигурации");
	Текст.УдалитьСтроку(1);
	Текст.УдалитьСтроку(Текст.КоличествоСтрок());
	
	Возврат ВставитьПараметрыСкрипта(Скрипт.ПолучитьТекст(), СтруктураПараметров) + Текст.ПолучитьТекст();
	
КонецФункции

&НаСервере
Функция ВставитьПараметрыСкрипта(Знач Текст, Знач СтруктураПараметров)
	
	Результат = Текст;
	
	Если Объект.СоздаватьРезервнуюКопию = 2 Тогда
		Объект.ВосстанавливатьИнформационнуюБазу = Истина;
	ИначеЕсли Объект.СоздаватьРезервнуюКопию = 0 Тогда
		Объект.ВосстанавливатьИнформационнуюБазу = Ложь;
	КонецЕсли;
	
	ИменаФайловОбновления = ИменаФайловОбновления();
	
	ПараметрыСкрипта = СтруктураПараметров.ПараметрыСкрипта;
	СтрокаСоединенияИнформационнойБазы = ПараметрыСкрипта.СтрокаСоединенияИнформационнойБазы + ПараметрыСкрипта.СтрокаПодключения;
	
	Если СтрЗаканчиваетсяНа(СтрокаСоединенияИнформационнойБазы, ";") Тогда
		СтрокаСоединенияИнформационнойБазы = Лев(СтрокаСоединенияИнформационнойБазы, СтрДлина(СтрокаСоединенияИнформационнойБазы) - 1);
	КонецЕсли;

	ИмяИсполняемогоФайлаКонфигуратора = СтруктураПараметров.КаталогПрограммы + СтруктураПараметров.ИмяИсполняемогоФайлаКонфигуратора;
	ИмяИсполняемогоФайлаКлиента       = СтруктураПараметров.КаталогПрограммы + СтруктураПараметров.ИмяИсполняемогоФайлаКлиента;
	
	// Определение пути к информационной базе.
	ПризнакФайловогоРежима = Неопределено;
	ПутьКИнформационнойБазе = СоединенияИБКлиентСервер.ПутьКИнформационнойБазе(ПризнакФайловогоРежима, СтруктураПараметров.ПараметрыАдминистрирования.ПортКластера);
	
	ПараметрПутиКИнформационнойБазе = ?(ПризнакФайловогоРежима, "/F", "/S") + ПутьКИнформационнойБазе; 
	СтрокаПутиКИнформационнойБазе	= ?(ПризнакФайловогоРежима, ПутьКИнформационнойБазе, "");
	БлокироватьСоединенияИБ = Не СтруктураПараметров.ИнформационнаяБазаФайловая Или РежимИмитацииКлиентСервернойИБ();
	
	Результат = СтрЗаменить(Результат, "[ИменаФайловОбновления]"             , ИменаФайловОбновления);
	Результат = СтрЗаменить(Результат, "[ИмяИсполняемогоФайлаКонфигуратора]" , Форматировать(ИмяИсполняемогоФайлаКонфигуратора));
	Результат = СтрЗаменить(Результат, "[ИмяИсполняемогоФайлаКлиента]"       , Форматировать(ИмяИсполняемогоФайлаКлиента));
	Результат = СтрЗаменить(Результат, "[ПараметрПутиКИнформационнойБазе]"   , Форматировать(ПараметрПутиКИнформационнойБазе));
	Результат = СтрЗаменить(Результат, "[СтрокаПутиКФайлуИнформационнойБазы]", Форматировать(ОбновлениеКонфигурацииКлиентСервер.ДобавитьКонечныйРазделительПути(СтрЗаменить(СтрокаПутиКИнформационнойБазе, """", "")) + "1Cv8.1CD"));
	Результат = СтрЗаменить(Результат, "[СтрокаСоединенияИнформационнойБазы]", Форматировать(СтрокаСоединенияИнформационнойБазы));
	Результат = СтрЗаменить(Результат, "[СобытиеЖурналаРегистрации]"         , Форматировать(СтруктураПараметров.СобытиеЖурналаРегистрации));
	Результат = СтрЗаменить(Результат, "[АдресЭлектроннойПочты]"             , Форматировать(?(Объект.РежимОбновления = 2 И Объект.ВыслатьОтчетНаПочту, Объект.АдресЭлектроннойПочты, "")));
	Результат = СтрЗаменить(Результат, "[ИмяАдминистратораОбновления]"       , Форматировать(ИмяПользователя()));
	Результат = СтрЗаменить(Результат, "[СоздаватьРезервнуюКопию]"           , ?(ПризнакФайловогоРежима И Объект.СоздаватьРезервнуюКопию <> 0, "true", "false"));
	Результат = СтрЗаменить(Результат, "[КаталогРезервнойКопии]"             , Форматировать(?(Объект.СоздаватьРезервнуюКопию = 2, ОбновлениеКонфигурацииКлиентСервер.ДобавитьКонечныйРазделительПути(Объект.ИмяКаталогаРезервнойКопииИБ), "")));
	Результат = СтрЗаменить(Результат, "[ВосстанавливатьИнформационнуюБазу]" , ?(Объект.ВосстанавливатьИнформационнуюБазу, "true", "false"));
	Результат = СтрЗаменить(Результат, "[БлокироватьСоединенияИБ]"           , ?(БлокироватьСоединенияИБ, "true", "false"));
	Результат = СтрЗаменить(Результат, "[ИмяCOMСоединителя]"                 , Форматировать(СтруктураПараметров.ИмяCOMСоединителя));
	Результат = СтрЗаменить(Результат, "[ИспользоватьCOMСоединитель]"        , ?(СтруктураПараметров.ИспользоватьCOMСоединитель, "false", "true"));
	Результат = СтрЗаменить(Результат, "[ЗапускСеансаПослеОбновления]"       , ?(Параметры.ЗавершениеРаботыСистемы, "false", "true"));
	Результат = СтрЗаменить(Результат, "[ВыполнятьСжатиеТаблицИБ]"           , ?(ОбщегоНазначения.ИнформационнаяБазаФайловая(), "true", "false"));
	Результат = СтрЗаменить(Результат, "[ВыполнитьОтложенныеОбработчики]"    , ?(ВыполнитьОтложенныеОбработчики(), "true", "false"));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция Форматировать(Знач Текст)
	
	Текст = СтрЗаменить(Текст, "\", "\\");
	Текст = СтрЗаменить(Текст, """", "\""");
	Текст = СтрЗаменить(Текст, "'", "\'");
	
	Возврат "'" + Текст + "'";
	
КонецФункции

&НаСервере
Функция ИменаФайловОбновления()
	
	Если Не ПустаяСтрока(ИменаФайловОбновления)
		И Объект.ДоступныеОбновления.Количество() = 0
		И Не (Объект.ИсточникОбновления = 2 И Объект.НуженФайлОбновления = 0) Тогда
		
		Возврат ИменаФайловОбновления;
		
	КонецЕсли;
	
	ИменаФайловОбновления = "";
	Для Каждого Обновление Из Объект.ДоступныеОбновления Цикл
		ПрефиксФайлаОбновления = "";
		СледующийЭлемент = Объект.ДоступныеОбновления.Индекс(Обновление) + 1;
		Если СледующийЭлемент <> Объект.ДоступныеОбновления.Количество() Тогда
			МинимальнаяВерсия = Объект.ДоступныеОбновления[СледующийЭлемент].МинимальнаяВерсия;
			Если МинимальнаяВерсия = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(Обновление.Версия) Тогда
				ПрефиксФайлаОбновления = "+";
			КонецЕсли;
		КонецЕсли;
		ИменаФайловОбновления = ИменаФайловОбновления + Форматировать(ПрефиксФайлаОбновления + Обновление.ПутьКЛокальномуФайлуОбновления) + ",";
	КонецЦикла;
	
	Если СтрДлина(ИменаФайловОбновления) > 0 Тогда
		ИменаФайловОбновления = Лев(ИменаФайловОбновления, СтрДлина(ИменаФайловОбновления) - 1);
	КонецЕсли;
	ИменаФайловОбновления = "[" + ИменаФайловОбновления + "]";
	
	Возврат ИменаФайловОбновления;
	
КонецФункции

&НаСервереБезКонтекста
Процедура НоваяСтрокаТаблицыОбновленийКонфигурации(ТаблицаОбновленийКонфигурации, Обновление)
	
	НоваяСтрока = ТаблицаОбновленийКонфигурации.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Обновление);
	НомерВерсии = СтрРазделить(Обновление.Версия, ".");
	НоваяСтрока.Версия1Разряд = Число(НомерВерсии[0]);
	НоваяСтрока.Версия2Разряд = Число(НомерВерсии[1]);
	НоваяСтрока.Версия3Разряд = Число(НомерВерсии[2]);
	НоваяСтрока.Версия4Разряд = Число(НомерВерсии[3]);
	
	ПутьФайла = СтрРазделить(СтрЗаменить(Обновление.ПутьКФайлуОбновления, "\", "/"), "/");
	Если ПутьФайла.Количество() > 0 Тогда
    	НоваяСтрока.ФайлОбновления = ПутьФайла[ПутьФайла.Количество() - 1];
	КонецЕсли;
	
КонецПроцедуры

// Получить список всех инкрементальных обновлений по списку шаблонов, 
// последовательная установка которых обновит версию ВерсияОт до версии ВерсияДо.
//
// Параметры:
//  ВерсияОт  - строка - исходная версия.
//  ВерсияДо  - строка - конечная версия, до которой конфигурация 
// 					     обновляется с исходной.
//
// Возвращаемое значение:
//   Массив   - массив строк ТаблицаЗначений.
&НаСервере
Процедура ПолучитьДоступныеОбновленияВИнтервале(Знач ВерсияОт, Знач ВерсияДо, АдресФайлаВоВремХранилище, 
	СообщенияДляЖурналаРегистрации) 

	// Запись накопленных событий ЖР.
	ЖурналРегистрации.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	ТаблицаОбновлений = Неопределено;
	ВыполнитьЗагрузкуСпискаОбновлений(АдресФайлаВоВремХранилище, ТаблицаОбновлений);
	
	Если ТаблицаОбновлений = Неопределено Тогда // ошибки при чтении файла
		Возврат;
	КонецЕсли;
	
	ТаблицаОбновленийКонфигурации = Объект.ДоступныеОбновления.Выгрузить();
	ТаблицаОбновленийКонфигурации.Очистить();
	
	ТаблицаДоступныхОбновленийКонфигурации = ТаблицаОбновленийКонфигурации.Скопировать();
	
	Для Каждого Обновление Из ТаблицаОбновлений Цикл
		НоваяСтрокаТаблицыОбновленийКонфигурации(ТаблицаОбновленийКонфигурации, Обновление);
	КонецЦикла;
	
	ТаблицаОбновленийКонфигурации.Сортировать("Версия1Разряд Убыв,
		|Версия2Разряд Убыв,
		|Версия3Разряд Убыв,
		|Версия4Разряд Убыв");
	
	ТекущаяВерсияОт = ВерсияОт;
	Пока ТекущаяВерсияОт <> ВерсияДо Цикл
	
		Отбор = Новый Структура("ВерсияДляОбновления", ТекущаяВерсияОт);
		МассивДоступныхОбновлений = ТаблицаОбновленийКонфигурации.НайтиСтроки(Отбор);

		Для Каждого Обновление Из МассивДоступныхОбновлений Цикл
			НоваяСтрокаТаблицыОбновленийКонфигурации(ТаблицаДоступныхОбновленийКонфигурации, Обновление);
		КонецЦикла;

		ТаблицаДоступныхОбновленийКонфигурации.Сортировать("Версия1Разряд Убыв,
			|Версия2Разряд Убыв,
			|Версия3Разряд Убыв,
			|Версия4Разряд Убыв");
														   
		Если ТаблицаДоступныхОбновленийКонфигурации.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Отбор							= Новый Структура("Версия", ТаблицаДоступныхОбновленийКонфигурации[0].Версия);
		МассивУжеНайденныхОбновлений	= Объект.ДоступныеОбновления.НайтиСтроки(Отбор);
		Если МассивУжеНайденныхОбновлений.Количество() = 0 Тогда
			// добавляем новое обновление
			НовоеДоступноеОбновление	= Объект.ДоступныеОбновления.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеДоступноеОбновление, ТаблицаДоступныхОбновленийКонфигурации[0]);
		ИначеЕсли ПустаяСтрока(МассивУжеНайденныхОбновлений[0].ПутьКЛокальномуФайлуОбновления) Тогда
			// Обновляем информацию в уже найденном обновлении.
			ЗаполнитьЗначенияСвойств(МассивУжеНайденныхОбновлений[0], ТаблицаДоступныхОбновленийКонфигурации[0]);
		КонецЕсли;
		НоваяТекущаяВерсияОт = ТаблицаДоступныхОбновленийКонфигурации[0].Версия;
		Если ТекущаяВерсияОт = НоваяТекущаяВерсияОт И НоваяТекущаяВерсияОт <> ВерсияДо Тогда
			ТаблицаДоступныхОбновленийКонфигурации.Очистить();
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Недоступно обновление на версию %1 с текущей версии %2'"), ВерсияДо, ВерсияОт);
		КонецЕсли;
		ТекущаяВерсияОт	= НоваяТекущаяВерсияОт;
	
	КонецЦикла;
	
КонецПроцедуры 

// Загрузка списка обновлений из файла XML.
&НаСервереБезКонтекста
Процедура ВыполнитьЗагрузкуСпискаОбновлений(Знач АдресФайлаЗагрузки, ТаблицаОбновлений = Неопределено)
	
	ПолныйПутьФайлаЗагрузки = АдресФайлаЗагрузки;
	Если ЭтоАдресВременногоХранилища(АдресФайлаЗагрузки) Тогда
		ПолныйПутьФайлаЗагрузки = СтрЗаменить(ПолучитьИмяВременногоФайла(), ".tmp", ".xml");
		ДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайлаЗагрузки);
		ДанныеФайла.Записать(ПолныйПутьФайлаЗагрузки);
	КонецЕсли;
	
	СообщениеОбОшибке = НСтр("ru = 'Ошибка при чтении файла списка обновлений'") + " " + ПолныйПутьФайлаЗагрузки;
	Если НЕ ФайлСуществуетНаСервере(ПолныйПутьФайлаЗагрузки) Тогда
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	
	ТаблицаОбновлений = Новый ТаблицаЗначений;
	// Основные колонки
	ТаблицаОбновлений.Колонки.Добавить("Конфигурация"			,ТипСтрока);
	ТаблицаОбновлений.Колонки.Добавить("Поставщик"				,ТипСтрока);
	ТаблицаОбновлений.Колонки.Добавить("Версия"					,ТипСтрока);
	ТаблицаОбновлений.Колонки.Добавить("ВерсияДляОбновления"	,ТипСтрока);
	ТаблицаОбновлений.Колонки.Добавить("ПутьКФайлуОбновления"	,ТипСтрока);
	ТаблицаОбновлений.Колонки.Добавить("НомерДискаИТС"			,ТипСтрока);
	ТаблицаОбновлений.Колонки.Добавить("ВерсияПлатформы"		,ТипСтрока);
	ТаблицаОбновлений.Колонки.Добавить("МинимальнаяВерсия"		,ТипСтрока);
	ТаблицаОбновлений.Колонки.Добавить("РазмерФайлаОбновления"	,ОбщегоНазначения.ОписаниеТипаЧисло(15, 0));
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПолныйПутьФайлаЗагрузки);
	ЧтениеXML.Прочитать();
	
	// Дата формирования файла.
	ЧтениеXML.Прочитать();
	ЧтениеXML.Прочитать();
	ДатаФормирования = ЧтениеXML.Значение;
	ЧтениеXML.Прочитать();
	
	// Читаем начало элемента Update или конец элемента UpdateList.
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = "v8u:updateList" Тогда
			Прервать;
		КонецЕсли;
		Поставщик				= "";
		Версия					= "";
		ПутьКФайлуОбновления	= "";
		НомерДискаИТС			= "";
		РазмерФайлаОбновления	= 0;
		Конфигурация			= СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СокрЛП(ЧтениеXML.ПолучитьАтрибут("configuration")));
		ВерсияПлатформы = Неопределено;
		МинимальнаяВерсия = "";
		
		// Читаем содержимое элемента update.
		МассивВерсийДляОбновления = Новый Массив;
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.Имя = "v8u:update" Тогда
				Прервать;
			КонецЕсли;
			Если ЧтениеXML.Имя = "v8u:vendor" Тогда
				ЧтениеXML.Прочитать();
				Поставщик = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СокрЛП(ЧтениеXML.Значение));
			ИначеЕсли ЧтениеXML.Имя = "v8u:version" Тогда
				ВерсияПлатформы = ЧтениеXML.ПолучитьАтрибут("platform");
				МинимальнаяВерсия = ЧтениеXML.ПолучитьАтрибут("minimal");
				ЧтениеXML.Прочитать();
				Версия = ЧтениеXML.Значение;
			ИначеЕсли ЧтениеXML.Имя = "v8u:file" Тогда
				ЧтениеXML.Прочитать();
				ПутьКФайлуОбновления = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СокрЛП(ЧтениеXML.Значение));
			ИначеЕсли ЧтениеXML.Имя = "v8u:size" Тогда
				ЧтениеXML.Прочитать();
				РазмерФайлаОбновления = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СокрЛП(ЧтениеXML.Значение));
			ИначеЕсли ЧтениеXML.Имя = "v8u:its" Тогда
				ЧтениеXML.Прочитать();
				НомерДискаИТС = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СокрЛП(ЧтениеXML.Значение));
			ИначеЕсли ЧтениеXML.Имя = "v8u:target" Тогда
				ЧтениеXML.Прочитать();
				МассивВерсийДляОбновления.Добавить(ЧтениеXML.Значение);
			КонецЕсли;
			
			ЧтениеXML.Прочитать();
		КонецЦикла;
		
		// Формируем таблицу обновлений.
		Для Каждого ВерсияДляОбновления Из МассивВерсийДляОбновления Цикл
			
			НоваяСтрока = ТаблицаОбновлений.Добавить();
			НоваяСтрока.Конфигурация			= Конфигурация;
			НоваяСтрока.Поставщик				= Поставщик;
			НоваяСтрока.Версия					= Версия;
			НоваяСтрока.ВерсияДляОбновления		= ВерсияДляОбновления;
			НоваяСтрока.ПутьКФайлуОбновления	= ПутьКФайлуОбновления;
			НоваяСтрока.НомерДискаИТС			= НомерДискаИТС;
			НоваяСтрока.РазмерФайлаОбновления	= РазмерФайлаОбновления;
			НоваяСтрока.ВерсияПлатформы			= ВерсияПлатформы;
			НоваяСтрока.МинимальнаяВерсия		= МинимальнаяВерсия;
			
		КонецЦикла;
		
	КонецЦикла;
	ЧтениеXML.Закрыть();
	
	Если ТаблицаОбновлений = Неопределено Тогда // ошибки при чтении файла
		ВызватьИсключение НСтр("ru = 'Ошибка при чтении файла'") + " " + ПолныйПутьФайлаЗагрузки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФайлСуществуетНаСервере(Знач ПутьКФайлу)
	Файл = Новый Файл(ПутьКФайлу);
	Возврат Файл.Существует();
КонецФункции

&НаСервереБезКонтекста
Функция РежимОтладкиСкрипта()
	Результат = Ложь;
	СтруктураНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбновлениеКонфигурации", 
		"НастройкиОбновленияКонфигурации");
	Если СтруктураНастройки <> Неопределено Тогда 
		СтруктураНастройки.Свойство("РежимОтладкиСкрипта", Результат);
	КонецЕсли;
	Возврат Результат = Истина;
КонецФункции	

&НаСервереБезКонтекста
Функция РежимИмитацииКлиентСервернойИБ()
	Результат = Ложь;
	СтруктураНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбновлениеКонфигурации", 
		"НастройкиОбновленияКонфигурации");
	Если СтруктураНастройки <> Неопределено Тогда 
		СтруктураНастройки.Свойство("РежимИмитацииКлиентСервернойИБ", Результат);
	КонецЕсли;
	Возврат Результат = Истина;
КонецФункции	

&НаКлиенте
Процедура СохранитьНастройкиОбновленияКонфигурации()
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	
	ИмяПараметра = "СтандартныеПодсистемы.НастройкиОбновленияКонфигурации";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Неопределено);
	КонецЕсли;
	Настройки = ОбновлениеКонфигурацииКлиентСервер.ПолучитьОбновленныеНастройкиОбновленияКонфигурации(ПараметрыПриложения[ИмяПараметра]);
	
	Настройки.КодПользователяСервераОбновлений = Объект.КодПользователяСервераОбновлений;
	Настройки.ПарольСервераОбновлений = ?(Объект.ЗапомнитьПарольСервераОбновлений, Объект.ПарольСервераОбновлений, "");
	Настройки.ЗапомнитьПарольСервераОбновлений = Объект.ЗапомнитьПарольСервераОбновлений;
	
	Настройки.ПроверятьНаличиеОбновленияПриЗапуске = Объект.ПроверятьНаличиеОбновленияПриЗапуске;
	Настройки.РасписаниеПроверкиНаличияОбновления = ОбщегоНазначенияКлиентСервер.РасписаниеВСтруктуру(Объект.РасписаниеПроверкиНаличияОбновления);
	Настройки.ИсточникОбновления = Объект.ИсточникОбновления;
	Настройки.РежимОбновления = Объект.РежимОбновления;
	Настройки.ДатаВремяОбновления = Объект.ДатаВремяОбновления;
	Настройки.ВыслатьОтчетНаПочту = Объект.ВыслатьОтчетНаПочту;
	Настройки.АдресЭлектроннойПочты = Объект.АдресЭлектроннойПочты;
	Настройки.КодЗадачиПланировщика = Объект.КодЗадачиПланировщика;
	Настройки.ПовторныйЗапуск = Объект.ПовторныйЗапуск;
	Настройки.ИмяФайлаОбновления = Объект.ИмяФайлаОбновления;
	Настройки.НуженФайлОбновления = Объект.НуженФайлОбновления;
	Настройки.ИменаФайловОбновления = ИменаФайловОбновления();
	
	Настройки.СоздаватьРезервнуюКопию = Объект.СоздаватьРезервнуюКопию;
	Настройки.ВосстанавливатьИнформационнуюБазу = Объект.ВосстанавливатьИнформационнуюБазу;
	Настройки.ИмяКаталогаРезервнойКопииИБ = Объект.ИмяКаталогаРезервнойКопииИБ;
	
	Настройки.АдресСервераДляПроверкиНаличияОбновления = ПараметрыРаботыКлиента.НастройкиОбновления.АдресСервераДляПроверкиНаличияОбновления;
	Настройки.КаталогОбновлений = ПараметрыРаботыКлиента.НастройкиОбновления.КаталогОбновлений;
	Настройки.КороткоеИмяКонфигурации = ПараметрыРаботыКлиента.НастройкиОбновления.КороткоеИмяКонфигурации;
	Настройки.АдресРесурсаДляПроверкиНаличияОбновления = ПараметрыРаботыКлиента.НастройкиОбновления.АдресРесурсаДляПроверкиНаличияОбновления;
	
	ОбновлениеКонфигурацииВызовСервера.ЗаписатьСтруктуруНастроекПомощника(
		ПараметрыПриложения["СтандартныеПодсистемы.НастройкиОбновленияКонфигурации"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиОбновленияКонфигурации()
	
	Объект.ВосстанавливатьИнформационнуюБазу = Истина;
	
	// Восстановление настроек
	ИмяПараметра = "СтандартныеПодсистемы.НастройкиОбновленияКонфигурации";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, ОбновлениеКонфигурацииВызовСервера.ПолучитьСтруктуруНастроекПомощника());
		ОбновлениеКонфигурацииКлиентСервер.ПолучитьОбновленныеНастройкиОбновленияКонфигурации(ПараметрыПриложения[ИмяПараметра]);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыПриложения[ИмяПараметра]);
	ИменаФайловОбновления = ПараметрыПриложения[ИмяПараметра].ИменаФайловОбновления;
	
	Если ПараметрыАутентификации <> Неопределено
		И Не ПустаяСтрока(ПараметрыАутентификации.Логин)
		И Не ПустаяСтрока(ПараметрыАутентификации.Пароль) Тогда
		
		Объект.КодПользователяСервераОбновлений = ПараметрыАутентификации.Логин;
		Объект.ПарольСервераОбновлений = ПараметрыАутентификации.Пароль;
		
	КонецЕсли;
	
	Объект.РасписаниеПроверкиНаличияОбновления = ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(Объект.РасписаниеПроверкиНаличияОбновления);
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	Если ПараметрыРаботыКлиента.ИнформационнаяБазаФайловая И Объект.РежимОбновления > 1 Тогда
		Объект.РежимОбновления = 0;
	КонецЕсли;
	
	Если КонфигурацияИзменена Тогда
		ПараметрыОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьДоступноеОбновлениеКонфигурации();
		ПараметрыОбновления.ИсточникОбновления = 2;  // Локальный или сетевой каталог.
		ПараметрыОбновления.НуженФайлОбновления = Ложь;
		ПараметрыОбновления.ФлагАвтоПереходаНаСтраницуСОбновлением = Истина;
	КонецЕсли;
	
	Если Параметры.ЗавершениеРаботыСистемы Тогда
		Объект.РежимОбновления = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередОткрытиемСтраницы(НоваяТекущаяСтраница = Неопределено)
	
	ИмяПараметра = "СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Новый СписокЗначений);
	КонецЕсли;
	
	Страницы = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	Если НоваяТекущаяСтраница = Неопределено Тогда
		НоваяТекущаяСтраница = Элементы.СтраницыПомощника.ТекущаяСтраница;
	КонецЕсли;
	
	ДоступностьКнопкиНазад = Истина;
	ДоступностьКнопкиДалее = Истина;
	ДоступностьКнопкиЗакрыть = Истина;
	ФункцияКнопкиДалее = Истина; // Истина = "Далее", Ложь = "Готово"
	ФункцияКнопкиЗакрыть = Истина; // Истина = "Отмена", Ложь = "Закрыть"
	
	Если НоваяТекущаяСтраница = Страницы.ДоброПожаловать Тогда
		ДоступностьКнопкиНазад = Ложь;
	ИначеЕсли НоваяТекущаяСтраница = Страницы.ПодключениеКСайту Тогда
		
		ВидимостьПанелиОшибкиПодключения = ? (ЗначениеЗаполнено(Объект.КодПользователяСервераОбновлений) 
			ИЛИ ЗначениеЗаполнено(Объект.ПарольСервераОбновлений), Истина, Ложь);
														
		Элементы.ПанельОшибкаПодключения.Видимость = ВидимостьПанелиОшибкиПодключения;
		Элементы.ПанельЖурналРегистрации.Видимость = ВидимостьПанелиОшибкиПодключения;
		Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
			Элементы.ГруппаДоступаНаСайт.ТекущаяСтраница = Элементы.ГруппаДоступаНаСайт.ПодчиненныеЭлементы.Базовая;
		КонецЕсли;
		
		Если Не ПустаяСтрока(Объект.ТехническаяИнформацияОбОшибке) Тогда
			Объект.ТехническаяИнформацияОбОшибке = НСтр("ru = 'Техническая информация об ошибке:'") + Символы.ПС + Объект.ТехническаяИнформацияОбОшибке;
		КонецЕсли;
		
	ИначеЕсли НоваяТекущаяСтраница = Страницы.ДоступноеОбновление Тогда
		
		СтруктураДоступногоОбновления = ПолучитьСтруктуруДоступногоОбновления(Истина);
		Если СтруктураДоступногоОбновления <> Неопределено Тогда
			Элементы.НовоеВВерсии.Видимость = Не ПустаяСтрока(ИмяФайлаИнформацияОбОбновлении);
			Элементы.НадписьДоступноеОбновление.Заголовок = СтруктураДоступногоОбновления.Версия;
			Элементы.НадписьРазмерОбновления.Заголовок = СтруктураДоступногоОбновления.РазмерОбновления;
			Элементы.ДекорацияПорядокОбновления.Видимость = Не ПустаяСтрока(ИмяФайлаПорядокОбновления);
			ТребуетсяОбновлениеПлатформы = ТребуетсяОбновлениеПлатформы(СтруктураДоступногоОбновления.ВерсияПлатформы);
			Если ДоступноОбновлениеДляСледующейРедакции Или ТребуетсяОбновлениеПлатформы Тогда
				
				ВерсияПлатформы = ?(ТребуетсяОбновлениеПлатформы, СтруктураДоступногоОбновления.ВерсияПлатформы,
					ОбновлениеКонфигурацииКлиент.СледующаяРедакцияПлатформы());
				ШаблонЗаголовка = НСтр("ru = 'Для обновления на эту версию требуется платформа 1С:Предприятие
				|не ниже версии <b>%1</b>. Необходимо <a href = ""КакОбновитьПлатформу"">перейти на новую версию платформы</a>,
				|после чего можно будет установить это обновление.'");
				СтрокаЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, СтруктураДоступногоОбновления.ВерсияПлатформы);
				Элементы.ДекорацияОбновитеПлатформу.Заголовок = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(СтрокаЗаголовка);
				
				Элементы.ДекорацияОбновитеПлатформу.Видимость = Истина;
				ДоступностьКнопкиДалее = Ложь;
				ДоступностьКнопкиЗакрыть = Истина;
			Иначе
				Элементы.ДекорацияОбновитеПлатформу.Видимость = Ложь;
				Элементы.ДекорацияПорядокОбновления.Высота = 2;
			КонецЕсли;
			
			Если ПустаяСтрока(ИмяФайлаПорядокОбновления) И Не (ДоступноОбновлениеДляСледующейРедакции Или ТребуетсяОбновлениеПлатформы) Тогда
				Элементы.ГруппаДополнительнаяИнформация.Видимость = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли НоваяТекущаяСтраница = Страницы.ОбновленияНеОбнаружено Тогда
		
		СтруктураДоступногоОбновления = ПолучитьСтруктуруДоступногоОбновления();
		ФункцияКнопкиДалее = Ложь;
		ФункцияКнопкиЗакрыть = Ложь;
		ДоступностьКнопкиДалее = Ложь;
		Элементы.НадписьОписаниеТекущейКонфигурации.Заголовок	= СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().СинонимКонфигурации;
		Элементы.НадписьВерсияТекущейКонфигурации.Заголовок		= СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ВерсияКонфигурации;
		Элементы.НадписьВерсияДляОбновления.Заголовок			= ?(ТипЗнч(СтруктураДоступногоОбновления) = Тип("Структура"), НСтр("ru = 'Доступная версия для обновления -'") + " " + СтруктураДоступногоОбновления.Версия, "");
		Элементы.НадписьВерсияДляОбновления.Видимость			= НЕ ПустаяСтрока(Элементы.НадписьВерсияДляОбновления.Заголовок);
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ВерсияКонфигурации,
			ПоследняяВерсияКонфигурации) >= 0
			Или СтруктураДоступногоОбновления <> Неопределено
			Или (Объект.ИсточникОбновления = 0 И Объект.ДоступныеОбновления.Количество() = 0) Тогда // это последняя версия.
			
			Элементы.ПанельИнформацияОбОбновлении.ТекущаяСтраница = Элементы.ПанельИнформацияОбОбновлении.ПодчиненныеЭлементы.ОбновлениеНеТребуется;
			Элементы.ГруппаОбновленияНеОбнаружено.Заголовок = НСтр("ru = 'Обновление не требуется'");
		ИначеЕсли СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ГлавныйУзел <> Неопределено Тогда
			Элементы.ПанельИнформацияОбОбновлении.ТекущаяСтраница = Элементы.ОбновлениеПроизводитсяВГлавномУзле;
			Элементы.ГруппаОбновленияНеОбнаружено.Заголовок = НСтр("ru = 'Обновление не требуется'");
		Иначе 
			Элементы.ПанельИнформацияОбОбновлении.ТекущаяСтраница = Элементы.ПанельИнформацияОбОбновлении.ПодчиненныеЭлементы.ОбновлениеНеОбнаружено;
			Элементы.ГруппаОбновленияНеОбнаружено.Заголовок = НСтр("ru = 'Обновления конфигурации не обнаружено'");
		КонецЕсли;
		
		Если Не СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоГлавныйУзел Тогда
			ДоступностьКнопкиНазад = Ложь;
		КонецЕсли;
		
	ИначеЕсли НоваяТекущаяСтраница = Страницы.ДлительнаяОперация Тогда
		
		ДоступностьКнопкиДалее = Ложь;
		ДоступностьКнопкиНазад = Ложь;
		ДоступностьКнопкиЗакрыть = Ложь;
		
	ИначеЕсли НоваяТекущаяСтраница = Страницы.ВыборРежимаОбновленияФайл Тогда
		
		ФункцияКнопкиДалее = (Объект.РежимОбновления = 0);// Если НЕ обновляем сейчас, то "готово".
		
		Элементы.ПорядокОбновленияФайл.Видимость = Не ПустаяСтрока(ИмяФайлаПорядокОбновления);
		
		СоединенияИнфо = СоединенияИБВызовСервера.ИнформацияОСоединениях(Ложь, ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"]);
		Элементы.ГруппаСоединений.Видимость = ?(СоединенияИнфо.НаличиеАктивныхСоединений, Истина, Ложь);
			
		Если СоединенияИнфо.НаличиеАктивныхСоединений Тогда
			ВсеСтраницы = Элементы.ПанельАктивныеПользователи.ПодчиненныеЭлементы;
			ДоступностьКнопкиДалее	= Истина;
			Если СоединенияИнфо.НаличиеCOMСоединений Тогда
				Элементы.ПанельАктивныеПользователи.ТекущаяСтраница = ВсеСтраницы.АктивныеСоединения;
			ИначеЕсли СоединенияИнфо.НаличиеСоединенияКонфигуратором Тогда
				Элементы.ПанельАктивныеПользователи.ТекущаяСтраница = ВсеСтраницы.СоединениеКонфигуратора;
			Иначе
				Элементы.ПанельАктивныеПользователи.ТекущаяСтраница = ВсеСтраницы.АктивныеПользователи;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.НадписьРезервнаяКопияФайл.Заголовок = ТекстНадписиРезервнойКопииИБ();
		
		Если Не СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоГлавныйУзел Тогда
			ДоступностьКнопкиНазад = Ложь;
		КонецЕсли;
	ИначеЕсли НоваяТекущаяСтраница = Страницы.ВыборРежимаОбновленияСервер Тогда
		
		Если Объект.КодЗадачиПланировщика = 0 И НЕ ДатаВремяОбновленияУстановлена Тогда
			Объект.ДатаВремяОбновления		= ВернутьДату(ОбновлениеКонфигурацииКлиентСервер.ДобавитьДни(
				НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()), 1), Объект.ДатаВремяОбновления);
			ДатаВремяОбновленияУстановлена	= Истина;
		КонецЕсли; 
		
		ФункцияКнопкиДалее = (Объект.РежимОбновления = 0);// Если не обновляем сейчас, то "готово".
		Объект.ВосстанавливатьИнформационнуюБазу = Ложь;
		
		ПараметрыСтраницы = ПараметрыСтраницыВыборРежимаОбновленияСервер(ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"]); // Вызов сервера
		
		Элементы.ПорядокОбновленияСервер.Видимость = Не ПустаяСтрока(ИмяФайлаПорядокОбновления);
		Элементы.НадписьОтложенныеОбработчики.Видимость = ПараметрыСтраницы.ЕстьОтложенныеОбработчики;
		
		СтраницыПанелиИнформацииПерезагрузки1						= Элементы.СтраницыИнформацииПерезагрузки1.ПодчиненныеЭлементы;
		Элементы.СтраницыИнформацииПерезагрузки1.ТекущаяСтраница	= ?(Объект.РежимОбновления = 0,
			СтраницыПанелиИнформацииПерезагрузки1.СтраницаПерезагрузкиСейчас1,
			СтраницыПанелиИнформацииПерезагрузки1.СтраницаЗапланированнойПерезагрузки);
		
		СоединенияИнфо = ПараметрыСтраницы.ИнформацияОСоединениях;
		НаличиеСоединений	= СоединенияИнфо.НаличиеАктивныхСоединений И ФункцияКнопкиДалее; 
		Элементы.ГруппаСоединений1.Видимость = НаличиеСоединений;
		Если НаличиеСоединений Тогда
			ВсеСтраницы = Элементы.ПанельАктивныеПользователи1.ПодчиненныеЭлементы;
			Элементы.ПанельАктивныеПользователи1.ТекущаяСтраница = ? (СоединенияИнфо.НаличиеCOMСоединений, 
				ВсеСтраницы.АктивныеСоединения1, ВсеСтраницы.АктивныеПользователи1);
		КонецЕсли;
			
		Элементы.ПолеДатаВремяОбновления.Доступность = (Объект.РежимОбновления = 2);
		Элементы.АдресЭлектроннойПочты.Доступность	= Объект.ВыслатьОтчетНаПочту;
		
		Если Не СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоГлавныйУзел Тогда
			ДоступностьКнопкиНазад = Ложь;
		КонецЕсли;
	ИначеЕсли НоваяТекущаяСтраница = Страницы.УспешноеОбновление Тогда
		
		ФункцияКнопкиДалее = Ложь;
		ДоступностьКнопкиНазад = Ложь;
		ДоступностьКнопкиЗакрыть = Ложь;
		
	ИначеЕсли НоваяТекущаяСтраница = Страницы.НеуспешноеОбновление Тогда
		
		ФункцияКнопкиДалее = Ложь;
		ДоступностьКнопкиЗакрыть = Ложь;
		
	ИначеЕсли НоваяТекущаяСтраница = Страницы.ФайлОбновления Тогда
		
		Если Объект.НуженФайлОбновления = 0 Тогда
			Если КонфигурацияИзменена Тогда
				Элементы.СтраницыНадписиИзмененнойКонфигурации.ТекущаяСтраница = Элементы.СтраницыНадписиИзмененнойКонфигурации.ПодчиненныеЭлементы.ЕстьИзменения;
			Иначе
				Элементы.СтраницыНадписиИзмененнойКонфигурации.ТекущаяСтраница = Элементы.СтраницыНадписиИзмененнойКонфигурации.ПодчиненныеЭлементы.НетИзменений;
				ДоступностьКнопкиДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		Элементы.ПанельОбновлениеИзОсновнойКонфигурации.Видимость	= Объект.НуженФайлОбновления = 0;
		Элементы.ПолеФайлОбновления.Доступность						= Объект.НуженФайлОбновления = 1;
		Элементы.ПолеФайлОбновления.АвтоОтметкаНезаполненного		= Объект.НуженФайлОбновления = 1;
		
	КонецЕсли;
	
	Если ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"].Количество() > 0 Тогда
		// На страницах с ошибками нужно зафиксировать журнал регистрации.
		ЖурналРегистрацииВызовСервера.ЗаписатьСобытияВЖурналРегистрации(ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"]);
	КонецЕсли;
	
	КнопкаДалее		= Элементы.КнопкаДалее;
	КнопкаНазад		= Элементы.КнопкаНазад;
	КнопкаЗакрыть	= Элементы.КнопкаЗакрыть;
	КнопкаНазад.Доступность		= ДоступностьКнопкиНазад;
	КнопкаДалее.Доступность		= ДоступностьКнопкиДалее;
	КнопкаЗакрыть.Доступность	= ДоступностьКнопкиЗакрыть;
	Если ДоступностьКнопкиДалее Тогда
		Если НЕ КнопкаДалее.КнопкаПоУмолчанию Тогда
			КнопкаДалее.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
	ИначеЕсли ДоступностьКнопкиЗакрыть Тогда
		Если НЕ КнопкаЗакрыть.КнопкаПоУмолчанию Тогда
			КнопкаЗакрыть.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
	КонецЕсли;
	
	КнопкаДалее.Заголовок = ?(ФункцияКнопкиДалее, НСтр("ru = 'Далее >'"), НСтр("ru = 'Готово'"));
	КнопкаЗакрыть.Заголовок = ?(ФункцияКнопкиЗакрыть, НСтр("ru = 'Отмена'"), НСтр("ru = 'Закрыть'"));
	
	Если НоваяТекущаяСтраница = Страницы.ДлительнаяОперация Тогда
		ПодключитьОбработчикОжидания("ВыполнитьПолучениеОбновления", 1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ВосстановитьРезультатыПредыдущегоЗапуска(Отказ = Ложь)
	
	Страницы	= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	ВосстановлениеРезультатовПредЗапуска = Истина;
	ИмяСтраницы	= ОбработатьСтраницуДоброПожаловать(Ложь);
	Обработано	= ИмяСтраницы = Страницы.ДоступноеОбновление.Имя
		Или ИмяСтраницы = Страницы.ВыборРежимаОбновленияСервер.Имя
		Или ИмяСтраницы = Страницы.ВыборРежимаОбновленияФайл.Имя;
	
	ВосстановлениеРезультатовПредЗапуска = Ложь;
	Если НЕ Обработано Тогда
		Отказ = Истина;
		Возврат ИмяСтраницы;
	КонецЕсли;

	Если ИмяСтраницы = Страницы.ДоступноеОбновление.Имя Тогда
		СписокФайловДляПолучения = СоздатьСписокФайловДляПолучения();
		Если ПроверитьФайлыОбновленияПолучены() Тогда
			ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
			
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Информация",
				НСтр("ru = 'Обнаружено, что файлы обновления конфигурации уже были получены и сохранены локально.'"));
				
			ПерейтиКВыборуРежимаОбновления();
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяСтраницы;
	
КонецФункции

&НаКлиенте
Функция ОбработатьСтраницуДоброПожаловать(ВыдаватьСообщения = Истина)
	Если Объект.ИсточникОбновления = 0 Тогда
		Возврат ПроверитьОбновлениеИнтернет(ВыдаватьСообщения);
	ИначеЕсли Объект.ИсточникОбновления = 2 Тогда
		Возврат ПроверитьОбновлениеФайл(ВыдаватьСообщения);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция ОбработатьСтраницуПодключениеКИнтернет(ВыдаватьСообщения = Истина)
	Страницы		= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	Объект.ТехническаяИнформацияОбОшибке = "";
	Если СписокФайловДляПолучения.Количество() > 0 Тогда
		Возврат Страницы.ДлительнаяОперация.Имя;
	ИначеЕсли Объект.ДоступныеОбновления.Количество() > 0 Тогда
		Возврат Страницы.ДоступноеОбновление.Имя;
	КонецЕсли;
		
	Возврат ?(Объект.ДоступныеОбновления.Количество() = 0, ПроверитьОбновлениеИнтернет(ВыдаватьСообщения), Страницы.ПодключениеКСайту.Имя);
КонецФункции

&НаКлиенте
Функция ОбработатьСтраницуПодключениеКСайту(ВыдаватьСообщения = Истина)
	Страницы		= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	Объект.ТехническаяИнформацияОбОшибке = "";
	Если НЕ ЗначениеЗаполнено(Объект.КодПользователяСервераОбновлений) Тогда
		Если ВыдаватьСообщения Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Укажите код пользователя для обновления.'"));
		КонецЕсли;
		ТекущийЭлемент = Элементы.КодПользователяСервераОбновлений;
		Возврат Страницы.ПодключениеКСайту.Имя;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПарольСервераОбновлений) Тогда
		Если ВыдаватьСообщения Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Укажите пароль пользователя для обновления.'"));
		КонецЕсли;
		ТекущийЭлемент = Элементы.ПарольСервераОбновлений;
		Возврат Страницы.ПодключениеКСайту.Имя;
	КонецЕсли;
	
	Если СписокФайловДляПолучения.Количество() > 0 Тогда
		Возврат Страницы.ДлительнаяОперация.Имя;
	ИначеЕсли Объект.ДоступныеОбновления.Количество() > 0 Тогда
		Возврат Страницы.ДоступноеОбновление.Имя;
	КонецЕсли;
	
	Возврат ПроверитьОбновлениеИнтернет(ВыдаватьСообщения);
КонецФункции

&НаКлиенте
Функция ОбработатьСтраницуДлительнаяОперация(ВыдаватьСообщения = Истина)
	Возврат РезультатПолученияФайлов;
КонецФункции

&НаКлиенте
Функция ОбработатьСтраницуВыборРежимаОбновления(ВыдаватьСообщения = Истина, ФлагЗавершенияРаботы = Ложь)
	ТекущаяСтраница = Элементы.СтраницыПомощника.ТекущаяСтраница;
	
	ИнформационнаяБазаФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	ВыполнитьОбновление = Ложь;
	
	Если ИнформационнаяБазаФайловая И НЕ РежимИмитацииКлиентСервернойИБ() И Объект.СоздаватьРезервнуюКопию = 2 Тогда
		
		Файл = Новый Файл(Объект.ИмяКаталогаРезервнойКопииИБ);
		Если Не Файл.Существует() Или Не Файл.ЭтоКаталог() Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Укажите существующий каталог для сохранения резервной копии ИБ.'"));
			Возврат ТекущаяСтраница.Имя;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.РежимОбновления = 0 Тогда   // Обновить сейчас
		Если ИнформационнаяБазаФайловая И НЕ РежимИмитацииКлиентСервернойИБ() Тогда
			НаличиеСоединений = НаличиеАктивныхСоединений(ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"]);
			Если НаличиеСоединений Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Невозможно продолжить обновление конфигурации, так как не завершены все соединения с информационной базой.'"));
				Возврат ТекущаяСтраница.Имя;
			КонецЕсли;
		КонецЕсли;
		ВыполнитьОбновление		= Истина;
		ФлагЗавершенияРаботы	= Истина;
		Возврат ТекущаяСтраница.Имя;
	ИначеЕсли Объект.РежимОбновления = 1 Тогда  // При завершении работы
		
	ИначеЕсли Объект.РежимОбновления = 2 Тогда  // Запланировать обновление
		Если НЕ ПроверитьДопустимуюДатуОбновления(Объект.ДатаВремяОбновления, ВыдаватьСообщения) Тогда
			ТекущийЭлемент = Элементы.ПолеДатаВремяОбновления;
			Возврат ТекущаяСтраница.Имя;
		КонецЕсли;
		Если Объект.ВыслатьОтчетНаПочту Тогда
			ИмяНовойСтраницы = ПроверитьНастройкиЭлектроннойПочты(ТекущаяСтраница.Имя, ВыдаватьСообщения);
			Если НЕ ПустаяСтрока(ИмяНовойСтраницы) Тогда
				Возврат ИмяНовойСтраницы;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ВозможноЗапланироватьОбновление(ВыдаватьСообщения) Тогда
			Возврат ТекущаяСтраница.Имя;
		КонецЕсли;
		
		Если НЕ ЗапланироватьОбновлениеКонфигурации() Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Невозможно запланировать обновление конфигурации. Сведения об ошибке сохранены в журнал регистрации.'"));
			Возврат ТекущаяСтраница.Имя;
		КонецЕсли;
		
	Иначе
		Возврат ТекущаяСтраница.Имя;
	КонецЕсли;
	
	ИмяПараметра = "СтандартныеПодсистемы.ПредлагатьОбновлениеИнформационнойБазыПриЗавершенииСеанса";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Неопределено);
	КонецЕсли;
	ПараметрыПриложения[ИмяПараметра] = Объект.РежимОбновления = 1;
	
	Сообщение = НСтр("ru = 'Выбран режим обновления:'") + " ";
	Если Объект.РежимОбновления = 0 Тогда   // Обновить сейчас
		Сообщение = Сообщение + НСтр("ru = 'сейчас'");
	ИначеЕсли Объект.РежимОбновления = 1 Тогда  // при завершении работы
		Сообщение = Сообщение + НСтр("ru = 'при завершении работы'");
	ИначеЕсли Объект.РежимОбновления = 2 Тогда  // Запланировать обновление
		Сообщение = Сообщение + НСтр("ru = 'запланировать'");
	КонецЕсли;
	Сообщение = Сообщение + ".";
	ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, 
		"Информация", Сообщение);

	Закрыть();
	Возврат ТекущаяСтраница.Имя;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьНажатиеКнопкиДалее(ФлагЗавершенияРаботы = Ложь)
	ОчиститьСообщения();
	ТекущаяСтраница			= Элементы.СтраницыПомощника.ТекущаяСтраница;
	Страницы				= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	НоваяТекущаяСтраница	= ТекущаяСтраница;
	КнопкаДалее				= Элементы.КнопкаДалее;
	КнопкаНазад				= Элементы.КнопкаНазад;
	КнопкаЗакрыть			= Элементы.КнопкаЗакрыть;
	
	ТекущаяСтраница.Доступность	= Ложь;
	КнопкаДалее.Доступность		= Ложь;
	КнопкаНазад.Доступность		= Ложь;
	КнопкаЗакрыть.Доступность	= Ложь;
	
	Если ТекущаяСтраница = Страницы.ДоброПожаловать Тогда
		НоваяСтраница = ОбработатьСтраницуДоброПожаловать();
		Если НоваяСтраница = Неопределено Тогда
			Возврат;
		Иначе
			НоваяТекущаяСтраница = Страницы[НоваяСтраница];
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Страницы.ПодключениеКИнтернет Тогда
		НоваяТекущаяСтраница = Страницы[ОбработатьСтраницуПодключениеКИнтернет()];
	ИначеЕсли ТекущаяСтраница = Страницы.ПодключениеКСайту Тогда
		НоваяТекущаяСтраница = Страницы[ОбработатьСтраницуПодключениеКСайту()];
	ИначеЕсли ТекущаяСтраница = Страницы.ДоступноеОбновление Тогда
		НоваяСтраница = ОбработатьСтраницуДоступноеОбновление();
		Если НоваяСтраница = Неопределено Тогда
			Возврат;
		Иначе
			НоваяТекущаяСтраница = Страницы[НоваяСтраница];
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Страницы.ОбновленияНеОбнаружено Тогда
		НоваяТекущаяСтраница = Страницы[ОбработатьСтраницуОбновленияНеОбнаружено()];
	ИначеЕсли ТекущаяСтраница = Страницы.ДлительнаяОперация Тогда
		НоваяТекущаяСтраница = Страницы[ОбработатьСтраницуДлительнаяОперация()];
	ИначеЕсли ТекущаяСтраница = Страницы.ВыборРежимаОбновленияФайл
		Или ТекущаяСтраница = Страницы.ВыборРежимаОбновленияСервер Тогда
		НоваяТекущаяСтраница = Страницы[ОбработатьСтраницуВыборРежимаОбновления(, ФлагЗавершенияРаботы)];
	ИначеЕсли ТекущаяСтраница = Страницы.УспешноеОбновление Тогда
		НоваяТекущаяСтраница = Страницы[ОбработатьСтраницуУспешноеОбновление()];
	ИначеЕсли ТекущаяСтраница = Страницы.НеуспешноеОбновление Тогда
		НоваяТекущаяСтраница = Страницы[ОбработатьСтраницуНеуспешноеОбновление()];
	ИначеЕсли ТекущаяСтраница = Страницы.ФайлОбновления Тогда
		НоваяСтраница = ОбработатьСтраницуФайлОбновления();
		Если НоваяСтраница = Неопределено Тогда
			Возврат;
		Иначе
			НоваяТекущаяСтраница = Страницы[НоваяСтраница];
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПриПереходеНаСтраницуПомощника(ТекущаяСтраница.Имя, НоваяТекущаяСтраница.Имя, Отказ);
	
	ТекущаяСтраница.Доступность = Истина;
	
	// Проверим, что есть доступ к возможности обновления конфигурации.
	Если Не СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.ЕстьДоступДляОбновления
		И (НоваяТекущаяСтраница = Страницы.ПодключениеКСайту
		Или НоваяТекущаяСтраница = Страницы.ДлительнаяОперация
		Или НоваяТекущаяСтраница = Страницы.ВыборРежимаОбновленияФайл
		Или НоваяТекущаяСтраница = Страницы.ВыборРежимаОбновленияСервер
		Или НоваяТекущаяСтраница = Страницы.ФайлОбновления) Тогда
		
		Отказ						= Истина;
		КнопкаНазад.Доступность		= Истина;
		КнопкаДалее.Доступность		= Истина;
		КнопкаЗакрыть.Доступность	= Истина;
		ПоказатьПредупреждение(, НСтр("ru = 'Недостаточно прав для выполнения обновления конфигурации.'"));
	КонецЕсли;
	
	Если Отказ Тогда
		ОтработатьНажатиеКнопкиНазад();
	Иначе
		ПередОткрытиемСтраницы(НоваяТекущаяСтраница);
		Элементы.СтраницыПомощника.ТекущаяСтраница = НоваяТекущаяСтраница;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьНажатиеКнопкиНазад()
	
	Страницы             = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	ТекущаяСтраница      = Элементы.СтраницыПомощника.ТекущаяСтраница;
	НоваяТекущаяСтраница = ТекущаяСтраница;
	
	Если ТекущаяСтраница = Страницы.ДоброПожаловать Тогда
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	ИначеЕсли ТекущаяСтраница = Страницы.ПодключениеКИнтернет Тогда
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	ИначеЕсли ТекущаяСтраница = Страницы.ПодключениеКСайту Тогда
		НоваяТекущаяСтраница = Страницы.ДоступноеОбновление;
	ИначеЕсли ТекущаяСтраница = Страницы.ДоступноеОбновление Тогда
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	ИначеЕсли ТекущаяСтраница = Страницы.ОбновленияНеОбнаружено Тогда
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	ИначеЕсли ТекущаяСтраница = Страницы.ДлительнаяОперация Тогда
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	ИначеЕсли ТекущаяСтраница = Страницы.ВыборРежимаОбновленияФайл
		Или ТекущаяСтраница = Страницы.ВыборРежимаОбновленияСервер Тогда
		Если Объект.ИсточникОбновления = 0 Тогда // Интернет
			НоваяТекущаяСтраница = Страницы.ДоступноеОбновление;
		Иначе // файл
			НоваяТекущаяСтраница = Страницы.ФайлОбновления;
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Страницы.УспешноеОбновление Тогда
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	ИначеЕсли ТекущаяСтраница = Страницы.НеуспешноеОбновление Тогда
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
		Если Не СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоГлавныйУзел Тогда
			ПерейтиКВыборуРежимаОбновления();
			Возврат;
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Страницы.ФайлОбновления Тогда
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	ИначеЕсли ТекущаяСтраница = Страницы.ДоступноеОбновление Тогда
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	КонецЕсли;
	
	ПередОткрытиемСтраницы(НоваяТекущаяСтраница);
	
	Элементы.СтраницыПомощника.ТекущаяСтраница = НоваяТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПереходеНаСтраницуПомощника(ПредыдущаяСтраница, СледующаяСтраница, Отказ)
	
	Если ПредыдущаяСтраница = "ФайлОбновления" И СледующаяСтраница <> "ФайлОбновления" Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПриПереходеНаСтраницуПомощникаЗавершение", ЭтотОбъект);
		ОбновлениеКонфигурацииКлиент.ПроверитьЛегальностьПолученияОбновления(Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьАктивныхПользователей()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОповещатьОЗакрытии", Истина);
	СтандартныеПодсистемыКлиент.ОткрытьСписокАктивныхПользователей(ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПереходеНаСтраницуПомощникаЗавершение(ОбновлениеПолученоЛегально, ДополнительныеПараметры) Экспорт
	
	Если ОбновлениеПолученоЛегально = Ложь
		Или ОбновлениеПолученоЛегально = Неопределено Тогда
		ОтработатьНажатиеКнопкиНазад();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьСтраницуДоступноеОбновление(ВыдаватьСообщения = Истина)
	
	Страницы = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	Объект.ТехническаяИнформацияОбОшибке = "";
	
	Если Не СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.ЕстьДоступДляОбновления Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Недостаточно прав для выполнения обновления конфигурации.'"));
		Возврат Страницы.ДоступноеОбновление.Имя;
	КонецЕсли;
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая И УстановленыРасширения Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Перед обновлением необходимо удалить все подключенные расширения конфигурации.
			|После завершения обновления их нужно подключить заново.'"));
		Возврат Страницы.ДоступноеОбновление.Имя;
	КонецЕсли;
	
	СписокФайловДляПолучения.ЗагрузитьЗначения(СоздатьСписокФайловДляПолучения());
	Если ПроверитьФайлыОбновленияПолучены() Тогда
		ИмяСобытияЖурнала  = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Информация",
			НСтр("ru = 'Обнаружено, что файлы обновления конфигурации уже были получены и сохранены локально.'"));
		ПерейтиКВыборуРежимаОбновления(Истина);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Страницы.ДлительнаяОперация.Имя;
	
КонецФункции

&НаКлиенте
Функция ОбработатьСтраницуОбновленияНеОбнаружено(ВыдаватьСообщения = Истина)
	Страницы		= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	Закрыть();
	Возврат Страницы.ОбновленияНеОбнаружено.Имя;
КонецФункции

&НаКлиенте
Функция ОбработатьСтраницуУспешноеОбновление(ВыдаватьСообщения = Истина)
	
	Закрыть();
	Возврат Элементы.УспешноеОбновление.Имя;
	
КонецФункции

&НаКлиенте
Функция ОбработатьСтраницуНеуспешноеОбновление(ВыдаватьСообщения = Истина)
	Страницы		= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	Закрыть();
	Возврат Страницы.НеуспешноеОбновление.Имя;
КонецФункции

&НаКлиенте
Функция ОбработатьСтраницуФайлОбновления(ВыдаватьСообщения = Истина)
	
	Страницы = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	Если Объект.НуженФайлОбновления = 1 Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ИмяФайлаОбновления) Тогда
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите файл поставки обновления конфигурации.'"),,"Объект.ИмяФайлаОбновления");
			КонецЕсли;
			ТекущийЭлемент = Элементы.ПолеФайлОбновления;
			Возврат Страницы.ФайлОбновления.Имя;
		КонецЕсли;
		
		Файл = Новый Файл(Объект.ИмяФайлаОбновления);
		Если НЕ Файл.Существует() ИЛИ НЕ Файл.ЭтоФайл() Тогда
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Файл поставки обновления конфигурации не найден.'"),,"Объект.ИмяФайлаОбновления");
			КонецЕсли;
			ТекущийЭлемент = Элементы.ПолеФайлОбновления;
			Возврат Страницы.ФайлОбновления.Имя;
		КонецЕсли;
		
	КонецЕсли;
	
	КаталогФайловОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления().КаталогФайловОбновления; 
	Если НЕ ПустаяСтрока(КаталогФайловОбновления) Тогда
		Попытка
			УдалитьФайлы(КаталогФайловОбновления, "*");
		Исключение
			// Игнорируем неудачную попытку удаления временного каталога.
		КонецПопытки;
	КонецЕсли;
	ПолучитьДоступноеОбновлениеИзФайла(?(Объект.НуженФайлОбновления = 1, Объект.ИмяФайлаОбновления, Неопределено),Истина);
	ПерейтиКВыборуРежимаОбновления(Истина);
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ПроверитьФайлыОбновленияПолучены()
	
	ФайлыПолученыУспешно = Истина;
	Для Каждого Файл Из СписокФайловДляПолучения Цикл
		Если Файл.Значение.Обязательный И НЕ Файл.Значение.Получен Тогда
			ФайлыПолученыУспешно = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ФайлыПолученыУспешно Тогда
		ФайлыПолученыУспешно = РаспаковатьДистрибутивОбновления();
	КонецЕсли;
	
	Возврат ФайлыПолученыУспешно;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруДоступногоОбновления(ПолучатьРазмерОбновления = Ложь)
	
	Если Объект.ДоступныеОбновления.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаОбновления = Объект.ДоступныеОбновления[Объект.ДоступныеОбновления.Количество()-1];
	
	СтруктураОбновления = Новый Структура;
	СтруктураОбновления.Вставить("Версия", СтрокаОбновления.Версия);
	СтруктураОбновления.Вставить("ВерсияПлатформы", СтрокаОбновления.ВерсияПлатформы);
	
	Если ПолучатьРазмерОбновления = Истина Тогда
		СтруктураОбновления.Вставить("РазмерОбновления", СтрокаРазмераФайла(РазмерОбновлений()));
	КонецЕсли;
	
	Возврат СтруктураОбновления;
	
КонецФункции

// Рассчитать суммарный размер файлов обновлений.
//
// Параметры:
//  Объект.ДоступныеОбновления  - массив - список обновлений.
//
// Возвращаемое значение:
//   число   - размер обновлений в байтах.
&НаКлиенте
Функция РазмерОбновлений()
	РазмерОбновлений = 0;
	Для Каждого Обновление Из Объект.ДоступныеОбновления Цикл
		РазмерОбновлений = РазмерОбновлений + Обновление.РазмерФайлаОбновления;
	КонецЦикла;
	Возврат РазмерОбновлений;
КонецФункции

// Получить строковое представление размера файла.
//
// Параметры:
//  Размер  - Число - размер в байтах.
//
// Возвращаемое значение:
//   Строка   - строковое представление размера файла, например, "10,5 Мб".
&НаКлиенте
Функция СтрокаРазмераФайла(Знач Размер)

	Если Размер < 1024 Тогда
		Возврат Формат(Размер, "ЧДЦ=1") + " " + "байт";
	ИначеЕсли Размер < 1024 * 1024 Тогда	
		Возврат Формат(Размер / 1024, "ЧДЦ=1") + " " + "КБ";
	ИначеЕсли Размер < 1024 * 1024 * 1024 Тогда	
		Возврат Формат(Размер / (1024 * 1024), "ЧДЦ=1") + " " + "МБ";
	Иначе
		Возврат Формат(Размер / (1024 * 1024 * 1024), "ЧДЦ=1") + " " + "ГБ";
	КонецЕсли; 

КонецФункции

// Определение каталога шаблонов конфигураций и обновлений на данном компьютере.
&НаКлиенте
Функция КаталогШаблонов()
	
	Постфикс = "1C\1Cv8\tmplts\";
	
	КаталогПоУмолчанию = КаталогAppData() + Постфикс;
	ИмяФайла = КаталогAppData() + "1C\1CEStart\1CEStart.cfg";
	Если Не ФайлСуществуетНаКлиенте(ИмяФайла) Тогда 
		Возврат КаталогПоУмолчанию;
	КонецЕсли;
	Текст = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF16);
	Стр = "";
	Пока Стр <> Неопределено Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли; 
		Если СтрНайти(ВРег(Стр), ВРег("ConfigurationTemplatesLocation")) = 0 Тогда
			Продолжить;
		КонецЕсли; 
		ПозицияРазделителя = СтрНайти(Стр, "=");
		Если ПозицияРазделителя = 0 Тогда
			Продолжить;
		КонецЕсли;
		НайденныйКаталог = ОбновлениеКонфигурацииКлиентСервер.ДобавитьКонечныйРазделительПути(СокрЛП(Сред(Стр, ПозицияРазделителя + 1)));
		Возврат ?(ФайлСуществуетНаКлиенте(НайденныйКаталог), НайденныйКаталог, КаталогПоУмолчанию);
	КонецЦикла; 
	
	Возврат КаталогПоУмолчанию;

КонецФункции 

// Определение каталога "Мои документы" текущего пользователя Windows.
//
&НаКлиенте
Функция КаталогAppData() 
	
	App				= Новый COMОбъект("Shell.Application");
	Folder			= App.Namespace(26);
	Результат		= Folder.Self.Path;
	Возврат ОбновлениеКонфигурацииКлиентСервер.ДобавитьКонечныйРазделительПути(Результат);
	
КонецФункции 

// Проверка, что файл является дистрибутивом обновления.
//
// Параметр:
//  ПутьКФайлу   - Строка - путь к файлу.
//
// Возвращаемое значение:
//  Булево - Истина, если файл является дистрибутивом обновления.
//
&НаКлиенте
Функция ЭтоДистрибутивОбновления(Знач ПутьКФайлу)
	Файл = Новый Файл(ПутьКФайлу);
	Возврат Файл.Существует() И НРег(Файл.Расширение) = ".zip";
КонецФункции 

&НаКлиенте
Процедура ПерейтиКВыборуРежимаОбновления(ЭтоПереходДалее = Ложь)
	
	Если ПараметрыАдминистрирования = Неопределено Тогда
		
		ЭтоФайловаяБаза = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПолученияПараметровАдминистрирования", ЭтотОбъект, ЭтоПереходДалее);
		ЗаголовокФормы = НСтр("ru = 'Установка обновления'");
		Если ЭтоФайловаяБаза Тогда
			ПоясняющаяНадпись = НСтр("ru = 'Для установки обновления необходимо ввести
				|параметры администрирования информационной базы'");
			ЗапрашиватьПараметрыАдминистрированияКластера = Ложь;
		Иначе
			ПоясняющаяНадпись = НСтр("ru = 'Для установки обновления необходимо ввести параметры
				|администрирования кластера серверов и информационной базы'");
			ЗапрашиватьПараметрыАдминистрированияКластера = Истина;
		КонецЕсли;
		
		СоединенияИБКлиент.ПоказатьПараметрыАдминистрирования(ОписаниеОповещения, Истина, ЗапрашиватьПараметрыАдминистрированияКластера,
			ПараметрыАдминистрирования, ЗаголовокФормы, ПоясняющаяНадпись);
		
	Иначе
		
		ПослеПолученияПараметровАдминистрирования(ПараметрыАдминистрирования, ЭтоПереходДалее);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияПараметровАдминистрирования(Результат, ЭтоПереходДалее) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ПараметрыАдминистрирования = Результат;
		Страницы = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
		ЭтоФайловаяБаза = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
		НоваяТекущаяСтраница = ?(ЭтоФайловаяБаза И Не РежимИмитацииКлиентСервернойИБ(), Страницы.ВыборРежимаОбновленияФайл, Страницы.ВыборРежимаОбновленияСервер);
		УстановитьПарольАдминистратора(ПараметрыАдминистрирования);
		
		Если ЭтоПереходДалее Тогда
			
			Элементы.СтраницыПомощника.ТекущаяСтраница.Доступность = Истина;
			
			// Проверим, что есть доступ к возможности обновления конфигурации.
			Если НЕ СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.ЕстьДоступДляОбновления Тогда
				
				Элементы.КнопкаНазад.Доступность = Истина;
				Элементы.КнопкаДалее.Доступность = Истина;
				Элементы.КнопкаЗакрыть.Доступность = Истина;
				ПоказатьПредупреждение(, НСтр("ru = 'Недостаточно прав для выполнения обновления конфигурации.'"));
				ОтработатьНажатиеКнопкиНазад();
			КонецЕсли;
			
		КонецЕсли;
		
		ПередОткрытиемСтраницы(НоваяТекущаяСтраница);
		Элементы.СтраницыПомощника.ТекущаяСтраница = НоваяТекущаяСтраница;
		
	Иначе
		
		Если ЭтоПереходДалее Тогда
			
			Элементы.СтраницыПомощника.ТекущаяСтраница.Доступность = Истина;
			
		КонецЕсли;
		
		ТекстПредупреждения = НСтр("ru = 'Для установки обновления необходимо ввести параметры администрирования.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
		ТекстСообщения = НСтр("ru = 'Не удалось установить обновление программы, т.к. не были введены
			|корректные параметры администрирования информационной базы.'");
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Ошибка", ТекстСообщения);
		
		НоваяТекущаяСтраница = Элементы.НеуспешноеОбновление;
		ПередОткрытиемСтраницы(НоваяТекущаяСтраница);
		Элементы.СтраницыПомощника.ТекущаяСтраница = НоваяТекущаяСтраница;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПарольАдминистратора(ПараметрыАдминистрирования)
	
	АдминистраторИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ПараметрыАдминистрирования.ИмяАдминистратораИнформационнойБазы);
	
	Если Не АдминистраторИБ.АутентификацияСтандартная Тогда
		
		АдминистраторИБ.АутентификацияСтандартная = Истина;
		АдминистраторИБ.Пароль = ПараметрыАдминистрирования.ПарольАдминистратораИнформационнойБазы;
		АдминистраторИБ.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Получение параметров аутентификации пользователя для обновления.
// Создает виртуального пользователя, если в этом есть необходимость.
//
// Возвращаемое значение
//  Структура       - параметры виртуального пользователя.
//
&НаКлиенте
Функция ПолучитьПараметрыАутентификацииАдминистратораОбновления()
	
	Результат = Новый Структура("СтрокаПодключения, СтрокаСоединенияИнформационнойБазы");
	
	ПортКластера = ПараметрыАдминистрирования.ПортКластера;
	ТекущиеСоединения = СоединенияИБВызовСервера.ИнформацияОСоединениях(Истина,
		ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"], ПортКластера);
		
	Результат.СтрокаСоединенияИнформационнойБазы = ТекущиеСоединения.СтрокаСоединенияИнформационнойБазы;
	Результат.СтрокаПодключения = "Usr=""{0}"";Pwd=""{1}""";
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СтрокаUnicode(Строка)
	
	Результат = "";
	
	Для НомерСимвола = 1 По СтрДлина(Строка) Цикл
		
		Символ = Формат(КодСимвола(Сред(Строка, НомерСимвола, 1)), "ЧГ=0");
		Символ = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Символ, 4);
		Результат = Результат + Символ;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПроверитьНастройкиЭлектроннойПочты(ИмяТекущейСтраницы, ВыдаватьСообщения = Истина)
	Если Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Объект.АдресЭлектроннойПочты) Тогда
		Если ВыдаватьСообщения Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Укажите допустимый адрес электронной почты.'"));
		КонецЕсли;
		ТекущийЭлемент	= Элементы.АдресЭлектроннойПочты;
		Возврат ИмяТекущейСтраницы;
	КонецЕсли;
	Возврат "";
КонецФункции

&НаКлиенте
Функция ОпределитьИмяСкрипта()
	App = Новый COMОбъект("Shell.Application");
	Попытка
		Folder = App.Namespace(41);
		Возврат Folder.Self.Path + "\wscript.exe";
	Исключение
		Возврат "wscript.exe";
	КонецПопытки;
КонецФункции

&НаСервере
Функция ПараметрыПроверкиЛегальности()
	
	ПараметрыПроверки = Новый Структура;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ИдентификаторИнформационнойБазы = СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы();

	ПараметрыПроверки.Вставить("login"               , Объект.КодПользователяСервераОбновлений);
	ПараметрыПроверки.Вставить("password"            , Объект.ПарольСервераОбновлений);
	ПараметрыПроверки.Вставить("variantBPED"         , "authorizationChecking");
	ПараметрыПроверки.Вставить("versionConfiguration", СокрЛП(Метаданные.Версия));
	ПараметрыПроверки.Вставить("versionPlatform"     , Строка(СистемнаяИнформация.ВерсияПриложения));
	ПараметрыПроверки.Вставить("nameConfiguration"   , Метаданные.Имя);
	ПараметрыПроверки.Вставить("language"            , СокрЛП(ТекущийКодЛокализации()));
	ПараметрыПроверки.Вставить("enterPoint"          , "authorizationChecking");
	ПараметрыПроверки.Вставить("InfoBaseID"          , ИдентификаторИнформационнойБазы);
	
	Возврат ПараметрыПроверки;
	
КонецФункции

&НаКлиенте
Функция СформироватьФайлыСкриптаОбновления(Знач ИнтерактивныйРежим) 
	ПараметрыОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления();
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	СоздатьКаталог(ПараметрыОбновления.КаталогВременныхФайловОбновления);
	
	// Структура параметров необходима для их определения на клиенте и передачи на сервер.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяИсполняемогоФайлаКонфигуратора", ПараметрыОбновления.ИмяИсполняемогоФайлаКонфигуратора);
	СтруктураПараметров.Вставить("ИмяИсполняемогоФайлаКлиента"		, СтандартныеПодсистемыКлиент.ИмяИсполняемогоФайлаПриложения());
	СтруктураПараметров.Вставить("СобытиеЖурналаРегистрации"		, ПараметрыОбновления.СобытиеЖурналаРегистрации);
	СтруктураПараметров.Вставить("ИмяCOMСоединителя"				, ПараметрыРаботыКлиента.ИмяCOMСоединителя);
	СтруктураПараметров.Вставить("ИспользоватьCOMСоединитель"		, ПараметрыРаботыКлиента.ЭтоБазоваяВерсияКонфигурации Или ПараметрыРаботыКлиента.ЭтоУчебнаяПлатформа);
	СтруктураПараметров.Вставить("ИнформационнаяБазаФайловая"		, ПараметрыРаботыКлиента.ИнформационнаяБазаФайловая);
	СтруктураПараметров.Вставить("ПараметрыСкрипта"					, ПолучитьПараметрыАутентификацииАдминистратораОбновления());
	СтруктураПараметров.Вставить("ПараметрыАдминистрирования"		, ПараметрыАдминистрирования);
	
	// Добавим в структуру и имя запускаемой программы.
	
	#Если Не ВебКлиент Тогда
		СтруктураПараметров.Вставить("КаталогПрограммы"			, КаталогПрограммы());
	#Иначе
		СтруктураПараметров.Вставить("КаталогПрограммы"			, "");
	#КонецЕсли
	
	ИменаМакетов = "ДопФайлОбновленияКонфигурации";
	Если ИнтерактивныйРежим Тогда
		ИменаМакетов = ИменаМакетов + ",ЗаставкаОбновленияКонфигурации";
	Иначе
		ИменаМакетов = ИменаМакетов + ",НеинтерактивноеОбновлениеКонфигурации";
	КонецЕсли;
	ТекстыМакетов = ПолучитьТекстыМакетов(ИменаМакетов, СтруктураПараметров, ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"]);
	
	ФайлСкрипта = Новый ТекстовыйДокумент;
	ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
	ФайлСкрипта.УстановитьТекст(ТекстыМакетов[0]);
	
	ИмяФайлаСкрипта = ПараметрыОбновления.КаталогВременныхФайловОбновления + "main.js";
	ФайлСкрипта.Записать(ИмяФайлаСкрипта, КодировкаТекста.UTF16);
	
	// Вспомогательный файл: helpers.js.
	ФайлСкрипта = Новый ТекстовыйДокумент;
	ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
	ФайлСкрипта.УстановитьТекст(ТекстыМакетов[1]);
	ФайлСкрипта.Записать(ПараметрыОбновления.КаталогВременныхФайловОбновления + "helpers.js", КодировкаТекста.UTF16);
	
	ИмяГлавногоФайлаСкрипта = Неопределено;
	Если ИнтерактивныйРежим Тогда
		// Вспомогательный файл: splash.png.
		БиблиотекаКартинок.ЗаставкаВнешнейОперации.Записать(ПараметрыОбновления.КаталогВременныхФайловОбновления + "splash.png");
		// Вспомогательный файл: splash.ico.
		БиблиотекаКартинок.ЗначокЗаставкиВнешнейОперации.Записать(ПараметрыОбновления.КаталогВременныхФайловОбновления + "splash.ico");
		// Вспомогательный файл: progress.gif.
		БиблиотекаКартинок.ДлительнаяОперация48.Записать(ПараметрыОбновления.КаталогВременныхФайловОбновления + "progress.gif");
		// Главный файл заставки: splash.hta.
		ИмяГлавногоФайлаСкрипта = ПараметрыОбновления.КаталогВременныхФайловОбновления + "splash.hta";
		ФайлСкрипта = Новый ТекстовыйДокумент;
		ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
		ФайлСкрипта.УстановитьТекст(ТекстыМакетов[2]);
		ФайлСкрипта.Записать(ИмяГлавногоФайлаСкрипта, КодировкаТекста.UTF16);
	Иначе
		ИмяГлавногоФайлаСкрипта = ПараметрыОбновления.КаталогВременныхФайловОбновления + "updater.js";
		ФайлСкрипта = Новый ТекстовыйДокумент;
		ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
		ФайлСкрипта.УстановитьТекст(ТекстыМакетов[2]);
		ФайлСкрипта.Записать(ИмяГлавногоФайлаСкрипта, КодировкаТекста.UTF16);
	КонецЕсли;
	
	Возврат ИмяГлавногоФайлаСкрипта;              
КонецФункции

&НаКлиенте
Функция ПроверитьДопустимуюДатуОбновления(ДатаВремя, ВыдаватьСообщения = Истина)
	ТекстСообщения = ПроверитьДопустимуюДатуОбновленияНаСервере(ДатаВремя);
	Результат = ПустаяСтрока(ТекстСообщения);
	Если Не Результат И ВыдаватьСообщения Тогда
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьДопустимуюДатуОбновленияНаСервере(ДатаВремя)
	
	Сейчас = ТекущаяДатаСеанса();
	Если ДатаВремя < Сейчас Тогда
		Возврат НСтр("ru = 'Обновление конфигурации может быть запланировано только на будущую дату и время.'");
	КонецЕсли;
	Если ДатаВремя > ДобавитьМесяц(Сейчас, 1) Тогда
		Возврат НСтр("ru = 'Обновление конфигурации может быть запланировано не позднее, чем через месяц относительно текущей даты.'");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Функция СоздатьСписокФайловДляПолучения() 
	
	СписокФайлов = Новый Массив;
	ПараметрыОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления();
	КаталогОбновленияВИсточнике = ПараметрыОбновления.АдресКаталогаШаблоновНаСервереОбновлений;
	
	Для Каждого Обновление Из Объект.ДоступныеОбновления Цикл
		Если Не ПустаяСтрока(Обновление.ПутьКФайлуОбновления) И ПустаяСтрока(Обновление.ПутьКЛокальномуФайлуОбновления) Тогда
			
			КаталогФайлаОбновления = ПолучитьКаталогФайлаОбновления(Обновление);
			Обновление.ЛокальныйОтносительныйКаталог = КаталогФайлаОбновления;
			Обновление.ПутьКЛокальномуФайлу = ПараметрыОбновления.КаталогФайловОбновления + КаталогФайлаОбновления + Обновление.ФайлОбновления;
			// Описание файла обновления.
			СтруктураИнформацииПоФайлу = Новый Структура;
			СтруктураИнформацииПоФайлу.Вставить("Адрес", КаталогОбновленияВИсточнике + Обновление.ПутьКФайлуОбновления);
			СтруктураИнформацииПоФайлу.Вставить("ЛокальныйПуть", Обновление.ПутьКЛокальномуФайлу);
			СтруктураИнформацииПоФайлу.Вставить("Обязательный", Истина);
			СтруктураИнформацииПоФайлу.Вставить("Получен", ОпределитьФайлПолучен(СтруктураИнформацииПоФайлу, Обновление.РазмерФайлаОбновления));
			СписокФайлов.Добавить(СтруктураИнформацииПоФайлу);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокФайлов;
	
КонецФункции

&НаКлиенте
Функция ОпределитьФайлПолучен(ОписаниеФайла, Размер)
	Файл = Новый Файл(ОписаниеФайла.ЛокальныйПуть);
	Возврат Файл.Существует() И Файл.Размер() = Размер;
КонецФункции

// Получение файла описания обновления с сервера.
&НаКлиенте
Функция ПолучитьФайлОписанияОбновления()
	
	НастройкиОбновления = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления;
	ПараметрыОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления();
	ИмяФайла	= ПолучитьИмяЛокальногоФайлаОписанияОбновления();
	Результат	= ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(НастройкиОбновления.АдресСервераДляПроверкиНаличияОбновления
		+ ПараметрыОбновления.АдресРесурсовДляПроверкиНаличияОбновления + ПараметрыОбновления.ИмяФайлаОписанияОбновления,
		Новый Структура("ПутьДляСохранения", ? (ПустаяСтрока(ИмяФайла), Неопределено, ИмяФайла)));
	Если Результат.Статус Тогда
		Возврат ИмяФайла;
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка при удалении временного файла %1
			|%2'");
		ИмяСобытияЖурнала =	ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала,
			"Ошибка", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяФайла, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяЛокальногоФайлаПорядкаОбновления()
	
	ПараметрыОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления();
	Возврат ПараметрыОбновления.КаталогФайловОбновления + ПараметрыОбновления.ИмяФайлаПорядкаОбновления;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяЛокальногоФайлаОписанияОбновления()
	
	ПараметрыОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления();
	Возврат ПараметрыОбновления.КаталогФайловОбновления + ПараметрыОбновления.ИмяФайлаОписанияОбновления;
			
КонецФункции

// Получение файла порядка обновления с сервера.
&НаКлиенте
Функция ПолучитьФайлПорядкаОбновления()
	
	НастройкиОбновления = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления;
	ПараметрыОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления();
	ИмяФайла = ПолучитьИмяЛокальногоФайлаПорядкаОбновления();
	Результат = ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(НастройкиОбновления.АдресСервераДляПроверкиНаличияОбновления
		+ ПараметрыОбновления.АдресРесурсовДляПроверкиНаличияОбновления +	ПараметрыОбновления.ИмяФайлаПорядкаОбновления,
		Новый Структура("ПутьДляСохранения", ? (ПустаяСтрока(ИмяФайла), Неопределено, ИмяФайла)), Ложь);
	Если Результат.Статус Тогда
		Возврат ИмяФайла;
	КонецЕсли;
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка при удалении временного файла %1
			|%2'");
		ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала,
			"Ошибка", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяФайла, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	Возврат Неопределено;
	
КонецФункции 

&НаКлиенте
Процедура ПолучитьДоступноеОбновлениеИзФайла(Знач ИмяФайла, ФайловыйВариант = Ложь)
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		Если ФайловыйВариант Тогда
			Объект.ДоступныеОбновления.Очистить();
		КонецЕсли;
		НовоеДоступноеОбновление								= Объект.ДоступныеОбновления.Добавить();
		НовоеДоступноеОбновление.ПутьКЛокальномуФайлу			= ИмяФайла;
		НовоеДоступноеОбновление.ПутьКЛокальномуФайлуОбновления	= ИмяФайла;
	КонецЕсли;
КонецПроцедуры

// Получение каталога файла обновления. 
//
// Параметр:
//  ДоступноеОбновление - Строка таблицы значений, содержащая информацию о
//                        доступном обновлении.
// 
// Возвращаемое значение:
//  Строка - каталог файла обновления.
//
&НаКлиенте
Функция ПолучитьКаталогФайлаОбновления(ДоступноеОбновление)
	
	Если ДоступноеОбновление = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КороткоеИмяКонфигурации = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.КороткоеИмяКонфигурации;
	КороткоеИмяКонфигурации = СтрЗаменить(КороткоеИмяКонфигурации, "/", "\");
	КороткоеИмяКонфигурации = ОбновлениеКонфигурацииКлиентСервер.ДобавитьКонечныйРазделительПути(КороткоеИмяКонфигурации);
	Результат = СтрЗаменить(ДоступноеОбновление.ПутьКФайлуОбновления, "/", "\");
	Результат = ПолучитьКаталогФайла(Результат);
	Результат = СтрЗаменить(Результат, "_", ".");
	Результат = ОбновлениеКонфигурацииКлиентСервер.ДобавитьКонечныйРазделительПути(Результат);
	Возврат Результат;
	
КонецФункции

// Распаковка дистрибутива обновления.
&НаКлиенте
Функция РаспаковатьДистрибутивОбновления()
	#Если НЕ ВебКлиент Тогда
	ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, 
		"Информация", НСтр("ru = 'Выполняется распаковка дистрибутива обновления...'"));
		
	Для Каждого Обновление Из Объект.ДоступныеОбновления Цикл
	
		Если НЕ ЭтоДистрибутивОбновления(Обновление.ПутьКЛокальномуФайлу) Тогда
			Обновление.ПутьКЛокальномуФайлуОбновления = ?(ПустаяСтрока(Обновление.ПутьКЛокальномуФайлуОбновления), 
				Обновление.ПутьКЛокальномуФайлу, Обновление.ПутьКЛокальномуФайлуОбновления);
			Продолжить;
		КонецЕсли;
		
		Попытка 
			
			ЧтениеZip			= Новый ЧтениеZipФайла(Обновление.ПутьКЛокальномуФайлу);
			КаталогНазначения	= КаталогШаблонов() + Обновление.ЛокальныйОтносительныйКаталог;
			ЧтениеZip.ИзвлечьВсе(КаталогНазначения, РежимВосстановленияПутейФайловZIP.Восстанавливать);
			ИмяФайлаОбновления	= КаталогНазначения + "1cv8.cfu";
			Если НЕ ФайлСуществуетНаКлиенте(ИмяФайлаОбновления) Тогда
				ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Ошибка",
					НСтр("ru = 'Дистрибутив обновления не содержит 1cv8.cfu:'")
						+ " " + Обновление.ПутьКЛокальномуФайлу);
				Возврат Ложь;
			КонецЕсли;
			Обновление.ПутьКЛокальномуФайлуОбновления = ИмяФайлаОбновления;
			
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Информация",
				НСтр("ru = 'Файлы дистрибутива обновления успешно распакованы:'")
					+ " " + ИмяФайлаОбновления);
		Исключение
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Ошибка",
				НСтр("ru = 'Ошибка при распаковке дистрибутива обновления:'")
					+ " " + ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
		Попытка
			ЧтениеZip			= Новый ЧтениеZipФайла(Обновление.ПутьКЛокальномуФайлу);
			КаталогНазначения	= ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления().КаталогФайловОбновления + Обновление.ЛокальныйОтносительныйКаталог;
			ЧтениеZip.ИзвлечьВсе(КаталогНазначения, РежимВосстановленияПутейФайловZIP.Восстанавливать);
			ИмяФайлаОбновления	= КаталогНазначения + "1cv8.cfu";
			Если НЕ ФайлСуществуетНаКлиенте(ИмяФайлаОбновления) Тогда
				ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
					"Ошибка", НСтр("ru = 'Дистрибутив обновления не содержит 1cv8.cfu:'")
						+ " " + Обновление.ПутьКЛокальномуФайлу);
				Возврат Ложь;
			КонецЕсли;
			Обновление.ПутьКЛокальномуФайлуОбновления = ИмяФайлаОбновления;
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
				"Информация", НСтр("ru = 'Файлы дистрибутива обновления успешно распакованы:'")
					+ " " + ИмяФайлаОбновления);
			ЧтениеZip.Закрыть();
		Исключение
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
				"Ошибка",  НСтр("ru = 'Ошибка при распаковке дистрибутива обновления:'")
					+ " " + ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	Возврат Истина;
	#КонецЕсли
КонецФункции

&НаКлиенте
Процедура ПолучитьДоступныеОбновления(ПараметрыОбновления, ВерсияКонфигурации, ВыдаватьСообщения, ДоступноОбновлениеДляСледующейРедакции = Ложь)
	
	ПараметрыОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления(ДоступноОбновлениеДляСледующейРедакции);
	ПутьКФайлуСпискаОбновлений = ПараметрыОбновления.КаталогФайловОбновления + ПараметрыОбновления.ИмяФайлаСпискаШаблонов;
	АдресФайлаВоВремХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлуСпискаОбновлений));
	Попытка
		ПолучитьДоступныеОбновленияВИнтервале(СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ВерсияКонфигурации,
			ВерсияКонфигурации, АдресФайлаВоВремХранилище, ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"]);
	Исключение
		Если ВыдаватьСообщения Тогда
			ПоказатьПредупреждение(, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Получение файла списка шаблонов с сервера.
&НаКлиенте
Функция ПолучитьФайлСпискаШаблонов(Знач ВыдаватьСообщения = Истина, ДоступноОбновлениеДляСледующейРедакции = Ложь)
	#Если НЕ ВебКлиент Тогда
	ПараметрыОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления(ДоступноОбновлениеДляСледующейРедакции);
	НастройкиОбновления = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления;
	ПутьКФайлуСпискаШаблонов = ПараметрыОбновления.КаталогФайловОбновления + ПараметрыОбновления.ИмяZipФайлаСпискаШаблонов;
	
	Результат = ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(НастройкиОбновления.АдресСервераДляПроверкиНаличияОбновления
		+ ПараметрыОбновления.АдресРесурсовДляПроверкиНаличияОбновления + ПараметрыОбновления.ИмяZipФайлаСпискаШаблонов,
		Новый Структура("ПутьДляСохранения", ? (ПустаяСтрока(ПутьКФайлуСпискаШаблонов), Неопределено, ПутьКФайлуСпискаШаблонов)));
	Если Результат.Статус <> Истина Тогда
		Попытка
			УдалитьФайлы(ПутьКФайлуСпискаШаблонов);
		Исключение
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при удалении временного файла %1
					|%2'"), ПутьКФайлуСпискаШаблонов, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		КонецПопытки;
		ТекстОшибки = НСтр("ru = 'Ошибка при получении файла списка шаблонов:'") + " " + Результат.СообщениеОбОшибке;
		Если ВыдаватьСообщения Тогда
			ПоказатьПредупреждение(, ТекстОшибки);
		КонецЕсли; 
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Если НЕ ФайлСуществуетНаКлиенте(ПутьКФайлуСпискаШаблонов) Тогда
		Возврат НСтр("ru = 'Файл не существует:'") + " " + ПутьКФайлуСпискаШаблонов;
	КонецЕсли;
	
	Попытка 
		ЧтениеZip = Новый ЧтениеZipФайла(ПутьКФайлуСпискаШаблонов);
		ЧтениеZip.ИзвлечьВсе(ПараметрыОбновления.КаталогФайловОбновления, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	Исключение
		ТекстОшибки	= НСтр("ru = 'Ошибка при распаковке файла со списком доступных обновлений:'") + " ";
		ИнфоОшибки	= ИнформацияОбОшибке();
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
			"Ошибка", ТекстОшибки + ПодробноеПредставлениеОшибки(ИнфоОшибки));
		ТекстОшибки	= ТекстОшибки + КраткоеПредставлениеОшибки(ИнфоОшибки);
		Возврат ТекстОшибки;
	КонецПопытки;
	УдалитьФайлы(ПараметрыОбновления.КаталогФайловОбновления, ПараметрыОбновления.ИмяZipФайлаСпискаШаблонов);
	Возврат "";
	#КонецЕсли
КонецФункции

// Проверка существования файла или каталога.
//
// Параметр:
//  ПутьКФайлу   - Строка - путь к файлу или каталогу, существование которого
//                 нужно проверить.
//
// Возвращаемое значение:
//  Булево - признак существования файла или каталога.
&НаКлиенте
Функция ФайлСуществуетНаКлиенте(Знач ПутьКФайлу)
	Файл = Новый Файл(ПутьКФайлу);
	Возврат Файл.Существует();
КонецФункции

&НаКлиенте
Функция ПолучитьОбновление(ВыдаватьСообщения = Истина)
	
	Страницы = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	Сообщение = "";
	Если Объект.ИсточникОбновления = 0 Тогда
		Сообщение = Сообщение + НСтр("ru = 'Получение файлов из Интернета...'");
	Иначе
		Сообщение = Сообщение + НСтр("ru = 'Получение файла обновления из указанного источника...'");
	КонецЕсли;
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
		"Информация", Сообщение);
	
	Объект.ТехническаяИнформацияОбОшибке = "";
	НомерФайла = 1;
	Для Каждого Файл Из СписокФайловДляПолучения Цикл
		
		Если Файл.Значение <> Неопределено И Файл.Значение.Получен <> Истина Тогда	// Может быть также Неопределено.
			Если Объект.ИсточникОбновления = 0 Тогда
				
				РезультатПроверкиЛегальности = ОбновлениеКонфигурацииКлиент.ПроверитьЛегальностьСкачиванияОбновления(
					ПараметрыПроверкиЛегальности());
				
				Если Не РезультатПроверкиЛегальности.ЗначениеРезультата Тогда
					
					Элементы.ГруппаДоступаНаСайт.ТекущаяСтраница = Элементы.ГруппаДоступаНаСайт.ПодчиненныеЭлементы.ОшибкаПроверкиЛегальности;
					ТекстОшибки = НСтр("ru = 'Не удалось подтвердить легальность получения обновления через Интернет по причине:
						|%1'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, РезультатПроверкиЛегальности.ТекстОшибки);
					Элементы.ТекстОшибкиПроверкиЛегальности.Заголовок = ТекстОшибки;
					Возврат Страницы.ПодключениеКСайту.Имя;
					
				КонецЕсли;
				
				// Вывод сообщения о закачке файла в журнал регистрации.
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Получаем файл %1 в %2'"),
						ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления().АдресСервераОбновлений + Файл.Значение.Адрес,
						? (ПустаяСтрока(Файл.Значение.ЛокальныйПуть), Неопределено, Файл.Значение.ЛокальныйПуть));
				Элементы.НадписьПрогресс.Заголовок = Сообщение;
				ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), , Сообщение);
				
				СоздатьКаталог(ПолучитьКаталогФайла(Файл.Значение.ЛокальныйПуть));
				
				URL = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления().АдресСервераОбновлений + Файл.Значение.Адрес;
				
				ПараметрыПолучения = Новый Структура;
				ПараметрыПолучения.Вставить("ПутьДляСохранения", ?(ПустаяСтрока(Файл.Значение.ЛокальныйПуть), Неопределено, Файл.Значение.ЛокальныйПуть));
				ПараметрыПолучения.Вставить("Пользователь", Объект.КодПользователяСервераОбновлений);
				ПараметрыПолучения.Вставить("Пароль", Объект.ПарольСервераОбновлений);
				
				Результат = СкачатьФайлОбновления(URL, ПараметрыПолучения);
				
				ТекстОшибки = "";
				Если Результат.Статус <> Истина Тогда
					ТекстОшибки = Результат.СообщениеОбОшибке;
					Попытка
						УдалитьФайлы(Файл.Значение.ЛокальныйПуть);
					Исключение
						ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(),
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при удалении временного файла %1
								|%2'"), Файл.Значение.ЛокальныйПуть, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
					КонецПопытки;
					Если Не ПустаяСтрока(ТекстОшибки) Тогда
						Если Файл.Значение.Обязательный И ВыдаватьСообщения Тогда
							ПоказатьПредупреждение(, ТекстОшибки);
							Возврат Страницы.ПодключениеКСайту.Имя;
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;
				
				Файл.Значение.Получен = ПустаяСтрока(ТекстОшибки);
				
				Если НЕ Файл.Значение.Получен И Файл.Значение.Обязательный Тогда
					Возврат Страницы.ПодключениеКСайту.Имя;
				КонецЕсли;
			Иначе
				// Вывод сообщения в журнал регистрации о копировании файла.
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Получаем файл %1 в %2'"), Файл.Значение.Адрес, Файл.Значение.ЛокальныйПуть);
				Элементы.НадписьПрогресс.Заголовок = Сообщение;
				ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), , Сообщение);
				
				Файл.Значение.Получен = СкопироватьФайл(Файл.Значение.Адрес, Файл.Значение.ЛокальныйПуть, Файл.Значение.Обязательный И ВыдаватьСообщения);
			КонецЕсли;
		КонецЕсли;
		НомерФайла = НомерФайла + 1;
	КонецЦикла;
	
	ИмяСтраницы = "";
	Если ПроверитьФайлыОбновленияПолучены() Тогда
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
			"Информация", НСтр("ru = 'Файлы обновления успешно получены.'"));
		ПерейтиКВыборуРежимаОбновления(Истина);
		Возврат Неопределено;
	Иначе
		Сообщение = НСтр("ru = 'Ошибка при получении файлов обновления.'");
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
			"Ошибка", Сообщение);
		ИмяСтраницы = Страницы.НеуспешноеОбновление.Имя;
	КонецЕсли;
	Возврат ИмяСтраницы;
	
КонецФункции

&НаКлиенте
Функция СкачатьФайлОбновления(URL, ПараметрыПолучения)
	
	Результат = Неопределено;
	
	СтандартнаяОбработка = Истина;
	
	ОбновлениеКонфигурацииКлиентПереопределяемый.ПриСкачиванииФайлаОбновления(URL, ПараметрыПолучения, Результат, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Результат = ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(URL, ПараметрыПолучения);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция, выполняющая копирование заданного файла в другой.
//
// Параметры:
//	ИмяФайлаИсточника: строка, путь к файлу, который нужно скопировать.
//	ИмяФайлаНазначение: строка, путь к файлу в который нужно скопировать источник.
//	ВыдаватьСообщения: Булево, признак вывода на экран сообщений об ошибках.
//
&НаКлиенте
Функция СкопироватьФайл(ИмяФайлаИсточник, ИмяФайлаНазначение, ВыдаватьСообщения = Ложь)
	Попытка
		СоздатьКаталог(ПолучитьКаталогФайла(ИмяФайлаНазначение));
		КопироватьФайл(ИмяФайлаИсточник, ИмяФайлаНазначение);
	Исключение
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при копировании: %1
				|(Источник: %2; Приемник: %3)'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ИмяФайлаИсточник, ИмяФайлаНазначение);
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), "Предупреждение", Сообщение);
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПолучитьФайлыОбновленияЧерезИнтернет(ВыдаватьСообщения, ДоступноОбновлениеДляСледующейРедакции = Ложь)
	
	Страницы = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	ДоступноеОбновление = ОбновлениеКонфигурацииКлиент.ПолучитьДоступноеОбновлениеКонфигурации();
	Если ДоступноеОбновление.ИмяСтраницы = Страницы.ДоступноеОбновление.Имя Тогда
		
		ТекстОшибки = ПолучитьФайлСпискаШаблонов(ВыдаватьСообщения, ДоступноОбновлениеДляСледующейРедакции);
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			Возврат Страницы.ПодключениеКИнтернет.Имя;
		КонецЕсли;
		
		ИмяФайлаИнформацияОбОбновлении	= ПолучитьФайлОписанияОбновления();
		ИмяФайлаПорядокОбновления		= ПолучитьФайлПорядкаОбновления();
		
		ПолучитьДоступныеОбновления(ДоступноеОбновление.ПараметрыФайлаПроверкиОбновления,
			ДоступноеОбновление.ПоследняяВерсияКонфигурации, ВыдаватьСообщения, ДоступноОбновлениеДляСледующейРедакции);
		ПоследняяВерсияКонфигурации = ДоступноеОбновление.ПоследняяВерсияКонфигурации;
		Если Объект.ДоступныеОбновления.Количество() = 0 Тогда
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
				"Информация", НСтр("ru = 'Невозможно продолжить обновление: нет доступных обновлений.'"));
			Возврат Страницы.ОбновленияНеОбнаружено.Имя;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДоступноеОбновление.ИмяСтраницы;
	
КонецФункции

&НаКлиенте
Функция ПроверитьОбновлениеИнтернет(ВыдаватьСообщения = Истина) 
	Страницы		= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
		"Информация", НСтр("ru = 'Проверка обновления в Интернете...'"));
	ДоступноеОбновление = Неопределено;
	Объект.ДоступныеОбновления.Очистить();
	
	ОбновлениеКонфигурацииКлиент.ПроверитьНаличиеОбновленияЧерезИнтернет(ВыдаватьСообщения, ДоступноОбновлениеДляСледующейРедакции);
	
	Возврат ПолучитьФайлыОбновленияЧерезИнтернет(ВыдаватьСообщения, ДоступноОбновлениеДляСледующейРедакции);
КонецФункции

&НаКлиенте
Процедура ВыполнитьПолучениеОбновления()
	ТекущаяСтраница = Элементы.СтраницыПомощника.ТекущаяСтраница;
	РезультатПолученияФайлов = ПолучитьОбновление();
	Если РезультатПолученияФайлов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.СтраницыПомощника.ТекущаяСтраница = ТекущаяСтраница;
	ОбработатьНажатиеКнопкиДалее();
КонецПроцедуры

&НаКлиенте
Функция ВернутьДату(Дата, Время)
	Возврат Дата(Год(Дата), Месяц(Дата), День(Дата), Час(Время), Минута(Время), Секунда(Время));
КонецФункции	

&НаКлиенте
Функция ПроверитьОбновлениеФайл(ВыдаватьСообщения = Истина)
	
	Страницы = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая И УстановленыРасширения Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Перед обновлением необходимо удалить все подключенные расширения конфигурации.
			|После завершения обновления их нужно подключить заново.'"));
		Возврат Страницы.ДоброПожаловать.Имя;
	КонецЕсли;
	
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
		"Информация",  НСтр("ru = 'Проверка обновления в Интернете...'"));
		
	Объект.ДоступныеОбновления.Очистить();
	
	Если ВосстановлениеРезультатовПредЗапуска <> Истина Тогда
		Возврат Страницы.ФайлОбновления.Имя;
	КонецЕсли;
	
	Если Объект.НуженФайлОбновления = 1 Тогда
		Файл = Новый Файл(Объект.ИмяФайлаОбновления);
		Если НЕ Файл.Существует() ИЛИ НЕ Файл.ЭтоФайл() Тогда
			
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), "Информация",
				НСтр("ru = 'Невозможно продолжить обновление: файл поставки обновления конфигурации не найден.'"));
				
			Возврат Страницы.ФайлОбновления.Имя;
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьДоступноеОбновлениеИзФайла(?(Объект.НуженФайлОбновления = 1, Объект.ИмяФайлаОбновления, Неопределено));
	ПерейтиКВыборуРежимаОбновления(Истина);
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ТекстНадписиРезервнойКопииИБ()
	
	Результат = НСтр("ru = 'Не создавать резервную копию ИБ'");
	
	Если Объект.СоздаватьРезервнуюКопию = 1 Тогда
		Результат = НСтр("ru = 'Создавать временную резервную копию ИБ'");
	ИначеЕсли Объект.СоздаватьРезервнуюКопию = 2 Тогда
		Результат = НСтр("ru = 'Создавать резервную копию ИБ'");
	КонецЕсли; 
	
	Если Объект.ВосстанавливатьИнформационнуюБазу Тогда
		Результат = Результат + " " + НСтр("ru = 'и выполнять откат при нештатной ситуации'");
	Иначе
		Результат = Результат + " " + НСтр("ru = 'и не выполнять откат при нештатной ситуации'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОбновлениеКонфигурации()
	
	УдалитьЗадачуПланировщика(Объект.КодЗадачиПланировщика);
	ИмяГлавногоФайлаСкрипта = СформироватьФайлыСкриптаОбновления(Истина);
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), "Информация",
		НСтр("ru = 'Выполняется процедура обновления конфигурации:'") + " " + ИмяГлавногоФайлаСкрипта);
	ЗаписатьСтатусОбновления(ИмяПользователя(), Истина, Ложь, Ложь, ИмяГлавногоФайлаСкрипта, ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"]);
	
	СтрокаЗапуска = "cmd /c """"%1"""" [p1]%2[/p1][p2]%3[/p2]";
	СтрокаЗапуска = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаЗапуска, ИмяГлавногоФайлаСкрипта,
		СтрокаUnicode(ПараметрыАдминистрирования.ПарольАдминистратораИнформационнойБазы),
		СтрокаUnicode(ПараметрыАдминистрирования.ПарольАдминистратораКластера));
	Оболочка = Новый COMОбъект("Wscript.Shell");
	Оболочка.RegWrite("HKCU\Software\Microsoft\Internet Explorer\Styles\MaxScriptStatements", 1107296255, "REG_DWORD");
	Оболочка.Run(СтрокаЗапуска, 0);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьСтатусОбновления(ИмяАдминистратораОбновления, ОбновлениеЗапланировано, ОбновлениеВыполнено,
	РезультатОбновления, ИмяФайлаСкрипта = "", СообщенияДляЖурналаРегистрации = Неопределено)
	
	КаталогСкрипта = "";
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		КаталогСкрипта = Лев(ИмяФайлаСкрипта, СтрДлина(ИмяФайлаСкрипта) - 10);
	КонецЕсли;
	
	ОбновлениеКонфигурации.ЗаписатьСтатусОбновления(
		ИмяАдминистратораОбновления,
		ОбновлениеЗапланировано,
		ОбновлениеВыполнено,
		РезультатОбновления,
		КаталогСкрипта,
		СообщенияДляЖурналаРегистрации);
	
КонецПроцедуры 

&НаКлиенте
Функция ВозможенЗапускОбновления()
	
	ВозможенЗапускОбновления = Истина;
	
	#Если ВебКлиент Тогда
		ВозможенЗапускОбновления = Ложь;
		ТекстСообщения = НСтр("ru = 'Обновление программы недоступно в веб-клиенте.'");
	#КонецЕсли
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		ВозможенЗапускОбновления = Ложь;
		ТекстСообщения = НСтр("ru = 'Обновление программы недоступно в клиенте под управлением ОС Linux.'");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.КлиентПодключенЧерезВебСервер() Тогда
		ВозможенЗапускОбновления = Ложь;
		ТекстСообщения = НСтр("ru = 'Обновление программы недоступно при подключении через веб-сервер.'");
	КонецЕсли;
	
	Если Не ВозможенЗапускОбновления Тогда
		
		ПоказатьПредупреждение(, ТекстСообщения);
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(),,
			ТекстСообщения,,Истина);
		
	КонецЕсли;
		
	Возврат ВозможенЗапускОбновления;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПорядокОбновления()
	
	Если НЕ ПустаяСтрока(ИмяФайлаПорядокОбновления) Тогда
		ОбновлениеКонфигурацииКлиент.ОткрытьВебСтраницу(ИмяФайлаПорядокОбновления);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Описание порядка обновления отсутствует.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьОтложенныеОбработчики()
	
	Возврат Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
		И ОбновлениеИнформационнойБазыСлужебный.СтатусНевыполненныхОбработчиков() = "СтатусНеВыполнено";
	
КонецФункции

&НаСервере
Функция ТребуетсяОбновлениеПлатформы(ТребуемаяВерсия)
	
	Если Не ЗначениеЗаполнено(ТребуемаяВерсия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТекущаяВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
	
	Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ТребуемаяВерсия, ТекущаяВерсияПлатформы) > 0;
	
КонецФункции

&НаСервере
Функция ПараметрыСтраницыВыборРежимаОбновленияСервер(СообщенияДляЖурналаРегистрации)
	
	ПараметрыСтраницы = Новый Структура;
	ПараметрыСтраницы.Вставить("ЕстьОтложенныеОбработчики", (ОбновлениеИнформационнойБазыСлужебный.СтатусНевыполненныхОбработчиков() = "СтатусНеВыполнено"));
	ПараметрыСтраницы.Вставить("ИнформацияОСоединениях", СоединенияИБ.ИнформацияОСоединениях(Ложь, СообщенияДляЖурналаРегистрации));
	Возврат ПараметрыСтраницы;
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьДанныеВЖурналРегистрации()
	
	МассивФайлов = НайтиФайлы(КаталогСкрипта, "log*.txt");
	
	Если МассивФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
	
	ФайлЖурнала = МассивФайлов[0];
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ФайлЖурнала.ПолноеИмя);
	
	Для НомерСтроки = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		
		ТекущаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
		Если ПустаяСтрока(ТекущаяСтрока) Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеУровня = "Информация";
		Если Сред(ТекущаяСтрока, 3, 1) = "." И Сред(ТекущаяСтрока, 6, 1) = "." Тогда // Строка с датой
			МассивСтроки = СтрРазделить(ТекущаяСтрока, " ", Ложь);
			МассивДаты = СтрРазделить(МассивСтроки[0], ".");
			МассивВремени = СтрРазделить(МассивСтроки[1], ":");
			ДатаСобытия = Дата(МассивДаты[2], МассивДаты[1], МассивДаты[0], МассивВремени[0], МассивВремени[1], МассивВремени[2]);
			Если МассивСтроки[2] = "{ERR}" Тогда
				ПредставлениеУровня = "Ошибка";
			КонецЕсли;
			Комментарий = СокрЛП(Сред(ТекущаяСтрока, СтрНайти(ТекущаяСтрока, "}") + 2));
			
			Если Комментарий = НСтр("ru = 'Обновление выполнено'") Тогда
				Объект.РезультатОбновления = Истина;
				Продолжить;
			ИначеЕсли Комментарий = НСтр("ru = 'Обновление не выполнено'") Тогда
				Объект.РезультатОбновления = Ложь;
				Продолжить;
			КонецЕсли;
			
		Иначе
			Комментарий = ТекущаяСтрока;
		КонецЕсли;
		
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, ПредставлениеУровня, Комментарий, ДатаСобытия);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Планирование обновления в указанное время.

// Запланировать обновление конфигурации.
//
&НаКлиенте
Функция ЗапланироватьОбновлениеКонфигурации()
	Если Не УдалитьЗадачуПланировщика(Объект.КодЗадачиПланировщика) Тогда
		Возврат Ложь;
	КонецЕсли;
	ИмяГлавногоФайлаСкрипта = СформироватьФайлыСкриптаОбновления(Ложь);
	
	ИмяЗапускаемогоСкрипта = ОпределитьИмяСкрипта();
	ПутьЗапускаемогоСкрипта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 //nologo ""%3"" /p1:""%4"" /p2:""%5""",
		ИмяЗапускаемогоСкрипта, ?(РежимОтладкиСкрипта(), "//X //D", ""), ИмяГлавногоФайлаСкрипта,
		СтрокаUnicode(ПараметрыАдминистрирования.ПарольАдминистратораИнформационнойБазы),
		СтрокаUnicode(ПараметрыАдминистрирования.ПарольАдминистратораКластера));
	
	Объект.КодЗадачиПланировщика = СоздатьЗадачуПланировщика(ПутьЗапускаемогоСкрипта, Объект.ДатаВремяОбновления);
	ЗаписатьСтатусОбновления(ИмяПользователя(), Объект.КодЗадачиПланировщика <> 0, Ложь, Ложь);
	Возврат Объект.КодЗадачиПланировщика <> 0;
КонецФункции

&НаКлиенте
Функция СоздатьЗадачуПланировщика(Знач ИмяФайлаПрограммы, Знач ДатаВремя)
	
	ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
	
	Если ВерсияWindowsВышеVista() Тогда
		Возврат СоздатьЗадачуПланировщикаScheduleService(ИмяФайлаПрограммы, ДатаВремя, ИмяСобытияЖурнала);
	Иначе
		Возврат СоздатьЗадачуПланировщикаScheduledJob(ИмяФайлаПрограммы, ДатаВремя, ИмяСобытияЖурнала);
	КонецЕсли;
	
КонецФункции

// Создать задачу планировщика ОС Windows.
//
// Параметры:
//  ИмяФайлаПрограммы	- Строка	- путь к запускаемому приложению или файлу.
//  ДатаВремя  			- Дата		- Дата и время запуска. Значение даты может быть 
//									  в интервале [текущая дата, текущая дата + 30 дней).
//
// Возвращаемое значение:
//   Число   - код созданной задачи планировщика или "Неопределено" при ошибке.
//
&НаКлиенте
Функция СоздатьЗадачуПланировщикаScheduledJob(Знач ИмяФайлаПрограммы, Знач ДатаВремя, Знач ИмяСобытияЖурнала)
	
	Попытка
		
		Планировщик = ОбъектWMI().Get("Win32_ScheduledJob");
		КодЗадачи = 0;
		КодОшибки = Планировщик.Create(ИмяФайлаПрограммы, // Command
			ПреобразоватьВремяВФорматCIM(ДатаВремя), // StartTime
			Ложь, // RunRepeatedly
			, // DaysOfWeek
			Pow(2, День(ДатаВремя) - 1), // DaysOfMonth
			Ложь, // InteractWithDesktop
			КодЗадачи); // out JobId
		
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании задачи планировщика: %1'"), ОписаниеОшибки());
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Ошибка", ТекстСообщения);
		Возврат 0;
		
	КонецПопытки;
	
	Если КодОшибки <> 0 Тогда // Коды ошибок: http://msdn2.microsoft.com/en-us/library/aa389389(VS.85).aspx.
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании задачи планировщика: %1'"), КодОшибки);
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Ошибка", ТекстСообщения);
		Возврат 0;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Задача планировщика успешно запланирована (команда: %1; дата: %2; код задачи: %3).'");
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала,
		"Информация", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяФайлаПрограммы, ДатаВремя, КодЗадачи));
	
	Возврат КодЗадачи;
	
КонецФункции

&НаКлиенте
Функция СоздатьЗадачуПланировщикаScheduleService(Знач ИмяФайлаПрограммы, Знач ДатаВремя, Знач ИмяСобытияЖурнала)
	
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел;
	КодЗадачи = Формат(ГенераторСлучайныхЧисел.СлучайноеЧисло(1000, 9999), "ЧГ=0");
	ИмяЗадачи = ИмяЗадачиScheduleService(КодЗадачи);
	ДатаЗапуска = Формат(ДатаВремя, "ДФ=yyyy-MM-ddTHH:mm:ss");
	
	РазделительИмениИПараметров = СтрНайти(ИмяФайлаПрограммы, ".exe") + 3;
	ИмяПрограммы = Лев(ИмяФайлаПрограммы, РазделительИмениИПараметров);
	ПараметрыЗапуска = Сред(ИмяФайлаПрограммы, РазделительИмениИПараметров + 2);
	
	Попытка
		
		СлужбаПланировщика = СлужбаПланировщика();
		ОписаниеЗадачи = СлужбаПланировщика.NewTask(0);
		ОписаниеЗадачи.RegistrationInfo.Description = НСтр("ru = 'Обновление конфигурации 1С:Предприятие'");
	
		ОписаниеЗадачи.Principal.RunLevel = 1;
		
		ОписаниеЗадачи.Settings.Enabled = Истина;
		ОписаниеЗадачи.Settings.Hidden = Ложь;
		
		Триггер = ОписаниеЗадачи.Triggers.Create(1);
		Триггер.StartBoundary = ДатаЗапуска;
		Триггер.Enabled = Истина;
		
		Действие = ОписаниеЗадачи.Actions.Create(0);
		Действие.Path = ИмяПрограммы;
		Действие.Arguments = ПараметрыЗапуска;
		
		Корень = СлужбаПланировщика.GetFolder("\");
		Задача = Корень.RegisterTaskDefinition(ИмяЗадачи, ОписаниеЗадачи, 6, "SYSTEM", Неопределено, 4);
		
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании задачи планировщика: %1'"), ОписаниеОшибки());
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Ошибка", ТекстСообщения);
		Возврат 0;
		
	КонецПопытки;
	
	Возврат КодЗадачи;
	
КонецФункции

&НаКлиенте
Функция СуществуетЗадачаПланировщика(Знач КодЗадачи)
	
	Если КодЗадачи = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВерсияWindowsВышеVista() Тогда
		ЗадачаПланировщика = ПолучитьЗадачуПланировщикаScheduleService(КодЗадачи);
	Иначе
		ЗадачаПланировщика = ПолучитьЗадачуПланировщикаScheduledJob(КодЗадачи);
	КонецЕсли;
	
	Возврат ЗадачаПланировщика <> Неопределено;
	
КонецФункции

&НаКлиенте
Функция ПолучитьЗадачуПланировщикаScheduledJob(Знач КодЗадачи)
	
	Попытка
		Возврат ОбъектWMI().Get("Win32_ScheduledJob.JobID=" + КодЗадачи);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьЗадачуПланировщикаScheduleService(Знач КодЗадачи)
	
	НайденнаяЗадача = Неопределено;
	ИмяЗадачи = ИмяЗадачиScheduleService(КодЗадачи);
	
	СлужбаПланировщика = СлужбаПланировщика();
	Корень = СлужбаПланировщика.GetFolder("\");
	СписокЗадач = Корень.GetTasks(0);
	
	Для Каждого Задача Из СписокЗадач Цикл
		Если Задача.Name = ИмяЗадачи Тогда
			НайденнаяЗадача = Задача;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденнаяЗадача;
	
КонецФункции

&НаКлиенте
Функция УдалитьЗадачуПланировщика(КодЗадачи)
	
	ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
	Если КодЗадачи = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не СуществуетЗадачаПланировщика(КодЗадачи) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ВерсияWindowsВышеVista() Тогда
		Возврат УдалитьЗадачуПланировщикаScheduleService(КодЗадачи, ИмяСобытияЖурнала);
	Иначе
		Возврат УдалитьЗадачуПланировщикаScheduledJob(КодЗадачи, ИмяСобытияЖурнала);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция УдалитьЗадачуПланировщикаScheduledJob(КодЗадачи, ИмяСобытияЖурнала)
	
	Попытка
		
		Сервис = ОбъектWMI();
		Задача = ПолучитьЗадачуПланировщикаScheduledJob(КодЗадачи);
		КодОшибки = Задача.Delete();
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Ошибка при удалении задачи планировщика: %1'");
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Ошибка",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ОписаниеОшибки()));
		Возврат Ложь;
	КонецПопытки;
	
	Результат = КодОшибки = 0;
	Если Не Результат Тогда // Коды ошибок: http://msdn2.microsoft.com/en-us/library/aa389957(VS.85).aspx.
		ТекстСообщения = НСтр("ru = 'Ошибка при удалении задачи планировщика: %1'");
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Ошибка",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КодОшибки));
		Возврат Результат;
	КонецЕсли;
	ТекстСообщения = НСтр("ru = 'Задача планировщика успешно удалена (код задачи: %1).'");
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Информация",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КодЗадачи));
	КодЗадачи = 0;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция УдалитьЗадачуПланировщикаScheduleService(КодЗадачи, ИмяСобытияЖурнала)
	
	ИмяЗадачи = ИмяЗадачиScheduleService(КодЗадачи);
	
	Попытка
		
		СлужбаПланировщика = СлужбаПланировщика();
		Корень = СлужбаПланировщика.GetFolder("\");
		Результат = Корень.DeleteTask(ИмяЗадачи, 0);
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Ошибка при удалении задачи планировщика: %1'");
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Ошибка",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ОписаниеОшибки()));
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ИмяЗадачиScheduleService(Знач КодЗадачи)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Обновление конфигурации (%1)'"), Формат(КодЗадачи, "ЧГ=0"));
	
КонецФункции

&НаКлиенте
Функция ПреобразоватьВремяВФорматCIM(ДатаВремя)
	Локатор			= Новый COMObject("WbemScripting.SWbemLocator");
	Сервис			= Локатор.ConnectServer(".", "\root\cimv2");
	ComputerSystems	= Сервис.ExecQuery("Select * from Win32_ComputerSystem");
	Для Каждого ComputerSystem Из ComputerSystems Цикл
		Разница	= ComputerSystem.CurrentTimeZone;
		Час		= Формат(ДатаВремя,"ДФ=ЧЧ");
		Минута	= Формат(ДатаВремя,"ДФ=мм");
		Разница	= ?(Разница > 0, "+" + Формат(Разница, "ЧГ=0"), Формат(Разница, "ЧГ=0"));
		Возврат "********" + Час + Минута + "00.000000" + Разница;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция ОбъектWMI()
	// WMI: http://www.microsoft.com/technet/scriptcenter/resources/wmifaq.mspx.
	Локатор = Новый COMObject("WbemScripting.SWbemLocator");
	Возврат Локатор.ConnectServer(".", "\root\cimv2");
КонецФункции

&НаКлиенте
Функция СлужбаПланировщика()
	СлужбаПланировщика = Новый COMObject("Schedule.Service");
	СлужбаПланировщика.Connect();
	Возврат СлужбаПланировщика;
КонецФункции

&НаКлиенте
Функция ВозможноЗапланироватьОбновление(Знач ВыдаватьСообщения = Истина)
	
	ВерсияWindowsВышеVista = ВерсияWindowsВышеVista();
	
	Попытка
		ОбъектAPI = ?(ВерсияWindowsВышеVista, СлужбаПланировщика(), ОбъектWMI());
		Возврат ОбъектAPI <> Неопределено;
	Исключение
		ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Ошибка", ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Определяет что текущая версия windows больше Vista (Vista, Windows 7, Windows 8)
//
Функция ВерсияWindowsВышеVista()
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ВерсияОС = СистемнаяИнформация.ВерсияОС;
	
	ПозицияТочки = СтрНайти(ВерсияОС, ".");
	НомерВерсии = Сред(ВерсияОС, ПозицияТочки - 1, 1);
	
	Возврат Число(НомерВерсии) >= 6;
	
КонецФункции

&НаКлиенте
// Возвратить каталог файла - часть пути без имени файла.
//
// Параметры:
//  ПутьКФайлу  - Строка - путь к файлу.
//
// Возвращаемое значение:
//   Строка   - каталог файла
Функция ПолучитьКаталогФайла(Знач ПутьКФайлу)
	
	ПозицияСимвола = СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
	Если ПозицияСимвола > 1 Тогда
		Возврат Сред(ПутьКФайлу, 1, ПозицияСимвола - 1); 
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти
