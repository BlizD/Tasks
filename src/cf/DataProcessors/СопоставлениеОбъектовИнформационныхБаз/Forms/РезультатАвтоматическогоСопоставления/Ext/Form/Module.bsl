
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ВыдаватьПредупреждениеПриЗакрытииФормы = Истина;
	
	// Проверка, что форма открыта программно.
	Если Не Параметры.Свойство("ИмяФайлаСообщенияОбмена") Тогда
		
		НСтрока = НСтр("ru = 'Форма не может быть открыта интерактивно.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,,, Отказ);
		Возврат;
		
	КонецЕсли;
	
	// Инициализируем обработку переданными параметрами.
	ЗаполнитьЗначенияСвойств(Объект, Параметры,, "СписокИспользуемыхПолей, СписокПолейТаблицы");
	
	МаксимальноеКоличествоПользовательскихПолей         = Параметры.МаксимальноеКоличествоПользовательскихПолей;
	АдресВременногоХранилищаТаблицыНеутвержденныхСвязей = Параметры.АдресВременногоХранилищаТаблицыНеутвержденныхСвязей;
	СписокИспользуемыхПолей  = Параметры.СписокИспользуемыхПолей;
	СписокПолейТаблицы       = Параметры.СписокПолейТаблицы;
	СписокПолейСопоставления = Параметры.СписокПолейСопоставления;
	
	// установка заголовка формы
	Заголовок = Параметры.Заголовок;
	
	СценарийАвтоматическогоСопоставленияОбъектов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПорядковыйНомерПерехода = 0;
	
	// Позиционируемся на втором шаге помощника.
	УстановитьПорядковыйНомерПерехода(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если  Объект.ТаблицаАвтоматическиСопоставленныхОбъектов.Количество() > 0
		И ВыдаватьПредупреждениеПриЗакрытииФормы = Истина Тогда
			
		ПоказатьПредупреждение(, НСтр("ru = 'Форма содержит данные автоматического сопоставления. Действие отменено.'"));
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Применить(Команда)
	
	ВыдаватьПредупреждениеПриЗакрытииФормы = Ложь;
	
	// контекстный вызов сервера
	ОповеститьОВыборе(ПоместитьТаблицуАвтоматическиСопоставленныхОбъектовВоВременноеХранилище());
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ВыдаватьПредупреждениеПриЗакрытииФормы = Ложь;
	
	ОповеститьОВыборе(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	УстановитьПометкиНаСервере(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	УстановитьПометкиНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	ВыдаватьПредупреждениеПриЗакрытииФормы = Ложь;
	
	ОповеститьОВыборе(Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ (Поставляемая часть).

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода.
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц.
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		РезультатВычисления = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// Обработчик ОбработкаДлительнойОперации.
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		РезультатВычисления = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяОбработчикаПриОткрытии = "",
									ДлительнаяОперация = Ложь,
									ИмяОбработчикаДлительнойОперации = "")
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы = ИмяОсновнойСтраницы;
	
	НоваяСтрока.ИмяОбработчикаПриОткрытии = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПоместитьТаблицуАвтоматическиСопоставленныхОбъектовВоВременноеХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ТаблицаАвтоматическиСопоставленныхОбъектов.Выгрузить(Новый Структура("Пометка", Истина), "УникальныйИдентификаторПриемника, УникальныйИдентификаторИсточника, ТипИсточника, ТипПриемника"));
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьПолейТаблицы(Знач ИмяТаблицыФормы, Знач МаксКоличествоПользовательскихПолей)
	
	ИмяПоляИсточника = СтрЗаменить("#ИмяТаблицыФормы#ИсточникПолеNN","#ИмяТаблицыФормы#", ИмяТаблицыФормы);
	ИмяПоляПриемника = СтрЗаменить("#ИмяТаблицыФормы#ПриемникПолеNN","#ИмяТаблицыФормы#", ИмяТаблицыФормы);
	
	// Снимаем видимость всех полей таблицы сопоставления.
	Для НомерПоля = 1 По МаксКоличествоПользовательскихПолей Цикл
		
		ПолеИсточника = СтрЗаменить(ИмяПоляИсточника, "NN", Строка(НомерПоля));
		ПолеПриемника = СтрЗаменить(ИмяПоляПриемника, "NN", Строка(НомерПоля));
		
		Элементы[ПолеИсточника].Видимость = Ложь;
		Элементы[ПолеПриемника].Видимость = Ложь;
		
	КонецЦикла;
	
	// Устанавливаем видимость полей таблицы сопоставления выбранных пользователем.
	Для Каждого Элемент Из Объект.СписокИспользуемыхПолей Цикл
		
		НомерПоля = Объект.СписокИспользуемыхПолей.Индекс(Элемент) + 1;
		
		ПолеИсточника = СтрЗаменить(ИмяПоляИсточника, "NN", Строка(НомерПоля));
		ПолеПриемника = СтрЗаменить(ИмяПоляПриемника, "NN", Строка(НомерПоля));
		
		// Устанавливаем видимость полей.
		Элементы[ПолеИсточника].Видимость = Элемент.Пометка;
		Элементы[ПолеПриемника].Видимость = Элемент.Пометка;
		
		// Устанавливаем заголовки полей.
		Элементы[ПолеИсточника].Заголовок = Элемент.Представление;
		Элементы[ПолеПриемника].Заголовок = Элемент.Представление;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкиНаСервере(Пометка)
	
	ТаблицаЗначений = Объект.ТаблицаАвтоматическиСопоставленныхОбъектов.Выгрузить();
	
	ТаблицаЗначений.ЗаполнитьЗначения(Пометка, "Пометка");
	
	Объект.ТаблицаАвтоматическиСопоставленныхОбъектов.Загрузить(ТаблицаЗначений);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиДалее()
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНазад()
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики ожидания

&НаКлиенте
Процедура ОбработчикОжиданияФоновогоЗадания()
	
	ДлительнаяОперацияЗавершена = Ложь;
	
	Состояние = ОбменДаннымиВызовСервера.СостояниеЗадания(ИдентификаторЗадания);
	
	Если Состояние = "Активно" Тогда
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияФоновогоЗадания", 5, Истина);
		
	ИначеЕсли Состояние = "Завершено" Тогда
		
		ДлительнаяОперация = Ложь;
		ДлительнаяОперацияЗавершена = Истина;
		
		ПерейтиДалее();
		
	Иначе // ЗавершеноАварийно
		
		ДлительнаяОперация = Ложь;
		
		ПерейтиНазад();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий переходов.

// Страница 0: Ошибка автоматического сопоставления.
//
&НаКлиенте
Функция Подключаемый_ОшибкаСопоставленияОбъектов_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Элементы.Закрыть1.КнопкаПоУмолчанию = Истина;
	
КонецФункции

// Страница 1 (ожидание): Сопоставление объектов.
//
&НаКлиенте
Функция Подключаемый_ОжиданиеСопоставленияОбъектов_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ВыполнитьСопоставлениеОбъектов(Отказ);
	
КонецФункции

// Страница 1 (ожидание): Сопоставление объектов.
//
&НаКлиенте
Функция Подключаемый_ОжиданиеСопоставленияОбъектовДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияФоновогоЗадания", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

// Страница 1 (ожидание): Сопоставление объектов.
//
&НаКлиенте
Функция Подключаемый_ОжиданиеСопоставленияОбъектовДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперацияЗавершена Тогда
		
		ВыполнитьСопоставлениеОбъектовОкончание(Отказ);
		
	КонецЕсли;
	
КонецФункции

// Страница 1: Сопоставление объектов.
//
&НаСервере
Процедура ВыполнитьСопоставлениеОбъектов(Отказ)
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ИдентификаторЗадания = Неопределено;
	АдресВременногоХранилища = "";
	
	Попытка
		
		РеквизитыФормы = Новый Структура;
		РеквизитыФормы.Вставить("СписокИспользуемыхПолей",  СписокИспользуемыхПолей);
		РеквизитыФормы.Вставить("СписокПолейТаблицы",       СписокПолейТаблицы);
		РеквизитыФормы.Вставить("СписокПолейСопоставления", СписокПолейСопоставления);
		
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("КонтекстОбъекта", ОбменДаннымиСервер.ПолучитьКонтекстОбъекта(РеквизитФормыВЗначение("Объект")));
		ПараметрыМетода.Вставить("РеквизитыФормы", РеквизитыФормы);
		ПараметрыМетода.Вставить("ТаблицаНеутвержденныхСвязей", ПолучитьИзВременногоХранилища(АдресВременногоХранилищаТаблицыНеутвержденныхСвязей));
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.СопоставлениеОбъектовИнформационныхБаз.ВыполнитьАвтоматическоеСопоставлениеОбъектов",
			ПараметрыМетода,
			НСтр("ru = 'Автоматическое сопоставление объектов'"));
		
		Если Результат.ЗаданиеВыполнено Тогда
			ПослеСопоставленияОбъектов(ПолучитьИзВременногоХранилища(Результат.АдресХранилища));
		Иначе
			ДлительнаяОперация = Истина;
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
			АдресВременногоХранилища = Результат.АдресХранилища;
		КонецЕсли;
		
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Помощник сопоставления объектов.Автоматическое сопоставление'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Страница 1: Сопоставление объектов.
//
&НаСервере
Процедура ВыполнитьСопоставлениеОбъектовОкончание(Отказ)
	
	Попытка
		ПослеСопоставленияОбъектов(ПолучитьИзВременногоХранилища(АдресВременногоХранилища));
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Помощник сопоставления объектов.Автоматическое сопоставление'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Страница 1: Сопоставление объектов.
//
&НаСервере
Процедура ПослеСопоставленияОбъектов(Знач РезультатСопоставления)
	
	ОбработкаОбъект = Обработки.СопоставлениеОбъектовИнформационныхБаз.Создать();
	ОбменДаннымиСервер.ЗагрузитьКонтекстОбъекта(РезультатСопоставления.КонтекстОбъекта, ОбработкаОбъект);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ПустойРезультат = РезультатСопоставления.ПустойРезультат;
	
	Если Не ПустойРезультат Тогда
		
		Модифицированность = Истина;
		
		// Устанавливаем заголовки и видимость полей таблицы на форме.
		УстановитьВидимостьПолейТаблицы("ТаблицаАвтоматическиСопоставленныхОбъектов", МаксимальноеКоличествоПользовательскихПолей);
		
	КонецЕсли;
	
КонецПроцедуры

// Страница 2: Работа с результатом автоматического сопоставления.
//
&НаКлиенте
Функция Подключаемый_СопоставлениеОбъектов_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Элементы.Применить.КнопкаПоУмолчанию = Истина;
	
	Если ПустойРезультат Тогда
		ПропуститьСтраницу = Истина;
	КонецЕсли;
	
КонецФункции

// Страница 3: Пустой результат автоматического сопоставления.
//
&НаКлиенте
Функция Подключаемый_ПустойРезультатСопоставленияОбъектовПустойРезультатСопоставленияОбъектов_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация переходов помощника.

&НаСервере
Процедура СценарийАвтоматическогоСопоставленияОбъектов()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "ОшибкаСопоставленияОбъектов", "ОшибкаСопоставленияОбъектов_ПриОткрытии");
	
	// Ожидание сопоставления объектов.
	ТаблицаПереходовНоваяСтрока(2, "ОжиданиеСопоставленияОбъектов",, Истина, "ОжиданиеСопоставленияОбъектов_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(3, "ОжиданиеСопоставленияОбъектов",, Истина, "ОжиданиеСопоставленияОбъектовДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(4, "ОжиданиеСопоставленияОбъектов",, Истина, "ОжиданиеСопоставленияОбъектовДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Работа с результатом автоматического сопоставления.
	ТаблицаПереходовНоваяСтрока(5, "СопоставлениеОбъектов", "СопоставлениеОбъектов_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(6, "ПустойРезультатСопоставленияОбъектов", "ПустойРезультатСопоставленияОбъектовПустойРезультатСопоставленияОбъектов_ПриОткрытии");
	
КонецПроцедуры

#КонецОбласти
