
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Рассмотрено = Истина;
		ПриСозданииИПриЧтенииНаСервере();
		Взаимодействия.УстановитьПредметПоДаннымЗаполнения(Параметры, Предмет);
		ИзменилисьКонтакты = Истина;
	КонецЕсли;
	
	Взаимодействия.ЗаполнитьСписокВыбораДляРассмотретьПосле(Элементы.РассмотретьПосле.СписокВыбора);
	
	// Подготовить оповещения взаимодействий.
	Взаимодействия.ПодготовитьОповещения(ЭтотОбъект,Параметры);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ВзаимодействияКлиент.ОтработатьОповещение(ЭтотОбъект, ИмяСобытия, Параметр, Источник);

	Если ИмяСобытия = "Запись_ПрисоединенныйФайл" Тогда
		Если ТипЗнч(Источник) = Тип("СправочникСсылка.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы") Тогда
			
			ВложенияТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
			Если ВложенияТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			РеквизитыФайла = РеквизитыФайла(Источник);
			ЗаполнитьЗначенияСвойств(ВложенияТекущиеДанные, РеквизитыФайла);
			ВложенияТекущиеДанные.РазмерПредставление = 
				ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(РеквизитыФайла.Размер);
			ВложенияТекущиеДанные.ИмяФайла = ?(ПустаяСтрока(РеквизитыФайла.Расширение),
			                                   РеквизитыФайла.Наименование,
			                                   РеквизитыФайла.Наименование + "." + РеквизитыФайла.Расширение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем СтрокаНачало, СтрокаКонец, КолонкаНачало, КолонкаКонец;
	Перем НачалоВыделения, КонецВыделения;
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Документ.ЭлектронноеПисьмоИсходящее.Форма.ФормированиеВнешнейСсылкиНаОбъект") Тогда
		
		Если ФорматСообщения = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст") Тогда
			Элементы.ТекстПисьма.ПолучитьГраницыВыделения(СтрокаНачало, КолонкаНачало, СтрокаКонец, КолонкаКонец);
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.УстановитьТекст(ТекстПисьма);
			СтрокаВставки = ТекстовыйДокумент.ПолучитьСтроку(СтрокаНачало);
			СтрокаВставки = Лев(СтрокаВставки, КолонкаНачало - 1) + ВыбранноеЗначение + Прав(СтрокаВставки,СтрДлина(СтрокаВставки) - КолонкаКонец + 1);
			ТекстовыйДокумент.ЗаменитьСтроку(СтрокаНачало, СтрокаВставки);
			ТекстПисьма = ТекстовыйДокумент.ПолучитьТекст();
		Иначе
			
			Элементы.ТекстПисьмаФорматированныйДокумент.ПолучитьГраницыВыделения(НачалоВыделения, КонецВыделения);
			ТекстПисьмаФорматированныйДокумент.Вставить(НачалоВыделения, ВыбранноеЗначение);
			
		КонецЕсли;
	
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ЖурналДокументов.Взаимодействия.Форма.ПараметрыЭлектронногоПисьма") Тогда
		
		Если ВыбранноеЗначение <> Неопределено И Объект.СтатусПисьма <> ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено") Тогда
			
			Объект.УведомитьОДоставке          = ВыбранноеЗначение.УведомитьОДоставке;
			Объект.УведомитьОПрочтении         = ВыбранноеЗначение.УведомитьОПрочтении;
			Объект.ВключатьТелоИсходногоПисьма = ВыбранноеЗначение.ВключатьТелоИсходногоПисьма;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.АдреснаяКнига")
		ИЛИ ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.УточнениеКонтактов") Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") И ТипЗнч(ВыбранноеЗначение) <> Тип("Соответствие") Тогда
			Возврат;
		КонецЕсли;
		
		// Получим список адресатов
		СоответствиеТабличныхЧастей = Новый Соответствие;
		СоответствиеТабличныхЧастей.Вставить("Кому", Объект.ПолучателиПисьма);
		СоответствиеТабличныхЧастей.Вставить("Копии", Объект.ПолучателиКопий);
		СоответствиеТабличныхЧастей.Вставить("Скрытые", Объект.ПолучателиСкрытыхКопий);
		СоответствиеТабличныхЧастей.Вставить("Ответ", Объект.ПолучателиОтвета);
		
		ДляПодбора = (Объект.СтатусПисьма <> ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено"));
		
		// Заполним адресатов
		Если ДляПодбора Тогда
			ЗаполнитьПодобранныхПолучателей(СоответствиеТабличныхЧастей, ВыбранноеЗначение);
		Иначе
			ЗаполнитьУточненныеКонтакты(ВыбранноеЗначение);
		КонецЕсли;
		
		// Установим признак модифицированности.
		ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "ЭлектронноеПисьмоИсходящее");
		ИзменилисьКонтакты = Истина;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Взаимодействия.УстановитьРеквизитыФормыВзаимодействияПоДаннымРегистра(ЭтотОбъект);
	ПриСозданииИПриЧтенииНаСервере();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ОчиститьСообщения();
	
	Если Не ВыполняетсяОтправка Тогда
		
		Если ПроверитьЗаполнениеСписковАдресатов() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик") 
			ИЛИ Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено") Тогда
			ВзаимодействияКлиент.ПроверкаЗаполненностиРеквизитовОтложеннойОтправки(Объект, Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
			Если СтрокаТаблицыВложений.Расположение = 2 Тогда
				Попытка
					Данные = Новый ДвоичныеДанные(СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере);
					СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(Данные, "");
					СтрокаТаблицыВложений.Расположение = 4;
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,"Вложения",, Отказ);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
	Объект.ЕстьВложения = (Вложения.Количество() <> 0);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, РежимЗаписи, РежимПроведения)
	
	ДокументHTMLТекущегоПисьмаПодготовлен = Ложь;
	
	// Подготовим документ HTML из содержимого форматированного документа.
	Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML
		 И ТекущийОбъект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
		
		ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();
		
		СтруктураВложений = Новый Структура;
		ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекущийОбъект.ТекстHTML, СтруктураВложений);
		Для каждого Вложение Из СтруктураВложений Цикл
			
			НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
			НоваяСтрока.ИмяФайла = Вложение.Ключ;
			НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
			НоваяСтрока.Картинка = Вложение.Значение;
			
		КонецЦикла;
		
		Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
			
			ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекущийОбъект.ТекстHTML);
			Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
			    ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам.Выгрузить());
			ДокументHTMLТекущегоПисьмаПодготовлен = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ТекущийОбъект.Текст = ТекстПисьма;
		
	КонецЕсли;
	
	Если НеобходимаОбработкаПисьмаОснования() Тогда
		
		Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			
			ТекущийОбъект.ТекстHTML = СформироватьТекстПисьмаВключаяПисьмоОснование(
				?(ДокументHTMLТекущегоПисьмаПодготовлен,ДокументHTML,Неопределено), ТекущийОбъект);
				
			ТекущийОбъект.Текст = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекущийОбъект.ТекстHTML);
			
		Иначе
			
			ТекущийОбъект.Текст = СформироватьТекстПисьмаВключаяПисьмоОснование(Неопределено, ТекущийОбъект);
			
		КонецЕсли;
		
	Иначе
		
		Если ДокументHTMLТекущегоПисьмаПодготовлен Тогда
			
			ТекущийОбъект.ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			ТекущийОбъект.Текст     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекущийОбъект.ТекстHTML);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняетсяОтправка И Не ОтправлятьСообщенияСразу Тогда
		
		ТекущийОбъект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
		
	КонецЕсли;
	
	Если Объект.СтатусПисьма <> ТекущийСтатусПисьма 
		И ТекущийОбъект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее 
		И Не ПолучитьФункциональнуюОпцию("ОтправлятьПисьмаВФорматеHTML")
		И (ТипЗнч(ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		ИЛИ ТипЗнч(ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"))
		И ТипТекстаВходящегоПисьма = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
		
		ТекущийОбъект.ЕстьВложения = Истина;
		
	КонецЕсли;
	
	ТекущийОбъект.Размер = ОценитьРазмерПисьма();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Взаимодействия.ПередЗаписьюВзаимодействияИзФормы(ЭтотОбъект, ТекущийОбъект, ИзменилисьКонтакты);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Взаимодействия.ПриЗаписиВзаимодействияИзФормы(ТекущийОбъект, ЭтотОбъект);
	
	НайденнаяПапка = Неопределено;
	
	Если Объект.СтатусПисьма <> Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Письмо = ТекущийОбъект.Ссылка;
	
	// Добавим в список удаленных вложений ранее сохраненные картинки, отображаемые в теле форматированного документа.
	ТаблицаВложенийКартинокФорматированногоДокумента = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(Письмо);
	Для каждого Вложение Из ТаблицаВложенийКартинокФорматированногоДокумента Цикл
		УдаленныеВложения.Добавить(Вложение.Ссылка);
	КонецЦикла;
	
	// Удалим удаленные вложения
	Для Каждого УдаленноеВложение Из УдаленныеВложения Цикл
		ОбъектВложение = УдаленноеВложение.Значение.ПолучитьОбъект();
		ОбъектВложение.Удалить();
	КонецЦикла;
	
	УдаленныеВложения.Очистить();
	
	Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		
		Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
			
			ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
			АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
			ПрисоединенныйФайл = УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			                     Письмо,
			                     АдресКартинкиВоВременномХранилище,
			                     "_" + СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_"),
			                     ДвоичныеДанныеКартинки.Размер());
			
			Если ПрисоединенныйФайл <> Неопределено Тогда
				ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИдентификаторФайлаДляHTML;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НеобходимаОбработкаПисьмаОснования() Тогда
		
		ВложенияПисьмаОснования = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(Объект.ВзаимодействиеОснование);
		
		Для Каждого Вложение Из ВложенияПисьмаОснования Цикл
			
			ДвоичныеДанныеКартинки = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Вложение.Ссылка);
			АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
			ПрисоединенныйФайл = УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			Письмо,АдресКартинкиВоВременномХранилище,Вложение.Наименование, Вложение.Размер);
			Если ПрисоединенныйФайл <> Неопределено Тогда
				ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИДФайлаЭлектронногоПисьма;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
		
		Размер = 0;
		ИмяФайла = СтрокаТаблицыВложений.ИмяФайла;
		
		Если СтрокаТаблицыВложений.Расположение = 4 Тогда
			// из временного хранилища
			УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
				Письмо, СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере, ИмяФайла, Размер);
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 3 Тогда
			// из файла на сервере
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 1 Тогда
			
			УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
				Письмо, СтрокаТаблицыВложений.Ссылка, УникальныйИдентификатор);
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 0 Тогда
			// перезаписать вложение
			
		КонецЕсли;
		
		СтрокаТаблицыВложений.Расположение = 0;
		
	КонецЦикла;
	
	Если Объект.СтатусПисьма <> ТекущийСтатусПисьма Тогда
		ПрикрепитьВходящееПисьмоОснованиеКакВложениеЕслиНеобходимо(ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьВложения();
	Взаимодействия.УстановитьЗаголовокФормыЭлектронногоПисьма(ЭтотОбъект);
	УстановитьЗаголовокКнопкиПоУмолчанию();
	
	Если Объект.СтатусПисьма <> ТекущийСтатусПисьма Тогда
		
		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(Объект.Ссылка,
			Взаимодействия.ОпределитьПапкуДляПисьмаПоУмолчанию(Объект.Ссылка, Истина));
		ТекущийСтатусПисьма = Объект.СтатусПисьма;
		
	КонецЕсли;
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ВзаимодействияКлиент.ВзаимодействиеПредметПослеЗаписи(ЭтотОбъект,
		Объект,
		ПараметрыЗаписи,
		"ЭлектронноеПисьмоИсходящее");
	
	ОбновитьОтображениеДанных();

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыОписаниеДополнительноПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "СтраницаДополнительныеРеквизиты"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура РассмотретьПослеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ОбработатьВыборВПолеРассмотретьПосле(
		РассмотретьПосле, ВыбранноеЗначение, СтандартнаяОбработка, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтправителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.УчетнаяЗапись <> ВыбранноеЗначение Тогда
		ИзменитьПодпись(Объект.УчетнаяЗапись, ВыбранноеЗначение);
		Объект.УчетнаяЗапись = ВыбранноеЗначение;
		ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
		Если ЭлементСписка <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			Объект.ОтправительПредставление = ЭлементСписка.Представление;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейПисьмаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	Попытка
		Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Элемент.ТекстРедактирования);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , Элемент.Имя, "Объект");
		Возврат;
	КонецПопытки;
	
	Если Объект.СтатусПисьма <> ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено") Тогда
		
		Если Элемент.Имя = "СписокПолучателейПисьма" Тогда
			ГруппаПодбора = НСтр("ru = 'Кому'");
		ИначеЕсли Элемент.Имя = "СписокПолучателейКопий" Тогда
			ГруппаПодбора = НСтр("ru = 'Копии'");
		ИначеЕсли Элемент.Имя = "СписокПолучателейСкрытыхКопий" Тогда
			ГруппаПодбора = НСтр("ru = 'Скрытые'");
		КонецЕсли;
		
		РедактироватьСписокПолучателей(Истина, ГруппаПодбора);
		
	Иначе
		
		РедактироватьСписокПолучателей(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	ИмяЭлемента = Элемент.Имя;
	ИмяСвязаннойТаблицы = ПолучитьИмяСвязаннойТаблицы(ИмяЭлемента);
	
	Если Не ПустаяСтрока(Текст) Тогда
		
		Модифицированность = Истина;
		
		ТекстДляПолученияДанныхВыбора = "";
		
		ПодстрокиВведенногоТекста = СтрРазделить(Текст, ";");
		ПодстрокиДанныхОбъекта    = СтрРазделить(Объект[ИмяЭлемента], ";");
		
		Если (ПодстрокиВведенногоТекста.Количество() < ПодстрокиДанныхОбъекта.Количество()) 
			ИЛИ (ПодстрокиВведенногоТекста.Количество() > (ПодстрокиДанныхОбъекта.Количество()+1)) Тогда
			
			ДанныеВыбора = Новый СписокЗначений;
			ДанныеВыбора.Добавить(Текст);
			Объект[ИмяЭлемента] = Текст;
			ПреобразоватьИменаПолучателей(Объект[ИмяЭлемента], ИмяСвязаннойТаблицы, Элемент.Имя);
			Возврат;
			
		КонецЕсли;
		
		Для Инд = 0 По (ПодстрокиВведенногоТекста.Количество()-1) Цикл
			Если Инд > (ПодстрокиДанныхОбъекта.Количество()-1) 
				ИЛИ ПодстрокиВведенногоТекста[Инд] <> ПодстрокиДанныхОбъекта[Инд] Тогда
				ТекстДляПолученияДанныхВыбора = 
					СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ПодстрокиВведенногоТекста[Инд], " ");
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПустаяСтрока(ТекстДляПолученияДанныхВыбора) Тогда
			
			ДанныеВыбора = Новый СписокЗначений;
			ДанныеВыбора.Добавить(Текст);
			Возврат;
		Иначе
			Текст = ТекстДляПолученияДанныхВыбора;
		КонецЕсли;
		
		ДанныеВыбора = ПолучитьДанныеВыбораДляЭлектронногоПисьма(Текст,Инд);
		
		Если ДанныеВыбора.Количество() = 1 Тогда
			
			ПоместитьНайденногоАдресатаВСписок(ИмяСвязаннойТаблицы, ДанныеВыбора.Получить(0).Значение,Инд)
			
		ИначеЕсли ДанныеВыбора.Количество() = 0 Тогда
			
			ДанныеВыбора = Новый СписокЗначений;
			ДанныеВыбора.Добавить(Текст);
			Попытка
			Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Текст);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
					,
					Элемент.Имя,"Объект");
				Возврат;
			КонецПопытки;
			Если Результат.Количество() = 0 Тогда
				Возврат;
			Иначе 
				ПоместитьНайденногоАдресатаВСписок(ИмяСвязаннойТаблицы, Результат[0], Инд, Истина);
			КонецЕсли;
			
		Иначе
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		Объект[ИмяЭлемента] = "";
		Объект[ИмяСвязаннойТаблицы].Очистить();
		ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "ЭлектронноеПисьмоИсходящее");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента = Элемент.Имя;
	ТекстДляПолученияДанныхВыбора = "";
	
	ПодстрокиВведенногоТекста = СтрРазделить(Текст, ";");
	ПодстрокиДанныхОбъекта    = СтрРазделить(Объект[ИмяЭлемента], ";");
	
	Для Инд = 0 По (ПодстрокиВведенногоТекста.Количество()-1) Цикл
		Если Инд > (ПодстрокиДанныхОбъекта.Количество()-1) 
			ИЛИ ПодстрокиВведенногоТекста[Инд] <> ПодстрокиДанныхОбъекта[инд] Тогда
			ТекстДляПолученияДанныхВыбора = 
				СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ПодстрокиВведенногоТекста[инд], " ");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстДляПолученияДанныхВыбора) Тогда
		Возврат;
	Иначе
		Текст = ТекстДляПолученияДанныхВыбора;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьДанныеВыбораДляЭлектронногоПисьма(Текст, Инд);

КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ПоместитьНайденногоАдресатаВСписок(
			ПолучитьИмяСвязаннойТаблицы(Элемент.Имя),
			ВыбранноеЗначение,
			ВыбранноеЗначение.ИндексВСпискеПолучателей);
			ИзменилисьКонтакты = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьНайденногоАдресатаВСписок(ИмяСпискаАдресатов, ДанныеАдресата, ИндексВСпискеПолучателей, ИскатьКонтакт = Ложь)

	Модифицированность = Истина;
	
	Если Объект[ИмяСпискаАдресатов].Количество() > ИндексВСпискеПолучателей Тогда
		СтрокаАдресата = Объект[ИмяСпискаАдресатов][ИндексВСпискеПолучателей];
	Иначе
		СтрокаАдресата = Объект[ИмяСпискаАдресатов].Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаАдресата, ДанныеАдресата);
	СтрокаАдресата.Представление = СтрЗаменить(СтрокаАдресата.Представление, ",", "");
	СтрокаАдресата.Представление = СтрЗаменить(СтрокаАдресата.Представление, ";", "");
	
	Если ИскатьКонтакт И Не ЗначениеЗаполнено(СтрокаАдресата.Контакт) Тогда
		СтрокаАдресата.Контакт = ?(ПустаяСтрока(СтрокаАдресата.Адрес), "", ПолучитьКонтактПоАдресу(СтрокаАдресата.Адрес));
	КонецЕсли;
	
	СписокАдресатов = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект[ИмяСпискаАдресатов],Ложь);
	Если ИмяСпискаАдресатов = "ПолучателиПисьма" Тогда
		Объект.СписокПолучателейПисьма = СписокАдресатов;
	ИначеЕсли ИмяСпискаАдресатов = "ПолучателиКопий" Тогда
		Объект.СписокПолучателейКопий = СписокАдресатов;
	ИначеЕсли ИмяСпискаАдресатов = "ПолучателиСкрытыхКопий" Тогда
		Объект.СписокПолучателейСкрытыхКопий= СписокАдресатов;
	КонецЕсли;
	
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "ЭлектронноеПисьмоИсходящее");

КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстВходящегоПисьмаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВложения

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьВложениеВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.СтатусПисьма <> ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	МассивФайлов = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		
		МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ТипЗнч(ФайлПринятый) = Тип("Файл") Тогда
					МассивФайлов.Добавить(ФайлПринятый);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		
		ДополнительныеПараметры = Новый Структура("ВыбранныйФайл", ВыбранныйФайл);
		ОписаниеОповещение = Новый ОписаниеОповещения("ПроверкаЭтоФайлПослеЗавершения", ЭтотОбъект, ДополнительныеПараметры);
		ВыбранныйФайл.НачатьПроверкуЭтоФайл(ОписаниеОповещение);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьПереслатьВыполнить(Команда)
	
	ОчиститьСообщения();
	
	Если Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено") Тогда
		ПереслатьВыполнить();
	Иначе
		
		Если ПроверитьЗаполнениеСписковАдресатов() Тогда
			Возврат;
		КонецЕсли;
		
		Если Объект.ПолучателиПисьма.Количество() = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Необходимо указать хотя бы одного получателя письма.'"),, "Объект.СписокПолучателейПисьма");
			Возврат;
			
		КонецЕсли;
		
		ОтправитьВыполнить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура HTML(Команда)
	
	Если ФорматСообщения <> ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML") Тогда
		
		ФорматСообщения = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML");
		ФорматСообщенияПриИзменении();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбычныйТекст(Команда)
	
	Если ФорматСообщения <> ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст") Тогда
		
		ФорматСообщения = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст");
		ФорматСообщенияПриИзменении();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТекстПисьмаОснования(Команда)
	
	Элементы.ОтображатьТекстПисьмаОснования.Пометка = НЕ Элементы.ОтображатьТекстПисьмаОснования.Пометка;
	Элементы.ГруппаВходящее.Видимость = Элементы.ОтображатьТекстПисьмаОснования.Пометка;
	Объект.ОтображатьТелоИсходногоПисьма = Не Объект.ОтображатьТелоИсходногоПисьма;
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьКонтакты(Команда)
	
	Если Объект.СтатусПисьма <> ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено") Тогда
		
		РедактироватьСписокПолучателей(Истина, НСтр("ru = 'Копии'"));
		
	Иначе
		
		РедактироватьСписокПолучателей(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПисьма(Команда)
	
	ТекстИдентификаторы = Новый ТекстовыйДокумент;
	ТекстИдентификаторы.ДобавитьСтроку("Идентификатор сообщения:  " + Объект.ИдентификаторСообщения);
	ТекстИдентификаторы.ДобавитьСтроку("Идентификатор основания:  " + Объект.ИдентификаторОснования);
	ТекстИдентификаторы.ДобавитьСтроку("Идентификаторы оснований: " 
	                                   + ПолучитьПредставлениеИдентификаторовОснований(Объект.ИдентификаторыОснований));
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Создано", Объект.Дата);
	СтруктураПараметры.Вставить("Отправлено", Объект.ДатаОтправления);
	СтруктураПараметры.Вставить("УведомитьОДоставке", Объект.УведомитьОДоставке);
	СтруктураПараметры.Вставить("УведомитьОПрочтении", Объект.УведомитьОПрочтении);
	СтруктураПараметры.Вставить("ЗаголовкиИнтернета", ТекстИдентификаторы);
	СтруктураПараметры.Вставить("Письмо", Объект.Ссылка);
	СтруктураПараметры.Вставить("ТипПисьма", "ЭлектронноеПисьмоИсходящее");
	СтруктураПараметры.Вставить("Кодировка", Объект.Кодировка);
	СтруктураПараметры.Вставить("ВнутреннийНомер", Объект.Номер);
	СтруктураПараметры.Вставить("ВключатьТелоИсходногоПисьма", Объект.ВключатьТелоИсходногоПисьма);
	СтруктураПараметры.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	
	ОткрытьФорму("ЖурналДокументов.Взаимодействия.Форма.ПараметрыЭлектронногоПисьма", СтруктураПараметры, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьВнешнююСсылкуНаОбъектИнформационнойБазы(Команда)
	
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.ФормированиеВнешнейСсылкиНаОбъект",,ЭтотОбъект);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Тема.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтатусПисьма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВложенияКонтекстноеМенюСвойстваВложения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтатусПисьма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаКлиенте
Процедура НаКонтролеПриИзменении()
	
	УправлениеДоступностью();
	
	Рассмотрено = НЕ НаКонтроле;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеСписковАдресатов()

	Отказ = Ложь;
	
	Попытка
		Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Объект.СписокПолучателейПисьма);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , "Объект.СписокПолучателейПисьма");
		Отказ = Истина;
	КонецПопытки;
	
	Попытка
		Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Объект.СписокПолучателейКопий);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , "Объект.СписокПолучателейКопий");
		Отказ = Истина;
	КонецПопытки;
	
	Попытка
		Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Объект.СписокПолучателейСкрытыхКопий);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , "Объект.СписокПолучателейСкрытыхКопий");
		Отказ = Истина;
	КонецПопытки;
	
	Возврат Отказ;

КонецФункции

&НаСервере
Функция НеобходимаОбработкаПисьмаОснования()

	Возврат ВыполняетсяОтправка И Объект.ВключатьТелоИсходногоПисьма И ПолучитьФункциональнуюОпцию("ОтправлятьПисьмаВФорматеHTML") 
	        И (Не Объект.ВзаимодействиеОснование = Неопределено) И (Не Объект.ВзаимодействиеОснование.Пустая()) 
	        И Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;

КонецФункции

/////////////////////////////////////////////////////////////////////////////////
//  Управление доступностью элементов формы.

&НаКлиенте
Процедура УправлениеДоступностью()

	Элементы.РассмотретьПосле.Доступность = НаКонтроле;
	
	Если Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее") 
		И (НЕ ИнформационнаяБазаФайловая
		ИЛИ (Объект.ДатаКогдаОтправить <> Дата(1,1,1) И Объект.ДатаКогдаОтправить > ОбщегоНазначенияКлиент.ДатаСеанса())
		ИЛИ (Объект.ДатаАктуальностиОтправки <> Дата(1,1,1) И Объект.ДатаАктуальностиОтправки < ОбщегоНазначенияКлиент.ДатаСеанса())) Тогда
		
		Элементы.Отправить.Доступность = Ложь;
		
	Иначе
		
		Элементы.Отправить.Доступность = Истина;
		
	КонецЕсли;
	
	Элементы.ГруппаДатаОтправкиАктуальность.Доступность = (Объект.СтатусПисьма <> ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено")); 

КонецПроцедуры

&НаСервере
Процедура ОпределитьВидимостьДоступностьЭлементовВЗависимостиОтСтатусаПисьма()

	Если Объект.СтатусПисьма <> Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено Тогда
		УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(
			Элементы.ОтправительПредставление.СписокВыбора,ДоступныеДляОтправкиУчетныеЗаписи);
	Если (Объект.Ссылка.Пустая() Или Объект.УчетнаяЗапись.Пустая()) И ДоступныеДляОтправкиУчетныеЗаписи.Количество() > 0 Тогда
			Объект.УчетнаяЗапись = ДоступныеДляОтправкиУчетныеЗаписи[0].УчетнаяЗапись;
			ЭлементСписка = Элементы.ОтправительПредставление.СписокВыбора.НайтиПоЗначению(Объект.УчетнаяЗапись);
			Если ЭлементСписка <> Неопределено Тогда
				СтандартнаяОбработка = Ложь;
				Объект.ОтправительПредставление = ЭлементСписка.Представление;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Элементы.ОтправительПредставление.ТолькоПросмотр            = Истина;
		Элементы.СписокПолучателейПисьма.РедактированиеТекста       = Ложь;
		Элементы.СписокПолучателейКопий.РедактированиеТекста        = Ложь;
		Элементы.СписокПолучателейСкрытыхКопий.РедактированиеТекста = Ложь;
		
	КонецЕсли;
	
	Если Объект.СтатусПисьма <> Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
		
		Если Вложения.Количество() > 0 Тогда
			Элементы.ДобавитьВложение.Доступность      = Ложь;
			Элементы.УдалитьВложение.Доступность       = Ложь;
		Иначе
			Элементы.Вложения.Видимость = Ложь;
		КонецЕсли;
		
		Если Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
			ТекстПисьма = Объект.ТекстHTML;
			ТекстПисьма = Взаимодействия.ОбработатьТекстHTML(Объект.Ссылка);
			Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеHTMLДокумента;
			Элементы.ТекстПисьма.ТолькоПросмотр = Ложь;
		Иначе
			ТекстПисьма = Объект.Текст;
			Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
			Элементы.ТекстПисьма.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее 
			И (НЕ ИнформационнаяБазаФайловая 
			ИЛИ (Объект.ДатаКогдаОтправить <> Дата(1,1,1) И Объект.ДатаКогдаОтправить > ТекущаяДатаСеанса())
			ИЛИ (Объект.ДатаАктуальностиОтправки <> Дата(1,1,1) И Объект.ДатаАктуальностиОтправки < ТекущаяДатаСеанса())) Тогда
			
			Элементы.Отправить.Доступность = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		ОпределитьСпособРедактированияПисьма();
		
	КонецЕсли;

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// Работа с вложениями

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавитьВложениеВыполнить();

КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	Если Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик") Тогда
		УдалитьВложениеВыполнить();
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеВыполнить()
	
	#Если Не ВебКлиент Тогда
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.МножественныйВыбор = Истина;
		ОписаниеОповещение = Новый ОписаниеОповещения("ДиалогВыбораФайловПослеВыбора", ЭтотОбъект);
		Диалог.Показать(ОписаниеОповещение);
		
	#Иначе

		Адрес = "";
		ВыбранныйФайл = "";
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ПомещениеФайлаПриОкончании", ЭтотОбъект);
		НачатьПомещениеФайла(ОбработчикОповещенияОЗакрытии, Адрес, ВыбранныйФайл, Истина, УникальныйИдентификатор);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьДоступностьЭлементовВложений()
	
	Если Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено") Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложениеВыполнить()

	ДобавитьВложениеВСписокУдаленных();
	
	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		Индекс = Вложения.Индекс(текДанные);
		Вложения.Удалить(Индекс);
		ОбновитьОтображениеДанных();
	КонецЕсли;
	
	ВидимостьДоступностьЭлементовВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеВСписокУдаленных()

	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если (текДанные <> Неопределено) И (текДанные.Расположение = 0) Тогда
		УдаленныеВложения.Добавить(текДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнить()
	
	ТекДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекДанные.Расположение = 0) ИЛИ (ТекДанные.Расположение = 1) Тогда
		
		УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(ТекДанные.Ссылка, УникальныйИдентификатор);
		
	ИначеЕсли текДанные.Расположение = 2 Тогда
		
		ПутьКФайлу = ТекДанные.ИмяФайлаНаКомпьютере;
		#Если Не ВебКлиент Тогда
			ЗапуститьПриложение("""" + ПутьКФайлу + """");
		#Иначе
			ПолучитьФайл(ПутьКФайлу, ТекДанные.ИмяФайла, Истина);
		#КонецЕсли
		
	ИначеЕсли ТекДанные.Расположение = 4 Тогда
		
		ПутьКФайлу = ТекДанные.ИмяФайлаНаКомпьютере;
		#Если Не ВебКлиент Тогда
			Если ЭтоАдресВременногоХранилища(ТекДанные.ИмяФайлаНаКомпьютере) Тогда
				ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
				СоздатьКаталог(ИмяВременнойПапки);
				ПутьКФайлу = ИмяВременнойПапки + "\" + ТекДанные.ИмяФайла;
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(ТекДанные.ИмяФайлаНаКомпьютере);
				ДвоичныеДанные.Записать(ПутьКФайлу);
			КонецЕсли;
			ЗапуститьПриложение("""" + ПутьКФайлу + """");
		#Иначе
			ПолучитьФайл(ПутьКФайлу, ТекДанные.ИмяФайла, Истина);
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложения(ПереданныеПараметры = Неопределено)
	
	Если Объект.Ссылка.Пустая() И ПереданныеПараметры <> Неопределено Тогда
		Если ПереданныеПараметры.Свойство("Основание") 
			И ТипЗнч(ПереданныеПараметры.Основание) = Тип("Структура") 
			И ПереданныеПараметры.Основание.Свойство("Команда") 
			И ПереданныеПараметры.Основание.Команда = "Переслать" Тогда
			
			табВложения = УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(ПереданныеПараметры.Основание.Основание, Истина);
			Для Каждого СтрокаТаблицыВложений Из табВложения Цикл
				Если ПустаяСтрока(СтрокаТаблицыВложений.ИДФайлаЭлектронногоПисьма) Тогда
					НоваяСтрока = Вложения.Добавить();
					НоваяСтрока.Ссылка              = СтрокаТаблицыВложений.Ссылка;
					НоваяСтрока.ИмяФайла            = СтрокаТаблицыВложений.ИмяФайла;
					НоваяСтрока.ИндексКартинки      = СтрокаТаблицыВложений.ИндексКартинки;
					НоваяСтрока.Размер              = СтрокаТаблицыВложений.Размер;
					НоваяСтрока.РазмерПредставление = СтрокаТаблицыВложений.РазмерПредставление;
					НоваяСтрока.Расположение        = 1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	Иначе
		
		Вложения.Очистить();
		ТабВложения = УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Объект.Ссылка, Истина);
		Для Каждого СтрокаТаблицыВложений Из ТабВложения Цикл
			Если ПустаяСтрока(СтрокаТаблицыВложений.ИДФайлаЭлектронногоПисьма) Тогда
				НоваяСтрока = Вложения.Добавить();
				НоваяСтрока.Ссылка              = СтрокаТаблицыВложений.Ссылка;
				НоваяСтрока.ИмяФайла            = СтрокаТаблицыВложений.ИмяФайла;
				НоваяСтрока.ИндексКартинки      = СтрокаТаблицыВложений.ИндексКартинки;
				НоваяСтрока.Размер              = СтрокаТаблицыВложений.Размер;
				НоваяСтрока.РазмерПредставление = СтрокаТаблицыВложений.РазмерПредставление;
				НоваяСтрока.ПодписанЭП         = СтрокаТаблицыВложений.ПодписанЭП;
				НоваяСтрока.Расположение        = 0;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрикрепитьВходящееПисьмоОснованиеКакВложениеЕслиНеобходимо(ТекущийОбъект)
	
	Если ТекущийОбъект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее 
		И Не ПолучитьФункциональнуюОпцию("ОтправлятьПисьмаВФорматеHTML") 
		И (ТипЗнч(ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") 
		ИЛИ ТипЗнч(ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")) 
		И ТипТекстаВходящегоПисьма = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
		
		Если ТипЗнч(ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			ТекстHTMLВходящее = Взаимодействия.СформироватьТекстHTMLДляВходящегоПисьма(ВзаимодействиеОснование, Истина, Истина);
		Иначе
			ТекстHTMLВходящее = Взаимодействия.СформироватьТекстHTMLДляИсходящегоПисьма(ВзаимодействиеОснование, Истина, Истина);
		КонецЕсли;
		
		ВременныйКаталог   = КаталогВременныхФайлов();
		ИмяФайла = ВременныйКаталог + НСтр("ru = 'Пересылаемое сообщение'") + ".htm";
		ФайлИсходноеСообщение = Новый ЗаписьТекста(ИмяФайла,КодировкаТекста.UTF16);
		ФайлИсходноеСообщение.Записать(ТекстHTMLВходящее);
		ФайлИсходноеСообщение.Закрыть();
		ДвоичныеДанные       = Новый ДвоичныеДанные(ИмяФайла);
		АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВладелецФайлов", ТекущийОбъект.Ссылка);
		ПараметрыФайла.Вставить("Автор", Неопределено);
		ПараметрыФайла.Вставить("ИмяБезРасширения", НСтр("ru = 'Пересылаемое сообщение'"));
		ПараметрыФайла.Вставить("РасширениеБезТочки", "html");
		ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
		ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресФайлаВХранилище);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваВложения(Команда)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИндексВКоллекции = Вложения.Индекс(ТекущиеДанные);
	
	Если ТекущиеДанные.Ссылка = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура("ТекущийИндексВКоллекции", ТекущийИндексВКоллекции);
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВопросОЗаписиФайлаПослеЗакрытия", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Свойства файла доступны только после его записи. Записать?'");
		ПоказатьВопрос(ОбработчикОповещенияОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьСвойстваВложения(ТекущийИндексВКоллекции);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеФайлаПриОкончании(РезультатПомещения, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	Если РезультатПомещения = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Вложения.Добавить();
	НоваяСтрока.Расположение = 4;
	НоваяСтрока.ИмяФайлаНаКомпьютере = Адрес;
	НоваяСтрока.ИмяФайла = ВыбранноеИмяФайла;
	
	Расширение = ВзаимодействияКлиентСервер.ПолучитьРасширениеФайла(ВыбранноеИмяФайла);
	НоваяСтрока.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	
	Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	ОбновитьОтображениеДанных();

КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗаписиФайлаПослеЗакрытия(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьСвойстваВложения(ДополнительныеПараметры.ТекущийИндексВКоллекции);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйФайлПослеИнициализации(Файл, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещение = Новый ОписаниеОповещения("ПолучениеРазмераПослеОкончания", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПолучениеРазмера(ОписаниеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеРазмераПослеОкончания(Размер, ДополнительныеПараметры) Экспорт

	СтрокаТаблицыВложений  = ДополнительныеПараметры.СтрокаТаблицыВложений;
	СтрокаТаблицыВложений.Размер = Размер;
	СтрокаТаблицыВложений.РазмерПредставление = ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(Размер); 

КонецПроцедуры

&НаКлиенте
Процедура ДиалогВыбораФайловПослеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
		НоваяСтрока = Вложения.Добавить();
		НоваяСтрока.Расположение = 2;
		НоваяСтрока.ИмяФайлаНаКомпьютере = ВыбранныйФайл;
		
		ИмяФайла   = "";
		Расширение = "";
		ВзаимодействияКлиентСервер.ПолучитьКаталогИИмяФайла(ВыбранныйФайл, "", ИмяФайла);
		НоваяСтрока.ИмяФайла = ИмяФайла;
		
		Расширение                      = ВзаимодействияКлиентСервер.ПолучитьРасширениеФайла(ИмяФайла);
		НоваяСтрока.ИндексКартинки      = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
		ДополнительныеПараметры = Новый Структура("СтрокаТаблицыВложений", НоваяСтрока);
		ОписаниеОповещение = Новый ОписаниеОповещения("НовыйФайлПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры);
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(ОписаниеОповещение, ВыбранныйФайл);
	КонецЦикла;
	
	Если ВыбранныеФайлы.Количество() > 0 Тогда
		Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЭтоФайлПослеЗавершения(ЭтоФайл, ДополнительныеПараметры) Экспорт

	Если НЕ ЭтоФайл Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмя = ДополнительныеПараметры.ВыбранныйФайл.ПолноеИмя;
	
	НоваяСтрока = Вложения.Добавить();
	НоваяСтрока.Расположение = 2;
	НоваяСтрока.ИмяФайлаНаКомпьютере = ПолноеИмя;
	
	ИмяФайла   = "";
	Расширение = "";
	ВзаимодействияКлиентСервер.ПолучитьКаталогИИмяФайла(ПолноеИмя, "", ИмяФайла);
	НоваяСтрока.ИмяФайла = ИмяФайла;
	
	Расширение                      = ВзаимодействияКлиентСервер.ПолучитьРасширениеФайла(ИмяФайла);
	НоваяСтрока.ИндексКартинки      = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	ДополнительныеПараметры = Новый Структура("СтрокаТаблицыВложений", НоваяСтрока);
	ОписаниеОповещение = Новый ОписаниеОповещения("НовыйФайлПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры);
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(ОписаниеОповещение, ПолноеИмя);

КонецПроцедуры

///////////////////////////////////////////////////////////////////
// Формирование текста письма

&НаСервере
Функция СформироватьТекстПисьмаВключаяПисьмоОснование(ДокументHTMLТекущееРедактирование, ТекущийОбъект)
	
	Выборка = Взаимодействия.ПолучитьДанныеПисьмаОснования(Объект.ВзаимодействиеОснование);
	
	Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст Тогда
		
		Возврат СформироватьИсходящееОбычныйТекст(Выборка, ТекущийОбъект);
		
	Иначе
		
		Возврат СформироватьИсходящееHTML(Выборка,ДокументHTMLТекущееРедактирование, ТекущийОбъект);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СформироватьИсходящееHTML(Выборка,ДокументHTMLТекущееРедактирование, ТекущийОбъект)
	
	// Получим ДокументHTML входящего письма.
	Если Выборка.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
		ДокументHTML = Взаимодействия.ПолучитьДокументHTMLИзОбычногоТекста(Выборка.Текст);
	Иначе
		ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(Выборка.ТекстHTML);
	КонецЕсли;
	
	ЭлементТелоПисьма = ДокументHTML.Тело;
	Если ЭлементТелоПисьма = Неопределено Тогда
		Если ДокументHTMLТекущееРедактирование = Неопределено Тогда
			Возврат ТекущийОбъект.ТекстHTML;
		Иначе
			Возврат Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTMLТекущееРедактирование);
		КонецЕсли
	КонецЕсли;
	
	Если ДокументHTMLТекущееРедактирование = Неопределено Тогда
		ДокументHTMLТекущееРедактирование = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекущийОбъект.ТекстHTML);
	КонецЕсли;
	
	МассивДочернихУзловТела = Взаимодействия.ПолучитьМассивДочернихУзловСодержащихHTML(ЭлементТелоПисьма);
	
	// Добавляем текст отредактированный в поле форматированного документа.
	Если ДокументHTMLТекущееРедактирование.Тело <> Неопределено Тогда
		Для каждого ДочернийУзел Из ДокументHTMLТекущееРедактирование.Тело.ДочерниеУзлы Цикл
			
			ЭлементТелоПисьма.ДобавитьДочерний(ДокументHTML.ИмпортироватьУзел(ДочернийУзел,Истина));
			
		КонецЦикла;
	КонецЕсли;
	
	ЭлементDIV = Взаимодействия.ДобавитьЭлементСАтрибутами(
		ЭлементТелоПисьма,
		"div",
		Новый Структура("style", "border:none;border-left:solid blue 1.5pt;padding:0cm 0cm 0cm 4.0pt"));
		
	Для каждого ДочернийУзел Из МассивДочернихУзловТела Цикл
		
		ЭлементDIV.ДобавитьДочерний(ДочернийУзел);
		
	КонецЦикла;

	// Подготовим шапку письма основания.
	// Горизонтальный разделитель.
	СтруктураАтрибутов = Новый Структура;
	СтруктураАтрибутов.Вставить("size", "2");
	СтруктураАтрибутов.Вставить("width", "100%");
	СтруктураАтрибутов.Вставить("align", "center");
	СтруктураАтрибутов.Вставить("tabindex", "-1");
	
	ЭлементHR = Взаимодействия.ДобавитьЭлементСАтрибутами(
		ЭлементDIV,
		"hr",
		СтруктураАтрибутов);
	Взаимодействия.ВставитьЭлементHTMLПервымДочернимЭлементом(ЭлементDIV ,ЭлементHR, МассивДочернихУзловТела);
	
	// Данные письма основания
	ЭлементШрифт = Взаимодействия.СформироватьЭлементДанныхШапкиПисьма(ЭлементDIV, Выборка);
	Взаимодействия.ВставитьЭлементHTMLПервымДочернимЭлементом(ЭлементDIV, ЭлементШрифт, МассивДочернихУзловТела);
	
	Возврат Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
КонецФункции

&НаСервере
Функция СформироватьИсходящееОбычныйТекст(ВыборкаДанныеВходящегоПисьма, ТекущийОбъект)

	// Формирование шапки входящего письма.
	СтрокаШапка = НСтр("ru = '-----Пересылаемое сообщение-----'");
	
	СтрокаШапка = СтрокаШапка + Символы.ПС+ НСтр("ru = 'От'") + ": "+ ВыборкаДанныеВходящегоПисьма.ОтправительПредставление
		          + ?(ВыборкаДанныеВходящегоПисьма.ИмяОбъектаМетаданных = "ЭлектронноеПисьмоВходящее",
		          "[" + ВыборкаДанныеВходящегоПисьма.ОтправительАдрес +"]",
		          "");
		
	СтрокаШапка = СтрокаШапка + Символы.ПС+ НСтр("ru = 'Отправлено'") + ": " 
	              + Формат(ВыборкаДанныеВходящегоПисьма.Дата,"ДЛФ=DT");
	
	СтрокаШапка = СтрокаШапка + Символы.ПС+ НСтр("ru = 'Кому'") + ": " 
	    + Взаимодействия.ПолучитьПредставленияПолучателейВходящегоПисьма(ВыборкаДанныеВходящегоПисьма.ПолучателиПисьма.Выгрузить());
		
	ТаблицаПолучателейКопий = ВыборкаДанныеВходящегоПисьма.ПолучателиКопий.Выгрузить();
	
	Если ТаблицаПолучателейКопий.Количество() > 0 Тогда
		СтрокаШапка = СтрокаШапка + Символы.ПС+ НСтр("ru = 'Копии'") + ": "
		+ Взаимодействия.ПолучитьПредставленияПолучателейВходящегоПисьма(ТаблицаПолучателейКопий);
	КонецЕсли;
	
	СтрокаШапка = СтрокаШапка + Символы.ПС+ НСтр("ru = 'Тема'") + ": " + ВыборкаДанныеВходящегоПисьма.Тема;
	
	// Преобразование к обычному тексту текста HTML если это необходимо.
	Если ВыборкаДанныеВходящегоПисьма.ТипТекста <> Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
		
		ТекстВходящегоПисьма =  Взаимодействия.ПолучитьОбычныйТекстИзHTML(ВыборкаДанныеВходящегоПисьма.ТекстHTML);
		
	Иначе
		
		ТекстВходящегоПисьма = ВыборкаДанныеВходящегоПисьма.Текст
		
	КонецЕсли;
	
	Возврат ТекущийОбъект.Текст + Символы.ПС + Символы.ПС + СтрокаШапка + Символы.ПС + Символы.ПС + ТекстВходящегоПисьма;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

// Определяет способ редактирования письма и
// отображает текст письма согласно способу редактирования.
&НаСервере
Процедура ОпределитьСпособРедактированияПисьма()

	Если Объект.ТипТекста.Пустая() Тогда
		
		ФорматСообщения = Взаимодействия.ФорматСообщенияПоУмолчанию(Пользователи.ТекущийПользователь());
		
		// Если тип текста не был заполнен, то может оказаться, что формат выбран некорректно, поэтому:
		// 1) Если текст заполнен, но не заполнен HTML - то формат сообщения исправляем на "текст".
		// 2) Если HTML заполнен, но не заполнен текст - то формат сообщения исправляем на "HTML".
		Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст 
			И СокрЛП(Объект.Текст) = "" И СокрЛП(Объект.ТекстHTML) <> "" Тогда
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
		ИначеЕсли ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML
			И СокрЛП(Объект.Текст) <> "" И СокрЛП(Объект.ТекстHTML) = "" Тогда
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
		КонецЕсли;
		
	Иначе
		Если Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
		Иначе
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если Не ПолучитьФункциональнуюОпцию("ОтправлятьПисьмаВФорматеHTML") 
			И ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
		КонецЕсли;
		
		ПараметрыРаботыПользователяПользователя =
			Взаимодействия.ПолучитьПараметрыРаботыПользователяДляИсходящегоЭлектронногоПисьма(
			Объект.УчетнаяЗапись,
			ФорматСообщения,
			?(Объект.ВзаимодействиеОснование = Неопределено, Истина, Ложь));
		
		Объект.УведомитьОДоставке            = ПараметрыРаботыПользователяПользователя.УведомитьОДоставке;
		Объект.УведомитьОПрочтении           = ПараметрыРаботыПользователяПользователя.УведомитьОПрочтении;
		Объект.ВключатьТелоИсходногоПисьма   = ПараметрыРаботыПользователяПользователя.ВключатьТелоИсходногоПисьма;
		Объект.ОтображатьТелоИсходногоПисьма = ПараметрыРаботыПользователяПользователя.ОтображатьТелоИсходногоПисьма;
		
	КонецЕсли;
	
	Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		
		Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаФорматированныйДокумент;
		Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
		Если Не Объект.Ссылка.Пустая() Тогда
			СтруктураВложений = Новый Структура;
			Объект.ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(
				Объект.Ссылка, Объект.ТекстHTML,СтруктураВложений);
			ТекстПисьмаФорматированныйДокумент.УстановитьHTML(Объект.ТекстHTML, СтруктураВложений);
		ИначеЕсли ПараметрыРаботыПользователяПользователя.Подпись <> Неопределено Тогда
			
			ДобавитьФорматированныйДокументКФорматированномуДокументу(ТекстПисьмаФорматированныйДокумент, ПараметрыРаботыПользователяПользователя.Подпись);
			
		КонецЕсли;
		
	Иначе
		
		Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаОбычныйТекст;
		Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
		Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
		ТекстПисьма = Объект.Текст;
		Если Объект.Ссылка.Пустая() И ПараметрыРаботыПользователяПользователя.Подпись <> Неопределено Тогда
			
			ТекстПисьма = ТекстПисьма + ПараметрыРаботыПользователяПользователя.Подпись;
			
		КонецЕсли;
		Объект.Кодировка = "UTF-8";
		
	КонецЕсли;
	
	Элементы.ФорматСообщения.Видимость = Истина;
	Элементы.ФорматСообщения.Заголовок = ФорматСообщения;
	
КонецПроцедуры

// Обрабатывает переданные параметры при создании письма.
&НаСервере
Процедура ОбработатьПереданныеПараметры(ПереданныеПараметры)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если ПереданныеПараметры.Свойство("Вложения") И ПереданныеПараметры.Вложения <> Неопределено Тогда
			
			Если ТипЗнч(ПереданныеПараметры.Вложения) = Тип("СписокЗначений") Или ТипЗнч(ПереданныеПараметры.Вложения) = Тип("Массив") Тогда
				Для Каждого Вложение Из ПереданныеПараметры.Вложения Цикл
					ОписаниеВложения = Вложения.Добавить();
					Если ТипЗнч(ПереданныеПараметры.Вложения) = Тип("СписокЗначений") Тогда
						Если ЭтоАдресВременногоХранилища(Вложение.Значение) Тогда
							ОписаниеВложения.Расположение = 4;
							ОписаниеВложения.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(Вложение.Значение), УникальныйИдентификатор);
						ИначеЕсли ТипЗнч(Вложение.Значение) = Тип("ДвоичныеДанные") Тогда
							ОписаниеВложения.Расположение = 4;
							ОписаниеВложения.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(Вложение.Значение, УникальныйИдентификатор);
						Иначе
							ОписаниеВложения.Расположение = 2;
							ОписаниеВложения.ИмяФайлаНаКомпьютере = Вложение.Значение;
						КонецЕсли;
						ОписаниеВложения.ИмяФайла = Вложение.Представление;
					Иначе // ТипЗнч(ПереданныеПараметры.Вложения) = "массив структур"
						Если Не ПустаяСтрока(Вложение.АдресВоВременномХранилище) Тогда
							ОписаниеВложения.Расположение = 4;
							ОписаниеВложения.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(
								ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище), УникальныйИдентификатор);
						Иначе
							ОписаниеВложения.Расположение = 2;
							ОписаниеВложения.ИмяФайлаНаКомпьютере = Вложение.ПутьКФайлу;
						КонецЕсли;
					КонецЕсли;
					ОписаниеВложения.ИмяФайла = Вложение.Представление;
					Расширение = ВзаимодействияКлиентСервер.ПолучитьРасширениеФайла(ОписаниеВложения.ИмяФайла);
					ОписаниеВложения.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПереданныеПараметры.Тема) Тогда
			Объект.Тема = ПереданныеПараметры.Тема;
		КонецЕсли;
		
		Если ТипЗнч(ПереданныеПараметры.Тело) = Тип("Структура") Тогда
			ТекстПисьмаФорматированныйДокумент.УстановитьHTML(ПереданныеПараметры.Тело.ТекстHTML, ПереданныеПараметры.Тело.СтруктураВложений);
			Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками;
		ИначеЕсли ТипЗнч(ПереданныеПараметры.Тело) = Тип("Строка") И Не ПустаяСтрока(ПереданныеПараметры.Тело) Тогда
			Объект.Текст = ПереданныеПараметры.Тело;
			ТекстПисьмаФорматированныйДокумент.Добавить(Объект.Текст);
			СтруктураВложений = Новый Структура;
			ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(Объект.ТекстHTML, СтруктураВложений);
		КонецЕсли;
		
		Если ПереданныеПараметры.Свойство("Кому") И ПереданныеПараметры.Кому <> Неопределено Тогда
			
			// Если передан параметр "Кому", то эта табличная часть очищается перед заполнением согласно данным параметра.
			Объект.ПолучателиПисьма.Очистить();
			
			Если ТипЗнч(ПереданныеПараметры.Кому) = Тип("Строка") И НЕ ПустаяСтрока(ПереданныеПараметры.Кому) Тогда
				Объект.СписокПолучателейПисьма = ПереданныеПараметры.Кому;
				НоваяСтрока = Объект.ПолучателиПисьма.Добавить();
				НоваяСтрока.Адрес = ПереданныеПараметры.Кому;
				
			ИначеЕсли ТипЗнч(ПереданныеПараметры.Кому) = Тип("СписокЗначений") Тогда
				
				Для Каждого ЭлементСписка Из ПереданныеПараметры.Кому Цикл
					НоваяСтрока = Объект.ПолучателиПисьма.Добавить();
					НоваяСтрока.Адрес = ЭлементСписка.Значение;
					НоваяСтрока.Представление = ЭлементСписка.Представление;
				КонецЦикла;
				
				Объект.СписокПолучателейПисьма = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиПисьма, Ложь);
				
			ИначеЕсли ТипЗнч(ПереданныеПараметры.Кому) = Тип("Массив") Тогда
				
				Для Каждого ЭлементМассива Из ПереданныеПараметры.Кому Цикл
					
					МассивАдресов = СтрРазделить(ЭлементМассива.Адрес, ";");
					
					Для Каждого Адрес Из МассивАдресов Цикл
						Если ПустаяСтрока(Адрес) Тогда 
							Продолжить;
						КонецЕсли;
						НоваяСтрока = Объект.ПолучателиПисьма.Добавить();
						НоваяСтрока.Адрес = СокрЛП(Адрес);
						НоваяСтрока.Представление = ЭлементМассива.Представление;
						НоваяСтрока.Контакт = ЭлементМассива.ИсточникКонтактнойИнформации;
					КонецЦикла;
					
				КонецЦикла;
				
				Объект.СписокПолучателейПисьма = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиПисьма, Ложь);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОчиститьДублиАдресатов(Объект.ПолучателиПисьма);
		
		Если НЕ ПереданныеПараметры.УчетнаяЗапись.Пустая() Тогда
			
			Объект.УчетнаяЗапись = ПереданныеПараметры.УчетнаяЗапись;
			РеквизитыОтправителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ПереданныеПараметры.УчетнаяЗапись,"Ссылка, ИмяПользователя, АдресЭлектроннойПочты");
			Объект.ОтправительПредставление = ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(
				РеквизитыОтправителя.ИмяПользователя, РеквизитыОтправителя.АдресЭлектроннойПочты, "");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет необходимость отображения письма основания.
&НаСервере
Процедура ОтобразитьПисьмоОснование()
	
	Если Не Объект.ВзаимодействиеОснование = Неопределено И НЕ Объект.ВзаимодействиеОснование.Пустая()
		И Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик 
		И (ТипЗнч(Объект.ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		ИЛИ ТипЗнч(Объект.ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")) Тогда
		
		ЗначенияРеквизитовВходящегоПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ВзаимодействиеОснование,"ТипТекста,ТекстHTML,Текст");
		
		ТипТекстаВходящегоПисьма = ?(ЗначенияРеквизитовВходящегоПисьма.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст,
			Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст,
			Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
		
		Если ПолучитьФункциональнуюОпцию("ОтправлятьПисьмаВФорматеHTML") Тогда
			
			Если ЗначенияРеквизитовВходящегоПисьма.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
				
				ТекстВходящегоПисьма = ЗначенияРеквизитовВходящегоПисьма.Текст;
				Элементы.ТекстВходящегоПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
				
			Иначе
				
				ТекстВходящегоПисьма = Взаимодействия.ОбработатьТекстHTML(Объект.ВзаимодействиеОснование);
				Элементы.ТекстВходящегоПисьма.Вид = ВидПоляФормы.ПолеHTMLДокумента;
				Элементы.ТекстВходящегоПисьма.ТолькоПросмотр = Ложь
				
			КонецЕсли;
			
			Если Не Объект.ОтображатьТелоИсходногоПисьма Тогда
				Элементы.ГруппаВходящее.Видимость = Ложь;
			Иначе
				Элементы.ОтображатьТекстПисьмаОснования.Пометка = Истина;
			КонецЕсли;
			
		Иначе
			
			Элементы.ГруппаВходящее.Видимость = Ложь;
			ТекстПисьма = СформироватьТекстПисьмаВключаяПисьмоОснование(Неопределено, Объект);
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ГруппаВходящее.Видимость = Ложь;
		Элементы.ОтображатьТекстПисьмаОснования.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВыполнить()
	
	ОчиститьСообщения();
	
	НайденныеСтроки = ДоступныеДляОтправкиУчетныеЗаписи.НайтиСтроки(Новый Структура("УчетнаяЗапись", Объект.УчетнаяЗапись));
	Если НайденныеСтроки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru ='Выбранная учетная запись не доступна для отправки писем'"),, "ОтправительПредставление", "Объект");
		Возврат;
	КонецЕсли;
	
	Если НайденныеСтроки[0].УдалятьПослеОтправки Тогда
			
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Отправить'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отправить и сохранить'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
			
			ТекстВопроса = НСтр("ru = 'Для данной учетной записи не предусмотрено сохранение отправленных писем в системе.
			                    |Продолжить?'");
			
			ОбработчикОповещенияЗакрытия = Новый ОписаниеОповещения("ВопросОНеСохраненииОтправленногоПисьма", ЭтотОбъект);
			ПоказатьВопрос(ОбработчикОповещенияЗакрытия,ТекстВопроса, СписокКнопок,, КодВозвратаДиалога.Да, НСтр("ru = 'Отправка письма'"));
			
	Иначе
		
		ОтправитьПисьмоКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереслатьВыполнить()
	
	Основание = Новый Структура("Основание,Команда", Объект.Ссылка, "Переслать");
	ПараметрыОткрытия = Новый Структура("Основание", Основание);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.ФормаДокумента", ПараметрыОткрытия);

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокКнопкиПоУмолчанию()
	
	Если Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено Тогда
		Элементы.Отправить.Заголовок = НСтр("ru = 'Переслать'");
	ИначеЕсли Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее Тогда
		Элементы.Отправить.Заголовок = НСтр("ru = 'Отправить сейчас'");
	ИначеЕсли Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			НастройкиРаботыСПочтой = Взаимодействия.ПолучитьНастройкуРаботаСПочтой();
			Если НастройкиРаботыСПочтой.Свойство("ОтправлятьСообщенияСразу") И НастройкиРаботыСПочтой.ОтправлятьСообщенияСразу Тогда
				ОтправлятьСообщенияСразу = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.Отправить.Заголовок = НСтр("ru = 'Отправить'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматСообщенияПриИзменении()
	
	Если Объект.ТипТекста <> ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст") 
		И ФорматСообщения = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст") Тогда
		
		ВзаимодействияКлиент.ВопросПриИзмененииФорматаСообщенияНаОбычныйТекст(ЭтотОбъект);
		
	Иначе
		
		ТекстПисьмаФорматированныйДокумент.Добавить(ТекстПисьма);
		Объект.Текст = "";
		Объект.ТипТекста =  ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML");
		Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаФорматированныйДокумент;
		
	КонецЕсли;
	
	Элементы.ФорматСообщения.Заголовок = ФорматСообщения;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииИПриЧтенииНаСервере()
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	Взаимодействия.УстановитьЗаголовокФормыЭлектронногоПисьма(ЭтотОбъект);
	УстановитьЗаголовокКнопкиПоУмолчанию();
	ОбработатьПереданныеПараметры(Параметры);
	ЗаполнитьВложения(Параметры);
	
	Для Каждого ПолучательПисьма Из Объект.ПолучателиПисьма Цикл
		Если ЗначениеЗаполнено(ПолучательПисьма.Контакт) Тогда
			СоответствияАдресовИКонтактов.Добавить(ПолучательПисьма.Контакт, ПолучательПисьма.Адрес);
		КонецЕсли;
	КонецЦикла;
	
	ОпределитьВидимостьДоступностьЭлементовВЗависимостиОтСтатусаПисьма();
	ОтобразитьПисьмоОснование();
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Взаимодействия.УстановитьРеквизитыФормыВзаимодействияПоДаннымРегистра(ЭтотОбъект);
		ТекущийСтатусПисьма = Объект.СтатусПисьма;
	КонецЕсли;
	
	НаКонтроле = НЕ Рассмотрено;
	
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "ЭлектронноеПисьмоИсходящее");
	
	Если Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено Тогда
		Элементы.СписокПолучателейКопий.КнопкаВыбора        = Ложь;
		Элементы.СписокПолучателейПисьма.КнопкаВыбора       = Ложь;
		Элементы.СписокПолучателейСкрытыхКопий.КнопкаВыбора = Ложь;
		Элементы.Тема.РедактированиеТекста                  = Ложь;
	КонецЕсли;
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораДляЭлектронногоПисьма(Текст, ИндексВСпискеПолучателей)
	
	ВозвращаемыйСписок = Новый СписокЗначений;
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Таблица.Ссылка КАК Контакт,
	|	ПРЕДСТАВЛЕНИЕ(Таблица.Ссылка) КАК Представление,
	|	ТаблицаКонтактнаяИнформация.АдресЭП КАК АдресЭП 
	|ИЗ
	|	Справочник.Пользователи КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
	|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = Таблица.Ссылка)
	|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) И (ТаблицаКонтактнаяИнформация.АдресЭП <> """"))
	|ГДЕ
	|	(Таблица.Наименование ПОДОБНО &ВведеннаяСтрока
	|			ИЛИ ТаблицаКонтактнаяИнформация.АдресЭП ПОДОБНО &ВведеннаяСтрока
	|			ИЛИ ТаблицаКонтактнаяИнформация.ДоменноеИмяСервера ПОДОБНО &ВведеннаяСтрока
	|			ИЛИ ТаблицаКонтактнаяИнформация.Представление ПОДОБНО &ВведеннаяСтрока)";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			УсловиеПолейВводаПоСтроке = "";
			МетаданныеОбъекта = Метаданные.НайтиПоТипу(ЭлементМассиваОписания.Тип);
			СписокПолей = МетаданныеОбъекта.ВводПоСтроке;
			Для Каждого Поле Из СписокПолей Цикл
				Если МетаданныеОбъекта.СтандартныеРеквизиты[Поле.Имя].Тип.Типы()[0] = Тип("Строка") Тогда
					УсловиеПолейВводаПоСтроке = УсловиеПолейВводаПоСтроке + " ИЛИ Таблица." + Поле.Имя + " ПОДОБНО &ВведеннаяСтрока";
				КонецЕсли;
			КонецЦикла;
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Таблица.Ссылка КАК Контакт,
			|	Таблица." + ЭлементМассиваОписания.ИмяРеквизитаПредставлениеКонтакта + " КАК Представление,
			|	ТаблицаКонтактнаяИнформация.АдресЭП КАК АдресЭП
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + " КАК Таблица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
			|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = Таблица.Ссылка)
			|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) И (ТаблицаКонтактнаяИнформация.АдресЭП <> """"))
			|ГДЕ
			|	(ТаблицаКонтактнаяИнформация.АдресЭП ПОДОБНО &ВведеннаяСтрока
			|			ИЛИ ТаблицаКонтактнаяИнформация.ДоменноеИмяСервера ПОДОБНО &ВведеннаяСтрока
			|			ИЛИ ТаблицаКонтактнаяИнформация.Представление ПОДОБНО &ВведеннаяСтрока 
			|" + УсловиеПолейВводаПоСтроке + ") 
			|";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВведеннаяСтрока", Текст + "%");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ВозвращаемыйСписок;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗначениеВыбора = Новый Структура;
		ЗначениеВыбора.Вставить("Контакт", Выборка.Контакт);
		ЗначениеВыбора.Вставить("Адрес", Выборка.АдресЭП);
		ЗначениеВыбора.Вставить("Представление", Выборка.Представление);
		ЗначениеВыбора.Вставить("ИндексВСпискеПолучателей", ИндексВСпискеПолучателей);
		ВозвращаемыйСписок.Добавить(ЗначениеВыбора, 
			ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Выборка.Представление, Выборка.АдресЭП, ""));
		
	КонецЦикла;
	
	Возврат ВозвращаемыйСписок;
	
КонецФункции 

&НаКлиенте
Функция ПолучитьИмяСвязаннойТаблицы(ИмяЭлемента)
	
	Если ИмяЭлемента = "СписокПолучателейПисьма" Тогда
		Возврат "ПолучателиПисьма";
	ИначеЕсли ИмяЭлемента = "СписокПолучателейКопий" Тогда
		Возврат "ПолучателиКопий";
	ИначеЕсли ИмяЭлемента = "СписокПолучателейСкрытыхКопий" Тогда
		Возврат "ПолучателиСкрытыхКопий";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьКонтактПоАдресу(Адрес)
	
	Для Каждого Элемент Из СоответствияАдресовИКонтактов Цикл
		Если Элемент.Представление = Адрес Тогда
			Возврат Элемент.Значение;
		КонецЕсли;
	КонецЦикла;

	Контакт = Адрес;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектСКонтактнойИнформацией.Ссылка
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
	|	И (НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления)";
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбъектСКонтактнойИнформацией.Ссылка
		|ИЗ
		|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
		|ГДЕ
		|	ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
		|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
		|	И (НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления)
		|";		
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("АдресЭП", Адрес);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Контакт = Выборка.Ссылка;
	КонецЕсли;
	
	СоответствияАдресовИКонтактов.Добавить(Контакт, Адрес);
	Возврат Контакт;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПредставлениеИдентификаторовОснований(Знач Идентификаторы)

	Идентификаторы = СтрЗаменить(Идентификаторы, "<",  " ");
	Идентификаторы = СтрЗаменить(Идентификаторы, ">",  " ");
	Идентификаторы = СтрЗаменить(Идентификаторы, "  ", " ");
	Идентификаторы = СокрЛП(СтрЗаменить(Идентификаторы, "  ", " "));
	Идентификаторы = СтрЗаменить(Идентификаторы, " ", Символы.ПС + "                          ");
	
	Возврат Идентификаторы;

КонецФункции

&НаСервере
Процедура ПреобразоватьИменаПолучателей(СтрокаИмен, ИмяТаблицы, ИмяЭлемента)
	
	ТаблицаПолучатели = Объект[ИмяТаблицы];
	
	ТаблицаПолучатели.Очистить();
	Если ПустаяСтрока(СтрокаИмен) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрокаИмен);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,ИмяЭлемента,"Объект");
		Возврат;
	КонецПопытки;
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из Результат Цикл
		НоваяСтрока = ТаблицаПолучатели.Добавить();
		НоваяСтрока.Адрес = ЭлементМассива.Адрес;
		НоваяСтрока.Представление = ЭлементМассива.Представление;
		НоваяСтрока.Контакт = ?(ПустаяСтрока(ЭлементМассива.Адрес), "", ПолучитьКонтактПоАдресу(ЭлементМассива.Адрес));
	КонецЦикла;
	
	Модифицированность = Истина;
	
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект,ЭтотОбъект,"ЭлектронноеПисьмоИсходящее");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСписокПолучателей(ДляПодбора, ГруппаПодбора = "")
	
	// Получим список адресатов
	СоответствиеТабличныхЧастей = Новый Соответствие;
	СоответствиеТабличныхЧастей.Вставить("Кому", Объект.ПолучателиПисьма);
	СоответствиеТабличныхЧастей.Вставить("Копии", Объект.ПолучателиКопий);
	СоответствиеТабличныхЧастей.Вставить("Скрытые", Объект.ПолучателиСкрытыхКопий);
	СоответствиеТабличныхЧастей.Вставить("Ответ", Объект.ПолучателиОтвета);
	
	СписокВыбранных = Новый СписокЗначений;
	Для Каждого ТабличнаяЧасть Из СоответствиеТабличныхЧастей Цикл
		СписокВыбранных.Добавить(
			УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(ТабличнаяЧасть.Значение), ТабличнаяЧасть.Ключ);
	КонецЦикла;

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	ПараметрыОткрытия.Вставить("СписокВыбранных", СписокВыбранных);
	ПараметрыОткрытия.Вставить("Предмет", Предмет);
	ПараметрыОткрытия.Вставить("Письмо", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию",?(ПустаяСтрока(ГруппаПодбора),НСтр("ru = 'Кому'"), ГруппаПодбора));
	
	// Откроем форму для редактирования списка адресатов.
	ИмяОбщейФормы = ?(ДляПодбора, "ОбщаяФорма.АдреснаяКнига", "ОбщаяФорма.УточнениеКонтактов");
	
	ОткрытьФорму(ИмяОбщейФормы, ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодобранныхПолучателей(СоответствиеТабличныхЧастей, Результат)

	Для Каждого ТабличнаяЧасть Из СоответствиеТабличныхЧастей Цикл
		ТабличнаяЧасть.Значение.Очистить();
	КонецЦикла;
	
	Для Каждого Элемент Из Результат Цикл
		
		ТабличнаяЧасть = СоответствиеТабличныхЧастей.Получить(Элемент.Группа);
		Если ТабличнаяЧасть = Неопределено Тогда
			ТабличнаяЧасть = Объект.ПолучателиПисьма;
		КонецЕсли;
		
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.Адрес = Элемент.Адрес;
		НоваяСтрока.Представление = Элемент.Представление;
		НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, ",", "");
		НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, ";", "");
		НоваяСтрока.Контакт = Элемент.Контакт;
		
	КонецЦикла;
	
	ОчиститьДублиАдресатов(Объект.ПолучателиПисьма);
	
	СформироватьСпискиПолучателей();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСпискиПолучателей()

	Объект.СписокПолучателейПисьма =
		ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиПисьма, Ложь);
	Объект.СписокПолучателейКопий =
		ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиКопий, Ложь);
	Объект.СписокПолучателейСкрытыхКопий = 
		ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиСкрытыхКопий, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУточненныеКонтакты(Результат)
	
	Объект.ПолучателиКопий.Очистить();
	Объект.ПолучателиОтвета.Очистить();
	Объект.ПолучателиПисьма.Очистить();
	Объект.ПолучателиСкрытыхКопий.Очистить();
	
	Для каждого ЭлементМассива Из Результат Цикл
	
		Если ЭлементМассива.Группа = "Кому" Тогда
			ТаблицаПолучателей = Объект.ПолучателиПисьма;
		ИначеЕсли ЭлементМассива.Группа = "Копии" Тогда
			ТаблицаПолучателей = Объект.ПолучателиКопий;
		ИначеЕсли ЭлементМассива.Группа = "Скрытые" Тогда
			ТаблицаПолучателей = Объект.ПолучателиСкрытыхКопий;
		Иначе
			ТаблицаПолучателей = Объект.ПолучателиОтвета;
		КонецЕсли;
		
		СтрокаПолучатели = ТаблицаПолучателей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПолучатели, ЭлементМассива);
	
	КонецЦикла;
	
	СформироватьСпискиПолучателей();

КонецПроцедуры

&НаСервере
Функция ВыполнитьОтправкуНаСервере()
	
	ПисьмоОбъект = РеквизитФормыВЗначение("Объект");
	
	Попытка
		ИдентификаторПисьма = Взаимодействия.ВыполнитьОтправкуПисьма(ПисьмоОбъект);
	Исключение
		ЗначениеВРеквизитФормы(ПисьмоОбъект, "Объект");
		Возврат КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если НЕ ПисьмоОбъект.УдалятьПослеОтправки Тогда
		
		ПисьмоОбъект.ИдентификаторСообщения = ИдентификаторПисьма;
		ПисьмоОбъект.СтатусПисьма    = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
		ПисьмоОбъект.ДатаОтправления = ТекущаяДатаСеанса();
		ПисьмоОбъект.Записать(РежимЗаписиДокумента.Запись);
		ЗначениеВРеквизитФормы(ПисьмоОбъект, "Объект");
		
		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(
			Объект.Ссылка, Взаимодействия.ОпределитьПапкуДляПисьма(Объект.Ссылка));
		ТекущийСтатусПисьма = Объект.СтатусПисьма;
		
	Иначе
		
		ПисьмоОбъект.Прочитать();
		ПисьмоОбъект.Удалить();
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервере
Функция ОценитьРазмерПисьма()

	Размер = СтрДлина(Объект.Тема)*2;
	Размер = Размер + ?(Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML,
	                    СтрДлина(Объект.ТекстHTML),
	                    СтрДлина(Объект.Текст)) * 2;
	
	Для каждого Вложение Из Вложения Цикл
		Размер = Размер + Вложение.Размер * 1.5;
	КонецЦикла;
	
	Для каждого СтрокаТаблицыСоответствий Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
		Размер = Размер + СтрокаТаблицыСоответствий.Картинка.ПолучитьДвоичныеДанные().Размер()*1.5;
	КонецЦикла;
	
	Возврат Размер;

КонецФункции

&НаСервере
Функция РеквизитыФайла(Файл)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Файл, "Наименование, Расширение, ИндексКартинки, Размер, ПодписанЭП ");
	
КонецФункции

&НаКлиенте
Процедура ОтправитьПисьмоКлиент()
	
	Если Не ОтправлятьСообщенияСразу Тогда
		ОтправлятьСообщенияСразу = (
		Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее"));
	КонецЕсли;
	
	ВыполняетсяОтправка = Истина;
	
	Если Объект.Ссылка.Пустая() 
		ИЛИ Модифицированность 
		ИЛИ Объект.ВключатьТелоИсходногоПисьма 
		ИЛИ (Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик")) Тогда
		Записать();
	КонецЕсли;
	
	ВыполняетсяОтправка = Ложь;
	
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтправлятьСообщенияСразу Тогда
		Результат = ВыполнитьОтправкуНаСервере();
	Иначе
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Если Результат = "" Тогда
		Закрыть();
	Иначе
		ПоказатьПредупреждение(, Результат);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВопросОНеСохраненииОтправленногоПисьма(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.УдалятьПослеОтправки = Истина;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Объект.УдалятьПослеОтправки = Ложь;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОтправитьПисьмоКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииФорматаПриЗакрытии(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		ФорматСообщения = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML");
		Возврат;
	КонецЕсли;
		
	ТекстПисьма = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
	Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст");
	ТекстПисьмаФорматированныйДокумент.Удалить();
	Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
	Объект.ТекстHTML = "";
	Объект.Кодировка = "UTF-8";
	Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаОбычныйТекст;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвойстваВложения(ТекущийИндексВКоллекции)
	
	ТекущиеДанные = Вложения.Получить(ТекущийИндексВКоллекции);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.Вложения.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
		
	ФайлДоступенДляРедактирования = 
		(Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик"));
	ПараметрыФормы = Новый Структура("ПрисоединенныйФайл, ТолькоПросмотр", 
		ТекущиеДанные.Ссылка,НЕ ФайлДоступенДляРедактирования);
	ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыФормы,, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПодпись(ПредыдущаяУчетнаяЗапись, НоваяУчетнаяЗапись)

	ПараметрыПредыдущаяУЗ =
			Взаимодействия.ПолучитьПараметрыРаботыПользователяДляИсходящегоЭлектронногоПисьма(
			ПредыдущаяУчетнаяЗапись,
			ФорматСообщения,
			?(Объект.ВзаимодействиеОснование = Неопределено, Истина, Ложь));
			
	ПараметрыНоваяУЗ =
			Взаимодействия.ПолучитьПараметрыРаботыПользователяДляИсходящегоЭлектронногоПисьма(
			НоваяУчетнаяЗапись,
			ФорматСообщения,
			?(Объект.ВзаимодействиеОснование = Неопределено, Истина, Ложь));
	
	Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст Тогда
		Если ПустаяСтрока(ТекстПисьма) Тогда
			ТекстПисьма = ПараметрыНоваяУЗ.Подпись;
		Иначе
			Если СтрЧислоВхождений(ТекстПисьма, ПараметрыПредыдущаяУЗ.Подпись) > 0 Тогда
				ТекстПисьма = СтрЗаменить(ТекстПисьма, ПараметрыПредыдущаяУЗ.Подпись, ПараметрыНоваяУЗ.Подпись);
			Иначе
				ТекстПисьма = ТекстПисьма + ПараметрыНоваяУЗ.Подпись;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		
		ТекстПисьмо = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
		Если ПустаяСтрока(ТекстПисьмо) Тогда
			
			ТекстПисьмаФорматированныйДокумент = ПараметрыНоваяУЗ.Подпись;
			
		Иначе
			
			ТекстПредыдущаяУЗ = ПараметрыПредыдущаяУЗ.Подпись.ПолучитьТекст();
			
			Если СтрЧислоВхождений(ТекстПисьмо, ТекстПредыдущаяУЗ) > 0 Тогда
				
				КоличествоЭлементовСтараяПодпись = ПараметрыПредыдущаяУЗ.Подпись.Элементы.Количество();
				КоличествоЭлементовПисьмо        = ТекстПисьмаФорматированныйДокумент.Элементы.Количество();
				
				УдалитьЭлементыСтаройПодписи(ТекстПисьмаФорматированныйДокумент,ПараметрыПредыдущаяУЗ.Подпись);
				
			КонецЕсли;
			
			ДобавитьФорматированныйДокументКФорматированномуДокументу(ТекстПисьмаФорматированныйДокумент, ПараметрыНоваяУЗ.Подпись);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыСтаройПодписи(ТекстПисьмаФорматированныйДокумент, СтараяПодпись)

	ТекстПисьмаБезПараграфов = Новый ФорматированныйДокумент;
	ДобавитьФорматированныйДокументКФорматированномуДокументу(ТекстПисьмаБезПараграфов, ТекстПисьмаФорматированныйДокумент);
	СтараяПодписьБезПараграфов = Новый ФорматированныйДокумент;
	ДобавитьФорматированныйДокументКФорматированномуДокументу(СтараяПодписьБезПараграфов, СтараяПодпись);
	
	ПервыйЗначимыйЭлементПодпись       = Неопределено;
	ИндексПервогоЗначимогоЭлемента     = -1;
	ПоследнийЗначимыйЭлементПодпись    = Неопределено;
	ИндексПоследнегоЗначимогоЭлемента  = -1;
	КоличествоЭлементовПодпись = СтараяПодписьБезПараграфов.Элементы[0].Элементы.Количество();
	КоличествоЭлементовТекст   = ТекстПисьмаБезПараграфов.Элементы[0].Элементы.Количество();
	
	Для Инд = 0 По КоличествоЭлементовПодпись - 1 Цикл
		
		ЭлементПодписи = СтараяПодписьБезПараграфов.Элементы[0].Элементы[Инд];
		Если ТипЗнч(ЭлементПодписи) = Тип("ТекстФорматированногоДокумента")
			Или ТипЗнч(ЭлементПодписи) = Тип("КартинкаФорматированногоДокумента") Тогда 
			
			ПервыйЗначимыйЭлементПодпись   = ЭлементПодписи;
			ИндексПервогоЗначимогоЭлемента = Инд;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Инд = 0 По КоличествоЭлементовПодпись - 1 Цикл
		
		ЭлементПодписи = СтараяПодписьБезПараграфов.Элементы[0].Элементы[КоличествоЭлементовПодпись - 1 - Инд];
		Если ТипЗнч(ЭлементПодписи) = Тип("ТекстФорматированногоДокумента")
			Или ТипЗнч(ЭлементПодписи) = Тип("КартинкаФорматированногоДокумента") Тогда  
			
			ПоследнийЗначимыйЭлементПодпись    = ЭлементПодписи;
			ИндексПоследнегоЗначимогоЭлемента  = КоличествоЭлементовПодпись - 1 - Инд;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИндексПервогоЭлементаТекст    = -1;
	ИндексПоследнегоЭлементаТекст = -1;
	
	Для Инд = 0 По КоличествоЭлементовТекст - 1 Цикл;
		
		ЭлементТекста = ТекстПисьмаБезПараграфов.Элементы[0].Элементы[КоличествоЭлементовТекст - 1 - Инд];
		Если ИндексПервогоЭлементаТекст = - 1 Тогда
			Если ТипЗнч(ЭлементТекста) = ТипЗнч(ПервыйЗначимыйЭлементПодпись) Тогда
				
				Если ТипЗнч(ЭлементТекста) = Тип("ТекстФорматированногоДокумента")
					И ЭлементТекста.Текст = ПервыйЗначимыйЭлементПодпись.Текст Тогда
					ИндексПервогоЭлементаТекст = КоличествоЭлементовТекст - 1 - Инд;
				КонецЕсли;
				Если ТипЗнч(ЭлементТекста) = Тип("КартинкаФорматированногоДокумента")
					И ЭлементТекста.Картинка = ПервыйЗначимыйЭлементПодпись.Картинка Тогда
					ИндексПервогоЭлементаТекст = КоличествоЭлементовТекст - 1 - Инд;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ИндексПоследнегоЭлементаТекст = - 1 Тогда
			Если ТипЗнч(ЭлементТекста) = ТипЗнч(ПоследнийЗначимыйЭлементПодпись) Тогда
				
				Если ТипЗнч(ЭлементТекста) = Тип("ТекстФорматированногоДокумента")
					И ЭлементТекста.Текст = ПоследнийЗначимыйЭлементПодпись.Текст Тогда
					ИндексПоследнегоЭлементаТекст = КоличествоЭлементовТекст - 1 - Инд;
				КонецЕсли;
				Если ТипЗнч(ЭлементТекста) = Тип("КартинкаФорматированногоДокумента")
					И ЭлементТекста.Картинка = ПоследнийЗначимыйЭлементПодпись.Картинка Тогда
					ИндексПоследнегоЭлементаТекст = КоличествоЭлементовТекст - 1 - Инд;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ИндексПервогоЭлементаТекст <> -1 И ИндексПоследнегоЭлементаТекст <> -1 Тогда
			
			Прервать;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Если ИндексПервогоЭлементаТекст <> - 1 И ИндексПоследнегоЭлементаТекст <> -1 Тогда
		
		Для Инд = 0 По ИндексПоследнегоЭлементаТекст - ИндексПервогоЭлементаТекст Цикл
			ТекстПисьмаБезПараграфов.Элементы[0].Элементы.Удалить(ИндексПоследнегоЭлементаТекст - Инд);
		КонецЦикла;
		
		ТекстПисьмаФорматированныйДокумент = ТекстПисьмаБезПараграфов;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФорматированныйДокументКФорматированномуДокументу(ПриемникДокумент, ДобавляемыйДокумент)

	Для Инд = 0 По ДобавляемыйДокумент.Элементы.Количество() -1 Цикл
		ДобавляемыйЭлемент = ДобавляемыйДокумент.Элементы[Инд];
		Если ТипЗнч(ДобавляемыйЭлемент) = Тип("ПараграфФорматированногоДокумента") Тогда
			НовыйПараграф = ПриемникДокумент.Элементы.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПараграф, ДобавляемыйЭлемент, "ТипПараграфа, ГоризонтальноеПоложение, МеждустрочныйИнтервал,Отступ");
			ДобавитьФорматированныйДокументКФорматированномуДокументу(НовыйПараграф, ДобавляемыйЭлемент);
		Иначе
			Если ТипЗнч(ДобавляемыйЭлемент) = Тип("ТекстФорматированногоДокумента") Тогда
				НовыйЭлемент = ПриемникДокумент.Элементы.Добавить(ДобавляемыйЭлемент.Текст, Тип("ТекстФорматированногоДокумента"));
				ЗаполнитьЗначенияСвойств(НовыйЭлемент,ДобавляемыйЭлемент,,"ЗакладкаКонца, ЗакладкаНачала, Родитель");
			ИначеЕсли ТипЗнч(ДобавляемыйЭлемент) = Тип("КартинкаФорматированногоДокумента") Тогда
				НовыйЭлемент = ПриемникДокумент.Элементы.Добавить(ДобавляемыйЭлемент.Картинка, Тип("КартинкаФорматированногоДокумента"));
				ЗаполнитьЗначенияСвойств(НовыйЭлемент,ДобавляемыйЭлемент,,"ЗакладкаКонца, ЗакладкаНачала, Родитель");
			ИначеЕсли ТипЗнч(ДобавляемыйЭлемент) = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
				Если ТипЗнч(ДобавляемыйДокумент) = Тип("ПараграфФорматированногоДокумента") 
					И (ДобавляемыйДокумент.ТипПараграфа = ТипПараграфа.МаркированныйСписок
					Или ДобавляемыйДокумент.ТипПараграфа = ТипПараграфа.НумерованныйСписок) Тогда
					Продолжить;
				КонецЕсли;
				НовыйЭлемент = ПриемникДокумент.Элементы.Добавить( , Тип("ПереводСтрокиФорматированногоДокумента"));
			КонецЕсли;
		КонецЕсли
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДублиАдресатов(ТаблицаПолучателей)
	
	СоответствиеАдресовСтрокКУдалению = Новый Соответствие;
	
	Для Каждого СтрокаПолучатель Из ТаблицаПолучателей Цикл
		Если СоответствиеАдресовСтрокКУдалению.Получить(СтрокаПолучатель.Адрес) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НайденныеСтроки =  ТаблицаПолучателей.НайтиСтроки(Новый Структура("Адрес", СтрокаПолучатель.Адрес));
		Если НайденныеСтроки.Количество() > 1 Тогда
			МассивКУдалению = Новый Массив;
			Для Инд = 0 По НайденныеСтроки.Количество() - 1 Цикл
				Если Инд = 0 Тогда
					Если НЕ ЗначениеЗаполнено(НайденныеСтроки[Инд].Контакт) Тогда
						МассивКУдалению.Добавить(НайденныеСтроки[Инд]);
					КонецЕсли;
				Иначе
					Если МассивКУдалению.Количество() = 0 ИЛИ (НЕ ЗначениеЗаполнено(НайденныеСтроки[Инд].Контакт)) Тогда
						МассивКУдалению.Добавить(НайденныеСтроки[Инд]);
					ИначеЕсли ЗначениеЗаполнено(НайденныеСтроки[Инд].Контакт) И НЕ (Инд = МассивКУдалению.Количество()) Тогда
						МассивКУдалению.Добавить(НайденныеСтроки[Инд]);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НайденныеСтроки.Количество() = МассивКУдалению.Количество() Тогда
				МассивКУдалению.Удалить(0);
			КонецЕсли;
			
			СоответствиеАдресовСтрокКУдалению.Вставить(СтрокаПолучатель.Адрес,МассивКУдалению);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаСоответствия Из СоответствиеАдресовСтрокКУдалению Цикл
		Для Каждого СтрокаКУдалению Из СтрокаСоответствия.Значение Цикл
			ТаблицаПолучателей.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
