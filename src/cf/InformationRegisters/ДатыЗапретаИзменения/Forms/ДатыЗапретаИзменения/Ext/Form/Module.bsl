&НаКлиенте
Перем ПользователиПродолжитьДобавление;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		ИнтерфейсВерсия82 = Истина;
		Элементы.ПользователиДобавить.ТолькоВоВсехДействиях = Ложь;
		Элементы.ДатыЗапретаДобавить.ТолькоВоВсехДействиях = Ложь;
	КонецЕсли;
	
	// Кэширование текущей даты на сервере.
	НачалоДня = НачалоДня(ТекущаяДатаСеанса());
	
	// Заполнение свойств разделов.
	СвойстваРазделов = ДатыЗапретаИзмененияСлужебный.СвойстваРазделов();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СвойстваРазделов);
	
	// Настройка полей формы
	Если Параметры.ДатыЗапретаЗагрузкиДанных Тогда
		
		Если НЕ СвойстваРазделов.ДатыЗапретаЗагрузкиВнедрены Тогда
			ВызватьИсключение ДатыЗапретаИзмененияСлужебный.ТекстОшибкиДатыЗапретаЗагрузкиНеВнедрены();
		КонецЕсли;
		
		Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
			ВызватьИсключение НСтр("ru = 'Недостаточно прав для работы с датами запрета загрузки.'");
		КонецЕсли;
		
		Элементы.ИспользованиеДатЗапретаВыключеноНадпись.Заголовок =
			НСтр("ru = 'Использование дат запрета загрузки выключено в настройках программы.'");
		
		Заголовок = НСтр("ru = 'Даты запрета загрузки данных'");
		Элементы.УстановкаДатыЗапрета.СписокВыбора.НайтиПоЗначению("НетЗапрета").Представление =
			НСтр("ru = 'Нет запрета загрузки данных'");
		Элементы.УстановкаДатыЗапрета.СписокВыбора.НайтиПоЗначению("ДляВсехПользователей").Представление =
			НСтр("ru = 'Для всех информационных баз'");
		Элементы.УстановкаДатыЗапрета.СписокВыбора.НайтиПоЗначению("ПоПользователям").Представление =
			НСтр("ru = 'По информационным базам'");
		
		Элементы.ПользователиПолноеПредставление.Заголовок =
			НСтр("ru = 'Программа: информационная база'");
		
		ЗначениеДляВсехПользователей =
			Перечисления.ВидыНазначенияДатЗапрета.ДляВсехИнформационныхБаз;
		
		ТипыПользователя =
			Метаданные.РегистрыСведений.ДатыЗапретаИзменения.Измерения.Пользователь.Тип.Типы();
		
		Для каждого ТипПользователя Из ТипыПользователя Цикл
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипПользователя);
			Если НЕ Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
				Продолжить;
			КонецЕсли;
			ПустаяСсылкаУзлаПланаОбмена = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
				ОбъектМетаданных.ПолноеИмя()).ПустаяСсылка();
			
			СписокТиповПользователей.Добавить(
				ПустаяСсылкаУзлаПланаОбмена, ОбъектМетаданных.Представление());
		КонецЦикла;
		Элементы.Пользователи.КартинкаСтрок = БиблиотекаКартинок.ПиктограммыПланОбменаУзел;
	Иначе
		Если Не Пользователи.РолиДоступны("ДобавлениеИзменениеДатЗапретаИзменения") Тогда
			ВызватьИсключение НСтр("ru = 'Недостаточно прав для работы с датами запрета изменения.'");
		КонецЕсли;
		
		Элементы.ИспользованиеДатЗапретаВыключеноНадпись.Заголовок =
			НСтр("ru = 'Использование дат запрета изменения выключено в настройках программы.'");
		
		ЗначениеДляВсехПользователей = Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей;
		
		СписокТиповПользователей.Добавить(
			Тип("СправочникСсылка.Пользователи"),        НСтр("ru = 'Пользователь'"));
		
		СписокТиповПользователей.Добавить(
			Тип("СправочникСсылка.ВнешниеПользователи"), НСтр("ru = 'Внешний пользователь'"));
	КонецЕсли;
	
	Список = Элементы.СпособУказанияДатыЗапрета.СписокВыбора;
	
	Если БезРазделовИОбъектов Тогда
		Элементы.СпособУказанияДатыЗапрета.Видимость =
			ЗначениеЗаполнено(ТекущийСпособУказанияДатыЗапрета(
				"*", ЕдинственныйРаздел, ЗначениеДляВсехПользователей, НачалоДня));
		
		Список.Удалить(Список.НайтиПоЗначению("ПоРазделамИОбъектам"));
		Список.Удалить(Список.НайтиПоЗначению("ПоРазделам"));
		Список.Удалить(Список.НайтиПоЗначению("ПоОбъектам"));
		
	ИначеЕсли НЕ ПоказыватьРазделы Тогда
		Список.Удалить(Список.НайтиПоЗначению("ПоРазделамИОбъектам"));
		Список.Удалить(Список.НайтиПоЗначению("ПоРазделам"));
	ИначеЕсли ВсеРазделыБезОбъектов Тогда
		Список.Удалить(Список.НайтиПоЗначению("ПоРазделамИОбъектам"));
		Список.Удалить(Список.НайтиПоЗначению("ПоОбъектам"));
	Иначе
		Список.Удалить(Список.НайтиПоЗначению("ПоОбъектам"));
	КонецЕсли;
	
	ИспользоватьВнешнихПользователей = ИспользоватьВнешнихПользователей
		И ВнешниеПользователи.ИспользоватьВнешнихПользователей();
	
	СправочникВнешниеПользователиДоступен =
		ПравоДоступа("Просмотр", Метаданные.Справочники.ВнешниеПользователи);
	
	ОбновитьНаСервере();
	
	СтандартныеПодсистемыСервер.УстановитьОтображениеЗаголовковГрупп(
		ЭтотОбъект, "ТекущийПользовательПредставление");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы)
	   = ВРег("РегистрСведений.ДатыЗапретаИзменения.Форма.РедактированиеДатыЗапрета") Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ВыделенныеСтроки = Элементы.ДатыЗапрета.ВыделенныеСтроки;
			
			Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
				Строка = ДатыЗапрета.НайтиПоИдентификатору(ВыделеннаяСтрока);
				Строка.ОписаниеДатыЗапрета              = ВыбранноеЗначение.ОписаниеДатыЗапрета;
				Строка.КоличествоДнейРазрешения         = ВыбранноеЗначение.КоличествоДнейРазрешения;
				Строка.ДатаЗапрета                      = ВыбранноеЗначение.ДатаЗапрета;
				ЗаписатьОписаниеИДатуЗапрета(Строка);
				Строка.ОписаниеДатыЗапретаПредставление = ПредставлениеОписанияДатыЗапрета(Строка);
			КонецЦикла;
			ОбновитьНаличиеДатЗапретаТекущегоПользователя();
		КонецЕсли;
		
		// Отмена блокировки выделенных строк.
		РазблокироватьВсеЗаписи(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВРег(ИмяСобытия) <> ВРег("Запись_НаборКонстант") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВРег(Источник) = ВРег("ИспользоватьДатыЗапретаЗагрузки")
	 Или ВРег(Источник) = ВРег("ИспользоватьДатыЗапретаИзменения") Тогда
		
		ПодключитьОбработчикОжидания("ПриИзмененииИспользованияДатЗапрета", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекстВопроса = ТекстВопросаОНесохраненныхДанных();
	
	ТекстУведомления = ТекстУведомленияОНеиспользованныхРежимахНастройки();
	
	Если НЕ ЗначениеЗаполнено(ТекстВопроса) Тогда
		ТекстВопроса = ТекстУведомления;
		ТекстУведомления = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстУведомления) Тогда
		ТекстВопроса = ТекстВопроса + Символы.ПС + Символы.ПС + ТекстУведомления;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		ТекстВопроса = ТекстВопроса + Символы.ПС + Символы.ПС + ТекстВопросаЗакрытьФорму();
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
			ЭтотОбъект, Отказ, ТекстВопроса, "ЗакрытьФормуБезПодтверждения");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	РазблокироватьВсеЗаписи(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПриИзмененииИспользованияДатЗапрета()
	
	ПриИзмененииИспользованияДатЗапретаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииИспользованияДатЗапретаНаСервере()
	
	Элементы.ИспользованиеДатЗапретаВыключено.Видимость =
		     Параметры.ДатыЗапретаЗагрузкиДанных
		   И Не Константы.ИспользоватьДатыЗапретаЗагрузки.Получить()
		 Или Не Параметры.ДатыЗапретаЗагрузкиДанных
		   И Не Константы.ИспользоватьДатыЗапретаИзменения.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаДатыЗапретаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаДатыЗапретаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если УстановкаДатыЗапрета = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяУстановкаДатыЗапрета = ТекущаяУстановкаДатыЗапрета(Параметры.ДатыЗапретаЗагрузкиДанных);
	
	Если ТекущаяУстановкаДатыЗапрета = "ПоПользователям"
	   И ВыбранноеЗначение = "ДляВсехПользователей" Тогда
		
		ТекстВопроса = ТекстВопросаУдалитьВсеДатыЗапретаКромеДатДляВсехПользователей();
		
	ИначеЕсли ТекущаяУстановкаДатыЗапрета = "ПоПользователям"
	        И ВыбранноеЗначение = "НетЗапрета" Тогда
		
		ТекстВопроса = ТекстВопросаУдалитьВсеДатыЗапрета();
		
	ИначеЕсли ТекущаяУстановкаДатыЗапрета = "ДляВсехПользователей"
	        И ВыбранноеЗначение = "НетЗапрета" Тогда
		
		ТекстВопроса = ТекстВопросаУдалитьВсеДатыЗапрета();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"УстановкаДатыЗапретаОбработкаВыбораПродолжение", ЭтотОбъект, ВыбранноеЗначение),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	Иначе
		УстановкаДатыЗапрета = ВыбранноеЗначение;
		ИзменитьУстановкуДатыЗапрета(ВыбранноеЗначение, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособУказанияДатыЗапретаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособУказанияДатыЗапретаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СпособУказанияДатыЗапрета = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	Данные = Неопределено;
	ТекущийСпособ = ТекущийСпособУказанияДатыЗапрета(ТекущийПользователь,
		ЕдинственныйРаздел, ЗначениеДляВсехПользователей, НачалоДня, Данные);
	
	ТекстВопроса = "";
	Если ТекущийСпособ = "ПоРазделамИОбъектам" И ВыбранноеЗначение = "ОбщаяДата" Тогда
		ТекстВопроса = ТекстВопросаУдалитьДатыЗапретаДляРазделовИОбъектов();
		
	ИначеЕсли ТекущийСпособ = "ПоРазделамИОбъектам" И ВыбранноеЗначение = "ПоРазделам"
	      ИЛИ ТекущийСпособ = "ПоОбъектам"          И ВыбранноеЗначение = "ОбщаяДата" Тогда
		ТекстВопроса = ТекстВопросаУдалитьДатыЗапретаДляОбъектов();
		
	ИначеЕсли ТекущийСпособ = "ПоРазделамИОбъектам" И ВыбранноеЗначение = "ПоОбъектам"
	      ИЛИ ТекущийСпособ = "ПоРазделам"          И ВыбранноеЗначение = "ПоОбъектам"
	      ИЛИ ТекущийСпособ = "ПоРазделам"          И ВыбранноеЗначение = "ОбщаяДата" Тогда
		ТекстВопроса = ТекстВопросаУдалитьДатыЗапретаДляРазделов();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Данные", Данные);
		ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"СпособУказанияДатыЗапретаОбработкаВыбораПродолжение",
				ЭтотОбъект,
				ДополнительныеПараметры),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	Иначе
		СпособУказанияДатыЗапрета = ВыбранноеЗначение;
		ПрочитатьДанныеПользователя(ЭтотОбъект, ВыбранноеЗначение, Данные);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Одинаковые обработчики событий форм ДатыЗапретаИзменения и РедактированиеДатыЗапрета.

&НаКлиенте
Процедура ОписаниеДатыЗапретаПриИзменении(Элемент)
	
	ОбщаяДатаЗапретаСОписаниемПриИзменении(ЭтотОбъект);
	ЗаписатьОбщуюДатуЗапретаСОписанием();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗапретаПриИзменении(Элемент)
	
	ОбщаяДатаЗапретаСОписаниемПриИзменении(ЭтотОбъект);
	ЗаписатьОбщуюДатуЗапретаСОписанием();
	
	ОбновитьНаличиеДатЗапретаТекущегоПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьИзменениеДанныхДоДатыЗапретаПриИзменении(Элемент)
	
	ОбщаяДатаЗапретаСОписаниемПриИзменении(ЭтотОбъект);
	ЗаписатьОбщуюДатуЗапретаСОписанием();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДнейРазрешенияПриИзменении(Элемент)
	
	ОбщаяДатаЗапретаСОписаниемПриИзменении(ЭтотОбъект);
	ЗаписатьОбщуюДатуЗапретаСОписанием();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДнейРазрешенияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоДнейРазрешения = Текст;
	
	ОбщаяДатаЗапретаСОписаниемПриИзменении(ЭтотОбъект);
	ЗаписатьОбщуюДатуЗапретаСОписанием();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПользователи

&НаКлиенте
Процедура ПользователиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.Пользователи.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеПользователяОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиВосстановитьТекущуюСтрокуПослеОтказаПриАктивизацииСтроки()
	
	Элементы.Пользователи.ТекущаяСтрока = ПользователиТекущаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	// Копирование не требуется, т.к. пользователи не могут повторяться.
	Если Копирование Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ПользователиПродолжитьДобавление <> Истина Тогда
		Отказ = Истина;
		ПроверкаНесохраненныхЗаписей(
			Новый ОписаниеОповещения("ПользователиПередНачаломДобавленияЗавершение", ЭтотОбъект));
		Возврат;
	КонецЕсли;
	
	ПользователиПродолжитьДобавление = Неопределено;
	
	ДатыЗапрета.ПолучитьЭлементы().Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Поле          = Элемент.ТекущийЭлемент;
	
	Если ТекущиеДанные.Пользователь = ЗначениеДляВсехПользователей Тогда
		// Предопределенное значение "<Для всех пользователей>" не изменяется.
		Если Поле = Элементы.ПользователиПолноеПредставление Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщенияЗначениеДляВсехПользователейНеИзменяется());
			
		ИначеЕсли Поле = Элементы.ПользователиКомментарий Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщенияКомментарийДляВсехПользователейНеИзменяется());
		КонецЕсли;
		Отказ = Истина;
	ИначеЕсли Поле <> Элементы.ПользователиПолноеПредставление
	        И НЕ ЗначениеЗаполнено(ТекущиеДанные.Представление) Тогда
		// Все значения, кроме предопределенного значения "<Для всех пользователей>",
		// должны быть заполнены до установки описания или даты запрета.
		Элемент.ТекущийЭлемент = Элементы.ПользователиПолноеПредставление;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщенияСначалаВыберитеПользователя());
	КонецЕсли;
	
	Если Отказ Тогда
		Элементы.ПользователиПолноеПредставление.ТолькоПросмотр = Ложь;
		Элементы.ПользователиКомментарий.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ПользователиКомментарий.ТолькоПросмотр =
			НЕ ЗначениеЗаполнено(ТекущиеДанные.Представление);
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Представление) Тогда
			ЗаблокироватьНаборЗаписейПользователя(ТекущиеДанные.Пользователь, Элемент.ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.Пользователи.ВыделенныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждение(, ТекстСообщенияДляУдаленияВыделитеОднуСтроку());
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Пользователи.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	
	// Элемент для всех пользователей присутствует всегда.
	ДополнительныеПараметры.Вставить("ДатыЗапретаДляВсехПользователей",
		ТекущиеДанные.Пользователь = ЗначениеДляВсехПользователей);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Представление)
	   И НЕ ТекущиеДанные.БезДатыЗапрета Тогда
		// Для удаления пользователей с записями требуется подтверждение.
		Если ДополнительныеПараметры.ДатыЗапретаДляВсехПользователей Тогда
			ТекстВопроса = ТекстВопросаУдалитьДатыЗапретаДляВсехПользователей();
		Иначе
			Если ТипЗнч(ТекущиеДанные.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
				ТекстВопроса = ТекстВопросаУдалитьДатыЗапретаДляПользователя();
				
			ИначеЕсли ТипЗнч(ТекущиеДанные.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				ТекстВопроса = ТекстВопросаУдалитьДатыЗапретаДляГруппыПользователей();
				
			ИначеЕсли ТипЗнч(ТекущиеДанные.Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
				ТекстВопроса = ТекстВопросаУдалитьДатыЗапретаДляВнешнегоПользователя();
				
			ИначеЕсли ТипЗнч(ТекущиеДанные.Пользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
				ТекстВопроса = ТекстВопросаУдалитьДатыЗапретаДляГруппыВнешнихПользователей();
			Иначе
				ТекстВопроса = ТекстВопросаУдалитьДатыЗапрета();
			КонецЕсли;
		КонецЕсли;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"ПользователиПередУдалениемПодтверждение", ЭтотОбъект, ДополнительныеПараметры),
			ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ПользователиПередУдалениемПродолжение(Неопределено, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Пользователи.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Представление) Тогда
		ТекущиеДанные.НомерКартинки = -1;
		ПодключитьОбработчикОжидания("ОбработчикОжиданияВыбратьПользователей", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если УстановленныеБлокировки.Количество() > 0 Тогда
		РазблокироватьВсеЗаписи(ЭтотОбъект);
	КонецЕсли;
	
	Элементы.ПользователиПолноеПредставление.ТолькоПросмотр = Ложь;
	Элементы.ПользователиКомментарий.ТолькоПросмотр = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПользователиОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ПользователиОбработкаВыбораНаСервере(ВыбранноеЗначение)
	
	Отбор = Новый Структура("Пользователь");
	
	Для каждого Значение Из ВыбранноеЗначение Цикл
		Отбор.Пользователь = Значение;
		Если ПользователиДатЗапрета.НайтиСтроки(Отбор).Количество() = 0 Тогда
			ЗаблокироватьИЗаписатьПустыеДаты(
				РазделПустаяСсылка, РазделПустаяСсылка, Отбор.Пользователь, "");
			
			ОписаниеПользователя = ПользователиДатЗапрета.Добавить();
			ОписаниеПользователя.Пользователь  = Отбор.Пользователь;
			
			ОписаниеПользователя.Представление = ТекстПредставленияПользователя(
				ЭтотОбъект, Отбор.Пользователь);
			
			ОписаниеПользователя.ПолноеПредставление = ОписаниеПользователя.Представление;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьНомераКартинокПользователейДатЗапрета();
	
	РазблокироватьВсеЗаписи(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элемента ПолноеПредставление таблицы формы Пользователи.

&НаКлиенте
Процедура ПользователиПолноеПредставлениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Пользователи.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ПолноеПредставление) Тогда
		ТекущиеДанные.ПолноеПредставление = ТекущиеДанные.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПолноеПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Пользователи.ТекущиеДанные;
	Если ТекущиеДанные.Пользователь = ЗначениеДляВсехПользователей Тогда
		// Элемент для всех пользователей присутствует всегда.
		ПоказатьПредупреждение(, ТекстСообщенияЗначениеДляВсехПользователейНеИзменяется());
	Иначе
		// Возможна смена пользователя на себя и на еще не выбранного в списке.
		ВыбратьПодобратьПользователей();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПолноеПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПолноеПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Элементы.Пользователи.ТекущиеДанные.Пользователь) Тогда
		ПоказатьЗначение(, Элементы.Пользователи.ТекущиеДанные.Пользователь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПолноеПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Пользователи.ТекущиеДанные;
	Если ТекущиеДанные.Пользователь = ВыбранноеЗначение Тогда
		ТекущиеДанные.ПолноеПредставление = ТекущиеДанные.Представление;
		Возврат;
	КонецЕсли;
	
	// Замена пользователя возможна только на другого
	// пользователя, которого еще нет в списке.
	Отбор = Новый Структура("Пользователь", ВыбранноеЗначение);
	Строки = ПользователиДатЗапрета.НайтиСтроки(Отбор);
	
	Если Строки.Количество() = 0 Тогда
		Если НЕ ЗаменитьПользователяНабораЗаписей(ТекущийПользователь, ВыбранноеЗначение) Тогда
			ПоказатьПредупреждение(,
				ТекстСообщенияЗначениеУжеДобавленоВСписок()
				+ Символы.ПС
				+ ТекстСообщенияОбновитьДанныеФормыF5());
			Возврат;
		КонецЕсли;
		// Установка выбранного пользователя.
		ТекущийПользователь = Неопределено;
		ТекущиеДанные.Пользователь  = ВыбранноеЗначение;
		ТекущиеДанные.Представление = ТекстПредставленияПользователя(ЭтотОбъект, ВыбранноеЗначение);
		ТекущиеДанные.ПолноеПредставление = ТекущиеДанные.Представление;
		Элементы.ПользователиКомментарий.ТолькоПросмотр = Ложь;
		ЗаполнитьНомераКартинокПользователейДатЗапрета(Элементы.Пользователи.ТекущаяСтрока);
		Элементы.Пользователи.ЗакончитьРедактированиеСтроки(Ложь);
		ОбновитьДанныеПользователя(Ложь);
		ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ДатыЗапретаИзменения"));
		Элементы.Пользователи.ТекущийЭлемент = Элементы.ПользователиКомментарий;
		Элементы.Пользователи.ИзменитьСтроку();
	Иначе
		ПоказатьПредупреждение(, ТекстСообщенияЗначениеУжеДобавленоВСписок());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПолноеПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПолноеПредставлениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элемента Комментарий таблицы формы Пользователи.

&НаКлиенте
Процедура ПользователиКомментарийПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Пользователи.ТекущиеДанные;
	
	ЗаписатьКомментарий(ТекущиеДанные.Пользователь, ТекущиеДанные.Комментарий);
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ДатыЗапретаИзменения"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДатыЗапрета

&НаКлиенте
Процедура ДатыЗапретаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ДатыЗапрета.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатыЗапретаПриАктивизацииСтроки(Элемент)
	
	ДатыЗапретаУстановитьДоступностьКоманд(Элементы.ДатыЗапрета.ТекущиеДанные <> Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатыЗапретаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не Элементы.ДатыЗапретаДобавить.Доступность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Копирование
	 ИЛИ ВсеРазделыБезОбъектов
	 ИЛИ СпособУказанияДатыЗапрета = "ПоРазделам" Тогда
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТекущийПользователь = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияСначалаВыберитеПользователя());
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущийРаздел = ТекущийРаздел(, Истина);
	Если ТекущийРаздел = РазделПустаяСсылка Тогда
		ПоказатьПредупреждение(, ТекстСообщенияВВыбранномРазделеДатыЗапретаДляОбъектовНеУстанавливаются());
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТипыОбъектовРаздела = ТипыОбъектовРазделов.Получить(ТекущийРаздел);
	
	ТекущиеДанные = Элементы.ДатыЗапрета.ТекущиеДанные;
	
	Если ТипыОбъектовРаздела <> Неопределено
	   И ТипыОбъектовРаздела.Количество() > 0 Тогда
		
		Если ПоказыватьРазделыТекущегоПользователя Тогда
			Родитель = ТекущиеДанные.ПолучитьРодителя();
			
			Если НЕ ТекущиеДанные.ЭтоРаздел
			      И Родитель <> Неопределено Тогда
				// Добавление объекта в раздел.
				Отказ = Истина;
				Элемент.ТекущаяСтрока = Родитель.ПолучитьИдентификатор();
				Элемент.ДобавитьСтроку();
			КонецЕсли;
		ИначеЕсли Элемент.ТекущаяСтрока <> Неопределено Тогда
			Отказ = Истина;
			Элемент.ТекущаяСтрока = Неопределено;
			Элемент.ДобавитьСтроку();
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, ТекстСообщенияВВыбранномРазделеДатыЗапретаДляОбъектовНеУстанавливаются());
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатыЗапретаПередНачаломИзменения(Элемент, Отказ)
	
	Если Не Элементы.ДатыЗапретаИзменить.Доступность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Поле = Элементы.ДатыЗапрета.ТекущийЭлемент;
	
	РазделБезОбъектов = РазделыБезОбъектов.Найти(ТекущиеДанные.Раздел) <> Неопределено;
	
	// Переход к доступному полю или открытие формы.
	ОткрытьФормуРедактированияДатыЗапрета = Ложь;
	ОткрытьФормуВыбораРазделов = Ложь;
	
	Если Поле = Элементы.ДатыЗапретаПолноеПредставление Тогда
		Если ТекущиеДанные.ЭтоРаздел Тогда
			Если НазначениеДляВсех(ТекущийПользователь) Тогда
				// Все разделы всегда заполнены, их не требуется изменять.
				Если ТекущиеДанные.ОписаниеДатыЗапрета <> "ПроизвольнаяДата"
				 ИЛИ Поле = Элементы.ДатыЗапретаОписаниеДатыЗапретаПредставление Тогда
					ОткрытьФормуРедактированияДатыЗапрета = Истина;
				Иначе
					ТекущийЭлемент = Элементы.ДатыЗапретаДатаЗапрета;
					Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Раздел) Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстСообщенияОбщаяДатаМожетБытьУстановлена());
					ИначеЕсли РазделБезОбъектов Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстСообщенияРазделыУжеЗаполненыМожноУстановитьДатыЗапретаДляРазделов());
					Иначе
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстСообщенияРазделыУжеЗаполненыМожноУстановитьДатыЗапретаДляРазделовИОбъектов());
					КонецЕсли;
				КонецЕсли;
			Иначе
				ОткрытьФормуВыбораРазделов = Истина;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Представление) Тогда
			Если ТекущиеДанные.ОписаниеДатыЗапрета <> "ПроизвольнаяДата"
			 ИЛИ Поле = Элементы.ДатыЗапретаОписаниеДатыЗапретаПредставление Тогда
				ОткрытьФормуРедактированияДатыЗапрета = Истина;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщенияОбъектУжеВыбранМожноУстановитьДатуЗапрета());
				ТекущийЭлемент = Элементы.ДатыЗапретаДатаЗапрета;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Представление) Тогда
			// Перед изменением описания или даты запрета
			// требуется заполнить объект, иначе нельзя выполнить запись в регистр.
			ТекущийЭлемент = Элементы.ДатыЗапретаПолноеПредставление;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияСначалаВыберитеОбъект());
			
		ИначеЕсли ТекущиеДанные.ОписаниеДатыЗапрета <> "ПроизвольнаяДата"
			  ИЛИ Поле = Элементы.ДатыЗапретаОписаниеДатыЗапретаПредставление Тогда
			ОткрытьФормуРедактированияДатыЗапрета = Истина;
		Иначе
			ТекущийЭлемент = Элементы.ДатыЗапретаДатаЗапрета;
		КонецЕсли;
	КонецЕсли;
	
	// Блокировка записи перед редактированием.
	Если ЗначениеЗаполнено(ТекущиеДанные.Представление) Тогда
		ПрочитанныеСвойства = ЗаблокироватьЗаписьПользователя(
			ЭтотОбъект, ТекущийРаздел(), ТекущиеДанные.Объект, ТекущийПользователь);
		
		ОбновитьЗначенияПрочитанныхСвойств(
			ТекущиеДанные, ПрочитанныеСвойства, Элементы.Пользователи.ТекущиеДанные);
	КонецЕсли;
	
	Если ОткрытьФормуРедактированияДатыЗапрета Тогда
		Отказ = Истина;
		РедактироватьДатуЗапретаВФорме();
		
	ИначеЕсли ОткрытьФормуВыбораРазделов Тогда
		Отказ = Истина;
		ВыбратьРазделы();
	КонецЕсли;
	
	Если Отказ Тогда
		Элементы.ДатыЗапретаПолноеПредставление.ТолькоПросмотр = Ложь;
		Элементы.ДатыЗапретаОписаниеДатыЗапретаПредставление.ТолькоПросмотр = Ложь;
		Элементы.ДатыЗапретаДатаЗапрета.ТолькоПросмотр = Ложь;
	Иначе
		// Блокировка недоступных полей.
		Элементы.ДатыЗапретаПолноеПредставление.ТолькоПросмотр =
			ЗначениеЗаполнено(ТекущиеДанные.Представление);
		
		Элементы.ДатыЗапретаОписаниеДатыЗапретаПредставление.ТолькоПросмотр = Истина;
		Элементы.ДатыЗапретаДатаЗапрета.ТолькоПросмотр =
			    НЕ ЗначениеЗаполнено(ТекущиеДанные.Представление)
			ИЛИ ТекущиеДанные.ОписаниеДатыЗапрета <> "ПроизвольнаяДата";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатыЗапретаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.ДатыЗапрета.ВыделенныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждение(, ТекстСообщенияДляУдаленияВыделитеОднуСтроку());
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДатыЗапрета.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоРаздел Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Раздел) Тогда
			Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
				ТекстВопроса = ТекстВопросаУдалитьДатыЗапретаДляРазделаИОбъектов();
			Иначе
				ТекстВопроса = ТекстВопросаУдалитьДатыЗапретаДляРаздела();
			КонецЕсли;
		Иначе
			ТекстВопроса = ТекстВопросаУдалитьОбщуюДатуЗапрета();
		КонецЕсли;
	Иначе
		ТекстВопроса = ТекстВопросаУдалитьДатуЗапретаОбъекта();
	КонецЕсли;
	
	Удалить = Истина;
	
	Если ТекущиеДанные.ЭтоРаздел Тогда
		Если НазначениеДляВсех(ТекущийПользователь) Тогда
			Удалить = Ложь;
		КонецЕсли;
		ЭлементыРаздела = ТекущиеДанные.ПолучитьЭлементы();
		
		Если ДатаЗапретаУстановлена(ТекущиеДанные, ТекущийПользователь)
		 ИЛИ ЭлементыРаздела.Количество() > 0 Тогда
			// Удаление даты запрета для раздела (т.е. всех объектов раздела).
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
			ДополнительныеПараметры.Вставить("ЭлементыРаздела", ЭлементыРаздела);
			ДополнительныеПараметры.Вставить("Удалить", Удалить);
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения(
					"ДатыЗапретаПередУдалениемРазделаПродолжение", ЭтотОбъект, ДополнительныеПараметры),
				ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		Иначе
			Если ЗначениеЗаполнено(ТекущиеДанные.Раздел) Тогда
				ТекстСообщения = ТекстСообщенияДляВсехПользователейРазделыВсегдаПоказываются()
					+ Символы.ПС
					+ ТекстСообщенияПриУдаленииДатаЗапретаОчищается();
			Иначе
				ТекстСообщения = ТекстСообщенияДляВсехПользователейОбщаяДатаВсегдаПоказывается()
					+ Символы.ПС
					+ ТекстСообщенияПриУдаленииДатаЗапретаОчищается();
			КонецЕсли;
			Если Удалить Тогда
				ПоказатьПредупреждение(
					Новый ОписаниеОповещения(
						"ДатыЗапретаПриУдалении", ЭтотОбъект, ТекущиеДанные),
					ТекстСообщения);
			Иначе
				ПоказатьПредупреждение(, ТекстСообщения);
			КонецЕсли;
			Возврат;
		КонецЕсли;
	Иначе
		Если ДатаЗапретаУстановлена(ТекущиеДанные, ТекущийПользователь) Тогда
			// Удаление даты запрета для объекта по разделу.
			ПоказатьВопрос(
				Новый ОписаниеОповещения(
					"ДатыЗапретаПередУдалениемОбъектаПродолжение", ЭтотОбъект, ТекущиеДанные),
				ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Удалить Тогда
		ДатыЗапретаПриУдалении(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатыЗапретаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Если НЕ Элементы.ДатыЗапрета.ТекущиеДанные.ЭтоРаздел Тогда
			Элементы.ДатыЗапрета.ТекущиеДанные.Раздел = ТекущийРаздел(, Истина);
		КонецЕсли;
		Если НазначениеДляВсех(ТекущийПользователь)
		 ИЛИ НЕ Элементы.ДатыЗапрета.ТекущиеДанные.ЭтоРаздел Тогда
			Элементы.ДатыЗапрета.ТекущиеДанные.ОписаниеДатыЗапрета = "ПроизвольнаяДата";
		КонецЕсли;
		Элементы.ДатыЗапрета.ТекущиеДанные.ОписаниеДатыЗапретаПредставление =
			ПредставлениеОписанияДатыЗапрета(Элементы.ДатыЗапрета.ТекущиеДанные);
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияВыбратьОбъекты", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатыЗапретаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ДатыЗапрета.ТекущиеДанные;
	
	Если ТекущийПользователь <> Неопределено Тогда
		ЗаписатьОписаниеИДатуЗапрета(ТекущиеДанные);
	КонецЕсли;
	
	Если УстановленныеБлокировки.Количество() > 0 Тогда
		РазблокироватьВсеЗаписи(ЭтотОбъект);
	КонецЕсли;
	
	Элементы.ДатыЗапретаПолноеПредставление.ТолькоПросмотр = Ложь;
	Элементы.ДатыЗапретаОписаниеДатыЗапретаПредставление.ТолькоПросмотр = Ложь;
	Элементы.ДатыЗапретаОписаниеДатыЗапретаПредставление.ТолькоПросмотр = Ложь;
	
	ОбновитьНаличиеДатЗапретаТекущегоПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатыЗапретаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДатыЗапрета.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
	   И ТекущиеДанные.Объект = ВыбранноеЗначение Тогда
		
		Возврат;
	КонецЕсли;
	
	ИдентификаторРаздела = Неопределено;
	
	Если ПоказыватьРазделыТекущегоПользователя Тогда
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			КоллекцияОбъектов    = ТекущиеДанные.ПолучитьЭлементы();
			ИдентификаторРаздела = ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			КоллекцияОбъектов    = Родитель.ПолучитьЭлементы();
			ИдентификаторРаздела = Родитель.ПолучитьИдентификатор();
		КонецЕсли;
	Иначе
		КоллекцияОбъектов = ДатыЗапрета.ПолучитьЭлементы();
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Объекты = ВыбранноеЗначение;
	Иначе
		Объекты = Новый Массив;
		Объекты.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	ОбъектыДляДобавления = Новый Массив;
	Для каждого Объект Из Объекты Цикл
		ЗначениеНеНайдено = Истина;
		Для каждого Строка Из КоллекцияОбъектов Цикл
			Если Строка.Объект = Объект Тогда
				ЗначениеНеНайдено = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеНеНайдено Тогда
			ОбъектыДляДобавления.Добавить(Объект);
		КонецЕсли;
	КонецЦикла;
	
	Если ОбъектыДляДобавления.Количество() > 0 Тогда
		ЗаписатьДаты = ТекущийПользователь <> Неопределено;
		
		Если ЗаписатьДаты Тогда
			Комментарий = КомментарийТекущегоПользователя(ЭтотОбъект);
			
			ЗаблокироватьИЗаписатьПустыеДаты(
				ТекущийРаздел(, Истина), ОбъектыДляДобавления, ТекущийПользователь, Комментарий);
			
			ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ДатыЗапретаИзменения"));
		КонецЕсли;
		
		Для каждого ТекущийОбъект Из ОбъектыДляДобавления Цикл
			ОписаниеОбъекта = КоллекцияОбъектов.Добавить();
			ОписаниеОбъекта.Раздел        = ТекущийРаздел(, Истина);
			ОписаниеОбъекта.Объект        = Объект;
			ОписаниеОбъекта.Представление = Строка(Объект);
			ОписаниеОбъекта.ПолноеПредставление = ОписаниеОбъекта.Представление;
			ОписаниеОбъекта.ОписаниеДатыЗапрета = "ПроизвольнаяДата";
			
			ОписаниеОбъекта.ОписаниеДатыЗапретаПредставление =
				ПредставлениеОписанияДатыЗапрета(ОписаниеОбъекта);
			
			ОписаниеОбъекта.ЗаписьСуществует = ЗаписатьДаты;
		КонецЦикла;
		
		Если ИдентификаторРаздела <> Неопределено Тогда
			Элементы.ДатыЗапрета.Развернуть(ИдентификаторРаздела, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьНаличиеДатЗапретаТекущегоПользователя();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элемента ПолноеПредставление таблицы формы ДатыЗапрета.

&НаКлиенте
Процедура ДатыЗапретаПолноеПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьПодобратьОбъекты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатыЗапретаПолноеПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатыЗапретаПолноеПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДатыЗапрета.ТекущиеДанные;
	
	Если ТекущиеДанные.Объект = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	// Замена объекта возможна только другой объект, которого еще нет в списке.
	Если ПоказыватьРазделыТекущегоПользователя Тогда
		КоллекцияОбъектов = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
	Иначе
		КоллекцияОбъектов = ДатыЗапрета.ПолучитьЭлементы();
	КонецЕсли;
	ЗначениеНеНайдено = Истина;
	Для каждого Строка Из КоллекцияОбъектов Цикл
		Если Строка.Объект = ВыбранноеЗначение Тогда
			ЗначениеНеНайдено = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеНеНайдено Тогда
		Если ТекущиеДанные.Объект <> ВыбранноеЗначение Тогда
			
			ЗначенияСвойств = ПолучитьТекущиеЗначенияСвойств(
				ТекущиеДанные, Элементы.Пользователи.ТекущиеДанные);
			
			Если НЕ ЗаменитьОбъектВЗаписиПользователяНаСервере(
						ТекущиеДанные.Раздел,
						ТекущиеДанные.Объект,
						ВыбранноеЗначение,
						ТекущийПользователь,
						ЗначенияСвойств) Тогда
				
				ПоказатьПредупреждение(,
					ТекстСообщенияЗначениеУжеДобавленоВСписок()
					+ Символы.ПС
					+ ТекстСообщенияОбновитьДанныеФормыF5());
				Возврат;
			Иначе
				ОбновитьЗначенияПрочитанныхСвойств(
					ТекущиеДанные, ЗначенияСвойств, Элементы.Пользователи.ТекущиеДанные);
				
				ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ДатыЗапретаИзменения"));
			КонецЕсли;
		КонецЕсли;
		// Установка выбранного объекта.
		ТекущиеДанные.Объект = ВыбранноеЗначение;
		ТекущиеДанные.Представление = Строка(ТекущиеДанные.Объект);
		ТекущиеДанные.ПолноеПредставление = ТекущиеДанные.Представление;
		Элементы.ДатыЗапрета.ЗакончитьРедактированиеСтроки(Ложь);
		Элементы.ДатыЗапрета.ТекущийЭлемент = Элементы.ДатыЗапретаДатаЗапрета;
		Элементы.ДатыЗапрета.ИзменитьСтроку();
		
		ОбновитьНаличиеДатЗапретаТекущегоПользователя();
	Иначе
		ПоказатьПредупреждение(, ТекстСообщенияЗначениеУжеДобавленоВСписок());
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элемента ДатаЗапрета таблицы формы ДатыЗапрета.

&НаКлиенте
Процедура ДатыЗапретаДатаЗапретаПриИзменении(Элемент)
	
	ЗаписатьОписаниеИДатуЗапрета();
	
	ОбновитьНаличиеДатЗапретаТекущегоПользователя();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ТекстВопроса = ТекстВопросаОНесохраненныхДанных();
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		ТекстВопроса = ТекстВопроса + Символы.ПС + ТекстВопросаОбновитьДанные();
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОбновитьЗавершение", ЭтотОбъект),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	Иначе
		ОбновитьЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Разделы(Команда)
	
	ВыбратьРазделы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьОбъекты(Команда)
	
	Если ТекущийПользователь = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщенияСначалаВыберитеПользователя());
		Возврат;
	КонецЕсли;
	
	ВыбратьПодобратьОбъекты(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьПользователей(Команда)
	
	ВыбратьПодобратьПользователей(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтчет(Команда)
	
	Если Параметры.ДатыЗапретаЗагрузкиДанных Тогда
		ИмяФормыОтчета = "Отчет.ДатыЗапретаЗагрузки.Форма";
	Иначе
		ИмяФормыОтчета = "Отчет.ДатыЗапретаИзменения.Форма";
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПользователиПолноеПредставление.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПользователиДатЗапрета.ПолноеПредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПользователиДатЗапрета.Пользователь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей);
	СписокЗначений.Добавить(Перечисления.ВидыНазначенияДатЗапрета.ДляВсехИнформационныхБаз);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПользователиДатЗапрета.БезДатыЗапрета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатыЗапретаПолноеПредставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатыЗапрета.ПолноеПредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатыЗапретаДатаЗапрета.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийПользователь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей);
	СписокЗначений.Добавить(Перечисления.ВидыНазначенияДатЗапрета.ДляВсехИнформационныхБаз);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатыЗапрета.ЭтоРаздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатыЗапрета.БезДатыЗапрета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатыЗапрета.ЭтоРаздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатыЗапрета.БезДатыЗапрета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

КонецПроцедуры

&НаКлиенте
Процедура УстановкаДатыЗапретаОбработкаВыбораПродолжение(Ответ, ВыбранноеЗначение) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УстановкаДатыЗапрета = ВыбранноеЗначение;
	ИзменитьУстановкуДатыЗапрета(ВыбранноеЗначение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособУказанияДатыЗапретаОбработкаВыбораПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СпособУказанияДатыЗапрета = ДополнительныеПараметры.ВыбранноеЗначение;
	
	УдалитьЛишнееПриИзмененииСпособаУказанияДатыЗапрета(
		ДополнительныеПараметры.ВыбранноеЗначение,
		ТекущийПользователь,
		УстановкаДатыЗапрета);
	
	Элементы.Пользователи.Обновить();
	
	ПрочитатьДанныеПользователя(
		ЭтотОбъект,
		ДополнительныеПараметры.ВыбранноеЗначение,
		ДополнительныеПараметры.Данные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередНачаломДобавленияЗавершение(Результат, Неопределен) Экспорт
	
	Если Результат Тогда
		ПользователиПродолжитьДобавление = Истина;
		Элементы.Пользователи.ДобавитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередУдалениемПодтверждение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьНаборЗаписейПользователя(ДополнительныеПараметры.ТекущиеДанные.Пользователь);
	
	Если ДополнительныеПараметры.ДатыЗапретаДляВсехПользователей Тогда
		ДополнительныеПараметры.ТекущиеДанные.ДатаЗапрета         = '00000000';
		ДополнительныеПараметры.ТекущиеДанные.ОписаниеДатыЗапрета = "ПроизвольнаяДата";
		
		Если СпособУказанияДатыЗапрета = "ОбщаяДата" Тогда
			ДатаЗапрета         = '00000000';
			ОписаниеДатыЗапрета = "ПроизвольнаяДата";
		КонецЕсли;
		ДополнительныеПараметры.Вставить("ДанныеУдалялись");
		ОбновитьНаличиеДатЗапретаТекущегоПользователя();
	КонецЕсли;
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ДатыЗапретаИзменения"));
	
	ПользователиПередУдалениемПродолжение(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередУдалениемПродолжение(Неопределен, ДополнительныеПараметры)
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Если ДополнительныеПараметры.ДатыЗапретаДляВсехПользователей Тогда
		НетДобавленныхСтрок = НЕ ДополнительныеПараметры.Свойство("ДанныеУдалялись");
		Если ПоказыватьРазделыТекущегоПользователя Тогда
			Для каждого ОписаниеРаздела Из ДатыЗапрета.ПолучитьЭлементы() Цикл
				Если ДатаЗапретаУстановлена(ОписаниеРаздела, ТекущийПользователь)
				 ИЛИ ОписаниеРаздела.ПолучитьЭлементы().Количество() > 0 Тогда
					НетДобавленныхСтрок = Ложь;
					ОписаниеРаздела.ДатаЗапрета         = '00000000';
					ОписаниеРаздела.ОписаниеДатыЗапрета = "";
					ОписаниеРаздела.ПолучитьЭлементы().Очистить();
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ДатыЗапрета.ПолучитьЭлементы().Количество() > 0 Тогда
				НетДобавленныхСтрок = Ложь;
				ДатыЗапрета.ПолучитьЭлементы().Очистить();
			КонецЕсли;
		КонецЕсли;
		ТекущиеДанные.БезДатыЗапрета = Истина;
		ТекущиеДанные.ПолноеПредставление = ТекущиеДанные.Представление;
		Если НетДобавленныхСтрок Тогда
			ПоказатьПредупреждение(, ТекстСообщенияДляВсехПользователейДатыЗапретаНеУстановлены());
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СпособУказанияДатыЗапрета = Неопределено;
	
	ПользователиПриУдалении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПриУдалении()
	
	Индекс = ПользователиДатЗапрета.Индекс(ПользователиДатЗапрета.НайтиПоИдентификатору(
		Элементы.Пользователи.ТекущаяСтрока));
	
	ПользователиДатЗапрета.Удалить(Индекс);
	
	Если ПользователиДатЗапрета.Количество() <= Индекс И Индекс > 0 Тогда
		Индекс = Индекс -1;
	КонецЕсли;
	
	Если ПользователиДатЗапрета.Количество() > 0 Тогда
		Элементы.Пользователи.ТекущаяСтрока =
			ПользователиДатЗапрета[Индекс].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатыЗапретаПередУдалениемРазделаПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные   = ДополнительныеПараметры.ТекущиеДанные;
	ЭлементыРаздела = ДополнительныеПараметры.ЭлементыРаздела;
	
	ОбъектыРаздела = Новый Массив;
	ОбъектыРаздела.Добавить(ТекущиеДанные.Раздел);
	
	Для каждого ЭлементДанных Из ЭлементыРаздела Цикл
		ОбъектыРаздела.Добавить(ЭлементДанных.Объект);
	КонецЦикла;
	
	УдалитьЗаписьПользователя(ТекущиеДанные.Раздел, ОбъектыРаздела, ТекущийПользователь);
	
	ЭлементыРаздела.Очистить();
	ТекущиеДанные.ДатаЗапрета         = '00000000';
	ТекущиеДанные.ОписаниеДатыЗапрета = "ПроизвольнаяДата";
	
	Если ДополнительныеПараметры.Удалить Тогда
		ДатыЗапретаПриУдалении(ТекущиеДанные);
	Иначе
		ТекущиеДанные.ОписаниеДатыЗапретаПредставление =
			ПредставлениеОписанияДатыЗапрета(ТекущиеДанные);
	КонецЕсли;
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ДатыЗапретаИзменения"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДатыЗапретаПередУдалениемОбъектаПродолжение(Ответ, ТекущиеДанные) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьЗаписьПользователя(
		ТекущийРаздел(),
		ТекущиеДанные.Объект,
		ТекущийПользователь);
	
	Если ТекущийРаздел() = ТекущиеДанные.Объект Тогда
		// Удалена общая дата.
		ДатаЗапрета         = '00000000';
		ОписаниеДатыЗапрета = "ПроизвольнаяДата";
		ЗаписьСуществует    = Ложь;
	КонецЕсли;
	
	ДатыЗапретаПриУдалении(ТекущиеДанные);
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ДатыЗапретаИзменения"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДатыЗапретаПриУдалении(ТекущиеДанные) Экспорт
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		ДатыЗапретаЭлементы = ДатыЗапрета.ПолучитьЭлементы();
	Иначе
		ДатыЗапретаЭлементы = ТекущийРодитель.ПолучитьЭлементы();
	КонецЕсли;
	
	Индекс = ДатыЗапретаЭлементы.Индекс(ТекущиеДанные);
	
	ДатыЗапретаЭлементы.Удалить(Индекс);
	
	Если ДатыЗапретаЭлементы.Количество() <= Индекс И Индекс > 0 Тогда
		Индекс = Индекс -1;
	КонецЕсли;
	
	Если ДатыЗапретаЭлементы.Количество() > 0 Тогда
		Элементы.ДатыЗапрета.ТекущаяСтрока =
			ДатыЗапретаЭлементы[Индекс].ПолучитьИдентификатор();
		
	ИначеЕсли ТекущийРодитель <> Неопределено Тогда
		Элементы.ДатыЗапрета.ТекущаяСтрока =
			ТекущийРодитель.ПолучитьИдентификатор();
	КонецЕсли;
	
	ОбновитьНаличиеДатЗапретаТекущегоПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗавершение(Ответ, Неопределен) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьНаСервере();
	РазвернутьДанныеПользователя();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	ПриИзмененииИспользованияДатЗапретаНаСервере();
	
	// Расчет установки даты запрета.
	УстановкаДатыЗапрета = ТекущаяУстановкаДатыЗапрета(Параметры.ДатыЗапретаЗагрузкиДанных);
	// Установка видимости по рассчитанной установке дате запрета.
	УстановитьВидимость();
	
	// Кэширование текущей даты на сервере.
	НачалоДня = НачалоДня(ТекущаяДатаСеанса());
	
	СтарыйПользователь = ТекущийПользователь;
	
	ПрочитатьПользователей();
	
	Отбор = Новый Структура("Пользователь", СтарыйПользователь);
	НайденныеСтроки = ПользователиДатЗапрета.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекущийПользователь = ЗначениеДляВсехПользователей;
	Иначе
		Элементы.Пользователи.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		ТекущийПользователь = СтарыйПользователь;
	КонецЕсли;
	
	ПрочитатьДанныеПользователя(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПользователяОбработчикОжидания()
	
	ОбновитьДанныеПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПользователя(ПроверитьНесохраненныеЗаписи = Истина)
	
	ТекущиеДанные = Элементы.Пользователи.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
	 ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.Представление) Тогда
		
		НовыйПользователь = Неопределено;
	Иначе
		НовыйПользователь = ТекущиеДанные.Пользователь;
	КонецЕсли;
	
	Если НовыйПользователь = ТекущийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьНесохраненныеЗаписи Тогда
		ПроверкаНесохраненныхЗаписей(Новый ОписаниеОповещения(
			"ОбновитьДанныеПользователяПродолжение", ЭтотОбъект, НовыйПользователь));
	Иначе
		ОбновитьДанныеПользователяПродолжение(Истина, НовыйПользователь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПользователяПродолжение(Результат, НовыйПользователь) Экспорт
	
	Если НЕ Результат Тогда
		ПодключитьОбработчикОжидания(
			"ПользователиВосстановитьТекущуюСтрокуПослеОтказаПриАктивизацииСтроки", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	СпособУказанияЗначениеВСписке =
		Элементы.СпособУказанияДатыЗапрета.СписокВыбора.НайтиПоЗначению(СпособУказанияДатыЗапрета);
	
	Если ТекущийПользователь <> Неопределено
	   И СпособУказанияЗначениеВСписке <> Неопределено Тогда
		
		ТекущийСпособУказания = ТекущийСпособУказанияДатыЗапрета(
			ТекущийПользователь, ЕдинственныйРаздел, ЗначениеДляВсехПользователей, НачалоДня);
		
		ТекущийСпособУказания =
			?(ЗначениеЗаполнено(ТекущийСпособУказания), ТекущийСпособУказания, "ОбщаяДата");
		
		Если ТекущийСпособУказания <> СпособУказанияЗначениеВСписке.Значение Тогда
			
			ЭлементСписка = Элементы.СпособУказанияДатыЗапрета.СписокВыбора.НайтиПоЗначению(
				ТекущийСпособУказания);
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения(
					"ОбновитьДанныеПользователяЗавершение",
					ЭтотОбъект,
					НовыйПользователь),
				ТекстСообщенияСпособУказанияНеИспользован(
					СпособУказанияЗначениеВСписке.Представление,
					?(ЭлементСписка = Неопределено, ТекущийСпособУказания, ЭлементСписка.Представление),
					ТекущийПользователь,
					ЭтотОбъект) + Символы.ПС + Символы.ПС + НСтр("ru = 'Продолжить?'"),
				РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДанныеПользователяЗавершение(Неопределено, НовыйПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПользователяЗавершение(Ответ, НовыйПользователь) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Отбор = Новый Структура("Пользователь", ТекущийПользователь);
		НайденныеСтроки = ПользователиДатЗапрета.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ПользователиТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			ПодключитьОбработчикОжидания(
				"ПользователиВосстановитьТекущуюСтрокуПослеОтказаПриАктивизацииСтроки", 0.1, Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = НовыйПользователь;
	
	// Чтение данных текущего пользователя.
	Если НовыйПользователь = Неопределено Тогда
		СпособУказанияДатыЗапрета = "ОбщаяДата";
		ДатыЗапрета.ПолучитьЭлементы().Очистить();
		Элементы.ДанныеПользователя.ТекущаяСтраница = Элементы.СтраницаПользовательНеВыбран;
	Иначе
		ПрочитатьДанныеПользователя(ЭтотОбъект);
		РазвернутьДанныеПользователя();
	КонецЕсли;
	
	ОбновитьНаличиеДатЗапретаТекущегоПользователя();
	
	// Блокировка команд Подобрать, Добавить (объект) пока не выбран раздел.
	ДатыЗапретаУстановитьДоступностьКоманд(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНесохраненныхЗаписей(ОбработкаПродолжения)
	
	Отбор = Новый Структура("Пользователь", ТекущийПользователь);
	НайденныеСтроки = ПользователиДатЗапрета.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекстВопроса = ТекстВопросаОНесохраненныхДанных(Истина);
		Если ЗначениеЗаполнено(ТекстВопроса) Тогда
			ТекстВопроса = ТекстВопроса + Символы.ПС + ТекстВопросаОчиститьНезаполненныеСтроки();
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ТекущаяСтрока", НайденныеСтроки[0].ПолучитьИдентификатор());
			ДополнительныеПараметры.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ПроверкаНесохраненныхЗаписейЗавершение",
					ЭтотОбъект,
					ДополнительныеПараметры),
				ТекстВопроса,
				РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНесохраненныхЗаписейЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ПользователиТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаПродолжения, Ложь);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаПродолжения, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПользователей()
	
	НачатьТранзакцию();
	Попытка
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВсеРазделыБезОбъектов",     ВсеРазделыБезОбъектов);
		Запрос.УстановитьПараметр("ДатыЗапретаЗагрузкиДанных", Параметры.ДатыЗапретаЗагрузкиДанных);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПРЕДСТАВЛЕНИЕ(ДатыЗапретаИзменения.Пользователь) КАК ПолноеПредставление,
		|	ДатыЗапретаИзменения.Пользователь,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Перечисление.ВидыНазначенияДатЗапрета)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ОбщееНазначение,
		|	ПРЕДСТАВЛЕНИЕ(ДатыЗапретаИзменения.Пользователь) КАК Представление,
		|	МАКСИМУМ(ДатыЗапретаИзменения.Комментарий) КАК Комментарий,
		|	ЛОЖЬ КАК БезДатыЗапрета,
		|	-1 КАК НомерКартинки
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|ГДЕ
		|	НЕ(ДатыЗапретаИзменения.Раздел <> ДатыЗапретаИзменения.Объект
		|				И ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Объект) = ТИП(ПланВидовХарактеристик.РазделыДатЗапретаИзменения))
		|	И НЕ(ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Объект) <> ТИП(ПланВидовХарактеристик.РазделыДатЗапретаИзменения)
		|				И &ВсеРазделыБезОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыЗапретаИзменения.Пользователь
		|
		|ИМЕЮЩИЕ
		|	ДатыЗапретаИзменения.Пользователь <> НЕОПРЕДЕЛЕНО И
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.Пользователи)
		|				ИЛИ ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.ГруппыПользователей)
		|				ИЛИ ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
		|				ИЛИ ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.ГруппыВнешнихПользователей)
		|				ИЛИ ДатыЗапретаИзменения.Пользователь = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей)
		|			ТОГДА &ДатыЗапретаЗагрузкиДанных = ЛОЖЬ
		|		ИНАЧЕ &ДатыЗапретаЗагрузкиДанных = ИСТИНА
		|	КОНЕЦ";
		
		// Некорректные записи исключаются из выборки условиями:
		// - объект со значением типа ПВХ.РазделыДатЗапретаИзменения может быть только равным разделу.
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	// Заполнение полного представления пользователей.
	Для каждого Строка Из Выгрузка Цикл
		Строка.Представление       = ТекстПредставленияПользователя(ЭтотОбъект, Строка.Пользователь);
		Строка.ПолноеПредставление = Строка.Представление;
	КонецЦикла;
	
	// Заполнение представления всех пользователей.
	ОписаниеВсехПользователей = Выгрузка.Найти(ЗначениеДляВсехПользователей, "Пользователь");
	Если ОписаниеВсехПользователей = Неопределено Тогда
		ОписаниеВсехПользователей = Выгрузка.Вставить(0);
		ОписаниеВсехПользователей.Пользователь = ЗначениеДляВсехПользователей;
		ОписаниеВсехПользователей.БезДатыЗапрета = Истина;
	КонецЕсли;
	ОписаниеВсехПользователей.Представление       = ТекстПредставленияДляВсехПользователей(ЭтотОбъект);
	ОписаниеВсехПользователей.ПолноеПредставление = ОписаниеВсехПользователей.Представление;
	ОписаниеВсехПользователей.Комментарий         = ТекстКомментарияДляВсехПользователей();
	
	Выгрузка.Сортировать("ОбщееНазначение Возр, ПолноеПредставление Возр");
	ЗначениеВРеквизитФормы(Выгрузка, "ПользователиДатЗапрета");
	
	ЗаполнитьНомераКартинокПользователейДатЗапрета();
	
	ТекущийПользователь = ЗначениеДляВсехПользователей;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДанныеПользователя()
	
	Если ПоказыватьРазделыТекущегоПользователя Тогда
		Для каждого ОписаниеРаздела Из ДатыЗапрета.ПолучитьЭлементы() Цикл
			Элементы.ДатыЗапрета.Развернуть(ОписаниеРаздела.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрочитатьДанныеПользователя(Контекст, ТекущийСпособУказания = Неопределено, Данные = Неопределено)
	
	Если Контекст.УстановкаДатыЗапрета = "НетЗапрета" Тогда
		
		РазблокироватьВсеЗаписи(Контекст);
		Возврат;
		
	ИначеЕсли Контекст.УстановкаДатыЗапрета = "ПоПользователям" Тогда
		
		НайденныеСтроки = Контекст.ПользователиДатЗапрета.НайтиСтроки(
			Новый Структура("Пользователь", Контекст.ТекущийПользователь));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Контекст.Элементы.ТекущийПользовательПредставление.Заголовок = НайденныеСтроки[0].Представление;
		КонецЕсли;
	КонецЕсли;
	
	Контекст.Элементы.ДанныеПользователя.ТекущаяСтраница =
		Контекст.Элементы.СтраницаПользовательВыбран;
	
	Контекст.ДатыЗапрета.ПолучитьЭлементы().Очистить();
	
	Если ТекущийСпособУказания = Неопределено Тогда
		ТекущийСпособУказания = ТекущийСпособУказанияДатыЗапрета(
			Контекст.ТекущийПользователь,
			Контекст.ЕдинственныйРаздел,
			Контекст.ЗначениеДляВсехПользователей,
			Контекст.НачалоДня,
			Данные);
		
		ТекущийСпособУказания = ?(ТекущийСпособУказания = "", "ОбщаяДата", ТекущийСпособУказания);
		Если Контекст.СпособУказанияДатыЗапрета <> ТекущийСпособУказания Тогда
			Контекст.СпособУказанияДатыЗапрета = ТекущийСпособУказания;
		КонецЕсли;
	КонецЕсли;
	
	Если Контекст.СпособУказанияДатыЗапрета = "ОбщаяДата" Тогда
		Контекст.Элементы.СпособыУказания.ТекущаяСтраница =
			Контекст.Элементы.СпособУказанияОбщаяДата;
		
		ЗаполнитьЗначенияСвойств(Контекст, Данные);
		Контекст.РазрешитьИзменениеДанныхДоДатыЗапрета = Контекст.КоличествоДнейРазрешения <> 0;
		ОбщаяДатаЗапретаСОписаниемПриИзменении(Контекст, Ложь);
		Контекст.Элементы.ОписаниеДатыЗапрета.ТолькоПросмотр = Ложь;
		Контекст.Элементы.ДатаЗапрета.ТолькоПросмотр = Ложь;
		Контекст.Элементы.РазрешитьИзменениеДанныхДоДатыЗапрета.ТолькоПросмотр = Ложь;
		Контекст.Элементы.КоличествоДнейРазрешения.ТолькоПросмотр = Ложь;
		Попытка
			ЗаблокироватьЗаписьПользователя(
				Контекст,
				Контекст.РазделПустаяСсылка,
				Контекст.РазделПустаяСсылка,
				Контекст.ТекущийПользователь,
				Истина);
		Исключение
			Контекст.Элементы.ОписаниеДатыЗапрета.ТолькоПросмотр = Истина;
			Контекст.Элементы.ДатаЗапрета.ТолькоПросмотр = Истина;
			Контекст.Элементы.РазрешитьИзменениеДанныхДоДатыЗапрета.ТолькоПросмотр = Истина;
			Контекст.Элементы.КоличествоДнейРазрешения.ТолькоПросмотр = Истина;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	Контекст.Элементы.СпособыУказания.ТекущаяСтраница =
		Контекст.Элементы.СпособУказанияПоРазделамОбъектам;
	
	УстановитьКоманднуюПанельДатЗапрета(Контекст);
	
	ПередаваемыеПараметры = Новый Структура;
	ПередаваемыеПараметры.Вставить("НачалоДня",                    Контекст.НачалоДня);
	ПередаваемыеПараметры.Вставить("Пользователь",                 Контекст.ТекущийПользователь);
	ПередаваемыеПараметры.Вставить("ЕдинственныйРаздел",           Контекст.ЕдинственныйРаздел);
	ПередаваемыеПараметры.Вставить("ПоказыватьРазделы",            Контекст.ПоказыватьРазделы);
	ПередаваемыеПараметры.Вставить("ВсеРазделыБезОбъектов",        Контекст.ВсеРазделыБезОбъектов);
	ПередаваемыеПараметры.Вставить("РазделыБезОбъектов",           Контекст.РазделыБезОбъектов);
	ПередаваемыеПараметры.Вставить("ИдентификаторФормы",           Контекст.УникальныйИдентификатор);
	ПередаваемыеПараметры.Вставить("СпособУказанияДатыЗапрета",    Контекст.СпособУказанияДатыЗапрета);
	ПередаваемыеПараметры.Вставить("ЗначениеДляВсехПользователей", Контекст.ЗначениеДляВсехПользователей);
	ПередаваемыеПараметры.Вставить("ДатыЗапретаЗагрузкиДанных",    Контекст.Параметры.ДатыЗапретаЗагрузкиДанных);
	ПередаваемыеПараметры.Вставить("ЗначенияКлючейЗаблокированныхЗаписей", 
		ПолучитьЗначенияКлючейЗаблокированныхЗаписей(Контекст));
	
	ДанныеПользователя = Неопределено;
	ПрочитатьДанныеПользователяНаСервере(ПередаваемыеПараметры,
		ДанныеПользователя, Контекст.ПоказыватьРазделыТекущегоПользователя);
	
	// Загрузка данных пользователя в коллекцию.
	КоллекцияСтрок = Контекст.ДатыЗапрета.ПолучитьЭлементы();
	КоллекцияСтрок.Очистить();
	Для каждого Строка Из ДанныеПользователя Цикл
		НоваяСтрока = КоллекцияСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка.Значение);
		НоваяСтрока.ОписаниеДатыЗапретаПредставление = ПредставлениеОписанияДатыЗапрета(НоваяСтрока);
		КоллекцияПодстрок = НоваяСтрока.ПолучитьЭлементы();
		
		Для каждого Подстрока Из Строка.Значение.СписокПодстрок Цикл
			НоваяПодстрока = КоллекцияПодстрок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяПодстрока, Подстрока.Значение);
			ЗаполнитьПоВнутреннемуОписаниюДатыЗапрета(
				НоваяПодстрока, НоваяПодстрока.ОписаниеДатыЗапрета);
			
			НоваяПодстрока.ОписаниеДатыЗапретаПредставление =
				ПредставлениеОписанияДатыЗапрета(НоваяПодстрока);
		КонецЦикла;
		
		Если НоваяСтрока.ЭтоРаздел Тогда
			НоваяСтрока.РазделБезОбъектов =
				Контекст.РазделыБезОбъектов.Найти(НоваяСтрока.Раздел) <> Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	// Настройка поля формы ДатыЗапрета.
	Если Контекст.ПоказыватьРазделыТекущегоПользователя Тогда
		Если Контекст.ВсеРазделыБезОбъектов Тогда
			// Используется дата только по измерению Раздел.
			// Измерение Объект заполнено значением измерения Раздел.
			// Отображение объекта не требуется.
			Контекст.Элементы.ДатыЗапретаПолноеПредставление.Заголовок = ТекстЗаголовкаРаздела();
			Контекст.Элементы.ДатыЗапрета.Отображение = ОтображениеТаблицы.Список;
			
		Иначе
			Контекст.Элементы.ДатыЗапретаПолноеПредставление.Заголовок =
				ТекстЗаголовкаРазделаСОбъектами();
			
			Контекст.Элементы.ДатыЗапрета.Отображение = ОтображениеТаблицы.Дерево;
		КонецЕсли;
	Иначе
		ПредставленияТиповОбъектов = "";
		ТипыОбъектовРаздела = Контекст.ТипыОбъектовРазделов.Получить(Контекст.ЕдинственныйРаздел);
		Если ТипыОбъектовРаздела <> Неопределено Тогда
			Для Каждого СвойстваТипа Из ТипыОбъектовРаздела Цикл
				ПредставленияТиповОбъектов = ПредставленияТиповОбъектов + Символы.ПС
					+ СвойстваТипа.Представление;
			КонецЦикла;
		КонецЕсли;
		Контекст.Элементы.ДатыЗапретаПолноеПредставление.Заголовок = СокрЛП(ПредставленияТиповОбъектов);
		Контекст.Элементы.ДатыЗапрета.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочитатьДанныеПользователяНаСервере(Знач Контекст, ДанныеПользователя, ПоказыватьРазделыТекущегоПользователя)
	
	РазблокироватьВсеЗаписиНаСервере(Контекст.ЗначенияКлючейЗаблокированныхЗаписей, Контекст.ИдентификаторФормы);
	
	ПоказыватьРазделыТекущегоПользователя
			  = Контекст.ПоказыватьРазделы
			ИЛИ Контекст.СпособУказанияДатыЗапрета = "ПоРазделам"
			ИЛИ Контекст.СпособУказанияДатыЗапрета = "ПоРазделамИОбъектам";
	
	// Подготовка дерева значений дат запрета изменения.
	Если ПоказыватьРазделыТекущегоПользователя Тогда
		ПрочитанныеДатыЗапрета = ПрочитатьДанныеПользователяСРазделами(
			Контекст.Пользователь,
			Контекст.ВсеРазделыБезОбъектов,
			Контекст.РазделыБезОбъектов,
			Контекст.ЗначениеДляВсехПользователей,
			Контекст.НачалоДня,
			Контекст.ДатыЗапретаЗагрузкиДанных);
	Иначе
		ПрочитанныеДатыЗапрета = ПрочитатьДанныеПользователяБезРазделов(
			Контекст.Пользователь, Контекст.ЕдинственныйРаздел, Контекст.ЗначениеДляВсехПользователей);
	КонецЕсли;
	
	ДанныеПользователя = Новый СписокЗначений;
	ПоляСтроки = "ПолноеПредставление, Представление, Раздел, Объект,
	             |ДатаЗапрета, ОписаниеДатыЗапрета, КоличествоДнейРазрешения,
	             |БезДатыЗапрета, ЭтоРаздел, СписокПодстрок, ЗаписьСуществует";
	
	Для каждого Строка Из ПрочитанныеДатыЗапрета.Строки Цикл
		СтруктураСтроки = Новый Структура(ПоляСтроки);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
		СтруктураСтроки.СписокПодстрок = Новый СписокЗначений;
		Для каждого Подстрока Из Строка.Строки Цикл
			СтруктураПодстроки = Новый Структура(ПоляСтроки);
			ЗаполнитьЗначенияСвойств(СтруктураПодстроки, Подстрока);
			СтруктураСтроки.СписокПодстрок.Добавить(СтруктураПодстроки);
		КонецЦикла;
		ДанныеПользователя.Добавить(СтруктураСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьДанныеПользователяСРазделами(Знач Пользователь,
                                              Знач ВсеРазделыБезОбъектов,
                                              Знач РазделыБезОбъектов,
                                              Знач ЗначениеДляВсехПользователей,
                                              Знач НачалоДня,
                                              Знач ДатыЗапретаЗагрузкиДанных)
	
	// Подготовка дерева значений дат запрета изменения
	// с первым уровнем по разделам.
	НачатьТранзакцию();
	Попытка
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь",                 Пользователь);
		Запрос.УстановитьПараметр("ВсеРазделыБезОбъектов",        ВсеРазделыБезОбъектов);
		Запрос.УстановитьПараметр("ОбщаяДатаПредставление",       ТекстПредставленияОбщейДаты());
		Запрос.УстановитьПараметр("ЗначениеДляВсехПользователей", ЗначениеДляВсехПользователей);
		Запрос.УстановитьПараметр("ДатыЗапретаЗагрузкиДанных",    ДатыЗапретаЗагрузкиДанных);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Разделы.Ссылка,
		|	Разделы.Представление,
		|	Разделы.Предопределенный
		|ПОМЕСТИТЬ Разделы
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка) КАК Ссылка,
		|		&ОбщаяДатаПредставление КАК Представление,
		|		ЛОЖЬ КАК Предопределенный
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РазделыДатЗапретаИзменения.Ссылка,
		|		РазделыДатЗапретаИзменения.Наименование,
		|		NULL
		|	ИЗ
		|		ПланВидовХарактеристик.РазделыДатЗапретаИзменения КАК РазделыДатЗапретаИзменения
		|	ГДЕ
		|		РазделыДатЗапретаИзменения.Предопределенный
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДатыЗапретаИзменения.Раздел,
		|		ДатыЗапретаИзменения.Раздел.Наименование,
		|		NULL
		|	ИЗ
		|		РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|	ГДЕ
		|		ДатыЗапретаИзменения.Раздел <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка)
		|		И ДатыЗапретаИзменения.Пользователь <> НЕОПРЕДЕЛЕНО
		|		И ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.Пользователи)
		|						ИЛИ ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.ГруппыПользователей)
		|						ИЛИ ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
		|						ИЛИ ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.ГруппыВнешнихПользователей)
		|						ИЛИ ДатыЗапретаИзменения.Пользователь = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей)
		|					ТОГДА &ДатыЗапретаЗагрузкиДанных = ЛОЖЬ
		|				ИНАЧЕ &ДатыЗапретаЗагрузкиДанных = ИСТИНА
		|			КОНЕЦ) КАК Разделы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Разделы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Разделы.Ссылка КАК Раздел,
		|	Разделы.Предопределенный КАК Предопределенный,
		|	Разделы.Представление КАК РазделПредставление,
		|	ДатыЗапретаИзменения.Объект,
		|	ПРЕДСТАВЛЕНИЕ(ДатыЗапретаИзменения.Объект) КАК ПолноеПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ДатыЗапретаИзменения.Объект) КАК Представление,
		|	ВЫБОР
		|		КОГДА ДатыЗапретаИзменения.Объект ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК БезДатыЗапрета,
		|	ДатыЗапретаИзменения.ДатаЗапрета,
		|	ДатыЗапретаИзменения.ОписаниеДатыЗапрета,
		|	ЛОЖЬ КАК ЭтоРаздел,
		|	0 КАК КоличествоДнейРазрешения,
		|	ИСТИНА КАК ЗаписьСуществует
		|ИЗ
		|	Разделы КАК Разделы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|		ПО Разделы.Ссылка = ДатыЗапретаИзменения.Раздел
		|			И (ДатыЗапретаИзменения.Пользователь = &Пользователь)
		|			И (НЕ(ДатыЗапретаИзменения.Раздел <> ДатыЗапретаИзменения.Объект
		|					И ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Объект) = ТИП(ПланВидовХарактеристик.РазделыДатЗапретаИзменения)))
		|			И (НЕ(ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Объект) <> ТИП(ПланВидовХарактеристик.РазделыДатЗапретаИзменения)
		|					И &ВсеРазделыБезОбъектов))
		|ГДЕ
		|	НЕ(&Пользователь <> &ЗначениеДляВсехПользователей
		|				И ДатыЗапретаИзменения.Раздел ЕСТЬ NULL )
		|
		|УПОРЯДОЧИТЬ ПО
		|	Предопределенный УБЫВ,
		|	РазделПредставление
		|ИТОГИ
		|	МАКСИМУМ(Предопределенный),
		|	МАКСИМУМ(РазделПредставление),
		|	МИНИМУМ(БезДатыЗапрета),
		|	МАКСИМУМ(ЭтоРаздел)
		|ПО
		|	Раздел";
		
		ПрочитанныеДатыЗапрета = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Для каждого Строка Из ПрочитанныеДатыЗапрета.Строки Цикл
		Строка.Представление = Строка.РазделПредставление;
		Строка.Объект    = Строка.Раздел;
		Строка.ЭтоРаздел = Истина;
		СтрокаРаздела = Строка.Строки.Найти(Строка.Раздел, "Объект");
		Если СтрокаРаздела <> Неопределено Тогда
			Строка.ЗаписьСуществует = Истина;
			Строка.ДатаЗапрета = ДатыЗапретаИзмененияСлужебный.ДатаЗапретаПоОписанию(
				СтрокаРаздела.ОписаниеДатыЗапрета, СтрокаРаздела.ДатаЗапрета, НачалоДня);
			
			Если ЗначениеЗаполнено(СтрокаРаздела.ОписаниеДатыЗапрета) Тогда
				ЗаполнитьПоВнутреннемуОписаниюДатыЗапрета(Строка, СтрокаРаздела.ОписаниеДатыЗапрета);
			Иначе
				Строка.ОписаниеДатыЗапрета = "ПроизвольнаяДата";
			КонецЕсли;
			Строка.Строки.Удалить(СтрокаРаздела);
		Иначе
			Если НазначениеДляВсех(Пользователь) Тогда
				Строка.ОписаниеДатыЗапрета = "ПроизвольнаяДата";
			КонецЕсли;
			Если Строка.Строки.Количество() = 1
			   И Строка.Строки[0].Объект = Null Тогда
				
				Строка.Строки.Удалить(Строка.Строки[0]);
			КонецЕсли;
		КонецЕсли;
		Строка.ПолноеПредставление = Строка.Представление;
		Для Каждого Подстрока Из Строка.Строки Цикл
			Подстрока.ДатаЗапрета = ДатыЗапретаИзмененияСлужебный.ДатаЗапретаПоОписанию(
				Подстрока.ОписаниеДатыЗапрета, Подстрока.ДатаЗапрета, НачалоДня);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПрочитанныеДатыЗапрета;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПрочитатьДанныеПользователяБезРазделов(Знач Пользователь, Знач ЕдинственныйРаздел, Знач ЗначениеДляВсехПользователей)
	
	// Дерево значений с первым уровнем по объектам.
	НачатьТранзакцию();
	Попытка
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь",                 Пользователь);
		Запрос.УстановитьПараметр("ЕдинственныйРаздел",           ЕдинственныйРаздел);
		Запрос.УстановитьПараметр("ОбщаяДатаПредставление",       ТекстПредставленияОбщейДаты());
		Запрос.УстановитьПараметр("ЗначениеДляВсехПользователей", ЗначениеДляВсехПользователей);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка) КАК Раздел,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка) КАК Объект,
		|	&ОбщаяДатаПредставление КАК ПолноеПредставление,
		|	&ОбщаяДатаПредставление КАК Представление,
		|	ЕСТЬNULL(ОбщаяДата.ДатаЗапрета, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаЗапрета,
		|	ЕСТЬNULL(ОбщаяДата.ОписаниеДатыЗапрета, """") КАК ОписаниеДатыЗапрета,
		|	ИСТИНА КАК ЭтоРаздел,
		|	0 КАК КоличествоДнейРазрешения,
		|	ИСТИНА КАК ЗаписьСуществует
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИСТИНА КАК ЗначениеИстина) КАК Значение
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДатыЗапретаИзменения.ДатаЗапрета КАК ДатаЗапрета,
		|			ДатыЗапретаИзменения.ОписаниеДатыЗапрета КАК ОписаниеДатыЗапрета
		|		ИЗ
		|			РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|		ГДЕ
		|			ДатыЗапретаИзменения.Пользователь = &Пользователь
		|			И ДатыЗапретаИзменения.Раздел = ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка)
		|			И ДатыЗапретаИзменения.Объект = ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка)) КАК ОбщаяДата
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &Пользователь = &ЗначениеДляВсехПользователей
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НЕ ОбщаяДата.ДатаЗапрета ЕСТЬ NULL 
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ЕдинственныйРаздел,
		|	ДатыЗапретаИзменения.Объект,
		|	ПРЕДСТАВЛЕНИЕ(ДатыЗапретаИзменения.Объект),
		|	ПРЕДСТАВЛЕНИЕ(ДатыЗапретаИзменения.Объект),
		|	ДатыЗапретаИзменения.ДатаЗапрета,
		|	ДатыЗапретаИзменения.ОписаниеДатыЗапрета,
		|	ЛОЖЬ,
		|	0,
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|ГДЕ
		|	ДатыЗапретаИзменения.Пользователь = &Пользователь
		|	И ДатыЗапретаИзменения.Раздел = &ЕдинственныйРаздел
		|	И ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Объект) <> ТИП(ПланВидовХарактеристик.РазделыДатЗапретаИзменения)";
		
		ПрочитанныеДатыЗапрета = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Индекс = ПрочитанныеДатыЗапрета.Строки.Количество()-1;
	Пока Индекс >= 0 Цикл
		Строка = ПрочитанныеДатыЗапрета.Строки[Индекс];
		ЗаполнитьПоВнутреннемуОписаниюДатыЗапрета(Строка, Строка.ОписаниеДатыЗапрета);
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат ПрочитанныеДатыЗапрета;
	
КонецФункции

&НаСервере
Процедура ЗаблокироватьНаборЗаписейПользователя(Пользователь, ТекущаяСтрока = Неопределено)
	
	// Перед началом изменения комментария.
	// Перед установкой нового выбранного пользователя.
	// Перед удалением текущей строки пользователя.
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = Неопределено;
	Иначе
		ТекущиеДанные = ПользователиДатЗапрета.НайтиПоИдентификатору(ТекущаяСтрока);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДатыЗапретаИзменения.Раздел,
		|	ДатыЗапретаИзменения.Объект,
		|	ДатыЗапретаИзменения.Пользователь,
		|	ДатыЗапретаИзменения.ДатаЗапрета,
		|	ДатыЗапретаИзменения.ОписаниеДатыЗапрета,
		|	ДатыЗапретаИзменения.Комментарий
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|ГДЕ
		|	ДатыЗапретаИзменения.Пользователь = &Пользователь";
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ЗначенияКлючаЗаписи = Новый Структура("Раздел, Объект, Пользователь");
	
	Попытка
		Для каждого ОписаниеЗаписи Из Выгрузка Цикл
			//
			ЗаполнитьЗначенияСвойств(ЗначенияКлючаЗаписи, ОписаниеЗаписи);
			НайденныеСтроки = УстановленныеБлокировки.НайтиСтроки(ЗначенияКлючаЗаписи);
			Если НайденныеСтроки.Количество() = 0 Тогда
				// Добавление новой блокировки.
				КлючЗаписи = РегистрыСведений.ДатыЗапретаИзменения.СоздатьКлючЗаписи(
					ЗначенияКлючаЗаписи);
				
				ЗаблокироватьДанныеДляРедактирования(КлючЗаписи, , УникальныйИдентификатор);
				ЗаполнитьЗначенияСвойств(УстановленныеБлокировки.Добавить(), ЗначенияКлючаЗаписи);
				Если ТекущиеДанные <> Неопределено Тогда
					// Повторное чтение полей ДатаЗапрета, ОписаниеДатыЗапрета, Комментарий.
					Если БезРазделовИОбъектов Тогда
						Если ОписаниеЗаписи.Раздел = РазделПустаяСсылка
						   И ОписаниеЗаписи.Объект = РазделПустаяСсылка Тогда
							ТекущиеДанные.ДатаЗапрета       = ОписаниеЗаписи.ДатаЗапрета;
							ТекущиеДанные.ОписаниеДатыЗапрета = ОписаниеЗаписи.ОписаниеДатыЗапрета;
							ТекущиеДанные.Комментарий = ОписаниеЗаписи.Комментарий;
						КонецЕсли;
					Иначе
						ТекущиеДанные.Комментарий = ОписаниеЗаписи.Комментарий;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
		РазблокироватьВсеЗаписи(ЭтотОбъект);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазблокироватьВсеЗаписи(Знач Контекст)
	
	РазблокироватьВсеЗаписиНаСервере(
		ПолучитьЗначенияКлючейЗаблокированныхЗаписей(Контекст), Контекст.УникальныйИдентификатор);
	
	Контекст.УстановленныеБлокировки.Очистить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗначенияКлючейЗаблокированныхЗаписей(Знач Контекст)
	
	ЗначенияКлючей = Новый Массив;
	
	Для каждого ОписаниеБлокировки Из Контекст.УстановленныеБлокировки Цикл
		//
		ЗначенияКлючаЗаписи = Новый Структура("Раздел, Объект, Пользователь");
		ЗаполнитьЗначенияСвойств(ЗначенияКлючаЗаписи, ОписаниеБлокировки);
		ЗначенияКлючей.Добавить(ЗначенияКлючаЗаписи);
	КонецЦикла;
	
	Возврат ЗначенияКлючей;
	
КонецФункции

&НаСервереБезКонтекста
Процедура РазблокироватьВсеЗаписиНаСервере(ЗначенияКлючейЗаблокированныхЗаписей, ИдентификаторФормы)
	
	Для каждого ЗначенияКлючаЗаписи Из ЗначенияКлючейЗаблокированныхЗаписей Цикл
		КлючЗаписи = РегистрыСведений.ДатыЗапретаИзменения.СоздатьКлючЗаписи(ЗначенияКлючаЗаписи);
		РазблокироватьДанныеДляРедактирования(КлючЗаписи, ИдентификаторФормы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаменитьПользователяНабораЗаписей(СтарыйПользователь, НовыйПользователь)
	
	Если СтарыйПользователь <> Неопределено Тогда
		ЗаблокироватьНаборЗаписейПользователя(СтарыйПользователь);
	КонецЕсли;
	ЗаблокироватьНаборЗаписейПользователя(НовыйПользователь);
	
	НаборЗаписей = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(НовыйПользователь, Истина);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтарыйПользователь <> Неопределено Тогда
		НачатьТранзакцию();
		Попытка
			НаборЗаписей.Отбор.Пользователь.Установить(СтарыйПользователь, Истина);
			НаборЗаписей.Прочитать();
			ДанныеПользователя = НаборЗаписей.Выгрузить();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
			ДанныеПользователя.ЗаполнитьЗначения(НовыйПользователь, "Пользователь");
			НаборЗаписей.Отбор.Пользователь.Установить(НовыйПользователь, Истина);
			НаборЗаписей.Загрузить(ДанныеПользователя);
			НаборЗаписей.Записать();
		Исключение
			ОтменитьТранзакцию();
			РазблокироватьВсеЗаписи(ЭтотОбъект);
			ВызватьИсключение;
		КонецПопытки;
		ЗафиксироватьТранзакцию();
	Иначе
		ЗаблокироватьИЗаписатьПустыеДаты(
			РазделПустаяСсылка, РазделПустаяСсылка, НовыйПользователь, "");
	КонецЕсли;
	
	РазблокироватьВсеЗаписи(ЭтотОбъект);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УдалитьНаборЗаписейПользователя(Пользователь)
	
	ЗаблокироватьНаборЗаписейПользователя(Пользователь);
	
	НаборЗаписей = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь, Истина);
	НаборЗаписей.Записать();
	
	РазблокироватьВсеЗаписи(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьКомментарий(Пользователь, Комментарий);
	
	НаборЗаписей = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь, Истина);
	НаборЗаписей.Прочитать();
	ДанныеПользователя = НаборЗаписей.Выгрузить();
	ДанныеПользователя.ЗаполнитьЗначения(Комментарий, "Комментарий");
	НаборЗаписей.Загрузить(ДанныеПользователя);
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗначенияПрочитанныхСвойств(ТекущиеЗначенияСвойств, ПрочитанныеСвойства, КомментарийТекущиеДанные = Ложь)
	
	Если ПрочитанныеСвойства.Комментарий <> Неопределено Тогда
		
		Если КомментарийТекущиеДанные = Ложь Тогда
			ТекущиеЗначенияСвойств.Комментарий = ПрочитанныеСвойства.Комментарий;
			
		ИначеЕсли КомментарийТекущиеДанные <> Неопределено Тогда
			КомментарийТекущиеДанные.Комментарий = ПрочитанныеСвойства.Комментарий;
		КонецЕсли;
	КонецЕсли;
	
	Если ПрочитанныеСвойства.ДатаЗапрета <> Неопределено Тогда
		ТекущиеЗначенияСвойств.ДатаЗапрета              = ПрочитанныеСвойства.ДатаЗапрета;
		ТекущиеЗначенияСвойств.ОписаниеДатыЗапрета      = ПрочитанныеСвойства.ОписаниеДатыЗапрета;
		ТекущиеЗначенияСвойств.КоличествоДнейРазрешения = ПрочитанныеСвойства.КоличествоДнейРазрешения;
		РасчетныеСвойства = Новый Структура;
		РасчетныеСвойства.Вставить("ОписаниеДатыЗапретаПредставление", ПредставлениеОписанияДатыЗапрета(ПрочитанныеСвойства));
		ЗаполнитьЗначенияСвойств(ТекущиеЗначенияСвойств, РасчетныеСвойства);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТекущиеЗначенияСвойств(ТекущиеДанные, КомментарийТекущиеДанные)
	
	Свойства = Новый Структура;
	Свойства.Вставить("ДатаЗапрета");
	Свойства.Вставить("ОписаниеДатыЗапрета");
	Свойства.Вставить("КоличествоДнейРазрешения");
	Свойства.Вставить("Комментарий");
	
	Если КомментарийТекущиеДанные <> Неопределено Тогда
		Свойства.Комментарий = КомментарийТекущиеДанные.Комментарий;
	КонецЕсли;
	
	Свойства.ДатаЗапрета              = ТекущиеДанные.ДатаЗапрета;
	Свойства.ОписаниеДатыЗапрета      = ТекущиеДанные.ОписаниеДатыЗапрета;
	Свойства.КоличествоДнейРазрешения = ТекущиеДанные.КоличествоДнейРазрешения;
	
	Возврат Свойства;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаблокироватьЗаписьПользователя(Знач Контекст, Знач Раздел, Знач Объект, Знач Пользователь, Знач РазблокироватьРанееЗаблокированное = Ложь)
	
	ЗначенияКлючейЗаписей = Новый Массив;
	
	Если РазблокироватьРанееЗаблокированное Тогда
		Для каждого ОписаниеБлокировки Из Контекст.УстановленныеБлокировки Цикл
			ЗначенияКлючаЗаписи = Новый Структура("Раздел, Объект, Пользователь");
			ЗаполнитьЗначенияСвойств(ЗначенияКлючаЗаписи, ОписаниеБлокировки);
			ЗначенияКлючейЗаписей.Добавить(ЗначенияКлючаЗаписи);
		КонецЦикла;
		Контекст.УстановленныеБлокировки.Очистить();
	КонецЕсли;
	
	ЗначенияКлючаЗаписи = Новый Структура;
	ЗначенияКлючаЗаписи.Вставить("Раздел",       Раздел);
	ЗначенияКлючаЗаписи.Вставить("Объект",       Объект);
	ЗначенияКлючаЗаписи.Вставить("Пользователь", Пользователь);
	
	ПрочитанныеСвойства = Новый Структура;
	ПрочитанныеСвойства.Вставить("ДатаЗапрета");
	ПрочитанныеСвойства.Вставить("ОписаниеДатыЗапрета");
	ПрочитанныеСвойства.Вставить("КоличествоДнейРазрешения");
	ПрочитанныеСвойства.Вставить("Комментарий");
	
	Если РазблокироватьРанееЗаблокированное
	 ИЛИ Контекст.УстановленныеБлокировки.НайтиСтроки(ЗначенияКлючаЗаписи).Количество() = 0 Тогда
		
		ПрочитанныеСвойства = ЗаблокироватьЗаписьПользователяНаСервере(
			ЗначенияКлючаЗаписи,
			Контекст.УникальныйИдентификатор,
			ПрочитанныеСвойства,
			РазблокироватьРанееЗаблокированное,
			ЗначенияКлючейЗаписей,
			Контекст.НачалоДня);
		
		Если РазблокироватьРанееЗаблокированное Тогда
			Контекст.УстановленныеБлокировки.Очистить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Контекст.УстановленныеБлокировки.Добавить(), ЗначенияКлючаЗаписи);
	КонецЕсли;
	
	Возврат ПрочитанныеСвойства;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаблокироватьЗаписьПользователяНаСервере(Знач ЗначенияКлючаЗаписи, Знач УникальныйИдентификатор,
			Знач ПрочитанныеСвойства, Знач РазблокироватьРанееЗаблокированное, Знач ЗначенияКлючейЗаписей, Знач НачалоДня)
	
	Если РазблокироватьРанееЗаблокированное Тогда
		РазблокироватьВсеЗаписиНаСервере(ЗначенияКлючейЗаписей, УникальныйИдентификатор);
	КонецЕсли;
	
	КлючЗаписи = РегистрыСведений.ДатыЗапретаИзменения.СоздатьКлючЗаписи(ЗначенияКлючаЗаписи);
	ЗаблокироватьДанныеДляРедактирования(КлючЗаписи, , УникальныйИдентификатор);
	
	МенеджерЗаписи = РегистрыСведений.ДатыЗапретаИзменения.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияКлючаЗаписи);
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		ПрочитанныеСвойства.ДатаЗапрета = ДатыЗапретаИзмененияСлужебный.ДатаЗапретаПоОписанию(
			МенеджерЗаписи.ОписаниеДатыЗапрета, МенеджерЗаписи.ДатаЗапрета, НачалоДня);
		
		ПрочитанныеСвойства.Комментарий = МенеджерЗаписи.Комментарий;
		ЗаполнитьПоВнутреннемуОписаниюДатыЗапрета(
			ПрочитанныеСвойства, МенеджерЗаписи.ОписаниеДатыЗапрета);
	Иначе
		НачатьТранзакцию();
		Попытка
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Пользователь", ЗначенияКлючаЗаписи.Пользователь);
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДатыЗапретаИзменения.Комментарий
			|ИЗ
			|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
			|ГДЕ
			|	ДатыЗапретаИзменения.Пользователь = &Пользователь";
			Выборка = Запрос.Выполнить().Выбрать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		Если Выборка.Следующий() Тогда
			ПрочитанныеСвойства.Комментарий = Выборка.Комментарий;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПрочитанныеСвойства;
	
КонецФункции

&НаСервере
Функция ЗаменитьОбъектВЗаписиПользователяНаСервере(Знач Раздел, Знач СтарыйОбъект, Знач НовыйОбъект, Знач Пользователь, ТекущиеЗначенияСвойств)
	
	// Блокировка новой записи и проверка, что ее не существует.
	ЗаблокироватьЗаписьПользователя(ЭтотОбъект, Раздел, НовыйОбъект, Пользователь);
	
	ЗначенияКлючаЗаписи = Новый Структура;
	ЗначенияКлючаЗаписи.Вставить("Раздел",       Раздел);
	ЗначенияКлючаЗаписи.Вставить("Объект",       НовыйОбъект);
	ЗначенияКлючаЗаписи.Вставить("Пользователь", Пользователь);
	
	МенеджерЗаписи = РегистрыСведений.ДатыЗапретаИзменения.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияКлючаЗаписи);
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		РазблокироватьВсеЗаписи(ЭтотОбъект);
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтарыйОбъект) Тогда
		// Блокировка старой записи
		ПрочитанныеСвойства = ЗаблокироватьЗаписьПользователя(
			ЭтотОбъект, Раздел, СтарыйОбъект, Пользователь);
		
		ОбновитьЗначенияПрочитанныхСвойств(ТекущиеЗначенияСвойств, ПрочитанныеСвойства);
		
		ЗначенияКлючаЗаписи.Объект = СтарыйОбъект;
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияКлючаЗаписи);
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаЗапрета)
	   И ЗначениеЗаполнено(ОписаниеДатыЗапрета) Тогда
		
		МенеджерЗаписи.Раздел              = Раздел;
		МенеджерЗаписи.Объект              = НовыйОбъект;
		МенеджерЗаписи.Пользователь        = Пользователь;
		МенеджерЗаписи.ДатаЗапрета         = ВнутренняяДатаЗапрета(ТекущиеЗначенияСвойств);
		МенеджерЗаписи.ОписаниеДатыЗапрета = ВнутреннееОписаниеДатыЗапрета(ТекущиеЗначенияСвойств);
		МенеджерЗаписи.Комментарий         = ТекущиеЗначенияСвойств.Комментарий;
		
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	РазблокироватьВсеЗаписи(ЭтотОбъект);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТекущийРаздел(ТекущиеДанные = Неопределено, РазделОбъектов = Ложь)
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.ДатыЗапрета.ТекущиеДанные;
	КонецЕсли;
	
	Если БезРазделовИОбъектов
	 ИЛИ СпособУказанияДатыЗапрета = "ОбщаяДата" Тогда
		
		ТекущийРаздел = РазделПустаяСсылка;
		
	ИначеЕсли ПоказыватьРазделыТекущегоПользователя Тогда
		Если ТекущиеДанные.ЭтоРаздел Тогда
			ТекущийРаздел = ТекущиеДанные.Раздел;
		Иначе
			ТекущийРаздел = ТекущиеДанные.ПолучитьРодителя().Раздел;
		КонецЕсли;
		
	Иначе // Единственный раздел, не показываемый пользователю.
		Если ТекущиеДанные <> Неопределено
		   И ТекущиеДанные.Раздел = РазделПустаяСсылка
		   И НЕ РазделОбъектов Тогда
			
			ТекущийРаздел = РазделПустаяСсылка;
		Иначе
			ТекущийРаздел = ЕдинственныйРаздел;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущийРаздел;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьОбщуюДатуЗапретаСОписанием();
	
	Данные = ТекущиеДанныеОбщейДатыЗапрета();
	ЗаписатьОписаниеИДатуЗапрета(Данные);
	ЗаписьСуществует = Данные.ЗаписьСуществует;
	
КонецПроцедуры

&НаКлиенте
Функция ТекущиеДанныеОбщейДатыЗапрета()
	
	Данные = Новый Структура;
	Данные.Вставить("Объект",                   РазделПустаяСсылка);
	Данные.Вставить("Раздел",                   РазделПустаяСсылка);
	Данные.Вставить("ОписаниеДатыЗапрета",      ОписаниеДатыЗапрета);
	Данные.Вставить("КоличествоДнейРазрешения", КоличествоДнейРазрешения);
	Данные.Вставить("ДатаЗапрета",              ДатаЗапрета);
	Данные.Вставить("ЗаписьСуществует",         ЗаписьСуществует);
	
	Возврат Данные;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьОписаниеИДатуЗапрета(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.ДатыЗапрета.ТекущиеДанные;
	КонецЕсли;
	
	Если ДатаЗапретаУстановлена(ТекущиеДанные, ТекущийПользователь, Истина) Тогда
		// Запись описания или даты запрета.
		Комментарий = КомментарийТекущегоПользователя(ЭтотОбъект);
		ЗаписатьДатуЗапретаСОписанием(
			ТекущиеДанные.Раздел,
			ТекущиеДанные.Объект,
			ТекущийПользователь,
			ВнутренняяДатаЗапрета(ТекущиеДанные),
			ВнутреннееОписаниеДатыЗапрета(ТекущиеДанные),
			Комментарий);
		ТекущиеДанные.ЗаписьСуществует = Истина;
	Иначе
		УдалитьЗаписьПользователя(
			ТекущиеДанные.Раздел,
			ТекущиеДанные.Объект,
			ТекущийПользователь);
		
		ТекущиеДанные.ЗаписьСуществует = Ложь;
	КонецЕсли;
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ДатыЗапретаИзменения"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьДатуЗапретаСОписанием(Знач Раздел, Знач Объект, Знач Пользователь, Знач ДатаЗапрета, Знач ВнутреннееОписаниеДатыЗапрета, Знач Комментарий)
	
	МенеджерЗаписи = РегистрыСведений.ДатыЗапретаИзменения.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Раздел              = Раздел;
	МенеджерЗаписи.Объект              = Объект;
	МенеджерЗаписи.Пользователь        = Пользователь;
	МенеджерЗаписи.ДатаЗапрета         = ДатаЗапрета;
	МенеджерЗаписи.ОписаниеДатыЗапрета = ВнутреннееОписаниеДатыЗапрета;
	МенеджерЗаписи.Комментарий = Комментарий;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаписьПользователя(Знач Раздел, Знач Объект, Знач Пользователь)
	
	МенеджерЗаписи = РегистрыСведений.ДатыЗапретаИзменения.СоздатьМенеджерЗаписи();
	
	Если ТипЗнч(Объект) = Тип("Массив") Тогда
		Объекты = Объект;
	Иначе
		Объекты = Новый Массив;
		Объекты.Добавить(Объект);
	КонецЕсли;
	
	Для каждого ТекущийОбъект Из Объекты Цикл
		ЗаблокироватьЗаписьПользователя(ЭтотОбъект, Раздел, ТекущийОбъект, Пользователь);
	КонецЦикла;
	
	Для каждого ТекущийОбъект Из Объекты Цикл
		МенеджерЗаписи.Раздел = Раздел;
		МенеджерЗаписи.Объект = ТекущийОбъект;
		МенеджерЗаписи.Пользователь = Пользователь;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
	КонецЦикла;
	
	РазблокироватьВсеЗаписи(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаличиеДатЗапретаТекущегоПользователя()
	
	Если Элементы.Пользователи.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.Пользователи.ТекущиеДанные;
	
	БезДатыЗапрета = Истина;
	Если СпособУказанияДатыЗапрета = "ОбщаяДата" Тогда
		Данные = ТекущиеДанныеОбщейДатыЗапрета();
		БезДатыЗапрета = Не ДатаЗапретаУстановлена(Данные, ТекущийПользователь);
	Иначе
		Для каждого Строка Из ДатыЗапрета.ПолучитьЭлементы() Цикл
			БезДатыЗапретаРаздела = Истина;
			Если ДатаЗапретаУстановлена(Строка, ТекущийПользователь) Тогда
				БезДатыЗапретаРаздела = Ложь;
			КонецЕсли;
			Для каждого ПодчиненнаяСтрока Из Строка.ПолучитьЭлементы() Цикл
				Если ДатаЗапретаУстановлена(ПодчиненнаяСтрока, ТекущийПользователь) Тогда
					ПодчиненнаяСтрока.БезДатыЗапрета = Ложь;
					БезДатыЗапретаРаздела = Ложь;
				Иначе
					ПодчиненнаяСтрока.БезДатыЗапрета = Истина;
				КонецЕсли;
			КонецЦикла;
			Строка.ПолноеПредставление = Строка.Представление;
			Строка.БезДатыЗапрета = БезДатыЗапретаРаздела;
			БезДатыЗапрета = БезДатыЗапрета И БезДатыЗапретаРаздела;
		КонецЦикла;
	КонецЕсли;
	
	ТекущиеДанные.БезДатыЗапрета = БезДатыЗапрета;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияВыбратьПользователей()
	
	ВыбратьПодобратьПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодобратьПользователей(Подобрать = Ложь)
	
	Если Параметры.ДатыЗапретаЗагрузкиДанных Тогда
		ВыбратьПодобратьУзлыПлановОбмена(Подобрать);
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьВнешнихПользователей Тогда
		ПоказатьВыборТипаПользователиИлиВнешниеПользователи(
			Новый ОписаниеОповещения("ВыбратьПодобратьПользователейЗавершение", ЭтотОбъект, Подобрать));
	Иначе
		ВыбратьПодобратьПользователейЗавершение(Ложь, Подобрать);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодобратьПользователейЗавершение(ВыборИПодборВнешнихПользователей, Подобрать) Экспорт
	
	Если ВыборИПодборВнешнихПользователей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока",
		?(Элементы.Пользователи.ТекущиеДанные = Неопределено,
		  Неопределено,
		  Элементы.Пользователи.ТекущиеДанные.Пользователь));
	
	Если ВыборИПодборВнешнихПользователей Тогда
		ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Истина);
	Иначе
		ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
	КонецЕсли;
	
	Если Подобрать Тогда
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		ВладелецФормы = Элементы.Пользователи;
	Иначе
		ВладелецФормы = Элементы.ПользователиПолноеПредставление;
	КонецЕсли;
	
	Если ВыборИПодборВнешнихПользователей Тогда
	
		Если СправочникВнешниеПользователиДоступен Тогда
			ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыФормы, ВладелецФормы);
		Иначе
			ПоказатьПредупреждение(, ТекстСообщенияНедостаточноПравДляВыбораВнешнихПользователей());
		КонецЕсли;
	Иначе
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, ВладелецФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодобратьУзлыПлановОбмена(Подобрать)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ВыбиратьВсеУзлы", Истина);
	ПараметрыФормы.Вставить("ПланыОбменаДляВыбора", СписокТиповПользователей.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("ТекущаяСтрока",
		?(Элементы.Пользователи.ТекущиеДанные = Неопределено,
		  Неопределено,
		  Элементы.Пользователи.ТекущиеДанные.Пользователь));
	
	Если Подобрать Тогда
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
		ВладелецФормы = Элементы.Пользователи;
	Иначе
		ВладелецФормы = Элементы.ПользователиПолноеПредставление;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ВыборУзловПлановОбмена", ПараметрыФормы, ВладелецФормы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьДанныеВыбораПользователя(Знач Текст,
                                             Знач ВключаяГруппы = Истина,
                                             Знач ВключаяВнешнихПользователей = Неопределено,
                                             Знач БезПользователей = Ложь)
	
	Возврат Пользователи.СформироватьДанныеВыбораПользователя(
		Текст,
		ВключаяГруппы,
		ВключаяВнешнихПользователей,
		БезПользователей);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВыборТипаПользователиИлиВнешниеПользователи(ОбработкаПродолжения)
	
	ВыборИПодборВнешнихПользователей = Ложь;
	
	Если ИспользоватьВнешнихПользователей Тогда
		
		СписокТиповПользователей.ПоказатьВыборЭлемента(
			Новый ОписаниеОповещения(
				"ПоказатьВыборТипаПользователиИлиВнешниеПользователиЗавершение",
				ЭтотОбъект,
				ОбработкаПродолжения),
			ТекстЗаголовкаВыборТипаДанных(),
			СписокТиповПользователей[0]);
	Иначе
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, ВыборИПодборВнешнихПользователей);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборТипаПользователиИлиВнешниеПользователиЗавершение(ВыбранныйЭлемент, ОбработкаПродолжения) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ВыборИПодборВнешнихПользователей =
			ВыбранныйЭлемент.Значение = Тип("СправочникСсылка.ВнешниеПользователи");
		
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, ВыборИПодборВнешнихПользователей);
	Иначе
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНомераКартинокПользователейДатЗапрета(ТекущаяСтрока = Неопределено)
	
	Если Параметры.ДатыЗапретаЗагрузкиДанных Тогда
		
		Для каждого Строка Из ПользователиДатЗапрета Цикл
			
			Если Строка.Пользователь
			   = Перечисления.ВидыНазначенияДатЗапрета.ДляВсехИнформационныхБаз Тогда
				
				Строка.НомерКартинки = -1;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(Строка.Пользователь) Тогда
				Строка.НомерКартинки = 0;
				
			ИначеЕсли Строка.Пользователь
			        = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Строка.Пользователь).ЭтотУзел() Тогда
				
				Строка.НомерКартинки = 1;
			Иначе
				Строка.НомерКартинки = 2;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Пользователи.ЗаполнитьНомераКартинокПользователей(
			ПользователиДатЗапрета, "Пользователь", "НомерКартинки", ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияВыбратьОбъекты()
	
	ВыбратьПодобратьОбъекты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатыЗапретаУстановитьДоступностьКоманд(Знач ДоступностьКоманд)
	
	Элементы.ДатыЗапретаИзменить.Доступность                = ДоступностьКоманд;
	Элементы.ДатыЗапретаКонтекстноеМенюИзменить.Доступность = ДоступностьКоманд;
	
	Если СпособУказанияДатыЗапрета = "ПоОбъектам" Тогда
		ДоступностьКоманд = Истина;
	КонецЕсли;
	
	Элементы.ДатыЗапретаПодобрать.Доступность = ДоступностьКоманд;
	
	Элементы.ДатыЗапретаДобавить.Доступность                = ДоступностьКоманд;
	Элементы.ДатыЗапретаКонтекстноеМенюДобавить.Доступность = ДоступностьКоманд;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодобратьОбъекты(Подобрать = Ложь)
	
	ТекущиеДанные = Элементы.ДатыЗапрета.ТекущиеДанные;
	
	// Выбор типа данных
	ТекущийРаздел = ТекущийРаздел(, Истина);
	Если ТекущийРаздел = РазделПустаяСсылка Тогда
		ПоказатьПредупреждение(, ТекстСообщенияВВыбранномРазделеДатыЗапретаДляОбъектовНеУстанавливаются());
		Возврат;
	КонецЕсли;
	ТипыОбъектовРаздела = ТипыОбъектовРазделов.Получить(ТекущийРаздел);
	Если ТипыОбъектовРаздела = Неопределено Или ТипыОбъектовРаздела.Количество() = 0 Тогда
		ПоказатьПредупреждение(, ТекстСообщенияВВыбранномРазделеДатыЗапретаДляОбъектовНеУстанавливаются());
		Возврат;
	КонецЕсли;
	
	СписокТипов = Новый СписокЗначений;
	Для Каждого СвойстваТипа Из ТипыОбъектовРаздела Цикл
		СписокТипов.Добавить(СвойстваТипа.ПолноеИмя, СвойстваТипа.Представление);
	КонецЦикла;
	
	Если СписокТипов.Количество() = 1 Тогда
		ВыбратьПодобратьОбъектыЗавершение(СписокТипов[0], Подобрать);
	Иначе
		СписокТипов.ПоказатьВыборЭлемента(
			Новый ОписаниеОповещения("ВыбратьПодобратьОбъектыЗавершение", ЭтотОбъект, Подобрать),
			ТекстЗаголовкаВыборТипаДанных(),
			СписокТипов[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодобратьОбъектыЗавершение(Элемент, Подобрать) Экспорт
	
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДатыЗапрета.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока",
		?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Объект));
	
	Если Подобрать Тогда
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		ВладелецФормы = Элементы.ДатыЗапрета;
	Иначе
		ВладелецФормы = Элементы.ДатыЗапретаПолноеПредставление;
	КонецЕсли;
	
	ОткрытьФорму(Элемент.Значение + ".ФормаВыбора", ПараметрыФормы, ВладелецФормы);
	
КонецПроцедуры

&НаКлиенте
Функция ТекстВопросаОНесохраненныхДанных(БезПроверкиПользователей = Ложь)
	
	ВсеПользователиВыбраны                = Истина;
	ВсеОбъектыВыбраны                     = Истина;
	ВсеДатыЗапретаПоОбъектамЗаполнены     = Истина;
	ВсеДатыЗапретаПоРазделамЗаполнены     = Истина;
	ВсеПользователиСНастройкамиДатЗапрета = Истина;
	
	Если НЕ БезПроверкиПользователей
	   И ПользователиДатЗапрета.НайтиСтроки(Новый Структура("Представление", "")).Количество() > 0 Тогда
		
		ВсеПользователиВыбраны = Ложь;
	Иначе
		Если НЕ БезРазделовИОбъектов Тогда
			Если ПоказыватьРазделыТекущегоПользователя Тогда
				Для каждого ОписаниеРаздела Из ДатыЗапрета.ПолучитьЭлементы() Цикл
					Для каждого ОписаниеОбъекта Из ОписаниеРаздела.ПолучитьЭлементы() Цикл
						Если ОписаниеОбъекта.ЗаписьСуществует Тогда
							Продолжить;
						КонецЕсли;
						Если ЗначениеЗаполнено(ОписаниеОбъекта.Представление)Тогда
							Если НЕ ДатаЗапретаУстановлена(ОписаниеОбъекта, ТекущийПользователь) Тогда
								ВсеДатыЗапретаПоОбъектамЗаполнены = Ложь;
							КонецЕсли;
						Иначе
							ВсеОбъектыВыбраны = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НЕ НазначениеДляВсех(ТекущийПользователь) Тогда
						Если ОписаниеРаздела.ПолучитьЭлементы().Количество() = 0 
						   И НЕ ДатаЗапретаУстановлена(ОписаниеРаздела, ТекущийПользователь) Тогда
							ВсеДатыЗапретаПоРазделамЗаполнены = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для каждого ОписаниеОбъекта Из ДатыЗапрета.ПолучитьЭлементы() Цикл
					Если ОписаниеОбъекта.ЗаписьСуществует Тогда
						Продолжить;
					КонецЕсли;
					Если ЗначениеЗаполнено(ОписаниеОбъекта.Представление) Тогда
						Если НЕ НазначениеДляВсех(ТекущийПользователь)
						   И НЕ ДатаЗапретаУстановлена(ОписаниеОбъекта, ТекущийПользователь) Тогда
							
							ВсеДатыЗапретаПоОбъектамЗаполнены = Ложь;
						КонецЕсли;
					Иначе
						ВсеОбъектыВыбраны = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если НЕ БезПроверкиПользователей
			   И ВсеДатыЗапретаПоРазделамЗаполнены
			   И ВсеДатыЗапретаПоОбъектамЗаполнены
			   И ВсеОбъектыВыбраны Тогда
				
				НайденныеСтроки = ПользователиДатЗапрета.НайтиСтроки(
					Новый Структура("БезДатыЗапрета", Истина));
				
				Для каждого Строка Из НайденныеСтроки Цикл
					
					Если НазначениеДляВсех(Строка.Пользователь)
					   И ЗначениеЗаполнено(Строка.Представление) Тогда
						
						Продолжить;
					КонецЕсли;
					
					ВсеПользователиСНастройкамиДатЗапрета = Ложь;
					Прервать;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Предупреждение пользователя.
	ТекстВопроса = "";
	Если НЕ ВсеПользователиВыбраны Тогда
		ТекстВопроса = ТекстВопроса
			+ ТекстСообщенияНастройкиСНевыбраннымиПользователямиНеСохранены(ЭтотОбъект);
		
	ИначеЕсли НЕ ВсеОбъектыВыбраны Тогда
		ТекстВопроса = ТекстВопроса + Символы.ПС
			+ ТекстСообщенияНастройкиСНевыбраннымиОбъектамиНеСохранены();
		
	ИначеЕсли НЕ ВсеДатыЗапретаПоРазделамЗаполнены Тогда
		ТекстВопроса = ТекстВопроса + Символы.ПС
			+ ТекстСообщенияНастройкиСНезаполненнымиДатамиЗапретаДляРазделовНеСохранены();
		
	ИначеЕсли НЕ ВсеДатыЗапретаПоОбъектамЗаполнены Тогда
		ТекстВопроса = ТекстВопроса + Символы.ПС
			+ ТекстСообщенияНастройкиСНезаполненнымиДатамиЗапретаДляОбъектовНеСохранены();
		
	ИначеЕсли НЕ ВсеПользователиСНастройкамиДатЗапрета Тогда
		ТекстВопроса = ТекстВопроса + Символы.ПС
			+ ТекстСообщенияПользователиБезНастроекДатЗапретаНеСохранены();
	КонецЕсли;
	
	Возврат СокрЛ(ТекстВопроса);
	
КонецФункции

&НаКлиенте
Функция ТекстУведомленияОНеиспользованныхРежимахНастройки()
	
	Если Не ЗначениеЗаполнено(ТекущийПользователь) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановкаДатыЗапретаВБазеДанных = "";
	СпособУказанияВБазеДанных = "";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НачалоДня",                    НачалоДня);
	ДополнительныеПараметры.Вставить("ДатыЗапретаЗагрузкиДанных",    Параметры.ДатыЗапретаЗагрузкиДанных);
	ДополнительныеПараметры.Вставить("Пользователь",                 ТекущийПользователь);
	ДополнительныеПараметры.Вставить("ЕдинственныйРаздел",           ЕдинственныйРаздел);
	ДополнительныеПараметры.Вставить("ЗначениеДляВсехПользователей", ЗначениеДляВсехПользователей);
	
	ПолучитьТекущиеНастройки(
		УстановкаДатыЗапретаВБазеДанных, СпособУказанияВБазеДанных, ДополнительныеПараметры);
	
	// Уведомление пользователя
	ТекстУведомления = "";
	Если УстановкаДатыЗапрета <> УстановкаДатыЗапретаВБазеДанных Тогда
		
		ЭлементСписка = Элементы.УстановкаДатыЗапрета.СписокВыбора.НайтиПоЗначению(
			УстановкаДатыЗапрета);
		
		Если ЭлементСписка = Неопределено Тогда
			УстановкаДатыЗапретаПредставление = УстановкаДатыЗапрета;
		Иначе
			УстановкаДатыЗапретаПредставление = ЭлементСписка.Представление;
		КонецЕсли;
		
		ЭлементСписка = Элементы.УстановкаДатыЗапрета.СписокВыбора.НайтиПоЗначению(
			УстановкаДатыЗапретаВБазеДанных);
		
		Если ЭлементСписка = Неопределено Тогда
			УстановкаДатыЗапретаВБазеДанныхПредставление = УстановкаДатыЗапретаВБазеДанных;
		Иначе
			УстановкаДатыЗапретаВБазеДанныхПредставление = ЭлементСписка.Представление;
		КонецЕсли;
		
		ТекстУведомления = ТекстСообщенияУстановкаДатыЗапретаНеИспользован(
			УстановкаДатыЗапретаПредставление, УстановкаДатыЗапретаВБазеДанныхПредставление);
	КонецЕсли;
	
	Если НазначениеДляВсех(ТекущийПользователь)
	   И СпособУказанияВБазеДанных = "" Тогда
		
		СпособУказанияВБазеДанных = "ОбщаяДата";
	КонецЕсли;
	
	Если СпособУказанияДатыЗапрета <> СпособУказанияВБазеДанных
	   И УстановкаДатыЗапретаВБазеДанных <> "НетЗапрета"
	   И (УстановкаДатыЗапрета = УстановкаДатыЗапретаВБазеДанных
	      ИЛИ НазначениеДляВсех(ТекущийПользователь) ) Тогда
		
		Если ЗначениеЗаполнено(ТекстУведомления) Тогда
			ТекстУведомления = ТекстУведомления + Символы.ПС + Символы.ПС;
		КонецЕсли;
		
		ЭлементСписка = Элементы.СпособУказанияДатыЗапрета.СписокВыбора.НайтиПоЗначению(
			СпособУказанияДатыЗапрета);
		
		Если ЭлементСписка = Неопределено Тогда
			СпособУказанияПредставление = СпособУказанияДатыЗапрета;
		Иначе
			СпособУказанияПредставление = ЭлементСписка.Представление;
		КонецЕсли;
		
		ЭлементСписка = Элементы.СпособУказанияДатыЗапрета.СписокВыбора.НайтиПоЗначению(
			СпособУказанияВБазеДанных);
		
		Если ЭлементСписка = Неопределено Тогда
			СпособУказанияВБазеДанныхПредставление = СпособУказанияВБазеДанных;
		Иначе
			СпособУказанияВБазеДанныхПредставление = ЭлементСписка.Представление;
		КонецЕсли;
		
		Если СпособУказанияВБазеДанныхПредставление <> "" Тогда
			ТекстУведомления = ТекстУведомления + ТекстСообщенияСпособУказанияНеИспользован(
				СпособУказанияПредставление,
				СпособУказанияВБазеДанныхПредставление,
				ТекущийПользователь,
				ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстУведомления;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьТекущиеНастройки(УстановкаДатыЗапрета, СпособУказания, Знач Параметры)
	
	УстановкаДатыЗапрета = ТекущаяУстановкаДатыЗапрета(Параметры.ДатыЗапретаЗагрузкиДанных);
	Если УстановкаДатыЗапрета = "НетЗапрета" Тогда
		Возврат;
	КонецЕсли;
	
	СпособУказания = ТекущийСпособУказанияДатыЗапрета(
		Параметры.Пользователь,
		Параметры.ЕдинственныйРаздел,
		Параметры.ЗначениеДляВсехПользователей,
		Параметры.НачалоДня);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекущаяУстановкаДатыЗапрета(ДатыЗапретаЗагрузкиДанных)
	
	НачатьТранзакцию();
	Попытка
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатыЗапретаЗагрузкиДанных", ДатыЗапретаЗагрузкиДанных);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗапреты
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|ГДЕ
		|	(ДатыЗапретаИзменения.Пользователь = НЕОПРЕДЕЛЕНО
		|			ИЛИ ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.Пользователи)
		|						ИЛИ ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.ГруппыПользователей)
		|						ИЛИ ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
		|						ИЛИ ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.ГруппыВнешнихПользователей)
		|						ИЛИ ДатыЗапретаИзменения.Пользователь = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей)
		|					ТОГДА &ДатыЗапретаЗагрузкиДанных = ЛОЖЬ
		|				ИНАЧЕ &ДатыЗапретаЗагрузкиДанных = ИСТИНА
		|			КОНЕЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ПоПользователям
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|ГДЕ
		|	(ДатыЗапретаИзменения.Пользователь = НЕОПРЕДЕЛЕНО
		|			ИЛИ ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.Пользователи)
		|						ИЛИ ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.ГруппыПользователей)
		|						ИЛИ ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
		|						ИЛИ ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.ГруппыВнешнихПользователей)
		|					ТОГДА &ДатыЗапретаЗагрузкиДанных = ЛОЖЬ
		|				ИНАЧЕ &ДатыЗапретаЗагрузкиДанных = ИСТИНА
		|			КОНЕЦ)
		|	И ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) <> ТИП(Перечисление.ВидыНазначенияДатЗапрета)";
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если РезультатыЗапроса[0].Пустой() Тогда
		ТекущаяУстановкаДатЗапрета = "НетЗапрета";
		
	ИначеЕсли РезультатыЗапроса[1].Пустой() Тогда
		ТекущаяУстановкаДатЗапрета = "ДляВсехПользователей";
	Иначе
		ТекущаяУстановкаДатЗапрета = "ПоПользователям";
	КонецЕсли;
	
	Возврат ТекущаяУстановкаДатЗапрета;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимость()
	
	ИзменитьВидимость(Элементы.НастройкаДатыЗапрета, УстановкаДатыЗапрета <> "НетЗапрета");
	
	Если УстановкаДатыЗапрета = "НетЗапрета" Тогда
		Возврат;
	КонецЕсли;
	
	Если УстановкаДатыЗапрета <> "ДляВсехПользователей" Тогда
		ИзменитьВидимость(Элементы.УстановкаПоПользователям, Истина);
		Элементы.ТекущийПользовательПредставление.ОтображатьЗаголовок = Истина;
	Иначе
		ИзменитьВидимость(Элементы.УстановкаПоПользователям, Ложь);
		Элементы.ТекущийПользовательПредставление.ОтображатьЗаголовок = Ложь;
	КонецЕсли;
	
	Если УстановкаДатыЗапрета <> "ПоПользователям" Тогда
		Элементы.ДанныеПользователя.ТекущаяСтраница = Элементы.СтраницаПользовательВыбран;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимость(Элемент, Видимость)
	
	Если Элемент.Видимость <> Видимость Тогда
		Элемент.Видимость = Видимость;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзменитьУстановкуДатыЗапрета(Знач ВыбранноеЗначение, Знач УдалитьЛишнее)
	
	Если УдалитьЛишнее Тогда
		
		НачатьТранзакцию();
		Попытка
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДатыЗапретаЗагрузкиДанных",
				Параметры.ДатыЗапретаЗагрузкиДанных);
			
			Если ВыбранноеЗначение = "НетЗапрета" Тогда
				Запрос.УстановитьПараметр("ОставитьДляВсехПользователей", Ложь);
				
			ИначеЕсли ВыбранноеЗначение = "ДляВсехПользователей" Тогда
				Запрос.УстановитьПараметр("ОставитьДляВсехПользователей", Истина);
			Иначе
				Запрос.УстановитьПараметр("ДатыЗапретаЗагрузкиДанных", Неопределено);
			КонецЕсли;
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ДатыЗапретаИзменения.Раздел,
			|	ДатыЗапретаИзменения.Объект,
			|	ДатыЗапретаИзменения.Пользователь
			|ИЗ
			|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
			|ГДЕ
			|	(ДатыЗапретаИзменения.Пользователь = НЕОПРЕДЕЛЕНО
			|			ИЛИ ВЫБОР
			|				КОГДА ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.Пользователи)
			|						ИЛИ ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.группыПользователей)
			|						ИЛИ ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
			|						ИЛИ ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.группыВнешнихПользователей)
			|						ИЛИ ДатыЗапретаИзменения.Пользователь = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей)
			|					ТОГДА &ДатыЗапретаЗагрузкиДанных = ЛОЖЬ
			|				ИНАЧЕ &ДатыЗапретаЗагрузкиДанных = ИСТИНА
			|			КОНЕЦ)
			|	И ВЫБОР
			|			КОГДА ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Перечисление.ВидыНазначенияДатЗапрета)
			|				ТОГДА &ОставитьДляВсехПользователей = ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ";
			ЗначенияКлючейЗаписей = Запрос.Выполнить().Выгрузить();
			
			// Блокировка удаляемых записей.
			Для каждого ЗначенияКлючаЗаписи Из ЗначенияКлючейЗаписей Цикл
				ЗаблокироватьЗаписьПользователя(
					ЭтотОбъект,
					ЗначенияКлючаЗаписи.Раздел,
					ЗначенияКлючаЗаписи.Объект,
					ЗначенияКлючаЗаписи.Пользователь);
			КонецЦикла;
			
			// Удаление заблокированных записей.
			Для каждого ЗначенияКлючаЗаписи Из ЗначенияКлючейЗаписей Цикл
				УдалитьЗаписьПользователя(
					ЗначенияКлючаЗаписи.Раздел,
					ЗначенияКлючаЗаписи.Объект,
					ЗначенияКлючаЗаписи.Пользователь);
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			РазблокироватьВсеЗаписи(ЭтотОбъект);
			ВызватьИсключение;
		КонецПопытки;
		РазблокироватьВсеЗаписи(ЭтотОбъект);
	КонецЕсли;
	
	ПрочитатьПользователей();
	ПрочитатьДанныеПользователя(ЭтотОбъект);
	
	УстановитьВидимость();
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекущийСпособУказанияДатыЗапрета(Знач Пользователь, Знач ЕдинственныйРаздел, Знач ЗначениеДляВсехПользователей, Знач НачалоДня, Данные = Неопределено)
	
	НачатьТранзакцию();
	Попытка
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь",                 Пользователь);
		Запрос.УстановитьПараметр("ЕдинственныйРаздел",           ЕдинственныйРаздел);
		Запрос.УстановитьПараметр("ПустаяДата",                   '00000000');
		Запрос.УстановитьПараметр("ЗначениеДляВсехПользователей", ЗначениеДляВсехПользователей);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|ГДЕ
		|	НЕ(&Пользователь <> ДатыЗапретаИзменения.Пользователь
		|				И &Пользователь <> ""*"")
		|	И НЕ(ДатыЗапретаИзменения.Раздел = ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка)
		|				И ДатыЗапретаИзменения.Объект = ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|ГДЕ
		|	НЕ(&Пользователь <> ДатыЗапретаИзменения.Пользователь
		|				И &Пользователь <> ""*"")
		|	И ДатыЗапретаИзменения.Раздел <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка)
		|	И ДатыЗапретаИзменения.Объект <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка)
		|	И ДатыЗапретаИзменения.Объект <> ДатыЗапретаИзменения.Раздел
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|ГДЕ
		|	НЕ(&Пользователь <> ДатыЗапретаИзменения.Пользователь
		|				И &Пользователь <> ""*"")
		|	И ДатыЗапретаИзменения.Раздел <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка)
		|	И ДатыЗапретаИзменения.Раздел <> &ЕдинственныйРаздел
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|ГДЕ
		|	НЕ(&Пользователь <> ДатыЗапретаИзменения.Пользователь
		|				И &Пользователь <> ""*"")
		|	И ДатыЗапретаИзменения.Раздел <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка)
		|	И ДатыЗапретаИзменения.Раздел = ДатыЗапретаИзменения.Объект";
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТекущийСпособУказанияДатыЗапрета = "";
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДатыЗапретаИзменения.ДатаЗапрета,
		|	ДатыЗапретаИзменения.ОписаниеДатыЗапрета
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|ГДЕ
		|	ДатыЗапретаИзменения.Пользователь = &Пользователь
		|	И ДатыЗапретаИзменения.Раздел = ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка)
		|	И ДатыЗапретаИзменения.Объект = ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка)";
		Выборка = Запрос.Выполнить().Выбрать();
		ОбщаяДатаПрочитана = Выборка.Следующий();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если Данные = Неопределено Тогда
		Данные = Новый Структура;
		Данные.Вставить("ОписаниеДатыЗапрета", "ПроизвольнаяДата");
		Данные.Вставить("ДатаЗапрета", '00000000');
		Данные.Вставить("КоличествоДнейРазрешения", 0);
		Данные.Вставить("ЗаписьСуществует", ОбщаяДатаПрочитана);
	КонецЕсли;
	
	Если ОбщаяДатаПрочитана Тогда
		Данные.ДатаЗапрета = ДатыЗапретаИзмененияСлужебный.ДатаЗапретаПоОписанию(
			Выборка.ОписаниеДатыЗапрета, Выборка.ДатаЗапрета, НачалоДня);
		ЗаполнитьПоВнутреннемуОписаниюДатыЗапрета(Данные, Выборка.ОписаниеДатыЗапрета);
	КонецЕсли;
	
	Если РезультатыЗапроса[0].Пустой() Тогда
		// Нет по объектам и по разделам, когда пустой.
		ТекущийСпособУказанияДатыЗапрета = ?(ОбщаяДатаПрочитана, "ОбщаяДата", "");
		
	ИначеЕсли НЕ РезультатыЗапроса[1].Пустой() Тогда
		// Есть по объектам, когда не пустой.
		
		Если РезультатыЗапроса[2].Пустой()
		   И ЗначениеЗаполнено(ЕдинственныйРаздел) Тогда
			// Только по ЕдинственныйРаздел (без дат по разделам), когда пустой.
			ТекущийСпособУказанияДатыЗапрета = "ПоОбъектам";
		Иначе
			ТекущийСпособУказанияДатыЗапрета = "ПоРазделамИОбъектам";
		КонецЕсли;
	Иначе
		ТекущийСпособУказанияДатыЗапрета = "ПоРазделам";
	КонецЕсли;
	
	Возврат ТекущийСпособУказанияДатыЗапрета;
	
КонецФункции

&НаСервере
Функция УдалитьЛишнееПриИзмененииСпособаУказанияДатыЗапрета(Знач ВыбранноеЗначение, Знач ТекущийПользователь, Знач УстановкаДатыЗапрета)
	
	НаборЗаписей = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
	НаборЗаписей.Прочитать();
	Индекс = НаборЗаписей.Количество()-1;
	Пока Индекс >= 0 Цикл
		Запись = НаборЗаписей[Индекс];
		Если  ВыбранноеЗначение = "ОбщаяДата" Тогда
			Если НЕ (  Запись.Раздел = РазделПустаяСсылка
					 И Запись.Объект = РазделПустаяСсылка ) Тогда
				НаборЗаписей.Удалить(Запись);
			КонецЕсли;
		ИначеЕсли ВыбранноеЗначение = "ПоРазделам" Тогда
			Если Запись.Раздел <> Запись.Объект
			 ИЛИ Запись.Раздел = РазделПустаяСсылка
			   И Запись.Объект = РазделПустаяСсылка Тогда
				НаборЗаписей.Удалить(Запись);
			КонецЕсли;
		ИначеЕсли ВыбранноеЗначение = "ПоОбъектам" Тогда
			Если Запись.Раздел = Запись.Объект
			   И Запись.Раздел <> РазделПустаяСсылка
			   И Запись.Объект <> РазделПустаяСсылка Тогда
				НаборЗаписей.Удалить(Запись);
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс-1;
	КонецЦикла;
	НаборЗаписей.Записать();
	
	ПрочитатьДанныеПользователя(ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ВыбратьРазделы()
	
	КоллекцияДанных = ДатыЗапрета.ПолучитьЭлементы();
	
	РазделНеНайден = Истина;
	РазделыДляОтметки = Новый СписокЗначений;
	Для каждого ЭлементКоллекции Из КоллекцияДанных Цикл
		Если ЭлементКоллекции.Раздел = РазделПустаяСсылка Тогда
			РазделНеНайден = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если РазделНеНайден Тогда
		РазделыДляОтметки.Добавить(РазделПустаяСсылка, ТекстПредставленияОбщейДаты());
	КонецЕсли;
	
	Если СпособУказанияДатыЗапрета <> "ПоОбъектам" Тогда
		Для Каждого КлючИЗначение Из ТипыОбъектовРазделов Цикл
			Раздел = КлючИЗначение.Ключ;
			РазделНеНайден = Истина;
			Для Каждого ЭлементКоллекции Из КоллекцияДанных Цикл
				Если ЭлементКоллекции.Раздел = Раздел Тогда
					РазделНеНайден = Ложь;
				КонецЕсли;
			КонецЦикла;
			Если РазделНеНайден Тогда
				РазделыДляОтметки.Добавить(Раздел);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если РазделыДляОтметки.Количество() = 0 Тогда
		Если СпособУказанияДатыЗапрета = "ПоОбъектам" Тогда
			ПоказатьПредупреждение(, ТекстСообщенияОбщаяДатаУжеПоказана());
		Иначе
			ПоказатьПредупреждение(, ТекстСообщенияВсеРазделыУжеПоказаны());
		КонецЕсли;
	Иначе
		РазделыДляОтметки.ПоказатьОтметкуЭлементов(
			Новый ОписаниеОповещения("ВыбратьРазделыЗавершение", ЭтотОбъект, РазделыДляОтметки),
			ЗаголовокВыборТребуемыхРазделов());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРазделыЗавершение(Результат, РазделыДляОтметки) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НетОтмеченных = Истина;
	Для Каждого ЭлементСписка Из РазделыДляОтметки Цикл
		Если ЭлементСписка.Пометка Тогда
			НетОтмеченных = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НетОтмеченных Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьРазделы(РазделыДляОтметки, Элементы.Пользователи.ТекущиеДанные.Комментарий);
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ДатыЗапретаИзменения"));
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРазделы(ОтмеченныеРазделы, Комментарий)
	
	ДатыЗапретаДерево = РеквизитФормыВЗначение("ДатыЗапрета");
	
	Для каждого ОписаниеРаздела Из ОтмеченныеРазделы Цикл
		Если ОписаниеРаздела.Пометка Тогда
			ЗаблокироватьИЗаписатьПустыеДаты(
				ОписаниеРаздела.Значение,
				ОписаниеРаздела.Значение,
				ТекущийПользователь, Комментарий);
			
			ЭлементДанных = ДатыЗапретаДерево.Строки.Добавить();
			ЭлементДанных.ЭтоРаздел = Истина;
			ЭлементДанных.Раздел = ОписаниеРаздела.Значение;
			ЭлементДанных.Объект = ОписаниеРаздела.Значение;
			Если ОписаниеРаздела.Значение = РазделПустаяСсылка Тогда
				ЭлементДанных.Представление = ТекстПредставленияОбщейДаты();
			Иначе
				ЭлементДанных.Представление = Строка(ОписаниеРаздела.Значение);
			КонецЕсли;
			ЭлементДанных.ПолноеПредставление = ЭлементДанных.Представление;
			ЭлементДанных.ОписаниеДатыЗапрета = "ПроизвольнаяДата";
			
			ЭлементДанных.ОписаниеДатыЗапретаПредставление =
				ПредставлениеОписанияДатыЗапрета(ЭлементДанных);
		
			ЭлементДанных.ЗаписьСуществует = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ДатыЗапретаДерево.Строки.Сортировать("ПолноеПредставление Возр");
	
	ЗначениеВРеквизитФормы(ДатыЗапретаДерево, "ДатыЗапрета");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДатуЗапретаВФорме()
	
	ВыделенныеСтроки = Элементы.ДатыЗапрета.ВыделенныеСтроки;
	// Отмена выделения строк разделов с объектами.
	Индекс = ВыделенныеСтроки.Количество()-1;
	ОбновитьВыделение = Ложь;
	Пока Индекс >= 0 Цикл
		Строка = ДатыЗапрета.НайтиПоИдентификатору(ВыделенныеСтроки[Индекс]);
		Если НЕ ЗначениеЗаполнено(Строка.Представление) Тогда
			ВыделенныеСтроки.Удалить(Индекс);
			ОбновитьВыделение = Истина;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, ТекстСообщенияВыделенныеСтрокиНеЗаполнены());
		Возврат;
	КонецЕсли;
	
	Если ОбновитьВыделение Тогда
		Элементы.ДатыЗапрета.Обновить();
		ПоказатьПредупреждение(
			Новый ОписаниеОповещения("РедактироватьДатуЗапретаВФормеЗавершение", ЭтотОбъект, ВыделенныеСтроки),
			ТекстСообщенияСнятоВыделениеСНезаполненныхСтрок());
	Иначе
		РедактироватьДатуЗапретаВФормеЗавершение(ВыделенныеСтроки)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДатуЗапретаВФормеЗавершение(ВыделенныеСтроки) Экспорт
	
	// Блокировка записей выделенных строк.
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ТекущиеДанные = ДатыЗапрета.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		ПрочитанныеСвойства = ЗаблокироватьЗаписьПользователя(
			ЭтотОбъект, ТекущийРаздел(ТекущиеДанные), ТекущиеДанные.Объект, ТекущийПользователь);
		
		ОбновитьЗначенияПрочитанныхСвойств(
			ТекущиеДанные, ПрочитанныеСвойства, Элементы.Пользователи.ТекущиеДанные);
	КонецЦикла;
	
	// Изменение описания даты запрета.
	ПараметрыФормы = Новый Структура;
	Если УстановкаДатыЗапрета = "ПоПользователям" Тогда
		ПараметрыФормы.Вставить("ПользовательПредставление",
			Элементы.Пользователи.ТекущиеДанные.Представление);
	Иначе
		ПараметрыФормы.Вставить("ПользовательПредставление",
			ТекстПредставленияДляВсехПользователей(ЭтотОбъект));
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() = 1 Тогда
		Если СпособУказанияДатыЗапрета = "ПоОбъектам" Тогда
			
			Если Элементы.ДатыЗапрета.ТекущиеДанные.ЭтоРаздел Тогда
				ПараметрыФормы.Вставить("РазделПредставление",
					Элементы.ДатыЗапрета.ТекущиеДанные.Представление);
				ПараметрыФормы.Вставить("ОбъектПредставление", "");
			Иначе
				ПараметрыФормы.Вставить("РазделПредставление", "");
				ПараметрыФормы.Вставить("ОбъектПредставление",
					Элементы.ДатыЗапрета.ТекущиеДанные.Представление);
			КонецЕсли;
		Иначе
			Если Элементы.ДатыЗапрета.ТекущиеДанные.ЭтоРаздел Тогда
				ПараметрыФормы.Вставить("РазделПредставление",
					Элементы.ДатыЗапрета.ТекущиеДанные.Представление);
				
				РазделБезОбъектов = РазделыБезОбъектов.Найти(
					Элементы.ДатыЗапрета.ТекущиеДанные.Раздел) <> Неопределено;
				
				Если НЕ РазделБезОбъектов
				   И НазначениеДляВсех(ТекущийПользователь) Тогда
					
					ПараметрыФормы.Вставить("РазрешитьПоУмолчанию", Истина);
				КонецЕсли;
			Иначе
				ПараметрыФормы.Вставить("РазделПредставление",
					Элементы.ДатыЗапрета.ТекущиеДанные.ПолучитьРодителя().Представление);
				
				ПараметрыФормы.Вставить("ОбъектПредставление",
					Элементы.ДатыЗапрета.ТекущиеДанные.Представление);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПараметрыФормы.Вставить("РазделПредставление", "<...>");
		ПараметрыФормы.Вставить("ОбъектПредставление", "<...>");
	КонецЕсли;
	ПараметрыФормы.Вставить("ОписаниеДатыЗапрета",
		Элементы.ДатыЗапрета.ТекущиеДанные.ОписаниеДатыЗапрета);
	
	ПараметрыФормы.Вставить("КоличествоДнейРазрешения",
		Элементы.ДатыЗапрета.ТекущиеДанные.КоличествоДнейРазрешения);
	
	ПараметрыФормы.Вставить("ДатаЗапрета",
		Элементы.ДатыЗапрета.ТекущиеДанные.ДатаЗапрета);
	
	ОткрытьФорму("РегистрСведений.ДатыЗапретаИзменения.Форма.РедактированиеДатыЗапрета",
		ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеОписанияДатыЗапрета(Знач Данные)
	
	Представление = СписокОписанийДатыЗапрета().НайтиПоЗначению(
		Данные.ОписаниеДатыЗапрета).Представление;
	
	Если Данные.КоличествоДнейРазрешения > 0 Тогда
		Представление = Представление + " (" + Формат(Данные.КоличествоДнейРазрешения, "ЧГ=") + ")";
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВнутренняяДатаЗапрета(Данные)
	
	Если ЗначениеЗаполнено(Данные.ОписаниеДатыЗапрета)
	   И Данные.ОписаниеДатыЗапрета <> "ПроизвольнаяДата" Тогда
		
		Возврат '00020202'; // Сохраняемое значение относительной даты запрета.
	КонецЕсли;
	
	Возврат Данные.ДатаЗапрета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВнутреннееОписаниеДатыЗапрета(Знач Данные)
	
	ВнутреннееОписание = "";
	Если Данные.ОписаниеДатыЗапрета <> "ПроизвольнаяДата" Тогда
		ВнутреннееОписание = СокрЛП(
			Данные.ОписаниеДатыЗапрета + Символы.ПС
				+ Формат(Данные.КоличествоДнейРазрешения, "ЧГ=0"));
	КонецЕсли;
	
	Возврат ВнутреннееОписание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПоВнутреннемуОписаниюДатыЗапрета(Знач Данные, Знач ВнутреннееОписание)
	
	Данные.ОписаниеДатыЗапрета = "ПроизвольнаяДата";
	Данные.КоличествоДнейРазрешения = 0;
	
	Если ЗначениеЗаполнено(ВнутреннееОписание) Тогда
		Строка1 = СтрПолучитьСтроку(ВнутреннееОписание, 1);
		Строка2 = СтрПолучитьСтроку(ВнутреннееОписание, 2);
		НайденныйЭлемент = СписокОписанийДатыЗапрета().НайтиПоЗначению(Строка1);
		Если НайденныйЭлемент = Неопределено Тогда
			Данные.ДатаЗапрета = '00030303'; // Неизвестный формат.
		Иначе
			Данные.ОписаниеДатыЗапрета = НайденныйЭлемент.Значение;
			Если ЗначениеЗаполнено(Строка2) Тогда
				ОписаниеТипаЧисло = Новый ОписаниеТипов("Число",,,
					Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный));
				Данные.КоличествоДнейРазрешения = ОписаниеТипаЧисло.ПривестиЗначение(Строка2);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НазначениеДляВсех(Пользователь)
	
	Возврат ТипЗнч(Пользователь) = Тип("ПеречислениеСсылка.ВидыНазначенияДатЗапрета");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДатаЗапретаУстановлена(Данные, Пользователь, ПередЗаписью = Ложь)
	
	Если Не ПередЗаписью Тогда
		Возврат Данные.ЗаписьСуществует;
	КонецЕсли;
	
	Если Данные.Объект <> Данные.Раздел И Не ЗначениеЗаполнено(Данные.Объект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НазначениеДляВсех(Пользователь) Тогда
		ДатаЗапретаУстановлена =
				ЗначениеЗаполнено(Данные.ДатаЗапрета)
			ИЛИ Данные.ОписаниеДатыЗапрета <> "ПроизвольнаяДата";
	Иначе
		ДатаЗапретаУстановлена =
				ЗначениеЗаполнено(Данные.ДатаЗапрета)
			ИЛИ Данные.ОписаниеДатыЗапрета <> "";
	КонецЕсли;
	
	Возврат ДатаЗапретаУстановлена;
	
КонецФункции

&НаСервере
Процедура ЗаблокироватьИЗаписатьПустыеДаты(Раздел, Объект, Пользователь, Комментарий)
	
	Если ТипЗнч(Объект) = Тип("Массив") Тогда
		ОбъектыДляДобавления = Объект;
	Иначе
		ОбъектыДляДобавления = Новый Массив;
		ОбъектыДляДобавления.Добавить(Объект);
	КонецЕсли;
	
	Для каждого ТекущийОбъект Из ОбъектыДляДобавления Цикл
		ЗаблокироватьЗаписьПользователя(ЭтотОбъект, Раздел, ТекущийОбъект, Пользователь);
	КонецЦикла;
	
	Для каждого ТекущийОбъект Из ОбъектыДляДобавления Цикл
		ЗаписатьДатуЗапретаСОписанием(
			Раздел,
			ТекущийОбъект,
			Пользователь,
			'00010101',
			"",
			Комментарий);
	КонецЦикла;
	
	РазблокироватьВсеЗаписи(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКоманднуюПанельДатЗапрета(Контекст)
	
	Элементы = Контекст.Элементы;
	
	Если НазначениеДляВсех(Контекст.ТекущийПользователь) Тогда
		Если Контекст.СпособУказанияДатыЗапрета = "ПоРазделам" Тогда
			// ДатыЗапретаБезВыбораРазделовБезВыбораОбъектов
			УстановитьСвойство(Элементы.ДатыЗапретаРазделы.Видимость,   Ложь);
			УстановитьСвойство(Элементы.ДатыЗапретаПодобрать.Видимость, Ложь);
			УстановитьСвойство(Элементы.ДатыЗапретаДобавить.Видимость,  Ложь);
			УстановитьСвойство(Элементы.ДатыЗапретаКонтекстноеМенюДобавить.Видимость, Ложь);
			УстановитьСвойство(Элементы.ДатыЗапретаИзменить.Отображение, ОтображениеКнопки.Текст);
			УстановитьСвойство(Элементы.ДатыЗапретаИзменить.ТолькоВоВсехДействиях, Ложь);
		Иначе
			// ДатыЗапретаБезВыбораРазделовСВыборомОбъектов
			УстановитьСвойство(Элементы.ДатыЗапретаРазделы.Видимость,   Ложь);
			УстановитьСвойство(Элементы.ДатыЗапретаПодобрать.Видимость, Истина);
			УстановитьСвойство(Элементы.ДатыЗапретаДобавить.Видимость,  Истина);
			УстановитьСвойство(Элементы.ДатыЗапретаКонтекстноеМенюДобавить.Видимость, Истина);
			УстановитьСвойство(Элементы.ДатыЗапретаИзменить.Отображение, ОтображениеКнопки.Авто);
			УстановитьСвойство(Элементы.ДатыЗапретаИзменить.ТолькоВоВсехДействиях, Не Контекст.ИнтерфейсВерсия82);
		КонецЕсли;
	Иначе
		Если Контекст.СпособУказанияДатыЗапрета = "ПоРазделам" Тогда
			// ДатыЗапретаСВыборомРазделовБезВыбораОбъектов
			УстановитьСвойство(Элементы.ДатыЗапретаРазделы.Видимость,   Истина);
			УстановитьСвойство(Элементы.ДатыЗапретаРазделы.Заголовок,   НСтр("ru = 'Разделы'"));
			УстановитьСвойство(Элементы.ДатыЗапретаПодобрать.Видимость, Ложь);
			УстановитьСвойство(Элементы.ДатыЗапретаДобавить.Видимость,  Ложь);
			УстановитьСвойство(Элементы.ДатыЗапретаКонтекстноеМенюДобавить.Видимость, Ложь);
			УстановитьСвойство(Элементы.ДатыЗапретаИзменить.Отображение, ОтображениеКнопки.Авто);
			УстановитьСвойство(Элементы.ДатыЗапретаИзменить.ТолькоВоВсехДействиях, Не Контекст.ИнтерфейсВерсия82);
			
		ИначеЕсли Контекст.СпособУказанияДатыЗапрета = "ПоОбъектам" Тогда
			// ДатыЗапретаСВыборомОбщейДатыСВыборомОбъектов
			УстановитьСвойство(Элементы.ДатыЗапретаРазделы.Видимость,   Истина);
			УстановитьСвойство(Элементы.ДатыЗапретаРазделы.Заголовок,   НСтр("ru = 'Общая дата'"));
			УстановитьСвойство(Элементы.ДатыЗапретаПодобрать.Видимость, Истина);
			УстановитьСвойство(Элементы.ДатыЗапретаДобавить.Видимость,  Истина);
			УстановитьСвойство(Элементы.ДатыЗапретаКонтекстноеМенюДобавить.Видимость, Истина);
			УстановитьСвойство(Элементы.ДатыЗапретаИзменить.Отображение, ОтображениеКнопки.Авто);
			УстановитьСвойство(Элементы.ДатыЗапретаИзменить.ТолькоВоВсехДействиях, Не Контекст.ИнтерфейсВерсия82);
		Иначе
			// ДатыЗапретаСВыборомРазделовСВыборомОбъектов
			УстановитьСвойство(Элементы.ДатыЗапретаРазделы.Видимость,   Истина);
			УстановитьСвойство(Элементы.ДатыЗапретаРазделы.Заголовок,   НСтр("ru = 'Разделы'"));
			УстановитьСвойство(Элементы.ДатыЗапретаПодобрать.Видимость, Истина);
			УстановитьСвойство(Элементы.ДатыЗапретаДобавить.Видимость,  Истина);
			УстановитьСвойство(Элементы.ДатыЗапретаКонтекстноеМенюДобавить.Видимость, Истина);
			УстановитьСвойство(Элементы.ДатыЗапретаДобавить.ТолькоВоВсехДействиях, Не Контекст.ИнтерфейсВерсия82);
			УстановитьСвойство(Элементы.ДатыЗапретаИзменить.Отображение, ОтображениеКнопки.Авто);
			УстановитьСвойство(Элементы.ДатыЗапретаИзменить.ТолькоВоВсехДействиях, Не Контекст.ИнтерфейсВерсия82);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойство(Свойство, Значение)
	Если Свойство <> Значение Тогда
		Свойство = Значение;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КомментарийТекущегоПользователя(Контекст)
	
	Если Контекст.УстановкаДатыЗапрета = "ПоПользователям" Тогда
		Комментарий = Контекст.Элементы.Пользователи.ТекущиеДанные.Комментарий;
	Иначе
		Комментарий = ТекстКомментарияДляВсехПользователей();
	КонецЕсли;
	
	Возврат Комментарий;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Одинаковые процедуры и функции форм ДатыЗапретаИзменения и РедактированиеДатыЗапрета.

&НаКлиентеНаСервереБезКонтекста
Процедура ОбщаяДатаЗапретаСОписаниемПриИзменении(Знач Контекст, РассчитатьДатуЗапрета = Истина);
	
	Сутки = 60*60*24;
	
	Если Контекст.ОписаниеДатыЗапрета = "ПроизвольнаяДата" Тогда
		Контекст.Элементы.СвойстваНепроизвольнойДаты.ТекущаяСтраница =
			Контекст.Элементы.НепроизвольнаяДатаНеИспользуется;
		
		Контекст.Элементы.ПроизвольнаяДата.ТекущаяСтраница =
			Контекст.Элементы.ПроизвольнаяДатаИспользуется;
		
		Контекст.РазрешитьИзменениеДанныхДоДатыЗапрета = Ложь;
		Контекст.КоличествоДнейРазрешения = 0;
	Иначе
		Контекст.Элементы.СвойстваНепроизвольнойДаты.ТекущаяСтраница =
			Контекст.Элементы.НепроизвольнаяДатаИспользуется;
		
		Контекст.Элементы.ПроизвольнаяДата.ТекущаяСтраница =
			Контекст.Элементы.ПроизвольнаяДатаНеИспользуется;
		
		Если Контекст.ОписаниеДатыЗапрета = "ПредыдущийДень" Тогда
			Контекст.Элементы.РазрешитьИзменениеДанныхДоДатыЗапрета.Доступность = Ложь;
			Контекст.РазрешитьИзменениеДанныхДоДатыЗапрета = Ложь;
		Иначе
			Контекст.Элементы.РазрешитьИзменениеДанныхДоДатыЗапрета.Доступность = Истина;
		КонецЕсли;
		РасчетныеДатыЗапрета = РасчетДатыЗапрета(
			Контекст.ОписаниеДатыЗапрета, Контекст.НачалоДня);
		
		Если РассчитатьДатуЗапрета Тогда
			Контекст.ДатаЗапрета = РасчетныеДатыЗапрета.Текущая;
		КонецЕсли;
		ТекстНадписи = "";
		Если Контекст.РазрешитьИзменениеДанныхДоДатыЗапрета Тогда
			СкорректироватьКоличествоДнейРазрешения(
				Контекст.ОписаниеДатыЗапрета, Контекст.КоличествоДнейРазрешения);
			
			Контекст.Элементы.СвойствоКоличествоДнейРазрешенияИзменения.ТекущаяСтраница =
				Контекст.Элементы.ИзменениеДанныхДоДатыЗапретаРазрешено;
			
			СрокРазрешения =
				РасчетныеДатыЗапрета.Текущая + Контекст.КоличествоДнейРазрешения * Сутки;
			
			Если Контекст.НачалоДня > СрокРазрешения Тогда
				ШаблонНадписи = НСтр("ru = 'Срок возможности изменения данных с %2 по %3 истек %1'");
			Иначе
				Если РассчитатьДатуЗапрета Тогда
					Контекст.ДатаЗапрета = РасчетныеДатыЗапрета.Предыдущая;
				КонецЕсли;
				ШаблонНадписи =
					НСтр("ru = 'По %1 возможно изменение данных с %2 по %3
					           |После %1 будет запрещено изменение данных по %3'")
					+ Символы.ПС;
			КонецЕсли;
			ТекстНадписи = Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНадписи,
				Формат(СрокРазрешения, "ДЛФ=Д"),
				Формат(РасчетныеДатыЗапрета.Предыдущая + Сутки, "ДЛФ=Д"),
				Формат(РасчетныеДатыЗапрета.Текущая, "ДЛФ=Д"));
		Иначе
			Контекст.Элементы.СвойствоКоличествоДнейРазрешенияИзменения.ТекущаяСтраница =
				Контекст.Элементы.ИзменениеДанныхДоДатыЗапретаНеРазрешено;
			
			Контекст.КоличествоДнейРазрешения = 0;
		КонецЕсли;
		Контекст.Элементы.ПояснениеНепроизвольнойДаты.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Запрещено изменение данных по %1'"),
				Формат(Контекст.ДатаЗапрета, "ДЛФ=Д"))
			+ ТекстНадписи;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РасчетДатыЗапрета(Знач ВариантДатыЗапрета, Знач НачалоДня)
	
	Сутки = 60*60*24;
	
	ТекущаяДатаЗапрета    = '00030303'; // Неизвестный формат.
	ПредыдущаяДатаЗапрета = '00030303'; // Неизвестный формат.
	
	Если ВариантДатыЗапрета = "КонецПрошлогоГода" Тогда
		ТекущаяДатаЗапрета    = НачалоГода(НачалоДня)          - Сутки;
		ПредыдущаяДатаЗапрета = НачалоГода(ТекущаяДатаЗапрета) - Сутки;
		
	ИначеЕсли ВариантДатыЗапрета = "КонецПрошлогоКвартала" Тогда
		ТекущаяДатаЗапрета    = НачалоКвартала(НачалоДня)          - Сутки;
		ПредыдущаяДатаЗапрета = НачалоКвартала(ТекущаяДатаЗапрета) - Сутки;
		
	ИначеЕсли ВариантДатыЗапрета = "КонецПрошлогоМесяца" Тогда
		ТекущаяДатаЗапрета    = НачалоМесяца(НачалоДня)          - Сутки;
		ПредыдущаяДатаЗапрета = НачалоМесяца(ТекущаяДатаЗапрета) - Сутки;
		
	ИначеЕсли ВариантДатыЗапрета = "КонецПрошлойНедели" Тогда
		ТекущаяДатаЗапрета    = НачалоНедели(НачалоДня)          - Сутки;
		ПредыдущаяДатаЗапрета = НачалоНедели(ТекущаяДатаЗапрета) - Сутки;
		
	ИначеЕсли ВариантДатыЗапрета = "ПредыдущийДень" Тогда
		ТекущаяДатаЗапрета    = НачалоДня(НачалоДня)          - Сутки;
		ПредыдущаяДатаЗапрета = НачалоДня(ТекущаяДатаЗапрета) - Сутки;
	КонецЕсли;
	
	Возврат Новый Структура("Текущая, Предыдущая", ТекущаяДатаЗапрета, ПредыдущаяДатаЗапрета);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СкорректироватьКоличествоДнейРазрешения(Знач ОписаниеДатыЗапрета, КоличествоДнейРазрешения)
	
	Если КоличествоДнейРазрешения = 0 Тогда
		КоличествоДнейРазрешения = 1;
		
	ИначеЕсли ОписаниеДатыЗапрета = "КонецПрошлогоГода" Тогда
		Если КоличествоДнейРазрешения > 90 Тогда
			КоличествоДнейРазрешения = 90;
		КонецЕсли;
		
	ИначеЕсли ОписаниеДатыЗапрета = "КонецПрошлогоКвартала" Тогда
		Если КоличествоДнейРазрешения > 60 Тогда
			КоличествоДнейРазрешения = 60;
		КонецЕсли;
		
	ИначеЕсли ОписаниеДатыЗапрета = "КонецПрошлогоМесяца" Тогда
		Если КоличествоДнейРазрешения > 25 Тогда
			КоличествоДнейРазрешения = 25;
		КонецЕсли;
		
	ИначеЕсли ОписаниеДатыЗапрета = "КонецПрошлойНедели" Тогда
		Если КоличествоДнейРазрешения > 5 Тогда
			КоличествоДнейРазрешения = 5;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные функции строк интерфейса пользователя.

&НаКлиентеНаСервереБезКонтекста
Функция СписокОписанийДатыЗапрета()
	
	Список = Новый СписокЗначений;
	Список.Добавить("",                "(" + НСтр("ru = 'По умолчанию'") + ")");
	Список.Добавить("ПроизвольнаяДата",      НСтр("ru = 'Произвольная дата'"));
	Список.Добавить("КонецПрошлогоГода",     НСтр("ru = 'Конец прошлого года'"));
	Список.Добавить("КонецПрошлогоКвартала", НСтр("ru = 'Конец прошлого квартала'"));
	Список.Добавить("КонецПрошлогоМесяца",   НСтр("ru = 'Конец прошлого месяца'"));
	Список.Добавить("КонецПрошлойНедели",    НСтр("ru = 'Конец прошлой недели'"));
	Список.Добавить("ПредыдущийДень",        НСтр("ru = 'Предыдущий день'"));
	
	Возврат Список;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПредставленияДляВсехПользователей(Контекст)
	
	Возврат "<" + Контекст.ЗначениеДляВсехПользователей + ">";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПредставленияПользователя(Контекст, Пользователь)
	
	Если Контекст.Параметры.ДатыЗапретаЗагрузкиДанных Тогда
		Для каждого ЗначениеСписка Из Контекст.СписокТиповПользователей Цикл
			Если ТипЗнч(ЗначениеСписка.Значение) = ТипЗнч(Пользователь) Тогда
				Если ЗначениеЗаполнено(Пользователь) Тогда
					Возврат ЗначениеСписка.Представление + ": " + Строка(Пользователь);
				Иначе
					Возврат ЗначениеСписка.Представление + ": " + НСтр("ru = '<Все информационные базы>'");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Возврат Строка(Пользователь);
	КонецЕсли;
	
	Возврат Строка(ТипЗнч(Пользователь));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстКомментарияДляВсехПользователей()
	
	Возврат "(" + НСтр("ru = 'По умолчанию'") + ")";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПредставленияОбщейДаты()
	
	Возврат "<" + НСтр("ru = 'Общая дата'") + ">";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстВопросаЗакрытьФорму()
	
	Возврат НСтр("ru = 'Закрыть форму?'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстВопросаОбновитьДанные()
	
	Возврат НСтр("ru = 'Обновить данные?'");
	
КонецФункции

&НаКлиенте
Функция ТекстВопросаУдалитьВсеДатыЗапретаКромеДатДляВсехПользователей()
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Удалить все даты запрета, кроме установленных %1?'"),
		ЗначениеДляВсехПользователей);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстВопросаУдалитьВсеДатыЗапрета()
	
	Возврат НСтр("ru = 'Удалить все даты запрета?'");
	
КонецФункции

&НаКлиенте
Функция ТекстСообщенияЗначениеДляВсехПользователейНеИзменяется()
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Значение %1 не изменяется.'"),
		ТекстПредставленияДляВсехПользователей(ЭтотОбъект));
	
КонецФункции

&НаКлиенте
Функция ТекстСообщенияКомментарийДляВсехПользователейНеИзменяется()
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Комментарий %1 не изменяется.'"),
		ТекстПредставленияДляВсехПользователей(ЭтотОбъект));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияСначалаВыберитеПользователя()
	
	Возврат НСтр("ru = 'Сначала выберите пользователя.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияУстановкаДатыЗапретаНеИспользован(УстановкаДатыЗапретаВФорме, УстановкаДатыЗапретаВБазеДанных)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Установка даты запрета ""%1"" не настроена,
		           |поэтому будет сохранена установка даты запрета ""%2"".'"),
		УстановкаДатыЗапретаВФорме,
		УстановкаДатыЗапретаВБазеДанных);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияСпособУказанияНеИспользован(СпособУказанияВФорме, СпособУказанияВБазеДанных, ТекущийПользователь, Форма)
	
	Если НазначениеДляВсех(ТекущийПользователь) Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Способ указания даты запрета ""%1""
			           |не настроен ""%2"", поэтому будет сохранен
			           |способ указания даты запрета ""%3"".'"),
			СпособУказанияВФорме,
			ТекстПредставленияДляВсехПользователей(Форма),
			СпособУказанияВБазеДанных);
	Иначе
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Способ указания даты запрета ""%1""
			           |не настроен для ""%2"", поэтому будет сохранен
			           |способ указания даты запрета ""%3"".'"),
			СпособУказанияВФорме,
			ТекущийПользователь,
			СпособУказанияВБазеДанных);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстВопросаОчиститьНезаполненныеСтроки()
	
	Возврат НСтр("ru = 'Очистить незаполненные строки?'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияДляУдаленияВыделитеОднуСтроку()
	
	Возврат НСтр("ru = 'Для удаления выделите одну строку.'");
	
КонецФункции

&НаКлиенте
Функция ТекстВопросаУдалитьДатыЗапретаДляВсехПользователей()
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Удалить даты запрета %1?'"),
		НРег(ЗначениеДляВсехПользователей));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстВопросаУдалитьДатыЗапретаДляПользователя()
	
	Возврат НСтр("ru = 'Удалить даты запрета для пользователя?'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстВопросаУдалитьДатыЗапретаДляГруппыПользователей()
	
	Возврат НСтр("ru = 'Удалить даты запрета для группы пользователей?'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстВопросаУдалитьДатыЗапретаДляВнешнегоПользователя()
	
	Возврат НСтр("ru = 'Удалить даты запрета для внешнего пользователя?'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстВопросаУдалитьДатыЗапретаДляГруппыВнешнихПользователей()
	
	Возврат НСтр("ru = 'Удалить даты запрета для группы внешних пользователей?'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстВопросаУдалитьДатыЗапрета()
	
	Возврат НСтр("ru = 'Удалить даты запрета?'");
	
КонецФункции

&НаКлиенте
Функция ТекстСообщенияДляВсехПользователейДатыЗапретаНеУстановлены()
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 даты запрета не установлены.'"),
		ЗначениеДляВсехПользователей);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияЗначениеУжеДобавленоВСписок()
	
	Возврат НСтр("ru = 'Значение уже добавлено в список.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияОбновитьДанныеФормыF5()
	
	Возврат НСтр("ru = 'Обновите данные формы (F5).'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстВопросаУдалитьДатыЗапретаДляРазделовИОбъектов()
	
	Возврат НСтр("ru = 'Удалить даты запрета для разделов и объектов?'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстВопросаУдалитьДатыЗапретаДляОбъектов()
	
	Возврат НСтр("ru = 'Удалить даты запрета для объектов?'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстВопросаУдалитьДатыЗапретаДляРазделов()
	
	Возврат НСтр("ru = 'Удалить даты запрета для разделов?'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияВВыбранномРазделеДатыЗапретаДляОбъектовНеУстанавливаются()
	
	Возврат НСтр("ru = 'В выбранном разделе даты запрета для объектов не устанавливаются.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияОбщаяДатаМожетБытьУстановлена()
	
	Возврат НСтр("ru = '<Общая дата> может быть установлена.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияРазделыУжеЗаполненыМожноУстановитьДатыЗапретаДляРазделов()
	
	Возврат НСтр("ru = 'Разделы уже заполнены,
	                   |можно установить даты запрета
	                   |для разделов.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияРазделыУжеЗаполненыМожноУстановитьДатыЗапретаДляРазделовИОбъектов()
	
	Возврат НСтр("ru = 'Разделы уже заполнены,
	                   |можно установить даты запрета
	                   |для разделов и объектов.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияОбъектУжеВыбранМожноУстановитьДатуЗапрета()
	
	Возврат НСтр("ru = 'Объект уже выбран,
	                   |можно установить дату запрета.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияСначалаВыберитеОбъект()
	
	Возврат НСтр("ru = 'Сначала выберите объект.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстВопросаУдалитьДатыЗапретаДляРазделаИОбъектов()
	
	Возврат НСтр("ru = 'Удалить даты запрета для раздела и объектов?'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстВопросаУдалитьДатыЗапретаДляРаздела()
	
	Возврат НСтр("ru = 'Удалить дату запрета для раздела?'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстВопросаУдалитьОбщуюДатуЗапрета()
	
	Возврат НСтр("ru = 'Удалить общую дату запрета?'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстВопросаУдалитьДатуЗапретаОбъекта()
	
	Возврат НСтр("ru = 'Удалить дату запрета для объекта?'");
	
КонецФункции

&НаКлиенте
Функция ТекстСообщенияДляВсехПользователейРазделыВсегдаПоказываются()
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 разделы всегда показываются.'"),
		ЗначениеДляВсехПользователей);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияПриУдаленииДатаЗапретаОчищается()
	
	Возврат НСтр("ru = 'При удалении дата запрета очищается.'");
	
КонецФункции

&НаКлиенте
Функция ТекстСообщенияДляВсехПользователейОбщаяДатаВсегдаПоказывается()
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 <Общая дата> всегда показывается.'"),
		ЗначениеДляВсехПользователей);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстЗаголовкаРаздела()
	
	Возврат НСтр("ru = 'Раздел'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстЗаголовкаРазделаСОбъектами()
	
	Возврат НСтр("ru = 'Раздел, объект'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияНедостаточноПравДляВыбораВнешнихПользователей()
	
	Возврат НСтр("ru = 'Недостаточно прав для выбора внешних пользователей.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстЗаголовкаВыборТипаДанных()
	
	Возврат НСтр("ru = 'Выбор типа данных'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияНастройкиСНевыбраннымиПользователямиНеСохранены(Контекст)
	
	Если Контекст.Параметры.ДатыЗапретаЗагрузкиДанных Тогда
		Возврат НСтр("ru = 'Настройки с невыбранными информационными базами не сохранены.'");
	КонецЕсли;
	
	Возврат НСтр("ru = 'Настройки с невыбранными пользователями не сохранены.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияНастройкиСНевыбраннымиОбъектамиНеСохранены()
	
	Возврат НСтр("ru = 'Настройки с невыбранными объектами не сохранены.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияНастройкиСНезаполненнымиДатамиЗапретаДляОбъектовНеСохранены()
	
	Возврат НСтр("ru = 'Настройки с незаполненными датами запрета для объектов не сохранены.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияПользователиБезНастроекДатЗапретаНеСохранены()
	
	Возврат НСтр("ru = 'Пользователи без настроек дат запрета не сохранены.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияНастройкиСНезаполненнымиДатамиЗапретаДляРазделовНеСохранены()
	
	Возврат НСтр("ru = 'Настройки с незаполненными датами запрета для разделов не сохранены.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияОбщаяДатаУжеПоказана()
	
	Возврат НСтр("ru = '<Общая дата> уже показана.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияВсеРазделыУжеПоказаны()
	
	Возврат НСтр("ru = 'Все разделы уже показаны.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокВыборТребуемыхРазделов()
	
	Возврат НСтр("ru = 'Выбор требуемых разделов'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияСнятоВыделениеСНезаполненныхСтрок()
	
	Возврат НСтр("ru = 'Снято выделение с незаполненных строк.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияВыделенныеСтрокиНеЗаполнены()
	
	Возврат НСтр("ru ='Выделенные строки не заполнены.'");
	
КонецФункции

#КонецОбласти
